void AGX::IndirectArgumentEncoderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setTexture(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t *v31;
  unsigned int v32;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t **)(v3 + 48);
  if (!v4)
    goto LABEL_38;
  while (1)
  {
    while (1)
    {
      v7 = *((_DWORD *)v4 + 7);
      if (v7 <= a3)
        break;
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_38;
    }
    if (v7 >= a3)
      break;
    v4 = (uint64_t *)v4[1];
    if (!v4)
      goto LABEL_38;
  }
  v8 = *(uint64_t **)(v3 + 72);
  if (!v8)
    goto LABEL_38;
  v9 = *(_QWORD *)(a1 + 16) + *((unsigned int *)v4 + 8);
  while (1)
  {
    while (1)
    {
      v10 = *((_DWORD *)v8 + 7);
      if (v10 <= a3)
        break;
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_38;
    }
    if (v10 >= a3)
      break;
    v8 = (uint64_t *)v8[1];
    if (!v8)
      goto LABEL_38;
  }
  v11 = *((unsigned int *)v8 + 8);
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 536);
    v13 = *(_QWORD *)(v12 + 416);
    *(_OWORD *)v9 = *(_OWORD *)(v12 + 400);
    *(_QWORD *)(v9 + 16) = v13;
    v14 = v9 + v11;
    v15 = *(_QWORD *)(a2 + 536);
    v16 = (_OWORD *)(v15 + 424);
    v17 = *(_QWORD *)(v15 + 440);
    *(_OWORD *)v14 = *v16;
    *(_QWORD *)(v14 + 16) = v17;
    v18 = *(_QWORD *)(a2 + 536);
    v20 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v19 + *(unsigned int *)(v20 + 4)) = *(_DWORD *)v20;
    v21 = *(uint64_t **)(v20 + 96);
    if (!v21)
      goto LABEL_38;
    while (1)
    {
      while (1)
      {
        v22 = *((_DWORD *)v21 + 7);
        if (v22 <= a3)
          break;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_38;
      }
      if (v22 >= a3)
        break;
      v21 = (uint64_t *)v21[1];
      if (!v21)
        goto LABEL_38;
    }
    v23 = v19 + *((unsigned int *)v21 + 8);
    v24 = *(_OWORD *)(*(_QWORD *)(a2 + 536) + 72);
    v25 = *(_OWORD *)(*(_QWORD *)(a2 + 536) + 88);
    v26 = *(_OWORD *)(*(_QWORD *)(a2 + 536) + 104);
    *(_QWORD *)(v23 + 48) = *(_QWORD *)(*(_QWORD *)(a2 + 536) + 120);
    *(_OWORD *)(v23 + 16) = v25;
    *(_OWORD *)(v23 + 32) = v26;
    *(_OWORD *)v23 = v24;
  }
  else
  {
    *(_OWORD *)v9 = xmmword_232D73760;
    *(_QWORD *)(v9 + 16) = 0;
    v27 = v9 + v11;
    *(_OWORD *)v27 = xmmword_232D73760;
    *(_QWORD *)(v27 + 16) = 0;
    v28 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 96);
    if (!v28)
      goto LABEL_38;
    while (1)
    {
      while (1)
      {
        v29 = *((_DWORD *)v28 + 7);
        if (v29 <= a3)
          break;
        v28 = (uint64_t *)*v28;
        if (!v28)
          goto LABEL_38;
      }
      if (v29 >= a3)
        break;
      v28 = (uint64_t *)v28[1];
      if (!v28)
        goto LABEL_38;
    }
    v30 = (_DWORD *)(*(_QWORD *)(a1 + 16) + *((unsigned int *)v28 + 8));
    bzero(v30, 0x38uLL);
    v18 = 0;
    v30[12] = 0;
  }
  v31 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 144);
  if (!v31)
LABEL_38:
    abort();
  while (1)
  {
    while (1)
    {
      v32 = *((_DWORD *)v31 + 7);
      if (v32 <= a3)
        break;
      v31 = (uint64_t *)*v31;
      if (!v31)
        goto LABEL_38;
    }
    if (v32 >= a3)
      break;
    v31 = (uint64_t *)v31[1];
    if (!v31)
      goto LABEL_38;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + *((unsigned int *)v31 + 8)) = v18;
}

void sub_232CA1530(_Unwind_Exception *a1)
{
  id *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void ___ZN3AGX25IndirectCommandBufferGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE13resetCommandsEP18AGXA10FamilyBufferjj_block_invoke(uint64_t a1, unsigned int *a2)
{
  int v2;
  unsigned __int8 *v3;
  size_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  int v9;
  int __pattern4;

  v2 = a2[2] - 1;
  v5 = *a2;
  v4 = a2[1];
  v3 = (unsigned __int8 *)(a2 + 4);
  v6 = (char *)(*(_QWORD *)(a1 + 32) + v5);
  switch(v2)
  {
    case 0:
      memset((void *)(*(_QWORD *)(a1 + 32) + v5), *v3, v4);
      break;
    case 1:
      v7 = v4 & 0xFFFFFFFC;
      v8 = v4 & 3;
      v9 = *(unsigned __int16 *)v3;
      __pattern4 = v9 | (v9 << 16);
      memset_pattern4(v6, &__pattern4, v7);
      if (v8)
        *(_WORD *)&v6[v7] = v9;
      break;
    case 3:
      memset_pattern4((void *)(*(_QWORD *)(a1 + 32) + v5), v3, v4);
      break;
    case 7:
      memset_pattern8((void *)(*(_QWORD *)(a1 + 32) + v5), v3, v4);
      break;
    case 15:
      memset_pattern16((void *)(*(_QWORD *)(a1 + 32) + v5), v3, v4);
      break;
    default:
      return;
  }
}

uint64_t AGX::IndirectCommandBufferGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setupResetPatchTable(_DWORD *a1, unsigned int a2, int a3, uint64_t a4)
{
  unsigned int v6;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  _DWORD v14[4];
  char v15;
  _DWORD v16[6];
  _DWORD v17[6];
  _DWORD v18[6];

  v6 = a2;
  v8 = a1[36];
  v18[0] = a1[35] + v8 * a2;
  v18[1] = v8 * a3;
  v18[2] = 4;
  v18[4] = -536870912;
  (*(void (**)(uint64_t, _DWORD *))(a4 + 16))(a4, v18);
  v9 = a3 + v6;
  if (a3 + v6 > v6)
  {
    v10 = a3;
    do
    {
      v11 = a1[42];
      v17[0] = a1[41] + v11 * v6 + 56;
      v17[1] = v11 - 56;
      v17[2] = 4;
      v17[4] = 0;
      (*(void (**)(uint64_t, _DWORD *))(a4 + 16))(a4, v17);
      v12 = a1[46];
      v16[0] = a1[45] + v12 * v6 + 56;
      v16[1] = v12 - 56;
      v16[2] = 4;
      v16[4] = 0;
      (*(void (**)(uint64_t, _DWORD *))(a4 + 16))(a4, v16);
      ++v6;
      --v10;
    }
    while (v10);
    v6 = v9;
  }
  v14[0] = a1[89] + a1[90] * v6;
  v14[1] = a3;
  v14[2] = 1;
  v15 = 31;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(a4 + 16))(a4, v14);
}

unint64_t AGX::ISPPFEncoderGen1<AGX::G9::Encoders>::PrimitiveBlock::emit(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v4 = *((_DWORD *)a1 + 15);
  v5 = *((unsigned int *)a1 + 13);
  v6 = a2
     + (((*((_DWORD *)a1 + 13) & 0x1FF)
       + (*((_DWORD *)a1 + 13) & 0x1FF) * ((v4 >> 8) & 0x3F)
       + ((*((_DWORD *)a1 + 13) >> 9) & 0x3FF)
       + 3) & 0x3FFFC);
  if ((v4 & 0x8000) != 0)
  {
    v7 = a2
       + (((*((_DWORD *)a1 + 13) & 0x1FF)
         + (*((_DWORD *)a1 + 13) & 0x1FF) * ((v4 >> 8) & 0x3F)
         + ((*((_DWORD *)a1 + 13) >> 9) & 0x3FF)
         + 3) & 0x3FFFC);
    v6 += 4 * *((unsigned int *)a1 + 16);
    if (a2)
      goto LABEL_3;
LABEL_10:
    v15 = v6 + 4 * ((v5 >> 21) & 0x3F) + 28;
    goto LABEL_33;
  }
  v7 = 0;
  if (!a2)
    goto LABEL_10;
LABEL_3:
  for (i = 0; ; ++i)
  {
    v9 = (v5 >> 21) & 0x3F;
    if (i >= v9)
      break;
    *(_DWORD *)(v6 + 4 * i) = -2004318072;
    LODWORD(v5) = *((_DWORD *)a1 + 13);
  }
  v10 = v6 + 4 * v9;
  v11 = *a1;
  *(_OWORD *)(v10 + 12) = *(__int128 *)((char *)a1 + 12);
  *(_OWORD *)v10 = v11;
  *(_DWORD *)(v10 + 28) = *((_DWORD *)a1 + 7);
  v12 = v10 + 28;
  *(_DWORD *)(v10 + 32) = *((_DWORD *)a1 + 8);
  v13 = *((_DWORD *)a1 + 7);
  if ((v13 & 0x40000) != 0)
  {
    v14 = (_DWORD *)(v10 + 40);
    *(_DWORD *)(v10 + 36) = *((_DWORD *)a1 + 9);
    v13 = *((_DWORD *)a1 + 7);
    if ((v13 & 0x80000) == 0)
      goto LABEL_15;
LABEL_12:
    *v14 = *((_DWORD *)a1 + 10);
    v13 = *((_DWORD *)a1 + 7);
    if ((v13 & 0x40000) != 0)
    {
      v14[1] = *((_DWORD *)a1 + 11);
      v14 += 2;
      v13 = *((_DWORD *)a1 + 7);
    }
    else
    {
      ++v14;
    }
    goto LABEL_15;
  }
  v14 = (_DWORD *)(v10 + 36);
  if ((v13 & 0x80000) != 0)
    goto LABEL_12;
LABEL_15:
  v15 = v12 - a2;
  if ((v13 & 0x30000) != 0)
  {
    *v14 = *((_DWORD *)a1 + 12);
    v13 = *((_DWORD *)a1 + 7);
    if ((v13 & 0x30000) != 0)
      v16 = 2;
    else
      v16 = 1;
  }
  else
  {
    v16 = 1;
  }
  if ((v13 & 0x80000) != 0)
    v17 = 2;
  else
    v17 = 1;
  v18 = (v16 + (v17 << ((v13 & 0x40000) != 0)));
  v19 = v12 + 4 * v18;
  *(_DWORD *)v19 = *((_DWORD *)a1 + 13);
  *(_QWORD *)(v19 + 4) = *((_QWORD *)a1 + 7);
  if (a4)
  {
    v20 = v19 + 12;
    v21 = *((_DWORD *)a1 + 16);
    v22 = (3 * v21);
    v23 = (unint64_t)(v22 + 3) >> 2;
    v24 = v20 + 4 * v23;
    v25 = (*((_DWORD *)a1 + 13) >> 2) & 0x7F;
    if (v21)
    {
      if (v22 >= 0x1D)
      {
        v26 = ((unint64_t)(v22 + 3) >> 2) & 0x7FFFFFF8;
        v27 = (_OWORD *)(v6 + 4 * v18 + 4 * v9 + 56);
        v28 = v26;
        do
        {
          *(v27 - 1) = 0uLL;
          *v27 = 0uLL;
          v27 += 2;
          v28 -= 8;
        }
        while (v28);
        if (v23 == v26)
          goto LABEL_32;
      }
      else
      {
        v26 = 0;
      }
      v29 = v23 - v26;
      v30 = (_DWORD *)(4 * v26 + 4 * v18 + v6 + 4 * v9 + 40);
      do
      {
        *v30++ = 0;
        --v29;
      }
      while (v29);
    }
LABEL_32:
    *(_DWORD *)a4 = v25;
    *(_QWORD *)(a4 + 8) = a2;
    *(_QWORD *)(a4 + 16) = v7;
    *(_QWORD *)(a4 + 24) = v20;
    *(_QWORD *)(a4 + 32) = v24;
  }
LABEL_33:
  v31 = (unint64_t)(v15 + a3) >> 2;
  v32 = *((_DWORD *)a1 + 7);
  if ((v32 & 0x80000) != 0)
    v33 = 2;
  else
    v33 = 1;
  v34 = v33 << ((v32 & 0x40000) != 0);
  if ((v32 & 0x30000) != 0)
    v35 = 2;
  else
    v35 = 1;
  return ((*((_DWORD *)a1 + 16) << 19) - 0x80000) | ((v35 + v34) << 26) | 0x20070000u | ((unint64_t)v31 << 32);
}

unint64_t *AGX::PBEStateEncoderGen3<kAGXRevG9>::StateFields::StateFields(unint64_t *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8, int a9, unsigned int a10, int a11, int a12, unint64_t a13, unint64_t a14, unsigned int a15, unsigned int a16, int a17, int a18, unsigned int a19, unsigned int a20,unsigned int a21,uint64_t a22,int a23,int a24,int a25,int a26,char a27,char a28,char a29)
{
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64x2_t v33;
  uint32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64x2_t v37;
  uint64x2_t v38;
  int8x16_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;

  if ((a7 & 0x10000) != 0)
  {
    if (a2 == 1)
      v29 = 3;
    else
      v29 = 2;
  }
  else
  {
    v29 = 2;
    switch(BYTE1(a7))
    {
      case 1:
        break;
      case 2:
        v30 = (a7 & 0x20000) == 0;
        v31 = 4;
        goto LABEL_10;
      case 3:
        v30 = a2 == 0;
        v31 = 5;
        goto LABEL_10;
      case 4:
        v30 = a2 == 0;
        v31 = 6;
LABEL_10:
        if (v30)
          v29 = 2;
        else
          v29 = v31;
        break;
      default:
        v29 = -1;
        break;
    }
  }
  if (a7 == 1)
    v32 = 8;
  else
    v32 = -8;
  if (!(_BYTE)a7)
    v32 = 0;
  v33 = (uint64x2_t)vdupq_n_s64(4uLL);
  v34 = vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a6), (uint32x4_t)xmmword_232D73780)), (int8x8_t)0x7000700070007), (int16x4_t)0xFE00FE00FE00FELL));
  v35.i64[0] = v34.u32[0];
  v35.i64[1] = v34.u32[1];
  v36.i64[0] = 255;
  v36.i64[1] = 255;
  v37 = (uint64x2_t)vandq_s8(v35, v36);
  v35.i64[0] = v34.u32[2];
  v35.i64[1] = v34.u32[3];
  v38 = (uint64x2_t)vandq_s8(v35, v36);
  v39 = vorrq_s8(vbslq_s8((int8x16_t)vcgtq_u64(v33, v37), (int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_232D73790), (int8x16_t)xmmword_232D737C0), vbslq_s8((int8x16_t)vcgtq_u64(v33, v38), (int8x16_t)vshlq_u64(v38, (uint64x2_t)xmmword_232D737A0), (int8x16_t)xmmword_232D737B0));
  *result = *(_QWORD *)&vorr_s8(*(int8x8_t *)v39.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)) | v32 | (32 * a3) | (a4 << 12) | ((unint64_t)(a17 - 1) << 27) | ((unint64_t)(a18 - 1) << 41) | v29;
  v40 = (a20 - 1) | (32 * (a13 >> 6)) | (16 * (a20 > 1));
  if (BYTE1(a7) == 2)
  {
    if ((a7 & 0x40000) != 0 && a12 != 1)
    {
      v41 = 0x80000000000;
      switch(a11)
      {
        case 1:
          v42 = a12 == 2;
          v41 = 0xC0000000000;
          goto LABEL_29;
        case 2:
          v42 = a12 == 2;
          v41 = 0x100000000000;
          goto LABEL_31;
        case 3:
          v41 = 0x40000000000;
          break;
        case 4:
          break;
        case 5:
          v42 = a12 == 2;
          v41 = 0x140000000000;
LABEL_29:
          v43 = 0x40000000000;
          goto LABEL_32;
        case 6:
          v42 = a12 == 2;
          v41 = 0x180000000000;
LABEL_31:
          v43 = 0x80000000000;
LABEL_32:
          if (v42)
            v41 = v43;
          break;
        default:
          v41 = 0;
          break;
      }
      v40 |= v41;
      goto LABEL_35;
    }
    if ((a7 & 0x40000) != 0)
LABEL_35:
      v40 |= (unint64_t)a10 << 39;
  }
  v44 = (a13 << 54) & 0xC00000000000000;
  v45 = v40 | ((unint64_t)((a9 - 1) < 4) << 45);
  if ((_BYTE)a7)
  {
    v46 = a21;
    if (a21 < 2)
      v46 = a19;
    v47 = (unint64_t)(v46 - 1) << 47;
  }
  else
  {
    if (a15 <= 0xF)
      v48 = 0;
    else
      v48 = (a15 >> 4) - 1;
    v47 = (v48 << 45) & 0xFFFF800000000000;
    v49 = v48 << 62;
    if (a16 <= 0xF)
      v50 = 0;
    else
      v50 = (a16 >> 4) - 1;
    v44 |= (a14 << 56) & 0x3000000000000000 | (a14 >> 6) | v49 | ((unint64_t)(v50 >> 4) << 44) | ((unint64_t)(v50 & 0xF) << 34);
  }
  v51 = v45 | v47;
  if (a7 == 1)
  {
    v52 = (BYTE1(a7) - 1 < 2) & BYTE2(a7);
    if (BYTE1(a7) - 3 < 2)
      v52 = 1;
    v30 = (v52 & ((a22 & 0xFFFFFFFFFFFFC000) != 0)) == 0;
    v53 = 0x2000000000000000;
    if (v30)
      v53 = 0;
    v51 |= v53;
  }
  v54 = 0x10000000000;
  if (!a29)
    v54 = 0;
  v55 = 0x20000000000;
  if (!a28)
    v55 = 0;
  v56 = 0x40000000000;
  if (!a27)
    v56 = 0;
  v57 = a24 == a26 && a23 == a25;
  v58 = 0x80000000000;
  if (!v57)
    v58 = 0;
  result[1] = v51 | 0x8000000000000000;
  result[2] = v56 | (a5 << 38) | v55 | v58 | v54 | v44;
  return result;
}

uint64_t AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram(uint64_t result, char a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;
  char v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  unint64_t v20;

  v2 = *(unsigned int **)(result + 536);
  v3 = *(_DWORD *)(result + 544);
  v4 = *(unsigned int **)(result + 552);
  *(_OWORD *)(result + 560) = 0u;
  *(_DWORD *)(result + 576) = 0;
  v5 = *(unsigned int *)(result + 512);
  if ((_DWORD)v5)
  {
    if ((a2 & 1) != 0)
    {
      v6 = 2 * (v5 - 1) + 2;
      LOBYTE(v3) = v3 + 2 * v5;
      if (!*(_BYTE *)(result + 516))
        goto LABEL_4;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = (_DWORD *)(result + 8);
      v12 = v3 << 10;
      LODWORD(v13) = *(_DWORD *)(result + 512);
      do
      {
        v15 = &v2[v9];
        v16 = *((_QWORD *)v11 - 1);
        v17 = (v13 - 1);
        v18 = v10 == v17;
        if (v10 == v17)
          v19 = -1879048192;
        else
          v19 = 0x10000000;
        *v15 = v19 | (*v11 << 13) | v16;
        v15[1] = HIDWORD(v16);
        if (v18)
          v14 = *(_BYTE *)(result + 516) ^ 1;
        else
          v14 = 0;
        v5 = v10 + 1;
        v11 += 4;
        v4[v10] = (v9 * 4) & 0x3F8 | v12 & 0x3FC00 | ((v14 & 1) << 26) | 0xF0000000;
        v13 = *(unsigned int *)(result + 512);
        v9 += 2;
        v8 -= 2;
        v12 += 2048;
        v7 -= 4;
        v10 = v5;
      }
      while (v5 < v13);
      v6 = -v8;
      v2 = (unsigned int *)((char *)v2 + v9 * 4);
      LOBYTE(v3) = v3 - v8;
      v4 = (unsigned int *)((char *)v4 - v7);
      if (!*(_BYTE *)(result + 516))
      {
LABEL_4:
        if ((a2 & 1) != 0)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v5 = 0;
    if (!*(_BYTE *)(result + 516))
    {
      v6 = 1;
      if ((a2 & 1) == 0)
        goto LABEL_20;
      goto LABEL_21;
    }
    v6 = 0;
  }
  v6 += 2;
  ++v5;
  if ((a2 & 1) == 0)
  {
    v20 = (*(_QWORD *)(result + 520) | ((unint64_t)*(unsigned int *)(result + 528) >> 2 << 35)) >> 32;
    *v2 = *(_DWORD *)(result + 520) & 0xFFFFFFFC;
    v2[1] = v20;
    *v4++ = (8 * (v3 >> 1)) | 0xF4000002;
LABEL_20:
    *v4 = -754974720;
  }
LABEL_21:
  *(_QWORD *)(result + 560) = ((v6 + *(unsigned int *)(result + 544) + 3) & 0xFFFFFFFFFFFFFFFCLL)
                            - *(unsigned int *)(result + 544);
  *(_QWORD *)(result + 568) = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  *(_DWORD *)(result + 576) = (*(_DWORD *)(result + 576) + 3) & 0xFFFFFFFC;
  return result;
}

uint64_t AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram(uint64_t result, int a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _OWORD *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  int v46;
  unsigned int *v47;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;

  v2 = *(unsigned int **)(result + 432);
  v3 = *(_DWORD *)(result + 440);
  v4 = *(unsigned int **)(result + 448);
  LODWORD(v5) = *(_DWORD *)(result + 408);
  v6 = *(_DWORD *)(result + 388);
  if (!(_DWORD)v5)
  {
    v9 = 0;
    v11 = (_OWORD *)(result + 472);
    if (v6)
      v12 = 4;
    else
      v12 = 2;
    v13 = *(_DWORD *)(result + 468);
    v14 = v13 == 0;
    *(_DWORD *)(result + 492) = v12 + 2 * (v13 != 0);
    *(_DWORD *)(result + 488) = v3;
    v18 = 2;
    if (a2)
      v18 = 0;
    v16 = &v2[v18];
    *v11 = xmmword_232D737D0;
    v17 = v3 + 2;
    goto LABEL_29;
  }
  v7 = *(_DWORD *)(result + 384);
  v8 = v7 & *(_DWORD *)(result + 392) & v6;
  v9 = v8 != 0;
  v10 = (v7 || *(_BYTE *)(result + 465)) && v8 == 0;
  v11 = (_OWORD *)(result + 472);
  if (v6)
    v12 = 4;
  else
    v12 = 2;
  *(_QWORD *)(result + 472) = 0;
  *(_QWORD *)(result + 480) = 0;
  v13 = *(_DWORD *)(result + 468);
  v14 = v13 == 0;
  *(_DWORD *)(result + 492) = v12 + 2 * (v13 != 0);
  if ((_DWORD)v5 == 2)
  {
    *(_DWORD *)(result + 488) = v3;
    v5 = 8;
    if (a2)
      v5 = 0;
    v16 = (unsigned int *)((char *)v2 + v5);
    *(_QWORD *)(result + 472) = 2;
    v17 = v3 + 2;
    LOBYTE(v5) = -63;
    if (v10)
      goto LABEL_23;
LABEL_29:
    if (v13 != 1)
    {
      v22 = 0;
      v20 = 0;
      v19 = 0;
      v21 = 2;
      v23 = (int *)v16;
      if ((a2 & 1) != 0)
        goto LABEL_35;
LABEL_34:
      v23 = (int *)&v16[2 * *(_DWORD *)(result + 396)];
      goto LABEL_35;
    }
    v22 = 0;
    *(_QWORD *)v11 = 4;
    if ((a2 & 1) != 0)
    {
      v19 = 0;
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  if ((_DWORD)v5 != 1)
  {
    LOBYTE(v5) = 0;
    *(_DWORD *)(result + 488) = v3;
    v24 = 2;
    if (a2)
      v24 = 0;
    v16 = &v2[v24];
    *(_QWORD *)(result + 472) = 2;
    v17 = v3 + 2;
    if (v10)
      goto LABEL_23;
    goto LABEL_29;
  }
  LODWORD(v5) = *(_DWORD *)(result + 412);
  *(_DWORD *)(result + 488) = v3;
  v15 = 2;
  if (a2)
    v15 = 0;
  v16 = &v2[v15];
  *(_QWORD *)(result + 472) = 2;
  v17 = v3 + 2;
  if (!v10)
    goto LABEL_29;
LABEL_23:
  *(_QWORD *)(result + 480) = 1;
  if ((a2 & 1) == 0)
  {
    *v4++ = (v5 << 14) | 0x90002041;
    if (v13 != 1)
    {
      v19 = 0;
      v20 = 0;
      v21 = 2;
      v22 = 1;
      goto LABEL_34;
    }
    v14 = 0;
    *(_QWORD *)v11 = 4;
    v22 = 1;
LABEL_102:
    *(_QWORD *)v16 = 0x12DEADBEEF00;
    v16 += 2;
    v19 = v17;
    goto LABEL_103;
  }
  if (v13 != 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = 2;
    v22 = 1;
    v23 = (int *)v16;
    goto LABEL_35;
  }
  v14 = 0;
  v19 = 0;
  *(_QWORD *)v11 = 4;
  v22 = 1;
LABEL_103:
  v17 = v3 + 4;
  v20 = 1;
  v21 = 4;
  v23 = (int *)v16;
  if ((a2 & 1) == 0)
    goto LABEL_34;
LABEL_35:
  LODWORD(v25) = *(_DWORD *)(result + 396);
  v26 = (2 * v25);
  v27 = v21 + v26;
  v28 = v26 + v17;
  if ((_DWORD)v25)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = v5 << 14;
    v57 = ((v12 & 7) << 18) | 0xD1840000;
    v56 = (v12 << 18) | 0xD1800000;
    v55 = (v12 << 17) & 0xC0000 | 0xB3000000;
    v33 = (8 * v12) & 0xFFFFFBF7 | 0x400 | (v12 >> 1);
    while (1)
    {
      v38 = *(_DWORD *)(result + 384);
      v39 = 1 << v31;
      v40 = (v38 >> v31) & 1;
      v41 = *(_QWORD *)(result + 8 * v29);
      v42 = *(unsigned int *)(result + 400);
      if (((1 << v31) & ~*(_DWORD *)(result + 392) & v38) != 0 && v9)
      {
        if ((a2 & 1) == 0)
          *v4++ = v32 | (v40 << 6) | 0x90002002;
        ++v22;
        v40 = 2;
      }
      v44 = *(unsigned int *)(result + v30 + 320);
      if (v44 < 2)
        goto LABEL_49;
      if ((v44 & ((_DWORD)v44 - 1)) != 0)
        break;
      ++v22;
      if ((a2 & 1) != 0)
      {
        if ((*(_DWORD *)(result + 384) & *(_DWORD *)(result + 392) & v39) != 0 && v9)
          goto LABEL_55;
        goto LABEL_56;
      }
      *v4++ = (-32 * __clz(__rbit32(v44))) & 0x7E0 | (v40 << 19) | 0x50040002;
      v50 = (*(_DWORD *)(result + 384) & *(_DWORD *)(result + 392) & v39) != 0 && v9;
      v40 = 2;
      if (v50)
        goto LABEL_54;
LABEL_57:
      if (!v14)
      {
        v22 += 8;
        if ((a2 & 1) != 0)
          goto LABEL_62;
LABEL_59:
        *v23++ = 4 * *(_DWORD *)(result + v30 + 256);
        v46 = v31 == (_DWORD)v25 - 1;
        v47 = &v16[v29];
        *v47 = (v46 << 31) | (*(_DWORD *)(result + 4 * v30 + 8) << 13) | v41;
        v47[1] = HIDWORD(v41);
        v35 = *(_DWORD *)(result + 400);
        if (v31 >= v42)
        {
          v34 = *(_DWORD *)(result + 404) - 2 * v35;
          v35 = *(_DWORD *)(result + 396) - v35;
          v36 = v29 + v34;
          if (v14)
          {
LABEL_61:
            *v4++ = (v28 << 18) | ((v17 + v29) >> 1) & 0x3F | (v40 << 13) | (v36 >> 1 << 6) | 0xE0000000;
            goto LABEL_62;
          }
        }
        else
        {
          v36 = 2 * v31;
          if (v14)
            goto LABEL_61;
        }
        *v4 = v56 | (16 * (v41 & 0x3FFF));
        v4[1] = v57;
        v4[2] = v33 | (v28 << 19) | (v40 << 11) | 0x40000;
        v4[3] = v55 | (4 * (((_BYTE)v35 + (v36 >> 1)) & 0x7F));
        v37 = (v40 << 18) | 0xD9800000;
        if (v20)
          v37 = (v19 >> 1) | 0xD8000000;
        v4[4] = -939524095;
        v4[5] = v37;
        v4[6] = -938999807;
        v4 += 7;
        goto LABEL_61;
      }
      ++v22;
      if ((a2 & 1) == 0)
        goto LABEL_59;
LABEL_62:
      ++v27;
      ++v28;
      ++v31;
      v25 = *(unsigned int *)(result + 396);
      v30 += 4;
      v29 += 2;
      if (v31 >= v25)
        goto LABEL_81;
    }
    if ((a2 & 1) == 0)
    {
      v49 = __clz(v44 - 1);
      *v23++ = (v44 + (1 << (v49 ^ 0x3F)) - 1) / v44;
      *(_QWORD *)v4 = 0xD18C0000D1880000;
      v4[2] = (v28 << 19) | (v40 << 11) | 0x40411;
      v4[3] = (-32 * (v49 ^ 0x3F)) & 0x1FE0 | 0xA0840001;
      v4 += 4;
    }
    ++v27;
    v22 += 4;
    ++v28;
    v40 = 2;
LABEL_49:
    if ((*(_DWORD *)(result + 384) & *(_DWORD *)(result + 392) & v39) != 0 && v9)
    {
      if ((a2 & 1) == 0)
LABEL_54:
        *v4++ = v32 | (v40 << 6) | 0x90002002;
LABEL_55:
      ++v22;
LABEL_56:
      v40 = 2;
      goto LABEL_57;
    }
    goto LABEL_57;
  }
LABEL_81:
  if (*(_BYTE *)(result + 464))
  {
    ++v27;
    ++v22;
    if ((a2 & 1) == 0)
    {
      *v23++ = (*(_DWORD *)(result + 456) << 13) | ((*(_BYTE *)(result + 465) == 0) << 31);
      *v4++ = (v28 << 10) | 0xF0000201;
    }
    LOBYTE(v28) = v28 + 1;
  }
  if (!*(_BYTE *)(result + 465))
  {
    v53 = v22 + 2;
    if ((a2 & 1) != 0)
      goto LABEL_96;
    goto LABEL_95;
  }
  ++v27;
  v51 = 1;
  if (v9)
    v51 = 2;
  v52 = v22 + v51;
  if (!a2)
  {
    if (v9)
      *v4++ = (v5 << 14) | 0x90002041;
    *v23 = (*(_DWORD *)(result + 460) << 13) | 0x80000001;
    *v4++ = (v28 << 10) | 0xF0000201;
    v53 = v52 + 2;
LABEL_95:
    v54 = *(_QWORD *)(result + 416) | ((unint64_t)*(unsigned int *)(result + 424) >> 2 << 35);
    *v2 = *(_DWORD *)(result + 416) & 0xFFFFFFFC;
    v2[1] = HIDWORD(v54);
    *v4 = (8 * ((*(_DWORD *)(result + 440) >> 1) & 0x7F)) | 0xFC000002;
    v4[1] = -754974720;
    goto LABEL_96;
  }
  v53 = v52 + 2;
LABEL_96:
  *(_QWORD *)(result + 472) = ((v27 + *(unsigned int *)(result + 440) + 3) & 0xFFFFFFFFFFFFFFFCLL)
                            - *(unsigned int *)(result + 440);
  *(_QWORD *)(result + 480) = (v53 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(result + 492) = (*(_DWORD *)(result + 492) + 3) & 0xFFFFFFFC;
  return result;
}

unsigned __int8 *AGX::PDSEncoderGen1<kAGXRevG9>::EncodeFragmentVaryingsPDSProgram(unsigned __int8 *result, char a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int *v15;
  unint64_t v16;

  v3 = dword_232D767B8[a3];
  v4 = *((_QWORD *)result + 449);
  v5 = *((_DWORD *)result + 900);
  v6 = (unsigned int *)*((_QWORD *)result + 451);
  *((_OWORD *)result + 226) = 0u;
  *((_DWORD *)result + 908) = 0;
  LODWORD(v7) = *((_DWORD *)result + 896);
  if (!(_DWORD)v7)
  {
    v9 = 0;
    v8 = 0;
LABEL_11:
    ++v9;
    if ((a2 & 1) == 0)
      *v6 = -754974720;
    goto LABEL_13;
  }
  if ((a2 & 1) != 0)
  {
    v8 = 2 * (v7 - 1) + 2;
    v9 = *((unsigned int *)result + 896);
    goto LABEL_13;
  }
  v9 = 0;
  v8 = 0;
  v10 = 4 * v5;
  v11 = result;
  do
  {
    v12 = v9 == (_DWORD)v7 - 1;
    if (v11[2])
      v13 = v3;
    else
      v13 = 50331648;
    v14 = (v11[1] << 26) | (*v11 << 27) | v13 | (v11[3] << 23) | (v11[4] << 20) | (v11[5] << 21) | (v11[6] << 22) | ((*((_DWORD *)v11 + 3) << 18) - 0x40000) | (v11[7] << 17) | (v11[8] << 16) | (*((_DWORD *)v11 + 5) << 8) | *((_DWORD *)v11 + 4);
    v15 = (int *)(v4 + 4 * v8);
    v8 += 2;
    ++v9;
    v16 = (((unint64_t)*((unsigned int *)v11 + 6) << 52) & 0xFFC0000000000000 | (v12 << 63)) >> 32;
    *v15 = v14;
    v15[1] = v16;
    *v6++ = v10 & 0x3F8 | ((_DWORD)v12 << 26) | 0xF0000004;
    v7 = *((unsigned int *)result + 896);
    v10 += 8;
    v11 += 28;
  }
  while (v9 < v7);
  if (!(_DWORD)v7)
    goto LABEL_11;
LABEL_13:
  *((_QWORD *)result + 452) = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *((_QWORD *)result + 453) = (v9 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *((_DWORD *)result + 908) = (*((_DWORD *)result + 908) + 3) & 0xFFFFFFFC;
  return result;
}

uint64_t AGX::PDSEncoderGen1<kAGXRevG9>::EncodeComputePDSProgram(uint64_t result, int a2, char a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned __int8 v7;
  unsigned int *v8;
  char v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  unsigned int *v19;
  int v20;
  int v21;
  unint64_t v22;

  v3 = *(unsigned int **)(result + 40);
  v4 = *(_DWORD *)(result + 48);
  v5 = *(unsigned int **)(result + 56);
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = v4;
  if (a2)
    v6 = v3;
  else
    v6 = v3 + 2;
  v7 = v4 + 2;
  v8 = v5 + 1;
  if (*(_BYTE *)(result + 1))
  {
    if ((a2 & 1) != 0)
    {
      v9 = 5;
      v10 = 2;
      v6 = v3;
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
      v6 = v3 + 5;
      v3[4] = (*(_DWORD *)(result + 4) << 13) | ((*(_BYTE *)(result + 20) == 0) << 31) | 0x10000002;
      v8 = v5 + 2;
      v5[1] = ((v4 << 10) + 4096) & 0x3FC00 | (8 * (v7 >> 1)) | 0xF0000001;
      v7 = v4 + 5;
      v9 = 5;
      v10 = 2;
    }
  }
  else
  {
    v9 = 2;
    v10 = 1;
  }
  v11 = *(_DWORD *)(result + 16);
  v12 = *(unsigned __int8 *)(result + 20);
  v13 = v12 & 4;
  v14 = v12 & 3;
  if ((v12 & 3) != 0)
  {
    if ((a2 & 1) == 0)
    {
      v15 = (v12 >> 1) & 1;
      v16 = v14 == 3;
      if (v14 == 3)
        v17 = 2;
      else
        v17 = 1;
      if (v16)
        v15 = 2;
      *v6++ = (v13 << 29) ^ 0x90000000 | v15 | (v11 << 13);
      *v8++ = (v7++ << 10) | 0xF0000201;
      v11 += v17;
    }
    ++v9;
    *(_QWORD *)(result + 72) = ++v10;
  }
  if (v13)
  {
    if ((a2 & 1) == 0)
    {
      *v6++ = (v11 << 13) | 0x90000001;
      *v8++ = (v7++ << 10) | 0xF0000209;
    }
    ++v9;
    LOBYTE(v10) = v10 + 1;
  }
  if (!a2)
  {
    *v8 = -754974720;
    v19 = v8 + 1;
    *v5 = (((_DWORD)v8 + 4 - (_DWORD)v5) >> 2) & 0x7FFFF | 0xC2C00000;
    v20 = *(unsigned __int8 *)(result + 12);
    if (*(_BYTE *)(result + 12))
    {
      if (v20 == 3)
        v21 = 2;
      else
        v21 = v20 == 2;
      *v6 = v21 | (*(_DWORD *)(result + 8) << 13) | 0x80000000;
      v19 = v8 + 2;
      v8[1] = (v7 << 10) | 0xF0000201;
      ++v9;
      v18 = v10 + 2;
      if (*(_BYTE *)result)
      {
LABEL_32:
        *v19++ = -268435451;
        ++v18;
        if ((a3 & 1) != 0)
        {
LABEL_34:
          *v19 = -754974720;
          goto LABEL_38;
        }
LABEL_33:
        v22 = *(_QWORD *)(result + 24) | ((unint64_t)*(unsigned int *)(result + 32) >> 2 << 35);
        *v3 = *(_DWORD *)(result + 24) & 0xFFFFFFFC;
        v3[1] = HIDWORD(v22);
        *v19++ = (8 * ((*(_DWORD *)(result + 48) >> 1) & 0x7F)) | 0xFC000002;
        ++v18;
        goto LABEL_34;
      }
    }
    else
    {
      v18 = v10 + 1;
      if (*(_BYTE *)result)
        goto LABEL_32;
    }
    if ((a3 & 1) != 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (*(_BYTE *)(result + 12))
  {
    ++v9;
    v18 = v10 + 2;
    if (*(_BYTE *)result)
      goto LABEL_25;
  }
  else
  {
    v18 = v10 + 1;
    if (*(_BYTE *)result)
    {
LABEL_25:
      ++v18;
      if ((a3 & 1) == 0)
        goto LABEL_37;
      goto LABEL_38;
    }
  }
  if ((a3 & 1) == 0)
LABEL_37:
    ++v18;
LABEL_38:
  *(_QWORD *)(result + 64) = (v9 + 3) & 0x7C;
  *(_QWORD *)(result + 72) = (v18 & 0x7C) + 4;
  *(_DWORD *)(result + 84) = 4;
  return result;
}

uint64_t AGX::PDSEncoderGen1<kAGXRevG9>::EncodeContextSwitchPDSProgram(uint64_t result, char a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  unint64_t v14;

  v2 = *(unsigned int **)(result + 152);
  v3 = *(_DWORD *)(result + 160);
  v4 = *(unsigned int **)(result + 168);
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 192) = 0;
  if (!*(_BYTE *)result)
  {
    v8 = (unsigned int *)(result + 132);
    LODWORD(v5) = *(_DWORD *)(result + 132);
    if (!(_DWORD)v5)
    {
      v6 = 0;
      v7 = 0;
      goto LABEL_17;
    }
    v6 = 0;
    if ((a2 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    v10 = 0;
    v7 = 0;
    v11 = (_DWORD *)(result + 8);
    v12 = v3 << 10;
    do
    {
      if (v7 == (_DWORD)v5 - 1)
        v13 = -2147483646;
      else
        v13 = 2;
      v2[v7] = v13 | (*v11 << 13);
      v4[v7++] = v12 & 0x3FC00 | (8 * ((*(v11 - 1) >> 1) & 0x7F)) | 0xF0000001;
      v5 = *v8;
      v11 += 2;
      v10 -= 4;
      v12 += 1024;
    }
    while (v7 < v5);
    v6 += v7;
    v2 = (unsigned int *)((char *)v2 - v10);
    LOBYTE(v3) = v3 + v7;
    v4 = (unsigned int *)((char *)v4 - v10);
LABEL_17:
    v9 = v4;
    if ((a2 & 1) != 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  if ((a2 & 1) == 0)
  {
    *(_QWORD *)v4 = 0xDB000000C1100001;
    v9 = v4 + 3;
    v4[2] = -1056440319;
    v8 = (unsigned int *)(result + 132);
    LODWORD(v5) = *(_DWORD *)(result + 132);
    v6 = 3;
    if (!(_DWORD)v5)
    {
      v7 = 0;
LABEL_20:
      v14 = (*(_QWORD *)(result + 136) | ((unint64_t)*(unsigned int *)(result + 144) >> 2 << 35)) >> 32;
      *v2 = *(_DWORD *)(result + 136) & 0xFFFFFFFC;
      v2[1] = v14;
      *v9 = (8 * (v3 >> 1)) | 0xF4000002;
      v9[1] = -754974720;
      goto LABEL_21;
    }
    v4 += 3;
    goto LABEL_10;
  }
  LODWORD(v5) = *(_DWORD *)(result + 132);
  v6 = 3;
  if ((_DWORD)v5)
  {
LABEL_7:
    v7 = v5;
    v6 += (v5 - 1) + 1;
    goto LABEL_21;
  }
  v7 = 0;
LABEL_21:
  *(_QWORD *)(result + 176) = ((v7 + *(unsigned int *)(result + 160) + 5) & 0xFFFFFFFFFFFFFFFCLL)
                            - *(unsigned int *)(result + 160);
  *(_QWORD *)(result + 184) = (v6 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(result + 192) = (*(_DWORD *)(result + 192) + 3) & 0xFFFFFFFC;
  return result;
}

void AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ObjectProgramVariant(unint64_t a1)
{
  AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ObjectProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ObjectProgramVariant(unint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_250401860;

  std::mutex::~mutex((std::mutex *)(a1 + 3048));
  v2 = *(void ***)(a1 + 3016);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 3000);
  *(_QWORD *)(a1 + 3000) = 0;
  if (v3)
    operator delete(v3);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(a1 + 1240);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_232CA4468(_Unwind_Exception *a1)
{
  unint64_t v1;

  std::mutex::~mutex((std::mutex *)(v1 + 3048));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3000);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(v1 + 1240);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  ProgramBindingsAndDMAList *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  void *v37;
  uint64_t v38;
  unint64_t v39;

  *(_QWORD *)a1 = &off_2504019A0;
  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 576))
  {
    v3 = *(_QWORD *)(a1 + 584);
    v4 = *(NSObject **)(v3 + 16);
    v34 = MEMORY[0x24BDAC760];
    v35 = 3221225472;
    v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v37 = &__block_descriptor_48_e5_v8__0l;
    v38 = v3;
    v39 = a1 + 552;
    dispatch_sync(v4, &v34);
    *(_OWORD *)(a1 + 577) = 0u;
    *(_OWORD *)(a1 + 568) = 0u;
    *(_OWORD *)(a1 + 552) = 0u;
  }
  if (*(_QWORD *)(a1 + 624))
  {
    v5 = *(_QWORD *)(a1 + 632);
    v6 = *(NSObject **)(v5 + 16);
    v34 = v2;
    v35 = 3221225472;
    v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v37 = &__block_descriptor_48_e5_v8__0l;
    v38 = v5;
    v39 = a1 + 600;
    dispatch_sync(v6, &v34);
    *(_OWORD *)(a1 + 625) = 0u;
    *(_OWORD *)(a1 + 616) = 0u;
    *(_OWORD *)(a1 + 600) = 0u;
  }
  if (*(_QWORD *)(a1 + 672))
  {
    v7 = *(_QWORD *)(a1 + 680);
    v8 = *(NSObject **)(v7 + 16);
    v34 = v2;
    v35 = 3221225472;
    v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v37 = &__block_descriptor_48_e5_v8__0l;
    v38 = v7;
    v39 = a1 + 648;
    dispatch_sync(v8, &v34);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v9);
    MEMORY[0x234927ECC](v10, 0x1030C404D8F7974);
  }
  v11 = *(ProgramBindingsAndDMAList **)(a1 + 16);
  if (v11)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v11);
    MEMORY[0x234927ECC]();
  }
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v12 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6872));
  }
  if ((*(char *)(a1 + 1239) & 0x80000000) == 0)
  {
    v13 = *(void **)(a1 + 1192);
    if (!v13)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 1216));
  v13 = *(void **)(a1 + 1192);
  if (v13)
  {
LABEL_15:
    *(_QWORD *)(a1 + 1200) = v13;
    operator delete(v13);
  }
LABEL_16:
  v14 = *(_QWORD *)(a1 + 1168);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1176);
    v16 = *(void **)(a1 + 1168);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 1168);
    }
    *(_QWORD *)(a1 + 1176) = v14;
    operator delete(v16);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 1056));
  v17 = *(_QWORD *)(a1 + 1016);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 1024);
    v19 = *(void **)(a1 + 1016);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = *(void **)(a1 + 1016);
    }
    *(_QWORD *)(a1 + 1024) = v17;
    operator delete(v19);
  }
  v23 = *(void **)(a1 + 992);
  if (v23)
  {
    *(_QWORD *)(a1 + 1000) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 968);
  if (v24)
  {
    *(_QWORD *)(a1 + 976) = v24;
    operator delete(v24);
  }
  if (*(char *)(a1 + 895) < 0)
  {
    operator delete(*(void **)(a1 + 872));
    if ((*(char *)(a1 + 503) & 0x80000000) == 0)
    {
LABEL_43:
      if ((*(char *)(a1 + 479) & 0x80000000) == 0)
        goto LABEL_44;
LABEL_64:
      operator delete(*(void **)(a1 + 456));
      if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        goto LABEL_45;
      goto LABEL_65;
    }
  }
  else if ((*(char *)(a1 + 503) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)(a1 + 480));
  if (*(char *)(a1 + 479) < 0)
    goto LABEL_64;
LABEL_44:
  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
    goto LABEL_45;
LABEL_65:
  operator delete(*(void **)(a1 + 432));
LABEL_45:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 296));
  v25 = *(void **)(a1 + 264);
  if (v25)
  {
    *(_QWORD *)(a1 + 272) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 240);
  if (v26)
  {
    *(_QWORD *)(a1 + 248) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 192);
  if (v27)
  {
    *(_QWORD *)(a1 + 200) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 168);
  if (v28)
  {
    *(_QWORD *)(a1 + 176) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 144);
  if (v29)
  {
    *(_QWORD *)(a1 + 152) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 120);
  if (v30)
  {
    *(_QWORD *)(a1 + 128) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 96);
  if (v31)
  {
    *(_QWORD *)(a1 + 104) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 72);
  if (v32)
  {
    *(_QWORD *)(a1 + 80) = v32;
    operator delete(v32);
  }
  return a1;
}

void ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(ProgramBindingsAndDMAList *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  while (v2 != v3)
  {
    if (*v2)
      MEMORY[0x234927ECC](*v2, 0x1000C408B6DE1C6);
    ++v2;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  while (v4 != v5)
  {
    if (*v4)
      MEMORY[0x234927ECC](*v4, 0x1000C408B6DE1C6);
    ++v4;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 6);
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  while (v6 != v7)
  {
    if (*v6)
      MEMORY[0x234927ECC](*v6, 0x1000C408B6DE1C6);
    ++v6;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 9);
  v9 = (_QWORD *)*((_QWORD *)this + 10);
  while (v8 != v9)
  {
    if (*v8)
      MEMORY[0x234927ECC](*v8, 0x1000C408B6DE1C6);
    ++v8;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 14);
  v11 = (_QWORD *)*((_QWORD *)this + 15);
  if (v10 == v11)
  {
    if (!v10)
      goto LABEL_24;
    goto LABEL_23;
  }
  do
  {
    if (*v10)
      MEMORY[0x234927ECC](*v10, 0x1000C40A86A77D5);
    ++v10;
  }
  while (v10 != v11);
  v10 = (_QWORD *)*((_QWORD *)this + 14);
  if (v10)
  {
LABEL_23:
    *((_QWORD *)this + 15) = v10;
    operator delete(v10);
  }
LABEL_24:
  v12 = (void *)*((_QWORD *)this + 9);
  if (v12)
  {
    *((_QWORD *)this + 10) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 6);
  if (v13)
  {
    *((_QWORD *)this + 7) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 3);
  if (v14)
  {
    *((_QWORD *)this + 4) = v14;
    operator delete(v14);
  }
  v15 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v15;
    operator delete(v15);
  }
}

void AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

void AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~MeshProgramVariant(unint64_t a1)
{
  AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~MeshProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~MeshProgramVariant(unint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  void *v6;
  void **v8;
  _QWORD v9[6];

  *(_QWORD *)a1 = &off_250401880;
  if (!*(_BYTE *)(a1 + 868) && *(_QWORD *)(a1 + 2912))
  {
    v2 = (_OWORD *)(a1 + 2888);
    v3 = *(_QWORD *)(a1 + 2920);
    v4 = *(NSObject **)(v3 + 16);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v9[3] = &__block_descriptor_48_e5_v8__0l;
    v9[4] = v3;
    v9[5] = a1 + 2888;
    dispatch_sync(v4, v9);
    *(_OWORD *)(a1 + 2913) = 0u;
    *v2 = 0u;
    *(_OWORD *)(a1 + 2904) = 0u;
  }

  *(_QWORD *)(a1 + 3048) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3056));
  v5 = *(void ***)(a1 + 3024);
  if (v5)
  {
    do
    {
      v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = *(void **)(a1 + 3008);
  *(_QWORD *)(a1 + 3008) = 0;
  if (v6)
    operator delete(v6);
  if (*(char *)(a1 + 2983) < 0)
  {
    operator delete(*(void **)(a1 + 2960));
    if ((*(char *)(a1 + 2959) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_14:
    operator delete(*(void **)(a1 + 2936));
    goto LABEL_9;
  }
  if (*(char *)(a1 + 2959) < 0)
    goto LABEL_14;
LABEL_9:
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(a1 + 1240);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_232CA4B20(_Unwind_Exception *a1)
{
  unint64_t v1;

  std::mutex::~mutex((std::mutex *)(v1 + 3056));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3008);
  AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)(v1 + 2936));
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(v1 + 1240);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariant(unint64_t a1)
{
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariant(unint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  void *v6;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int64_t v11;
  _QWORD v13[6];

  *(_QWORD *)a1 = &off_2504018A0;
  if (!*(_BYTE *)(a1 + 868) && *(_QWORD *)(a1 + 3680))
  {
    v2 = (_OWORD *)(a1 + 3656);
    v3 = *(_QWORD *)(a1 + 3688);
    v4 = *(NSObject **)(v3 + 16);
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v13[3] = &__block_descriptor_48_e5_v8__0l;
    v13[4] = v3;
    v13[5] = a1 + 3656;
    dispatch_sync(v4, v13);
    *(_OWORD *)(a1 + 3681) = 0u;
    *v2 = 0u;
    *(_OWORD *)(a1 + 3672) = 0u;
  }

  std::mutex::~mutex((std::mutex *)(a1 + 3824));
  v5 = *(void ***)(a1 + 3784);
  if (v5)
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = *(void **)(a1 + 3768);
  *(_QWORD *)(a1 + 3768) = 0;
  if (v6)
    operator delete(v6);
  if (*(char *)(a1 + 3751) < 0)
  {
    operator delete(*(void **)(a1 + 3728));
    if ((*(char *)(a1 + 3727) & 0x80000000) == 0)
    {
LABEL_9:
      if (*(_BYTE *)(a1 + 2756))
        goto LABEL_23;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(a1 + 3727) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 3704));
  if (*(_BYTE *)(a1 + 2756))
    goto LABEL_23;
LABEL_16:
  v8 = *(_QWORD *)(a1 + 2816);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 6448));
  v9 = *(char **)(v8 + 6480);
  v10 = *(char **)(v8 + 6488);
  if (v9 != v10)
  {
    while (*(_QWORD *)v9 != a1 + 2792)
    {
      v9 += 8;
      if (v9 == v10)
      {
        v9 = *(char **)(v8 + 6488);
        break;
      }
    }
  }
  v11 = v10 - (v9 + 8);
  if (v10 != v9 + 8)
    memmove(v9, v9 + 8, v10 - (v9 + 8));
  *(_QWORD *)(v8 + 6488) = &v9[v11];
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 6448));
LABEL_23:
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(a1 + 1240);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_232CA4D20(_Unwind_Exception *a1)
{
  unint64_t v1;

  std::mutex::~mutex((std::mutex *)(v1 + 3824));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3768);
  AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)(v1 + 3704));
  AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariantPDSState(v1 + 1240);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariant(unint64_t a1)
{
  AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariant(unint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_2504018C0;

  *(_QWORD *)(a1 + 3288) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3296));
  v2 = *(void ***)(a1 + 3264);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 3248);
  *(_QWORD *)(a1 + 3248) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 3207) < 0)
  {
    operator delete(*(void **)(a1 + 3184));
    if ((*(char *)(a1 + 3183) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_11:
    operator delete(*(void **)(a1 + 3160));
    goto LABEL_6;
  }
  if (*(char *)(a1 + 3183) < 0)
    goto LABEL_11;
LABEL_6:
  AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(a1 + 1240);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_232CA4E38(_Unwind_Exception *a1)
{
  unint64_t v1;

  std::mutex::~mutex((std::mutex *)(v1 + 3296));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3248);
  AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)(v1 + 3160));
  AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(v1 + 1240);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariant(unint64_t a1)
{
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariant(unint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_2504018E0;

  *(_QWORD *)(a1 + 3320) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3328));
  v2 = *(void ***)(a1 + 3296);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 3280);
  *(_QWORD *)(a1 + 3280) = 0;
  if (v3)
    operator delete(v3);
  AGX::ComputeProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariantPDSState(a1 + 1240);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_232CA4F24(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1 + 52);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100]((uint64_t)&v1[51].__m_.__opaque[8]);
  AGX::ComputeProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariantPDSState((uint64_t)&v1[19].__m_.__opaque[16]);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::~ProgramVariant((unint64_t)v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  ProgramBindingsAndDMAList *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  void *v37;
  uint64_t v38;
  unint64_t v39;

  *(_QWORD *)a1 = &off_2504019C0;
  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 576))
  {
    v3 = *(_QWORD *)(a1 + 584);
    v4 = *(NSObject **)(v3 + 16);
    v34 = MEMORY[0x24BDAC760];
    v35 = 3221225472;
    v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v37 = &__block_descriptor_48_e5_v8__0l;
    v38 = v3;
    v39 = a1 + 552;
    dispatch_sync(v4, &v34);
    *(_OWORD *)(a1 + 577) = 0u;
    *(_OWORD *)(a1 + 568) = 0u;
    *(_OWORD *)(a1 + 552) = 0u;
  }
  if (*(_QWORD *)(a1 + 624))
  {
    v5 = *(_QWORD *)(a1 + 632);
    v6 = *(NSObject **)(v5 + 16);
    v34 = v2;
    v35 = 3221225472;
    v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v37 = &__block_descriptor_48_e5_v8__0l;
    v38 = v5;
    v39 = a1 + 600;
    dispatch_sync(v6, &v34);
    *(_OWORD *)(a1 + 625) = 0u;
    *(_OWORD *)(a1 + 616) = 0u;
    *(_OWORD *)(a1 + 600) = 0u;
  }
  if (*(_QWORD *)(a1 + 672))
  {
    v7 = *(_QWORD *)(a1 + 680);
    v8 = *(NSObject **)(v7 + 16);
    v34 = v2;
    v35 = 3221225472;
    v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v37 = &__block_descriptor_48_e5_v8__0l;
    v38 = v7;
    v39 = a1 + 648;
    dispatch_sync(v8, &v34);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v9);
    MEMORY[0x234927ECC](v10, 0x1030C404D8F7974);
  }
  v11 = *(ProgramBindingsAndDMAList **)(a1 + 16);
  if (v11)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v11);
    MEMORY[0x234927ECC]();
  }
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v12 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6872));
  }
  if ((*(char *)(a1 + 1239) & 0x80000000) == 0)
  {
    v13 = *(void **)(a1 + 1192);
    if (!v13)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 1216));
  v13 = *(void **)(a1 + 1192);
  if (v13)
  {
LABEL_15:
    *(_QWORD *)(a1 + 1200) = v13;
    operator delete(v13);
  }
LABEL_16:
  v14 = *(_QWORD *)(a1 + 1168);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1176);
    v16 = *(void **)(a1 + 1168);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 1168);
    }
    *(_QWORD *)(a1 + 1176) = v14;
    operator delete(v16);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 1056));
  v17 = *(_QWORD *)(a1 + 1016);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 1024);
    v19 = *(void **)(a1 + 1016);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = *(void **)(a1 + 1016);
    }
    *(_QWORD *)(a1 + 1024) = v17;
    operator delete(v19);
  }
  v23 = *(void **)(a1 + 992);
  if (v23)
  {
    *(_QWORD *)(a1 + 1000) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 968);
  if (v24)
  {
    *(_QWORD *)(a1 + 976) = v24;
    operator delete(v24);
  }
  if (*(char *)(a1 + 895) < 0)
  {
    operator delete(*(void **)(a1 + 872));
    if ((*(char *)(a1 + 503) & 0x80000000) == 0)
    {
LABEL_43:
      if ((*(char *)(a1 + 479) & 0x80000000) == 0)
        goto LABEL_44;
LABEL_64:
      operator delete(*(void **)(a1 + 456));
      if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        goto LABEL_45;
      goto LABEL_65;
    }
  }
  else if ((*(char *)(a1 + 503) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)(a1 + 480));
  if (*(char *)(a1 + 479) < 0)
    goto LABEL_64;
LABEL_44:
  if ((*(char *)(a1 + 455) & 0x80000000) == 0)
    goto LABEL_45;
LABEL_65:
  operator delete(*(void **)(a1 + 432));
LABEL_45:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 296));
  v25 = *(void **)(a1 + 264);
  if (v25)
  {
    *(_QWORD *)(a1 + 272) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 240);
  if (v26)
  {
    *(_QWORD *)(a1 + 248) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 192);
  if (v27)
  {
    *(_QWORD *)(a1 + 200) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 168);
  if (v28)
  {
    *(_QWORD *)(a1 + 176) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 144);
  if (v29)
  {
    *(_QWORD *)(a1 + 152) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 120);
  if (v30)
  {
    *(_QWORD *)(a1 + 128) = v30;
    operator delete(v30);
  }
  v31 = *(void **)(a1 + 96);
  if (v31)
  {
    *(_QWORD *)(a1 + 104) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 72);
  if (v32)
  {
    *(_QWORD *)(a1 + 80) = v32;
    operator delete(v32);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

void AGX::BlitVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BlitVertexProgramVariant(unint64_t a1)
{
  AGX::BlitVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BlitVertexProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::BlitVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BlitVertexProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[6];

  *(_QWORD *)a1 = &off_250401940;
  v2 = *(_QWORD *)(a1 + 3440);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 40 * v3;
      do
      {
        if (*(char *)(v2 + v4 - 1) < 0)
          operator delete(*(void **)(v2 + v4 - 24));
        v4 -= 40;
      }
      while (v4);
    }
    MEMORY[0x234927EB4](v2 - 16, 0x1012C8093F7C2A9);
    *(_QWORD *)(a1 + 3440) = 0;
  }
  if (*(_QWORD *)(a1 + 3504))
  {
    v5 = *(_QWORD *)(a1 + 3512);
    v6 = *(NSObject **)(v5 + 16);
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v8[3] = &__block_descriptor_48_e5_v8__0l;
    v8[4] = v5;
    v8[5] = a1 + 3480;
    dispatch_sync(v6, v8);
    *(_OWORD *)(a1 + 3505) = 0u;
    *(_OWORD *)(a1 + 3480) = 0u;
    *(_OWORD *)(a1 + 3496) = 0u;
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState(a1 + 1216);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitVertexArgumentTable,false,false>::~ProgramVariant(a1);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  uint64_t v35;
  unint64_t v36;

  *(_QWORD *)a1 = &off_250401E90;
  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 552))
  {
    v3 = *(_QWORD *)(a1 + 560);
    v4 = *(NSObject **)(v3 + 16);
    v31 = MEMORY[0x24BDAC760];
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v3;
    v36 = a1 + 528;
    dispatch_sync(v4, &v31);
    *(_OWORD *)(a1 + 553) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
  }
  if (*(_QWORD *)(a1 + 600))
  {
    v5 = *(_QWORD *)(a1 + 608);
    v6 = *(NSObject **)(v5 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v5;
    v36 = a1 + 576;
    dispatch_sync(v6, &v31);
    *(_OWORD *)(a1 + 601) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
  }
  if (*(_QWORD *)(a1 + 648))
  {
    v7 = *(_QWORD *)(a1 + 656);
    v8 = *(NSObject **)(v7 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v7;
    v36 = a1 + 624;
    dispatch_sync(v8, &v31);
    *(_OWORD *)(a1 + 649) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v9 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 6872));
  }
  if ((*(char *)(a1 + 1215) & 0x80000000) == 0)
  {
    v10 = *(void **)(a1 + 1168);
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1192));
  v10 = *(void **)(a1 + 1168);
  if (v10)
  {
LABEL_11:
    *(_QWORD *)(a1 + 1176) = v10;
    operator delete(v10);
  }
LABEL_12:
  v11 = *(_QWORD *)(a1 + 1144);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 1152);
    v13 = *(void **)(a1 + 1144);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 1144);
    }
    *(_QWORD *)(a1 + 1152) = v11;
    operator delete(v13);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 1032));
  v14 = *(_QWORD *)(a1 + 992);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1000);
    v16 = *(void **)(a1 + 992);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 992);
    }
    *(_QWORD *)(a1 + 1000) = v14;
    operator delete(v16);
  }
  v20 = *(void **)(a1 + 968);
  if (v20)
  {
    *(_QWORD *)(a1 + 976) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 944);
  if (v21)
  {
    *(_QWORD *)(a1 + 952) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 871) < 0)
  {
    operator delete(*(void **)(a1 + 848));
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
    {
LABEL_39:
      if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        goto LABEL_40;
LABEL_60:
      operator delete(*(void **)(a1 + 432));
      if ((*(char *)(a1 + 431) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_61;
    }
  }
  else if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 455) < 0)
    goto LABEL_60;
LABEL_40:
  if ((*(char *)(a1 + 431) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_61:
  operator delete(*(void **)(a1 + 408));
LABEL_41:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 272));
  v22 = *(void **)(a1 + 240);
  if (v22)
  {
    *(_QWORD *)(a1 + 248) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 216);
  if (v23)
  {
    *(_QWORD *)(a1 + 224) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 168);
  if (v24)
  {
    *(_QWORD *)(a1 + 176) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 144);
  if (v25)
  {
    *(_QWORD *)(a1 + 152) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 120);
  if (v26)
  {
    *(_QWORD *)(a1 + 128) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 96);
  if (v27)
  {
    *(_QWORD *)(a1 + 104) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 72);
  if (v28)
  {
    *(_QWORD *)(a1 + 80) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 48);
  if (v29)
  {
    *(_QWORD *)(a1 + 56) = v29;
    operator delete(v29);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitVertexArgumentTable,false,false>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

void AGX::TileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~TileProgramVariant(unint64_t a1)
{
  AGX::TileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~TileProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::TileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~TileProgramVariant(unint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &off_250401960;

  *(_QWORD *)(a1 + 3192) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3200));
  v2 = *(void ***)(a1 + 3168);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 3152);
  *(_QWORD *)(a1 + 3152) = 0;
  if (v3)
    operator delete(v3);
  AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(a1 + 1240);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_232CA5844(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1 + 50);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100]((uint64_t)&v1[49].__m_.__opaque[8]);
  AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState((uint64_t)&v1[19].__m_.__opaque[16]);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant((unint64_t)v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::ClearVisibilityVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ClearVisibilityVertexProgramVariant(unint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  *(_QWORD *)a1 = &off_250401980;
  if (*(_QWORD *)(a1 + 3488))
  {
    v2 = (_OWORD *)(a1 + 3464);
    v3 = *(_QWORD *)(a1 + 3496);
    v4 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v3;
    v6[5] = a1 + 3464;
    dispatch_sync(v4, v6);
    *(_OWORD *)(a1 + 3489) = 0u;
    *v2 = 0u;
    *(_OWORD *)(a1 + 3480) = 0u;
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState(a1 + 1216);
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(a1);
}

void AGX::ClearVisibilityVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ClearVisibilityVertexProgramVariant(unint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  *(_QWORD *)a1 = &off_250401980;
  if (*(_QWORD *)(a1 + 3488))
  {
    v2 = (_OWORD *)(a1 + 3464);
    v3 = *(_QWORD *)(a1 + 3496);
    v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1 + 3464;
    dispatch_sync(v4, v5);
    *(_OWORD *)(a1 + 3489) = 0u;
    *v2 = 0u;
    *(_OWORD *)(a1 + 3480) = 0u;
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState(a1 + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  uint64_t v35;
  unint64_t v36;

  *(_QWORD *)a1 = &off_250401EB0;
  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 552))
  {
    v3 = *(_QWORD *)(a1 + 560);
    v4 = *(NSObject **)(v3 + 16);
    v31 = MEMORY[0x24BDAC760];
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v3;
    v36 = a1 + 528;
    dispatch_sync(v4, &v31);
    *(_OWORD *)(a1 + 553) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
  }
  if (*(_QWORD *)(a1 + 600))
  {
    v5 = *(_QWORD *)(a1 + 608);
    v6 = *(NSObject **)(v5 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v5;
    v36 = a1 + 576;
    dispatch_sync(v6, &v31);
    *(_OWORD *)(a1 + 601) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
  }
  if (*(_QWORD *)(a1 + 648))
  {
    v7 = *(_QWORD *)(a1 + 656);
    v8 = *(NSObject **)(v7 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v7;
    v36 = a1 + 624;
    dispatch_sync(v8, &v31);
    *(_OWORD *)(a1 + 649) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v9 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 6872));
  }
  if ((*(char *)(a1 + 1215) & 0x80000000) == 0)
  {
    v10 = *(void **)(a1 + 1168);
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1192));
  v10 = *(void **)(a1 + 1168);
  if (v10)
  {
LABEL_11:
    *(_QWORD *)(a1 + 1176) = v10;
    operator delete(v10);
  }
LABEL_12:
  v11 = *(_QWORD *)(a1 + 1144);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 1152);
    v13 = *(void **)(a1 + 1144);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 1144);
    }
    *(_QWORD *)(a1 + 1152) = v11;
    operator delete(v13);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 1032));
  v14 = *(_QWORD *)(a1 + 992);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1000);
    v16 = *(void **)(a1 + 992);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 992);
    }
    *(_QWORD *)(a1 + 1000) = v14;
    operator delete(v16);
  }
  v20 = *(void **)(a1 + 968);
  if (v20)
  {
    *(_QWORD *)(a1 + 976) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 944);
  if (v21)
  {
    *(_QWORD *)(a1 + 952) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 871) < 0)
  {
    operator delete(*(void **)(a1 + 848));
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
    {
LABEL_39:
      if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        goto LABEL_40;
LABEL_60:
      operator delete(*(void **)(a1 + 432));
      if ((*(char *)(a1 + 431) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_61;
    }
  }
  else if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 455) < 0)
    goto LABEL_60;
LABEL_40:
  if ((*(char *)(a1 + 431) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_61:
  operator delete(*(void **)(a1 + 408));
LABEL_41:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 272));
  v22 = *(void **)(a1 + 240);
  if (v22)
  {
    *(_QWORD *)(a1 + 248) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 216);
  if (v23)
  {
    *(_QWORD *)(a1 + 224) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 168);
  if (v24)
  {
    *(_QWORD *)(a1 + 176) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 144);
  if (v25)
  {
    *(_QWORD *)(a1 + 152) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 120);
  if (v26)
  {
    *(_QWORD *)(a1 + 128) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 96);
  if (v27)
  {
    *(_QWORD *)(a1 + 104) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 72);
  if (v28)
  {
    *(_QWORD *)(a1 + 80) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 48);
  if (v29)
  {
    *(_QWORD *)(a1 + 56) = v29;
    operator delete(v29);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

uint64_t VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = *(NSObject **)(a1 + 976);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 984);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 928);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 936);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 880);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 888);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 832);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 840);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 624) = &off_2504029B0;
  if (*(char *)(a1 + 815) < 0)
  {
    operator delete(*(void **)(a1 + 792));
    if ((*(char *)(a1 + 791) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((*(char *)(a1 + 791) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(*(void **)(a1 + 768));
LABEL_19:
  *(_QWORD *)(a1 + 624) = off_250401AE0;
  v10 = *(void **)(a1 + 744);
  if (v10)
  {
    *(_QWORD *)(a1 + 752) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 720);
  if (v11)
  {
    *(_QWORD *)(a1 + 728) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 711) < 0)
    operator delete(*(void **)(a1 + 688));
  *(_QWORD *)(a1 + 624) = off_250401B28;
  v12 = *(void **)(a1 + 640);
  if (v12)
  {
    *(_QWORD *)(a1 + 648) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 416) = &off_2504029B0;
  if (*(char *)(a1 + 607) < 0)
  {
    operator delete(*(void **)(a1 + 584));
    if ((*(char *)(a1 + 583) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if ((*(char *)(a1 + 583) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(*(void **)(a1 + 560));
LABEL_29:
  *(_QWORD *)(a1 + 416) = off_250401AE0;
  v13 = *(void **)(a1 + 536);
  if (v13)
  {
    *(_QWORD *)(a1 + 544) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 512);
  if (v14)
  {
    *(_QWORD *)(a1 + 520) = v14;
    operator delete(v14);
  }
  if (*(char *)(a1 + 503) < 0)
    operator delete(*(void **)(a1 + 480));
  *(_QWORD *)(a1 + 416) = off_250401B28;
  v15 = *(void **)(a1 + 432);
  if (v15)
  {
    *(_QWORD *)(a1 + 440) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 208) = &off_2504029B0;
  if (*(char *)(a1 + 399) < 0)
  {
    operator delete(*(void **)(a1 + 376));
    if ((*(char *)(a1 + 375) & 0x80000000) == 0)
      goto LABEL_39;
  }
  else if ((*(char *)(a1 + 375) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(a1 + 352));
LABEL_39:
  *(_QWORD *)(a1 + 208) = off_250401AE0;
  v16 = *(void **)(a1 + 328);
  if (v16)
  {
    *(_QWORD *)(a1 + 336) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 304);
  if (v17)
  {
    *(_QWORD *)(a1 + 312) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  *(_QWORD *)(a1 + 208) = off_250401B28;
  v18 = *(void **)(a1 + 224);
  if (v18)
  {
    *(_QWORD *)(a1 + 232) = v18;
    operator delete(v18);
  }
  *(_QWORD *)a1 = &off_2504029B0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_49;
  }
  else if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(*(void **)(a1 + 144));
LABEL_49:
  *(_QWORD *)a1 = off_250401AE0;
  v19 = *(void **)(a1 + 120);
  if (v19)
  {
    *(_QWORD *)(a1 + 128) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 96);
  if (v20)
  {
    *(_QWORD *)(a1 + 104) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_250401B28;
  v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(_QWORD *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::ObjectProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = *(NSObject **)(a1 + 784);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 792);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 736);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 744);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 688);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 696);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 640);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 648);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 480) = off_250401BB0;
  v10 = *(void **)(a1 + 608);
  if (v10)
  {
    *(_QWORD *)(a1 + 616) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 584);
  if (v11)
  {
    *(_QWORD *)(a1 + 592) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  *(_QWORD *)(a1 + 480) = off_250401BF8;
  v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(_QWORD *)(a1 + 504) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 320) = off_250401BB0;
  v13 = *(void **)(a1 + 448);
  if (v13)
  {
    *(_QWORD *)(a1 + 456) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 424);
  if (v14)
  {
    *(_QWORD *)(a1 + 432) = v14;
    operator delete(v14);
  }
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  *(_QWORD *)(a1 + 320) = off_250401BF8;
  v15 = *(void **)(a1 + 336);
  if (v15)
  {
    *(_QWORD *)(a1 + 344) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 160) = off_250401BB0;
  v16 = *(void **)(a1 + 288);
  if (v16)
  {
    *(_QWORD *)(a1 + 296) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 264);
  if (v17)
  {
    *(_QWORD *)(a1 + 272) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  *(_QWORD *)(a1 + 160) = off_250401BF8;
  v18 = *(void **)(a1 + 176);
  if (v18)
  {
    *(_QWORD *)(a1 + 184) = v18;
    operator delete(v18);
  }
  *(_QWORD *)a1 = off_250401BB0;
  v19 = *(void **)(a1 + 128);
  if (v19)
  {
    *(_QWORD *)(a1 + 136) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 104);
  if (v20)
  {
    *(_QWORD *)(a1 + 112) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)a1 = off_250401BF8;
  v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(_QWORD *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::G9::MeshProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = *(NSObject **)(a1 + 1008);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 1016);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 960);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 968);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 912);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 920);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 864);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 872);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 648) = &off_2504029F8;
  if (*(char *)(a1 + 847) < 0)
  {
    operator delete(*(void **)(a1 + 824));
    if ((*(char *)(a1 + 823) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((*(char *)(a1 + 823) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(*(void **)(a1 + 800));
LABEL_19:
  *(_QWORD *)(a1 + 648) = off_250401C80;
  v10 = *(void **)(a1 + 776);
  if (v10)
  {
    *(_QWORD *)(a1 + 784) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 752);
  if (v11)
  {
    *(_QWORD *)(a1 + 760) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 743) < 0)
    operator delete(*(void **)(a1 + 720));
  *(_QWORD *)(a1 + 648) = off_250401CC8;
  v12 = *(void **)(a1 + 664);
  if (v12)
  {
    *(_QWORD *)(a1 + 672) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 432) = &off_2504029F8;
  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    if ((*(char *)(a1 + 607) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if ((*(char *)(a1 + 607) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(*(void **)(a1 + 584));
LABEL_29:
  *(_QWORD *)(a1 + 432) = off_250401C80;
  v13 = *(void **)(a1 + 560);
  if (v13)
  {
    *(_QWORD *)(a1 + 568) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 536);
  if (v14)
  {
    *(_QWORD *)(a1 + 544) = v14;
    operator delete(v14);
  }
  if (*(char *)(a1 + 527) < 0)
    operator delete(*(void **)(a1 + 504));
  *(_QWORD *)(a1 + 432) = off_250401CC8;
  v15 = *(void **)(a1 + 448);
  if (v15)
  {
    *(_QWORD *)(a1 + 456) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 216) = &off_2504029F8;
  if (*(char *)(a1 + 415) < 0)
  {
    operator delete(*(void **)(a1 + 392));
    if ((*(char *)(a1 + 391) & 0x80000000) == 0)
      goto LABEL_39;
  }
  else if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(a1 + 368));
LABEL_39:
  *(_QWORD *)(a1 + 216) = off_250401C80;
  v16 = *(void **)(a1 + 344);
  if (v16)
  {
    *(_QWORD *)(a1 + 352) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 320);
  if (v17)
  {
    *(_QWORD *)(a1 + 328) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  *(_QWORD *)(a1 + 216) = off_250401CC8;
  v18 = *(void **)(a1 + 232);
  if (v18)
  {
    *(_QWORD *)(a1 + 240) = v18;
    operator delete(v18);
  }
  *(_QWORD *)a1 = &off_2504029F8;
  if (*(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_49;
  }
  else if ((*(char *)(a1 + 175) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(*(void **)(a1 + 152));
LABEL_49:
  *(_QWORD *)a1 = off_250401C80;
  v19 = *(void **)(a1 + 128);
  if (v19)
  {
    *(_QWORD *)(a1 + 136) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 104);
  if (v20)
  {
    *(_QWORD *)(a1 + 112) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)a1 = off_250401CC8;
  v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(_QWORD *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::FragmentProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = *(NSObject **)(a1 + 1296);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 1304);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 1248);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 1256);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 1200);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 1208);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 1152);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 1160);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 864) = &off_250402A40;
  v10 = *(void **)(a1 + 1120);
  if (v10)
  {
    *(_QWORD *)(a1 + 1128) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1096);
  if (v11)
  {
    *(_QWORD *)(a1 + 1104) = v11;
    operator delete(v11);
  }
  if ((*(char *)(a1 + 1087) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 1063) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_55:
    operator delete(*(void **)(a1 + 1040));
    if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
  operator delete(*(void **)(a1 + 1064));
  if (*(char *)(a1 + 1063) < 0)
    goto LABEL_55;
LABEL_23:
  if ((*(char *)(a1 + 1039) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_56:
  operator delete(*(void **)(a1 + 1016));
LABEL_24:
  *(_QWORD *)(a1 + 864) = off_250401D50;
  v12 = *(void **)(a1 + 880);
  if (v12)
  {
    *(_QWORD *)(a1 + 888) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 576) = &off_250402A40;
  v13 = *(void **)(a1 + 832);
  if (v13)
  {
    *(_QWORD *)(a1 + 840) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 808);
  if (v14)
  {
    *(_QWORD *)(a1 + 816) = v14;
    operator delete(v14);
  }
  if ((*(char *)(a1 + 799) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 775) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_58:
    operator delete(*(void **)(a1 + 752));
    if ((*(char *)(a1 + 751) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_59;
  }
  operator delete(*(void **)(a1 + 776));
  if (*(char *)(a1 + 775) < 0)
    goto LABEL_58;
LABEL_32:
  if ((*(char *)(a1 + 751) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_59:
  operator delete(*(void **)(a1 + 728));
LABEL_33:
  *(_QWORD *)(a1 + 576) = off_250401D50;
  v15 = *(void **)(a1 + 592);
  if (v15)
  {
    *(_QWORD *)(a1 + 600) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 288) = &off_250402A40;
  v16 = *(void **)(a1 + 544);
  if (v16)
  {
    *(_QWORD *)(a1 + 552) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 520);
  if (v17)
  {
    *(_QWORD *)(a1 + 528) = v17;
    operator delete(v17);
  }
  if ((*(char *)(a1 + 511) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 487) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_61:
    operator delete(*(void **)(a1 + 464));
    if ((*(char *)(a1 + 463) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_62;
  }
  operator delete(*(void **)(a1 + 488));
  if (*(char *)(a1 + 487) < 0)
    goto LABEL_61;
LABEL_41:
  if ((*(char *)(a1 + 463) & 0x80000000) == 0)
    goto LABEL_42;
LABEL_62:
  operator delete(*(void **)(a1 + 440));
LABEL_42:
  *(_QWORD *)(a1 + 288) = off_250401D50;
  v18 = *(void **)(a1 + 304);
  if (v18)
  {
    *(_QWORD *)(a1 + 312) = v18;
    operator delete(v18);
  }
  *(_QWORD *)a1 = &off_250402A40;
  v19 = *(void **)(a1 + 256);
  if (v19)
  {
    *(_QWORD *)(a1 + 264) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 232);
  if (v20)
  {
    *(_QWORD *)(a1 + 240) = v20;
    operator delete(v20);
  }
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_50;
LABEL_64:
    operator delete(*(void **)(a1 + 176));
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_51;
    goto LABEL_65;
  }
  operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    goto LABEL_64;
LABEL_50:
  if ((*(char *)(a1 + 175) & 0x80000000) == 0)
    goto LABEL_51;
LABEL_65:
  operator delete(*(void **)(a1 + 152));
LABEL_51:
  *(_QWORD *)a1 = off_250401D50;
  v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(_QWORD *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v2 = *(NSObject **)(a1 + 752);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 760);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 704);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 712);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 656);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 664);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 608);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 616);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 456) = &off_250402A80;
  v10 = *(void **)(a1 + 576);
  if (v10)
  {
    *(_QWORD *)(a1 + 584) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 552);
  if (v11)
  {
    *(_QWORD *)(a1 + 560) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 543) < 0)
    operator delete(*(void **)(a1 + 520));
  *(_QWORD *)(a1 + 456) = off_250401DD0;
  v12 = *(void **)(a1 + 472);
  if (v12)
  {
    *(_QWORD *)(a1 + 480) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(a1 + 304) = &off_250402A80;
  v13 = *(void **)(a1 + 424);
  if (v13)
  {
    *(_QWORD *)(a1 + 432) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 400);
  if (v14)
  {
    *(_QWORD *)(a1 + 408) = v14;
    operator delete(v14);
  }
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  *(_QWORD *)(a1 + 304) = off_250401DD0;
  v15 = *(void **)(a1 + 320);
  if (v15)
  {
    *(_QWORD *)(a1 + 328) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 152) = &off_250402A80;
  v16 = *(void **)(a1 + 272);
  if (v16)
  {
    *(_QWORD *)(a1 + 280) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 248);
  if (v17)
  {
    *(_QWORD *)(a1 + 256) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  *(_QWORD *)(a1 + 152) = off_250401DD0;
  v18 = *(void **)(a1 + 168);
  if (v18)
  {
    *(_QWORD *)(a1 + 176) = v18;
    operator delete(v18);
  }
  *(_QWORD *)a1 = &off_250402A80;
  v19 = *(void **)(a1 + 120);
  if (v19)
  {
    *(_QWORD *)(a1 + 128) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 96);
  if (v20)
  {
    *(_QWORD *)(a1 + 104) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_250401DD0;
  v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(_QWORD *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VisibleFunctionsMap::getVisibleFunctionOffset(int8x8_t *this, const char *__s)
{
  size_t v4;
  size_t v5;
  _QWORD *p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *__dst;
  size_t v32;
  int64_t v33;

  if (!__s)
    return -1;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = operator new(v7 + 1);
    v32 = v5;
    v33 = v8 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v33) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_10;
  }
  memcpy(p_dst, __s, v5);
LABEL_10:
  *((_BYTE *)p_dst + v5) = 0;
  v9 = SHIBYTE(v33);
  v10 = __dst;
  if (v33 >= 0)
    v11 = (uint64_t *)&__dst;
  else
    v11 = __dst;
  if (v33 >= 0)
    v12 = HIBYTE(v33);
  else
    v12 = v32;
  v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v11, v12);
  v14 = this[1];
  if (!*(_QWORD *)&v14)
    goto LABEL_60;
  v15 = v13;
  v16 = (uint8x8_t)vcnt_s8(v14);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = v13;
    if (v13 >= *(_QWORD *)&v14)
      v17 = v13 % *(_QWORD *)&v14;
  }
  else
  {
    v17 = (*(_QWORD *)&v14 - 1) & v13;
  }
  v18 = *(uint64_t ***)(*(_QWORD *)this + 8 * v17);
  if (!v18 || (v19 = *v18) == 0)
  {
LABEL_60:
    v21 = 0;
    if ((v9 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_61;
  }
  if (v16.u32[0] < 2uLL)
  {
    v20 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v26 = v19[1];
      if (v15 == v26)
      {
        v27 = *((unsigned __int8 *)v19 + 39);
        if ((v27 & 0x80u) == 0)
          v28 = *((unsigned __int8 *)v19 + 39);
        else
          v28 = v19[3];
        if (v28 == v12)
        {
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp((const void *)v19[2], v11, v19[3]))
              goto LABEL_56;
          }
          else
          {
            if (!*((_BYTE *)v19 + 39))
              goto LABEL_56;
            v29 = 0;
            while (*((unsigned __int8 *)v19 + v29 + 16) == *((unsigned __int8 *)v11 + v29))
            {
              if (v27 == ++v29)
                goto LABEL_56;
            }
          }
        }
      }
      else if ((v26 & v20) != v17)
      {
        goto LABEL_60;
      }
      v21 = 0;
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_57;
    }
  }
  while (1)
  {
    v22 = v19[1];
    if (v15 != v22)
    {
      if (v22 >= *(_QWORD *)&v14)
        v22 %= *(_QWORD *)&v14;
      if (v22 != v17)
        goto LABEL_60;
      goto LABEL_26;
    }
    v23 = *((unsigned __int8 *)v19 + 39);
    v24 = (v23 & 0x80u) == 0 ? *((unsigned __int8 *)v19 + 39) : v19[3];
    if (v24 == v12)
      break;
LABEL_26:
    v21 = 0;
    v19 = (uint64_t *)*v19;
    if (!v19)
      goto LABEL_57;
  }
  if ((v23 & 0x80) == 0)
  {
    if (!*((_BYTE *)v19 + 39))
      goto LABEL_56;
    v25 = 0;
    while (*((unsigned __int8 *)v19 + v25 + 16) == *((unsigned __int8 *)v11 + v25))
    {
      if (v23 == ++v25)
        goto LABEL_56;
    }
    goto LABEL_26;
  }
  if (memcmp((const void *)v19[2], v11, v19[3]))
    goto LABEL_26;
LABEL_56:
  v21 = v19;
LABEL_57:
  if (v9 < 0)
  {
LABEL_61:
    operator delete(v10);
    if (!v21)
      return -1;
    return v21[5];
  }
LABEL_58:
  if (v21)
    return v21[5];
  return -1;
}

void ProgramBindingsAndDMAList::ProgramBindingsAndDMAList(ProgramBindingsAndDMAList *this, const AGCDeserializedReply *a2, int a3)
{
  char *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  BOOL v11;
  int *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  unsigned __int16 *v17;
  int *v18;
  unsigned int *v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unsigned int *v71;
  unint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  unsigned int *v122;
  unint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  unsigned __int16 *v148;
  uint64_t v149;
  unsigned __int16 *v150;
  uint64_t v151;
  unsigned __int16 *v152;
  uint64_t v153;
  unsigned __int16 *v154;
  uint64_t v155;
  BOOL v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  uint64_t *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  unsigned int *v173;
  unint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  __int128 *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int *v198;
  unsigned __int16 *v199;
  uint64_t v200;
  unsigned __int16 *v201;
  uint64_t v202;
  unsigned __int16 *v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BYTE *v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  _OWORD *v217;
  uint64_t *v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int *v223;
  unint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  __int128 *v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int16 *v239;
  unsigned int *v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int *v244;
  _QWORD *v245;
  uint64_t v246;
  _DWORD *v247;
  _DWORD *v248;
  int *v249;
  unsigned __int16 *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int16 *v254;
  uint64_t v255;
  unsigned __int16 *v256;
  uint64_t v257;
  unsigned __int16 *v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  _QWORD *v269;
  unint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  char *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int *v280;
  char *v281;
  __int128 v282;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (!a3)
  {
    v8 = (char *)a2 + 224;
    if (*((_QWORD *)a2 + 28))
    {
      if (!*((_QWORD *)a2 + 29))
        v8 = (char *)a2 + 784;
    }
    else
    {
      v8 = (char *)a2 + 784;
    }
    v10 = *(unsigned int **)v8;
    v9 = *((_QWORD *)v8 + 1);
    if (v10)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (v11)
      v12 = 0;
    else
      v12 = (int *)((char *)v10 + *v10);
    v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 5u)
    {
      v14 = v13[2];
      if (v14)
        goto LABEL_32;
    }
    goto LABEL_33;
  }
  v5 = (char *)operator new(0x20uLL);
  v281 = v5;
  v282 = xmmword_232D73380;
  strcpy(v5, "agc.deferred_attributes@md");
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)a2 + 174, (uint64_t)&v281);
  operator delete(v5);
  v7 = (char *)a2 + 24;
  if (*((_QWORD *)a2 + 3))
  {
    if (!*((_QWORD *)a2 + 4))
      v7 = (char *)a2 + 584;
  }
  else
  {
    v7 = (char *)a2 + 584;
  }
  v15 = *(_QWORD *)v7;
  if (*((_QWORD *)a2 + 28))
  {
    if (*((_QWORD *)a2 + 29))
      v16 = (char *)a2 + 224;
    else
      v16 = (char *)a2 + 784;
    v12 = 0;
    if (!v15)
      goto LABEL_30;
  }
  else
  {
    v16 = (char *)a2 + 784;
    v12 = 0;
    if (!v15)
      goto LABEL_30;
  }
  if (*((_QWORD *)v16 + 1))
    v12 = (int *)(v15 + *((unsigned int *)v6 + 10) + *(unsigned int *)(v15 + *((unsigned int *)v6 + 10)));
LABEL_30:
  v17 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v17 >= 5u)
  {
    v14 = v17[2];
    if (v14)
    {
LABEL_32:
      v18 = (int *)((char *)v12 + v14 + *(int *)((char *)v12 + v14));
      goto LABEL_34;
    }
  }
LABEL_33:
  v18 = 0;
LABEL_34:
  v19 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 16));
  v20 = *(unsigned int *)((char *)v19 + *v19);
  v21 = *(_BYTE **)this;
  if (v20 <= (uint64_t)(*((_QWORD *)this + 2) - *(_QWORD *)this) >> 3)
    goto LABEL_45;
  v22 = (_BYTE *)*((_QWORD *)this + 1);
  v23 = (char *)operator new(8 * v20);
  v24 = v22 - v21;
  v25 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
  v26 = v25;
  if (v22 != v21)
  {
    if ((unint64_t)(v24 - 8) < 0x58)
    {
      v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_42:
        v33 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v26 - 1) = v33;
        v26 -= 8;
      }
      while (v22 != v21);
      goto LABEL_43;
    }
    v26 = &v23[(v22 - v21) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v22[-(v24 & 0xFFFFFFFFFFFFFFF8)] - v23) < 0x20)
      goto LABEL_42;
    v27 = v24 >> 3;
    v28 = ((unint64_t)(v24 - 8) >> 3) + 1;
    v29 = &v23[8 * v27 - 16];
    v30 = (__int128 *)(v22 - 16);
    v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 4;
    }
    while (v31);
    v26 = &v25[-8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
    v22 -= 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_42;
  }
LABEL_43:
  *(_QWORD *)this = v26;
  *((_QWORD *)this + 1) = v25;
  *((_QWORD *)this + 2) = &v23[8 * v20];
  if (v21)
    operator delete(v21);
LABEL_45:
  v34 = *v18;
  v35 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v34 + 16));
  v36 = *v35;
  v38 = (unsigned int *)((char *)v35 + v36 + 4);
  v37 = *(unsigned int *)((char *)v35 + v36);
  v280 = v18;
  if ((_DWORD)v37)
  {
    v39 = &v38[v37];
    do
    {
      v41 = *v38;
      v42 = operator new();
      v43 = v42;
      v44 = (int *)((char *)v38 + v41);
      v45 = (unsigned __int16 *)((char *)v38 + v41 - *(int *)((char *)v38 + v41));
      if (*v45 < 5u)
      {
        LODWORD(v46) = 0;
      }
      else
      {
        v46 = v45[2];
        if (v46)
          LODWORD(v46) = *((char *)v44 + v46);
      }
      *(_DWORD *)v42 = v46;
      v47 = (unsigned __int16 *)((char *)v44 - *v44);
      if (*v47 < 7u)
      {
        LODWORD(v48) = 0;
      }
      else
      {
        v48 = v47[3];
        if (v48)
          LODWORD(v48) = *(int *)((char *)v44 + v48);
      }
      *(_DWORD *)(v42 + 4) = v48;
      v49 = (unsigned __int16 *)((char *)v44 - *v44);
      if (*v49 < 9u)
      {
        LODWORD(v50) = 0;
      }
      else
      {
        v50 = v49[4];
        if (v50)
          LODWORD(v50) = *(int *)((char *)v44 + v50);
      }
      *(_DWORD *)(v42 + 8) = v50;
      v51 = (unsigned __int16 *)((char *)v44 - *v44);
      v53 = *v51 >= 0xBu && (v52 = v51[5]) != 0 && *((_BYTE *)v44 + v52) != 0;
      *(_BYTE *)(v42 + 12) = v53;
      v55 = (uint64_t *)*((_QWORD *)this + 1);
      v54 = *((_QWORD *)this + 2);
      if ((unint64_t)v55 < v54)
      {
        *v55 = v42;
        v40 = v55 + 1;
      }
      else
      {
        v56 = *(uint64_t **)this;
        v57 = (uint64_t)v55 - *(_QWORD *)this;
        v58 = v57 >> 3;
        v59 = (v57 >> 3) + 1;
        if (v59 >> 61)
          abort();
        v60 = v54 - (_QWORD)v56;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          if (v61 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v62 = operator new(8 * v61);
        }
        else
        {
          v62 = 0;
        }
        v63 = (uint64_t *)&v62[8 * v58];
        *v63 = v43;
        v40 = v63 + 1;
        if (v55 == v56)
        {
          v56 = v55;
        }
        else
        {
          v64 = (char *)(v55 - 1) - (char *)v56;
          if (v64 < 0x58)
            goto LABEL_325;
          if ((unint64_t)((char *)v55 - &v62[v57]) < 0x20)
            goto LABEL_325;
          v65 = (v64 >> 3) + 1;
          v66 = &v62[8 * v58 - 16];
          v67 = v55 - 2;
          v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *(_OWORD *)v67;
            *(v66 - 1) = *((_OWORD *)v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 4;
            v68 -= 4;
          }
          while (v68);
          v63 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
          v55 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
          if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_325:
            do
            {
              v70 = *--v55;
              *--v63 = v70;
            }
            while (v55 != v56);
            v56 = *(uint64_t **)this;
          }
        }
        *(_QWORD *)this = v63;
        *((_QWORD *)this + 1) = v40;
        *((_QWORD *)this + 2) = &v62[8 * v61];
        if (v56)
          operator delete(v56);
      }
      *((_QWORD *)this + 1) = v40;
      ++v38;
    }
    while (v38 != v39);
    v18 = v280;
    v34 = *v280;
  }
  v71 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v34 + 20));
  v72 = *(unsigned int *)((char *)v71 + *v71);
  v73 = (_BYTE *)*((_QWORD *)this + 3);
  if (v72 > (uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v73) >> 3)
  {
    v74 = (_BYTE *)*((_QWORD *)this + 4);
    v75 = (char *)operator new(8 * v72);
    v76 = v74 - v73;
    v77 = &v75[(v74 - v73) & 0xFFFFFFFFFFFFFFF8];
    v78 = v77;
    if (v74 == v73)
      goto LABEL_97;
    if ((unint64_t)(v76 - 8) >= 0x58)
    {
      v78 = &v75[(v74 - v73) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v74[-(v76 & 0xFFFFFFFFFFFFFFF8)] - v75) >= 0x20)
      {
        v79 = v76 >> 3;
        v80 = ((unint64_t)(v76 - 8) >> 3) + 1;
        v81 = &v75[8 * v79 - 16];
        v82 = (__int128 *)(v74 - 16);
        v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *v82;
          *((_OWORD *)v81 - 1) = *(v82 - 1);
          *(_OWORD *)v81 = v84;
          v81 -= 32;
          v82 -= 2;
          v83 -= 4;
        }
        while (v83);
        v78 = &v77[-8 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
        v74 -= 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_97:
          *((_QWORD *)this + 3) = v78;
          *((_QWORD *)this + 4) = v77;
          *((_QWORD *)this + 5) = &v75[8 * v72];
          if (v73)
            operator delete(v73);
          goto LABEL_99;
        }
      }
    }
    else
    {
      v78 = &v75[(v74 - v73) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v85 = *((_QWORD *)v74 - 1);
      v74 -= 8;
      *((_QWORD *)v78 - 1) = v85;
      v78 -= 8;
    }
    while (v74 != v73);
    goto LABEL_97;
  }
LABEL_99:
  v86 = *v18;
  v87 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v86 + 20));
  v88 = *v87;
  v90 = (unsigned int *)((char *)v87 + v88 + 4);
  v89 = *(unsigned int *)((char *)v87 + v88);
  if ((_DWORD)v89)
  {
    v91 = &v90[v89];
    do
    {
      v93 = *v90;
      v94 = operator new();
      v95 = v94;
      v96 = (int *)((char *)v90 + v93);
      v97 = (unsigned __int16 *)((char *)v90 + v93 - *(int *)((char *)v90 + v93));
      if (*v97 < 5u)
      {
        LODWORD(v98) = 0;
      }
      else
      {
        v98 = v97[2];
        if (v98)
          LODWORD(v98) = *((char *)v96 + v98);
      }
      *(_DWORD *)v94 = v98;
      v99 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v99 < 7u)
      {
        LODWORD(v100) = 0;
      }
      else
      {
        v100 = v99[3];
        if (v100)
          LODWORD(v100) = *(int *)((char *)v96 + v100);
      }
      *(_DWORD *)(v94 + 4) = v100;
      v101 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v101 < 9u)
      {
        LODWORD(v102) = 0;
      }
      else
      {
        v102 = v101[4];
        if (v102)
          LODWORD(v102) = *(int *)((char *)v96 + v102);
      }
      *(_DWORD *)(v94 + 8) = v102;
      v103 = (unsigned __int16 *)((char *)v96 - *v96);
      v105 = *v103 >= 0xBu && (v104 = v103[5]) != 0 && *((_BYTE *)v96 + v104) != 0;
      *(_BYTE *)(v94 + 12) = v105;
      v107 = (uint64_t *)*((_QWORD *)this + 4);
      v106 = *((_QWORD *)this + 5);
      if ((unint64_t)v107 < v106)
      {
        *v107 = v94;
        v92 = v107 + 1;
      }
      else
      {
        v108 = (uint64_t *)*((_QWORD *)this + 3);
        v109 = v107 - v108;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 61)
          abort();
        v111 = v106 - (_QWORD)v108;
        if (v111 >> 2 > v110)
          v110 = v111 >> 2;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v113 = operator new(8 * v112);
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        *v114 = v95;
        v92 = v114 + 1;
        if (v107 == v108)
        {
          v108 = v107;
        }
        else
        {
          v115 = (char *)(v107 - 1) - (char *)v108;
          if (v115 < 0x58)
            goto LABEL_326;
          if ((unint64_t)((char *)v108 - v113) < 0x20)
            goto LABEL_326;
          v116 = (v115 >> 3) + 1;
          v117 = &v113[8 * v109 - 16];
          v118 = v107 - 2;
          v119 = v116 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v120 = *(_OWORD *)v118;
            *(v117 - 1) = *((_OWORD *)v118 - 1);
            *v117 = v120;
            v117 -= 2;
            v118 -= 4;
            v119 -= 4;
          }
          while (v119);
          v114 -= v116 & 0x3FFFFFFFFFFFFFFCLL;
          v107 -= v116 & 0x3FFFFFFFFFFFFFFCLL;
          if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_326:
            do
            {
              v121 = *--v107;
              *--v114 = v121;
            }
            while (v107 != v108);
            v108 = (uint64_t *)*((_QWORD *)this + 3);
          }
        }
        *((_QWORD *)this + 3) = v114;
        *((_QWORD *)this + 4) = v92;
        *((_QWORD *)this + 5) = &v113[8 * v112];
        if (v108)
          operator delete(v108);
      }
      *((_QWORD *)this + 4) = v92;
      ++v90;
    }
    while (v90 != v91);
    v18 = v280;
    v86 = *v280;
  }
  v122 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v86 + 12));
  v123 = *(unsigned int *)((char *)v122 + *v122);
  v124 = (_BYTE *)*((_QWORD *)this + 6);
  if (v123 > (uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v124) >> 3)
  {
    v125 = (_BYTE *)*((_QWORD *)this + 7);
    v126 = (char *)operator new(8 * v123);
    v127 = v125 - v124;
    v128 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFF8];
    v129 = v128;
    if (v125 == v124)
      goto LABEL_151;
    if ((unint64_t)(v127 - 8) >= 0x58)
    {
      v129 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v125[-(v127 & 0xFFFFFFFFFFFFFFF8)] - v126) >= 0x20)
      {
        v130 = v127 >> 3;
        v131 = ((unint64_t)(v127 - 8) >> 3) + 1;
        v132 = &v126[8 * v130 - 16];
        v133 = (__int128 *)(v125 - 16);
        v134 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v135 = *v133;
          *((_OWORD *)v132 - 1) = *(v133 - 1);
          *(_OWORD *)v132 = v135;
          v132 -= 32;
          v133 -= 2;
          v134 -= 4;
        }
        while (v134);
        v129 = &v128[-8 * (v131 & 0x3FFFFFFFFFFFFFFCLL)];
        v125 -= 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        if (v131 == (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_151:
          *((_QWORD *)this + 6) = v129;
          *((_QWORD *)this + 7) = v128;
          *((_QWORD *)this + 8) = &v126[8 * v123];
          if (v124)
            operator delete(v124);
          goto LABEL_153;
        }
      }
    }
    else
    {
      v129 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v136 = *((_QWORD *)v125 - 1);
      v125 -= 8;
      *((_QWORD *)v129 - 1) = v136;
      v129 -= 8;
    }
    while (v125 != v124);
    goto LABEL_151;
  }
LABEL_153:
  v137 = *v18;
  v138 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v137 + 12));
  v139 = *v138;
  v141 = (unsigned int *)((char *)v138 + v139 + 4);
  v140 = *(unsigned int *)((char *)v138 + v139);
  if ((_DWORD)v140)
  {
    v142 = &v141[v140];
    do
    {
      v144 = *v141;
      v145 = operator new();
      v146 = v145;
      v147 = (int *)((char *)v141 + v144);
      v148 = (unsigned __int16 *)((char *)v141 + v144 - *(int *)((char *)v141 + v144));
      if (*v148 < 5u)
      {
        LODWORD(v149) = 0;
      }
      else
      {
        v149 = v148[2];
        if (v149)
          LODWORD(v149) = *((char *)v147 + v149);
      }
      *(_DWORD *)v145 = v149;
      v150 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v150 < 7u)
      {
        LODWORD(v151) = 0;
      }
      else
      {
        v151 = v150[3];
        if (v151)
          LODWORD(v151) = *(int *)((char *)v147 + v151);
      }
      *(_DWORD *)(v145 + 4) = v151;
      v152 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v152 < 9u)
      {
        LODWORD(v153) = 0;
      }
      else
      {
        v153 = v152[4];
        if (v153)
          LODWORD(v153) = *(int *)((char *)v147 + v153);
      }
      *(_DWORD *)(v145 + 8) = v153;
      v154 = (unsigned __int16 *)((char *)v147 - *v147);
      v156 = *v154 >= 0xBu && (v155 = v154[5]) != 0 && *((_BYTE *)v147 + v155) != 0;
      *(_BYTE *)(v145 + 12) = v156;
      v158 = (uint64_t *)*((_QWORD *)this + 7);
      v157 = *((_QWORD *)this + 8);
      if ((unint64_t)v158 < v157)
      {
        *v158 = v145;
        v143 = v158 + 1;
      }
      else
      {
        v159 = (uint64_t *)*((_QWORD *)this + 6);
        v160 = v158 - v159;
        v161 = v160 + 1;
        if ((unint64_t)(v160 + 1) >> 61)
          abort();
        v162 = v157 - (_QWORD)v159;
        if (v162 >> 2 > v161)
          v161 = v162 >> 2;
        if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
          v163 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v163 = v161;
        if (v163)
        {
          if (v163 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v164 = operator new(8 * v163);
        }
        else
        {
          v164 = 0;
        }
        v165 = (uint64_t *)&v164[8 * v160];
        *v165 = v146;
        v143 = v165 + 1;
        if (v158 == v159)
        {
          v159 = v158;
        }
        else
        {
          v166 = (char *)(v158 - 1) - (char *)v159;
          if (v166 < 0x58)
            goto LABEL_327;
          if ((unint64_t)((char *)v159 - v164) < 0x20)
            goto LABEL_327;
          v167 = (v166 >> 3) + 1;
          v168 = &v164[8 * v160 - 16];
          v169 = v158 - 2;
          v170 = v167 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v171 = *(_OWORD *)v169;
            *(v168 - 1) = *((_OWORD *)v169 - 1);
            *v168 = v171;
            v168 -= 2;
            v169 -= 4;
            v170 -= 4;
          }
          while (v170);
          v165 -= v167 & 0x3FFFFFFFFFFFFFFCLL;
          v158 -= v167 & 0x3FFFFFFFFFFFFFFCLL;
          if (v167 != (v167 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_327:
            do
            {
              v172 = *--v158;
              *--v165 = v172;
            }
            while (v158 != v159);
            v159 = (uint64_t *)*((_QWORD *)this + 6);
          }
        }
        *((_QWORD *)this + 6) = v165;
        *((_QWORD *)this + 7) = v143;
        *((_QWORD *)this + 8) = &v164[8 * v163];
        if (v159)
          operator delete(v159);
      }
      *((_QWORD *)this + 7) = v143;
      ++v141;
    }
    while (v141 != v142);
    v18 = v280;
    v137 = *v280;
  }
  v173 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v137 + 24));
  v174 = *(unsigned int *)((char *)v173 + *v173);
  v175 = (_BYTE *)*((_QWORD *)this + 9);
  if (v174 > (uint64_t)(*((_QWORD *)this + 11) - (_QWORD)v175) >> 3)
  {
    v176 = (_BYTE *)*((_QWORD *)this + 10);
    v177 = (char *)operator new(8 * v174);
    v178 = v176 - v175;
    v179 = &v177[(v176 - v175) & 0xFFFFFFFFFFFFFFF8];
    v180 = v179;
    if (v176 == v175)
      goto LABEL_205;
    if ((unint64_t)(v178 - 8) >= 0x58)
    {
      v180 = &v177[(v176 - v175) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v176[-(v178 & 0xFFFFFFFFFFFFFFF8)] - v177) >= 0x20)
      {
        v181 = v178 >> 3;
        v182 = ((unint64_t)(v178 - 8) >> 3) + 1;
        v183 = &v177[8 * v181 - 16];
        v184 = (__int128 *)(v176 - 16);
        v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v186 = *v184;
          *((_OWORD *)v183 - 1) = *(v184 - 1);
          *(_OWORD *)v183 = v186;
          v183 -= 32;
          v184 -= 2;
          v185 -= 4;
        }
        while (v185);
        v180 = &v179[-8 * (v182 & 0x3FFFFFFFFFFFFFFCLL)];
        v176 -= 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
        if (v182 == (v182 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_205:
          *((_QWORD *)this + 9) = v180;
          *((_QWORD *)this + 10) = v179;
          *((_QWORD *)this + 11) = &v177[8 * v174];
          if (v175)
            operator delete(v175);
          goto LABEL_207;
        }
      }
    }
    else
    {
      v180 = &v177[(v176 - v175) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v187 = *((_QWORD *)v176 - 1);
      v176 -= 8;
      *((_QWORD *)v180 - 1) = v187;
      v180 -= 8;
    }
    while (v176 != v175);
    goto LABEL_205;
  }
LABEL_207:
  v188 = *v18;
  v189 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v188 + 24));
  v190 = *v189;
  v192 = (unsigned int *)((char *)v189 + v190 + 4);
  v191 = *(unsigned int *)((char *)v189 + v190);
  if (!(_DWORD)v191)
    goto LABEL_246;
  v193 = &v192[v191];
  do
  {
    v195 = *v192;
    v196 = operator new();
    v197 = v196;
    v198 = (int *)((char *)v192 + v195);
    v199 = (unsigned __int16 *)((char *)v192 + v195 - *(int *)((char *)v192 + v195));
    if (*v199 < 5u)
    {
      LODWORD(v200) = 0;
    }
    else
    {
      v200 = v199[2];
      if (v200)
        LODWORD(v200) = *((unsigned __int8 *)v198 + v200);
    }
    *(_DWORD *)v196 = v200;
    v201 = (unsigned __int16 *)((char *)v198 - *v198);
    if (*v201 < 7u)
    {
      LODWORD(v202) = 0;
    }
    else
    {
      v202 = v201[3];
      if (v202)
        LODWORD(v202) = *(int *)((char *)v198 + v202);
    }
    *(_DWORD *)(v196 + 4) = v202;
    v203 = (unsigned __int16 *)((char *)v198 - *v198);
    if (*v203 >= 9u && (v204 = v203[4]) != 0)
      v205 = *(int *)((char *)v198 + v204);
    else
      v205 = 0;
    *(_DWORD *)(v196 + 8) = v205;
    *(_BYTE *)(v196 + 12) = 0;
    v207 = (uint64_t *)*((_QWORD *)this + 10);
    v206 = *((_QWORD *)this + 11);
    if ((unint64_t)v207 < v206)
    {
      *v207 = v196;
      v194 = v207 + 1;
    }
    else
    {
      v208 = (uint64_t *)*((_QWORD *)this + 9);
      v209 = v207 - v208;
      v210 = v209 + 1;
      if ((unint64_t)(v209 + 1) >> 61)
        abort();
      v211 = v206 - (_QWORD)v208;
      if (v211 >> 2 > v210)
        v210 = v211 >> 2;
      if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
        v212 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v212 = v210;
      if (v212)
      {
        if (v212 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v213 = operator new(8 * v212);
      }
      else
      {
        v213 = 0;
      }
      v214 = (uint64_t *)&v213[8 * v209];
      *v214 = v197;
      v194 = v214 + 1;
      if (v207 == v208)
      {
        v208 = v207;
      }
      else
      {
        v215 = (char *)(v207 - 1) - (char *)v208;
        if (v215 < 0x58)
          goto LABEL_328;
        if ((unint64_t)((char *)v208 - v213) < 0x20)
          goto LABEL_328;
        v216 = (v215 >> 3) + 1;
        v217 = &v213[8 * v209 - 16];
        v218 = v207 - 2;
        v219 = v216 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v220 = *(_OWORD *)v218;
          *(v217 - 1) = *((_OWORD *)v218 - 1);
          *v217 = v220;
          v217 -= 2;
          v218 -= 4;
          v219 -= 4;
        }
        while (v219);
        v214 -= v216 & 0x3FFFFFFFFFFFFFFCLL;
        v207 -= v216 & 0x3FFFFFFFFFFFFFFCLL;
        if (v216 != (v216 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_328:
          do
          {
            v221 = *--v207;
            *--v214 = v221;
          }
          while (v207 != v208);
          v208 = (uint64_t *)*((_QWORD *)this + 9);
        }
      }
      *((_QWORD *)this + 9) = v214;
      *((_QWORD *)this + 10) = v194;
      *((_QWORD *)this + 11) = &v213[8 * v212];
      if (v208)
        operator delete(v208);
    }
    *((_QWORD *)this + 10) = v194;
    ++v192;
  }
  while (v192 != v193);
  v18 = v280;
  v188 = *v280;
  if (*(unsigned __int16 *)((char *)v280 - v188) < 0x17u)
  {
    LODWORD(v222) = 0;
  }
  else
  {
LABEL_246:
    v222 = *(unsigned __int16 *)((char *)v18 - v188 + 22);
    if (v222)
      LODWORD(v222) = *(int *)((char *)v18 + v222);
  }
  *((_DWORD *)this + 24) = v222;
  v223 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - *v18 + 8));
  v224 = *(unsigned int *)((char *)v223 + *v223);
  v225 = (_BYTE *)*((_QWORD *)this + 14);
  if (v224 > (uint64_t)(*((_QWORD *)this + 16) - (_QWORD)v225) >> 3)
  {
    v226 = (_BYTE *)*((_QWORD *)this + 15);
    v227 = (char *)operator new(8 * v224);
    v228 = v226 - v225;
    v229 = &v227[(v226 - v225) & 0xFFFFFFFFFFFFFFF8];
    v230 = v229;
    if (v226 == v225)
      goto LABEL_258;
    if ((unint64_t)(v228 - 8) >= 0x58)
    {
      v230 = &v227[(v226 - v225) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v226[-(v228 & 0xFFFFFFFFFFFFFFF8)] - v227) >= 0x20)
      {
        v231 = v228 >> 3;
        v232 = ((unint64_t)(v228 - 8) >> 3) + 1;
        v233 = &v227[8 * v231 - 16];
        v234 = (__int128 *)(v226 - 16);
        v235 = v232 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v236 = *v234;
          *((_OWORD *)v233 - 1) = *(v234 - 1);
          *(_OWORD *)v233 = v236;
          v233 -= 32;
          v234 -= 2;
          v235 -= 4;
        }
        while (v235);
        v230 = &v229[-8 * (v232 & 0x3FFFFFFFFFFFFFFCLL)];
        v226 -= 8 * (v232 & 0x3FFFFFFFFFFFFFFCLL);
        if (v232 == (v232 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_258:
          *((_QWORD *)this + 14) = v230;
          *((_QWORD *)this + 15) = v229;
          *((_QWORD *)this + 16) = &v227[8 * v224];
          if (v225)
            operator delete(v225);
          goto LABEL_260;
        }
      }
    }
    else
    {
      v230 = &v227[(v226 - v225) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v237 = *((_QWORD *)v226 - 1);
      v226 -= 8;
      *((_QWORD *)v230 - 1) = v237;
      v230 -= 8;
    }
    while (v226 != v225);
    goto LABEL_258;
  }
LABEL_260:
  v238 = *v18;
  v239 = (unsigned __int16 *)((char *)v18 - v238);
  v240 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 - v238 + 8));
  v241 = *v240;
  v243 = (unsigned int *)((char *)v240 + v241 + 4);
  v242 = *(unsigned int *)((char *)v240 + v241);
  if ((_DWORD)v242)
  {
    v244 = &v243[v242];
    do
    {
      v246 = *v243;
      v247 = (_DWORD *)operator new();
      v248 = v247;
      v249 = (int *)((char *)v243 + v246);
      v250 = (unsigned __int16 *)((char *)v243 + v246 - *(int *)((char *)v243 + v246));
      v251 = *v250;
      if (v251 <= 4)
      {
        LODWORD(v253) = 0;
        *v247 = 0;
      }
      else
      {
        v252 = v250[2];
        if (v250[2])
          LODWORD(v252) = *((char *)v249 + v252);
        *v247 = v252;
        if (v251 < 7)
        {
          LODWORD(v253) = 0;
        }
        else
        {
          v253 = v250[3];
          if (v253)
            LODWORD(v253) = *(int *)((char *)v249 + v253);
        }
      }
      v247[1] = v253;
      v254 = (unsigned __int16 *)((char *)v249 - *v249);
      if (*v254 < 9u)
      {
        LODWORD(v255) = 0;
      }
      else
      {
        v255 = v254[4];
        if (v255)
          LODWORD(v255) = *(int *)((char *)v249 + v255);
      }
      v247[2] = v255;
      v256 = (unsigned __int16 *)((char *)v249 - *v249);
      if (*v256 < 0xBu)
      {
        LODWORD(v257) = 0;
      }
      else
      {
        v257 = v256[5];
        if (v257)
          LODWORD(v257) = *(int *)((char *)v249 + v257);
      }
      v247[3] = v257;
      v258 = (unsigned __int16 *)((char *)v249 - *v249);
      if (*v258 >= 0xDu && (v259 = v258[6]) != 0)
        v260 = *(int *)((char *)v249 + v259);
      else
        v260 = 0;
      v247[4] = v260;
      v262 = (char *)*((_QWORD *)this + 15);
      v261 = *((_QWORD *)this + 16);
      if ((unint64_t)v262 < v261)
      {
        *(_QWORD *)v262 = v247;
        v245 = v262 + 8;
      }
      else
      {
        v263 = (char *)*((_QWORD *)this + 14);
        v264 = (v262 - v263) >> 3;
        v265 = v264 + 1;
        if ((unint64_t)(v264 + 1) >> 61)
          abort();
        v266 = v261 - (_QWORD)v263;
        if (v266 >> 2 > v265)
          v265 = v266 >> 2;
        if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8)
          v267 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v267 = v265;
        if (v267)
        {
          if (v267 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v268 = operator new(8 * v267);
        }
        else
        {
          v268 = 0;
        }
        v269 = &v268[8 * v264];
        *v269 = v248;
        v245 = v269 + 1;
        if (v262 == v263)
        {
          v263 = v262;
        }
        else
        {
          v270 = v262 - 8 - v263;
          if (v270 < 0x58)
            goto LABEL_329;
          if ((unint64_t)(v263 - v268) < 0x20)
            goto LABEL_329;
          v271 = (v270 >> 3) + 1;
          v272 = &v268[8 * v264 - 16];
          v273 = v262 - 16;
          v274 = v271 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v275 = *(_OWORD *)v273;
            *(v272 - 1) = *((_OWORD *)v273 - 1);
            *v272 = v275;
            v272 -= 2;
            v273 -= 32;
            v274 -= 4;
          }
          while (v274);
          v269 -= v271 & 0x3FFFFFFFFFFFFFFCLL;
          v262 -= 8 * (v271 & 0x3FFFFFFFFFFFFFFCLL);
          if (v271 != (v271 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_329:
            do
            {
              v276 = *((_QWORD *)v262 - 1);
              v262 -= 8;
              *--v269 = v276;
            }
            while (v262 != v263);
            v263 = (char *)*((_QWORD *)this + 14);
          }
        }
        *((_QWORD *)this + 14) = v269;
        *((_QWORD *)this + 15) = v245;
        *((_QWORD *)this + 16) = &v268[8 * v267];
        if (v263)
          operator delete(v263);
      }
      *((_QWORD *)this + 15) = v245;
      ++v243;
    }
    while (v243 != v244);
    v18 = v280;
    v277 = *v280;
    v278 = -v277;
    v239 = (unsigned __int16 *)((char *)v280 - v277);
  }
  else
  {
    v278 = -v238;
  }
  if (*v239 < 0x67u)
  {
    v279 = 0;
  }
  else
  {
    v279 = *(unsigned __int16 *)((char *)v18 + v278 + 102);
    if (v279)
      v279 = *(_QWORD *)((char *)v18 + v279);
  }
  *((_QWORD *)this + 13) = v279;
}

void sub_232CA8B7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *(void **)(v1 + 112);
  if (v3)
  {
    *(_QWORD *)(v1 + 120) = v3;
    operator delete(v3);
    v4 = *(void **)(v1 + 72);
    if (!v4)
    {
LABEL_3:
      v5 = *(void **)(v1 + 48);
      if (!v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = *(void **)(v1 + 72);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 80) = v4;
  operator delete(v4);
  v5 = *(void **)(v1 + 48);
  if (!v5)
  {
LABEL_4:
    v6 = *(void **)(v1 + 24);
    if (!v6)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)(v1 + 56) = v5;
  operator delete(v5);
  v6 = *(void **)(v1 + 24);
  if (!v6)
  {
LABEL_5:
    v7 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(_QWORD *a1, int a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  BOOL v5;
  int *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int *v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int v64;
  int *v65;
  unsigned __int16 *v66;
  uint64_t v67;
  int *v68;
  unsigned __int16 *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _BOOL4 v73;
  _BOOL4 v75;
  _BOOL4 v77;

  v2 = (unsigned int **)(a1 + 28);
  if (a1[28])
  {
    if (!a1[29])
      v2 = (unsigned int **)(a1 + 98);
  }
  else
  {
    v2 = (unsigned int **)(a1 + 98);
  }
  v4 = *v2;
  v3 = v2[1];
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = 0;
  else
    v6 = (int *)((char *)v4 + *v4);
  v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 5u && (v8 = v7[2]) != 0)
    v9 = (int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  else
    v9 = 0;
  v10 = (unsigned __int16 *)((char *)v9 - *v9);
  v11 = v10[8];
  v12 = *(unsigned int *)((char *)v9 + v11);
  v13 = (unsigned int *)((char *)v9 + v11 + v12);
  v14 = *v13;
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 4 * v14;
    v17 = (char *)v9 + v11 + v12;
    do
    {
      v18 = v13[v15 / 4 + 1];
      v19 = &v17[v15 + v18 - *(int *)((char *)&v13[v15 / 4 + 1] + v18)];
      if (*((unsigned __int16 *)v19 + 2) < 7u)
        return 0;
      v20 = *((unsigned __int16 *)v19 + 5);
      if (!v20 || (*(_DWORD *)&v17[v15 + 4 + v18 + v20] & 0x80000000) == 0)
        return 0;
      v15 += 4;
    }
    while (v16 != v15);
  }
  v21 = v10[10];
  v22 = *(unsigned int *)((char *)v9 + v21);
  v23 = (unsigned int *)((char *)v9 + v21 + v22);
  v24 = *v23;
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 4 * v24;
    v27 = (char *)v9 + v21 + v22;
    do
    {
      v28 = v23[v25 / 4 + 1];
      v29 = &v27[v25 + v28 - *(int *)((char *)&v23[v25 / 4 + 1] + v28)];
      if (*((unsigned __int16 *)v29 + 2) < 7u)
        return 0;
      v30 = *((unsigned __int16 *)v29 + 5);
      if (!v30)
        return 0;
      v31 = *(_DWORD *)&v27[v25 + 4 + v28 + v30];
      if ((v31 & 0x80000000) == 0 && (v31 & 0xFFF00000) != 0x400000)
        return 0;
      v25 += 4;
    }
    while (v26 != v25);
  }
  v33 = v10[12];
  v34 = *(unsigned int *)((char *)v9 + v33);
  v35 = (unsigned int *)((char *)v9 + v33 + v34);
  v36 = *v35;
  if ((_DWORD)v36)
  {
    v37 = 0;
    v38 = 4 * v36;
    v39 = (char *)v9 + v33 + v34;
    do
    {
      v40 = v35[v37 / 4 + 1];
      v41 = v40 - *(int *)((char *)&v35[v37 / 4 + 1] + v40);
      v42 = &v39[v37 + v41];
      v43 = *((unsigned __int16 *)v42 + 2);
      if (v43 >= 5)
      {
        v44 = *((unsigned __int16 *)v42 + 4);
        if (v44)
        {
          switch(v39[v37 + 4 + v40 + v44])
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              break;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_32;
            default:
              if (v39[v37 + 4 + v40 + v44] != 113)
                goto LABEL_32;
              break;
          }
          if (v43 < 7)
            return 0;
          v45 = *(unsigned __int16 *)&v39[v37 + 10 + v41];
          if (!v45)
            return 0;
          v46 = *(_DWORD *)&v39[v37 + 4 + v40 + v45];
          if ((v46 & 0x80000000) == 0 && (v46 & 0xFFF00000) != 0x400000)
            return 0;
        }
      }
LABEL_32:
      v37 += 4;
    }
    while (v38 != v37);
  }
  v47 = v10[6];
  v48 = *(unsigned int *)((char *)v9 + v47);
  v49 = (unsigned int *)((char *)v9 + v47 + v48);
  v50 = *v49;
  if ((_DWORD)v50)
  {
    v51 = 0;
    v52 = 4 * v50;
    if (a1[58])
      v53 = a1[59] == 0;
    else
      v53 = 1;
    v54 = 58;
    if (v53)
      v54 = 128;
    v55 = a1 + 128;
    if (!v53)
      v55 = a1 + 58;
    v56 = (unsigned int *)a1[v54];
    if (v56)
      v57 = v55[1] == 0;
    else
      v57 = 1;
    v58 = !v57;
    v59 = v52 - 4;
    v60 = (char *)v9 + v47 + v48;
    while (1)
    {
      v61 = v49[v51 / 4 + 1];
      v62 = &v60[v51 + v61 - *(int *)((char *)&v49[v51 / 4 + 1] + v61)];
      if (*((unsigned __int16 *)v62 + 2) >= 7u && (v63 = *((unsigned __int16 *)v62 + 5)) != 0)
      {
        v64 = *(_DWORD *)&v60[v51 + 4 + v61 + v63];
        if (v58)
          goto LABEL_63;
      }
      else
      {
        v64 = 0;
        if (v58)
        {
LABEL_63:
          v65 = (int *)((char *)v56 + *v56);
          goto LABEL_64;
        }
      }
      v65 = 0;
LABEL_64:
      v66 = (unsigned __int16 *)((char *)v65 - *v65);
      if (*v66 >= 5u && (v67 = v66[2]) != 0)
        v68 = (int *)((char *)v65 + v67 + *(unsigned int *)((char *)v65 + v67));
      else
        v68 = 0;
      v69 = (unsigned __int16 *)((char *)v68 - *v68);
      if (*v69 >= 0x1Fu && (v70 = v69[15]) != 0)
        v71 = *(_QWORD *)((char *)v68 + v70);
      else
        v71 = 0;
      v72 = v64 & 0xFFFFF;
      if ((v64 & 0xFFFFFu) - 49 < 2)
      {
        v73 = 1;
LABEL_82:
        v75 = v72 == 48 && v71 != 0;
        goto LABEL_88;
      }
      v73 = v72 == 53 && v71 != 0;
      if ((v64 & 0xFFFFE) != 0x2C)
        goto LABEL_82;
      v75 = 1;
LABEL_88:
      if (!a2)
        v75 = v73;
      v77 = v64 >= 0 && v75;
      if (!v77)
      {
        v5 = v59 == v51;
        v51 += 4;
        if (!v5)
          continue;
      }
      return !v77;
    }
  }
  return 1;
}

uint64_t *AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(uint64_t *a1, unsigned int **a2, const std::vector<unsigned int>::value_type *a3, char a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int8x16_t a11, uint64_t *a12)
{
  int v16;
  __int128 v18;
  unsigned __int8 v19;
  char v20;
  int *v21;
  unsigned int *v22;
  uint64_t *v23;
  unsigned int **v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned __int16 *v27;
  int *v28;
  unsigned int **v29;
  unsigned int *v30;
  unsigned int **v31;
  int *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  int *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int **v39;
  int *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  int *v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  uint8x8_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  unsigned int *v68;
  unsigned int *v69;
  BOOL v70;
  int *v71;
  unsigned __int16 *v72;
  uint64_t v73;
  int *v74;
  unsigned __int16 *v75;
  uint64_t v76;
  int8x8_t v77;
  uint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  std::vector<unsigned int> *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  std::vector<unsigned int> *v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned __int16 *v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int *v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  unsigned __int16 *v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t *v154;
  int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int *v175;
  unsigned int *v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int *v179;
  int v180;
  int *v181;
  unsigned __int16 *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t *v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t *v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int *v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int *v210;
  int v211;
  int v212;
  int *v213;
  unsigned __int16 *v214;
  unsigned int v215;
  int v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t *v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  int8x16_t *v237;
  int8x16_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  int32x4_t v266;
  int8x16_t *v267;
  int32x4_t v268;
  int32x4_t v269;
  unint64_t v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int *v273;
  unsigned int *v274;
  uint64_t v275;
  unsigned int v276;
  char v277;
  int v278;
  unsigned int *v279;
  int *v280;
  unsigned __int16 *v281;
  unsigned int v282;
  char v283;
  char v284;
  unsigned int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  unsigned int v291;
  _QWORD *v292;
  uint64_t *v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  uint64_t *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned __int32 v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  int v315;
  int v316;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  int v325;
  int v326;
  int v327;
  char v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  int v334;
  unsigned int v335;
  unsigned int v336;
  int v337;
  int v338;
  int v339;
  unsigned int v341;
  unint64_t v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  int v346;
  int v347;
  __int32 v348;
  char v350;
  uint64_t *v351;
  _DWORD *v352;
  uint64_t v353;
  _BOOL4 v354;
  BOOL v355;
  uint64_t v356;
  _BOOL4 v357;
  BOOL v358;
  uint64_t v359;
  _BOOL4 v360;
  BOOL v361;
  _DWORD *v362;
  char *v363;
  char *v364;
  BOOL v366;
  unint64_t v367;
  unsigned int v368;
  char *v369;
  char *v370;
  unint64_t v371;
  unsigned int v372;
  char *v373;
  char *v374;
  unint64_t v375;
  char *v376;
  _DWORD *v377;
  int v378;
  int v379;
  int8x16_t *v380;
  int v381;
  BOOL v382;
  BOOL v383;
  char *v384;
  unint64_t v385;
  char *v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  unint64_t v394;
  char *v395;
  int v396;
  char v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  char *v401;
  unint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  char *v406;
  __int128 v407;
  char *v408;
  BOOL v409;
  unint64_t v410;
  unint64_t v411;
  char *v412;
  char *v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  __int128 v420;
  _DWORD *v421;
  int v422;
  _QWORD *v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  std::vector<unsigned int> *v427;
  unsigned int *v428;
  uint64_t v429;
  unsigned int *v430;
  char *v431;
  char *v432;
  unint64_t v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  unint64_t v438;
  unsigned int v439;
  unsigned __int16 v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t v444;
  _BYTE *v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  _BYTE *v449;
  int v450;
  int v451;
  unsigned __int16 v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  _BYTE *v457;
  int *v458;
  unint64_t v459;
  char *v460;
  int v461;
  _DWORD *v462;
  char *v463;
  unint64_t v464;
  char *v465;
  int v466;
  uint64_t v467;
  _OWORD *v468;
  char *v469;
  uint64_t v470;
  __int128 v471;
  int *v472;
  unint64_t v473;
  char *v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  _OWORD *v478;
  char *v479;
  uint64_t v480;
  __int128 v481;
  uint64_t v482;
  _OWORD *v483;
  char *v484;
  uint64_t v485;
  __int128 v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _WORD *v490;
  unint64_t v491;
  char *v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  _BYTE *v499;
  unint64_t v500;
  char *v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  _BYTE *v508;
  _WORD *v509;
  unint64_t v510;
  uint64_t v511;
  _OWORD *v512;
  char *v513;
  unint64_t v514;
  __int128 v515;
  __int16 v516;
  char *v517;
  _WORD *v518;
  _WORD *v519;
  unint64_t v520;
  uint64_t v521;
  _OWORD *v522;
  char *v523;
  unint64_t v524;
  __int128 v525;
  __int16 v526;
  char *v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  _WORD *v531;
  unint64_t v532;
  char *v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  _BYTE *v540;
  unint64_t v541;
  char *v542;
  char *v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  _BYTE *v549;
  _WORD *v550;
  unint64_t v551;
  uint64_t v552;
  _OWORD *v553;
  char *v554;
  unint64_t v555;
  __int128 v556;
  __int16 v557;
  char *v558;
  _WORD *v559;
  _WORD *v560;
  unint64_t v561;
  uint64_t v562;
  _OWORD *v563;
  char *v564;
  unint64_t v565;
  __int128 v566;
  __int16 v567;
  char *v568;
  void **v570;
  std::vector<unsigned int> *v571;
  std::vector<unsigned int> *v572;
  std::vector<unsigned int> *v573;
  _QWORD *v574;
  _QWORD *v575;
  _QWORD *v576;
  _QWORD *v577;
  char *v578;
  std::vector<unsigned int> *v579;
  uint64_t v580;
  char v582;
  unsigned int *v583;
  int v584;
  _DWORD *v585;
  int v586;
  char v587;
  int v588;
  __int128 v589;
  char *v590;

  v16 = (int)a3;
  *((_OWORD *)a1 + 3) = 0u;
  v572 = (std::vector<unsigned int> *)(a1 + 6);
  *((_OWORD *)a1 + 6) = 0u;
  v573 = (std::vector<unsigned int> *)(a1 + 12);
  a1[14] = 0;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)&v18 = 0xFFFFFFFFLL;
  *((_QWORD *)&v18 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 15) = v18;
  *((_OWORD *)a1 + 12) = 0u;
  v576 = a1 + 24;
  a1[17] = 0xFFFFFFFFLL;
  *((_OWORD *)a1 + 15) = 0u;
  v575 = a1 + 30;
  a1[21] = 0;
  a1[22] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_DWORD *)a1 + 72) = 0;
  *((_BYTE *)a1 + 392) = 0;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  v570 = (void **)(a1 + 37);
  a1[50] = 0;
  a1[51] = 0;
  a1[52] = a6;
  *((_BYTE *)a1 + 424) = a4;
  *((_WORD *)a1 + 213) = 0;
  *((_DWORD *)a1 + 107) = 0;
  if ((v19 & 1) == 0
  {
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(AGCDeserializedReply const&,AGX::ProgramType,BOOL,BOOL,AGX::G9::IndirectArgumentLayout const* const*,unsigned long long,BOOL,BOOL,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::RemapStyle,std::vector<DriverEIOffset> const*)::stress_indirect_gather_ev = 0;
  }
  if (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(AGCDeserializedReply const&,AGX::ProgramType,BOOL,BOOL,AGX::G9::IndirectArgumentLayout const* const*,unsigned long long,BOOL,BOOL,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::RemapStyle,std::vector<DriverEIOffset> const*)::stress_indirect_gather_ev)
    v20 = a4;
  else
    v20 = 1;
  v587 = v20;
  if ((v20 & 1) == 0)
    a1[52] = -1;
  *((_BYTE *)a1 + 425) = 0;
  if (a7)
  {
    v21 = 0;
    v22 = a2[144];
    if (v22)
    {
      v23 = a1;
      if (a2[145])
        v21 = (int *)((char *)v22 + *v22);
    }
    else
    {
      v23 = a1;
    }
    v27 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v27 >= 5u)
    {
      v26 = v27[2];
      if (v26)
      {
LABEL_25:
        v28 = (int *)((char *)v21 + v26 + *(int *)((char *)v21 + v26));
        goto LABEL_27;
      }
    }
  }
  else
  {
    if (a2[28])
    {
      if (a2[29])
        v24 = a2 + 28;
      else
        v24 = a2 + 98;
    }
    else
    {
      v24 = a2 + 98;
    }
    v23 = a1;
    v21 = 0;
    if (*v24 && v24[1])
      v21 = (int *)((char *)*v24 + **v24);
    v25 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v25 >= 5u)
    {
      v26 = v25[2];
      if (v26)
        goto LABEL_25;
    }
  }
  v28 = 0;
LABEL_27:
  v29 = a2 + 58;
  v30 = a2[58];
  if (v30)
  {
    v31 = a2 + 128;
    if (a2[59])
      v31 = a2 + 58;
  }
  else
  {
    v31 = a2 + 128;
  }
  v32 = 0;
  if (*v31 && v31[1])
    v32 = (int *)((char *)*v31 + **v31);
  v33 = (unsigned __int16 *)((char *)v32 - *v32);
  if (*v33 >= 5u && (v34 = v33[2]) != 0)
    v35 = (int *)((char *)v32 + v34 + *(unsigned int *)((char *)v32 + v34));
  else
    v35 = 0;
  v36 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v36 >= 0x17u && (v37 = v36[11]) != 0)
  {
    v38 = *(_QWORD *)((char *)v35 + v37);
    if (!v30)
    {
LABEL_42:
      v39 = a2 + 128;
      goto LABEL_46;
    }
  }
  else
  {
    v38 = 0;
    if (!v30)
      goto LABEL_42;
  }
  v39 = a2 + 128;
  if (a2[59])
    v39 = a2 + 58;
LABEL_46:
  v40 = 0;
  if (*v39 && v39[1])
    v40 = (int *)((char *)*v39 + **v39);
  v41 = (unsigned __int16 *)((char *)v40 - *v40);
  if (*v41 >= 5u && (v42 = v41[2]) != 0)
    v43 = (int *)((char *)v40 + v42 + *(unsigned int *)((char *)v40 + v42));
  else
    v43 = 0;
  v584 = v16;
  v44 = 0x188u >> v16;
  v45 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v45 >= 0x1Bu && (v46 = v45[13]) != 0)
    v47 = *(_QWORD *)((char *)v43 + v46);
  else
    v47 = 0;
  v23[20] = v47 | v38;
  v23[21] = v47;
  v48 = (uint8x8_t)vcnt_s8((int8x8_t)(v47 | v38));
  v48.i16[0] = vaddlv_u8(v48);
  *((_DWORD *)v23 + 36) = 4 * v48.i32[0];
  *((_BYTE *)v23 + 184) = v38 != 0;
  if ((v44 & 1) != 0)
    v49 = 44;
  else
    v49 = 49;
  v50 = *(unsigned __int16 *)((char *)v28 - *v28 + 12);
  v51 = *(unsigned int *)((char *)v28 + v50);
  v52 = (unsigned int *)((char *)v28 + v50 + v51);
  v53 = *v52;
  if ((_DWORD)v53)
  {
    v54 = 0;
    v55 = 4 * v53;
    v56 = (char *)v28 + v50 + v51;
    while (1)
    {
      v57 = v52[v54 / 4 + 1];
      v58 = &v56[v54 + v57 - *(int *)((char *)&v52[v54 / 4 + 1] + v57)];
      if (*((unsigned __int16 *)v58 + 2) >= 7u)
      {
        v59 = *((unsigned __int16 *)v58 + 5);
        if (v59)
        {
          v60 = *(_DWORD *)&v56[v54 + 4 + v57 + v59];
          if ((v60 & 0x80000000) == 0 && v60 == v49)
            break;
        }
      }
      v54 += 4;
      if (v55 == v54)
        goto LABEL_68;
    }
    *((_BYTE *)v23 + 184) = 1;
LABEL_68:
    v61 = 0;
    if ((v44 & 1) != 0)
      v62 = 63;
    else
      v62 = 61;
    v63 = (char *)v28 + v50 + v51;
    while (1)
    {
      v64 = v52[v61 / 4 + 1];
      v65 = &v63[v61 + v64 - *(int *)((char *)&v52[v61 / 4 + 1] + v64)];
      if (*((unsigned __int16 *)v65 + 2) >= 7u)
      {
        v66 = *((unsigned __int16 *)v65 + 5);
        if (v66)
        {
          v67 = *(_DWORD *)&v63[v61 + 4 + v64 + v66];
          if ((v67 & 0x80000000) == 0 && v67 == v62)
            break;
        }
      }
      v61 += 4;
      if (v55 == v61)
        goto LABEL_78;
    }
    *((_BYTE *)v23 + 427) = 1;
  }
LABEL_78:
  if (v30)
  {
    if (!a2[59])
      v29 = a2 + 128;
  }
  else
  {
    v29 = a2 + 128;
  }
  v69 = *v29;
  v68 = v29[1];
  if (v69)
    v70 = v68 == 0;
  else
    v70 = 1;
  if (v70)
    v71 = 0;
  else
    v71 = (int *)((char *)v69 + *v69);
  v72 = (unsigned __int16 *)((char *)v71 - *v71);
  if (*v72 >= 5u && (v73 = v72[2]) != 0)
    v74 = (int *)((char *)v71 + v73 + *(unsigned int *)((char *)v71 + v73));
  else
    v74 = 0;
  v75 = (unsigned __int16 *)((char *)v74 - *v74);
  if (*v75 >= 0x1Fu && (v76 = v75[15]) != 0)
    v77 = *(int8x8_t *)((char *)v74 + v76);
  else
    v77 = 0;
  LODWORD(v78) = 0;
  v577 = v23 + 27;
  v23[22] = (uint64_t)v77;
  v79 = (uint8x8_t)vcnt_s8(v77);
  v79.i16[0] = vaddlv_u8(v79);
  *((_DWORD *)v23 + 37) = v79.i32[0];
  *((_DWORD *)v23 + 38) = 0;
  v80 = *v28;
  v81 = (char *)v28 - v80;
  v82 = *(unsigned __int16 *)((char *)v28 - v80);
  if (v82 >= 0xF)
  {
    v78 = *((unsigned __int16 *)v81 + 7);
    if (*((_WORD *)v81 + 7))
      LODWORD(v78) = *(int *)((char *)v28 + v78);
  }
  v574 = v23 + 33;
  v83 = -v80;
  v84 = (std::vector<unsigned int> *)(v23 + 3);
  v579 = (std::vector<unsigned int> *)(v23 + 9);
  v85 = (v78 + 7) >> 3;
  v86 = v23[3];
  v87 = (v23[4] - v86) >> 2;
  if (v85 <= v87)
  {
    if (v85 < v87)
      v23[4] = v86 + 4 * v85;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)v23 + 1, v85 - v87, a3);
    v88 = *v28;
    v83 = -v88;
    v82 = *(unsigned __int16 *)((char *)v28 - v88);
  }
  if (v82 < 0xF)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v89 = *(unsigned __int16 *)((char *)v28 + v83 + 14);
    if (*(_WORD *)((char *)v28 + v83 + 14))
      LODWORD(v89) = *(int *)((char *)v28 + v89);
  }
  v90 = (v89 + 7) >> 3;
  v91 = v23;
  v92 = v23[1];
  v93 = v90 - v92;
  v571 = v84;
  v586 = a8;
  if (v90 <= v92)
  {
    v91[1] = v90;
    v97 = v91;
    goto LABEL_139;
  }
  v94 = v91[2];
  if (v94 << 6 >= v93 && v92 <= (v94 << 6) - v93)
  {
    v95 = (_QWORD *)(*a1 + 8 * (v92 >> 6));
    v96 = v92 & 0x3F;
    v97 = a1;
    a1[1] = v90;
    if (!v93)
      goto LABEL_139;
    goto LABEL_130;
  }
  v589 = 0uLL;
  if ((unint64_t)(v94 << 6) > 0x3FFFFFFFFFFFFFFELL)
  {
    v98 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v98 = v94 << 7;
    if (v98 <= (((_DWORD)v90 + 63) & 0x3FFFFFC0u))
      v98 = ((_DWORD)v90 + 63) & 0x3FFFFFC0;
    if (!v98)
    {
      v100 = 0;
      goto LABEL_122;
    }
    if ((v98 & 0x8000000000000000) != 0)
      abort();
  }
  v99 = ((v98 - 1) >> 6) + 1;
  v100 = operator new(8 * v99);
  *v100 = 0;
  *((_QWORD *)&v589 + 1) = v99;
LABEL_122:
  *(_QWORD *)&v589 = v90;
  v101 = (void *)*a1;
  v95 = v100;
  if ((uint64_t)v92 < 1)
    goto LABEL_127;
  v102 = v92 >> 6;
  if (v92 >= 0x40)
    memmove(v100, (const void *)*a1, 8 * (v92 >> 6));
  v95 = &v100[v92 >> 6];
  v103 = v92 & 0x3F;
  if (v103)
  {
    v100[v102] = v100[v102] & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v103) | *(_QWORD *)((_BYTE *)v101 + v102 * 8) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v103);
    *a1 = (uint64_t)v100;
    *(_OWORD *)(a1 + 1) = v589;
  }
  else
  {
LABEL_127:
    LODWORD(v103) = 0;
    v96 = 0;
    *a1 = (uint64_t)v100;
    *(_OWORD *)(a1 + 1) = v589;
    if (!v101)
      goto LABEL_129;
  }
  operator delete(v101);
  v96 = v103;
LABEL_129:
  v97 = a1;
  a8 = v586;
  if (!v93)
    goto LABEL_139;
LABEL_130:
  if (v96)
  {
    if ((64 - v96) >= v93)
      v104 = v93;
    else
      v104 = (64 - v96);
    *v95++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v96 - v104)) & (-1 << v96));
    v93 -= v104;
  }
  if (v93 >= 0x40)
    bzero(v95, 8 * (v93 >> 6));
  if ((v93 & 0x3F) != 0)
    v95[v93 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v93 & 0x3F));
LABEL_139:
  v105 = *v28;
  v106 = *(unsigned __int16 *)((char *)v28 - v105);
  if (v106 < 0x13)
  {
    v108 = 0;
    v107 = v572;
  }
  else
  {
    v107 = v572;
    if (*(_WORD *)((char *)v28 - v105 + 18))
      v108 = *(int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - v105 + 18));
    else
      v108 = 0;
  }
  v109 = -v105;
  v110 = (v108 + 7) >> 3;
  v111 = v97[6];
  v112 = (v97[7] - v111) >> 2;
  if (v110 <= v112)
  {
    if (v110 < v112)
      v97[7] = v111 + 4 * v110;
  }
  else
  {
    std::vector<unsigned int>::__append(v107, v110 - v112, a3);
    v105 = *v28;
    v109 = -v105;
    v106 = *(unsigned __int16 *)((char *)v28 - v105);
  }
  if (v106 < 0xB)
  {
    LODWORD(v113) = 0;
  }
  else
  {
    v113 = *(unsigned __int16 *)((char *)v28 + v109 + 10);
    if (*(_WORD *)((char *)v28 + v109 + 10))
      LODWORD(v113) = *(int *)((char *)v28 + v113);
  }
  v114 = (v113 + 7) >> 3;
  v115 = v97[9];
  v116 = (v97[10] - v115) >> 2;
  if (v114 <= v116)
  {
    if (v114 < v116)
      v97[10] = v115 + 4 * v114;
  }
  else
  {
    std::vector<unsigned int>::__append(v579, v114 - v116, a3);
    LODWORD(v105) = *v28;
  }
  v117 = (unsigned __int16 *)((char *)v28 - (int)v105);
  v118 = *v117;
  if (a8 != 1)
  {
    if (v118 < 0x17)
    {
      LODWORD(v120) = 0;
    }
    else
    {
      v120 = v117[11];
      if (v120)
        LODWORD(v120) = *(int *)((char *)v28 + v120);
    }
    v121 = (v120 + 3) >> 2;
    v122 = v97[12];
    v125 = (v97[13] - v122) >> 2;
    v124 = v121 >= v125;
    if (v121 > v125)
    {
      std::vector<unsigned int>::__append(v573, v121 - v125);
      goto LABEL_171;
    }
LABEL_169:
    if (!v124)
      v97[13] = v122 + 4 * v121;
    goto LABEL_171;
  }
  if (v118 < 0x17)
  {
    LODWORD(v119) = 0;
  }
  else
  {
    v119 = v117[11];
    if (v119)
      LODWORD(v119) = *(int *)((char *)v28 + v119);
  }
  v121 = (v119 + 3) >> 2;
  v122 = v97[12];
  v123 = (v97[13] - v122) >> 2;
  v124 = v121 >= v123;
  if (v121 <= v123)
    goto LABEL_169;
  std::vector<unsigned int>::__append(v573, v121 - v123, a3);
LABEL_171:
  v126 = *v28;
  v127 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - v126 + 16));
  v128 = (unsigned int *)((char *)v127 + *v127);
  v131 = *v128;
  v129 = v128 + 1;
  v130 = v131;
  if (v131)
  {
    v132 = &v129[v130];
    while (1)
    {
      v134 = (int *)((char *)v129 + *v129);
      v135 = *v134;
      v136 = (unsigned __int16 *)((char *)v134 - v135);
      v137 = *(unsigned __int16 *)((char *)v134 - v135);
      if (v137 < 7)
      {
        v140 = 0;
        goto LABEL_187;
      }
      if (v136[3])
      {
        v138 = *(int *)((char *)v134 + v136[3]);
        if (v137 < 9)
          goto LABEL_182;
      }
      else
      {
        v138 = 0;
        if (v137 < 9)
        {
LABEL_182:
          LODWORD(v139) = 0;
          goto LABEL_183;
        }
      }
      v139 = v136[4];
      if (v136[4])
        LODWORD(v139) = *(int *)((char *)v134 + v139);
LABEL_183:
      v140 = (v139 >> 1) & 0x1FFFFFFF;
      if (v138 >= 0)
        v141 = -1;
      else
        v141 = (v138 >> 20) & 0x7FF;
      if (v138 < 0)
      {
        v149 = v136[2];
        if (v149)
          LODWORD(v149) = *((char *)v134 + v149);
        v150 = *(_QWORD *)(a5 + 8 * ((v138 >> 20) & 0x7FF));
        v151 = *(uint64_t **)(v150 + 48);
        if (!v151)
          goto LABEL_901;
        v145 = -v135;
        v152 = v138 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v153 = *((_DWORD *)v151 + 7);
            if (v153 <= v152)
              break;
            v151 = (uint64_t *)*v151;
            if (!v151)
              goto LABEL_901;
          }
          if (v153 >= v152)
            break;
          v151 = (uint64_t *)v151[1];
          if (!v151)
            goto LABEL_901;
        }
        v154 = *(uint64_t **)(v150 + 72);
        if (!v154)
LABEL_901:
          abort();
        v155 = *((_DWORD *)v151 + 8);
        while (1)
        {
          while (1)
          {
            v156 = *((_DWORD *)v154 + 7);
            if (v156 <= v152)
              break;
            v154 = (uint64_t *)*v154;
            if (!v154)
              goto LABEL_901;
          }
          if (v156 >= v152)
            break;
          v154 = (uint64_t *)v154[1];
          if (!v154)
            goto LABEL_901;
        }
        if ((_DWORD)v149 == 6)
          v157 = *((_DWORD *)v154 + 8);
        else
          v157 = 0;
        v147 = (v157 + v155) >> 3;
LABEL_192:
        v148 = *(unsigned __int16 *)((char *)v134 + v145 + 4);
        if (*(_WORD *)((char *)v134 + v145 + 4))
          LODWORD(v148) = *((char *)v134 + v148);
        goto LABEL_215;
      }
LABEL_187:
      v142 = *((_DWORD *)v97 + 30);
      v143 = *((_DWORD *)v97 + 31);
      if (v142 >= v140)
        v142 = v140;
      if (v143 <= v140 + 4)
        v143 = v140 + 4;
      *((_DWORD *)v97 + 30) = v142;
      *((_DWORD *)v97 + 31) = v143;
      v144 = *v134;
      v145 = -v144;
      v146 = *(unsigned __int16 *)((char *)v134 - v144);
      v141 = -1;
      v147 = v140;
      if (v146 >= 5)
        goto LABEL_192;
      LODWORD(v148) = 0;
LABEL_215:
      v158 = v97[3];
      v159 = *v97;
      v160 = v141 << 20;
      v161 = v140;
      v162 = v147 & 0xFFFFF;
      if (v141 != -1)
        v162 = (v141 << 20) | v147 & 0xFFFFF | 0x80000000;
      *(_DWORD *)(v158 + 4 * v140) = v162;
      v163 = (unint64_t)v140 >> 6;
      v164 = 1 << v161;
      if ((_DWORD)v148 == 6)
        v165 = *(_QWORD *)(v159 + 8 * v163) | v164;
      else
        v165 = *(_QWORD *)(v159 + 8 * v163) & ~v164;
      *(_QWORD *)(v159 + 8 * v163) = v165;
      v166 = (v147 + 1) & 0xFFFFF;
      if (v141 != -1)
        v166 |= v160 | 0x80000000;
      *(_DWORD *)(v158 + 4 * (v161 + 1)) = v166;
      v167 = (unint64_t)(v161 + 1) >> 6;
      v168 = 1 << (v161 + 1);
      if ((_DWORD)v148 == 6)
        v169 = *(_QWORD *)(v159 + 8 * v167) | v168;
      else
        v169 = *(_QWORD *)(v159 + 8 * v167) & ~v168;
      *(_QWORD *)(v159 + 8 * v167) = v169;
      if (v141 == -1)
        v170 = (v147 + 2) & 0xFFFFF;
      else
        v170 = (v147 + 2) & 0xFFFFF | v160 | 0x80000000;
      *(_DWORD *)(v158 + 4 * (v161 + 2)) = v170;
      v171 = (unint64_t)(v161 + 2) >> 6;
      v172 = 1 << (v161 + 2);
      if ((_DWORD)v148 == 6)
        v133 = *(_QWORD *)(v159 + 8 * v171) | v172;
      else
        v133 = *(_QWORD *)(v159 + 8 * v171) & ~v172;
      *(_QWORD *)(v159 + 8 * v171) = v133;
      if (++v129 == v132)
      {
        v173 = -(uint64_t)*v28;
        goto LABEL_232;
      }
    }
  }
  v173 = -v126;
LABEL_232:
  v174 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 + v173 + 20));
  v175 = (unsigned int *)((char *)v174 + *v174);
  v178 = *v175;
  v176 = v175 + 1;
  v177 = v178;
  if (!v178)
    goto LABEL_277;
  v179 = &v176[v177];
  do
  {
    v181 = (int *)((char *)v176 + *v176);
    v182 = (unsigned __int16 *)((char *)v181 - *v181);
    v183 = *v182;
    if (v183 < 7)
    {
      v186 = 0;
      LODWORD(v184) = 0;
LABEL_245:
      LODWORD(v185) = 0;
      goto LABEL_246;
    }
    v184 = v182[3];
    if (v182[3])
      LODWORD(v184) = *(int *)((char *)v181 + v184);
    if (v183 < 9)
    {
      v186 = 0;
      goto LABEL_245;
    }
    v185 = v182[4];
    if (v182[4])
      LODWORD(v185) = *(int *)((char *)v181 + v185);
    v186 = 1;
LABEL_246:
    v187 = (v185 >> 1) & 0x1FFFFFFF;
    if ((v184 & 0xFFF00000) == 0x400000)
    {
      v180 = 0x400000;
    }
    else
    {
      if ((v184 & 0x80000000) != 0)
      {
        v195 = (v184 >> 20) & 0x7FF;
        v196 = *(_QWORD *)(a5 + 8 * v195);
        v197 = *(uint64_t **)(v196 + 48);
        if (!v197)
          goto LABEL_902;
        v193 = v195 << 20;
        v198 = v184 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v199 = *((_DWORD *)v197 + 7);
            if (v199 <= v198)
              break;
            v197 = (uint64_t *)*v197;
            if (!v197)
              goto LABEL_902;
          }
          if (v199 >= v198)
            break;
          v197 = (uint64_t *)v197[1];
          if (!v197)
            goto LABEL_902;
        }
        v200 = *(uint64_t **)(v196 + 72);
        if (!v200)
LABEL_902:
          abort();
        v201 = *((_DWORD *)v197 + 8);
        while (1)
        {
          while (1)
          {
            v202 = *((_DWORD *)v200 + 7);
            if (v202 <= v198)
              break;
            v200 = (uint64_t *)*v200;
            if (!v200)
              goto LABEL_902;
          }
          if (v202 >= v198)
            break;
          v200 = (uint64_t *)v200[1];
          if (!v200)
            goto LABEL_902;
        }
        v194 = v201 >> 3;
      }
      else
      {
        if (v186 && (v188 = v182[4]) != 0)
          v189 = *(int *)((char *)v181 + v188);
        else
          v189 = 0;
        v190 = (v189 >> 1) & 0x1FFFFFFF;
        v191 = *((_DWORD *)v97 + 32);
        if (v191 >= v190)
          v191 = v190;
        if (*((_DWORD *)v97 + 33) <= v190 + 1)
          v192 = v190 + 1;
        else
          v192 = *((_DWORD *)v97 + 33);
        *((_DWORD *)v97 + 32) = v191;
        *((_DWORD *)v97 + 33) = v192;
        v193 = -1048576;
        v194 = v187;
      }
      v203 = v194 & 0xFFFFF;
      v204 = v203 | v193 | 0x80000000;
      if ((int)v184 < 0)
        v180 = v204;
      else
        v180 = v203;
    }
    v107->__begin_[v187] = v180;
    ++v176;
  }
  while (v176 != v179);
  v173 = -(uint64_t)*v28;
LABEL_277:
  v205 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 + v173 + 12));
  v206 = (unsigned int *)((char *)v205 + *v205);
  v209 = *v206;
  v207 = v206 + 1;
  v208 = v209;
  if (v209)
  {
    v210 = &v207[v208];
    if ((v44 & 1) != 0)
      v211 = 48;
    else
      v211 = 53;
    do
    {
      v213 = (int *)((char *)v207 + *v207);
      v214 = (unsigned __int16 *)((char *)v213 - *v213);
      v215 = *v214;
      if (v215 < 7)
      {
        v218 = 0;
        goto LABEL_295;
      }
      if (v214[3])
      {
        v216 = *(int *)((char *)v213 + v214[3]);
        if (v215 < 9)
          goto LABEL_290;
      }
      else
      {
        v216 = 0;
        if (v215 < 9)
        {
LABEL_290:
          LODWORD(v217) = 0;
          goto LABEL_291;
        }
      }
      v217 = v214[4];
      if (v214[4])
        LODWORD(v217) = *(int *)((char *)v213 + v217);
LABEL_291:
      v218 = (v217 >> 1) & 0x1FFFFFFF;
      v219 = (v216 >> 20) & 0x7FF;
      if (v216 >= 0)
        v220 = -1;
      else
        v220 = (v216 >> 20) & 0x7FF;
      if (v216 < 0)
      {
        v223 = v214[2];
        if (v223 && *((_BYTE *)v213 + v223))
        {
          v224 = *(uint64_t **)(*(_QWORD *)(a5 + 8 * v219) + 48);
          if (!v224)
LABEL_904:
            abort();
          v225 = v216 & 0xFFFFF;
          while (1)
          {
            while (1)
            {
              v226 = *((_DWORD *)v224 + 7);
              if (v226 <= v225)
                break;
              v224 = (uint64_t *)*v224;
              if (!v224)
                goto LABEL_904;
            }
            if (v226 >= v225)
              break;
            v224 = (uint64_t *)v224[1];
            if (!v224)
              goto LABEL_904;
          }
          v222 = *((_DWORD *)v224 + 8) >> 3;
          v219 = v220;
        }
        else
        {
          v222 = v216 & 0xFFFFF;
        }
        goto LABEL_319;
      }
LABEL_295:
      if (a8)
      {
        if (a8 == 1)
        {
          if (v215 < 7 || (v221 = v214[3]) == 0)
          {
            v222 = 0;
LABEL_313:
            v219 = -3;
            goto LABEL_314;
          }
          v222 = *(int *)((char *)v213 + v221);
          if (v222 != v211)
          {
            v230 = v222 - 35;
            if (v222 >= 0x23)
            {
              if ((v44 & 1) != 0)
              {
                v222 = 0;
                v231 = 0;
                v219 = -4;
                switch(v230)
                {
                  case 0u:
                    goto LABEL_351;
                  case 5u:
                    v222 = 2;
                    v219 = -4;
                    break;
                  case 0x15u:
                  case 0x17u:
                  case 0x1Bu:
                    goto LABEL_314;
                  case 0x1Cu:
                    v222 = 0;
                    v219 = -13;
                    break;
                  default:
                    v222 = v230;
                    v219 = -7;
                    break;
                }
              }
              else
              {
                if (v584 == 7)
                {
                  v231 = 0;
                  v222 = 0;
                  v232 = 7;
                  switch(v230)
                  {
                    case 0u:
                      goto LABEL_350;
                    case 1u:
                      v231 = 0;
                      v232 = 8;
                      goto LABEL_350;
                    case 0x18u:
                    case 0x19u:
                      break;
                    case 0x1Au:
                    case 0x1Du:
                      goto LABEL_342;
                    default:
                      goto LABEL_345;
                  }
                }
                else
                {
                  v233 = v222 - 39;
                  v231 = 0;
                  v232 = 0;
                  v222 = 0;
                  switch(v233)
                  {
                    case 0u:
                      v231 = 0;
                      v232 = 3;
                      goto LABEL_350;
                    case 2u:
                      v231 = 0;
                      v232 = 4;
                      goto LABEL_350;
                    case 5u:
                      goto LABEL_350;
                    case 6u:
                      v231 = 0;
                      v232 = 1;
                      goto LABEL_350;
                    case 7u:
                      v231 = 0;
                      v232 = 2;
                      goto LABEL_350;
                    case 0x14u:
                    case 0x15u:
                      break;
                    case 0x16u:
                    case 0x19u:
LABEL_342:
                      v232 = 0;
                      v231 = 3;
                      goto LABEL_350;
                    default:
LABEL_345:
                      v231 = 2;
                      v232 = v230;
LABEL_350:
                      v222 = v232;
                      break;
                  }
                }
LABEL_351:
                v219 = dword_232D73DC0[v231];
              }
              goto LABEL_314;
            }
            goto LABEL_313;
          }
          v219 = -1;
          v222 = v211;
        }
        else
        {
          v222 = 0;
          v219 = -1;
        }
      }
      else
      {
        v219 = -1;
        v222 = v218;
      }
LABEL_314:
      v227 = *((_DWORD *)v97 + 34);
      v228 = *((_DWORD *)v97 + 35);
      if (v227 >= v218)
        v227 = v218;
      if (v228 <= v218 + 1)
        v228 = v218 + 1;
      *((_DWORD *)v97 + 34) = v227;
      *((_DWORD *)v97 + 35) = v228;
LABEL_319:
      v229 = v222 & 0xFFFFF;
      v212 = 0x100000;
      switch(v219)
      {
        case 0xFFFFFFF3:
          v212 = 12582912;
          break;
        case 0xFFFFFFF4:
          v212 = 11534336;
          break;
        case 0xFFFFFFF5:
          v212 = 10485760;
          break;
        case 0xFFFFFFF6:
          v212 = 9437184;
          break;
        case 0xFFFFFFF7:
          v212 = 0x800000;
          break;
        case 0xFFFFFFF8:
          v212 = 7340032;
          break;
        case 0xFFFFFFF9:
          v212 = 6291456;
          break;
        case 0xFFFFFFFA:
          v212 = 5242880;
          break;
        case 0xFFFFFFFB:
          v212 = 0x400000;
          break;
        case 0xFFFFFFFC:
          v212 = 3145728;
          break;
        case 0xFFFFFFFD:
          v212 = 0x200000;
          break;
        case 0xFFFFFFFE:
          break;
        case 0xFFFFFFFF:
          v212 = 0;
          break;
        default:
          v229 |= 0x80000000;
          v212 = (v219 & 0x7FF) << 20;
          break;
      }
      v579->__begin_[v218] = v212 | v229;
      ++v207;
    }
    while (v207 != v210);
  }
  v234 = *((_DWORD *)v97 + 31);
  if (v234 >= *((_DWORD *)v97 + 30))
    v234 = *((_DWORD *)v97 + 30);
  *((_DWORD *)v97 + 30) = v234;
  v235 = *((_DWORD *)v97 + 33);
  if (v235 >= *((_DWORD *)v97 + 32))
    v235 = *((_DWORD *)v97 + 32);
  *((_DWORD *)v97 + 32) = v235;
  v236 = *((_DWORD *)v97 + 35);
  if (v236 >= *((_DWORD *)v97 + 34))
    v236 = *((_DWORD *)v97 + 34);
  *((_DWORD *)v97 + 34) = v236;
  v238 = (int8x16_t *)v97[12];
  v237 = (int8x16_t *)v97[13];
  v239 = (char *)v237 - (char *)v238;
  if (a8 != 1)
  {
    if ((v239 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_392;
    v245 = (v239 >> 2);
    if (v245 >= 8)
    {
      v265 = (v239 >> 2) & 7;
      v246 = v245 - v265;
      v266 = (int32x4_t)xmmword_232D73750;
      v267 = v238 + 1;
      v268.i64[0] = 0x400000004;
      v268.i64[1] = 0x400000004;
      a11.i64[0] = 0xF0000000FLL;
      a11.i64[1] = 0xF0000000FLL;
      v269.i64[0] = 0x800000008;
      v269.i64[1] = 0x800000008;
      v270 = v245 - v265;
      do
      {
        v267[-1] = vandq_s8((int8x16_t)v266, a11);
        *v267 = vandq_s8((int8x16_t)vaddq_s32(v266, v268), a11);
        v266 = vaddq_s32(v266, v269);
        v267 += 2;
        v270 -= 8;
      }
      while (v270);
      if (!v265)
        goto LABEL_392;
    }
    else
    {
      v246 = 0;
    }
    do
    {
      v238->i32[v246] = v246 & 0xFFFFF;
      ++v246;
    }
    while (v245 != v246);
    goto LABEL_392;
  }
  if (v237 != v238)
  {
    v240 = 0;
    v241 = *a12;
    v242 = (a12[1] - *a12) >> 2;
    v243 = 1;
    do
    {
      if (v242 <= v240)
        abort();
      v244 = *(_DWORD *)(v241 + 4 * v240);
      if ((~v244 & 0x3FFFFFFF) != 0)
      {
        if (((v244 >> 30 == 0) & v44) != 0)
          v244 = v244 & 0xC0000000 | (v244 + 60) & 0x3FFFFFFF;
        __asm { BR              X3 }
      }
      v238->i32[v240] = 0x400000;
      v240 = v243++;
    }
    while ((uint64_t)v239 >> 2 > v240);
  }
  v247 = *(unsigned __int16 *)((char *)v28 - *v28 + 24);
  v248 = *(unsigned int *)((char *)v28 + v247);
  v249 = (unsigned int *)((char *)v28 + v247 + v248);
  v250 = *v249;
  if ((_DWORD)v250)
  {
    v251 = 0;
    v252 = 4 * v250;
    v253 = (char *)v28 + v247 + v248;
    do
    {
      v254 = 0;
      v255 = v249[v251 / 4 + 1];
      v256 = (char *)&v249[v251 / 4] + v255;
      v257 = *((int *)v256 + 1);
      v258 = v255 - v257;
      v259 = (char *)&v249[v251 / 4] + v255 - v257;
      v260 = *((unsigned __int16 *)v259 + 2);
      if (v260 >= 5)
      {
        v261 = -v257;
        if (*((_WORD *)v259 + 4) && *((_BYTE *)&v249[v251 / 4 + 1] + v255 + *((unsigned __int16 *)v259 + 4)) == 64)
        {
          if (v260 >= 9 && *(_WORD *)((char *)&v249[v251 / 4 + 3] + v258))
            v262 = *(unsigned int *)((char *)&v249[v251 / 4 + 1]
                                   + v255
                                   + *(unsigned __int16 *)((char *)&v249[v251 / 4 + 3] + v258));
          else
            v262 = 0;
          if (v262 >= (unint64_t)((a12[1] - *a12) >> 2))
            abort();
          v263 = *(_DWORD *)(*a12 + 4 * v262) & 0xFFFFF | 0x800000;
          v238->i32[v262] = v263;
          v238->i32[v262 + 1] = v263;
          v264 = *((int *)v256 + 1);
          v261 = -v264;
          v260 = *(unsigned __int16 *)&v253[v251 + 4 + v255 - v264];
        }
        if (v260 >= 9 && *(_WORD *)&v253[v251 + 12 + v261 + v255])
          v254 = *(unsigned int *)&v253[v251 + 4 + v255 + *(unsigned __int16 *)&v253[v251 + 12 + v261 + v255]];
        else
          v254 = 0;
      }
      if (v254 >= (a12[1] - *a12) >> 2)
        abort();
      v251 += 4;
    }
    while (v252 != v251);
  }
LABEL_392:
  v271 = *v28;
  v272 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - v271 + 24));
  v273 = (unsigned int *)((char *)v272 + *v272);
  v276 = *v273;
  v274 = v273 + 1;
  v275 = v276;
  if (v276)
  {
    v277 = 0;
    v278 = 0;
    v279 = &v274[v275];
    while (1)
    {
      v280 = (int *)((char *)v274 + *v274);
      v281 = (unsigned __int16 *)((char *)v280 - *v280);
      v282 = *v281;
      if (v282 >= 5 && v281[2])
      {
        v283 = 0;
        v284 = 0;
        v285 = 4;
        v286 = 1;
        switch(*((_BYTE *)v280 + v281[2]))
        {
          case 0xB:
          case 0xC:
            goto LABEL_402;
          case 0xD:
          case 0x10:
          case 0x11:
          case 0x3E:
          case 0x5D:
            v283 = 0;
            v286 = 1;
            v284 = 1;
            v285 = 1;
            if (v282 < 7)
              goto LABEL_408;
            goto LABEL_403;
          case 0x61:
          case 0x62:
            v283 = 0;
            v284 = 0;
            v285 = 2;
LABEL_402:
            if (v282 >= 7)
              goto LABEL_403;
            goto LABEL_408;
          default:
            break;
        }
      }
      v286 = 0;
      v285 = 0;
      v283 = 1;
      v284 = 1;
      if (v282 >= 7)
        break;
LABEL_408:
      if (v282 >= 5)
      {
        LODWORD(v287) = 0;
        v288 = v281[2];
        if (!v281[2])
          goto LABEL_410;
LABEL_406:
        v289 = *((unsigned __int8 *)v280 + v288);
        goto LABEL_411;
      }
LABEL_395:
      if (++v274 == v279)
      {
        v306 = -(uint64_t)*v28;
        goto LABEL_463;
      }
    }
LABEL_403:
    v287 = v281[3];
    if (v281[3])
      LODWORD(v287) = *(int *)((char *)v280 + v287);
    v288 = v281[2];
    if (v281[2])
      goto LABEL_406;
LABEL_410:
    v289 = 0;
LABEL_411:
    v278 |= v289 == 64;
    if ((int)v287 >= 0)
      v283 = 1;
    if ((v283 & 1) == 0)
    {
      if (v282 < 9)
      {
        LODWORD(v290) = 0;
      }
      else
      {
        v290 = v281[4];
        if (v281[4])
          LODWORD(v290) = *(int *)((char *)v280 + v290);
      }
      v291 = (v287 >> 20) & 0x7FF;
      v292 = *(_QWORD **)(a5 + 8 * v291);
      if ((_DWORD)v288 && *((unsigned __int8 *)v280 + v288) - 97 <= 1)
      {
        v293 = (uint64_t *)v292[6];
        if (!v293)
          goto LABEL_903;
        v294 = v287 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v295 = *((_DWORD *)v293 + 7);
            if (v295 <= v294)
              break;
            v293 = (uint64_t *)*v293;
            if (!v293)
              goto LABEL_903;
          }
          if (v295 >= v294)
            break;
          v293 = (uint64_t *)v293[1];
          if (!v293)
            goto LABEL_903;
        }
      }
      else
      {
        v293 = (uint64_t *)v292[12];
        if (!v293)
LABEL_903:
          abort();
        v296 = v287 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v297 = *((_DWORD *)v293 + 7);
            if (v297 <= v296)
              break;
            v293 = (uint64_t *)*v293;
            if (!v293)
              goto LABEL_903;
          }
          if (v297 >= v296)
            break;
          v293 = (uint64_t *)v293[1];
          if (!v293)
            goto LABEL_903;
        }
      }
      if ((_DWORD)v288)
      {
        v298 = *((_DWORD *)v293 + 8);
        v299 = *((unsigned __int8 *)v280 + v288);
        switch(v299)
        {
          case 11:
            a11 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v298), (int32x4_t)xmmword_232D737E0), 2uLL);
            goto LABEL_455;
          case 12:
            a11.i32[0] = v298 >> 2;
            a11.i32[1] = (v298 >> 2) + 1;
            a11.u64[1] = (unint64_t)vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v298), (int32x2_t)0xC00000008), 2uLL);
            goto LABEL_455;
          case 13:
            v304 = v298 + 32;
            goto LABEL_453;
          case 14:
          case 15:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 94:
          case 95:
          case 96:
            goto LABEL_455;
          case 16:
            v304 = v298 + 36;
            goto LABEL_453;
          case 17:
            v304 = v298 + 40;
            goto LABEL_453;
          case 62:
            v304 = v298 + 44;
            goto LABEL_453;
          case 93:
            v304 = v298 + 48;
LABEL_453:
            v303 = v304 >> 2;
            goto LABEL_454;
          case 97:
          case 98:
            v300 = (uint64_t *)v292[18];
            if (!v300)
              goto LABEL_905;
            v301 = v287 & 0xFFFFF;
            break;
          default:
            if (v299 != 113)
              goto LABEL_455;
            v303 = v298 >> 2;
LABEL_454:
            a11.i32[0] = v303;
            goto LABEL_455;
        }
        while (1)
        {
          while (1)
          {
            v302 = *((_DWORD *)v300 + 7);
            if (v302 <= v301)
              break;
            v300 = (uint64_t *)*v300;
            if (!v300)
              goto LABEL_905;
          }
          if (v302 >= v301)
            break;
          v300 = (uint64_t *)v300[1];
          if (!v300)
LABEL_905:
            abort();
        }
        a11.i32[0] = *((_DWORD *)v300 + 8) >> 2;
        a11.i32[1] = a11.i32[0] + 1;
      }
LABEL_455:
      if (v286)
      {
        v305 = v291 << 20;
        if (v285 <= 1)
          v285 = 1;
        v238->i32[v290] = (v291 << 20) | a11.i32[0] & 0xFFFFF | 0x80000000;
        if ((v284 & 1) == 0)
        {
          v238->i32[(v290 + 1)] = a11.i32[1] & 0xFFFFF | v305 | 0x80000000;
          if (v285 != 2)
          {
            v238->i32[(v290 + 2)] = a11.i32[2] & 0xFFFFF | v305 | 0x80000000;
            v238->i32[(v290 + 3)] = a11.i32[3] & 0xFFFFF | v305 | 0x80000000;
          }
        }
      }
      v277 = 1;
    }
    goto LABEL_395;
  }
  LOBYTE(v278) = 0;
  v277 = 0;
  v306 = -v271;
LABEL_463:
  v307 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 + v306 + 8));
  v308 = v97[3];
  v309 = v97[4];
  if (v308 == v309)
  {
    v314 = 0;
  }
  else
  {
    v310 = (unint64_t)(v309 - v308) >> 2;
    if ((_DWORD)v310)
    {
      v311 = 0;
      v312 = 0;
      do
      {
        v314 = v311;
        v313 = v312 + 1;
        if (v312 + 1 < v310)
        {
          v315 = 1;
          while (1)
          {
            v316 = *(_DWORD *)(v308 + 4 * (v312 + v315));
            if (v316 != -1
              && v316 != ((*(_DWORD *)(v308 + 4 * v312) + v315) & 0xFFFFF | *(_DWORD *)(v308 + 4 * v312) & 0xFFF00000))
            {
              break;
            }
            ++v315;
            if (!(v312 - (_DWORD)v310 + v315))
            {
              v315 = v310 - v312;
              break;
            }
          }
          v313 = v315 + v312;
        }
        v311 = v314 + 1;
        v312 = v313;
      }
      while (v313 < v310);
    }
    else
    {
      v314 = -1;
    }
  }
  v318 = v97;
  v319 = v97[6];
  v320 = v318[7];
  if (v319 == v320)
  {
    v325 = 0;
  }
  else
  {
    v321 = (unint64_t)(v320 - v319) >> 2;
    if ((_DWORD)v321)
    {
      v322 = 0;
      v323 = 0;
      do
      {
        v325 = v322;
        v324 = v323 + 1;
        if (v323 + 1 < v321)
        {
          v326 = 1;
          while (1)
          {
            v327 = *(_DWORD *)(v319 + 4 * (v323 + v326));
            if (v327 != -1
              && v327 != ((*(_DWORD *)(v319 + 4 * v323) + v326) & 0xFFFFF | *(_DWORD *)(v319 + 4 * v323) & 0xFFF00000))
            {
              break;
            }
            ++v326;
            if (!(v323 - (_DWORD)v321 + v326))
            {
              v326 = v321 - v323;
              break;
            }
          }
          v324 = v326 + v323;
        }
        v322 = v325 + 1;
        v323 = v324;
      }
      while (v324 < v321);
    }
    else
    {
      v325 = -1;
    }
  }
  v329 = v278 & v277;
  v330 = *(unsigned int *)((char *)v307 + *v307);
  v331 = a1[9];
  v332 = a1[10];
  if (v331 == v332)
  {
    v337 = 0;
  }
  else
  {
    v333 = (unint64_t)(v332 - v331) >> 2;
    if ((_DWORD)v333)
    {
      v334 = 0;
      v335 = 0;
      do
      {
        v337 = v334;
        v336 = v335 + 1;
        if (v335 + 1 < v333)
        {
          v338 = 1;
          while (1)
          {
            v339 = *(_DWORD *)(v331 + 4 * (v335 + v338));
            if (v339 != -1
              && v339 != ((*(_DWORD *)(v331 + 4 * v335) + v338) & 0xFFFFF | *(_DWORD *)(v331 + 4 * v335) & 0xFFF00000))
            {
              break;
            }
            ++v338;
            if (!(v335 - (_DWORD)v333 + v338))
            {
              v338 = v333 - v335;
              break;
            }
          }
          v336 = v338 + v335;
        }
        v334 = v337 + 1;
        v335 = v336;
      }
      while (v336 < v333);
    }
    else
    {
      v337 = -1;
    }
  }
  v341 = v314 + v330 + v325 + v337;
  if ((v329 & 1) == 0)
  {
    if (v238 == v237)
    {
      v346 = 0;
    }
    else
    {
      v342 = v239 >> 2;
      if ((v239 >> 2))
      {
        v343 = 0;
        v344 = 0;
        do
        {
          v346 = v343;
          v345 = v344 + 1;
          if (v344 + 1 < v342)
          {
            v347 = 1;
            while (1)
            {
              v348 = v238->i32[v344 + v347];
              if (v348 != -1 && v348 != ((v238->i32[v344] + v347) & 0xFFFFF | v238->i32[v344] & 0xFFF00000))
                break;
              ++v347;
              if (!(v344 - (_DWORD)v342 + v347))
              {
                v347 = v342 - v344;
                break;
              }
            }
            v345 = v347 + v344;
          }
          v343 = v346 + 1;
          v344 = v345;
        }
        while (v345 < v342);
      }
      else
      {
        v346 = -1;
      }
    }
    v341 += v346;
    v350 = v587;
    if (v341 >= 0x21)
      v350 = 0;
    if ((v350 & 1) != 0)
      return a1;
  }
  v589 = 0uLL;
  v590 = 0;
  if ((v587 & 1) == 0)
  {
    if (v308 == v309)
    {
      v354 = 0;
      if (v319 != v320)
        goto LABEL_543;
    }
    else
    {
      v353 = v308 + 4;
      do
      {
        v354 = *(_DWORD *)(v353 - 4) < -1;
        v355 = *(int *)(v353 - 4) < -1 || v353 == v309;
        v353 += 4;
      }
      while (!v355);
      if (v319 != v320)
      {
LABEL_543:
        v356 = v319 + 4;
        do
        {
          v357 = *(_DWORD *)(v356 - 4) < -1;
          v358 = *(int *)(v356 - 4) < -1 || v356 == v320;
          v356 += 4;
        }
        while (!v358);
        if (v331 != v332)
          goto LABEL_550;
        goto LABEL_585;
      }
    }
    v357 = 0;
    if (v331 != v332)
    {
LABEL_550:
      v359 = v331 + 4;
      do
      {
        v360 = *(_DWORD *)(v359 - 4) < -1;
        v361 = *(int *)(v359 - 4) < -1 || v359 == v332;
        v359 += 4;
      }
      while (!v361);
LABEL_586:
      v379 = v354 || v357 || v360;
      if (v238 == v237)
      {
        v382 = 0;
        if (v379)
          goto LABEL_594;
      }
      else
      {
        v380 = (int8x16_t *)((char *)v238->i64 + 4);
        do
        {
          v381 = v380[-1].i32[3];
          v382 = v381 < -1;
          v383 = v381 < -1 || v380 == v237;
          v380 = (int8x16_t *)((char *)v380 + 4);
        }
        while (!v383);
        if (v379)
        {
LABEL_594:
          if (v308 == v309)
          {
            v384 = 0;
            v386 = 0;
            if (v319 != v320)
              goto LABEL_596;
          }
          else
          {
            v384 = (char *)operator new(0x14uLL);
            v385 = (unint64_t)(v309 - v308) >> 2;
            *(_QWORD *)v384 = 1;
            v386 = v384 + 20;
            *((_DWORD *)v384 + 2) = v385;
            *((_DWORD *)v384 + 3) = -1;
            v384[16] = 1;
            *((_QWORD *)&v589 + 1) = v384 + 20;
            v590 = v384 + 20;
            *(_QWORD *)&v589 = v384;
            if (v319 != v320)
            {
LABEL_596:
              v387 = 0xCCCCCCCCCCCCCCCDLL * ((v386 - v384) >> 2);
              v388 = v387 + 1;
              if (v387 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              if (0x999999999999999ALL * ((v386 - v384) >> 2) > v388)
                v388 = 0x999999999999999ALL * ((v386 - v384) >> 2);
              if (v387 >= 0x666666666666666)
                v389 = 0xCCCCCCCCCCCCCCCLL;
              else
                v389 = v388;
              if (v389)
              {
                if (v389 > 0xCCCCCCCCCCCCCCCLL)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v390 = (char *)operator new(20 * v389);
              }
              else
              {
                v390 = 0;
              }
              v395 = &v390[4 * ((v386 - v384) >> 2)];
              v392 = &v390[20 * v389];
              *(_QWORD *)v395 = 2;
              *((_DWORD *)v395 + 2) = (unint64_t)(v320 - v319) >> 2;
              *((_DWORD *)v395 + 3) = -1;
              v395[16] = 1;
              v393 = v395 + 20;
              if (v386 == v384)
              {
                v391 = &v390[4 * ((v386 - v384) >> 2)];
              }
              else
              {
                do
                {
                  v396 = *((_DWORD *)v386 - 1);
                  v391 = v395 - 20;
                  *(_OWORD *)(v395 - 20) = *(_OWORD *)(v386 - 20);
                  *((_DWORD *)v395 - 1) = v396;
                  v386 -= 20;
                  v395 -= 20;
                }
                while (v386 != v384);
              }
              *(_QWORD *)&v589 = v391;
              v590 = v392;
              if (v384)
                operator delete(v384);
              *((_QWORD *)&v589 + 1) = v393;
LABEL_619:
              v397 = v379 ^ 1;
              if (a8 == 1)
                v397 = 0;
              if ((v397 & 1) == 0)
              {
                v398 = a1[9];
                v399 = a1[10];
                v384 = v391;
                v386 = v392;
                v394 = v399 - v398;
                if (v399 != v398)
                  goto LABEL_623;
              }
              goto LABEL_625;
            }
          }
          v393 = v386;
          v394 = v332 - v331;
          if (v332 != v331)
          {
LABEL_623:
            v400 = v394 >> 2;
            v351 = a1;
            if (v393 >= v386)
            {
              v402 = 0xCCCCCCCCCCCCCCCDLL * ((v393 - v384) >> 2) + 1;
              if (v402 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              if (0x999999999999999ALL * ((v386 - v384) >> 2) > v402)
                v402 = 0x999999999999999ALL * ((v386 - v384) >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((v386 - v384) >> 2) >= 0x666666666666666)
                v403 = 0xCCCCCCCCCCCCCCCLL;
              else
                v403 = v402;
              if (v403)
              {
                if (v403 > 0xCCCCCCCCCCCCCCCLL)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v404 = (char *)operator new(20 * v403);
              }
              else
              {
                v404 = 0;
              }
              v405 = &v404[4 * ((v393 - v384) >> 2)];
              *(_QWORD *)v405 = 3;
              *((_DWORD *)v405 + 2) = v400;
              *((_DWORD *)v405 + 3) = -1;
              v405[16] = 1;
              v401 = v405 + 20;
              if (v393 == v384)
              {
                v408 = &v404[4 * ((v393 - v384) >> 2)];
              }
              else
              {
                v406 = v393;
                do
                {
                  v407 = *(_OWORD *)(v406 - 20);
                  v408 = v405 - 20;
                  *((_DWORD *)v405 - 1) = *((_DWORD *)v406 - 1);
                  *(_OWORD *)(v405 - 20) = v407;
                  v406 -= 20;
                  v405 -= 20;
                }
                while (v406 != v384);
              }
              *(_QWORD *)&v589 = v408;
              v590 = &v404[20 * v403];
              if (v384)
                operator delete(v384);
            }
            else
            {
              *(_QWORD *)v393 = 3;
              *((_DWORD *)v393 + 2) = v400;
              *((_DWORD *)v393 + 3) = -1;
              v393[16] = 1;
              v401 = v393 + 20;
            }
            *((_QWORD *)&v589 + 1) = v401;
            v393 = v401;
            goto LABEL_644;
          }
LABEL_625:
          v351 = a1;
LABEL_644:
          v409 = !v382;
          if (a8 == 1)
            v409 = 0;
          if (v409)
          {
            v363 = v393;
          }
          else
          {
            v410 = v351[13] - v351[12];
            v363 = v393;
            if (v410)
            {
              v411 = v410 >> 2;
              if (v393 >= v590)
              {
                v413 = (char *)v589;
                v414 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v393[-v589] >> 2) + 1;
                if (v414 > 0xCCCCCCCCCCCCCCCLL)
                  abort();
                if (0x999999999999999ALL * ((uint64_t)&v590[-v589] >> 2) > v414)
                  v414 = 0x999999999999999ALL * ((uint64_t)&v590[-v589] >> 2);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v590[-v589] >> 2) >= 0x666666666666666)
                  v415 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v415 = v414;
                if (v415)
                {
                  if (v415 > 0xCCCCCCCCCCCCCCCLL)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v416 = (char *)operator new(20 * v415);
                }
                else
                {
                  v416 = 0;
                }
                v417 = &v416[4 * ((uint64_t)&v393[-v589] >> 2)];
                v418 = &v416[20 * v415];
                *(_QWORD *)v417 = 0;
                *((_DWORD *)v417 + 2) = v411;
                *((_DWORD *)v417 + 3) = -1;
                v417[16] = 1;
                v412 = v417 + 20;
                v419 = v393;
                if (v393 != v413)
                {
                  do
                  {
                    v420 = *(_OWORD *)(v419 - 20);
                    *((_DWORD *)v417 - 1) = *((_DWORD *)v419 - 1);
                    *(_OWORD *)(v417 - 20) = v420;
                    v417 -= 20;
                    v419 -= 20;
                  }
                  while (v419 != v413);
                  v419 = v413;
                }
                *(_QWORD *)&v589 = v417;
                v590 = v418;
                if (v419)
                  operator delete(v419);
              }
              else
              {
                *(_QWORD *)v393 = 0;
                *((_DWORD *)v393 + 2) = v411;
                *((_DWORD *)v393 + 3) = -1;
                v412 = v393 + 20;
                v393[16] = 1;
              }
              *((_QWORD *)&v589 + 1) = v412;
              v363 = v412;
            }
          }
          goto LABEL_667;
        }
      }
      v391 = 0;
      v392 = 0;
      v393 = 0;
      goto LABEL_619;
    }
LABEL_585:
    v360 = 0;
    goto LABEL_586;
  }
  if (!v341)
  {
    v351 = a1;
    if ((v329 & 1) != 0)
    {
      v362 = operator new(0x14uLL);
      *(_QWORD *)v362 = 0;
      v362[2] = v239 >> 2;
      v362[3] = -1;
      *((_BYTE *)v362 + 16) = 1;
      *(_QWORD *)&v589 = v362;
      *((_QWORD *)&v589 + 1) = v362 + 5;
      v590 = (char *)(v362 + 5);
      goto LABEL_560;
    }
LABEL_559:
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::collectSplitDMAs(v573, 0, (uint64_t)&v589);
    goto LABEL_560;
  }
  v351 = a1;
  v352 = operator new(20 * v341);
  *(_QWORD *)&v589 = v352;
  *((_QWORD *)&v589 + 1) = v352;
  v590 = (char *)&v352[5 * v341];
  if ((v329 & 1) == 0)
    goto LABEL_559;
  *(_QWORD *)v352 = 0;
  v352[2] = v239 >> 2;
  v352[3] = -1;
  *((_BYTE *)v352 + 16) = 1;
  *((_QWORD *)&v589 + 1) = v352 + 5;
LABEL_560:
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::collectSplitDMAs(v571, 1, (uint64_t)&v589);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::collectSplitDMAs(v572, 2, (uint64_t)&v589);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::collectSplitDMAs(v579, 3, (uint64_t)&v589);
  if (v341 <= 0x20)
  {
    v363 = (char *)*((_QWORD *)&v589 + 1);
  }
  else
  {
    v363 = (char *)*((_QWORD *)&v589 + 1);
    v364 = (char *)v589;
    v366 = *((_QWORD *)&v589 + 1) == (_QWORD)v589 || (_QWORD)v589 + 20 == *((_QWORD *)&v589 + 1);
    v367 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v589 + 1) - v589) >> 2);
    do
    {
      v369 = v364;
      if (!v366)
      {
        v370 = v364 + 20;
        v369 = v364;
        do
        {
          if (*((_DWORD *)v370 + 3) < *((_DWORD *)v369 + 3))
            v369 = v370;
          v370 += 20;
        }
        while (v370 != v363);
      }
      v371 = 0xCCCCCCCCCCCCCCCDLL * ((v369 - v364) >> 2);
      v372 = -858993459 * ((v369 - v364) >> 2);
      v373 = &v364[20 * v372];
      if (*((_DWORD *)v373 + 2) != *((_DWORD *)v373 + 3))
      {
        v374 = &v364[20 * (v371 - 1)];
        v341 -= *((_DWORD *)v374 + 3) == *((_DWORD *)v374 + 2);
        *((_DWORD *)v374 + 3) = -1;
        v374[16] = 1;
      }
      *((_DWORD *)v373 + 3) = -1;
      v364[20 * v372 + 16] = 1;
      v368 = v341 - 1;
      v375 = (v371 + 1);
      if (v375 < v367 && *(_DWORD *)v373 == *(_DWORD *)&v364[20 * v375])
      {
        v376 = &v364[20 * v375];
        v378 = *((_DWORD *)v376 + 3);
        v377 = v376 + 12;
        if (v378 == -1)
        {
          if (v364[20 * v375 + 16])
            v368 = v341 - 2;
        }
        else
        {
          *v377 = *(_DWORD *)&v364[20 * v375 + 8];
        }
      }
      v341 = v368;
    }
    while (v368 > 0x20);
  }
LABEL_667:
  v421 = (_DWORD *)v589;
  if ((char *)v589 == v363)
    goto LABEL_898;
  v582 = 0;
  if (a8 == 1)
    v422 = 7340032;
  else
    v422 = 0x100000;
  v588 = v422;
  v578 = v363;
  while (2)
  {
    v585 = v421;
    if (*((_BYTE *)v421 + 16))
    {
      v423 = v575;
      if (!*v421)
        v423 = v574;
      v424 = v576;
      if (!*v421)
        v424 = v577;
      v425 = 400;
      if (!*v421)
        v425 = 408;
      v580 = v425;
      if (a8 == 1)
        v426 = v423;
      else
        v426 = v424;
      v427 = v573;
      switch((int)v573)
      {
        case 0:
          goto LABEL_687;
        case 1:
          v427 = v571;
          goto LABEL_687;
        case 2:
          v427 = v572;
          goto LABEL_687;
        case 3:
          v427 = v579;
LABEL_687:
          v428 = &v427->__begin_[v421[1]];
          v429 = (int)v421[2];
          if ((_DWORD)v429)
            goto LABEL_688;
          goto LABEL_672;
        default:
          v428 = 0;
          v429 = (int)v421[2];
          if (!(_DWORD)v429)
            goto LABEL_672;
LABEL_688:
          v430 = &v428[v429];
          v431 = (char *)v426[1];
          v583 = v430;
          break;
      }
      while (1)
      {
        v433 = *v428;
        v434 = (char *)*v426;
        v435 = (uint64_t)&v431[-*v426];
        v436 = v435 >> 2;
        *v428 = (v435 >> 2) & 0xFFFFF | v588;
        if ((_DWORD)v433 != -1)
          break;
        v438 = v426[2];
        if ((unint64_t)v431 >= v438)
        {
          v442 = v436 + 1;
          if ((unint64_t)(v436 + 1) >> 62)
            abort();
          v443 = v438 - (_QWORD)v434;
          if (v443 >> 1 > v442)
            v442 = v443 >> 1;
          if ((unint64_t)v443 >= 0x7FFFFFFFFFFFFFFCLL)
            v444 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v444 = v442;
          if (v444)
          {
            if (v444 >> 62)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v445 = operator new(4 * v444);
          }
          else
          {
            v445 = 0;
          }
          v462 = &v445[4 * v436];
          v463 = &v445[4 * v444];
          *v462 = *((_DWORD *)v431 - 1);
          v432 = (char *)(v462 + 1);
          if (v431 != v434)
          {
            v464 = v431 - 4 - v434;
            if (v464 <= 0xBB
              || &v445[(v435 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v464 & 0xFFFFFFFFFFFFFFFCLL)] > &v445[(v435 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                                - 4]
              || &v431[-(v464 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v431 - 4
              || v431 - v445 - (v435 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
            {
              v465 = v431;
            }
            else
            {
              v467 = (v464 >> 2) + 1;
              v465 = &v431[-4 * (v467 & 0x7FFFFFFFFFFFFFF8)];
              v468 = &v445[4 * v436 - 16];
              v469 = v431 - 16;
              v470 = v467 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v471 = *(_OWORD *)v469;
                *(v468 - 1) = *((_OWORD *)v469 - 1);
                *v468 = v471;
                v468 -= 2;
                v469 -= 32;
                v470 -= 8;
              }
              while (v470);
              v462 -= v467 & 0x7FFFFFFFFFFFFFF8;
              if (v467 == (v467 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_751:
                *v426 = v462;
                v426[1] = v432;
                v426[2] = v463;
                if (!v434)
                  goto LABEL_755;
                goto LABEL_754;
              }
            }
            do
            {
              v466 = *((_DWORD *)v465 - 1);
              v465 -= 4;
              *--v462 = v466;
            }
            while (v465 != v434);
            goto LABEL_751;
          }
          *v426 = v462;
          v426[1] = v432;
          v426[2] = v463;
LABEL_754:
          operator delete(v434);
LABEL_755:
          v430 = v583;
          v426[1] = v432;
          goto LABEL_691;
        }
        *(_DWORD *)v431 = *((_DWORD *)v431 - 1);
        v432 = v431 + 4;
        v426[1] = v431 + 4;
LABEL_691:
        ++v428;
        v431 = v432;
        if (v428 == v430)
          goto LABEL_672;
      }
      if ((v433 & 0x80000000) != 0)
      {
        v439 = (v433 >> 20) & 0x7FF;
        if (v586 == 1)
          v440 = v439 | 0x8000;
        else
          v440 = v439;
        v441 = v426[2];
        if ((unint64_t)v431 < v441)
        {
          *(_DWORD *)v431 = v440 | ((unsigned __int16)v433 << 16);
          v432 = v431 + 4;
LABEL_775:
          v426[1] = v432;
          v476 = 1 << (v433 >> 20);
          *(uint64_t *)((char *)v351 + v580) |= v476;
          if ((v351[52] & v476) != 0)
            *((_BYTE *)v351 + 392) = 1;
          goto LABEL_691;
        }
        v446 = v436 + 1;
        if ((unint64_t)(v436 + 1) >> 62)
          abort();
        v447 = v441 - (_QWORD)v434;
        if (v447 >> 1 > v446)
          v446 = v447 >> 1;
        if ((unint64_t)v447 >= 0x7FFFFFFFFFFFFFFCLL)
          v448 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v448 = v446;
        if (v448)
        {
          if (v448 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v449 = operator new(4 * v448);
        }
        else
        {
          v449 = 0;
        }
        v472 = (int *)&v449[4 * v436];
        *v472 = v440 | ((unsigned __int16)v433 << 16);
        v432 = (char *)(v472 + 1);
        if (v431 != v434)
        {
          v473 = v431 - 4 - v434;
          if (v473 < 0xBC)
          {
            v474 = v431;
            goto LABEL_771;
          }
          if (&v449[(v435 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v473 & 0xFFFFFFFFFFFFFFFCLL)] > &v449[(v435 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                              - 4])
          {
            v474 = v431;
            goto LABEL_771;
          }
          if (&v431[-(v473 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v431 - 4)
          {
            v474 = v431;
            goto LABEL_771;
          }
          if (v431 - v449 - (v435 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          {
            v474 = v431;
            goto LABEL_771;
          }
          v482 = (v473 >> 2) + 1;
          v474 = &v431[-4 * (v482 & 0x7FFFFFFFFFFFFFF8)];
          v483 = &v449[4 * v436 - 16];
          v484 = v431 - 16;
          v485 = v482 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v486 = *(_OWORD *)v484;
            *(v483 - 1) = *((_OWORD *)v484 - 1);
            *v483 = v486;
            v483 -= 2;
            v484 -= 32;
            v485 -= 8;
          }
          while (v485);
          v472 -= v482 & 0x7FFFFFFFFFFFFFF8;
          if (v482 != (v482 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_771:
              v475 = *((_DWORD *)v474 - 1);
              v474 -= 4;
              *--v472 = v475;
            }
            while (v474 != v434);
          }
        }
        *v426 = v472;
        v426[1] = v432;
        v426[2] = &v449[4 * v448];
        if (v434)
          operator delete(v434);
        v351 = a1;
        v430 = v583;
        goto LABEL_775;
      }
      v437 = v433 & 0xFFFFF;
      switch(*v585)
      {
        case 0:
          *((_BYTE *)v351 + 291) = 1;
          break;
        case 1:
          *((_BYTE *)v351 + 288) = 1;
          v437 -= *((_DWORD *)v351 + 30);
          break;
        case 2:
          *((_BYTE *)v351 + 289) = 1;
          v450 = *((_DWORD *)v351 + 31) + v437;
          v451 = *((_DWORD *)v351 + 30) + *((_DWORD *)v351 + 32);
          goto LABEL_723;
        case 3:
          *((_BYTE *)v351 + 290) = 1;
          v450 = *((_DWORD *)v351 + 31) + v437 + *((_DWORD *)v351 + 33);
          v451 = *((_DWORD *)v351 + 30) + *((_DWORD *)v351 + 32) + *((_DWORD *)v351 + 34);
LABEL_723:
          LOWORD(v437) = v450 - v451;
          break;
        default:
          break;
      }
      if (v586 == 1)
        v452 = v433 >> 20;
      else
        v452 = -1;
      v453 = v426[2];
      if ((unint64_t)v431 < v453)
      {
        *(_DWORD *)v431 = v452 | ((unsigned __int16)v437 << 16);
        v432 = v431 + 4;
      }
      else
      {
        v454 = v436 + 1;
        if ((unint64_t)(v436 + 1) >> 62)
          abort();
        v455 = v453 - (_QWORD)v434;
        if (v455 >> 1 > v454)
          v454 = v455 >> 1;
        if ((unint64_t)v455 >= 0x7FFFFFFFFFFFFFFCLL)
          v456 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v456 = v454;
        if (v456)
        {
          if (v456 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v457 = operator new(4 * v456);
        }
        else
        {
          v457 = 0;
        }
        v458 = (int *)&v457[4 * v436];
        *v458 = v452 | ((unsigned __int16)v437 << 16);
        v432 = (char *)(v458 + 1);
        if (v431 != v434)
        {
          v459 = v431 - 4 - v434;
          if (v459 < 0xBC)
          {
            v460 = v431;
            goto LABEL_742;
          }
          if (&v457[(v435 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v459 & 0xFFFFFFFFFFFFFFFCLL)] > &v457[(v435 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                              - 4])
          {
            v460 = v431;
            goto LABEL_742;
          }
          if (&v431[-(v459 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v431 - 4)
          {
            v460 = v431;
            goto LABEL_742;
          }
          if (v431 - v457 - (v435 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          {
            v460 = v431;
            goto LABEL_742;
          }
          v477 = (v459 >> 2) + 1;
          v460 = &v431[-4 * (v477 & 0x7FFFFFFFFFFFFFF8)];
          v478 = &v457[4 * v436 - 16];
          v479 = v431 - 16;
          v480 = v477 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v481 = *(_OWORD *)v479;
            *(v478 - 1) = *((_OWORD *)v479 - 1);
            *v478 = v481;
            v478 -= 2;
            v479 -= 32;
            v480 -= 8;
          }
          while (v480);
          v458 -= v477 & 0x7FFFFFFFFFFFFFF8;
          if (v477 != (v477 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_742:
              v461 = *((_DWORD *)v460 - 1);
              v460 -= 4;
              *--v458 = v461;
            }
            while (v460 != v434);
          }
        }
        *v426 = v458;
        v426[1] = v432;
        v426[2] = &v457[4 * v456];
        if (v434)
          operator delete(v434);
        v351 = a1;
        v430 = v583;
      }
      v426[1] = v432;
      v582 = 1;
      goto LABEL_691;
    }
LABEL_672:
    v421 = v585 + 5;
    a8 = v586;
    if (v585 + 5 != (_DWORD *)v578)
      continue;
    break;
  }
  if ((v582 & 1) != 0 && *((_BYTE *)v351 + 392))
  {
    v487 = v351[28] - v351[27];
    if ((v487 & 0x3FFFFFFFCLL) != 0)
    {
      v488 = 0;
      v489 = (v487 >> 2);
      do
      {
        if (*(__int16 *)(*v577 + 4 * v488) == -1)
        {
          v501 = (char *)v351[44];
          v500 = v351[45];
          if ((unint64_t)v501 >= v500)
          {
            v502 = (char *)v351[43];
            v503 = v501 - v502;
            if (v501 - v502 <= -3)
              abort();
            v504 = v503 >> 1;
            v505 = v500 - (_QWORD)v502;
            if (v505 <= (v503 >> 1) + 1)
              v506 = v504 + 1;
            else
              v506 = v505;
            if (v505 >= 0x7FFFFFFFFFFFFFFELL)
              v507 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v507 = v506;
            if (v507)
            {
              if (v507 < 0)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v508 = operator new(2 * v507);
            }
            else
            {
              v508 = 0;
            }
            v518 = &v508[2 * v504];
            *v518 = v488;
            v519 = v518 + 1;
            if (v501 != v502)
            {
              v520 = v501 - 2 - v502;
              if (v520 < 0x1E)
                goto LABEL_933;
              if (v501 - v508 - (v503 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
                goto LABEL_933;
              v521 = (v520 >> 1) + 1;
              v522 = &v508[2 * v504 - 16];
              v523 = v501 - 16;
              v524 = v521 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v525 = *(_OWORD *)v523;
                *(v522 - 1) = *((_OWORD *)v523 - 1);
                *v522 = v525;
                v522 -= 2;
                v523 -= 32;
                v524 -= 16;
              }
              while (v524);
              v518 -= v521 & 0xFFFFFFFFFFFFFFF0;
              v501 -= 2 * (v521 & 0xFFFFFFFFFFFFFFF0);
              if (v521 != (v521 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_933:
                do
                {
                  v526 = *((_WORD *)v501 - 1);
                  v501 -= 2;
                  *--v518 = v526;
                }
                while (v501 != v502);
              }
            }
            v527 = &v508[2 * v507];
            v351 = a1;
            a1[43] = (uint64_t)v518;
            a1[44] = (uint64_t)v519;
            a1[45] = (uint64_t)v527;
            if (v502)
              operator delete(v502);
            a1[44] = (uint64_t)v519;
          }
          else
          {
            *(_WORD *)v501 = v488;
            v351[44] = (uint64_t)(v501 + 2);
          }
        }
        else
        {
          v492 = (char *)v351[47];
          v491 = v351[48];
          if ((unint64_t)v492 < v491)
          {
            *(_WORD *)v492 = v488;
            v490 = v492 + 2;
          }
          else
          {
            v493 = (char *)v351[46];
            v494 = v492 - v493;
            if (v492 - v493 <= -3)
              abort();
            v495 = v494 >> 1;
            v496 = v491 - (_QWORD)v493;
            if (v496 <= (v494 >> 1) + 1)
              v497 = v495 + 1;
            else
              v497 = v496;
            if (v496 >= 0x7FFFFFFFFFFFFFFELL)
              v498 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v498 = v497;
            if (v498)
            {
              if (v498 < 0)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v499 = operator new(2 * v498);
            }
            else
            {
              v499 = 0;
            }
            v509 = &v499[2 * v495];
            *v509 = v488;
            v490 = v509 + 1;
            if (v492 != v493)
            {
              v510 = v492 - 2 - v493;
              if (v510 < 0x1E)
                goto LABEL_934;
              if (v492 - v499 - (v494 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
                goto LABEL_934;
              v511 = (v510 >> 1) + 1;
              v512 = &v499[2 * v495 - 16];
              v513 = v492 - 16;
              v514 = v511 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v515 = *(_OWORD *)v513;
                *(v512 - 1) = *((_OWORD *)v513 - 1);
                *v512 = v515;
                v512 -= 2;
                v513 -= 32;
                v514 -= 16;
              }
              while (v514);
              v509 -= v511 & 0xFFFFFFFFFFFFFFF0;
              v492 -= 2 * (v511 & 0xFFFFFFFFFFFFFFF0);
              if (v511 != (v511 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_934:
                do
                {
                  v516 = *((_WORD *)v492 - 1);
                  v492 -= 2;
                  *--v509 = v516;
                }
                while (v492 != v493);
              }
            }
            v517 = &v499[2 * v498];
            v351 = a1;
            a1[46] = (uint64_t)v509;
            a1[47] = (uint64_t)v490;
            a1[48] = (uint64_t)v517;
            if (v493)
              operator delete(v493);
          }
          v351[47] = (uint64_t)v490;
        }
        ++v488;
      }
      while (v488 != v489);
    }
    v528 = v351[25] - v351[24];
    if ((v528 & 0x3FFFFFFFCLL) != 0)
    {
      v529 = 0;
      v530 = (v528 >> 2);
      do
      {
        if (*(__int16 *)(*v576 + 4 * v529) == -1)
        {
          v542 = (char *)v351[38];
          v541 = v351[39];
          if ((unint64_t)v542 >= v541)
          {
            v543 = (char *)*v570;
            v544 = v542 - (_BYTE *)*v570;
            if (v544 <= -3)
              abort();
            v545 = v544 >> 1;
            v546 = v541 - (_QWORD)v543;
            if (v546 <= (v544 >> 1) + 1)
              v547 = v545 + 1;
            else
              v547 = v546;
            if (v546 >= 0x7FFFFFFFFFFFFFFELL)
              v548 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v548 = v547;
            if (v548)
            {
              if (v548 < 0)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v549 = operator new(2 * v548);
            }
            else
            {
              v549 = 0;
            }
            v559 = &v549[2 * v545];
            *v559 = v529;
            v560 = v559 + 1;
            if (v542 != v543)
            {
              v561 = v542 - 2 - v543;
              if (v561 < 0x1E)
                goto LABEL_935;
              if (v542 - v549 - (v544 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
                goto LABEL_935;
              v562 = (v561 >> 1) + 1;
              v563 = &v549[2 * v545 - 16];
              v564 = v542 - 16;
              v565 = v562 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v566 = *(_OWORD *)v564;
                *(v563 - 1) = *((_OWORD *)v564 - 1);
                *v563 = v566;
                v563 -= 2;
                v564 -= 32;
                v565 -= 16;
              }
              while (v565);
              v559 -= v562 & 0xFFFFFFFFFFFFFFF0;
              v542 -= 2 * (v562 & 0xFFFFFFFFFFFFFFF0);
              if (v562 != (v562 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_935:
                do
                {
                  v567 = *((_WORD *)v542 - 1);
                  v542 -= 2;
                  *--v559 = v567;
                }
                while (v542 != v543);
              }
            }
            v568 = &v549[2 * v548];
            v351 = a1;
            a1[37] = (uint64_t)v559;
            a1[38] = (uint64_t)v560;
            a1[39] = (uint64_t)v568;
            if (v543)
              operator delete(v543);
            a1[38] = (uint64_t)v560;
          }
          else
          {
            *(_WORD *)v542 = v529;
            v351[38] = (uint64_t)(v542 + 2);
          }
        }
        else
        {
          v533 = (char *)v351[41];
          v532 = v351[42];
          if ((unint64_t)v533 < v532)
          {
            *(_WORD *)v533 = v529;
            v531 = v533 + 2;
          }
          else
          {
            v534 = (char *)v351[40];
            v535 = v533 - v534;
            if (v533 - v534 <= -3)
              abort();
            v536 = v535 >> 1;
            v537 = v532 - (_QWORD)v534;
            if (v537 <= (v535 >> 1) + 1)
              v538 = v536 + 1;
            else
              v538 = v537;
            if (v537 >= 0x7FFFFFFFFFFFFFFELL)
              v539 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v539 = v538;
            if (v539)
            {
              if (v539 < 0)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v540 = operator new(2 * v539);
            }
            else
            {
              v540 = 0;
            }
            v550 = &v540[2 * v536];
            *v550 = v529;
            v531 = v550 + 1;
            if (v533 != v534)
            {
              v551 = v533 - 2 - v534;
              if (v551 < 0x1E)
                goto LABEL_936;
              if (v533 - v540 - (v535 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
                goto LABEL_936;
              v552 = (v551 >> 1) + 1;
              v553 = &v540[2 * v536 - 16];
              v554 = v533 - 16;
              v555 = v552 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v556 = *(_OWORD *)v554;
                *(v553 - 1) = *((_OWORD *)v554 - 1);
                *v553 = v556;
                v553 -= 2;
                v554 -= 32;
                v555 -= 16;
              }
              while (v555);
              v550 -= v552 & 0xFFFFFFFFFFFFFFF0;
              v533 -= 2 * (v552 & 0xFFFFFFFFFFFFFFF0);
              if (v552 != (v552 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_936:
                do
                {
                  v557 = *((_WORD *)v533 - 1);
                  v533 -= 2;
                  *--v550 = v557;
                }
                while (v533 != v534);
              }
            }
            v558 = &v540[2 * v539];
            v351 = a1;
            a1[40] = (uint64_t)v550;
            a1[41] = (uint64_t)v531;
            a1[42] = (uint64_t)v558;
            if (v534)
              operator delete(v534);
          }
          v351[41] = (uint64_t)v531;
        }
        ++v529;
      }
      while (v529 != v530);
    }
  }
  v363 = (char *)v589;
LABEL_898:
  if (v363)
    operator delete(v363);
  return a1;
}

void sub_232CABCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v23 = *(void **)(v21 - 112);
  if (v23)
  {
    operator delete(v23);
    v24 = *(void **)(v20 + 368);
    if (!v24)
    {
LABEL_3:
      v25 = *(void **)(v20 + 344);
      if (!v25)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else
  {
    v24 = *(void **)(v20 + 368);
    if (!v24)
      goto LABEL_3;
  }
  *(_QWORD *)(v20 + 376) = v24;
  operator delete(v24);
  v25 = *(void **)(v20 + 344);
  if (!v25)
  {
LABEL_4:
    v26 = *(void **)(v20 + 320);
    if (!v26)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_29:
  *(_QWORD *)(v20 + 352) = v25;
  operator delete(v25);
  v26 = *(void **)(v20 + 320);
  if (!v26)
  {
LABEL_6:
    v27 = *a9;
    if (*a9)
    {
      *(_QWORD *)(v20 + 304) = v27;
      operator delete(v27);
    }
    v28 = *a13;
    if (*a13)
    {
      *(_QWORD *)(v20 + 272) = v28;
      operator delete(v28);
    }
    v29 = *a14;
    if (*a14)
    {
      *(_QWORD *)(v20 + 248) = v29;
      operator delete(v29);
    }
    v30 = *a16;
    if (*a16)
    {
      *(_QWORD *)(v20 + 224) = v30;
      operator delete(v30);
    }
    v31 = *a15;
    if (*a15)
    {
      *(_QWORD *)(v20 + 200) = v31;
      operator delete(v31);
    }
    v32 = *a12;
    if (*a12)
    {
      *(_QWORD *)(v20 + 104) = v32;
      operator delete(v32);
    }
    v33 = *a18;
    if (*a18)
    {
      *(_QWORD *)(v20 + 80) = v33;
      operator delete(v33);
      v34 = *a11;
      if (!*a11)
      {
LABEL_20:
        v35 = *a10;
        if (!*a10)
          goto LABEL_21;
        goto LABEL_25;
      }
    }
    else
    {
      v34 = *a11;
      if (!*a11)
        goto LABEL_20;
    }
    *(_QWORD *)(v20 + 56) = v34;
    operator delete(v34);
    v35 = *a10;
    if (!*a10)
    {
LABEL_21:
      v36 = *(void **)v20;
      if (!*(_QWORD *)v20)
        goto LABEL_22;
      goto LABEL_26;
    }
LABEL_25:
    *(_QWORD *)(v20 + 32) = v35;
    operator delete(v35);
    v36 = *(void **)v20;
    if (!*(_QWORD *)v20)
LABEL_22:
      _Unwind_Resume(exception_object);
LABEL_26:
    operator delete(v36);
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  *(_QWORD *)(v20 + 328) = v26;
  operator delete(v26);
  goto LABEL_6;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v7;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  std::vector<unsigned int>::size_type v15;
  std::vector<unsigned int>::size_type v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  std::vector<unsigned int>::size_type v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v7 = end;
  if (__n <= value - end)
  {
    if (!__n)
    {
LABEL_21:
      this->__end_ = v7;
      return;
    }
    v15 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v15 >= 0xF && (end >= dword_232D767D8 || &end[__n] <= &dont_care))
    {
      v16 = v15 + 1;
      *(_QWORD *)&v17 = -1;
      *((_QWORD *)&v17 + 1) = -1;
      v18 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)v7 = v17;
        *((_OWORD *)v7 + 1) = v17;
        v7 += 8;
        v18 -= 8;
      }
      while (v18);
      if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_20;
      v7 = &end[v16 & 0x7FFFFFFFFFFFFFF8];
    }
    do
      *v7++ = -1;
    while (v7 != &end[__n]);
LABEL_20:
    v7 = &end[__n];
    goto LABEL_21;
  }
  begin = this->__begin_;
  v9 = (char *)end - (char *)this->__begin_;
  v10 = v9 >> 2;
  v11 = (v9 >> 2) + __n;
  if (v11 >> 62)
    abort();
  v12 = (char *)value - (char *)begin;
  if (v12 >> 1 > v11)
    v11 = v12 >> 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
    v13 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = operator new(4 * v13);
  }
  else
  {
    v14 = 0;
  }
  v19 = (unsigned int *)&v14[4 * v10];
  v20 = &v19[__n];
  v21 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v22 = v19;
  if (v21 >= 0x13)
  {
    if (v19 >= dword_232D767D8 || (v22 = (unsigned int *)&v14[4 * v10], &v14[4 * __n + v9] <= (_BYTE *)&dont_care))
    {
      v23 = (v21 + 1) & 0x7FFFFFFFFFFFFFF8;
      *(_QWORD *)&v24 = -1;
      *((_QWORD *)&v24 + 1) = -1;
      v25 = &v14[4 * v10];
      v26 = v23;
      do
      {
        *v25 = v24;
        v25[1] = v24;
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
      if (v21 + 1 == v23)
        goto LABEL_31;
      v22 = &v19[v23];
    }
  }
  do
    *v22++ = -1;
  while (v22 != v20);
LABEL_31:
  if (end != begin)
  {
    v27 = (char *)end - (char *)begin - 4;
    if (v27 < 0x2C)
      goto LABEL_45;
    if ((unint64_t)((char *)end - &v14[v9]) < 0x20)
      goto LABEL_45;
    v28 = (v27 >> 2) + 1;
    v7 = &end[-(v28 & 0x7FFFFFFFFFFFFFF8)];
    v29 = &v14[4 * v10 - 16];
    v30 = (__int128 *)(end - 4);
    v31 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *v30;
      *(v29 - 1) = *(v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 2;
      v31 -= 8;
    }
    while (v31);
    v19 -= v28 & 0x7FFFFFFFFFFFFFF8;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        v33 = *--v7;
        *--v19 = v33;
      }
      while (v7 != begin);
    }
  }
  this->__begin_ = v19;
  this->__end_ = v20;
  this->__end_cap_.__value_ = (unsigned int *)&v14[4 * v13];
  if (begin)
    operator delete(begin);
}

_QWORD *AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::collectSplitDMAs(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  char *v12;
  char *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;

  v3 = (result[1] - *result) >> 2;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v28 = result;
    do
    {
      v8 = *(_DWORD *)(*result + 4 * v6);
      if (v6 + 1 >= v3)
      {
        v9 = 1;
      }
      else
      {
        v9 = 1;
        while (1)
        {
          v10 = *(_DWORD *)(*result + 4 * (v6 + v9));
          if (v10 != -1 && v10 != ((v8 + v9) & 0xFFFFF | v8 & 0xFFF00000))
            break;
          ++v9;
          if (!(v6 - (_DWORD)v3 + v9))
          {
            v9 = v3 - v6;
            break;
          }
        }
      }
      v12 = *(char **)a3;
      v13 = *(char **)(a3 + 8);
      if (*(char **)a3 == v13 || *((_DWORD *)v13 - 5) != a2)
      {
        v14 = -1;
        if (v8 < 0)
        {
LABEL_19:
          if (v14 == -1)
            v15 = -1;
          else
            v15 = v14 + v9;
          v16 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v13 >= v16)
          {
            v22 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 2) + 1;
            if (v22 > 0xCCCCCCCCCCCCCCCLL)
LABEL_56:
              abort();
            v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (_QWORD)v12) >> 2);
            if (2 * v23 > v22)
              v22 = 2 * v23;
            if (v23 >= 0x666666666666666)
              v20 = 0xCCCCCCCCCCCCCCCLL;
            else
              v20 = v22;
            if (v20)
            {
              if (v20 > 0xCCCCCCCCCCCCCCCLL)
LABEL_57:
                std::__throw_bad_array_new_length[abi:nn180100]();
              v21 = (char *)operator new(20 * v20);
            }
            else
            {
              v21 = 0;
            }
            v24 = &v21[4 * ((v13 - v12) >> 2)];
            *(_DWORD *)v24 = a2;
            *((_DWORD *)v24 + 1) = v6;
            *((_DWORD *)v24 + 2) = v9;
            *((_DWORD *)v24 + 3) = v15;
            v24[16] = 0;
            v25 = v24;
            if (v12 != v13)
            {
              do
              {
                v27 = *(_OWORD *)(v13 - 20);
                *((_DWORD *)v25 - 1) = *((_DWORD *)v13 - 1);
                *(_OWORD *)(v25 - 20) = v27;
                v25 -= 20;
                v13 -= 20;
              }
              while (v13 != v12);
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          *(_DWORD *)v13 = a2;
          *((_DWORD *)v13 + 1) = v6;
          *((_DWORD *)v13 + 2) = v9;
          *((_DWORD *)v13 + 3) = v15;
          goto LABEL_4;
        }
      }
      else
      {
        v14 = *((_DWORD *)v13 - 3);
        if (v8 < 0)
          goto LABEL_19;
      }
      v17 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v13 >= v17)
      {
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 2) + 1;
        if (v18 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_56;
        v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (_QWORD)v12) >> 2);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x666666666666666)
          v20 = 0xCCCCCCCCCCCCCCCLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_57;
          v21 = (char *)operator new(20 * v20);
        }
        else
        {
          v21 = 0;
        }
        v24 = &v21[4 * ((v13 - v12) >> 2)];
        *(_DWORD *)v24 = a2;
        *((_DWORD *)v24 + 1) = v6;
        *((_QWORD *)v24 + 1) = -1;
        v24[16] = 0;
        v25 = v24;
        if (v12 != v13)
        {
          do
          {
            v26 = *(_OWORD *)(v13 - 20);
            *((_DWORD *)v25 - 1) = *((_DWORD *)v13 - 1);
            *(_OWORD *)(v25 - 20) = v26;
            v25 -= 20;
            v13 -= 20;
          }
          while (v13 != v12);
LABEL_51:
          v12 = *(char **)a3;
        }
LABEL_52:
        v7 = v24 + 20;
        *(_QWORD *)a3 = v25;
        *(_QWORD *)(a3 + 8) = v24 + 20;
        *(_QWORD *)(a3 + 16) = &v21[20 * v20];
        if (v12)
          operator delete(v12);
        result = v28;
        goto LABEL_5;
      }
      *(_DWORD *)v13 = a2;
      *((_DWORD *)v13 + 1) = v6;
      *((_QWORD *)v13 + 1) = -1;
LABEL_4:
      v7 = v13 + 20;
      v13[16] = 0;
LABEL_5:
      *(_QWORD *)(a3 + 8) = v7;
      v6 += v9;
    }
    while (v6 < v3);
  }
  return result;
}

unint64_t AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ObjectProgramVariant(unint64_t a1, uint64_t a2, unsigned int **a3, const std::string *a4, uint64_t a5, int a6, char a7, void *a8)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int **v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int *v20;
  unsigned int **v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int *v25;
  unsigned int **v26;
  int *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  int *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  int *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int16 *v65;
  uint64_t v66;
  unsigned __int16 *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int **v74;
  int **v75;
  unsigned int v76;
  unsigned int v77;
  int *v78;
  int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  ProgramBindingsAndDMAList *v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  std::mutex *v97;
  uint64_t v98;
  void *__dst[2];
  unint64_t v100;
  uint64_t v101;

  v12 = AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(a1, a2, (uint64_t)a3, a4, a5, a6);
  *(_QWORD *)v12 = &off_250401860;
  v13 = v12 + 1240;
  *(_BYTE *)(v12 + 1992) = 0;
  *(_QWORD *)(v12 + 2000) = 0;
  *(_QWORD *)(v12 + 2016) = 0;
  *(_QWORD *)(v12 + 2008) = 0;
  *(_OWORD *)(v12 + 2240) = 0u;
  *(_OWORD *)(v12 + 2256) = 0u;
  *(_QWORD *)(v12 + 2272) = 0;
  *(_OWORD *)(v12 + 2288) = 0u;
  *(_OWORD *)(v12 + 2304) = 0u;
  *(_QWORD *)(v12 + 2320) = 0;
  *(_OWORD *)(v12 + 2336) = 0u;
  *(_OWORD *)(v12 + 2352) = 0u;
  *(_QWORD *)(v12 + 2368) = 0;
  *(_OWORD *)(v12 + 2384) = 0u;
  *(_OWORD *)(v12 + 2400) = 0u;
  *(_QWORD *)(v12 + 2416) = 0;
  *(_OWORD *)(v12 + 2440) = 0u;
  *(_OWORD *)(v12 + 2456) = 0u;
  *(_QWORD *)(v12 + 2472) = 0;
  *(_QWORD *)(v12 + 2520) = 0;
  *(_OWORD *)(v12 + 2504) = 0u;
  *(_OWORD *)(v12 + 2488) = 0u;
  *(_QWORD *)(v12 + 2568) = 0;
  *(_OWORD *)(v12 + 2552) = 0u;
  *(_OWORD *)(v12 + 2536) = 0u;
  *(_QWORD *)(v12 + 2616) = 0;
  *(_OWORD *)(v12 + 2600) = 0u;
  *(_OWORD *)(v12 + 2584) = 0u;
  *(_QWORD *)(v12 + 2664) = 0;
  *(_OWORD *)(v12 + 2648) = 0u;
  *(_OWORD *)(v12 + 2632) = 0u;
  *(_QWORD *)(v12 + 1408) = 0;
  *(_OWORD *)(v12 + 1392) = 0u;
  *(_OWORD *)(v12 + 1376) = 0u;
  *(_OWORD *)(v12 + 1360) = 0u;
  *(_OWORD *)(v12 + 1344) = 0u;
  *(_OWORD *)(v12 + 1328) = 0u;
  *(_OWORD *)(v12 + 1312) = 0u;
  *(_OWORD *)(v12 + 1296) = 0u;
  *(_OWORD *)(v12 + 1280) = 0u;
  *(_OWORD *)(v12 + 1264) = 0u;
  *(_OWORD *)(v12 + 2208) = 0u;
  *(_OWORD *)(v12 + 2192) = 0u;
  *(_OWORD *)(v12 + 2176) = 0u;
  *(_OWORD *)(v12 + 2160) = 0u;
  *(_OWORD *)(v12 + 2144) = 0u;
  *(_OWORD *)(v12 + 2128) = 0u;
  *(_OWORD *)(v12 + 2112) = 0u;
  *(_OWORD *)(v12 + 2680) = 0u;
  *(_OWORD *)(v12 + 2696) = 0u;
  *(_OWORD *)(v12 + 2712) = 0u;
  *(_OWORD *)(v12 + 2728) = 0u;
  *(_OWORD *)(v12 + 2768) = 0u;
  *(_OWORD *)(v12 + 2784) = 0u;
  *(_OWORD *)(v12 + 2800) = 0u;
  *(_BYTE *)(v12 + 2986) = a7;
  v14 = v12 + 3000;
  *(_OWORD *)(v12 + 3000) = 0u;
  *(_OWORD *)(v12 + 3016) = 0u;
  *(_DWORD *)(v12 + 3032) = 1065353216;
  *(_QWORD *)(a1 + 3040) = a8;
  *(_QWORD *)(a1 + 3048) = 850045863;
  *(_OWORD *)(a1 + 3056) = 0u;
  *(_OWORD *)(a1 + 3072) = 0u;
  *(_OWORD *)(a1 + 3088) = 0u;
  *(_QWORD *)(a1 + 3104) = 0;
  v15 = a3[28];
  if (v15)
  {
    v16 = a3 + 98;
    if (a3[29])
      v16 = a3 + 28;
  }
  else
  {
    v16 = a3 + 98;
  }
  v17 = 0;
  if (*v16 && v16[1])
    v17 = (int *)((char *)*v16 + **v16);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 5u && (v19 = v18[2]) != 0)
  {
    v20 = (int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
    if (!v15)
    {
LABEL_12:
      v21 = a3 + 98;
      goto LABEL_17;
    }
  }
  else
  {
    v20 = 0;
    if (!v15)
      goto LABEL_12;
  }
  if (a3[29])
    v21 = a3 + 28;
  else
    v21 = a3 + 98;
LABEL_17:
  v22 = 0;
  if (*v21 && v21[1])
    v22 = (int *)((char *)*v21 + **v21);
  v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 0xBu)
  {
    v24 = v23[5];
    if (v24)
    {
      v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
      if (!a3[58])
        goto LABEL_23;
LABEL_26:
      v26 = a3 + 58;
      if (!a3[59])
        v26 = a3 + 128;
      if (!v26[1])
        goto LABEL_24;
LABEL_29:
      v27 = (int *)((char *)*v26 + **v26);
      goto LABEL_30;
    }
  }
  v25 = 0;
  if (a3[58])
    goto LABEL_26;
LABEL_23:
  v26 = a3 + 128;
  if (a3[129])
    goto LABEL_29;
LABEL_24:
  v27 = 0;
LABEL_30:
  v97 = (std::mutex *)(a1 + 3048);
  v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x15u && (v29 = v28[10]) != 0)
    v30 = (int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
  else
    v30 = 0;
  *(_DWORD *)(a1 + 2836) = 0;
  v31 = *(_DWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 920);
  *(_DWORD *)(a1 + 2828) += v31;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v13);
  if (!a3[63])
  {
    if (!a3[134])
      goto LABEL_67;
    v34 = a3[133];
    if (!v34)
      goto LABEL_67;
    goto LABEL_42;
  }
  v32 = a3 + 63;
  v33 = 63;
  if (!a3[64])
  {
    v33 = 133;
    v32 = a3 + 133;
  }
  if (v32[1])
  {
    v34 = a3[v33];
    if (v34)
    {
LABEL_42:
      v35 = (int *)((char *)v34 + *v34);
      v36 = (unsigned __int16 *)((char *)v35 - *v35);
      if (*v36 < 0xBu)
        goto LABEL_67;
      v37 = v36[5];
      if (!v37)
        goto LABEL_67;
      v38 = (int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
      v39 = (unsigned __int16 *)((char *)v38 - *v38);
      if (*v39 < 5u)
        goto LABEL_67;
      v40 = v39[2];
      if (!v40)
        goto LABEL_67;
      v96 = (unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
      v41 = *v96;
      if (!(_DWORD)v41)
        goto LABEL_67;
      v42 = 0;
      v93 = 4 * v41;
      v94 = *(_QWORD *)(a1 + 512);
      v95 = v13;
      do
      {
        v43 = v96[v42 / 4 + 1];
        v44 = v43 - *(int *)((char *)&v96[v42 / 4 + 1] + v43);
        v45 = (char *)&v96[v42 / 4] + v44;
        v46 = *((unsigned __int16 *)v45 + 2);
        if (v46 < 5)
        {
          v98 = 0;
          v48 = 4;
        }
        else
        {
          v47 = *((unsigned __int16 *)v45 + 4);
          if (v47)
            v47 += (uint64_t)&v96[v42 / 4 + 1] + v43 + *(unsigned int *)((char *)&v96[v42 / 4 + 1] + v43 + v47);
          v48 = v47 + 4;
          if (v46 >= 7 && (v49 = *(unsigned __int16 *)((char *)&v96[v42 / 4 + 2] + v44 + 2)) != 0)
            v98 = *(_QWORD *)((char *)&v96[v42 / 4 + 1] + v43 + v49);
          else
            v98 = 0;
        }
        v50 = strlen((const char *)v48);
        if (v50 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v51 = (void *)v50;
        if (v50 >= 0x17)
        {
          v53 = v14;
          v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17)
            v54 = v50 | 7;
          v55 = v54 + 1;
          v52 = (void **)operator new(v54 + 1);
          __dst[1] = v51;
          v100 = v55 | 0x8000000000000000;
          __dst[0] = v52;
          v14 = v53;
        }
        else
        {
          HIBYTE(v100) = v50;
          v52 = __dst;
          if (!v50)
            goto LABEL_65;
        }
        memmove(v52, (const void *)v48, (size_t)v51);
LABEL_65:
        *((_BYTE *)v51 + (_QWORD)v52) = 0;
        v101 = v98 + v94;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(v14, (uint64_t)__dst, (uint64_t)__dst);
        v13 = v95;
        if (SHIBYTE(v100) < 0)
          operator delete(__dst[0]);
        v42 += 4;
      }
      while (v93 != v42);
    }
  }
LABEL_67:
  v56 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v56 < 0xFu)
  {
    LOBYTE(v57) = 0;
  }
  else
  {
    v57 = v56[7];
    if (v57)
      LOBYTE(v57) = *((_BYTE *)v30 + v57) != 0;
  }
  *(_BYTE *)(a1 + 2996) = v57;
  v58 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v58 < 9u)
  {
    LODWORD(v59) = 0;
  }
  else
  {
    v59 = v58[4];
    if (v59)
      LODWORD(v59) = (*(int *)((char *)v25 + v59) + 3) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a1 + 2832) = v59;
  v60 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v60 < 0x3Du)
  {
    LODWORD(v61) = 0;
  }
  else
  {
    v61 = v60[30];
    if (v61)
      LODWORD(v61) = (*(int *)((char *)v20 + v61) + 15) & 0xFFFFFFF0;
  }
  *(_DWORD *)(a1 + 2980) = v61;
  v62 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v62 >= 0xDu && (v63 = v62[6]) != 0)
  {
    v64 = *(int *)((char *)v30 + v63);
    *(_DWORD *)(a1 + 2992) = v64;
    if (v64)
      goto LABEL_112;
  }
  else
  {
    *(_DWORD *)(a1 + 2992) = 0;
  }
  v65 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v65 < 5u)
  {
    LODWORD(v66) = 0;
  }
  else
  {
    v66 = v65[2];
    if (v66)
      LODWORD(v66) = *(int *)((char *)v20 + v66);
  }
  v67 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v67 < 5u)
  {
    LODWORD(v68) = 0;
    if ((_DWORD)v66)
      goto LABEL_92;
LABEL_95:
    v69 = 512;
    if ((_DWORD)v68)
      goto LABEL_93;
    goto LABEL_96;
  }
  v68 = v67[2];
  if (v68)
    LODWORD(v68) = *(int *)((char *)v25 + v68);
  if (!(_DWORD)v66)
    goto LABEL_95;
LABEL_92:
  v69 = 32 * ((3329 - ((4 * (_DWORD)v66 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v66 + 28) & 0xFFFFFFE0));
  if ((_DWORD)v68)
  {
LABEL_93:
    v70 = 0x60000 / ((((_DWORD)v68 << 6) + 448) & 0xFFFFFE00);
    goto LABEL_97;
  }
LABEL_96:
  v70 = 512;
LABEL_97:
  if (v69 >= v70)
    v69 = v70;
  if (v69 > 0x1FF)
  {
    v64 = 512;
    goto LABEL_112;
  }
  if (!(_DWORD)v66)
  {
    v64 = 512;
    if ((_DWORD)v68)
      goto LABEL_102;
LABEL_105:
    v71 = 512;
    goto LABEL_106;
  }
  v64 = 32 * ((3329 - ((4 * (_DWORD)v66 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v66 + 28) & 0xFFFFFFE0));
  if (!(_DWORD)v68)
    goto LABEL_105;
LABEL_102:
  v71 = 0x60000 / ((((_DWORD)v68 << 6) + 448) & 0xFFFFFE00);
LABEL_106:
  if (v64 >= v71)
    v64 = v71;
  if (v64 >= 0x200)
    v64 = 512;
  if (v64 >= 0x21)
    v64 &= 0x3E0u;
LABEL_112:
  *(_DWORD *)(a1 + 2988) = v64;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v13);
  if (((*(_QWORD *)(a1 + 1264) | *(_QWORD *)(a1 + 1288) | *(_QWORD *)(a1 + 1312) | *(_QWORD *)(a1 + 1344) | *(_QWORD *)(a1 + 1368)) & 0x1800000000000000) == 0)
  {
    std::mutex::lock(v97);
    v72 = *(_QWORD *)(a1 + 24);
    if (v72)
    {
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>((std::vector<unsigned int> *)a1, *(uint64_t ***)(a1 + 16), *(_QWORD *)(a1 + 24));
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(a1, v72);
      v73 = *(_QWORD *)(a1 + 16);
      v74 = *(int ***)(v73 + 72);
      v75 = *(int ***)(v73 + 80);
      if (v74 != v75)
      {
        while (2)
        {
          v78 = *v74;
          v79 = **v74;
          v80 = v79 - 11;
          switch(v79)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              goto LABEL_121;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_125;
            default:
              if (v79 == 113)
              {
LABEL_121:
                v81 = v78[1];
                if (v81 < 0)
                  goto LABEL_119;
              }
              else
              {
LABEL_125:
                v81 = v78[1];
                if (v80 > 0x6C)
                  goto LABEL_119;
              }
              v82 = *(_QWORD *)(a1 + 96) + 4 * v78[2];
              v83 = v81 & 0xFFFFF;
              v84 = 56 * (v81 & 0xFFFFF);
              v85 = v84 + 16;
              switch(v80)
              {
                case 0u:
                  *(uint32x4_t *)v82 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v85), (int32x4_t)xmmword_232D737E0), 2uLL);
                  break;
                case 1u:
                  *(_DWORD *)v82 = v85 >> 2;
                  *(_DWORD *)(v82 + 4) = (v85 >> 2) | 1;
                  *(uint32x2_t *)(v82 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v85), (int32x2_t)0xC00000008), 2uLL);
                  break;
                case 2u:
                  v76 = v84 + 48;
                  goto LABEL_117;
                case 5u:
                  v76 = v84 + 52;
                  goto LABEL_117;
                case 6u:
                  v76 = v84 + 56;
                  goto LABEL_117;
                case 0x20u:
                  *(_DWORD *)v82 = v81 + 731;
                  v87 = *(unsigned int *)(a1 + 2836);
                  *(_DWORD *)(a1 + 2840 + 4 * v87) = v81;
                  *(_DWORD *)(a1 + 2836) = v87 + 1;
                  break;
                case 0x30u:
                  *(_QWORD *)v82 = 0x1B7000001B6;
                  break;
                case 0x33u:
                  v76 = v84 + 60;
                  goto LABEL_117;
                case 0x35u:
                  *(_QWORD *)v82 = 0x1BB000001BALL;
                  break;
                case 0x49u:
                  *(_DWORD *)v82 = 767;
                  break;
                case 0x52u:
                  if ((v81 & 0xFFF00000) == 0x400000)
                  {
                    *(_DWORD *)v82 = 2;
                  }
                  else
                  {
                    v76 = v84 + 64;
LABEL_117:
                    v77 = v76 >> 2;
LABEL_118:
                    *(_DWORD *)v82 = v77;
                  }
                  break;
                case 0x56u:
                  v86 = 8 * v83 + 1776;
                  goto LABEL_135;
                case 0x57u:
                  v86 = 8 * v83 + 2024;
LABEL_135:
                  v88 = v86 >> 2;
                  *(_DWORD *)v82 = v88;
                  *(_DWORD *)(v82 + 4) = v88 | 1;
                  break;
                case 0x62u:
                  v77 = v81 + 605;
                  goto LABEL_118;
                case 0x63u:
                  v77 = v81 + 668;
                  goto LABEL_118;
                case 0x64u:
                  *(_DWORD *)v82 = 766;
                  break;
                case 0x66u:
                  v76 = 8 * v83 + 2024;
                  goto LABEL_117;
                case 0x6Bu:
                  *(_QWORD *)v82 = 0x21B0000021ALL;
                  break;
                case 0x6Cu:
                  *(_QWORD *)v82 = 0x21D0000021CLL;
                  break;
                default:
                  break;
              }
LABEL_119:
              if (++v74 != v75)
                continue;
              goto LABEL_147;
          }
        }
      }
LABEL_147:
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, v72);
      v89 = *(_QWORD *)(a1 + 24);
      if (v89)
      {
        v90 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v89);
        MEMORY[0x234927ECC](v90, 0x1030C404D8F7974);
      }
      *(_QWORD *)(a1 + 24) = 0;
      v91 = *(ProgramBindingsAndDMAList **)(a1 + 16);
      if (v91)
      {
        ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v91);
        MEMORY[0x234927ECC]();
      }
      *(_QWORD *)(a1 + 16) = 0;
    }
    std::mutex::unlock(v97);
  }
  return a1;
}

void sub_232CACDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::mutex::unlock(a13);
  std::mutex::~mutex(a13);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v22);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(v21);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v20);
  _Unwind_Resume(a1);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, int a6)
{
  ProgramBindingsAndDMAList **v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int **v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  const char *v28;
  void **v29;
  unsigned __int16 *v30;
  uint64_t v31;
  const char *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  size_t v36;
  const void *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int **v42;
  int *v43;
  int *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _DWORD *v51;
  const char *v52;
  size_t v53;
  size_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  int v60;
  int v61;
  char *v62;
  unint64_t v63;
  _DWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  const void **v79;
  unsigned int **v80;
  unsigned int *v81;
  unsigned int *v82;
  BOOL v83;
  _QWORD *v84;
  int *v85;
  unsigned __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  uint64_t v90;
  unsigned __int16 *v91;
  uint64_t v92;
  unsigned __int16 *v93;
  uint64_t v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned int **v97;
  unsigned int *v98;
  int *v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned __int16 *v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned __int16 *v116;
  uint64_t v117;
  unsigned __int16 *v118;
  uint64_t v119;
  unsigned __int16 *v120;
  uint64_t v121;
  unsigned __int16 *v122;
  uint64_t v123;
  unsigned __int16 *v124;
  uint64_t v125;
  unsigned __int16 *v126;
  uint64_t v127;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  unsigned __int16 *v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  unsigned __int16 *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  int *v148;
  unsigned __int16 *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  char *v153;
  unsigned int *v154;
  uint64_t v155;
  unsigned int *v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unsigned __int16 *v160;
  uint64_t v161;
  int v162;
  unsigned __int8 v163;
  unsigned __int16 *v164;
  uint64_t v165;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned __int16 *v168;
  uint64_t v169;
  uint64_t v170;
  _WORD *v171;
  unsigned int v172;
  uint64_t v173;
  BOOL v174;
  int v175;
  BOOL v176;
  unsigned __int16 *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int *v192;
  uint64_t v193;
  unsigned int *v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int *v197;
  unsigned int *v198;
  int *v199;
  unsigned __int16 *v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t **v205;
  uint64_t *v206;
  uint64_t **v207;
  unsigned int v208;
  _DWORD *v209;
  uint64_t v210;
  uint64_t *v211;
  unsigned __int8 v212;
  int v213;
  unsigned __int16 *v214;
  uint64_t v215;
  unsigned __int16 *v216;
  uint64_t v217;
  unsigned __int16 *v218;
  uint64_t v219;
  unsigned __int16 *v220;
  uint64_t v221;
  unsigned __int16 *v222;
  char v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned __int8 v227;
  unsigned __int16 *v228;
  uint64_t v229;
  unsigned __int16 *v230;
  uint64_t v231;
  unsigned __int8 v232;
  uint64_t v233;
  _OWORD *v234;
  const void **v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  const void *v242;
  const void *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  const void **v247;
  _QWORD *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  const void *v252;
  const void *v253;
  _QWORD *v254;
  const void **v255;
  _QWORD *v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  const void *v260;
  const void *v261;
  _QWORD *v262;
  uint64_t v263;
  NSObject *v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  ProgramBindingsAndDMAList *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  unsigned __int16 *v295;
  uint64_t v296;
  _DWORD *v297;
  unint64_t v298;
  _BYTE *v299;
  _BYTE *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  unsigned __int16 *v305;
  uint64_t v306;
  _DWORD *v307;
  unint64_t v308;
  _DWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  char *v320;
  char *v321;
  char *v322;
  uint64_t v324;
  _QWORD *v325;
  ProgramBindingsAndDMAList **v326;
  std::string *v329;
  unint64_t *v330;
  _QWORD *v332;
  char *v334;
  _DWORD *v335;
  int *v336;
  int *v337;
  _BYTE __dst[48];
  __int16 v339;
  uint64_t v340;
  uint64_t v341;

  v341 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (ProgramBindingsAndDMAList **)(a1 + 16);
  *(_QWORD *)a1 = &off_2504019A0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  v325 = (_QWORD *)(a1 + 392);
  v9 = (unint64_t *)(a2 + 6744);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 424) = v10;
  v11 = a1 + 432;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 868) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 489) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 895) = 0u;
  *(_OWORD *)(a1 + 911) = 0u;
  *(_OWORD *)(a1 + 927) = 0u;
  *(_QWORD *)(a1 + 940) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_BYTE *)(a1 + 1040) = *(_BYTE *)(a5 + 425);
  *(_WORD *)(a1 + 1042) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  v332 = (_QWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 1048) = a1 + 1056;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_QWORD *)(a1 + 1232) = 0;
  if (*(_QWORD *)(a3 + 224))
  {
    if (*(_QWORD *)(a3 + 232))
      v12 = (unsigned int **)(a3 + 224);
    else
      v12 = (unsigned int **)(a3 + 784);
  }
  else
  {
    v12 = (unsigned int **)(a3 + 784);
  }
  v13 = 0;
  if (*v12 && v12[1])
    v13 = (int *)((char *)*v12 + **v12);
  v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (v15 = v14[2]) != 0)
  {
    v337 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
    if (!*(_QWORD *)(a3 + 464))
    {
LABEL_14:
      v16 = (unsigned int **)(a3 + 1024);
      goto LABEL_19;
    }
  }
  else
  {
    v337 = 0;
    if (!*(_QWORD *)(a3 + 464))
      goto LABEL_14;
  }
  if (*(_QWORD *)(a3 + 472))
    v16 = (unsigned int **)(a3 + 464);
  else
    v16 = (unsigned int **)(a3 + 1024);
LABEL_19:
  v17 = 0;
  if (*v16 && v16[1])
    v17 = (int *)((char *)*v16 + **v16);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 5u && (v19 = v18[2]) != 0)
    v20 = (int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  else
    v20 = 0;
  v21 = (unsigned __int16 *)((char *)v20 - *v20);
  v22 = *v21;
  if (v22 < 0x25)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v23 = v21[18];
    if (v21[18])
      LOBYTE(v23) = *((_BYTE *)v20 + v23) != 0;
  }
  *(_BYTE *)(a1 + 1041) = v23;
  v24 = (unsigned __int16 *)((char *)v337 - *v337);
  if (*v24 >= 0x55u && v24[42])
  {
    if (v22 <= 6)
    {
LABEL_33:
      LODWORD(v25) = 0;
      goto LABEL_37;
    }
  }
  else if (v22 < 7)
  {
    goto LABEL_33;
  }
  v25 = v21[3];
  if (v25)
    LODWORD(v25) = *(int *)((char *)v20 + v25);
LABEL_37:
  *(_DWORD *)(a1 + 416) = v25;
  v26 = (unsigned __int16 *)((char *)v20 - *v20);
  v326 = v8;
  if (*v26 >= 0x13u && (v27 = v26[9]) != 0)
    v28 = (char *)v20 + v27 + *(unsigned int *)((char *)v20 + v27) + 4;
  else
    v28 = "";
  v329 = (std::string *)(a1 + 480);
  v330 = (unint64_t *)(a1 + 456);
  v29 = (void **)(a1 + 872);
  MEMORY[0x234927D28](v11, v28, a3, a4);
  v30 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v30 >= 9u && (v31 = v30[4]) != 0)
    v32 = (char *)v20 + v31 + *(unsigned int *)((char *)v20 + v31) + 4;
  else
    v32 = "";
  MEMORY[0x234927D28](v330, v32);
  v33 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v33 < 0x29u)
  {
    LOBYTE(v34) = 0;
  }
  else
  {
    v34 = v33[20];
    if (v34)
      LOBYTE(v34) = *((_BYTE *)v20 + v34) != 0;
  }
  *(_BYTE *)(a1 + 504) = v34;
  std::string::operator=(v329, a4);
  v35 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v35 >= 5u && v35[2] && *(_BYTE *)(a2 + 6360))
  {
    v36 = *(_QWORD *)(a3 + 8);
    if (v36 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v37 = *(const void **)a3;
    if (v36 >= 0x17)
    {
      v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v39 = v36 | 7;
      v40 = v39 + 1;
      v38 = operator new(v39 + 1);
      *(_QWORD *)&__dst[8] = v36;
      *(_QWORD *)&__dst[16] = v40 | 0x8000000000000000;
      *(_QWORD *)__dst = v38;
    }
    else
    {
      __dst[23] = *(_QWORD *)(a3 + 8);
      v38 = __dst;
      if (!v36)
        goto LABEL_60;
    }
    memmove(v38, v37, v36);
LABEL_60:
    v38[v36] = 0;
    if (*(char *)(a1 + 895) < 0)
      operator delete(*v29);
    *(_OWORD *)v29 = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 888) = *(_QWORD *)&__dst[16];
    v41 = (_QWORD *)(a3 + 24);
    if (*(_QWORD *)(a3 + 24))
    {
      if (!*(_QWORD *)(a3 + 32))
        v41 = (_QWORD *)(a3 + 584);
    }
    else
    {
      v41 = (_QWORD *)(a3 + 584);
    }
    *(_QWORD *)(a1 + 896) = *v41 - *(_QWORD *)a3;
  }
  if (*(_QWORD *)(a3 + 344))
  {
    v42 = (unsigned int **)(a3 + 344);
    if (!*(_QWORD *)(a3 + 352))
      v42 = (unsigned int **)(a3 + 904);
  }
  else
  {
    v42 = (unsigned int **)(a3 + 904);
  }
  v336 = v20;
  v43 = v337;
  if (*v42 && v42[1])
  {
    v44 = (int *)((char *)*v42 + **v42);
    v45 = (unsigned __int16 *)((char *)v44 - *v44);
    v46 = *v45;
    if (v45[2])
    {
      v47 = (int *)((char *)v44 + v45[2] + *(unsigned int *)((char *)v44 + v45[2]));
      if (v46 < 7)
        goto LABEL_82;
    }
    else
    {
      v47 = 0;
      if (v46 < 7)
        goto LABEL_82;
    }
    v48 = v45[3];
    if (v48)
    {
      v49 = (char *)v44 + v48 + *(unsigned int *)((char *)v44 + v48);
      if (!*v47)
        goto LABEL_121;
      goto LABEL_83;
    }
LABEL_82:
    v49 = 0;
    if (!*v47)
      goto LABEL_121;
LABEL_83:
    v50 = 0;
    v334 = v49 + 4;
    v335 = v47 + 1;
    while (1)
    {
      v52 = (char *)&v335[v50 + 1] + v335[v50];
      v53 = strlen(v52);
      if (v53 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v54 = v53;
      if (v53 >= 0x17)
        break;
      __dst[23] = v53;
      v55 = __dst;
      if (v53)
        goto LABEL_93;
LABEL_94:
      v55[v54] = 0;
      v58 = *(_QWORD *)(a1 + 1176);
      if (v58 >= *(_QWORD *)(a1 + 1184))
      {
        v59 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1168), (uint64_t)__dst);
        v60 = __dst[23];
        *(_QWORD *)(a1 + 1176) = v59;
        if (v60 < 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        *(_OWORD *)v58 = *(_OWORD *)__dst;
        *(_QWORD *)(v58 + 16) = *(_QWORD *)&__dst[16];
        *(_QWORD *)(a1 + 1176) = v58 + 24;
      }
      v61 = *(_DWORD *)&v334[4 * v50];
      v62 = *(char **)(a1 + 1200);
      v63 = *(_QWORD *)(a1 + 1208);
      if ((unint64_t)v62 >= v63)
      {
        v64 = v47;
        v65 = *(char **)(a1 + 1192);
        v66 = (v62 - v65) >> 2;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
          abort();
        v68 = v63 - (_QWORD)v65;
        if (v68 >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v70 = operator new(4 * v69);
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v66];
        *v71 = v61;
        v51 = v71 + 1;
        if (v62 == v65)
        {
          v20 = v336;
          v43 = v337;
        }
        else
        {
          v72 = v62 - 4 - v65;
          v43 = v337;
          if (v72 < 0x2C)
          {
            v20 = v336;
            goto LABEL_117;
          }
          v20 = v336;
          if ((unint64_t)(v65 - v70) < 0x20)
            goto LABEL_541;
          v73 = (v72 >> 2) + 1;
          v74 = &v70[4 * v66 - 16];
          v75 = v62 - 16;
          v76 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v77 = *(_OWORD *)v75;
            *(v74 - 1) = *((_OWORD *)v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 32;
            v76 -= 8;
          }
          while (v76);
          v71 -= v73 & 0x7FFFFFFFFFFFFFF8;
          v62 -= 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_541:
            do
            {
LABEL_117:
              v78 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *--v71 = v78;
            }
            while (v62 != v65);
          }
        }
        *(_QWORD *)(a1 + 1192) = v71;
        *(_QWORD *)(a1 + 1200) = v51;
        *(_QWORD *)(a1 + 1208) = &v70[4 * v69];
        if (v65)
          operator delete(v65);
        v47 = v64;
        goto LABEL_85;
      }
      *(_DWORD *)v62 = v61;
      v51 = v62 + 4;
      v43 = v337;
LABEL_85:
      *(_QWORD *)(a1 + 1200) = v51;
      if (++v50 >= (unint64_t)*v47)
        goto LABEL_121;
    }
    v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v56 = v53 | 7;
    v57 = v56 + 1;
    v55 = operator new(v56 + 1);
    *(_QWORD *)&__dst[8] = v54;
    *(_QWORD *)&__dst[16] = v57 | 0x8000000000000000;
    *(_QWORD *)__dst = v55;
LABEL_93:
    memmove(v55, v52, v54);
    goto LABEL_94;
  }
LABEL_121:
  v79 = (const void **)a3;
  if (*(_QWORD *)(a3 + 544))
  {
    v80 = (unsigned int **)(a3 + 544);
    if (!*(_QWORD *)(a3 + 552))
      v80 = (unsigned int **)(a3 + 1104);
  }
  else
  {
    v80 = (unsigned int **)(a3 + 1104);
  }
  v82 = *v80;
  v81 = v80[1];
  if (v82)
    v83 = v81 == 0;
  else
    v83 = 1;
  v84 = (_QWORD *)(a1 + 432);
  if (v83
    || (v85 = (int *)((char *)v82 + *v82), v86 = (unsigned __int16 *)((char *)v85 - *v85), *v86 < 5u)
    || (v87 = v86[2]) == 0)
  {
    v88 = 0;
  }
  else
  {
    v88 = *(_QWORD *)((char *)v85 + v87);
  }
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  *(float *)(a1 + 1080) = (float)(v88
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / unk_254235750)
                        / 1000000.0;
  v89 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v89 < 5u)
  {
    LODWORD(v90) = 0;
  }
  else
  {
    v90 = v89[2];
    if (v90)
      LODWORD(v90) = *(int *)((char *)v43 + v90);
  }
  *(_DWORD *)(a1 + 1072) = v90;
  v91 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v91 < 0x2Du)
  {
    LODWORD(v92) = 0;
  }
  else
  {
    v92 = v91[22];
    if (v92)
      LODWORD(v92) = *(int *)((char *)v43 + v92);
  }
  *(_DWORD *)(a1 + 1076) = v92;
  v93 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v93 < 0x35u)
  {
    LODWORD(v94) = 0;
  }
  else
  {
    v94 = v93[26];
    if (v94)
      LODWORD(v94) = *(int *)((char *)v43 + v94);
  }
  *(_DWORD *)(a1 + 1116) = v94;
  v95 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v95 < 0x43u)
  {
    LODWORD(v96) = 0;
  }
  else
  {
    v96 = v95[33];
    if (v96)
      LODWORD(v96) = *(int *)((char *)v43 + v96);
  }
  *(_DWORD *)(a1 + 1152) = v96;
  if (*(_QWORD *)(a3 + 304))
  {
    v97 = (unsigned int **)(a3 + 304);
    if (!*(_QWORD *)(a3 + 312))
      v97 = (unsigned int **)(a3 + 864);
    v98 = *v97;
    if (!*v97)
      goto LABEL_236;
    goto LABEL_158;
  }
  v97 = (unsigned int **)(a3 + 864);
  v98 = *(unsigned int **)(a3 + 864);
  if (v98)
  {
LABEL_158:
    if (v97[1])
    {
      v99 = (int *)((char *)v98 + *v98);
      v100 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v100 < 0xDu)
      {
        LODWORD(v101) = 0;
      }
      else
      {
        v101 = v100[6];
        if (v101)
          LODWORD(v101) = *(int *)((char *)v99 + v101);
      }
      *(_DWORD *)(a1 + 1076) = v101;
      v102 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v102 < 0xBu)
      {
        LODWORD(v103) = 0;
      }
      else
      {
        v103 = v102[5];
        if (v103)
          LODWORD(v103) = *(int *)((char *)v99 + v103);
      }
      *(_DWORD *)(a1 + 1084) = v103;
      v104 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v104 < 0x11u)
      {
        LODWORD(v105) = 0;
      }
      else
      {
        v105 = v104[8];
        if (v105)
          LODWORD(v105) = *(int *)((char *)v99 + v105);
      }
      *(_DWORD *)(a1 + 1088) = v105;
      v106 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v106 < 0x13u)
      {
        LODWORD(v107) = 0;
      }
      else
      {
        v107 = v106[9];
        if (v107)
          LODWORD(v107) = *(int *)((char *)v99 + v107);
      }
      *(_DWORD *)(a1 + 1092) = v107;
      v108 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v108 < 0x17u)
      {
        LODWORD(v109) = 0;
      }
      else
      {
        v109 = v108[11];
        if (v109)
          LODWORD(v109) = *(int *)((char *)v99 + v109);
      }
      *(_DWORD *)(a1 + 1096) = v109;
      v110 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v110 < 0x1Bu)
      {
        LODWORD(v111) = 0;
      }
      else
      {
        v111 = v110[13];
        if (v111)
          LODWORD(v111) = *(int *)((char *)v99 + v111);
      }
      *(_DWORD *)(a1 + 1100) = v111;
      v112 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v112 < 0x15u)
      {
        LODWORD(v113) = 0;
      }
      else
      {
        v113 = v112[10];
        if (v113)
          LODWORD(v113) = *(int *)((char *)v99 + v113);
      }
      *(_DWORD *)(a1 + 1104) = v113;
      v114 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v114 < 0x19u)
      {
        LODWORD(v115) = 0;
      }
      else
      {
        v115 = v114[12];
        if (v115)
          LODWORD(v115) = *(int *)((char *)v99 + v115);
      }
      *(_DWORD *)(a1 + 1108) = v115;
      v116 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v116 < 0x1Du)
      {
        LODWORD(v117) = 0;
      }
      else
      {
        v117 = v116[14];
        if (v117)
          LODWORD(v117) = *(int *)((char *)v99 + v117);
      }
      *(_DWORD *)(a1 + 1112) = v117;
      v118 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v118 < 0xFu)
      {
        LODWORD(v119) = 0;
      }
      else
      {
        v119 = v118[7];
        if (v119)
          LODWORD(v119) = *(int *)((char *)v99 + v119);
      }
      *(_DWORD *)(a1 + 1116) = v119;
      v120 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v120 < 0x1Fu)
      {
        LODWORD(v121) = 0;
      }
      else
      {
        v121 = v120[15];
        if (v121)
          LODWORD(v121) = *(int *)((char *)v99 + v121);
      }
      *(_DWORD *)(a1 + 1120) = v121;
      v122 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v122 < 0x21u)
      {
        LODWORD(v123) = 0;
      }
      else
      {
        v123 = v122[16];
        if (v123)
          LODWORD(v123) = *(int *)((char *)v99 + v123);
      }
      *(_DWORD *)(a1 + 1124) = v123;
      v124 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v124 < 0x23u)
      {
        LODWORD(v125) = 0;
      }
      else
      {
        v125 = v124[17];
        if (v125)
          LODWORD(v125) = *(int *)((char *)v99 + v125);
      }
      *(_DWORD *)(a1 + 1128) = v125;
      v126 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v126 < 0x25u)
      {
        LODWORD(v127) = 0;
      }
      else
      {
        v127 = v126[18];
        if (v127)
          LODWORD(v127) = *(int *)((char *)v99 + v127);
      }
      *(_DWORD *)(a1 + 1132) = v127;
      v128 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v128 < 0x27u)
      {
        LODWORD(v129) = 0;
      }
      else
      {
        v129 = v128[19];
        if (v129)
          LODWORD(v129) = *(int *)((char *)v99 + v129);
      }
      *(_DWORD *)(a1 + 1136) = v129;
      v130 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v130 < 0x29u)
      {
        LODWORD(v131) = 0;
      }
      else
      {
        v131 = v130[20];
        if (v131)
          LODWORD(v131) = *(int *)((char *)v99 + v131);
      }
      *(_DWORD *)(a1 + 1140) = v131;
      v132 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v132 < 0x2Bu)
      {
        LODWORD(v133) = 0;
      }
      else
      {
        v133 = v132[21];
        if (v133)
          LODWORD(v133) = *(int *)((char *)v99 + v133);
      }
      *(_DWORD *)(a1 + 1144) = v133;
      v134 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v134 < 7u)
      {
        LODWORD(v135) = 0;
      }
      else
      {
        v135 = v134[3];
        if (v135)
          LODWORD(v135) = *(int *)((char *)v99 + v135);
      }
      *(_DWORD *)(a1 + 1148) = v135;
      v136 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v136 >= 5u && (v137 = v136[2]) != 0)
        v138 = *(int *)((char *)v99 + v137);
      else
        v138 = 0;
      *(_DWORD *)(a1 + 1156) = v138;
    }
  }
LABEL_236:
  if (*(_QWORD *)(a3 + 424))
  {
    v139 = *(_QWORD *)(a3 + 432);
    if (v139)
      v140 = *(_QWORD *)(a3 + 424);
    else
      v140 = *(_QWORD *)(a3 + 984);
    if (v139)
      v141 = a3 + 424;
    else
      v141 = a3 + 984;
  }
  else
  {
    v141 = a3 + 984;
    v140 = *(_QWORD *)(a3 + 984);
  }
  MEMORY[0x234927D34](a1 + 1216, v140, *(_QWORD *)(v141 + 8));
  std::string::push_back((std::string *)(a1 + 1216), 0);
  v142 = *v43;
  v143 = (char *)v43 - v142;
  v144 = *(unsigned __int16 *)((char *)v43 - v142);
  if (v144 < 0x39)
    goto LABEL_262;
  v145 = -v142;
  v146 = *((unsigned __int16 *)v143 + 28);
  if (v146)
  {
    v147 = (int *)((char *)v43 + v146 + *(unsigned int *)((char *)v43 + v146));
    if (*v147)
    {
      *(_BYTE *)(a1 + 960) = 1;
      v148 = (_DWORD *)((char *)v147 + v147[1] + 4);
      v149 = (unsigned __int16 *)((char *)v148 - *v148);
      if (*v149 >= 9u && (v150 = v149[4]) != 0)
        v151 = *(int *)((char *)v148 + v150);
      else
        v151 = 0;
      *(_DWORD *)(a1 + 1160) = v151;
      *(_BYTE *)(a1 + 1164) = 1;
      v152 = *v43;
      v145 = -v152;
      v144 = *(unsigned __int16 *)((char *)v43 - v152);
    }
  }
  if (v144 < 0x3B)
    goto LABEL_262;
  v153 = (char *)v43 + v145;
  if (*((_WORD *)v153 + 29))
  {
    v154 = (unsigned int *)((char *)v43
                          + *((unsigned __int16 *)v153 + 29)
                          + *(unsigned int *)((char *)v43 + *((unsigned __int16 *)v153 + 29)));
    v155 = *v154;
    if ((_DWORD)v155)
    {
      v156 = v154 + 1;
      do
      {
        v158 = *v156++;
        v157 = v158;
        if (!(v158 >> 20))
          *(_QWORD *)(a1 + 952) |= 1 << v157;
        --v155;
      }
      while (v155);
    }
  }
  if (v144 < 0x57)
  {
LABEL_262:
    LODWORD(v159) = 0;
  }
  else
  {
    v159 = *((unsigned __int16 *)v153 + 43);
    if (*((_WORD *)v153 + 43))
      LODWORD(v159) = *(int *)((char *)v43 + v159);
  }
  *(_DWORD *)(a1 + 324) = v159;
  v160 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v160 >= 0x21u && (v161 = v160[16]) != 0)
    v162 = *(int *)((char *)v43 + v161);
  else
    v162 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 328) = getAdditionalSpillBufferBytes(void)::extra + v162;
  v164 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v164 < 0x59u)
  {
    LODWORD(v165) = 0;
  }
  else
  {
    v165 = v164[44];
    if (v165)
      LODWORD(v165) = *(int *)((char *)v43 + v165);
  }
  *(_DWORD *)(a1 + 356) = v165;
  v166 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v166 < 0x51u)
  {
    LODWORD(v167) = 0;
  }
  else
  {
    v167 = v166[40];
    if (v167)
      LODWORD(v167) = *(int *)((char *)v43 + v167);
  }
  *(_DWORD *)(a1 + 360) = v167;
  v168 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v168 < 0x4Bu)
  {
    LODWORD(v169) = 0;
  }
  else
  {
    v169 = v168[37];
    if (v169)
      LODWORD(v169) = *(int *)((char *)v43 + v169);
  }
  *(_DWORD *)(a1 + 368) = v169;
  v170 = *v43;
  v171 = (_WORD *)((char *)v43 - v170);
  v172 = *(unsigned __int16 *)((char *)v43 - v170);
  if (v172 < 0x25)
    goto LABEL_290;
  if (v171[18] && *((_BYTE *)v43 + (unsigned __int16)v171[18]))
  {
    if (v172 < 0x27)
    {
      v176 = 0;
      v174 = 1;
      goto LABEL_292;
    }
    LODWORD(v173) = (unsigned __int16)v171[19];
    v174 = 1;
    if (!v171[19])
      goto LABEL_291;
    goto LABEL_523;
  }
  if (v172 < 0x27)
  {
LABEL_290:
    v174 = 0;
    goto LABEL_291;
  }
  v173 = (unsigned __int16)v171[19];
  if (!v171[19] || (v175 = *((unsigned __int8 *)v43 + v173), !*((_BYTE *)v43 + v173)))
  {
    if (v172 >= 0x29 && v171[20])
    {
      v174 = *((_BYTE *)v43 + (unsigned __int16)v171[20]) != 0;
      if (!v171[19])
        goto LABEL_291;
      goto LABEL_523;
    }
    v174 = 0;
    if (v171[19])
    {
LABEL_523:
      v175 = *((unsigned __int8 *)v43 + v173);
      goto LABEL_524;
    }
LABEL_291:
    v176 = 0;
    goto LABEL_292;
  }
  v174 = 1;
LABEL_524:
  v176 = v175 != 0;
LABEL_292:
  *(_BYTE *)(a1 + 378) = v176;
  v177 = (unsigned __int16 *)((char *)v20 - *v20);
  v178 = *v177;
  if (v178 < 0x21)
  {
    v180 = 0;
    LODWORD(v179) = 0;
  }
  else
  {
    v179 = v177[16];
    if (v177[16])
      LODWORD(v179) = *(int *)((char *)v20 + v179);
    if (v178 < 0x4D)
    {
      v180 = 0;
    }
    else
    {
      v180 = v177[38];
      if (v177[38])
        v180 = *(unsigned int *)((char *)v20 + v180);
    }
  }
  *(_QWORD *)(a1 + 408) = v179 | (unint64_t)(v180 << 32);
  *(_BYTE *)(a1 + 382) = v174 || v176;
  if (v172 < 0x37)
  {
    LOBYTE(v181) = 0;
  }
  else
  {
    v181 = (unsigned __int16)v171[27];
    if (v171[27])
      LOBYTE(v181) = *((_BYTE *)v43 + v181) != 0;
  }
  *(_BYTE *)(a1 + 377) = v181;
  if (v178 < 0x33)
  {
    LOBYTE(v182) = 0;
  }
  else
  {
    v182 = v177[25];
    if (v177[25])
      LOBYTE(v182) = *((_BYTE *)v20 + v182) != 0;
  }
  v183 = -v170;
  *(_BYTE *)(a1 + 383) = v182;
  if (v172 < 0x3F)
  {
    LOBYTE(v184) = 0;
  }
  else
  {
    v184 = (unsigned __int16)v171[31];
    if (v184)
    {
      v185 = (unsigned int *)((char *)v43 + v184 + *(unsigned int *)((char *)v43 + v184));
      v184 = *v185;
      if ((_DWORD)v184)
      {
        v186 = v185 + 1;
        while (1)
        {
          v188 = *v186++;
          v187 = v188;
          if (v188 < 0x36 && ((0x3F000000000777uLL >> v187) & 1) != 0)
            break;
          if (!--v184)
            goto LABEL_317;
        }
        LOBYTE(v184) = 1;
      }
    }
  }
LABEL_317:
  *(_BYTE *)(a1 + 385) = v184;
  if (v178 <= 0x14)
  {
    *(_BYTE *)(a1 + 379) = 0;
    *(_BYTE *)(a1 + 1041) = 0;
    *(_BYTE *)(a1 + 1043) = 0;
    if (v172 < 0x21)
      goto LABEL_325;
    goto LABEL_352;
  }
  v189 = v177[10];
  if (v177[10])
    LOBYTE(v189) = *((_BYTE *)v20 + v189) != 0;
  *(_BYTE *)(a1 + 379) = v189;
  if (v178 < 0x25)
  {
    *(_BYTE *)(a1 + 1041) = 0;
    if (v178 < 0x23)
    {
LABEL_350:
      *(_BYTE *)(a1 + 1043) = 0;
LABEL_351:
      if (v172 < 0x21)
        goto LABEL_325;
      goto LABEL_352;
    }
  }
  else
  {
    v190 = v177[18];
    if (v177[18])
      LOBYTE(v190) = *((_BYTE *)v20 + v190) != 0;
    *(_BYTE *)(a1 + 1041) = v190;
  }
  v193 = v177[17];
  if (!v177[17])
    goto LABEL_350;
  *(_BYTE *)(a1 + 1043) = 1;
  v194 = (unsigned int *)((char *)v20 + v193);
  v195 = *v194;
  v197 = (unsigned int *)((char *)v194 + v195 + 4);
  v196 = *(unsigned int *)((char *)v194 + v195);
  if (!(_DWORD)v196)
    goto LABEL_351;
  v198 = &v197[v196];
  do
  {
    v199 = (int *)((char *)v197 + *v197);
    v200 = (unsigned __int16 *)((char *)v199 - *v199);
    v201 = *v200;
    if (v201 < 7)
    {
      v202 = 0;
      v204 = 0;
      if (v201 < 5)
        goto LABEL_339;
      v203 = v200[2];
      if (v203)
        goto LABEL_338;
    }
    else if (v200[3])
    {
      v202 = *(int *)((char *)v199 + v200[3]);
      v203 = v200[2];
      if (v203)
        goto LABEL_338;
    }
    else
    {
      v202 = 0;
      v203 = v200[2];
      if (v203)
      {
LABEL_338:
        v204 = *(int *)((char *)v199 + v203);
        goto LABEL_339;
      }
    }
    v204 = 0;
LABEL_339:
    v205 = (uint64_t **)(a1 + 1056);
    while (1)
    {
      v206 = *v205;
      v207 = v205;
      if (!*v205)
        break;
      while (1)
      {
        v205 = (uint64_t **)v206;
        v208 = *((_DWORD *)v206 + 7);
        if (v204 < v208)
          break;
        if (v208 >= v204)
        {
          v209 = v205;
          goto LABEL_331;
        }
        v206 = v205[1];
        if (!v206)
        {
          v207 = v205 + 1;
          goto LABEL_345;
        }
      }
    }
LABEL_345:
    v209 = operator new(0x28uLL);
    v209[7] = v204;
    v209[8] = 0;
    *(_QWORD *)v209 = 0;
    *((_QWORD *)v209 + 1) = 0;
    *((_QWORD *)v209 + 2) = v205;
    *v207 = (uint64_t *)v209;
    v210 = **(_QWORD **)(a1 + 1048);
    v211 = (uint64_t *)v209;
    if (v210)
    {
      *(_QWORD *)(a1 + 1048) = v210;
      v211 = *v207;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1056), v211);
    ++*(_QWORD *)(a1 + 1064);
LABEL_331:
    v20 = v336;
    v209[8] = v202;
    ++v197;
    v79 = (const void **)a3;
  }
  while (v197 != v198);
  v324 = *v337;
  v183 = -v324;
  v84 = (_QWORD *)(a1 + 432);
  if (*(unsigned __int16 *)((char *)v337 - v324) < 0x21u)
  {
LABEL_325:
    v191 = 0;
    v192 = v337;
    goto LABEL_355;
  }
LABEL_352:
  v192 = v337;
  if (*(_WORD *)((char *)v337 + v183 + 32))
    v191 = *(int *)((char *)v337 + *(unsigned __int16 *)((char *)v337 + v183 + 32));
  else
    v191 = 0;
LABEL_355:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  v213 = getAdditionalSpillBufferBytes(void)::extra + v191;
  *(_DWORD *)(a1 + 320) = getAdditionalSpillBufferBytes(void)::extra + v191;
  v214 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*v214 < 0x43u)
  {
    LODWORD(v215) = 0;
  }
  else
  {
    v215 = v214[33];
    if (v215)
      LODWORD(v215) = *(int *)((char *)v192 + v215);
  }
  *(_DWORD *)(a1 + 332) = v215;
  v216 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*v216 < 5u)
  {
    LODWORD(v217) = 0;
  }
  else
  {
    v217 = v216[2];
    if (v217)
      LODWORD(v217) = *(int *)((char *)v192 + v217);
  }
  *(_DWORD *)(a1 + 316) = v217;
  v218 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*v218 < 0x51u)
  {
    LODWORD(v219) = 0;
  }
  else
  {
    v219 = v218[40];
    if (v219)
      LODWORD(v219) = *(int *)((char *)v192 + v219);
  }
  *(_DWORD *)(a1 + 352) = v219;
  v220 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*v220 < 0x4Fu)
  {
    LODWORD(v221) = 0;
  }
  else
  {
    v221 = v220[39];
    if (v221)
      LODWORD(v221) = *(int *)((char *)v192 + v221);
  }
  *(_DWORD *)(a1 + 364) = v221;
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a5 + 428);
  v222 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*(int *)((char *)v192 + v222[6] + *(unsigned int *)((char *)v192 + v222[6])) | v213)
    v223 = 1;
  else
    v223 = v174;
  if ((v223 & 1) != 0)
    goto LABEL_387;
  v224 = *v222;
  if (v224 < 0x21)
  {
    v225 = 0;
  }
  else if (v222[16])
  {
    v225 = *(int *)((char *)v192 + v222[16]);
    if (v224 >= 0x43)
    {
LABEL_516:
      if (v222[33])
      {
        v226 = *(int *)((char *)v192 + v222[33]);
        goto LABEL_382;
      }
    }
  }
  else
  {
    v225 = 0;
    if (v224 >= 0x43)
      goto LABEL_516;
  }
  v226 = 0;
LABEL_382:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  if (v226 + v225 + getAdditionalSpillBufferBytes(void)::extra)
  {
LABEL_387:
    LOBYTE(v229) = 1;
  }
  else
  {
    v228 = (unsigned __int16 *)((char *)v337 - *v337);
    if (*v228 < 0x5Fu)
    {
      LOBYTE(v229) = 0;
    }
    else
    {
      v229 = v228[47];
      if (v229)
        LOBYTE(v229) = *((_BYTE *)v337 + v229) != 0;
    }
  }
  *(_BYTE *)(a1 + 376) = v229;
  v230 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v230 < 0x11u)
  {
    LODWORD(v231) = 0;
  }
  else
  {
    v231 = v230[8];
    if (v231)
      LODWORD(v231) = *(int *)((char *)v20 + v231);
  }
  *(_DWORD *)(a1 + 864) = v231;
  if ((v232 & 1) == 0
  {
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
  }
  v233 = a2 + 4512;
  v234 = (_OWORD *)(a1 + 720);
  v235 = v79 + 3;
  if (v79[3])
  {
    if (v79[4])
      v236 = v79 + 3;
    else
      v236 = v79 + 73;
  }
  else
  {
    v236 = v79 + 73;
  }
  v237 = v236[1]
       + AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space;
  v238 = 168;
  if (a6)
    v238 = 504;
  v239 = v233 + v238;
  AGX::Heap<true>::allocateImpl(__dst, v233 + v238, v237, (_QWORD *)(a1 + 920));
  *(_DWORD *)(a1 + 944) += *(_DWORD *)&__dst[16];
  v240 = *(_OWORD *)&__dst[16];
  *v234 = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 736) = v240;
  *(_OWORD *)(a1 + 745) = *(_OWORD *)&__dst[25];
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 544) = v239;
  v241 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(a1 + 552) = *v234;
  *(_OWORD *)(a1 + 568) = v241;
  *(_OWORD *)(a1 + 577) = *(_OWORD *)(a1 + 745);
  if (*v235)
  {
    v242 = v79[4];
    if (v242)
      v243 = *v235;
    else
      v243 = v79[73];
    if (v242)
      v244 = v79 + 3;
    else
      v244 = v79 + 73;
  }
  else
  {
    v244 = v79 + 73;
    v243 = v79[73];
  }
  memcpy(*(void **)(a1 + 728), v243, v244[1]);
  v245 = *(_QWORD *)(a1 + 728);
  v246 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 528) = v245;
  *(_QWORD *)(a1 + 536) = v246;
  v247 = v79 + 8;
  if (v79[8])
  {
    if (v79[9])
      v248 = v79 + 8;
    else
      v248 = v79 + 78;
    v249 = v248[1];
    if (!v249)
      goto LABEL_424;
  }
  else
  {
    v249 = (uint64_t)v79[79];
    if (!v249)
      goto LABEL_424;
  }
  AGX::Heap<true>::allocateImpl(__dst, v233, v249, (_QWORD *)(a1 + 928));
  *(_DWORD *)(a1 + 944) += *(_DWORD *)&__dst[16];
  v250 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 768) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 784) = v250;
  *(_OWORD *)(a1 + 793) = *(_OWORD *)&__dst[25];
  v251 = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a1 + 616) = v251;
  *(_OWORD *)(a1 + 625) = *(_OWORD *)(a1 + 793);
  if (*v247)
  {
    v252 = v79[9];
    if (v252)
      v253 = *v247;
    else
      v253 = v79[78];
    if (v252)
      v254 = v79 + 8;
    else
      v254 = v79 + 78;
  }
  else
  {
    v254 = v79 + 78;
    v253 = v79[78];
  }
  memcpy(*(void **)(a1 + 776), v253, v254[1]);
LABEL_424:
  v255 = v79 + 13;
  if (v79[13])
  {
    if (v79[14])
      v256 = v79 + 13;
    else
      v256 = v79 + 83;
    v257 = v256[1];
    if (v257)
      goto LABEL_429;
LABEL_437:
    if (!*(_BYTE *)(a1 + 504))
      goto LABEL_441;
LABEL_442:
    {
      {
        v265 = v84;
        if (*(char *)(a1 + 455) < 0)
          v265 = (_QWORD *)*v84;
        v266 = a1 + 480;
        if (*(char *)(a1 + 503) < 0)
          v266 = v329->__r_.__value_.__r.__words[0];
        v267 = a1 + 456;
        if (*(char *)(a1 + 479) < 0)
          v267 = *v330;
        v268 = *(_DWORD *)(a1 + 416);
        v269 = *(_QWORD *)(a1 + 512);
        v270 = *(_QWORD *)(a1 + 736);
        *(_DWORD *)__dst = 136447490;
        *(_QWORD *)&__dst[4] = v265;
        *(_WORD *)&__dst[12] = 2082;
        *(_QWORD *)&__dst[14] = v266;
        *(_WORD *)&__dst[22] = 2082;
        *(_QWORD *)&__dst[24] = v267;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v268;
        *(_WORD *)&__dst[38] = 2050;
        *(_QWORD *)&__dst[40] = v269;
        v339 = 2050;
        v340 = v270;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v264, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    v271 = v84;
    if (*(char *)(a1 + 455) < 0)
      v271 = (_QWORD *)*v84;
    v272 = *(_QWORD *)(a1 + 32);
    v273 = a1 + 480;
    if (*(char *)(a1 + 503) < 0)
      v273 = v329->__r_.__value_.__r.__words[0];
    v274 = a1 + 456;
    if (*(char *)(a1 + 479) < 0)
      v274 = *v330;
    v275 = *(_DWORD *)(a1 + 416);
    v276 = *(_QWORD *)(a1 + 512);
    v277 = *(_QWORD *)(a1 + 736);
    v278 = *(_BYTE *)(a1 + 504);
    *(_QWORD *)__dst = v271;
    *(_QWORD *)&__dst[8] = v273;
    *(_QWORD *)&__dst[16] = v274;
    *(_DWORD *)&__dst[24] = v275;
    *(_QWORD *)&__dst[32] = v276;
    *(_QWORD *)&__dst[40] = v277;
    LOBYTE(v339) = v278;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v272, a1, (__int128 *)__dst);
  }
  else
  {
    v257 = (uint64_t)v79[84];
    if (!v257)
      goto LABEL_437;
LABEL_429:
    AGX::Heap<true>::allocateImpl(__dst, v233, v257, (_QWORD *)(a1 + 936));
    *(_DWORD *)(a1 + 944) += *(_DWORD *)&__dst[16];
    v258 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 816) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 832) = v258;
    *(_OWORD *)(a1 + 841) = *(_OWORD *)&__dst[25];
    v259 = *(_OWORD *)(a1 + 832);
    *(_OWORD *)(a1 + 648) = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a1 + 664) = v259;
    *(_OWORD *)(a1 + 673) = *(_OWORD *)(a1 + 841);
    if (*v255)
    {
      v260 = v79[14];
      if (v260)
        v261 = *v255;
      else
        v261 = v79[83];
      if (v260)
        v262 = v79 + 13;
      else
        v262 = v79 + 83;
    }
    else
    {
      v262 = v79 + 83;
      v261 = v79[83];
    }
    memcpy(*(void **)(a1 + 824), v261, v262[1]);
    v263 = *(_QWORD *)(a1 + 832);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a1 + 816);
    *(_QWORD *)(a1 + 712) = v263;
    if (*(_BYTE *)(a1 + 504))
      goto LABEL_442;
LABEL_441:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 6681))
      goto LABEL_442;
  }
  v279 = (ProgramBindingsAndDMAList *)operator new();
  ProgramBindingsAndDMAList::ProgramBindingsAndDMAList(v279, (const AGCDeserializedReply *)v79, *(unsigned __int8 *)(a1 + 1042));
  *v326 = v279;
  v280 = operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v280, a5);
  *(_QWORD *)(a1 + 24) = v280;
  v281 = *(unsigned __int16 *)((char *)v337 - *v337 + 24);
  v282 = *(unsigned int *)((char *)v337 + v281);
  v283 = (unsigned int *)((char *)v337 + v281 + v282);
  v284 = *v283;
  if ((_DWORD)v284)
  {
    v285 = 0;
    v286 = 4 * v284;
    v287 = (char *)v337 + v281 + v282;
    do
    {
      v288 = v283[v285 / 4 + 1];
      v289 = v288 - *(int *)((char *)&v283[v285 / 4 + 1] + v288);
      v290 = &v287[v285 + v289];
      v291 = *((unsigned __int16 *)v290 + 2);
      if (v291 >= 5)
      {
        v292 = *((unsigned __int16 *)v290 + 4);
        if (v292)
        {
          if (v291 >= 7 && v287[v285 + 4 + v288 + v292] == 139)
          {
            if (*(_WORD *)&v287[v285 + 10 + v289])
            {
              v293 = *(_DWORD *)&v287[v285 + 4 + v288 + *(unsigned __int16 *)&v287[v285 + 10 + v289]];
              if (v291 >= 0xB)
                goto LABEL_470;
            }
            else
            {
              LOBYTE(v293) = 0;
              if (v291 >= 0xB)
              {
LABEL_470:
                v294 = *(unsigned __int16 *)&v287[v285 + 14 + v289];
                if (v294 && v287[v285 + 4 + v288 + v294])
                  *v325 |= 1 << v293;
              }
            }
          }
        }
      }
      v285 += 4;
    }
    while (v286 != v285);
  }
  v295 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v295 >= 0xDu)
  {
    v296 = v295[6];
    if (v296)
    {
      v297 = (int *)((char *)v20 + v296 + *(unsigned int *)((char *)v20 + v296));
      v298 = *v297;
      v299 = *(_BYTE **)(a1 + 968);
      if (v298 > (uint64_t)(*(_QWORD *)(a1 + 984) - (_QWORD)v299) >> 4)
      {
        v300 = *(_BYTE **)(a1 + 976);
        v301 = (char *)operator new(16 * v298);
        v302 = &v301[(v300 - v299) & 0xFFFFFFFFFFFFFFF0];
        v303 = v302;
        if (v300 != v299)
        {
          v304 = &v301[(v300 - v299) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v303 = v304 - 16;
            *((_OWORD *)v304 - 1) = *((_OWORD *)v300 - 1);
            v300 -= 16;
            v304 -= 16;
          }
          while (v300 != v299);
        }
        *(_QWORD *)(a1 + 968) = v303;
        *(_QWORD *)(a1 + 976) = v302;
        *(_QWORD *)(a1 + 984) = &v301[16 * v298];
        if (v299)
          operator delete(v299);
      }
      v305 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v305 >= 0x41u && (v306 = v305[32]) != 0)
      {
        v307 = (int *)((char *)v20 + v306 + *(unsigned int *)((char *)v20 + v306));
        if (!*v297)
          goto LABEL_510;
LABEL_486:
        v308 = 0;
        v309 = v297 + 1;
        do
        {
          if (v307 && *v307)
            v311 = *(_QWORD *)&v307[2 * v308 + 1];
          else
            v311 = 0;
          v312 = *(_QWORD *)&v309[2 * v308];
          v313 = *(_QWORD **)(a1 + 976);
          v314 = *(_QWORD *)(a1 + 984);
          if ((unint64_t)v313 < v314)
          {
            *v313 = v312;
            v313[1] = v311;
            v310 = v313 + 2;
          }
          else
          {
            v315 = (_QWORD *)*v332;
            v316 = ((uint64_t)v313 - *v332) >> 4;
            v317 = v316 + 1;
            if ((unint64_t)(v316 + 1) >> 60)
              abort();
            v318 = v314 - (_QWORD)v315;
            if (v318 >> 3 > v317)
              v317 = v318 >> 3;
            if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF0)
              v319 = 0xFFFFFFFFFFFFFFFLL;
            else
              v319 = v317;
            if (v319)
            {
              if (v319 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v320 = (char *)operator new(16 * v319);
            }
            else
            {
              v320 = 0;
            }
            v321 = &v320[16 * v316];
            *(_QWORD *)v321 = v312;
            *((_QWORD *)v321 + 1) = v311;
            v322 = v321;
            if (v313 != v315)
            {
              do
              {
                *((_OWORD *)v322 - 1) = *((_OWORD *)v313 - 1);
                v322 -= 16;
                v313 -= 2;
              }
              while (v313 != v315);
              v313 = (_QWORD *)*v332;
            }
            *(_QWORD *)(a1 + 968) = v322;
            v310 = v321 + 16;
            *(_QWORD *)(a1 + 976) = v321 + 16;
            *(_QWORD *)(a1 + 984) = &v320[16 * v319];
            if (v313)
              operator delete(v313);
            v309 = v297 + 1;
          }
          *(_QWORD *)(a1 + 976) = v310;
          ++v308;
        }
        while (v308 < *v297);
      }
      else
      {
        v307 = 0;
        if (*v297)
          goto LABEL_486;
      }
    }
  }
LABEL_510:
  *(_BYTE *)(a1 + 868) = 0;
  return a1;
}

void sub_232CAEB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, char *a10, _QWORD *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CompileStatistics *a19, void **a20,uint64_t a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  CompileStatistics::~CompileStatistics(a19);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v27 + 1056));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v27 + 1016));
  v29 = *(void **)(v27 + 992);
  if (v29)
  {
    *(_QWORD *)(v27 + 1000) = v29;
    operator delete(v29);
  }
  v30 = *a27;
  if (*a27)
  {
    *(_QWORD *)(v27 + 976) = v30;
    operator delete(v30);
  }
  if (*a10 < 0)
  {
    operator delete(*a9);
    if ((*(char *)(v27 + 503) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*(char *)(v27 + 503) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v27 + 479) < 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*a22);
  if (*(char *)(v27 + 479) < 0)
  {
LABEL_8:
    operator delete(*a23);
    if ((*(char *)(v27 + 455) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v27 + 296));
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a11);
      v31 = *(void **)(v27 + 192);
      if (v31)
      {
        *(_QWORD *)(v27 + 200) = v31;
        operator delete(v31);
        v32 = *(void **)(v27 + 168);
        if (!v32)
        {
LABEL_16:
          v33 = *(void **)(v27 + 144);
          if (!v33)
            goto LABEL_17;
          goto LABEL_25;
        }
      }
      else
      {
        v32 = *(void **)(v27 + 168);
        if (!v32)
          goto LABEL_16;
      }
      *(_QWORD *)(v27 + 176) = v32;
      operator delete(v32);
      v33 = *(void **)(v27 + 144);
      if (!v33)
      {
LABEL_17:
        v34 = *(void **)(v27 + 120);
        if (!v34)
          goto LABEL_18;
        goto LABEL_26;
      }
LABEL_25:
      *(_QWORD *)(v27 + 152) = v33;
      operator delete(v33);
      v34 = *(void **)(v27 + 120);
      if (!v34)
      {
LABEL_18:
        v35 = *(void **)(v27 + 96);
        if (!v35)
          goto LABEL_20;
        goto LABEL_19;
      }
LABEL_26:
      *(_QWORD *)(v27 + 128) = v34;
      operator delete(v34);
      v35 = *(void **)(v27 + 96);
      if (!v35)
      {
LABEL_20:
        v36 = *a12;
        if (*a12)
        {
          *(_QWORD *)(v27 + 80) = v36;
          operator delete(v36);
        }
        _Unwind_Resume(a1);
      }
LABEL_19:
      *(_QWORD *)(v27 + 104) = v35;
      operator delete(v35);
      goto LABEL_20;
    }
LABEL_13:
    operator delete(*a20);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v27 + 455) & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

std::vector<unsigned int> *AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(std::vector<unsigned int> *this, uint64_t **a2, uint64_t a3)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int> *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  std::vector<unsigned int>::pointer v23;
  uint64_t *i;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  std::vector<unsigned int>::pointer v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t **p_end;
  char *v40;
  uint64_t **v41;
  unsigned int v42;
  char *v43;
  unsigned int *v44;
  uint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  std::vector<unsigned int>::pointer v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  std::vector<unsigned int>::pointer v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  std::vector<unsigned int>::pointer v65;
  int v66;
  int value;
  unint64_t v68;
  std::vector<unsigned int>::pointer v69;
  unint64_t v70;
  std::vector<unsigned int> *result;
  uint64_t **j;

  v7 = this + 3;
  begin = this[3].__begin_;
  v8 = *(_DWORD *)(a3 + 124);
  v9 = *(_DWORD *)(a3 + 132);
  v10 = *(_DWORD *)(a3 + 144);
  if (*(_BYTE *)(a3 + 184))
    v11 = *(_DWORD *)(a3 + 144);
  else
    v11 = 0;
  v12 = *(_DWORD *)(a3 + 140);
  if (!*(_QWORD *)(a3 + 168))
    v10 = 0;
  v13 = *(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128) + *(_DWORD *)(a3 + 136);
  v14 = v11 + *(_DWORD *)(a3 + 148) + v10 + *(_DWORD *)(a3 + 152) + ((v8 + v9 + v12 - v13 + 1) & 0xFFFFFFFE);
  v15 = this[3].__end_ - begin;
  if (v14 <= v15)
  {
    if (v14 < v15)
      this[3].__end_ = &begin[v14];
  }
  else
  {
    std::vector<unsigned int>::__append(this + 3, v14 - v15);
    v8 = *(_DWORD *)(a3 + 124);
    v9 = *(_DWORD *)(a3 + 132);
    v12 = *(_DWORD *)(a3 + 140);
    v13 = *(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128) + *(_DWORD *)(a3 + 136);
  }
  LODWORD(this[14].__begin_) = v8 + v9 + v12 - v13;
  v16 = *a2;
  v17 = a2[1];
  if (*a2 != v17)
  {
    do
    {
      v18 = *v16;
      v19 = *(_DWORD *)(*v16 + 4);
      if ((v19 & 0x80000000) == 0)
      {
        v20 = ((*(_DWORD *)(v18 + 8) >> 1) & 0x1FFFFFFF) - *(_DWORD *)(a3 + 120);
        v21 = *(_DWORD *)v18 == 6 ? 31 : 0;
        v22 = (24 * (v21 + (v19 & 0xFFFFFu)) + 1544) >> 3;
        v23 = v7->__begin_;
        v7->__begin_[v20] = v22;
        v23[v20 + 1] = v22 + 1;
        v23[v20 + 2] = v22 + 2;
        if (*(_BYTE *)(v18 + 12))
          this[16].__end_cap_.__value_ = (unsigned int *)((uint64_t)this[16].__end_cap_.__value_ | (1 << *(_DWORD *)(v18 + 4)));
      }
      ++v16;
    }
    while (v16 != v17);
  }
  if (BYTE2(this[15].__end_cap_.__value_))
  {
    for (i = a2[9]; i != a2[10]; ++i)
    {
      if (*(_DWORD *)*i == 93)
      {
        v25 = *(_DWORD *)(*i + 4);
        if ((v25 & 0x80000000) == 0 && (v25 & 0xFFF00000) != 0x400000)
        {
          this[16].__end_cap_.__value_ = (unsigned int *)((uint64_t)this[16].__end_cap_.__value_ | (uint64_t)this[17].__begin_);
          break;
        }
      }
    }
  }
  v26 = a2[3];
  v27 = a2[4];
  while (v26 != v27)
  {
    v28 = *(_DWORD *)(*v26 + 4);
    if ((v28 & 0x80000000) == 0)
      v7->__begin_[((*(_DWORD *)(*v26 + 8) >> 1) & 0x1FFFFFFF)
                 + *(_DWORD *)(a3 + 124)
                 - (*(_DWORD *)(a3 + 120)
                  + *(_DWORD *)(a3 + 128))] = (v28 & 0xFFFFF) + 379;
    ++v26;
  }
  v29 = a2[6];
  v30 = a2[7];
  for (j = a2; v29 != v30; ++v29)
  {
    v31 = *v29;
    v32 = *(_DWORD *)(*v29 + 4);
    if ((v32 & 0x80000000) == 0)
    {
      v33 = ((*(_DWORD *)(v31 + 8) >> 1) & 0x1FFFFFFF)
          + *(_DWORD *)(a3 + 124)
          + *(_DWORD *)(a3 + 132)
          - (*(_DWORD *)(a3 + 120)
           + *(_DWORD *)(a3 + 128)
           + *(_DWORD *)(a3 + 136));
      v34 = v32 & 0xFFFFF;
      v7->__begin_[v33] = v34 + 65;
      if (*(_BYTE *)(v31 + 12))
        this[16].__end_ = (std::vector<unsigned int>::pointer)((uint64_t)this[16].__end_ | (1 << v34));
      if (BYTE3(this[43].__end_))
      {
        v35 = this[44].__begin_;
        if (!v35)
LABEL_98:
          abort();
        v36 = (2 * v33) | 1;
        while (1)
        {
          while (1)
          {
            v37 = v35[7];
            if (v34 >= v37)
              break;
            v35 = *(std::vector<unsigned int>::pointer *)v35;
            if (!v35)
              goto LABEL_98;
          }
          if (v37 >= v34)
            break;
          v35 = (std::vector<unsigned int>::pointer)*((_QWORD *)v35 + 1);
          if (!v35)
            goto LABEL_98;
        }
        v38 = v35[8];
        p_end = (uint64_t **)&this[12].__end_;
        while (1)
        {
          v40 = (char *)*p_end;
          v41 = p_end;
          if (!*p_end)
            break;
          while (1)
          {
            p_end = (uint64_t **)v40;
            v42 = *((_DWORD *)v40 + 7);
            if (v36 < v42)
              break;
            if (v42 >= v36)
              goto LABEL_35;
            v40 = (char *)p_end[1];
            if (!v40)
            {
              v41 = p_end + 1;
              goto LABEL_54;
            }
          }
        }
LABEL_54:
        v43 = (char *)p_end;
        p_end = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)p_end + 7) = v36;
        *((_DWORD *)p_end + 8) = 0;
        *p_end = 0;
        p_end[1] = 0;
        p_end[2] = (uint64_t *)v43;
        *v41 = (uint64_t *)p_end;
        v44 = *(unsigned int **)this[12].__begin_;
        v45 = (uint64_t *)p_end;
        if (v44)
        {
          this[12].__begin_ = v44;
          v45 = *v41;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)this[12].__end_, v45);
        ++this[12].__end_cap_.__value_;
LABEL_35:
        *((_DWORD *)p_end + 8) = v38;
      }
    }
  }
  v46 = *(_QWORD *)(a3 + 160);
  if (v46)
  {
    v47 = *(_DWORD *)(a3 + 144);
    if (*(_BYTE *)(a3 + 184))
    {
      if (v47)
      {
        v48 = (*(_DWORD *)(a3 + 124)
             + *(_DWORD *)(a3 + 132)
             + *(_DWORD *)(a3 + 140)
             - (*(_DWORD *)(a3 + 120)
              + *(_DWORD *)(a3 + 128)
              + *(_DWORD *)(a3 + 136))
             + 1) & 0xFFFFFFFE;
        v49 = v7->__begin_;
        v50 = *(_QWORD *)(a3 + 160);
        do
        {
          v51 = __clz(__rbit64(v50));
          v52 = 1 << v51;
          v53 = (24 * v51 + 1544) >> 3;
          v49[v48] = v53;
          v49[v48 + 1] = v53 + 1;
          v49[v48 + 2] = v53 + 2;
          v48 += 4;
          v50 &= ~v52;
        }
        while (v50);
        v47 = *(_DWORD *)(a3 + 144);
        v54 = v47;
        v55 = *(_QWORD *)(a3 + 168);
        if (!v55)
          goto LABEL_69;
LABEL_64:
        if (v47)
        {
          v56 = ((*(_DWORD *)(a3 + 140)
                + *(_DWORD *)(a3 + 132)
                - (*(_DWORD *)(a3 + 136)
                 + *(_DWORD *)(a3 + 128)
                 + *(_DWORD *)(a3 + 120))
                + *(_DWORD *)(a3 + 124)
                + 1) & 0xFFFFFFFE)
              + v54;
          v57 = v7->__begin_;
          do
          {
            v58 = __clz(__rbit64(v46));
            v59 = 1 << v58;
            v60 = (24 * v58 + 2288) >> 3;
            v57[v56] = v60;
            v57[v56 + 1] = v60 + 1;
            v57[v56 + 2] = v60 + 2;
            v56 += 4;
            v46 &= ~v59;
          }
          while (v46);
        }
        goto LABEL_69;
      }
      v55 = *(_QWORD *)(a3 + 168);
    }
    else
    {
      v54 = 0;
      v55 = *(_QWORD *)(a3 + 168);
      if (v55)
        goto LABEL_64;
    }
LABEL_69:
    this[16].__end_cap_.__value_ = (unsigned int *)((uint64_t)this[16].__end_cap_.__value_ | v55);
  }
  if (*(_DWORD *)(a3 + 148))
  {
    v61 = *(_QWORD *)(a3 + 176);
    if (v61)
    {
      if (*(_BYTE *)(a3 + 184))
        v62 = *(_DWORD *)(a3 + 144);
      else
        v62 = 0;
      if (*(_QWORD *)(a3 + 168))
        v63 = *(_DWORD *)(a3 + 144);
      else
        v63 = 0;
      v64 = v62
          + v63
          + ((*(_DWORD *)(a3 + 124)
            + *(_DWORD *)(a3 + 132)
            + *(_DWORD *)(a3 + 140)
            - (*(_DWORD *)(a3 + 120)
             + *(_DWORD *)(a3 + 128)
             + *(_DWORD *)(a3 + 136))
            + 1) & 0xFFFFFFFE);
      v65 = v7->__begin_;
      do
      {
        v66 = __clz(__rbit64(v61));
        v65[v64++] = v66 + 379;
        v61 &= ~(1 << v66);
      }
      while (v61);
    }
  }
  if (*(_BYTE *)(a3 + 427))
  {
    value = 128 - 2 * __clz((unint64_t)j[13]);
    if (SLODWORD(this[9].__end_cap_.__value_) > value)
      value = (int)this[9].__end_cap_.__value_;
    LODWORD(this[9].__end_cap_.__value_) = value;
    v68 = ((unint64_t)*((unsigned int *)j + 24) + 3) >> 2;
    LODWORD(this[9].__end_) = v68;
    HIDWORD(this[9].__end_) = 130;
  }
  else
  {
    v68 = ((unint64_t)*((unsigned int *)j + 24) + 3) >> 2;
  }
  v69 = this[4].__begin_;
  v70 = this[4].__end_ - v69;
  if (v68 <= v70)
  {
    if (v68 < v70)
      this[4].__end_ = &v69[v68];
  }
  else
  {
    std::vector<unsigned int>::__append(this + 4, v68 - v70);
  }
  if (&this[5] != (std::vector<unsigned int> *)(a3 + 192))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(&this[5].__begin_, *(char **)(a3 + 192), *(char **)(a3 + 200), (uint64_t)(*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2);
  if (&this[7] != (std::vector<unsigned int> *)(a3 + 216))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(&this[7].__begin_, *(char **)(a3 + 216), *(char **)(a3 + 224), (uint64_t)(*(_QWORD *)(a3 + 224) - *(_QWORD *)(a3 + 216)) >> 2);
  if (&this[6] != (std::vector<unsigned int> *)(a3 + 296))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(&this[6].__begin_, *(char **)(a3 + 296), *(char **)(a3 + 304), (uint64_t)(*(_QWORD *)(a3 + 304) - *(_QWORD *)(a3 + 296)) >> 1);
  result = this + 8;
  if (&this[8] != (std::vector<unsigned int> *)(a3 + 344))
    result = (std::vector<unsigned int> *)std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(result, *(char **)(a3 + 344), *(char **)(a3 + 352), (uint64_t)(*(_QWORD *)(a3 + 352) - *(_QWORD *)(a3 + 344)) >> 1);
  LOBYTE(this[9].__begin_) = *(_BYTE *)(a3 + 392);
  BYTE4(this[15].__end_cap_.__value_) = *(_QWORD *)(a3 + 160) != 0;
  BYTE5(this[15].__end_cap_.__value_) = *(_QWORD *)(a3 + 148) != 0;
  return result;
}

uint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v3 = *(_QWORD *)(result + 264);
  v2 = *(_QWORD *)(result + 272);
  if (v2 == v3)
    v4 = 0;
  else
    v4 = *(_DWORD *)(result + 224) & 1;
  v5 = *(_QWORD *)(result + 104) - *(_QWORD *)(result + 96);
  v6 = (*(_QWORD *)(result + 80) - *(_QWORD *)(result + 72)) >> 2;
  v7 = 8 * (v6 + ((*(_QWORD *)(result + 128) - *(_QWORD *)(result + 120)) >> 2));
  v8 = (*(_DWORD *)(a2 + 124)
      + *(_DWORD *)(a2 + 132)
      + *(_DWORD *)(a2 + 140)
      - (*(_DWORD *)(a2 + 120)
       + *(_DWORD *)(a2 + 128)
       + *(_DWORD *)(a2 + 136))
      + 1) & 0xFFFFFFFE;
  *(_DWORD *)(result + 40) = ((*(_DWORD *)(result + 176)
                             - *(_DWORD *)(result + 168)
                             + ((v5
                               + 4
                               * (*(_DWORD *)(result + 236)
                                + *(_DWORD *)(result + 232)
                                + v4
                                + (((v2 - v3) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                           + v7;
  *(_DWORD *)(result + 44) = 8 * v8;
  v9 = *(unsigned __int8 *)(a2 + 184);
  v10 = *(_DWORD *)(a2 + 144);
  if (!*(_BYTE *)(a2 + 184))
    v10 = 0;
  *(_DWORD *)(result + 48) = 8 * (v10 + v8);
  *(_DWORD *)(result + 52) = 8 * v6;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v7 + (v5 & 0xFFFFFFFC);
  v11 = *(_DWORD *)(a2 + 144);
  if (v9)
    v12 = *(_DWORD *)(a2 + 144);
  else
    v12 = 0;
  v13 = *(_QWORD *)(a2 + 168);
  if (!v13)
    v11 = 0;
  *(_DWORD *)(result + 64) = 8 * (v12 + v11 + v8);
  v14 = *(_DWORD *)(a2 + 144);
  if (v13)
    v15 = *(_DWORD *)(a2 + 144);
  else
    v15 = 0;
  if (!v9)
    v14 = 0;
  v16 = *(_QWORD *)(a2 + 148);
  *(_DWORD *)(result + 68) = 8 * (v14 + v15 + v16 + v8);
  v17 = *(_DWORD *)(a2 + 144);
  if (v9)
    v18 = *(_DWORD *)(a2 + 144);
  else
    v18 = 0;
  if (!v13)
    v17 = 0;
  *(_DWORD *)(result + 340) = v18 + v17;
  *(_QWORD *)(result + 344) = v16;
  return result;
}

uint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::fixupMixedIndirectGathers(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  __int16 *v9;
  __int16 *i;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  __int16 *v42;
  __int16 *j;
  unint64_t v45;
  int v46[4];

  v4 = *(unsigned __int8 *)(a2 + 288);
  v5 = *(unsigned __int8 *)(a2 + 289);
  v6 = *(unsigned __int8 *)(a2 + 290);
  if (*(_BYTE *)(a2 + 288))
    v7 = 0;
  else
    v7 = v5 == 0;
  if (v7 && v6 == 0)
    goto LABEL_56;
  v9 = *(__int16 **)(a1 + 120);
  for (i = *(__int16 **)(a1 + 128); v9 != i; v9 += 2)
  {
    if (*v9 == -1)
    {
      *v9 = 63;
      v9[1] = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (unsigned __int16)v9[1]);
    }
  }
  v12 = *(_DWORD *)(a2 + 120);
  v11 = *(_DWORD *)(a2 + 124);
  if (v4)
    v13 = 1;
  else
    v13 = v11 - v12 + 1;
  v14 = *(_DWORD *)(a2 + 132) - *(_DWORD *)(a2 + 128);
  if (v5)
    v14 = 0;
  if (v6)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a2 + 140) - *(_DWORD *)(a2 + 136);
  v16 = *(_DWORD *)(a2 + 144);
  if (*(_BYTE *)(a2 + 184))
    v17 = *(_DWORD *)(a2 + 144);
  else
    v17 = 0;
  if (!*(_QWORD *)(a2 + 168))
    v16 = 0;
  v18 = (v14 + v13 + v15) & 0xFFFFFFFE;
  v19 = v17 + *(_DWORD *)(a2 + 148) + v16 + *(_DWORD *)(a2 + 152);
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v20 = v18 + v19;
  if (!(v18 + v19))
  {
    v21 = 0;
    v22 = *(char **)(a1 + 72);
    if (v4)
      goto LABEL_32;
LABEL_30:
    if (v11 != v12)
    {
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, v21, v22, &v22[4 * (v11 - v12)], (v11 - v12));
      v5 = *(unsigned __int8 *)(a2 + 289);
    }
    goto LABEL_32;
  }
  v21 = (char *)operator new(4 * v20);
  v45 = (unint64_t)v21;
  *(_QWORD *)v46 = v21;
  *(_QWORD *)&v46[2] = &v21[4 * v20];
  v22 = *(char **)(a1 + 72);
  if (!v4)
    goto LABEL_30;
LABEL_32:
  if (!v5)
  {
    v24 = *(_DWORD *)(a2 + 128);
    v23 = *(_DWORD *)(a2 + 132);
    if (v23 != v24)
    {
      v25 = &v22[4 * (*(_DWORD *)(a2 + 124) - *(_DWORD *)(a2 + 120))];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v25, &v25[4 * (v23 - v24)], (v23 - v24));
    }
  }
  if (!*(_BYTE *)(a2 + 290))
  {
    v27 = *(_DWORD *)(a2 + 136);
    v26 = *(_DWORD *)(a2 + 140);
    if (v26 != v27)
    {
      v28 = &v22[4 * (*(_DWORD *)(a2 + 124) - *(_DWORD *)(a2 + 120))
               + 4 * (*(_DWORD *)(a2 + 132) - *(_DWORD *)(a2 + 128))];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v28, &v28[4 * (v26 - v27)], (v26 - v27));
    }
  }
  v29 = *(unsigned int *)(a2 + 144);
  if (*(_BYTE *)(a2 + 184) && (_DWORD)v29)
  {
    v30 = &v22[4
             * ((*(_DWORD *)(a2 + 124)
               + *(_DWORD *)(a2 + 132)
               + *(_DWORD *)(a2 + 140)
               - (*(_DWORD *)(a2 + 120)
                + *(_DWORD *)(a2 + 128)
                + *(_DWORD *)(a2 + 136))
               + 1) & 0xFFFFFFFE)];
    std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v30, &v30[4 * v29], v29);
    LODWORD(v29) = *(_DWORD *)(a2 + 144);
  }
  if (*(_QWORD *)(a2 + 168) && (_DWORD)v29)
  {
    if (*(_BYTE *)(a2 + 184))
      v31 = v29;
    else
      v31 = 0;
    v32 = &v22[4 * v31
             + 4
             * ((*(_DWORD *)(a2 + 124)
               + *(_DWORD *)(a2 + 132)
               + *(_DWORD *)(a2 + 140)
               - (*(_DWORD *)(a2 + 120)
                + *(_DWORD *)(a2 + 128)
                + *(_DWORD *)(a2 + 136))
               + 1) & 0xFFFFFFFE)];
    std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v32, &v32[4 * v29], v29);
  }
  v33 = *(unsigned int *)(a2 + 148);
  if ((_DWORD)v33)
  {
    v34 = *(_DWORD *)(a2 + 144);
    if (*(_BYTE *)(a2 + 184))
      v35 = *(_DWORD *)(a2 + 144);
    else
      v35 = 0;
    if (!*(_QWORD *)(a2 + 168))
      v34 = 0;
    v36 = &v22[4 * v35
             + 4 * v34
             + 4
             * ((*(_DWORD *)(a2 + 124)
               + *(_DWORD *)(a2 + 132)
               + *(_DWORD *)(a2 + 140)
               - (*(_DWORD *)(a2 + 120)
                + *(_DWORD *)(a2 + 128)
                + *(_DWORD *)(a2 + 136))
               + 1) & 0xFFFFFFFE)];
    std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v36, &v36[4 * v33], v33);
  }
  v37 = *(void **)(a1 + 72);
  v38 = (*(_QWORD *)(a1 + 80) - (_QWORD)v37) >> 2;
  v39 = v45;
  v40 = *(_DWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 72) = v45;
  v41 = *(_QWORD *)v46;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v46;
  *(_DWORD *)(a1 + 336) = v40 + ((v41 - v39) >> 2) - v38;
  if (v37)
    operator delete(v37);
LABEL_56:
  if (*(_BYTE *)(a2 + 291))
  {
    v42 = *(__int16 **)(a1 + 168);
    for (j = *(__int16 **)(a1 + 176); v42 != j; v42 += 2)
    {
      if (*v42 == -1)
      {
        *v42 = 64;
        v42[1] = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * (unsigned __int16)v42[1]);
      }
    }
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  }
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(a1, a2);
}

void sub_232CAF85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  size_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  char *__srca;

  if (a5 < 1)
    return;
  v10 = *a1;
  v9 = (char *)a1[1];
  v11 = (uint64_t)a2 - *a1;
  v12 = v11 >> 2;
  v13 = (_BYTE *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - (_QWORD)v9) >> 2)
  {
    __srca = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
    v15 = a5 + ((uint64_t)&v9[-v10] >> 2);
    if (v15 >> 62)
      abort();
    v16 = v14 - v10;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = operator new(4 * v17);
    }
    else
    {
      v18 = 0;
    }
    v41 = 4 * a5;
    v56 = v11 >> 2;
    v42 = &v18[4 * v12];
    memcpy(v42, __src, v41);
    if ((void *)v10 == a2)
    {
      v43 = v42;
    }
    else
    {
      v44 = v11 - 4;
      if ((unint64_t)(v11 - 4) >= 0x3C)
      {
        v46 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v10 - (_QWORD)&v18[v11 & 0xFFFFFFFFFFFFFFFCLL];
        v45 = __srca;
        v43 = v42;
        if (v46 >= 0x20)
        {
          v47 = (v44 >> 2) + 1;
          v45 = &__srca[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          v48 = 4 * v56 - 16;
          v49 = (__int128 *)(v10 + v48);
          v50 = &v18[v48];
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *v49;
            *(v50 - 1) = *(v49 - 1);
            *v50 = v52;
            v49 -= 2;
            v50 -= 2;
            v51 -= 8;
          }
          while (v51);
          v43 = &v42[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
        }
      }
      else
      {
        v45 = __srca;
        v43 = v42;
      }
      do
      {
        v53 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v43 - 1) = v53;
        v43 -= 4;
      }
      while (v45 != (char *)v10);
    }
LABEL_44:
    v54 = &v18[4 * v17];
    v55 = v9 - __srca;
    if (v55)
      memmove(&v42[v41], __srca, v55);
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v42[v41 + v55];
    a1[2] = (unint64_t)v54;
    if (v10)
      operator delete((void *)v10);
    return;
  }
  v19 = (v9 - v13) >> 2;
  if (v19 >= a5)
  {
    v20 = &__src[4 * a5];
    v22 = (char *)a1[1];
    goto LABEL_18;
  }
  v20 = &__src[4 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(v9, &__src[4 * v19], a4 - v20);
  v22 = &v9[v21];
  a1[1] = (unint64_t)&v9[v21];
  if (v9 - v13 >= 1)
  {
    v12 = v11 >> 2;
LABEL_18:
    v23 = &v13[4 * a5];
    v24 = v22 - v23;
    v25 = (v22 - v23) >> 2;
    v26 = &v22[-4 * a5];
    v27 = v22;
    if (v26 < v9)
    {
      v28 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v24;
      v29 = (char *)(v28 + v10);
      v30 = v28 + v10 + 4;
      if ((unint64_t)v9 > v30)
        v30 = (unint64_t)v9;
      v31 = v30 + ~v10 - v28;
      v32 = v22 - v29;
      v33 = v31 >= 0x2C && v32 > 0x1F;
      v27 = v22;
      if (!v33)
        goto LABEL_53;
      v34 = (v31 >> 2) + 1;
      v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
      v26 += v35;
      v36 = v22 + 16;
      v37 = (__int128 *)(4 * v25 + 4 * v12 + v10 + 16);
      v38 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 8;
      }
      while (v38);
      v27 = &v22[v35];
      if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_53:
        do
        {
          v40 = *(_DWORD *)v26;
          v26 += 4;
          *(_DWORD *)v27 = v40;
          v27 += 4;
        }
        while (v26 < v9);
      }
    }
    a1[1] = (unint64_t)v27;
    if (v22 != v23)
      memmove(&v22[-4 * v25], v13, v24);
    if (v20 != __src)
      memmove(v13, __src, v20 - __src);
  }
}

_QWORD *std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (uint64_t)(v8 - *result) >> 1)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_23;
    if (v8 <= __sz)
      v10 = __sz;
    else
      v10 = v8;
    v11 = v8 >= 0x7FFFFFFFFFFFFFFELL;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 < 0)
LABEL_23:
      abort();
    v13 = 2 * v12;
    result = operator new(2 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 1;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  v18 = &__src[2 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t *j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  uint64_t *i;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  _QWORD *k;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  size_t v49;
  _QWORD *v50;
  unint64_t v51;
  void *v52;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v10)
            {
              v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0)
                v22 = *((unsigned __int8 *)v14 + 39);
              else
                v22 = v14[3];
              if (v22 == v8)
              {
                v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; i = (uint64_t *)((char *)i + 1))
                  {
                    v23 = (const void **)((char *)v23 + 1);
                    if (!--v21)
                      return;
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v14 + 39);
            else
              v17 = v14[3];
            if (v17 == v8)
            {
              v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
                {
                  v18 = (const void **)((char *)v18 + 1);
                  if (!--v16)
                    return;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x30uLL);
  *v26 = 0;
  v26[1] = v10;
  v27 = (std::string *)(v26 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v26[4] = *(_QWORD *)(a3 + 16);
  }
  v26[5] = *(_QWORD *)(a3 + 24);
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_89;
      v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v45 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        v44 = std::__next_prime(v44);
      }
      else
      {
        v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2)
          v44 = v46;
      }
      if (prime <= v44)
        prime = v44;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
LABEL_89:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        v52 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v52)
          operator delete(v52);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v34 = operator new(8 * prime);
    v35 = *(void **)a1;
    *(_QWORD *)a1 = v34;
    if (v35)
      operator delete(v35);
    v36 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v36++) = 0;
    while (prime != v36);
    v37 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_88:
      v11 = prime;
      goto LABEL_89;
    }
    v38 = v37[1];
    v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v40 = v38 & v39;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v25;
      for (k = (_QWORD *)*v37; *v37; k = (_QWORD *)*v37)
      {
        v42 = k[1] & v39;
        if (v42 == v40)
        {
          v37 = k;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v37 = *k;
          v43 = 8 * v42;
          *k = **(_QWORD **)(*(_QWORD *)a1 + v43);
          **(_QWORD **)(*(_QWORD *)a1 + v43) = k;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v37;
          v37 = k;
          v40 = v42;
        }
      }
      goto LABEL_88;
    }
    if (v38 >= prime)
      v38 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
    v47 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_88;
    while (1)
    {
      v49 = v47[1];
      if (v49 >= prime)
        v49 %= prime;
      if (v49 != v38)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v49))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v37;
          goto LABEL_93;
        }
        *v37 = *v47;
        v48 = 8 * v49;
        *v47 = **(_QWORD **)(*(_QWORD *)a1 + v48);
        **(_QWORD **)(*(_QWORD *)a1 + v48) = v47;
        v47 = v37;
      }
      v49 = v38;
LABEL_93:
      v37 = v47;
      v47 = (_QWORD *)*v47;
      v38 = v49;
      if (!v47)
        goto LABEL_88;
    }
  }
LABEL_102:
  v50 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v50)
  {
    *v26 = *v50;
    *v50 = v26;
  }
  else
  {
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v25;
    if (*v26)
    {
      v51 = *(_QWORD *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v51 >= v11)
          v51 %= v11;
      }
      else
      {
        v51 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v26;
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_232CB0280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  _BYTE *v39;
  _BYTE *v40;
  int64_t v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  char *v83;
  size_t v84;
  _BYTE *v85;
  _BYTE *v86;
  int64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;

  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)a1 = &off_2504019A0;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = *(_BYTE **)(a2 + 72);
  v8 = *(_BYTE **)(a2 + 80);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v11;
    v12 = &v11[4 * (v10 >> 2)];
    *(_QWORD *)(a1 + 88) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 80) = v12;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v14 = *(_BYTE **)(a2 + 96);
  v13 = *(_BYTE **)(a2 + 104);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      abort();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v16;
    v17 = &v16[4 * (v15 >> 2)];
    *(_QWORD *)(a1 + 112) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 104) = v17;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v19 = *(_BYTE **)(a2 + 120);
  v18 = *(_BYTE **)(a2 + 128);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0)
      abort();
    v21 = (char *)operator new(v18 - v19);
    *(_QWORD *)(a1 + 120) = v21;
    *(_QWORD *)(a1 + 128) = v21;
    v22 = &v21[4 * (v20 >> 2)];
    *(_QWORD *)(a1 + 136) = v22;
    memcpy(v21, v19, v20);
    *(_QWORD *)(a1 + 128) = v22;
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v24 = *(_BYTE **)(a2 + 144);
  v23 = *(_BYTE **)(a2 + 152);
  v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0)
      abort();
    v26 = (char *)operator new(v23 - v24);
    *(_QWORD *)(a1 + 144) = v26;
    *(_QWORD *)(a1 + 152) = v26;
    v27 = &v26[2 * (v25 >> 1)];
    *(_QWORD *)(a1 + 160) = v27;
    memcpy(v26, v24, v25);
    *(_QWORD *)(a1 + 152) = v27;
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v29 = *(_BYTE **)(a2 + 168);
  v28 = *(_BYTE **)(a2 + 176);
  v30 = v28 - v29;
  if (v28 != v29)
  {
    if (v30 < 0)
      abort();
    v31 = (char *)operator new(v28 - v29);
    *(_QWORD *)(a1 + 168) = v31;
    *(_QWORD *)(a1 + 176) = v31;
    v32 = &v31[4 * (v30 >> 2)];
    *(_QWORD *)(a1 + 184) = v32;
    memcpy(v31, v29, v30);
    *(_QWORD *)(a1 + 176) = v32;
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v34 = *(_BYTE **)(a2 + 192);
  v33 = *(_BYTE **)(a2 + 200);
  v35 = v33 - v34;
  if (v33 != v34)
  {
    if (v35 < 0)
      abort();
    v36 = (char *)operator new(v33 - v34);
    *(_QWORD *)(a1 + 192) = v36;
    *(_QWORD *)(a1 + 200) = v36;
    v37 = &v36[2 * (v35 >> 1)];
    *(_QWORD *)(a1 + 208) = v37;
    memcpy(v36, v34, v35);
    *(_QWORD *)(a1 + 200) = v37;
  }
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v38 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = v38;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v40 = *(_BYTE **)(a2 + 240);
  v39 = *(_BYTE **)(a2 + 248);
  v41 = v39 - v40;
  if (v39 != v40)
  {
    if (v41 < 0)
      abort();
    v42 = (char *)operator new(v39 - v40);
    *(_QWORD *)(a1 + 240) = v42;
    *(_QWORD *)(a1 + 248) = v42;
    v43 = &v42[4 * (v41 >> 2)];
    *(_QWORD *)(a1 + 256) = v43;
    memcpy(v42, v40, v41);
    *(_QWORD *)(a1 + 248) = v43;
  }
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v45 = *(_BYTE **)(a2 + 264);
  v44 = *(_BYTE **)(a2 + 272);
  v46 = v44 - v45;
  if (v44 != v45)
  {
    if (v46 < 0)
      abort();
    v47 = (char *)operator new(v44 - v45);
    *(_QWORD *)(a1 + 264) = v47;
    *(_QWORD *)(a1 + 272) = v47;
    v48 = &v47[4 * (v46 >> 2)];
    *(_QWORD *)(a1 + 280) = v48;
    memcpy(v47, v45, v46);
    *(_QWORD *)(a1 + 272) = v48;
  }
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>((uint64_t *)(a1 + 288), *(_QWORD **)(a2 + 288), (_QWORD *)(a2 + 296));
  v49 = *(_OWORD *)(a2 + 312);
  v50 = *(_OWORD *)(a2 + 328);
  v51 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 360) = v51;
  *(_OWORD *)(a1 + 312) = v49;
  *(_OWORD *)(a1 + 328) = v50;
  v52 = *(_OWORD *)(a2 + 376);
  v53 = *(_OWORD *)(a2 + 392);
  v54 = *(_OWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 392) = v53;
  *(_OWORD *)(a1 + 408) = v54;
  *(_OWORD *)(a1 + 376) = v52;
  if (*(char *)(a2 + 455) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 432), *(const std::string::value_type **)(a2 + 432), *(_QWORD *)(a2 + 440));
  }
  else
  {
    v55 = *(_OWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = v55;
  }
  v56 = (std::string *)(a1 + 456);
  if (*(char *)(a2 + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)(a2 + 456), *(_QWORD *)(a2 + 464));
  }
  else
  {
    v57 = *(_OWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
  }
  if (*(char *)(a2 + 503) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 480), *(const std::string::value_type **)(a2 + 480), *(_QWORD *)(a2 + 488));
  }
  else
  {
    v58 = *(_OWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = v58;
  }
  v59 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v59;
  v60 = *(_OWORD *)(a2 + 536);
  v61 = *(_OWORD *)(a2 + 552);
  v62 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v62;
  *(_OWORD *)(a1 + 536) = v60;
  *(_OWORD *)(a1 + 552) = v61;
  v63 = *(_OWORD *)(a2 + 600);
  v64 = *(_OWORD *)(a2 + 616);
  v65 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v65;
  *(_OWORD *)(a1 + 600) = v63;
  *(_OWORD *)(a1 + 616) = v64;
  v66 = *(_OWORD *)(a2 + 664);
  v67 = *(_OWORD *)(a2 + 680);
  v68 = *(_OWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v67;
  *(_OWORD *)(a1 + 696) = v68;
  *(_OWORD *)(a1 + 664) = v66;
  v69 = *(_OWORD *)(a2 + 736);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 736) = v69;
  v70 = *(_OWORD *)(a2 + 752);
  v71 = *(_OWORD *)(a2 + 768);
  v72 = *(_OWORD *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 800) = v72;
  *(_OWORD *)(a1 + 752) = v70;
  *(_OWORD *)(a1 + 768) = v71;
  v73 = *(_OWORD *)(a2 + 816);
  v74 = *(_OWORD *)(a2 + 832);
  v75 = *(_OWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 861) = *(_QWORD *)(a2 + 861);
  *(_OWORD *)(a1 + 832) = v74;
  *(_OWORD *)(a1 + 848) = v75;
  *(_OWORD *)(a1 + 816) = v73;
  if (*(char *)(a2 + 895) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 872), *(const std::string::value_type **)(a2 + 872), *(_QWORD *)(a2 + 880));
  }
  else
  {
    v76 = *(_OWORD *)(a2 + 872);
    *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
    *(_OWORD *)(a1 + 872) = v76;
  }
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  v77 = *(_OWORD *)(a2 + 904);
  v78 = *(_OWORD *)(a2 + 920);
  v79 = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 945) = *(_OWORD *)(a2 + 945);
  *(_OWORD *)(a1 + 920) = v78;
  *(_OWORD *)(a1 + 936) = v79;
  *(_OWORD *)(a1 + 904) = v77;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  v80 = *(_BYTE **)(a2 + 968);
  v81 = *(_BYTE **)(a2 + 976);
  v82 = v81 - v80;
  if (v81 != v80)
  {
    if (v82 < 0)
      abort();
    v83 = (char *)operator new(v81 - v80);
    *(_QWORD *)(a1 + 968) = v83;
    *(_QWORD *)(a1 + 976) = v83;
    *(_QWORD *)(a1 + 984) = &v83[16 * (v82 >> 4)];
    v84 = v82 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v83, v80, v84);
    *(_QWORD *)(a1 + 976) = &v83[v84];
  }
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  v85 = *(_BYTE **)(a2 + 992);
  v86 = *(_BYTE **)(a2 + 1000);
  v87 = v86 - v85;
  if (v86 != v85)
  {
    if (v87 < 0)
      abort();
    v88 = (char *)operator new(v86 - v85);
    *(_QWORD *)(a1 + 992) = v88;
    *(_QWORD *)(a1 + 1000) = v88;
    v89 = &v88[8 * (v87 >> 3)];
    *(_QWORD *)(a1 + 1008) = v89;
    memcpy(v88, v85, v87);
    *(_QWORD *)(a1 + 1000) = v89;
  }
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  v90 = *(char **)(a2 + 1016);
  v91 = *(char **)(a2 + 1024);
  v92 = v91 - v90;
  if (v91 != v90)
  {
    if (v92 < 0)
      abort();
    v93 = operator new(v91 - v90);
    *(_QWORD *)(a1 + 1016) = v93;
    *(_QWORD *)(a1 + 1024) = v93;
    *(_QWORD *)(a1 + 1032) = &v93[2 * (v92 >> 4)];
    do
    {
      v94 = *((_QWORD *)v90 + 1);
      *v93 = *(_QWORD *)v90;
      v93[1] = v94;
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      v90 += 16;
      v93 += 2;
    }
    while (v90 != v91);
    *(_QWORD *)(a1 + 1024) = v93;
  }
  *(_DWORD *)(a1 + 1040) = *(_DWORD *)(a2 + 1040);
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1048) = a1 + 1056;
  std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>((uint64_t *)(a1 + 1048), *(_QWORD **)(a2 + 1048), (_QWORD *)(a2 + 1056));
  CompileStatistics::CompileStatistics((CompileStatistics *)(a1 + 1072), (const CompileStatistics *)(a2 + 1072));
  return a1;
}

void sub_232CB0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, _QWORD **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (*(char *)(v16 + 503) < 0)
  {
    operator delete(*v17);
    if ((*(char *)(v16 + 479) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v16 + 455) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(v16 + 479) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*a9);
  if ((*(char *)(v16 + 455) & 0x80000000) == 0)
  {
LABEL_5:
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a11);
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo((_QWORD *)(v18 - 16));
    v21 = *a12;
    if (*a12)
    {
      *(_QWORD *)(v16 + 200) = v21;
      operator delete(v21);
    }
    v22 = *a13;
    if (*a13)
    {
      *(_QWORD *)(v16 + 176) = v22;
      operator delete(v22);
    }
    v23 = *a14;
    if (*a14)
    {
      *(_QWORD *)(v16 + 152) = v23;
      operator delete(v23);
    }
    v24 = *a15;
    if (*a15)
    {
      *(_QWORD *)(v16 + 128) = v24;
      operator delete(v24);
    }
    v25 = *a16;
    if (*a16)
    {
      *(_QWORD *)(v16 + 104) = v25;
      operator delete(v25);
      v26 = *v19;
      if (!*v19)
LABEL_15:
        _Unwind_Resume(a1);
    }
    else
    {
      v26 = *v19;
      if (!*v19)
        goto LABEL_15;
    }
    *(_QWORD *)(v16 + 80) = v26;
    operator delete(v26);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*a10);
  goto LABEL_5;
}

void sub_232CB0BB4()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 248) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x232CB0AD0);
}

void sub_232CB0BCC()
{
  JUMPOUT(0x232CB0AD0);
}

void sub_232CB0BD4()
{
  JUMPOUT(0x232CB0AE4);
}

void sub_232CB0BDC()
{
  JUMPOUT(0x232CB0AF8);
}

void sub_232CB0BE4()
{
  JUMPOUT(0x232CB0B0CLL);
}

void sub_232CB0BEC()
{
  JUMPOUT(0x232CB0B20);
}

void sub_232CB0BF4()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x232CB0B4CLL);
  JUMPOUT(0x232CB0B34);
}

_QWORD *std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      abort();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      std::string::operator=((std::string *)(v6 + 16), (const std::string *)(a2 + 2));
      *((_QWORD *)v6 + 5) = a2[5];
      v7 = *(char **)v6;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      v6 = v7;
      if (!v7)
        goto LABEL_7;
    }
    do
    {
      v15 = *(char **)v6;
      if (v6[39] < 0)
        operator delete(*((void **)v6 + 2));
      operator delete(v6);
      v6 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v8 = (char *)operator new(0x30uLL);
      v9 = (uint64_t)v8;
      v10 = (uint64_t *)(v8 + 16);
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v8 + 16), (const std::string::value_type *)a2[2], a2[3]);
      }
      else
      {
        v11 = *((_OWORD *)a2 + 1);
        *((_QWORD *)v8 + 4) = a2[4];
        *(_OWORD *)v10 = v11;
      }
      *(_QWORD *)(v9 + 40) = a2[5];
      v12 = *(char *)(v9 + 39);
      if (v12 >= 0)
        v13 = v10;
      else
        v13 = *(uint64_t **)(v9 + 16);
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v9 + 39);
      else
        v14 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 8) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v13, v14);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi((uint64_t)a1, v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_232CB0E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t **v20;
  size_t v21;
  uint8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t *v27;
  size_t v28;
  uint64_t *v29;
  size_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  const void *v41;
  uint64_t *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint8x8_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  char v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void **v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  char v72;
  BOOL v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  _BOOL4 v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void **v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  char v91;
  int v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  size_t v96;
  unint64_t v97;

  v2 = (_QWORD *)a2;
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(char *)(a2 + 39);
  if (v5 >= 0)
    v6 = (uint64_t *)(a2 + 16);
  else
    v6 = *(uint64_t **)(a2 + 16);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 39);
  else
    v7 = *(_QWORD *)(a2 + 24);
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v6, v7);
  *(v4 - 1) = v8;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v11 = *(float *)(a1 + 32);
  v97 = v8;
  v95 = v2;
  if (!v9 || (float)(v11 * (float)v9) < v10)
  {
    v93 = v4;
    v12 = 1;
    if (v9 >= 3)
      v12 = (v9 & (v9 - 1)) != 0;
    v13 = v12 | (2 * v9);
    v14 = vcvtps_u32_f32(v10 / v11);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    if (v15 == 1)
    {
      v15 = 2;
    }
    else if ((v15 & (v15 - 1)) != 0)
    {
      prime = std::__next_prime(v15);
      v8 = v97;
      v15 = prime;
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (v15 > v9)
      goto LABEL_19;
    if (v15 >= v9)
      goto LABEL_101;
    v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
      v8 = v97;
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (v15 <= v24)
      v15 = v24;
    if (v15 >= v9)
    {
      v9 = *(_QWORD *)(a1 + 8);
LABEL_101:
      v4 = v93;
    }
    else
    {
      if (v15)
      {
LABEL_19:
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v17 = operator new(8 * v15);
        v18 = *(void **)a1;
        *(_QWORD *)a1 = v17;
        if (v18)
          operator delete(v18);
        v19 = 0;
        *(_QWORD *)(a1 + 8) = v15;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19++) = 0;
        while (v15 != v19);
        v20 = *(uint64_t ***)(a1 + 16);
        v8 = v97;
        if (!v20)
          goto LABEL_90;
        v21 = (size_t)v20[1];
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v22.i16[0] = vaddlv_u8(v22);
        v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= v15)
            v21 %= v15;
        }
        else
        {
          v21 &= v15 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a1 + 16;
        v27 = *v20;
        if (!*v20)
        {
LABEL_90:
          v9 = v15;
          goto LABEL_101;
        }
        v94 = v22.u32[0];
        while (1)
        {
          v28 = v27[1];
          if (v23 > 1)
          {
            if (v28 >= v15)
              v28 %= v15;
          }
          else
          {
            v28 &= v15 - 1;
          }
          if (v28 == v21)
          {
            v20 = (uint64_t **)v27;
          }
          else
          {
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
            {
              v29 = (uint64_t *)*v27;
              v96 = v21;
              if (*v27)
              {
                v30 = v27[3];
                if (*((char *)v27 + 39) >= 0)
                  v31 = *((unsigned __int8 *)v27 + 39);
                else
                  v31 = v27[3];
                if ((*((_BYTE *)v27 + 39) & 0x80) == 0)
                {
                  if (*((_BYTE *)v27 + 39))
                  {
                    v32 = (uint64_t *)*v27;
                    v33 = v27;
LABEL_52:
                    v29 = v32;
                    v34 = *((unsigned __int8 *)v32 + 39);
                    v35 = (char)v34;
                    if ((v34 & 0x80u) != 0)
                      v34 = v29[3];
                    if (v31 == v34)
                    {
                      if (v35 >= 0)
                        v36 = (unsigned __int8 *)(v29 + 2);
                      else
                        v36 = (unsigned __int8 *)v29[2];
                      v37 = (unsigned __int8 *)(v27 + 2);
                      v38 = *((unsigned __int8 *)v27 + 39);
                      while (*v37 == *v36)
                      {
                        ++v37;
                        ++v36;
                        if (!--v38)
                        {
                          v32 = (uint64_t *)*v29;
                          v33 = v29;
                          v29 = 0;
                          if (v32)
                            goto LABEL_52;
                          goto LABEL_78;
                        }
                      }
                    }
                  }
                  else
                  {
                    v48 = *((unsigned __int8 *)v29 + 39);
                    if ((v48 & 0x80u) != 0)
                      v48 = v29[3];
                    v33 = v27;
                    if (v48 == *((unsigned __int8 *)v27 + 39))
                    {
                      do
                      {
                        v33 = v29;
                        v29 = (uint64_t *)*v29;
                        if (!v29)
                          break;
                        v49 = *((unsigned __int8 *)v29 + 39);
                        if ((v49 & 0x80u) != 0)
                          v49 = v29[3];
                      }
                      while (v31 == v49);
                    }
                  }
                  goto LABEL_78;
                }
                v39 = *((char *)v29 + 39) < 0;
                v40 = *((unsigned __int8 *)v29 + 39);
                if ((v40 & 0x80u) != 0)
                  v40 = v29[3];
                if (v31 == v40)
                {
                  v41 = (const void *)v27[2];
                  v33 = v27;
                  while (1)
                  {
                    v42 = v29;
                    v45 = (const void *)v29[2];
                    v43 = v29 + 2;
                    v44 = v45;
                    if (v39)
                      v46 = v44;
                    else
                      v46 = v43;
                    if (memcmp(v41, v46, v30))
                    {
                      v29 = v42;
                      goto LABEL_89;
                    }
                    v29 = (uint64_t *)*v42;
                    if (!*v42)
                      break;
                    v39 = *((char *)v29 + 39) < 0;
                    v47 = *((unsigned __int8 *)v29 + 39);
                    if ((v47 & 0x80u) != 0)
                      v47 = v29[3];
                    v33 = v42;
                    v8 = v97;
                    if (v31 != v47)
                      goto LABEL_78;
                  }
                  v33 = v42;
LABEL_89:
                  v8 = v97;
                  goto LABEL_78;
                }
              }
              v33 = v27;
LABEL_78:
              *v20 = v29;
              *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
              v21 = v96;
              v23 = v94;
              goto LABEL_38;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v20;
            v20 = (uint64_t **)v27;
            v21 = v28;
          }
LABEL_38:
          v27 = *v20;
          if (!*v20)
          {
            v9 = v15;
            v2 = v95;
            goto LABEL_101;
          }
        }
      }
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      v4 = v93;
      if (v50)
      {
        operator delete(v50);
        v8 = v97;
      }
      v9 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  v51 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v51.i16[0] = vaddlv_u8(v51);
  v52 = v51.u32[0];
  if (v51.u32[0] > 1uLL)
  {
    v53 = v8;
    if (v9 <= v8)
      v53 = v8 % v9;
  }
  else
  {
    v53 = (v9 - 1) & v8;
  }
  v54 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v53);
  if (v54)
  {
    v55 = *((_BYTE *)v2 + 39);
    if (v55 >= 0)
      v56 = *((unsigned __int8 *)v2 + 39);
    else
      v56 = v2[3];
    if (v55 < 0)
      v4 = (_QWORD *)v2[2];
    if (v51.u32[0] >= 2uLL)
    {
      v77 = 0;
      do
      {
        v60 = v54;
        v54 = (uint64_t *)*v54;
        if (!v54)
          break;
        v80 = v54[1];
        v81 = v80;
        if (v80 >= v9)
          v81 = v80 % v9;
        if (v81 != v53)
          break;
        if (v80 == v8
          && ((v82 = *((unsigned __int8 *)v54 + 39), (v82 & 0x80u) == 0)
            ? (v83 = *((unsigned __int8 *)v54 + 39))
            : (v83 = v54[3]),
              v83 == v56))
        {
          v84 = (const void **)(v54 + 2);
          if ((v82 & 0x80) != 0)
          {
            v92 = memcmp(*v84, v4, v54[3]);
            v8 = v97;
            v78 = v92 == 0;
          }
          else if (*((_BYTE *)v54 + 39))
          {
            v85 = v82 - 1;
            v86 = (unsigned __int8 *)v4;
            do
            {
              v88 = *(unsigned __int8 *)v84;
              v84 = (const void **)((char *)v84 + 1);
              v87 = v88;
              v90 = *v86++;
              v89 = v90;
              v71 = v85-- != 0;
              v91 = v71;
              v73 = v87 == v89;
              v78 = v87 == v89;
            }
            while (v73 && (v91 & 1) != 0);
          }
          else
          {
            v78 = 1;
          }
        }
        else
        {
          v78 = 0;
        }
        v79 = v77 & !v78;
        v77 |= v78;
      }
      while (v79 != 1);
    }
    else
    {
      v57 = 0;
      do
      {
        v60 = v54;
        v54 = (uint64_t *)*v54;
        if (!v54)
          break;
        v61 = v54[1];
        if ((v61 & (v9 - 1)) != v53)
          break;
        if (v61 == v8
          && ((v62 = *((unsigned __int8 *)v54 + 39), (v62 & 0x80u) == 0)
            ? (v63 = *((unsigned __int8 *)v54 + 39))
            : (v63 = v54[3]),
              v63 == v56))
        {
          v64 = (const void **)(v54 + 2);
          if ((v62 & 0x80) != 0)
          {
            v74 = memcmp(*v64, v4, v54[3]);
            v8 = v97;
            v58 = v74 == 0;
          }
          else if (*((_BYTE *)v54 + 39))
          {
            v65 = v62 - 1;
            v66 = (unsigned __int8 *)v4;
            do
            {
              v68 = *(unsigned __int8 *)v64;
              v64 = (const void **)((char *)v64 + 1);
              v67 = v68;
              v70 = *v66++;
              v69 = v70;
              v71 = v65-- != 0;
              v72 = v71;
              v73 = v67 == v69;
              v58 = v67 == v69;
            }
            while (v73 && (v72 & 1) != 0);
          }
          else
          {
            v58 = 1;
          }
        }
        else
        {
          v58 = 0;
        }
        v59 = v57 & !v58;
        v57 |= v58;
      }
      while ((v59 & 1) == 0);
    }
  }
  else
  {
    v60 = 0;
  }
  v75 = v95[1];
  if (v52 > 1)
  {
    if (v75 >= v9)
      v75 %= v9;
  }
  else
  {
    v75 &= v9 - 1;
  }
  if (!v60)
  {
    *v95 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v95;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v75) = a1 + 16;
    if (!*v95)
      goto LABEL_178;
    v76 = *(_QWORD *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9)
        v76 %= v9;
    }
    else
    {
      v76 &= v9 - 1;
    }
LABEL_177:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = v95;
    goto LABEL_178;
  }
  *v95 = *v60;
  *v60 = v95;
  if (*v95)
  {
    v76 = *(_QWORD *)(*v95 + 8);
    if (v52 > 1)
    {
      if (v76 >= v9)
        v76 %= v9;
    }
    else
    {
      v76 &= v9 - 1;
    }
    if (v76 != v75)
      goto LABEL_177;
  }
LABEL_178:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t *std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = (uint64_t *)v9;
            v9 = *(_QWORD *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *((_DWORD *)v4 + 7);
        if (*((_DWORD *)v8 + 7) >= v12)
          break;
      }
      v13 = (uint64_t **)v6;
      v14 = (uint64_t **)v6;
      if (!v7)
        goto LABEL_19;
      v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        v14 = (uint64_t **)v8;
LABEL_19:
        v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(_QWORD *)((char *)v4 + 28);
        *v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *v13 = v16;
        v17 = *(_QWORD *)*v5;
        if (v17)
        {
          *v5 = v17;
          v18 = *v13;
        }
        else
        {
          v18 = v16;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v18);
        ++v5[2];
      }
LABEL_23:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
      if (v20 == a3)
        return result;
    }
    v13 = (uint64_t **)v6;
    v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v7;
          v15 = *((_DWORD *)v7 + 7);
          if (v12 >= v15)
            break;
          v7 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_19;
        }
        if (v15 >= v12)
          goto LABEL_23;
        v13 = v14 + 1;
        v7 = v14[1];
        if (!v7)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

void CompileStatistics::CompileStatistics(CompileStatistics *this, const CompileStatistics *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 *v15;
  std::string *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  std::string *v22;
  __int128 v23;

  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v4;
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  v7 = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 77) = *(_OWORD *)((char *)a2 + 77);
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 4) = v7;
  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 2) = v5;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v8 = *((_QWORD *)a2 + 12);
  v9 = *((_QWORD *)a2 + 13);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    if (v11 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v12 = (char *)operator new(v10);
    v13 = 0;
    *((_QWORD *)this + 12) = v12;
    *((_QWORD *)this + 13) = v12;
    *((_QWORD *)this + 14) = &v12[24 * v11];
    do
    {
      v15 = (__int128 *)(v8 + v13);
      v16 = (std::string *)&v12[v13];
      if (*(char *)(v8 + v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v14 = *v15;
        v16->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v14;
      }
      v13 += 24;
    }
    while (v8 + v13 != v9);
    *((_QWORD *)this + 13) = &v12[v13];
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 15);
  v17 = (_BYTE *)*((_QWORD *)a2 + 16);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      abort();
    v20 = (char *)operator new(v17 - v18);
    *((_QWORD *)this + 15) = v20;
    *((_QWORD *)this + 16) = v20;
    v21 = &v20[4 * (v19 >> 2)];
    *((_QWORD *)this + 17) = v21;
    memcpy(v20, v18, v19);
    *((_QWORD *)this + 16) = v21;
  }
  v22 = (std::string *)((char *)this + 144);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v23 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
}

void sub_232CB18CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::~vector[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

void sub_232CB18F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::cloneProgramInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];

  AGX::Heap<true>::allocateImpl(&v15, *(_QWORD *)(a2 + 544), *(_QWORD *)(a2 + 736), (_QWORD *)(a1 + 920));
  v4 = v16[0];
  *(_OWORD *)(a1 + 720) = v15;
  *(_OWORD *)(a1 + 736) = v4;
  *(_OWORD *)(a1 + 745) = *(_OWORD *)((char *)v16 + 9);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 720);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  memcpy(*(void **)(a1 + 728), *(const void **)(a2 + 728), *(_QWORD *)(a1 + 736));
  v5 = *(_QWORD *)(a2 + 784);
  if (v5)
  {
    AGX::Heap<true>::allocateImpl(&v15, *(_QWORD *)(a2 + 544), v5, (_QWORD *)(a1 + 928));
    v6 = v16[0];
    *(_OWORD *)(a1 + 768) = v15;
    *(_OWORD *)(a1 + 784) = v6;
    *(_OWORD *)(a1 + 793) = *(_OWORD *)((char *)v16 + 9);
    memcpy(*(void **)(a1 + 776), *(const void **)(a2 + 776), *(_QWORD *)(a1 + 784));
  }
  v7 = *(_QWORD *)(a2 + 832);
  if (v7)
  {
    AGX::Heap<true>::allocateImpl(&v15, *(_QWORD *)(a2 + 544), v7, (_QWORD *)(a1 + 936));
    v8 = v16[0];
    *(_OWORD *)(a1 + 816) = v15;
    *(_OWORD *)(a1 + 832) = v8;
    *(_OWORD *)(a1 + 841) = *(_OWORD *)((char *)v16 + 9);
    memcpy(*(void **)(a1 + 824), *(const void **)(a2 + 824), *(_QWORD *)(a1 + 832));
    v9 = *(_QWORD *)(a1 + 832);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(a1 + 816);
    *(_QWORD *)(a1 + 712) = v9;
  }
  v10 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a1 + 720);
  *(_OWORD *)(a1 + 568) = v10;
  *(_OWORD *)(a1 + 577) = *(_OWORD *)(a1 + 745);
  v11 = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a1 + 616) = v11;
  *(_OWORD *)(a1 + 625) = *(_OWORD *)(a1 + 793);
  v12 = *(_OWORD *)(a1 + 816);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 648) = v12;
  *(_OWORD *)(a1 + 673) = *(_OWORD *)(a1 + 841);
  result = *(__n128 *)(a1 + 720);
  v14 = *(_QWORD *)(a1 + 736);
  *(__n128 *)(a1 + 520) = result;
  *(_QWORD *)(a1 + 536) = v14;
  *(_BYTE *)(a1 + 868) = 1;
  return result;
}

unint64_t AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::MeshProgramVariant(unint64_t a1, uint64_t a2, unsigned int **a3, const std::string *a4, uint64_t a5, _DWORD *a6, int a7, void *a8)
{
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int **v18;
  int *v19;
  unsigned __int16 *v20;
  int *v21;
  unsigned int **v22;
  int *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  char *v26;
  unsigned int **v27;
  int *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  int *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  int *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  size_t v55;
  __int128 *p_dst;
  int *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  int *v62;
  unsigned __int16 *v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  int *v81;
  int *v82;
  unsigned __int16 *v83;
  uint64_t v84;
  unsigned __int16 *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int16 *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unsigned __int16 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int **v102;
  int **v103;
  unsigned int v104;
  unsigned int v105;
  int *v106;
  int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  ProgramBindingsAndDMAList *v118;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  std::mutex *v124;
  uint64_t v125;
  _OWORD *v126;
  int *v127;
  int *v128;
  __int128 __dst;
  _BYTE v130[25];
  uint64_t v131;

  v13 = AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(a1, a2, (uint64_t)a3, a4, a5, a7);
  *(_QWORD *)v13 = &off_250401880;
  v14 = v13 + 1240;
  *(_BYTE *)(v13 + 1992) = 0;
  *(_QWORD *)(v13 + 2000) = 0;
  *(_QWORD *)(v13 + 2016) = 0;
  *(_QWORD *)(v13 + 2008) = 0;
  *(_OWORD *)(v13 + 2240) = 0u;
  *(_OWORD *)(v13 + 2256) = 0u;
  *(_QWORD *)(v13 + 2272) = 0;
  *(_OWORD *)(v13 + 2288) = 0u;
  *(_OWORD *)(v13 + 2304) = 0u;
  *(_QWORD *)(v13 + 2320) = 0;
  *(_OWORD *)(v13 + 2336) = 0u;
  *(_OWORD *)(v13 + 2352) = 0u;
  *(_QWORD *)(v13 + 2368) = 0;
  *(_OWORD *)(v13 + 2384) = 0u;
  *(_OWORD *)(v13 + 2400) = 0u;
  *(_QWORD *)(v13 + 2416) = 0;
  *(_OWORD *)(v13 + 2440) = 0u;
  *(_OWORD *)(v13 + 2456) = 0u;
  *(_QWORD *)(v13 + 2472) = 0;
  *(_QWORD *)(v13 + 2520) = 0;
  *(_OWORD *)(v13 + 2504) = 0u;
  *(_OWORD *)(v13 + 2488) = 0u;
  *(_QWORD *)(v13 + 2568) = 0;
  *(_OWORD *)(v13 + 2552) = 0u;
  *(_OWORD *)(v13 + 2536) = 0u;
  *(_QWORD *)(v13 + 2616) = 0;
  *(_OWORD *)(v13 + 2600) = 0u;
  *(_OWORD *)(v13 + 2584) = 0u;
  *(_QWORD *)(v13 + 2664) = 0;
  *(_OWORD *)(v13 + 2648) = 0u;
  *(_OWORD *)(v13 + 2632) = 0u;
  *(_QWORD *)(v13 + 1408) = 0;
  *(_OWORD *)(v13 + 1392) = 0u;
  *(_OWORD *)(v13 + 1376) = 0u;
  *(_OWORD *)(v13 + 1360) = 0u;
  *(_OWORD *)(v13 + 1344) = 0u;
  *(_OWORD *)(v13 + 1328) = 0u;
  *(_OWORD *)(v13 + 1312) = 0u;
  *(_OWORD *)(v13 + 1296) = 0u;
  *(_OWORD *)(v13 + 1280) = 0u;
  *(_OWORD *)(v13 + 1264) = 0u;
  *(_OWORD *)(v13 + 2208) = 0u;
  *(_OWORD *)(v13 + 2192) = 0u;
  *(_OWORD *)(v13 + 2176) = 0u;
  *(_OWORD *)(v13 + 2160) = 0u;
  *(_OWORD *)(v13 + 2144) = 0u;
  *(_OWORD *)(v13 + 2128) = 0u;
  *(_OWORD *)(v13 + 2112) = 0u;
  *(_OWORD *)(v13 + 2680) = 0u;
  *(_OWORD *)(v13 + 2696) = 0u;
  *(_OWORD *)(v13 + 2712) = 0u;
  *(_OWORD *)(v13 + 2728) = 0u;
  *(_OWORD *)(v13 + 2768) = 0u;
  *(_OWORD *)(v13 + 2784) = 0u;
  *(_OWORD *)(v13 + 2800) = 0u;
  v15 = (_OWORD *)(v13 + 2888);
  *(_OWORD *)(v13 + 2888) = 0u;
  *(_OWORD *)(v13 + 2904) = 0u;
  *(_QWORD *)(v13 + 2920) = 0;
  *(_OWORD *)(v13 + 2952) = 0u;
  *(_OWORD *)(v13 + 2968) = 0u;
  *(_OWORD *)(v13 + 2936) = 0u;
  v16 = v13 + 3008;
  *(_OWORD *)(v13 + 3024) = 0u;
  *(_OWORD *)(v13 + 3008) = 0u;
  *(_DWORD *)(v13 + 3040) = 1065353216;
  *(_QWORD *)(a1 + 3048) = a8;
  *(_QWORD *)(a1 + 3056) = 850045863;
  *(_QWORD *)(a1 + 3112) = 0;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  v124 = (std::mutex *)(a1 + 3056);
  *(_OWORD *)(a1 + 3096) = 0u;
  v17 = a3[28];
  if (v17)
  {
    v18 = a3 + 98;
    if (a3[29])
      v18 = a3 + 28;
  }
  else
  {
    v18 = a3 + 98;
  }
  v19 = 0;
  if (*v18 && v18[1])
    v19 = (int *)((char *)*v18 + **v18);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 5u)
  {
    v21 = (int *)v20[2];
    if (v21)
      v21 = (int *)((char *)v21 + (_QWORD)v19 + *(unsigned int *)((char *)v21 + (_QWORD)v19));
    if (v17)
      goto LABEL_13;
LABEL_17:
    v22 = a3 + 98;
    goto LABEL_18;
  }
  v21 = 0;
  if (!v17)
    goto LABEL_17;
LABEL_13:
  if (a3[29])
    v22 = a3 + 28;
  else
    v22 = a3 + 98;
LABEL_18:
  v23 = 0;
  if (*v22 && v22[1])
    v23 = (int *)((char *)*v22 + **v22);
  v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 0xBu)
  {
    v25 = v24[5];
    if (v25)
    {
      v26 = (char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25);
      if (!a3[58])
        goto LABEL_24;
LABEL_27:
      v27 = a3 + 58;
      if (!a3[59])
        v27 = a3 + 128;
      if (!v27[1])
        goto LABEL_25;
LABEL_30:
      v28 = (int *)((char *)*v27 + **v27);
      goto LABEL_31;
    }
  }
  v26 = 0;
  if (a3[58])
    goto LABEL_27;
LABEL_24:
  v27 = a3 + 128;
  if (a3[129])
    goto LABEL_30;
LABEL_25:
  v28 = 0;
LABEL_31:
  v29 = (unsigned __int16 *)((char *)v28 - *v28);
  v127 = (int *)v26;
  v128 = v21;
  v125 = a2;
  v126 = v15;
  if (*v29 >= 0x17u && (v30 = v29[11]) != 0)
    v31 = (int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
  else
    v31 = 0;
  v32 = *(_DWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 920);
  *(_DWORD *)(a1 + 2828) += v32;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v14);
  if (!a3[63])
  {
    if (!a3[134])
      goto LABEL_68;
    v35 = a3[133];
    if (!v35)
      goto LABEL_68;
    goto LABEL_43;
  }
  v33 = a3 + 63;
  v34 = 63;
  if (!a3[64])
  {
    v34 = 133;
    v33 = a3 + 133;
  }
  if (v33[1])
  {
    v35 = a3[v34];
    if (v35)
    {
LABEL_43:
      v36 = (int *)((char *)v35 + *v35);
      v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 < 0xBu)
        goto LABEL_68;
      v38 = v37[5];
      if (!v38)
        goto LABEL_68;
      v39 = (int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
      v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 < 5u)
        goto LABEL_68;
      v41 = v40[2];
      if (!v41)
        goto LABEL_68;
      v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
      v43 = *v42;
      if (!(_DWORD)v43)
        goto LABEL_68;
      v44 = 0;
      v45 = *(_QWORD *)(a1 + 512);
      v121 = 4 * v43;
      v122 = a6;
      v123 = v16;
      v120 = v14;
      do
      {
        v46 = v42[v44 / 4 + 1];
        v47 = v46 - *(int *)((char *)&v42[v44 / 4 + 1] + v46);
        v48 = (char *)&v42[v44 / 4] + v47;
        v49 = *((unsigned __int16 *)v48 + 2);
        if (v49 < 5)
        {
          v53 = 0;
          v51 = 4;
        }
        else
        {
          v50 = *((unsigned __int16 *)v48 + 4);
          if (v50)
            v50 += (uint64_t)&v42[v44 / 4 + 1] + v46 + *(unsigned int *)((char *)&v42[v44 / 4 + 1] + v46 + v50);
          v51 = v50 + 4;
          if (v49 >= 7 && (v52 = *(unsigned __int16 *)((char *)&v42[v44 / 4 + 2] + v47 + 2)) != 0)
            v53 = *(_QWORD *)((char *)&v42[v44 / 4 + 1] + v46 + v52);
          else
            v53 = 0;
        }
        v54 = strlen((const char *)v51);
        if (v54 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v55 = v54;
        if (v54 >= 0x17)
        {
          v57 = v31;
          v58 = v42;
          v59 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v59 = v54 | 7;
          v60 = v59 + 1;
          p_dst = (__int128 *)operator new(v59 + 1);
          *((_QWORD *)&__dst + 1) = v55;
          *(_QWORD *)v130 = v60 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
          v42 = v58;
          v31 = v57;
          v14 = v120;
        }
        else
        {
          v130[7] = v54;
          p_dst = &__dst;
          if (!v54)
            goto LABEL_66;
        }
        memmove(p_dst, (const void *)v51, v55);
LABEL_66:
        *((_BYTE *)p_dst + v55) = 0;
        *(_QWORD *)&v130[8] = v53 + v45;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(v123, (uint64_t)&__dst, (uint64_t)&__dst);
        a6 = v122;
        if ((v130[7] & 0x80000000) != 0)
          operator delete((void *)__dst);
        v44 += 4;
      }
      while (v121 != v44);
    }
  }
LABEL_68:
  *(_DWORD *)(a1 + 2832) = ((a6[5] & 1) << 18) | ~(-1 << a6[4]) | (a6[3] << 24);
  v61 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v61 < 0x19u)
  {
    v62 = 0;
  }
  else
  {
    v62 = (int *)v61[12];
    if (v62)
      v62 = (int *)((char *)v62 + (_QWORD)v31 + *(unsigned int *)((char *)v62 + (_QWORD)v31));
  }
  v63 = (unsigned __int16 *)((char *)v62 - *v62);
  v64 = *v63;
  if (v64 < 0xB)
  {
    LOBYTE(v65) = 0;
    LOBYTE(v67) = 0;
    LOBYTE(v66) = 0;
    v68 = 0;
    LOBYTE(v69) = 0;
    LOBYTE(v70) = 0;
    if (v64 < 5)
      goto LABEL_96;
    v71 = v63[2];
    if (v63[2])
      goto LABEL_79;
    goto LABEL_90;
  }
  if (v63[5])
  {
    v65 = *(int *)((char *)v62 + v63[5]);
    if (v64 >= 0xF)
      goto LABEL_75;
LABEL_83:
    LOBYTE(v66) = 0;
    if (v64 < 0xD)
    {
      LOBYTE(v67) = 0;
      v71 = v63[2];
      if (v63[2])
        goto LABEL_79;
      goto LABEL_90;
    }
    goto LABEL_88;
  }
  LOBYTE(v65) = 0;
  if (v64 < 0xF)
    goto LABEL_83;
LABEL_75:
  if (v63[7])
    v66 = *(int *)((char *)v62 + v63[7]);
  else
    LOBYTE(v66) = 0;
LABEL_88:
  if (v63[6])
  {
    v67 = *(int *)((char *)v62 + v63[6]);
    v71 = v63[2];
    if (!v63[2])
      goto LABEL_90;
LABEL_79:
    v69 = *(int *)((char *)v62 + v71);
    if (v64 < 9)
      goto LABEL_91;
    goto LABEL_80;
  }
  LOBYTE(v67) = 0;
  v71 = v63[2];
  if (v63[2])
    goto LABEL_79;
LABEL_90:
  LOBYTE(v69) = 0;
  if (v64 < 9)
  {
LABEL_91:
    v68 = 0;
    if (v64 < 7)
    {
      LOBYTE(v70) = 0;
      goto LABEL_96;
    }
    goto LABEL_92;
  }
LABEL_80:
  if (v63[4])
    v68 = *(int *)((char *)v62 + v63[4]);
  else
    v68 = 0;
LABEL_92:
  v72 = v63[3];
  if (v72)
    v70 = *(int *)((char *)v62 + v72);
  else
    LOBYTE(v70) = 0;
LABEL_96:
  v131 = 0;
  AGX::Heap<true>::allocateImpl(&__dst, v125 + 4512, 16, &v131);
  v73 = *(_OWORD *)v130;
  *v126 = __dst;
  v126[1] = v73;
  *(_OWORD *)((char *)v126 + 25) = *(_OWORD *)&v130[9];
  v74 = v131 + (int)*MEMORY[0x24BE51650];
  v75 = *(_QWORD *)(v74 + 48);
  *(_OWORD *)(a1 + 2864) = *(_OWORD *)(v74 + 32);
  *(_QWORD *)(a1 + 2880) = v75;
  v76 = *(_OWORD **)(a1 + 2896);
  v77 = *(_QWORD *)(a1 + 2888);
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)(*(_QWORD *)(a1 + 2912) + 296);
  *(_DWORD *)(a1 + 2840) = 1835008;
  *(_DWORD *)(a1 + 2844) = v65 | (unsigned __int16)(v67 << 8) | (v66 << 16);
  *(_QWORD *)(a1 + 2848) = (unsigned __int16)(v69 << 8) | (v70 << 16) | (v68 << 24);
  *v76 = *(_OWORD *)(a1 + 2840);
  *(_QWORD *)(a1 + 2856) = __ROR8__(v77, 32) & 0xFFFFFFFC000000FFLL | 0x400;
  v78 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v78 >= 0x31u && (v79 = v78[24]) != 0)
  {
    v80 = *(int *)((char *)v31 + v79);
    *(_DWORD *)(a1 + 3000) = v80;
    v82 = v127;
    v81 = v128;
    if (v80)
      goto LABEL_129;
  }
  else
  {
    *(_DWORD *)(a1 + 3000) = 0;
    v82 = v127;
    v81 = v128;
  }
  v83 = (unsigned __int16 *)((char *)v81 - *v81);
  if (*v83 < 5u)
  {
    LODWORD(v84) = 0;
  }
  else
  {
    v84 = v83[2];
    if (v84)
      LODWORD(v84) = *(int *)((char *)v81 + v84);
  }
  v85 = (unsigned __int16 *)((char *)v82 - *v82);
  if (*v85 < 5u)
  {
    LODWORD(v86) = 0;
    if ((_DWORD)v84)
      goto LABEL_109;
LABEL_112:
    v87 = 512;
    if ((_DWORD)v86)
      goto LABEL_110;
    goto LABEL_113;
  }
  v86 = v85[2];
  if (v86)
    LODWORD(v86) = *(int *)((char *)v82 + v86);
  if (!(_DWORD)v84)
    goto LABEL_112;
LABEL_109:
  v87 = 32 * ((3329 - ((4 * (_DWORD)v84 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v84 + 28) & 0xFFFFFFE0));
  if ((_DWORD)v86)
  {
LABEL_110:
    v88 = 0x60000 / ((((_DWORD)v86 << 6) + 448) & 0xFFFFFE00);
    goto LABEL_114;
  }
LABEL_113:
  v88 = 512;
LABEL_114:
  if (v87 >= v88)
    v87 = v88;
  if (v87 > 0x1FF)
  {
    v80 = 512;
    goto LABEL_129;
  }
  if (!(_DWORD)v84)
  {
    v80 = 512;
    if ((_DWORD)v86)
      goto LABEL_119;
LABEL_122:
    v89 = 512;
    goto LABEL_123;
  }
  v80 = 32 * ((3329 - ((4 * (_DWORD)v84 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v84 + 28) & 0xFFFFFFE0));
  if (!(_DWORD)v86)
    goto LABEL_122;
LABEL_119:
  v89 = 0x60000 / ((((_DWORD)v86 << 6) + 448) & 0xFFFFFE00);
LABEL_123:
  if (v80 >= v89)
    v80 = v89;
  if (v80 >= 0x200)
    v80 = 512;
  if (v80 >= 0x21)
    v80 &= 0x3E0u;
LABEL_129:
  *(_DWORD *)(a1 + 2996) = v80;
  v90 = (unsigned __int16 *)((char *)v31 - *v31);
  v91 = *v90;
  if (v91 <= 0x32)
  {
    v94 = 0;
    *(_WORD *)(a1 + 2994) = 0;
    goto LABEL_143;
  }
  v92 = v90[25];
  if (v90[25])
    LOBYTE(v92) = *((_BYTE *)v31 + v92) != 0;
  *(_BYTE *)(a1 + 2994) = v92;
  if (v91 < 0x3B)
  {
    v94 = 0;
    *(_BYTE *)(a1 + 2995) = 0;
    if (v91 < 0x39)
      goto LABEL_143;
  }
  else
  {
    v93 = v90[29];
    if (v90[29])
      LOBYTE(v93) = *((_BYTE *)v31 + v93) != 0;
    *(_BYTE *)(a1 + 2995) = v93;
  }
  v95 = v90[28];
  if (v95)
    v94 = *((_BYTE *)v31 + v95) != 0;
  else
    v94 = 0;
LABEL_143:
  *(_BYTE *)(a1 + 3004) = v94;
  v96 = (unsigned __int16 *)((char *)v82 - *v82);
  if (*v96 < 9u)
  {
    LODWORD(v97) = 0;
  }
  else
  {
    v97 = v96[4];
    if (v97)
      LODWORD(v97) = (*(int *)((char *)v82 + v97) + 3) & 0xFFFFFFFC;
  }
  *(_DWORD *)(a1 + 2984) = v97;
  v98 = (unsigned __int16 *)((char *)v81 - *v81);
  if (*v98 < 0x3Du)
  {
    LODWORD(v99) = 0;
  }
  else
  {
    v99 = v98[30];
    if (v99)
      LODWORD(v99) = (*(int *)((char *)v81 + v99) + 15) & 0xFFFFFFF0;
  }
  *(_DWORD *)(a1 + 2988) = v99;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v14);
  if (((*(_QWORD *)(a1 + 1264) | *(_QWORD *)(a1 + 1288) | *(_QWORD *)(a1 + 1312) | *(_QWORD *)(a1 + 1344) | *(_QWORD *)(a1 + 1368)) & 0x1800000000000000) == 0)
  {
    std::mutex::lock(v124);
    v100 = *(_QWORD *)(a1 + 24);
    if (v100)
    {
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>((std::vector<unsigned int> *)a1, *(uint64_t ***)(a1 + 16), *(_QWORD *)(a1 + 24));
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(a1, v100);
      v101 = *(_QWORD *)(a1 + 16);
      v102 = *(int ***)(v101 + 72);
      v103 = *(int ***)(v101 + 80);
      if (v102 != v103)
      {
        while (2)
        {
          v106 = *v102;
          v107 = **v102;
          v108 = v107 - 11;
          switch(v107)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              goto LABEL_160;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_164;
            default:
              if (v107 == 113)
              {
LABEL_160:
                v109 = v106[1];
                if (v109 < 0)
                  goto LABEL_158;
              }
              else
              {
LABEL_164:
                v109 = v106[1];
                if (v108 > 0x6C)
                  goto LABEL_158;
              }
              v110 = *(_QWORD *)(a1 + 96) + 4 * v106[2];
              v111 = v109 & 0xFFFFF;
              v112 = 56 * (v109 & 0xFFFFF);
              v113 = v112 + 16;
              switch(v108)
              {
                case 0u:
                  *(uint32x4_t *)v110 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v113), (int32x4_t)xmmword_232D737E0), 2uLL);
                  break;
                case 1u:
                  *(_DWORD *)v110 = v113 >> 2;
                  *(_DWORD *)(v110 + 4) = (v113 >> 2) | 1;
                  *(uint32x2_t *)(v110 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v113), (int32x2_t)0xC00000008), 2uLL);
                  break;
                case 2u:
                  v104 = v112 + 48;
                  goto LABEL_156;
                case 5u:
                  v104 = v112 + 52;
                  goto LABEL_156;
                case 6u:
                  v104 = v112 + 56;
                  goto LABEL_156;
                case 0x20u:
                  *(_DWORD *)v110 = 542;
                  break;
                case 0x30u:
                  *(_QWORD *)v110 = 0x1B7000001B6;
                  break;
                case 0x33u:
                  v104 = v112 + 60;
                  goto LABEL_156;
                case 0x35u:
                  *(_QWORD *)v110 = 0x1BB000001BALL;
                  break;
                case 0x49u:
                  *(_DWORD *)v110 = 543;
                  break;
                case 0x52u:
                  if ((v109 & 0xFFF00000) == 0x400000)
                  {
                    *(_DWORD *)v110 = 2;
                  }
                  else
                  {
                    v104 = v112 + 64;
LABEL_156:
                    v105 = v104 >> 2;
LABEL_157:
                    *(_DWORD *)v110 = v105;
                  }
                  break;
                case 0x56u:
                  v114 = 8 * v111 + 1792;
                  goto LABEL_174;
                case 0x57u:
                  v114 = 8 * v111 + 2040;
LABEL_174:
                  v115 = v114 >> 2;
                  *(_DWORD *)v110 = v115;
                  *(_DWORD *)(v110 + 4) = v115 | 1;
                  break;
                case 0x61u:
                  *(_DWORD *)v110 = 544;
                  break;
                case 0x62u:
                  v105 = v109 + 608;
                  goto LABEL_157;
                case 0x63u:
                  v105 = v109 + 671;
                  goto LABEL_157;
                case 0x66u:
                  v104 = 8 * v111 + 2040;
                  goto LABEL_156;
                case 0x6Bu:
                  *(_QWORD *)v110 = 0x1BD000001BCLL;
                  break;
                case 0x6Cu:
                  *(_QWORD *)v110 = 0x1BF000001BELL;
                  break;
                default:
                  break;
              }
LABEL_158:
              if (++v102 != v103)
                continue;
              goto LABEL_186;
          }
        }
      }
LABEL_186:
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, v100);
      v116 = *(_QWORD *)(a1 + 24);
      if (v116)
      {
        v117 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v116);
        MEMORY[0x234927ECC](v117, 0x1030C404D8F7974);
      }
      *(_QWORD *)(a1 + 24) = 0;
      v118 = *(ProgramBindingsAndDMAList **)(a1 + 16);
      if (v118)
      {
        ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v118);
        MEMORY[0x234927ECC]();
      }
      *(_QWORD *)(a1 + 16) = 0;
    }
    std::mutex::unlock(v124);
  }
  return a1;
}

void sub_232CB2710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  std::mutex::~mutex(a15);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v27);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(a11);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(v26);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v25);
  _Unwind_Resume(a1);
}

uint64_t AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::MeshProgramVariant(uint64_t a1, const AGCDeserializedReply *a2)
{
  uint64_t v3;
  void **v4;
  int v5;
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 868) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 489) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_BYTE *)(a1 + 943) = 0;
  *(_OWORD *)(a1 + 911) = 0u;
  *(_OWORD *)(a1 + 927) = 0u;
  *(_OWORD *)(a1 + 895) = 0u;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 1048) = a1 + 1056;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)a1 = &off_250401880;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_QWORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_QWORD *)(a1 + 2272) = 0;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_QWORD *)(a1 + 2320) = 0;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_QWORD *)(a1 + 2416) = 0;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_QWORD *)(a1 + 2472) = 0;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_QWORD *)(a1 + 2520) = 0;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_QWORD *)(a1 + 2568) = 0;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_QWORD *)(a1 + 2664) = 0;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_QWORD *)(a1 + 1408) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_QWORD *)(a1 + 2920) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  v3 = a1 + 2936;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_DWORD *)(a1 + 3040) = 1065353216;
  *(_QWORD *)(a1 + 3056) = 850045863;
  *(_QWORD *)(a1 + 3112) = 0;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  AGX::VertexProgramVaryings::VertexProgramVaryings((AGX::VertexProgramVaryings *)__p, a2);
  if (*(char *)(a1 + 2959) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 16) = v8;
  HIBYTE(v8) = 0;
  LOBYTE(__p[0]) = 0;
  v4 = (void **)(a1 + 2960);
  if (*(char *)(a1 + 2983) < 0)
  {
    operator delete(*v4);
    v5 = SHIBYTE(v8);
    *(_OWORD *)v4 = v9;
    *(_QWORD *)(a1 + 2976) = v10;
    HIBYTE(v10) = 0;
    LOBYTE(v9) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v4 = v9;
    *(_QWORD *)(a1 + 2976) = v10;
  }
  *(_BYTE *)(a1 + 868) = 0;
  *(_QWORD *)(a1 + 3048) = 0;
  return a1;
}

void sub_232CB2A84(_Unwind_Exception *a1)
{
  unint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  std::mutex *v5;

  std::mutex::~mutex(v5);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v4);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(v3);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(v2);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

AGX::VertexProgramVaryings *AGX::VertexProgramVaryings::VertexProgramVaryings(AGX::VertexProgramVaryings *this, const AGCDeserializedReply *a2)
{
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  BOOL v6;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  const void *v16;
  size_t v17;
  unsigned int v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  const void *v23;
  size_t v24;
  unsigned int v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 __dst;
  unint64_t v31;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*((_QWORD *)a2 + 58))
  {
    v3 = (char *)a2 + 464;
    if (!*((_QWORD *)a2 + 59))
      v3 = (char *)a2 + 1024;
  }
  else
  {
    v3 = (char *)a2 + 1024;
  }
  v5 = *(unsigned int **)v3;
  v4 = *((_QWORD *)v3 + 1);
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (int *)((char *)v5 + *v5);
  v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0xDu && (v9 = v8[6]) != 0)
    v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  else
    v10 = 0;
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  v12 = *v11;
  if (v12 >= 0xB)
  {
    if (v11[5])
    {
      v13 = (unsigned int *)((char *)v10 + v11[5] + *(unsigned int *)((char *)v10 + v11[5]));
      if (v12 < 0xD)
        goto LABEL_24;
    }
    else
    {
      v13 = 0;
      if (v12 < 0xD)
        goto LABEL_24;
    }
    v14 = v11[6];
    if (v14)
    {
      v15 = (unsigned int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
      if (!v13)
        return this;
      goto LABEL_25;
    }
LABEL_24:
    v15 = 0;
    if (!v13)
      return this;
LABEL_25:
    v18 = *v13;
    v16 = v13 + 1;
    v17 = v18;
    if (v18 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_dst = (__int128 *)operator new(v20 + 1);
      *((_QWORD *)&__dst + 1) = v17;
      v31 = v21 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = v17;
      p_dst = &__dst;
      if (!(_DWORD)v17)
      {
LABEL_32:
        *((_BYTE *)p_dst + v17) = 0;
        if (*((char *)this + 23) < 0)
          operator delete(*(void **)this);
        v22 = (void **)((char *)this + 24);
        *(_OWORD *)this = __dst;
        *((_QWORD *)this + 2) = v31;
        v25 = *v15;
        v23 = v15 + 1;
        v24 = v25;
        if (v25 >= 0x17)
        {
          v27 = (v24 & 0xFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v27 = v24 | 7;
          v28 = v27 + 1;
          v26 = (__int128 *)operator new(v27 + 1);
          *((_QWORD *)&__dst + 1) = v24;
          v31 = v28 | 0x8000000000000000;
          *(_QWORD *)&__dst = v26;
        }
        else
        {
          HIBYTE(v31) = v24;
          v26 = &__dst;
          if (!(_DWORD)v24)
            goto LABEL_41;
        }
        memmove(v26, v23, v24);
LABEL_41:
        *((_BYTE *)v26 + v24) = 0;
        if (*((char *)this + 47) < 0)
          operator delete(*v22);
        *(_OWORD *)v22 = __dst;
        *((_QWORD *)this + 5) = v31;
        return this;
      }
    }
    memmove(p_dst, v16, v17);
    goto LABEL_32;
  }
  return this;
}

void sub_232CB2CD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if (*(char *)(v1 + 23) < 0)
    {
LABEL_5:
      operator delete(*(void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v1 + 23) < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

unint64_t AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8, void *a9)
{
  _QWORD *v16;
  unsigned int **v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  unsigned int **v41;
  int *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  int *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v54;
  __int128 v55;
  _OWORD v56[2];
  uint64_t v57;

  v16 = (_QWORD *)AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(a1, a2, a3, a4, a5, a8);
  *v16 = &off_2504018A0;
  v54 = (uint64_t)(v16 + 155);
  AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariantPDSState((uint64_t)(v16 + 155), a2, (unsigned int **)a3, a5, (__int128 *)(a1 + 520), a6, a8);
  *(_QWORD *)(a1 + 3688) = 0;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_DWORD *)(a1 + 3760) = 0;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 3784) = 0u;
  *(_DWORD *)(a1 + 3800) = 1065353216;
  *(_QWORD *)(a1 + 3808) = a9;
  *(_DWORD *)(a1 + 3816) = 0;
  *(_QWORD *)(a1 + 3824) = 850045863;
  *(_QWORD *)(a1 + 3880) = 0;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  if (*(_QWORD *)(a3 + 464))
  {
    v17 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v17 = (unsigned int **)(a3 + 464);
  }
  else
  {
    v17 = (unsigned int **)(a3 + 1024);
  }
  v18 = 0;
  if (*v17 && v17[1])
    v18 = (int *)((char *)*v17 + **v17);
  v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 7u && (v20 = v19[3]) != 0)
    v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  else
    v21 = 0;
  v22 = *(_DWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 920);
  *(_DWORD *)(a1 + 2828) += v22;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v54);
  VisibleFunctionsMap::populate<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*)),AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>>(a1 + 3768, (_QWORD *)a3, a1);
  v23 = a2 + 4512;
  *(_DWORD *)(a1 + 3600) = ((a7[5] & 1) << 18) | ~(-1 << a7[4]) | (a7[3] << 24);
  v24 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v24 < 0x11u)
  {
    v25 = 0;
  }
  else
  {
    v25 = (int *)v24[8];
    if (v25)
      v25 = (int *)((char *)v25 + (_QWORD)v21 + *(unsigned int *)((char *)v25 + (_QWORD)v21));
  }
  v26 = (unsigned __int16 *)((char *)v25 - *v25);
  v27 = *v26;
  if (v27 < 0xB)
  {
    LOBYTE(v28) = 0;
    LOBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    LOBYTE(v31) = 0;
    v32 = 0;
    v33 = 0;
    if (v27 < 5)
      goto LABEL_41;
    v34 = v26[2];
    if (v26[2])
      goto LABEL_24;
    goto LABEL_35;
  }
  if (v26[5])
  {
    v28 = *(int *)((char *)v25 + v26[5]);
    if (v27 >= 0xF)
      goto LABEL_20;
LABEL_28:
    LOBYTE(v29) = 0;
    if (v27 < 0xD)
    {
      LOBYTE(v30) = 0;
      v34 = v26[2];
      if (v26[2])
        goto LABEL_24;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  LOBYTE(v28) = 0;
  if (v27 < 0xF)
    goto LABEL_28;
LABEL_20:
  if (v26[7])
    v29 = *(int *)((char *)v25 + v26[7]);
  else
    LOBYTE(v29) = 0;
LABEL_33:
  if (v26[6])
  {
    v30 = *(int *)((char *)v25 + v26[6]);
    v34 = v26[2];
    if (!v26[2])
      goto LABEL_35;
LABEL_24:
    v31 = *(int *)((char *)v25 + v34);
    if (v27 < 9)
      goto LABEL_36;
LABEL_25:
    if (v26[4])
      v32 = *(int *)((char *)v25 + v26[4]);
    else
      v32 = 0;
    goto LABEL_37;
  }
  LOBYTE(v30) = 0;
  v34 = v26[2];
  if (v26[2])
    goto LABEL_24;
LABEL_35:
  LOBYTE(v31) = 0;
  if (v27 >= 9)
    goto LABEL_25;
LABEL_36:
  v32 = 0;
  if (v27 < 7)
  {
    v33 = 0;
    goto LABEL_41;
  }
LABEL_37:
  v35 = v26[3];
  if (v35)
    v33 = *(int *)((char *)v25 + v35) << 16;
  else
    v33 = 0;
LABEL_41:
  v57 = 0;
  AGX::Heap<true>::allocateImpl(&v55, v23, 16, &v57);
  *(_DWORD *)(a1 + 3816) += LODWORD(v56[0]);
  v36 = v56[0];
  *(_OWORD *)(a1 + 3656) = v55;
  *(_OWORD *)(a1 + 3672) = v36;
  *(_OWORD *)(a1 + 3681) = *(_OWORD *)((char *)v56 + 9);
  v37 = v57 + (int)*MEMORY[0x24BE51650];
  v38 = *(_QWORD *)(v37 + 48);
  *(_OWORD *)(a1 + 3632) = *(_OWORD *)(v37 + 32);
  *(_QWORD *)(a1 + 3648) = v38;
  v39 = *(_OWORD **)(a1 + 3664);
  v40 = *(_QWORD *)(a1 + 3656);
  *(_QWORD *)(a1 + 2112) = *(_QWORD *)(*(_QWORD *)(a1 + 3680) + 296);
  *(_DWORD *)(a1 + 3604) = 1835008;
  *(_DWORD *)(a1 + 3608) = v28 | (unsigned __int16)(v30 << 8) | (v29 << 16);
  *(_QWORD *)(a1 + 3612) = v33 | (v31 << 8) | (v32 << 24);
  *v39 = *(_OWORD *)(a1 + 3604);
  *(_QWORD *)(a1 + 3620) = __ROR8__(v40, 32) & 0xFFFFFFFC000000FFLL | 0x400;
  *(_QWORD *)(a1 + 3752) = 0;
  if (*(_QWORD *)(a3 + 464))
  {
    v41 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v41 = (unsigned int **)(a3 + 464);
  }
  else
  {
    v41 = (unsigned int **)(a3 + 1024);
  }
  v42 = 0;
  if (*v41 && v41[1])
    v42 = (int *)((char *)*v41 + **v41);
  v43 = (unsigned __int16 *)((char *)v42 - *v42);
  if (*v43 >= 0x11u)
  {
    v44 = v43[8];
    if (v44)
    {
      v45 = (int *)((char *)v42 + v44 + *(unsigned int *)((char *)v42 + v44));
      v46 = (unsigned __int16 *)((char *)v45 - *v45);
      v47 = *v46;
      if (v47 <= 4)
      {
        *(_DWORD *)(a1 + 3752) = 0;
      }
      else
      {
        v48 = v46[2];
        if (v46[2])
          LODWORD(v48) = *((char *)v45 + v48);
        *(_DWORD *)(a1 + 3752) = v48;
        if (v47 >= 9)
        {
          v49 = v46[4];
          if (v46[4])
            LODWORD(v49) = *((char *)v45 + v49);
          *(_DWORD *)(a1 + 3756) = v49;
          if (v47 >= 0xF)
          {
            v50 = v46[7];
            if (v46[7])
              LODWORD(v50) = *((char *)v45 + v50);
            *(_DWORD *)(a1 + 3760) = v50;
            v52 = v47 >= 0x11 && (v51 = v46[8]) != 0 && *((_BYTE *)v45 + v51) != 0;
            goto LABEL_66;
          }
LABEL_65:
          v52 = 0;
          *(_DWORD *)(a1 + 3760) = 0;
LABEL_66:
          *(_BYTE *)(a1 + 3765) = v52;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(a1 + 3756) = 0;
      goto LABEL_65;
    }
  }
LABEL_67:
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v54);
  if (!(*(_QWORD *)(a1 + 2832) & 0x1800000000000000 | (*(_QWORD *)(a1 + 1288) | *(_QWORD *)(a1 + 1264)) & 0x1800000000000000 | (*(_QWORD *)(a1 + 1312) | *(_QWORD *)(a1 + 1344) | *(_QWORD *)(a1 + 1368)) & 0x1800000000000000))
    AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(a1);
  return a1;
}

void sub_232CB322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, void **a12, uint64_t a13)
{
  unint64_t v13;

  std::mutex::~mutex(a10);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a11);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(a12);
  AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariantPDSState(a13);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v13);
  _Unwind_Resume(a1);
}

void VisibleFunctionsMap::populate<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*)),AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  BOOL v8;
  BOOL v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  unint64_t v35;
  uint64_t v36;

  if (a2[63])
  {
    v4 = a2 + 63;
    v5 = 63;
    if (!a2[64])
    {
      v5 = 133;
      v4 = a2 + 133;
    }
    v6 = v4[1];
    v7 = (unsigned int *)a2[v5];
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
      return;
  }
  else
  {
    v7 = (unsigned int *)a2[133];
    if (a2[134])
      v9 = v7 == 0;
    else
      v9 = 1;
    if (v9)
      return;
  }
  v10 = (int *)((char *)v7 + *v7);
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 7u)
  {
    v12 = v11[3];
    if (v12)
    {
      v13 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
      v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 5u)
      {
        v15 = v14[2];
        if (v15)
        {
          v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
          v17 = *v16;
          if ((_DWORD)v17)
          {
            v18 = 0;
            v19 = *(_QWORD *)(a3 + 512);
            v20 = 4 * v17;
            do
            {
              v21 = v16[v18 / 4 + 1];
              v22 = v21 - *(int *)((char *)&v16[v18 / 4 + 1] + v21);
              v23 = (char *)&v16[v18 / 4] + v22;
              v24 = *((unsigned __int16 *)v23 + 2);
              if (v24 < 5)
              {
                v28 = 0;
                v26 = 4;
              }
              else
              {
                v25 = *((unsigned __int16 *)v23 + 4);
                if (v25)
                  v25 += (uint64_t)&v16[v18 / 4 + 1] + v21 + *(unsigned int *)((char *)&v16[v18 / 4 + 1] + v21 + v25);
                v26 = v25 + 4;
                if (v24 >= 7 && (v27 = *(unsigned __int16 *)((char *)&v16[v18 / 4 + 2] + v22 + 2)) != 0)
                  v28 = *(_QWORD *)((char *)&v16[v18 / 4 + 1] + v21 + v27);
                else
                  v28 = 0;
              }
              v29 = strlen((const char *)v26);
              if (v29 >= 0x7FFFFFFFFFFFFFF8)
                abort();
              v30 = (void *)v29;
              if (v29 >= 0x17)
              {
                v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v32 = v29 | 7;
                v33 = v32 + 1;
                v31 = operator new(v32 + 1);
                __p[1] = v30;
                v35 = v33 | 0x8000000000000000;
                __p[0] = v31;
              }
              else
              {
                HIBYTE(v35) = v29;
                v31 = __p;
                if (!v29)
                  goto LABEL_37;
              }
              memmove(v31, (const void *)v26, (size_t)v30);
LABEL_37:
              *((_BYTE *)v30 + (_QWORD)v31) = 0;
              v36 = v28 + v19;
              std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(a1, (uint64_t)__p, (uint64_t)__p);
              if (SHIBYTE(v35) < 0)
                operator delete(__p[0]);
              v18 += 4;
            }
            while (v20 != v18);
          }
        }
      }
    }
  }
}

void sub_232CB34B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  int **v5;
  int **v6;
  unsigned int v7;
  int *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  ProgramBindingsAndDMAList *v20;

  v2 = (std::mutex *)(a1 + 3824);
  std::mutex::lock((std::mutex *)(a1 + 3824));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>((std::vector<unsigned int> *)a1, *(uint64_t ***)(a1 + 16), *(_QWORD *)(a1 + 24));
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(a1, v3);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(int ***)(v4 + 72);
    v6 = *(int ***)(v4 + 80);
    if (v5 != v6)
    {
      while (2)
      {
        v8 = *v5;
        v9 = **v5;
        v10 = v9 - 11;
        switch(v9)
        {
          case 11:
          case 12:
          case 13:
          case 16:
          case 17:
          case 62:
          case 93:
          case 97:
          case 98:
            goto LABEL_8;
          case 14:
          case 15:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 94:
          case 95:
          case 96:
            goto LABEL_12;
          default:
            if (v9 == 113)
            {
LABEL_8:
              v11 = v8[1];
              if ((v11 & 0x80000000) != 0)
                goto LABEL_6;
            }
            else
            {
LABEL_12:
              v11 = v8[1];
              if (v10 > 0x78)
                goto LABEL_6;
            }
            v12 = *(_QWORD *)(a1 + 96) + 4 * v8[2];
            v13 = v11 & 0xFFFFF;
            v14 = 56 * (v11 & 0xFFFFF);
            v15 = v14 + 16;
            switch(v10)
            {
              case 0u:
                *(uint32x4_t *)v12 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v15), (int32x4_t)xmmword_232D737E0), 2uLL);
                break;
              case 1u:
                *(_DWORD *)v12 = v15 >> 2;
                *(_DWORD *)(v12 + 4) = (v15 >> 2) | 1;
                *(uint32x2_t *)(v12 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v15), (int32x2_t)0xC00000008), 2uLL);
                break;
              case 2u:
                v7 = (v14 + 48) >> 2;
                goto LABEL_5;
              case 5u:
                v7 = (v14 + 52) >> 2;
                goto LABEL_5;
              case 6u:
                v7 = (v14 + 56) >> 2;
                goto LABEL_5;
              case 0x30u:
                *(_QWORD *)v12 = 0x1B7000001B6;
                break;
              case 0x31u:
                if (v11 > 0x10)
                  v7 = 0;
                else
                  v7 = dword_232D767D8[v11];
                goto LABEL_5;
              case 0x32u:
                *(_DWORD *)v12 = 542;
                break;
              case 0x33u:
                v7 = (v14 + 60) >> 2;
                goto LABEL_5;
              case 0x35u:
                *(_QWORD *)v12 = 0x21900000218;
                break;
              case 0x3Fu:
                goto LABEL_27;
              case 0x49u:
                *(_DWORD *)v12 = 560;
                break;
              case 0x4Au:
                *(_DWORD *)v12 = 561;
                break;
              case 0x52u:
                if ((v11 & 0xFFF00000) == 0x400000)
                {
LABEL_27:
                  *(_DWORD *)v12 = 2;
                }
                else
                {
                  v7 = (v14 + 64) >> 2;
LABEL_5:
                  *(_DWORD *)v12 = v7;
                }
                break;
              case 0x56u:
                v16 = 8 * v13 + 1768;
                goto LABEL_30;
              case 0x57u:
                v16 = 8 * v13 + 2016;
LABEL_30:
                v17 = v16 >> 2;
                *(_DWORD *)v12 = v17;
                *(_DWORD *)(v12 + 4) = v17 | 1;
                break;
              case 0x61u:
                *(_DWORD *)v12 = 562;
                break;
              case 0x62u:
                v7 = v11 + 657;
                goto LABEL_5;
              case 0x63u:
                v7 = v11 + 720;
                goto LABEL_5;
              case 0x66u:
                v7 = (8 * v13 + 2016) >> 2;
                goto LABEL_5;
              case 0x6Bu:
                *(_QWORD *)v12 = 0x21B0000021ALL;
                break;
              case 0x6Cu:
                *(_QWORD *)v12 = 0x21D0000021CLL;
                break;
              case 0x78u:
                v7 = (v11 + 563) & 0x3FFFFFFF;
                goto LABEL_5;
              default:
                break;
            }
LABEL_6:
            if (++v5 != v6)
              continue;
            goto LABEL_39;
        }
      }
    }
LABEL_39:
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, v3);
    v18 = *(_QWORD *)(a1 + 24);
    if (v18)
    {
      v19 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v18);
      MEMORY[0x234927ECC](v19, 0x1030C404D8F7974);
    }
    *(_QWORD *)(a1 + 24) = 0;
    v20 = *(ProgramBindingsAndDMAList **)(a1 + 16);
    if (v20)
    {
      ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v20);
      MEMORY[0x234927ECC]();
    }
    *(_QWORD *)(a1 + 16) = 0;
  }
  std::mutex::unlock(v2);
}

void sub_232CB37A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::FragmentProgramVariant()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int **v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int **v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  const char *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _WORD *v57;
  const void *v58;
  size_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t *v63;
  unsigned __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  unsigned int *v128;
  unsigned int **v129;
  int *v130;
  unsigned __int16 *v131;
  uint64_t v132;
  int *v133;
  unsigned int **v134;
  int *v135;
  unsigned __int16 *v136;
  uint64_t v137;
  int *v138;
  unsigned int *v139;
  unsigned int **v140;
  int *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  std::mutex *v144;
  unsigned int **v145;
  int *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  int *v149;
  unsigned int **v150;
  int *v151;
  unsigned __int16 *v152;
  uint64_t v153;
  int *v154;
  unsigned __int16 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  unsigned __int16 *v163;
  unsigned int v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int16 *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int16 *v195;
  _BOOL4 v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  unsigned __int16 *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  int v215;
  std::string *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  int *v234;
  unsigned __int16 *v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int16 *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  unsigned __int16 *v247;
  uint64_t v248;
  int *v249;
  unsigned __int16 *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  _DWORD *v254;
  int *v255;
  unsigned __int16 *v256;
  uint64_t v257;
  int v258;
  __int128 v259;
  __int128 v260;
  _BOOL4 v261;
  unsigned __int16 *v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  __int128 v267;
  _DWORD *v268;
  uint64_t v269;
  unsigned __int16 *v270;
  uint64_t v271;
  int v272;
  int v273;
  _BOOL4 v274;
  int v275;
  unsigned __int16 *v276;
  uint64_t v277;
  unsigned int **v278;
  int v279;
  int v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  unsigned __int16 *v286;
  uint64_t v287;
  int v288;
  unsigned __int16 *v289;
  uint64_t v290;
  int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned __int16 *v295;
  uint64_t v296;
  _QWORD *v297;
  unsigned __int16 *v298;
  uint64_t v299;
  int v300;
  int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  unsigned __int16 *v306;
  uint64_t v307;
  int v308;
  unsigned __int16 *v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned __int16 *v314;
  uint64_t v315;
  unsigned __int16 *v316;
  uint64_t v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  int v322;
  unsigned __int16 *v323;
  uint64_t v324;
  unsigned __int16 *v325;
  uint64_t v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  unsigned __int16 *v332;
  uint64_t v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int *v336;
  unsigned int *v337;
  uint64_t v338;
  unsigned int v339;
  unsigned int *v340;
  uint32x2_t *v341;
  int *v342;
  unsigned __int16 *v343;
  unsigned int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint32x2_t *v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  int v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  int *v364;
  double v365;
  double v366;
  int8x16_t v367;
  int64_t v368;
  unsigned __int16 *v369;
  unsigned __int16 *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  _WORD *v374;
  unsigned __int16 *v375;
  unsigned __int16 *v376;
  unsigned __int16 *v377;
  unsigned __int16 *v378;
  __int16 *v379;
  unint64_t v380;
  __int16 *v381;
  int v382;
  __int16 v383;
  unsigned int v384;
  __int16 v385;
  __int16 v386;
  int v387;
  __int16 v388;
  unsigned int v389;
  __int16 v390;
  __int16 v391;
  unsigned int *v392;
  unsigned __int16 *v393;
  uint64_t v394;
  _BOOL4 v395;
  unsigned int v396;
  unsigned int v397;
  int v398;
  char *v399;
  unint64_t v400;
  unint64_t v401;
  BOOL v402;
  char v403;
  BOOL v404;
  uint64_t v405;
  uint64_t v406;
  int32x4_t v407;
  uint16x8_t v408;
  int8x16_t v409;
  int8x16_t v410;
  const __int16 *v411;
  uint64_t v412;
  uint16x8_t v413;
  int8x16_t v414;
  unsigned __int16 *v415;
  uint64_t v416;
  int v417;
  uint64_t v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  int v422;
  int v423;
  int v424;
  unsigned __int16 *v425;
  uint64_t v426;
  unsigned __int16 *v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  _DWORD *v432;
  uint64_t v433;
  unsigned int v434;
  char *v435;
  uint64_t v436;
  __int16 v437;
  __int16 v438;
  __int128 v439;
  uint64_t v440;
  int8x16_t *v441;
  int8x16_t v442;
  int8x16_t v443;
  BOOL v444;
  int8x16_t v445;
  uint64_t v446;
  uint64_t v447;
  int8x16_t v448;
  int8x8_t v449;
  uint64_t v450;
  unsigned int *v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  unsigned int *v455;
  unsigned int **v456;
  int *v457;
  unsigned __int16 *v458;
  uint64_t v459;
  unsigned int **v460;
  int *v461;
  unsigned __int16 *v462;
  uint64_t v463;
  int *v464;
  unsigned int *v465;
  unsigned int **v466;
  int *v467;
  unsigned __int16 *v468;
  uint64_t v469;
  unsigned int **v470;
  int *v471;
  unsigned __int16 *v472;
  uint64_t v473;
  int *v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int *v478;
  int *v479;
  unsigned __int16 *v480;
  uint64_t v481;
  int *v482;
  unsigned __int16 *v483;
  uint64_t v484;
  unsigned int *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  char *v490;
  unsigned int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  size_t v496;
  std::string::size_type v497;
  void *v498;
  uint64_t v499;
  uint64_t v500;
  unsigned int **v501;
  int *v502;
  unsigned __int16 *v503;
  uint64_t v504;
  int *v505;
  unsigned __int16 *v506;
  unsigned int v507;
  unsigned int *v508;
  uint64_t v509;
  unsigned int *v510;
  char v511;
  std::string::size_type v512;
  char v513;
  BOOL v514;
  unsigned __int16 *v515;
  unsigned int v516;
  uint64_t v517;
  int *v518;
  unsigned __int16 *v519;
  unsigned int v520;
  uint64_t v521;
  unsigned __int16 *v522;
  unsigned int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unsigned __int16 *v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  uint64_t v531;
  std::string::size_type v532;
  const void *v533;
  unsigned int v534;
  void *v535;
  unsigned __int16 *v536;
  uint64_t v537;
  unsigned __int16 *v538;
  uint64_t v539;
  unsigned __int16 *v540;
  uint64_t v541;
  int v542;
  unsigned __int8 v543;
  unsigned __int16 *v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int *v551;
  unsigned __int16 *v552;
  uint64_t v553;
  char v554;
  unsigned __int16 *v555;
  unsigned int v556;
  char v557;
  BOOL v558;
  uint64_t v559;
  int *v560;
  unsigned __int16 *v561;
  uint64_t v562;
  int *v563;
  unsigned __int16 *v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  std::string::size_type v569;
  const void *v570;
  unsigned int v571;
  void *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned __int16 *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int *v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  unsigned int v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  int v592;
  int v593;
  unsigned __int16 *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int **v598;
  int **v599;
  unsigned int v600;
  int *v601;
  int v602;
  unsigned int v603;
  int v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  int v609;
  unsigned int v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  unsigned int v615;
  unsigned int v616;
  int32x4_t *v617;
  int32x4_t v618;
  uint64_t v619;
  int32x4_t v620;
  uint64_t v621;
  _DWORD *v622;
  uint64_t v623;
  uint64_t v624;
  ProgramBindingsAndDMAList *v625;
  unsigned int v627;
  void *v628;
  uint64_t v629;
  int v630;
  unsigned int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  std::mutex *v635;
  std::mutex *v636;
  _BOOL4 v637;
  std::mutex *v638;
  unsigned int v639;
  _OWORD *v640;
  unint64_t v641;
  unsigned int **v642;
  uint64_t v643;
  uint64_t v644;
  unsigned int **v645;
  unint64_t ***v646;
  _OWORD *v647;
  int *v648;
  uint64_t v649;
  int *v650;
  uint64_t v651;
  int v652;
  int *v653;
  void *v654;
  void *v655;
  uint64_t v656;
  int v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  __int16 v661;
  uint64_t v662;
  __int128 v663;
  _OWORD v664[2];
  __int128 v665;
  _OWORD v666[2];
  std::string __p[2];
  void *v668;
  char v669;
  unsigned int v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  __int128 v677;
  _OWORD v678[14];
  unsigned __int16 *v679;
  unsigned __int16 *v680;
  unsigned __int16 *v681;
  unsigned __int16 *v682;
  __int128 v683;
  _OWORD v684[2];
  uint64_t v685;
  int16x8x2_t v686;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v634 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v0;
  v685 = *MEMORY[0x24BDAC8D0];
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  v649 = v7;
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v12, v11, (uint64_t)v9, __p, v7, v13);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  *(_QWORD *)v12 = &off_2504018C0;
  v641 = v5 + 112;
  v652 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  bzero((void *)(v12 + 1248), 0x2E9uLL);
  *(_OWORD *)(v12 + 2000) = *(_OWORD *)(v12 + 520);
  *(_QWORD *)(v12 + 2016) = *(_QWORD *)(v12 + 536);
  *(_QWORD *)(v12 + 2040) = 0;
  *(_OWORD *)(v12 + 2112) = 0u;
  *(_OWORD *)(v12 + 2128) = 0u;
  *(_OWORD *)(v12 + 2144) = 0u;
  *(_OWORD *)(v12 + 2160) = 0u;
  *(_OWORD *)(v12 + 2176) = 0u;
  *(_OWORD *)(v12 + 2192) = 0u;
  *(_OWORD *)(v12 + 2208) = 0u;
  *(_OWORD *)(v12 + 2224) = 0u;
  *(_DWORD *)(v12 + 2240) = 0;
  *(_OWORD *)(v12 + 2248) = 0u;
  *(_OWORD *)(v12 + 2264) = 0u;
  *(_OWORD *)(v12 + 2280) = 0u;
  *(_OWORD *)(v12 + 2296) = 0u;
  *(_OWORD *)(v12 + 2312) = 0u;
  *(_OWORD *)(v12 + 2328) = 0u;
  *(_OWORD *)(v12 + 2344) = 0u;
  *(_OWORD *)(v12 + 2360) = 0u;
  *(_OWORD *)(v12 + 2376) = 0u;
  *(_OWORD *)(v12 + 2392) = 0u;
  *(_OWORD *)(v12 + 2408) = 0u;
  *(_OWORD *)(v12 + 2424) = 0u;
  *(_OWORD *)(v12 + 2440) = 0u;
  *(_OWORD *)(v12 + 2456) = 0u;
  *(_OWORD *)(v12 + 2472) = 0u;
  *(_OWORD *)(v12 + 2488) = 0u;
  *(_OWORD *)(v12 + 2504) = 0u;
  *(_OWORD *)(v12 + 2520) = 0u;
  *(_OWORD *)(v12 + 2536) = 0u;
  *(_OWORD *)(v12 + 2552) = 0u;
  *(_OWORD *)(v12 + 2568) = 0u;
  *(_OWORD *)(v12 + 2584) = 0u;
  *(_OWORD *)(v12 + 2600) = 0u;
  *(_OWORD *)(v12 + 2616) = 0u;
  *(_OWORD *)(v12 + 2632) = 0u;
  *(_OWORD *)(v12 + 2648) = 0u;
  *(_OWORD *)(v12 + 2664) = 0u;
  *(_OWORD *)(v12 + 2680) = 0u;
  *(_OWORD *)(v12 + 2696) = 0u;
  *(_OWORD *)(v12 + 2712) = 0u;
  *(_OWORD *)(v12 + 2728) = 0u;
  *(_OWORD *)(v12 + 2744) = 0u;
  *(_OWORD *)(v12 + 2816) = 0u;
  *(_OWORD *)(v12 + 2800) = 0u;
  *(_OWORD *)(v12 + 2784) = 0u;
  *(_QWORD *)(v12 + 2832) = v11;
  *(_QWORD *)(v12 + 2840) = 0;
  if (v9[28])
  {
    v14 = v9 + 98;
    if (v9[29])
      v14 = v9 + 28;
  }
  else
  {
    v14 = v9 + 98;
  }
  v15 = 0;
  if (*v14 && v14[1])
    v15 = (int *)((char *)*v14 + **v14);
  v16 = (unsigned __int16 *)((char *)v15 - *v15);
  v642 = v9 + 28;
  v644 = v12 + 1240;
  if (*v16 >= 5u && (v17 = v16[2]) != 0)
    v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  else
    v18 = 0;
  if (v9[58])
  {
    v19 = v9 + 128;
    if (v9[59])
      v19 = v9 + 58;
  }
  else
  {
    v19 = v9 + 128;
  }
  v20 = 0;
  if (*v19 && v19[1])
    v20 = (int *)((char *)*v19 + **v19);
  v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 5u && (v22 = v21[2]) != 0)
    v23 = (int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
  else
    v23 = 0;
  LODWORD(v24) = 0;
  if (v652)
    v25 = 3;
  else
    v25 = 0;
  v639 = v25;
  v26 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v26 >= 7u)
  {
    v24 = v26[3];
    if (v26[3])
      LODWORD(v24) = *(int *)((char *)v23 + v24);
  }
  *(_DWORD *)(v12 + 2776) = v24;
  v27 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v27 >= 0x13u && (v28 = v27[9]) != 0)
    v29 = (char *)v23 + v28 + *(unsigned int *)((char *)v23 + v28) + 4;
  else
    v29 = "";
  v646 = (unint64_t ***)(v12 + 2808);
  MEMORY[0x234927D28](v12 + 2784, v29);
  v30 = (unsigned __int16 *)((char *)v18 - (int)*v18);
  v31 = *(unsigned int *)((char *)v18 + v30[15] + *(unsigned int *)((char *)v18 + v30[15]));
  v32 = (_QWORD *)v7;
  if (v30[13])
    v33 = *(unsigned int *)((char *)v18 + v30[13]);
  else
    v33 = 0;
  v34 = v33;
  if (*(_BYTE *)(v7 + 392))
    v35 = ((*(_QWORD *)(v7 + 224) + *(_QWORD *)(v7 + 200) - (*(_QWORD *)(v7 + 216) + *(_QWORD *)(v7 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
        + ((*(_QWORD *)(v7 + 376) + *(_QWORD *)(v7 + 328) - (*(_QWORD *)(v7 + 368) + *(_QWORD *)(v7 + 320))) & 0xFFFFFFFFFFFFFFFELL)
        + 8;
  else
    v35 = 0;
  v36 = v30[4];
  v37 = *(unsigned int *)((char *)v18 + v36);
  v38 = (unsigned int *)((char *)v18 + v36 + v37);
  v39 = *v38;
  v651 = (uint64_t)v9;
  v645 = v9 + 58;
  v633 = v5;
  v628 = v2;
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = 4 * v39;
    v42 = (char *)v18 + v36 + v37;
    while (1)
    {
      v43 = v38[v40 / 4 + 1];
      v44 = &v42[v40 + v43 - *(int *)((char *)&v38[v40 / 4 + 1] + v43)];
      if (*((unsigned __int16 *)v44 + 2) >= 5u)
      {
        v45 = *((unsigned __int16 *)v44 + 4);
        if (v45)
        {
          if (v42[v40 + 4 + v43 + v45] == 9)
            break;
        }
      }
      v40 += 4;
      if (v41 == v40)
        goto LABEL_50;
    }
    v46 = 0;
    v31 += 8;
  }
  else
  {
LABEL_50:
    v46 = 1;
  }
  v629 = v11;
  v635 = (std::mutex *)(v11 + 4512);
  v47 = (v31 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v34)
    v48 = (v31 + 7) & 0x3FFFFFFF8;
  else
    v48 = v31;
  if (v35 + v34 + v48)
  {
    AGX::Heap<true>::allocateImpl(__p, (uint64_t)v635 + 168 * v639, v35 + v34 + v48, (_QWORD *)(v12 + 2168));
    *(_DWORD *)(v12 + 2844) += LODWORD(__p[0].__r_.__value_.__r.__words[2]);
    v49 = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
    *(_OWORD *)(v12 + 2456) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *(_OWORD *)(v12 + 2472) = v49;
    *(_OWORD *)(v12 + 2481) = *(_OWORD *)((char *)&__p[1].__r_.__value_.__l.__data_ + 1);
    v50 = *(_QWORD **)(v12 + 2464);
    if (v652)
      v51 = *(_QWORD *)(v12 + 2456) + 0x300000000;
    else
      v51 = *(_QWORD *)(v12 + 2456);
    *(_QWORD *)(v12 + 2032) = 0;
    if (v31)
    {
      *(_QWORD *)(v12 + 2088) = v51;
      if ((v46 & 1) != 0)
      {
        v52 = v50;
      }
      else
      {
        *(_QWORD *)(v12 + 2096) = v51;
        *(_QWORD *)(v12 + 2088) = v51 + 8;
        *v50 = v51 + 8;
        v52 = v50 + 1;
      }
      v53 = (int)*v18;
      v54 = *(unsigned __int16 *)((char *)v18 - v53 + 30);
      if (*(_WORD *)((char *)v18 - v53 + 30))
      {
        v55 = *(unsigned int *)((char *)v18 + v54);
        v56 = (char *)v18 + v54 + v55;
      }
      else
      {
        v54 = 0;
        v56 = 0;
        v55 = *v18;
      }
      memcpy(v52, v56 + 4, *(unsigned int *)((char *)v18 + v54 + v55));
      *(_QWORD *)(v12 + 2704) = v52;
      *(_QWORD *)(v12 + 2696) = *(_QWORD *)(v12 + 2088);
    }
    if ((_DWORD)v34)
    {
      *(_QWORD *)(v12 + 2104) = v51 + v47;
      *(_QWORD *)(v12 + 1256) = (char *)v50 + v47;
    }
    v32 = (_QWORD *)v649;
    if (v35)
    {
      *(_QWORD *)(v12 + 2032) = v48 + v34 + v51;
      v57 = (_WORD *)((char *)v50 + v48 + v34);
      v58 = *(const void **)(v649 + 192);
      v59 = *(_QWORD *)(v649 + 200) - (_QWORD)v58;
      *v57 = v59 >> 2;
      v57[1] = (*(_DWORD *)(v649 + 224) - *(_DWORD *)(v649 + 216)) >> 2;
      v57[2] = (*(_DWORD *)(v649 + 328) - *(_DWORD *)(v649 + 320)) >> 1;
      v57[3] = (*(_DWORD *)(v649 + 376) - *(_DWORD *)(v649 + 368)) >> 1;
      v60 = v649;
      memcpy(v57 + 4, v58, v59);
      v61 = (char *)v57 + *(_QWORD *)(v60 + 200) - *(_QWORD *)(v60 + 192) + 8;
      memcpy(v61, *(const void **)(v60 + 216), *(_QWORD *)(v60 + 224) - *(_QWORD *)(v60 + 216));
      v62 = &v61[*(_QWORD *)(v60 + 224) - *(_QWORD *)(v60 + 216)];
      memcpy(v62, *(const void **)(v60 + 320), *(_QWORD *)(v60 + 328) - *(_QWORD *)(v60 + 320));
      memcpy(&v62[*(_QWORD *)(v60 + 328) - *(_QWORD *)(v60 + 320)], *(const void **)(v60 + 368), *(_QWORD *)(v60 + 376) - *(_QWORD *)(v60 + 368));
      if (!v57[2])
        v57[2] = *v57;
      v32 = (_QWORD *)v649;
      if (!v57[3])
        v57[3] = v57[1];
    }
  }
  v63 = (uint64_t *)(v12 + 1288);
  v64 = (unsigned __int16 *)((char *)v18 - (int)*v18);
  v65 = v64[8];
  v66 = *(unsigned int *)((char *)v18 + v65);
  v67 = (unsigned int *)((char *)v18 + v65 + v66);
  v68 = *v67;
  if ((_DWORD)v68)
  {
    v69 = 0;
    v70 = 4 * v68;
    v71 = (char *)v18 + v65 + v66;
    do
    {
      v75 = v67[v69 / 4 + 1];
      v76 = &v71[v69 + v75 - *(int *)((char *)&v67[v69 / 4 + 1] + v75)];
      if (*((unsigned __int16 *)v76 + 2) >= 7u && (v77 = *((unsigned __int16 *)v76 + 5)) != 0)
      {
        v78 = *(unsigned int *)&v71[v69 + 4 + v75 + v77];
        v72 = v78;
        if ((v78 & 0x80000000) != 0)
        {
          v73 = 1 << (v78 >> 20);
          v74 = (_QWORD *)(v12 + 1288);
          goto LABEL_77;
        }
      }
      else
      {
        v72 = 0;
      }
      v73 = 1 << v72;
      *(_QWORD *)(v12 + 1272) |= v73;
      v74 = (_QWORD *)(v12 + 1296);
LABEL_77:
      *v74 |= v73;
      v69 += 4;
    }
    while (v70 != v69);
  }
  v79 = v64[10];
  v80 = *(unsigned int *)((char *)v18 + v79);
  v81 = (unsigned int *)((char *)v18 + v79 + v80);
  v82 = *v81;
  if ((_DWORD)v82)
  {
    v83 = 0;
    v84 = 4 * v82;
    v85 = (char *)v18 + v79 + v80;
    do
    {
      v89 = v81[v83 / 4 + 1];
      v90 = &v85[v83 + v89 - *(int *)((char *)&v81[v83 / 4 + 1] + v89)];
      if (*((unsigned __int16 *)v90 + 2) >= 7u && (v91 = *((unsigned __int16 *)v90 + 5)) != 0)
      {
        v92 = *(unsigned int *)&v85[v83 + 4 + v89 + v91];
        v86 = v92;
        if ((v92 & 0x80000000) != 0)
        {
          v87 = 1 << (v92 >> 20);
          v88 = (_QWORD *)(v12 + 1288);
          goto LABEL_86;
        }
      }
      else
      {
        v86 = 0;
      }
      v87 = 1 << v86;
      *(_QWORD *)(v12 + 1280) |= v87;
      v88 = (_QWORD *)(v12 + 1304);
LABEL_86:
      *v88 |= v87;
      v83 += 4;
    }
    while (v84 != v83);
  }
  v93 = v64[6];
  v94 = *(unsigned int *)((char *)v18 + v93);
  v95 = (unsigned int *)((char *)v18 + v93 + v94);
  v96 = *v95;
  if (!(_DWORD)v96)
    goto LABEL_101;
  v97 = 0;
  v98 = 4 * v96;
  v99 = *v63;
  v100 = (char *)v18 + v93 + v94;
  do
  {
    v103 = v95[v97 / 4 + 1];
    v104 = &v100[v97 + v103 - *(int *)((char *)&v95[v97 / 4 + 1] + v103)];
    if (*((unsigned __int16 *)v104 + 2) < 7u || (v105 = *((unsigned __int16 *)v104 + 5)) == 0)
    {
      v101 = 0;
LABEL_94:
      v102 = 1 << v101;
      *(_QWORD *)(v12 + 1264) |= v102;
      goto LABEL_95;
    }
    v106 = *(unsigned int *)&v100[v97 + 4 + v103 + v105];
    v101 = v106;
    if ((v106 & 0x80000000) == 0)
      goto LABEL_94;
    v102 = 1 << (v106 >> 20);
LABEL_95:
    v99 |= v102;
    v97 += 4;
  }
  while (v98 != v97);
  *v63 = v99;
LABEL_101:
  v107 = v64[4];
  v108 = *(unsigned int *)((char *)v18 + v107);
  v109 = (unsigned int *)((char *)v18 + v107 + v108);
  v110 = *v109;
  if ((_DWORD)v110)
  {
    v111 = 0;
    v112 = 4 * v110;
    v113 = v32[52];
    v114 = (char *)v18 + v107 + v108;
    while (2)
    {
      v117 = v109[v111 / 4 + 1];
      v118 = v117 - *(int *)((char *)&v109[v111 / 4 + 1] + v117);
      v119 = &v114[v111 + v118];
      v120 = *((unsigned __int16 *)v119 + 2);
      if (v120 < 5)
        goto LABEL_106;
      v121 = *((unsigned __int16 *)v119 + 4);
      if (!v121 || v114[v111 + 4 + v117 + v121] != 5)
        goto LABEL_106;
      if (v120 >= 7 && (v122 = *(unsigned __int16 *)&v114[v111 + 10 + v118]) != 0)
      {
        v123 = *(unsigned int *)&v114[v111 + 4 + v117 + v122];
        v115 = v123;
        if ((v123 & 0x80000000) != 0)
        {
          v116 = 1 << (v123 >> 20);
          if ((v113 & v116) != 0)
          {
            *(_BYTE *)(v12 + 1992) = 1;
            *(_QWORD *)(v12 + 1400) |= v116;
          }
LABEL_105:
          *v63 |= v116;
LABEL_106:
          v111 += 4;
          if (v112 == v111)
            goto LABEL_115;
          continue;
        }
      }
      else
      {
        v115 = 0;
      }
      break;
    }
    v116 = 1 << v115;
    goto LABEL_105;
  }
LABEL_115:
  *(_QWORD *)(v12 + 1344) = v32[50];
  *(_QWORD *)(v12 + 1368) = v32[51];
  *(_QWORD *)(v12 + 1408) = v32[51] | v32[50];
  memset(__p, 0, 40);
  v124 = 504;
  if (!v652)
    v124 = 168;
  v125 = (char *)v635 + v124;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::encodeConstantPDS((uint64_t)v635 + v124, v651, (uint64_t)v32, v634, 0, *(_QWORD *)(v12 + 2088), *(_QWORD *)(v12 + 2096), *(_QWORD *)(v12 + 2104), (uint64_t)__p, (_QWORD *)(v12 + 2024), (uint64_t *)(v12 + 2048), (unsigned int *)(v12 + 1416), (_DWORD *)(v12 + 2064), (unint64_t *)(v12 + 2056), (_DWORD *)(v12 + 2844));
  v126 = *(_QWORD *)(__p[1].__r_.__value_.__r.__words[0] + 296);
  v127 = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)(v12 + 2256) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_QWORD *)(v12 + 2152) = v126;
  *(_DWORD *)(v12 + 1240) = 8
                          * (*(_DWORD *)(v12 + 1420)
                           + *(_DWORD *)(v12 + 1416)
                           + *(_DWORD *)(v12 + 1424)
                           + *(_DWORD *)(v12 + 1428));
  *(_QWORD *)(v12 + 2248) = v125;
  *(_OWORD *)(v12 + 2272) = v127;
  *(_OWORD *)(v12 + 2281) = *(_OWORD *)((char *)&__p[1].__r_.__value_.__l.__data_ + 1);
  *(_OWORD *)(v12 + 2304) = 0u;
  *(_OWORD *)(v12 + 2320) = 0u;
  *(_OWORD *)(v12 + 2329) = 0u;
  *(_QWORD *)(v12 + 2448) = (char *)v635 + 168 * v639;
  *(_BYTE *)(v12 + 2772) = 0;
  *(_QWORD *)(v12 + 2944) = 0;
  *(_OWORD *)(v12 + 2928) = 0u;
  *(_OWORD *)(v12 + 2912) = 0u;
  *(_OWORD *)(v12 + 2960) = 0u;
  *(_OWORD *)(v12 + 2976) = 0u;
  *(_QWORD *)(v12 + 2992) = 0;
  *(_OWORD *)(v12 + 3016) = 0u;
  *(_OWORD *)(v12 + 3032) = 0u;
  *(_QWORD *)(v12 + 3048) = 0;
  *(_OWORD *)(v12 + 3064) = 0u;
  *(_OWORD *)(v12 + 3080) = 0u;
  *(_QWORD *)(v12 + 3096) = 0;
  v128 = *v642;
  if (*v642)
  {
    v129 = (unsigned int **)(v651 + 784);
    if (*(_QWORD *)(v651 + 232))
      v129 = v642;
  }
  else
  {
    v129 = (unsigned int **)(v651 + 784);
  }
  v130 = 0;
  if (*v129 && v129[1])
    v130 = (int *)((char *)*v129 + **v129);
  v131 = (unsigned __int16 *)((char *)v130 - *v130);
  if (*v131 >= 5u && (v132 = v131[2]) != 0)
  {
    v133 = (int *)((char *)v130 + v132 + *(unsigned int *)((char *)v130 + v132));
    if (!v128)
      goto LABEL_128;
LABEL_130:
    v134 = (unsigned int **)(v651 + 784);
    if (*(_QWORD *)(v651 + 232))
      v134 = v642;
  }
  else
  {
    v133 = 0;
    if (v128)
      goto LABEL_130;
LABEL_128:
    v134 = (unsigned int **)(v651 + 784);
  }
  v135 = 0;
  if (*v134 && v134[1])
    v135 = (int *)((char *)*v134 + **v134);
  v136 = (unsigned __int16 *)((char *)v135 - *v135);
  if (*v136 >= 9u && (v137 = v136[4]) != 0)
  {
    v138 = (int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
    v139 = *v645;
    if (!*v645)
      goto LABEL_138;
LABEL_140:
    v140 = (unsigned int **)(v651 + 1024);
    if (*(_QWORD *)(v651 + 472))
      v140 = v645;
  }
  else
  {
    v138 = 0;
    v139 = *v645;
    if (*v645)
      goto LABEL_140;
LABEL_138:
    v140 = (unsigned int **)(v651 + 1024);
  }
  v141 = 0;
  if (*v140 && v140[1])
    v141 = (int *)((char *)*v140 + **v140);
  v142 = (unsigned __int16 *)((char *)v141 - *v141);
  if (*v142 >= 9u && (v143 = v142[4]) != 0)
  {
    v144 = (std::mutex *)((char *)v141 + v143 + *(unsigned int *)((char *)v141 + v143));
    if (!v139)
      goto LABEL_148;
LABEL_150:
    v145 = (unsigned int **)(v651 + 1024);
    if (*(_QWORD *)(v651 + 472))
      v145 = v645;
  }
  else
  {
    v144 = 0;
    if (v139)
      goto LABEL_150;
LABEL_148:
    v145 = (unsigned int **)(v651 + 1024);
  }
  v146 = 0;
  if (*v145 && v145[1])
    v146 = (int *)((char *)*v145 + **v145);
  v147 = (unsigned __int16 *)((char *)v146 - *v146);
  if (*v147 >= 0xFu && (v148 = v147[7]) != 0)
  {
    v149 = (int *)((char *)v146 + v148 + *(unsigned int *)((char *)v146 + v148));
    if (!v139)
      goto LABEL_158;
LABEL_160:
    v150 = (unsigned int **)(v651 + 1024);
    if (*(_QWORD *)(v651 + 472))
      v150 = v645;
  }
  else
  {
    v149 = 0;
    if (v139)
      goto LABEL_160;
LABEL_158:
    v150 = (unsigned int **)(v651 + 1024);
  }
  v151 = 0;
  if (*v150 && v150[1])
    v151 = (int *)((char *)*v150 + **v150);
  v152 = (unsigned __int16 *)((char *)v151 - *v151);
  if (*v152 >= 5u && (v153 = v152[2]) != 0)
    v154 = (int *)((char *)v151 + v153 + *(unsigned int *)((char *)v151 + v153));
  else
    v154 = 0;
  v155 = (unsigned __int16 *)((char *)v154 - *v154);
  if (*v155 < 0xBu)
  {
    v156 = 0;
  }
  else
  {
    v156 = v155[5];
    if (v156)
      v156 += (uint64_t)v154 + *(unsigned int *)((char *)v154 + v156);
  }
  v157 = *(unsigned __int16 *)((char *)v133 - *v133 + 28);
  v158 = *(unsigned int *)((char *)v133 + v157);
  if (*(int *)((char *)v133 + v157 + v158))
  {
    v159 = 0;
    v160 = v156 + 4;
    LODWORD(v156) = *(unsigned __int16 *)((char *)v133 - *v133 + 28);
    do
    {
      v161 = (uint64_t)&v133[v159] + v156 + v158;
      v162 = (int *)(v161 + 4 + *(unsigned int *)(v161 + 4));
      v163 = (unsigned __int16 *)((char *)v162 - *v162);
      v164 = *v163;
      if (v164 >= 5 && v163[2])
      {
        v165 = *((unsigned __int8 *)v162 + v163[2]);
        if (v165 == 20)
        {
          if (v164 >= 9 && (v168 = v163[4]) != 0)
            v169 = *(unsigned int *)((char *)v162 + v168);
          else
            v169 = 0;
          v170 = (unsigned int *)((char *)v144
                                + *(unsigned __int16 *)&v144->__m_.__opaque[-SLODWORD(v144->__m_.__sig) + 2]);
          *(_DWORD *)(*(_QWORD *)(v12 + 1256) + 4 * v169) = (*(_QWORD *)(v12 + 2000)
                                                           + (unint64_t)*(unsigned int *)((char *)v170 + *v170 + 8)) >> 2;
        }
        else if (v165 == 18)
        {
          v166 = *(_QWORD **)(v12 + 1256);
          if (v164 < 9)
          {
            if (v164 >= 7)
              goto LABEL_191;
          }
          else
          {
            v167 = v163[4];
            if (v163[4])
              v167 = *(unsigned int *)((char *)v162 + v167);
            v166 = (_QWORD *)((char *)v166 + 4 * v167);
LABEL_191:
            v171 = v163[3];
            if (v171)
            {
              v172 = *(unsigned int *)((char *)v162 + v171);
LABEL_194:
              AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__p, (int *)(v160 + 4 * v172 + *(unsigned int *)(v160 + 4 * v172)));
              AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields::SamplerStateFields((unint64_t *)&v677, (float *)__p);
              *v166 = v677;
              if (v669 < 0)
                operator delete(v668);
              std::vector<AGXA10FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v646, (uint64_t)v166);
              goto LABEL_176;
            }
          }
          v172 = 0;
          goto LABEL_194;
        }
      }
LABEL_176:
      ++v159;
      v156 = *(unsigned __int16 *)((char *)v133 - *v133 + 28);
      v158 = *(unsigned int *)((char *)v133 + v156);
    }
    while (v159 < *(unsigned int *)((char *)v133 + v156 + v158));
  }
  AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerConstantSamplerList(v629, v646);
  v173 = *(unsigned __int16 *)((char *)v133 - *v133 + 24);
  v174 = *(unsigned int *)((char *)v133 + v173);
  v175 = (unsigned int *)((char *)v133 + v173 + v174);
  v176 = *v175;
  if ((_DWORD)v176)
  {
    v177 = 0;
    v178 = 4 * v176;
    v179 = (char *)v133 + v173 + v174;
    do
    {
      v182 = *(unsigned int *)&v179[v177 + 4];
      v183 = v182 - *(int *)((char *)&v175[v177 / 4 + 1] + v182);
      v184 = &v179[v177 + v183];
      v185 = *((unsigned __int16 *)v184 + 2);
      if (v185 >= 5)
      {
        v186 = *((unsigned __int16 *)v184 + 4);
        if (v186)
        {
          v187 = v179[v177 + 4 + v182 + v186];
          v180 = (_QWORD *)(v12 + 1336);
          v181 = 1;
          switch(v187)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              if (v185 < 7 || !*(_WORD *)&v179[v177 + 10 + v183])
              {
                v189 = 0;
LABEL_210:
                if (v187 == 98)
                  v190 = 16;
                else
                  v190 = 8;
                v181 = 1 << v189;
                v191 = v644 + v190;
                *(_QWORD *)(v191 + 72) |= 1 << v189;
                v180 = (_QWORD *)(v191 + 48);
                goto LABEL_199;
              }
              v188 = *(unsigned int *)&v179[v177 + 4 + v182 + *(unsigned __int16 *)&v179[v177 + 10 + v183]];
              if ((v188 & 0xFFF00000) != 0x400000)
              {
                v189 = *(_DWORD *)&v179[v177 + 4 + v182 + *(unsigned __int16 *)&v179[v177 + 10 + v183]];
                if ((v188 & 0x80000000) != 0)
                {
                  v181 = 1 << (v188 >> 20);
                  v180 = (_QWORD *)(v12 + 1288);
                  goto LABEL_199;
                }
                goto LABEL_210;
              }
              break;
            case 24:
              v180 = (_QWORD *)(v12 + 1336);
              v181 = 4;
              goto LABEL_199;
            case 25:
              v180 = (_QWORD *)(v12 + 1336);
              v181 = 8;
              goto LABEL_199;
            case 27:
              goto LABEL_199;
            case 28:
              v180 = (_QWORD *)(v12 + 1336);
              v181 = 2;
              goto LABEL_199;
            case 59:
              v180 = (_QWORD *)(v12 + 1336);
              v181 = 16;
              goto LABEL_199;
            case 75:
              v180 = (_QWORD *)(v12 + 1336);
              v181 = 64;
              goto LABEL_199;
            case 112:
              v180 = (_QWORD *)(v12 + 1336);
              v181 = 1024;
LABEL_199:
              *v180 |= v181;
              break;
            default:
              break;
          }
        }
      }
      v177 += 4;
    }
    while (v178 != v177);
  }
  bzero(__p, 0xE38uLL);
  v192 = (unsigned __int16 *)((char *)v138 - *v138);
  v193 = v192[4];
  v194 = *(unsigned int *)((char *)v138 + v193 + *(unsigned int *)((char *)v138 + v193));
  v670 = *(int *)((char *)v138 + v193 + *(unsigned int *)((char *)v138 + v193));
  v195 = (unsigned __int16 *)((char *)v149 - *v149);
  if (*v195 <= 0xCu || !v195[6])
  {
    LOBYTE(v196) = 0;
    v636 = v144;
    if (!(_DWORD)v194)
      goto LABEL_222;
    goto LABEL_233;
  }
  LOBYTE(v196) = *((_BYTE *)v149 + v195[6]) != 0;
  v636 = v144;
  if ((_DWORD)v194)
  {
LABEL_233:
    v207 = 0;
    v208 = (char *)v138 + v193 + *(unsigned int *)((char *)v138 + v193);
    v209 = 4 * v194;
    do
    {
      if (v196)
      {
        v196 = 1;
      }
      else
      {
        v210 = *(unsigned int *)&v208[v207 + 4];
        v211 = v210 - *(int *)&v208[v207 + 4 + v210];
        if (*(unsigned __int16 *)&v208[v207 + 4 + v211] >= 5u
          && (v212 = *(unsigned __int16 *)&v208[v207 + 8 + v211]) != 0)
        {
          v213 = v208[v207 + 4 + v210 + v212];
        }
        else
        {
          v213 = 0;
        }
        v196 = v213 == 6;
      }
      v207 += 4;
    }
    while (v209 != v207);
    v214 = 0;
    if (v196)
      v215 = 2;
    else
      v215 = 0;
    v216 = &__p[1];
    v217 = 16;
    while (1)
    {
      if (*v192 < 9u)
      {
        v218 = 0;
      }
      else
      {
        v218 = v192[4];
        if (v192[4])
          v218 += (uint64_t)v138 + *(unsigned int *)((char *)v138 + v218);
      }
      LODWORD(v219) = 0;
      v220 = *(unsigned int *)(v218 + v217 - 12);
      v221 = v218 + v217 + v220;
      v216[-1].__r_.__value_.__r.__words[0] = 0;
      v216[-1].__r_.__value_.__l.__size_ = 0;
      LODWORD(v216->__r_.__value_.__l.__data_) = 0;
      v216[-1].__r_.__value_.__r.__words[2] = 0;
      v222 = v218 + v217 + v220 - *(int *)(v221 - 12);
      if (*(unsigned __int16 *)(v222 - 12) >= 9u)
      {
        v219 = *(unsigned __int16 *)(v222 - 4);
        if (*(_WORD *)(v222 - 4))
          LODWORD(v219) = *(_DWORD *)(v218 + v217 + v219 + v220 - 12);
      }
      HIDWORD(v216[-1].__r_.__value_.__r.__words[1]) = v219;
      v223 = v220 - *(int *)(v221 - 12);
      if (*(unsigned __int16 *)(v218 + v217 + v223 - 12) >= 0xBu
        && (v224 = *(unsigned __int16 *)(v218 + v217 + v223 - 2)) != 0)
      {
        v225 = *(_DWORD *)(v218 + v217 + v224 + v220 - 12);
      }
      else
      {
        v225 = 0;
      }
      LODWORD(v216->__r_.__value_.__l.__data_) = v225;
      v226 = v220 - *(int *)(v221 - 12);
      v227 = v218 + v217 + v226;
      v228 = *(unsigned __int16 *)(v227 - 12);
      if (v228 < 5 || (v229 = *(unsigned __int16 *)(v227 - 8)) == 0)
      {
LABEL_262:
        v216[-1].__r_.__value_.__r.__words[2] = 0;
LABEL_263:
        v216[-1].__r_.__value_.__s.__data_[8] = 0;
        goto LABEL_247;
      }
      switch(*(_BYTE *)(v218 + v217 + v229 + v220 - 12))
      {
        case 0:
          goto LABEL_262;
        case 1:
          if (v228 >= 7 && *(_WORD *)(v218 + v217 + v226 - 6))
            v230 = *(unsigned int *)(v218 + v217 + *(unsigned __int16 *)(v218 + v217 + v226 - 6) + v220 - 12);
          else
            v230 = 0;
          v231 = *v195;
          if (v231 <= 8)
          {
            v233 = 0;
            v232 = *(_DWORD *)(4 * v230 + 4);
          }
          else
          {
            v232 = *(int *)((char *)&v149[v230 + 1] + v195[4] + *(unsigned int *)((char *)v149 + v195[4]));
            if (v231 < 0xB)
            {
              v233 = 0;
            }
            else
            {
              v233 = v195[5];
              if (v195[5])
                v233 += (uint64_t)v149 + *(unsigned int *)((char *)v149 + v233);
            }
          }
          v234 = (int *)(v233
                       + 4 * (v232 + 6)
                       + 4
                       + *(unsigned int *)(v233 + 4 * (v232 + 6) + 4));
          v235 = (unsigned __int16 *)((char *)v234 - *v234);
          v236 = *v235;
          if (v236 <= 4)
          {
            LODWORD(v239) = 0;
            *(_WORD *)((char *)v216[-1].__r_.__value_.__r.__words + 7) = 256;
            v216[-1].__r_.__value_.__s.__data_[2] = 0;
            goto LABEL_285;
          }
          v237 = v235[2];
          if (v235[2])
            LOBYTE(v237) = *((_BYTE *)v234 + v237) != 0;
          v216[-1].__r_.__value_.__s.__data_[7] = v237;
          if (v236 < 0xB)
          {
            LODWORD(v239) = 0;
            v216[-1].__r_.__value_.__s.__data_[8] = 1;
            v216[-1].__r_.__value_.__s.__data_[2] = 0;
            if (v236 >= 7)
            {
              v239 = v235[3];
              if (v235[3])
                goto LABEL_284;
            }
          }
          else
          {
            v238 = v235[5];
            if (v235[5])
            {
              v216[-1].__r_.__value_.__s.__data_[8] = *((_BYTE *)v234 + v238) == 0;
              LODWORD(v238) = *((char *)v234 + v238);
            }
            else
            {
              v216[-1].__r_.__value_.__s.__data_[8] = 1;
            }
            v216[-1].__r_.__value_.__s.__data_[2] = (_DWORD)v238 == 1;
            v239 = v235[3];
            if (v235[3])
LABEL_284:
              LODWORD(v239) = *(int *)((char *)v234 + v239);
          }
LABEL_285:
          if (v228 < 0xD)
          {
            LODWORD(v240) = 0;
            if (v236 >= 5)
              goto LABEL_289;
          }
          else
          {
            v240 = *(unsigned __int16 *)(v218 + v226 + v217);
            if (v240)
              LODWORD(v240) = *(_DWORD *)(v218 + v217 + v240 + v220 - 12);
            if (v236 >= 5)
            {
LABEL_289:
              v241 = v235[2];
              if (v235[2])
                LOBYTE(v241) = *((_BYTE *)v234 + v241) != 0;
              goto LABEL_293;
            }
          }
          LOBYTE(v241) = 0;
LABEL_293:
          LODWORD(v216[-1].__r_.__value_.__r.__words[2]) = v239 + v215 + ((_DWORD)v240 << (v241 ^ 1));
          v242 = (unsigned __int16 *)((char *)v234 - *v234);
          if (*v242 < 9u)
          {
            LODWORD(v243) = 0;
          }
          else
          {
            v243 = v242[4];
            if (v243)
              LODWORD(v243) = *(int *)((char *)v234 + v243);
          }
          v244 = v220 - *(int *)(v221 - 12);
          if (*(unsigned __int16 *)(v218 + v217 + v244 - 12) >= 0xDu
            && (v245 = *(unsigned __int16 *)(v218 + v244 + v217)) != 0)
          {
            v246 = *(_DWORD *)(v218 + v217 + v245 + v220 - 12);
          }
          else
          {
            v246 = 0;
          }
          HIDWORD(v216[-1].__r_.__value_.__r.__words[2]) = v243 + v215 + 2 * v246;
LABEL_247:
          ++v214;
          v197 = v670;
          v216 = (std::string *)((char *)v216 + 28);
          v217 += 4;
          if (v214 >= v670)
            goto LABEL_223;
          break;
        case 5:
          v216[-1].__r_.__value_.__s.__data_[3] = 1;
          goto LABEL_247;
        case 6:
          v216[-1].__r_.__value_.__r.__words[2] = 0x200000002;
          goto LABEL_263;
        default:
          goto LABEL_247;
      }
    }
  }
LABEL_222:
  v197 = 0;
LABEL_223:
  if (v197 <= 1)
    v198 = 1;
  else
    v198 = v197;
  if (v197)
    v199 = (2 * (v197 - 1) + 5) & 0x3FFFFFFFCLL;
  else
    v199 = 0;
  v674 = v199;
  v675 = (v198 + 3) & 0x1FFFFFFFCLL;
  v676 = 0;
  AGX::Heap<true>::allocateImpl(&v665, *(_QWORD *)(v12 + 2248), 12 * (v199 + v675), (_QWORD *)(v12 + 2224));
  *(_DWORD *)(v12 + 2844) += LODWORD(v666[0]);
  v200 = *((_QWORD *)&v665 + 1);
  v671 = *((_QWORD *)&v665 + 1);
  v630 = v665;
  v673 = *((_QWORD *)&v665 + 1) + 4 * v199;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeFragmentVaryingsPDSProgram((unsigned __int8 *)__p, 0, 0);
  v201 = 4 * (v674 + v675);
  v671 = v200 + v201;
  v673 = v200 + v201 + 4 * v674;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeFragmentVaryingsPDSProgram((unsigned __int8 *)__p, 0, 1);
  v202 = 8 * (v674 + v675);
  v671 = v200 + v202;
  v673 = v200 + v202 + 4 * v674;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeFragmentVaryingsPDSProgram((unsigned __int8 *)__p, 0, 2);
  v203 = 0;
  v204 = *(_QWORD *)(v12 + 2000);
  v205 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v205 > 4u)
  {
    v206 = v205[2];
    if (v206)
      v203 = *(int *)((char *)v133 + v206);
    else
      v203 = 0;
  }
  v247 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v247 < 0xDu)
  {
    v248 = 0;
  }
  else
  {
    v248 = v247[6];
    if (v247[6])
      v248 += (uint64_t)v138 + *(unsigned int *)((char *)v138 + v248);
  }
  v249 = (int *)(v248 + 4 + *(unsigned int *)(v248 + 4));
  v250 = (unsigned __int16 *)((char *)v249 - *v249);
  if (*v250 < 7u)
  {
    v253 = 0;
    v252 = v12 + 1240;
  }
  else
  {
    v251 = v250[3];
    v252 = v12 + 1240;
    if (v251)
      v253 = *((char *)v249 + v251);
    else
      v253 = 0;
  }
  v647 = (_OWORD *)(v252 + 1776);
  v254 = (int *)((char *)v138 + v247[6] + *(unsigned int *)((char *)v138 + v247[6]));
  if (*v254 >= 2u
    && (v255 = (_DWORD *)((char *)v254 + v254[2] + 8),
        v256 = (unsigned __int16 *)((char *)v255 - *v255),
        *v256 >= 7u)
    && (v257 = v256[3]) != 0)
  {
    v258 = *((char *)v255 + v257);
  }
  else
  {
    v258 = 0;
  }
  v640 = (_OWORD *)(v252 + 1824);
  AGX::Heap<true>::allocateImpl(&v663, *(_QWORD *)(v12 + 2248), 48, (_QWORD *)(v12 + 2160));
  *(_DWORD *)(v12 + 2844) += LODWORD(v664[0]);
  v259 = v663;
  **((_DWORD **)&v663 + 1) = v204 & 0xFFFFFFFC;
  *(_DWORD *)(*((_QWORD *)&v259 + 1) + 4) = (((unint64_t)((v258 - 1) < 2) << 41) | ((unint64_t)(v203 >> 2) << 35) | (v253 << 33) | v204) >> 32;
  *(_QWORD *)(*((_QWORD *)&v259 + 1) + 8) = 0;
  *(_DWORD *)(*((_QWORD *)&v259 + 1) + 32) = -201326590;
  v260 = v664[0];
  *v647 = v663;
  v647[1] = v260;
  *(_OWORD *)((char *)v647 + 25) = *(_OWORD *)((char *)v664 + 9);
  *(_DWORD *)(v12 + 2768) = 0;
  v662 = 0;
  v661 = 0;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::getShaderPassInfo(v641, (unsigned int **)v651, &v662, (int *)&v662 + 1, (BOOL *)&v661 + 1, (BOOL *)&v661);
  if ((_BYTE)v661)
  {
    v261 = 1;
    goto LABEL_322;
  }
  v262 = (unsigned __int16 *)((char *)v636 - SLODWORD(v636->__m_.__sig));
  if (*v262 >= 5u && (v263 = v262[2]) != 0)
  {
    v261 = *((unsigned __int8 *)&v636->__m_.__sig + v263) != 0;
LABEL_322:
    v637 = v261;
  }
  else
  {
    v637 = 0;
  }
  v264 = *(_DWORD *)(v12 + 2056);
  v265 = v674;
  v266 = v672;
  AGX::Heap<true>::allocateImpl(&v677, *(_QWORD *)(v12 + 2448), 192, (_QWORD *)(v12 + 2232));
  *(_DWORD *)(v12 + 2844) += LODWORD(v678[0]);
  v267 = v678[0];
  *v640 = v677;
  v640[1] = v267;
  *(_OWORD *)((char *)v640 + 25) = *(_OWORD *)((char *)v678 + 9);
  v268 = *(_DWORD **)(v12 + 3072);
  if (v652)
    v269 = *(_QWORD *)(v12 + 3064) + 0x300000000;
  else
    v269 = *(_QWORD *)(v12 + 3064);
  v270 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v270 < 7u)
  {
    v273 = 0;
    v274 = v637;
    v272 = v630;
  }
  else
  {
    v271 = v270[3];
    v272 = v630;
    if (v271)
      v273 = *(int *)((char *)v133 + v271);
    else
      v273 = 0;
    v274 = v637;
  }
  v275 = v266 + v265;
  v276 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v276 < 5u)
  {
    v279 = 0;
    v278 = v645;
  }
  else
  {
    v277 = v276[2];
    v278 = v645;
    if (v277)
      v279 = *(int *)((char *)v138 + v277);
    else
      v279 = 0;
  }
  v280 = *(_DWORD *)(v12 + 2064);
  v281 = *(_DWORD *)(v12 + 2024);
  v282 = ((v264 << 19) + 6291456) & 0xFF800000;
  v283 = ((v275 << 8) + 768) & 0xFFFFFC00;
  v284 = ((v273 << 19) + 7864320) & 0xFF800000;
  if (v274)
    v284 |= 0x4000u;
  v285 = v259 & 0xFFFFFFF0;
  *v268 = 192;
  v268[1] = v259 & 0xFFFFFFF0;
  v268[2] = v281 & 0xFFFFFFF0;
  v268[3] = (v279 + 15) & 0xFFFFFFF0 | v282 | v283;
  v268[4] = v284 | ((v280 << 14) + 0x4000) & 0xFFFF8000;
  v268[5] = v272 & 0xFFFFFFF0;
  *(_QWORD *)(v12 + 2848) = __ROR8__(v269, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v286 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v286 >= 7u && (v287 = v286[3]) != 0)
    v288 = *(int *)((char *)v133 + v287);
  else
    v288 = 0;
  v289 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v289 >= 5u && (v290 = v289[2]) != 0)
    v291 = *(int *)((char *)v138 + v290);
  else
    v291 = 0;
  v292 = v201 + v272;
  v293 = *(_DWORD *)(v12 + 2024) & 0xFFFFFFF0;
  v294 = ((v288 << 19) + 7864320) & 0xFF800000 | ((*(_DWORD *)(v12 + 2064) << 14) + 0x4000) | 0x4000;
  v268[6] = 192;
  v268[7] = v285;
  v268[8] = v293;
  v268[9] = (v291 + 15) & 0xFFFFFFF0 | v282 | v283;
  v268[10] = v294;
  v268[11] = v272 & 0xFFFFFFF0;
  *(_QWORD *)(v12 + 2856) = __ROR8__(v269 + 24, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v295 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v295 < 7u)
  {
    LODWORD(v296) = 0;
    v297 = (_QWORD *)(v12 + 1248);
  }
  else
  {
    v296 = v295[3];
    v297 = (_QWORD *)(v12 + 1248);
    if (v296)
      LODWORD(v296) = *(int *)((char *)v133 + v296);
  }
  v298 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v298 < 5u)
  {
    LODWORD(v299) = 0;
  }
  else
  {
    v299 = v298[2];
    if (v299)
      LODWORD(v299) = *(int *)((char *)v138 + v299);
  }
  v300 = *(_DWORD *)(v12 + 2064);
  v301 = *(_DWORD *)(v12 + 2024);
  v302 = (v299 + 15) & 0xFFFFFFF0 | v282 | v283;
  v303 = (((_DWORD)v296 << 19) + 7864320) & 0xFF800000;
  v304 = v303 | 0x4000;
  if (!v274)
    v304 = v303;
  v305 = v292 & 0xFFFFFFF0;
  v268[12] = 192;
  v268[13] = v285;
  v268[14] = v301 & 0xFFFFFFF0;
  v268[15] = v302;
  v268[16] = v304 | ((v300 << 14) + 0x4000) & 0xFFFF8000;
  v268[17] = v292 & 0xFFFFFFF0;
  *(_QWORD *)(v12 + 2864) = __ROR8__(v269 + 48, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v306 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v306 >= 7u && (v307 = v306[3]) != 0)
    v308 = *(int *)((char *)v133 + v307);
  else
    v308 = 0;
  v309 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v309 >= 5u && (v310 = v309[2]) != 0)
    v311 = *(int *)((char *)v138 + v310);
  else
    v311 = 0;
  v312 = *(_DWORD *)(v12 + 2024) & 0xFFFFFFF0;
  v313 = ((v308 << 19) + 7864320) & 0xFF800000 | ((*(_DWORD *)(v12 + 2064) << 14) + 0x4000) | 0x4000;
  v268[18] = 192;
  v268[19] = v285;
  v268[20] = v312;
  v268[21] = (v311 + 15) & 0xFFFFFFF0 | v282 | v283;
  v268[22] = v313;
  v268[23] = v305;
  *(_QWORD *)(v12 + 2872) = __ROR8__(v269 + 72, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v314 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v314 < 7u)
  {
    LODWORD(v315) = 0;
  }
  else
  {
    v315 = v314[3];
    if (v315)
      LODWORD(v315) = *(int *)((char *)v133 + v315);
  }
  v316 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v316 < 5u)
  {
    LODWORD(v317) = 0;
  }
  else
  {
    v317 = v316[2];
    if (v317)
      LODWORD(v317) = *(int *)((char *)v138 + v317);
  }
  v318 = *(_DWORD *)(v12 + 2064);
  v319 = *(_DWORD *)(v12 + 2024);
  v320 = (v317 + 15) & 0xFFFFFFF0 | v282 | v283;
  v321 = (((_DWORD)v315 << 19) + 7864320) & 0xFF800000;
  if (v274)
    v321 |= 0x4000u;
  v322 = (v202 + v272) & 0xFFFFFFF0;
  v268[24] = 192;
  v268[25] = v285;
  v268[26] = v319 & 0xFFFFFFF0;
  v268[27] = v320;
  v268[28] = v321 | ((v318 << 14) + 0x4000) & 0xFFFF8000;
  v268[29] = v322;
  *(_QWORD *)(v12 + 2880) = __ROR8__(v269 + 96, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v323 = (unsigned __int16 *)((char *)v133 - *v133);
  if (*v323 < 7u)
  {
    LODWORD(v324) = 0;
  }
  else
  {
    v324 = v323[3];
    if (v324)
      LODWORD(v324) = *(int *)((char *)v133 + v324);
  }
  v325 = (unsigned __int16 *)((char *)v138 - *v138);
  if (*v325 < 5u)
  {
    LODWORD(v326) = 0;
  }
  else
  {
    v326 = v325[2];
    if (v326)
      LODWORD(v326) = *(int *)((char *)v138 + v326);
  }
  v327 = (v326 + 15) & 0xFFFFFFF0 | v282 | v283;
  v328 = *(_DWORD *)(v12 + 2024) & 0xFFFFFFF0;
  v329 = (((_DWORD)v324 << 19) + 7864320) & 0xFF800000 | ((*(_DWORD *)(v12 + 2064) << 14) + 0x4000) | 0x4000;
  v268[30] = 192;
  v268[31] = v285;
  v268[32] = v328;
  v268[33] = v327;
  v268[34] = v329;
  v268[35] = v322;
  *(_QWORD *)(v12 + 2888) = __ROR8__(v269 + 120, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  *(_DWORD *)(v12 + 3120) = 0;
  if (*(_DWORD *)(v12 + 1420) + *(_DWORD *)(v12 + 1416) + *(_DWORD *)(v12 + 1424) + *(_DWORD *)(v12 + 1428))
  {
    v627 = v272 & 0xFFFFFFF0;
    v631 = v283;
    v330 = v269;
    v659 = 0;
    v660 = 0;
    v658 = 0;
    v657 = 0;
    AGX::Heap<true>::allocateImpl(&v677, *(_QWORD *)(v12 + 2448), 576, (_QWORD *)(v12 + 2200));
    *(_DWORD *)(v12 + 2844) += LODWORD(v678[0]);
    *(_OWORD *)(v12 + 2504) = v677;
    *(_OWORD *)(v12 + 2520) = v678[0];
    *(_OWORD *)(v12 + 2529) = *(_OWORD *)((char *)v678 + 9);
    v331 = *(_QWORD *)(v12 + 2504);
    if (v652)
      v331 += 0x300000000;
    *(_QWORD *)(v12 + 3112) = v331;
    v654 = 0;
    v655 = 0;
    v656 = 0;
    v332 = (unsigned __int16 *)((char *)v133 - *v133);
    if (*v332 >= 0x17u)
    {
      v333 = v332[11];
      if (v333)
      {
        v334 = *(int *)((char *)v133 + v333) + 3;
        LODWORD(v677) = 0;
        if (v334 >= 4)
          std::vector<DriverEIOffset>::__append((unint64_t *)&v654, v334 >> 2, (const float *)&v677);
      }
    }
    v335 = (unsigned int *)((char *)v133 + *(unsigned __int16 *)((char *)v133 - *v133 + 24));
    v336 = (unsigned int *)((char *)v335 + *v335);
    v339 = *v336;
    v337 = v336 + 1;
    v338 = v339;
    if (v339)
    {
      v340 = &v337[v338];
      v341 = (uint32x2_t *)v654;
      while (1)
      {
        v342 = (int *)((char *)v337 + *v337);
        v343 = (unsigned __int16 *)((char *)v342 - *v342);
        v344 = *v343;
        if (v344 >= 5 && v343[2])
        {
          v345 = 0;
          switch(*((_BYTE *)v342 + v343[2]))
          {
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x10:
            case 0x11:
            case 0x3E:
            case 0x5D:
            case 0x61:
            case 0x62:
              break;
            case 0xE:
            case 0xF:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
            case 0x1D:
            case 0x1E:
            case 0x1F:
            case 0x20:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2A:
            case 0x2B:
            case 0x2C:
            case 0x2D:
            case 0x2E:
            case 0x2F:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3A:
            case 0x3B:
            case 0x3C:
            case 0x3D:
            case 0x3F:
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
            case 0x4E:
            case 0x4F:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58:
            case 0x59:
            case 0x5A:
            case 0x5B:
            case 0x5C:
            case 0x5E:
            case 0x5F:
            case 0x60:
              goto LABEL_402;
            default:
              if (*((_BYTE *)v342 + v343[2]) != 113)
                goto LABEL_402;
              break;
          }
        }
        else
        {
LABEL_402:
          v345 = 1;
        }
        if (v344 < 7)
          break;
        v346 = v343[3];
        if (v343[3])
        {
          LODWORD(v346) = *(int *)((char *)v342 + v346);
          if ((int)v346 >= 0)
            v345 = 1;
          if (v345 != 1)
            goto LABEL_397;
        }
        if (v344 < 9)
          goto LABEL_415;
        v347 = v343[4];
        if (v343[4])
          v347 = *(unsigned int *)((char *)v342 + v347);
        v348 = (uint32x2_t *)((char *)v341 + 4 * v347);
        v349 = v343[2];
        if (v343[2])
LABEL_416:
          LODWORD(v349) = *((unsigned __int8 *)v342 + v349);
LABEL_417:
        if (v344 >= 7 && (v350 = v343[3]) != 0)
        {
          v351 = *(int *)((char *)v342 + v350);
          if ((_DWORD)v349 == 27)
            goto LABEL_396;
        }
        else
        {
          v351 = 0;
          if ((_DWORD)v349 == 27)
          {
LABEL_396:
            *(_OWORD *)v348->i8 = xmmword_232D73850;
            goto LABEL_397;
          }
        }
        v352 = 56 * (v346 & 0xFFFFF);
        v353 = v352 + 16;
        switch((int)v349)
        {
          case 11:
            *(uint32x4_t *)v348->i8 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v353), (int32x4_t)xmmword_232D737E0), 2uLL);
            break;
          case 12:
            v348->i32[0] = v353 >> 2;
            v348->i32[1] = (v353 >> 2) | 1;
            v348[1] = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v353), (int32x2_t)0xC00000008), 2uLL);
            break;
          case 13:
            v355 = v352 + 48;
            goto LABEL_454;
          case 16:
            v355 = v352 + 52;
            goto LABEL_454;
          case 17:
            v355 = v352 + 56;
            goto LABEL_454;
          case 24:
            v356 = 600;
            goto LABEL_455;
          case 25:
            v356 = 599;
            goto LABEL_455;
          case 27:
            goto LABEL_396;
          case 28:
            *v348 = (uint32x2_t)0x25600000255;
            break;
          case 43:
            v354 = v351 + 558;
            goto LABEL_447;
          case 56:
            v356 = 601;
            goto LABEL_455;
          case 59:
            *v348 = (uint32x2_t)0x1B7000001B6;
            break;
          case 62:
            v355 = v352 + 60;
            goto LABEL_454;
          case 64:
            *v348 = (uint32x2_t)0x1BB000001BALL;
            break;
          case 75:
            v357 = ((unint64_t)*(unsigned int *)(v633 + 144) >> 8) & 0xF;
            if (!(_DWORD)v357)
              break;
            v358 = 2 * v357;
            if (v357 <= 3)
            {
              v359 = 0;
              v360 = 444;
              goto LABEL_461;
            }
            v359 = v358 & 0x18;
            *(_OWORD *)v348->i8 = xmmword_232D737F0;
            *(_OWORD *)v348[2].i8 = xmmword_232D73800;
            if (v359 != 8)
            {
              *(_OWORD *)v348[4].i8 = xmmword_232D73810;
              *(_OWORD *)v348[6].i8 = xmmword_232D73820;
              if (v359 != 16)
              {
                *(_OWORD *)v348[8].i8 = xmmword_232D73830;
                *(_OWORD *)v348[10].i8 = xmmword_232D73840;
              }
            }
            if (v359 != v358)
            {
              v360 = v359 + 444;
LABEL_461:
              v363 = v359 - v358;
              v364 = (int *)v348 + v359;
              do
              {
                *v364++ = v360++ & 0x3FFFFFFF;
                v402 = __CFADD__(v363++, 1);
              }
              while (!v402);
              break;
            }
            break;
          case 93:
            if ((v346 & 0xFFF00000) == 0x400000)
            {
              v356 = 2;
            }
            else
            {
              v355 = v352 + 64;
LABEL_454:
              v356 = v355 >> 2;
            }
LABEL_455:
            v348->i32[0] = v356;
            break;
          case 97:
            v361 = 8 * (v346 & 0xFFFFF) + 1840;
            goto LABEL_451;
          case 98:
            v361 = 8 * (v346 & 0xFFFFF) + 2088;
LABEL_451:
            v362 = v361 >> 2;
            v348->i32[0] = v362;
            v348->i32[1] = v362 | 1;
            break;
          case 105:
            *v348 = (uint32x2_t)0x22B0000022ALL;
            break;
          case 106:
            v356 = 556;
            goto LABEL_455;
          case 107:
            v356 = 557;
            goto LABEL_455;
          case 109:
            v354 = v351 + 666;
            goto LABEL_447;
          case 110:
            v354 = v351 + 729;
LABEL_447:
            v356 = v354 & 0x3FFFFFFF;
            goto LABEL_455;
          case 111:
            v356 = 602;
            goto LABEL_455;
          case 112:
            v356 = 792;
            goto LABEL_455;
          case 113:
            v355 = 8 * (v346 & 0xFFFFF) + 2088;
            goto LABEL_454;
          default:
            break;
        }
LABEL_397:
        if (++v337 == v340)
          goto LABEL_465;
      }
      if (v344 < 5)
        goto LABEL_397;
      LODWORD(v346) = 0;
LABEL_415:
      v348 = v341;
      v349 = v343[2];
      if (v343[2])
        goto LABEL_416;
      goto LABEL_417;
    }
LABEL_465:
    if ((AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible((_QWORD *)v651, 0) & 1) != 0)
    {
      AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t *)&v677, (unsigned int **)v651, (const std::vector<unsigned int>::value_type *)2, *(_BYTE *)(v649 + 424), v634, 0, 0, 1, v365, v366, v367, (uint64_t *)&v654);
      v368 = (char *)v682 - (char *)v681;
      if (v682 != v681)
      {
        v369 = v680;
        v370 = v679;
        goto LABEL_469;
      }
      v369 = v680;
      v370 = v679;
      if (v680 != v679)
      {
LABEL_469:
        v371 = *(_QWORD *)(v12 + 2448);
        v372 = (char *)v369 - (char *)v370;
        v373 = v368 + 2 * v372;
        *(_DWORD *)(v12 + 2840) = v373;
        if (AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::ei_max_indirect_gather_size_watermark > v373)
          v373 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::ei_max_indirect_gather_size_watermark;
        AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::ei_max_indirect_gather_size_watermark = v373;
        AGX::Heap<true>::allocateImpl(&v683, v371, ((v368 + v372) & 0xFFFFFFFFFFFFFFFCLL) + 4, (_QWORD *)(v12 + 2216));
        *(_DWORD *)(v12 + 2844) += LODWORD(v684[0]);
        *(_OWORD *)(v12 + 2648) = v683;
        *(_OWORD *)(v12 + 2664) = v684[0];
        *(_OWORD *)(v12 + 2673) = *(_OWORD *)((char *)v684 + 9);
        *(_QWORD *)(v12 + 2040) = *(_QWORD *)(v12 + 2648) + 0x300000000;
        v374 = *(_WORD **)(v12 + 2656);
        v375 = v680;
        v376 = v679;
        *v374 = ((_DWORD)v680 - (_DWORD)v679) >> 2;
        v377 = v682;
        v378 = v681;
        v374[1] = ((_DWORD)v682 - (_DWORD)v681) >> 2;
        v379 = v374 + 2;
        if (v375 != v376)
        {
          v380 = (char *)v375 - (char *)v376 - 4;
          if (v380 <= 0x1B
            || ((v399 = (char *)v374 + (v380 & 0xFFFFFFFFFFFFFFFCLL),
                 v400 = (unint64_t)(v399 + 6),
                 v401 = (unint64_t)(v399 + 8),
                 v374 + 3 < (unsigned __int16 *)((char *)v376 + (v380 & 0xFFFFFFFFFFFFFFFCLL) + 4))
              ? (v402 = (unint64_t)(v376 + 1) >= v401)
              : (v402 = 1),
                v402 ? (v403 = 0) : (v403 = 1),
                (unint64_t)v376 < v400
              ? (v404 = v379 >= (__int16 *)((char *)v376 + (v380 & 0xFFFFFFFFFFFFFFFCLL) + 2))
              : (v404 = 1),
                !v404 || (v403 & 1) != 0))
          {
            v381 = v379;
            do
            {
LABEL_474:
              v382 = *v376;
              v383 = v382 & 0x7FF;
              v384 = (v382 << 16) & 0x80000000 | ((v382 & 0x7FF) << 20);
              if ((v382 & 0x7FFu) >= 0x23)
                v385 = -44;
              else
                v385 = 7;
              v386 = v385 + v383;
              if (v384 == 0x200000)
                v386 = 6;
              *v381 = v386;
              v381[1] = v376[1];
              v381 += 2;
              v376 += 2;
            }
            while (v376 != v375);
          }
          else
          {
            v405 = (v380 >> 2) + 1;
            v406 = 2 * (v405 & 0x7FFFFFFFFFFFFFF8);
            v381 = &v379[v406];
            v407.i64[0] = 0x20000000200000;
            v407.i64[1] = 0x20000000200000;
            v408.i64[0] = 0x23002300230023;
            v408.i64[1] = 0x23002300230023;
            v409.i64[0] = 0x7000700070007;
            v409.i64[1] = 0x7000700070007;
            v410.i64[0] = 0x6000600060006;
            v410.i64[1] = 0x6000600060006;
            v411 = (const __int16 *)v376;
            v412 = v405 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v686 = vld2q_s16(v411);
              v411 += 16;
              v413 = vshrq_n_u16((uint16x8_t)v686.val[0], 0xFuLL);
              *(_OWORD *)v686.val &= __PAIR128__(0x7FF07FF07FF07FFLL, 0x7FF07FF07FF07FFLL);
              v414 = (int8x16_t)vcgtq_u16(v408, (uint16x8_t)v686.val[0]);
              v686.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v686.val[0].i8), 0x14uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v413.i8), 0x1FuLL)), v407), (int16x8_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v686.val[0]), 0x14uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v413), 0x1FuLL)), v407)),
                                         v410,
                                         (int8x16_t)vaddq_s16((int16x8_t)vorrq_s8(vandq_s8(v414, v409), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v414) & __PAIR128__(0xFFD4FFD4FFD4FFD4, 0xFFD4FFD4FFD4FFD4))), v686.val[0]));
              vst2q_s16(v379, v686);
              v379 += 16;
              v412 -= 8;
            }
            while (v412);
            if (v405 != (v405 & 0x7FFFFFFFFFFFFFF8))
            {
              v376 = (unsigned __int16 *)((char *)v376 + v406 * 2);
              goto LABEL_474;
            }
          }
          v379 = v381;
        }
        for (; v378 != v377; v379 += 2)
        {
          v387 = *v378;
          v388 = v387 & 0x7FF;
          v389 = (v387 << 16) & 0x80000000 | ((v387 & 0x7FF) << 20);
          if ((v387 & 0x7FFu) >= 0x23)
            v390 = -44;
          else
            v390 = 7;
          v391 = v390 + v388;
          if (v389 == 6291456)
            v391 = 4;
          if (v389 == 3145728)
            v391 = 5;
          if (v389 == 0x200000)
            v391 = 6;
          *v379 = v391;
          v379[1] = v378[1];
          v378 += 2;
        }
      }
      v392 = *(unsigned int **)(v12 + 2512);
      if (AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::encodeConstantPDS(*(_QWORD *)(v12 + 2248), v651, (uint64_t)&v677, v634, 1, *(_QWORD *)(v12 + 2088), *(_QWORD *)(v12 + 2096), *(_QWORD *)(v12 + 2104), v12 + 2352, &v660, &v659, v392, &v657, &v658, (_DWORD *)(v12 + 2844)))
      {
        *(_QWORD *)(v12 + 2184) = *(_QWORD *)(*(_QWORD *)(v12 + 2376) + 296);
        v393 = (unsigned __int16 *)((char *)v133 - *v133);
        if (*v393 < 7u)
        {
          v398 = 0;
          v395 = v637;
          v396 = v631;
          v397 = v627;
        }
        else
        {
          v394 = v393[3];
          v395 = v637;
          v396 = v631;
          v397 = v627;
          if (v394)
            v398 = *(int *)((char *)v133 + v394);
          else
            v398 = 0;
        }
        v415 = (unsigned __int16 *)((char *)v138 - *v138);
        if (*v415 >= 5u && (v416 = v415[2]) != 0)
          v417 = *(int *)((char *)v138 + v416);
        else
          v417 = 0;
        v418 = v660;
        v419 = (((_DWORD)v658 << 19) + 6291456) & 0xFF800000;
        v420 = (v417 + 15) & 0xFFFFFFF0 | v419 | v396;
        v421 = ((v398 << 19) + 7864320) & 0xFF800000;
        if (v395)
          v422 = v421 | 0x4000;
        else
          v422 = v421;
        v423 = v660 & 0xFFFFFFF0;
        v424 = (v657 << 14) + 0x4000;
        v268[36] = 192;
        v268[37] = v285;
        v268[38] = v423;
        v268[39] = v420;
        v268[40] = v422 | v424 & 0xFFFF8000;
        v268[41] = v397;
        *(_QWORD *)(v12 + 2896) = __ROR8__(v330 + 144, 32) & 0xFFFFFFFC000000FFLL | 0x600;
        v425 = (unsigned __int16 *)((char *)v133 - *v133);
        if (*v425 < 7u)
        {
          LODWORD(v426) = 0;
        }
        else
        {
          v426 = v425[3];
          if (v426)
            LODWORD(v426) = *(int *)((char *)v133 + v426);
        }
        v427 = (unsigned __int16 *)((char *)v138 - *v138);
        if (*v427 < 5u)
        {
          LODWORD(v428) = 0;
        }
        else
        {
          v428 = v427[2];
          if (v428)
            LODWORD(v428) = *(int *)((char *)v138 + v428);
        }
        v268[42] = 192;
        v268[43] = v285;
        v268[44] = v423;
        v268[45] = (v428 + 15) & 0xFFFFFFF0 | v419 | v396;
        v268[46] = (((_DWORD)v426 << 19) + 7864320) & 0xFF800000 | v424 | 0x4000;
        v268[47] = v397;
        *(_QWORD *)(v12 + 2904) = __ROR8__(v330 + 168, 32) & 0xFFFFFFFC000000FFLL | 0x600;
        *(_QWORD *)(v12 + 2072) = v418;
        *(_QWORD *)(v12 + 2080) = v659;
        *(_DWORD *)(v12 + 3120) += 8 * (v392[1] + *v392 + v392[2] + v392[3]);
        v429 = atomic_load((unsigned int *)&AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark);
        while (1)
        {
          v430 = *(unsigned int *)(v12 + 3120);
          if (v429 >= v430)
            break;
          v431 = v429;
          v429 = __ldaxr((unsigned int *)&AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark);
          if (v429 == v431)
          {
            if (!__stlxr(v430, (unsigned int *)&AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark))break;
          }
          else
          {
            __clrex();
          }
        }
      }
      AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&v677);
    }
    if (v654)
    {
      v655 = v654;
      operator delete(v654);
    }
  }
  AGX::Heap<true>::allocateImpl(&v677, *(_QWORD *)(v12 + 2448), 568, (_QWORD *)(v12 + 2176));
  *(_DWORD *)(v12 + 2844) += LODWORD(v678[0]);
  v432 = (_DWORD *)*((_QWORD *)&v677 + 1);
  *(_QWORD *)(v12 + 3128) = v677;
  v433 = *(unsigned int *)(v12 + 1424);
  *v432 = v433;
  if ((_DWORD)v433)
  {
    v434 = *(_DWORD *)(v12 + 1416) + *(_DWORD *)(v12 + 1420);
    v435 = (char *)v432 + 10;
    do
    {
      v436 = v644 + 8 * v434;
      v437 = *(_WORD *)(v436 + 192);
      v438 = *(_WORD *)(v436 + 198);
      LODWORD(v436) = *(_DWORD *)(v436 + 194);
      *((_WORD *)v435 - 1) = v437;
      *(_DWORD *)v435 = v436;
      *((_WORD *)v435 + 2) = v438;
      ++v434;
      v435 += 8;
      --v433;
    }
    while (v433);
  }
  v439 = v678[0];
  *(_OWORD *)(v12 + 2600) = v677;
  *(_OWORD *)(v12 + 2616) = v439;
  *(_OWORD *)(v12 + 2625) = *(_OWORD *)((char *)v678 + 9);
  v440 = v651;
  if (*(_BYTE *)(v649 + 288))
  {
    *(_QWORD *)(v12 + 1352) |= *(_QWORD *)(v12 + 1272);
    *(_QWORD *)(v12 + 1272) = 0;
  }
  if (*(_BYTE *)(v649 + 289))
  {
    *(_QWORD *)(v12 + 1360) |= *(_QWORD *)(v12 + 1280);
    *(_QWORD *)(v12 + 1280) = 0;
  }
  if (*(_BYTE *)(v649 + 290))
  {
    *(_QWORD *)(v12 + 1344) |= *(_QWORD *)(v12 + 1264);
    *(_QWORD *)(v12 + 1264) = 0;
  }
  v441 = (int8x16_t *)(v12 + 1368);
  if (*(_BYTE *)(v649 + 291))
  {
    v442 = vorrq_s8(*(int8x16_t *)(v12 + 1384), *(int8x16_t *)(v12 + 1328));
    v443 = vorrq_s8(*v441, *(int8x16_t *)(v12 + 1312));
    *v441 = v443;
    *(int8x16_t *)(v12 + 1384) = v442;
    *(_OWORD *)(v12 + 1312) = 0u;
    *(_OWORD *)(v12 + 1328) = 0u;
    v444 = 1;
  }
  else
  {
    v443 = *v441;
    v442 = *(int8x16_t *)(v12 + 1384);
    v445 = vorrq_s8(*(int8x16_t *)(v12 + 1312), *(int8x16_t *)(v12 + 1328));
    v444 = vorr_s8(*(int8x8_t *)v445.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v445, v445, 8uLL)) == 0;
  }
  v446 = *(_QWORD *)(v12 + 1352) | *(_QWORD *)(v12 + 1344);
  v447 = *(_QWORD *)(v12 + 1360);
  v448 = vorrq_s8(v443, v442);
  v449 = vorr_s8(*(int8x8_t *)v448.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v448, v448, 8uLL));
  if (*(_QWORD *)(v12 + 1272) | *(_QWORD *)(v12 + 1264) | *(_QWORD *)(v12 + 1280))
    *v297 |= 0x88000000000uLL;
  v450 = v446 | v447;
  if (!v444)
    *v297 |= 0xA0000000000uLL;
  if (v450)
    *v297 |= 0x90000000000uLL;
  if (v449)
    *v297 |= 0xC0000000000uLL;
  v451 = (unsigned int *)((char *)v133 + *(unsigned __int16 *)((char *)v133 - *v133 + 8));
  if (*(unsigned int *)((char *)v451 + *v451))
    *v297 |= 0x80000000000uLL;
  v452 = v647[1];
  *(_OWORD *)(v12 + 2304) = *v647;
  *(_OWORD *)(v12 + 2320) = v452;
  *(_OWORD *)(v12 + 2329) = *(_OWORD *)((char *)v647 + 25);
  v453 = v666[0];
  *(_OWORD *)(v12 + 2912) = v665;
  *(_OWORD *)(v12 + 2928) = v453;
  *(_OWORD *)(v12 + 2937) = *(_OWORD *)((char *)v666 + 9);
  *(_OWORD *)(v12 + 2985) = *(_OWORD *)((char *)v640 + 25);
  v454 = v640[1];
  *(_OWORD *)(v12 + 2960) = *v640;
  *(_OWORD *)(v12 + 2976) = v454;
  *(_BYTE *)(v12 + 3008) = v652;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::buildUniqueResourceMask(v644);
  *(_QWORD *)(v12 + 3136) = 0;
  *(_DWORD *)(v12 + 3152) = 0;
  *(_OWORD *)(v12 + 3160) = 0u;
  *(_OWORD *)(v12 + 3176) = 0u;
  *(_OWORD *)(v12 + 3192) = 0u;
  *(_BYTE *)(v12 + 3208) = 0;
  *(_WORD *)(v12 + 3225) = 0;
  *(_BYTE *)(v12 + 3227) = 0;
  *(_OWORD *)(v12 + 3248) = 0u;
  *(_OWORD *)(v12 + 3264) = 0u;
  *(_DWORD *)(v12 + 3280) = 1065353216;
  *(_QWORD *)(v12 + 3288) = v628;
  *(_QWORD *)(v12 + 3296) = 850045863;
  *(_QWORD *)(v12 + 3352) = 0;
  *(_OWORD *)(v12 + 3304) = 0u;
  *(_OWORD *)(v12 + 3320) = 0u;
  v638 = (std::mutex *)(v12 + 3296);
  *(_OWORD *)(v12 + 3336) = 0u;
  v455 = *v642;
  if (*v642)
  {
    v456 = (unsigned int **)(v651 + 784);
    if (*(_QWORD *)(v651 + 232))
      v456 = v642;
  }
  else
  {
    v456 = (unsigned int **)(v651 + 784);
  }
  v457 = 0;
  if (*v456 && v456[1])
    v457 = (int *)((char *)*v456 + **v456);
  v458 = (unsigned __int16 *)((char *)v457 - *v457);
  if (*v458 >= 5u && (v459 = v458[2]) != 0)
  {
    v648 = (int *)((char *)v457 + v459 + *(unsigned int *)((char *)v457 + v459));
    if (!v455)
      goto LABEL_570;
LABEL_572:
    v460 = (unsigned int **)(v651 + 784);
    if (*(_QWORD *)(v651 + 232))
      v460 = v642;
  }
  else
  {
    v648 = 0;
    if (v455)
      goto LABEL_572;
LABEL_570:
    v460 = (unsigned int **)(v651 + 784);
  }
  v461 = 0;
  if (*v460 && v460[1])
    v461 = (int *)((char *)*v460 + **v460);
  v462 = (unsigned __int16 *)((char *)v461 - *v461);
  if (*v462 >= 9u && (v463 = v462[4]) != 0)
  {
    v464 = (int *)((char *)v461 + v463 + *(unsigned int *)((char *)v461 + v463));
    v465 = *v278;
    if (!*v278)
      goto LABEL_580;
LABEL_582:
    v466 = (unsigned int **)(v651 + 1024);
    if (*(_QWORD *)(v651 + 472))
      v466 = v278;
  }
  else
  {
    v464 = 0;
    v465 = *v278;
    if (*v278)
      goto LABEL_582;
LABEL_580:
    v466 = (unsigned int **)(v651 + 1024);
  }
  v467 = 0;
  if (*v466 && v466[1])
    v467 = (int *)((char *)*v466 + **v466);
  v468 = (unsigned __int16 *)((char *)v467 - *v467);
  if (*v468 >= 9u && (v469 = v468[4]) != 0)
  {
    v653 = (int *)((char *)v467 + v469 + *(unsigned int *)((char *)v467 + v469));
    if (!v465)
      goto LABEL_590;
LABEL_592:
    v470 = (unsigned int **)(v651 + 1024);
    if (*(_QWORD *)(v651 + 472))
      v470 = v278;
  }
  else
  {
    v653 = 0;
    if (v465)
      goto LABEL_592;
LABEL_590:
    v470 = (unsigned int **)(v651 + 1024);
  }
  v471 = 0;
  if (*v470 && v470[1])
    v471 = (int *)((char *)*v470 + **v470);
  v472 = (unsigned __int16 *)((char *)v471 - *v471);
  if (*v472 >= 0xFu && (v473 = v472[7]) != 0)
    v474 = (int *)((char *)v471 + v473 + *(unsigned int *)((char *)v471 + v473));
  else
    v474 = 0;
  v650 = v474;
  v475 = *(_DWORD *)(v12 + 944);
  *(_QWORD *)(v12 + 2128) = *(_QWORD *)(v12 + 920);
  *(_DWORD *)(v12 + 2844) += v475;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::buildUniqueResourceMask(v644);
  if (!*(_QWORD *)(v651 + 504))
  {
    if (!*(_QWORD *)(v651 + 1072))
      goto LABEL_634;
    v478 = *(unsigned int **)(v651 + 1064);
    if (!v478)
      goto LABEL_634;
    goto LABEL_609;
  }
  v476 = v651 + 504;
  v477 = 504;
  if (!*(_QWORD *)(v651 + 512))
  {
    v477 = 1064;
    v476 = v651 + 1064;
  }
  if (*(_QWORD *)(v476 + 8))
  {
    v478 = *(unsigned int **)(v651 + v477);
    if (v478)
    {
LABEL_609:
      v479 = (int *)((char *)v478 + *v478);
      v480 = (unsigned __int16 *)((char *)v479 - *v479);
      if (*v480 < 0xBu)
        goto LABEL_634;
      v481 = v480[5];
      if (!v481)
        goto LABEL_634;
      v482 = (int *)((char *)v479 + v481 + *(unsigned int *)((char *)v479 + v481));
      v483 = (unsigned __int16 *)((char *)v482 - *v482);
      if (*v483 < 5u)
        goto LABEL_634;
      v484 = v483[2];
      if (!v484)
        goto LABEL_634;
      v485 = (unsigned int *)((char *)v482 + v484 + *(unsigned int *)((char *)v482 + v484));
      v486 = *v485;
      if (!(_DWORD)v486)
        goto LABEL_634;
      v487 = 0;
      v643 = *(_QWORD *)(v12 + 512);
      v632 = 4 * v486;
      do
      {
        v488 = v485[v487 / 4 + 1];
        v489 = v488 - *(int *)((char *)&v485[v487 / 4 + 1] + v488);
        v490 = (char *)&v485[v487 / 4] + v489;
        v491 = *((unsigned __int16 *)v490 + 2);
        if (v491 < 5)
        {
          v495 = 0;
          v493 = 4;
        }
        else
        {
          v492 = *((unsigned __int16 *)v490 + 4);
          if (v492)
            v492 += (uint64_t)&v485[v487 / 4 + 1] + v488 + *(unsigned int *)((char *)&v485[v487 / 4 + 1] + v488 + v492);
          v493 = v492 + 4;
          if (v491 >= 7 && (v494 = *(unsigned __int16 *)((char *)&v485[v487 / 4 + 2] + v489 + 2)) != 0)
            v495 = *(_QWORD *)((char *)&v485[v487 / 4 + 1] + v488 + v494);
          else
            v495 = 0;
        }
        v496 = strlen((const char *)v493);
        if (v496 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v497 = v496;
        if (v496 >= 0x17)
        {
          v499 = (v496 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v496 | 7) != 0x17)
            v499 = v496 | 7;
          v500 = v499 + 1;
          v498 = operator new(v499 + 1);
          __p[0].__r_.__value_.__l.__size_ = v497;
          __p[0].__r_.__value_.__r.__words[2] = v500 | 0x8000000000000000;
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v498;
          v440 = v651;
        }
        else
        {
          *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v496;
          v498 = __p;
          if (!v496)
            goto LABEL_632;
        }
        memmove(v498, (const void *)v493, v497);
LABEL_632:
        *((_BYTE *)v498 + v497) = 0;
        __p[1].__r_.__value_.__r.__words[0] = v495 + v643;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(v12 + 3248, (uint64_t)__p, (uint64_t)__p);
        v278 = v645;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        v487 += 4;
      }
      while (v632 != v487);
    }
  }
LABEL_634:
  *(_QWORD *)&v677 = 0;
  *(_QWORD *)((char *)&v677 + 7) = 0;
  *(_QWORD *)&v683 = 0;
  *(_QWORD *)((char *)&v683 + 7) = 0;
  if (*v278)
  {
    v501 = (unsigned int **)(v440 + 1024);
    if (*(_QWORD *)(v440 + 472))
      v501 = v278;
  }
  else
  {
    v501 = (unsigned int **)(v440 + 1024);
  }
  v502 = 0;
  if (*v501 && v501[1])
    v502 = (int *)((char *)*v501 + **v501);
  v503 = (unsigned __int16 *)((char *)v502 - *v502);
  if (*v503 >= 0xFu && (v504 = v503[7]) != 0)
    v505 = (int *)((char *)v502 + v504 + *(unsigned int *)((char *)v502 + v504));
  else
    v505 = 0;
  v506 = (unsigned __int16 *)((char *)v505 - *v505);
  v507 = *v506;
  if (v507 < 5)
  {
    v508 = 0;
    goto LABEL_654;
  }
  if (!v506[2])
  {
    v508 = 0;
    if (v507 >= 7)
      goto LABEL_652;
    goto LABEL_687;
  }
  v508 = (unsigned int *)((char *)v505 + v506[2] + *(unsigned int *)((char *)v505 + v506[2]));
  if (v507 < 7)
  {
LABEL_687:
    v510 = 0;
    if (v508)
      goto LABEL_688;
LABEL_654:
    v511 = 0;
    v512 = 0;
    v513 = 0;
    goto LABEL_655;
  }
LABEL_652:
  v509 = v506[3];
  if (!v509)
    goto LABEL_687;
  v510 = (unsigned int *)((char *)v505 + v509 + *(unsigned int *)((char *)v505 + v509));
  if (!v508)
    goto LABEL_654;
LABEL_688:
  v534 = *v508;
  v533 = v508 + 1;
  v532 = v534;
  if (v534 >= 0x17)
  {
    v567 = (v532 & 0xFFFFFFF8) + 8;
    if ((v532 | 7) != 0x17)
      v567 = v532 | 7;
    v568 = v567 + 1;
    v535 = operator new(v567 + 1);
    __p[0].__r_.__value_.__l.__size_ = v532;
    __p[0].__r_.__value_.__r.__words[2] = v568 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v535;
    goto LABEL_746;
  }
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v532;
  v535 = __p;
  if ((_DWORD)v532)
LABEL_746:
    memmove(v535, v533, v532);
  *((_BYTE *)v535 + v532) = 0;
  *(_QWORD *)&v677 = __p[0].__r_.__value_.__l.__size_;
  v508 = (unsigned int *)__p[0].__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v677 + 7) = *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7);
  v511 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v571 = *v510;
  v570 = v510 + 1;
  v569 = v571;
  if (v571 >= 0x17)
  {
    v573 = (v569 & 0xFFFFFFF8) + 8;
    if ((v569 | 7) != 0x17)
      v573 = v569 | 7;
    v574 = v573 + 1;
    v572 = operator new(v573 + 1);
    __p[0].__r_.__value_.__l.__size_ = v569;
    __p[0].__r_.__value_.__r.__words[2] = v574 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v572;
    goto LABEL_753;
  }
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v569;
  v572 = __p;
  if ((_DWORD)v569)
LABEL_753:
    memmove(v572, v570, v569);
  v514 = 0;
  *((_BYTE *)v572 + v569) = 0;
  v575 = *v505;
  *(_QWORD *)&v683 = __p[0].__r_.__value_.__l.__size_;
  v512 = __p[0].__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v683 + 7) = *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7);
  v513 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v576 = (unsigned __int16 *)((char *)v505 - v575);
  v440 = v651;
  if (*v576 < 0x17u)
    goto LABEL_656;
  v577 = v576[11];
  if (!v577)
  {
LABEL_655:
    v514 = 0;
    goto LABEL_656;
  }
  v514 = *((_BYTE *)v505 + v577) != 0;
LABEL_656:
  if (*(char *)(v12 + 3183) < 0)
    operator delete(*(void **)(v12 + 3160));
  *(_QWORD *)(v12 + 3160) = v508;
  *(_QWORD *)(v12 + 3168) = v677;
  *(_QWORD *)(v12 + 3175) = *(_QWORD *)((char *)&v677 + 7);
  *(_BYTE *)(v12 + 3183) = v511;
  if (*(char *)(v12 + 3207) < 0)
    operator delete(*(void **)(v12 + 3184));
  *(_QWORD *)(v12 + 3184) = v512;
  *(_QWORD *)(v12 + 3192) = v683;
  *(_QWORD *)(v12 + 3199) = *(_QWORD *)((char *)&v683 + 7);
  *(_BYTE *)(v12 + 3207) = v513;
  *(_BYTE *)(v12 + 3208) = v514;
  v515 = (unsigned __int16 *)((char *)v650 - *v650);
  v516 = *v515;
  if (v516 < 0xF)
  {
    LOBYTE(v517) = 0;
    v518 = v648;
  }
  else
  {
    v517 = v515[7];
    v518 = v648;
    if (v515[7])
      LOBYTE(v517) = *((_BYTE *)v650 + v517) != 0;
  }
  *(_BYTE *)(v12 + 3217) = v517;
  v519 = (unsigned __int16 *)((char *)v518 - *v518);
  v520 = *v519;
  if (v520 < 0x2B)
  {
    LOBYTE(v521) = 0;
  }
  else
  {
    v521 = v519[21];
    if (v519[21])
      LOBYTE(v521) = *((_BYTE *)v518 + v521) != 0;
  }
  *(_BYTE *)(v12 + 3228) = v521;
  v522 = (unsigned __int16 *)((char *)v464 - *v464);
  v523 = *v522;
  if (v523 < 7)
  {
    LODWORD(v524) = 0;
  }
  else
  {
    v524 = v522[3];
    if (v522[3])
      LODWORD(v524) = *((char *)v464 + v524);
  }
  *(_BYTE *)(v12 + 3218) = (_DWORD)v524 != 0;
  if (v516 < 0x11)
  {
    LOBYTE(v525) = 0;
  }
  else
  {
    v525 = v515[8];
    if (v525)
      LOBYTE(v525) = *((_BYTE *)v650 + v525) != 0;
  }
  *(_BYTE *)(v12 + 3219) = v525;
  if (v523 < 7)
  {
    LODWORD(v526) = 0;
  }
  else
  {
    v526 = v522[3];
    if (v522[3])
      LODWORD(v526) = *((char *)v464 + v526);
  }
  *(_BYTE *)(v12 + 3220) = (_DWORD)v526 == 2;
  v527 = (unsigned __int16 *)((char *)v653 - *v653);
  if (*v527 >= 7u && (v528 = v527[3]) != 0)
    v529 = *(_QWORD *)((char *)v653 + v528);
  else
    v529 = 0;
  v530 = 0;
  *(_BYTE *)(v12 + 3221) = v529 != 0;
  *(_BYTE *)(v12 + 3224) = 0;
  if (v520 >= 5)
  {
    v531 = v519[2];
    if (v531)
      v530 = *(int *)((char *)v518 + v531);
    else
      v530 = 0;
  }
  *(_DWORD *)(v12 + 3232) = v530;
  v536 = (unsigned __int16 *)((char *)v650 - *v650);
  if (*v536 < 0x19u)
  {
    LOBYTE(v537) = 0;
  }
  else
  {
    v537 = v536[12];
    if (v537)
      LOBYTE(v537) = *((_BYTE *)v650 + v537) != 0;
  }
  *(_BYTE *)(v12 + 3229) = v537;
  v538 = (unsigned __int16 *)((char *)v464 - *v464);
  if (*v538 < 5u)
  {
    LODWORD(v539) = 0;
  }
  else
  {
    v539 = v538[2];
    if (v539)
      LODWORD(v539) = *(int *)((char *)v464 + v539);
  }
  *(_DWORD *)(v12 + 3236) = v539;
  v540 = (unsigned __int16 *)((char *)v518 - *v518);
  if (*v540 >= 0x21u && (v541 = v540[16]) != 0)
    v542 = *(int *)((char *)v518 + v541);
  else
    v542 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  if (getAdditionalSpillBufferBytes(void)::extra + v542)
  {
    if (*(_QWORD *)(v440 + 264))
    {
      v549 = v440 + 264;
      v550 = 264;
      if (!*(_QWORD *)(v440 + 272))
      {
        v550 = 824;
        v549 = v440 + 824;
      }
      if (!*(_QWORD *)(v549 + 8))
        goto LABEL_706;
      v551 = *(unsigned int **)(v440 + v550);
      if (!v551)
        goto LABEL_706;
    }
    else
    {
      if (!*(_QWORD *)(v440 + 832))
        goto LABEL_706;
      v551 = *(unsigned int **)(v440 + 824);
      if (!v551)
        goto LABEL_706;
    }
    v560 = (int *)((char *)v551 + *v551);
    v561 = (unsigned __int16 *)((char *)v560 - *v560);
    if (*v561 >= 5u)
    {
      v562 = v561[2];
      if (v562)
      {
        v563 = (int *)((char *)v560 + v562 + *(unsigned int *)((char *)v560 + v562));
        v564 = (unsigned __int16 *)((char *)v563 - *v563);
        if (*v564 >= 7u && (v565 = v564[3]) != 0)
          v566 = *(int *)((char *)v563 + v565);
        else
          v566 = 0;
        *(_DWORD *)(v12 + 3236) += v566;
      }
    }
  }
LABEL_706:
  *(_BYTE *)(v12 + 3240) = *(_BYTE *)(v633 + 145) & 0xF;
  *(_BYTE *)(v12 + 3241) = (unsigned __int16)*(_DWORD *)(v633 + 144) >> 12;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v677) = 0;
  *(_BYTE *)(v12 + 3216) = 0;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::getShaderPassInfo(v641, (unsigned int **)v440, (_DWORD *)(v12 + 3140), (int *)(v12 + 3136), (BOOL *)__p, (BOOL *)&v677);
  v544 = (unsigned __int16 *)((char *)v653 - *v653);
  v545 = *v544;
  if (v545 < 7)
  {
    v546 = 0;
  }
  else
  {
    v546 = v544[3];
    if (v544[3])
      v546 = *(_QWORD *)((char *)v653 + v546);
    if (v545 >= 9)
    {
      v547 = v544[4];
      if (v547)
      {
        v548 = *(_QWORD *)((char *)v653 + v547);
        goto LABEL_720;
      }
    }
  }
  v548 = 0;
LABEL_720:
  v552 = (unsigned __int16 *)((char *)v464 - *v464);
  if (*v552 < 7u)
  {
    LOBYTE(v553) = 0;
  }
  else
  {
    v553 = v552[3];
    if (v552[3])
      LOBYTE(v553) = *((unsigned __int8 *)v464 + v553) - 1 < 2;
  }
  if (v546)
    v554 = v553;
  else
    v554 = 0;
  v555 = (unsigned __int16 *)((char *)v650 - *v650);
  v556 = *v555;
  v557 = 1;
  if ((v548 & v546) == 0 && (v554 & 1) == 0)
  {
    if (v556 >= 0x15)
    {
      v558 = v555[10] && *((_BYTE *)v650 + v555[10]);
      *(_BYTE *)(v12 + 3223) = v558;
      goto LABEL_759;
    }
    v557 = 0;
  }
  *(_BYTE *)(v12 + 3223) = v557;
  if (v556 > 0xC)
  {
LABEL_759:
    v559 = v555[6];
    if (v555[6])
      LOBYTE(v559) = *((_BYTE *)v650 + v559) != 0;
  }
  else
  {
    LOBYTE(v559) = 0;
  }
  *(_BYTE *)(v12 + 3222) = v559;
  v578 = v552[4];
  v579 = *(unsigned int *)((char *)v464 + v578);
  v580 = (unsigned int *)((char *)v464 + v578 + v579);
  v581 = *v580;
  if ((_DWORD)v581)
  {
    v582 = 0;
    v583 = 4 * v581;
    v584 = (char *)v464 + v578 + v579;
    do
    {
      v585 = *(unsigned int *)&v584[v582 + 4];
      v586 = v585 - *(int *)((char *)&v580[v582 / 4 + 1] + v585);
      v587 = &v584[v582 + v586];
      v588 = *((unsigned __int16 *)v587 + 2);
      if (v588 < 5)
        goto LABEL_764;
      v589 = *((unsigned __int16 *)v587 + 4);
      if (!v589)
        goto LABEL_764;
      v590 = v584[v582 + 4 + v585 + v589];
      if (v590 != 8)
      {
        if (v590 == 7)
        {
          *(_BYTE *)(v12 + 3225) = 1;
        }
        else if (v590 == 6)
        {
          LOBYTE(v559) = 1;
          *(_BYTE *)(v12 + 3222) = 1;
        }
        goto LABEL_764;
      }
      if (v588 < 7)
        goto LABEL_775;
      v591 = *(unsigned __int16 *)&v584[v582 + 10 + v586];
      if (!v591)
        goto LABEL_775;
      v592 = *(_DWORD *)&v584[v582 + 4 + v585 + v591];
      if (v592 == 1)
      {
        *(_BYTE *)(v12 + 3227) = 1;
        goto LABEL_764;
      }
      if (!v592)
LABEL_775:
        *(_BYTE *)(v12 + 3226) = 1;
LABEL_764:
      v582 += 4;
    }
    while (v583 != v582);
  }
  *(_QWORD *)(v12 + 3144) = (__p[0].__r_.__value_.__s.__data_[0] << 21) | (*(_DWORD *)(v12 + 3140) << 22) | ((unint64_t)*(unsigned int *)(v12 + 3136) << 56);
  if ((_BYTE)v559)
    v593 = 2162688;
  else
    v593 = 0x10000;
  *(_DWORD *)(v12 + 3152) = v593;
  if (*(_BYTE *)(v12 + 3220))
  {
    v594 = (unsigned __int16 *)((char *)v653 - *v653);
    if (*v594 < 0xDu)
    {
      LOBYTE(v595) = 0;
    }
    else
    {
      v595 = v594[6];
      if (v595)
        LOBYTE(v595) = *((_BYTE *)v653 + v595);
    }
  }
  else
  {
    LOBYTE(v595) = 3;
  }
  *(_BYTE *)(v12 + 3230) = v595;
  if (((*(_QWORD *)(v12 + 1264) | *(_QWORD *)(v12 + 1288) | *(_QWORD *)(v12 + 1312) | *(_QWORD *)(v12 + 1344) | *(_QWORD *)(v12 + 1368)) & 0x1800000000000000) == 0)
  {
    std::mutex::lock(v638);
    v596 = *(_QWORD *)(v12 + 24);
    if (v596)
    {
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>((std::vector<unsigned int> *)v12, *(uint64_t ***)(v12 + 16), *(_QWORD *)(v12 + 24));
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(v12, v596);
      v597 = *(_QWORD *)(v12 + 16);
      v598 = *(int ***)(v597 + 72);
      v599 = *(int ***)(v597 + 80);
      if (v598 != v599)
      {
        while (1)
        {
          v601 = *v598;
          v602 = **v598;
          v603 = v602 - 11;
          switch(v602)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              goto LABEL_794;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_798;
            default:
              if (v602 == 113)
              {
LABEL_794:
                v604 = v601[1];
                if (v604 < 0)
                  goto LABEL_792;
              }
              else
              {
LABEL_798:
                v604 = v601[1];
                if (v603 > 0x66)
                  goto LABEL_792;
              }
              v605 = v601[2];
              v606 = *(_QWORD *)(v12 + 96);
              v607 = v606 + 4 * v605;
              v608 = v604 & 0xFFFFF;
              v609 = 56 * (v604 & 0xFFFFF);
              v610 = v609 + 16;
              switch(v603)
              {
                case 0u:
                  *(uint32x4_t *)v607 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v610), (int32x4_t)xmmword_232D737E0), 2uLL);
                  break;
                case 1u:
                  *(_DWORD *)v607 = v610 >> 2;
                  *(_DWORD *)(v607 + 4) = (v610 >> 2) | 1;
                  *(uint32x2_t *)(v607 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v610), (int32x2_t)0xC00000008), 2uLL);
                  break;
                case 2u:
                  v600 = (v609 + 48) >> 2;
                  goto LABEL_791;
                case 5u:
                  v600 = (v609 + 52) >> 2;
                  goto LABEL_791;
                case 6u:
                  v600 = (v609 + 56) >> 2;
                  goto LABEL_791;
                case 0xDu:
                  v600 = 600;
                  goto LABEL_791;
                case 0xEu:
                  v600 = 599;
                  goto LABEL_791;
                case 0x10u:
                  *(_OWORD *)v607 = xmmword_232D73850;
                  break;
                case 0x11u:
                  *(_QWORD *)v607 = 0x25600000255;
                  break;
                case 0x20u:
                  v600 = v604 + 558;
                  goto LABEL_791;
                case 0x2Du:
                  v600 = 601;
                  goto LABEL_791;
                case 0x30u:
                  *(_QWORD *)v607 = 0x1B7000001B6;
                  break;
                case 0x33u:
                  v600 = (v609 + 60) >> 2;
                  goto LABEL_791;
                case 0x35u:
                  *(_QWORD *)v607 = 0x1BB000001BALL;
                  break;
                case 0x40u:
                  v611 = *(unsigned __int8 *)(v12 + 3240);
                  if (!*(_BYTE *)(v12 + 3240))
                    break;
                  v612 = 2 * v611;
                  if (v611 <= 3)
                  {
                    v613 = 0;
                    v614 = 444;
                    goto LABEL_833;
                  }
                  v613 = v612 & 0x1F8;
                  v617 = (int32x4_t *)(v606 + 4 * v605 + 16);
                  v618 = (int32x4_t)xmmword_232D737F0;
                  v619 = v613;
                  do
                  {
                    v620.i64[0] = 0x400000004;
                    v620.i64[1] = 0x400000004;
                    v617[-1] = v618;
                    *v617 = vaddq_s32(v618, v620);
                    v620.i64[0] = 0x800000008;
                    v620.i64[1] = 0x800000008;
                    v618 = vaddq_s32(v618, v620);
                    v617 += 2;
                    v619 -= 8;
                  }
                  while (v619);
                  if (v613 != v612)
                  {
                    v614 = v613 + 444;
LABEL_833:
                    v621 = v613 - v612;
                    v622 = (_DWORD *)(v606 + 4 * v613 + 4 * v605);
                    do
                    {
                      *v622++ = v614++;
                      v402 = __CFADD__(v621++, 1);
                    }
                    while (!v402);
                    break;
                  }
                  break;
                case 0x52u:
                  if ((v604 & 0xFFF00000) == 0x400000)
                    v600 = 2;
                  else
                    v600 = (v609 + 64) >> 2;
                  goto LABEL_791;
                case 0x56u:
                  v615 = 8 * v608 + 1840;
                  goto LABEL_826;
                case 0x57u:
                  v615 = 8 * v608 + 2088;
LABEL_826:
                  v616 = v615 >> 2;
                  *(_DWORD *)v607 = v616;
                  *(_DWORD *)(v607 + 4) = v616 | 1;
                  break;
                case 0x5Eu:
                  *(_QWORD *)v607 = 0x22B0000022ALL;
                  break;
                case 0x5Fu:
                  v600 = 556;
                  goto LABEL_791;
                case 0x60u:
                  v600 = 557;
                  goto LABEL_791;
                case 0x62u:
                  v600 = v604 + 666;
                  goto LABEL_791;
                case 0x63u:
                  v600 = v604 + 729;
                  goto LABEL_791;
                case 0x64u:
                  v600 = 602;
                  goto LABEL_791;
                case 0x65u:
                  v600 = 792;
                  goto LABEL_791;
                case 0x66u:
                  v600 = (8 * v608 + 2088) >> 2;
LABEL_791:
                  *(_DWORD *)v607 = v600;
                  break;
                default:
                  break;
              }
LABEL_792:
              if (++v598 == v599)
                goto LABEL_837;
              break;
          }
        }
      }
LABEL_837:
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::fixupMixedIndirectGathers(v12, v596);
      v623 = *(_QWORD *)(v12 + 24);
      if (v623)
      {
        v624 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v623);
        MEMORY[0x234927ECC](v624, 0x1030C404D8F7974);
      }
      *(_QWORD *)(v12 + 24) = 0;
      v625 = *(ProgramBindingsAndDMAList **)(v12 + 16);
      if (v625)
      {
        ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v625);
        MEMORY[0x234927ECC]();
      }
      *(_QWORD *)(v12 + 16) = 0;
    }
    std::mutex::unlock(v638);
  }
  return v12;
}

void sub_232CB6FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,AGX::VertexProgramVaryings *a23,std::mutex *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  unint64_t v34;

  if (__p)
    operator delete(__p);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::~ProgramVariantPDSState(a28);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v34);
  _Unwind_Resume(a1);
}

unint64_t AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  unint64_t *v11;
  unint64_t v12;
  unsigned int **v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int **v17;
  int *v18;
  unsigned __int16 *v19;
  int *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  const char *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  const char *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned __int16 *v34;
  size_t v35;
  const void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int **v41;
  unsigned int *v42;
  int *v43;
  unsigned __int16 *v44;
  unsigned int v45;
  _DWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _DWORD *v51;
  const char *v52;
  size_t v53;
  size_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  int v61;
  int v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  unsigned int **v79;
  int *v80;
  unsigned int *v81;
  unsigned int *v82;
  BOOL v83;
  int *v84;
  unsigned __int16 *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned __int16 *v92;
  uint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  unsigned int **v96;
  unsigned int *v97;
  int *v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unsigned __int16 *v115;
  uint64_t v116;
  unsigned __int16 *v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned __int16 *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned __int16 *v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned __int16 *v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v134;
  unsigned __int16 *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  int *v147;
  unsigned __int16 *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  char *v152;
  unsigned int *v153;
  uint64_t v154;
  unsigned int *v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  unsigned __int16 *v159;
  uint64_t v160;
  int v161;
  unsigned __int8 v162;
  unsigned __int16 *v163;
  uint64_t v164;
  unsigned __int16 *v165;
  uint64_t v166;
  unsigned __int16 *v167;
  uint64_t v168;
  uint64_t v169;
  _WORD *v170;
  unsigned int v171;
  uint64_t v172;
  BOOL v173;
  int v174;
  BOOL v175;
  unsigned __int16 *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int *v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int *v195;
  int *v196;
  unsigned __int16 *v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t **v204;
  unsigned int v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  int v209;
  uint64_t v210;
  unsigned __int8 v211;
  int v212;
  unsigned __int16 *v213;
  uint64_t v214;
  unsigned __int16 *v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned __int16 *v219;
  uint64_t v220;
  unsigned __int16 *v221;
  char v222;
  unsigned int v223;
  int v224;
  int v225;
  unsigned __int8 v226;
  unsigned __int16 *v227;
  uint64_t v228;
  unsigned __int16 *v229;
  uint64_t v230;
  unsigned __int8 v231;
  uint64_t v232;
  _OWORD *v233;
  const void **v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  __int128 v240;
  const void **v241;
  uint64_t v242;
  const void *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  const void **v247;
  _QWORD *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  const void *v252;
  const void *v253;
  _QWORD *v254;
  const void **v255;
  _QWORD *v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  const void *v260;
  const void *v261;
  _QWORD *v262;
  uint64_t v263;
  NSObject *v264;
  _QWORD *v265;
  std::string *v266;
  _QWORD *v267;
  int v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  _QWORD *v272;
  std::string *v273;
  _QWORD *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  ProgramBindingsAndDMAList *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  unsigned __int16 *v295;
  uint64_t v296;
  _DWORD *v297;
  unint64_t v298;
  _BYTE *v299;
  _BYTE *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  unsigned __int16 *v305;
  uint64_t v306;
  _DWORD *v307;
  unint64_t v308;
  _DWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  unint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  char *v320;
  char *v321;
  char *v322;
  unsigned int **v323;
  int *v324;
  unsigned __int16 *v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int **v328;
  int *v329;
  unsigned __int16 *v330;
  uint64_t v331;
  int *v332;
  uint64_t v333;
  int v334;
  unsigned __int16 *v335;
  unsigned __int16 *v336;
  uint64_t v337;
  const char *v338;
  unsigned __int16 *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int *v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  char v354;
  uint64_t v355;
  uint64_t v356;
  __int128 v357;
  _QWORD *v358;
  uint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  _WORD *v365;
  uint64_t v366;
  const void *v367;
  size_t v368;
  char *v369;
  char *v370;
  uint64_t *v371;
  unsigned __int16 *v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  char *v379;
  char v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  char *v393;
  char v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int *v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  char v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  __int128 v432;
  unsigned int *v433;
  unsigned int **v434;
  int *v435;
  unsigned __int16 *v436;
  uint64_t v437;
  int *v438;
  unsigned int **v439;
  int *v440;
  unsigned __int16 *v441;
  uint64_t v442;
  int *v443;
  unsigned int *v444;
  unsigned int **v445;
  int *v446;
  unsigned __int16 *v447;
  uint64_t v448;
  int *v449;
  unsigned int **v450;
  int *v451;
  unsigned __int16 *v452;
  uint64_t v453;
  int *v454;
  unsigned __int16 *v455;
  uint64_t v456;
  unsigned __int16 *v457;
  uint64_t v458;
  _BOOL4 v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int *v466;
  unsigned __int16 *v467;
  unsigned int v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  unsigned __int16 *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  char *v479;
  char v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  unsigned int v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  unint64_t v492;
  unsigned __int16 *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int *v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  char *v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  char *v506;
  unsigned int v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  char v512;
  int v513;
  uint64_t v514;
  unsigned __int16 *v515;
  unsigned int v516;
  char v517;
  int v518;
  int v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  char v524;
  char v525;
  unsigned int v526;
  char v527;
  char v528;
  char v529;
  uint64_t v530;
  int v531;
  int v532;
  uint64_t v533;
  __int128 v534;
  unsigned __int16 *v535;
  int v536;
  unsigned int v537;
  unsigned int v538;
  unint64_t v539;
  unsigned __int16 *v540;
  uint64_t v541;
  unsigned int v542;
  int v543;
  unint64_t v544;
  unsigned int v545;
  unsigned __int16 *v546;
  uint64_t v547;
  uint64_t v548;
  __int128 v549;
  __int128 v550;
  int v551;
  int v552;
  __int128 v553;
  uint64_t v554;
  unsigned __int16 *v555;
  uint64_t v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v559;
  unsigned int *v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint32x2_t *v564;
  char *v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  char *v569;
  unsigned int v570;
  uint64_t v571;
  int v572;
  int v573;
  int v574;
  uint32x2_t *v575;
  int v576;
  uint64_t v577;
  int v578;
  int v579;
  unsigned int v580;
  int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  double v585;
  double v586;
  int8x16_t v587;
  int64_t v588;
  unsigned __int16 *v589;
  unsigned __int16 *v590;
  uint64_t v591;
  uint64_t v592;
  unsigned int v593;
  __int128 v594;
  _WORD *v595;
  unsigned __int16 *v596;
  unsigned __int16 *v597;
  unsigned __int16 *v598;
  unsigned __int16 *v599;
  __int16 *v600;
  unint64_t v601;
  __int16 *v602;
  int v603;
  unsigned int v604;
  unsigned int v605;
  __int16 v606;
  int v607;
  unsigned int v608;
  unsigned int v609;
  __int16 v610;
  unsigned int *v611;
  unsigned __int16 *v612;
  uint64_t v613;
  char *v614;
  unint64_t v615;
  unint64_t v616;
  BOOL v617;
  char v618;
  BOOL v619;
  uint64_t v620;
  uint64_t v621;
  int32x4_t v622;
  uint16x8_t v623;
  int16x8_t v624;
  int16x8_t v625;
  int8x16_t v626;
  int8x16_t v627;
  const __int16 *v628;
  uint64_t v629;
  uint16x8_t v630;
  int8x16_t v631;
  uint64_t v632;
  int v633;
  unint64_t v634;
  unint64_t v635;
  unint64_t v636;
  _DWORD *v637;
  uint64_t v638;
  unsigned int v639;
  char *v640;
  uint64_t v641;
  __int16 v642;
  __int16 v643;
  __int128 v644;
  int8x16_t v645;
  uint64_t v646;
  unsigned int *v647;
  unsigned int **v648;
  int *v649;
  unsigned __int16 *v650;
  uint64_t v651;
  int *v652;
  unsigned int **v653;
  int *v654;
  unsigned __int16 *v655;
  uint64_t v656;
  int *v657;
  unsigned int **v658;
  int *v659;
  unsigned __int16 *v660;
  uint64_t v661;
  int *v662;
  int v663;
  uint64_t v664;
  uint64_t v665;
  unsigned int *v666;
  int *v667;
  unsigned __int16 *v668;
  uint64_t v669;
  int *v670;
  unsigned __int16 *v671;
  uint64_t v672;
  unsigned int *v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  uint64_t v677;
  char *v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  size_t v684;
  size_t v685;
  _BYTE *v686;
  uint64_t v687;
  uint64_t v688;
  unsigned __int16 *v689;
  unsigned int v690;
  uint64_t v691;
  uint64_t v692;
  unsigned __int16 *v693;
  unsigned int v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  unsigned __int16 *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unsigned int *v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  char *v708;
  uint64_t v709;
  char *v710;
  uint64_t v711;
  int v712;
  unsigned __int16 *v713;
  uint64_t v714;
  unsigned __int16 *v715;
  uint64_t v716;
  unsigned __int16 *v717;
  unsigned __int16 *v718;
  uint64_t v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int v722;
  unsigned __int16 *v723;
  uint64_t v724;
  unsigned __int16 *v725;
  uint64_t v726;
  unsigned int v727;
  unsigned int v728;
  char *v730;
  unint64_t v731;
  _QWORD *v732;
  _OWORD *v733;
  _OWORD *v734;
  void *v735;
  ProgramBindingsAndDMAList **v736;
  _OWORD *v737;
  _DWORD *v738;
  unint64_t v739;
  std::string *v741;
  _QWORD *v742;
  _QWORD *v743;
  unsigned int **v744;
  unsigned int **v745;
  char *v748;
  uint64_t v749;
  uint64_t **v750;
  uint64_t v751;
  _QWORD *v752;
  unsigned int v753;
  uint64_t v754;
  uint64_t v755;
  int *v756;
  unint64_t ***v757;
  uint64_t v758;
  _QWORD *__src;
  void *__srca;
  int *v761;
  uint64_t v762;
  void *v764;
  void *v765;
  uint64_t v766;
  int v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  __int128 v771;
  _OWORD v772[2];
  __int128 v773;
  _OWORD v774[2];
  __int128 __str;
  __int128 __str_16;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  uint64_t v780;
  __int128 v781;
  _OWORD v782[2];
  _BYTE __dst[48];
  void *__p[2];
  char v785;
  unsigned __int16 *v786;
  unsigned __int16 *v787;
  unsigned __int16 *v788;
  unsigned __int16 *v789;
  uint64_t v790;
  int16x8x2_t v791;

  v790 = *MEMORY[0x24BDAC8D0];
  BYTE7(__str_16) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  LOBYTE(__str) = 0;
  *(_QWORD *)a1 = &off_2504019C0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  v739 = a1 + 1368;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  v732 = (_QWORD *)(a1 + 392);
  v11 = (unint64_t *)(a2 + 6744);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 424) = v12;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 868) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  v743 = (_QWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 489) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 895) = 0u;
  *(_OWORD *)(a1 + 911) = 0u;
  *(_OWORD *)(a1 + 927) = 0u;
  v730 = (char *)(a1 + 895);
  *(_QWORD *)(a1 + 940) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_BYTE *)(a1 + 1040) = *(_BYTE *)(a4 + 425);
  *(_WORD *)(a1 + 1042) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  v750 = (uint64_t **)(a1 + 1056);
  v752 = (_QWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 1048) = a1 + 1056;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_QWORD *)(a1 + 1232) = 0;
  if (*(_QWORD *)(a3 + 224))
  {
    v13 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v13 = (unsigned int **)(a3 + 224);
  }
  else
  {
    v13 = (unsigned int **)(a3 + 784);
  }
  v14 = 0;
  if (*v13 && v13[1])
    v14 = (int *)((char *)*v13 + **v13);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (v16 = v15[2]) != 0)
    v756 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  else
    v756 = 0;
  v744 = (unsigned int **)(a3 + 464);
  if (*(_QWORD *)(a3 + 464))
  {
    v17 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v17 = (unsigned int **)(a3 + 464);
  }
  else
  {
    v17 = (unsigned int **)(a3 + 1024);
  }
  v18 = 0;
  if (*v17 && v17[1])
    v18 = (int *)((char *)*v17 + **v17);
  v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 < 5u)
  {
    v20 = 0;
  }
  else
  {
    v20 = (int *)v19[2];
    if (v20)
      v20 = (int *)((char *)v20 + (_QWORD)v18 + *(unsigned int *)((char *)v20 + (_QWORD)v18));
  }
  v761 = v20;
  v21 = (unsigned __int16 *)((char *)v20 - *v20);
  v22 = *v21;
  if (v22 < 0x25)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v23 = v21[18];
    if (v21[18])
      LOBYTE(v23) = *((_BYTE *)v761 + v23) != 0;
  }
  *(_BYTE *)(a1 + 1041) = v23;
  v24 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v24 >= 0x55u && v24[42])
  {
    if (v22 <= 6)
    {
LABEL_34:
      LODWORD(v25) = 0;
      goto LABEL_38;
    }
  }
  else if (v22 < 7)
  {
    goto LABEL_34;
  }
  v25 = v21[3];
  if (v25)
    LODWORD(v25) = *(int *)((char *)v761 + v25);
LABEL_38:
  *(_DWORD *)(a1 + 416) = v25;
  v26 = (unsigned __int16 *)((char *)v761 - *v761);
  v745 = (unsigned int **)(a3 + 224);
  v736 = (ProgramBindingsAndDMAList **)(a1 + 16);
  v737 = (_OWORD *)(a1 + 552);
  v733 = (_OWORD *)(a1 + 600);
  v734 = (_OWORD *)(a1 + 648);
  if (*v26 >= 0x13u && (v27 = v26[9]) != 0)
    v28 = (char *)v761 + v27 + *(unsigned int *)((char *)v761 + v27) + 4;
  else
    v28 = "";
  v741 = (std::string *)(a1 + 480);
  v742 = (_QWORD *)(a1 + 456);
  v731 = a1 + 872;
  v738 = (_DWORD *)(a1 + 1072);
  MEMORY[0x234927D28](v743, v28);
  v29 = (unsigned __int16 *)((char *)v761 - *v761);
  if (*v29 >= 9u && (v30 = v29[4]) != 0)
    v31 = (char *)v761 + v30 + *(unsigned int *)((char *)v761 + v30) + 4;
  else
    v31 = "";
  MEMORY[0x234927D28](v742, v31);
  v32 = (unsigned __int16 *)((char *)v761 - *v761);
  if (*v32 < 0x29u)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v33 = v32[20];
    if (v33)
      LOBYTE(v33) = *((_BYTE *)v761 + v33) != 0;
  }
  *(_BYTE *)(a1 + 504) = v33;
  std::string::operator=(v741, (const std::string *)&__str);
  v34 = (unsigned __int16 *)((char *)v761 - *v761);
  v754 = a4;
  if (*v34 >= 5u && v34[2] && *(_BYTE *)(a2 + 6360))
  {
    v35 = *(_QWORD *)(a3 + 8);
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v36 = *(const void **)a3;
    if (v35 >= 0x17)
    {
      v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v38 = v35 | 7;
      v39 = v38 + 1;
      v37 = operator new(v38 + 1);
      *(_QWORD *)&__dst[16] = v39 | 0x8000000000000000;
      *(_QWORD *)__dst = v37;
      *(_QWORD *)&__dst[8] = v35;
    }
    else
    {
      __dst[23] = *(_QWORD *)(a3 + 8);
      v37 = __dst;
      if (!v35)
        goto LABEL_61;
    }
    memmove(v37, v36, v35);
LABEL_61:
    v37[v35] = 0;
    if (*v730 < 0)
      operator delete(*(void **)v731);
    *(_OWORD *)v731 = *(_OWORD *)__dst;
    *(_QWORD *)(v731 + 16) = *(_QWORD *)&__dst[16];
    v40 = (_QWORD *)(a3 + 24);
    if (*(_QWORD *)(a3 + 24))
    {
      if (!*(_QWORD *)(a3 + 32))
        v40 = (_QWORD *)(a3 + 584);
    }
    else
    {
      v40 = (_QWORD *)(a3 + 584);
    }
    *(_QWORD *)(a1 + 896) = *v40 - *(_QWORD *)a3;
  }
  __src = (_QWORD *)a3;
  v735 = a7;
  if (!*(_QWORD *)(a3 + 344))
  {
    v41 = (unsigned int **)(a3 + 904);
    v42 = *(unsigned int **)(a3 + 904);
    if (!v42)
      goto LABEL_122;
LABEL_75:
    if (!v41[1])
      goto LABEL_122;
    v43 = (int *)((char *)v42 + *v42);
    v44 = (unsigned __int16 *)((char *)v43 - *v43);
    v45 = *v44;
    if (v44[2])
    {
      v46 = (int *)((char *)v43 + v44[2] + *(unsigned int *)((char *)v43 + v44[2]));
      if (v45 < 7)
        goto LABEL_83;
    }
    else
    {
      v46 = 0;
      if (v45 < 7)
        goto LABEL_83;
    }
    v47 = v44[3];
    if (v47)
    {
      v48 = (char *)v43 + v47 + *(unsigned int *)((char *)v43 + v47);
      if (!*v46)
        goto LABEL_122;
      goto LABEL_84;
    }
LABEL_83:
    v48 = 0;
    if (!*v46)
      goto LABEL_122;
LABEL_84:
    v49 = 0;
    v50 = v48 + 4;
    v748 = v48 + 4;
    while (1)
    {
      v52 = (char *)&v46[v49 + 2] + v46[v49 + 1];
      v53 = strlen(v52);
      if (v53 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v54 = v53;
      if (v53 >= 0x17)
      {
        v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v53 | 7) != 0x17)
          v56 = v53 | 7;
        v57 = v56 + 1;
        v55 = operator new(v56 + 1);
        *(_QWORD *)&__dst[16] = v57 | 0x8000000000000000;
        *(_QWORD *)__dst = v55;
        *(_QWORD *)&__dst[8] = v54;
      }
      else
      {
        __dst[23] = v53;
        v55 = __dst;
        if (!v53)
          goto LABEL_95;
      }
      memmove(v55, v52, v54);
LABEL_95:
      v55[v54] = 0;
      v58 = (_QWORD *)a1;
      v59 = *(_QWORD *)(a1 + 1176);
      if (v59 >= *(_QWORD *)(a1 + 1184))
      {
        v60 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1168), (uint64_t)__dst);
        v61 = __dst[23];
        v58 = (_QWORD *)a1;
        *(_QWORD *)(a1 + 1176) = v60;
        if (v61 < 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        *(_OWORD *)v59 = *(_OWORD *)__dst;
        *(_QWORD *)(v59 + 16) = *(_QWORD *)&__dst[16];
        *(_QWORD *)(a1 + 1176) = v59 + 24;
      }
      v62 = *(_DWORD *)&v50[4 * v49];
      v63 = (char *)v58[150];
      v64 = v58[151];
      if ((unint64_t)v63 < v64)
      {
        *(_DWORD *)v63 = v62;
        v51 = v63 + 4;
      }
      else
      {
        v65 = (char *)v58[149];
        v66 = (v63 - v65) >> 2;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
          abort();
        v68 = v64 - (_QWORD)v65;
        if (v68 >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v70 = operator new(4 * v69);
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v66];
        *v71 = v62;
        v51 = v71 + 1;
        if (v63 != v65)
        {
          v72 = v63 - 4 - v65;
          if (v72 < 0x2C)
            goto LABEL_1129;
          if ((unint64_t)(v65 - v70) < 0x20)
            goto LABEL_1129;
          v73 = (v72 >> 2) + 1;
          v74 = &v70[4 * v66 - 16];
          v75 = v63 - 16;
          v76 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v77 = *(_OWORD *)v75;
            *(v74 - 1) = *((_OWORD *)v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 32;
            v76 -= 8;
          }
          while (v76);
          v71 -= v73 & 0x7FFFFFFFFFFFFFF8;
          v63 -= 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1129:
            do
            {
              v78 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *--v71 = v78;
            }
            while (v63 != v65);
          }
        }
        *(_QWORD *)(a1 + 1192) = v71;
        *(_QWORD *)(a1 + 1200) = v51;
        *(_QWORD *)(a1 + 1208) = &v70[4 * v69];
        if (v65)
          operator delete(v65);
        v50 = v748;
      }
      *(_QWORD *)(a1 + 1200) = v51;
      if (++v49 >= (unint64_t)*v46)
        goto LABEL_122;
    }
  }
  v41 = (unsigned int **)(a3 + 344);
  if (!*(_QWORD *)(a3 + 352))
    v41 = (unsigned int **)(a3 + 904);
  v42 = *v41;
  if (*v41)
    goto LABEL_75;
LABEL_122:
  if (*(_QWORD *)(a3 + 544))
  {
    v79 = (unsigned int **)(a3 + 544);
    if (!*(_QWORD *)(a3 + 552))
      v79 = (unsigned int **)(a3 + 1104);
  }
  else
  {
    v79 = (unsigned int **)(a3 + 1104);
  }
  v80 = v761;
  v82 = *v79;
  v81 = v79[1];
  if (v82)
    v83 = v81 == 0;
  else
    v83 = 1;
  if (v83
    || (v84 = (int *)((char *)v82 + *v82), v85 = (unsigned __int16 *)((char *)v84 - *v84), *v85 < 5u)
    || (v86 = v85[2]) == 0)
  {
    v87 = 0;
  }
  else
  {
    v87 = *(_QWORD *)((char *)v84 + v86);
  }
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  *(float *)(a1 + 1080) = (float)(v87
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / unk_254235750)
                        / 1000000.0;
  v88 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v88 < 5u)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v89 = v88[2];
    if (v89)
      LODWORD(v89) = *(int *)((char *)v756 + v89);
  }
  *v738 = v89;
  v90 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v90 < 0x2Du)
  {
    LODWORD(v91) = 0;
  }
  else
  {
    v91 = v90[22];
    if (v91)
      LODWORD(v91) = *(int *)((char *)v756 + v91);
  }
  *(_DWORD *)(a1 + 1076) = v91;
  v92 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v92 < 0x35u)
  {
    LODWORD(v93) = 0;
  }
  else
  {
    v93 = v92[26];
    if (v93)
      LODWORD(v93) = *(int *)((char *)v756 + v93);
  }
  *(_DWORD *)(a1 + 1116) = v93;
  v94 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v94 < 0x43u)
  {
    LODWORD(v95) = 0;
  }
  else
  {
    v95 = v94[33];
    if (v95)
      LODWORD(v95) = *(int *)((char *)v756 + v95);
  }
  *(_DWORD *)(a1 + 1152) = v95;
  if (__src[38])
  {
    v96 = (unsigned int **)(__src + 38);
    if (!__src[39])
      v96 = (unsigned int **)(__src + 108);
    v97 = *v96;
    if (!*v96)
      goto LABEL_237;
    goto LABEL_159;
  }
  v96 = (unsigned int **)(__src + 108);
  v97 = (unsigned int *)__src[108];
  if (v97)
  {
LABEL_159:
    if (v96[1])
    {
      v98 = (int *)((char *)v97 + *v97);
      v99 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v99 < 0xDu)
      {
        LODWORD(v100) = 0;
      }
      else
      {
        v100 = v99[6];
        if (v100)
          LODWORD(v100) = *(int *)((char *)v98 + v100);
      }
      *(_DWORD *)(a1 + 1076) = v100;
      v101 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v101 < 0xBu)
      {
        LODWORD(v102) = 0;
      }
      else
      {
        v102 = v101[5];
        if (v102)
          LODWORD(v102) = *(int *)((char *)v98 + v102);
      }
      *(_DWORD *)(a1 + 1084) = v102;
      v103 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v103 < 0x11u)
      {
        LODWORD(v104) = 0;
      }
      else
      {
        v104 = v103[8];
        if (v104)
          LODWORD(v104) = *(int *)((char *)v98 + v104);
      }
      *(_DWORD *)(a1 + 1088) = v104;
      v105 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v105 < 0x13u)
      {
        LODWORD(v106) = 0;
      }
      else
      {
        v106 = v105[9];
        if (v106)
          LODWORD(v106) = *(int *)((char *)v98 + v106);
      }
      *(_DWORD *)(a1 + 1092) = v106;
      v107 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v107 < 0x17u)
      {
        LODWORD(v108) = 0;
      }
      else
      {
        v108 = v107[11];
        if (v108)
          LODWORD(v108) = *(int *)((char *)v98 + v108);
      }
      *(_DWORD *)(a1 + 1096) = v108;
      v109 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v109 < 0x1Bu)
      {
        LODWORD(v110) = 0;
      }
      else
      {
        v110 = v109[13];
        if (v110)
          LODWORD(v110) = *(int *)((char *)v98 + v110);
      }
      *(_DWORD *)(a1 + 1100) = v110;
      v111 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v111 < 0x15u)
      {
        LODWORD(v112) = 0;
      }
      else
      {
        v112 = v111[10];
        if (v112)
          LODWORD(v112) = *(int *)((char *)v98 + v112);
      }
      *(_DWORD *)(a1 + 1104) = v112;
      v113 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v113 < 0x19u)
      {
        LODWORD(v114) = 0;
      }
      else
      {
        v114 = v113[12];
        if (v114)
          LODWORD(v114) = *(int *)((char *)v98 + v114);
      }
      *(_DWORD *)(a1 + 1108) = v114;
      v115 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v115 < 0x1Du)
      {
        LODWORD(v116) = 0;
      }
      else
      {
        v116 = v115[14];
        if (v116)
          LODWORD(v116) = *(int *)((char *)v98 + v116);
      }
      *(_DWORD *)(a1 + 1112) = v116;
      v117 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v117 < 0xFu)
      {
        LODWORD(v118) = 0;
      }
      else
      {
        v118 = v117[7];
        if (v118)
          LODWORD(v118) = *(int *)((char *)v98 + v118);
      }
      *(_DWORD *)(a1 + 1116) = v118;
      v119 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v119 < 0x1Fu)
      {
        LODWORD(v120) = 0;
      }
      else
      {
        v120 = v119[15];
        if (v120)
          LODWORD(v120) = *(int *)((char *)v98 + v120);
      }
      *(_DWORD *)(a1 + 1120) = v120;
      v121 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v121 < 0x21u)
      {
        LODWORD(v122) = 0;
      }
      else
      {
        v122 = v121[16];
        if (v122)
          LODWORD(v122) = *(int *)((char *)v98 + v122);
      }
      *(_DWORD *)(a1 + 1124) = v122;
      v123 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v123 < 0x23u)
      {
        LODWORD(v124) = 0;
      }
      else
      {
        v124 = v123[17];
        if (v124)
          LODWORD(v124) = *(int *)((char *)v98 + v124);
      }
      *(_DWORD *)(a1 + 1128) = v124;
      v125 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v125 < 0x25u)
      {
        LODWORD(v126) = 0;
      }
      else
      {
        v126 = v125[18];
        if (v126)
          LODWORD(v126) = *(int *)((char *)v98 + v126);
      }
      *(_DWORD *)(a1 + 1132) = v126;
      v127 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v127 < 0x27u)
      {
        LODWORD(v128) = 0;
      }
      else
      {
        v128 = v127[19];
        if (v128)
          LODWORD(v128) = *(int *)((char *)v98 + v128);
      }
      *(_DWORD *)(a1 + 1136) = v128;
      v129 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v129 < 0x29u)
      {
        LODWORD(v130) = 0;
      }
      else
      {
        v130 = v129[20];
        if (v130)
          LODWORD(v130) = *(int *)((char *)v98 + v130);
      }
      *(_DWORD *)(a1 + 1140) = v130;
      v131 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v131 < 0x2Bu)
      {
        LODWORD(v132) = 0;
      }
      else
      {
        v132 = v131[21];
        if (v132)
          LODWORD(v132) = *(int *)((char *)v98 + v132);
      }
      *(_DWORD *)(a1 + 1144) = v132;
      v133 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v133 < 7u)
      {
        LODWORD(v134) = 0;
      }
      else
      {
        v134 = v133[3];
        if (v134)
          LODWORD(v134) = *(int *)((char *)v98 + v134);
      }
      *(_DWORD *)(a1 + 1148) = v134;
      v135 = (unsigned __int16 *)((char *)v98 - *v98);
      if (*v135 >= 5u && (v136 = v135[2]) != 0)
        v137 = *(int *)((char *)v98 + v136);
      else
        v137 = 0;
      *(_DWORD *)(a1 + 1156) = v137;
    }
  }
LABEL_237:
  if (__src[53])
  {
    v138 = __src[54];
    if (v138)
      v139 = __src[53];
    else
      v139 = __src[123];
    if (v138)
      v140 = __src + 53;
    else
      v140 = __src + 123;
  }
  else
  {
    v140 = __src + 123;
    v139 = __src[123];
  }
  MEMORY[0x234927D34](a1 + 1216, v139, v140[1]);
  std::string::push_back((std::string *)(a1 + 1216), 0);
  v141 = *v756;
  v142 = (char *)v756 - v141;
  v143 = *(unsigned __int16 *)((char *)v756 - v141);
  if (v143 < 0x39)
    goto LABEL_263;
  v144 = -v141;
  v145 = *((unsigned __int16 *)v142 + 28);
  if (v145)
  {
    v146 = (int *)((char *)v756 + v145 + *(unsigned int *)((char *)v756 + v145));
    if (*v146)
    {
      *(_BYTE *)(a1 + 960) = 1;
      v147 = (_DWORD *)((char *)v146 + v146[1] + 4);
      v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (v149 = v148[4]) != 0)
        v150 = *(int *)((char *)v147 + v149);
      else
        v150 = 0;
      *(_DWORD *)(a1 + 1160) = v150;
      *(_BYTE *)(a1 + 1164) = 1;
      v151 = *v756;
      v144 = -v151;
      v143 = *(unsigned __int16 *)((char *)v756 - v151);
    }
  }
  if (v143 < 0x3B)
    goto LABEL_263;
  v152 = (char *)v756 + v144;
  if (*((_WORD *)v152 + 29))
  {
    v153 = (unsigned int *)((char *)v756
                          + *((unsigned __int16 *)v152 + 29)
                          + *(unsigned int *)((char *)v756 + *((unsigned __int16 *)v152 + 29)));
    v154 = *v153;
    if ((_DWORD)v154)
    {
      v155 = v153 + 1;
      do
      {
        v157 = *v155++;
        v156 = v157;
        if (!(v157 >> 20))
          *(_QWORD *)(a1 + 952) |= 1 << v156;
        --v154;
      }
      while (v154);
    }
  }
  if (v143 < 0x57)
  {
LABEL_263:
    LODWORD(v158) = 0;
  }
  else
  {
    v158 = *((unsigned __int16 *)v152 + 43);
    if (*((_WORD *)v152 + 43))
      LODWORD(v158) = *(int *)((char *)v756 + v158);
  }
  *(_DWORD *)(a1 + 324) = v158;
  v159 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v159 >= 0x21u && (v160 = v159[16]) != 0)
    v161 = *(int *)((char *)v756 + v160);
  else
    v161 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 328) = getAdditionalSpillBufferBytes(void)::extra + v161;
  v163 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v163 < 0x59u)
  {
    LODWORD(v164) = 0;
  }
  else
  {
    v164 = v163[44];
    if (v164)
      LODWORD(v164) = *(int *)((char *)v756 + v164);
  }
  *(_DWORD *)(a1 + 356) = v164;
  v165 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v165 < 0x51u)
  {
    LODWORD(v166) = 0;
  }
  else
  {
    v166 = v165[40];
    if (v166)
      LODWORD(v166) = *(int *)((char *)v756 + v166);
  }
  *(_DWORD *)(a1 + 360) = v166;
  v167 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v167 < 0x4Bu)
  {
    LODWORD(v168) = 0;
  }
  else
  {
    v168 = v167[37];
    if (v168)
      LODWORD(v168) = *(int *)((char *)v756 + v168);
  }
  *(_DWORD *)(a1 + 368) = v168;
  v169 = *v756;
  v170 = (_WORD *)((char *)v756 - v169);
  v171 = *(unsigned __int16 *)((char *)v756 - v169);
  if (v171 < 0x25)
    goto LABEL_291;
  if (v170[18] && *((_BYTE *)v756 + (unsigned __int16)v170[18]))
  {
    if (v171 < 0x27)
    {
      v175 = 0;
      v173 = 1;
      goto LABEL_293;
    }
    LODWORD(v172) = (unsigned __int16)v170[19];
    v173 = 1;
    if (!v170[19])
      goto LABEL_292;
    goto LABEL_927;
  }
  if (v171 < 0x27)
  {
LABEL_291:
    v173 = 0;
    goto LABEL_292;
  }
  v172 = (unsigned __int16)v170[19];
  if (!v170[19] || (v174 = *((unsigned __int8 *)v756 + v172), !*((_BYTE *)v756 + v172)))
  {
    if (v171 >= 0x29 && v170[20])
    {
      v173 = *((_BYTE *)v756 + (unsigned __int16)v170[20]) != 0;
      if (!v170[19])
        goto LABEL_292;
      goto LABEL_927;
    }
    v173 = 0;
    if (v170[19])
    {
LABEL_927:
      v174 = *((unsigned __int8 *)v756 + v172);
      goto LABEL_928;
    }
LABEL_292:
    v175 = 0;
    goto LABEL_293;
  }
  v173 = 1;
LABEL_928:
  v175 = v174 != 0;
LABEL_293:
  *(_BYTE *)(a1 + 378) = v175;
  v176 = (unsigned __int16 *)((char *)v761 - *v761);
  v177 = *v176;
  if (v177 < 0x21)
  {
    v179 = 0;
    LODWORD(v178) = 0;
  }
  else
  {
    v178 = v176[16];
    if (v176[16])
      LODWORD(v178) = *(int *)((char *)v761 + v178);
    if (v177 < 0x4D)
    {
      v179 = 0;
    }
    else
    {
      v179 = v176[38];
      if (v176[38])
        v179 = *(unsigned int *)((char *)v761 + v179);
    }
  }
  *(_QWORD *)(a1 + 408) = v178 | (unint64_t)(v179 << 32);
  *(_BYTE *)(a1 + 382) = v173 || v175;
  if (v171 < 0x37)
  {
    LOBYTE(v180) = 0;
  }
  else
  {
    v180 = (unsigned __int16)v170[27];
    if (v170[27])
      LOBYTE(v180) = *((_BYTE *)v756 + v180) != 0;
  }
  *(_BYTE *)(a1 + 377) = v180;
  if (v177 < 0x33)
  {
    LOBYTE(v181) = 0;
  }
  else
  {
    v181 = v176[25];
    if (v176[25])
      LOBYTE(v181) = *((_BYTE *)v761 + v181) != 0;
  }
  v182 = -v169;
  *(_BYTE *)(a1 + 383) = v181;
  if (v171 < 0x3F)
  {
    LOBYTE(v183) = 0;
  }
  else
  {
    v183 = (unsigned __int16)v170[31];
    if (v183)
    {
      v184 = (unsigned int *)((char *)v756 + v183 + *(unsigned int *)((char *)v756 + v183));
      v183 = *v184;
      if ((_DWORD)v183)
      {
        v185 = v184 + 1;
        while (1)
        {
          v187 = *v185++;
          v186 = v187;
          if (v187 < 0x36 && ((0x3F000000000777uLL >> v186) & 1) != 0)
            break;
          if (!--v183)
            goto LABEL_318;
        }
        LOBYTE(v183) = 1;
      }
    }
  }
LABEL_318:
  *(_BYTE *)(a1 + 385) = v183;
  if (v177 <= 0x14)
  {
    *(_BYTE *)(a1 + 379) = 0;
    *(_BYTE *)(a1 + 1041) = 0;
    *(_BYTE *)(a1 + 1043) = 0;
    if (v171 >= 0x21)
      goto LABEL_353;
LABEL_356:
    v209 = 0;
    goto LABEL_357;
  }
  v188 = v176[10];
  if (v176[10])
    LOBYTE(v188) = *((_BYTE *)v761 + v188) != 0;
  *(_BYTE *)(a1 + 379) = v188;
  if (v177 < 0x25)
  {
    *(_BYTE *)(a1 + 1041) = 0;
    if (v177 < 0x23)
    {
LABEL_351:
      *(_BYTE *)(a1 + 1043) = 0;
LABEL_352:
      if (v171 < 0x21)
        goto LABEL_356;
      goto LABEL_353;
    }
  }
  else
  {
    v189 = v176[18];
    if (v176[18])
      LOBYTE(v189) = *((_BYTE *)v761 + v189) != 0;
    *(_BYTE *)(a1 + 1041) = v189;
  }
  v190 = v176[17];
  if (!v176[17])
    goto LABEL_351;
  *(_BYTE *)(a1 + 1043) = 1;
  v191 = (unsigned int *)((char *)v761 + v190);
  v192 = *v191;
  v194 = (unsigned int *)((char *)v191 + v192 + 4);
  v193 = *(unsigned int *)((char *)v191 + v192);
  if (!(_DWORD)v193)
    goto LABEL_352;
  v195 = &v194[v193];
  do
  {
    v196 = (int *)((char *)v194 + *v194);
    v197 = (unsigned __int16 *)((char *)v196 - *v196);
    v198 = *v197;
    if (v198 < 7)
    {
      v199 = 0;
      v201 = 0;
      if (v198 < 5)
        goto LABEL_340;
      v200 = v197[2];
      if (v200)
        goto LABEL_339;
    }
    else if (v197[3])
    {
      v199 = *(int *)((char *)v196 + v197[3]);
      v200 = v197[2];
      if (v200)
        goto LABEL_339;
    }
    else
    {
      v199 = 0;
      v200 = v197[2];
      if (v200)
      {
LABEL_339:
        v201 = *(int *)((char *)v196 + v200);
        goto LABEL_340;
      }
    }
    v201 = 0;
LABEL_340:
    v202 = v750;
    while (1)
    {
      v203 = *v202;
      v204 = v202;
      if (!*v202)
        break;
      while (1)
      {
        v202 = (uint64_t **)v203;
        v205 = *((_DWORD *)v203 + 7);
        if (v201 < v205)
          break;
        if (v205 >= v201)
        {
          v206 = v202;
          goto LABEL_332;
        }
        v203 = v202[1];
        if (!v203)
        {
          v204 = v202 + 1;
          goto LABEL_346;
        }
      }
    }
LABEL_346:
    v206 = operator new(0x28uLL);
    v206[7] = v201;
    v206[8] = 0;
    *(_QWORD *)v206 = 0;
    *((_QWORD *)v206 + 1) = 0;
    *((_QWORD *)v206 + 2) = v202;
    *v204 = (uint64_t *)v206;
    v207 = **(_QWORD **)(a1 + 1048);
    v208 = (uint64_t *)v206;
    if (v207)
    {
      *(_QWORD *)(a1 + 1048) = v207;
      v208 = *v204;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1056), v208);
    ++*(_QWORD *)(a1 + 1064);
LABEL_332:
    v206[8] = v199;
    ++v194;
  }
  while (v194 != v195);
  v210 = *v756;
  v182 = -v210;
  v80 = v761;
  if (*(unsigned __int16 *)((char *)v756 - v210) < 0x21u)
    goto LABEL_356;
LABEL_353:
  if (!*(_WORD *)((char *)v756 + v182 + 32))
    goto LABEL_356;
  v209 = *(int *)((char *)v756 + *(unsigned __int16 *)((char *)v756 + v182 + 32));
LABEL_357:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  v212 = getAdditionalSpillBufferBytes(void)::extra + v209;
  *(_DWORD *)(a1 + 320) = getAdditionalSpillBufferBytes(void)::extra + v209;
  v213 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v213 < 0x43u)
  {
    LODWORD(v214) = 0;
  }
  else
  {
    v214 = v213[33];
    if (v214)
      LODWORD(v214) = *(int *)((char *)v756 + v214);
  }
  *(_DWORD *)(a1 + 332) = v214;
  v215 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v215 < 5u)
  {
    LODWORD(v216) = 0;
  }
  else
  {
    v216 = v215[2];
    if (v216)
      LODWORD(v216) = *(int *)((char *)v756 + v216);
  }
  *(_DWORD *)(a1 + 316) = v216;
  v217 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v217 < 0x51u)
  {
    LODWORD(v218) = 0;
  }
  else
  {
    v218 = v217[40];
    if (v218)
      LODWORD(v218) = *(int *)((char *)v756 + v218);
  }
  *(_DWORD *)(a1 + 352) = v218;
  v219 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*v219 < 0x4Fu)
  {
    LODWORD(v220) = 0;
  }
  else
  {
    v220 = v219[39];
    if (v220)
      LODWORD(v220) = *(int *)((char *)v756 + v220);
  }
  *(_DWORD *)(a1 + 364) = v220;
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(v754 + 428);
  v221 = (unsigned __int16 *)((char *)v756 - *v756);
  if (*(int *)((char *)v756 + v221[6] + *(unsigned int *)((char *)v756 + v221[6])) | v212)
    v222 = 1;
  else
    v222 = v173;
  if ((v222 & 1) != 0)
    goto LABEL_389;
  v223 = *v221;
  if (v223 < 0x21)
  {
    v224 = 0;
  }
  else if (v221[16])
  {
    v224 = *(int *)((char *)v756 + v221[16]);
    if (v223 >= 0x43)
    {
LABEL_752:
      if (v221[33])
      {
        v225 = *(int *)((char *)v756 + v221[33]);
        goto LABEL_384;
      }
    }
  }
  else
  {
    v224 = 0;
    if (v223 >= 0x43)
      goto LABEL_752;
  }
  v225 = 0;
LABEL_384:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  if (v225 + v224 + getAdditionalSpillBufferBytes(void)::extra)
  {
LABEL_389:
    LOBYTE(v228) = 1;
  }
  else
  {
    v227 = (unsigned __int16 *)((char *)v756 - *v756);
    if (*v227 < 0x5Fu)
    {
      LOBYTE(v228) = 0;
    }
    else
    {
      v228 = v227[47];
      if (v228)
        LOBYTE(v228) = *((_BYTE *)v756 + v228) != 0;
    }
  }
  *(_BYTE *)(a1 + 376) = v228;
  v229 = (unsigned __int16 *)((char *)v80 - *v80);
  if (*v229 < 0x11u)
  {
    LODWORD(v230) = 0;
  }
  else
  {
    v230 = v229[8];
    if (v230)
      LODWORD(v230) = *(int *)((char *)v80 + v230);
  }
  *(_DWORD *)(a1 + 864) = v230;
  if ((v231 & 1) == 0
  {
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
  }
  v232 = a2 + 4512;
  v233 = (_OWORD *)(a1 + 720);
  v234 = (const void **)(__src + 3);
  if (__src[3])
  {
    if (__src[4])
      v235 = __src + 3;
    else
      v235 = __src + 73;
  }
  else
  {
    v235 = __src + 73;
  }
  v236 = v235[1]
       + AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space;
  v237 = 168;
  if (a6)
    v237 = 504;
  v238 = v232 + v237;
  AGX::Heap<true>::allocateImpl(__dst, v232 + v237, v236, (_QWORD *)(a1 + 920));
  *(_DWORD *)(a1 + 944) += *(_DWORD *)&__dst[16];
  v239 = *(_OWORD *)&__dst[16];
  *v233 = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 736) = v239;
  *(_OWORD *)(a1 + 745) = *(_OWORD *)&__dst[25];
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 544) = v238;
  v240 = *(_OWORD *)(a1 + 736);
  *v737 = *v233;
  v737[1] = v240;
  *(_OWORD *)((char *)v737 + 25) = *(_OWORD *)(a1 + 745);
  if (*v234)
  {
    v241 = (const void **)__src;
    v242 = __src[4];
    if (v242)
      v243 = *v234;
    else
      v243 = (const void *)__src[73];
    if (v242)
      v244 = __src + 3;
    else
      v244 = __src + 73;
  }
  else
  {
    v241 = (const void **)__src;
    v244 = __src + 73;
    v243 = (const void *)__src[73];
  }
  memcpy(*(void **)(a1 + 728), v243, v244[1]);
  v245 = *(_QWORD *)(a1 + 728);
  v246 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 528) = v245;
  *(_QWORD *)(a1 + 536) = v246;
  v247 = v241 + 8;
  if (v241[8])
  {
    if (v241[9])
      v248 = v241 + 8;
    else
      v248 = v241 + 78;
    v249 = v248[1];
    if (!v249)
      goto LABEL_426;
  }
  else
  {
    v249 = (uint64_t)v241[79];
    if (!v249)
      goto LABEL_426;
  }
  AGX::Heap<true>::allocateImpl(__dst, v232, v249, (_QWORD *)(a1 + 928));
  *(_DWORD *)(a1 + 944) += *(_DWORD *)&__dst[16];
  v250 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 768) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 784) = v250;
  *(_OWORD *)(a1 + 793) = *(_OWORD *)&__dst[25];
  v251 = *(_OWORD *)(a1 + 784);
  *v733 = *(_OWORD *)(a1 + 768);
  v733[1] = v251;
  *(_OWORD *)((char *)v733 + 25) = *(_OWORD *)(a1 + 793);
  if (*v247)
  {
    v252 = v241[9];
    if (v252)
      v253 = *v247;
    else
      v253 = v241[78];
    if (v252)
      v254 = v241 + 8;
    else
      v254 = v241 + 78;
  }
  else
  {
    v254 = v241 + 78;
    v253 = v241[78];
  }
  memcpy(*(void **)(a1 + 776), v253, v254[1]);
LABEL_426:
  v255 = v241 + 13;
  if (v241[13])
  {
    if (v241[14])
      v256 = v241 + 13;
    else
      v256 = v241 + 83;
    v257 = v256[1];
    if (!v257)
      goto LABEL_442;
  }
  else
  {
    v257 = (uint64_t)v241[84];
    if (!v257)
      goto LABEL_442;
  }
  AGX::Heap<true>::allocateImpl(__dst, v232, v257, (_QWORD *)(a1 + 936));
  *(_DWORD *)(a1 + 944) += *(_DWORD *)&__dst[16];
  v258 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 816) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 832) = v258;
  *(_OWORD *)(a1 + 841) = *(_OWORD *)&__dst[25];
  v259 = *(_OWORD *)(a1 + 832);
  *v734 = *(_OWORD *)(a1 + 816);
  v734[1] = v259;
  *(_OWORD *)((char *)v734 + 25) = *(_OWORD *)(a1 + 841);
  if (*v255)
  {
    v260 = v241[14];
    if (v260)
      v261 = *v255;
    else
      v261 = v241[83];
    if (v260)
      v262 = v241 + 13;
    else
      v262 = v241 + 83;
  }
  else
  {
    v262 = v241 + 83;
    v261 = v241[83];
  }
  memcpy(*(void **)(a1 + 824), v261, v262[1]);
  v263 = *(_QWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 712) = v263;
LABEL_442:
  if (*(_BYTE *)(a1 + 504) || *(_BYTE *)(*(_QWORD *)(a1 + 32) + 6681))
  {
    {
      {
        v265 = v743;
        if (*(char *)(a1 + 455) < 0)
          v265 = (_QWORD *)*v743;
        v266 = v741;
        if (*(char *)(a1 + 503) < 0)
          v266 = (std::string *)v741->__r_.__value_.__r.__words[0];
        v267 = v742;
        if (*(char *)(a1 + 479) < 0)
          v267 = (_QWORD *)*v742;
        v268 = *(_DWORD *)(a1 + 416);
        v269 = *(_QWORD *)(a1 + 512);
        v270 = *(void **)(a1 + 736);
        *(_DWORD *)__dst = 136447490;
        *(_QWORD *)&__dst[4] = v265;
        *(_WORD *)&__dst[12] = 2082;
        *(_QWORD *)&__dst[14] = v266;
        *(_WORD *)&__dst[22] = 2082;
        *(_QWORD *)&__dst[24] = v267;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v268;
        *(_WORD *)&__dst[38] = 2050;
        *(_QWORD *)&__dst[40] = v269;
        LOWORD(__p[0]) = 2050;
        *(void **)((char *)__p + 2) = v270;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v264, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    v271 = *(_QWORD *)(a1 + 32);
    v272 = v743;
    if (*(char *)(a1 + 455) < 0)
      v272 = (_QWORD *)*v743;
    v273 = v741;
    if (*(char *)(a1 + 503) < 0)
      v273 = (std::string *)v741->__r_.__value_.__r.__words[0];
    v274 = v742;
    if (*(char *)(a1 + 479) < 0)
      v274 = (_QWORD *)*v742;
    v275 = *(_DWORD *)(a1 + 416);
    v276 = *(_QWORD *)(a1 + 512);
    v277 = *(_QWORD *)(a1 + 736);
    v278 = *(_BYTE *)(a1 + 504);
    *(_QWORD *)__dst = v272;
    *(_QWORD *)&__dst[8] = v273;
    *(_QWORD *)&__dst[16] = v274;
    *(_DWORD *)&__dst[24] = v275;
    *(_QWORD *)&__dst[32] = v276;
    *(_QWORD *)&__dst[40] = v277;
    LOBYTE(__p[0]) = v278;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v271, a1, (__int128 *)__dst);
  }
  v279 = (ProgramBindingsAndDMAList *)operator new();
  ProgramBindingsAndDMAList::ProgramBindingsAndDMAList(v279, (const AGCDeserializedReply *)v241, *(unsigned __int8 *)(a1 + 1042));
  *v736 = v279;
  v280 = operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v280, v754);
  *(_QWORD *)(a1 + 24) = v280;
  v281 = *(unsigned __int16 *)((char *)v756 - *v756 + 24);
  v282 = *(unsigned int *)((char *)v756 + v281);
  v283 = (unsigned int *)((char *)v756 + v281 + v282);
  v284 = *v283;
  if ((_DWORD)v284)
  {
    v285 = 0;
    v286 = 4 * v284;
    v287 = (char *)v756 + v281 + v282;
    do
    {
      v288 = v283[v285 / 4 + 1];
      v289 = v288 - *(int *)((char *)&v283[v285 / 4 + 1] + v288);
      v290 = &v287[v285 + v289];
      v291 = *((unsigned __int16 *)v290 + 2);
      if (v291 >= 5)
      {
        v292 = *((unsigned __int16 *)v290 + 4);
        if (v292)
        {
          if (v291 >= 7 && v287[v285 + 4 + v288 + v292] == 139)
          {
            if (*(_WORD *)&v287[v285 + 10 + v289])
            {
              v293 = *(_DWORD *)&v287[v285 + 4 + v288 + *(unsigned __int16 *)&v287[v285 + 10 + v289]];
              if (v291 >= 0xB)
                goto LABEL_472;
            }
            else
            {
              LOBYTE(v293) = 0;
              if (v291 >= 0xB)
              {
LABEL_472:
                v294 = *(unsigned __int16 *)&v287[v285 + 14 + v289];
                if (v294 && v287[v285 + 4 + v288 + v294])
                  *v732 |= 1 << v293;
              }
            }
          }
        }
      }
      v285 += 4;
    }
    while (v286 != v285);
  }
  v749 = v238;
  v751 = a2 + 4512;
  v295 = (unsigned __int16 *)((char *)v761 - *v761);
  if (*v295 >= 0xDu)
  {
    v296 = v295[6];
    if (v296)
    {
      v297 = (int *)((char *)v761 + v296 + *(unsigned int *)((char *)v761 + v296));
      v298 = *v297;
      v299 = *(_BYTE **)(a1 + 968);
      if (v298 > (uint64_t)(*(_QWORD *)(a1 + 984) - (_QWORD)v299) >> 4)
      {
        v300 = *(_BYTE **)(a1 + 976);
        v301 = (char *)operator new(16 * v298);
        v302 = &v301[(v300 - v299) & 0xFFFFFFFFFFFFFFF0];
        v303 = v302;
        if (v300 != v299)
        {
          v304 = &v301[(v300 - v299) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v303 = v304 - 16;
            *((_OWORD *)v304 - 1) = *((_OWORD *)v300 - 1);
            v300 -= 16;
            v304 -= 16;
          }
          while (v300 != v299);
        }
        *(_QWORD *)(a1 + 968) = v303;
        *(_QWORD *)(a1 + 976) = v302;
        *(_QWORD *)(a1 + 984) = &v301[16 * v298];
        if (v299)
          operator delete(v299);
      }
      v305 = (unsigned __int16 *)((char *)v761 - *v761);
      if (*v305 >= 0x41u && (v306 = v305[32]) != 0)
      {
        v307 = (int *)((char *)v761 + v306 + *(unsigned int *)((char *)v761 + v306));
        if (!*v297)
          goto LABEL_512;
      }
      else
      {
        v307 = 0;
        if (!*v297)
          goto LABEL_512;
      }
      v308 = 0;
      v309 = v297 + 1;
      do
      {
        if (v307 && *v307)
          v311 = *(_QWORD *)&v307[2 * v308 + 1];
        else
          v311 = 0;
        v312 = *(_QWORD *)&v309[2 * v308];
        v313 = *(_QWORD **)(a1 + 976);
        v314 = *(_QWORD *)(a1 + 984);
        if ((unint64_t)v313 < v314)
        {
          *v313 = v312;
          v313[1] = v311;
          v310 = v313 + 2;
        }
        else
        {
          v315 = (_QWORD *)*v752;
          v316 = ((uint64_t)v313 - *v752) >> 4;
          v317 = v316 + 1;
          if ((unint64_t)(v316 + 1) >> 60)
            abort();
          v318 = v314 - (_QWORD)v315;
          if (v318 >> 3 > v317)
            v317 = v318 >> 3;
          if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF0)
            v319 = 0xFFFFFFFFFFFFFFFLL;
          else
            v319 = v317;
          if (v319)
          {
            if (v319 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v320 = (char *)operator new(16 * v319);
          }
          else
          {
            v320 = 0;
          }
          v321 = &v320[16 * v316];
          *(_QWORD *)v321 = v312;
          *((_QWORD *)v321 + 1) = v311;
          v322 = v321;
          if (v313 != v315)
          {
            do
            {
              *((_OWORD *)v322 - 1) = *((_OWORD *)v313 - 1);
              v322 -= 16;
              v313 -= 2;
            }
            while (v313 != v315);
            v313 = (_QWORD *)*v752;
          }
          *(_QWORD *)(a1 + 968) = v322;
          v310 = v321 + 16;
          *(_QWORD *)(a1 + 976) = v321 + 16;
          *(_QWORD *)(a1 + 984) = &v320[16 * v319];
          if (v313)
            operator delete(v313);
          v309 = v297 + 1;
        }
        *(_QWORD *)(a1 + 976) = v310;
        ++v308;
      }
      while (v308 < *v297);
    }
  }
LABEL_512:
  *(_BYTE *)(a1 + 868) = 0;
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  *(_QWORD *)a1 = &off_2504018E0;
  bzero((void *)(a1 + 1248), 0x2E9uLL);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 2016) = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2220) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_QWORD *)(a1 + 2824) = a2;
  *(_QWORD *)(a1 + 2832) = 0;
  if (*v745)
  {
    v323 = (unsigned int **)(__src + 98);
    if (__src[29])
      v323 = v745;
  }
  else
  {
    v323 = (unsigned int **)(__src + 98);
  }
  v324 = 0;
  if (*v323 && v323[1])
    v324 = (int *)((char *)*v323 + **v323);
  v325 = (unsigned __int16 *)((char *)v324 - *v324);
  if (*v325 >= 5u && (v326 = v325[2]) != 0)
  {
    v327 = (unsigned int *)((char *)v324 + v326 + *(unsigned int *)((char *)v324 + v326));
    if (!*v744)
      goto LABEL_525;
LABEL_527:
    v328 = (unsigned int **)(__src + 128);
    if (__src[59])
      v328 = v744;
  }
  else
  {
    v327 = 0;
    if (*v744)
      goto LABEL_527;
LABEL_525:
    v328 = (unsigned int **)(__src + 128);
  }
  v329 = 0;
  if (*v328 && v328[1])
    v329 = (int *)((char *)*v328 + **v328);
  v330 = (unsigned __int16 *)((char *)v329 - *v329);
  if (*v330 >= 5u && (v331 = v330[2]) != 0)
    v332 = (int *)((char *)v329 + v331 + *(unsigned int *)((char *)v329 + v331));
  else
    v332 = 0;
  LODWORD(v333) = 0;
  if (a6)
    v334 = 3;
  else
    v334 = 0;
  v753 = v334;
  v335 = (unsigned __int16 *)((char *)v332 - *v332);
  if (*v335 >= 7u)
  {
    v333 = v335[3];
    if (v335[3])
      LODWORD(v333) = *(int *)((char *)v332 + v333);
  }
  *(_DWORD *)(a1 + 2768) = v333;
  v336 = (unsigned __int16 *)((char *)v332 - *v332);
  if (*v336 >= 0x13u && (v337 = v336[9]) != 0)
    v338 = (char *)v332 + v337 + *(unsigned int *)((char *)v332 + v337) + 4;
  else
    v338 = "";
  v757 = (unint64_t ***)(a1 + 2800);
  MEMORY[0x234927D28](a1 + 2776, v338);
  v339 = (unsigned __int16 *)((char *)v327 - (int)*v327);
  v340 = *(unsigned int *)((char *)v327 + v339[15] + *(unsigned int *)((char *)v327 + v339[15]));
  v341 = v339[13];
  if (v339[13])
    LODWORD(v341) = *(unsigned int *)((char *)v327 + v341);
  v342 = v341;
  if (*(_BYTE *)(v754 + 392))
    v343 = ((*(_QWORD *)(v754 + 224) + *(_QWORD *)(v754 + 200) - (*(_QWORD *)(v754 + 216) + *(_QWORD *)(v754 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
         + ((*(_QWORD *)(v754 + 376) + *(_QWORD *)(v754 + 328) - (*(_QWORD *)(v754 + 368) + *(_QWORD *)(v754 + 320))) & 0xFFFFFFFFFFFFFFFELL)
         + 8;
  else
    v343 = 0;
  v344 = v339[4];
  v345 = *(unsigned int *)((char *)v327 + v344);
  v346 = (unsigned int *)((char *)v327 + v344 + v345);
  v347 = *v346;
  v762 = a1 + 1240;
  if ((_DWORD)v347)
  {
    v348 = 0;
    v349 = 4 * v347;
    v350 = (char *)v327 + v344 + v345;
    while (1)
    {
      v351 = v346[v348 / 4 + 1];
      v352 = &v350[v348 + v351 - *(int *)((char *)&v346[v348 / 4 + 1] + v351)];
      if (*((unsigned __int16 *)v352 + 2) >= 5u)
      {
        v353 = *((unsigned __int16 *)v352 + 4);
        if (v353)
        {
          if (v350[v348 + 4 + v351 + v353] == 9)
            break;
        }
      }
      v348 += 4;
      if (v349 == v348)
        goto LABEL_558;
    }
    v354 = 0;
    v340 += 8;
  }
  else
  {
LABEL_558:
    v354 = 1;
  }
  v355 = (v340 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v342)
    v356 = (v340 + 7) & 0x3FFFFFFF8;
  else
    v356 = v340;
  if (v343 + v342 + v356)
  {
    AGX::Heap<true>::allocateImpl(__dst, v751 + 168 * v753, v343 + v342 + v356, (_QWORD *)(a1 + 2168));
    *(_DWORD *)(a1 + 2836) += *(_DWORD *)&__dst[16];
    v357 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 2448) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 2464) = v357;
    *(_OWORD *)(a1 + 2473) = *(_OWORD *)&__dst[25];
    v358 = *(_QWORD **)(a1 + 2456);
    if (a6)
      v359 = *(_QWORD *)(a1 + 2448) + 0x300000000;
    else
      v359 = *(_QWORD *)(a1 + 2448);
    *(_QWORD *)(a1 + 2032) = 0;
    if (v340)
    {
      *(_QWORD *)(a1 + 2088) = v359;
      if ((v354 & 1) != 0)
      {
        v360 = v358;
      }
      else
      {
        *(_QWORD *)(a1 + 2096) = v359;
        *(_QWORD *)(a1 + 2088) = v359 + 8;
        *v358 = v359 + 8;
        v360 = v358 + 1;
      }
      v361 = (int)*v327;
      v362 = *(unsigned __int16 *)((char *)v327 - v361 + 30);
      if (*(_WORD *)((char *)v327 - v361 + 30))
      {
        v363 = *(unsigned int *)((char *)v327 + v362);
        v364 = (char *)v327 + v362 + v363;
      }
      else
      {
        v362 = 0;
        v364 = 0;
        v363 = *v327;
      }
      memcpy(v360, v364 + 4, *(unsigned int *)((char *)v327 + v362 + v363));
      *(_QWORD *)(a1 + 2696) = v360;
      *(_QWORD *)(a1 + 2688) = *(_QWORD *)(a1 + 2088);
    }
    if ((_DWORD)v342)
    {
      *(_QWORD *)(a1 + 2104) = v359 + v355;
      *(_QWORD *)(a1 + 1256) = (char *)v358 + v355;
    }
    if (v343)
    {
      *(_QWORD *)(a1 + 2032) = v356 + v342 + v359;
      v365 = (_WORD *)((char *)v358 + v356 + v342);
      v366 = v754;
      v367 = *(const void **)(v754 + 192);
      v368 = *(_QWORD *)(v754 + 200) - (_QWORD)v367;
      *v365 = v368 >> 2;
      v365[1] = (*(_DWORD *)(v754 + 224) - *(_DWORD *)(v754 + 216)) >> 2;
      v365[2] = (*(_DWORD *)(v754 + 328) - *(_DWORD *)(v754 + 320)) >> 1;
      v365[3] = (*(_DWORD *)(v754 + 376) - *(_DWORD *)(v754 + 368)) >> 1;
      memcpy(v365 + 4, v367, v368);
      v369 = (char *)v365 + *(_QWORD *)(v366 + 200) - *(_QWORD *)(v366 + 192) + 8;
      memcpy(v369, *(const void **)(v366 + 216), *(_QWORD *)(v366 + 224) - *(_QWORD *)(v366 + 216));
      v370 = &v369[*(_QWORD *)(v366 + 224) - *(_QWORD *)(v366 + 216)];
      memcpy(v370, *(const void **)(v366 + 320), *(_QWORD *)(v366 + 328) - *(_QWORD *)(v366 + 320));
      memcpy(&v370[*(_QWORD *)(v366 + 328) - *(_QWORD *)(v366 + 320)], *(const void **)(v366 + 368), *(_QWORD *)(v366 + 376) - *(_QWORD *)(v366 + 368));
      if (v365[2])
      {
        if (v365[3])
          goto LABEL_579;
LABEL_744:
        v365[3] = v365[1];
      }
      else
      {
        v365[2] = *v365;
        if (!v365[3])
          goto LABEL_744;
      }
    }
  }
LABEL_579:
  v371 = (uint64_t *)(a1 + 1288);
  v372 = (unsigned __int16 *)((char *)v327 - (int)*v327);
  v373 = v372[8];
  v374 = *(unsigned int *)((char *)v327 + v373);
  v375 = (unsigned int *)((char *)v327 + v373 + v374);
  v376 = *v375;
  if ((_DWORD)v376)
  {
    v377 = 0;
    v378 = 4 * v376;
    v379 = (char *)v327 + v373 + v374;
    do
    {
      v383 = v375[v377 / 4 + 1];
      v384 = &v379[v377 + v383 - *(int *)((char *)&v375[v377 / 4 + 1] + v383)];
      if (*((unsigned __int16 *)v384 + 2) >= 7u && (v385 = *((unsigned __int16 *)v384 + 5)) != 0)
      {
        v386 = *(unsigned int *)&v379[v377 + 4 + v383 + v385];
        v380 = v386;
        if ((v386 & 0x80000000) != 0)
        {
          v381 = 1 << (v386 >> 20);
          v382 = (_QWORD *)(a1 + 1288);
          goto LABEL_583;
        }
      }
      else
      {
        v380 = 0;
      }
      v381 = 1 << v380;
      *(_QWORD *)(a1 + 1272) |= v381;
      v382 = (_QWORD *)(a1 + 1296);
LABEL_583:
      *v382 |= v381;
      v377 += 4;
    }
    while (v378 != v377);
  }
  v387 = v372[10];
  v388 = *(unsigned int *)((char *)v327 + v387);
  v389 = (unsigned int *)((char *)v327 + v387 + v388);
  v390 = *v389;
  if ((_DWORD)v390)
  {
    v391 = 0;
    v392 = 4 * v390;
    v393 = (char *)v327 + v387 + v388;
    do
    {
      v397 = v389[v391 / 4 + 1];
      v398 = &v393[v391 + v397 - *(int *)((char *)&v389[v391 / 4 + 1] + v397)];
      if (*((unsigned __int16 *)v398 + 2) >= 7u && (v399 = *((unsigned __int16 *)v398 + 5)) != 0)
      {
        v400 = *(unsigned int *)&v393[v391 + 4 + v397 + v399];
        v394 = v400;
        if ((v400 & 0x80000000) != 0)
        {
          v395 = 1 << (v400 >> 20);
          v396 = (_QWORD *)(a1 + 1288);
          goto LABEL_592;
        }
      }
      else
      {
        v394 = 0;
      }
      v395 = 1 << v394;
      *(_QWORD *)(a1 + 1280) |= v395;
      v396 = (_QWORD *)(a1 + 1304);
LABEL_592:
      *v396 |= v395;
      v391 += 4;
    }
    while (v392 != v391);
  }
  v401 = v372[6];
  v402 = *(unsigned int *)((char *)v327 + v401);
  v403 = (unsigned int *)((char *)v327 + v401 + v402);
  v404 = *v403;
  if (!(_DWORD)v404)
    goto LABEL_607;
  v405 = 0;
  v406 = 4 * v404;
  v407 = *v371;
  v408 = (char *)v327 + v401 + v402;
  while (2)
  {
    v411 = v403[v405 / 4 + 1];
    v412 = &v408[v405 + v411 - *(int *)((char *)&v403[v405 / 4 + 1] + v411)];
    if (*((unsigned __int16 *)v412 + 2) < 7u || (v413 = *((unsigned __int16 *)v412 + 5)) == 0)
    {
      v409 = 0;
LABEL_600:
      v410 = 1 << v409;
      *(_QWORD *)(a1 + 1264) |= v410;
      goto LABEL_601;
    }
    v414 = *(unsigned int *)&v408[v405 + 4 + v411 + v413];
    v409 = v414;
    if ((v414 & 0x80000000) == 0)
      goto LABEL_600;
    v410 = 1 << (v414 >> 20);
LABEL_601:
    v407 |= v410;
    v405 += 4;
    if (v406 != v405)
      continue;
    break;
  }
  *v371 = v407;
LABEL_607:
  v415 = v372[4];
  v416 = *(unsigned int *)((char *)v327 + v415);
  v417 = (unsigned int *)((char *)v327 + v415 + v416);
  v418 = *v417;
  if ((_DWORD)v418)
  {
    v419 = 0;
    v420 = 4 * v418;
    v421 = *(_QWORD *)(v754 + 416);
    v422 = (char *)v327 + v415 + v416;
    while (2)
    {
      v425 = v417[v419 / 4 + 1];
      v426 = v425 - *(int *)((char *)&v417[v419 / 4 + 1] + v425);
      v427 = &v422[v419 + v426];
      v428 = *((unsigned __int16 *)v427 + 2);
      if (v428 < 5)
        goto LABEL_612;
      v429 = *((unsigned __int16 *)v427 + 4);
      if (!v429 || v422[v419 + 4 + v425 + v429] != 5)
        goto LABEL_612;
      if (v428 >= 7 && (v430 = *(unsigned __int16 *)&v422[v419 + 10 + v426]) != 0)
      {
        v431 = *(unsigned int *)&v422[v419 + 4 + v425 + v430];
        v423 = v431;
        if ((v431 & 0x80000000) != 0)
        {
          v424 = 1 << (v431 >> 20);
          if ((v421 & v424) != 0)
          {
            *(_BYTE *)(a1 + 1992) = 1;
            *(_QWORD *)(a1 + 1400) |= v424;
          }
LABEL_611:
          *v371 |= v424;
LABEL_612:
          v419 += 4;
          if (v420 == v419)
            goto LABEL_621;
          continue;
        }
      }
      else
      {
        v423 = 0;
      }
      break;
    }
    v424 = 1 << v423;
    goto LABEL_611;
  }
LABEL_621:
  *(_QWORD *)(a1 + 1344) = *(_QWORD *)(v754 + 400);
  *(_QWORD *)(a1 + 1368) = *(_QWORD *)(v754 + 408);
  *(_QWORD *)(a1 + 1408) = *(_QWORD *)(v754 + 408) | *(_QWORD *)(v754 + 400);
  memset(__dst, 0, 40);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::encodeConstantPDS(v749, (uint64_t)__src, v754, a5, 0, *(_QWORD *)(a1 + 2088), *(_QWORD *)(a1 + 2096), *(_QWORD *)(a1 + 2104), (uint64_t)__dst, (_QWORD *)(a1 + 2024), (uint64_t *)(a1 + 2048), (unsigned int *)(a1 + 1416), (_DWORD *)(a1 + 2064), (unint64_t *)(a1 + 2056), (_DWORD *)(a1 + 2836));
  *(_QWORD *)(a1 + 2152) = *(_QWORD *)(*(_QWORD *)&__dst[24] + 296);
  *(_DWORD *)(a1 + 1240) = 8
                         * (*(_DWORD *)(a1 + 1420)
                          + *(_DWORD *)(a1 + 1416)
                          + *(_DWORD *)(a1 + 1424)
                          + *(_DWORD *)(a1 + 1428));
  *(_QWORD *)(a1 + 2240) = v749;
  v432 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 2248) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 2264) = v432;
  *(_OWORD *)(a1 + 2273) = *(_OWORD *)&__dst[25];
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2321) = 0u;
  *(_QWORD *)(a1 + 2440) = v751 + 168 * v753;
  *(_BYTE *)(a1 + 2764) = 0;
  *(_QWORD *)(a1 + 3000) = 0;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_QWORD *)(a1 + 3048) = 0;
  v433 = *v745;
  if (*v745)
  {
    v434 = (unsigned int **)(__src + 98);
    if (__src[29])
      v434 = v745;
  }
  else
  {
    v434 = (unsigned int **)(__src + 98);
  }
  v435 = 0;
  if (*v434 && v434[1])
    v435 = (int *)((char *)*v434 + **v434);
  v436 = (unsigned __int16 *)((char *)v435 - *v435);
  if (*v436 >= 5u && (v437 = v436[2]) != 0)
  {
    v438 = (int *)((char *)v435 + v437 + *(unsigned int *)((char *)v435 + v437));
    if (!v433)
      goto LABEL_632;
LABEL_634:
    v439 = (unsigned int **)(__src + 98);
    if (__src[29])
      v439 = v745;
  }
  else
  {
    v438 = 0;
    if (v433)
      goto LABEL_634;
LABEL_632:
    v439 = (unsigned int **)(__src + 98);
  }
  v440 = 0;
  if (*v439 && v439[1])
    v440 = (int *)((char *)*v439 + **v439);
  v441 = (unsigned __int16 *)((char *)v440 - *v440);
  if (*v441 >= 0xBu && (v442 = v441[5]) != 0)
  {
    v443 = (int *)((char *)v440 + v442 + *(unsigned int *)((char *)v440 + v442));
    v444 = *v744;
    if (!*v744)
      goto LABEL_642;
LABEL_644:
    v445 = (unsigned int **)(__src + 128);
    if (__src[59])
      v445 = v744;
  }
  else
  {
    v443 = 0;
    v444 = *v744;
    if (*v744)
      goto LABEL_644;
LABEL_642:
    v445 = (unsigned int **)(__src + 128);
  }
  v446 = 0;
  if (*v445 && v445[1])
    v446 = (int *)((char *)*v445 + **v445);
  v447 = (unsigned __int16 *)((char *)v446 - *v446);
  if (*v447 >= 0xBu && (v448 = v447[5]) != 0)
  {
    v449 = (int *)((char *)v446 + v448 + *(unsigned int *)((char *)v446 + v448));
    if (!v444)
      goto LABEL_652;
LABEL_654:
    v450 = (unsigned int **)(__src + 128);
    if (__src[59])
      v450 = v744;
  }
  else
  {
    v449 = 0;
    if (v444)
      goto LABEL_654;
LABEL_652:
    v450 = (unsigned int **)(__src + 128);
  }
  v451 = 0;
  if (*v450 && v450[1])
    v451 = (int *)((char *)*v450 + **v450);
  v452 = (unsigned __int16 *)((char *)v451 - *v451);
  if (*v452 >= 5u && (v453 = v452[2]) != 0)
    v454 = (int *)((char *)v451 + v453 + *(unsigned int *)((char *)v451 + v453));
  else
    v454 = 0;
  v455 = (unsigned __int16 *)((char *)v454 - *v454);
  if (*v455 < 0xBu)
  {
    v456 = 0;
  }
  else
  {
    v456 = v455[5];
    if (v456)
      v456 += (uint64_t)v454 + *(unsigned int *)((char *)v454 + v456);
  }
  v457 = (unsigned __int16 *)((char *)v443 - *v443);
  v459 = *v457 >= 0xBu && (v458 = v457[5]) != 0 && *((unsigned __int8 *)v443 + v458) != 0;
  v460 = *v438;
  v461 = *(unsigned __int16 *)((char *)v438 - v460 + 28);
  v462 = *(unsigned int *)((char *)v438 + v461);
  if (*(int *)((char *)v438 + v461 + v462))
  {
    v463 = 0;
    v464 = v456 + 4;
    LODWORD(v456) = *(unsigned __int16 *)((char *)v438 - v460 + 28);
    while (1)
    {
      v465 = (uint64_t)&v438[v463] + v456 + v462;
      v466 = (int *)(v465 + 4 + *(unsigned int *)(v465 + 4));
      v467 = (unsigned __int16 *)((char *)v466 - *v466);
      v468 = *v467;
      if (v468 >= 5 && v467[2] && *((_BYTE *)v466 + v467[2]) == 18)
        break;
LABEL_674:
      ++v463;
      v456 = *(unsigned __int16 *)((char *)v438 - (int)v460 + 28);
      v462 = *(unsigned int *)((char *)v438 + v456);
      if (v463 >= *(unsigned int *)((char *)v438 + v456 + v462))
        goto LABEL_688;
    }
    v469 = *(_QWORD **)(a1 + 1256);
    if (v468 < 9)
    {
      if (v468 >= 7)
        goto LABEL_683;
      v471 = 0;
    }
    else
    {
      v470 = v467[4];
      if (v467[4])
        v470 = *(unsigned int *)((char *)v466 + v470);
      v469 = (_QWORD *)((char *)v469 + 4 * v470);
LABEL_683:
      v471 = v467[3];
      if (v467[3])
        v471 = *(unsigned int *)((char *)v466 + v471);
    }
    AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (int *)(v464 + 4 * v471 + *(unsigned int *)(v464 + 4 * v471)));
    AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields::SamplerStateFields((unint64_t *)&__str, (float *)__dst);
    *v469 = __str;
    if (v785 < 0)
      operator delete(__p[0]);
    std::vector<AGXA10FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v757, (uint64_t)v469);
    LODWORD(v460) = *v438;
    goto LABEL_674;
  }
LABEL_688:
  AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerConstantSamplerList(a2, v757);
  v472 = (unsigned __int16 *)((char *)v438 - *v438);
  v473 = v472[12];
  v474 = *(unsigned int *)((char *)v438 + v473);
  v475 = (unsigned int *)((char *)v438 + v473 + v474);
  v476 = *v475;
  if ((_DWORD)v476)
  {
    v477 = 0;
    v478 = 4 * v476;
    v479 = (char *)v438 + v473 + v474;
    do
    {
      v485 = *(unsigned int *)&v479[v477 + 4];
      v486 = v485 - *(int *)((char *)&v475[v477 / 4 + 1] + v485);
      v487 = &v479[v477 + v486];
      v488 = *((unsigned __int16 *)v487 + 2);
      if (v488 >= 5)
      {
        v489 = *((unsigned __int16 *)v487 + 4);
        if (v489)
        {
          v490 = v479[v477 + 4 + v485 + v489];
          v484 = (_QWORD *)(a1 + 1336);
          v482 = 16;
          switch(v490)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              if (v488 < 7 || (v491 = *(unsigned __int16 *)&v479[v477 + 10 + v486]) == 0)
              {
                v480 = 0;
LABEL_691:
                if (v490 == 98)
                  v481 = 16;
                else
                  v481 = 8;
                v482 = 1 << v480;
                v483 = v762 + v481;
                *(_QWORD *)(v483 + 72) |= 1 << v480;
                v484 = (_QWORD *)(v483 + 48);
                goto LABEL_695;
              }
              v492 = *(unsigned int *)&v479[v477 + 4 + v485 + v491];
              if ((v492 & 0xFFF00000) != 0x400000)
              {
                v480 = v492;
                if ((v492 & 0x80000000) != 0)
                {
                  v482 = 1 << (v492 >> 20);
                  v484 = (_QWORD *)(a1 + 1288);
                  goto LABEL_695;
                }
                goto LABEL_691;
              }
              break;
            case 59:
LABEL_695:
              *v484 |= v482;
              break;
            default:
              break;
          }
        }
      }
      v477 += 4;
    }
    while (v478 != v477);
  }
  v780 = 0;
  v778 = 0u;
  v779 = 0u;
  __str_16 = 0u;
  v777 = 0u;
  __str = 0u;
  BYTE1(__str) = v459;
  if (v459)
  {
    v493 = (unsigned __int16 *)((char *)v443 - *v443);
    if (*v493 < 0xDu)
    {
      LODWORD(v494) = 0;
    }
    else
    {
      v494 = v493[6];
      if (v494)
        LODWORD(v494) = *(int *)((char *)v443 + v494);
    }
    DWORD1(__str) = v494;
  }
  BYTE12(__str) = 0;
  v495 = *(unsigned __int16 *)((char *)v449 - *v449 + 4);
  v496 = *(unsigned int *)((char *)v449 + v495);
  v497 = (unsigned int *)((char *)v449 + v495 + v496);
  v498 = *v497;
  if (!(_DWORD)v498)
  {
    v503 = -1;
    v513 = 1;
    goto LABEL_734;
  }
  v499 = 0;
  v500 = 4 * v498;
  v501 = (char *)v449 + v495 + v496;
  v502 = -1;
  v503 = -1;
  while (2)
  {
    v504 = *(unsigned int *)&v501[v499 + 4];
    v505 = v504 - *(int *)((char *)&v497[v499 / 4 + 1] + v504);
    v506 = &v501[v499 + v505];
    v507 = *((unsigned __int16 *)v506 + 2);
    if (v507 < 7)
    {
      if (v507 < 5)
        goto LABEL_713;
      goto LABEL_722;
    }
    v508 = *((unsigned __int16 *)v506 + 5);
    if (!v508 || (v509 = v501[v499 + 4 + v504 + v508]) == 0)
    {
LABEL_722:
      v511 = *(unsigned __int16 *)&v501[v499 + 8 + v505];
      if (v511)
      {
        v502 = *(_DWORD *)&v501[v499 + 4 + v504 + v511];
        goto LABEL_714;
      }
LABEL_713:
      v502 = 0;
      goto LABEL_714;
    }
    if (v509 == 3)
    {
      v510 = *(unsigned __int16 *)&v501[v499 + 8 + v505];
      if (v510)
        v503 = *(_DWORD *)&v501[v499 + 4 + v504 + v510];
      else
        v503 = 0;
    }
LABEL_714:
    v499 += 4;
    if (v500 != v499)
      continue;
    break;
  }
  if (v502 == -1)
  {
    if (v503 != -1)
    {
      v512 = 2;
      goto LABEL_733;
    }
    v513 = 1;
  }
  else
  {
    BYTE12(__str) = 1;
    if (v503 == -1)
      v512 = 1;
    else
      v512 = 3;
    v503 = v502;
LABEL_733:
    v513 = 0;
    BYTE12(__str) = v512;
  }
LABEL_734:
  LODWORD(v514) = 0;
  DWORD2(__str) = v503;
  BYTE4(__str_16) = 0;
  v515 = (unsigned __int16 *)((char *)v443 - *v443);
  v516 = *v515;
  if (v516 < 0xF)
    goto LABEL_774;
  v514 = v515[7];
  if (!v515[7])
    goto LABEL_774;
  v517 = *((_BYTE *)v443 + v514);
  if ((v517 & 1) != 0)
  {
    if (v516 >= 0x11 && v515[8])
      v520 = *(int *)((char *)v443 + v515[8]);
    else
      v520 = 0;
    LODWORD(v514) = 1;
    BYTE4(__str_16) = 1;
    LODWORD(__str_16) = v520;
    if ((v517 & 2) == 0)
    {
      v519 = 0;
      v518 = 1;
      if ((v517 & 4) == 0)
        goto LABEL_774;
      goto LABEL_769;
    }
    LODWORD(v514) = 3;
    if (v516 < 0x13)
      goto LABEL_760;
    goto LABEL_762;
  }
  if ((*((_BYTE *)v443 + v514) & 2) == 0)
  {
    LODWORD(v514) = 0;
    v518 = 1;
    v519 = 1;
    if ((v517 & 4) == 0)
      goto LABEL_774;
LABEL_769:
    if (v516 >= 0x15)
      goto LABEL_770;
LABEL_767:
    LODWORD(v522) = 0;
    goto LABEL_772;
  }
  LODWORD(v514) = 2;
  if (v516 >= 0x13)
  {
LABEL_762:
    v521 = v515[9];
    if (v515[9])
      LODWORD(v521) = *(int *)((char *)v443 + v521);
    goto LABEL_764;
  }
LABEL_760:
  LODWORD(v521) = 0;
LABEL_764:
  BYTE4(__str_16) = v514;
  if ((v517 & 1) != 0)
  {
    v518 = 0;
    v519 = 0;
    if ((v517 & 4) == 0)
      goto LABEL_774;
    goto LABEL_769;
  }
  LODWORD(__str_16) = v521;
  if ((v517 & 4) == 0)
    goto LABEL_774;
  v518 = 0;
  v519 = 1;
  if (v516 < 0x15)
    goto LABEL_767;
LABEL_770:
  v522 = v515[10];
  if (v522)
    LODWORD(v522) = *(int *)((char *)v443 + v522);
LABEL_772:
  LODWORD(v514) = v514 | 4;
  BYTE4(__str_16) = v514;
  if ((v519 & v518) == 1)
    LODWORD(__str_16) = v522;
LABEL_774:
  *((_QWORD *)&__str_16 + 1) = *(_QWORD *)(a1 + 2000);
  if (*v472 < 5u)
  {
    LODWORD(v523) = 0;
  }
  else
  {
    v523 = v472[2];
    if (v523)
      LODWORD(v523) = *(int *)((char *)v438 + v523);
  }
  LODWORD(v777) = v523;
  LODWORD(v778) = 0;
  if (v459)
    v524 = 2;
  else
    v524 = 1;
  if (v459)
    v525 = 5;
  else
    v525 = 2;
  if ((v514 & 3) != 0)
  {
    ++v524;
    ++v525;
  }
  v526 = v514 >> 2;
  v527 = v524 + v526;
  v528 = v525 + v526 + (v513 ^ 1);
  if (v513)
    v529 = 1;
  else
    v529 = 2;
  v530 = (v528 + 3) & 0x7C;
  *(_QWORD *)&v779 = v530;
  *((_QWORD *)&v779 + 1) = ((v527 + v529 + 1) & 0x3C) + 4;
  v780 = 0x400000000;
  AGX::Heap<true>::allocateImpl(&v773, *(_QWORD *)(a1 + 2240), 4 * *((_QWORD *)&v779 + 1), (_QWORD *)(a1 + 2160));
  *(_DWORD *)(a1 + 2836) += LODWORD(v774[0]);
  AGX::Heap<true>::allocateImpl(&v771, *(_QWORD *)(a1 + 2240), 4 * v530, (_QWORD *)(a1 + 2224));
  *(_DWORD *)(a1 + 2836) += LODWORD(v772[0]);
  v531 = v773;
  v532 = v771;
  *((_QWORD *)&v778 + 1) = *((_QWORD *)&v773 + 1);
  *((_QWORD *)&v777 + 1) = *((_QWORD *)&v771 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeComputePDSProgram((uint64_t)&__str, 0, 0);
  LODWORD(v533) = 0;
  *(_OWORD *)(a1 + 3041) = *(_OWORD *)((char *)v772 + 9);
  v534 = v772[0];
  *(_OWORD *)(a1 + 3016) = v771;
  *(_OWORD *)(a1 + 3032) = v534;
  *(_DWORD *)(a1 + 2760) = v780;
  v535 = (unsigned __int16 *)((char *)v438 - *v438);
  if (*v535 >= 7u)
  {
    v533 = v535[3];
    if (v535[3])
      LODWORD(v533) = *(int *)((char *)v438 + v533);
  }
  v536 = 0;
  v537 = ((4 * v533 + 63) >> 6) | 0x40000000;
  v538 = *(_DWORD *)(a1 + 2024) & 0xFFFFFFF0;
  *(_DWORD *)(a1 + 2840) = ((unint64_t)(*(_QWORD *)(a1 + 2056) + 15) >> 3) & 0xFFFFFFFE;
  *(_DWORD *)(a1 + 2844) = 2;
  *(_DWORD *)(a1 + 2848) = v538;
  v539 = v739;
  *(_QWORD *)(v739 + 1484) = 0;
  *(_DWORD *)(a1 + 2860) = 0;
  *(_DWORD *)(a1 + 2864) = v537;
  *(_DWORD *)(a1 + 2868) = 0;
  v540 = (unsigned __int16 *)((char *)v443 - *v443);
  if (*v540 >= 5u)
  {
    v541 = v540[2];
    if (v541)
      v536 = *(int *)((char *)v443 + v541);
    else
      v536 = 0;
  }
  v542 = ((v536 << 10) + 3840) & 0xFFFFF000;
  v543 = (HIDWORD(v780) << 6) + 112;
  v544 = (4 * ((unint64_t)v779 + v778) + 12) >> 3;
  v545 = v532 & 0xFFFFFFF0;
  *(_DWORD *)(a1 + 2904) = v544 | v543 & 0xFFFFFF80 | v542 | 1;
  *(_DWORD *)(a1 + 2908) = v532 & 0xFFFFFFF0;
  *(_DWORD *)(a1 + 2912) = v531 & 0xFFFFFFF0;
  *(_QWORD *)(a1 + 2924) = 0;
  *(_QWORD *)(a1 + 2916) = 0;
  v546 = (unsigned __int16 *)((char *)v443 - *v443);
  if (*v546 < 5u)
  {
    LODWORD(v547) = 0;
    v548 = (uint64_t)__src;
  }
  else
  {
    v547 = v546[2];
    v548 = (uint64_t)__src;
    if (v547)
      LODWORD(v547) = *(int *)((char *)v443 + v547);
  }
  *(_DWORD *)(a1 + 2936) = v543 & 0xDFFFFF80 | (((_DWORD)v547 << 10) + 3840) & 0xFFFFF0FF | v544 | 0x20000001;
  *(_DWORD *)(a1 + 2940) = v545;
  *(_DWORD *)(a1 + 2944) = v531 & 0xFFFFFFF0;
  *(_QWORD *)(a1 + 2956) = 0;
  *(_QWORD *)(a1 + 2948) = 0;
  v549 = v774[0];
  *(_OWORD *)(a1 + 2296) = v773;
  *(_OWORD *)(a1 + 2312) = v549;
  *(_OWORD *)(a1 + 2321) = *(_OWORD *)((char *)v774 + 9);
  v550 = v772[0];
  *(_OWORD *)(a1 + 2968) = v771;
  *(_OWORD *)(a1 + 2984) = v550;
  *(_OWORD *)(a1 + 2993) = *(_OWORD *)((char *)v772 + 9);
  v551 = *(_DWORD *)(a1 + 1420) + *(_DWORD *)(a1 + 1416) + *(_DWORD *)(a1 + 1424);
  v552 = *(_DWORD *)(a1 + 1428);
  *(_DWORD *)(a1 + 3064) = 8 * (v551 + v552);
  *(_DWORD *)(a1 + 3088) = 0;
  if (v551 + v552)
  {
    v769 = 0;
    v770 = 0;
    v768 = 0;
    v767 = 0;
    AGX::Heap<true>::allocateImpl(__dst, *(_QWORD *)(a1 + 2440), 576, (_QWORD *)(a1 + 2200));
    v553 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 2496) = *(_OWORD *)__dst;
    *(_DWORD *)(a1 + 2836) += *(_DWORD *)&__dst[16];
    *(_OWORD *)(a1 + 2512) = v553;
    *(_OWORD *)(a1 + 2521) = *(_OWORD *)&__dst[25];
    v554 = *(_QWORD *)(a1 + 2496);
    if (a6)
      v554 += 0x300000000;
    *(_QWORD *)(a1 + 3072) = v554;
    v764 = 0;
    v765 = 0;
    v766 = 0;
    v555 = (unsigned __int16 *)((char *)v438 - *v438);
    if (*v555 >= 0x17u)
    {
      v556 = v555[11];
      if (v556)
      {
        v557 = *(int *)((char *)v438 + v556) + 3;
        *(_DWORD *)__dst = 0;
        if (v557 >= 4)
          std::vector<DriverEIOffset>::__append((unint64_t *)&v764, v557 >> 2, (const float *)__dst);
      }
    }
    v558 = *(unsigned __int16 *)((char *)v438 - *v438 + 24);
    v559 = *(unsigned int *)((char *)v438 + v558);
    v560 = (unsigned int *)((char *)v438 + v558 + v559);
    v561 = *v560;
    if ((_DWORD)v561)
    {
      v562 = 0;
      v563 = 4 * v561;
      v564 = (uint32x2_t *)v764;
      v565 = (char *)v438 + v558 + v559;
      while (1)
      {
        v567 = v560[v562 / 4 + 1];
        v568 = v567 - *(int *)((char *)&v560[v562 / 4 + 1] + v567);
        v569 = &v565[v562 + v568];
        v570 = *((unsigned __int16 *)v569 + 2);
        if (v570 >= 5 && (v571 = *((unsigned __int16 *)v569 + 4), *((_WORD *)v569 + 4)))
        {
          v572 = 0;
          v573 = v565[v562 + 4 + v567 + v571];
          switch(v573)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              break;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_816;
            default:
              if (v573 != 113)
                goto LABEL_816;
              break;
          }
        }
        else
        {
LABEL_816:
          v572 = 1;
        }
        if (v570 >= 7)
          break;
        if (v570 >= 5)
        {
          v574 = 0;
          v575 = v564;
          goto LABEL_830;
        }
LABEL_811:
        v562 += 4;
        if (v563 == v562)
          goto LABEL_881;
      }
      if (*(_WORD *)&v565[v562 + 10 + v568])
      {
        v574 = *(_DWORD *)&v565[v562 + 4 + v567 + *(unsigned __int16 *)&v565[v562 + 10 + v568]];
        if (v574 >= 0)
          v572 = 1;
        if (v572 != 1)
          goto LABEL_811;
        if (v570 >= 9)
        {
LABEL_827:
          if (*(_WORD *)&v565[v562 + 12 + v568])
          {
            v575 = (uint32x2_t *)((char *)v564
                                + 4
                                * *(unsigned int *)&v565[v562 + 4 + v567 + *(unsigned __int16 *)&v565[v562 + 12 + v568]]);
            goto LABEL_830;
          }
        }
      }
      else
      {
        v574 = 0;
        if (v570 >= 9)
          goto LABEL_827;
      }
      v575 = v564;
LABEL_830:
      if (*(_WORD *)&v565[v562 + 8 + v568])
      {
        v576 = v565[v562 + 4 + v567 + *(unsigned __int16 *)&v565[v562 + 8 + v568]];
        if (v570 >= 7)
        {
LABEL_834:
          v577 = *(unsigned __int16 *)&v565[v562 + 10 + v568];
          if (v577)
          {
            v578 = *(_DWORD *)&v565[v562 + 4 + v567 + v577];
            goto LABEL_837;
          }
        }
      }
      else
      {
        v576 = 0;
        if (v570 >= 7)
          goto LABEL_834;
      }
      v578 = 0;
LABEL_837:
      switch(v576)
      {
        case 32:
          v566 = 1073741849;
          goto LABEL_810;
        case 33:
          v566 = 1073741850;
          goto LABEL_810;
        case 34:
          v566 = 1073741851;
          goto LABEL_810;
        case 35:
          v566 = 1073741843;
          goto LABEL_810;
        case 36:
          v566 = 1073741844;
          goto LABEL_810;
        case 37:
          v566 = 1073741845;
          goto LABEL_810;
        case 38:
          v566 = 1073741840;
          goto LABEL_810;
        case 39:
          v566 = 1073741841;
          goto LABEL_810;
        case 40:
          v566 = 1073741842;
          goto LABEL_810;
        case 42:
          v566 = 1073741854;
          goto LABEL_810;
        case 43:
          v575->i32[0] = (v578 + 32) & 0x3FFFFFFF | 0x40000000;
          goto LABEL_811;
        case 44:
          *v575 = (uint32x2_t)0x4000001D4000001CLL;
          goto LABEL_811;
        case 45:
          v566 = 1073741846;
          goto LABEL_810;
        case 46:
          v566 = 1073741847;
          goto LABEL_810;
        case 47:
          v566 = 1073741848;
          goto LABEL_810;
        case 72:
          *v575 = (uint32x2_t)0x4000000B4000000ALL;
          v575[1].i32[0] = 1073741836;
          goto LABEL_811;
        case 73:
          *v575 = (uint32x2_t)0xE0000000DLL;
          v575[1].i32[0] = 15;
          goto LABEL_811;
        case 94:
          v566 = 1073741855;
          goto LABEL_810;
        case 111:
          v566 = 1073741891;
          goto LABEL_810;
        case 131:
          v566 = v578 | 0xC0000000;
          goto LABEL_810;
        default:
          v579 = 56 * (v574 & 0xFFFFF);
          v580 = v579 + 72;
          v539 = v739;
          switch(v576)
          {
            case 11:
              *(uint32x4_t *)v575->i8 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v580), (int32x4_t)xmmword_232D737E0), 2uLL);
              goto LABEL_811;
            case 12:
              v575->i32[0] = v580 >> 2;
              v575->i32[1] = (v580 >> 2) | 1;
              v575[1] = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v580), (int32x2_t)0xC00000008), 2uLL);
              goto LABEL_811;
            case 13:
              v582 = v579 + 104;
              goto LABEL_880;
            case 16:
              v582 = v579 + 108;
              goto LABEL_880;
            case 17:
              v582 = v579 + 112;
              goto LABEL_880;
            case 58:
              v575->i32[0] = 565;
              goto LABEL_811;
            case 59:
              *v575 = (uint32x2_t)0x1C5000001C4;
              goto LABEL_811;
            case 62:
              v582 = v579 + 116;
              goto LABEL_880;
            case 64:
              *v575 = (uint32x2_t)0x1CB000001CALL;
              goto LABEL_811;
            case 84:
              v575->i32[0] = 567;
              goto LABEL_811;
            case 93:
              if ((v574 & 0xFFF00000) == 0x400000)
              {
                v575->i32[0] = 0;
                goto LABEL_811;
              }
              v582 = v579 + 120;
LABEL_880:
              v566 = v582 >> 2;
              break;
            case 97:
              v583 = 8 * (v574 & 0xFFFFF) + 1880;
              goto LABEL_867;
            case 98:
              v583 = 8 * (v574 & 0xFFFFF) + 2128;
LABEL_867:
              v584 = v583 >> 2;
              v575->i32[0] = v584;
              v575->i32[1] = v584 | 1;
              goto LABEL_811;
            case 109:
              v581 = v578 + 703;
              goto LABEL_873;
            case 110:
              v581 = v578 + 768;
LABEL_873:
              v566 = v581 & 0x3FFFFFFF;
              break;
            case 113:
              v582 = 8 * (v574 & 0xFFFFF) + 2128;
              goto LABEL_880;
            case 118:
              *v575 = (uint32x2_t)0x1D3000001D2;
              goto LABEL_811;
            case 119:
              *v575 = (uint32x2_t)0x1D5000001D4;
              goto LABEL_811;
            default:
              goto LABEL_811;
          }
LABEL_810:
          v575->i32[0] = v566;
          break;
      }
      goto LABEL_811;
    }
LABEL_881:
    if ((AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible((_QWORD *)v548, 1) & 1) != 0)
    {
      AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t *)__dst, (unsigned int **)v548, (const std::vector<unsigned int>::value_type *)3, *(_BYTE *)(v754 + 424), a5, 0, 0, 1, v585, v586, v587, (uint64_t *)&v764);
      v588 = (char *)v789 - (char *)v788;
      if (v789 != v788)
      {
        v589 = v787;
        v590 = v786;
        goto LABEL_885;
      }
      v589 = v787;
      v590 = v786;
      if (v787 != v786)
      {
LABEL_885:
        v591 = *(_QWORD *)(a1 + 2440);
        v592 = (char *)v589 - (char *)v590;
        v593 = v588 + 2 * v592;
        *(_DWORD *)(a1 + 2832) = v593;
        if (AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::ei_max_indirect_gather_size_watermark > v593)
          v593 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::ei_max_indirect_gather_size_watermark;
        AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::ei_max_indirect_gather_size_watermark = v593;
        AGX::Heap<true>::allocateImpl(&v781, v591, ((v588 + v592) & 0xFFFFFFFFFFFFFFFCLL) + 4, (_QWORD *)(a1 + 2216));
        v594 = v782[0];
        *(_OWORD *)(a1 + 2640) = v781;
        *(_DWORD *)(a1 + 2836) += LODWORD(v782[0]);
        *(_OWORD *)(a1 + 2656) = v594;
        *(_OWORD *)(a1 + 2665) = *(_OWORD *)((char *)v782 + 9);
        *(_QWORD *)(a1 + 2040) = *(_QWORD *)(a1 + 2640) + 0x300000000;
        v595 = *(_WORD **)(a1 + 2648);
        v596 = v787;
        v597 = v786;
        *v595 = ((_DWORD)v787 - (_DWORD)v786) >> 2;
        v598 = v789;
        v599 = v788;
        v595[1] = ((_DWORD)v789 - (_DWORD)v788) >> 2;
        v600 = v595 + 2;
        if (v596 != v597)
        {
          v601 = (char *)v596 - (char *)v597 - 4;
          if (v601 < 0x3C
            || ((v614 = (char *)v595 + (v601 & 0xFFFFFFFFFFFFFFFCLL),
                 v615 = (unint64_t)(v614 + 6),
                 v616 = (unint64_t)(v614 + 8),
                 v595 + 3 < (unsigned __int16 *)((char *)v597 + (v601 & 0xFFFFFFFFFFFFFFFCLL) + 4))
              ? (v617 = (unint64_t)(v597 + 1) >= v616)
              : (v617 = 1),
                v617 ? (v618 = 0) : (v618 = 1),
                (unint64_t)v597 < v615
              ? (v619 = v600 >= (__int16 *)((char *)v597 + (v601 & 0xFFFFFFFFFFFFFFFCLL) + 2))
              : (v619 = 1),
                !v619 || (v618 & 1) != 0))
          {
            v602 = v600;
            do
            {
LABEL_890:
              v603 = *v597;
              v604 = v603 & 0x7FF;
              v605 = (v603 << 16) & 0x80000000 | (v604 << 20);
              v606 = (v603 & 0x7FF) + 6;
              if (v604 >= 0x23)
                v606 = v604 == 40;
              if (v605 == 0x200000)
                v606 = 5;
              *v602 = v606;
              v602[1] = v597[1];
              v602 += 2;
              v597 += 2;
            }
            while (v597 != v596);
          }
          else
          {
            v620 = (v601 >> 2) + 1;
            v621 = 2 * (v620 & 0x7FFFFFFFFFFFFFF8);
            v602 = &v600[v621];
            v622.i64[0] = 0x20000000200000;
            v622.i64[1] = 0x20000000200000;
            v623.i64[0] = 0x23002300230023;
            v623.i64[1] = 0x23002300230023;
            v624.i64[0] = 0x6000600060006;
            v624.i64[1] = 0x6000600060006;
            v625.i64[0] = 0x28002800280028;
            v625.i64[1] = 0x28002800280028;
            v626.i64[0] = 0x1000100010001;
            v626.i64[1] = 0x1000100010001;
            v627.i64[0] = 0x5000500050005;
            v627.i64[1] = 0x5000500050005;
            v628 = (const __int16 *)v597;
            v629 = v620 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v791 = vld2q_s16(v628);
              v628 += 16;
              v630 = vshrq_n_u16((uint16x8_t)v791.val[0], 0xFuLL);
              *(_OWORD *)v791.val &= __PAIR128__(0x7FF07FF07FF07FFLL, 0x7FF07FF07FF07FFLL);
              v631 = (int8x16_t)vcgtq_u16(v623, (uint16x8_t)v791.val[0]);
              v791.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v791.val[0].i8), 0x14uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v630.i8), 0x1FuLL)), v622), (int16x8_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v791.val[0]), 0x14uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v630), 0x1FuLL)), v622)),
                                         v627,
                                         vorrq_s8(vandq_s8((int8x16_t)vaddq_s16(v791.val[0], v624), v631), vandq_s8(vbicq_s8((int8x16_t)vceqq_s16(v791.val[0], v625), v631), v626)));
              vst2q_s16(v600, v791);
              v600 += 16;
              v629 -= 8;
            }
            while (v629);
            if (v620 != (v620 & 0x7FFFFFFFFFFFFFF8))
            {
              v597 = (unsigned __int16 *)((char *)v597 + v621 * 2);
              goto LABEL_890;
            }
          }
          v600 = v602;
        }
        for (; v599 != v598; v600 += 2)
        {
          v607 = *v599;
          v608 = v607 & 0x7FF;
          v609 = (v607 << 16) & 0x80000000 | (v608 << 20);
          v610 = (v607 & 0x7FF) + 6;
          if (v608 >= 0x23)
            v610 = v608 == 40;
          if (v609 == 6291456)
            v610 = 3;
          if (v609 == 3145728)
            v610 = 4;
          if (v609 == 0x200000)
            v610 = 5;
          *v600 = v610;
          v600[1] = v599[1];
          v599 += 2;
        }
      }
      v611 = *(unsigned int **)(a1 + 2504);
      if (AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::encodeConstantPDS(*(_QWORD *)(a1 + 2240), v548, (uint64_t)__dst, a5, 1, *(_QWORD *)(a1 + 2088), *(_QWORD *)(a1 + 2096), *(_QWORD *)(a1 + 2104), a1 + 2344, &v770, &v769, v611, &v767, &v768, (_DWORD *)(a1 + 2836)))
      {
        *(_QWORD *)(a1 + 2184) = *(_QWORD *)(*(_QWORD *)(a1 + 2368) + 296);
        v612 = (unsigned __int16 *)((char *)v438 - *v438);
        if (*v612 < 7u)
        {
          LODWORD(v613) = 0;
        }
        else
        {
          v613 = v612[3];
          if (v613)
            LODWORD(v613) = *(int *)((char *)v438 + v613);
        }
        v632 = v770;
        v633 = v770 & 0xFFFFFFF0;
        *(_DWORD *)(a1 + 2872) = ((v768 + 15) >> 3) & 0xFFFFFFFE;
        *(_DWORD *)(a1 + 2876) = 2;
        *(_DWORD *)(a1 + 2880) = v633;
        *(_QWORD *)(v539 + 1516) = 0;
        *(_DWORD *)(a1 + 2892) = 0;
        *(_QWORD *)(a1 + 2896) = ((4 * v613 + 63) >> 6) | 0x40000000;
        *(_QWORD *)(a1 + 2072) = v632;
        *(_QWORD *)(a1 + 2080) = v769;
        *(_DWORD *)(a1 + 3088) += 8 * (v611[1] + *v611 + v611[2] + v611[3]);
        v634 = atomic_load(&AGX::ComputeProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark);
        while (1)
        {
          v635 = *(unsigned int *)(a1 + 3088);
          if (v634 >= v635)
            break;
          v636 = v634;
          v634 = __ldaxr(&AGX::ComputeProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark);
          if (v634 == v636)
          {
            if (!__stlxr(v635, &AGX::ComputeProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark))break;
          }
          else
          {
            __clrex();
          }
        }
      }
      AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)__dst);
    }
    if (v764)
    {
      v765 = v764;
      operator delete(v764);
    }
    AGX::Heap<true>::allocateImpl(__dst, *(_QWORD *)(a1 + 2440), 568, (_QWORD *)(a1 + 2176));
    *(_DWORD *)(a1 + 2836) += *(_DWORD *)&__dst[16];
    v637 = *(_DWORD **)&__dst[8];
    *(_QWORD *)(a1 + 3080) = *(_QWORD *)__dst;
    v638 = *(unsigned int *)(a1 + 1424);
    *v637 = v638;
    if ((_DWORD)v638)
    {
      v639 = *(_DWORD *)(a1 + 1416) + *(_DWORD *)(a1 + 1420);
      v640 = (char *)v637 + 10;
      do
      {
        v641 = v762 + 8 * v639;
        v642 = *(_WORD *)(v641 + 192);
        v643 = *(_WORD *)(v641 + 198);
        LODWORD(v641) = *(_DWORD *)(v641 + 194);
        *((_WORD *)v640 - 1) = v642;
        *(_DWORD *)v640 = v641;
        *((_WORD *)v640 + 2) = v643;
        ++v639;
        v640 += 8;
        --v638;
      }
      while (v638);
    }
    v644 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 2592) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 2608) = v644;
    *(_OWORD *)(a1 + 2617) = *(_OWORD *)&__dst[25];
  }
  if (*(_BYTE *)(v754 + 288))
  {
    *(_QWORD *)(a1 + 1352) |= *(_QWORD *)(a1 + 1272);
    *(_QWORD *)(a1 + 1272) = 0;
  }
  if (*(_BYTE *)(v754 + 289))
  {
    *(_QWORD *)(a1 + 1360) |= *(_QWORD *)(a1 + 1280);
    *(_QWORD *)(a1 + 1280) = 0;
  }
  if (*(_BYTE *)(v754 + 290))
  {
    *(_QWORD *)(a1 + 1344) |= *(_QWORD *)(a1 + 1264);
    *(_QWORD *)(a1 + 1264) = 0;
  }
  if (*(_BYTE *)(v754 + 291))
  {
    v645 = vorrq_s8(*(int8x16_t *)(v539 + 16), *(int8x16_t *)(a1 + 1328));
    *(int8x16_t *)v539 = vorrq_s8(*(int8x16_t *)v539, *(int8x16_t *)(a1 + 1312));
    *(int8x16_t *)(v539 + 16) = v645;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v762);
  *(_DWORD *)(a1 + 3268) = 0;
  *(_BYTE *)(a1 + 3272) = 0;
  v646 = a1 + 3280;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_DWORD *)(a1 + 3312) = 1065353216;
  *(_QWORD *)(a1 + 3320) = v735;
  *(_QWORD *)(a1 + 3328) = 850045863;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  v647 = *v745;
  if (*v745)
  {
    v648 = (unsigned int **)(v548 + 784);
    if (*(_QWORD *)(v548 + 232))
      v648 = v745;
  }
  else
  {
    v648 = (unsigned int **)(v548 + 784);
  }
  v649 = 0;
  if (*v648 && v648[1])
    v649 = (int *)((char *)*v648 + **v648);
  v650 = (unsigned __int16 *)((char *)v649 - *v649);
  if (*v650 >= 5u && (v651 = v650[2]) != 0)
  {
    v652 = (int *)((char *)v649 + v651 + *(unsigned int *)((char *)v649 + v651));
    if (!v647)
      goto LABEL_961;
LABEL_963:
    v653 = (unsigned int **)(v548 + 784);
    if (*(_QWORD *)(v548 + 232))
      v653 = v745;
  }
  else
  {
    v652 = 0;
    if (v647)
      goto LABEL_963;
LABEL_961:
    v653 = (unsigned int **)(v548 + 784);
  }
  v654 = 0;
  if (*v653 && v653[1])
    v654 = (int *)((char *)*v653 + **v653);
  v655 = (unsigned __int16 *)((char *)v654 - *v654);
  if (*v655 >= 0xBu && (v656 = v655[5]) != 0)
  {
    v657 = (int *)((char *)v654 + v656 + *(unsigned int *)((char *)v654 + v656));
    if (!*v744)
      goto LABEL_971;
LABEL_973:
    v658 = (unsigned int **)(v548 + 1024);
    if (*(_QWORD *)(v548 + 472))
      v658 = v744;
  }
  else
  {
    v657 = 0;
    if (*v744)
      goto LABEL_973;
LABEL_971:
    v658 = (unsigned int **)(v548 + 1024);
  }
  v659 = 0;
  if (*v658 && v658[1])
    v659 = (int *)((char *)*v658 + **v658);
  v660 = (unsigned __int16 *)((char *)v659 - *v659);
  if (*v660 >= 0xBu && (v661 = v660[5]) != 0)
    v662 = (int *)((char *)v659 + v661 + *(unsigned int *)((char *)v659 + v661));
  else
    v662 = 0;
  v663 = *(_DWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 920);
  *(_DWORD *)(a1 + 2836) += v663;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v762);
  if (!*(_QWORD *)(v548 + 504))
  {
    if (!*(_QWORD *)(v548 + 1072))
      goto LABEL_1015;
    v666 = *(unsigned int **)(v548 + 1064);
    if (!v666)
      goto LABEL_1015;
    goto LABEL_990;
  }
  v664 = v548 + 504;
  v665 = 504;
  if (!*(_QWORD *)(v548 + 512))
  {
    v665 = 1064;
    v664 = v548 + 1064;
  }
  if (*(_QWORD *)(v664 + 8))
  {
    v666 = *(unsigned int **)(v548 + v665);
    if (v666)
    {
LABEL_990:
      v667 = (int *)((char *)v666 + *v666);
      v668 = (unsigned __int16 *)((char *)v667 - *v667);
      if (*v668 < 0xBu)
        goto LABEL_1015;
      v669 = v668[5];
      if (!v669)
        goto LABEL_1015;
      v670 = (int *)((char *)v667 + v669 + *(unsigned int *)((char *)v667 + v669));
      v671 = (unsigned __int16 *)((char *)v670 - *v670);
      if (*v671 < 5u)
        goto LABEL_1015;
      v672 = v671[2];
      if (!v672)
        goto LABEL_1015;
      v673 = (unsigned int *)((char *)v670 + v672 + *(unsigned int *)((char *)v670 + v672));
      v674 = *v673;
      if (!(_DWORD)v674)
        goto LABEL_1015;
      v675 = 0;
      v755 = 4 * v674;
      v758 = *(_QWORD *)(a1 + 512);
      do
      {
        v676 = v673[v675 / 4 + 1];
        v677 = v676 - *(int *)((char *)&v673[v675 / 4 + 1] + v676);
        v678 = (char *)&v673[v675 / 4] + v677;
        v679 = *((unsigned __int16 *)v678 + 2);
        if (v679 < 5)
        {
          v683 = 0;
          v681 = 4;
        }
        else
        {
          v680 = *((unsigned __int16 *)v678 + 4);
          if (v680)
            v680 += (uint64_t)&v673[v675 / 4 + 1] + v676 + *(unsigned int *)((char *)&v673[v675 / 4 + 1] + v676 + v680);
          v681 = v680 + 4;
          if (v679 >= 7 && (v682 = *(unsigned __int16 *)((char *)&v673[v675 / 4 + 2] + v677 + 2)) != 0)
            v683 = *(_QWORD *)((char *)&v673[v675 / 4 + 1] + v676 + v682);
          else
            v683 = 0;
        }
        v684 = strlen((const char *)v681);
        if (v684 > 0x7FFFFFFFFFFFFFF7)
          abort();
        v685 = v684;
        __srca = (void *)v681;
        if (v684 >= 0x17)
        {
          v687 = (v684 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v684 | 7) != 0x17)
            v687 = v684 | 7;
          v688 = v687 + 1;
          v686 = operator new(v687 + 1);
          *(_QWORD *)&__dst[16] = v688 | 0x8000000000000000;
          *(_QWORD *)__dst = v686;
          *(_QWORD *)&__dst[8] = v685;
          v646 = a1 + 3280;
        }
        else
        {
          __dst[23] = v684;
          v686 = __dst;
          if (!v684)
            goto LABEL_1013;
        }
        memmove(v686, __srca, v685);
LABEL_1013:
        v686[v685] = 0;
        *(_QWORD *)&__dst[24] = v683 + v758;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(v646, (uint64_t)__dst, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        v675 += 4;
      }
      while (v755 != v675);
    }
  }
LABEL_1015:
  *(_DWORD *)(a1 + 3100) = 0;
  *(_BYTE *)(a1 + 3258) = 0;
  *(_BYTE *)(a1 + 3256) = 0;
  v689 = (unsigned __int16 *)((char *)v662 - *v662);
  v690 = *v689;
  if (v690 < 9)
  {
    LOBYTE(v692) = 0;
    *(_BYTE *)(a1 + 3260) = 0;
    if (v690 >= 7)
      goto LABEL_1020;
  }
  else
  {
    v691 = v689[4];
    if (v689[4])
      LOBYTE(v691) = *((_BYTE *)v662 + v691) != 0;
    *(_BYTE *)(a1 + 3260) = v691;
LABEL_1020:
    v692 = v689[3];
    if (v689[3])
      LOBYTE(v692) = *((_BYTE *)v662 + v692) != 0;
  }
  *(_BYTE *)(a1 + 3261) = v692;
  v693 = (unsigned __int16 *)((char *)v657 - *v657);
  v694 = *v693;
  if (v694 < 0xB)
  {
    LOBYTE(v695) = 0;
  }
  else
  {
    v695 = v693[5];
    if (v693[5])
      LOBYTE(v695) = *((_BYTE *)v657 + v695) != 0;
  }
  *(_BYTE *)(a1 + 3257) = v695;
  if (v690 < 0xF)
  {
    LOBYTE(v696) = 0;
  }
  else
  {
    v696 = v689[7];
    if (v689[7])
      LOBYTE(v696) = *((_BYTE *)v662 + v696) != 0;
  }
  *(_BYTE *)(a1 + 3262) = v696;
  if (v694 < 0x17)
  {
    LOBYTE(v697) = 0;
  }
  else
  {
    v697 = v693[11];
    if (v697)
      LOBYTE(v697) = *((_BYTE *)v657 + v697) != 0;
  }
  *(_BYTE *)(a1 + 3263) = v697;
  if (v690 < 0xB)
  {
    LOBYTE(v698) = 0;
  }
  else
  {
    v698 = v689[5];
    if (v689[5])
      LOBYTE(v698) = *((_BYTE *)v662 + v698) != 0;
  }
  *(_BYTE *)(a1 + 3264) = v698;
  v699 = (unsigned __int16 *)((char *)v652 - *v652);
  if (*v699 < 0x41u)
  {
    LODWORD(v700) = 0;
  }
  else
  {
    v700 = v699[32];
    if (v700)
      LODWORD(v700) = *(int *)((char *)v652 + v700);
  }
  *(_BYTE *)(a1 + 3259) = (_DWORD)v700 != 0;
  if (v690 < 0xD)
  {
    LODWORD(v701) = 0;
  }
  else
  {
    v701 = v689[6];
    if (v701)
      LODWORD(v701) = *(int *)((char *)v662 + v701);
  }
  *(_DWORD *)(a1 + 3276) = v701;
  v702 = *(unsigned __int16 *)((char *)v652 - *v652 + 24);
  v703 = *(unsigned int *)((char *)v652 + v702);
  v704 = (unsigned int *)((char *)v652 + v702 + v703);
  v705 = *v704;
  if ((_DWORD)v705)
  {
    v706 = 0;
    v707 = 4 * v705;
    v708 = (char *)v652 + v702 + v703;
    do
    {
      v709 = v704[v706 / 4 + 1];
      v710 = &v708[v706 + v709 - *(int *)((char *)&v704[v706 / 4 + 1] + v709)];
      if (*((unsigned __int16 *)v710 + 2) >= 5u)
      {
        v711 = *((unsigned __int16 *)v710 + 4);
        if (v711)
        {
          v712 = v708[v706 + 4 + v709 + v711];
          if (v712 == 44)
          {
            *(_BYTE *)(a1 + 3256) = 1;
          }
          else if (v712 == 42)
          {
            *(_BYTE *)(a1 + 3258) = 1;
          }
        }
      }
      v706 += 4;
    }
    while (v707 != v706);
  }
  v713 = (unsigned __int16 *)((char *)v657 - *v657);
  if (*v713 < 9u)
  {
    LODWORD(v714) = 0;
  }
  else
  {
    v714 = v713[4];
    if (v714)
      LODWORD(v714) = *(int *)((char *)v657 + v714);
  }
  *(_DWORD *)(a1 + 3096) = (v714 + 3) & 0xFFFFFFFC;
  v715 = (unsigned __int16 *)((char *)v652 - *v652);
  if (*v715 < 0x3Du)
  {
    LODWORD(v716) = 0;
  }
  else
  {
    v716 = v715[30];
    if (v716)
      LODWORD(v716) = *(int *)((char *)v652 + v716);
  }
  *(_DWORD *)(a1 + 3244) = (v716 + 15) & 0xFFFFFFF0;
  if (!(_DWORD)v701)
  {
    v717 = (unsigned __int16 *)((char *)v652 - *v652);
    if (*v717 < 5u)
    {
      LODWORD(v701) = 0;
    }
    else
    {
      v701 = v717[2];
      if (v701)
        LODWORD(v701) = *(int *)((char *)v652 + v701);
    }
    v718 = (unsigned __int16 *)((char *)v657 - *v657);
    if (*v718 < 5u)
    {
      LODWORD(v719) = 0;
      if ((_DWORD)v701)
        goto LABEL_1072;
    }
    else
    {
      v719 = v718[2];
      if (v719)
        LODWORD(v719) = *(int *)((char *)v657 + v719);
      if ((_DWORD)v701)
      {
LABEL_1072:
        v720 = 32 * ((3329 - ((4 * (_DWORD)v701 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v701 + 28) & 0xFFFFFFE0));
        if ((_DWORD)v719)
          goto LABEL_1073;
LABEL_1076:
        v721 = 512;
        goto LABEL_1077;
      }
    }
    v720 = 512;
    if (!(_DWORD)v719)
      goto LABEL_1076;
LABEL_1073:
    v721 = 0x60000 / ((((_DWORD)v719 << 6) + 448) & 0xFFFFFE00);
LABEL_1077:
    if (v720 >= v721)
      v720 = v721;
    if (v720 > 0x1FF)
    {
      LODWORD(v701) = 512;
    }
    else
    {
      if ((_DWORD)v701)
      {
        LODWORD(v701) = 32 * ((3329 - ((4 * (_DWORD)v701 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v701 + 28) & 0xFFFFFFE0));
        if ((_DWORD)v719)
          goto LABEL_1082;
LABEL_1085:
        v722 = 512;
      }
      else
      {
        LODWORD(v701) = 512;
        if (!(_DWORD)v719)
          goto LABEL_1085;
LABEL_1082:
        v722 = 0x60000 / ((((_DWORD)v719 << 6) + 448) & 0xFFFFFE00);
      }
      if (v701 >= v722)
        LODWORD(v701) = v722;
      if (v701 >= 0x200)
        LODWORD(v701) = 512;
      if (v701 >= 0x21)
        LODWORD(v701) = v701 & 0x3E0;
    }
  }
  *(_DWORD *)(a1 + 3248) = v701;
  v723 = (unsigned __int16 *)((char *)v652 - *v652);
  if (*v723 < 5u)
  {
    LODWORD(v724) = 0;
  }
  else
  {
    v724 = v723[2];
    if (v724)
      LODWORD(v724) = *(int *)((char *)v652 + v724);
  }
  v725 = (unsigned __int16 *)((char *)v657 - *v657);
  if (*v725 < 5u)
  {
    LODWORD(v726) = 0;
    if ((_DWORD)v724)
      goto LABEL_1100;
  }
  else
  {
    v726 = v725[2];
    if (v726)
      LODWORD(v726) = *(int *)((char *)v657 + v726);
    if ((_DWORD)v724)
    {
LABEL_1100:
      v727 = 32 * ((3329 - ((4 * (_DWORD)v724 + 28) & 0xFFFFFFE0)) / ((4 * (_DWORD)v724 + 28) & 0xFFFFFFE0));
      if ((_DWORD)v726)
        goto LABEL_1101;
LABEL_1104:
      v728 = 1024;
      goto LABEL_1105;
    }
  }
  v727 = 1024;
  if (!(_DWORD)v726)
    goto LABEL_1104;
LABEL_1101:
  v728 = 0x60000 / ((((_DWORD)v726 << 6) + 448) & 0xFFFFFE00);
LABEL_1105:
  if (v727 >= v728)
    v727 = v728;
  if (v727 >= 0x400)
    v727 = 1024;
  *(_DWORD *)(a1 + 3252) = v727;
  if (((*(_QWORD *)(a1 + 1264) | *(_QWORD *)(a1 + 1288) | *(_QWORD *)(a1 + 1312) | *(_QWORD *)(a1 + 1344) | *(_QWORD *)(a1 + 1368)) & 0x500000000000000) == 0)
    AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(a1);
  return a1;
}

void sub_232CBB458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::mutex *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,void *__p)
{
  if (__p)
    operator delete(__p);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState(a44);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,true,true>::~ProgramVariant(a45);
  _Unwind_Resume(a1);
}

void sub_232CBB590()
{
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  JUMPOUT(0x232CBB5B8);
}

void sub_232CBB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, void **a18, char *a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CompileStatistics *a27,uint64_t a28,uint64_t a29,void **a30,void **a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;

  CompileStatistics::~CompileStatistics(a27);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a45 + 1056));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(a45 + 1016));
  v71 = *(void **)(a45 + 992);
  if (v71)
  {
    *(_QWORD *)(a45 + 1000) = v71;
    operator delete(v71);
  }
  v72 = *a40;
  if (*a40)
  {
    *(_QWORD *)(a45 + 976) = v72;
    operator delete(v72);
  }
  if (*a19 < 0)
    operator delete(*a20);
  if (*(char *)(a45 + 503) < 0)
    operator delete(*a30);
  if (*(char *)(a45 + 479) < 0)
    operator delete(*a31);
  if (*(char *)(a45 + 455) < 0)
    operator delete(*a32);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a45 + 296));
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a17);
  v73 = *(void **)(a45 + 192);
  if (v73)
  {
    *(_QWORD *)(a45 + 200) = v73;
    operator delete(v73);
    v74 = *(void **)(a45 + 168);
    if (!v74)
    {
LABEL_15:
      v75 = *(void **)(a45 + 144);
      if (!v75)
        goto LABEL_16;
      goto LABEL_24;
    }
  }
  else
  {
    v74 = *(void **)(a45 + 168);
    if (!v74)
      goto LABEL_15;
  }
  *(_QWORD *)(a45 + 176) = v74;
  operator delete(v74);
  v75 = *(void **)(a45 + 144);
  if (!v75)
  {
LABEL_16:
    v76 = *(void **)(a45 + 120);
    if (!v76)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_24:
  *(_QWORD *)(a45 + 152) = v75;
  operator delete(v75);
  v76 = *(void **)(a45 + 120);
  if (!v76)
  {
LABEL_17:
    v77 = *(void **)(a45 + 96);
    if (!v77)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_25:
  *(_QWORD *)(a45 + 128) = v76;
  operator delete(v76);
  v77 = *(void **)(a45 + 96);
  if (!v77)
  {
LABEL_19:
    v78 = *a18;
    if (*a18)
    {
      *(_QWORD *)(a45 + 80) = v78;
      operator delete(v78);
      if (a70 < 0)
      {
LABEL_21:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
    }
    else if (a70 < 0)
    {
      goto LABEL_21;
    }
    _Unwind_Resume(a1);
  }
LABEL_18:
  *(_QWORD *)(a45 + 104) = v77;
  operator delete(v77);
  goto LABEL_19;
}

void AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *i;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int **v73;
  int **v74;
  int v75;
  int *v76;
  int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  __int16 *v90;
  __int16 *j;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int v104;
  int v105;
  char *v106;
  int v107;
  int v108;
  char *v109;
  uint64_t v110;
  char *v111;
  int v112;
  char *v113;
  uint64_t v114;
  int v115;
  int v116;
  char *v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  __int16 *v123;
  __int16 *k;
  uint64_t v125;
  uint64_t v126;
  ProgramBindingsAndDMAList *v127;
  uint64_t **v128;
  std::mutex *v129;
  char **v130;
  unint64_t v131;
  int v132[4];

  v2 = (std::mutex *)(a1 + 3328);
  std::mutex::lock((std::mutex *)(a1 + 3328));
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    goto LABEL_214;
  v5 = (uint64_t *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = *(uint64_t ***)(a1 + 16);
  v7 = *(_DWORD *)(v3 + 124);
  v8 = *(_DWORD *)(v3 + 132);
  v9 = *(_DWORD *)(v3 + 144);
  if (*(_BYTE *)(v3 + 184))
    v10 = *(_DWORD *)(v3 + 144);
  else
    v10 = 0;
  v11 = *(_DWORD *)(v3 + 140);
  if (!*(_QWORD *)(v3 + 168))
    v9 = 0;
  v12 = *(_DWORD *)(v3 + 120) + *(_DWORD *)(v3 + 128) + *(_DWORD *)(v3 + 136);
  v13 = v10 + *(_DWORD *)(v3 + 148) + v9 + *(_DWORD *)(v3 + 152) + ((v7 + v8 + v11 - v12 + 1) & 0xFFFFFFFE);
  v14 = (*(_QWORD *)(a1 + 80) - v4) >> 2;
  if (v13 <= v14)
  {
    if (v13 < v14)
      *(_QWORD *)(a1 + 80) = v4 + 4 * v13;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 72), v13 - v14);
    v7 = *(_DWORD *)(v3 + 124);
    v8 = *(_DWORD *)(v3 + 132);
    v11 = *(_DWORD *)(v3 + 140);
    v12 = *(_DWORD *)(v3 + 120) + *(_DWORD *)(v3 + 128) + *(_DWORD *)(v3 + 136);
  }
  *(_DWORD *)(a1 + 336) = v7 + v8 + v11 - v12;
  v15 = *v6;
  v16 = v6[1];
  if (*v6 != v16)
  {
    do
    {
      v17 = *v15;
      v18 = *(_DWORD *)(*v15 + 4);
      if ((v18 & 0x80000000) == 0)
      {
        v19 = ((*(_DWORD *)(v17 + 8) >> 1) & 0x1FFFFFFF) - *(_DWORD *)(v3 + 120);
        v20 = *(_DWORD *)v17 == 6 ? 31 : 0;
        v21 = (24 * (v20 + (v18 & 0xFFFFFu)) + 1592) >> 3;
        v22 = *v5;
        *(_DWORD *)(*v5 + 4 * v19) = v21;
        *(_DWORD *)(v22 + 4 * (v19 + 1)) = v21 + 1;
        *(_DWORD *)(v22 + 4 * (v19 + 2)) = v21 + 2;
        if (*(_BYTE *)(v17 + 12))
          *(_QWORD *)(a1 + 400) |= 1 << *(_DWORD *)(v17 + 4);
      }
      ++v15;
    }
    while (v15 != v16);
  }
  if (*(_BYTE *)(a1 + 378))
  {
    for (i = v6[9]; i != v6[10]; ++i)
    {
      if (*(_DWORD *)*i == 93)
      {
        v24 = *(_DWORD *)(*i + 4);
        if ((v24 & 0x80000000) == 0 && (v24 & 0xFFF00000) != 0x400000)
        {
          *(_QWORD *)(a1 + 400) |= *(_QWORD *)(a1 + 408);
          break;
        }
      }
    }
  }
  v25 = v6[3];
  v26 = v6[4];
  while (v25 != v26)
  {
    v27 = *(_DWORD *)(*v25 + 4);
    if ((v27 & 0x80000000) == 0)
      *(_DWORD *)(*v5
                + 4
                * (((*(_DWORD *)(*v25 + 8) >> 1) & 0x1FFFFFFFu)
                 + *(_DWORD *)(v3 + 124)
                 - (*(_DWORD *)(v3 + 120)
                  + *(_DWORD *)(v3 + 128)))) = (v27 & 0xFFFFF) + 385;
    ++v25;
  }
  v128 = v6;
  v129 = v2;
  v28 = v6[6];
  v29 = v6[7];
  v130 = (char **)(a1 + 72);
  if (v28 != v29)
  {
    v30 = (uint64_t **)(a1 + 296);
    do
    {
      v31 = *v28;
      v32 = *(_DWORD *)(*v28 + 4);
      if ((v32 & 0x80000000) == 0)
      {
        v33 = ((*(_DWORD *)(v31 + 8) >> 1) & 0x1FFFFFFF)
            + *(_DWORD *)(v3 + 124)
            + *(_DWORD *)(v3 + 132)
            - (*(_DWORD *)(v3 + 120)
             + *(_DWORD *)(v3 + 128)
             + *(_DWORD *)(v3 + 136));
        v34 = v32 & 0xFFFFF;
        *(_DWORD *)(*v5 + 4 * v33) = v34 + 67;
        if (*(_BYTE *)(v31 + 12))
          *(_QWORD *)(a1 + 392) |= 1 << v34;
        if (*(_BYTE *)(a1 + 1043))
        {
          v35 = *(uint64_t **)(a1 + 1056);
          if (!v35)
LABEL_215:
            abort();
          v36 = (2 * v33) | 1;
          while (1)
          {
            while (1)
            {
              v37 = *((_DWORD *)v35 + 7);
              if (v34 >= v37)
                break;
              v35 = (uint64_t *)*v35;
              if (!v35)
                goto LABEL_215;
            }
            if (v37 >= v34)
              break;
            v35 = (uint64_t *)v35[1];
            if (!v35)
              goto LABEL_215;
          }
          v38 = *((_DWORD *)v35 + 8);
          v39 = *v30;
          v40 = (uint64_t **)(a1 + 296);
          v41 = (uint64_t **)(a1 + 296);
          if (*v30)
          {
            while (1)
            {
              while (1)
              {
                v41 = (uint64_t **)v39;
                v42 = *((_DWORD *)v39 + 7);
                if (v36 >= v42)
                  break;
                v39 = *v41;
                v40 = v41;
                if (!*v41)
                  goto LABEL_56;
              }
              if (v42 >= v36)
                break;
              v39 = v41[1];
              if (!v39)
              {
                v40 = v41 + 1;
                goto LABEL_56;
              }
            }
            v43 = v41;
          }
          else
          {
LABEL_56:
            v43 = operator new(0x28uLL);
            v43[7] = v36;
            v43[8] = 0;
            *(_QWORD *)v43 = 0;
            *((_QWORD *)v43 + 1) = 0;
            *((_QWORD *)v43 + 2) = v41;
            *v40 = (uint64_t *)v43;
            v44 = **(_QWORD **)(a1 + 288);
            v45 = (uint64_t *)v43;
            if (v44)
            {
              *(_QWORD *)(a1 + 288) = v44;
              v45 = *v40;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 296), v45);
            ++*(_QWORD *)(a1 + 304);
          }
          v43[8] = v38;
          v5 = (uint64_t *)(a1 + 72);
        }
      }
      ++v28;
    }
    while (v28 != v29);
  }
  v46 = *(_QWORD *)(v3 + 160);
  v2 = v129;
  if (v46)
  {
    v47 = *(_DWORD *)(v3 + 144);
    if (*(_BYTE *)(v3 + 184))
    {
      if (v47)
      {
        v48 = (*(_DWORD *)(v3 + 124)
             + *(_DWORD *)(v3 + 132)
             + *(_DWORD *)(v3 + 140)
             - (*(_DWORD *)(v3 + 120)
              + *(_DWORD *)(v3 + 128)
              + *(_DWORD *)(v3 + 136))
             + 1) & 0xFFFFFFFE;
        v49 = *v5;
        v50 = *(_QWORD *)(v3 + 160);
        do
        {
          v51 = __clz(__rbit64(v50));
          v52 = 1 << v51;
          v53 = (24 * v51 + 1592) >> 3;
          *(_DWORD *)(v49 + 4 * v48) = v53;
          *(_DWORD *)(v49 + 4 * (v48 + 1)) = v53 + 1;
          *(_DWORD *)(v49 + 4 * (v48 + 2)) = v53 + 2;
          v48 += 4;
          v50 &= ~v52;
        }
        while (v50);
        v47 = *(_DWORD *)(v3 + 144);
        v54 = v47;
        v55 = *(_QWORD *)(v3 + 168);
        if (!v55)
          goto LABEL_72;
LABEL_67:
        if (v47)
        {
          v56 = ((*(_DWORD *)(v3 + 140)
                + *(_DWORD *)(v3 + 132)
                - (*(_DWORD *)(v3 + 136)
                 + *(_DWORD *)(v3 + 128)
                 + *(_DWORD *)(v3 + 120))
                + *(_DWORD *)(v3 + 124)
                + 1) & 0xFFFFFFFE)
              + v54;
          v57 = *v5;
          do
          {
            v58 = __clz(__rbit64(v46));
            v59 = 1 << v58;
            v60 = (24 * v58 + 2336) >> 3;
            *(_DWORD *)(v57 + 4 * v56) = v60;
            *(_DWORD *)(v57 + 4 * (v56 + 1)) = v60 + 1;
            *(_DWORD *)(v57 + 4 * (v56 + 2)) = v60 + 2;
            v56 += 4;
            v46 &= ~v59;
          }
          while (v46);
        }
        goto LABEL_72;
      }
      v55 = *(_QWORD *)(v3 + 168);
    }
    else
    {
      v54 = 0;
      v55 = *(_QWORD *)(v3 + 168);
      if (v55)
        goto LABEL_67;
    }
LABEL_72:
    *(_QWORD *)(a1 + 400) |= v55;
  }
  if (*(_DWORD *)(v3 + 148))
  {
    v61 = *(_QWORD *)(v3 + 176);
    if (v61)
    {
      if (*(_BYTE *)(v3 + 184))
        v62 = *(_DWORD *)(v3 + 144);
      else
        v62 = 0;
      if (*(_QWORD *)(v3 + 168))
        v63 = *(_DWORD *)(v3 + 144);
      else
        v63 = 0;
      v64 = v62
          + v63
          + ((*(_DWORD *)(v3 + 124)
            + *(_DWORD *)(v3 + 132)
            + *(_DWORD *)(v3 + 140)
            - (*(_DWORD *)(v3 + 120)
             + *(_DWORD *)(v3 + 128)
             + *(_DWORD *)(v3 + 136))
            + 1) & 0xFFFFFFFE);
      v65 = *v5;
      do
      {
        v66 = __clz(__rbit64(v61));
        *(_DWORD *)(v65 + 4 * v64++) = v66 + 385;
        v61 &= ~(1 << v66);
      }
      while (v61);
    }
  }
  if (*(_BYTE *)(v3 + 427))
  {
    v67 = 128 - 2 * __clz((unint64_t)v128[13]);
    if (*(_DWORD *)(a1 + 232) > v67)
      v67 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)(a1 + 232) = v67;
    v68 = ((unint64_t)*((unsigned int *)v128 + 24) + 3) >> 2;
    *(_DWORD *)(a1 + 224) = v68;
    *(_DWORD *)(a1 + 228) = 134;
  }
  else
  {
    v68 = ((unint64_t)*((unsigned int *)v128 + 24) + 3) >> 2;
  }
  v69 = *(_QWORD *)(a1 + 96);
  v70 = (_QWORD *)(a1 + 96);
  v71 = (*(_QWORD *)(a1 + 104) - v69) >> 2;
  if (v68 <= v71)
  {
    if (v68 < v71)
      *(_QWORD *)(a1 + 104) = v69 + 4 * v68;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 96), v68 - v71);
  }
  if (a1 + 120 != v3 + 192)
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 120), *(char **)(v3 + 192), *(char **)(v3 + 200), (uint64_t)(*(_QWORD *)(v3 + 200) - *(_QWORD *)(v3 + 192)) >> 2);
  if (a1 + 168 != v3 + 216)
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(a1 + 168), *(char **)(v3 + 216), *(char **)(v3 + 224), (uint64_t)(*(_QWORD *)(v3 + 224) - *(_QWORD *)(v3 + 216)) >> 2);
  if (a1 + 144 != v3 + 296)
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((_QWORD *)(a1 + 144), *(char **)(v3 + 296), *(char **)(v3 + 304), (uint64_t)(*(_QWORD *)(v3 + 304) - *(_QWORD *)(v3 + 296)) >> 1);
  if (a1 + 192 != v3 + 344)
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((_QWORD *)(a1 + 192), *(char **)(v3 + 344), *(char **)(v3 + 352), (uint64_t)(*(_QWORD *)(v3 + 352) - *(_QWORD *)(v3 + 344)) >> 1);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(v3 + 392);
  *(_BYTE *)(a1 + 380) = *(_QWORD *)(v3 + 160) != 0;
  *(_BYTE *)(a1 + 381) = *(_QWORD *)(v3 + 148) != 0;
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(a1, v3);
  v72 = *(_QWORD *)(a1 + 16);
  v73 = *(int ***)(v72 + 72);
  v74 = *(int ***)(v72 + 80);
  if (v73 != v74)
  {
    while (2)
    {
      v76 = *v73;
      v77 = **v73;
      v78 = v77 - 11;
      switch(v77)
      {
        case 11:
        case 12:
        case 13:
        case 16:
        case 17:
        case 62:
        case 93:
        case 97:
        case 98:
          goto LABEL_106;
        case 14:
        case 15:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
          goto LABEL_110;
        default:
          if (v77 == 113)
          {
LABEL_106:
            v79 = v76[1];
            if (v79 < 0)
              goto LABEL_104;
          }
          else
          {
LABEL_110:
            v79 = v76[1];
            if (v78 > 0x78)
              goto LABEL_104;
          }
          v80 = *v70 + 4 * v76[2];
          v81 = v79 & 0xFFFFF;
          v82 = 56 * (v79 & 0xFFFFF);
          v83 = v82 + 72;
          switch(v78)
          {
            case 0u:
              *(uint32x4_t *)v80 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v83), (int32x4_t)xmmword_232D737E0), 2uLL);
              break;
            case 1u:
              *(_DWORD *)v80 = v83 >> 2;
              *(_DWORD *)(v80 + 4) = (v83 >> 2) | 1;
              *(uint32x2_t *)(v80 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v83), (int32x2_t)0xC00000008), 2uLL);
              break;
            case 2u:
              v75 = (v82 + 104) >> 2;
              goto LABEL_103;
            case 5u:
              v75 = (v82 + 108) >> 2;
              goto LABEL_103;
            case 6u:
              v75 = (v82 + 112) >> 2;
              goto LABEL_103;
            case 0x15u:
              v75 = 13;
              goto LABEL_103;
            case 0x16u:
              v75 = 14;
              goto LABEL_103;
            case 0x17u:
              v75 = 15;
              goto LABEL_103;
            case 0x18u:
              v75 = 7;
              goto LABEL_103;
            case 0x19u:
              v75 = 8;
              goto LABEL_103;
            case 0x1Au:
              v75 = 9;
              goto LABEL_103;
            case 0x1Bu:
              v75 = 4;
              goto LABEL_103;
            case 0x1Cu:
              v75 = 5;
              goto LABEL_103;
            case 0x1Du:
              v75 = 6;
              goto LABEL_103;
            case 0x1Fu:
              *(_DWORD *)v80 = 564;
              *(_BYTE *)(a1 + 3258) = 1;
              break;
            case 0x20u:
              *(_DWORD *)v80 = v79 + 568;
              v85 = *(unsigned int *)(a1 + 3100);
              *(_DWORD *)(a1 + 3104 + 4 * v85) = v79;
              *(_DWORD *)(a1 + 3100) = v85 + 1;
              break;
            case 0x21u:
              *(_QWORD *)v80 = 0x1100000010;
              *(_BYTE *)(a1 + 3256) = 1;
              break;
            case 0x22u:
              v75 = 10;
              goto LABEL_103;
            case 0x23u:
              v75 = 11;
              goto LABEL_103;
            case 0x24u:
              v75 = 12;
              goto LABEL_103;
            case 0x2Fu:
              v75 = 565;
              goto LABEL_103;
            case 0x30u:
              *(_QWORD *)v80 = 0x1C5000001C4;
              break;
            case 0x33u:
              v75 = (v82 + 116) >> 2;
              goto LABEL_103;
            case 0x35u:
              *(_QWORD *)v80 = 0x1CB000001CALL;
              break;
            case 0x3Du:
              *(_QWORD *)v80 = 0x1CD000001CCLL;
              *(_DWORD *)(v80 + 8) = 462;
              break;
            case 0x3Eu:
              *(_QWORD *)v80 = 0x1D0000001CFLL;
              *(_DWORD *)(v80 + 8) = 465;
              break;
            case 0x49u:
              v75 = 567;
              goto LABEL_103;
            case 0x52u:
              if ((v79 & 0xFFF00000) == 0x400000)
              {
                *(_DWORD *)v80 = 0;
              }
              else
              {
                v75 = (v82 + 120) >> 2;
LABEL_103:
                *(_DWORD *)v80 = v75;
              }
              break;
            case 0x53u:
              v75 = 3;
              goto LABEL_103;
            case 0x56u:
              v84 = 8 * v81 + 1880;
              goto LABEL_135;
            case 0x57u:
              v84 = 8 * v81 + 2128;
LABEL_135:
              v86 = v84 >> 2;
              *(_DWORD *)v80 = v86;
              *(_DWORD *)(v80 + 4) = v86 | 1;
              break;
            case 0x62u:
              v75 = v79 + 703;
              goto LABEL_103;
            case 0x63u:
              v75 = v79 + 768;
              goto LABEL_103;
            case 0x64u:
              v75 = 566;
              goto LABEL_103;
            case 0x66u:
              v75 = (8 * v81 + 2128) >> 2;
              goto LABEL_103;
            case 0x6Bu:
              *(_QWORD *)v80 = 0x1D3000001D2;
              break;
            case 0x6Cu:
              *(_QWORD *)v80 = 0x1D5000001D4;
              break;
            case 0x78u:
              v75 = (v79 + 603) & 0x3FFFFFFF;
              goto LABEL_103;
            default:
              break;
          }
LABEL_104:
          if (++v73 != v74)
            continue;
          goto LABEL_151;
      }
    }
  }
LABEL_151:
  *(_QWORD *)(a1 + 392) &= ~0x4000000000uLL;
  v87 = *(unsigned __int8 *)(v3 + 288);
  v88 = *(unsigned __int8 *)(v3 + 289);
  v89 = *(unsigned __int8 *)(v3 + 290);
  if (*(_BYTE *)(v3 + 288) || *(_BYTE *)(v3 + 289) || *(_BYTE *)(v3 + 290))
  {
    v90 = *(__int16 **)(a1 + 120);
    for (j = *(__int16 **)(a1 + 128); v90 != j; v90 += 2)
    {
      if (*v90 == -1)
      {
        *v90 = 65;
        v90[1] = *(_DWORD *)(*v5 + 4 * (unsigned __int16)v90[1]);
      }
    }
    v93 = *(_DWORD *)(v3 + 120);
    v92 = *(_DWORD *)(v3 + 124);
    if (v87)
      v94 = 1;
    else
      v94 = v92 - v93 + 1;
    v95 = *(_DWORD *)(v3 + 132) - *(_DWORD *)(v3 + 128);
    if (v88)
      v95 = 0;
    if (v89)
      v96 = 0;
    else
      v96 = *(_DWORD *)(v3 + 140) - *(_DWORD *)(v3 + 136);
    v97 = *(_DWORD *)(v3 + 144);
    if (*(_BYTE *)(v3 + 184))
      v98 = *(_DWORD *)(v3 + 144);
    else
      v98 = 0;
    if (!*(_QWORD *)(v3 + 168))
      v97 = 0;
    v99 = (v95 + v94 + v96) & 0xFFFFFFFE;
    v100 = v98 + *(_DWORD *)(v3 + 148) + v97 + *(_DWORD *)(v3 + 152);
    v131 = 0;
    memset(v132, 0, sizeof(v132));
    v101 = v99 + v100;
    if (v99 + v100)
    {
      v102 = (char *)operator new(4 * v101);
      v131 = (unint64_t)v102;
      *(_QWORD *)v132 = v102;
      *(_QWORD *)&v132[2] = &v102[4 * v101];
    }
    else
    {
      v102 = 0;
    }
    v103 = *v130;
    if (!v87 && v92 != v93)
    {
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v131, v102, *v130, &v103[4 * (v92 - v93)], (v92 - v93));
      v88 = *(unsigned __int8 *)(v3 + 289);
    }
    if (!v88)
    {
      v105 = *(_DWORD *)(v3 + 128);
      v104 = *(_DWORD *)(v3 + 132);
      if (v104 != v105)
      {
        v106 = &v103[4 * (*(_DWORD *)(v3 + 124) - *(_DWORD *)(v3 + 120))];
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v131, *(void **)v132, v106, &v106[4 * (v104 - v105)], (v104 - v105));
      }
    }
    if (!*(_BYTE *)(v3 + 290))
    {
      v108 = *(_DWORD *)(v3 + 136);
      v107 = *(_DWORD *)(v3 + 140);
      if (v107 != v108)
      {
        v109 = &v103[4 * (*(_DWORD *)(v3 + 124) - *(_DWORD *)(v3 + 120))
                   + 4 * (*(_DWORD *)(v3 + 132) - *(_DWORD *)(v3 + 128))];
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v131, *(void **)v132, v109, &v109[4 * (v107 - v108)], (v107 - v108));
      }
    }
    v110 = *(unsigned int *)(v3 + 144);
    if (*(_BYTE *)(v3 + 184) && (_DWORD)v110)
    {
      v111 = &v103[4
                 * ((*(_DWORD *)(v3 + 124)
                   + *(_DWORD *)(v3 + 132)
                   + *(_DWORD *)(v3 + 140)
                   - (*(_DWORD *)(v3 + 120)
                    + *(_DWORD *)(v3 + 128)
                    + *(_DWORD *)(v3 + 136))
                   + 1) & 0xFFFFFFFE)];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v131, *(void **)v132, v111, &v111[4 * v110], v110);
      LODWORD(v110) = *(_DWORD *)(v3 + 144);
    }
    if (*(_QWORD *)(v3 + 168) && (_DWORD)v110)
    {
      if (*(_BYTE *)(v3 + 184))
        v112 = v110;
      else
        v112 = 0;
      v113 = &v103[4 * v112
                 + 4
                 * ((*(_DWORD *)(v3 + 124)
                   + *(_DWORD *)(v3 + 132)
                   + *(_DWORD *)(v3 + 140)
                   - (*(_DWORD *)(v3 + 120)
                    + *(_DWORD *)(v3 + 128)
                    + *(_DWORD *)(v3 + 136))
                   + 1) & 0xFFFFFFFE)];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v131, *(void **)v132, v113, &v113[4 * v110], v110);
    }
    v114 = *(unsigned int *)(v3 + 148);
    if ((_DWORD)v114)
    {
      v115 = *(_DWORD *)(v3 + 144);
      if (*(_BYTE *)(v3 + 184))
        v116 = *(_DWORD *)(v3 + 144);
      else
        v116 = 0;
      if (!*(_QWORD *)(v3 + 168))
        v115 = 0;
      v117 = &v103[4 * v116
                 + 4 * v115
                 + 4
                 * ((*(_DWORD *)(v3 + 124)
                   + *(_DWORD *)(v3 + 132)
                   + *(_DWORD *)(v3 + 140)
                   - (*(_DWORD *)(v3 + 120)
                    + *(_DWORD *)(v3 + 128)
                    + *(_DWORD *)(v3 + 136))
                   + 1) & 0xFFFFFFFE)];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v131, *(void **)v132, v117, &v117[4 * v114], v114);
    }
    v118 = *(void **)(a1 + 72);
    v119 = (*(_QWORD *)(a1 + 80) - (_QWORD)v118) >> 2;
    v120 = v131;
    v121 = *(_DWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 72) = v131;
    v122 = *(_QWORD *)v132;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v132;
    *(_DWORD *)(a1 + 336) = v121 + ((v122 - v120) >> 2) - v119;
    if (v118)
      operator delete(v118);
  }
  if (*(_BYTE *)(v3 + 291))
  {
    v123 = *(__int16 **)(a1 + 168);
    for (k = *(__int16 **)(a1 + 176); v123 != k; v123 += 2)
    {
      if (*v123 == -1)
      {
        *v123 = 66;
        v123[1] = *(_DWORD *)(*v70 + 4 * (unsigned __int16)v123[1]);
      }
    }
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  }
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::finalizeGatherSizes(a1, v3);
  v125 = *(_QWORD *)(a1 + 24);
  if (v125)
  {
    v126 = AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(v125);
    MEMORY[0x234927ECC](v126, 0x1030C404D8F7974);
  }
  *(_QWORD *)(a1 + 24) = 0;
  v127 = *(ProgramBindingsAndDMAList **)(a1 + 16);
  if (v127)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v127);
    MEMORY[0x234927ECC]();
  }
  *(_QWORD *)(a1 + 16) = 0;
LABEL_214:
  std::mutex::unlock(v2);
}

void sub_232CBCA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

unint64_t AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::BackgroundObjectProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int32x4_t v5;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int **v11;
  int *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int *v15;
  unsigned int **v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  const char *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  const char *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned __int16 *v34;
  size_t v35;
  const void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unsigned int **v42;
  int *v43;
  unsigned __int16 *v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _DWORD *v49;
  const char *v50;
  size_t v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  int v58;
  int v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  unsigned int **v76;
  unsigned int *v77;
  unsigned int *v78;
  BOOL v79;
  int *v80;
  unsigned __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned int **v93;
  unsigned int *v94;
  int *v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unsigned __int16 *v98;
  uint64_t v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned __int16 *v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned __int16 *v116;
  uint64_t v117;
  unsigned __int16 *v118;
  uint64_t v119;
  unsigned __int16 *v120;
  uint64_t v121;
  unsigned __int16 *v122;
  uint64_t v123;
  unsigned __int16 *v124;
  uint64_t v125;
  unsigned __int16 *v126;
  uint64_t v127;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  unsigned __int16 *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  int *v144;
  unsigned __int16 *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  unsigned int *v150;
  uint64_t v151;
  unsigned int *v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unsigned __int16 *v156;
  uint64_t v157;
  int v158;
  unsigned __int8 v159;
  unsigned __int16 *v160;
  uint64_t v161;
  unsigned __int16 *v162;
  uint64_t v163;
  unsigned __int16 *v164;
  uint64_t v165;
  uint64_t v166;
  _WORD *v167;
  unsigned int v168;
  uint64_t v169;
  BOOL v170;
  int v171;
  BOOL v172;
  unsigned __int16 *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int *v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int *v192;
  int *v193;
  unsigned __int16 *v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t **v199;
  uint64_t *v200;
  uint64_t **v201;
  unsigned int v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t *v205;
  int v206;
  uint64_t v207;
  unsigned __int8 v208;
  int v209;
  unsigned __int16 *v210;
  uint64_t v211;
  unsigned __int16 *v212;
  uint64_t v213;
  unsigned __int16 *v214;
  uint64_t v215;
  unsigned __int16 *v216;
  uint64_t v217;
  unsigned __int16 *v218;
  char v219;
  uint64_t v220;
  std::vector<unsigned int> *v221;
  unsigned int v222;
  int v223;
  int v224;
  unsigned __int8 v225;
  unsigned __int16 *v226;
  unsigned __int16 *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 v230;
  _OWORD *v231;
  const void **v232;
  uint64_t v233;
  const void **v234;
  const void **v235;
  __int128 v236;
  __int128 v237;
  _QWORD *v238;
  uint64_t v239;
  const void *v240;
  const void **v241;
  uint64_t v242;
  uint64_t v243;
  const void **v244;
  _QWORD *v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  const void *v250;
  const void **v251;
  const void **v252;
  _QWORD *v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  const void *v258;
  _QWORD *v259;
  uint64_t v260;
  NSObject *v261;
  _QWORD *v262;
  std::string *v263;
  _QWORD *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  std::string *v270;
  _QWORD *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  int v299;
  int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  int v305;
  std::vector<unsigned int>::pointer begin;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  unsigned int v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  int v340;
  unsigned int *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int *v345;
  int *v346;
  unsigned __int16 *v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  unsigned __int16 *v354;
  uint64_t v355;
  uint64_t *v356;
  unsigned int v357;
  unsigned int v358;
  int v359;
  uint64_t **v360;
  uint64_t *v361;
  uint64_t **v362;
  unsigned int v363;
  _DWORD *v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  int v368;
  unsigned int v369;
  std::vector<unsigned int>::pointer v370;
  unint64_t v371;
  unsigned int v372;
  uint64_t v373;
  int v374;
  int v375;
  uint64_t v376;
  int v377;
  std::vector<unsigned int>::pointer v378;
  unint64_t v379;
  int v380;
  int v381;
  unsigned int v382;
  std::vector<unsigned int>::pointer v383;
  int v384;
  int v385;
  unsigned __int16 *v386;
  unint64_t v387;
  int v388;
  unsigned __int16 *v389;
  unint64_t v390;
  unsigned __int16 *v391;
  uint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unsigned int *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  unsigned int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  unsigned __int16 *v411;
  uint64_t v412;
  _DWORD *v413;
  unint64_t v414;
  _BYTE *v415;
  _BYTE *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  unsigned __int16 *v421;
  uint64_t v422;
  _DWORD *v423;
  unint64_t v424;
  _DWORD *v425;
  _QWORD *v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  unint64_t v430;
  _DWORD *v431;
  _QWORD *v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  char *v437;
  char *v438;
  char *v439;
  unsigned int **v440;
  int *v441;
  unsigned __int16 *v442;
  uint64_t v443;
  unsigned int *v444;
  unsigned int **v445;
  int *v446;
  unsigned __int16 *v447;
  uint64_t v448;
  int *v449;
  unsigned __int16 *v450;
  uint64_t v451;
  unsigned __int16 *v452;
  uint64_t v453;
  const char *v454;
  unsigned __int16 *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unsigned int *v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  char *v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  _QWORD *v474;
  uint64_t v475;
  void *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  _WORD *v481;
  const void *v482;
  size_t v483;
  char *v484;
  char *v485;
  uint64_t *v486;
  unsigned __int16 *v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int *v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  char *v494;
  char v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  char *v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unsigned int *v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  char *v508;
  char v509;
  uint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  char *v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unsigned int *v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  char v524;
  uint64_t v525;
  uint64_t v526;
  char *v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int *v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  char v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  unsigned int v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unsigned int **v547;
  unsigned int *v548;
  unsigned int *v549;
  BOOL v550;
  int *v551;
  unsigned __int16 *v552;
  uint64_t v553;
  int *v554;
  unsigned __int16 *v555;
  uint64_t v556;
  unsigned int *v557;
  unsigned int *v558;
  uint64_t v559;
  unsigned int v560;
  unsigned int *v561;
  unint64_t v562;
  uint64_t v563;
  int v564;
  _BYTE *v565;
  int *v566;
  unsigned __int16 *v567;
  unsigned int v568;
  uint64_t v569;
  int v570;
  unsigned int v571;
  int v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  _BYTE *v577;
  uint64_t v578;
  int v579;
  int v580;
  unsigned int v581;
  int v582;
  int v584;
  unint64_t v585;
  _DWORD *v586;
  int v587;
  unsigned __int16 *v588;
  unsigned int v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  int v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  int v602;
  unint64_t v603;
  unsigned __int16 *v604;
  uint64_t v605;
  int v606;
  unsigned __int16 *v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  unsigned int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  _BYTE *v616;
  unsigned int v617;
  uint64_t v618;
  int v619;
  int v620;
  int v621;
  int v623;
  unint64_t v624;
  _DWORD *v625;
  int v626;
  int v627;
  unsigned __int16 *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _BYTE *v636;
  unsigned int v637;
  uint64_t v638;
  int v639;
  int v640;
  int v641;
  int v643;
  unint64_t v644;
  _DWORD *v645;
  int v646;
  int v647;
  unsigned __int16 *v648;
  unsigned int v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  _BYTE *v656;
  unsigned int v657;
  uint64_t v658;
  int v659;
  int v660;
  int v661;
  int v663;
  uint64_t v664;
  _DWORD *v665;
  int v666;
  int v667;
  unsigned __int16 *v668;
  unsigned int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  int v675;
  _BYTE *v676;
  uint64_t v677;
  char *v678;
  uint64_t v679;
  char *v680;
  unsigned int v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  unsigned int v686;
  char *v687;
  unsigned int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  std::string::size_type v697;
  uint64_t v698;
  __int128 v699;
  BOOL *v700;
  uint64_t v701;
  unsigned int **v702;
  int *v703;
  unsigned __int16 *v704;
  uint64_t v705;
  int *v706;
  unsigned int **v707;
  int *v708;
  unsigned __int16 *v709;
  uint64_t v710;
  int *v711;
  unsigned int **v712;
  int *v713;
  unsigned __int16 *v714;
  uint64_t v715;
  int *v716;
  unsigned __int16 *v717;
  unsigned int v718;
  unint64_t v719;
  unint64_t v720;
  unsigned __int16 *v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  unsigned __int16 *v725;
  uint64_t v726;
  int *v727;
  unsigned __int16 *v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  __int128 v732;
  uint64_t v733;
  unint64_t v734;
  unsigned __int16 *v735;
  __int128 v736;
  int8x16_t v737;
  int8x8_t v738;
  BOOL v740;
  unsigned int **v741;
  int *v742;
  unsigned __int16 *v743;
  uint64_t v744;
  int *v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  uint64_t v750;
  int v751;
  uint64_t v752;
  int32x4_t v753;
  __int128 v754;
  uint64_t v755;
  int *v756;
  unsigned __int16 *v757;
  unsigned int v758;
  uint64_t v759;
  std::vector<unsigned int>::pointer v760;
  uint64_t v761;
  int v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  unsigned int v768;
  int32x4_t v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  uint64_t v774;
  int v775;
  unsigned int v776;
  int v777;
  int v778;
  int v779;
  int v780;
  uint64_t v781;
  int v782;
  int v783;
  uint64_t v784;
  int v785;
  int v786;
  uint64_t v788;
  int v789;
  char *v790;
  unint64_t v791;
  _DWORD *v792;
  _DWORD *v793;
  std::vector<unsigned int> *v794;
  _QWORD *v795;
  _QWORD *v796;
  _QWORD *v797;
  _QWORD *v798;
  unsigned int **v800;
  std::string *v801;
  _QWORD *v802;
  _QWORD *v803;
  _QWORD *v805;
  unsigned int **v806;
  void **v807;
  _QWORD *v808;
  int *v809;
  int *v810;
  _DWORD *v811;
  char *v812;
  uint64_t v813;
  _DWORD *v814;
  _DWORD *v815;
  uint64_t v816;
  uint64_t **v817;
  uint64_t v818;
  std::vector<unsigned int> *v819;
  uint64_t v820;
  uint64_t **v821;
  _DWORD *v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v826;
  char v827;
  std::string __str;
  uint64_t v829;
  uint64_t v830;
  char v831;
  _BYTE __dst[48];
  __int16 v833;
  uint64_t v834;
  int v835;
  uint64_t v836;
  unsigned int v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  int v841;
  uint64_t v842;

  v842 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a1 = &off_250401E50;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = a1 + 48;
  *(_OWORD *)(a1 + 96) = 0u;
  v798 = (_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v797 = (_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v795 = (_QWORD *)(a1 + 168);
  v796 = (_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v817 = (uint64_t **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v805 = (_QWORD *)(a1 + 368);
  v9 = (unint64_t *)(a2 + 6744);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 400) = v10;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 844) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v803 = (_QWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 871) = 0u;
  *(_OWORD *)(a1 + 887) = 0u;
  *(_OWORD *)(a1 + 903) = 0u;
  v790 = (char *)(a1 + 871);
  *(_QWORD *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a4 + 425);
  *(_WORD *)(a1 + 1018) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  v821 = (uint64_t **)(a1 + 1032);
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  *(_OWORD *)(a1 + 1144) = 0u;
  v807 = (void **)(a1 + 1144);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  v793 = (_DWORD *)(a1 + 1048);
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_QWORD *)(a1 + 1208) = 0;
  v806 = (unsigned int **)(a3 + 224);
  if (*(_QWORD *)(a3 + 224))
  {
    v11 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v11 = (unsigned int **)(a3 + 224);
  }
  else
  {
    v11 = (unsigned int **)(a3 + 784);
  }
  v12 = 0;
  if (*v11 && v11[1])
    v12 = (int *)((char *)*v11 + **v11);
  v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 5u && (v14 = v13[2]) != 0)
    v15 = (int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
  else
    v15 = 0;
  if (*(_QWORD *)(a3 + 464))
  {
    v16 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v16 = (unsigned int **)(a3 + 464);
  }
  else
  {
    v16 = (unsigned int **)(a3 + 1024);
  }
  v17 = 0;
  if (*v16 && v16[1])
    v17 = (int *)((char *)*v16 + **v16);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 5u && (v19 = v18[2]) != 0)
    v20 = (int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  else
    v20 = 0;
  v21 = (unsigned __int16 *)((char *)v20 - *v20);
  v22 = *v21;
  if (v22 < 0x25)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v23 = v21[18];
    if (v21[18])
      LOBYTE(v23) = *((_BYTE *)v20 + v23) != 0;
  }
  *(_BYTE *)(a1 + 1017) = v23;
  v24 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v24 >= 0x55u && v24[42])
  {
    if (v22 <= 6)
    {
LABEL_34:
      LODWORD(v25) = 0;
      goto LABEL_38;
    }
  }
  else if (v22 < 7)
  {
    goto LABEL_34;
  }
  v25 = v21[3];
  if (v25)
    LODWORD(v25) = *(int *)((char *)v20 + v25);
LABEL_38:
  *(_DWORD *)(a1 + 392) = v25;
  v26 = (unsigned __int16 *)((char *)v20 - *v20);
  v800 = (unsigned int **)(a3 + 464);
  v794 = (std::vector<unsigned int> *)(a1 + 72);
  v792 = (_DWORD *)(a1 + 200);
  if (*v26 >= 0x13u && (v27 = v26[9]) != 0)
    v28 = (char *)v20 + v27 + *(unsigned int *)((char *)v20 + v27) + 4;
  else
    v28 = "";
  v801 = (std::string *)(a1 + 456);
  v802 = (_QWORD *)(a1 + 432);
  v791 = a1 + 848;
  v808 = (_QWORD *)(a1 + 944);
  MEMORY[0x234927D28](v803, v28);
  v29 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v29 >= 9u && (v30 = v29[4]) != 0)
    v31 = (char *)v20 + v30 + *(unsigned int *)((char *)v20 + v30) + 4;
  else
    v31 = "";
  MEMORY[0x234927D28](v802, v31);
  v32 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v32 < 0x29u)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v33 = v32[20];
    if (v33)
      LOBYTE(v33) = *((_BYTE *)v20 + v33) != 0;
  }
  *(_BYTE *)(a1 + 480) = v33;
  std::string::operator=(v801, &__str);
  v34 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v34 >= 5u && v34[2] && *(_BYTE *)(a2 + 6360))
  {
    v35 = *(_QWORD *)(a3 + 8);
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v36 = *(const void **)a3;
    if (v35 >= 0x17)
    {
      v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v38 = v35 | 7;
      v39 = v38 + 1;
      v37 = operator new(v38 + 1);
      *(_QWORD *)&__dst[8] = v35;
      *(_QWORD *)&__dst[16] = v39 | 0x8000000000000000;
      *(_QWORD *)__dst = v37;
    }
    else
    {
      __dst[23] = *(_QWORD *)(a3 + 8);
      v37 = __dst;
      if (!v35)
        goto LABEL_61;
    }
    memmove(v37, v36, v35);
LABEL_61:
    v37[v35] = 0;
    v40 = (_QWORD *)a3;
    if (*v790 < 0)
    {
      operator delete(*(void **)v791);
      v40 = (_QWORD *)a3;
    }
    *(_OWORD *)v791 = *(_OWORD *)__dst;
    *(_QWORD *)(v791 + 16) = *(_QWORD *)&__dst[16];
    v41 = v40 + 3;
    if (v40[3])
    {
      if (!v40[4])
        v41 = v40 + 73;
    }
    else
    {
      v41 = v40 + 73;
    }
    *(_QWORD *)(a1 + 872) = *v41 - *v40;
  }
  v819 = (std::vector<unsigned int> *)v8;
  if (*(_QWORD *)(a3 + 344))
  {
    v42 = (unsigned int **)(a3 + 344);
    if (!*(_QWORD *)(a3 + 352))
      v42 = (unsigned int **)(a3 + 904);
  }
  else
  {
    v42 = (unsigned int **)(a3 + 904);
  }
  v809 = v20;
  v810 = v15;
  if (!*v42 || !v42[1])
    goto LABEL_120;
  v43 = (int *)((char *)*v42 + **v42);
  v44 = (unsigned __int16 *)((char *)v43 - *v43);
  v45 = *v44;
  if (v44[2])
  {
    v815 = (int *)((char *)v43 + v44[2] + *(unsigned int *)((char *)v43 + v44[2]));
    if (v45 < 7)
      goto LABEL_82;
  }
  else
  {
    v815 = 0;
    if (v45 < 7)
      goto LABEL_82;
  }
  v46 = v44[3];
  if (v46)
  {
    v47 = (char *)v43 + v46 + *(unsigned int *)((char *)v43 + v46);
    goto LABEL_83;
  }
LABEL_82:
  v47 = 0;
LABEL_83:
  if (*v815)
  {
    v48 = 0;
    v812 = v47 + 4;
    do
    {
      v50 = (char *)&v815[v48 + 2] + v815[v48 + 1];
      v51 = strlen(v50);
      if (v51 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v52 = v51;
      if (v51 >= 0x17)
      {
        v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v54 = v51 | 7;
        v55 = v54 + 1;
        v53 = operator new(v54 + 1);
        *(_QWORD *)&__dst[8] = v52;
        *(_QWORD *)&__dst[16] = v55 | 0x8000000000000000;
        *(_QWORD *)__dst = v53;
      }
      else
      {
        __dst[23] = v51;
        v53 = __dst;
        if (!v51)
          goto LABEL_95;
      }
      memmove(v53, v50, v52);
LABEL_95:
      v53[v52] = 0;
      v56 = *(_QWORD *)(a1 + 1152);
      if (v56 >= *(_QWORD *)(a1 + 1160))
      {
        v57 = std::vector<std::string>::__push_back_slow_path<std::string>(v807, (uint64_t)__dst);
        v58 = __dst[23];
        *(_QWORD *)(a1 + 1152) = v57;
        if (v58 < 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        *(_OWORD *)v56 = *(_OWORD *)__dst;
        *(_QWORD *)(v56 + 16) = *(_QWORD *)&__dst[16];
        *(_QWORD *)(a1 + 1152) = v56 + 24;
      }
      v59 = *(_DWORD *)&v812[4 * v48];
      v60 = *(char **)(a1 + 1176);
      v61 = *(_QWORD *)(a1 + 1184);
      if ((unint64_t)v60 < v61)
      {
        *(_DWORD *)v60 = v59;
        v49 = v60 + 4;
      }
      else
      {
        v62 = *(char **)(a1 + 1168);
        v63 = (v60 - v62) >> 2;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62)
          abort();
        v65 = v61 - (_QWORD)v62;
        if (v65 >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          if (v66 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v67 = operator new(4 * v66);
        }
        else
        {
          v67 = 0;
        }
        v68 = &v67[4 * v63];
        *v68 = v59;
        v49 = v68 + 1;
        if (v60 != v62)
        {
          v69 = v60 - 4 - v62;
          if (v69 < 0x2C)
            goto LABEL_1182;
          if ((unint64_t)(v62 - v67) < 0x20)
            goto LABEL_1182;
          v70 = (v69 >> 2) + 1;
          v71 = &v67[4 * v63 - 16];
          v72 = v60 - 16;
          v73 = v70 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v74 = *(_OWORD *)v72;
            *(v71 - 1) = *((_OWORD *)v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 32;
            v73 -= 8;
          }
          while (v73);
          v68 -= v70 & 0x7FFFFFFFFFFFFFF8;
          v60 -= 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
          if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1182:
            do
            {
              v75 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--v68 = v75;
            }
            while (v60 != v62);
          }
        }
        *(_QWORD *)(a1 + 1168) = v68;
        *(_QWORD *)(a1 + 1176) = v49;
        *(_QWORD *)(a1 + 1184) = &v67[4 * v66];
        if (v62)
          operator delete(v62);
        v20 = v809;
        v15 = v810;
      }
      *(_QWORD *)(a1 + 1176) = v49;
      ++v48;
    }
    while (v48 < *v815);
  }
LABEL_120:
  if (*(_QWORD *)(a3 + 544))
  {
    v76 = (unsigned int **)(a3 + 544);
    if (!*(_QWORD *)(a3 + 552))
      v76 = (unsigned int **)(a3 + 1104);
  }
  else
  {
    v76 = (unsigned int **)(a3 + 1104);
  }
  v78 = *v76;
  v77 = v76[1];
  if (v78)
    v79 = v77 == 0;
  else
    v79 = 1;
  if (v79
    || (v80 = (int *)((char *)v78 + *v78), v81 = (unsigned __int16 *)((char *)v80 - *v80), *v81 < 5u)
    || (v82 = v81[2]) == 0)
  {
    v83 = 0;
  }
  else
  {
    v83 = *(_QWORD *)((char *)v80 + v82);
  }
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  *(float *)(a1 + 1056) = (float)(v83
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / unk_254235750)
                        / 1000000.0;
  v84 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v84 < 5u)
  {
    LODWORD(v85) = 0;
  }
  else
  {
    v85 = v84[2];
    if (v85)
      LODWORD(v85) = *(int *)((char *)v15 + v85);
  }
  *v793 = v85;
  v86 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v86 < 0x2Du)
  {
    LODWORD(v87) = 0;
  }
  else
  {
    v87 = v86[22];
    if (v87)
      LODWORD(v87) = *(int *)((char *)v15 + v87);
  }
  *(_DWORD *)(a1 + 1052) = v87;
  v88 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v88 < 0x35u)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v89 = v88[26];
    if (v89)
      LODWORD(v89) = *(int *)((char *)v15 + v89);
  }
  *(_DWORD *)(a1 + 1092) = v89;
  v90 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v90 < 0x43u)
  {
    LODWORD(v91) = 0;
    v92 = (_QWORD *)a3;
  }
  else
  {
    v91 = v90[33];
    v92 = (_QWORD *)a3;
    if (v91)
      LODWORD(v91) = *(int *)((char *)v15 + v91);
  }
  *(_DWORD *)(a1 + 1128) = v91;
  if (v92[38])
  {
    v93 = (unsigned int **)(v92 + 38);
    if (!v92[39])
      v93 = (unsigned int **)(v92 + 108);
    v94 = *v93;
    if (!*v93)
      goto LABEL_235;
    goto LABEL_157;
  }
  v93 = (unsigned int **)(v92 + 108);
  v94 = (unsigned int *)v92[108];
  if (v94)
  {
LABEL_157:
    if (v93[1])
    {
      v95 = (int *)((char *)v94 + *v94);
      v96 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v96 < 0xDu)
      {
        LODWORD(v97) = 0;
      }
      else
      {
        v97 = v96[6];
        if (v97)
          LODWORD(v97) = *(int *)((char *)v95 + v97);
      }
      *(_DWORD *)(a1 + 1052) = v97;
      v98 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v98 < 0xBu)
      {
        LODWORD(v99) = 0;
      }
      else
      {
        v99 = v98[5];
        if (v99)
          LODWORD(v99) = *(int *)((char *)v95 + v99);
      }
      *(_DWORD *)(a1 + 1060) = v99;
      v100 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v100 < 0x11u)
      {
        LODWORD(v101) = 0;
      }
      else
      {
        v101 = v100[8];
        if (v101)
          LODWORD(v101) = *(int *)((char *)v95 + v101);
      }
      *(_DWORD *)(a1 + 1064) = v101;
      v102 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v102 < 0x13u)
      {
        LODWORD(v103) = 0;
      }
      else
      {
        v103 = v102[9];
        if (v103)
          LODWORD(v103) = *(int *)((char *)v95 + v103);
      }
      *(_DWORD *)(a1 + 1068) = v103;
      v104 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v104 < 0x17u)
      {
        LODWORD(v105) = 0;
      }
      else
      {
        v105 = v104[11];
        if (v105)
          LODWORD(v105) = *(int *)((char *)v95 + v105);
      }
      *(_DWORD *)(a1 + 1072) = v105;
      v106 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v106 < 0x1Bu)
      {
        LODWORD(v107) = 0;
      }
      else
      {
        v107 = v106[13];
        if (v107)
          LODWORD(v107) = *(int *)((char *)v95 + v107);
      }
      *(_DWORD *)(a1 + 1076) = v107;
      v108 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v108 < 0x15u)
      {
        LODWORD(v109) = 0;
      }
      else
      {
        v109 = v108[10];
        if (v109)
          LODWORD(v109) = *(int *)((char *)v95 + v109);
      }
      *(_DWORD *)(a1 + 1080) = v109;
      v110 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v110 < 0x19u)
      {
        LODWORD(v111) = 0;
      }
      else
      {
        v111 = v110[12];
        if (v111)
          LODWORD(v111) = *(int *)((char *)v95 + v111);
      }
      *(_DWORD *)(a1 + 1084) = v111;
      v112 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v112 < 0x1Du)
      {
        LODWORD(v113) = 0;
      }
      else
      {
        v113 = v112[14];
        if (v113)
          LODWORD(v113) = *(int *)((char *)v95 + v113);
      }
      *(_DWORD *)(a1 + 1088) = v113;
      v114 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v114 < 0xFu)
      {
        LODWORD(v115) = 0;
      }
      else
      {
        v115 = v114[7];
        if (v115)
          LODWORD(v115) = *(int *)((char *)v95 + v115);
      }
      *(_DWORD *)(a1 + 1092) = v115;
      v116 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v116 < 0x1Fu)
      {
        LODWORD(v117) = 0;
      }
      else
      {
        v117 = v116[15];
        if (v117)
          LODWORD(v117) = *(int *)((char *)v95 + v117);
      }
      *(_DWORD *)(a1 + 1096) = v117;
      v118 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v118 < 0x21u)
      {
        LODWORD(v119) = 0;
      }
      else
      {
        v119 = v118[16];
        if (v119)
          LODWORD(v119) = *(int *)((char *)v95 + v119);
      }
      *(_DWORD *)(a1 + 1100) = v119;
      v120 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v120 < 0x23u)
      {
        LODWORD(v121) = 0;
      }
      else
      {
        v121 = v120[17];
        if (v121)
          LODWORD(v121) = *(int *)((char *)v95 + v121);
      }
      *(_DWORD *)(a1 + 1104) = v121;
      v122 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v122 < 0x25u)
      {
        LODWORD(v123) = 0;
      }
      else
      {
        v123 = v122[18];
        if (v123)
          LODWORD(v123) = *(int *)((char *)v95 + v123);
      }
      *(_DWORD *)(a1 + 1108) = v123;
      v124 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v124 < 0x27u)
      {
        LODWORD(v125) = 0;
      }
      else
      {
        v125 = v124[19];
        if (v125)
          LODWORD(v125) = *(int *)((char *)v95 + v125);
      }
      *(_DWORD *)(a1 + 1112) = v125;
      v126 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v126 < 0x29u)
      {
        LODWORD(v127) = 0;
      }
      else
      {
        v127 = v126[20];
        if (v127)
          LODWORD(v127) = *(int *)((char *)v95 + v127);
      }
      *(_DWORD *)(a1 + 1116) = v127;
      v128 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v128 < 0x2Bu)
      {
        LODWORD(v129) = 0;
      }
      else
      {
        v129 = v128[21];
        if (v129)
          LODWORD(v129) = *(int *)((char *)v95 + v129);
      }
      *(_DWORD *)(a1 + 1120) = v129;
      v130 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v130 < 7u)
      {
        LODWORD(v131) = 0;
      }
      else
      {
        v131 = v130[3];
        if (v131)
          LODWORD(v131) = *(int *)((char *)v95 + v131);
      }
      *(_DWORD *)(a1 + 1124) = v131;
      v132 = (unsigned __int16 *)((char *)v95 - *v95);
      if (*v132 >= 5u && (v133 = v132[2]) != 0)
        v134 = *(int *)((char *)v95 + v133);
      else
        v134 = 0;
      *(_DWORD *)(a1 + 1132) = v134;
    }
  }
LABEL_235:
  if (*(_QWORD *)(a3 + 424))
  {
    v135 = *(_QWORD *)(a3 + 432);
    if (v135)
      v136 = *(_QWORD *)(a3 + 424);
    else
      v136 = *(_QWORD *)(a3 + 984);
    if (v135)
      v137 = a3 + 424;
    else
      v137 = a3 + 984;
  }
  else
  {
    v137 = a3 + 984;
    v136 = *(_QWORD *)(a3 + 984);
  }
  MEMORY[0x234927D34](a1 + 1192, v136, *(_QWORD *)(v137 + 8));
  std::string::push_back((std::string *)(a1 + 1192), 0);
  v138 = *v15;
  v139 = (char *)v15 - v138;
  v140 = *(unsigned __int16 *)((char *)v15 - v138);
  if (v140 < 0x39)
    goto LABEL_261;
  v141 = -v138;
  v142 = *((unsigned __int16 *)v139 + 28);
  if (v142)
  {
    v143 = (int *)((char *)v15 + v142 + *(unsigned int *)((char *)v15 + v142));
    if (*v143)
    {
      *(_BYTE *)(a1 + 936) = 1;
      v144 = (_DWORD *)((char *)v143 + v143[1] + 4);
      v145 = (unsigned __int16 *)((char *)v144 - *v144);
      if (*v145 >= 9u && (v146 = v145[4]) != 0)
        v147 = *(int *)((char *)v144 + v146);
      else
        v147 = 0;
      *(_DWORD *)(a1 + 1136) = v147;
      *(_BYTE *)(a1 + 1140) = 1;
      v148 = *v15;
      v141 = -v148;
      v140 = *(unsigned __int16 *)((char *)v15 - v148);
    }
  }
  if (v140 < 0x3B)
    goto LABEL_261;
  v149 = (char *)v15 + v141;
  if (*((_WORD *)v149 + 29))
  {
    v150 = (unsigned int *)((char *)v15
                          + *((unsigned __int16 *)v149 + 29)
                          + *(unsigned int *)((char *)v15 + *((unsigned __int16 *)v149 + 29)));
    v151 = *v150;
    if ((_DWORD)v151)
    {
      v152 = v150 + 1;
      do
      {
        v154 = *v152++;
        v153 = v154;
        if (!(v154 >> 20))
          *(_QWORD *)(a1 + 928) |= 1 << v153;
        --v151;
      }
      while (v151);
    }
  }
  if (v140 < 0x57)
  {
LABEL_261:
    LODWORD(v155) = 0;
  }
  else
  {
    v155 = *((unsigned __int16 *)v149 + 43);
    if (*((_WORD *)v149 + 43))
      LODWORD(v155) = *(int *)((char *)v15 + v155);
  }
  *(_DWORD *)(a1 + 300) = v155;
  v156 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v156 >= 0x21u && (v157 = v156[16]) != 0)
    v158 = *(int *)((char *)v15 + v157);
  else
    v158 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 304) = getAdditionalSpillBufferBytes(void)::extra + v158;
  v160 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v160 < 0x59u)
  {
    LODWORD(v161) = 0;
  }
  else
  {
    v161 = v160[44];
    if (v161)
      LODWORD(v161) = *(int *)((char *)v15 + v161);
  }
  *(_DWORD *)(a1 + 332) = v161;
  v162 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v162 < 0x51u)
  {
    LODWORD(v163) = 0;
  }
  else
  {
    v163 = v162[40];
    if (v163)
      LODWORD(v163) = *(int *)((char *)v15 + v163);
  }
  *(_DWORD *)(a1 + 336) = v163;
  v164 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v164 < 0x4Bu)
  {
    LODWORD(v165) = 0;
  }
  else
  {
    v165 = v164[37];
    if (v165)
      LODWORD(v165) = *(int *)((char *)v15 + v165);
  }
  *(_DWORD *)(a1 + 344) = v165;
  v166 = *v15;
  v167 = (_WORD *)((char *)v15 - v166);
  v168 = *(unsigned __int16 *)((char *)v15 - v166);
  if (v168 < 0x25)
    goto LABEL_289;
  if (v167[18] && *((_BYTE *)v15 + (unsigned __int16)v167[18]))
  {
    if (v168 < 0x27)
    {
      v172 = 0;
      v170 = 1;
      goto LABEL_291;
    }
    LODWORD(v169) = (unsigned __int16)v167[19];
    v170 = 1;
    if (!v167[19])
      goto LABEL_290;
    goto LABEL_1163;
  }
  if (v168 < 0x27)
  {
LABEL_289:
    v170 = 0;
    goto LABEL_290;
  }
  v169 = (unsigned __int16)v167[19];
  if (!v167[19] || (v171 = *((unsigned __int8 *)v15 + v169), !*((_BYTE *)v15 + v169)))
  {
    if (v168 >= 0x29 && v167[20])
    {
      v170 = *((_BYTE *)v15 + (unsigned __int16)v167[20]) != 0;
      if (!v167[19])
        goto LABEL_290;
      goto LABEL_1163;
    }
    v170 = 0;
    if (v167[19])
    {
LABEL_1163:
      v171 = *((unsigned __int8 *)v15 + v169);
      goto LABEL_1164;
    }
LABEL_290:
    v172 = 0;
    goto LABEL_291;
  }
  v170 = 1;
LABEL_1164:
  v172 = v171 != 0;
LABEL_291:
  *(_BYTE *)(a1 + 354) = v172;
  v173 = (unsigned __int16 *)((char *)v20 - *v20);
  v174 = *v173;
  if (v174 < 0x21)
  {
    v176 = 0;
    LODWORD(v175) = 0;
  }
  else
  {
    v175 = v173[16];
    if (v173[16])
      LODWORD(v175) = *(int *)((char *)v20 + v175);
    if (v174 < 0x4D)
    {
      v176 = 0;
    }
    else
    {
      v176 = v173[38];
      if (v173[38])
        v176 = *(unsigned int *)((char *)v20 + v176);
    }
  }
  *(_QWORD *)(a1 + 384) = v175 | (unint64_t)(v176 << 32);
  *(_BYTE *)(a1 + 358) = v170 || v172;
  if (v168 < 0x37)
  {
    LOBYTE(v177) = 0;
  }
  else
  {
    v177 = (unsigned __int16)v167[27];
    if (v167[27])
      LOBYTE(v177) = *((_BYTE *)v15 + v177) != 0;
  }
  *(_BYTE *)(a1 + 353) = v177;
  if (v174 < 0x33)
  {
    LOBYTE(v178) = 0;
  }
  else
  {
    v178 = v173[25];
    if (v173[25])
      LOBYTE(v178) = *((_BYTE *)v20 + v178) != 0;
  }
  v179 = -v166;
  *(_BYTE *)(a1 + 359) = v178;
  if (v168 < 0x3F)
  {
    LOBYTE(v180) = 0;
  }
  else
  {
    v180 = (unsigned __int16)v167[31];
    if (v180)
    {
      v181 = (unsigned int *)((char *)v15 + v180 + *(unsigned int *)((char *)v15 + v180));
      v180 = *v181;
      if ((_DWORD)v180)
      {
        v182 = v181 + 1;
        while (1)
        {
          v184 = *v182++;
          v183 = v184;
          if (v184 < 0x36 && ((0x3F000000000777uLL >> v183) & 1) != 0)
            break;
          if (!--v180)
            goto LABEL_316;
        }
        LOBYTE(v180) = 1;
      }
    }
  }
LABEL_316:
  *(_BYTE *)(a1 + 361) = v180;
  if (v174 <= 0x14)
  {
    *(_BYTE *)(a1 + 355) = 0;
    *(_BYTE *)(a1 + 1017) = 0;
    *(_BYTE *)(a1 + 1019) = 0;
    if (v168 >= 0x21)
      goto LABEL_351;
LABEL_354:
    v206 = 0;
    goto LABEL_355;
  }
  v185 = v173[10];
  if (v173[10])
    LOBYTE(v185) = *((_BYTE *)v20 + v185) != 0;
  *(_BYTE *)(a1 + 355) = v185;
  if (v174 < 0x25)
  {
    *(_BYTE *)(a1 + 1017) = 0;
    if (v174 < 0x23)
    {
LABEL_349:
      *(_BYTE *)(a1 + 1019) = 0;
LABEL_350:
      if (v168 < 0x21)
        goto LABEL_354;
      goto LABEL_351;
    }
  }
  else
  {
    v186 = v173[18];
    if (v173[18])
      LOBYTE(v186) = *((_BYTE *)v20 + v186) != 0;
    *(_BYTE *)(a1 + 1017) = v186;
  }
  v187 = v173[17];
  if (!v187)
    goto LABEL_349;
  *(_BYTE *)(a1 + 1019) = 1;
  v188 = (unsigned int *)((char *)v20 + v187);
  v189 = *v188;
  v191 = (unsigned int *)((char *)v188 + v189 + 4);
  v190 = *(unsigned int *)((char *)v188 + v189);
  if (!(_DWORD)v190)
    goto LABEL_350;
  v192 = &v191[v190];
  do
  {
    v193 = (int *)((char *)v191 + *v191);
    v194 = (unsigned __int16 *)((char *)v193 - *v193);
    v195 = *v194;
    if (v195 < 7)
    {
      v196 = 0;
      v198 = 0;
      if (v195 < 5)
        goto LABEL_338;
      v197 = v194[2];
      if (v197)
        goto LABEL_337;
    }
    else if (v194[3])
    {
      v196 = *(int *)((char *)v193 + v194[3]);
      v197 = v194[2];
      if (v197)
        goto LABEL_337;
    }
    else
    {
      v196 = 0;
      v197 = v194[2];
      if (v197)
      {
LABEL_337:
        v198 = *(int *)((char *)v193 + v197);
        goto LABEL_338;
      }
    }
    v198 = 0;
LABEL_338:
    v199 = v821;
    while (1)
    {
      v200 = *v199;
      v201 = v199;
      if (!*v199)
        break;
      while (1)
      {
        v199 = (uint64_t **)v200;
        v202 = *((_DWORD *)v200 + 7);
        if (v198 < v202)
          break;
        if (v202 >= v198)
        {
          v203 = v199;
          goto LABEL_330;
        }
        v200 = v199[1];
        if (!v200)
        {
          v201 = v199 + 1;
          goto LABEL_344;
        }
      }
    }
LABEL_344:
    v203 = operator new(0x28uLL);
    v203[7] = v198;
    v203[8] = 0;
    *(_QWORD *)v203 = 0;
    *((_QWORD *)v203 + 1) = 0;
    *((_QWORD *)v203 + 2) = v199;
    *v201 = (uint64_t *)v203;
    v204 = **(_QWORD **)(a1 + 1024);
    v205 = (uint64_t *)v203;
    if (v204)
    {
      *(_QWORD *)(a1 + 1024) = v204;
      v205 = *v201;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1032), v205);
    ++*(_QWORD *)(a1 + 1040);
LABEL_330:
    v203[8] = v196;
    ++v191;
  }
  while (v191 != v192);
  v20 = v809;
  v15 = v810;
  v207 = *v810;
  v179 = -v207;
  if (*(unsigned __int16 *)((char *)v810 - v207) < 0x21u)
    goto LABEL_354;
LABEL_351:
  if (!*(_WORD *)((char *)v15 + v179 + 32))
    goto LABEL_354;
  v206 = *(int *)((char *)v15 + *(unsigned __int16 *)((char *)v15 + v179 + 32));
LABEL_355:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  v209 = getAdditionalSpillBufferBytes(void)::extra + v206;
  *(_DWORD *)(a1 + 296) = getAdditionalSpillBufferBytes(void)::extra + v206;
  v210 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v210 < 0x43u)
  {
    LODWORD(v211) = 0;
  }
  else
  {
    v211 = v210[33];
    if (v211)
      LODWORD(v211) = *(int *)((char *)v15 + v211);
  }
  *(_DWORD *)(a1 + 308) = v211;
  v212 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v212 < 5u)
  {
    LODWORD(v213) = 0;
  }
  else
  {
    v213 = v212[2];
    if (v213)
      LODWORD(v213) = *(int *)((char *)v15 + v213);
  }
  *(_DWORD *)(a1 + 292) = v213;
  v214 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v214 < 0x51u)
  {
    LODWORD(v215) = 0;
  }
  else
  {
    v215 = v214[40];
    if (v215)
      LODWORD(v215) = *(int *)((char *)v15 + v215);
  }
  *(_DWORD *)(a1 + 328) = v215;
  v216 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v216 < 0x4Fu)
  {
    LODWORD(v217) = 0;
  }
  else
  {
    v217 = v216[39];
    if (v217)
      LODWORD(v217) = *(int *)((char *)v15 + v217);
  }
  *(_DWORD *)(a1 + 340) = v217;
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a4 + 428);
  v218 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*(int *)((char *)v15 + v218[6] + *(unsigned int *)((char *)v15 + v218[6])) | v209)
    v219 = 1;
  else
    v219 = v170;
  if ((v219 & 1) != 0)
  {
    LOBYTE(v220) = 1;
    v221 = v819;
    goto LABEL_390;
  }
  v222 = *v218;
  v221 = v819;
  if (v222 < 0x21)
  {
    v223 = 0;
    goto LABEL_382;
  }
  if (!v218[16])
  {
    v223 = 0;
    if (v222 >= 0x43)
      goto LABEL_1156;
    goto LABEL_382;
  }
  v223 = *(int *)((char *)v15 + v218[16]);
  if (v222 < 0x43)
  {
LABEL_382:
    v224 = 0;
    goto LABEL_383;
  }
LABEL_1156:
  if (!v218[33])
    goto LABEL_382;
  v224 = *(int *)((char *)v15 + v218[33]);
LABEL_383:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  if (v224 + v223 + getAdditionalSpillBufferBytes(void)::extra)
  {
    LOBYTE(v220) = 1;
  }
  else
  {
    v226 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v226 < 0x5Fu)
    {
      LOBYTE(v220) = 0;
    }
    else
    {
      v220 = v226[47];
      if (v220)
        LOBYTE(v220) = *((_BYTE *)v15 + v220) != 0;
    }
  }
LABEL_390:
  *(_BYTE *)(a1 + 352) = v220;
  v227 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v227 < 0x11u)
  {
    LODWORD(v228) = 0;
    v229 = a3;
  }
  else
  {
    v228 = v227[8];
    v229 = a3;
    if (v228)
      LODWORD(v228) = *(int *)((char *)v20 + v228);
  }
  *(_DWORD *)(a1 + 840) = v228;
  if ((v230 & 1) == 0)
  {
    v229 = a3;
    if (v789)
    {
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
      v229 = a3;
    }
  }
  v231 = (_OWORD *)(a1 + 696);
  v232 = (const void **)(v229 + 24);
  if (*(_QWORD *)(v229 + 24))
  {
    v233 = *(_QWORD *)(v229 + 32);
    v234 = (const void **)(v229 + 584);
    if (v233)
      v235 = v232;
    else
      v235 = v234;
  }
  else
  {
    v235 = (const void **)(v229 + 584);
  }
  AGX::Heap<true>::allocateImpl(__dst, a2 + 4680, (uint64_t)v235[1]+ AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (_QWORD *)(a1 + 896));
  *(_DWORD *)(a1 + 920) += *(_DWORD *)&__dst[16];
  v236 = *(_OWORD *)&__dst[16];
  *v231 = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 712) = v236;
  *(_OWORD *)(a1 + 721) = *(_OWORD *)&__dst[25];
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 696);
  v813 = a2 + 4680;
  *(_QWORD *)(a1 + 520) = a2 + 4680;
  v237 = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(a1 + 528) = *v231;
  *(_OWORD *)(a1 + 544) = v237;
  *(_OWORD *)(a1 + 553) = *(_OWORD *)(a1 + 721);
  if (*v232)
  {
    v238 = (_QWORD *)a3;
    v239 = *(_QWORD *)(a3 + 32);
    if (v239)
      v240 = *v232;
    else
      v240 = *(const void **)(a3 + 584);
    if (v239)
      v241 = v232;
    else
      v241 = (const void **)(a3 + 584);
  }
  else
  {
    v238 = (_QWORD *)a3;
    v241 = (const void **)(a3 + 584);
    v240 = *(const void **)(a3 + 584);
  }
  v816 = a2 + 4512;
  memcpy(*(void **)(a1 + 704), v240, (size_t)v241[1]);
  v242 = *(_QWORD *)(a1 + 704);
  v243 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 504) = v242;
  *(_QWORD *)(a1 + 512) = v243;
  v244 = (const void **)(v238 + 8);
  if (v238[8])
  {
    if (v238[9])
      v245 = v238 + 8;
    else
      v245 = (_QWORD *)(a3 + 624);
    v238 = (_QWORD *)a3;
    v246 = v245[1];
    if (!v246)
      goto LABEL_424;
  }
  else
  {
    v246 = v238[79];
    if (!v246)
      goto LABEL_424;
  }
  AGX::Heap<true>::allocateImpl(__dst, v816, v246, (_QWORD *)(a1 + 904));
  *(_DWORD *)(a1 + 920) += *(_DWORD *)&__dst[16];
  v247 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 744) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 760) = v247;
  *(_OWORD *)(a1 + 769) = *(_OWORD *)&__dst[25];
  v248 = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 744);
  *(_OWORD *)(a1 + 592) = v248;
  *(_OWORD *)(a1 + 601) = *(_OWORD *)(a1 + 769);
  if (*v244)
  {
    v249 = *(_QWORD *)(a3 + 72);
    if (v249)
      v250 = *v244;
    else
      v250 = *(const void **)(a3 + 624);
    if (v249)
      v251 = v244;
    else
      v251 = (const void **)(a3 + 624);
  }
  else
  {
    v251 = (const void **)(a3 + 624);
    v250 = *(const void **)(a3 + 624);
  }
  memcpy(*(void **)(a1 + 752), v250, (size_t)v251[1]);
  v238 = (_QWORD *)a3;
LABEL_424:
  v252 = (const void **)(v238 + 13);
  if (v238[13])
  {
    if (v238[14])
      v253 = v238 + 13;
    else
      v253 = v238 + 83;
    v254 = v253[1];
    if (v254)
      goto LABEL_429;
LABEL_437:
    if (!*(_BYTE *)(a1 + 480))
      goto LABEL_441;
LABEL_442:
    {
      {
        v262 = v803;
        if (*(char *)(a1 + 431) < 0)
          v262 = (_QWORD *)*v803;
        v263 = v801;
        if (*(char *)(a1 + 479) < 0)
          v263 = (std::string *)v801->__r_.__value_.__r.__words[0];
        v264 = v802;
        if (*(char *)(a1 + 455) < 0)
          v264 = (_QWORD *)*v802;
        v265 = *(_DWORD *)(a1 + 392);
        v266 = *(_QWORD *)(a1 + 488);
        v267 = *(_QWORD *)(a1 + 712);
        *(_DWORD *)__dst = 136447490;
        *(_QWORD *)&__dst[4] = v262;
        *(_WORD *)&__dst[12] = 2082;
        *(_QWORD *)&__dst[14] = v263;
        *(_WORD *)&__dst[22] = 2082;
        *(_QWORD *)&__dst[24] = v264;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v265;
        *(_WORD *)&__dst[38] = 2050;
        *(_QWORD *)&__dst[40] = v266;
        v833 = 2050;
        v834 = v267;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v261, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    v268 = *(_QWORD *)(a1 + 8);
    v269 = v803;
    if (*(char *)(a1 + 431) < 0)
      v269 = (_QWORD *)*v803;
    v270 = v801;
    if (*(char *)(a1 + 479) < 0)
      v270 = (std::string *)v801->__r_.__value_.__r.__words[0];
    v271 = v802;
    if (*(char *)(a1 + 455) < 0)
      v271 = (_QWORD *)*v802;
    v272 = *(_DWORD *)(a1 + 392);
    v273 = *(_QWORD *)(a1 + 488);
    v274 = *(_QWORD *)(a1 + 712);
    v275 = *(_BYTE *)(a1 + 480);
    *(_QWORD *)__dst = v269;
    *(_QWORD *)&__dst[8] = v270;
    *(_QWORD *)&__dst[16] = v271;
    *(_DWORD *)&__dst[24] = v272;
    *(_QWORD *)&__dst[32] = v273;
    *(_QWORD *)&__dst[40] = v274;
    LOBYTE(v833) = v275;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v268, a1, (__int128 *)__dst);
  }
  else
  {
    v254 = v238[84];
    if (!v254)
      goto LABEL_437;
LABEL_429:
    AGX::Heap<true>::allocateImpl(__dst, v816, v254, (_QWORD *)(a1 + 912));
    *(_DWORD *)(a1 + 920) += *(_DWORD *)&__dst[16];
    v255 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 792) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 808) = v255;
    *(_OWORD *)(a1 + 817) = *(_OWORD *)&__dst[25];
    v256 = *(_OWORD *)(a1 + 808);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a1 + 792);
    *(_OWORD *)(a1 + 640) = v256;
    *(_OWORD *)(a1 + 649) = *(_OWORD *)(a1 + 817);
    if (*v252)
    {
      v257 = *(_QWORD *)(a3 + 112);
      if (v257)
        v258 = *v252;
      else
        v258 = *(const void **)(a3 + 664);
      if (v257)
        v259 = v238 + 13;
      else
        v259 = (_QWORD *)(a3 + 664);
    }
    else
    {
      v259 = (_QWORD *)(a3 + 664);
      v258 = *(const void **)(a3 + 664);
    }
    memcpy(*(void **)(a1 + 800), v258, v259[1]);
    v260 = *(_QWORD *)(a1 + 808);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a1 + 792);
    *(_QWORD *)(a1 + 688) = v260;
    if (*(_BYTE *)(a1 + 480))
      goto LABEL_442;
LABEL_441:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 6681))
      goto LABEL_442;
  }
  v276 = *(_DWORD *)(a4 + 124);
  v277 = *(_DWORD *)(a4 + 132);
  v278 = *(_DWORD *)(a4 + 144);
  if (*(_BYTE *)(a4 + 184))
    v279 = *(_DWORD *)(a4 + 144);
  else
    v279 = 0;
  v280 = *(_DWORD *)(a4 + 140);
  if (!*(_QWORD *)(a4 + 168))
    v278 = 0;
  v281 = *(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128) + *(_DWORD *)(a4 + 136);
  v282 = v279 + *(_DWORD *)(a4 + 148) + v278 + *(_DWORD *)(a4 + 152) + ((v276 + v277 + v280 - v281 + 1) & 0xFFFFFFFE);
  v283 = *(_QWORD *)(a1 + 48);
  v284 = (*(_QWORD *)(a1 + 56) - v283) >> 2;
  if (v282 <= v284)
  {
    if (v282 < v284)
      *(_QWORD *)(a1 + 56) = v283 + 4 * v282;
  }
  else
  {
    std::vector<unsigned int>::__append(v221, v282 - v284);
    v276 = *(_DWORD *)(a4 + 124);
    v277 = *(_DWORD *)(a4 + 132);
    v280 = *(_DWORD *)(a4 + 140);
    v281 = *(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128) + *(_DWORD *)(a4 + 136);
  }
  *(_DWORD *)(a1 + 312) = v276 + v277 + v280 - v281;
  v285 = *v810;
  v286 = *(unsigned __int16 *)((char *)v810 - v285 + 16);
  v287 = *(unsigned int *)((char *)v810 + v286);
  v288 = *(unsigned int *)((char *)v810 + v286 + v287);
  if ((_DWORD)v288)
  {
    v289 = 4 * v288;
    v290 = v286 + v287;
    while (1)
    {
      v292 = *(unsigned int *)((char *)v810 + v290 + 4);
      v293 = (char *)v810 + v290 + v292;
      v294 = v292 - *((int *)v293 + 1);
      v295 = (char *)v810 + v290 + v294;
      v296 = *((unsigned __int16 *)v295 + 2);
      if (v296 < 7)
        break;
      v297 = *((unsigned __int16 *)v295 + 5);
      if (!v297 || (*(int *)((char *)v810 + v290 + v292 + v297 + 4) & 0x80000000) == 0)
      {
        if (v296 <= 8)
        {
          v301 = -*(_DWORD *)(a4 + 120);
        }
        else
        {
          if (*(_WORD *)((char *)v810 + v290 + v294 + 12))
            v298 = *(int *)((char *)v810 + v290 + v292 + *(unsigned __int16 *)((char *)v810 + v290 + v294 + 12) + 4);
          else
            v298 = 0;
          v301 = ((v298 >> 1) & 0x1FFFFFFF) - *(_DWORD *)(a4 + 120);
        }
LABEL_484:
        v302 = *(unsigned __int16 *)((char *)v810 + v290 + v294 + 8);
        if (*(_WORD *)((char *)v810 + v290 + v294 + 8))
          LODWORD(v302) = *((char *)v810 + v290 + v292 + v302 + 4);
        if (v296 >= 7 && (v303 = *(unsigned __int16 *)((char *)v810 + v290 + v294 + 10)) != 0)
        {
          v299 = *(int *)((char *)v810 + v290 + v292 + v303 + 4);
          if ((_DWORD)v302 != 6)
          {
            v300 = 0;
            goto LABEL_493;
          }
LABEL_491:
          v300 = 31;
        }
        else
        {
          v299 = 0;
          if ((_DWORD)v302 == 6)
            goto LABEL_491;
          v300 = 0;
        }
LABEL_493:
        v304 = (v299 & 0xFFFFF) + v300;
        if (v304 <= 8)
          v305 = 3 * v304;
        else
          v305 = 0;
        begin = v221->__begin_;
        v221->__begin_[v301] = v305;
        begin[v301 + 1] = v305 + 1;
        begin[v301 + 2] = v305 + 2;
        v307 = v292 - *((int *)v293 + 1);
        v308 = (char *)v810 + v290 + v307;
        if (*((unsigned __int16 *)v308 + 2) >= 0xBu)
        {
          v309 = *((unsigned __int16 *)v308 + 7);
          if (v309)
          {
            if (*((_BYTE *)v810 + v290 + v292 + v309 + 4))
            {
              v310 = *(unsigned __int16 *)((char *)v810 + v290 + v307 + 10);
              if (v310)
                v291 = *(int *)((char *)v810 + v290 + v292 + v310 + 4);
              else
                LOBYTE(v291) = 0;
              *(_QWORD *)(a1 + 376) |= 1 << v291;
            }
          }
        }
      }
      v290 += 4;
      v289 -= 4;
      if (!v289)
      {
        v285 = *v810;
        goto LABEL_502;
      }
    }
    v299 = 0;
    v300 = 0;
    v301 = -*(_DWORD *)(a4 + 120);
    if (v296 >= 5)
      goto LABEL_484;
    goto LABEL_493;
  }
LABEL_502:
  v311 = -v285;
  v312 = (char *)v810 + v311;
  if (*(_BYTE *)(a1 + 354))
  {
    v313 = *((unsigned __int16 *)v312 + 12);
    v314 = *(unsigned int *)((char *)v810 + v313);
    v315 = (unsigned int *)((char *)v810 + v313 + v314);
    v316 = *v315;
    if ((_DWORD)v316)
    {
      v317 = 0;
      v318 = 4 * v316;
      v319 = (char *)v810 + v313 + v314;
      while (1)
      {
        v320 = v315[v317 / 4 + 1];
        v321 = v320 - *(int *)((char *)&v315[v317 / 4 + 1] + v320);
        v322 = &v319[v317 + v321];
        v323 = *((unsigned __int16 *)v322 + 2);
        if (v323 >= 5)
        {
          v324 = *((unsigned __int16 *)v322 + 4);
          if (v324)
          {
            if (v319[v317 + 4 + v320 + v324] == 93)
            {
              if (v323 < 7)
                break;
              v325 = *(unsigned __int16 *)&v319[v317 + 10 + v321];
              if (!v325)
                break;
              v326 = *(_DWORD *)&v319[v317 + 4 + v320 + v325];
              if ((v326 & 0x80000000) == 0 && (v326 & 0xFFF00000) != 0x400000)
                break;
            }
          }
        }
        v317 += 4;
        if (v318 == v317)
          goto LABEL_514;
      }
      *(_QWORD *)(a1 + 376) |= *(_QWORD *)(a1 + 384);
    }
  }
LABEL_514:
  v327 = *((unsigned __int16 *)v312 + 10);
  v328 = *(unsigned int *)((char *)v810 + v327);
  v329 = *(unsigned int *)((char *)v810 + v327 + v328);
  if (!(_DWORD)v329)
    goto LABEL_531;
  v330 = 4 * v329;
  v331 = v327 + v328;
  while (2)
  {
    v333 = *(unsigned int *)((char *)v810 + v331 + 4);
    v334 = v333 - *(int *)((char *)v810 + v331 + v333 + 4);
    v335 = (char *)v810 + v331 + v334;
    v336 = *((unsigned __int16 *)v335 + 2);
    if (v336 < 7)
      goto LABEL_525;
    v337 = *((unsigned __int16 *)v335 + 5);
    if (!v337 || (*(int *)((char *)v810 + v331 + v333 + v337 + 4) & 0x80000000) == 0)
    {
      if (v336 >= 9 && *(_WORD *)((char *)v810 + v331 + v334 + 12))
      {
        v338 = *(int *)((char *)v810 + v331 + v333 + *(unsigned __int16 *)((char *)v810 + v331 + v334 + 12) + 4);
        goto LABEL_526;
      }
LABEL_525:
      v338 = 0;
      if (v336 < 7)
      {
        v332 = 0;
      }
      else
      {
LABEL_526:
        v339 = *(unsigned __int16 *)((char *)v810 + v331 + v334 + 10);
        if (v339)
          v340 = *(int *)((char *)v810 + v331 + v333 + v339 + 4);
        else
          v340 = 0;
        v332 = v340 & 0xFFFFF;
      }
      v221->__begin_[((v338 >> 1) & 0x1FFFFFFF)
                   + *(_DWORD *)(a4 + 124)
                   - (*(_DWORD *)(a4 + 120)
                    + *(_DWORD *)(a4 + 128))] = v332 + 24;
    }
    v331 += 4;
    v330 -= 4;
    if (v330)
      continue;
    break;
  }
  v311 = -(uint64_t)*v810;
LABEL_531:
  v341 = (unsigned int *)((char *)v810 + *(unsigned __int16 *)((char *)v810 + v311 + 12));
  v342 = *v341;
  v344 = (unsigned int *)((char *)v341 + v342 + 4);
  v343 = *(unsigned int *)((char *)v341 + v342);
  if ((_DWORD)v343)
  {
    v345 = &v344[v343];
    while (1)
    {
      v346 = (int *)((char *)v344 + *v344);
      v347 = (unsigned __int16 *)((char *)v346 - *v346);
      v348 = *v347;
      if (v348 < 7)
        break;
      if (!v347[3] || (*(int *)((char *)v346 + v347[3]) & 0x80000000) == 0)
      {
        if (v348 < 9)
        {
          LODWORD(v349) = 0;
          goto LABEL_544;
        }
        v349 = v347[4];
        if (v347[4])
        {
          LODWORD(v349) = *(int *)((char *)v346 + v349);
LABEL_544:
          v350 = v347[3];
          if (v350)
            LODWORD(v350) = *(int *)((char *)v346 + v350);
          goto LABEL_548;
        }
LABEL_543:
        if (v348 >= 7)
          goto LABEL_544;
        LODWORD(v350) = 0;
LABEL_548:
        v351 = ((v349 >> 1) & 0x1FFFFFFF)
             + *(_DWORD *)(a4 + 124)
             + *(_DWORD *)(a4 + 132)
             - (*(_DWORD *)(a4 + 120)
              + *(_DWORD *)(a4 + 128)
              + *(_DWORD *)(a4 + 136));
        v352 = v350 & 0xFFFFF;
        if (v352 == 49)
          v353 = 27;
        else
          v353 = 28;
        v221->__begin_[v351] = v353;
        v354 = (unsigned __int16 *)((char *)v346 - *v346);
        if (*v354 >= 0xBu)
        {
          v355 = v354[5];
          if (v355)
          {
            if (*((_BYTE *)v346 + v355))
              *v805 |= 1 << v352;
          }
        }
        if (*(_BYTE *)(a1 + 1019))
        {
          v356 = *v821;
          if (!*v821)
LABEL_1165:
            abort();
          v357 = (2 * v351) | 1;
          while (1)
          {
            while (1)
            {
              v358 = *((_DWORD *)v356 + 7);
              if (v352 >= v358)
                break;
              v356 = (uint64_t *)*v356;
              if (!v356)
                goto LABEL_1165;
            }
            if (v358 >= v352)
              break;
            v356 = (uint64_t *)v356[1];
            if (!v356)
              goto LABEL_1165;
          }
          v359 = *((_DWORD *)v356 + 8);
          v360 = v817;
          while (1)
          {
            v361 = *v360;
            v362 = v360;
            if (!*v360)
              break;
            while (1)
            {
              v360 = (uint64_t **)v361;
              v363 = *((_DWORD *)v361 + 7);
              if (v357 < v363)
                break;
              if (v363 >= v357)
              {
                v364 = v360;
                goto LABEL_534;
              }
              v361 = v360[1];
              if (!v361)
              {
                v362 = v360 + 1;
                goto LABEL_569;
              }
            }
          }
LABEL_569:
          v364 = operator new(0x28uLL);
          v364[7] = v357;
          v364[8] = 0;
          *(_QWORD *)v364 = 0;
          *((_QWORD *)v364 + 1) = 0;
          *((_QWORD *)v364 + 2) = v360;
          *v362 = (uint64_t *)v364;
          v365 = **(_QWORD **)(a1 + 264);
          v366 = (uint64_t *)v364;
          if (v365)
          {
            *(_QWORD *)(a1 + 264) = v365;
            v366 = *v362;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v366);
          ++*(_QWORD *)(a1 + 280);
LABEL_534:
          v364[8] = v359;
          v221 = v819;
        }
      }
      if (++v344 == v345)
        goto LABEL_572;
    }
    LODWORD(v349) = 0;
    goto LABEL_543;
  }
LABEL_572:
  v367 = *(_QWORD *)(a4 + 160);
  if (v367)
  {
    v368 = *(_DWORD *)(a4 + 144);
    if (*(_BYTE *)(a4 + 184))
    {
      if (!v368)
      {
        v376 = *(_QWORD *)(a4 + 168);
        goto LABEL_588;
      }
      v369 = (*(_DWORD *)(a4 + 124)
            + *(_DWORD *)(a4 + 132)
            + *(_DWORD *)(a4 + 140)
            - (*(_DWORD *)(a4 + 120)
             + *(_DWORD *)(a4 + 128)
             + *(_DWORD *)(a4 + 136))
            + 1) & 0xFFFFFFFE;
      v370 = v221->__begin_;
      v371 = *(_QWORD *)(a4 + 160);
      do
      {
        v372 = __clz(__rbit64(v371));
        v373 = 1 << v372;
        if (v372 <= 8)
          v374 = 3 * v372;
        else
          v374 = 0;
        v370[v369] = v374;
        v370[v369 + 1] = v374 + 1;
        v370[v369 + 2] = v374 + 2;
        v369 += 4;
        v371 &= ~v373;
      }
      while (v371);
      v368 = *(_DWORD *)(a4 + 144);
      v375 = v368;
      v376 = *(_QWORD *)(a4 + 168);
      if (!v376)
      {
LABEL_588:
        *(_QWORD *)(a1 + 376) |= v376;
        goto LABEL_589;
      }
    }
    else
    {
      v375 = 0;
      v376 = *(_QWORD *)(a4 + 168);
      if (!v376)
        goto LABEL_588;
    }
    if (v368)
    {
      v377 = ((*(_DWORD *)(a4 + 140)
             + *(_DWORD *)(a4 + 132)
             - (*(_DWORD *)(a4 + 136)
              + *(_DWORD *)(a4 + 128)
              + *(_DWORD *)(a4 + 120))
             + *(_DWORD *)(a4 + 124)
             + 1) & 0xFFFFFFFE)
           + v375;
      v378 = v221->__begin_;
      do
      {
        v378[v377] = 0;
        v378[v377 + 1] = 1;
        v378[v377 + 2] = 2;
        v377 += 4;
        v367 &= v367 - 1;
      }
      while (v367);
    }
    goto LABEL_588;
  }
LABEL_589:
  if (*(_DWORD *)(a4 + 148))
  {
    v379 = *(_QWORD *)(a4 + 176);
    if (v379)
    {
      if (*(_BYTE *)(a4 + 184))
        v380 = *(_DWORD *)(a4 + 144);
      else
        v380 = 0;
      if (*(_QWORD *)(a4 + 168))
        v381 = *(_DWORD *)(a4 + 144);
      else
        v381 = 0;
      v382 = v380
           + v381
           + ((*(_DWORD *)(a4 + 124)
             + *(_DWORD *)(a4 + 132)
             + *(_DWORD *)(a4 + 140)
             - (*(_DWORD *)(a4 + 120)
              + *(_DWORD *)(a4 + 128)
              + *(_DWORD *)(a4 + 136))
             + 1) & 0xFFFFFFFE);
      v383 = v221->__begin_;
      do
      {
        v384 = __clz(__rbit64(v379));
        v383[v382++] = v384 + 24;
        v379 &= ~(1 << v384);
      }
      while (v379);
    }
  }
  v385 = *v810;
  if (*(_BYTE *)(a4 + 427))
  {
    v386 = (unsigned __int16 *)((char *)v810 - v385);
    if (*v386 < 0x67u)
    {
      v387 = 0;
    }
    else
    {
      v387 = v386[51];
      if (v387)
        v387 = *(_QWORD *)((char *)v810 + v387);
    }
    v388 = 128 - 2 * __clz(v387);
    if (*(_DWORD *)(a1 + 208) > v388)
      v388 = *(_DWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 208) = v388;
    v389 = (unsigned __int16 *)((char *)v810 - *v810);
    if (*v389 < 0x17u)
    {
      LODWORD(v390) = 0;
    }
    else
    {
      v390 = v389[11];
      if (v390)
        v390 = ((unint64_t)*(unsigned int *)((char *)v810 + v390) + 3) >> 2;
    }
    *(_DWORD *)(a1 + 200) = v390;
    *(_DWORD *)(a1 + 204) = 56;
    v385 = *v810;
  }
  v391 = (unsigned __int16 *)((char *)v810 - v385);
  if (*v391 >= 0x17u && (v392 = v391[11]) != 0)
  {
    v393 = ((unint64_t)*(unsigned int *)((char *)v810 + v392) + 3) >> 2;
    v394 = (_QWORD *)(a1 + 80);
    v395 = *(_QWORD *)(a1 + 72);
    v396 = (*(_QWORD *)(a1 + 80) - v395) >> 2;
    if (v393 > v396)
    {
      std::vector<unsigned int>::__append(v794, v393 - v396);
      goto LABEL_618;
    }
  }
  else
  {
    v393 = 0;
    v394 = (_QWORD *)(a1 + 80);
    v395 = *(_QWORD *)(a1 + 72);
    v396 = (*(_QWORD *)(a1 + 80) - v395) >> 2;
  }
  if (v396 > v393)
    *v394 = v395 + 4 * v393;
LABEL_618:
  if (v798 != (_QWORD *)(a4 + 192))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v798, *(char **)(a4 + 192), *(char **)(a4 + 200), (uint64_t)(*(_QWORD *)(a4 + 200) - *(_QWORD *)(a4 + 192)) >> 2);
  if (v797 != (_QWORD *)(a4 + 216))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v797, *(char **)(a4 + 216), *(char **)(a4 + 224), (uint64_t)(*(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216)) >> 2);
  if (v796 != (_QWORD *)(a4 + 296))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v796, *(char **)(a4 + 296), *(char **)(a4 + 304), (uint64_t)(*(_QWORD *)(a4 + 304) - *(_QWORD *)(a4 + 296)) >> 1);
  if (v795 != (_QWORD *)(a4 + 344))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v795, *(char **)(a4 + 344), *(char **)(a4 + 352), (uint64_t)(*(_QWORD *)(a4 + 352) - *(_QWORD *)(a4 + 344)) >> 1);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a4 + 392);
  *(_BYTE *)(a1 + 356) = *(_QWORD *)(a4 + 160) != 0;
  *(_BYTE *)(a1 + 357) = *(_QWORD *)(a4 + 148) != 0;
  v397 = *(unsigned __int16 *)((char *)v810 - *v810 + 24);
  v398 = *(unsigned int *)((char *)v810 + v397);
  v399 = (unsigned int *)((char *)v810 + v397 + v398);
  v400 = *v399;
  if ((_DWORD)v400)
  {
    v401 = 0;
    v402 = 4 * v400;
    v403 = (char *)v810 + v397 + v398;
    do
    {
      v404 = v399[v401 / 4 + 1];
      v405 = v404 - *(int *)((char *)&v399[v401 / 4 + 1] + v404);
      v406 = &v403[v401 + v405];
      v407 = *((unsigned __int16 *)v406 + 2);
      if (v407 >= 5)
      {
        v408 = *((unsigned __int16 *)v406 + 4);
        if (v408)
        {
          if (v407 >= 7 && v403[v401 + 4 + v404 + v408] == 139)
          {
            if (*(_WORD *)&v403[v401 + 10 + v405])
            {
              v409 = *(_DWORD *)&v403[v401 + 4 + v404 + *(unsigned __int16 *)&v403[v401 + 10 + v405]];
              if (v407 >= 0xB)
                goto LABEL_637;
            }
            else
            {
              LOBYTE(v409) = 0;
              if (v407 >= 0xB)
              {
LABEL_637:
                v410 = *(unsigned __int16 *)&v403[v401 + 14 + v405];
                if (v410 && v403[v401 + 4 + v404 + v410])
                  *v805 |= 1 << v409;
              }
            }
          }
        }
      }
      v401 += 4;
    }
    while (v402 != v401);
  }
  v411 = (unsigned __int16 *)((char *)v809 - *v809);
  if (*v411 >= 0xDu)
  {
    v412 = v411[6];
    if (v412)
    {
      v413 = (int *)((char *)v809 + v412 + *(unsigned int *)((char *)v809 + v412));
      v414 = *v413;
      v415 = *(_BYTE **)(a1 + 944);
      if (v414 > (uint64_t)(*(_QWORD *)(a1 + 960) - (_QWORD)v415) >> 4)
      {
        v416 = *(_BYTE **)(a1 + 952);
        v417 = (char *)operator new(16 * v414);
        v418 = &v417[(v416 - v415) & 0xFFFFFFFFFFFFFFF0];
        v419 = v418;
        if (v416 != v415)
        {
          v420 = &v417[(v416 - v415) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v419 = v420 - 16;
            *((_OWORD *)v420 - 1) = *((_OWORD *)v416 - 1);
            v416 -= 16;
            v420 -= 16;
          }
          while (v416 != v415);
        }
        *(_QWORD *)(a1 + 944) = v419;
        *(_QWORD *)(a1 + 952) = v418;
        *(_QWORD *)(a1 + 960) = &v417[16 * v414];
        if (v415)
          operator delete(v415);
      }
      v421 = (unsigned __int16 *)((char *)v809 - *v809);
      if (*v421 >= 0x41u && (v422 = v421[32]) != 0)
      {
        v423 = (int *)((char *)v809 + v422 + *(unsigned int *)((char *)v809 + v422));
        if (!*v413)
          goto LABEL_677;
      }
      else
      {
        v423 = 0;
        if (!*v413)
          goto LABEL_677;
      }
      v424 = 0;
      v811 = v423 + 1;
      v425 = v413 + 1;
      v822 = v423;
      v814 = v413 + 1;
      do
      {
        if (v423 && *v423)
          v427 = *(_QWORD *)&v811[2 * v424];
        else
          v427 = 0;
        v428 = *(_QWORD *)&v425[2 * v424];
        v429 = *(_QWORD **)(a1 + 952);
        v430 = *(_QWORD *)(a1 + 960);
        if ((unint64_t)v429 < v430)
        {
          *v429 = v428;
          v429[1] = v427;
          v426 = v429 + 2;
        }
        else
        {
          v431 = v413;
          v432 = (_QWORD *)*v808;
          v433 = ((uint64_t)v429 - *v808) >> 4;
          v434 = v433 + 1;
          if ((unint64_t)(v433 + 1) >> 60)
            abort();
          v435 = v430 - (_QWORD)v432;
          if (v435 >> 3 > v434)
            v434 = v435 >> 3;
          if ((unint64_t)v435 >= 0x7FFFFFFFFFFFFFF0)
            v436 = 0xFFFFFFFFFFFFFFFLL;
          else
            v436 = v434;
          if (v436)
          {
            if (v436 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v437 = (char *)operator new(16 * v436);
          }
          else
          {
            v437 = 0;
          }
          v438 = &v437[16 * v433];
          *(_QWORD *)v438 = v428;
          *((_QWORD *)v438 + 1) = v427;
          v439 = v438;
          v413 = v431;
          if (v429 != v432)
          {
            do
            {
              *((_OWORD *)v439 - 1) = *((_OWORD *)v429 - 1);
              v439 -= 16;
              v429 -= 2;
            }
            while (v429 != v432);
            v429 = (_QWORD *)*v808;
          }
          *(_QWORD *)(a1 + 944) = v439;
          v426 = v438 + 16;
          *(_QWORD *)(a1 + 952) = v438 + 16;
          *(_QWORD *)(a1 + 960) = &v437[16 * v436];
          if (v429)
            operator delete(v429);
          v423 = v822;
          v425 = v814;
        }
        *(_QWORD *)(a1 + 952) = v426;
        ++v424;
      }
      while (v424 < *v413);
    }
  }
LABEL_677:
  *(_BYTE *)(a1 + 844) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_250401900;
  bzero((void *)(a1 + 1224), 0x2E9uLL);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_DWORD *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_QWORD *)(a1 + 2792) = a2;
  *(_QWORD *)(a1 + 2800) = 0;
  if (*v806)
  {
    v440 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v440 = v806;
  }
  else
  {
    v440 = (unsigned int **)(a3 + 784);
  }
  v441 = 0;
  if (*v440 && v440[1])
    v441 = (int *)((char *)*v440 + **v440);
  v442 = (unsigned __int16 *)((char *)v441 - *v441);
  if (*v442 >= 5u && (v443 = v442[2]) != 0)
    v444 = (unsigned int *)((char *)v441 + v443 + *(unsigned int *)((char *)v441 + v443));
  else
    v444 = 0;
  if (*v800)
  {
    v445 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v445 = v800;
  }
  else
  {
    v445 = (unsigned int **)(a3 + 1024);
  }
  v446 = 0;
  if (*v445 && v445[1])
    v446 = (int *)((char *)*v445 + **v445);
  v447 = (unsigned __int16 *)((char *)v446 - *v446);
  if (*v447 >= 5u && (v448 = v447[2]) != 0)
    v449 = (int *)((char *)v446 + v448 + *(unsigned int *)((char *)v446 + v448));
  else
    v449 = 0;
  v450 = (unsigned __int16 *)((char *)v449 - *v449);
  if (*v450 < 7u)
  {
    LODWORD(v451) = 0;
  }
  else
  {
    v451 = v450[3];
    if (v451)
      LODWORD(v451) = *(int *)((char *)v449 + v451);
  }
  *(_DWORD *)(a1 + 2736) = v451;
  v452 = (unsigned __int16 *)((char *)v449 - *v449);
  if (*v452 >= 0x13u && (v453 = v452[9]) != 0)
    v454 = (char *)v449 + v453 + *(unsigned int *)((char *)v449 + v453) + 4;
  else
    v454 = "";
  MEMORY[0x234927D28](a1 + 2744, v454);
  v455 = (unsigned __int16 *)((char *)v444 - (int)*v444);
  v456 = *(unsigned int *)((char *)v444 + v455[15] + *(unsigned int *)((char *)v444 + v455[15]));
  v457 = v455[13];
  if (v455[13])
    LODWORD(v457) = *(unsigned int *)((char *)v444 + v457);
  v458 = v457;
  if (*(_BYTE *)(a4 + 392))
    v459 = ((*(_QWORD *)(a4 + 224) + *(_QWORD *)(a4 + 200) - (*(_QWORD *)(a4 + 216) + *(_QWORD *)(a4 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
         + ((*(_QWORD *)(a4 + 376) + *(_QWORD *)(a4 + 328) - (*(_QWORD *)(a4 + 368) + *(_QWORD *)(a4 + 320))) & 0xFFFFFFFFFFFFFFFELL)
         + 8;
  else
    v459 = 0;
  v460 = v455[4];
  v461 = *(unsigned int *)((char *)v444 + v460);
  v462 = (unsigned int *)((char *)v444 + v460 + v461);
  v463 = *v462;
  if ((_DWORD)v463)
  {
    v464 = 0;
    v465 = 4 * v463;
    v466 = (char *)v444 + v460 + v461;
    while (1)
    {
      v467 = v462[v464 / 4 + 1];
      v468 = &v466[v464 + v467 - *(int *)((char *)&v462[v464 / 4 + 1] + v467)];
      if (*((unsigned __int16 *)v468 + 2) >= 5u)
      {
        v469 = *((unsigned __int16 *)v468 + 4);
        if (v469)
        {
          if (v466[v464 + 4 + v467 + v469] == 9)
            break;
        }
      }
      v464 += 4;
      if (v465 == v464)
        goto LABEL_723;
    }
    v470 = 0;
    v456 += 8;
  }
  else
  {
LABEL_723:
    v470 = 1;
  }
  v471 = (v456 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v458)
    v472 = (v456 + 7) & 0x3FFFFFFF8;
  else
    v472 = v456;
  if (v459 + v458 + v472)
  {
    v823 = v459;
    AGX::Heap<true>::allocateImpl(__dst, v816, v459 + v458 + v472, (_QWORD *)(a1 + 2144));
    *(_DWORD *)(a1 + 2804) += *(_DWORD *)&__dst[16];
    v473 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 2416) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 2432) = v473;
    *(_OWORD *)(a1 + 2441) = *(_OWORD *)&__dst[25];
    v474 = *(_QWORD **)(a1 + 2424);
    v475 = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2008) = 0;
    if (v456)
    {
      *(_QWORD *)(a1 + 2064) = v475;
      if ((v470 & 1) != 0)
      {
        v476 = v474;
      }
      else
      {
        *(_QWORD *)(a1 + 2072) = v475;
        *(_QWORD *)(a1 + 2064) = v475 + 8;
        *v474 = v475 + 8;
        v476 = v474 + 1;
      }
      v477 = (int)*v444;
      v478 = *(unsigned __int16 *)((char *)v444 - v477 + 30);
      if (*(_WORD *)((char *)v444 - v477 + 30))
      {
        v479 = *(unsigned int *)((char *)v444 + v478);
        v480 = (char *)v444 + v478 + v479;
      }
      else
      {
        v478 = 0;
        v480 = 0;
        v479 = *v444;
      }
      memcpy(v476, v480 + 4, *(unsigned int *)((char *)v444 + v478 + v479));
      *(_QWORD *)(a1 + 2664) = v476;
      *(_QWORD *)(a1 + 2656) = *(_QWORD *)(a1 + 2064);
    }
    if ((_DWORD)v458)
    {
      *(_QWORD *)(a1 + 2080) = v475 + v471;
      *(_QWORD *)(a1 + 1232) = (char *)v474 + v471;
    }
    if (v823)
    {
      *(_QWORD *)(a1 + 2008) = v472 + v458 + v475;
      v481 = (_WORD *)((char *)v474 + v472 + v458);
      v482 = *(const void **)(a4 + 192);
      v483 = *(_QWORD *)(a4 + 200) - (_QWORD)v482;
      *v481 = v483 >> 2;
      v481[1] = (*(_DWORD *)(a4 + 224) - *(_DWORD *)(a4 + 216)) >> 2;
      v481[2] = (*(_DWORD *)(a4 + 328) - *(_DWORD *)(a4 + 320)) >> 1;
      v481[3] = (*(_DWORD *)(a4 + 376) - *(_DWORD *)(a4 + 368)) >> 1;
      memcpy(v481 + 4, v482, v483);
      v484 = (char *)v481 + *(_QWORD *)(a4 + 200) - *(_QWORD *)(a4 + 192) + 8;
      memcpy(v484, *(const void **)(a4 + 216), *(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216));
      v485 = &v484[*(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216)];
      memcpy(v485, *(const void **)(a4 + 320), *(_QWORD *)(a4 + 328) - *(_QWORD *)(a4 + 320));
      memcpy(&v485[*(_QWORD *)(a4 + 328) - *(_QWORD *)(a4 + 320)], *(const void **)(a4 + 368), *(_QWORD *)(a4 + 376) - *(_QWORD *)(a4 + 368));
      if (v481[2])
      {
        if (v481[3])
          goto LABEL_741;
LABEL_1153:
        v481[3] = v481[1];
      }
      else
      {
        v481[2] = *v481;
        if (!v481[3])
          goto LABEL_1153;
      }
    }
  }
LABEL_741:
  v486 = (uint64_t *)(a1 + 1264);
  v487 = (unsigned __int16 *)((char *)v444 - (int)*v444);
  v488 = v487[8];
  v489 = *(unsigned int *)((char *)v444 + v488);
  v490 = (unsigned int *)((char *)v444 + v488 + v489);
  v491 = *v490;
  if ((_DWORD)v491)
  {
    v492 = 0;
    v493 = 4 * v491;
    v494 = (char *)v444 + v488 + v489;
    do
    {
      v498 = v490[v492 / 4 + 1];
      v499 = &v494[v492 + v498 - *(int *)((char *)&v490[v492 / 4 + 1] + v498)];
      if (*((unsigned __int16 *)v499 + 2) >= 7u && (v500 = *((unsigned __int16 *)v499 + 5)) != 0)
      {
        v501 = *(unsigned int *)&v494[v492 + 4 + v498 + v500];
        v495 = v501;
        if ((v501 & 0x80000000) != 0)
        {
          v496 = 1 << (v501 >> 20);
          v497 = (_QWORD *)(a1 + 1264);
          goto LABEL_745;
        }
      }
      else
      {
        v495 = 0;
      }
      v496 = 1 << v495;
      *(_QWORD *)(a1 + 1248) |= v496;
      v497 = (_QWORD *)(a1 + 1272);
LABEL_745:
      *v497 |= v496;
      v492 += 4;
    }
    while (v493 != v492);
  }
  v502 = v487[10];
  v503 = *(unsigned int *)((char *)v444 + v502);
  v504 = (unsigned int *)((char *)v444 + v502 + v503);
  v505 = *v504;
  if ((_DWORD)v505)
  {
    v506 = 0;
    v507 = 4 * v505;
    v508 = (char *)v444 + v502 + v503;
    do
    {
      v512 = v504[v506 / 4 + 1];
      v513 = &v508[v506 + v512 - *(int *)((char *)&v504[v506 / 4 + 1] + v512)];
      if (*((unsigned __int16 *)v513 + 2) >= 7u && (v514 = *((unsigned __int16 *)v513 + 5)) != 0)
      {
        v515 = *(unsigned int *)&v508[v506 + 4 + v512 + v514];
        v509 = v515;
        if ((v515 & 0x80000000) != 0)
        {
          v510 = 1 << (v515 >> 20);
          v511 = (_QWORD *)(a1 + 1264);
          goto LABEL_754;
        }
      }
      else
      {
        v509 = 0;
      }
      v510 = 1 << v509;
      *(_QWORD *)(a1 + 1256) |= v510;
      v511 = (_QWORD *)(a1 + 1280);
LABEL_754:
      *v511 |= v510;
      v506 += 4;
    }
    while (v507 != v506);
  }
  v516 = v487[6];
  v517 = *(unsigned int *)((char *)v444 + v516);
  v518 = (unsigned int *)((char *)v444 + v516 + v517);
  v519 = *v518;
  if (!(_DWORD)v519)
    goto LABEL_769;
  v520 = 0;
  v521 = 4 * v519;
  v522 = *v486;
  v523 = (char *)v444 + v516 + v517;
  while (2)
  {
    v526 = v518[v520 / 4 + 1];
    v527 = &v523[v520 + v526 - *(int *)((char *)&v518[v520 / 4 + 1] + v526)];
    if (*((unsigned __int16 *)v527 + 2) < 7u || (v528 = *((unsigned __int16 *)v527 + 5)) == 0)
    {
      v524 = 0;
LABEL_762:
      v525 = 1 << v524;
      *(_QWORD *)(a1 + 1240) |= v525;
      goto LABEL_763;
    }
    v529 = *(unsigned int *)&v523[v520 + 4 + v526 + v528];
    v524 = v529;
    if ((v529 & 0x80000000) == 0)
      goto LABEL_762;
    v525 = 1 << (v529 >> 20);
LABEL_763:
    v522 |= v525;
    v520 += 4;
    if (v521 != v520)
      continue;
    break;
  }
  *v486 = v522;
LABEL_769:
  v530 = v487[4];
  v531 = *(unsigned int *)((char *)v444 + v530);
  v532 = (unsigned int *)((char *)v444 + v530 + v531);
  v533 = *v532;
  if ((_DWORD)v533)
  {
    v534 = 0;
    v535 = 4 * v533;
    v536 = *(_QWORD *)(a4 + 416);
    v537 = (char *)v444 + v530 + v531;
    while (2)
    {
      v540 = v532[v534 / 4 + 1];
      v541 = v540 - *(int *)((char *)&v532[v534 / 4 + 1] + v540);
      v542 = &v537[v534 + v541];
      v543 = *((unsigned __int16 *)v542 + 2);
      if (v543 < 5)
        goto LABEL_774;
      v544 = *((unsigned __int16 *)v542 + 4);
      if (!v544 || v537[v534 + 4 + v540 + v544] != 5)
        goto LABEL_774;
      if (v543 >= 7 && (v545 = *(unsigned __int16 *)&v537[v534 + 10 + v541]) != 0)
      {
        v546 = *(unsigned int *)&v537[v534 + 4 + v540 + v545];
        v538 = v546;
        if ((v546 & 0x80000000) != 0)
        {
          v539 = 1 << (v546 >> 20);
          if ((v536 & v539) != 0)
          {
            *(_BYTE *)(a1 + 1968) = 1;
            *(_QWORD *)(a1 + 1376) |= v539;
          }
LABEL_773:
          *v486 |= v539;
LABEL_774:
          v534 += 4;
          if (v535 == v534)
            goto LABEL_783;
          continue;
        }
      }
      else
      {
        v538 = 0;
      }
      break;
    }
    v539 = 1 << v538;
    goto LABEL_773;
  }
LABEL_783:
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(a4 + 400);
  *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a4 + 408);
  *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a4 + 408) | *(_QWORD *)(a4 + 400);
  if (*v806)
  {
    if (*(_QWORD *)(a3 + 232))
      v547 = v806;
    else
      v547 = (unsigned int **)(a3 + 784);
  }
  else
  {
    v547 = (unsigned int **)(a3 + 784);
  }
  v549 = *v547;
  v548 = v547[1];
  if (v549)
    v550 = v548 == 0;
  else
    v550 = 1;
  if (v550)
    v551 = 0;
  else
    v551 = (int *)((char *)v549 + *v549);
  v552 = (unsigned __int16 *)((char *)v551 - *v551);
  if (*v552 >= 5u && (v553 = v552[2]) != 0)
    v554 = (int *)((char *)v551 + v553 + *(unsigned int *)((char *)v551 + v553));
  else
    v554 = 0;
  v555 = (unsigned __int16 *)((char *)v554 - *v554);
  if (*v555 >= 9u && (v556 = v555[4]) != 0)
    v557 = (unsigned int *)((char *)v554 + v556 + *(unsigned int *)((char *)v554 + v556));
  else
    v557 = 0;
  v820 = *(_QWORD *)(a1 + 2072);
  v824 = *(_QWORD *)(a1 + 2064);
  v818 = *(_QWORD *)(a1 + 2080);
  bzero(__dst, 0x248uLL);
  bzero((void *)(a1 + 1392), 0x240uLL);
  v558 = v557 + 1;
  v559 = *v557;
  if (!(_DWORD)v559)
  {
    v560 = 0;
    goto LABEL_1009;
  }
  v560 = 0;
  v561 = &v558[v559];
  v562 = a1 + 4;
  while (2)
  {
    v566 = (int *)((char *)v558 + *v558);
    v567 = (unsigned __int16 *)((char *)v566 - *v566);
    v568 = *v567;
    if (v568 < 5)
    {
      LODWORD(v569) = 0;
      goto LABEL_815;
    }
    if (v567[2])
    {
      switch(*((_BYTE *)v566 + v567[2]))
      {
        case 0:
          goto LABEL_811;
        case 1:
          if (v568 < 0xD)
          {
            LODWORD(v593) = 0;
            v598 = 0;
            if (v568 < 9)
              goto LABEL_917;
          }
          else
          {
            v593 = v567[6];
            if (v567[6])
              LODWORD(v593) = *(int *)((char *)v566 + v593);
          }
          v599 = v567[4];
          if (v599)
            v598 = *(int *)((char *)v566 + v599);
          else
            v598 = 0;
LABEL_917:
          v630 = v598 + v593;
          if (v593 >= v598 + (int)v593)
            goto LABEL_807;
          v631 = (v630 >> 1) & 0x1FFFFFFF;
          v632 = v560;
          while (1)
          {
            v637 = (v593 >> 1) & 0x1FFFFFFF;
            v638 = *(_QWORD *)(a4 + 24);
            v639 = *(_DWORD *)(v638 + 4 * v637);
            if (v637 + 1 >= v631)
            {
              v640 = 1;
            }
            else
            {
              v640 = 1;
              while (1)
              {
                v641 = *(_DWORD *)(v638 + 4 * (v637 + v640));
                if (v641 != -1 && v641 != ((v639 + v640) & 0xFFFFF | v639 & 0xFFF00000))
                  break;
                ++v640;
                if (!(v637 - v631 + v640))
                {
                  v640 = v631 - v637;
                  break;
                }
              }
            }
            v643 = v639 & 0x7FF00000;
            v644 = a1 + 8 * v632;
            if (v639 < 0)
            {
              if (v643 == 51380224)
                v647 = 27;
              else
                v647 = 28;
              *(_DWORD *)(v644 + 1408) = v647;
              v646 = 8 * (v639 & 0xFFFFF);
            }
            else
            {
              v645 = (_DWORD *)(v644 + 1408);
              if (v643)
              {
                *v645 = 0;
                v646 = 8 * (v639 & 0xFFFFF);
              }
              else
              {
                *v645 = 25;
                v646 = 8 * ((v639 & 0xFFFFF) - *(_DWORD *)(a4 + 120));
              }
            }
            *(_DWORD *)(v562 + 8 * v632 + 1408) = v646;
            v648 = (unsigned __int16 *)((char *)v566 - *v566);
            v649 = *v648;
            if (v649 < 0xB)
            {
              LODWORD(v633) = 0;
            }
            else
            {
              v633 = v648[5];
              if (v648[5])
                LODWORD(v633) = *(int *)((char *)v566 + v633);
              if (v649 >= 0xD)
              {
                v634 = v648[6];
                if (v634)
                  LODWORD(v634) = *(int *)((char *)v566 + v634);
                goto LABEL_921;
              }
            }
            LODWORD(v634) = 0;
LABEL_921:
            v635 = (2 * v640);
            v560 = v632 + 1;
            v636 = &__dst[16 * v632];
            *(_QWORD *)v636 = v635;
            *((_DWORD *)v636 + 2) = v633 + v593 - v634;
            LODWORD(v593) = v593 + v635;
            v632 = v560;
            if (v593 >= v630)
              goto LABEL_807;
          }
        case 2:
          if (v568 < 0xD)
          {
            LODWORD(v591) = 0;
            v596 = 0;
            if (v568 < 9)
              goto LABEL_887;
          }
          else
          {
            v591 = v567[6];
            if (v567[6])
              LODWORD(v591) = *(int *)((char *)v566 + v591);
          }
          v597 = v567[4];
          if (v597)
            v596 = *(int *)((char *)v566 + v597);
          else
            v596 = 0;
LABEL_887:
          v610 = v596 + v591;
          if (v591 >= v596 + (int)v591)
            goto LABEL_807;
          v611 = (v610 >> 1) & 0x1FFFFFFF;
          v612 = v560;
          while (1)
          {
            v617 = (v591 >> 1) & 0x1FFFFFFF;
            v618 = *(_QWORD *)(a4 + 48);
            v619 = *(_DWORD *)(v618 + 4 * v617);
            if (v617 + 1 >= v611)
            {
              v620 = 1;
            }
            else
            {
              v620 = 1;
              while (1)
              {
                v621 = *(_DWORD *)(v618 + 4 * (v617 + v620));
                if (v621 != -1 && v621 != ((v619 + v620) & 0xFFFFF | v619 & 0xFFF00000))
                  break;
                ++v620;
                if (!(v617 - v611 + v620))
                {
                  v620 = v611 - v617;
                  break;
                }
              }
            }
            v623 = v619 & 0x7FF00000;
            v624 = a1 + 8 * v612;
            if (v619 < 0)
            {
              if (v623 == 51380224)
                v627 = 27;
              else
                v627 = 28;
              *(_DWORD *)(v624 + 1408) = v627;
              v626 = 8 * (v619 & 0xFFFFF);
            }
            else
            {
              v625 = (_DWORD *)(v624 + 1408);
              if (v623)
              {
                *v625 = 0;
                v626 = 8 * (v619 & 0xFFFFF);
              }
              else
              {
                *v625 = 25;
                v626 = 8 * (*(_DWORD *)(a4 + 124) + (v619 & 0xFFFFF) - (*(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128)));
              }
            }
            *(_DWORD *)(v562 + 8 * v612 + 1408) = v626;
            v628 = (unsigned __int16 *)((char *)v566 - *v566);
            v629 = *v628;
            if (v629 < 0xB)
            {
              LODWORD(v613) = 0;
            }
            else
            {
              v613 = v628[5];
              if (v628[5])
                LODWORD(v613) = *(int *)((char *)v566 + v613);
              if (v629 >= 0xD)
              {
                v614 = v628[6];
                if (v614)
                  LODWORD(v614) = *(int *)((char *)v566 + v614);
                goto LABEL_891;
              }
            }
            LODWORD(v614) = 0;
LABEL_891:
            v615 = (2 * v620);
            v560 = v612 + 1;
            v616 = &__dst[16 * v612];
            *(_QWORD *)v616 = v615;
            *((_DWORD *)v616 + 2) = v613 + v591 - v614;
            LODWORD(v591) = v591 + v615;
            v612 = v560;
            if (v591 >= v610)
              goto LABEL_807;
          }
        case 3:
          if (v568 < 0xD)
          {
            LODWORD(v594) = 0;
            v600 = 0;
            if (v568 < 9)
              goto LABEL_947;
          }
          else
          {
            v594 = v567[6];
            if (v567[6])
              LODWORD(v594) = *(int *)((char *)v566 + v594);
          }
          v601 = v567[4];
          if (v601)
            v600 = *(int *)((char *)v566 + v601);
          else
            v600 = 0;
LABEL_947:
          v650 = v600 + v594;
          if (v594 >= v600 + (int)v594)
            goto LABEL_807;
          v651 = (v650 >> 1) & 0x1FFFFFFF;
          v652 = v560;
          break;
        case 5:
          if (v568 < 7)
          {
            LODWORD(v595) = 0;
LABEL_872:
            if ((v595 & 0xFFFFF) == 0x31)
              v602 = 27;
            else
              v602 = 28;
            v603 = a1 + 8 * v560;
            *(_DWORD *)(v603 + 1408) = v602;
            v604 = (unsigned __int16 *)((char *)v566 - *v566);
            if (*v604 >= 0xDu && (v605 = v604[6]) != 0)
              v606 = *(int *)((char *)v566 + v605);
            else
              v606 = 0;
            v592 = v560;
            *(_DWORD *)(v603 + 1412) = 4 * v606;
LABEL_880:
            v607 = (unsigned __int16 *)((char *)v566 - *v566);
            v608 = *v607;
            if (v608 < 9)
            {
              v563 = 0;
            }
            else
            {
              v563 = v607[4];
              if (v607[4])
                v563 = *(unsigned int *)((char *)v566 + v563);
              if (v608 >= 0xB)
              {
                v609 = v607[5];
                if (v609)
                {
                  v564 = *(int *)((char *)v566 + v609);
                  goto LABEL_806;
                }
              }
            }
            v564 = 0;
LABEL_806:
            v565 = &__dst[16 * v592];
            *(_QWORD *)v565 = v563;
            ++v560;
            *((_DWORD *)v565 + 2) = v564;
            goto LABEL_807;
          }
          v595 = v567[3];
          if (!v567[3])
            goto LABEL_872;
          LODWORD(v595) = *(int *)((char *)v566 + v595);
          if ((v595 & 0x80000000) == 0)
            goto LABEL_872;
          goto LABEL_807;
        case 8:
          v592 = v560;
          *(_QWORD *)(a1 + 8 * v560 + 1408) = 0;
          goto LABEL_880;
        default:
          goto LABEL_807;
      }
      while (1)
      {
        v657 = (v594 >> 1) & 0x1FFFFFFF;
        v658 = *(_QWORD *)(a4 + 72);
        v659 = *(_DWORD *)(v658 + 4 * v657);
        if (v657 + 1 >= v651)
        {
          v660 = 1;
          v663 = v659 & 0x7FF00000;
          if ((v659 & 0x80000000) == 0)
            goto LABEL_962;
        }
        else
        {
          v660 = 1;
          while (1)
          {
            v661 = *(_DWORD *)(v658 + 4 * (v657 + v660));
            if (v661 != -1 && v661 != ((v659 + v660) & 0xFFFFF | v659 & 0xFFF00000))
              break;
            ++v660;
            if (!(v657 - v651 + v660))
            {
              v660 = v651 - v657;
              break;
            }
          }
          v663 = v659 & 0x7FF00000;
          if ((v659 & 0x80000000) == 0)
          {
LABEL_962:
            v664 = v652;
            v665 = (_DWORD *)(a1 + 8 * v652 + 1408);
            if (v663)
            {
              *v665 = 0;
              v666 = 8 * (v659 & 0xFFFFF);
            }
            else
            {
              *v665 = 25;
              v666 = 8
                   * (*(_DWORD *)(a4 + 124)
                    + *(_DWORD *)(a4 + 132)
                    + (v659 & 0xFFFFF)
                    - (*(_DWORD *)(a4 + 120)
                     + *(_DWORD *)(a4 + 128)
                     + *(_DWORD *)(a4 + 136)));
            }
            goto LABEL_970;
          }
        }
        if (v663 == 51380224)
          v667 = 27;
        else
          v667 = 28;
        v664 = v652;
        *(_DWORD *)(a1 + 8 * v652 + 1408) = v667;
        v666 = 8 * (v659 & 0xFFFFF);
LABEL_970:
        *(_DWORD *)(v562 + 8 * v664 + 1408) = v666;
        v668 = (unsigned __int16 *)((char *)v566 - *v566);
        v669 = *v668;
        if (v669 < 0xB)
        {
          LODWORD(v653) = 0;
        }
        else
        {
          v653 = v668[5];
          if (v668[5])
            LODWORD(v653) = *(int *)((char *)v566 + v653);
          if (v669 >= 0xD)
          {
            v654 = v668[6];
            if (v654)
              LODWORD(v654) = *(int *)((char *)v566 + v654);
            goto LABEL_951;
          }
        }
        LODWORD(v654) = 0;
LABEL_951:
        v655 = (2 * v660);
        v560 = v652 + 1;
        v656 = &__dst[16 * v652];
        *(_QWORD *)v656 = v655;
        *((_DWORD *)v656 + 2) = v653 + v594 - v654;
        LODWORD(v594) = v594 + v655;
        v652 = v560;
        if (v594 >= v650)
          goto LABEL_807;
      }
    }
LABEL_811:
    if (v568 >= 0xD)
    {
      v569 = v567[6];
      if (v567[6])
        LODWORD(v569) = *(int *)((char *)v566 + v569);
LABEL_846:
      v590 = v567[4];
      if (v590)
      {
        v570 = *(int *)((char *)v566 + v590);
        goto LABEL_816;
      }
LABEL_815:
      v570 = 0;
      goto LABEL_816;
    }
    LODWORD(v569) = 0;
    v570 = 0;
    if (v568 >= 9)
      goto LABEL_846;
LABEL_816:
    v571 = v570 + v569;
    if (v569 < v570 + (int)v569)
    {
      v572 = 1 - (v569 + v570);
      v573 = v560;
      do
      {
        v578 = *(_QWORD *)(a4 + 96);
        v579 = *(_DWORD *)(v578 + 4 * v569);
        if ((int)v569 + 1 >= v571)
        {
          v581 = 1;
        }
        else
        {
          v580 = 0;
          v581 = v571 - v569;
          while (1)
          {
            v582 = *(_DWORD *)(v578 + 4 * (v569 + v580 + 1));
            if (v582 != -1 && v582 != ((v579 + 1 + v580) & 0xFFFFF | v579 & 0xFFF00000))
              break;
            ++v580;
            if (!(v572 + (_DWORD)v569 + v580))
              goto LABEL_831;
          }
          v581 = v580 + 1;
        }
LABEL_831:
        v584 = v579 & 0x7FF00000;
        v585 = a1 + 8 * v573;
        if (v579 < 0)
        {
          if (v584 == 51380224)
            v587 = 27;
          else
            v587 = 28;
          *(_DWORD *)(v585 + 1408) = v587;
        }
        else
        {
          v586 = (_DWORD *)(v585 + 1408);
          if (v584)
            *v586 = 0;
          else
            *v586 = 26;
        }
        *(_DWORD *)(a1 + 1396 + 8 * v573 + 16) = 4 * (v579 & 0xFFFFF);
        v588 = (unsigned __int16 *)((char *)v566 - *v566);
        v589 = *v588;
        if (v589 < 0xB)
        {
          LODWORD(v574) = 0;
        }
        else
        {
          v574 = v588[5];
          if (v588[5])
            LODWORD(v574) = *(int *)((char *)v566 + v574);
          if (v589 >= 0xD)
          {
            v575 = v588[6];
            if (v575)
              LODWORD(v575) = *(int *)((char *)v566 + v575);
            goto LABEL_820;
          }
        }
        LODWORD(v575) = 0;
LABEL_820:
        v576 = v581;
        v560 = v573 + 1;
        v577 = &__dst[16 * v573];
        *(_QWORD *)v577 = v576;
        *((_DWORD *)v577 + 2) = v574 + v569 - v575;
        LODWORD(v569) = v569 + v576;
        v573 = v560;
      }
      while (v569 < v571);
    }
LABEL_807:
    if (++v558 != v561)
      continue;
    break;
  }
  v670 = *v557;
  if ((_DWORD)v670)
  {
    v671 = 0;
    v672 = 4 * v670;
    do
      v671 += 4;
    while (v672 != v671);
    v673 = 0;
    LODWORD(v559) = v560;
    while (1)
    {
      v677 = v557[v673 / 4 + 1];
      v678 = (char *)&v557[v673 / 4] + v677;
      v679 = v677 - *((int *)v678 + 1);
      v680 = (char *)&v557[v673 / 4] + v679;
      v681 = *((unsigned __int16 *)v680 + 2);
      if (v681 < 5)
        goto LABEL_983;
      v682 = *((unsigned __int16 *)v680 + 4);
      if (!v682)
        goto LABEL_983;
      v683 = *((char *)&v557[v673 / 4 + 1] + v677 + v682);
      if (v683 == 9)
      {
        *(_QWORD *)(a1 + 8 * v559 + 1408) = v820;
        v685 = v677 - *((int *)v678 + 1);
        v686 = *(unsigned __int16 *)((char *)&v557[v673 / 4 + 1] + v685);
        if (v686 < 9)
          goto LABEL_980;
        if (*(_WORD *)((char *)&v557[v673 / 4 + 3] + v685))
        {
          v674 = *(unsigned int *)((char *)&v557[v673 / 4 + 1]
                                 + v677
                                 + *(unsigned __int16 *)((char *)&v557[v673 / 4 + 3] + v685));
          if (v686 < 0xB)
            goto LABEL_981;
        }
        else
        {
          v674 = 0;
          if (v686 < 0xB)
            goto LABEL_981;
        }
      }
      else
      {
        if (v683 == 7)
        {
          *(_QWORD *)(a1 + 8 * v559 + 1408) = v818;
        }
        else
        {
          if (v683 != 6)
            goto LABEL_983;
          if (v681 < 0xD)
          {
            v684 = 0;
          }
          else
          {
            v684 = *(unsigned __int16 *)((char *)&v557[v673 / 4 + 4] + v679);
            if (v684)
              v684 = *(unsigned int *)((char *)&v557[v673 / 4 + 1] + v677 + v684);
          }
          *(_QWORD *)(a1 + 8 * v559 + 1408) = v824 + 4 * v684;
        }
        v685 = v677 - *((int *)v678 + 1);
        v687 = (char *)&v557[v673 / 4] + v685;
        v688 = *((unsigned __int16 *)v687 + 2);
        if (v688 < 9)
        {
LABEL_980:
          v674 = 0;
          goto LABEL_981;
        }
        v674 = *((unsigned __int16 *)v687 + 6);
        if (v674)
          v674 = *(unsigned int *)((char *)&v557[v673 / 4 + 1] + v677 + v674);
        if (v688 < 0xB)
          goto LABEL_981;
      }
      v689 = *(unsigned __int16 *)((char *)&v557[v673 / 4 + 3] + v685 + 2);
      if (v689)
      {
        v675 = *(unsigned int *)((char *)&v557[v673 / 4 + 1] + v677 + v689);
        goto LABEL_982;
      }
LABEL_981:
      v675 = 0;
LABEL_982:
      v676 = &__dst[16 * v559];
      *(_QWORD *)v676 = v674;
      LODWORD(v559) = v559 + 1;
      *((_DWORD *)v676 + 2) = v675;
LABEL_983:
      v673 += 4;
      if (v672 == v673)
        goto LABEL_1009;
    }
  }
  LODWORD(v559) = v560;
LABEL_1009:
  v835 = v559;
  v690 = v559;
  v836 = a1 + 1216 + 8 * v559 + 192;
  v691 = (2 * v559);
  v837 = 2 * v559;
  v692 = v559 - v560;
  v693 = 2 * (v559 - 1) + 5;
  v79 = (_DWORD)v559 == 0;
  v694 = 4;
  if (!v79)
    v694 = v693;
  v695 = ((v694 + v691) & 0x7FFFFFFFCLL) - v691;
  v839 = v695;
  v840 = (v690 & 0xFFFFFFFC) + 4;
  v841 = 0;
  *(_DWORD *)(a1 + 1392) = v560;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_DWORD *)(a1 + 1404) = v692 + (v695 >> 1);
  v696 = 4 * ((v690 & 0xFFFFFFFC) + 4);
  *(_QWORD *)(a1 + 2024) = v696;
  AGX::Heap<true>::allocateImpl(&__str, v813, v696, 0);
  v697 = __str.__r_.__value_.__r.__words[2];
  v698 = v829;
  *(_DWORD *)(a1 + 2804) += LODWORD(__str.__r_.__value_.__r.__words[2]);
  v699 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  v826 = v830;
  v827 = v831;
  *(_QWORD *)(a1 + 2000) = __str.__r_.__value_.__r.__words[0];
  v838 = *((_QWORD *)&v699 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)__dst, 0);
  *(_DWORD *)(a1 + 2040) = v841;
  *(_QWORD *)(a1 + 2032) = (4 * (v839 + v837) + 12) & 0xFFFFFFFFFFFFFFF0;
  v701 = *(_QWORD *)(v698 + 296);
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2289) = 0u;
  *(_QWORD *)(a1 + 2128) = v701;
  *(_DWORD *)(a1 + 1216) = 8
                         * (*(_DWORD *)(a1 + 1396)
                          + *(_DWORD *)(a1 + 1392)
                          + *(_DWORD *)(a1 + 1400)
                          + *(_DWORD *)(a1 + 1404));
  *(_QWORD *)(a1 + 2208) = v813;
  *(_OWORD *)(a1 + 2216) = v699;
  *(_QWORD *)(a1 + 2232) = v697;
  *(_QWORD *)(a1 + 2240) = v698;
  *(_QWORD *)(a1 + 2248) = v826;
  *(_BYTE *)(a1 + 2256) = v827;
  *(_QWORD *)(a1 + 2408) = v816;
  *(_BYTE *)(a1 + 2732) = 0;
  *(_QWORD *)(a1 + 2840) = 0;
  if (*v806)
  {
    v702 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v702 = v806;
  }
  else
  {
    v702 = (unsigned int **)(a3 + 784);
  }
  v703 = 0;
  if (*v702 && v702[1])
    v703 = (int *)((char *)*v702 + **v702);
  v704 = (unsigned __int16 *)((char *)v703 - *v703);
  if (*v704 >= 5u && (v705 = v704[2]) != 0)
    v706 = (int *)((char *)v703 + v705 + *(unsigned int *)((char *)v703 + v705));
  else
    v706 = 0;
  if (*v806)
  {
    v707 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v707 = v806;
  }
  else
  {
    v707 = (unsigned int **)(a3 + 784);
  }
  v708 = 0;
  if (*v707 && v707[1])
    v708 = (int *)((char *)*v707 + **v707);
  v709 = (unsigned __int16 *)((char *)v708 - *v708);
  if (*v709 >= 9u && (v710 = v709[4]) != 0)
    v711 = (int *)((char *)v708 + v710 + *(unsigned int *)((char *)v708 + v710));
  else
    v711 = 0;
  if (*v800)
  {
    v712 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v712 = v800;
  }
  else
  {
    v712 = (unsigned int **)(a3 + 1024);
  }
  v713 = 0;
  if (*v712 && v712[1])
    v713 = (int *)((char *)*v712 + **v712);
  v714 = (unsigned __int16 *)((char *)v713 - *v713);
  if (*v714 >= 9u && (v715 = v714[4]) != 0)
    v716 = (int *)((char *)v713 + v715 + *(unsigned int *)((char *)v713 + v715));
  else
    v716 = 0;
  v717 = (unsigned __int16 *)((char *)v716 - *v716);
  v718 = *v717;
  if (v718 < 7)
  {
    v719 = 0;
  }
  else if (v717[3])
  {
    v719 = *(_QWORD *)((char *)v716 + v717[3]);
    if (v718 >= 9)
    {
LABEL_1150:
      v788 = v717[4];
      if (v788)
      {
        v720 = *(_QWORD *)((char *)v716 + v788);
        goto LABEL_1053;
      }
    }
  }
  else
  {
    v719 = 0;
    if (v718 >= 9)
      goto LABEL_1150;
  }
  v720 = 0;
LABEL_1053:
  __str.__r_.__value_.__s.__data_[0] = 0;
  agxsGetShaderPassInfo(a5 + 40, v719, v720, (_DWORD *)(a1 + 2832), (unsigned int *)&__str, v700);
  v721 = (unsigned __int16 *)((char *)v706 - *v706);
  if (*v721 >= 5u && (v722 = v721[2]) != 0)
    v723 = ((unint64_t)*(unsigned int *)((char *)v706 + v722) << 33) & 0xFFFFFFF800000000;
  else
    v723 = 0;
  v724 = *(_QWORD *)(a1 + 1976);
  v725 = (unsigned __int16 *)((char *)v711 - *v711);
  if (*v725 < 0xDu)
  {
    v726 = 0;
  }
  else
  {
    v726 = v725[6];
    if (v726)
      v726 += (uint64_t)v711 + *(unsigned int *)((char *)v711 + v726);
  }
  v727 = (int *)(v726 + 4 + *(unsigned int *)(v726 + 4));
  v728 = (unsigned __int16 *)((char *)v727 - *v727);
  if (*v728 >= 7u && (v729 = v728[3]) != 0)
    v730 = (uint64_t)*((char *)v727 + v729) << 33;
  else
    v730 = 0;
  AGX::Heap<true>::allocateImpl(__dst, v813, 48, (_QWORD *)(a1 + 2136));
  v731 = 0;
  v732 = *(_OWORD *)__dst;
  **(_DWORD **)&__dst[8] = v724 & 0xFFFFFFFC;
  *(_DWORD *)(*((_QWORD *)&v732 + 1) + 4) = (v723 | v730 | v724) >> 32;
  *(_QWORD *)(*((_QWORD *)&v732 + 1) + 8) = 0;
  *(_DWORD *)(*((_QWORD *)&v732 + 1) + 32) = -201326590;
  v733 = *(_QWORD *)(a1 + 2032);
  *(_QWORD *)(a1 + 2808) = v732 & 0xFFFFFFFFFFFFFFF0 | (*(_QWORD *)(a1 + 2000) >> 4 << 36);
  *(_QWORD *)(a1 + 2816) = 0;
  v734 = (((unint64_t)*(unsigned int *)(a1 + 2040) << 44) + 0x300000000000) & 0xFFFFC00000000000 | ((((v733 << 19) + 1572864) & 0x1FFFFFFFE00000) + 6291456) & 0x3FFFFFFF800000;
  *(_QWORD *)(a1 + 2824) = v734;
  v735 = (unsigned __int16 *)((char *)v706 - *v706);
  if (*v735 >= 7u)
  {
    v731 = v735[3];
    if (v735[3])
      v731 = (((unint64_t)*(unsigned int *)((char *)v706 + v731) << 51) + 0x78000000000000) & 0xFF80000000000000;
  }
  *(_QWORD *)(a1 + 2824) = v731 | v734;
  v736 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 2264) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 2280) = v736;
  *(_OWORD *)(a1 + 2289) = *(_OWORD *)&__dst[25];
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(a1 + 1216);
  v737 = vorrq_s8(*(int8x16_t *)(a5 + 40), *(int8x16_t *)(a5 + 56));
  v738 = vorr_s8(*(int8x8_t *)v737.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v737, v737, 8uLL));
  v740 = *(_QWORD *)(a5 + 80) == 0x10000000000 && (v738.i32[0] | *(_DWORD *)(a5 + 72) & 0xFFFF0FFF | v738.i32[1]) == 0;
  *(_BYTE *)(a1 + 2848) = v740;
  *(_QWORD *)(a1 + 2856) = 0;
  if (*v806)
  {
    v741 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v741 = v806;
  }
  else
  {
    v741 = (unsigned int **)(a3 + 784);
  }
  v742 = 0;
  if (*v741 && v741[1])
    v742 = (int *)((char *)*v741 + **v741);
  v743 = (unsigned __int16 *)((char *)v742 - *v742);
  if (*v743 >= 5u && (v744 = v743[2]) != 0)
    v745 = (int *)((char *)v742 + v744 + *(unsigned int *)((char *)v742 + v744));
  else
    v745 = 0;
  v746 = *(_DWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a1 + 896);
  *(_DWORD *)(a1 + 2804) += v746;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(a1 + 1216);
  v747 = *(unsigned __int16 *)((char *)v745 - *v745 + 24);
  v748 = *(unsigned int *)((char *)v745 + v747);
  if (*(int *)((char *)v745 + v747 + v748))
  {
    v749 = 0;
    LODWORD(v750) = *(unsigned __int16 *)((char *)v745 - *v745 + 24);
    while (1)
    {
      v755 = (uint64_t)&v745[v749] + v750 + v748;
      v756 = (int *)(v755 + 4 + *(unsigned int *)(v755 + 4));
      v757 = (unsigned __int16 *)((char *)v756 - *v756);
      v758 = *v757;
      if (v758 >= 9)
        break;
      v760 = v794->__begin_;
      if (v758 >= 5)
      {
        v752 = (uint64_t)v794->__begin_;
        v761 = v757[2];
        if (!v757[2])
        {
LABEL_1108:
          if (v758 >= 7 && (v765 = v757[3]) != 0)
            v751 = *(int *)((char *)v756 + v765);
          else
            v751 = 0;
          goto LABEL_1089;
        }
LABEL_1099:
        v762 = *((unsigned __int8 *)v756 + v761);
        if (v762 > 63)
        {
          switch(v762)
          {
            case '@':
              *(_QWORD *)v752 = 0x5300000052;
              break;
            case 'i':
              *(_QWORD *)v752 = 0x5500000054;
              break;
            case 'j':
              *(_DWORD *)v752 = 86;
              break;
            case 'k':
              *(_DWORD *)v752 = 87;
              break;
            case 'y':
              *(_OWORD *)v752 = xmmword_232D73960;
              *(_OWORD *)(v752 + 16) = xmmword_232D73970;
              *(_OWORD *)(v752 + 32) = xmmword_232D73980;
              *(_OWORD *)(v752 + 48) = xmmword_232D73990;
              *(_OWORD *)(v752 + 64) = xmmword_232D739A0;
              *(_OWORD *)(v752 + 80) = xmmword_232D739B0;
              *(_OWORD *)(v752 + 96) = xmmword_232D739C0;
              *(_OWORD *)(v752 + 112) = xmmword_232D739D0;
              break;
            case 'z':
              *(_OWORD *)v752 = xmmword_232D73880;
              *(_OWORD *)(v752 + 16) = xmmword_232D73890;
              break;
            case '{':
              *(_OWORD *)v752 = xmmword_232D738A0;
              *(_OWORD *)(v752 + 16) = xmmword_232D738B0;
              *(_OWORD *)(v752 + 32) = xmmword_232D738C0;
              *(_OWORD *)(v752 + 48) = xmmword_232D738D0;
              *(_OWORD *)(v752 + 64) = xmmword_232D738E0;
              *(_OWORD *)(v752 + 80) = xmmword_232D738F0;
              *(_OWORD *)(v752 + 96) = xmmword_232D73900;
              *(_OWORD *)(v752 + 112) = xmmword_232D73910;
              *(_OWORD *)(v752 + 128) = xmmword_232D73920;
              *(_OWORD *)(v752 + 144) = xmmword_232D73930;
              *(_OWORD *)(v752 + 160) = xmmword_232D73940;
              *(_OWORD *)(v752 + 176) = xmmword_232D73950;
              break;
            case '|':
              *(_OWORD *)v752 = xmmword_232D73860;
              *(_OWORD *)(v752 + 16) = xmmword_232D73870;
              *(_QWORD *)(v752 + 32) = 0x6100000060;
              break;
            case '}':
              *(_QWORD *)v752 = 0x6300000062;
              break;
            default:
              goto LABEL_1090;
          }
          goto LABEL_1090;
        }
        if (v762)
        {
          if (v762 == 1)
          {
            if (v758 >= 7 && (v766 = v757[3]) != 0)
              v767 = *(int *)((char *)v756 + v766);
            else
              v767 = 0;
            *(_DWORD *)v752 = (v767 + 100) & 0x3FFFFFFF;
          }
          else if (v762 == 2)
          {
            if (v758 >= 7 && (v763 = v757[3]) != 0)
              v764 = *(int *)((char *)v756 + v763);
            else
              v764 = 0;
            v768 = (24 * v764 + 136) >> 2;
            *(_DWORD *)v752 = v768;
            v5.i32[1] |= 1u;
            v5.i32[2] |= 1u;
            v5.i32[3] |= 1u;
            v769 = vaddq_s32(vdupq_n_s32(v768), (int32x4_t)xmmword_232D736A0);
            v769.i32[0] = v768 | 1;
            *(int32x4_t *)(v752 + 4) = v769;
            *(_DWORD *)(v752 + 20) = v768 + 5;
          }
          goto LABEL_1090;
        }
        goto LABEL_1108;
      }
      v751 = 0;
      v752 = (uint64_t)v794->__begin_;
LABEL_1089:
      v753 = vdupq_n_s32(4 * (v751 & 0xFFFFFFFu));
      *(_QWORD *)&v754 = vorrq_s8((int8x16_t)v753, (int8x16_t)xmmword_232D739E0).u64[0];
      v5 = vaddq_s32(v753, (int32x4_t)xmmword_232D739F0);
      *((_QWORD *)&v754 + 1) = v5.i64[1];
      *(_OWORD *)v752 = v754;
LABEL_1090:
      ++v749;
      v750 = *(unsigned __int16 *)((char *)v745 - *v745 + 24);
      v748 = *(unsigned int *)((char *)v745 + v750);
      if (v749 >= *(unsigned int *)((char *)v745 + v750 + v748))
        goto LABEL_1128;
    }
    if (v757[4])
      v759 = *(unsigned int *)((char *)v756 + v757[4]);
    else
      v759 = 0;
    v760 = v794->__begin_;
    v752 = (uint64_t)&v794->__begin_[v759];
    v761 = v757[2];
    if (!v757[2])
      goto LABEL_1108;
    goto LABEL_1099;
  }
  v760 = v794->__begin_;
LABEL_1128:
  v771 = *(_QWORD *)(a1 + 240);
  v770 = *(_QWORD *)(a1 + 248);
  if (v770 == v771)
    v772 = 0;
  else
    v772 = *v792 & 1;
  v773 = *(_QWORD *)(a1 + 80) - (_DWORD)v760;
  v774 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2;
  v775 = 8 * (v774 + ((*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2));
  *(_DWORD *)(a1 + 16) = ((*(_DWORD *)(a1 + 152)
                         - *(_DWORD *)(a1 + 144)
                         + ((v773
                           + 4
                           * (*(_DWORD *)(a1 + 212)
                            + *(_DWORD *)(a1 + 208)
                            + v772
                            + (((v770 - v771) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                       + v775;
  v776 = (*(_DWORD *)(a4 + 124)
        + *(_DWORD *)(a4 + 132)
        + *(_DWORD *)(a4 + 140)
        - (*(_DWORD *)(a4 + 120)
         + *(_DWORD *)(a4 + 128)
         + *(_DWORD *)(a4 + 136))
        + 1) & 0xFFFFFFFE;
  *(_DWORD *)(a1 + 20) = 8 * v776;
  v777 = *(unsigned __int8 *)(a4 + 184);
  v778 = *(_DWORD *)(a4 + 144);
  if (!*(_BYTE *)(a4 + 184))
    v778 = 0;
  *(_DWORD *)(a1 + 24) = 8 * (v778 + v776);
  *(_DWORD *)(a1 + 28) = 8 * v774;
  *(_DWORD *)(a1 + 32) = v775;
  *(_DWORD *)(a1 + 36) = v775 + (v773 & 0xFFFFFFFC);
  v779 = *(_DWORD *)(a4 + 144);
  if (v777)
    v780 = *(_DWORD *)(a4 + 144);
  else
    v780 = 0;
  v781 = *(_QWORD *)(a4 + 168);
  if (!v781)
    v779 = 0;
  *(_DWORD *)(a1 + 40) = 8 * (v780 + v779 + v776);
  v782 = *(_DWORD *)(a4 + 144);
  if (v781)
    v783 = *(_DWORD *)(a4 + 144);
  else
    v783 = 0;
  if (!v777)
    v782 = 0;
  v784 = *(_QWORD *)(a4 + 148);
  *(_DWORD *)(a1 + 44) = 8 * (v782 + v783 + v784 + v776);
  v785 = *(_DWORD *)(a4 + 144);
  if (v777)
    v786 = *(_DWORD *)(a4 + 144);
  else
    v786 = 0;
  if (!v781)
    v785 = 0;
  *(_DWORD *)(a1 + 316) = v786 + v785;
  *(_QWORD *)(a1 + 320) = v784;
  return a1;
}

void sub_232CC0E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void **a10, _QWORD *a11, CompileStatistics *a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, void **a20,void **a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;
  void **v56;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  CompileStatistics::~CompileStatistics(a12);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v55 + 1032));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v55 + 992));
  v58 = *(void **)(v55 + 968);
  if (v58)
  {
    *(_QWORD *)(v55 + 976) = v58;
    operator delete(v58);
  }
  v59 = *a27;
  if (*a27)
  {
    *(_QWORD *)(v55 + 952) = v59;
    operator delete(v59);
  }
  if (*a9 < 0)
  {
    operator delete(*a10);
    if ((*(char *)(v55 + 479) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*(char *)(v55 + 479) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v55 + 455) < 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*a20);
  if (*(char *)(v55 + 455) < 0)
  {
LABEL_8:
    operator delete(*a21);
    if ((*(char *)(v55 + 431) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a33);
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a11);
      v60 = *a14;
      if (*a14)
      {
        *(_QWORD *)(v55 + 176) = v60;
        operator delete(v60);
      }
      v61 = *a16;
      if (*a16)
      {
        *(_QWORD *)(v55 + 152) = v61;
        operator delete(v61);
      }
      v62 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v55 + 128) = v62;
        operator delete(v62);
      }
      v63 = *a17;
      if (*a17)
      {
        *(_QWORD *)(v55 + 104) = v63;
        operator delete(v63);
      }
      v64 = *a13;
      if (*a13)
      {
        *(_QWORD *)(v55 + 80) = v64;
        operator delete(v64);
        v65 = *v56;
        if (!*v56)
        {
LABEL_24:
          if (a46 < 0)
            goto LABEL_25;
          goto LABEL_28;
        }
      }
      else
      {
        v65 = *v56;
        if (!*v56)
          goto LABEL_24;
      }
      *(_QWORD *)(v55 + 56) = v65;
      operator delete(v65);
      if (a46 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a22);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v55 + 431) & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

unint64_t AGX::BlitFragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::BlitFragmentProgramVariant(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  std::vector<unsigned int> *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int **v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int **v16;
  int *v17;
  unsigned __int16 *v18;
  int *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  const char *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  const char *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  size_t v34;
  const void *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int **v40;
  int *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  _DWORD *v48;
  const char *v49;
  size_t v50;
  size_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  int v57;
  int v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  unsigned int **v76;
  unsigned int *v77;
  unsigned int *v78;
  BOOL v79;
  int *v80;
  unsigned __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned int **v92;
  unsigned int *v93;
  int *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unsigned __int16 *v115;
  uint64_t v116;
  unsigned __int16 *v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned __int16 *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned __int16 *v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned __int16 *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  int *v143;
  unsigned __int16 *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  char *v148;
  unsigned int *v149;
  uint64_t v150;
  unsigned int *v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unsigned __int16 *v155;
  uint64_t v156;
  int v157;
  unsigned __int8 v158;
  unsigned __int16 *v159;
  uint64_t v160;
  int *v161;
  unsigned __int16 *v162;
  uint64_t v163;
  unsigned __int16 *v164;
  uint64_t v165;
  uint64_t v166;
  _WORD *v167;
  unsigned int v168;
  uint64_t v169;
  BOOL v170;
  int v171;
  BOOL v172;
  unsigned __int16 *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int *v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int *v192;
  int *v193;
  unsigned __int16 *v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t **v199;
  uint64_t *v200;
  uint64_t **v201;
  unsigned int v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t *v205;
  int v206;
  uint64_t v207;
  unsigned __int8 v208;
  int v209;
  unsigned __int16 *v210;
  uint64_t v211;
  int *v212;
  unsigned __int16 *v213;
  uint64_t v214;
  unsigned __int16 *v215;
  uint64_t v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned __int16 *v219;
  char v220;
  uint64_t v221;
  unsigned int v222;
  _DWORD *v223;
  int v224;
  int v225;
  unsigned __int8 v226;
  unsigned __int16 *v227;
  unsigned __int16 *v228;
  uint64_t v229;
  unsigned __int8 v230;
  _OWORD *v231;
  const void **v232;
  _QWORD *v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  const void *v237;
  _QWORD *v238;
  std::vector<unsigned int> *v239;
  uint64_t v240;
  uint64_t v241;
  const void **v242;
  _QWORD *v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  const void *v248;
  _QWORD *v249;
  const void **v250;
  _QWORD *v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  const void *v256;
  _QWORD *v257;
  uint64_t v258;
  NSObject *v259;
  _QWORD *v260;
  std::string *v261;
  _QWORD *v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  std::string *v268;
  _QWORD *v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  int *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char *v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  int v298;
  int v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  std::vector<unsigned int>::pointer begin;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int *v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int *v340;
  unsigned int *v341;
  int *v342;
  unsigned __int16 *v343;
  unsigned int v344;
  uint64_t v345;
  unint64_t v346;
  int v347;
  unsigned int v348;
  unsigned __int16 *v349;
  uint64_t v350;
  uint64_t *v351;
  unsigned int v352;
  unint64_t v353;
  int v354;
  uint64_t **v355;
  uint64_t *v356;
  uint64_t **v357;
  unsigned int v358;
  _DWORD *v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  int *v363;
  int v364;
  unsigned int v365;
  std::vector<unsigned int>::pointer v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  std::vector<unsigned int>::pointer v374;
  uint64_t v375;
  int v376;
  int v377;
  unsigned int v378;
  std::vector<unsigned int>::pointer v379;
  int *v380;
  int v381;
  unsigned __int16 *v382;
  unint64_t v383;
  int v384;
  unsigned __int16 *v385;
  unint64_t v386;
  unsigned __int16 *v387;
  uint64_t v388;
  unint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unsigned int v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  unsigned __int16 *v407;
  uint64_t v408;
  _DWORD *v409;
  unint64_t v410;
  _BYTE *v411;
  _BYTE *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  unsigned __int16 *v417;
  uint64_t v418;
  _DWORD *v419;
  unint64_t v420;
  _DWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  _DWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  unsigned int **v436;
  int *v437;
  unsigned __int16 *v438;
  uint64_t v439;
  unsigned int *v440;
  unsigned int **v441;
  int *v442;
  unsigned __int16 *v443;
  uint64_t v444;
  int *v445;
  unsigned __int16 *v446;
  uint64_t v447;
  unsigned __int16 *v448;
  uint64_t v449;
  const char *v450;
  unsigned __int16 *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  char *v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  char v466;
  uint64_t v467;
  uint64_t v468;
  __int128 v469;
  _QWORD *v470;
  uint64_t v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  _WORD *v477;
  const void *v478;
  size_t v479;
  char *v480;
  char *v481;
  uint64_t *v482;
  unsigned __int16 *v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int *v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  char *v490;
  char v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  char *v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int *v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  char *v504;
  char v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unsigned int *v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  char v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unsigned int *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char *v533;
  char v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  unsigned int v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  unsigned int **v543;
  unsigned int *v544;
  unsigned int *v545;
  BOOL v546;
  int *v547;
  unsigned __int16 *v548;
  uint64_t v549;
  int *v550;
  unsigned __int16 *v551;
  uint64_t v552;
  unsigned int *v553;
  uint64_t v554;
  unsigned int *v555;
  uint64_t v556;
  unsigned int v557;
  unsigned int *v558;
  unint64_t v559;
  uint64_t v560;
  int v561;
  _BYTE *v562;
  int *v563;
  unsigned __int16 *v564;
  unsigned int v565;
  uint64_t v566;
  int v567;
  unsigned int v568;
  int v569;
  unsigned int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  _BYTE *v574;
  uint64_t v575;
  unsigned int v576;
  int v577;
  unsigned int v578;
  int v579;
  unint64_t v581;
  uint64_t v582;
  _DWORD *v583;
  unsigned int v584;
  int v585;
  unsigned __int16 *v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  unsigned int v594;
  int v595;
  unint64_t v596;
  unsigned __int16 *v597;
  uint64_t v598;
  int v599;
  unsigned __int16 *v600;
  unsigned int v601;
  unsigned int v602;
  int v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _BYTE *v615;
  unsigned int v616;
  uint64_t v617;
  unsigned int v618;
  int v619;
  int v620;
  unint64_t v622;
  uint64_t v623;
  _DWORD *v624;
  int v625;
  unsigned int v626;
  int v627;
  unsigned __int16 *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _BYTE *v636;
  unsigned int v637;
  uint64_t v638;
  unsigned int v639;
  int v640;
  int v641;
  unint64_t v643;
  uint64_t v644;
  _DWORD *v645;
  int v646;
  unsigned int v647;
  int v648;
  unsigned __int16 *v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  _BYTE *v657;
  unsigned int v658;
  uint64_t v659;
  unsigned int v660;
  int v661;
  int v662;
  uint64_t v664;
  _DWORD *v665;
  unsigned int v666;
  int v667;
  int v668;
  unsigned __int16 *v669;
  unsigned int v670;
  uint64_t v671;
  _QWORD *v672;
  unsigned int **v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  int v678;
  _BYTE *v679;
  uint64_t v680;
  char *v681;
  uint64_t v682;
  char *v683;
  unsigned int v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  char *v690;
  unsigned int v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  __int128 v702;
  uint64_t v703;
  unsigned int *v704;
  unsigned int **v705;
  int *v706;
  unsigned __int16 *v707;
  uint64_t v708;
  int *v709;
  unsigned int **v710;
  int *v711;
  unsigned __int16 *v712;
  uint64_t v713;
  int *v714;
  unsigned int *v715;
  uint64_t v716;
  uint64_t v717;
  _DWORD *v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  char *v722;
  char *v723;
  uint64_t v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  char *v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  char *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unsigned int v736;
  uint64_t v737;
  unsigned __int16 *v738;
  uint64_t v739;
  unsigned __int16 *v740;
  uint64_t v741;
  int *v742;
  unsigned __int16 *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  int v747;
  uint64_t v748;
  unsigned __int16 *v749;
  uint64_t v750;
  int v751;
  int v752;
  unsigned __int16 *v753;
  uint64_t v754;
  int v755;
  int v756;
  _DWORD *v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  unsigned int **v762;
  int *v763;
  unsigned __int16 *v764;
  uint64_t v765;
  int *v766;
  int v767;
  BOOL *v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  unint64_t v772;
  int v773;
  uint64_t v774;
  int *v775;
  unsigned __int16 *v776;
  unsigned int v777;
  uint64_t v778;
  std::vector<unsigned int>::pointer v779;
  unsigned int *v780;
  uint64_t v781;
  int v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  int v787;
  uint64_t v788;
  int v789;
  unsigned int v790;
  int v791;
  int v792;
  int v793;
  int v794;
  uint64_t v795;
  int v796;
  int v797;
  uint64_t v798;
  int v799;
  int v800;
  unsigned int **v801;
  int *v802;
  unsigned __int16 *v803;
  uint64_t v804;
  int *v805;
  unsigned int **v806;
  int *v807;
  unsigned __int16 *v808;
  uint64_t v809;
  int *v810;
  unsigned __int16 *v811;
  unsigned int v812;
  unint64_t v813;
  unint64_t v814;
  unsigned __int16 *v815;
  uint64_t v816;
  int v817;
  uint64_t v818;
  unsigned __int16 *v819;
  uint64_t v820;
  int v821;
  unsigned int v822;
  int v823;
  unsigned int v824;
  uint64_t v826;
  char *v827;
  unint64_t v828;
  _DWORD *v829;
  uint64_t v830;
  _DWORD *v831;
  std::vector<unsigned int> *v832;
  _QWORD *v833;
  _QWORD *v834;
  _QWORD *v835;
  _QWORD *v836;
  unsigned int **v837;
  std::string *v838;
  _QWORD *v839;
  _QWORD *v840;
  unsigned int **v842;
  _QWORD *v843;
  void **v844;
  _QWORD *v845;
  int *v846;
  _DWORD *v847;
  char *v848;
  uint64_t v849;
  uint64_t v850;
  int *v851;
  _DWORD *v852;
  uint64_t **v853;
  int v854;
  std::vector<unsigned int> *v855;
  uint64_t v856;
  uint64_t **v857;
  _DWORD *v858;
  unint64_t v859;
  uint64_t v860;
  _QWORD *v861;
  __int128 v862;
  _OWORD v863[2];
  __int128 v864;
  _OWORD v865[2];
  __int128 __str;
  _BYTE __str_16[25];
  _BYTE __dst[48];
  __int16 v869;
  uint64_t v870;
  int v871;
  uint64_t v872;
  unsigned int v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  int v877;
  int v878;
  uint64_t v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int v884;
  uint64_t v885;

  v7 = a3;
  v885 = *MEMORY[0x24BDAC8D0];
  __str_16[7] = 0;
  LOBYTE(__str) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  v836 = (_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v835 = (_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)a1 = &off_250401E70;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 216) = 0u;
  v833 = (_QWORD *)(a1 + 168);
  v834 = (_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v853 = (uint64_t **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v843 = (_QWORD *)(a1 + 368);
  v10 = (unint64_t *)(a2 + 6744);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(a1 + 400) = v11;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 844) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v840 = (_QWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 871) = 0u;
  *(_OWORD *)(a1 + 887) = 0u;
  *(_OWORD *)(a1 + 903) = 0u;
  v827 = (char *)(a1 + 871);
  *(_QWORD *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a4 + 425);
  *(_WORD *)(a1 + 1018) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  v857 = (uint64_t **)(a1 + 1032);
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  *(_OWORD *)(a1 + 1144) = 0u;
  v844 = (void **)(a1 + 1144);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  v831 = (_DWORD *)(a1 + 1048);
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_QWORD *)(a1 + 1208) = 0;
  v842 = (unsigned int **)(a3 + 28);
  if (a3[28])
  {
    v12 = (unsigned int **)(a3 + 98);
    if (a3[29])
      v12 = (unsigned int **)(a3 + 28);
  }
  else
  {
    v12 = (unsigned int **)(a3 + 98);
  }
  v13 = 0;
  if (*v12 && v12[1])
    v13 = (int *)((char *)*v12 + **v12);
  v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (v15 = v14[2]) != 0)
    v851 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  else
    v851 = 0;
  if (a3[58])
  {
    v16 = (unsigned int **)(a3 + 128);
    if (a3[59])
      v16 = (unsigned int **)(a3 + 58);
  }
  else
  {
    v16 = (unsigned int **)(a3 + 128);
  }
  v17 = 0;
  if (*v16 && v16[1])
    v17 = (int *)((char *)*v16 + **v16);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 < 5u)
  {
    v19 = 0;
  }
  else
  {
    v19 = (int *)v18[2];
    if (v19)
      v19 = (int *)((char *)v19 + (_QWORD)v17 + *(unsigned int *)((char *)v19 + (_QWORD)v17));
  }
  v846 = v19;
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  v21 = *v20;
  if (v21 < 0x25)
  {
    LOBYTE(v22) = 0;
  }
  else
  {
    v22 = v20[18];
    if (v20[18])
      LOBYTE(v22) = *((_BYTE *)v846 + v22) != 0;
  }
  *(_BYTE *)(a1 + 1017) = v22;
  v23 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v23 >= 0x55u && v23[42])
  {
    if (v21 <= 6)
    {
LABEL_34:
      LODWORD(v24) = 0;
      goto LABEL_38;
    }
  }
  else if (v21 < 7)
  {
    goto LABEL_34;
  }
  v24 = v20[3];
  if (v24)
    LODWORD(v24) = *(int *)((char *)v846 + v24);
LABEL_38:
  *(_DWORD *)(a1 + 392) = v24;
  v25 = (unsigned __int16 *)((char *)v846 - *v846);
  v837 = (unsigned int **)(a3 + 58);
  v832 = (std::vector<unsigned int> *)(a1 + 72);
  v829 = (_DWORD *)(a1 + 200);
  if (*v25 >= 0x13u && (v26 = v25[9]) != 0)
    v27 = (char *)v846 + v26 + *(unsigned int *)((char *)v846 + v26) + 4;
  else
    v27 = "";
  v838 = (std::string *)(a1 + 456);
  v839 = (_QWORD *)(a1 + 432);
  v828 = a1 + 848;
  v845 = (_QWORD *)(a1 + 944);
  MEMORY[0x234927D28](v840, v27);
  v28 = (unsigned __int16 *)((char *)v846 - *v846);
  if (*v28 >= 9u && (v29 = v28[4]) != 0)
    v30 = (char *)v846 + v29 + *(unsigned int *)((char *)v846 + v29) + 4;
  else
    v30 = "";
  MEMORY[0x234927D28](v839, v30);
  v31 = (unsigned __int16 *)((char *)v846 - *v846);
  if (*v31 < 0x29u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[20];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)v846 + v32) != 0;
  }
  *(_BYTE *)(a1 + 480) = v32;
  std::string::operator=(v838, (const std::string *)&__str);
  v33 = (unsigned __int16 *)((char *)v846 - *v846);
  if (*v33 >= 5u && v33[2] && *(_BYTE *)(a2 + 6360))
  {
    v34 = v7[1];
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v35 = (const void *)*v7;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      *(_QWORD *)&__dst[8] = v34;
      *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
      *(_QWORD *)__dst = v36;
    }
    else
    {
      __dst[23] = v7[1];
      v36 = __dst;
      if (!v34)
        goto LABEL_61;
    }
    memmove(v36, v35, v34);
LABEL_61:
    v36[v34] = 0;
    if (*v827 < 0)
      operator delete(*(void **)v828);
    *(_OWORD *)v828 = *(_OWORD *)__dst;
    *(_QWORD *)(v828 + 16) = *(_QWORD *)&__dst[16];
    v39 = v7 + 3;
    if (v7[3])
    {
      if (!v7[4])
        v39 = v7 + 73;
    }
    else
    {
      v39 = v7 + 73;
    }
    *(_QWORD *)(a1 + 872) = *v39 - *v7;
  }
  v855 = v9;
  v830 = a5;
  if (v7[43])
  {
    v40 = (unsigned int **)(v7 + 43);
    if (!v7[44])
      v40 = (unsigned int **)(v7 + 113);
  }
  else
  {
    v40 = (unsigned int **)(v7 + 113);
  }
  v861 = v7;
  if (*v40 && v40[1])
  {
    v41 = (int *)((char *)*v40 + **v40);
    v42 = (unsigned __int16 *)((char *)v41 - *v41);
    v43 = *v42;
    if (v42[2])
    {
      v44 = (int *)((char *)v41 + v42[2] + *(unsigned int *)((char *)v41 + v42[2]));
      if (v43 < 7)
        goto LABEL_83;
    }
    else
    {
      v44 = 0;
      if (v43 < 7)
        goto LABEL_83;
    }
    v45 = v42[3];
    if (v45)
    {
      v46 = (char *)v41 + v45 + *(unsigned int *)((char *)v41 + v45);
      if (!*v44)
        goto LABEL_122;
      goto LABEL_84;
    }
LABEL_83:
    v46 = 0;
    if (!*v44)
      goto LABEL_122;
LABEL_84:
    v47 = 0;
    v848 = v46 + 4;
    do
    {
      v49 = (char *)&v44[v47 + 2] + v44[v47 + 1];
      v50 = strlen(v49);
      if (v50 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v51 = v50;
      if (v50 >= 0x17)
      {
        v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17)
          v53 = v50 | 7;
        v54 = v53 + 1;
        v52 = operator new(v53 + 1);
        *(_QWORD *)&__dst[8] = v51;
        *(_QWORD *)&__dst[16] = v54 | 0x8000000000000000;
        *(_QWORD *)__dst = v52;
      }
      else
      {
        __dst[23] = v50;
        v52 = __dst;
        if (!v50)
          goto LABEL_95;
      }
      memmove(v52, v49, v51);
LABEL_95:
      v52[v51] = 0;
      v55 = *(_QWORD *)(a1 + 1152);
      if (v55 >= *(_QWORD *)(a1 + 1160))
      {
        v56 = std::vector<std::string>::__push_back_slow_path<std::string>(v844, (uint64_t)__dst);
        v57 = __dst[23];
        *(_QWORD *)(a1 + 1152) = v56;
        if (v57 < 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        *(_OWORD *)v55 = *(_OWORD *)__dst;
        *(_QWORD *)(v55 + 16) = *(_QWORD *)&__dst[16];
        *(_QWORD *)(a1 + 1152) = v55 + 24;
      }
      v58 = *(_DWORD *)&v848[4 * v47];
      v59 = *(char **)(a1 + 1176);
      v60 = *(_QWORD *)(a1 + 1184);
      if ((unint64_t)v59 < v60)
      {
        *(_DWORD *)v59 = v58;
        v48 = v59 + 4;
      }
      else
      {
        v61 = *(char **)(a1 + 1168);
        v62 = (v59 - v61) >> 2;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62)
          abort();
        v64 = v60 - (_QWORD)v61;
        if (v64 >> 1 > v63)
          v63 = v64 >> 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
          v65 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          if (v65 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v66 = v65;
          v67 = operator new(4 * v65);
          v65 = v66;
        }
        else
        {
          v67 = 0;
        }
        v68 = &v67[4 * v62];
        *v68 = v58;
        v48 = v68 + 1;
        if (v59 != v61)
        {
          v69 = v59 - 4 - v61;
          if (v69 < 0x2C)
            goto LABEL_1223;
          if ((unint64_t)(v61 - v67) < 0x20)
            goto LABEL_1223;
          v70 = (v69 >> 2) + 1;
          v71 = &v67[4 * v62 - 16];
          v72 = v59 - 16;
          v73 = v70 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v74 = *(_OWORD *)v72;
            *(v71 - 1) = *((_OWORD *)v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 32;
            v73 -= 8;
          }
          while (v73);
          v68 -= v70 & 0x7FFFFFFFFFFFFFF8;
          v59 -= 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
          if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1223:
            do
            {
              v75 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *--v68 = v75;
            }
            while (v59 != v61);
          }
        }
        *(_QWORD *)(a1 + 1168) = v68;
        *(_QWORD *)(a1 + 1176) = v48;
        *(_QWORD *)(a1 + 1184) = &v67[4 * v65];
        if (v61)
          operator delete(v61);
        v7 = v861;
      }
      *(_QWORD *)(a1 + 1176) = v48;
      ++v47;
    }
    while (v47 < *v44);
  }
LABEL_122:
  if (v7[68])
  {
    v76 = (unsigned int **)(v7 + 68);
    if (!v7[69])
      v76 = (unsigned int **)(v7 + 138);
  }
  else
  {
    v76 = (unsigned int **)(v7 + 138);
  }
  v78 = *v76;
  v77 = v76[1];
  if (v78)
    v79 = v77 == 0;
  else
    v79 = 1;
  if (v79
    || (v80 = (int *)((char *)v78 + *v78), v81 = (unsigned __int16 *)((char *)v80 - *v80), *v81 < 5u)
    || (v82 = v81[2]) == 0)
  {
    v83 = 0;
  }
  else
  {
    v83 = *(_QWORD *)((char *)v80 + v82);
  }
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  *(float *)(a1 + 1056) = (float)(v83
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / unk_254235750)
                        / 1000000.0;
  v84 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v84 < 5u)
  {
    LODWORD(v85) = 0;
  }
  else
  {
    v85 = v84[2];
    if (v85)
      LODWORD(v85) = *(int *)((char *)v851 + v85);
  }
  *v831 = v85;
  v86 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v86 < 0x2Du)
  {
    LODWORD(v87) = 0;
  }
  else
  {
    v87 = v86[22];
    if (v87)
      LODWORD(v87) = *(int *)((char *)v851 + v87);
  }
  *(_DWORD *)(a1 + 1052) = v87;
  v88 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v88 < 0x35u)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v89 = v88[26];
    if (v89)
      LODWORD(v89) = *(int *)((char *)v851 + v89);
  }
  *(_DWORD *)(a1 + 1092) = v89;
  v90 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v90 < 0x43u)
  {
    LODWORD(v91) = 0;
  }
  else
  {
    v91 = v90[33];
    if (v91)
      LODWORD(v91) = *(int *)((char *)v851 + v91);
  }
  *(_DWORD *)(a1 + 1128) = v91;
  if (v7[38])
  {
    v92 = (unsigned int **)(v7 + 38);
    if (!v7[39])
      v92 = (unsigned int **)(v7 + 108);
    v93 = *v92;
    if (!*v92)
      goto LABEL_237;
    goto LABEL_159;
  }
  v92 = (unsigned int **)(v7 + 108);
  v93 = (unsigned int *)v7[108];
  if (v93)
  {
LABEL_159:
    if (v92[1])
    {
      v94 = (int *)((char *)v93 + *v93);
      v95 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v95 < 0xDu)
      {
        LODWORD(v96) = 0;
      }
      else
      {
        v96 = v95[6];
        if (v96)
          LODWORD(v96) = *(int *)((char *)v94 + v96);
      }
      *(_DWORD *)(a1 + 1052) = v96;
      v97 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v97 < 0xBu)
      {
        LODWORD(v98) = 0;
      }
      else
      {
        v98 = v97[5];
        if (v98)
          LODWORD(v98) = *(int *)((char *)v94 + v98);
      }
      *(_DWORD *)(a1 + 1060) = v98;
      v99 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v99 < 0x11u)
      {
        LODWORD(v100) = 0;
      }
      else
      {
        v100 = v99[8];
        if (v100)
          LODWORD(v100) = *(int *)((char *)v94 + v100);
      }
      *(_DWORD *)(a1 + 1064) = v100;
      v101 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v101 < 0x13u)
      {
        LODWORD(v102) = 0;
      }
      else
      {
        v102 = v101[9];
        if (v102)
          LODWORD(v102) = *(int *)((char *)v94 + v102);
      }
      *(_DWORD *)(a1 + 1068) = v102;
      v103 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v103 < 0x17u)
      {
        LODWORD(v104) = 0;
      }
      else
      {
        v104 = v103[11];
        if (v104)
          LODWORD(v104) = *(int *)((char *)v94 + v104);
      }
      *(_DWORD *)(a1 + 1072) = v104;
      v105 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v105 < 0x1Bu)
      {
        LODWORD(v106) = 0;
      }
      else
      {
        v106 = v105[13];
        if (v106)
          LODWORD(v106) = *(int *)((char *)v94 + v106);
      }
      *(_DWORD *)(a1 + 1076) = v106;
      v107 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v107 < 0x15u)
      {
        LODWORD(v108) = 0;
      }
      else
      {
        v108 = v107[10];
        if (v108)
          LODWORD(v108) = *(int *)((char *)v94 + v108);
      }
      *(_DWORD *)(a1 + 1080) = v108;
      v109 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v109 < 0x19u)
      {
        LODWORD(v110) = 0;
      }
      else
      {
        v110 = v109[12];
        if (v110)
          LODWORD(v110) = *(int *)((char *)v94 + v110);
      }
      *(_DWORD *)(a1 + 1084) = v110;
      v111 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v111 < 0x1Du)
      {
        LODWORD(v112) = 0;
      }
      else
      {
        v112 = v111[14];
        if (v112)
          LODWORD(v112) = *(int *)((char *)v94 + v112);
      }
      *(_DWORD *)(a1 + 1088) = v112;
      v113 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v113 < 0xFu)
      {
        LODWORD(v114) = 0;
      }
      else
      {
        v114 = v113[7];
        if (v114)
          LODWORD(v114) = *(int *)((char *)v94 + v114);
      }
      *(_DWORD *)(a1 + 1092) = v114;
      v115 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v115 < 0x1Fu)
      {
        LODWORD(v116) = 0;
      }
      else
      {
        v116 = v115[15];
        if (v116)
          LODWORD(v116) = *(int *)((char *)v94 + v116);
      }
      *(_DWORD *)(a1 + 1096) = v116;
      v117 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v117 < 0x21u)
      {
        LODWORD(v118) = 0;
      }
      else
      {
        v118 = v117[16];
        if (v118)
          LODWORD(v118) = *(int *)((char *)v94 + v118);
      }
      *(_DWORD *)(a1 + 1100) = v118;
      v119 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v119 < 0x23u)
      {
        LODWORD(v120) = 0;
      }
      else
      {
        v120 = v119[17];
        if (v120)
          LODWORD(v120) = *(int *)((char *)v94 + v120);
      }
      *(_DWORD *)(a1 + 1104) = v120;
      v121 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v121 < 0x25u)
      {
        LODWORD(v122) = 0;
      }
      else
      {
        v122 = v121[18];
        if (v122)
          LODWORD(v122) = *(int *)((char *)v94 + v122);
      }
      *(_DWORD *)(a1 + 1108) = v122;
      v123 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v123 < 0x27u)
      {
        LODWORD(v124) = 0;
      }
      else
      {
        v124 = v123[19];
        if (v124)
          LODWORD(v124) = *(int *)((char *)v94 + v124);
      }
      *(_DWORD *)(a1 + 1112) = v124;
      v125 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v125 < 0x29u)
      {
        LODWORD(v126) = 0;
      }
      else
      {
        v126 = v125[20];
        if (v126)
          LODWORD(v126) = *(int *)((char *)v94 + v126);
      }
      *(_DWORD *)(a1 + 1116) = v126;
      v127 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v127 < 0x2Bu)
      {
        LODWORD(v128) = 0;
      }
      else
      {
        v128 = v127[21];
        if (v128)
          LODWORD(v128) = *(int *)((char *)v94 + v128);
      }
      *(_DWORD *)(a1 + 1120) = v128;
      v129 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v129 < 7u)
      {
        LODWORD(v130) = 0;
      }
      else
      {
        v130 = v129[3];
        if (v130)
          LODWORD(v130) = *(int *)((char *)v94 + v130);
      }
      *(_DWORD *)(a1 + 1124) = v130;
      v131 = (unsigned __int16 *)((char *)v94 - *v94);
      if (*v131 >= 5u && (v132 = v131[2]) != 0)
        v133 = *(int *)((char *)v94 + v132);
      else
        v133 = 0;
      *(_DWORD *)(a1 + 1132) = v133;
    }
  }
LABEL_237:
  if (v7[53])
  {
    v134 = v7[54];
    if (v134)
      v135 = v7[53];
    else
      v135 = v7[123];
    if (v134)
      v136 = v7 + 53;
    else
      v136 = v7 + 123;
  }
  else
  {
    v136 = v7 + 123;
    v135 = v7[123];
  }
  MEMORY[0x234927D34](a1 + 1192, v135, v136[1]);
  std::string::push_back((std::string *)(a1 + 1192), 0);
  v137 = *v851;
  v138 = (char *)v851 - v137;
  v139 = *(unsigned __int16 *)((char *)v851 - v137);
  if (v139 < 0x39)
    goto LABEL_263;
  v140 = -v137;
  v141 = *((unsigned __int16 *)v138 + 28);
  if (v141)
  {
    v142 = (int *)((char *)v851 + v141 + *(unsigned int *)((char *)v851 + v141));
    if (*v142)
    {
      *(_BYTE *)(a1 + 936) = 1;
      v143 = (_DWORD *)((char *)v142 + v142[1] + 4);
      v144 = (unsigned __int16 *)((char *)v143 - *v143);
      if (*v144 >= 9u && (v145 = v144[4]) != 0)
        v146 = *(int *)((char *)v143 + v145);
      else
        v146 = 0;
      *(_DWORD *)(a1 + 1136) = v146;
      *(_BYTE *)(a1 + 1140) = 1;
      v147 = *v851;
      v140 = -v147;
      v139 = *(unsigned __int16 *)((char *)v851 - v147);
    }
  }
  if (v139 < 0x3B)
    goto LABEL_263;
  v148 = (char *)v851 + v140;
  if (*((_WORD *)v148 + 29))
  {
    v149 = (unsigned int *)((char *)v851
                          + *((unsigned __int16 *)v148 + 29)
                          + *(unsigned int *)((char *)v851 + *((unsigned __int16 *)v148 + 29)));
    v150 = *v149;
    if ((_DWORD)v150)
    {
      v151 = v149 + 1;
      do
      {
        v153 = *v151++;
        v152 = v153;
        if (!(v153 >> 20))
          *(_QWORD *)(a1 + 928) |= 1 << v152;
        --v150;
      }
      while (v150);
    }
  }
  if (v139 < 0x57)
  {
LABEL_263:
    LODWORD(v154) = 0;
  }
  else
  {
    v154 = *((unsigned __int16 *)v148 + 43);
    if (*((_WORD *)v148 + 43))
      LODWORD(v154) = *(int *)((char *)v851 + v154);
  }
  *(_DWORD *)(a1 + 300) = v154;
  v155 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v155 >= 0x21u && (v156 = v155[16]) != 0)
    v157 = *(int *)((char *)v851 + v156);
  else
    v157 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 304) = getAdditionalSpillBufferBytes(void)::extra + v157;
  v159 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v159 < 0x59u)
  {
    LODWORD(v160) = 0;
    v161 = v846;
  }
  else
  {
    v160 = v159[44];
    v161 = v846;
    if (v160)
      LODWORD(v160) = *(int *)((char *)v851 + v160);
  }
  *(_DWORD *)(a1 + 332) = v160;
  v162 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v162 < 0x51u)
  {
    LODWORD(v163) = 0;
  }
  else
  {
    v163 = v162[40];
    if (v163)
      LODWORD(v163) = *(int *)((char *)v851 + v163);
  }
  *(_DWORD *)(a1 + 336) = v163;
  v164 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v164 < 0x4Bu)
  {
    LODWORD(v165) = 0;
  }
  else
  {
    v165 = v164[37];
    if (v165)
      LODWORD(v165) = *(int *)((char *)v851 + v165);
  }
  *(_DWORD *)(a1 + 344) = v165;
  v166 = *v851;
  v167 = (_WORD *)((char *)v851 - v166);
  v168 = *(unsigned __int16 *)((char *)v851 - v166);
  if (v168 < 0x25)
    goto LABEL_291;
  if (v167[18] && *((_BYTE *)v851 + (unsigned __int16)v167[18]))
  {
    if (v168 < 0x27)
    {
      v172 = 0;
      v170 = 1;
      goto LABEL_293;
    }
    LODWORD(v169) = (unsigned __int16)v167[19];
    v170 = 1;
    if (!v167[19])
      goto LABEL_292;
    goto LABEL_1204;
  }
  if (v168 < 0x27)
  {
LABEL_291:
    v170 = 0;
    goto LABEL_292;
  }
  v169 = (unsigned __int16)v167[19];
  if (!v167[19] || (v171 = *((unsigned __int8 *)v851 + v169), !*((_BYTE *)v851 + v169)))
  {
    if (v168 >= 0x29 && v167[20])
    {
      v170 = *((_BYTE *)v851 + (unsigned __int16)v167[20]) != 0;
      if (!v167[19])
        goto LABEL_292;
      goto LABEL_1204;
    }
    v170 = 0;
    if (v167[19])
    {
LABEL_1204:
      v171 = *((unsigned __int8 *)v851 + v169);
      goto LABEL_1205;
    }
LABEL_292:
    v172 = 0;
    goto LABEL_293;
  }
  v170 = 1;
LABEL_1205:
  v172 = v171 != 0;
LABEL_293:
  *(_BYTE *)(a1 + 354) = v172;
  v173 = (unsigned __int16 *)((char *)v161 - *v161);
  v174 = *v173;
  if (v174 < 0x21)
  {
    v176 = 0;
    LODWORD(v175) = 0;
  }
  else
  {
    v175 = v173[16];
    if (v173[16])
      LODWORD(v175) = *(int *)((char *)v161 + v175);
    if (v174 < 0x4D)
    {
      v176 = 0;
    }
    else
    {
      v176 = v173[38];
      if (v173[38])
        v176 = *(unsigned int *)((char *)v161 + v176);
    }
  }
  *(_QWORD *)(a1 + 384) = v175 | (unint64_t)(v176 << 32);
  *(_BYTE *)(a1 + 358) = v170 || v172;
  if (v168 < 0x37)
  {
    LOBYTE(v177) = 0;
  }
  else
  {
    v177 = (unsigned __int16)v167[27];
    if (v167[27])
      LOBYTE(v177) = *((_BYTE *)v851 + v177) != 0;
  }
  *(_BYTE *)(a1 + 353) = v177;
  if (v174 < 0x33)
  {
    LOBYTE(v178) = 0;
  }
  else
  {
    v178 = v173[25];
    if (v173[25])
      LOBYTE(v178) = *((_BYTE *)v161 + v178) != 0;
  }
  v179 = -v166;
  *(_BYTE *)(a1 + 359) = v178;
  if (v168 < 0x3F)
  {
    LOBYTE(v180) = 0;
  }
  else
  {
    v180 = (unsigned __int16)v167[31];
    if (v180)
    {
      v181 = (unsigned int *)((char *)v851 + v180 + *(unsigned int *)((char *)v851 + v180));
      v180 = *v181;
      if ((_DWORD)v180)
      {
        v182 = v181 + 1;
        while (1)
        {
          v184 = *v182++;
          v183 = v184;
          if (v184 < 0x36 && ((0x3F000000000777uLL >> v183) & 1) != 0)
            break;
          if (!--v180)
            goto LABEL_318;
        }
        LOBYTE(v180) = 1;
      }
    }
  }
LABEL_318:
  *(_BYTE *)(a1 + 361) = v180;
  if (v174 <= 0x14)
  {
    *(_BYTE *)(a1 + 355) = 0;
    *(_BYTE *)(a1 + 1017) = 0;
    *(_BYTE *)(a1 + 1019) = 0;
    if (v168 >= 0x21)
      goto LABEL_353;
LABEL_356:
    v206 = 0;
    goto LABEL_357;
  }
  v185 = v173[10];
  if (v173[10])
    LOBYTE(v185) = *((_BYTE *)v161 + v185) != 0;
  *(_BYTE *)(a1 + 355) = v185;
  if (v174 < 0x25)
  {
    *(_BYTE *)(a1 + 1017) = 0;
    if (v174 < 0x23)
    {
LABEL_351:
      *(_BYTE *)(a1 + 1019) = 0;
LABEL_352:
      if (v168 < 0x21)
        goto LABEL_356;
      goto LABEL_353;
    }
  }
  else
  {
    v186 = v173[18];
    if (v173[18])
      LOBYTE(v186) = *((_BYTE *)v161 + v186) != 0;
    *(_BYTE *)(a1 + 1017) = v186;
  }
  v187 = v173[17];
  if (!v187)
    goto LABEL_351;
  *(_BYTE *)(a1 + 1019) = 1;
  v188 = (unsigned int *)((char *)v161 + v187);
  v189 = *v188;
  v191 = (unsigned int *)((char *)v188 + v189 + 4);
  v190 = *(unsigned int *)((char *)v188 + v189);
  if (!(_DWORD)v190)
    goto LABEL_352;
  v192 = &v191[v190];
  do
  {
    v193 = (int *)((char *)v191 + *v191);
    v194 = (unsigned __int16 *)((char *)v193 - *v193);
    v195 = *v194;
    if (v195 < 7)
    {
      v196 = 0;
      v198 = 0;
      if (v195 < 5)
        goto LABEL_340;
      v197 = v194[2];
      if (v197)
        goto LABEL_339;
    }
    else if (v194[3])
    {
      v196 = *(int *)((char *)v193 + v194[3]);
      v197 = v194[2];
      if (v197)
        goto LABEL_339;
    }
    else
    {
      v196 = 0;
      v197 = v194[2];
      if (v197)
      {
LABEL_339:
        v198 = *(int *)((char *)v193 + v197);
        goto LABEL_340;
      }
    }
    v198 = 0;
LABEL_340:
    v199 = v857;
    while (1)
    {
      v200 = *v199;
      v201 = v199;
      if (!*v199)
        break;
      while (1)
      {
        v199 = (uint64_t **)v200;
        v202 = *((_DWORD *)v200 + 7);
        if (v198 < v202)
          break;
        if (v202 >= v198)
        {
          v203 = v199;
          goto LABEL_332;
        }
        v200 = v199[1];
        if (!v200)
        {
          v201 = v199 + 1;
          goto LABEL_346;
        }
      }
    }
LABEL_346:
    v203 = operator new(0x28uLL);
    v203[7] = v198;
    v203[8] = 0;
    *(_QWORD *)v203 = 0;
    *((_QWORD *)v203 + 1) = 0;
    *((_QWORD *)v203 + 2) = v199;
    *v201 = (uint64_t *)v203;
    v204 = **(_QWORD **)(a1 + 1024);
    v205 = (uint64_t *)v203;
    if (v204)
    {
      *(_QWORD *)(a1 + 1024) = v204;
      v205 = *v201;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1032), v205);
    ++*(_QWORD *)(a1 + 1040);
LABEL_332:
    v203[8] = v196;
    ++v191;
  }
  while (v191 != v192);
  v207 = *v851;
  v179 = -v207;
  v7 = v861;
  if (*(unsigned __int16 *)((char *)v851 - v207) < 0x21u)
    goto LABEL_356;
LABEL_353:
  if (!*(_WORD *)((char *)v851 + v179 + 32))
    goto LABEL_356;
  v206 = *(int *)((char *)v851 + *(unsigned __int16 *)((char *)v851 + v179 + 32));
LABEL_357:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  v209 = getAdditionalSpillBufferBytes(void)::extra + v206;
  *(_DWORD *)(a1 + 296) = getAdditionalSpillBufferBytes(void)::extra + v206;
  v210 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v210 < 0x43u)
  {
    LODWORD(v211) = 0;
    v212 = v846;
  }
  else
  {
    v211 = v210[33];
    v212 = v846;
    if (v211)
      LODWORD(v211) = *(int *)((char *)v851 + v211);
  }
  *(_DWORD *)(a1 + 308) = v211;
  v213 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v213 < 5u)
  {
    LODWORD(v214) = 0;
  }
  else
  {
    v214 = v213[2];
    if (v214)
      LODWORD(v214) = *(int *)((char *)v851 + v214);
  }
  *(_DWORD *)(a1 + 292) = v214;
  v215 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v215 < 0x51u)
  {
    LODWORD(v216) = 0;
  }
  else
  {
    v216 = v215[40];
    if (v216)
      LODWORD(v216) = *(int *)((char *)v851 + v216);
  }
  *(_DWORD *)(a1 + 328) = v216;
  v217 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*v217 < 0x4Fu)
  {
    LODWORD(v218) = 0;
  }
  else
  {
    v218 = v217[39];
    if (v218)
      LODWORD(v218) = *(int *)((char *)v851 + v218);
  }
  *(_DWORD *)(a1 + 340) = v218;
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a4 + 428);
  v219 = (unsigned __int16 *)((char *)v851 - *v851);
  if (*(int *)((char *)v851 + v219[6] + *(unsigned int *)((char *)v851 + v219[6])) | v209)
    v220 = 1;
  else
    v220 = v170;
  if ((v220 & 1) != 0)
  {
    LOBYTE(v221) = 1;
    goto LABEL_396;
  }
  v222 = *v219;
  if (v222 < 0x21)
  {
    v224 = 0;
    v225 = 0;
    v223 = (_DWORD *)&unk_255FF8000;
    goto LABEL_389;
  }
  v223 = &unk_255FF8000;
  if (v219[16])
  {
    v224 = *(int *)((char *)v851 + v219[16]);
    if (v222 >= 0x43)
    {
LABEL_386:
      if (v219[33])
      {
        v225 = *(int *)((char *)v851 + v219[33]);
        goto LABEL_389;
      }
    }
  }
  else
  {
    v224 = 0;
    if (v222 >= 0x43)
      goto LABEL_386;
  }
  v225 = 0;
LABEL_389:
  {
    v223[740] = 0;
  }
  if (v225 + v224 + v223[740])
  {
    LOBYTE(v221) = 1;
    v212 = v846;
  }
  else
  {
    v227 = (unsigned __int16 *)((char *)v851 - *v851);
    v212 = v846;
    if (*v227 < 0x5Fu)
    {
      LOBYTE(v221) = 0;
    }
    else
    {
      v221 = v227[47];
      if (v221)
        LOBYTE(v221) = *((_BYTE *)v851 + v221) != 0;
    }
  }
LABEL_396:
  *(_BYTE *)(a1 + 352) = v221;
  v228 = (unsigned __int16 *)((char *)v212 - *v212);
  if (*v228 < 0x11u)
  {
    LODWORD(v229) = 0;
  }
  else
  {
    v229 = v228[8];
    if (v229)
      LODWORD(v229) = *(int *)((char *)v212 + v229);
  }
  *(_DWORD *)(a1 + 840) = v229;
  if ((v230 & 1) == 0
  {
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
  }
  v231 = (_OWORD *)(a1 + 696);
  v232 = (const void **)(v7 + 3);
  if (v7[3])
  {
    if (v7[4])
      v233 = v7 + 3;
    else
      v233 = v7 + 73;
  }
  else
  {
    v233 = v7 + 73;
  }
  AGX::Heap<true>::allocateImpl(__dst, a2 + 4680, v233[1]+ AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (_QWORD *)(a1 + 896));
  *(_DWORD *)(a1 + 920) += *(_DWORD *)&__dst[16];
  v234 = *(_OWORD *)&__dst[16];
  *v231 = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 712) = v234;
  *(_OWORD *)(a1 + 721) = *(_OWORD *)&__dst[25];
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 696);
  v849 = a2 + 4680;
  *(_QWORD *)(a1 + 520) = a2 + 4680;
  v235 = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(a1 + 528) = *v231;
  *(_OWORD *)(a1 + 544) = v235;
  *(_OWORD *)(a1 + 553) = *(_OWORD *)(a1 + 721);
  if (*v232)
  {
    v236 = v7[4];
    if (v236)
      v237 = *v232;
    else
      v237 = (const void *)v7[73];
    if (v236)
      v238 = v7 + 3;
    else
      v238 = v7 + 73;
  }
  else
  {
    v238 = v7 + 73;
    v237 = (const void *)v7[73];
  }
  v239 = v855;
  v850 = a2 + 4512;
  memcpy(*(void **)(a1 + 704), v237, v238[1]);
  v240 = *(_QWORD *)(a1 + 704);
  v241 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 504) = v240;
  *(_QWORD *)(a1 + 512) = v241;
  v242 = (const void **)(v7 + 8);
  if (v7[8])
  {
    if (v7[9])
      v243 = v7 + 8;
    else
      v243 = v7 + 78;
    v244 = v243[1];
    if (!v244)
      goto LABEL_430;
  }
  else
  {
    v244 = v7[79];
    if (!v244)
      goto LABEL_430;
  }
  AGX::Heap<true>::allocateImpl(__dst, v850, v244, (_QWORD *)(a1 + 904));
  *(_DWORD *)(a1 + 920) += *(_DWORD *)&__dst[16];
  v245 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(a1 + 744) = *(_OWORD *)__dst;
  *(_OWORD *)(a1 + 760) = v245;
  *(_OWORD *)(a1 + 769) = *(_OWORD *)&__dst[25];
  v246 = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 744);
  *(_OWORD *)(a1 + 592) = v246;
  *(_OWORD *)(a1 + 601) = *(_OWORD *)(a1 + 769);
  if (*v242)
  {
    v247 = v7[9];
    if (v247)
      v248 = *v242;
    else
      v248 = (const void *)v7[78];
    if (v247)
      v249 = v7 + 8;
    else
      v249 = v7 + 78;
  }
  else
  {
    v249 = v7 + 78;
    v248 = (const void *)v7[78];
  }
  memcpy(*(void **)(a1 + 752), v248, v249[1]);
LABEL_430:
  v250 = (const void **)(v7 + 13);
  if (v7[13])
  {
    if (v7[14])
      v251 = v7 + 13;
    else
      v251 = v7 + 83;
    v252 = v251[1];
    if (v252)
      goto LABEL_435;
LABEL_443:
    if (!*(_BYTE *)(a1 + 480))
      goto LABEL_447;
LABEL_448:
    {
      {
        v260 = v840;
        if (*(char *)(a1 + 431) < 0)
          v260 = (_QWORD *)*v840;
        v261 = v838;
        if (*(char *)(a1 + 479) < 0)
          v261 = (std::string *)v838->__r_.__value_.__r.__words[0];
        v262 = v839;
        if (*(char *)(a1 + 455) < 0)
          v262 = (_QWORD *)*v839;
        v263 = *(_DWORD *)(a1 + 392);
        v264 = *(_QWORD *)(a1 + 488);
        v265 = *(_QWORD *)(a1 + 712);
        *(_DWORD *)__dst = 136447490;
        *(_QWORD *)&__dst[4] = v260;
        *(_WORD *)&__dst[12] = 2082;
        *(_QWORD *)&__dst[14] = v261;
        *(_WORD *)&__dst[22] = 2082;
        *(_QWORD *)&__dst[24] = v262;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v263;
        *(_WORD *)&__dst[38] = 2050;
        *(_QWORD *)&__dst[40] = v264;
        v869 = 2050;
        v870 = v265;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v259, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    v266 = *(_QWORD *)(a1 + 8);
    v267 = v840;
    if (*(char *)(a1 + 431) < 0)
      v267 = (_QWORD *)*v840;
    v268 = v838;
    if (*(char *)(a1 + 479) < 0)
      v268 = (std::string *)v838->__r_.__value_.__r.__words[0];
    v269 = v839;
    if (*(char *)(a1 + 455) < 0)
      v269 = (_QWORD *)*v839;
    v270 = *(_DWORD *)(a1 + 392);
    v271 = *(_QWORD *)(a1 + 488);
    v272 = *(_QWORD *)(a1 + 712);
    v273 = *(_BYTE *)(a1 + 480);
    *(_QWORD *)__dst = v267;
    *(_QWORD *)&__dst[8] = v268;
    *(_QWORD *)&__dst[16] = v269;
    *(_DWORD *)&__dst[24] = v270;
    *(_QWORD *)&__dst[32] = v271;
    *(_QWORD *)&__dst[40] = v272;
    LOBYTE(v869) = v273;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v266, a1, (__int128 *)__dst);
  }
  else
  {
    v252 = v7[84];
    if (!v252)
      goto LABEL_443;
LABEL_435:
    AGX::Heap<true>::allocateImpl(__dst, v850, v252, (_QWORD *)(a1 + 912));
    *(_DWORD *)(a1 + 920) += *(_DWORD *)&__dst[16];
    v253 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 792) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 808) = v253;
    *(_OWORD *)(a1 + 817) = *(_OWORD *)&__dst[25];
    v254 = *(_OWORD *)(a1 + 808);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a1 + 792);
    *(_OWORD *)(a1 + 640) = v254;
    *(_OWORD *)(a1 + 649) = *(_OWORD *)(a1 + 817);
    if (*v250)
    {
      v255 = v7[14];
      if (v255)
        v256 = *v250;
      else
        v256 = (const void *)v7[83];
      if (v255)
        v257 = v7 + 13;
      else
        v257 = v7 + 83;
    }
    else
    {
      v257 = v7 + 83;
      v256 = (const void *)v7[83];
    }
    memcpy(*(void **)(a1 + 800), v256, v257[1]);
    v258 = *(_QWORD *)(a1 + 808);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a1 + 792);
    *(_QWORD *)(a1 + 688) = v258;
    if (*(_BYTE *)(a1 + 480))
      goto LABEL_448;
LABEL_447:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 6681))
      goto LABEL_448;
  }
  v274 = *(_DWORD *)(a4 + 124);
  v275 = *(_DWORD *)(a4 + 132);
  v276 = *(_DWORD *)(a4 + 144);
  if (*(_BYTE *)(a4 + 184))
    v277 = *(_DWORD *)(a4 + 144);
  else
    v277 = 0;
  v278 = *(_DWORD *)(a4 + 140);
  if (!*(_QWORD *)(a4 + 168))
    v276 = 0;
  v279 = *(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128) + *(_DWORD *)(a4 + 136);
  v280 = v277 + *(_DWORD *)(a4 + 148) + v276 + *(_DWORD *)(a4 + 152) + ((v274 + v275 + v278 - v279 + 1) & 0xFFFFFFFE);
  v281 = *(_QWORD *)(a1 + 48);
  v282 = (*(_QWORD *)(a1 + 56) - v281) >> 2;
  if (v280 <= v282)
  {
    v283 = v851;
    if (v280 < v282)
      *(_QWORD *)(a1 + 56) = v281 + 4 * v280;
  }
  else
  {
    std::vector<unsigned int>::__append(v855, v280 - v282);
    v274 = *(_DWORD *)(a4 + 124);
    v275 = *(_DWORD *)(a4 + 132);
    v278 = *(_DWORD *)(a4 + 140);
    v279 = *(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128) + *(_DWORD *)(a4 + 136);
    v283 = v851;
  }
  *(_DWORD *)(a1 + 312) = v274 + v275 + v278 - v279;
  v284 = *v283;
  v285 = *(unsigned __int16 *)((char *)v283 - v284 + 16);
  v286 = *(unsigned int *)((char *)v283 + v285);
  v287 = *(unsigned int *)((char *)v283 + v285 + v286);
  if ((_DWORD)v287)
  {
    v288 = 4 * v287;
    v289 = v285 + v286;
    while (1)
    {
      v291 = *(unsigned int *)((char *)v283 + v289 + 4);
      v292 = (char *)v283 + v289 + v291;
      v293 = v291 - *((int *)v292 + 1);
      v294 = (char *)v283 + v289 + v293;
      v295 = *((unsigned __int16 *)v294 + 2);
      if (v295 < 7)
        break;
      v296 = *((unsigned __int16 *)v294 + 5);
      if (!v296 || (*(int *)((char *)v283 + v289 + v291 + v296 + 4) & 0x80000000) == 0)
      {
        if (v295 <= 8)
        {
          v300 = -*(_DWORD *)(a4 + 120);
        }
        else
        {
          if (*(_WORD *)((char *)v283 + v289 + v293 + 12))
            v297 = *(int *)((char *)v283 + v289 + v291 + *(unsigned __int16 *)((char *)v283 + v289 + v293 + 12) + 4);
          else
            v297 = 0;
          v300 = ((v297 >> 1) & 0x1FFFFFFF) - *(_DWORD *)(a4 + 120);
        }
LABEL_490:
        v301 = *(unsigned __int16 *)((char *)v283 + v289 + v293 + 8);
        if (*(_WORD *)((char *)v283 + v289 + v293 + 8))
          LODWORD(v301) = *((char *)v283 + v289 + v291 + v301 + 4);
        if (v295 >= 7 && (v302 = *(unsigned __int16 *)((char *)v283 + v289 + v293 + 10)) != 0)
        {
          v298 = *(int *)((char *)v283 + v289 + v291 + v302 + 4);
          if ((_DWORD)v301 != 6)
          {
            v299 = 0;
            goto LABEL_499;
          }
LABEL_497:
          v299 = 31;
        }
        else
        {
          v298 = 0;
          if ((_DWORD)v301 == 6)
            goto LABEL_497;
          v299 = 0;
        }
LABEL_499:
        if (v299 + (v298 & 0xFFFFF))
          v303 = 3;
        else
          v303 = 0;
        begin = v855->__begin_;
        v855->__begin_[v300] = v303;
        begin[v300 + 1] = v303 + 1;
        begin[v300 + 2] = v303 + 2;
        v305 = v291 - *((int *)v292 + 1);
        v306 = (char *)v283 + v289 + v305;
        if (*((unsigned __int16 *)v306 + 2) >= 0xBu)
        {
          v307 = *((unsigned __int16 *)v306 + 7);
          if (v307)
          {
            if (*((_BYTE *)v283 + v289 + v291 + v307 + 4))
            {
              v308 = *(unsigned __int16 *)((char *)v283 + v289 + v305 + 10);
              if (v308)
                v290 = *(int *)((char *)v283 + v289 + v291 + v308 + 4);
              else
                LOBYTE(v290) = 0;
              *(_QWORD *)(a1 + 376) |= 1 << v290;
            }
          }
        }
      }
      v289 += 4;
      v288 -= 4;
      if (!v288)
      {
        v284 = *v283;
        goto LABEL_508;
      }
    }
    v298 = 0;
    v299 = 0;
    v300 = -*(_DWORD *)(a4 + 120);
    if (v295 >= 5)
      goto LABEL_490;
    goto LABEL_499;
  }
LABEL_508:
  v309 = -v284;
  v310 = (char *)v283 + v309;
  if (*(_BYTE *)(a1 + 354))
  {
    v311 = *((unsigned __int16 *)v310 + 12);
    v312 = *(unsigned int *)((char *)v283 + v311);
    v313 = (unsigned int *)((char *)v283 + v311 + v312);
    v314 = *v313;
    if ((_DWORD)v314)
    {
      v315 = 0;
      v316 = 4 * v314;
      v317 = (char *)v283 + v311 + v312;
      while (1)
      {
        v318 = v313[v315 / 4 + 1];
        v319 = v318 - *(int *)((char *)&v313[v315 / 4 + 1] + v318);
        v320 = &v317[v315 + v319];
        v321 = *((unsigned __int16 *)v320 + 2);
        if (v321 >= 5)
        {
          v322 = *((unsigned __int16 *)v320 + 4);
          if (v322)
          {
            if (v317[v315 + 4 + v318 + v322] == 93)
            {
              if (v321 < 7)
                break;
              v323 = *(unsigned __int16 *)&v317[v315 + 10 + v319];
              if (!v323)
                break;
              v324 = *(_DWORD *)&v317[v315 + 4 + v318 + v323];
              if ((v324 & 0x80000000) == 0 && (v324 & 0xFFF00000) != 0x400000)
                break;
            }
          }
        }
        v315 += 4;
        if (v316 == v315)
          goto LABEL_520;
      }
      *(_QWORD *)(a1 + 376) |= *(_QWORD *)(a1 + 384);
    }
  }
LABEL_520:
  v325 = *((unsigned __int16 *)v310 + 10);
  v326 = *(unsigned int *)((char *)v283 + v325);
  v327 = *(unsigned int *)((char *)v283 + v325 + v326);
  if (!(_DWORD)v327)
    goto LABEL_532;
  v328 = 4 * v327;
  v329 = v325 + v326;
  while (2)
  {
    v331 = *(unsigned int *)((char *)v283 + v329 + 4);
    v332 = v331 - *(int *)((char *)v283 + v329 + v331 + 4);
    v333 = (char *)v283 + v329 + v332;
    v334 = *((unsigned __int16 *)v333 + 2);
    if (v334 < 7)
      goto LABEL_522;
    v335 = *((unsigned __int16 *)v333 + 5);
    if (v335 && *(int *)((char *)v283 + v329 + v331 + v335 + 4) < 0)
      goto LABEL_524;
    if (v334 < 9 || (v336 = *(unsigned __int16 *)((char *)v283 + v329 + v332 + 12)) == 0)
    {
LABEL_522:
      v330 = 0;
      goto LABEL_523;
    }
    v330 = *(int *)((char *)v283 + v329 + v331 + v336 + 4);
LABEL_523:
    v855->__begin_[((v330 >> 1) & 0x1FFFFFFF) + *(_DWORD *)(a4 + 124) - (*(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128))] = 6;
LABEL_524:
    v329 += 4;
    v328 -= 4;
    if (v328)
      continue;
    break;
  }
  v309 = -(uint64_t)*v283;
LABEL_532:
  v337 = (unsigned int *)((char *)v283 + *(unsigned __int16 *)((char *)v283 + v309 + 12));
  v338 = *v337;
  v340 = (unsigned int *)((char *)v337 + v338 + 4);
  v339 = *(unsigned int *)((char *)v337 + v338);
  if ((_DWORD)v339)
  {
    v341 = &v340[v339];
    while (1)
    {
      v342 = (int *)((char *)v340 + *v340);
      v343 = (unsigned __int16 *)((char *)v342 - *v342);
      v344 = *v343;
      if (v344 < 7)
      {
        LODWORD(v345) = 0;
        goto LABEL_544;
      }
      if (!v343[3] || (*(int *)((char *)v342 + v343[3]) & 0x80000000) == 0)
        break;
LABEL_536:
      if (++v340 == v341)
        goto LABEL_576;
    }
    if (v344 < 9)
    {
      LODWORD(v345) = 0;
      goto LABEL_545;
    }
    v345 = v343[4];
    if (v343[4])
    {
      LODWORD(v345) = *(int *)((char *)v342 + v345);
      goto LABEL_545;
    }
LABEL_544:
    if (v344 < 7)
    {
      v346 = 0;
    }
    else
    {
LABEL_545:
      v346 = v343[3];
      if (v346)
      {
        v346 = *(int *)((char *)v342 + v346) & 0xFFFFF;
        switch(v346)
        {
          case '1':
            v347 = 11;
            goto LABEL_553;
          case '5':
            v347 = 13;
            goto LABEL_553;
          case '2':
            v347 = 12;
LABEL_553:
            v348 = ((v345 >> 1) & 0x1FFFFFFF)
                 + *(_DWORD *)(a4 + 124)
                 + *(_DWORD *)(a4 + 132)
                 - (*(_DWORD *)(a4 + 120)
                  + *(_DWORD *)(a4 + 128)
                  + *(_DWORD *)(a4 + 136));
            v239->__begin_[v348] = v347;
            v349 = (unsigned __int16 *)((char *)v342 - *v342);
            if (*v349 >= 0xBu)
            {
              v350 = v349[5];
              if (v350)
              {
                if (*((_BYTE *)v342 + v350))
                  *v843 |= 1 << v346;
              }
            }
            if (*(_BYTE *)(a1 + 1019))
            {
              v351 = *v857;
              if (!*v857)
LABEL_1206:
                abort();
              v352 = (2 * v348) | 1;
              while (1)
              {
                while (1)
                {
                  v353 = *((unsigned int *)v351 + 7);
                  if (v346 >= v353)
                    break;
                  v351 = (uint64_t *)*v351;
                  if (!v351)
                    goto LABEL_1206;
                }
                if (v353 >= v346)
                  break;
                v351 = (uint64_t *)v351[1];
                if (!v351)
                  goto LABEL_1206;
              }
              v354 = *((_DWORD *)v351 + 8);
              v355 = v853;
              while (1)
              {
                v356 = *v355;
                v357 = v355;
                if (!*v355)
                  break;
                while (1)
                {
                  v355 = (uint64_t **)v356;
                  v358 = *((_DWORD *)v356 + 7);
                  if (v352 < v358)
                    break;
                  if (v358 >= v352)
                  {
                    v359 = v355;
                    goto LABEL_535;
                  }
                  v356 = v355[1];
                  if (!v356)
                  {
                    v357 = v355 + 1;
                    goto LABEL_571;
                  }
                }
              }
LABEL_571:
              v359 = operator new(0x28uLL);
              v359[7] = v352;
              v359[8] = 0;
              *(_QWORD *)v359 = 0;
              *((_QWORD *)v359 + 1) = 0;
              *((_QWORD *)v359 + 2) = v355;
              *v357 = (uint64_t *)v359;
              v360 = **(_QWORD **)(a1 + 264);
              v361 = (uint64_t *)v359;
              if (v360)
              {
                *(_QWORD *)(a1 + 264) = v360;
                v361 = *v357;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v361);
              ++*(_QWORD *)(a1 + 280);
LABEL_535:
              v7 = v861;
              v359[8] = v354;
              v239 = v855;
            }
            goto LABEL_536;
        }
      }
    }
    v347 = 7;
    goto LABEL_553;
  }
LABEL_576:
  v362 = *(_QWORD *)(a4 + 160);
  v363 = v846;
  if (v362)
  {
    v364 = *(_DWORD *)(a4 + 144);
    if (*(_BYTE *)(a4 + 184))
    {
      if (!v364)
      {
        v372 = *(_QWORD *)(a4 + 168);
        goto LABEL_592;
      }
      v365 = (*(_DWORD *)(a4 + 124)
            + *(_DWORD *)(a4 + 132)
            + *(_DWORD *)(a4 + 140)
            - (*(_DWORD *)(a4 + 120)
             + *(_DWORD *)(a4 + 128)
             + *(_DWORD *)(a4 + 136))
            + 1) & 0xFFFFFFFE;
      v366 = v239->__begin_;
      v367 = *(_QWORD *)(a4 + 160);
      do
      {
        v368 = __clz(__rbit64(v367));
        v369 = 1 << v368;
        if (v368)
          v370 = 3;
        else
          v370 = 0;
        v366[v365] = v370;
        v366[v365 + 1] = v370 + 1;
        v366[v365 + 2] = v370 + 2;
        v365 += 4;
        v367 &= ~v369;
      }
      while (v367);
      v364 = *(_DWORD *)(a4 + 144);
      v371 = v364;
      v372 = *(_QWORD *)(a4 + 168);
      if (!v372)
      {
LABEL_592:
        *(_QWORD *)(a1 + 376) |= v372;
        goto LABEL_593;
      }
    }
    else
    {
      v371 = 0;
      v372 = *(_QWORD *)(a4 + 168);
      if (!v372)
        goto LABEL_592;
    }
    if (v364)
    {
      v373 = ((*(_DWORD *)(a4 + 140)
             + *(_DWORD *)(a4 + 132)
             - (*(_DWORD *)(a4 + 136)
              + *(_DWORD *)(a4 + 128)
              + *(_DWORD *)(a4 + 120))
             + *(_DWORD *)(a4 + 124)
             + 1) & 0xFFFFFFFE)
           + v371;
      v374 = v239->__begin_;
      do
      {
        v374[v373] = 3;
        v374[v373 + 1] = 4;
        v374[v373 + 2] = 5;
        v373 += 4;
        v362 &= v362 - 1;
      }
      while (v362);
    }
    goto LABEL_592;
  }
LABEL_593:
  if (*(_DWORD *)(a4 + 148))
  {
    v375 = *(_QWORD *)(a4 + 176);
    if (v375)
    {
      if (*(_BYTE *)(a4 + 184))
        v376 = *(_DWORD *)(a4 + 144);
      else
        v376 = 0;
      if (*(_QWORD *)(a4 + 168))
        v377 = *(_DWORD *)(a4 + 144);
      else
        v377 = 0;
      v378 = v376
           + v377
           + ((*(_DWORD *)(a4 + 124)
             + *(_DWORD *)(a4 + 132)
             + *(_DWORD *)(a4 + 140)
             - (*(_DWORD *)(a4 + 120)
              + *(_DWORD *)(a4 + 128)
              + *(_DWORD *)(a4 + 136))
             + 1) & 0xFFFFFFFE);
      v379 = v239->__begin_;
      do
      {
        v379[v378++] = 6;
        v375 &= v375 - 1;
      }
      while (v375);
    }
  }
  v380 = v851;
  v381 = *v851;
  if (*(_BYTE *)(a4 + 427))
  {
    v382 = (unsigned __int16 *)((char *)v851 - v381);
    if (*v382 < 0x67u)
    {
      v383 = 0;
    }
    else
    {
      v383 = v382[51];
      if (v383)
        v383 = *(_QWORD *)((char *)v851 + v383);
    }
    v384 = 128 - 2 * __clz(v383);
    if (*(_DWORD *)(a1 + 208) > v384)
      v384 = *(_DWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 208) = v384;
    v385 = (unsigned __int16 *)((char *)v851 - *v851);
    if (*v385 < 0x17u)
    {
      LODWORD(v386) = 0;
    }
    else
    {
      v386 = v385[11];
      if (v386)
        v386 = ((unint64_t)*(unsigned int *)((char *)v851 + v386) + 3) >> 2;
    }
    *(_DWORD *)(a1 + 200) = v386;
    *(_DWORD *)(a1 + 204) = 14;
    v380 = v851;
    v381 = *v851;
  }
  v387 = (unsigned __int16 *)((char *)v380 - v381);
  if (*v387 >= 0x17u && (v388 = v387[11]) != 0)
  {
    v389 = ((unint64_t)*(unsigned int *)((char *)v851 + v388) + 3) >> 2;
    v390 = (_QWORD *)(a1 + 80);
    v391 = *(_QWORD *)(a1 + 72);
    v392 = (*(_QWORD *)(a1 + 80) - v391) >> 2;
    if (v389 > v392)
    {
      std::vector<unsigned int>::__append(v832, v389 - v392);
      goto LABEL_622;
    }
  }
  else
  {
    v389 = 0;
    v390 = (_QWORD *)(a1 + 80);
    v391 = *(_QWORD *)(a1 + 72);
    v392 = (*(_QWORD *)(a1 + 80) - v391) >> 2;
  }
  if (v392 > v389)
    *v390 = v391 + 4 * v389;
LABEL_622:
  if (v836 != (_QWORD *)(a4 + 192))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v836, *(char **)(a4 + 192), *(char **)(a4 + 200), (uint64_t)(*(_QWORD *)(a4 + 200) - *(_QWORD *)(a4 + 192)) >> 2);
  if (v835 != (_QWORD *)(a4 + 216))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v835, *(char **)(a4 + 216), *(char **)(a4 + 224), (uint64_t)(*(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216)) >> 2);
  if (v834 != (_QWORD *)(a4 + 296))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v834, *(char **)(a4 + 296), *(char **)(a4 + 304), (uint64_t)(*(_QWORD *)(a4 + 304) - *(_QWORD *)(a4 + 296)) >> 1);
  if (v833 != (_QWORD *)(a4 + 344))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v833, *(char **)(a4 + 344), *(char **)(a4 + 352), (uint64_t)(*(_QWORD *)(a4 + 352) - *(_QWORD *)(a4 + 344)) >> 1);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a4 + 392);
  *(_BYTE *)(a1 + 356) = *(_QWORD *)(a4 + 160) != 0;
  *(_BYTE *)(a1 + 357) = *(_QWORD *)(a4 + 148) != 0;
  v393 = *(unsigned __int16 *)((char *)v851 - *v851 + 24);
  v394 = *(unsigned int *)((char *)v851 + v393);
  v395 = (unsigned int *)((char *)v851 + v393 + v394);
  v396 = *v395;
  if ((_DWORD)v396)
  {
    v397 = 0;
    v398 = 4 * v396;
    v399 = (char *)v851 + v393 + v394;
    do
    {
      v400 = v395[v397 / 4 + 1];
      v401 = v400 - *(int *)((char *)&v395[v397 / 4 + 1] + v400);
      v402 = &v399[v397 + v401];
      v403 = *((unsigned __int16 *)v402 + 2);
      if (v403 >= 5)
      {
        v404 = *((unsigned __int16 *)v402 + 4);
        if (v404)
        {
          if (v403 >= 7 && v399[v397 + 4 + v400 + v404] == 139)
          {
            if (*(_WORD *)&v399[v397 + 10 + v401])
            {
              v405 = *(_DWORD *)&v399[v397 + 4 + v400 + *(unsigned __int16 *)&v399[v397 + 10 + v401]];
              if (v403 >= 0xB)
                goto LABEL_641;
            }
            else
            {
              LOBYTE(v405) = 0;
              if (v403 >= 0xB)
              {
LABEL_641:
                v406 = *(unsigned __int16 *)&v399[v397 + 14 + v401];
                if (v406 && v399[v397 + 4 + v400 + v406])
                  *v843 |= 1 << v405;
              }
            }
          }
        }
      }
      v397 += 4;
    }
    while (v398 != v397);
  }
  v407 = (unsigned __int16 *)((char *)v846 - *v846);
  if (*v407 >= 0xDu)
  {
    v408 = v407[6];
    if (v408)
    {
      v409 = (int *)((char *)v846 + v408 + *(unsigned int *)((char *)v846 + v408));
      v410 = *v409;
      v411 = *(_BYTE **)(a1 + 944);
      if (v410 > (uint64_t)(*(_QWORD *)(a1 + 960) - (_QWORD)v411) >> 4)
      {
        v412 = *(_BYTE **)(a1 + 952);
        v413 = (char *)operator new(16 * v410);
        v414 = &v413[(v412 - v411) & 0xFFFFFFFFFFFFFFF0];
        v415 = v414;
        if (v412 != v411)
        {
          v416 = &v413[(v412 - v411) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v415 = v416 - 16;
            *((_OWORD *)v416 - 1) = *((_OWORD *)v412 - 1);
            v412 -= 16;
            v416 -= 16;
          }
          while (v412 != v411);
        }
        *(_QWORD *)(a1 + 944) = v415;
        *(_QWORD *)(a1 + 952) = v414;
        *(_QWORD *)(a1 + 960) = &v413[16 * v410];
        v363 = v846;
        if (v411)
          operator delete(v411);
      }
      v417 = (unsigned __int16 *)((char *)v363 - *v363);
      if (*v417 >= 0x41u && (v418 = v417[32]) != 0)
      {
        v419 = (int *)((char *)v363 + v418 + *(unsigned int *)((char *)v363 + v418));
        if (!*v409)
          goto LABEL_683;
      }
      else
      {
        v419 = 0;
        if (!*v409)
          goto LABEL_683;
      }
      v420 = 0;
      v847 = v419 + 1;
      v421 = v409 + 1;
      v858 = v419;
      v852 = v409 + 1;
      do
      {
        if (v419 && *v419)
          v423 = *(_QWORD *)&v847[2 * v420];
        else
          v423 = 0;
        v424 = *(_QWORD *)&v421[2 * v420];
        v425 = *(_QWORD **)(a1 + 952);
        v426 = *(_QWORD *)(a1 + 960);
        if ((unint64_t)v425 < v426)
        {
          *v425 = v424;
          v425[1] = v423;
          v422 = v425 + 2;
        }
        else
        {
          v427 = v409;
          v428 = (_QWORD *)*v845;
          v429 = ((uint64_t)v425 - *v845) >> 4;
          v430 = v429 + 1;
          if ((unint64_t)(v429 + 1) >> 60)
            abort();
          v431 = v426 - (_QWORD)v428;
          if (v431 >> 3 > v430)
            v430 = v431 >> 3;
          if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFF0)
            v432 = 0xFFFFFFFFFFFFFFFLL;
          else
            v432 = v430;
          if (v432)
          {
            if (v432 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v433 = (char *)operator new(16 * v432);
          }
          else
          {
            v433 = 0;
          }
          v434 = &v433[16 * v429];
          *(_QWORD *)v434 = v424;
          *((_QWORD *)v434 + 1) = v423;
          v435 = v434;
          if (v425 == v428)
          {
            v7 = v861;
          }
          else
          {
            v7 = v861;
            do
            {
              *((_OWORD *)v435 - 1) = *((_OWORD *)v425 - 1);
              v435 -= 16;
              v425 -= 2;
            }
            while (v425 != v428);
            v425 = (_QWORD *)*v845;
          }
          *(_QWORD *)(a1 + 944) = v435;
          v422 = v434 + 16;
          *(_QWORD *)(a1 + 952) = v434 + 16;
          *(_QWORD *)(a1 + 960) = &v433[16 * v432];
          v409 = v427;
          if (v425)
            operator delete(v425);
          v419 = v858;
          v421 = v852;
        }
        *(_QWORD *)(a1 + 952) = v422;
        ++v420;
      }
      while (v420 < *v409);
    }
  }
LABEL_683:
  *(_BYTE *)(a1 + 844) = 0;
  if ((__str_16[7] & 0x80000000) != 0)
    operator delete((void *)__str);
  *(_QWORD *)a1 = &off_250401920;
  bzero((void *)(a1 + 1224), 0x2E9uLL);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_DWORD *)(a1 + 2216) = 0;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_OWORD *)(a1 + 2304) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_QWORD *)(a1 + 2808) = a2;
  *(_QWORD *)(a1 + 2816) = 0;
  if (*v842)
  {
    v436 = (unsigned int **)(v7 + 98);
    if (v7[29])
      v436 = v842;
  }
  else
  {
    v436 = (unsigned int **)(v7 + 98);
  }
  v437 = 0;
  if (*v436 && v436[1])
    v437 = (int *)((char *)*v436 + **v436);
  v438 = (unsigned __int16 *)((char *)v437 - *v437);
  if (*v438 >= 5u && (v439 = v438[2]) != 0)
  {
    v440 = (unsigned int *)((char *)v437 + v439 + *(unsigned int *)((char *)v437 + v439));
    if (!*v837)
      goto LABEL_696;
LABEL_698:
    v441 = (unsigned int **)(v7 + 128);
    if (v7[59])
      v441 = v837;
  }
  else
  {
    v440 = 0;
    if (*v837)
      goto LABEL_698;
LABEL_696:
    v441 = (unsigned int **)(v7 + 128);
  }
  v442 = 0;
  if (*v441 && v441[1])
    v442 = (int *)((char *)*v441 + **v441);
  v443 = (unsigned __int16 *)((char *)v442 - *v442);
  if (*v443 >= 5u && (v444 = v443[2]) != 0)
    v445 = (int *)((char *)v442 + v444 + *(unsigned int *)((char *)v442 + v444));
  else
    v445 = 0;
  v446 = (unsigned __int16 *)((char *)v445 - *v445);
  if (*v446 < 7u)
  {
    LODWORD(v447) = 0;
  }
  else
  {
    v447 = v446[3];
    if (v447)
      LODWORD(v447) = *(int *)((char *)v445 + v447);
  }
  *(_DWORD *)(a1 + 2752) = v447;
  v448 = (unsigned __int16 *)((char *)v445 - *v445);
  if (*v448 >= 0x13u && (v449 = v448[9]) != 0)
    v450 = (char *)v445 + v449 + *(unsigned int *)((char *)v445 + v449) + 4;
  else
    v450 = "";
  MEMORY[0x234927D28](a1 + 2760, v450);
  v451 = (unsigned __int16 *)((char *)v440 - (int)*v440);
  v452 = *(unsigned int *)((char *)v440 + v451[15] + *(unsigned int *)((char *)v440 + v451[15]));
  v453 = v451[13];
  if (v451[13])
    LODWORD(v453) = *(unsigned int *)((char *)v440 + v453);
  v454 = v453;
  if (*(_BYTE *)(a4 + 392))
    v455 = ((*(_QWORD *)(a4 + 224) + *(_QWORD *)(a4 + 200) - (*(_QWORD *)(a4 + 216) + *(_QWORD *)(a4 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
         + ((*(_QWORD *)(a4 + 376) + *(_QWORD *)(a4 + 328) - (*(_QWORD *)(a4 + 368) + *(_QWORD *)(a4 + 320))) & 0xFFFFFFFFFFFFFFFELL)
         + 8;
  else
    v455 = 0;
  v456 = v451[4];
  v457 = *(unsigned int *)((char *)v440 + v456);
  v458 = (unsigned int *)((char *)v440 + v456 + v457);
  v459 = *v458;
  if ((_DWORD)v459)
  {
    v460 = 0;
    v461 = 4 * v459;
    v462 = (char *)v440 + v456 + v457;
    while (1)
    {
      v463 = v458[v460 / 4 + 1];
      v464 = &v462[v460 + v463 - *(int *)((char *)&v458[v460 / 4 + 1] + v463)];
      if (*((unsigned __int16 *)v464 + 2) >= 5u)
      {
        v465 = *((unsigned __int16 *)v464 + 4);
        if (v465)
        {
          if (v462[v460 + 4 + v463 + v465] == 9)
            break;
        }
      }
      v460 += 4;
      if (v461 == v460)
        goto LABEL_727;
    }
    v466 = 0;
    v452 += 8;
  }
  else
  {
LABEL_727:
    v466 = 1;
  }
  v467 = (v452 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v454)
    v468 = (v452 + 7) & 0x3FFFFFFF8;
  else
    v468 = v452;
  if (v455 + v454 + v468)
  {
    v859 = v455;
    AGX::Heap<true>::allocateImpl(__dst, v850, v455 + v454 + v468, (_QWORD *)(a1 + 2144));
    *(_DWORD *)(a1 + 2820) += *(_DWORD *)&__dst[16];
    v469 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(a1 + 2432) = *(_OWORD *)__dst;
    *(_OWORD *)(a1 + 2448) = v469;
    *(_OWORD *)(a1 + 2457) = *(_OWORD *)&__dst[25];
    v470 = *(_QWORD **)(a1 + 2440);
    v471 = *(_QWORD *)(a1 + 2432);
    *(_QWORD *)(a1 + 2008) = 0;
    if (v452)
    {
      *(_QWORD *)(a1 + 2064) = v471;
      if ((v466 & 1) != 0)
      {
        v472 = v470;
      }
      else
      {
        *(_QWORD *)(a1 + 2072) = v471;
        *(_QWORD *)(a1 + 2064) = v471 + 8;
        *v470 = v471 + 8;
        v472 = v470 + 1;
      }
      v473 = (int)*v440;
      v474 = *(unsigned __int16 *)((char *)v440 - v473 + 30);
      if (*(_WORD *)((char *)v440 - v473 + 30))
      {
        v475 = *(unsigned int *)((char *)v440 + v474);
        v476 = (char *)v440 + v474 + v475;
      }
      else
      {
        v474 = 0;
        v476 = 0;
        v475 = *v440;
      }
      memcpy(v472, v476 + 4, *(unsigned int *)((char *)v440 + v474 + v475));
      *(_QWORD *)(a1 + 2680) = v472;
      *(_QWORD *)(a1 + 2672) = *(_QWORD *)(a1 + 2064);
    }
    if ((_DWORD)v454)
    {
      *(_QWORD *)(a1 + 2080) = v471 + v467;
      *(_QWORD *)(a1 + 1232) = (char *)v470 + v467;
    }
    if (v859)
    {
      *(_QWORD *)(a1 + 2008) = v468 + v454 + v471;
      v477 = (_WORD *)((char *)v470 + v468 + v454);
      v478 = *(const void **)(a4 + 192);
      v479 = *(_QWORD *)(a4 + 200) - (_QWORD)v478;
      *v477 = v479 >> 2;
      v477[1] = (*(_DWORD *)(a4 + 224) - *(_DWORD *)(a4 + 216)) >> 2;
      v477[2] = (*(_DWORD *)(a4 + 328) - *(_DWORD *)(a4 + 320)) >> 1;
      v477[3] = (*(_DWORD *)(a4 + 376) - *(_DWORD *)(a4 + 368)) >> 1;
      memcpy(v477 + 4, v478, v479);
      v480 = (char *)v477 + *(_QWORD *)(a4 + 200) - *(_QWORD *)(a4 + 192) + 8;
      memcpy(v480, *(const void **)(a4 + 216), *(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216));
      v481 = &v480[*(_QWORD *)(a4 + 224) - *(_QWORD *)(a4 + 216)];
      memcpy(v481, *(const void **)(a4 + 320), *(_QWORD *)(a4 + 328) - *(_QWORD *)(a4 + 320));
      memcpy(&v481[*(_QWORD *)(a4 + 328) - *(_QWORD *)(a4 + 320)], *(const void **)(a4 + 368), *(_QWORD *)(a4 + 376) - *(_QWORD *)(a4 + 368));
      if (v477[2])
      {
        if (v477[3])
          goto LABEL_745;
LABEL_1193:
        v477[3] = v477[1];
      }
      else
      {
        v477[2] = *v477;
        if (!v477[3])
          goto LABEL_1193;
      }
    }
  }
LABEL_745:
  v482 = (uint64_t *)(a1 + 1264);
  v483 = (unsigned __int16 *)((char *)v440 - (int)*v440);
  v484 = v483[8];
  v485 = *(unsigned int *)((char *)v440 + v484);
  v486 = (unsigned int *)((char *)v440 + v484 + v485);
  v487 = *v486;
  if ((_DWORD)v487)
  {
    v488 = 0;
    v489 = 4 * v487;
    v490 = (char *)v440 + v484 + v485;
    do
    {
      v494 = v486[v488 / 4 + 1];
      v495 = &v490[v488 + v494 - *(int *)((char *)&v486[v488 / 4 + 1] + v494)];
      if (*((unsigned __int16 *)v495 + 2) >= 7u && (v496 = *((unsigned __int16 *)v495 + 5)) != 0)
      {
        v497 = *(unsigned int *)&v490[v488 + 4 + v494 + v496];
        v491 = v497;
        if ((v497 & 0x80000000) != 0)
        {
          v492 = 1 << (v497 >> 20);
          v493 = (_QWORD *)(a1 + 1264);
          goto LABEL_749;
        }
      }
      else
      {
        v491 = 0;
      }
      v492 = 1 << v491;
      *(_QWORD *)(a1 + 1248) |= v492;
      v493 = (_QWORD *)(a1 + 1272);
LABEL_749:
      *v493 |= v492;
      v488 += 4;
    }
    while (v489 != v488);
  }
  v498 = v483[10];
  v499 = *(unsigned int *)((char *)v440 + v498);
  v500 = (unsigned int *)((char *)v440 + v498 + v499);
  v501 = *v500;
  if ((_DWORD)v501)
  {
    v502 = 0;
    v503 = 4 * v501;
    v504 = (char *)v440 + v498 + v499;
    do
    {
      v508 = v500[v502 / 4 + 1];
      v509 = &v504[v502 + v508 - *(int *)((char *)&v500[v502 / 4 + 1] + v508)];
      if (*((unsigned __int16 *)v509 + 2) >= 7u && (v510 = *((unsigned __int16 *)v509 + 5)) != 0)
      {
        v511 = *(unsigned int *)&v504[v502 + 4 + v508 + v510];
        v505 = v511;
        if ((v511 & 0x80000000) != 0)
        {
          v506 = 1 << (v511 >> 20);
          v507 = (_QWORD *)(a1 + 1264);
          goto LABEL_758;
        }
      }
      else
      {
        v505 = 0;
      }
      v506 = 1 << v505;
      *(_QWORD *)(a1 + 1256) |= v506;
      v507 = (_QWORD *)(a1 + 1280);
LABEL_758:
      *v507 |= v506;
      v502 += 4;
    }
    while (v503 != v502);
  }
  v512 = v483[6];
  v513 = *(unsigned int *)((char *)v440 + v512);
  v514 = (unsigned int *)((char *)v440 + v512 + v513);
  v515 = *v514;
  if (!(_DWORD)v515)
    goto LABEL_773;
  v516 = 0;
  v517 = 4 * v515;
  v518 = *v482;
  v519 = (char *)v440 + v512 + v513;
  while (2)
  {
    v522 = v514[v516 / 4 + 1];
    v523 = &v519[v516 + v522 - *(int *)((char *)&v514[v516 / 4 + 1] + v522)];
    if (*((unsigned __int16 *)v523 + 2) < 7u || (v524 = *((unsigned __int16 *)v523 + 5)) == 0)
    {
      v520 = 0;
LABEL_766:
      v521 = 1 << v520;
      *(_QWORD *)(a1 + 1240) |= v521;
      goto LABEL_767;
    }
    v525 = *(unsigned int *)&v519[v516 + 4 + v522 + v524];
    v520 = v525;
    if ((v525 & 0x80000000) == 0)
      goto LABEL_766;
    v521 = 1 << (v525 >> 20);
LABEL_767:
    v518 |= v521;
    v516 += 4;
    if (v517 != v516)
      continue;
    break;
  }
  *v482 = v518;
LABEL_773:
  v526 = v483[4];
  v527 = *(unsigned int *)((char *)v440 + v526);
  v528 = (unsigned int *)((char *)v440 + v526 + v527);
  v529 = *v528;
  if ((_DWORD)v529)
  {
    v530 = 0;
    v531 = 4 * v529;
    v532 = *(_QWORD *)(a4 + 416);
    v533 = (char *)v440 + v526 + v527;
    while (2)
    {
      v536 = v528[v530 / 4 + 1];
      v537 = v536 - *(int *)((char *)&v528[v530 / 4 + 1] + v536);
      v538 = &v533[v530 + v537];
      v539 = *((unsigned __int16 *)v538 + 2);
      if (v539 < 5)
        goto LABEL_778;
      v540 = *((unsigned __int16 *)v538 + 4);
      if (!v540 || v533[v530 + 4 + v536 + v540] != 5)
        goto LABEL_778;
      if (v539 >= 7 && (v541 = *(unsigned __int16 *)&v533[v530 + 10 + v537]) != 0)
      {
        v542 = *(unsigned int *)&v533[v530 + 4 + v536 + v541];
        v534 = v542;
        if ((v542 & 0x80000000) != 0)
        {
          v535 = 1 << (v542 >> 20);
          if ((v532 & v535) != 0)
          {
            *(_BYTE *)(a1 + 1968) = 1;
            *(_QWORD *)(a1 + 1376) |= v535;
          }
LABEL_777:
          *v482 |= v535;
LABEL_778:
          v530 += 4;
          if (v531 == v530)
            goto LABEL_787;
          continue;
        }
      }
      else
      {
        v534 = 0;
      }
      break;
    }
    v535 = 1 << v534;
    goto LABEL_777;
  }
LABEL_787:
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(a4 + 400);
  *(_QWORD *)(a1 + 1344) = *(_QWORD *)(a4 + 408);
  *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a4 + 408) | *(_QWORD *)(a4 + 400);
  *(_QWORD *)&v864 = 0;
  if (*v842)
  {
    if (v861[29])
      v543 = v842;
    else
      v543 = (unsigned int **)(v861 + 98);
  }
  else
  {
    v543 = (unsigned int **)(v861 + 98);
  }
  v545 = *v543;
  v544 = v543[1];
  if (v545)
    v546 = v544 == 0;
  else
    v546 = 1;
  if (v546)
    v547 = 0;
  else
    v547 = (int *)((char *)v545 + *v545);
  v548 = (unsigned __int16 *)((char *)v547 - *v547);
  if (*v548 >= 5u && (v549 = v548[2]) != 0)
    v550 = (int *)((char *)v547 + v549 + *(unsigned int *)((char *)v547 + v549));
  else
    v550 = 0;
  v551 = (unsigned __int16 *)((char *)v550 - *v550);
  if (*v551 >= 9u && (v552 = v551[4]) != 0)
    v553 = (unsigned int *)((char *)v550 + v552 + *(unsigned int *)((char *)v550 + v552));
  else
    v553 = 0;
  v856 = *(_QWORD *)(a1 + 2072);
  v860 = *(_QWORD *)(a1 + 2064);
  v554 = *(_QWORD *)(a1 + 2080);
  bzero(__dst, 0x248uLL);
  bzero((void *)(a1 + 1392), 0x240uLL);
  v555 = v553 + 1;
  v556 = *v553;
  if (!(_DWORD)v556)
  {
    v557 = 0;
    v672 = v861;
    v673 = v842;
    goto LABEL_1013;
  }
  v557 = 0;
  v558 = &v555[v556];
  v559 = a1 + 4;
  while (2)
  {
    v563 = (int *)((char *)v555 + *v555);
    v564 = (unsigned __int16 *)((char *)v563 - *v563);
    v565 = *v564;
    if (v565 < 5)
    {
      LODWORD(v566) = 0;
      goto LABEL_819;
    }
    if (v564[2])
    {
      switch(*((_BYTE *)v563 + v564[2]))
      {
        case 0:
          goto LABEL_815;
        case 1:
          if (v565 < 0xD)
          {
            LODWORD(v591) = 0;
            v605 = 0;
            if (v565 < 9)
              goto LABEL_920;
          }
          else
          {
            v591 = v564[6];
            if (v564[6])
              LODWORD(v591) = *(int *)((char *)v563 + v591);
          }
          v606 = v564[4];
          if (v606)
            v605 = *(int *)((char *)v563 + v606);
          else
            v605 = 0;
LABEL_920:
          v630 = v605 + v591;
          if (v591 >= v605 + (int)v591)
            goto LABEL_811;
          v631 = (v630 >> 1) & 0x1FFFFFFF;
          v632 = v557;
          while (1)
          {
            v637 = (v591 >> 1) & 0x1FFFFFFF;
            v638 = *(_QWORD *)(a4 + 24);
            v639 = *(_DWORD *)(v638 + 4 * v637);
            if (v637 + 1 >= v631)
            {
              v640 = 1;
              v643 = a1 + 8 * v632;
              if ((v639 & 0x80000000) == 0)
                goto LABEL_935;
            }
            else
            {
              v640 = 1;
              while (1)
              {
                v641 = *(_DWORD *)(v638 + 4 * (v637 + v640));
                if (v641 != -1 && v641 != ((v639 + v640) & 0xFFFFF | v639 & 0xFFF00000))
                  break;
                ++v640;
                if (!(v637 - v631 + v640))
                {
                  v640 = v631 - v637;
                  break;
                }
              }
              v643 = a1 + 8 * v632;
              if ((v639 & 0x80000000) == 0)
              {
LABEL_935:
                v644 = v632;
                v645 = (_DWORD *)(v643 + 1408);
                if ((v639 & 0x7FF00000) != 0)
                {
                  *v645 = 0;
                  v646 = 8 * (v639 & 0xFFFFF);
                }
                else
                {
                  *v645 = 8;
                  v646 = 8 * ((v639 & 0xFFFFF) - *(_DWORD *)(a4 + 120));
                }
                goto LABEL_943;
              }
            }
            v647 = ((v639 >> 20) & 0x7FF) - 49;
            if (v647 > 4)
              v648 = 7;
            else
              v648 = dword_232D7681C[v647];
            *(_DWORD *)(v643 + 1408) = v648;
            v646 = 8 * (v639 & 0xFFFFF);
            v644 = v632;
LABEL_943:
            *(_DWORD *)(v559 + 8 * v644 + 1408) = v646;
            v649 = (unsigned __int16 *)((char *)v563 - *v563);
            v650 = *v649;
            if (v650 < 0xB)
            {
              LODWORD(v633) = 0;
            }
            else
            {
              v633 = v649[5];
              if (v649[5])
                LODWORD(v633) = *(int *)((char *)v563 + v633);
              if (v650 >= 0xD)
              {
                v634 = v649[6];
                if (v634)
                  LODWORD(v634) = *(int *)((char *)v563 + v634);
                goto LABEL_924;
              }
            }
            LODWORD(v634) = 0;
LABEL_924:
            v635 = (2 * v640);
            v557 = v632 + 1;
            v636 = &__dst[16 * v632];
            *(_QWORD *)v636 = v635;
            *((_DWORD *)v636 + 2) = v633 + v591 - v634;
            LODWORD(v591) = v591 + v635;
            v632 = v557;
            if (v591 >= v630)
              goto LABEL_811;
          }
        case 2:
          if (v565 < 0xD)
          {
            LODWORD(v589) = 0;
            v603 = 0;
            if (v565 < 9)
              goto LABEL_890;
          }
          else
          {
            v589 = v564[6];
            if (v564[6])
              LODWORD(v589) = *(int *)((char *)v563 + v589);
          }
          v604 = v564[4];
          if (v604)
            v603 = *(int *)((char *)v563 + v604);
          else
            v603 = 0;
LABEL_890:
          v609 = v603 + v589;
          if (v589 >= v603 + (int)v589)
            goto LABEL_811;
          v610 = (v609 >> 1) & 0x1FFFFFFF;
          v611 = v557;
          while (1)
          {
            v616 = (v589 >> 1) & 0x1FFFFFFF;
            v617 = *(_QWORD *)(a4 + 48);
            v618 = *(_DWORD *)(v617 + 4 * v616);
            if (v616 + 1 >= v610)
            {
              v619 = 1;
              v622 = a1 + 8 * v611;
              if ((v618 & 0x80000000) == 0)
                goto LABEL_905;
            }
            else
            {
              v619 = 1;
              while (1)
              {
                v620 = *(_DWORD *)(v617 + 4 * (v616 + v619));
                if (v620 != -1 && v620 != ((v618 + v619) & 0xFFFFF | v618 & 0xFFF00000))
                  break;
                ++v619;
                if (!(v616 - v610 + v619))
                {
                  v619 = v610 - v616;
                  break;
                }
              }
              v622 = a1 + 8 * v611;
              if ((v618 & 0x80000000) == 0)
              {
LABEL_905:
                v623 = v611;
                v624 = (_DWORD *)(v622 + 1408);
                if ((v618 & 0x7FF00000) != 0)
                {
                  *v624 = 0;
                  v625 = 8 * (v618 & 0xFFFFF);
                }
                else
                {
                  *v624 = 8;
                  v625 = 8
                       * (*(_DWORD *)(a4 + 124) + (v618 & 0xFFFFF) - (*(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128)));
                }
                goto LABEL_913;
              }
            }
            v626 = ((v618 >> 20) & 0x7FF) - 49;
            if (v626 > 4)
              v627 = 7;
            else
              v627 = dword_232D7681C[v626];
            *(_DWORD *)(v622 + 1408) = v627;
            v625 = 8 * (v618 & 0xFFFFF);
            v623 = v611;
LABEL_913:
            *(_DWORD *)(v559 + 8 * v623 + 1408) = v625;
            v628 = (unsigned __int16 *)((char *)v563 - *v563);
            v629 = *v628;
            if (v629 < 0xB)
            {
              LODWORD(v612) = 0;
            }
            else
            {
              v612 = v628[5];
              if (v628[5])
                LODWORD(v612) = *(int *)((char *)v563 + v612);
              if (v629 >= 0xD)
              {
                v613 = v628[6];
                if (v613)
                  LODWORD(v613) = *(int *)((char *)v563 + v613);
                goto LABEL_894;
              }
            }
            LODWORD(v613) = 0;
LABEL_894:
            v614 = (2 * v619);
            v557 = v611 + 1;
            v615 = &__dst[16 * v611];
            *(_QWORD *)v615 = v614;
            *((_DWORD *)v615 + 2) = v612 + v589 - v613;
            LODWORD(v589) = v589 + v614;
            v611 = v557;
            if (v589 >= v609)
              goto LABEL_811;
          }
        case 3:
          if (v565 < 0xD)
          {
            LODWORD(v592) = 0;
            v607 = 0;
            if (v565 < 9)
              goto LABEL_950;
          }
          else
          {
            v592 = v564[6];
            if (v564[6])
              LODWORD(v592) = *(int *)((char *)v563 + v592);
          }
          v608 = v564[4];
          if (v608)
            v607 = *(int *)((char *)v563 + v608);
          else
            v607 = 0;
LABEL_950:
          v651 = v607 + v592;
          if (v592 >= v607 + (int)v592)
            goto LABEL_811;
          v652 = (v651 >> 1) & 0x1FFFFFFF;
          v653 = v557;
          break;
        case 5:
          if (v565 < 7 || !v564[3])
            goto LABEL_868;
          v593 = *(int *)((char *)v563 + v564[3]);
          if (v593 < 0)
            goto LABEL_811;
          v594 = (v593 & 0xFFFFF) - 49;
          if (v594 > 4)
LABEL_868:
            v595 = 7;
          else
            v595 = dword_232D7681C[v594];
          v596 = a1 + 8 * v557;
          *(_DWORD *)(v596 + 1408) = v595;
          v597 = (unsigned __int16 *)((char *)v563 - *v563);
          if (*v597 >= 0xDu && (v598 = v597[6]) != 0)
            v599 = *(int *)((char *)v563 + v598);
          else
            v599 = 0;
          v590 = v557;
          *(_DWORD *)(v596 + 1412) = 4 * v599;
LABEL_874:
          v600 = (unsigned __int16 *)((char *)v563 - *v563);
          v601 = *v600;
          if (v601 < 9)
          {
            v560 = 0;
LABEL_809:
            v561 = 0;
            goto LABEL_810;
          }
          v560 = v600[4];
          if (v600[4])
            v560 = *(unsigned int *)((char *)v563 + v560);
          if (v601 < 0xB)
            goto LABEL_809;
          v602 = v600[5];
          if (!v602)
            goto LABEL_809;
          v561 = *(int *)((char *)v563 + v602);
LABEL_810:
          v562 = &__dst[16 * v590];
          *(_QWORD *)v562 = v560;
          ++v557;
          *((_DWORD *)v562 + 2) = v561;
          goto LABEL_811;
        case 8:
          v590 = v557;
          *(_QWORD *)(a1 + 8 * v557 + 1408) = 0;
          goto LABEL_874;
        default:
          goto LABEL_811;
      }
      while (1)
      {
        v658 = (v592 >> 1) & 0x1FFFFFFF;
        v659 = *(_QWORD *)(a4 + 72);
        v660 = *(_DWORD *)(v659 + 4 * v658);
        if (v658 + 1 >= v652)
        {
          v661 = 1;
          if ((v660 & 0x80000000) != 0)
            goto LABEL_968;
        }
        else
        {
          v661 = 1;
          while (1)
          {
            v662 = *(_DWORD *)(v659 + 4 * (v658 + v661));
            if (v662 != -1 && v662 != ((v660 + v661) & 0xFFFFF | v660 & 0xFFF00000))
              break;
            ++v661;
            if (!(v658 - v652 + v661))
            {
              v661 = v652 - v658;
              break;
            }
          }
          if ((v660 & 0x80000000) != 0)
          {
LABEL_968:
            v666 = ((v660 >> 20) & 0x7FF) - 49;
            if (v666 > 4)
              v667 = 7;
            else
              v667 = dword_232D7681C[v666];
            v664 = v653;
            *(_DWORD *)(a1 + 8 * v653 + 1408) = v667;
            goto LABEL_973;
          }
        }
        v664 = v653;
        v665 = (_DWORD *)(a1 + 8 * v653 + 1408);
        if ((v660 & 0x7FF00000) == 0)
        {
          *v665 = 8;
          v668 = 8
               * (*(_DWORD *)(a4 + 124)
                + *(_DWORD *)(a4 + 132)
                + (v660 & 0xFFFFF)
                - (*(_DWORD *)(a4 + 120)
                 + *(_DWORD *)(a4 + 128)
                 + *(_DWORD *)(a4 + 136)));
          goto LABEL_974;
        }
        *v665 = 0;
LABEL_973:
        v668 = 8 * (v660 & 0xFFFFF);
LABEL_974:
        *(_DWORD *)(v559 + 8 * v664 + 1408) = v668;
        v669 = (unsigned __int16 *)((char *)v563 - *v563);
        v670 = *v669;
        if (v670 < 0xB)
        {
          LODWORD(v654) = 0;
        }
        else
        {
          v654 = v669[5];
          if (v669[5])
            LODWORD(v654) = *(int *)((char *)v563 + v654);
          if (v670 >= 0xD)
          {
            v655 = v669[6];
            if (v655)
              LODWORD(v655) = *(int *)((char *)v563 + v655);
            goto LABEL_954;
          }
        }
        LODWORD(v655) = 0;
LABEL_954:
        v656 = (2 * v661);
        v557 = v653 + 1;
        v657 = &__dst[16 * v653];
        *(_QWORD *)v657 = v656;
        *((_DWORD *)v657 + 2) = v654 + v592 - v655;
        LODWORD(v592) = v592 + v656;
        v653 = v557;
        if (v592 >= v651)
          goto LABEL_811;
      }
    }
LABEL_815:
    if (v565 >= 0xD)
    {
      v566 = v564[6];
      if (v564[6])
        LODWORD(v566) = *(int *)((char *)v563 + v566);
LABEL_851:
      v588 = v564[4];
      if (v588)
      {
        v567 = *(int *)((char *)v563 + v588);
        goto LABEL_820;
      }
LABEL_819:
      v567 = 0;
      goto LABEL_820;
    }
    LODWORD(v566) = 0;
    v567 = 0;
    if (v565 >= 9)
      goto LABEL_851;
LABEL_820:
    v568 = v567 + v566;
    if (v566 < v567 + (int)v566)
    {
      v569 = 1 - (v566 + v567);
      v570 = v557;
      do
      {
        v575 = *(_QWORD *)(a4 + 96);
        v576 = *(_DWORD *)(v575 + 4 * v566);
        if ((int)v566 + 1 >= v568)
        {
          v578 = 1;
          v581 = a1 + 8 * v570;
          if ((v576 & 0x80000000) == 0)
          {
LABEL_834:
            v582 = v570;
            v583 = (_DWORD *)(v581 + 1408);
            if ((v576 & 0x7FF00000) != 0)
              *v583 = 0;
            else
              *v583 = 9;
            goto LABEL_844;
          }
        }
        else
        {
          v577 = 0;
          v578 = v568 - v566;
          while (1)
          {
            v579 = *(_DWORD *)(v575 + 4 * (v566 + v577 + 1));
            if (v579 != -1 && v579 != ((v576 + 1 + v577) & 0xFFFFF | v576 & 0xFFF00000))
              break;
            ++v577;
            if (!(v569 + (_DWORD)v566 + v577))
            {
              v581 = a1 + 8 * v570;
              if ((v576 & 0x80000000) != 0)
                goto LABEL_837;
              goto LABEL_834;
            }
          }
          v578 = v577 + 1;
          v581 = a1 + 8 * v570;
          if ((v576 & 0x80000000) == 0)
            goto LABEL_834;
        }
LABEL_837:
        v584 = ((v576 >> 20) & 0x7FF) - 49;
        if (v584 >= 5)
          v585 = 7;
        else
          v585 = dword_232D7681C[v584];
        v582 = v570;
        *(_DWORD *)(v581 + 1408) = v585;
LABEL_844:
        *(_DWORD *)(a1 + 1396 + 8 * v582 + 16) = 4 * (v576 & 0xFFFFF);
        v586 = (unsigned __int16 *)((char *)v563 - *v563);
        v587 = *v586;
        if (v587 < 0xB)
        {
          LODWORD(v571) = 0;
        }
        else
        {
          v571 = v586[5];
          if (v586[5])
            LODWORD(v571) = *(int *)((char *)v563 + v571);
          if (v587 >= 0xD)
          {
            v572 = v586[6];
            if (v572)
              LODWORD(v572) = *(int *)((char *)v563 + v572);
            goto LABEL_824;
          }
        }
        LODWORD(v572) = 0;
LABEL_824:
        v573 = v578;
        v557 = v570 + 1;
        v574 = &__dst[16 * v570];
        *(_QWORD *)v574 = v573;
        *((_DWORD *)v574 + 2) = v571 + v566 - v572;
        LODWORD(v566) = v566 + v573;
        v570 = v557;
      }
      while (v566 < v568);
    }
LABEL_811:
    if (++v555 != v558)
      continue;
    break;
  }
  v671 = *v553;
  v672 = v861;
  v673 = v842;
  if ((_DWORD)v671)
  {
    v674 = 0;
    v675 = 4 * v671;
    do
      v674 += 4;
    while (v675 != v674);
    v676 = 0;
    LODWORD(v556) = v557;
    while (1)
    {
      v680 = v553[v676 / 4 + 1];
      v681 = (char *)&v553[v676 / 4] + v680;
      v682 = v680 - *((int *)v681 + 1);
      v683 = (char *)&v553[v676 / 4] + v682;
      v684 = *((unsigned __int16 *)v683 + 2);
      if (v684 < 5)
        goto LABEL_987;
      v685 = *((unsigned __int16 *)v683 + 4);
      if (!v685)
        goto LABEL_987;
      v686 = *((char *)&v553[v676 / 4 + 1] + v680 + v685);
      if (v686 == 9)
      {
        *(_QWORD *)(a1 + 8 * v556 + 1408) = v856;
        v688 = v680 - *((int *)v681 + 1);
        v689 = *(unsigned __int16 *)((char *)&v553[v676 / 4 + 1] + v688);
        if (v689 < 9)
          goto LABEL_984;
        if (*(_WORD *)((char *)&v553[v676 / 4 + 3] + v688))
        {
          v677 = *(unsigned int *)((char *)&v553[v676 / 4 + 1]
                                 + v680
                                 + *(unsigned __int16 *)((char *)&v553[v676 / 4 + 3] + v688));
          if (v689 < 0xB)
            goto LABEL_985;
        }
        else
        {
          v677 = 0;
          if (v689 < 0xB)
            goto LABEL_985;
        }
      }
      else
      {
        if (v686 == 7)
        {
          *(_QWORD *)(a1 + 8 * v556 + 1408) = v554;
        }
        else
        {
          if (v686 != 6)
            goto LABEL_987;
          if (v684 < 0xD)
          {
            v687 = 0;
          }
          else
          {
            v687 = *(unsigned __int16 *)((char *)&v553[v676 / 4 + 4] + v682);
            if (v687)
              v687 = *(unsigned int *)((char *)&v553[v676 / 4 + 1] + v680 + v687);
          }
          *(_QWORD *)(a1 + 8 * v556 + 1408) = v860 + 4 * v687;
        }
        v688 = v680 - *((int *)v681 + 1);
        v690 = (char *)&v553[v676 / 4] + v688;
        v691 = *((unsigned __int16 *)v690 + 2);
        if (v691 < 9)
        {
LABEL_984:
          v677 = 0;
          goto LABEL_985;
        }
        v677 = *((unsigned __int16 *)v690 + 6);
        if (v677)
          v677 = *(unsigned int *)((char *)&v553[v676 / 4 + 1] + v680 + v677);
        if (v691 < 0xB)
          goto LABEL_985;
      }
      v692 = *(unsigned __int16 *)((char *)&v553[v676 / 4 + 3] + v688 + 2);
      if (v692)
      {
        v678 = *(unsigned int *)((char *)&v553[v676 / 4 + 1] + v680 + v692);
        goto LABEL_986;
      }
LABEL_985:
      v678 = 0;
LABEL_986:
      v679 = &__dst[16 * v556];
      *(_QWORD *)v679 = v677;
      LODWORD(v556) = v556 + 1;
      *((_DWORD *)v679 + 2) = v678;
LABEL_987:
      v676 += 4;
      if (v675 == v676)
        goto LABEL_1013;
    }
  }
  LODWORD(v556) = v557;
LABEL_1013:
  v871 = v556;
  v693 = v556;
  v872 = a1 + 1216 + 8 * v556 + 192;
  v694 = (2 * v556);
  v873 = 2 * v556;
  v695 = v556 - v557;
  v696 = 2 * (v556 - 1) + 5;
  v79 = (_DWORD)v556 == 0;
  v697 = 4;
  if (!v79)
    v697 = v696;
  v698 = ((v697 + v694) & 0x7FFFFFFFCLL) - v694;
  v875 = v698;
  v876 = (v693 & 0xFFFFFFFC) + 4;
  v877 = 0;
  *(_DWORD *)(a1 + 1392) = v557;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_DWORD *)(a1 + 1404) = v695 + (v698 >> 1);
  v699 = 4 * ((v693 & 0xFFFFFFFC) + 4);
  *(_QWORD *)(a1 + 2024) = v699;
  AGX::Heap<true>::allocateImpl(&__str, v849, v699, 0);
  v700 = *(_QWORD *)__str_16;
  v701 = *(_QWORD *)&__str_16[8];
  *(_DWORD *)(a1 + 2820) += *(_DWORD *)__str_16;
  v702 = __str;
  *(_QWORD *)&v864 = *(_QWORD *)&__str_16[16];
  BYTE8(v864) = __str_16[24];
  *(_QWORD *)(a1 + 2000) = __str;
  v874 = *((_QWORD *)&v702 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)__dst, 0);
  *(_DWORD *)(a1 + 2040) = v877;
  *(_QWORD *)(a1 + 2032) = (4 * (v875 + v873) + 12) & 0xFFFFFFFFFFFFFFF0;
  v703 = *(_QWORD *)(v701 + 296);
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2305) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_QWORD *)(a1 + 2128) = v703;
  *(_DWORD *)(a1 + 1216) = 8
                         * (*(_DWORD *)(a1 + 1396)
                          + *(_DWORD *)(a1 + 1392)
                          + *(_DWORD *)(a1 + 1400)
                          + *(_DWORD *)(a1 + 1404));
  *(_QWORD *)(a1 + 2224) = v849;
  *(_OWORD *)(a1 + 2232) = v702;
  *(_QWORD *)(a1 + 2248) = v700;
  *(_QWORD *)(a1 + 2256) = v701;
  *(_QWORD *)(a1 + 2264) = v864;
  *(_BYTE *)(a1 + 2272) = BYTE8(v864);
  *(_QWORD *)(a1 + 2424) = v850;
  *(_BYTE *)(a1 + 2748) = 0;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_QWORD *)(a1 + 2920) = 0;
  v704 = *v673;
  if (*v673)
  {
    v705 = (unsigned int **)(v672 + 98);
    if (v672[29])
      v705 = v673;
  }
  else
  {
    v705 = (unsigned int **)(v672 + 98);
  }
  v706 = 0;
  if (*v705 && v705[1])
    v706 = (int *)((char *)*v705 + **v705);
  v707 = (unsigned __int16 *)((char *)v706 - *v706);
  if (*v707 >= 5u && (v708 = v707[2]) != 0)
  {
    v709 = (int *)((char *)v706 + v708 + *(unsigned int *)((char *)v706 + v708));
    if (!v704)
      goto LABEL_1026;
LABEL_1028:
    v710 = (unsigned int **)(v672 + 98);
    if (v672[29])
      v710 = v673;
  }
  else
  {
    v709 = 0;
    if (v704)
      goto LABEL_1028;
LABEL_1026:
    v710 = (unsigned int **)(v672 + 98);
  }
  v711 = 0;
  if (*v710 && v710[1])
    v711 = (int *)((char *)*v710 + **v710);
  v712 = (unsigned __int16 *)((char *)v711 - *v711);
  if (*v712 >= 9u && (v713 = v712[4]) != 0)
    v714 = (int *)((char *)v711 + v713 + *(unsigned int *)((char *)v711 + v713));
  else
    v714 = 0;
  bzero(__dst, 0xE38uLL);
  v715 = (unsigned int *)((char *)v714 + *(unsigned __int16 *)((char *)v714 - *v714 + 8));
  v716 = *(unsigned int *)((char *)v715 + *v715);
  v878 = v716;
  if ((_DWORD)v716)
  {
    v717 = 0;
    v718 = &__dst[12];
    do
    {
      v720 = *v715;
      v721 = *(unsigned int *)((char *)&v715[v717 + 1] + v720);
      v722 = (char *)&v715[v717] + v720 + v721;
      v723 = (char *)&v715[v717] + v720 + v721 - *((int *)v722 + 1);
      if (*((unsigned __int16 *)v723 + 2) < 9u)
      {
        LODWORD(v724) = 0;
      }
      else
      {
        v724 = *((unsigned __int16 *)v723 + 6);
        if (v724)
          LODWORD(v724) = *(unsigned int *)((char *)v715 + v720 + v721 + v717 * 4 + v724 + 4);
      }
      *v718 = v724;
      v725 = *((int *)v722 + 1);
      if (*(unsigned __int16 *)((char *)&v715[v717 + 1] + v720 + v721 - v725) >= 0xBu
        && *(_WORD *)((char *)&v715[v717 + 3] + v720 + v721 - v725 + 2))
      {
        v726 = *(unsigned int *)((char *)v715
                               + v720
                               + v721
                               + v717 * 4
                               + *(unsigned __int16 *)((char *)&v715[v717 + 3] + v720 + v721 - v725 + 2)
                               + 4);
      }
      else
      {
        v726 = 0;
      }
      v718[3] = v726;
      v727 = *((int *)v722 + 1);
      v728 = (char *)&v715[v717] + v720 + v721 - v727;
      v729 = *((unsigned __int16 *)v728 + 2);
      if (v729 >= 5)
      {
        v730 = *((unsigned __int16 *)v728 + 4);
        if (v730)
        {
          if (*((_BYTE *)v715 + v720 + v721 + v717 * 4 + v730 + 4) == 1)
          {
            if (v729 < 7)
            {
              LODWORD(v731) = 0;
            }
            else
            {
              v731 = *(unsigned __int16 *)((char *)&v715[v717 + 2] + v720 + v721 - v727 + 2);
              if (v731)
                LODWORD(v731) = *(unsigned int *)((char *)v715 + v720 + v721 + v717 * 4 + v731 + 4);
            }
            v718[1] = 2 * v731 + 2;
            v732 = (char *)&v715[v717] + v720 + v721 - *((int *)v722 + 1);
            if (*((unsigned __int16 *)v732 + 2) >= 7u && (v733 = *((unsigned __int16 *)v732 + 5)) != 0)
              v719 = *(unsigned int *)((char *)v715 + v720 + v721 + v717 * 4 + v733 + 4);
            else
              v719 = 0;
            v718[2] = 2 * v719 + 2;
            *(_WORD *)((char *)v718 - 5) = 0;
            *((_BYTE *)v718 - 10) = 0;
          }
        }
      }
      ++v717;
      v718 += 7;
    }
    while (v716 != v717);
  }
  if (v716 <= 1)
    v734 = 1;
  else
    v734 = v716;
  if ((_DWORD)v716)
    v735 = (2 * (v716 - 1) + 5) & 0x3FFFFFFFCLL;
  else
    v735 = 0;
  v882 = v735;
  v883 = (v734 + 3) & 0x1FFFFFFFCLL;
  v884 = 0;
  AGX::Heap<true>::allocateImpl(&__str, v849, 4 * (v735 + v883), (_QWORD *)(a1 + 2200));
  v879 = *((_QWORD *)&__str + 1);
  v854 = __str;
  v881 = *((_QWORD *)&__str + 1) + 4 * v735;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeFragmentVaryingsPDSProgram(__dst, 0, 0);
  v736 = 0;
  v737 = *(_QWORD *)(a1 + 1976);
  v738 = (unsigned __int16 *)((char *)v709 - *v709);
  if (*v738 > 4u)
  {
    v739 = v738[2];
    if (v739)
      v736 = *(int *)((char *)v709 + v739);
    else
      v736 = 0;
  }
  v740 = (unsigned __int16 *)((char *)v714 - *v714);
  if (*v740 < 0xDu)
  {
    v741 = 0;
  }
  else
  {
    v741 = v740[6];
    if (v741)
      v741 += (uint64_t)v714 + *(unsigned int *)((char *)v714 + v741);
  }
  v742 = (int *)(v741 + 4 + *(unsigned int *)(v741 + 4));
  v743 = (unsigned __int16 *)((char *)v742 - *v742);
  if (*v743 >= 7u && (v744 = v743[3]) != 0)
    v745 = *((char *)v742 + v744);
  else
    v745 = 0;
  AGX::Heap<true>::allocateImpl(&v864, v849, 48, (_QWORD *)(a1 + 2136));
  v746 = *((_QWORD *)&v864 + 1);
  v747 = v864;
  **((_DWORD **)&v864 + 1) = v737 & 0xFFFFFFFC;
  *(_DWORD *)(v746 + 4) = (((unint64_t)(v736 >> 2) << 35) | (v745 << 33) | v737) >> 32;
  *(_QWORD *)(v746 + 8) = 0;
  *(_DWORD *)(v746 + 32) = -201326590;
  AGX::Heap<true>::allocateImpl(&v862, v850, 24, (_QWORD *)(a1 + 2208));
  LODWORD(v748) = 0;
  v749 = (unsigned __int16 *)((char *)v709 - *v709);
  if (*v749 >= 7u)
  {
    v748 = v749[3];
    if (v749[3])
      LODWORD(v748) = *(int *)((char *)v709 + v748);
  }
  v750 = v862;
  v751 = *(_DWORD *)(a1 + 2032);
  v752 = v880 + v882;
  v753 = (unsigned __int16 *)((char *)v714 - *v714);
  if (*v753 < 5u)
  {
    LODWORD(v754) = 0;
  }
  else
  {
    v754 = v753[2];
    if (v754)
      LODWORD(v754) = *(int *)((char *)v714 + v754);
  }
  v755 = *(_DWORD *)(a1 + 2040);
  v756 = *(_DWORD *)(a1 + 2000);
  v757 = (_DWORD *)*((_QWORD *)&v862 + 1);
  **((_DWORD **)&v862 + 1) = 192;
  v757[1] = v747 & 0xFFFFFFF0;
  v757[2] = v756 & 0xFFFFFFF0;
  v757[3] = (v754 + 15) & 0xFFFFFFF0 | ((v751 << 19) + 6291456) & 0xFF800000 | ((v752 << 8) + 768) & 0xFFFFFC00;
  v757[4] = (((_DWORD)v748 << 19) + 7864320) & 0xFF800000 | ((v755 << 14) + 0x4000) & 0xFFFF8000;
  v757[5] = v854 & 0xFFFFFFF0;
  *(_QWORD *)(a1 + 2832) = v757;
  *(_QWORD *)(a1 + 2824) = __ROR8__(v750, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  *(_OWORD *)(a1 + 2305) = *(_OWORD *)((char *)v865 + 9);
  v758 = v865[0];
  *(_OWORD *)(a1 + 2280) = v864;
  *(_OWORD *)(a1 + 2296) = v758;
  *(_OWORD *)(a1 + 2865) = *(_OWORD *)&__str_16[9];
  v759 = *(_OWORD *)__str_16;
  *(_OWORD *)(a1 + 2840) = __str;
  *(_OWORD *)(a1 + 2856) = v759;
  v760 = v862;
  v761 = v863[0];
  *(_OWORD *)(a1 + 2913) = *(_OWORD *)((char *)v863 + 9);
  *(_OWORD *)(a1 + 2888) = v760;
  *(_OWORD *)(a1 + 2904) = v761;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::buildUniqueResourceMask(a1 + 1216);
  *(_DWORD *)(a1 + 2948) = 0;
  *(_DWORD *)(a1 + 2936) = *(_DWORD *)(a1 + 308) + *(_DWORD *)(a1 + 296);
  if (*v842)
  {
    v762 = (unsigned int **)(v861 + 98);
    if (v861[29])
      v762 = v842;
  }
  else
  {
    v762 = (unsigned int **)(v861 + 98);
  }
  v763 = 0;
  if (*v762 && v762[1])
    v763 = (int *)((char *)*v762 + **v762);
  v764 = (unsigned __int16 *)((char *)v763 - *v763);
  if (*v764 >= 5u && (v765 = v764[2]) != 0)
    v766 = (int *)((char *)v763 + v765 + *(unsigned int *)((char *)v763 + v765));
  else
    v766 = 0;
  v767 = *(_DWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a1 + 896);
  *(_DWORD *)(a1 + 2820) += v767;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::buildUniqueResourceMask(a1 + 1216);
  v769 = *v766;
  v770 = *(unsigned __int16 *)((char *)v766 - v769 + 24);
  v771 = *(unsigned int *)((char *)v766 + v770);
  if (*(int *)((char *)v766 + v770 + v771))
  {
    v772 = 0;
    while (1)
    {
      v774 = (uint64_t)&v766[v772] + v770 + v771;
      v775 = (int *)(v774 + 4 + *(unsigned int *)(v774 + 4));
      v776 = (unsigned __int16 *)((char *)v775 - *v775);
      v777 = *v776;
      if (v777 < 9)
      {
        v779 = v832->__begin_;
        v780 = v832->__begin_;
        if (v777 >= 5)
        {
          v781 = v776[2];
          if (v776[2])
            goto LABEL_1110;
        }
      }
      else
      {
        if (v776[4])
          v778 = *(unsigned int *)((char *)v775 + v776[4]);
        else
          v778 = 0;
        v779 = v832->__begin_;
        v780 = &v832->__begin_[v778];
        v781 = v776[2];
        if (v776[2])
        {
LABEL_1110:
          v782 = *((unsigned __int8 *)v775 + v781) - 65;
          v773 = 1;
          switch(v782)
          {
            case 0:
              goto LABEL_1100;
            case 1:
              v773 = 2;
              goto LABEL_1100;
            case 2:
              v773 = 3;
              goto LABEL_1100;
            case 3:
              v773 = 4;
              goto LABEL_1100;
            case 4:
              v773 = 0;
              goto LABEL_1100;
            case 5:
              v773 = 5;
              goto LABEL_1100;
            case 12:
              v773 = 6;
              goto LABEL_1100;
            case 13:
              v773 = 7;
              goto LABEL_1100;
            case 14:
              if (v777 < 7)
              {
                LODWORD(v783) = 0;
              }
              else
              {
                v783 = v776[3];
                if (v776[3])
                  LODWORD(v783) = *(int *)((char *)v775 + v783);
              }
              v773 = (v783 + 8) & 0x3FFFFFFF;
              goto LABEL_1100;
            case 15:
              v773 = 10;
              goto LABEL_1100;
            case 16:
              v773 = 11;
              goto LABEL_1100;
            case 17:
              v773 = 12;
LABEL_1100:
              *v780 = v773;
              LODWORD(v769) = *v766;
              break;
            default:
              break;
          }
        }
      }
      ++v772;
      v770 = *(unsigned __int16 *)((char *)v766 - (int)v769 + 24);
      v771 = *(unsigned int *)((char *)v766 + v770);
      if (v772 >= *(unsigned int *)((char *)v766 + v770 + v771))
        goto LABEL_1126;
    }
  }
  v779 = v832->__begin_;
LABEL_1126:
  v785 = *(_QWORD *)(a1 + 240);
  v784 = *(_QWORD *)(a1 + 248);
  if (v784 == v785)
    v786 = 0;
  else
    v786 = *v829 & 1;
  v787 = *(_QWORD *)(a1 + 80) - (_DWORD)v779;
  v788 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2;
  v789 = 8 * (v788 + ((*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2));
  *(_DWORD *)(a1 + 16) = ((*(_DWORD *)(a1 + 152)
                         - *(_DWORD *)(a1 + 144)
                         + ((v787
                           + 4
                           * (*(_DWORD *)(a1 + 212)
                            + *(_DWORD *)(a1 + 208)
                            + v786
                            + (((v784 - v785) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                       + v789;
  v790 = (*(_DWORD *)(a4 + 124)
        + *(_DWORD *)(a4 + 132)
        + *(_DWORD *)(a4 + 140)
        - (*(_DWORD *)(a4 + 120)
         + *(_DWORD *)(a4 + 128)
         + *(_DWORD *)(a4 + 136))
        + 1) & 0xFFFFFFFE;
  *(_DWORD *)(a1 + 20) = 8 * v790;
  v791 = *(unsigned __int8 *)(a4 + 184);
  v792 = *(_DWORD *)(a4 + 144);
  if (!*(_BYTE *)(a4 + 184))
    v792 = 0;
  *(_DWORD *)(a1 + 24) = 8 * (v792 + v790);
  *(_DWORD *)(a1 + 28) = 8 * v788;
  *(_DWORD *)(a1 + 32) = v789;
  *(_DWORD *)(a1 + 36) = v789 + (v787 & 0xFFFFFFFC);
  v793 = *(_DWORD *)(a4 + 144);
  if (v791)
    v794 = *(_DWORD *)(a4 + 144);
  else
    v794 = 0;
  v795 = *(_QWORD *)(a4 + 168);
  if (!v795)
    v793 = 0;
  *(_DWORD *)(a1 + 40) = 8 * (v794 + v793 + v790);
  v796 = *(_DWORD *)(a4 + 144);
  if (v795)
    v797 = *(_DWORD *)(a4 + 144);
  else
    v797 = 0;
  if (!v791)
    v796 = 0;
  v798 = *(_QWORD *)(a4 + 148);
  *(_DWORD *)(a1 + 44) = 8 * (v796 + v797 + v798 + v790);
  v799 = *(_DWORD *)(a4 + 144);
  if (v791)
    v800 = *(_DWORD *)(a4 + 144);
  else
    v800 = 0;
  if (!v795)
    v799 = 0;
  *(_DWORD *)(a1 + 316) = v800 + v799;
  *(_QWORD *)(a1 + 320) = v798;
  *(_DWORD *)__dst = 0;
  if (*v842)
  {
    v801 = (unsigned int **)(v861 + 98);
    if (v861[29])
      v801 = v842;
  }
  else
  {
    v801 = (unsigned int **)(v861 + 98);
  }
  v802 = 0;
  if (*v801 && v801[1])
    v802 = (int *)((char *)*v801 + **v801);
  v803 = (unsigned __int16 *)((char *)v802 - *v802);
  if (*v803 >= 9u && (v804 = v803[4]) != 0)
  {
    v805 = (int *)((char *)v802 + v804 + *(unsigned int *)((char *)v802 + v804));
    if (!*v837)
      goto LABEL_1157;
LABEL_1159:
    v806 = (unsigned int **)(v861 + 128);
    if (v861[59])
      v806 = v837;
  }
  else
  {
    v805 = 0;
    if (*v837)
      goto LABEL_1159;
LABEL_1157:
    v806 = (unsigned int **)(v861 + 128);
  }
  v807 = 0;
  if (*v806 && v806[1])
    v807 = (int *)((char *)*v806 + **v806);
  v808 = (unsigned __int16 *)((char *)v807 - *v807);
  if (*v808 >= 9u && (v809 = v808[4]) != 0)
    v810 = (int *)((char *)v807 + v809 + *(unsigned int *)((char *)v807 + v809));
  else
    v810 = 0;
  v811 = (unsigned __int16 *)((char *)v810 - *v810);
  v812 = *v811;
  if (v812 < 7)
  {
    v813 = 0;
  }
  else if (v811[3])
  {
    v813 = *(_QWORD *)((char *)v810 + v811[3]);
    if (v812 >= 9)
    {
LABEL_1190:
      v826 = v811[4];
      if (v826)
      {
        v814 = *(_QWORD *)((char *)v810 + v826);
        goto LABEL_1174;
      }
    }
  }
  else
  {
    v813 = 0;
    if (v812 >= 9)
      goto LABEL_1190;
  }
  v814 = 0;
LABEL_1174:
  LOBYTE(__str) = 0;
  agxsGetShaderPassInfo(v830 + 40, v813, v814, __dst, (unsigned int *)&__str, v768);
  v815 = (unsigned __int16 *)((char *)v805 - *v805);
  if (*v815 >= 7u && (v816 = v815[3]) != 0)
  {
    v817 = *((char *)v805 + v816);
    switch(v817)
    {
      case 2:
        v818 = 5;
        break;
      case 1:
        v818 = 2;
        if (!(_BYTE)__str)
          v818 = 4;
        break;
      case 0:
        goto LABEL_1179;
      default:
        v818 = 0;
        break;
    }
  }
  else
  {
LABEL_1179:
    v818 = __str;
  }
  *(_QWORD *)(a1 + 2940) = (*(_DWORD *)__dst << 22) | (unint64_t)(v818 << 56);
  *(_DWORD *)(a1 + 2948) = 0x10000;
  v819 = (unsigned __int16 *)((char *)v766 - *v766);
  if (*v819 >= 5u && (v820 = v819[2]) != 0 && (v821 = *(int *)((char *)v766 + v820)) != 0)
  {
    v822 = (3329 - ((4 * v821 + 28) & 0xFFFFFFE0)) / ((4 * v821 + 28) & 0xFFFFFFE0);
    v823 = 512;
    if ((v822 & 0x7FFFFF0) == 0)
    {
      v824 = 32 * v822;
      if (v824 >= 0x200)
        v823 = 512;
      else
        v823 = v824;
    }
  }
  else
  {
    v823 = 512;
  }
  *(_DWORD *)(a1 + 2952) = v823;
  return a1;
}

void sub_232CC576C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void **a11, _QWORD *a12, uint64_t a13, CompileStatistics *a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,void **a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  void **v64;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  CompileStatistics::~CompileStatistics(a14);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v63 + 1032));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v63 + 992));
  v66 = *(void **)(v63 + 968);
  if (v66)
  {
    *(_QWORD *)(v63 + 976) = v66;
    operator delete(v66);
  }
  v67 = *a28;
  if (*a28)
  {
    *(_QWORD *)(v63 + 952) = v67;
    operator delete(v67);
  }
  if (*a10 < 0)
  {
    operator delete(*a11);
    if ((*(char *)(v63 + 479) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*(char *)(v63 + 479) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 + 455) < 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*a21);
  if (*(char *)(v63 + 455) < 0)
  {
LABEL_8:
    operator delete(*a22);
    if ((*(char *)(v63 + 431) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a33);
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a12);
      v68 = *a16;
      if (*a16)
      {
        *(_QWORD *)(v63 + 176) = v68;
        operator delete(v68);
      }
      v69 = *a18;
      if (*a18)
      {
        *(_QWORD *)(v63 + 152) = v69;
        operator delete(v69);
      }
      v70 = *a17;
      if (*a17)
      {
        *(_QWORD *)(v63 + 128) = v70;
        operator delete(v70);
      }
      v71 = *a19;
      if (*a19)
      {
        *(_QWORD *)(v63 + 104) = v71;
        operator delete(v71);
      }
      v72 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v63 + 80) = v72;
        operator delete(v72);
        v73 = *v64;
        if (!*v64)
        {
LABEL_24:
          if (a54 < 0)
            goto LABEL_25;
          goto LABEL_28;
        }
      }
      else
      {
        v73 = *v64;
        if (!*v64)
          goto LABEL_24;
      }
      *(_QWORD *)(v63 + 56) = v73;
      operator delete(v73);
      if (a54 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a23);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v63 + 431) & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

unint64_t AGX::BlitVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::BlitVertexProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  std::vector<unsigned int> *v7;
  std::vector<unsigned int> *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int **v11;
  int *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int *v15;
  unsigned int **v16;
  int *v17;
  unsigned __int16 *v18;
  int *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  const char *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  const char *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  size_t v34;
  const void *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned int **v41;
  int *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _DWORD *v49;
  const char *v50;
  size_t v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  int v58;
  int v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  unsigned int **v79;
  unsigned int *v80;
  unsigned int *v81;
  BOOL v82;
  std::vector<unsigned int> *v83;
  int *v84;
  unsigned __int16 *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned __int16 *v92;
  uint64_t v93;
  unsigned __int16 *v94;
  uint64_t v95;
  _QWORD *v96;
  unsigned int **v97;
  unsigned int *v98;
  int *v99;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned __int16 *v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned __int16 *v116;
  uint64_t v117;
  unsigned __int16 *v118;
  uint64_t v119;
  unsigned __int16 *v120;
  uint64_t v121;
  unsigned __int16 *v122;
  uint64_t v123;
  unsigned __int16 *v124;
  uint64_t v125;
  unsigned __int16 *v126;
  uint64_t v127;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  unsigned __int16 *v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  unsigned __int16 *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  int *v148;
  unsigned __int16 *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  char *v153;
  unsigned int *v154;
  uint64_t v155;
  unsigned int *v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unsigned __int16 *v160;
  uint64_t v161;
  int v162;
  unsigned __int8 v163;
  _DWORD *v164;
  unsigned __int16 *v165;
  uint64_t v166;
  unsigned __int16 *v167;
  uint64_t v168;
  unsigned __int16 *v169;
  uint64_t v170;
  uint64_t v171;
  _WORD *v172;
  unsigned int v173;
  uint64_t v174;
  BOOL v175;
  int v176;
  BOOL v177;
  unsigned __int16 *v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int *v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  char v193;
  unsigned __int8 v194;
  uint64_t v195;
  unsigned int *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int *v200;
  int *v201;
  unsigned __int16 *v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t **v207;
  uint64_t *v208;
  uint64_t **v209;
  unsigned int v210;
  _DWORD *v211;
  uint64_t v212;
  uint64_t *v213;
  unsigned __int8 v214;
  unsigned __int8 v215;
  int v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned __int16 *v219;
  uint64_t v220;
  unsigned __int16 *v221;
  uint64_t v222;
  unsigned __int16 *v223;
  uint64_t v224;
  unsigned __int16 *v225;
  char v226;
  unsigned int v227;
  int v228;
  int v229;
  unsigned __int8 v230;
  unsigned __int16 *v231;
  uint64_t v232;
  unsigned __int16 *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 v236;
  _OWORD *v237;
  const void **v238;
  uint64_t v239;
  const void **v240;
  const void **v241;
  __int128 v242;
  __int128 v243;
  _QWORD *v244;
  uint64_t v245;
  const void *v246;
  const void **v247;
  int *v248;
  uint64_t v249;
  uint64_t v250;
  const void **v251;
  _QWORD *v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  const void *v257;
  const void **v258;
  const void **v259;
  _QWORD *v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  const void *v265;
  _QWORD *v266;
  uint64_t v267;
  NSObject *v268;
  _QWORD *v269;
  std::string *v270;
  _QWORD *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  std::string *v277;
  _QWORD *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  char *v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  unsigned int v307;
  std::vector<unsigned int>::pointer begin;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int *v343;
  int *v344;
  unsigned __int16 *v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned __int16 *v352;
  uint64_t v353;
  uint64_t *v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  uint64_t **v358;
  uint64_t *v359;
  uint64_t **v360;
  unsigned int v361;
  _DWORD *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  int v366;
  unsigned int v367;
  std::vector<unsigned int>::pointer v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  BOOL v372;
  int v373;
  std::vector<unsigned int>::pointer v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  int v378;
  unsigned int v379;
  std::vector<unsigned int>::pointer v380;
  int v381;
  unsigned __int16 *v382;
  unint64_t v383;
  int v384;
  unsigned __int16 *v385;
  unint64_t v386;
  unsigned __int16 *v387;
  uint64_t v388;
  unint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unsigned int v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  unsigned __int16 *v407;
  uint64_t v408;
  _DWORD *v409;
  unint64_t v410;
  _BYTE *v411;
  _BYTE *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  unsigned __int16 *v417;
  uint64_t v418;
  _DWORD *v419;
  unint64_t v420;
  _DWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  unint64_t v426;
  _DWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  unsigned int **v436;
  int *v437;
  unsigned __int16 *v438;
  uint64_t v439;
  unsigned int *v440;
  unsigned int **v441;
  int *v442;
  unsigned __int16 *v443;
  uint64_t v444;
  int *v445;
  unsigned __int16 *v446;
  uint64_t v447;
  unsigned __int16 *v448;
  uint64_t v449;
  const char *v450;
  unsigned __int16 *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  char *v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  char v466;
  uint64_t v467;
  uint64_t v468;
  __int128 v469;
  _QWORD *v470;
  uint64_t v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  _WORD *v477;
  const void *v478;
  size_t v479;
  char *v480;
  char *v481;
  uint64_t *v482;
  unsigned __int16 *v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int *v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  char *v490;
  char v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  char *v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int *v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  char *v504;
  char v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unsigned int *v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  char v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unsigned int *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  char *v533;
  char v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  unsigned int v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  unsigned int **v543;
  unsigned int *v544;
  unsigned int *v545;
  BOOL v546;
  int *v547;
  unsigned __int16 *v548;
  uint64_t v549;
  int *v550;
  unsigned __int16 *v551;
  uint64_t v552;
  unsigned int *v553;
  uint64_t v554;
  unsigned int *v555;
  uint64_t v556;
  unsigned int v557;
  unsigned int *v558;
  unint64_t v559;
  uint64_t v560;
  int v561;
  _BYTE *v562;
  int *v563;
  unsigned __int16 *v564;
  unsigned int v565;
  uint64_t v566;
  int v567;
  unsigned int v568;
  int v569;
  unsigned int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  _BYTE *v574;
  uint64_t v575;
  unsigned int v576;
  int v577;
  unsigned int v578;
  int v579;
  unint64_t v581;
  uint64_t v582;
  _DWORD *v583;
  int v584;
  int v585;
  unsigned __int16 *v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  int v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  int v598;
  uint64_t v599;
  int v600;
  int v601;
  unint64_t v602;
  unsigned __int16 *v603;
  uint64_t v604;
  int v605;
  unsigned __int16 *v606;
  unsigned int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _BYTE *v615;
  unsigned int v616;
  uint64_t v617;
  unsigned int v618;
  int v619;
  int v620;
  unint64_t v622;
  uint64_t v623;
  _DWORD *v624;
  int v625;
  int v626;
  int v627;
  unsigned __int16 *v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _BYTE *v636;
  unsigned int v637;
  uint64_t v638;
  unsigned int v639;
  int v640;
  int v641;
  unint64_t v643;
  uint64_t v644;
  _DWORD *v645;
  int v646;
  int v647;
  int v648;
  unsigned __int16 *v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  _BYTE *v657;
  unsigned int v658;
  uint64_t v659;
  unsigned int v660;
  int v661;
  int v662;
  uint64_t v664;
  _DWORD *v665;
  int v666;
  int v667;
  int v668;
  unsigned __int16 *v669;
  unsigned int v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  int v676;
  _BYTE *v677;
  uint64_t v678;
  char *v679;
  uint64_t v680;
  char *v681;
  unsigned int v682;
  uint64_t v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  unsigned int v687;
  char *v688;
  unsigned int v689;
  uint64_t v690;
  int v691;
  uint64_t v692;
  int v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  __int128 v700;
  unsigned int **v701;
  int *v702;
  unsigned __int16 *v703;
  uint64_t v704;
  int *v705;
  unsigned int **v706;
  int *v707;
  unsigned __int16 *v708;
  uint64_t v709;
  int *v710;
  unsigned int **v711;
  int *v712;
  unsigned __int16 *v713;
  uint64_t v714;
  int *v715;
  uint64_t v716;
  uint64_t v717;
  int *v718;
  unsigned int *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unsigned int v730;
  uint64_t v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  uint64_t v736;
  uint64_t v737;
  unsigned __int16 *v738;
  uint64_t v739;
  int v740;
  unsigned int v741;
  int v742;
  uint64_t v743;
  unsigned __int16 *v744;
  unsigned __int16 *v745;
  uint64_t v746;
  unsigned int v747;
  unsigned __int16 *v748;
  uint64_t v749;
  int v750;
  int v751;
  int v752;
  int v753;
  int v754;
  unsigned int v755;
  int v756;
  int v757;
  unsigned int v758;
  __int128 v759;
  int v760;
  unsigned int **v761;
  int *v762;
  unsigned __int16 *v763;
  uint64_t v764;
  int *v765;
  unsigned int **v766;
  int *v767;
  unsigned __int16 *v768;
  uint64_t v769;
  int *v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int *v776;
  unsigned __int16 *v777;
  unsigned int v778;
  uint64_t v779;
  std::vector<unsigned int>::pointer v780;
  _QWORD *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  int v785;
  int v786;
  uint64_t v787;
  int v788;
  unsigned int v789;
  int v790;
  int v791;
  int v792;
  int v793;
  uint64_t v794;
  int v795;
  int v796;
  uint64_t v797;
  int v798;
  int v799;
  unsigned __int16 *v800;
  int *v801;
  unsigned __int16 *v802;
  unsigned int v803;
  int v804;
  int v805;
  int v806;
  int v807;
  int v808;
  int v809;
  uint64_t v810;
  unsigned __int8 v811;
  uint64_t v812;
  __int128 v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  unsigned int *v818;
  uint64_t v819;
  _QWORD *v820;
  _QWORD *v821;
  uint64_t v822;
  _QWORD *v823;
  uint64_t v824;
  uint64_t v825;
  unsigned __int16 *v826;
  unsigned int v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unsigned int v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int v844;
  char *v845;
  unint64_t v846;
  _DWORD *v847;
  _DWORD *v849;
  _QWORD *v850;
  _QWORD *v851;
  _QWORD *v852;
  _QWORD *v853;
  std::string *v854;
  _QWORD *v855;
  _QWORD *v856;
  unsigned int **v857;
  _QWORD *v859;
  unsigned int **v860;
  void **v861;
  _QWORD *v862;
  std::vector<unsigned int> *v863;
  char *v864;
  uint64_t v865;
  _DWORD *v866;
  BOOL v867;
  uint64_t v868;
  _QWORD *v869;
  int *v870;
  _DWORD *v871;
  uint64_t **v872;
  uint64_t **v873;
  _DWORD *v874;
  std::vector<unsigned int> *v875;
  uint64_t v876;
  int *v877;
  _DWORD *v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v882;
  char v883;
  __int128 __str;
  _BYTE __str_16[25];
  _BYTE __dst[48];
  __int16 v887;
  uint64_t v888;
  int v889;
  uint64_t v890;
  int v891;
  uint64_t v892;
  int v893;
  uint64_t v894;
  int v895;
  int v896;
  char v897;
  char v898;
  uint64_t v899;
  uint64_t v900;
  int v901;
  int v902;
  uint64_t v903;
  unsigned int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  int v908;
  uint64_t v909;

  v5 = a4;
  v6 = a1;
  v909 = *MEMORY[0x24BDAC8D0];
  __str_16[7] = 0;
  LOBYTE(__str) = 0;
  *(_QWORD *)a1 = &off_250401E90;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  v853 = (_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v852 = (_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = (std::vector<unsigned int> *)(a1 + 72);
  *(_OWORD *)(a1 + 216) = 0u;
  v850 = (_QWORD *)(a1 + 168);
  v851 = (_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v872 = (uint64_t **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v859 = (_QWORD *)(a1 + 368);
  v9 = (unint64_t *)(a2 + 6744);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 400) = v10;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 844) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v856 = (_QWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 871) = 0u;
  *(_OWORD *)(a1 + 887) = 0u;
  *(_OWORD *)(a1 + 903) = 0u;
  v845 = (char *)(a1 + 871);
  *(_QWORD *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a4 + 425);
  *(_WORD *)(a1 + 1018) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  v873 = (uint64_t **)(a1 + 1032);
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  *(_OWORD *)(a1 + 1144) = 0u;
  v861 = (void **)(a1 + 1144);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  v849 = (_DWORD *)(a1 + 1048);
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_QWORD *)(a1 + 1208) = 0;
  v860 = (unsigned int **)(a3 + 224);
  if (*(_QWORD *)(a3 + 224))
  {
    v11 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v11 = (unsigned int **)(a3 + 224);
  }
  else
  {
    v11 = (unsigned int **)(a3 + 784);
  }
  v12 = 0;
  if (*v11 && v11[1])
    v12 = (int *)((char *)*v11 + **v11);
  v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 5u && (v14 = v13[2]) != 0)
    v15 = (int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
  else
    v15 = 0;
  if (*(_QWORD *)(a3 + 464))
  {
    v16 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v16 = (unsigned int **)(a3 + 464);
  }
  else
  {
    v16 = (unsigned int **)(a3 + 1024);
  }
  v17 = 0;
  if (*v16 && v16[1])
    v17 = (int *)((char *)*v16 + **v16);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 < 5u)
  {
    v19 = 0;
  }
  else
  {
    v19 = (int *)v18[2];
    if (v19)
      v19 = (int *)((char *)v19 + (_QWORD)v17 + *(unsigned int *)((char *)v19 + (_QWORD)v17));
  }
  v870 = v19;
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  v21 = *v20;
  if (v21 < 0x25)
  {
    LOBYTE(v22) = 0;
  }
  else
  {
    v22 = v20[18];
    if (v20[18])
      LOBYTE(v22) = *((_BYTE *)v870 + v22) != 0;
  }
  *(_BYTE *)(a1 + 1017) = v22;
  v23 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v23 >= 0x55u && v23[42])
  {
    if (v21 <= 6)
    {
LABEL_34:
      LODWORD(v24) = 0;
      goto LABEL_38;
    }
  }
  else if (v21 < 7)
  {
    goto LABEL_34;
  }
  v24 = v20[3];
  if (v24)
    LODWORD(v24) = *(int *)((char *)v870 + v24);
LABEL_38:
  *(_DWORD *)(a1 + 392) = v24;
  v25 = (unsigned __int16 *)((char *)v870 - *v870);
  v857 = (unsigned int **)(a3 + 464);
  v847 = (_DWORD *)(a1 + 200);
  if (*v25 >= 0x13u && (v26 = v25[9]) != 0)
    v27 = (char *)v870 + v26 + *(unsigned int *)((char *)v870 + v26) + 4;
  else
    v27 = "";
  v854 = (std::string *)(a1 + 456);
  v855 = (_QWORD *)(a1 + 432);
  v846 = a1 + 848;
  v862 = (_QWORD *)(a1 + 944);
  MEMORY[0x234927D28](v856, v27);
  v28 = (unsigned __int16 *)((char *)v870 - *v870);
  if (*v28 >= 9u && (v29 = v28[4]) != 0)
    v30 = (char *)v870 + v29 + *(unsigned int *)((char *)v870 + v29) + 4;
  else
    v30 = "";
  MEMORY[0x234927D28](v855, v30);
  v31 = (unsigned __int16 *)((char *)v870 - *v870);
  if (*v31 < 0x29u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[20];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)v870 + v32) != 0;
  }
  *(_BYTE *)(v6 + 480) = v32;
  std::string::operator=(v854, (const std::string *)&__str);
  v33 = (unsigned __int16 *)((char *)v870 - *v870);
  v877 = v15;
  if (*v33 >= 5u && v33[2] && *(_BYTE *)(a2 + 6360))
  {
    v34 = *(_QWORD *)(a3 + 8);
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v35 = *(const void **)a3;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      *(_QWORD *)&__dst[8] = v34;
      *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
      *(_QWORD *)__dst = v36;
    }
    else
    {
      __dst[23] = *(_QWORD *)(a3 + 8);
      v36 = __dst;
      if (!v34)
        goto LABEL_61;
    }
    memmove(v36, v35, v34);
LABEL_61:
    v36[v34] = 0;
    v39 = (_QWORD *)a3;
    if (*v845 < 0)
    {
      operator delete(*(void **)v846);
      v39 = (_QWORD *)a3;
    }
    *(_OWORD *)v846 = *(_OWORD *)__dst;
    *(_QWORD *)(v846 + 16) = *(_QWORD *)&__dst[16];
    v40 = v39 + 3;
    v15 = v877;
    if (v39[3])
    {
      if (!v39[4])
        v40 = v39 + 73;
    }
    else
    {
      v40 = v39 + 73;
    }
    *(_QWORD *)(v6 + 872) = *v40 - *v39;
  }
  v875 = v7;
  if (*(_QWORD *)(a3 + 344))
  {
    v41 = (unsigned int **)(a3 + 344);
    if (!*(_QWORD *)(a3 + 352))
      v41 = (unsigned int **)(a3 + 904);
  }
  else
  {
    v41 = (unsigned int **)(a3 + 904);
  }
  v863 = v8;
  v869 = (_QWORD *)v6;
  if (*v41 && v41[1])
  {
    v42 = (int *)((char *)*v41 + **v41);
    v43 = (unsigned __int16 *)((char *)v42 - *v42);
    v44 = *v43;
    if (v43[2])
    {
      v45 = (int *)((char *)v42 + v43[2] + *(unsigned int *)((char *)v42 + v43[2]));
      if (v44 < 7)
        goto LABEL_83;
    }
    else
    {
      v45 = 0;
      if (v44 < 7)
        goto LABEL_83;
    }
    v46 = v43[3];
    if (v46)
    {
      v47 = (char *)v42 + v46 + *(unsigned int *)((char *)v42 + v46);
      if (!*v45)
        goto LABEL_122;
      goto LABEL_84;
    }
LABEL_83:
    v47 = 0;
    if (!*v45)
      goto LABEL_122;
LABEL_84:
    v48 = 0;
    v864 = v47 + 4;
    v866 = v45 + 1;
    do
    {
      v50 = (char *)&v866[v48 + 1] + v866[v48];
      v51 = strlen(v50);
      if (v51 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v52 = v51;
      if (v51 >= 0x17)
      {
        v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v54 = v51 | 7;
        v55 = v54 + 1;
        v53 = operator new(v54 + 1);
        *(_QWORD *)&__dst[8] = v52;
        *(_QWORD *)&__dst[16] = v55 | 0x8000000000000000;
        *(_QWORD *)__dst = v53;
      }
      else
      {
        __dst[23] = v51;
        v53 = __dst;
        if (!v51)
          goto LABEL_95;
      }
      memmove(v53, v50, v52);
LABEL_95:
      v53[v52] = 0;
      v56 = *(_QWORD *)(v6 + 1152);
      if (v56 >= *(_QWORD *)(v6 + 1160))
      {
        v57 = std::vector<std::string>::__push_back_slow_path<std::string>(v861, (uint64_t)__dst);
        v58 = __dst[23];
        *(_QWORD *)(v6 + 1152) = v57;
        if (v58 < 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        *(_OWORD *)v56 = *(_OWORD *)__dst;
        *(_QWORD *)(v56 + 16) = *(_QWORD *)&__dst[16];
        *(_QWORD *)(v6 + 1152) = v56 + 24;
      }
      v59 = *(_DWORD *)&v864[4 * v48];
      v60 = *(char **)(v6 + 1176);
      v61 = *(_QWORD *)(v6 + 1184);
      if ((unint64_t)v60 < v61)
      {
        *(_DWORD *)v60 = v59;
        v49 = v60 + 4;
      }
      else
      {
        v62 = v6;
        v63 = v5;
        v64 = v45;
        v65 = *(char **)(v62 + 1168);
        v66 = (v60 - v65) >> 2;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
          abort();
        v68 = v61 - (_QWORD)v65;
        if (v68 >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          if (v69 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v70 = operator new(4 * v69);
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v66];
        *v71 = v59;
        v49 = v71 + 1;
        if (v60 != v65)
        {
          v72 = v60 - 4 - v65;
          if (v72 < 0x2C)
            goto LABEL_1210;
          if ((unint64_t)(v65 - v70) < 0x20)
            goto LABEL_1210;
          v73 = (v72 >> 2) + 1;
          v74 = &v70[4 * v66 - 16];
          v75 = v60 - 16;
          v76 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v77 = *(_OWORD *)v75;
            *(v74 - 1) = *((_OWORD *)v75 - 1);
            *v74 = v77;
            v74 -= 2;
            v75 -= 32;
            v76 -= 8;
          }
          while (v76);
          v71 -= v73 & 0x7FFFFFFFFFFFFFF8;
          v60 -= 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1210:
            do
            {
              v78 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *--v71 = v78;
            }
            while (v60 != v65);
          }
        }
        v869[146] = v71;
        v869[147] = v49;
        v869[148] = &v70[4 * v69];
        if (v65)
          operator delete(v65);
        v45 = v64;
        v5 = v63;
        v6 = (unint64_t)v869;
      }
      *(_QWORD *)(v6 + 1176) = v49;
      ++v48;
      v15 = v877;
    }
    while (v48 < *v45);
  }
LABEL_122:
  if (*(_QWORD *)(a3 + 544))
  {
    v79 = (unsigned int **)(a3 + 544);
    if (!*(_QWORD *)(a3 + 552))
      v79 = (unsigned int **)(a3 + 1104);
  }
  else
  {
    v79 = (unsigned int **)(a3 + 1104);
  }
  v81 = *v79;
  v80 = v79[1];
  if (v81)
    v82 = v80 == 0;
  else
    v82 = 1;
  v83 = v875;
  if (v82
    || (v84 = (int *)((char *)v81 + *v81), v85 = (unsigned __int16 *)((char *)v84 - *v84), *v85 < 5u)
    || (v86 = v85[2]) == 0)
  {
    v87 = 0;
  }
  else
  {
    v87 = *(_QWORD *)((char *)v84 + v86);
  }
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  *(float *)(v6 + 1056) = (float)(v87
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / unk_254235750)
                        / 1000000.0;
  v88 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v88 < 5u)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v89 = v88[2];
    if (v89)
      LODWORD(v89) = *(int *)((char *)v15 + v89);
  }
  *v849 = v89;
  v90 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v90 < 0x2Du)
  {
    LODWORD(v91) = 0;
  }
  else
  {
    v91 = v90[22];
    if (v91)
      LODWORD(v91) = *(int *)((char *)v15 + v91);
  }
  *(_DWORD *)(v6 + 1052) = v91;
  v92 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v92 < 0x35u)
  {
    LODWORD(v93) = 0;
  }
  else
  {
    v93 = v92[26];
    if (v93)
      LODWORD(v93) = *(int *)((char *)v15 + v93);
  }
  *(_DWORD *)(v6 + 1092) = v93;
  v94 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v94 < 0x43u)
  {
    LODWORD(v95) = 0;
    v96 = (_QWORD *)a3;
  }
  else
  {
    v95 = v94[33];
    v96 = (_QWORD *)a3;
    if (v95)
      LODWORD(v95) = *(int *)((char *)v15 + v95);
  }
  *(_DWORD *)(v6 + 1128) = v95;
  if (v96[38])
  {
    v97 = (unsigned int **)(v96 + 38);
    if (!v96[39])
      v97 = (unsigned int **)(v96 + 108);
    v98 = *v97;
    if (!*v97)
      goto LABEL_237;
    goto LABEL_159;
  }
  v97 = (unsigned int **)(v96 + 108);
  v98 = (unsigned int *)v96[108];
  if (v98)
  {
LABEL_159:
    if (v97[1])
    {
      v99 = (int *)((char *)v98 + *v98);
      v100 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v100 < 0xDu)
      {
        LODWORD(v101) = 0;
      }
      else
      {
        v101 = v100[6];
        if (v101)
          LODWORD(v101) = *(int *)((char *)v99 + v101);
      }
      *(_DWORD *)(v6 + 1052) = v101;
      v102 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v102 < 0xBu)
      {
        LODWORD(v103) = 0;
      }
      else
      {
        v103 = v102[5];
        if (v103)
          LODWORD(v103) = *(int *)((char *)v99 + v103);
      }
      *(_DWORD *)(v6 + 1060) = v103;
      v104 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v104 < 0x11u)
      {
        LODWORD(v105) = 0;
      }
      else
      {
        v105 = v104[8];
        if (v105)
          LODWORD(v105) = *(int *)((char *)v99 + v105);
      }
      *(_DWORD *)(v6 + 1064) = v105;
      v106 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v106 < 0x13u)
      {
        LODWORD(v107) = 0;
      }
      else
      {
        v107 = v106[9];
        if (v107)
          LODWORD(v107) = *(int *)((char *)v99 + v107);
      }
      *(_DWORD *)(v6 + 1068) = v107;
      v108 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v108 < 0x17u)
      {
        LODWORD(v109) = 0;
      }
      else
      {
        v109 = v108[11];
        if (v109)
          LODWORD(v109) = *(int *)((char *)v99 + v109);
      }
      *(_DWORD *)(v6 + 1072) = v109;
      v110 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v110 < 0x1Bu)
      {
        LODWORD(v111) = 0;
      }
      else
      {
        v111 = v110[13];
        if (v111)
          LODWORD(v111) = *(int *)((char *)v99 + v111);
      }
      *(_DWORD *)(v6 + 1076) = v111;
      v112 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v112 < 0x15u)
      {
        LODWORD(v113) = 0;
      }
      else
      {
        v113 = v112[10];
        if (v113)
          LODWORD(v113) = *(int *)((char *)v99 + v113);
      }
      *(_DWORD *)(v6 + 1080) = v113;
      v114 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v114 < 0x19u)
      {
        LODWORD(v115) = 0;
      }
      else
      {
        v115 = v114[12];
        if (v115)
          LODWORD(v115) = *(int *)((char *)v99 + v115);
      }
      *(_DWORD *)(v6 + 1084) = v115;
      v116 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v116 < 0x1Du)
      {
        LODWORD(v117) = 0;
      }
      else
      {
        v117 = v116[14];
        if (v117)
          LODWORD(v117) = *(int *)((char *)v99 + v117);
      }
      *(_DWORD *)(v6 + 1088) = v117;
      v118 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v118 < 0xFu)
      {
        LODWORD(v119) = 0;
      }
      else
      {
        v119 = v118[7];
        if (v119)
          LODWORD(v119) = *(int *)((char *)v99 + v119);
      }
      *(_DWORD *)(v6 + 1092) = v119;
      v120 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v120 < 0x1Fu)
      {
        LODWORD(v121) = 0;
      }
      else
      {
        v121 = v120[15];
        if (v121)
          LODWORD(v121) = *(int *)((char *)v99 + v121);
      }
      *(_DWORD *)(v6 + 1096) = v121;
      v122 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v122 < 0x21u)
      {
        LODWORD(v123) = 0;
      }
      else
      {
        v123 = v122[16];
        if (v123)
          LODWORD(v123) = *(int *)((char *)v99 + v123);
      }
      *(_DWORD *)(v6 + 1100) = v123;
      v124 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v124 < 0x23u)
      {
        LODWORD(v125) = 0;
      }
      else
      {
        v125 = v124[17];
        if (v125)
          LODWORD(v125) = *(int *)((char *)v99 + v125);
      }
      *(_DWORD *)(v6 + 1104) = v125;
      v126 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v126 < 0x25u)
      {
        LODWORD(v127) = 0;
      }
      else
      {
        v127 = v126[18];
        if (v127)
          LODWORD(v127) = *(int *)((char *)v99 + v127);
      }
      *(_DWORD *)(v6 + 1108) = v127;
      v128 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v128 < 0x27u)
      {
        LODWORD(v129) = 0;
      }
      else
      {
        v129 = v128[19];
        if (v129)
          LODWORD(v129) = *(int *)((char *)v99 + v129);
      }
      *(_DWORD *)(v6 + 1112) = v129;
      v130 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v130 < 0x29u)
      {
        LODWORD(v131) = 0;
      }
      else
      {
        v131 = v130[20];
        if (v131)
          LODWORD(v131) = *(int *)((char *)v99 + v131);
      }
      *(_DWORD *)(v6 + 1116) = v131;
      v132 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v132 < 0x2Bu)
      {
        LODWORD(v133) = 0;
      }
      else
      {
        v133 = v132[21];
        if (v133)
          LODWORD(v133) = *(int *)((char *)v99 + v133);
      }
      *(_DWORD *)(v6 + 1120) = v133;
      v134 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v134 < 7u)
      {
        LODWORD(v135) = 0;
      }
      else
      {
        v135 = v134[3];
        if (v135)
          LODWORD(v135) = *(int *)((char *)v99 + v135);
      }
      *(_DWORD *)(v6 + 1124) = v135;
      v136 = (unsigned __int16 *)((char *)v99 - *v99);
      if (*v136 >= 5u && (v137 = v136[2]) != 0)
        v138 = *(int *)((char *)v99 + v137);
      else
        v138 = 0;
      *(_DWORD *)(v6 + 1132) = v138;
    }
  }
LABEL_237:
  if (*(_QWORD *)(a3 + 424))
  {
    v139 = *(_QWORD *)(a3 + 432);
    if (v139)
      v140 = *(_QWORD *)(a3 + 424);
    else
      v140 = *(_QWORD *)(a3 + 984);
    if (v139)
      v141 = a3 + 424;
    else
      v141 = a3 + 984;
  }
  else
  {
    v141 = a3 + 984;
    v140 = *(_QWORD *)(a3 + 984);
  }
  MEMORY[0x234927D34](v6 + 1192, v140, *(_QWORD *)(v141 + 8));
  std::string::push_back((std::string *)(v6 + 1192), 0);
  v142 = *v15;
  v143 = (char *)v15 - v142;
  v144 = *(unsigned __int16 *)((char *)v15 - v142);
  if (v144 < 0x39)
    goto LABEL_263;
  v145 = -v142;
  v146 = *((unsigned __int16 *)v143 + 28);
  if (v146)
  {
    v147 = (int *)((char *)v15 + v146 + *(unsigned int *)((char *)v15 + v146));
    if (*v147)
    {
      *(_BYTE *)(v6 + 936) = 1;
      v148 = (_DWORD *)((char *)v147 + v147[1] + 4);
      v149 = (unsigned __int16 *)((char *)v148 - *v148);
      if (*v149 >= 9u && (v150 = v149[4]) != 0)
        v151 = *(int *)((char *)v148 + v150);
      else
        v151 = 0;
      *(_DWORD *)(v6 + 1136) = v151;
      *(_BYTE *)(v6 + 1140) = 1;
      v152 = *v15;
      v145 = -v152;
      v144 = *(unsigned __int16 *)((char *)v15 - v152);
    }
  }
  if (v144 < 0x3B)
    goto LABEL_263;
  v153 = (char *)v15 + v145;
  if (*((_WORD *)v153 + 29))
  {
    v154 = (unsigned int *)((char *)v15
                          + *((unsigned __int16 *)v153 + 29)
                          + *(unsigned int *)((char *)v15 + *((unsigned __int16 *)v153 + 29)));
    v155 = *v154;
    if ((_DWORD)v155)
    {
      v156 = v154 + 1;
      do
      {
        v158 = *v156++;
        v157 = v158;
        if (!(v158 >> 20))
          *(_QWORD *)(v6 + 928) |= 1 << v157;
        --v155;
      }
      while (v155);
    }
  }
  if (v144 < 0x57)
  {
LABEL_263:
    LODWORD(v159) = 0;
  }
  else
  {
    v159 = *((unsigned __int16 *)v153 + 43);
    if (*((_WORD *)v153 + 43))
      LODWORD(v159) = *(int *)((char *)v15 + v159);
  }
  *(_DWORD *)(v6 + 300) = v159;
  v160 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v160 >= 0x21u && (v161 = v160[16]) != 0)
    v162 = *(int *)((char *)v15 + v161);
  else
    v162 = 0;
  v164 = &unk_255FF8000;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(v6 + 304) = getAdditionalSpillBufferBytes(void)::extra + v162;
  v165 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v165 < 0x59u)
  {
    LODWORD(v166) = 0;
  }
  else
  {
    v166 = v165[44];
    if (v166)
      LODWORD(v166) = *(int *)((char *)v15 + v166);
  }
  *(_DWORD *)(v6 + 332) = v166;
  v167 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v167 < 0x51u)
  {
    LODWORD(v168) = 0;
  }
  else
  {
    v168 = v167[40];
    if (v168)
      LODWORD(v168) = *(int *)((char *)v15 + v168);
  }
  *(_DWORD *)(v6 + 336) = v168;
  v169 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v169 < 0x4Bu)
  {
    LODWORD(v170) = 0;
  }
  else
  {
    v170 = v169[37];
    if (v170)
      LODWORD(v170) = *(int *)((char *)v15 + v170);
  }
  *(_DWORD *)(v6 + 344) = v170;
  v171 = *v15;
  v172 = (_WORD *)((char *)v15 - v171);
  v173 = *(unsigned __int16 *)((char *)v15 - v171);
  if (v173 < 0x25)
    goto LABEL_291;
  if (v172[18] && *((_BYTE *)v15 + (unsigned __int16)v172[18]))
  {
    if (v173 < 0x27)
    {
      v177 = 0;
      v175 = 1;
      goto LABEL_293;
    }
    LODWORD(v174) = (unsigned __int16)v172[19];
    v175 = 1;
    if (!v172[19])
      goto LABEL_292;
    goto LABEL_1193;
  }
  if (v173 < 0x27)
  {
LABEL_291:
    v175 = 0;
    goto LABEL_292;
  }
  v174 = (unsigned __int16)v172[19];
  if (!v172[19] || (v176 = *((unsigned __int8 *)v15 + v174), !*((_BYTE *)v15 + v174)))
  {
    if (v173 >= 0x29 && v172[20])
    {
      v175 = *((_BYTE *)v15 + (unsigned __int16)v172[20]) != 0;
      if (!v172[19])
        goto LABEL_292;
      goto LABEL_1193;
    }
    v175 = 0;
    if (v172[19])
    {
LABEL_1193:
      v176 = *((unsigned __int8 *)v15 + v174);
      goto LABEL_1194;
    }
LABEL_292:
    v177 = 0;
    goto LABEL_293;
  }
  v175 = 1;
LABEL_1194:
  v177 = v176 != 0;
LABEL_293:
  *(_BYTE *)(v6 + 354) = v177;
  v178 = (unsigned __int16 *)((char *)v870 - *v870);
  v179 = *v178;
  if (v179 < 0x21)
  {
    v181 = 0;
    LODWORD(v180) = 0;
  }
  else
  {
    v180 = v178[16];
    if (v178[16])
      LODWORD(v180) = *(int *)((char *)v870 + v180);
    if (v179 < 0x4D)
    {
      v181 = 0;
    }
    else
    {
      v181 = v178[38];
      if (v178[38])
        v181 = *(unsigned int *)((char *)v870 + v181);
    }
  }
  *(_QWORD *)(v6 + 384) = v180 | (unint64_t)(v181 << 32);
  *(_BYTE *)(v6 + 358) = v175 || v177;
  if (v173 < 0x37)
  {
    LOBYTE(v182) = 0;
  }
  else
  {
    v182 = (unsigned __int16)v172[27];
    if (v172[27])
      LOBYTE(v182) = *((_BYTE *)v15 + v182) != 0;
  }
  *(_BYTE *)(v6 + 353) = v182;
  if (v179 < 0x33)
  {
    LOBYTE(v183) = 0;
  }
  else
  {
    v183 = v178[25];
    if (v178[25])
      LOBYTE(v183) = *((_BYTE *)v870 + v183) != 0;
  }
  v184 = -v171;
  *(_BYTE *)(v6 + 359) = v183;
  if (v173 < 0x3F)
  {
    LOBYTE(v185) = 0;
  }
  else
  {
    v185 = (unsigned __int16)v172[31];
    if (v185)
    {
      v186 = (unsigned int *)((char *)v15 + v185 + *(unsigned int *)((char *)v15 + v185));
      v185 = *v186;
      if ((_DWORD)v185)
      {
        v187 = v186 + 1;
        while (1)
        {
          v189 = *v187++;
          v188 = v189;
          if (v189 < 0x36 && ((0x3F000000000777uLL >> v188) & 1) != 0)
            break;
          if (!--v185)
            goto LABEL_318;
        }
        LOBYTE(v185) = 1;
      }
    }
  }
LABEL_318:
  *(_BYTE *)(v6 + 361) = v185;
  v867 = v175;
  if (v179 <= 0x14)
  {
    *(_BYTE *)(v6 + 355) = 0;
    *(_BYTE *)(v6 + 1017) = 0;
    *(_BYTE *)(v6 + 1019) = 0;
    if (v173 < 0x21)
      goto LABEL_326;
    goto LABEL_354;
  }
  v190 = v178[10];
  if (v178[10])
    LOBYTE(v190) = *((_BYTE *)v870 + v190) != 0;
  *(_BYTE *)(v6 + 355) = v190;
  if (v179 < 0x25)
  {
    *(_BYTE *)(v6 + 1017) = 0;
    if (v179 < 0x23)
    {
LABEL_352:
      *(_BYTE *)(v6 + 1019) = 0;
LABEL_353:
      if (v173 < 0x21)
        goto LABEL_326;
      goto LABEL_354;
    }
  }
  else
  {
    v191 = v178[18];
    if (v178[18])
      LOBYTE(v191) = *((_BYTE *)v870 + v191) != 0;
    *(_BYTE *)(v6 + 1017) = v191;
  }
  v195 = v178[17];
  if (!v195)
    goto LABEL_352;
  *(_BYTE *)(v6 + 1019) = 1;
  v196 = (unsigned int *)((char *)v870 + v195);
  v197 = *v196;
  v199 = (unsigned int *)((char *)v196 + v197 + 4);
  v198 = *(unsigned int *)((char *)v196 + v197);
  if (!(_DWORD)v198)
    goto LABEL_353;
  v200 = &v199[v198];
  do
  {
    v201 = (int *)((char *)v199 + *v199);
    v202 = (unsigned __int16 *)((char *)v201 - *v201);
    v203 = *v202;
    if (v203 < 7)
    {
      v204 = 0;
      v206 = 0;
      if (v203 < 5)
        goto LABEL_341;
      v205 = v202[2];
      if (v205)
        goto LABEL_340;
    }
    else if (v202[3])
    {
      v204 = *(int *)((char *)v201 + v202[3]);
      v205 = v202[2];
      if (v205)
        goto LABEL_340;
    }
    else
    {
      v204 = 0;
      v205 = v202[2];
      if (v205)
      {
LABEL_340:
        v206 = *(int *)((char *)v201 + v205);
        goto LABEL_341;
      }
    }
    v206 = 0;
LABEL_341:
    v207 = v873;
    while (1)
    {
      v208 = *v207;
      v209 = v207;
      if (!*v207)
        break;
      while (1)
      {
        v207 = (uint64_t **)v208;
        v210 = *((_DWORD *)v208 + 7);
        if (v206 < v210)
          break;
        if (v210 >= v206)
        {
          v211 = v207;
          goto LABEL_333;
        }
        v208 = v207[1];
        if (!v208)
        {
          v209 = v207 + 1;
          goto LABEL_347;
        }
      }
    }
LABEL_347:
    v211 = operator new(0x28uLL);
    v211[7] = v206;
    v211[8] = 0;
    *(_QWORD *)v211 = 0;
    *((_QWORD *)v211 + 1) = 0;
    *((_QWORD *)v211 + 2) = v207;
    *v209 = (uint64_t *)v211;
    v212 = **(_QWORD **)(v6 + 1024);
    v213 = (uint64_t *)v211;
    if (v212)
    {
      *(_QWORD *)(v6 + 1024) = v212;
      v213 = *v209;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 1032), v213);
    ++*(_QWORD *)(v6 + 1040);
LABEL_333:
    v211[8] = v204;
    ++v199;
    v83 = v875;
    v15 = v877;
  }
  while (v199 != v200);
  v375 = *v877;
  v184 = -v375;
  v164 = (_DWORD *)&unk_255FF8000;
  if (*(unsigned __int16 *)((char *)v877 - v375) < 0x21u)
  {
LABEL_326:
    v192 = 0;
    v193 = v867;
    if ((v194 & 1) == 0)
      goto LABEL_1203;
    goto LABEL_358;
  }
LABEL_354:
  v193 = v867;
  if (*(_WORD *)((char *)v15 + v184 + 32))
  {
    v192 = *(int *)((char *)v15 + *(unsigned __int16 *)((char *)v15 + v184 + 32));
    if ((v214 & 1) == 0)
      goto LABEL_1203;
  }
  else
  {
    v192 = 0;
    if ((v215 & 1) == 0)
    {
LABEL_1203:
      {
        v164[740] = 0;
      }
    }
  }
LABEL_358:
  v216 = v164[740] + v192;
  *(_DWORD *)(v6 + 296) = v216;
  v217 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v217 < 0x43u)
  {
    LODWORD(v218) = 0;
  }
  else
  {
    v218 = v217[33];
    if (v218)
      LODWORD(v218) = *(int *)((char *)v15 + v218);
  }
  *(_DWORD *)(v6 + 308) = v218;
  v219 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v219 < 5u)
  {
    LODWORD(v220) = 0;
  }
  else
  {
    v220 = v219[2];
    if (v220)
      LODWORD(v220) = *(int *)((char *)v15 + v220);
  }
  *(_DWORD *)(v6 + 292) = v220;
  v221 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v221 < 0x51u)
  {
    LODWORD(v222) = 0;
  }
  else
  {
    v222 = v221[40];
    if (v222)
      LODWORD(v222) = *(int *)((char *)v15 + v222);
  }
  *(_DWORD *)(v6 + 328) = v222;
  v223 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v223 < 0x4Fu)
  {
    LODWORD(v224) = 0;
  }
  else
  {
    v224 = v223[39];
    if (v224)
      LODWORD(v224) = *(int *)((char *)v15 + v224);
  }
  *(_DWORD *)(v6 + 340) = v224;
  *(_DWORD *)(v6 + 348) = *(_DWORD *)(v5 + 428);
  v225 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*(int *)((char *)v15 + v225[6] + *(unsigned int *)((char *)v15 + v225[6])) | v216)
    v226 = 1;
  else
    v226 = v193;
  if ((v226 & 1) != 0)
    goto LABEL_388;
  v227 = *v225;
  if (v227 < 0x21)
  {
    v228 = 0;
  }
  else if (v225[16])
  {
    v228 = *(int *)((char *)v15 + v225[16]);
    if (v227 >= 0x43)
    {
LABEL_1143:
      if (v225[33])
      {
        v229 = *(int *)((char *)v15 + v225[33]);
        if ((v811 & 1) == 0)
          goto LABEL_1145;
        goto LABEL_384;
      }
    }
  }
  else
  {
    v228 = 0;
    if (v227 >= 0x43)
      goto LABEL_1143;
  }
  v229 = 0;
  if ((v230 & 1) == 0)
  {
LABEL_1145:
    {
      v164[740] = 0;
    }
  }
LABEL_384:
  if (v229 + v228 + v164[740])
  {
LABEL_388:
    LOBYTE(v232) = 1;
  }
  else
  {
    v231 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v231 < 0x5Fu)
    {
      LOBYTE(v232) = 0;
    }
    else
    {
      v232 = v231[47];
      if (v232)
        LOBYTE(v232) = *((_BYTE *)v15 + v232) != 0;
    }
  }
  *(_BYTE *)(v6 + 352) = v232;
  v233 = (unsigned __int16 *)((char *)v870 - *v870);
  if (*v233 < 0x11u)
  {
    LODWORD(v234) = 0;
    v235 = a3;
  }
  else
  {
    v234 = v233[8];
    v235 = a3;
    if (v234)
      LODWORD(v234) = *(int *)((char *)v870 + v234);
  }
  *(_DWORD *)(v6 + 840) = v234;
  if ((v236 & 1) == 0)
  {
    v235 = a3;
    if (v844)
    {
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitVertexArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
      v235 = a3;
    }
  }
  v237 = (_OWORD *)(v6 + 696);
  v238 = (const void **)(v235 + 24);
  if (*(_QWORD *)(v235 + 24))
  {
    v239 = *(_QWORD *)(v235 + 32);
    v240 = (const void **)(v235 + 584);
    if (v239)
      v241 = v238;
    else
      v241 = v240;
  }
  else
  {
    v241 = (const void **)(v235 + 584);
  }
  AGX::Heap<true>::allocateImpl(__dst, a2 + 4680, (uint64_t)v241[1]+ AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitVertexArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (_QWORD *)(v6 + 896));
  *(_DWORD *)(v6 + 920) += *(_DWORD *)&__dst[16];
  v242 = *(_OWORD *)&__dst[16];
  *v237 = *(_OWORD *)__dst;
  *(_OWORD *)(v6 + 712) = v242;
  *(_OWORD *)(v6 + 721) = *(_OWORD *)&__dst[25];
  *(_QWORD *)(v6 + 488) = *(_QWORD *)(v6 + 696);
  v865 = a2 + 4680;
  *(_QWORD *)(v6 + 520) = a2 + 4680;
  v243 = *(_OWORD *)(v6 + 712);
  *(_OWORD *)(v6 + 528) = *v237;
  *(_OWORD *)(v6 + 544) = v243;
  *(_OWORD *)(v6 + 553) = *(_OWORD *)(v6 + 721);
  if (*v238)
  {
    v244 = (_QWORD *)a3;
    v245 = *(_QWORD *)(a3 + 32);
    if (v245)
      v246 = *v238;
    else
      v246 = *(const void **)(a3 + 584);
    if (v245)
      v247 = v238;
    else
      v247 = (const void **)(a3 + 584);
  }
  else
  {
    v244 = (_QWORD *)a3;
    v247 = (const void **)(a3 + 584);
    v246 = *(const void **)(a3 + 584);
  }
  v248 = v877;
  v868 = a2 + 4512;
  memcpy(*(void **)(v6 + 704), v246, (size_t)v247[1]);
  v249 = *(_QWORD *)(v6 + 704);
  v250 = *(_QWORD *)(v6 + 712);
  *(_QWORD *)(v6 + 496) = *(_QWORD *)(v6 + 488);
  *(_QWORD *)(v6 + 504) = v249;
  *(_QWORD *)(v6 + 512) = v250;
  v251 = (const void **)(v244 + 8);
  if (v244[8])
  {
    if (v244[9])
      v252 = v244 + 8;
    else
      v252 = (_QWORD *)(a3 + 624);
    v244 = (_QWORD *)a3;
    v253 = v252[1];
    if (!v253)
      goto LABEL_423;
  }
  else
  {
    v253 = v244[79];
    if (!v253)
      goto LABEL_423;
  }
  AGX::Heap<true>::allocateImpl(__dst, v868, v253, (_QWORD *)(v6 + 904));
  *(_DWORD *)(v6 + 920) += *(_DWORD *)&__dst[16];
  v254 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(v6 + 744) = *(_OWORD *)__dst;
  *(_OWORD *)(v6 + 760) = v254;
  *(_OWORD *)(v6 + 769) = *(_OWORD *)&__dst[25];
  v255 = *(_OWORD *)(v6 + 760);
  *(_OWORD *)(v6 + 576) = *(_OWORD *)(v6 + 744);
  *(_OWORD *)(v6 + 592) = v255;
  *(_OWORD *)(v6 + 601) = *(_OWORD *)(v6 + 769);
  if (*v251)
  {
    v256 = *(_QWORD *)(a3 + 72);
    if (v256)
      v257 = *v251;
    else
      v257 = *(const void **)(a3 + 624);
    if (v256)
      v258 = v251;
    else
      v258 = (const void **)(a3 + 624);
  }
  else
  {
    v258 = (const void **)(a3 + 624);
    v257 = *(const void **)(a3 + 624);
  }
  v248 = v877;
  memcpy(*(void **)(v6 + 752), v257, (size_t)v258[1]);
  v244 = (_QWORD *)a3;
LABEL_423:
  v259 = (const void **)(v244 + 13);
  if (v244[13])
  {
    if (v244[14])
      v260 = v244 + 13;
    else
      v260 = v244 + 83;
    v261 = v260[1];
    if (v261)
      goto LABEL_428;
LABEL_436:
    if (!*(_BYTE *)(v6 + 480))
      goto LABEL_440;
LABEL_441:
    {
      {
        v269 = v856;
        if (*(char *)(v6 + 431) < 0)
          v269 = (_QWORD *)*v856;
        v270 = v854;
        if (*(char *)(v6 + 479) < 0)
          v270 = (std::string *)v854->__r_.__value_.__r.__words[0];
        v271 = v855;
        if (*(char *)(v6 + 455) < 0)
          v271 = (_QWORD *)*v855;
        v272 = *(_DWORD *)(v6 + 392);
        v273 = *(_QWORD *)(v6 + 488);
        v274 = *(_QWORD *)(v6 + 712);
        *(_DWORD *)__dst = 136447490;
        *(_QWORD *)&__dst[4] = v269;
        *(_WORD *)&__dst[12] = 2082;
        *(_QWORD *)&__dst[14] = v270;
        *(_WORD *)&__dst[22] = 2082;
        *(_QWORD *)&__dst[24] = v271;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v272;
        *(_WORD *)&__dst[38] = 2050;
        *(_QWORD *)&__dst[40] = v273;
        v887 = 2050;
        v888 = v274;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v268, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    v275 = *(_QWORD *)(v6 + 8);
    v276 = v856;
    if (*(char *)(v6 + 431) < 0)
      v276 = (_QWORD *)*v856;
    v277 = v854;
    if (*(char *)(v6 + 479) < 0)
      v277 = (std::string *)v854->__r_.__value_.__r.__words[0];
    v278 = v855;
    if (*(char *)(v6 + 455) < 0)
      v278 = (_QWORD *)*v855;
    v279 = *(_DWORD *)(v6 + 392);
    v280 = *(_QWORD *)(v6 + 488);
    v281 = *(_QWORD *)(v6 + 712);
    v282 = *(_BYTE *)(v6 + 480);
    *(_QWORD *)__dst = v276;
    *(_QWORD *)&__dst[8] = v277;
    *(_QWORD *)&__dst[16] = v278;
    *(_DWORD *)&__dst[24] = v279;
    *(_QWORD *)&__dst[32] = v280;
    *(_QWORD *)&__dst[40] = v281;
    LOBYTE(v887) = v282;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v275, v6, (__int128 *)__dst);
  }
  else
  {
    v261 = v244[84];
    if (!v261)
      goto LABEL_436;
LABEL_428:
    AGX::Heap<true>::allocateImpl(__dst, v868, v261, (_QWORD *)(v6 + 912));
    *(_DWORD *)(v6 + 920) += *(_DWORD *)&__dst[16];
    v262 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(v6 + 792) = *(_OWORD *)__dst;
    *(_OWORD *)(v6 + 808) = v262;
    *(_OWORD *)(v6 + 817) = *(_OWORD *)&__dst[25];
    v263 = *(_OWORD *)(v6 + 808);
    *(_OWORD *)(v6 + 624) = *(_OWORD *)(v6 + 792);
    *(_OWORD *)(v6 + 640) = v263;
    *(_OWORD *)(v6 + 649) = *(_OWORD *)(v6 + 817);
    if (*v259)
    {
      v264 = *(_QWORD *)(a3 + 112);
      if (v264)
        v265 = *v259;
      else
        v265 = *(const void **)(a3 + 664);
      if (v264)
        v266 = v244 + 13;
      else
        v266 = (_QWORD *)(a3 + 664);
    }
    else
    {
      v266 = (_QWORD *)(a3 + 664);
      v265 = *(const void **)(a3 + 664);
    }
    v248 = v877;
    memcpy(*(void **)(v6 + 800), v265, v266[1]);
    v267 = *(_QWORD *)(v6 + 808);
    *(_OWORD *)(v6 + 672) = *(_OWORD *)(v6 + 792);
    *(_QWORD *)(v6 + 688) = v267;
    if (*(_BYTE *)(v6 + 480))
      goto LABEL_441;
LABEL_440:
    if (*(_BYTE *)(*(_QWORD *)(v6 + 8) + 6681))
      goto LABEL_441;
  }
  v283 = *(_DWORD *)(v5 + 124);
  v284 = *(_DWORD *)(v5 + 132);
  v285 = *(_DWORD *)(v5 + 144);
  if (*(_BYTE *)(v5 + 184))
    v286 = *(_DWORD *)(v5 + 144);
  else
    v286 = 0;
  v287 = *(_DWORD *)(v5 + 140);
  if (!*(_QWORD *)(v5 + 168))
    v285 = 0;
  v288 = *(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128) + *(_DWORD *)(v5 + 136);
  v289 = v286 + *(_DWORD *)(v5 + 148) + v285 + *(_DWORD *)(v5 + 152) + ((v283 + v284 + v287 - v288 + 1) & 0xFFFFFFFE);
  v290 = *(_QWORD *)(v6 + 48);
  v291 = (*(_QWORD *)(v6 + 56) - v290) >> 2;
  if (v289 <= v291)
  {
    if (v289 < v291)
      *(_QWORD *)(v6 + 56) = v290 + 4 * v289;
  }
  else
  {
    std::vector<unsigned int>::__append(v83, v289 - v291);
    v283 = *(_DWORD *)(v5 + 124);
    v284 = *(_DWORD *)(v5 + 132);
    v287 = *(_DWORD *)(v5 + 140);
    v288 = *(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128) + *(_DWORD *)(v5 + 136);
  }
  *(_DWORD *)(v6 + 312) = v283 + v284 + v287 - v288;
  v292 = *v248;
  v293 = *(unsigned __int16 *)((char *)v248 - v292 + 16);
  v294 = *(unsigned int *)((char *)v248 + v293);
  v295 = *(unsigned int *)((char *)v248 + v293 + v294);
  if ((_DWORD)v295)
  {
    v296 = 4 * v295;
    v297 = v293 + v294;
    while (1)
    {
      v299 = *(unsigned int *)((char *)v248 + v297 + 4);
      v300 = (char *)v248 + v297 + v299;
      v301 = v299 - *((int *)v300 + 1);
      v302 = (char *)v248 + v297 + v301;
      v303 = *((unsigned __int16 *)v302 + 2);
      if (v303 < 7)
        goto LABEL_479;
      v304 = *((unsigned __int16 *)v302 + 5);
      if (!v304 || (*(int *)((char *)v248 + v297 + v299 + v304 + 4) & 0x80000000) == 0)
        break;
LABEL_471:
      v297 += 4;
      v296 -= 4;
      if (!v296)
      {
        v292 = *v248;
        goto LABEL_486;
      }
    }
    if (v303 < 9)
    {
LABEL_479:
      v306 = 0;
    }
    else
    {
      v305 = *(unsigned __int16 *)((char *)v248 + v297 + v301 + 12);
      if (v305)
        LODWORD(v305) = *(int *)((char *)v248 + v297 + v299 + v305 + 4);
      v306 = (v305 >> 1) & 0x1FFFFFFF;
    }
    v307 = v306 - *(_DWORD *)(v5 + 120);
    begin = v83->__begin_;
    v83->__begin_[v307] = 0;
    begin[v307 + 1] = 1;
    begin[v307 + 2] = 2;
    v309 = v299 - *((int *)v300 + 1);
    if (*(unsigned __int16 *)((char *)v248 + v297 + v309 + 4) >= 0xBu
      && *(_WORD *)((char *)v248 + v297 + v309 + 14)
      && *((_BYTE *)v248 + v297 + v299 + *(unsigned __int16 *)((char *)v248 + v297 + v309 + 14) + 4))
    {
      v310 = *(unsigned __int16 *)((char *)v248 + v297 + v309 + 10);
      if (v310)
        v298 = *(int *)((char *)v248 + v297 + v299 + v310 + 4);
      else
        LOBYTE(v298) = 0;
      *(_QWORD *)(v6 + 376) |= 1 << v298;
    }
    goto LABEL_471;
  }
LABEL_486:
  v311 = -v292;
  v312 = (char *)v248 + v311;
  if (*(_BYTE *)(v6 + 354))
  {
    v313 = *((unsigned __int16 *)v312 + 12);
    v314 = *(unsigned int *)((char *)v248 + v313);
    v315 = (unsigned int *)((char *)v248 + v313 + v314);
    v316 = *v315;
    if ((_DWORD)v316)
    {
      v317 = 0;
      v318 = 4 * v316;
      v319 = (char *)v248 + v313 + v314;
      while (1)
      {
        v320 = v315[v317 / 4 + 1];
        v321 = v320 - *(int *)((char *)&v315[v317 / 4 + 1] + v320);
        v322 = &v319[v317 + v321];
        v323 = *((unsigned __int16 *)v322 + 2);
        if (v323 >= 5)
        {
          v324 = *((unsigned __int16 *)v322 + 4);
          if (v324)
          {
            if (v319[v317 + 4 + v320 + v324] == 93)
            {
              if (v323 < 7)
                break;
              v325 = *(unsigned __int16 *)&v319[v317 + 10 + v321];
              if (!v325)
                break;
              v326 = *(_DWORD *)&v319[v317 + 4 + v320 + v325];
              if ((v326 & 0x80000000) == 0 && (v326 & 0xFFF00000) != 0x400000)
                break;
            }
          }
        }
        v317 += 4;
        if (v318 == v317)
          goto LABEL_498;
      }
      *(_QWORD *)(v6 + 376) |= *(_QWORD *)(v6 + 384);
    }
  }
LABEL_498:
  v327 = *((unsigned __int16 *)v312 + 10);
  v328 = *(unsigned int *)((char *)v248 + v327);
  v329 = *(unsigned int *)((char *)v248 + v327 + v328);
  if (!(_DWORD)v329)
    goto LABEL_510;
  v330 = 4 * v329;
  v331 = v327 + v328;
  while (2)
  {
    v333 = *(unsigned int *)((char *)v248 + v331 + 4);
    v334 = v333 - *(int *)((char *)v248 + v331 + v333 + 4);
    v335 = (char *)v248 + v331 + v334;
    v336 = *((unsigned __int16 *)v335 + 2);
    if (v336 < 7)
      goto LABEL_500;
    v337 = *((unsigned __int16 *)v335 + 5);
    if (v337 && *(int *)((char *)v248 + v331 + v333 + v337 + 4) < 0)
      goto LABEL_502;
    if (v336 < 9 || (v338 = *(unsigned __int16 *)((char *)v248 + v331 + v334 + 12)) == 0)
    {
LABEL_500:
      v332 = 0;
      goto LABEL_501;
    }
    v332 = *(int *)((char *)v248 + v331 + v333 + v338 + 4);
LABEL_501:
    v83->__begin_[((v332 >> 1) & 0x1FFFFFFF) + *(_DWORD *)(v5 + 124) - (*(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128))] = 3;
LABEL_502:
    v331 += 4;
    v330 -= 4;
    if (v330)
      continue;
    break;
  }
  v311 = -(uint64_t)*v248;
LABEL_510:
  v339 = (unsigned int *)((char *)v248 + *(unsigned __int16 *)((char *)v248 + v311 + 12));
  v340 = *v339;
  v342 = (unsigned int *)((char *)v339 + v340 + 4);
  v341 = *(unsigned int *)((char *)v339 + v340);
  if ((_DWORD)v341)
  {
    v343 = &v342[v341];
    while (1)
    {
      v344 = (int *)((char *)v342 + *v342);
      v345 = (unsigned __int16 *)((char *)v344 - *v344);
      v346 = *v345;
      if (v346 < 7)
        break;
      if (!v345[3] || (*(int *)((char *)v344 + v345[3]) & 0x80000000) == 0)
      {
        if (v346 < 9)
        {
          LODWORD(v347) = 0;
          goto LABEL_523;
        }
        v347 = v345[4];
        if (v345[4])
        {
          LODWORD(v347) = *(int *)((char *)v344 + v347);
LABEL_523:
          v348 = v345[3];
          if (v348)
            LODWORD(v348) = *(int *)((char *)v344 + v348);
          goto LABEL_527;
        }
LABEL_522:
        if (v346 >= 7)
          goto LABEL_523;
        LODWORD(v348) = 0;
LABEL_527:
        v349 = ((v347 >> 1) & 0x1FFFFFFF)
             + *(_DWORD *)(v5 + 124)
             + *(_DWORD *)(v5 + 132)
             - (*(_DWORD *)(v5 + 120)
              + *(_DWORD *)(v5 + 128)
              + *(_DWORD *)(v5 + 136));
        v350 = v348 & 0xFFFFF;
        v351 = 8 * (v350 == 53);
        if (v350 == 49)
          v351 = 7;
        v83->__begin_[v349] = v351;
        v352 = (unsigned __int16 *)((char *)v344 - *v344);
        if (*v352 >= 0xBu)
        {
          v353 = v352[5];
          if (v353)
          {
            if (*((_BYTE *)v344 + v353))
              *v859 |= 1 << v350;
          }
        }
        if (*(_BYTE *)(v6 + 1019))
        {
          v354 = *v873;
          if (!*v873)
LABEL_1195:
            abort();
          v355 = (2 * v349) | 1;
          while (1)
          {
            while (1)
            {
              v356 = *((_DWORD *)v354 + 7);
              if (v350 >= v356)
                break;
              v354 = (uint64_t *)*v354;
              if (!v354)
                goto LABEL_1195;
            }
            if (v356 >= v350)
              break;
            v354 = (uint64_t *)v354[1];
            if (!v354)
              goto LABEL_1195;
          }
          v357 = *((_DWORD *)v354 + 8);
          v358 = v872;
          while (1)
          {
            v359 = *v358;
            v360 = v358;
            if (!*v358)
              break;
            while (1)
            {
              v358 = (uint64_t **)v359;
              v361 = *((_DWORD *)v359 + 7);
              if (v355 < v361)
                break;
              if (v361 >= v355)
              {
                v362 = v358;
                goto LABEL_513;
              }
              v359 = v358[1];
              if (!v359)
              {
                v360 = v358 + 1;
                goto LABEL_547;
              }
            }
          }
LABEL_547:
          v362 = operator new(0x28uLL);
          v362[7] = v355;
          v362[8] = 0;
          *(_QWORD *)v362 = 0;
          *((_QWORD *)v362 + 1) = 0;
          *((_QWORD *)v362 + 2) = v358;
          *v360 = (uint64_t *)v362;
          v363 = **(_QWORD **)(v6 + 264);
          v364 = (uint64_t *)v362;
          if (v363)
          {
            *(_QWORD *)(v6 + 264) = v363;
            v364 = *v360;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 272), v364);
          ++*(_QWORD *)(v6 + 280);
LABEL_513:
          v83 = v875;
          v362[8] = v357;
        }
      }
      if (++v342 == v343)
        goto LABEL_550;
    }
    LODWORD(v347) = 0;
    goto LABEL_522;
  }
LABEL_550:
  v365 = *(_QWORD *)(v5 + 160);
  if (v365)
  {
    v366 = *(_DWORD *)(v5 + 144);
    if (!*(_BYTE *)(v5 + 184))
    {
      v370 = 0;
      goto LABEL_557;
    }
    if (v366)
    {
      v367 = (*(_DWORD *)(v5 + 124)
            + *(_DWORD *)(v5 + 132)
            + *(_DWORD *)(v5 + 140)
            - (*(_DWORD *)(v5 + 120)
             + *(_DWORD *)(v5 + 128)
             + *(_DWORD *)(v5 + 136))
            + 1) & 0xFFFFFFFE;
      v368 = v83->__begin_;
      v369 = *(_QWORD *)(v5 + 160);
      do
      {
        v368[v367] = 0;
        v368[v367 + 1] = 1;
        v368[v367 + 2] = 2;
        v367 += 4;
        v369 &= v369 - 1;
      }
      while (v369);
      v366 = *(_DWORD *)(v5 + 144);
      v370 = v366;
LABEL_557:
      v371 = *(_QWORD *)(v5 + 168);
      if (v371)
        v372 = v366 == 0;
      else
        v372 = 1;
      if (!v372)
      {
        v373 = ((*(_DWORD *)(v5 + 140)
               + *(_DWORD *)(v5 + 132)
               - (*(_DWORD *)(v5 + 136)
                + *(_DWORD *)(v5 + 128)
                + *(_DWORD *)(v5 + 120))
               + *(_DWORD *)(v5 + 124)
               + 1) & 0xFFFFFFFE)
             + v370;
        v374 = v83->__begin_;
        do
        {
          v374[v373] = 0;
          v374[v373 + 1] = 1;
          v374[v373 + 2] = 2;
          v373 += 4;
          v365 &= v365 - 1;
        }
        while (v365);
      }
    }
    else
    {
      v371 = *(_QWORD *)(v5 + 168);
    }
    *(_QWORD *)(v6 + 376) |= v371;
  }
  if (*(_DWORD *)(v5 + 148))
  {
    v376 = *(_QWORD *)(v5 + 176);
    if (v376)
    {
      if (*(_BYTE *)(v5 + 184))
        v377 = *(_DWORD *)(v5 + 144);
      else
        v377 = 0;
      if (*(_QWORD *)(v5 + 168))
        v378 = *(_DWORD *)(v5 + 144);
      else
        v378 = 0;
      v379 = v377
           + v378
           + ((*(_DWORD *)(v5 + 124)
             + *(_DWORD *)(v5 + 132)
             + *(_DWORD *)(v5 + 140)
             - (*(_DWORD *)(v5 + 120)
              + *(_DWORD *)(v5 + 128)
              + *(_DWORD *)(v5 + 136))
             + 1) & 0xFFFFFFFE);
      v380 = v83->__begin_;
      do
      {
        v380[v379++] = 3;
        v376 &= v376 - 1;
      }
      while (v376);
    }
  }
  v381 = *v877;
  if (*(_BYTE *)(v5 + 427))
  {
    v382 = (unsigned __int16 *)((char *)v877 - v381);
    if (*v382 < 0x67u)
    {
      v383 = 0;
    }
    else
    {
      v383 = v382[51];
      if (v383)
        v383 = *(_QWORD *)((char *)v877 + v383);
    }
    v384 = 128 - 2 * __clz(v383);
    if (*(_DWORD *)(v6 + 208) > v384)
      v384 = *(_DWORD *)(v6 + 208);
    *(_DWORD *)(v6 + 208) = v384;
    v385 = (unsigned __int16 *)((char *)v877 - *v877);
    if (*v385 < 0x17u)
    {
      LODWORD(v386) = 0;
    }
    else
    {
      v386 = v385[11];
      if (v386)
        v386 = ((unint64_t)*(unsigned int *)((char *)v877 + v386) + 3) >> 2;
    }
    *(_DWORD *)(v6 + 200) = v386;
    *(_DWORD *)(v6 + 204) = 0;
    v381 = *v877;
  }
  v387 = (unsigned __int16 *)((char *)v877 - v381);
  if (*v387 >= 0x17u && (v388 = v387[11]) != 0)
  {
    v389 = ((unint64_t)*(unsigned int *)((char *)v877 + v388) + 3) >> 2;
    v390 = (_QWORD *)(v6 + 80);
    v391 = *(_QWORD *)(v6 + 72);
    v392 = (*(_QWORD *)(v6 + 80) - v391) >> 2;
    if (v389 > v392)
    {
      std::vector<unsigned int>::__append(v863, v389 - v392);
      goto LABEL_597;
    }
  }
  else
  {
    v389 = 0;
    v390 = (_QWORD *)(v6 + 80);
    v391 = *(_QWORD *)(v6 + 72);
    v392 = (*(_QWORD *)(v6 + 80) - v391) >> 2;
  }
  if (v392 > v389)
    *v390 = v391 + 4 * v389;
LABEL_597:
  if (v853 != (_QWORD *)(v5 + 192))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v853, *(char **)(v5 + 192), *(char **)(v5 + 200), (uint64_t)(*(_QWORD *)(v5 + 200) - *(_QWORD *)(v5 + 192)) >> 2);
  if (v852 != (_QWORD *)(v5 + 216))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v852, *(char **)(v5 + 216), *(char **)(v5 + 224), (uint64_t)(*(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216)) >> 2);
  if (v851 != (_QWORD *)(v5 + 296))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v851, *(char **)(v5 + 296), *(char **)(v5 + 304), (uint64_t)(*(_QWORD *)(v5 + 304) - *(_QWORD *)(v5 + 296)) >> 1);
  if (v850 != (_QWORD *)(v5 + 344))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v850, *(char **)(v5 + 344), *(char **)(v5 + 352), (uint64_t)(*(_QWORD *)(v5 + 352) - *(_QWORD *)(v5 + 344)) >> 1);
  *(_BYTE *)(v6 + 192) = *(_BYTE *)(v5 + 392);
  *(_BYTE *)(v6 + 356) = *(_QWORD *)(v5 + 160) != 0;
  *(_BYTE *)(v6 + 357) = *(_QWORD *)(v5 + 148) != 0;
  v393 = *(unsigned __int16 *)((char *)v877 - *v877 + 24);
  v394 = *(unsigned int *)((char *)v877 + v393);
  v395 = (unsigned int *)((char *)v877 + v393 + v394);
  v396 = *v395;
  if ((_DWORD)v396)
  {
    v397 = 0;
    v398 = 4 * v396;
    v399 = (char *)v877 + v393 + v394;
    do
    {
      v400 = v395[v397 / 4 + 1];
      v401 = v400 - *(int *)((char *)&v395[v397 / 4 + 1] + v400);
      v402 = &v399[v397 + v401];
      v403 = *((unsigned __int16 *)v402 + 2);
      if (v403 >= 5)
      {
        v404 = *((unsigned __int16 *)v402 + 4);
        if (v404)
        {
          if (v403 >= 7 && v399[v397 + 4 + v400 + v404] == 139)
          {
            if (*(_WORD *)&v399[v397 + 10 + v401])
            {
              v405 = *(_DWORD *)&v399[v397 + 4 + v400 + *(unsigned __int16 *)&v399[v397 + 10 + v401]];
              if (v403 >= 0xB)
                goto LABEL_616;
            }
            else
            {
              LOBYTE(v405) = 0;
              if (v403 >= 0xB)
              {
LABEL_616:
                v406 = *(unsigned __int16 *)&v399[v397 + 14 + v401];
                if (v406 && v399[v397 + 4 + v400 + v406])
                  *v859 |= 1 << v405;
              }
            }
          }
        }
      }
      v397 += 4;
    }
    while (v398 != v397);
  }
  v407 = (unsigned __int16 *)((char *)v870 - *v870);
  if (*v407 >= 0xDu)
  {
    v408 = v407[6];
    if (v408)
    {
      v409 = (int *)((char *)v870 + v408 + *(unsigned int *)((char *)v870 + v408));
      v410 = *v409;
      v411 = *(_BYTE **)(v6 + 944);
      if (v410 > (uint64_t)(*(_QWORD *)(v6 + 960) - (_QWORD)v411) >> 4)
      {
        v412 = *(_BYTE **)(v6 + 952);
        v413 = (char *)operator new(16 * v410);
        v414 = &v413[(v412 - v411) & 0xFFFFFFFFFFFFFFF0];
        v415 = v414;
        if (v412 != v411)
        {
          v416 = &v413[(v412 - v411) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v415 = v416 - 16;
            *((_OWORD *)v416 - 1) = *((_OWORD *)v412 - 1);
            v412 -= 16;
            v416 -= 16;
          }
          while (v412 != v411);
        }
        *(_QWORD *)(v6 + 944) = v415;
        *(_QWORD *)(v6 + 952) = v414;
        *(_QWORD *)(v6 + 960) = &v413[16 * v410];
        if (v411)
          operator delete(v411);
      }
      v417 = (unsigned __int16 *)((char *)v870 - *v870);
      if (*v417 >= 0x41u && (v418 = v417[32]) != 0)
      {
        v419 = (int *)((char *)v870 + v418 + *(unsigned int *)((char *)v870 + v418));
        if (!*v409)
          goto LABEL_656;
      }
      else
      {
        v419 = 0;
        if (!*v409)
          goto LABEL_656;
      }
      v420 = 0;
      v871 = v419 + 1;
      v421 = v409 + 1;
      v878 = v419;
      v874 = v409 + 1;
      do
      {
        if (v419 && *v419)
          v423 = *(_QWORD *)&v871[2 * v420];
        else
          v423 = 0;
        v424 = *(_QWORD *)&v421[2 * v420];
        v425 = *(_QWORD **)(v6 + 952);
        v426 = *(_QWORD *)(v6 + 960);
        if ((unint64_t)v425 < v426)
        {
          *v425 = v424;
          v425[1] = v423;
          v422 = v425 + 2;
        }
        else
        {
          v427 = v409;
          v428 = (_QWORD *)*v862;
          v429 = ((uint64_t)v425 - *v862) >> 4;
          v430 = v429 + 1;
          if ((unint64_t)(v429 + 1) >> 60)
            abort();
          v431 = v426 - (_QWORD)v428;
          if (v431 >> 3 > v430)
            v430 = v431 >> 3;
          if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFF0)
            v432 = 0xFFFFFFFFFFFFFFFLL;
          else
            v432 = v430;
          if (v432)
          {
            if (v432 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v433 = (char *)operator new(16 * v432);
          }
          else
          {
            v433 = 0;
          }
          v434 = &v433[16 * v429];
          *(_QWORD *)v434 = v424;
          *((_QWORD *)v434 + 1) = v423;
          v435 = v434;
          v409 = v427;
          if (v425 != v428)
          {
            do
            {
              *((_OWORD *)v435 - 1) = *((_OWORD *)v425 - 1);
              v435 -= 16;
              v425 -= 2;
            }
            while (v425 != v428);
            v425 = (_QWORD *)*v862;
          }
          *(_QWORD *)(v6 + 944) = v435;
          v422 = v434 + 16;
          *(_QWORD *)(v6 + 952) = v434 + 16;
          *(_QWORD *)(v6 + 960) = &v433[16 * v432];
          if (v425)
            operator delete(v425);
          v419 = v878;
          v421 = v874;
        }
        *(_QWORD *)(v6 + 952) = v422;
        ++v420;
      }
      while (v420 < *v409);
    }
  }
LABEL_656:
  *(_BYTE *)(v6 + 844) = 0;
  if ((__str_16[7] & 0x80000000) != 0)
    operator delete((void *)__str);
  *(_QWORD *)v6 = &off_250401940;
  bzero((void *)(v6 + 1224), 0x2E9uLL);
  *(_OWORD *)(v6 + 1976) = *(_OWORD *)(v6 + 496);
  *(_QWORD *)(v6 + 1992) = *(_QWORD *)(v6 + 512);
  *(_QWORD *)(v6 + 2016) = 0;
  *(_OWORD *)(v6 + 2216) = 0u;
  *(_OWORD *)(v6 + 2232) = 0u;
  *(_OWORD *)(v6 + 2248) = 0u;
  *(_OWORD *)(v6 + 2264) = 0u;
  *(_OWORD *)(v6 + 2280) = 0u;
  *(_OWORD *)(v6 + 2296) = 0u;
  *(_OWORD *)(v6 + 2312) = 0u;
  *(_OWORD *)(v6 + 2328) = 0u;
  *(_OWORD *)(v6 + 2344) = 0u;
  *(_OWORD *)(v6 + 2360) = 0u;
  *(_OWORD *)(v6 + 2376) = 0u;
  *(_OWORD *)(v6 + 2392) = 0u;
  *(_OWORD *)(v6 + 2408) = 0u;
  *(_OWORD *)(v6 + 2440) = 0u;
  *(_OWORD *)(v6 + 2456) = 0u;
  *(_OWORD *)(v6 + 2472) = 0u;
  *(_OWORD *)(v6 + 2488) = 0u;
  *(_OWORD *)(v6 + 2504) = 0u;
  *(_OWORD *)(v6 + 2520) = 0u;
  *(_OWORD *)(v6 + 2536) = 0u;
  *(_OWORD *)(v6 + 2552) = 0u;
  *(_OWORD *)(v6 + 2568) = 0u;
  *(_OWORD *)(v6 + 2584) = 0u;
  *(_OWORD *)(v6 + 2600) = 0u;
  *(_OWORD *)(v6 + 2616) = 0u;
  *(_OWORD *)(v6 + 2632) = 0u;
  *(_OWORD *)(v6 + 2648) = 0u;
  *(_OWORD *)(v6 + 2664) = 0u;
  *(_OWORD *)(v6 + 2680) = 0u;
  *(_OWORD *)(v6 + 2696) = 0u;
  *(_OWORD *)(v6 + 2712) = 0u;
  *(_OWORD *)(v6 + 2424) = 0u;
  *(_OWORD *)(v6 + 2088) = 0u;
  *(_OWORD *)(v6 + 2104) = 0u;
  *(_OWORD *)(v6 + 2120) = 0u;
  *(_OWORD *)(v6 + 2136) = 0u;
  *(_OWORD *)(v6 + 2152) = 0u;
  *(_OWORD *)(v6 + 2168) = 0u;
  *(_OWORD *)(v6 + 2184) = 0u;
  *(_OWORD *)(v6 + 2196) = 0u;
  *(_OWORD *)(v6 + 2784) = 0u;
  *(_OWORD *)(v6 + 2768) = 0u;
  *(_OWORD *)(v6 + 2752) = 0u;
  *(_QWORD *)(v6 + 2800) = a2;
  *(_QWORD *)(v6 + 2808) = 0;
  if (*v860)
  {
    v436 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v436 = v860;
  }
  else
  {
    v436 = (unsigned int **)(a3 + 784);
  }
  v437 = 0;
  if (*v436 && v436[1])
    v437 = (int *)((char *)*v436 + **v436);
  v438 = (unsigned __int16 *)((char *)v437 - *v437);
  if (*v438 >= 5u && (v439 = v438[2]) != 0)
    v440 = (unsigned int *)((char *)v437 + v439 + *(unsigned int *)((char *)v437 + v439));
  else
    v440 = 0;
  if (*v857)
  {
    v441 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v441 = v857;
  }
  else
  {
    v441 = (unsigned int **)(a3 + 1024);
  }
  v442 = 0;
  if (*v441 && v441[1])
    v442 = (int *)((char *)*v441 + **v441);
  v443 = (unsigned __int16 *)((char *)v442 - *v442);
  if (*v443 >= 5u && (v444 = v443[2]) != 0)
    v445 = (int *)((char *)v442 + v444 + *(unsigned int *)((char *)v442 + v444));
  else
    v445 = 0;
  v446 = (unsigned __int16 *)((char *)v445 - *v445);
  if (*v446 < 7u)
  {
    LODWORD(v447) = 0;
  }
  else
  {
    v447 = v446[3];
    if (v447)
      LODWORD(v447) = *(int *)((char *)v445 + v447);
  }
  *(_DWORD *)(v6 + 2744) = v447;
  v448 = (unsigned __int16 *)((char *)v445 - *v445);
  if (*v448 >= 0x13u && (v449 = v448[9]) != 0)
    v450 = (char *)v445 + v449 + *(unsigned int *)((char *)v445 + v449) + 4;
  else
    v450 = "";
  MEMORY[0x234927D28](v6 + 2752, v450);
  v451 = (unsigned __int16 *)((char *)v440 - (int)*v440);
  v452 = *(unsigned int *)((char *)v440 + v451[15] + *(unsigned int *)((char *)v440 + v451[15]));
  v453 = v451[13];
  if (v451[13])
    LODWORD(v453) = *(unsigned int *)((char *)v440 + v453);
  v454 = v453;
  if (*(_BYTE *)(v5 + 392))
    v455 = ((*(_QWORD *)(v5 + 224) + *(_QWORD *)(v5 + 200) - (*(_QWORD *)(v5 + 216) + *(_QWORD *)(v5 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
         + ((*(_QWORD *)(v5 + 376) + *(_QWORD *)(v5 + 328) - (*(_QWORD *)(v5 + 368) + *(_QWORD *)(v5 + 320))) & 0xFFFFFFFFFFFFFFFELL)
         + 8;
  else
    v455 = 0;
  v456 = v451[4];
  v457 = *(unsigned int *)((char *)v440 + v456);
  v458 = (unsigned int *)((char *)v440 + v456 + v457);
  v459 = *v458;
  if ((_DWORD)v459)
  {
    v460 = 0;
    v461 = 4 * v459;
    v462 = (char *)v440 + v456 + v457;
    while (1)
    {
      v463 = v458[v460 / 4 + 1];
      v464 = &v462[v460 + v463 - *(int *)((char *)&v458[v460 / 4 + 1] + v463)];
      if (*((unsigned __int16 *)v464 + 2) >= 5u)
      {
        v465 = *((unsigned __int16 *)v464 + 4);
        if (v465)
        {
          if (v462[v460 + 4 + v463 + v465] == 9)
            break;
        }
      }
      v460 += 4;
      if (v461 == v460)
        goto LABEL_702;
    }
    v466 = 0;
    v452 += 8;
  }
  else
  {
LABEL_702:
    v466 = 1;
  }
  v467 = (v452 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v454)
    v468 = (v452 + 7) & 0x3FFFFFFF8;
  else
    v468 = v452;
  if (v455 + v454 + v468)
  {
    v879 = v455;
    AGX::Heap<true>::allocateImpl(__dst, v868, v455 + v454 + v468, (_QWORD *)(v6 + 2144));
    *(_DWORD *)(v6 + 2812) += *(_DWORD *)&__dst[16];
    v469 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(v6 + 2424) = *(_OWORD *)__dst;
    *(_OWORD *)(v6 + 2440) = v469;
    *(_OWORD *)(v6 + 2449) = *(_OWORD *)&__dst[25];
    v470 = *(_QWORD **)(v6 + 2432);
    v471 = *(_QWORD *)(v6 + 2424);
    *(_QWORD *)(v6 + 2008) = 0;
    if (v452)
    {
      *(_QWORD *)(v6 + 2064) = v471;
      if ((v466 & 1) != 0)
      {
        v472 = v470;
      }
      else
      {
        *(_QWORD *)(v6 + 2072) = v471;
        *(_QWORD *)(v6 + 2064) = v471 + 8;
        *v470 = v471 + 8;
        v472 = v470 + 1;
      }
      v473 = (int)*v440;
      v474 = *(unsigned __int16 *)((char *)v440 - v473 + 30);
      if (*(_WORD *)((char *)v440 - v473 + 30))
      {
        v475 = *(unsigned int *)((char *)v440 + v474);
        v476 = (char *)v440 + v474 + v475;
      }
      else
      {
        v474 = 0;
        v476 = 0;
        v475 = *v440;
      }
      memcpy(v472, v476 + 4, *(unsigned int *)((char *)v440 + v474 + v475));
      *(_QWORD *)(v6 + 2672) = v472;
      *(_QWORD *)(v6 + 2664) = *(_QWORD *)(v6 + 2064);
    }
    if ((_DWORD)v454)
    {
      *(_QWORD *)(v6 + 2080) = v471 + v467;
      *(_QWORD *)(v6 + 1232) = (char *)v470 + v467;
    }
    if (v879)
    {
      *(_QWORD *)(v6 + 2008) = v468 + v454 + v471;
      v477 = (_WORD *)((char *)v470 + v468 + v454);
      v478 = *(const void **)(v5 + 192);
      v479 = *(_QWORD *)(v5 + 200) - (_QWORD)v478;
      *v477 = v479 >> 2;
      v477[1] = (*(_DWORD *)(v5 + 224) - *(_DWORD *)(v5 + 216)) >> 2;
      v477[2] = (*(_DWORD *)(v5 + 328) - *(_DWORD *)(v5 + 320)) >> 1;
      v477[3] = (*(_DWORD *)(v5 + 376) - *(_DWORD *)(v5 + 368)) >> 1;
      memcpy(v477 + 4, v478, v479);
      v480 = (char *)v477 + *(_QWORD *)(v5 + 200) - *(_QWORD *)(v5 + 192) + 8;
      memcpy(v480, *(const void **)(v5 + 216), *(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216));
      v481 = &v480[*(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216)];
      memcpy(v481, *(const void **)(v5 + 320), *(_QWORD *)(v5 + 328) - *(_QWORD *)(v5 + 320));
      memcpy(&v481[*(_QWORD *)(v5 + 328) - *(_QWORD *)(v5 + 320)], *(const void **)(v5 + 368), *(_QWORD *)(v5 + 376) - *(_QWORD *)(v5 + 368));
      if (v477[2])
      {
        if (v477[3])
          goto LABEL_720;
LABEL_1138:
        v477[3] = v477[1];
      }
      else
      {
        v477[2] = *v477;
        if (!v477[3])
          goto LABEL_1138;
      }
    }
  }
LABEL_720:
  v482 = (uint64_t *)(v6 + 1264);
  v483 = (unsigned __int16 *)((char *)v440 - (int)*v440);
  v484 = v483[8];
  v485 = *(unsigned int *)((char *)v440 + v484);
  v486 = (unsigned int *)((char *)v440 + v484 + v485);
  v487 = *v486;
  if ((_DWORD)v487)
  {
    v488 = 0;
    v489 = 4 * v487;
    v490 = (char *)v440 + v484 + v485;
    do
    {
      v494 = v486[v488 / 4 + 1];
      v495 = &v490[v488 + v494 - *(int *)((char *)&v486[v488 / 4 + 1] + v494)];
      if (*((unsigned __int16 *)v495 + 2) >= 7u && (v496 = *((unsigned __int16 *)v495 + 5)) != 0)
      {
        v497 = *(unsigned int *)&v490[v488 + 4 + v494 + v496];
        v491 = v497;
        if ((v497 & 0x80000000) != 0)
        {
          v492 = 1 << (v497 >> 20);
          v493 = (_QWORD *)(v6 + 1264);
          goto LABEL_724;
        }
      }
      else
      {
        v491 = 0;
      }
      v492 = 1 << v491;
      *(_QWORD *)(v6 + 1248) |= v492;
      v493 = (_QWORD *)(v6 + 1272);
LABEL_724:
      *v493 |= v492;
      v488 += 4;
    }
    while (v489 != v488);
  }
  v498 = v483[10];
  v499 = *(unsigned int *)((char *)v440 + v498);
  v500 = (unsigned int *)((char *)v440 + v498 + v499);
  v501 = *v500;
  if ((_DWORD)v501)
  {
    v502 = 0;
    v503 = 4 * v501;
    v504 = (char *)v440 + v498 + v499;
    do
    {
      v508 = v500[v502 / 4 + 1];
      v509 = &v504[v502 + v508 - *(int *)((char *)&v500[v502 / 4 + 1] + v508)];
      if (*((unsigned __int16 *)v509 + 2) >= 7u && (v510 = *((unsigned __int16 *)v509 + 5)) != 0)
      {
        v511 = *(unsigned int *)&v504[v502 + 4 + v508 + v510];
        v505 = v511;
        if ((v511 & 0x80000000) != 0)
        {
          v506 = 1 << (v511 >> 20);
          v507 = (_QWORD *)(v6 + 1264);
          goto LABEL_733;
        }
      }
      else
      {
        v505 = 0;
      }
      v506 = 1 << v505;
      *(_QWORD *)(v6 + 1256) |= v506;
      v507 = (_QWORD *)(v6 + 1280);
LABEL_733:
      *v507 |= v506;
      v502 += 4;
    }
    while (v503 != v502);
  }
  v512 = v483[6];
  v513 = *(unsigned int *)((char *)v440 + v512);
  v514 = (unsigned int *)((char *)v440 + v512 + v513);
  v515 = *v514;
  if (!(_DWORD)v515)
    goto LABEL_748;
  v516 = 0;
  v517 = 4 * v515;
  v518 = *v482;
  v519 = (char *)v440 + v512 + v513;
  while (2)
  {
    v522 = v514[v516 / 4 + 1];
    v523 = &v519[v516 + v522 - *(int *)((char *)&v514[v516 / 4 + 1] + v522)];
    if (*((unsigned __int16 *)v523 + 2) < 7u || (v524 = *((unsigned __int16 *)v523 + 5)) == 0)
    {
      v520 = 0;
LABEL_741:
      v521 = 1 << v520;
      *(_QWORD *)(v6 + 1240) |= v521;
      goto LABEL_742;
    }
    v525 = *(unsigned int *)&v519[v516 + 4 + v522 + v524];
    v520 = v525;
    if ((v525 & 0x80000000) == 0)
      goto LABEL_741;
    v521 = 1 << (v525 >> 20);
LABEL_742:
    v518 |= v521;
    v516 += 4;
    if (v517 != v516)
      continue;
    break;
  }
  *v482 = v518;
LABEL_748:
  v526 = v483[4];
  v527 = *(unsigned int *)((char *)v440 + v526);
  v528 = (unsigned int *)((char *)v440 + v526 + v527);
  v529 = *v528;
  if ((_DWORD)v529)
  {
    v530 = 0;
    v531 = 4 * v529;
    v532 = *(_QWORD *)(v5 + 416);
    v533 = (char *)v440 + v526 + v527;
    while (2)
    {
      v536 = v528[v530 / 4 + 1];
      v537 = v536 - *(int *)((char *)&v528[v530 / 4 + 1] + v536);
      v538 = &v533[v530 + v537];
      v539 = *((unsigned __int16 *)v538 + 2);
      if (v539 < 5)
        goto LABEL_753;
      v540 = *((unsigned __int16 *)v538 + 4);
      if (!v540 || v533[v530 + 4 + v536 + v540] != 5)
        goto LABEL_753;
      if (v539 >= 7 && (v541 = *(unsigned __int16 *)&v533[v530 + 10 + v537]) != 0)
      {
        v542 = *(unsigned int *)&v533[v530 + 4 + v536 + v541];
        v534 = v542;
        if ((v542 & 0x80000000) != 0)
        {
          v535 = 1 << (v542 >> 20);
          if ((v532 & v535) != 0)
          {
            *(_BYTE *)(v6 + 1968) = 1;
            *(_QWORD *)(v6 + 1376) |= v535;
          }
LABEL_752:
          *v482 |= v535;
LABEL_753:
          v530 += 4;
          if (v531 == v530)
            goto LABEL_762;
          continue;
        }
      }
      else
      {
        v534 = 0;
      }
      break;
    }
    v535 = 1 << v534;
    goto LABEL_752;
  }
LABEL_762:
  *(_QWORD *)(v6 + 1320) = *(_QWORD *)(v5 + 400);
  *(_QWORD *)(v6 + 1344) = *(_QWORD *)(v5 + 408);
  *(_QWORD *)(v6 + 1384) = *(_QWORD *)(v5 + 408) | *(_QWORD *)(v5 + 400);
  if (*v860)
  {
    if (*(_QWORD *)(a3 + 232))
      v543 = v860;
    else
      v543 = (unsigned int **)(a3 + 784);
  }
  else
  {
    v543 = (unsigned int **)(a3 + 784);
  }
  v545 = *v543;
  v544 = v543[1];
  if (v545)
    v546 = v544 == 0;
  else
    v546 = 1;
  if (v546)
    v547 = 0;
  else
    v547 = (int *)((char *)v545 + *v545);
  v548 = (unsigned __int16 *)((char *)v547 - *v547);
  if (*v548 >= 5u && (v549 = v548[2]) != 0)
    v550 = (int *)((char *)v547 + v549 + *(unsigned int *)((char *)v547 + v549));
  else
    v550 = 0;
  v551 = (unsigned __int16 *)((char *)v550 - *v550);
  if (*v551 >= 9u && (v552 = v551[4]) != 0)
    v553 = (unsigned int *)((char *)v550 + v552 + *(unsigned int *)((char *)v550 + v552));
  else
    v553 = 0;
  v876 = *(_QWORD *)(v6 + 2072);
  v880 = *(_QWORD *)(v6 + 2064);
  v554 = *(_QWORD *)(v6 + 2080);
  bzero(__dst, 0x248uLL);
  bzero((void *)(v6 + 1392), 0x240uLL);
  v555 = v553 + 1;
  v556 = *v553;
  if (!(_DWORD)v556)
  {
    v557 = 0;
    goto LABEL_985;
  }
  v557 = 0;
  v558 = &v555[v556];
  v559 = v6 + 4;
  while (2)
  {
    v563 = (int *)((char *)v555 + *v555);
    v564 = (unsigned __int16 *)((char *)v563 - *v563);
    v565 = *v564;
    if (v565 < 5)
    {
      LODWORD(v566) = 0;
      goto LABEL_794;
    }
    if (v564[2])
    {
      switch(*((_BYTE *)v563 + v564[2]))
      {
        case 0:
          goto LABEL_790;
        case 1:
          if (v565 < 0xD)
          {
            LODWORD(v591) = 0;
            v596 = 0;
            if (v565 < 9)
              goto LABEL_895;
          }
          else
          {
            v591 = v564[6];
            if (v564[6])
              LODWORD(v591) = *(int *)((char *)v563 + v591);
          }
          v597 = v564[4];
          if (v597)
            v596 = *(int *)((char *)v563 + v597);
          else
            v596 = 0;
LABEL_895:
          v630 = v596 + v591;
          if (v591 >= v596 + (int)v591)
            goto LABEL_786;
          v631 = (v630 >> 1) & 0x1FFFFFFF;
          v632 = v557;
          while (1)
          {
            v637 = (v591 >> 1) & 0x1FFFFFFF;
            v638 = *(_QWORD *)(v5 + 24);
            v639 = *(_DWORD *)(v638 + 4 * v637);
            if (v637 + 1 >= v631)
            {
              v640 = 1;
              v643 = v6 + 8 * v632;
              if ((v639 & 0x80000000) == 0)
                goto LABEL_910;
            }
            else
            {
              v640 = 1;
              while (1)
              {
                v641 = *(_DWORD *)(v638 + 4 * (v637 + v640));
                if (v641 != -1 && v641 != ((v639 + v640) & 0xFFFFF | v639 & 0xFFF00000))
                  break;
                ++v640;
                if (!(v637 - v631 + v640))
                {
                  v640 = v631 - v637;
                  break;
                }
              }
              v643 = v6 + 8 * v632;
              if ((v639 & 0x80000000) == 0)
              {
LABEL_910:
                v644 = v632;
                v645 = (_DWORD *)(v643 + 1408);
                if ((v639 & 0x7FF00000) != 0)
                {
                  *v645 = 0;
                  v646 = 8 * (v639 & 0xFFFFF);
                }
                else
                {
                  *v645 = 4;
                  v646 = 8 * ((v639 & 0xFFFFF) - *(_DWORD *)(v5 + 120));
                }
                goto LABEL_917;
              }
            }
            v647 = (v639 >> 20) & 0x7FF;
            v648 = 8 * (v647 == 53);
            if (v647 == 49)
              v648 = 7;
            v644 = v632;
            *(_DWORD *)(v643 + 1408) = v648;
            v646 = 8 * (v639 & 0xFFFFF);
LABEL_917:
            *(_DWORD *)(v559 + 8 * v644 + 1408) = v646;
            v649 = (unsigned __int16 *)((char *)v563 - *v563);
            v650 = *v649;
            if (v650 < 0xB)
            {
              LODWORD(v633) = 0;
            }
            else
            {
              v633 = v649[5];
              if (v649[5])
                LODWORD(v633) = *(int *)((char *)v563 + v633);
              if (v650 >= 0xD)
              {
                v634 = v649[6];
                if (v634)
                  LODWORD(v634) = *(int *)((char *)v563 + v634);
                goto LABEL_899;
              }
            }
            LODWORD(v634) = 0;
LABEL_899:
            v635 = (2 * v640);
            v557 = v632 + 1;
            v636 = &__dst[16 * v632];
            *(_QWORD *)v636 = v635;
            *((_DWORD *)v636 + 2) = v633 + v591 - v634;
            LODWORD(v591) = v591 + v635;
            v632 = v557;
            if (v591 >= v630)
              goto LABEL_786;
          }
        case 2:
          if (v565 < 0xD)
          {
            LODWORD(v589) = 0;
            v594 = 0;
            if (v565 < 9)
              goto LABEL_866;
          }
          else
          {
            v589 = v564[6];
            if (v564[6])
              LODWORD(v589) = *(int *)((char *)v563 + v589);
          }
          v595 = v564[4];
          if (v595)
            v594 = *(int *)((char *)v563 + v595);
          else
            v594 = 0;
LABEL_866:
          v609 = v594 + v589;
          if (v589 >= v594 + (int)v589)
            goto LABEL_786;
          v610 = (v609 >> 1) & 0x1FFFFFFF;
          v611 = v557;
          while (1)
          {
            v616 = (v589 >> 1) & 0x1FFFFFFF;
            v617 = *(_QWORD *)(v5 + 48);
            v618 = *(_DWORD *)(v617 + 4 * v616);
            if (v616 + 1 >= v610)
            {
              v619 = 1;
              v622 = v6 + 8 * v611;
              if ((v618 & 0x80000000) == 0)
                goto LABEL_881;
            }
            else
            {
              v619 = 1;
              while (1)
              {
                v620 = *(_DWORD *)(v617 + 4 * (v616 + v619));
                if (v620 != -1 && v620 != ((v618 + v619) & 0xFFFFF | v618 & 0xFFF00000))
                  break;
                ++v619;
                if (!(v616 - v610 + v619))
                {
                  v619 = v610 - v616;
                  break;
                }
              }
              v622 = v6 + 8 * v611;
              if ((v618 & 0x80000000) == 0)
              {
LABEL_881:
                v623 = v611;
                v624 = (_DWORD *)(v622 + 1408);
                if ((v618 & 0x7FF00000) != 0)
                {
                  *v624 = 0;
                  v625 = 8 * (v618 & 0xFFFFF);
                }
                else
                {
                  *v624 = 4;
                  v625 = 8
                       * (*(_DWORD *)(v5 + 124) + (v618 & 0xFFFFF) - (*(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128)));
                }
                goto LABEL_888;
              }
            }
            v626 = (v618 >> 20) & 0x7FF;
            v627 = 8 * (v626 == 53);
            if (v626 == 49)
              v627 = 7;
            v623 = v611;
            *(_DWORD *)(v622 + 1408) = v627;
            v625 = 8 * (v618 & 0xFFFFF);
LABEL_888:
            *(_DWORD *)(v559 + 8 * v623 + 1408) = v625;
            v628 = (unsigned __int16 *)((char *)v563 - *v563);
            v629 = *v628;
            if (v629 < 0xB)
            {
              LODWORD(v612) = 0;
            }
            else
            {
              v612 = v628[5];
              if (v628[5])
                LODWORD(v612) = *(int *)((char *)v563 + v612);
              if (v629 >= 0xD)
              {
                v613 = v628[6];
                if (v613)
                  LODWORD(v613) = *(int *)((char *)v563 + v613);
                goto LABEL_870;
              }
            }
            LODWORD(v613) = 0;
LABEL_870:
            v614 = (2 * v619);
            v557 = v611 + 1;
            v615 = &__dst[16 * v611];
            *(_QWORD *)v615 = v614;
            *((_DWORD *)v615 + 2) = v612 + v589 - v613;
            LODWORD(v589) = v589 + v614;
            v611 = v557;
            if (v589 >= v609)
              goto LABEL_786;
          }
        case 3:
          if (v565 < 0xD)
          {
            LODWORD(v592) = 0;
            v598 = 0;
            if (v565 < 9)
              goto LABEL_924;
          }
          else
          {
            v592 = v564[6];
            if (v564[6])
              LODWORD(v592) = *(int *)((char *)v563 + v592);
          }
          v599 = v564[4];
          if (v599)
            v598 = *(int *)((char *)v563 + v599);
          else
            v598 = 0;
LABEL_924:
          v651 = v598 + v592;
          if (v592 >= v598 + (int)v592)
            goto LABEL_786;
          v652 = (v651 >> 1) & 0x1FFFFFFF;
          v653 = v557;
          break;
        case 5:
          if (v565 < 7)
          {
            LODWORD(v593) = 0;
LABEL_851:
            v600 = v593 & 0xFFFFF;
            if (v600 == 49)
              v601 = 7;
            else
              v601 = 8 * (v600 == 53);
            v602 = v6 + 8 * v557;
            *(_DWORD *)(v602 + 1408) = v601;
            v603 = (unsigned __int16 *)((char *)v563 - *v563);
            if (*v603 >= 0xDu && (v604 = v603[6]) != 0)
              v605 = *(int *)((char *)v563 + v604);
            else
              v605 = 0;
            v590 = v557;
            *(_DWORD *)(v602 + 1412) = 4 * v605;
LABEL_859:
            v606 = (unsigned __int16 *)((char *)v563 - *v563);
            v607 = *v606;
            if (v607 < 9)
            {
              v560 = 0;
            }
            else
            {
              v560 = v606[4];
              if (v606[4])
                v560 = *(unsigned int *)((char *)v563 + v560);
              if (v607 >= 0xB)
              {
                v608 = v606[5];
                if (v608)
                {
                  v561 = *(int *)((char *)v563 + v608);
                  goto LABEL_785;
                }
              }
            }
            v561 = 0;
LABEL_785:
            v562 = &__dst[16 * v590];
            *(_QWORD *)v562 = v560;
            ++v557;
            *((_DWORD *)v562 + 2) = v561;
            goto LABEL_786;
          }
          v593 = v564[3];
          if (!v564[3])
            goto LABEL_851;
          LODWORD(v593) = *(int *)((char *)v563 + v593);
          if ((v593 & 0x80000000) == 0)
            goto LABEL_851;
          goto LABEL_786;
        case 8:
          v590 = v557;
          *(_QWORD *)(v6 + 8 * v557 + 1408) = 6;
          goto LABEL_859;
        default:
          goto LABEL_786;
      }
      while (1)
      {
        v658 = (v592 >> 1) & 0x1FFFFFFF;
        v659 = *(_QWORD *)(v5 + 72);
        v660 = *(_DWORD *)(v659 + 4 * v658);
        if (v658 + 1 >= v652)
        {
          v661 = 1;
          if ((v660 & 0x80000000) == 0)
            goto LABEL_939;
        }
        else
        {
          v661 = 1;
          while (1)
          {
            v662 = *(_DWORD *)(v659 + 4 * (v658 + v661));
            if (v662 != -1 && v662 != ((v660 + v661) & 0xFFFFF | v660 & 0xFFF00000))
              break;
            ++v661;
            if (!(v658 - v652 + v661))
            {
              v661 = v652 - v658;
              break;
            }
          }
          if ((v660 & 0x80000000) == 0)
          {
LABEL_939:
            v664 = v653;
            v665 = (_DWORD *)(v6 + 8 * v653 + 1408);
            if ((v660 & 0x7FF00000) != 0)
            {
              *v665 = 0;
              v666 = 8 * (v660 & 0xFFFFF);
            }
            else
            {
              *v665 = 4;
              v666 = 8
                   * (*(_DWORD *)(v5 + 124)
                    + *(_DWORD *)(v5 + 132)
                    + (v660 & 0xFFFFF)
                    - (*(_DWORD *)(v5 + 120)
                     + *(_DWORD *)(v5 + 128)
                     + *(_DWORD *)(v5 + 136)));
            }
            goto LABEL_946;
          }
        }
        v667 = (v660 >> 20) & 0x7FF;
        v668 = 8 * (v667 == 53);
        if (v667 == 49)
          v668 = 7;
        v664 = v653;
        *(_DWORD *)(v6 + 8 * v653 + 1408) = v668;
        v666 = 8 * (v660 & 0xFFFFF);
LABEL_946:
        *(_DWORD *)(v559 + 8 * v664 + 1408) = v666;
        v669 = (unsigned __int16 *)((char *)v563 - *v563);
        v670 = *v669;
        if (v670 < 0xB)
        {
          LODWORD(v654) = 0;
        }
        else
        {
          v654 = v669[5];
          if (v669[5])
            LODWORD(v654) = *(int *)((char *)v563 + v654);
          if (v670 >= 0xD)
          {
            v655 = v669[6];
            if (v655)
              LODWORD(v655) = *(int *)((char *)v563 + v655);
            goto LABEL_928;
          }
        }
        LODWORD(v655) = 0;
LABEL_928:
        v656 = (2 * v661);
        v557 = v653 + 1;
        v657 = &__dst[16 * v653];
        *(_QWORD *)v657 = v656;
        *((_DWORD *)v657 + 2) = v654 + v592 - v655;
        LODWORD(v592) = v592 + v656;
        v653 = v557;
        if (v592 >= v651)
          goto LABEL_786;
      }
    }
LABEL_790:
    if (v565 >= 0xD)
    {
      v566 = v564[6];
      if (v564[6])
        LODWORD(v566) = *(int *)((char *)v563 + v566);
LABEL_825:
      v588 = v564[4];
      if (v588)
      {
        v567 = *(int *)((char *)v563 + v588);
        goto LABEL_795;
      }
LABEL_794:
      v567 = 0;
      goto LABEL_795;
    }
    LODWORD(v566) = 0;
    v567 = 0;
    if (v565 >= 9)
      goto LABEL_825;
LABEL_795:
    v568 = v567 + v566;
    if (v566 < v567 + (int)v566)
    {
      v569 = 1 - (v566 + v567);
      v570 = v557;
      do
      {
        v575 = *(_QWORD *)(v5 + 96);
        v576 = *(_DWORD *)(v575 + 4 * v566);
        if ((int)v566 + 1 >= v568)
        {
          v578 = 1;
          v581 = v6 + 8 * v570;
          if ((v576 & 0x80000000) == 0)
          {
LABEL_809:
            v582 = v570;
            v583 = (_DWORD *)(v581 + 1408);
            if ((v576 & 0x7FF00000) != 0)
              *v583 = 0;
            else
              *v583 = 5;
            goto LABEL_818;
          }
        }
        else
        {
          v577 = 0;
          v578 = v568 - v566;
          while (1)
          {
            v579 = *(_DWORD *)(v575 + 4 * (v566 + v577 + 1));
            if (v579 != -1 && v579 != ((v576 + 1 + v577) & 0xFFFFF | v576 & 0xFFF00000))
              break;
            ++v577;
            if (!(v569 + (_DWORD)v566 + v577))
            {
              v581 = v6 + 8 * v570;
              if ((v576 & 0x80000000) != 0)
                goto LABEL_812;
              goto LABEL_809;
            }
          }
          v578 = v577 + 1;
          v581 = v6 + 8 * v570;
          if ((v576 & 0x80000000) == 0)
            goto LABEL_809;
        }
LABEL_812:
        v584 = (v576 >> 20) & 0x7FF;
        v585 = 8 * (v584 == 53);
        if (v584 == 49)
          v585 = 7;
        v582 = v570;
        *(_DWORD *)(v581 + 1408) = v585;
LABEL_818:
        *(_DWORD *)(v6 + 1396 + 8 * v582 + 16) = 4 * (v576 & 0xFFFFF);
        v586 = (unsigned __int16 *)((char *)v563 - *v563);
        v587 = *v586;
        if (v587 < 0xB)
        {
          LODWORD(v571) = 0;
        }
        else
        {
          v571 = v586[5];
          if (v586[5])
            LODWORD(v571) = *(int *)((char *)v563 + v571);
          if (v587 >= 0xD)
          {
            v572 = v586[6];
            if (v572)
              LODWORD(v572) = *(int *)((char *)v563 + v572);
            goto LABEL_799;
          }
        }
        LODWORD(v572) = 0;
LABEL_799:
        v573 = v578;
        v557 = v570 + 1;
        v574 = &__dst[16 * v570];
        *(_QWORD *)v574 = v573;
        *((_DWORD *)v574 + 2) = v571 + v566 - v572;
        LODWORD(v566) = v566 + v573;
        v570 = v557;
      }
      while (v566 < v568);
    }
LABEL_786:
    if (++v555 != v558)
      continue;
    break;
  }
  v671 = *v553;
  if ((_DWORD)v671)
  {
    v672 = 0;
    v673 = 4 * v671;
    do
      v672 += 4;
    while (v673 != v672);
    v674 = 0;
    LODWORD(v556) = v557;
    while (1)
    {
      v678 = v553[v674 / 4 + 1];
      v679 = (char *)&v553[v674 / 4] + v678;
      v680 = v678 - *((int *)v679 + 1);
      v681 = (char *)&v553[v674 / 4] + v680;
      v682 = *((unsigned __int16 *)v681 + 2);
      if (v682 < 5)
        goto LABEL_959;
      v683 = *((unsigned __int16 *)v681 + 4);
      if (!v683)
        goto LABEL_959;
      v684 = *((char *)&v553[v674 / 4 + 1] + v678 + v683);
      if (v684 == 9)
      {
        *(_QWORD *)(v6 + 8 * v556 + 1408) = v876;
        v686 = v678 - *((int *)v679 + 1);
        v687 = *(unsigned __int16 *)((char *)&v553[v674 / 4 + 1] + v686);
        if (v687 < 9)
          goto LABEL_956;
        if (*(_WORD *)((char *)&v553[v674 / 4 + 3] + v686))
        {
          v675 = *(unsigned int *)((char *)&v553[v674 / 4 + 1]
                                 + v678
                                 + *(unsigned __int16 *)((char *)&v553[v674 / 4 + 3] + v686));
          if (v687 < 0xB)
            goto LABEL_957;
        }
        else
        {
          v675 = 0;
          if (v687 < 0xB)
            goto LABEL_957;
        }
      }
      else
      {
        if (v684 == 7)
        {
          *(_QWORD *)(v6 + 8 * v556 + 1408) = v554;
        }
        else
        {
          if (v684 != 6)
            goto LABEL_959;
          if (v682 < 0xD)
          {
            v685 = 0;
          }
          else
          {
            v685 = *(unsigned __int16 *)((char *)&v553[v674 / 4 + 4] + v680);
            if (v685)
              v685 = *(unsigned int *)((char *)&v553[v674 / 4 + 1] + v678 + v685);
          }
          *(_QWORD *)(v6 + 8 * v556 + 1408) = v880 + 4 * v685;
        }
        v686 = v678 - *((int *)v679 + 1);
        v688 = (char *)&v553[v674 / 4] + v686;
        v689 = *((unsigned __int16 *)v688 + 2);
        if (v689 < 9)
        {
LABEL_956:
          v675 = 0;
          goto LABEL_957;
        }
        v675 = *((unsigned __int16 *)v688 + 6);
        if (v675)
          v675 = *(unsigned int *)((char *)&v553[v674 / 4 + 1] + v678 + v675);
        if (v689 < 0xB)
          goto LABEL_957;
      }
      v690 = *(unsigned __int16 *)((char *)&v553[v674 / 4 + 3] + v686 + 2);
      if (v690)
      {
        v676 = *(unsigned int *)((char *)&v553[v674 / 4 + 1] + v678 + v690);
        goto LABEL_958;
      }
LABEL_957:
      v676 = 0;
LABEL_958:
      v677 = &__dst[16 * v556];
      *(_QWORD *)v677 = v675;
      LODWORD(v556) = v556 + 1;
      *((_DWORD *)v677 + 2) = v676;
LABEL_959:
      v674 += 4;
      if (v673 == v674)
        goto LABEL_985;
    }
  }
  LODWORD(v556) = v557;
LABEL_985:
  v902 = v556;
  v691 = v556;
  v903 = v6 + 1216 + 8 * v556 + 192;
  v692 = (2 * v556);
  v904 = 2 * v556;
  v693 = v556 - v557;
  v694 = 2 * (v556 - 1) + 5;
  v82 = (_DWORD)v556 == 0;
  v695 = 4;
  if (!v82)
    v695 = v694;
  v696 = ((v695 + v692) & 0x7FFFFFFFCLL) - v692;
  v906 = v696;
  v907 = (v691 & 0xFFFFFFFC) + 4;
  v908 = 0;
  *(_DWORD *)(v6 + 1392) = v557;
  *(_DWORD *)(v6 + 1400) = 0;
  *(_DWORD *)(v6 + 1404) = v693 + (v696 >> 1);
  v697 = 4 * ((v691 & 0xFFFFFFFC) + 4);
  *(_QWORD *)(v6 + 2024) = v697;
  AGX::Heap<true>::allocateImpl(&__str, v865, v697, 0);
  v698 = *(_QWORD *)__str_16;
  v699 = *(_QWORD *)&__str_16[8];
  *(_DWORD *)(v6 + 2812) += *(_DWORD *)__str_16;
  v700 = __str;
  v882 = *(_QWORD *)&__str_16[16];
  v883 = __str_16[24];
  *(_QWORD *)(v6 + 2000) = __str;
  v905 = *((_QWORD *)&v700 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)__dst, 0);
  *(_DWORD *)(v6 + 2040) = v908;
  *(_QWORD *)(v6 + 2032) = (4 * (v906 + v904) + 12) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 2128) = *(_QWORD *)(v699 + 296);
  *(_DWORD *)(v6 + 1216) = 8
                         * (*(_DWORD *)(v6 + 1396)
                          + *(_DWORD *)(v6 + 1392)
                          + *(_DWORD *)(v6 + 1400)
                          + *(_DWORD *)(v6 + 1404));
  *(_QWORD *)(v6 + 2216) = v865;
  *(_OWORD *)(v6 + 2224) = v700;
  *(_QWORD *)(v6 + 2240) = v698;
  *(_QWORD *)(v6 + 2248) = v699;
  *(_QWORD *)(v6 + 2256) = v882;
  *(_BYTE *)(v6 + 2264) = v883;
  *(_OWORD *)(v6 + 2272) = 0u;
  *(_OWORD *)(v6 + 2288) = 0u;
  *(_OWORD *)(v6 + 2297) = 0u;
  *(_QWORD *)(v6 + 2416) = v868;
  *(_BYTE *)(v6 + 2740) = 0;
  bzero((void *)(v6 + 2816), 0x240uLL);
  if (*v860)
  {
    v701 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v701 = v860;
  }
  else
  {
    v701 = (unsigned int **)(a3 + 784);
  }
  v702 = 0;
  if (*v701 && v701[1])
    v702 = (int *)((char *)*v701 + **v701);
  v703 = (unsigned __int16 *)((char *)v702 - *v702);
  if (*v703 >= 5u && (v704 = v703[2]) != 0)
    v705 = (int *)((char *)v702 + v704 + *(unsigned int *)((char *)v702 + v704));
  else
    v705 = 0;
  if (*v860)
  {
    v706 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v706 = v860;
  }
  else
  {
    v706 = (unsigned int **)(a3 + 784);
  }
  v707 = 0;
  if (*v706 && v706[1])
    v707 = (int *)((char *)*v706 + **v706);
  v708 = (unsigned __int16 *)((char *)v707 - *v707);
  if (*v708 >= 7u && (v709 = v708[3]) != 0)
    v710 = (int *)((char *)v707 + v709 + *(unsigned int *)((char *)v707 + v709));
  else
    v710 = 0;
  if (*v857)
  {
    v711 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v711 = v857;
  }
  else
  {
    v711 = (unsigned int **)(a3 + 1024);
  }
  v712 = 0;
  if (*v711 && v711[1])
    v712 = (int *)((char *)*v711 + **v711);
  v713 = (unsigned __int16 *)((char *)v712 - *v712);
  if (*v713 >= 7u && (v714 = v713[3]) != 0)
    v715 = (int *)((char *)v712 + v714 + *(unsigned int *)((char *)v712 + v714));
  else
    v715 = 0;
  bzero(__dst, 0x1F0uLL);
  v716 = *(unsigned __int16 *)((char *)v715 - *v715 + 4);
  v717 = *(unsigned int *)((char *)v715 + v716);
  v718 = (int *)((char *)v715 + v716 + v717);
  v719 = (unsigned int *)((char *)v718 + *(unsigned __int16 *)((char *)v718 - *v718 + 4));
  v720 = *(unsigned int *)((char *)v719 + *v719);
  v889 = v720;
  v721 = *(unsigned __int16 *)((char *)v718 - *v718 + 6);
  v722 = *(unsigned int *)((char *)v718 + v721);
  if (*(int *)((char *)v718 + v721 + v722))
  {
    v723 = 0;
    v724 = (uint64_t)v715 + v717 + v716 + 16;
    do
    {
      v725 = v721 + v722;
      v726 = *(unsigned int *)(v724 + v725 - 12);
      v727 = v725 + v726;
      v728 = *(int *)(v724 + v725 + v726 - 12);
      v729 = v724 + v727 - v728;
      v730 = *(unsigned __int16 *)(v729 - 12);
      if (v730 >= 0xB)
      {
        v731 = *(unsigned __int16 *)(v729 - 2);
        if (v731)
        {
          v732 = *(char *)(v724 + v721 + v722 + v726 + v731 - 12);
          if (v732 == 2)
          {
            v898 = 1;
            if (v730 >= 0xD && (v734 = v721 + v722 + v726, *(_WORD *)(v724 + v734 - v728)))
              v735 = *(_DWORD *)(v724 + v734 + *(unsigned __int16 *)(v724 + v734 - v728) - 12);
            else
              v735 = 0;
            v896 = v735;
          }
          else if (v732 == 4)
          {
            v897 = 1;
            if (v730 >= 0xD && (v733 = v721 + v722 + v726, *(_WORD *)(v724 + v733 - v728)))
              v895 = *(_DWORD *)(v724 + v733 + *(unsigned __int16 *)(v724 + v733 - v728) - 12);
            else
              v895 = 0;
          }
        }
      }
      ++v723;
      v721 = *(unsigned __int16 *)((char *)v718 - *v718 + 6);
      v722 = *(unsigned int *)((char *)v718 + v721);
      v724 += 4;
    }
    while (v723 < *(unsigned int *)((char *)v718 + v721 + v722));
  }
  v893 = 2 * v720;
  v736 = v6 + 8 * v720 + 2832;
  v737 = *(_QWORD *)(v6 + 1976);
  v892 = v736;
  v890 = v737;
  v738 = (unsigned __int16 *)((char *)v705 - *v705);
  if (*v738 < 5u)
  {
    LODWORD(v739) = 0;
  }
  else
  {
    v739 = v738[2];
    if (v739)
      LODWORD(v739) = *(int *)((char *)v705 + v739);
  }
  v891 = v739;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)__dst, 1);
  v740 = v889;
  *(_DWORD *)(v6 + 2816) = v889;
  v741 = (v899 + 1) >> 1;
  *(_DWORD *)(v6 + 2828) = v741;
  *(_DWORD *)(v6 + 1216) = 8 * (*(_DWORD *)(v6 + 2820) + v740 + *(_DWORD *)(v6 + 2824) + v741);
  AGX::Heap<true>::allocateImpl(&__str, v865, 4 * v900, (_QWORD *)(v6 + 2136));
  v894 = *((_QWORD *)&__str + 1);
  v742 = __str;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)__dst, 0);
  LODWORD(v743) = 0;
  v744 = (unsigned __int16 *)((char *)v710 - *v710);
  if (*v744 >= 5u)
  {
    v743 = v744[2];
    if (v744[2])
      LODWORD(v743) = ((*(int *)((char *)v710 + v743) << 9) + 1920) & 0xFFFFF800;
  }
  v745 = (unsigned __int16 *)((char *)v705 - *v705);
  if (*v745 >= 7u && (v746 = v745[3]) != 0)
    v747 = ((*(int *)((char *)v705 + v746) << 13) + 129024) & 0xDFFE07FF | 0x20000000;
  else
    v747 = 0x20000000;
  v748 = (unsigned __int16 *)((char *)v715 - *v715);
  if (*v748 >= 0xBu && (v749 = v748[5]) != 0)
  {
    v750 = *(int *)((char *)v715 + v749);
    v751 = 1140862848;
    v752 = v901;
    v753 = v899;
    v754 = v893;
    v755 = v750 + 5;
    if ((v750 + 5) >= 0x21)
    {
      if (v755 >= 0x31)
      {
        v756 = (v755 > 0x40) << 30;
        if (v755 >= 0x41)
          v751 = 1140852608;
        else
          v751 = 1140854656;
      }
      else
      {
        v756 = 0;
        v751 = 1140858752;
      }
    }
    else
    {
      v756 = 0;
    }
  }
  else
  {
    v750 = 0;
    v756 = 0;
    v751 = 1140862848;
    v752 = v901;
    v753 = v899;
    v754 = v893;
  }
  *(_DWORD *)(v6 + 3392) = v751;
  *(_DWORD *)(v6 + 3396) = v742;
  *(_DWORD *)(v6 + 3400) = v750;
  *(_DWORD *)(v6 + 3404) = (32 * v752 + 96) & 0xFFFFFF80 | v743 | ((4 * (v754 + v753) + 12) >> 4) | v756;
  v757 = v747 | ((unint64_t)(*(_QWORD *)(v6 + 2032) + 15) >> 4);
  v758 = (*(_DWORD *)(v6 + 2000) + 15) & 0xFFFFFFF0;
  *(_DWORD *)(v6 + 3408) = v757;
  *(_DWORD *)(v6 + 3412) = 0;
  *(_DWORD *)(v6 + 3416) = v758;
  v759 = *(_OWORD *)__str_16;
  *(_OWORD *)(v6 + 2272) = __str;
  *(_OWORD *)(v6 + 2288) = v759;
  *(_OWORD *)(v6 + 2297) = *(_OWORD *)&__str_16[9];
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v6 + 1216);
  *(_QWORD *)(v6 + 3512) = 0;
  *(_OWORD *)(v6 + 3480) = 0u;
  *(_OWORD *)(v6 + 3496) = 0u;
  v760 = *(_DWORD *)(v6 + 920);
  *(_QWORD *)(v6 + 2104) = *(_QWORD *)(v6 + 896);
  *(_DWORD *)(v6 + 2812) += v760;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v6 + 1216);
  *(_DWORD *)(v6 + 3424) = *(_DWORD *)(v6 + 308) + *(_DWORD *)(v6 + 296);
  if (*v860)
  {
    v761 = (unsigned int **)(a3 + 784);
    if (*(_QWORD *)(a3 + 232))
      v761 = v860;
  }
  else
  {
    v761 = (unsigned int **)(a3 + 784);
  }
  v762 = 0;
  if (*v761 && v761[1])
    v762 = (int *)((char *)*v761 + **v761);
  v763 = (unsigned __int16 *)((char *)v762 - *v762);
  if (*v763 >= 5u && (v764 = v763[2]) != 0)
  {
    v765 = (int *)((char *)v762 + v764 + *(unsigned int *)((char *)v762 + v764));
    if (!*v857)
      goto LABEL_1066;
LABEL_1068:
    v766 = (unsigned int **)(a3 + 1024);
    if (*(_QWORD *)(a3 + 472))
      v766 = v857;
  }
  else
  {
    v765 = 0;
    if (*v857)
      goto LABEL_1068;
LABEL_1066:
    v766 = (unsigned int **)(a3 + 1024);
  }
  v767 = 0;
  if (*v766 && v766[1])
    v767 = (int *)((char *)*v766 + **v766);
  v768 = (unsigned __int16 *)((char *)v767 - *v767);
  if (*v768 >= 7u && (v769 = v768[3]) != 0)
    v770 = (int *)((char *)v767 + v769 + *(unsigned int *)((char *)v767 + v769));
  else
    v770 = 0;
  v771 = *(unsigned __int16 *)((char *)v765 - *v765 + 24);
  v772 = *(unsigned int *)((char *)v765 + v771);
  if (*(int *)((char *)v765 + v771 + v772))
  {
    v773 = 0;
    LODWORD(v774) = *(unsigned __int16 *)((char *)v765 - *v765 + 24);
    while (1)
    {
      v775 = (uint64_t)&v765[v773] + v774 + v772;
      v776 = (int *)(v775 + 4 + *(unsigned int *)(v775 + 4));
      v777 = (unsigned __int16 *)((char *)v776 - *v776);
      v778 = *v777;
      if (v778 < 9)
      {
        v780 = v863->__begin_;
        v781 = v863->__begin_;
        if (v778 >= 5)
        {
          v782 = v777[2];
          if (v782)
            goto LABEL_1089;
        }
      }
      else
      {
        if (v777[4])
          v779 = *(unsigned int *)((char *)v776 + v777[4]);
        else
          v779 = 0;
        v780 = v863->__begin_;
        v781 = &v863->__begin_[v779];
        v782 = v777[2];
        if (v782)
        {
LABEL_1089:
          switch(*((_BYTE *)v776 + v782))
          {
            case '3':
              *v781 = 0x100000000;
              break;
            case '4':
              *v781 = 0x300000002;
              break;
            case 'C':
              *(_DWORD *)v781 = 7;
              break;
            case 'E':
              *(_DWORD *)v781 = 6;
              break;
            case 'G':
              *(_DWORD *)v781 = 8;
              break;
            case 'g':
              *(_DWORD *)v781 = 9;
              break;
            case 'h':
              *(_DWORD *)v781 = 10;
              break;
            default:
              break;
          }
        }
      }
      ++v773;
      v774 = *(unsigned __int16 *)((char *)v765 - *v765 + 24);
      v772 = *(unsigned int *)((char *)v765 + v774);
      if (v773 >= *(unsigned int *)((char *)v765 + v774 + v772))
        goto LABEL_1097;
    }
  }
  v780 = v863->__begin_;
LABEL_1097:
  v784 = *(_QWORD *)(v6 + 240);
  v783 = *(_QWORD *)(v6 + 248);
  if (v783 == v784)
    v785 = 0;
  else
    v785 = *v847 & 1;
  v786 = *(_QWORD *)(v6 + 80) - (_DWORD)v780;
  v787 = (*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) >> 2;
  v788 = 8 * (v787 + ((*(_QWORD *)(v6 + 104) - *(_QWORD *)(v6 + 96)) >> 2));
  *(_DWORD *)(v6 + 16) = ((*(_DWORD *)(v6 + 152)
                         - *(_DWORD *)(v6 + 144)
                         + ((v786
                           + 4
                           * (*(_DWORD *)(v6 + 212)
                            + *(_DWORD *)(v6 + 208)
                            + v785
                            + (((v783 - v784) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                       + v788;
  v789 = (*(_DWORD *)(v5 + 124)
        + *(_DWORD *)(v5 + 132)
        + *(_DWORD *)(v5 + 140)
        - (*(_DWORD *)(v5 + 120)
         + *(_DWORD *)(v5 + 128)
         + *(_DWORD *)(v5 + 136))
        + 1) & 0xFFFFFFFE;
  *(_DWORD *)(v6 + 20) = 8 * v789;
  v790 = *(unsigned __int8 *)(v5 + 184);
  v791 = *(_DWORD *)(v5 + 144);
  if (!*(_BYTE *)(v5 + 184))
    v791 = 0;
  *(_DWORD *)(v6 + 24) = 8 * (v791 + v789);
  *(_DWORD *)(v6 + 28) = 8 * v787;
  *(_DWORD *)(v6 + 32) = v788;
  *(_DWORD *)(v6 + 36) = v788 + (v786 & 0xFFFFFFFC);
  v792 = *(_DWORD *)(v5 + 144);
  if (v790)
    v793 = *(_DWORD *)(v5 + 144);
  else
    v793 = 0;
  v794 = *(_QWORD *)(v5 + 168);
  if (!v794)
    v792 = 0;
  *(_DWORD *)(v6 + 40) = 8 * (v793 + v792 + v789);
  v795 = *(_DWORD *)(v5 + 144);
  if (v794)
    v796 = *(_DWORD *)(v5 + 144);
  else
    v796 = 0;
  if (!v790)
    v795 = 0;
  v797 = *(_QWORD *)(v5 + 148);
  *(_DWORD *)(v6 + 44) = 8 * (v795 + v796 + v797 + v789);
  v798 = *(_DWORD *)(v5 + 144);
  if (v790)
    v799 = *(_DWORD *)(v5 + 144);
  else
    v799 = 0;
  if (!v794)
    v798 = 0;
  *(_DWORD *)(v6 + 316) = v799 + v798;
  *(_QWORD *)(v6 + 320) = v797;
  *(_DWORD *)(v6 + 3428) = ((a5[5] & 1) << 18) | ~(-1 << a5[4]) | (a5[3] << 24);
  v800 = (unsigned __int16 *)((char *)v770 - *v770);
  if (*v800 < 0x11u)
  {
    v801 = 0;
  }
  else
  {
    v801 = (int *)v800[8];
    if (v801)
      v801 = (int *)((char *)v801 + (_QWORD)v770 + *(unsigned int *)((char *)v801 + (_QWORD)v770));
  }
  v802 = (unsigned __int16 *)((char *)v801 - *v801);
  v803 = *v802;
  if (v803 < 0xB)
  {
    LOBYTE(v805) = 0;
    LOBYTE(v806) = 0;
    LOBYTE(v804) = 0;
    v807 = 0;
    LOBYTE(v808) = 0;
    v809 = 0;
    if (v803 >= 5)
    {
      v810 = v802[2];
      if (!v802[2])
        goto LABEL_1150;
      goto LABEL_1128;
    }
    goto LABEL_1156;
  }
  if (!v802[5])
  {
    LOBYTE(v804) = 0;
    if (v803 >= 0xF)
      goto LABEL_1124;
LABEL_1132:
    LOBYTE(v805) = 0;
    if (v803 >= 0xD)
      goto LABEL_1148;
    LOBYTE(v806) = 0;
    v810 = v802[2];
    if (v802[2])
      goto LABEL_1128;
LABEL_1150:
    LOBYTE(v808) = 0;
    if (v803 >= 9)
      goto LABEL_1129;
    goto LABEL_1151;
  }
  v804 = *(int *)((char *)v801 + v802[5]);
  if (v803 < 0xF)
    goto LABEL_1132;
LABEL_1124:
  if (v802[7])
    v805 = *(int *)((char *)v801 + v802[7]);
  else
    LOBYTE(v805) = 0;
LABEL_1148:
  if (!v802[6])
  {
    LOBYTE(v806) = 0;
    v810 = v802[2];
    if (v802[2])
      goto LABEL_1128;
    goto LABEL_1150;
  }
  v806 = *(int *)((char *)v801 + v802[6]);
  v810 = v802[2];
  if (!v802[2])
    goto LABEL_1150;
LABEL_1128:
  v808 = *(int *)((char *)v801 + v810);
  if (v803 >= 9)
  {
LABEL_1129:
    if (v802[4])
      v807 = *(int *)((char *)v801 + v802[4]);
    else
      v807 = 0;
LABEL_1152:
    v812 = v802[3];
    if (v812)
      v809 = *(int *)((char *)v801 + v812) << 16;
    else
      v809 = 0;
    goto LABEL_1156;
  }
LABEL_1151:
  v807 = 0;
  if (v803 >= 7)
    goto LABEL_1152;
  v809 = 0;
LABEL_1156:
  *(_QWORD *)&__str = 0;
  AGX::Heap<true>::allocateImpl(__dst, v868, 16, &__str);
  v813 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(v6 + 3480) = *(_OWORD *)__dst;
  *(_OWORD *)(v6 + 3496) = v813;
  *(_OWORD *)(v6 + 3505) = *(_OWORD *)&__dst[25];
  v814 = __str + (int)*MEMORY[0x24BE51650];
  v815 = *(_QWORD *)(v814 + 48);
  *(_OWORD *)(v6 + 3456) = *(_OWORD *)(v814 + 32);
  *(_QWORD *)(v6 + 3472) = v815;
  v816 = *(_QWORD *)(v6 + 3488);
  v817 = *(_QWORD *)(v6 + 3480);
  *(_QWORD *)(v6 + 2088) = *(_QWORD *)(*(_QWORD *)(v6 + 3504) + 296);
  *(_DWORD *)v816 = 1835008;
  *(_DWORD *)(v816 + 4) = v804 | (unsigned __int16)(v806 << 8) | (v805 << 16);
  *(_QWORD *)(v816 + 8) = v809 | (v808 << 8) | (v807 << 24);
  *(_QWORD *)(v6 + 3432) = __ROR8__(v817, 32) & 0xFFFFFFFC000000FFLL | 0x400;
  v818 = (unsigned int *)((char *)v770 + *(unsigned __int16 *)((char *)v770 - *v770 + 22));
  v819 = *(unsigned int *)((char *)v818 + *v818);
  *(_DWORD *)(v6 + 3448) = v819;
  v820 = (_QWORD *)operator new[]();
  *v820 = 40;
  v820[1] = v819;
  v821 = v820 + 2;
  if ((_DWORD)v819)
  {
    v822 = 40 * v819;
    v823 = v820 + 4;
    do
    {
      *v823 = 0;
      v823[1] = 0;
      v823[2] = 0;
      v823 += 5;
      v822 -= 40;
    }
    while (v822);
  }
  *(_QWORD *)(v6 + 3440) = v821;
  v824 = *(unsigned int *)(v6 + 3448);
  if ((_DWORD)v824)
  {
    v825 = 0;
    v826 = (unsigned __int16 *)((char *)v770 - *v770);
    v827 = *v826;
    v828 = 4 * v824;
    do
    {
      if (v827 < 0x17)
      {
        v830 = 0;
      }
      else
      {
        v830 = v826[11];
        if (v826[11])
          v830 += (uint64_t)v770 + *(unsigned int *)((char *)v770 + v830);
      }
      v831 = *(unsigned int *)(v830 + v825 + 4);
      v832 = v830 + v825 + v831;
      v833 = v831 - *(int *)(v832 + 4);
      v834 = v830 + v825 + v833;
      v835 = *(unsigned __int16 *)(v834 + 4);
      if (v835 <= 4)
      {
        LODWORD(v837) = 0;
        *(_BYTE *)v821 = 0;
      }
      else
      {
        v836 = *(unsigned __int16 *)(v834 + 8);
        if (v836)
          LOBYTE(v836) = *(_BYTE *)(v830 + v825 + v836 + v831 + 4) != 0;
        *(_BYTE *)v821 = v836;
        if (v835 < 7)
        {
          LODWORD(v837) = 0;
        }
        else
        {
          v837 = *(unsigned __int16 *)(v830 + v825 + v833 + 10);
          if (v837)
            LODWORD(v837) = *(_DWORD *)(v830 + v825 + v837 + v831 + 4);
        }
      }
      *((_DWORD *)v821 + 1) = v837;
      v838 = v830 + v825 + v831 - *(int *)(v832 + 4);
      if (*(unsigned __int16 *)(v838 + 4) < 9u)
      {
        LODWORD(v839) = 0;
      }
      else
      {
        v839 = *(unsigned __int16 *)(v838 + 12);
        if (v839)
          LODWORD(v839) = *(_DWORD *)(v830 + v825 + v839 + v831 + 4);
      }
      *((_DWORD *)v821 + 2) = v839;
      v840 = v831 - *(int *)(v832 + 4);
      if (*(unsigned __int16 *)(v830 + v825 + v840 + 4) >= 0xBu
        && (v841 = v830 + v825, (v842 = *(unsigned __int16 *)(v841 + v840 + 14)) != 0))
      {
        v829 = *(char *)(v841 + v842 + v831 + 4);
      }
      else
      {
        v829 = 0;
      }
      *((_DWORD *)v821 + 3) = v829;
      v825 += 4;
      v821 += 5;
    }
    while (v828 != v825);
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v6 + 1216);
  return v6;
}

void sub_232CCA0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void **a10, _QWORD *a11, uint64_t a12, CompileStatistics *a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  void **v54;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;

  CompileStatistics::~CompileStatistics(a13);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v53 + 1032));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v53 + 992));
  v56 = *(void **)(v53 + 968);
  if (v56)
  {
    *(_QWORD *)(v53 + 976) = v56;
    operator delete(v56);
  }
  v57 = *a26;
  if (*a26)
  {
    *(_QWORD *)(v53 + 952) = v57;
    operator delete(v57);
  }
  if (*a9 < 0)
  {
    operator delete(*a10);
    if ((*(char *)(v53 + 479) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*(char *)(v53 + 479) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v53 + 455) < 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*a18);
  if (*(char *)(v53 + 455) < 0)
  {
LABEL_8:
    operator delete(*a19);
    if ((*(char *)(v53 + 431) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a32);
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a11);
      v58 = *a14;
      if (*a14)
      {
        *(_QWORD *)(v53 + 176) = v58;
        operator delete(v58);
      }
      v59 = *a16;
      if (*a16)
      {
        *(_QWORD *)(v53 + 152) = v59;
        operator delete(v59);
      }
      v60 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v53 + 128) = v60;
        operator delete(v60);
      }
      v61 = *a17;
      if (*a17)
      {
        *(_QWORD *)(v53 + 104) = v61;
        operator delete(v61);
        v62 = *a27;
        if (!*a27)
        {
LABEL_22:
          v63 = *v54;
          if (!*v54)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
        v62 = *a27;
        if (!*a27)
          goto LABEL_22;
      }
      *(_QWORD *)(v53 + 80) = v62;
      operator delete(v62);
      v63 = *v54;
      if (!*v54)
      {
LABEL_23:
        if (a44 < 0)
          goto LABEL_24;
        goto LABEL_28;
      }
LABEL_27:
      *(_QWORD *)(v53 + 56) = v63;
      operator delete(v63);
      if (a44 < 0)
      {
LABEL_24:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a20);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v53 + 431) & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

unint64_t AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  unint64_t v16;

  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 208))
  {
    v3 = *(_QWORD *)(a1 + 216);
    v4 = *(NSObject **)(v3 + 16);
    v11 = MEMORY[0x24BDAC760];
    v12 = 3221225472;
    v13 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v14 = &__block_descriptor_48_e5_v8__0l;
    v15 = v3;
    v16 = a1 + 184;
    dispatch_sync(v4, &v11);
    *(_OWORD *)(a1 + 209) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
  }
  if (*(_QWORD *)(a1 + 256))
  {
    v5 = *(_QWORD *)(a1 + 264);
    v6 = *(NSObject **)(v5 + 16);
    v11 = v2;
    v12 = 3221225472;
    v13 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v14 = &__block_descriptor_48_e5_v8__0l;
    v15 = v5;
    v16 = a1 + 232;
    dispatch_sync(v6, &v11);
    *(_OWORD *)(a1 + 257) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
  }
  v7 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 6681))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v7 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 6872));
  }
  if (*(char *)(a1 + 455) < 0)
  {
    operator delete(*(void **)(a1 + 432));
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(a1 + 143) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_10:
    v8 = *(void **)(a1 + 32);
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 120));
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
LABEL_11:
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
  }
LABEL_12:
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

unint64_t AGX::ClearVisibilityVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ClearVisibilityVertexProgramVariant(unint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  std::vector<unsigned int> *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int **v11;
  int *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int **v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  const char *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  const char *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  size_t v34;
  const void *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int **v40;
  int *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _DWORD *v48;
  const char *v49;
  size_t v50;
  size_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  int v57;
  int v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _DWORD *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int *v80;
  BOOL v81;
  int *v82;
  unsigned __int16 *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  uint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned __int16 *v92;
  uint64_t v93;
  unsigned int **v94;
  unsigned int *v95;
  int *v96;
  unsigned __int16 *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned __int16 *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unsigned __int16 *v115;
  uint64_t v116;
  unsigned __int16 *v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unsigned __int16 *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned __int16 *v127;
  uint64_t v128;
  unsigned __int16 *v129;
  uint64_t v130;
  unsigned __int16 *v131;
  uint64_t v132;
  unsigned __int16 *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int *v139;
  uint64_t v140;
  char *v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  int *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  char *v151;
  unsigned int *v152;
  uint64_t v153;
  unsigned int *v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  unsigned __int16 *v158;
  uint64_t v159;
  int v160;
  unsigned __int8 v161;
  unsigned __int16 *v162;
  uint64_t v163;
  int *v164;
  unsigned __int16 *v165;
  uint64_t v166;
  unsigned __int16 *v167;
  uint64_t v168;
  uint64_t v169;
  _WORD *v170;
  unsigned int v171;
  uint64_t v172;
  BOOL v173;
  int v174;
  BOOL v175;
  unsigned __int16 *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int *v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int *v195;
  int *v196;
  unsigned __int16 *v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t **v204;
  unsigned int v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  int v209;
  uint64_t v210;
  unsigned __int8 v211;
  int v212;
  unsigned __int16 *v213;
  uint64_t v214;
  int *v215;
  unsigned __int16 *v216;
  uint64_t v217;
  unsigned __int16 *v218;
  uint64_t v219;
  unsigned __int16 *v220;
  uint64_t v221;
  unsigned __int16 *v222;
  char v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  int v227;
  unsigned __int8 v228;
  unsigned __int16 *v229;
  unsigned __int16 *v230;
  uint64_t v231;
  unsigned __int8 v232;
  _OWORD *v233;
  const void **v234;
  _QWORD *v235;
  __int128 v236;
  __int128 v237;
  _QWORD *v238;
  uint64_t v239;
  const void *v240;
  _QWORD *v241;
  std::vector<unsigned int> *v242;
  uint64_t v243;
  uint64_t v244;
  const void **v245;
  _QWORD *v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  const void *v251;
  _QWORD *v252;
  const void **v253;
  _QWORD *v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  const void *v259;
  _QWORD *v260;
  uint64_t v261;
  NSObject *v262;
  _QWORD *v263;
  std::string *v264;
  _QWORD *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  std::string *v271;
  _QWORD *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  std::vector<unsigned int>::pointer begin;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int *v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int *v336;
  unsigned int *v337;
  int *v338;
  unsigned __int16 *v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  unsigned __int16 *v344;
  uint64_t v345;
  uint64_t *v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  int v350;
  uint64_t **v351;
  uint64_t *v352;
  uint64_t **v353;
  unsigned int v354;
  _DWORD *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  int *v359;
  int v360;
  unsigned int v361;
  std::vector<unsigned int>::pointer v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  BOOL v366;
  int v367;
  std::vector<unsigned int>::pointer v368;
  uint64_t v369;
  int v370;
  int v371;
  unsigned int v372;
  std::vector<unsigned int>::pointer v373;
  int v374;
  unsigned __int16 *v375;
  unint64_t v376;
  int v377;
  unsigned __int16 *v378;
  unint64_t v379;
  unsigned __int16 *v380;
  uint64_t v381;
  unint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  unsigned int v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  unsigned __int16 *v400;
  uint64_t v401;
  _DWORD *v402;
  unint64_t v403;
  _BYTE *v404;
  _BYTE *v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  unsigned __int16 *v410;
  uint64_t v411;
  _DWORD *v412;
  unint64_t v413;
  _DWORD *v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  unint64_t v419;
  _DWORD *v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  unsigned int **v429;
  int *v430;
  unsigned __int16 *v431;
  uint64_t v432;
  unsigned int *v433;
  unsigned int **v434;
  int *v435;
  unsigned __int16 *v436;
  uint64_t v437;
  int *v438;
  unsigned __int16 *v439;
  uint64_t v440;
  unsigned __int16 *v441;
  uint64_t v442;
  const char *v443;
  unsigned __int16 *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int *v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  char *v457;
  uint64_t v458;
  char v459;
  uint64_t v460;
  uint64_t v461;
  __int128 v462;
  _QWORD *v463;
  uint64_t v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  _WORD *v470;
  const void *v471;
  size_t v472;
  char *v473;
  char *v474;
  uint64_t *v475;
  unsigned __int16 *v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int *v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  char *v483;
  char v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  char *v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unsigned int *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  char *v497;
  char v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int *v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int *v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  char v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  unsigned int **v536;
  unsigned int *v537;
  unsigned int *v538;
  BOOL v539;
  int *v540;
  unsigned __int16 *v541;
  uint64_t v542;
  int *v543;
  unsigned __int16 *v544;
  uint64_t v545;
  unsigned int *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unsigned int *v550;
  uint64_t v551;
  unsigned int v552;
  unsigned int *v553;
  unint64_t v554;
  uint64_t v555;
  int v556;
  _BYTE *v557;
  int *v558;
  unsigned __int16 *v559;
  unsigned int v560;
  uint64_t v561;
  int v562;
  unsigned int v563;
  int v564;
  unsigned int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  _BYTE *v569;
  uint64_t v570;
  int v571;
  int v572;
  unsigned int v573;
  int v574;
  unint64_t v576;
  _DWORD *v577;
  unsigned __int16 *v578;
  unsigned int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  unint64_t v586;
  unsigned __int16 *v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  _BYTE *v601;
  unsigned int v602;
  uint64_t v603;
  int v604;
  int v605;
  int v606;
  unint64_t v608;
  uint64_t v609;
  int v610;
  unsigned __int16 *v611;
  unsigned int v612;
  unsigned int v613;
  unsigned int v614;
  unsigned int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _BYTE *v619;
  unsigned int v620;
  uint64_t v621;
  int v622;
  int v623;
  int v624;
  unint64_t v626;
  uint64_t v627;
  int v628;
  unsigned __int16 *v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  _BYTE *v637;
  unsigned int v638;
  uint64_t v639;
  int v640;
  int v641;
  int v642;
  unint64_t v644;
  int v645;
  unsigned __int16 *v646;
  unsigned int v647;
  unsigned __int16 *v648;
  unsigned int v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  int v656;
  _BYTE *v657;
  uint64_t v658;
  char *v659;
  uint64_t v660;
  char *v661;
  unsigned int v662;
  uint64_t v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  unsigned int v667;
  char *v668;
  unsigned int v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  __int128 v680;
  unsigned int *v681;
  _QWORD *v682;
  unsigned int **v683;
  int *v684;
  unsigned __int16 *v685;
  uint64_t v686;
  int *v687;
  unsigned int **v688;
  int *v689;
  unsigned __int16 *v690;
  uint64_t v691;
  int *v692;
  unsigned int **v693;
  int *v694;
  unsigned __int16 *v695;
  uint64_t v696;
  int *v697;
  uint64_t v698;
  uint64_t v699;
  int *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unsigned int v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unsigned __int16 *v716;
  uint64_t v717;
  unsigned int v718;
  int v719;
  unsigned __int16 *v720;
  uint64_t v721;
  unsigned int v722;
  unsigned __int16 *v723;
  uint64_t v724;
  unsigned int v725;
  unsigned __int16 *v726;
  uint64_t v727;
  int v728;
  int v729;
  int v730;
  int v731;
  int v732;
  unsigned int v733;
  int v734;
  _QWORD *v735;
  unsigned int **v736;
  unsigned int v737;
  __int128 v738;
  unsigned int **v739;
  int *v740;
  unsigned __int16 *v741;
  uint64_t v742;
  int *v743;
  int v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  _DWORD *v749;
  uint64_t v750;
  int *v751;
  unsigned __int16 *v752;
  unsigned int v753;
  uint64_t v754;
  std::vector<unsigned int>::pointer v755;
  _QWORD *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  int v761;
  uint64_t v762;
  int v763;
  unsigned int v764;
  int v765;
  int v766;
  int v767;
  int v768;
  uint64_t v769;
  int v770;
  int v771;
  uint64_t v772;
  int v773;
  int v774;
  __int128 v775;
  uint64_t v776;
  uint64_t v777;
  _OWORD *v778;
  uint64_t v779;
  char *v781;
  unint64_t v782;
  _DWORD *v783;
  _DWORD *v785;
  std::vector<unsigned int> *v786;
  _QWORD *v787;
  _QWORD *v788;
  _QWORD *v789;
  _QWORD *v790;
  unsigned int **v791;
  std::string *v792;
  _QWORD *v793;
  _QWORD *v794;
  int *v796;
  unsigned int **v797;
  _QWORD *v798;
  void **v799;
  uint64_t v800;
  _QWORD *v801;
  char *v802;
  _DWORD *v803;
  _DWORD *v804;
  uint64_t v805;
  int *v806;
  _DWORD *v807;
  _QWORD *v808;
  _QWORD *v809;
  uint64_t **v810;
  std::vector<unsigned int> *v811;
  uint64_t **v812;
  _DWORD *v813;
  unint64_t v814;
  uint64_t v815;
  char v816;
  __int128 __str;
  _BYTE __str_16[25];
  _BYTE __dst[48];
  __int16 v820;
  uint64_t v821;
  unsigned int v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  int v826;
  uint64_t v827;
  int v828;
  char v829;
  uint64_t v830;
  uint64_t v831;
  int v832;
  int v833;
  int v834;
  uint64_t v835;
  unsigned int v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  int v840;
  uint64_t v841;

  v5 = a4;
  v6 = a3;
  v7 = a1;
  v841 = *MEMORY[0x24BDAC8D0];
  __str_16[7] = 0;
  LOBYTE(__str) = 0;
  *(_QWORD *)a1 = &off_250401EB0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  v790 = (_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  v789 = (_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v787 = (_QWORD *)(a1 + 168);
  v788 = (_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v810 = (uint64_t **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = a1 + 272;
  v798 = (_QWORD *)(a1 + 368);
  v9 = (unint64_t *)(a2 + 6744);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 400) = v10;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 844) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  v794 = (_QWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 871) = 0u;
  *(_OWORD *)(a1 + 887) = 0u;
  *(_OWORD *)(a1 + 903) = 0u;
  v781 = (char *)(a1 + 871);
  *(_QWORD *)(a1 + 916) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_BYTE *)(a1 + 1016) = *(_BYTE *)(a4 + 425);
  *(_WORD *)(a1 + 1018) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  v812 = (uint64_t **)(a1 + 1032);
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  *(_OWORD *)(a1 + 1144) = 0u;
  v799 = (void **)(a1 + 1144);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  v785 = (_DWORD *)(a1 + 1048);
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_QWORD *)(a1 + 1208) = 0;
  v797 = (unsigned int **)(a3 + 28);
  if (a3[28])
  {
    v11 = (unsigned int **)(a3 + 98);
    if (a3[29])
      v11 = (unsigned int **)(a3 + 28);
  }
  else
  {
    v11 = (unsigned int **)(a3 + 98);
  }
  v12 = 0;
  if (*v11 && v11[1])
    v12 = (int *)((char *)*v11 + **v11);
  v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 5u && (v14 = v13[2]) != 0)
    v806 = (int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
  else
    v806 = 0;
  if (a3[58])
  {
    v15 = (unsigned int **)(a3 + 128);
    if (a3[59])
      v15 = (unsigned int **)(a3 + 58);
  }
  else
  {
    v15 = (unsigned int **)(a3 + 128);
  }
  v16 = 0;
  if (*v15 && v15[1])
    v16 = (int *)((char *)*v15 + **v15);
  v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 5u && (v18 = v17[2]) != 0)
    v19 = (int *)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
  else
    v19 = 0;
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  v21 = *v20;
  if (v21 < 0x25)
  {
    LOBYTE(v22) = 0;
  }
  else
  {
    v22 = v20[18];
    if (v20[18])
      LOBYTE(v22) = *((_BYTE *)v19 + v22) != 0;
  }
  *(_BYTE *)(a1 + 1017) = v22;
  v23 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v23 >= 0x55u && v23[42])
  {
    if (v21 <= 6)
    {
LABEL_34:
      LODWORD(v24) = 0;
      goto LABEL_38;
    }
  }
  else if (v21 < 7)
  {
    goto LABEL_34;
  }
  v24 = v20[3];
  if (v24)
    LODWORD(v24) = *(int *)((char *)v19 + v24);
LABEL_38:
  *(_DWORD *)(a1 + 392) = v24;
  v25 = (unsigned __int16 *)((char *)v19 - *v19);
  v791 = (unsigned int **)(a3 + 58);
  v786 = (std::vector<unsigned int> *)(a1 + 72);
  v783 = (_DWORD *)(a1 + 200);
  if (*v25 >= 0x13u && (v26 = v25[9]) != 0)
    v27 = (char *)v19 + v26 + *(unsigned int *)((char *)v19 + v26) + 4;
  else
    v27 = "";
  v792 = (std::string *)(a1 + 456);
  v793 = (_QWORD *)(a1 + 432);
  v782 = a1 + 848;
  v801 = (_QWORD *)(a1 + 944);
  MEMORY[0x234927D28](v794, v27);
  v28 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v28 >= 9u && (v29 = v28[4]) != 0)
    v30 = (char *)v19 + v29 + *(unsigned int *)((char *)v19 + v29) + 4;
  else
    v30 = "";
  MEMORY[0x234927D28](v793, v30);
  v31 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v31 < 0x29u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v31[20];
    if (v32)
      LOBYTE(v32) = *((_BYTE *)v19 + v32) != 0;
  }
  *(_BYTE *)(v7 + 480) = v32;
  std::string::operator=(v792, (const std::string *)&__str);
  v33 = (unsigned __int16 *)((char *)v19 - *v19);
  v811 = v8;
  if (*v33 >= 5u && v33[2] && *(_BYTE *)(a2 + 6360))
  {
    v34 = v6[1];
    if (v34 > 0x7FFFFFFFFFFFFFF7)
      abort();
    v35 = (const void *)*v6;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      *(_QWORD *)&__dst[8] = v34;
      *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
      *(_QWORD *)__dst = v36;
    }
    else
    {
      __dst[23] = v6[1];
      v36 = __dst;
      if (!v34)
        goto LABEL_61;
    }
    memmove(v36, v35, v34);
LABEL_61:
    v36[v34] = 0;
    if (*v781 < 0)
      operator delete(*(void **)v782);
    *(_OWORD *)v782 = *(_OWORD *)__dst;
    *(_QWORD *)(v782 + 16) = *(_QWORD *)&__dst[16];
    v39 = v6 + 3;
    if (v6[3])
    {
      if (!v6[4])
        v39 = v6 + 73;
    }
    else
    {
      v39 = v6 + 73;
    }
    *(_QWORD *)(v7 + 872) = *v39 - *v6;
  }
  if (v6[43])
  {
    v40 = (unsigned int **)(v6 + 43);
    if (!v6[44])
      v40 = (unsigned int **)(v6 + 113);
  }
  else
  {
    v40 = (unsigned int **)(v6 + 113);
  }
  v808 = (_QWORD *)v7;
  v809 = v6;
  v796 = v19;
  if (*v40 && v40[1])
  {
    v41 = (int *)((char *)*v40 + **v40);
    v42 = (unsigned __int16 *)((char *)v41 - *v41);
    v43 = *v42;
    if (v42[2])
    {
      v44 = (int *)((char *)v41 + v42[2] + *(unsigned int *)((char *)v41 + v42[2]));
      if (v43 < 7)
        goto LABEL_83;
    }
    else
    {
      v44 = 0;
      if (v43 < 7)
        goto LABEL_83;
    }
    v45 = v42[3];
    if (v45)
    {
      v46 = (char *)v41 + v45 + *(unsigned int *)((char *)v41 + v45);
      if (!*v44)
        goto LABEL_122;
      goto LABEL_84;
    }
LABEL_83:
    v46 = 0;
    if (!*v44)
      goto LABEL_122;
LABEL_84:
    v47 = 0;
    v802 = v46 + 4;
    v804 = v44 + 1;
    while (1)
    {
      v49 = (char *)&v804[v47 + 1] + v804[v47];
      v50 = strlen(v49);
      if (v50 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v51 = v50;
      if (v50 >= 0x17)
        break;
      __dst[23] = v50;
      v52 = __dst;
      if (v50)
        goto LABEL_94;
LABEL_95:
      v52[v51] = 0;
      v55 = *(_QWORD *)(v7 + 1152);
      if (v55 >= *(_QWORD *)(v7 + 1160))
      {
        v56 = std::vector<std::string>::__push_back_slow_path<std::string>(v799, (uint64_t)__dst);
        v57 = __dst[23];
        *(_QWORD *)(v7 + 1152) = v56;
        if (v57 < 0)
          operator delete(*(void **)__dst);
      }
      else
      {
        *(_OWORD *)v55 = *(_OWORD *)__dst;
        *(_QWORD *)(v55 + 16) = *(_QWORD *)&__dst[16];
        *(_QWORD *)(v7 + 1152) = v55 + 24;
      }
      v58 = *(_DWORD *)&v802[4 * v47];
      v59 = *(char **)(v7 + 1176);
      v60 = *(_QWORD *)(v7 + 1184);
      if ((unint64_t)v59 >= v60)
      {
        v61 = v7;
        v62 = v5;
        v63 = v44;
        v64 = *(char **)(v61 + 1168);
        v65 = (v59 - v64) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          abort();
        v67 = v60 - (_QWORD)v64;
        if (v67 >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 62)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v69 = operator new(4 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[4 * v65];
        *v70 = v58;
        v48 = v70 + 1;
        if (v59 == v64)
        {
          v6 = v809;
        }
        else
        {
          v71 = v59 - 4 - v64;
          if (v71 < 0x2C)
          {
            v6 = v809;
            goto LABEL_118;
          }
          v6 = v809;
          if ((unint64_t)(v64 - v69) < 0x20)
            goto LABEL_1113;
          v72 = (v71 >> 2) + 1;
          v73 = &v69[4 * v65 - 16];
          v74 = v59 - 16;
          v75 = v72 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v76 = *(_OWORD *)v74;
            *(v73 - 1) = *((_OWORD *)v74 - 1);
            *v73 = v76;
            v73 -= 2;
            v74 -= 32;
            v75 -= 8;
          }
          while (v75);
          v70 -= v72 & 0x7FFFFFFFFFFFFFF8;
          v59 -= 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
          if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1113:
            do
            {
LABEL_118:
              v77 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *--v70 = v77;
            }
            while (v59 != v64);
          }
        }
        v808[146] = v70;
        v808[147] = v48;
        v808[148] = &v69[4 * v68];
        if (v64)
          operator delete(v64);
        v44 = v63;
        v5 = v62;
        v7 = (unint64_t)v808;
        goto LABEL_86;
      }
      *(_DWORD *)v59 = v58;
      v48 = v59 + 4;
LABEL_86:
      *(_QWORD *)(v7 + 1176) = v48;
      if (++v47 >= (unint64_t)*v44)
        goto LABEL_122;
    }
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    v52 = operator new(v53 + 1);
    *(_QWORD *)&__dst[8] = v51;
    *(_QWORD *)&__dst[16] = v54 | 0x8000000000000000;
    *(_QWORD *)__dst = v52;
LABEL_94:
    memmove(v52, v49, v51);
    goto LABEL_95;
  }
LABEL_122:
  if (v6[68])
  {
    v78 = (unsigned int **)(v6 + 68);
    if (!v6[69])
      v78 = (unsigned int **)(v6 + 138);
  }
  else
  {
    v78 = (unsigned int **)(v6 + 138);
  }
  v80 = *v78;
  v79 = v78[1];
  if (v80)
    v81 = v79 == 0;
  else
    v81 = 1;
  if (v81
    || (v82 = (int *)((char *)v80 + *v80), v83 = (unsigned __int16 *)((char *)v82 - *v82), *v83 < 5u)
    || (v84 = v83[2]) == 0)
  {
    v85 = 0;
  }
  else
  {
    v85 = *(_QWORD *)((char *)v82 + v84);
  }
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  *(float *)(v7 + 1056) = (float)(v85
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / unk_254235750)
                        / 1000000.0;
  v86 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v86 < 5u)
  {
    LODWORD(v87) = 0;
  }
  else
  {
    v87 = v86[2];
    if (v87)
      LODWORD(v87) = *(int *)((char *)v806 + v87);
  }
  *v785 = v87;
  v88 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v88 < 0x2Du)
  {
    LODWORD(v89) = 0;
  }
  else
  {
    v89 = v88[22];
    if (v89)
      LODWORD(v89) = *(int *)((char *)v806 + v89);
  }
  *(_DWORD *)(v7 + 1052) = v89;
  v90 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v90 < 0x35u)
  {
    LODWORD(v91) = 0;
  }
  else
  {
    v91 = v90[26];
    if (v91)
      LODWORD(v91) = *(int *)((char *)v806 + v91);
  }
  *(_DWORD *)(v7 + 1092) = v91;
  v92 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v92 < 0x43u)
  {
    LODWORD(v93) = 0;
  }
  else
  {
    v93 = v92[33];
    if (v93)
      LODWORD(v93) = *(int *)((char *)v806 + v93);
  }
  *(_DWORD *)(v7 + 1128) = v93;
  if (v6[38])
  {
    v94 = (unsigned int **)(v6 + 38);
    if (!v6[39])
      v94 = (unsigned int **)(v6 + 108);
    v95 = *v94;
    if (!*v94)
      goto LABEL_237;
    goto LABEL_159;
  }
  v94 = (unsigned int **)(v6 + 108);
  v95 = (unsigned int *)v6[108];
  if (v95)
  {
LABEL_159:
    if (v94[1])
    {
      v96 = (int *)((char *)v95 + *v95);
      v97 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v97 < 0xDu)
      {
        LODWORD(v98) = 0;
      }
      else
      {
        v98 = v97[6];
        if (v98)
          LODWORD(v98) = *(int *)((char *)v96 + v98);
      }
      *(_DWORD *)(v7 + 1052) = v98;
      v99 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v99 < 0xBu)
      {
        LODWORD(v100) = 0;
      }
      else
      {
        v100 = v99[5];
        if (v100)
          LODWORD(v100) = *(int *)((char *)v96 + v100);
      }
      *(_DWORD *)(v7 + 1060) = v100;
      v101 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v101 < 0x11u)
      {
        LODWORD(v102) = 0;
      }
      else
      {
        v102 = v101[8];
        if (v102)
          LODWORD(v102) = *(int *)((char *)v96 + v102);
      }
      *(_DWORD *)(v7 + 1064) = v102;
      v103 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v103 < 0x13u)
      {
        LODWORD(v104) = 0;
      }
      else
      {
        v104 = v103[9];
        if (v104)
          LODWORD(v104) = *(int *)((char *)v96 + v104);
      }
      *(_DWORD *)(v7 + 1068) = v104;
      v105 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v105 < 0x17u)
      {
        LODWORD(v106) = 0;
      }
      else
      {
        v106 = v105[11];
        if (v106)
          LODWORD(v106) = *(int *)((char *)v96 + v106);
      }
      *(_DWORD *)(v7 + 1072) = v106;
      v107 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v107 < 0x1Bu)
      {
        LODWORD(v108) = 0;
      }
      else
      {
        v108 = v107[13];
        if (v108)
          LODWORD(v108) = *(int *)((char *)v96 + v108);
      }
      *(_DWORD *)(v7 + 1076) = v108;
      v109 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v109 < 0x15u)
      {
        LODWORD(v110) = 0;
      }
      else
      {
        v110 = v109[10];
        if (v110)
          LODWORD(v110) = *(int *)((char *)v96 + v110);
      }
      *(_DWORD *)(v7 + 1080) = v110;
      v111 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v111 < 0x19u)
      {
        LODWORD(v112) = 0;
      }
      else
      {
        v112 = v111[12];
        if (v112)
          LODWORD(v112) = *(int *)((char *)v96 + v112);
      }
      *(_DWORD *)(v7 + 1084) = v112;
      v113 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v113 < 0x1Du)
      {
        LODWORD(v114) = 0;
      }
      else
      {
        v114 = v113[14];
        if (v114)
          LODWORD(v114) = *(int *)((char *)v96 + v114);
      }
      *(_DWORD *)(v7 + 1088) = v114;
      v115 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v115 < 0xFu)
      {
        LODWORD(v116) = 0;
      }
      else
      {
        v116 = v115[7];
        if (v116)
          LODWORD(v116) = *(int *)((char *)v96 + v116);
      }
      *(_DWORD *)(v7 + 1092) = v116;
      v117 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v117 < 0x1Fu)
      {
        LODWORD(v118) = 0;
      }
      else
      {
        v118 = v117[15];
        if (v118)
          LODWORD(v118) = *(int *)((char *)v96 + v118);
      }
      *(_DWORD *)(v7 + 1096) = v118;
      v119 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v119 < 0x21u)
      {
        LODWORD(v120) = 0;
      }
      else
      {
        v120 = v119[16];
        if (v120)
          LODWORD(v120) = *(int *)((char *)v96 + v120);
      }
      *(_DWORD *)(v7 + 1100) = v120;
      v121 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v121 < 0x23u)
      {
        LODWORD(v122) = 0;
      }
      else
      {
        v122 = v121[17];
        if (v122)
          LODWORD(v122) = *(int *)((char *)v96 + v122);
      }
      *(_DWORD *)(v7 + 1104) = v122;
      v123 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v123 < 0x25u)
      {
        LODWORD(v124) = 0;
      }
      else
      {
        v124 = v123[18];
        if (v124)
          LODWORD(v124) = *(int *)((char *)v96 + v124);
      }
      *(_DWORD *)(v7 + 1108) = v124;
      v125 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v125 < 0x27u)
      {
        LODWORD(v126) = 0;
      }
      else
      {
        v126 = v125[19];
        if (v126)
          LODWORD(v126) = *(int *)((char *)v96 + v126);
      }
      *(_DWORD *)(v7 + 1112) = v126;
      v127 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v127 < 0x29u)
      {
        LODWORD(v128) = 0;
      }
      else
      {
        v128 = v127[20];
        if (v128)
          LODWORD(v128) = *(int *)((char *)v96 + v128);
      }
      *(_DWORD *)(v7 + 1116) = v128;
      v129 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v129 < 0x2Bu)
      {
        LODWORD(v130) = 0;
      }
      else
      {
        v130 = v129[21];
        if (v130)
          LODWORD(v130) = *(int *)((char *)v96 + v130);
      }
      *(_DWORD *)(v7 + 1120) = v130;
      v131 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v131 < 7u)
      {
        LODWORD(v132) = 0;
      }
      else
      {
        v132 = v131[3];
        if (v132)
          LODWORD(v132) = *(int *)((char *)v96 + v132);
      }
      *(_DWORD *)(v7 + 1124) = v132;
      v133 = (unsigned __int16 *)((char *)v96 - *v96);
      if (*v133 >= 5u && (v134 = v133[2]) != 0)
        v135 = *(int *)((char *)v96 + v134);
      else
        v135 = 0;
      *(_DWORD *)(v7 + 1132) = v135;
    }
  }
LABEL_237:
  if (v6[53])
  {
    v136 = v6[54];
    if (v136)
      v137 = v6[53];
    else
      v137 = v6[123];
    if (v136)
      v138 = v6 + 53;
    else
      v138 = v6 + 123;
  }
  else
  {
    v138 = v6 + 123;
    v137 = v6[123];
  }
  MEMORY[0x234927D34](v7 + 1192, v137, v138[1]);
  v139 = v806;
  std::string::push_back((std::string *)(v7 + 1192), 0);
  v140 = *v806;
  v141 = (char *)v806 - v140;
  v142 = *(unsigned __int16 *)((char *)v806 - v140);
  if (v142 < 0x39)
    goto LABEL_263;
  v143 = -v140;
  v144 = *((unsigned __int16 *)v141 + 28);
  if (v144)
  {
    v145 = (int *)((char *)v806 + v144 + *(unsigned int *)((char *)v806 + v144));
    if (*v145)
    {
      *(_BYTE *)(v7 + 936) = 1;
      v146 = (_DWORD *)((char *)v145 + v145[1] + 4);
      v147 = (unsigned __int16 *)((char *)v146 - *v146);
      if (*v147 >= 9u && (v148 = v147[4]) != 0)
        v149 = *(int *)((char *)v146 + v148);
      else
        v149 = 0;
      *(_DWORD *)(v7 + 1136) = v149;
      *(_BYTE *)(v7 + 1140) = 1;
      v150 = *v806;
      v143 = -v150;
      v142 = *(unsigned __int16 *)((char *)v806 - v150);
    }
  }
  if (v142 < 0x3B)
    goto LABEL_263;
  v151 = (char *)v806 + v143;
  if (*((_WORD *)v151 + 29))
  {
    v152 = (unsigned int *)((char *)v806
                          + *((unsigned __int16 *)v151 + 29)
                          + *(unsigned int *)((char *)v806 + *((unsigned __int16 *)v151 + 29)));
    v153 = *v152;
    if ((_DWORD)v153)
    {
      v154 = v152 + 1;
      do
      {
        v156 = *v154++;
        v155 = v156;
        if (!(v156 >> 20))
          *(_QWORD *)(v7 + 928) |= 1 << v155;
        --v153;
      }
      while (v153);
    }
  }
  if (v142 < 0x57)
  {
LABEL_263:
    LODWORD(v157) = 0;
  }
  else
  {
    v157 = *((unsigned __int16 *)v151 + 43);
    if (*((_WORD *)v151 + 43))
      LODWORD(v157) = *(int *)((char *)v806 + v157);
  }
  *(_DWORD *)(v7 + 300) = v157;
  v158 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v158 >= 0x21u && (v159 = v158[16]) != 0)
    v160 = *(int *)((char *)v806 + v159);
  else
    v160 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(v7 + 304) = getAdditionalSpillBufferBytes(void)::extra + v160;
  v162 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v162 < 0x59u)
  {
    LODWORD(v163) = 0;
    v164 = v796;
  }
  else
  {
    v163 = v162[44];
    v164 = v796;
    if (v163)
      LODWORD(v163) = *(int *)((char *)v806 + v163);
  }
  *(_DWORD *)(v7 + 332) = v163;
  v165 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v165 < 0x51u)
  {
    LODWORD(v166) = 0;
  }
  else
  {
    v166 = v165[40];
    if (v166)
      LODWORD(v166) = *(int *)((char *)v806 + v166);
  }
  *(_DWORD *)(v7 + 336) = v166;
  v167 = (unsigned __int16 *)((char *)v806 - *v806);
  if (*v167 < 0x4Bu)
  {
    LODWORD(v168) = 0;
  }
  else
  {
    v168 = v167[37];
    if (v168)
      LODWORD(v168) = *(int *)((char *)v806 + v168);
  }
  *(_DWORD *)(v7 + 344) = v168;
  v169 = *v806;
  v170 = (_WORD *)((char *)v806 - v169);
  v171 = *(unsigned __int16 *)((char *)v806 - v169);
  if (v171 < 0x25)
    goto LABEL_291;
  if (v170[18] && *((_BYTE *)v806 + (unsigned __int16)v170[18]))
  {
    if (v171 < 0x27)
    {
      v175 = 0;
      v173 = 1;
      goto LABEL_293;
    }
    LODWORD(v172) = (unsigned __int16)v170[19];
    v173 = 1;
    if (!v170[19])
      goto LABEL_292;
    goto LABEL_1094;
  }
  if (v171 < 0x27)
  {
LABEL_291:
    v173 = 0;
    goto LABEL_292;
  }
  v172 = (unsigned __int16)v170[19];
  if (!v170[19] || (v174 = *((unsigned __int8 *)v806 + v172), !*((_BYTE *)v806 + v172)))
  {
    if (v171 >= 0x29 && v170[20])
    {
      v173 = *((_BYTE *)v806 + (unsigned __int16)v170[20]) != 0;
      if (!v170[19])
        goto LABEL_292;
      goto LABEL_1094;
    }
    v173 = 0;
    if (v170[19])
    {
LABEL_1094:
      v174 = *((unsigned __int8 *)v806 + v172);
      goto LABEL_1095;
    }
LABEL_292:
    v175 = 0;
    goto LABEL_293;
  }
  v173 = 1;
LABEL_1095:
  v175 = v174 != 0;
LABEL_293:
  *(_BYTE *)(v7 + 354) = v175;
  v176 = (unsigned __int16 *)((char *)v164 - *v164);
  v177 = *v176;
  if (v177 < 0x21)
  {
    v179 = 0;
    LODWORD(v178) = 0;
  }
  else
  {
    v178 = v176[16];
    if (v176[16])
      LODWORD(v178) = *(int *)((char *)v164 + v178);
    if (v177 < 0x4D)
    {
      v179 = 0;
    }
    else
    {
      v179 = v176[38];
      if (v176[38])
        v179 = *(unsigned int *)((char *)v164 + v179);
    }
  }
  *(_QWORD *)(v7 + 384) = v178 | (unint64_t)(v179 << 32);
  *(_BYTE *)(v7 + 358) = v173 || v175;
  if (v171 < 0x37)
  {
    LOBYTE(v180) = 0;
  }
  else
  {
    v180 = (unsigned __int16)v170[27];
    if (v170[27])
      LOBYTE(v180) = *((_BYTE *)v806 + v180) != 0;
  }
  *(_BYTE *)(v7 + 353) = v180;
  if (v177 < 0x33)
  {
    LOBYTE(v181) = 0;
  }
  else
  {
    v181 = v176[25];
    if (v176[25])
      LOBYTE(v181) = *((_BYTE *)v164 + v181) != 0;
  }
  v182 = -v169;
  *(_BYTE *)(v7 + 359) = v181;
  if (v171 < 0x3F)
  {
    LOBYTE(v183) = 0;
  }
  else
  {
    v183 = (unsigned __int16)v170[31];
    if (v183)
    {
      v184 = (unsigned int *)((char *)v806 + v183 + *(unsigned int *)((char *)v806 + v183));
      v183 = *v184;
      if ((_DWORD)v183)
      {
        v185 = v184 + 1;
        while (1)
        {
          v187 = *v185++;
          v186 = v187;
          if (v187 < 0x36 && ((0x3F000000000777uLL >> v186) & 1) != 0)
            break;
          if (!--v183)
            goto LABEL_318;
        }
        LOBYTE(v183) = 1;
      }
    }
  }
LABEL_318:
  *(_BYTE *)(v7 + 361) = v183;
  if (v177 <= 0x14)
  {
    *(_BYTE *)(v7 + 355) = 0;
    *(_BYTE *)(v7 + 1017) = 0;
    *(_BYTE *)(v7 + 1019) = 0;
    if (v171 >= 0x21)
      goto LABEL_353;
LABEL_356:
    v209 = 0;
    goto LABEL_357;
  }
  v188 = v176[10];
  if (v176[10])
    LOBYTE(v188) = *((_BYTE *)v164 + v188) != 0;
  *(_BYTE *)(v7 + 355) = v188;
  if (v177 < 0x25)
  {
    *(_BYTE *)(v7 + 1017) = 0;
    if (v177 < 0x23)
    {
LABEL_351:
      *(_BYTE *)(v7 + 1019) = 0;
LABEL_352:
      if (v171 < 0x21)
        goto LABEL_356;
      goto LABEL_353;
    }
  }
  else
  {
    v189 = v176[18];
    if (v176[18])
      LOBYTE(v189) = *((_BYTE *)v164 + v189) != 0;
    *(_BYTE *)(v7 + 1017) = v189;
  }
  v190 = v176[17];
  if (!v190)
    goto LABEL_351;
  *(_BYTE *)(v7 + 1019) = 1;
  v191 = (unsigned int *)((char *)v164 + v190);
  v192 = *v191;
  v194 = (unsigned int *)((char *)v191 + v192 + 4);
  v193 = *(unsigned int *)((char *)v191 + v192);
  if (!(_DWORD)v193)
    goto LABEL_352;
  v195 = &v194[v193];
  do
  {
    v196 = (int *)((char *)v194 + *v194);
    v197 = (unsigned __int16 *)((char *)v196 - *v196);
    v198 = *v197;
    if (v198 < 7)
    {
      v199 = 0;
      v201 = 0;
      if (v198 < 5)
        goto LABEL_340;
      v200 = v197[2];
      if (v200)
        goto LABEL_339;
    }
    else if (v197[3])
    {
      v199 = *(int *)((char *)v196 + v197[3]);
      v200 = v197[2];
      if (v200)
        goto LABEL_339;
    }
    else
    {
      v199 = 0;
      v200 = v197[2];
      if (v200)
      {
LABEL_339:
        v201 = *(int *)((char *)v196 + v200);
        goto LABEL_340;
      }
    }
    v201 = 0;
LABEL_340:
    v202 = v812;
    while (1)
    {
      v203 = *v202;
      v204 = v202;
      if (!*v202)
        break;
      while (1)
      {
        v202 = (uint64_t **)v203;
        v205 = *((_DWORD *)v203 + 7);
        if (v201 < v205)
          break;
        if (v205 >= v201)
        {
          v206 = v202;
          goto LABEL_332;
        }
        v203 = v202[1];
        if (!v203)
        {
          v204 = v202 + 1;
          goto LABEL_346;
        }
      }
    }
LABEL_346:
    v206 = operator new(0x28uLL);
    v206[7] = v201;
    v206[8] = 0;
    *(_QWORD *)v206 = 0;
    *((_QWORD *)v206 + 1) = 0;
    *((_QWORD *)v206 + 2) = v202;
    *v204 = (uint64_t *)v206;
    v207 = **(_QWORD **)(v7 + 1024);
    v208 = (uint64_t *)v206;
    if (v207)
    {
      *(_QWORD *)(v7 + 1024) = v207;
      v208 = *v204;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 1032), v208);
    ++*(_QWORD *)(v7 + 1040);
LABEL_332:
    v206[8] = v199;
    ++v194;
  }
  while (v194 != v195);
  v139 = v806;
  v210 = *v806;
  v182 = -v210;
  if (*(unsigned __int16 *)((char *)v806 - v210) < 0x21u)
    goto LABEL_356;
LABEL_353:
  if (!*(_WORD *)((char *)v139 + v182 + 32))
    goto LABEL_356;
  v209 = *(int *)((char *)v139 + *(unsigned __int16 *)((char *)v139 + v182 + 32));
LABEL_357:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  v212 = getAdditionalSpillBufferBytes(void)::extra + v209;
  *(_DWORD *)(v7 + 296) = getAdditionalSpillBufferBytes(void)::extra + v209;
  v213 = (unsigned __int16 *)((char *)v139 - *v139);
  if (*v213 < 0x43u)
  {
    LODWORD(v214) = 0;
    v215 = v796;
  }
  else
  {
    v214 = v213[33];
    v215 = v796;
    if (v214)
      LODWORD(v214) = *(int *)((char *)v139 + v214);
  }
  *(_DWORD *)(v7 + 308) = v214;
  v216 = (unsigned __int16 *)((char *)v139 - *v139);
  if (*v216 < 5u)
  {
    LODWORD(v217) = 0;
  }
  else
  {
    v217 = v216[2];
    if (v217)
      LODWORD(v217) = *(int *)((char *)v139 + v217);
  }
  *(_DWORD *)(v7 + 292) = v217;
  v218 = (unsigned __int16 *)((char *)v139 - *v139);
  if (*v218 < 0x51u)
  {
    LODWORD(v219) = 0;
  }
  else
  {
    v219 = v218[40];
    if (v219)
      LODWORD(v219) = *(int *)((char *)v139 + v219);
  }
  *(_DWORD *)(v7 + 328) = v219;
  v220 = (unsigned __int16 *)((char *)v139 - *v139);
  if (*v220 < 0x4Fu)
  {
    LODWORD(v221) = 0;
  }
  else
  {
    v221 = v220[39];
    if (v221)
      LODWORD(v221) = *(int *)((char *)v139 + v221);
  }
  *(_DWORD *)(v7 + 340) = v221;
  *(_DWORD *)(v7 + 348) = *(_DWORD *)(v5 + 428);
  v222 = (unsigned __int16 *)((char *)v139 - *v139);
  if (*(int *)((char *)v139 + v222[6] + *(unsigned int *)((char *)v139 + v222[6])) | v212)
    v223 = 1;
  else
    v223 = v173;
  if ((v223 & 1) != 0)
  {
    LOBYTE(v224) = 1;
    goto LABEL_392;
  }
  v225 = *v222;
  if (v225 < 0x21)
  {
    v226 = 0;
    goto LABEL_384;
  }
  if (!v222[16])
  {
    v226 = 0;
    if (v225 >= 0x43)
      goto LABEL_1084;
    goto LABEL_384;
  }
  v226 = *(int *)((char *)v139 + v222[16]);
  if (v225 < 0x43)
  {
LABEL_384:
    v227 = 0;
    goto LABEL_385;
  }
LABEL_1084:
  if (!v222[33])
    goto LABEL_384;
  v227 = *(int *)((char *)v139 + v222[33]);
LABEL_385:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  if (v227 + v226 + getAdditionalSpillBufferBytes(void)::extra)
  {
    LOBYTE(v224) = 1;
    v215 = v796;
  }
  else
  {
    v229 = (unsigned __int16 *)((char *)v139 - *v139);
    v215 = v796;
    if (*v229 < 0x5Fu)
    {
      LOBYTE(v224) = 0;
    }
    else
    {
      v224 = v229[47];
      if (v224)
        LOBYTE(v224) = *((_BYTE *)v139 + v224) != 0;
    }
  }
LABEL_392:
  *(_BYTE *)(v7 + 352) = v224;
  v230 = (unsigned __int16 *)((char *)v215 - *v215);
  if (*v230 < 0x11u)
  {
    LODWORD(v231) = 0;
  }
  else
  {
    v231 = v230[8];
    if (v231)
      LODWORD(v231) = *(int *)((char *)v215 + v231);
  }
  *(_DWORD *)(v7 + 840) = v231;
  if ((v232 & 1) == 0
  {
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
  }
  v233 = (_OWORD *)(v7 + 696);
  v234 = (const void **)(v809 + 3);
  if (v809[3])
  {
    if (v809[4])
      v235 = v809 + 3;
    else
      v235 = v809 + 73;
  }
  else
  {
    v235 = v809 + 73;
  }
  AGX::Heap<true>::allocateImpl(__dst, a2 + 4680, v235[1]+ AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::ProgramVariant(AGX::G9::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes> const&,AGX::G9::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (_QWORD *)(v7 + 896));
  *(_DWORD *)(v7 + 920) += *(_DWORD *)&__dst[16];
  v236 = *(_OWORD *)&__dst[16];
  *v233 = *(_OWORD *)__dst;
  *(_OWORD *)(v7 + 712) = v236;
  *(_OWORD *)(v7 + 721) = *(_OWORD *)&__dst[25];
  *(_QWORD *)(v7 + 488) = *(_QWORD *)(v7 + 696);
  v800 = a2 + 4680;
  *(_QWORD *)(v7 + 520) = a2 + 4680;
  v237 = *(_OWORD *)(v7 + 712);
  *(_OWORD *)(v7 + 528) = *v233;
  *(_OWORD *)(v7 + 544) = v237;
  *(_OWORD *)(v7 + 553) = *(_OWORD *)(v7 + 721);
  if (*v234)
  {
    v238 = v809;
    v239 = v809[4];
    if (v239)
      v240 = *v234;
    else
      v240 = (const void *)v809[73];
    if (v239)
      v241 = v809 + 3;
    else
      v241 = v809 + 73;
  }
  else
  {
    v238 = v809;
    v241 = v809 + 73;
    v240 = (const void *)v809[73];
  }
  v242 = v811;
  v805 = a2 + 4512;
  memcpy(*(void **)(v7 + 704), v240, v241[1]);
  v243 = *(_QWORD *)(v7 + 704);
  v244 = *(_QWORD *)(v7 + 712);
  *(_QWORD *)(v7 + 496) = *(_QWORD *)(v7 + 488);
  *(_QWORD *)(v7 + 504) = v243;
  *(_QWORD *)(v7 + 512) = v244;
  v245 = (const void **)(v238 + 8);
  if (v238[8])
  {
    if (v238[9])
      v246 = v238 + 8;
    else
      v246 = v238 + 78;
    v247 = v246[1];
    if (!v247)
      goto LABEL_426;
  }
  else
  {
    v247 = v238[79];
    if (!v247)
      goto LABEL_426;
  }
  AGX::Heap<true>::allocateImpl(__dst, v805, v247, (_QWORD *)(v7 + 904));
  *(_DWORD *)(v7 + 920) += *(_DWORD *)&__dst[16];
  v248 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(v7 + 744) = *(_OWORD *)__dst;
  *(_OWORD *)(v7 + 760) = v248;
  *(_OWORD *)(v7 + 769) = *(_OWORD *)&__dst[25];
  v249 = *(_OWORD *)(v7 + 760);
  *(_OWORD *)(v7 + 576) = *(_OWORD *)(v7 + 744);
  *(_OWORD *)(v7 + 592) = v249;
  *(_OWORD *)(v7 + 601) = *(_OWORD *)(v7 + 769);
  if (*v245)
  {
    v250 = v238[9];
    if (v250)
      v251 = *v245;
    else
      v251 = (const void *)v238[78];
    if (v250)
      v252 = v238 + 8;
    else
      v252 = v238 + 78;
  }
  else
  {
    v252 = v238 + 78;
    v251 = (const void *)v238[78];
  }
  memcpy(*(void **)(v7 + 752), v251, v252[1]);
LABEL_426:
  v253 = (const void **)(v238 + 13);
  if (v238[13])
  {
    if (v238[14])
      v254 = v238 + 13;
    else
      v254 = v238 + 83;
    v255 = v254[1];
    if (v255)
      goto LABEL_431;
LABEL_439:
    if (!*(_BYTE *)(v7 + 480))
      goto LABEL_443;
LABEL_444:
    {
      {
        v263 = v794;
        if (*(char *)(v7 + 431) < 0)
          v263 = (_QWORD *)*v794;
        v264 = v792;
        if (*(char *)(v7 + 479) < 0)
          v264 = (std::string *)v792->__r_.__value_.__r.__words[0];
        v265 = v793;
        if (*(char *)(v7 + 455) < 0)
          v265 = (_QWORD *)*v793;
        v266 = *(_DWORD *)(v7 + 392);
        v267 = *(_QWORD *)(v7 + 488);
        v268 = *(_QWORD *)(v7 + 712);
        *(_DWORD *)__dst = 136447490;
        *(_QWORD *)&__dst[4] = v263;
        *(_WORD *)&__dst[12] = 2082;
        *(_QWORD *)&__dst[14] = v264;
        *(_WORD *)&__dst[22] = 2082;
        *(_QWORD *)&__dst[24] = v265;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v266;
        *(_WORD *)&__dst[38] = 2050;
        *(_QWORD *)&__dst[40] = v267;
        v820 = 2050;
        v821 = v268;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v262, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    v269 = *(_QWORD *)(v7 + 8);
    v270 = v794;
    if (*(char *)(v7 + 431) < 0)
      v270 = (_QWORD *)*v794;
    v271 = v792;
    if (*(char *)(v7 + 479) < 0)
      v271 = (std::string *)v792->__r_.__value_.__r.__words[0];
    v272 = v793;
    if (*(char *)(v7 + 455) < 0)
      v272 = (_QWORD *)*v793;
    v273 = *(_DWORD *)(v7 + 392);
    v274 = *(_QWORD *)(v7 + 488);
    v275 = *(_QWORD *)(v7 + 712);
    v276 = *(_BYTE *)(v7 + 480);
    *(_QWORD *)__dst = v270;
    *(_QWORD *)&__dst[8] = v271;
    *(_QWORD *)&__dst[16] = v272;
    *(_DWORD *)&__dst[24] = v273;
    *(_QWORD *)&__dst[32] = v274;
    *(_QWORD *)&__dst[40] = v275;
    LOBYTE(v820) = v276;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v269, v7, (__int128 *)__dst);
  }
  else
  {
    v255 = v238[84];
    if (!v255)
      goto LABEL_439;
LABEL_431:
    AGX::Heap<true>::allocateImpl(__dst, v805, v255, (_QWORD *)(v7 + 912));
    *(_DWORD *)(v7 + 920) += *(_DWORD *)&__dst[16];
    v256 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(v7 + 792) = *(_OWORD *)__dst;
    *(_OWORD *)(v7 + 808) = v256;
    *(_OWORD *)(v7 + 817) = *(_OWORD *)&__dst[25];
    v257 = *(_OWORD *)(v7 + 808);
    *(_OWORD *)(v7 + 624) = *(_OWORD *)(v7 + 792);
    *(_OWORD *)(v7 + 640) = v257;
    *(_OWORD *)(v7 + 649) = *(_OWORD *)(v7 + 817);
    if (*v253)
    {
      v258 = v238[14];
      if (v258)
        v259 = *v253;
      else
        v259 = (const void *)v238[83];
      if (v258)
        v260 = v238 + 13;
      else
        v260 = v238 + 83;
    }
    else
    {
      v260 = v238 + 83;
      v259 = (const void *)v238[83];
    }
    memcpy(*(void **)(v7 + 800), v259, v260[1]);
    v261 = *(_QWORD *)(v7 + 808);
    *(_OWORD *)(v7 + 672) = *(_OWORD *)(v7 + 792);
    *(_QWORD *)(v7 + 688) = v261;
    if (*(_BYTE *)(v7 + 480))
      goto LABEL_444;
LABEL_443:
    if (*(_BYTE *)(*(_QWORD *)(v7 + 8) + 6681))
      goto LABEL_444;
  }
  v277 = *(_DWORD *)(v5 + 124);
  v278 = *(_DWORD *)(v5 + 132);
  v279 = *(_DWORD *)(v5 + 144);
  if (*(_BYTE *)(v5 + 184))
    v280 = *(_DWORD *)(v5 + 144);
  else
    v280 = 0;
  v281 = *(_DWORD *)(v5 + 140);
  if (!*(_QWORD *)(v5 + 168))
    v279 = 0;
  v282 = *(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128) + *(_DWORD *)(v5 + 136);
  v283 = v280 + *(_DWORD *)(v5 + 148) + v279 + *(_DWORD *)(v5 + 152) + ((v277 + v278 + v281 - v282 + 1) & 0xFFFFFFFE);
  v284 = *(_QWORD *)(v7 + 48);
  v285 = (*(_QWORD *)(v7 + 56) - v284) >> 2;
  if (v283 <= v285)
  {
    if (v283 < v285)
      *(_QWORD *)(v7 + 56) = v284 + 4 * v283;
  }
  else
  {
    std::vector<unsigned int>::__append(v811, v283 - v285);
    v277 = *(_DWORD *)(v5 + 124);
    v278 = *(_DWORD *)(v5 + 132);
    v281 = *(_DWORD *)(v5 + 140);
    v282 = *(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128) + *(_DWORD *)(v5 + 136);
  }
  *(_DWORD *)(v7 + 312) = v277 + v278 + v281 - v282;
  v286 = *v806;
  v287 = *(unsigned __int16 *)((char *)v806 - v286 + 16);
  v288 = *(unsigned int *)((char *)v806 + v287);
  v289 = *(unsigned int *)((char *)v806 + v287 + v288);
  if ((_DWORD)v289)
  {
    v290 = 4 * v289;
    v291 = v287 + v288;
    while (1)
    {
      v293 = *(unsigned int *)((char *)v806 + v291 + 4);
      v294 = (char *)v806 + v291 + v293;
      v295 = v293 - *((int *)v294 + 1);
      v296 = (char *)v806 + v291 + v295;
      v297 = *((unsigned __int16 *)v296 + 2);
      if (v297 < 7)
        goto LABEL_482;
      v298 = *((unsigned __int16 *)v296 + 5);
      if (!v298 || (*(int *)((char *)v806 + v291 + v293 + v298 + 4) & 0x80000000) == 0)
        break;
LABEL_474:
      v291 += 4;
      v290 -= 4;
      if (!v290)
      {
        v286 = *v806;
        goto LABEL_489;
      }
    }
    if (v297 < 9)
    {
LABEL_482:
      v300 = 0;
    }
    else
    {
      v299 = *(unsigned __int16 *)((char *)v806 + v291 + v295 + 12);
      if (v299)
        LODWORD(v299) = *(int *)((char *)v806 + v291 + v293 + v299 + 4);
      v300 = (v299 >> 1) & 0x1FFFFFFF;
    }
    v301 = v300 - *(_DWORD *)(v5 + 120);
    begin = v811->__begin_;
    v811->__begin_[v301] = -1;
    begin[v301 + 1] = 0;
    begin[v301 + 2] = 1;
    v303 = v293 - *((int *)v294 + 1);
    if (*(unsigned __int16 *)((char *)v806 + v291 + v303 + 4) >= 0xBu
      && *(_WORD *)((char *)v806 + v291 + v303 + 14)
      && *((_BYTE *)v806 + v291 + v293 + *(unsigned __int16 *)((char *)v806 + v291 + v303 + 14) + 4))
    {
      v304 = *(unsigned __int16 *)((char *)v806 + v291 + v303 + 10);
      if (v304)
        v292 = *(int *)((char *)v806 + v291 + v293 + v304 + 4);
      else
        LOBYTE(v292) = 0;
      *(_QWORD *)(v7 + 376) |= 1 << v292;
    }
    goto LABEL_474;
  }
LABEL_489:
  v305 = -v286;
  v306 = (char *)v806 + v305;
  if (*(_BYTE *)(v7 + 354))
  {
    v307 = *((unsigned __int16 *)v306 + 12);
    v308 = *(unsigned int *)((char *)v806 + v307);
    v309 = (unsigned int *)((char *)v806 + v307 + v308);
    v310 = *v309;
    if ((_DWORD)v310)
    {
      v311 = 0;
      v312 = 4 * v310;
      v313 = (char *)v806 + v307 + v308;
      while (1)
      {
        v314 = v309[v311 / 4 + 1];
        v315 = v314 - *(int *)((char *)&v309[v311 / 4 + 1] + v314);
        v316 = &v313[v311 + v315];
        v317 = *((unsigned __int16 *)v316 + 2);
        if (v317 >= 5)
        {
          v318 = *((unsigned __int16 *)v316 + 4);
          if (v318)
          {
            if (v313[v311 + 4 + v314 + v318] == 93)
            {
              if (v317 < 7)
                break;
              v319 = *(unsigned __int16 *)&v313[v311 + 10 + v315];
              if (!v319)
                break;
              v320 = *(_DWORD *)&v313[v311 + 4 + v314 + v319];
              if ((v320 & 0x80000000) == 0 && (v320 & 0xFFF00000) != 0x400000)
                break;
            }
          }
        }
        v311 += 4;
        if (v312 == v311)
          goto LABEL_501;
      }
      *(_QWORD *)(v7 + 376) |= *(_QWORD *)(v7 + 384);
    }
  }
LABEL_501:
  v321 = *((unsigned __int16 *)v306 + 10);
  v322 = *(unsigned int *)((char *)v806 + v321);
  v323 = *(unsigned int *)((char *)v806 + v321 + v322);
  if (!(_DWORD)v323)
    goto LABEL_513;
  v324 = 4 * v323;
  v325 = v321 + v322;
  while (2)
  {
    v327 = *(unsigned int *)((char *)v806 + v325 + 4);
    v328 = v327 - *(int *)((char *)v806 + v325 + v327 + 4);
    v329 = (char *)v806 + v325 + v328;
    v330 = *((unsigned __int16 *)v329 + 2);
    if (v330 < 7)
      goto LABEL_503;
    v331 = *((unsigned __int16 *)v329 + 5);
    if (v331 && *(int *)((char *)v806 + v325 + v327 + v331 + 4) < 0)
      goto LABEL_505;
    if (v330 < 9 || (v332 = *(unsigned __int16 *)((char *)v806 + v325 + v328 + 12)) == 0)
    {
LABEL_503:
      v326 = 0;
      goto LABEL_504;
    }
    v326 = *(int *)((char *)v806 + v325 + v327 + v332 + 4);
LABEL_504:
    v811->__begin_[((v326 >> 1) & 0x1FFFFFFF) + *(_DWORD *)(v5 + 124) - (*(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128))] = -1;
LABEL_505:
    v325 += 4;
    v324 -= 4;
    if (v324)
      continue;
    break;
  }
  v305 = -(uint64_t)*v806;
LABEL_513:
  v333 = (unsigned int *)((char *)v806 + *(unsigned __int16 *)((char *)v806 + v305 + 12));
  v334 = *v333;
  v336 = (unsigned int *)((char *)v333 + v334 + 4);
  v335 = *(unsigned int *)((char *)v333 + v334);
  if ((_DWORD)v335)
  {
    v337 = &v336[v335];
    while (1)
    {
      v338 = (int *)((char *)v336 + *v336);
      v339 = (unsigned __int16 *)((char *)v338 - *v338);
      v340 = *v339;
      if (v340 < 7)
        break;
      if (!v339[3] || (*(int *)((char *)v338 + v339[3]) & 0x80000000) == 0)
      {
        if (v340 < 9)
        {
          LODWORD(v341) = 0;
          goto LABEL_526;
        }
        v341 = v339[4];
        if (v339[4])
        {
          LODWORD(v341) = *(int *)((char *)v338 + v341);
LABEL_526:
          v342 = v339[3];
          if (v342)
            LODWORD(v342) = *(int *)((char *)v338 + v342);
          goto LABEL_530;
        }
LABEL_525:
        if (v340 >= 7)
          goto LABEL_526;
        LODWORD(v342) = 0;
LABEL_530:
        v343 = ((v341 >> 1) & 0x1FFFFFFF)
             + *(_DWORD *)(v5 + 124)
             + *(_DWORD *)(v5 + 132)
             - (*(_DWORD *)(v5 + 120)
              + *(_DWORD *)(v5 + 128)
              + *(_DWORD *)(v5 + 136));
        v242->__begin_[v343] = 0;
        v344 = (unsigned __int16 *)((char *)v338 - *v338);
        if (*v344 >= 0xBu)
        {
          v345 = v344[5];
          if (v345)
          {
            if (*((_BYTE *)v338 + v345))
              *v798 |= 1 << v342;
          }
        }
        if (*(_BYTE *)(v7 + 1019))
        {
          v346 = *v812;
          if (!*v812)
LABEL_1096:
            abort();
          v347 = (2 * v343) | 1;
          v348 = v342 & 0xFFFFF;
          while (1)
          {
            while (1)
            {
              v349 = *((_DWORD *)v346 + 7);
              if (v348 >= v349)
                break;
              v346 = (uint64_t *)*v346;
              if (!v346)
                goto LABEL_1096;
            }
            if (v349 >= v348)
              break;
            v346 = (uint64_t *)v346[1];
            if (!v346)
              goto LABEL_1096;
          }
          v350 = *((_DWORD *)v346 + 8);
          v351 = v810;
          while (1)
          {
            v352 = *v351;
            v353 = v351;
            if (!*v351)
              break;
            while (1)
            {
              v351 = (uint64_t **)v352;
              v354 = *((_DWORD *)v352 + 7);
              if (v347 < v354)
                break;
              if (v354 >= v347)
              {
                v355 = v351;
                goto LABEL_516;
              }
              v352 = v351[1];
              if (!v352)
              {
                v353 = v351 + 1;
                goto LABEL_548;
              }
            }
          }
LABEL_548:
          v355 = operator new(0x28uLL);
          v355[7] = v347;
          v355[8] = 0;
          *(_QWORD *)v355 = 0;
          *((_QWORD *)v355 + 1) = 0;
          *((_QWORD *)v355 + 2) = v351;
          *v353 = (uint64_t *)v355;
          v356 = **(_QWORD **)(v7 + 264);
          v357 = (uint64_t *)v355;
          if (v356)
          {
            *(_QWORD *)(v7 + 264) = v356;
            v357 = *v353;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 272), v357);
          ++*(_QWORD *)(v7 + 280);
LABEL_516:
          v355[8] = v350;
          v242 = v811;
        }
      }
      if (++v336 == v337)
        goto LABEL_551;
    }
    LODWORD(v341) = 0;
    goto LABEL_525;
  }
LABEL_551:
  v358 = *(_QWORD *)(v5 + 160);
  v359 = v796;
  if (v358)
  {
    v360 = *(_DWORD *)(v5 + 144);
    if (!*(_BYTE *)(v5 + 184))
    {
      v364 = 0;
      goto LABEL_558;
    }
    if (v360)
    {
      v361 = (*(_DWORD *)(v5 + 124)
            + *(_DWORD *)(v5 + 132)
            + *(_DWORD *)(v5 + 140)
            - (*(_DWORD *)(v5 + 120)
             + *(_DWORD *)(v5 + 128)
             + *(_DWORD *)(v5 + 136))
            + 1) & 0xFFFFFFFE;
      v362 = v242->__begin_;
      v363 = *(_QWORD *)(v5 + 160);
      do
      {
        v362[v361] = -1;
        v362[v361 + 1] = 0;
        v362[v361 + 2] = 1;
        v361 += 4;
        v363 &= v363 - 1;
      }
      while (v363);
      v360 = *(_DWORD *)(v5 + 144);
      v364 = v360;
LABEL_558:
      v365 = *(_QWORD *)(v5 + 168);
      if (v365)
        v366 = v360 == 0;
      else
        v366 = 1;
      if (!v366)
      {
        v367 = ((*(_DWORD *)(v5 + 140)
               + *(_DWORD *)(v5 + 132)
               - (*(_DWORD *)(v5 + 136)
                + *(_DWORD *)(v5 + 128)
                + *(_DWORD *)(v5 + 120))
               + *(_DWORD *)(v5 + 124)
               + 1) & 0xFFFFFFFE)
             + v364;
        v368 = v242->__begin_;
        do
        {
          v368[v367] = -1;
          v368[v367 + 1] = 0;
          v368[v367 + 2] = 1;
          v367 += 4;
          v358 &= v358 - 1;
        }
        while (v358);
      }
    }
    else
    {
      v365 = *(_QWORD *)(v5 + 168);
    }
    *(_QWORD *)(v7 + 376) |= v365;
  }
  if (*(_DWORD *)(v5 + 148))
  {
    v369 = *(_QWORD *)(v5 + 176);
    if (v369)
    {
      if (*(_BYTE *)(v5 + 184))
        v370 = *(_DWORD *)(v5 + 144);
      else
        v370 = 0;
      if (*(_QWORD *)(v5 + 168))
        v371 = *(_DWORD *)(v5 + 144);
      else
        v371 = 0;
      v372 = v370
           + v371
           + ((*(_DWORD *)(v5 + 124)
             + *(_DWORD *)(v5 + 132)
             + *(_DWORD *)(v5 + 140)
             - (*(_DWORD *)(v5 + 120)
              + *(_DWORD *)(v5 + 128)
              + *(_DWORD *)(v5 + 136))
             + 1) & 0xFFFFFFFE);
      v373 = v242->__begin_;
      do
      {
        v373[v372++] = -1;
        v369 &= v369 - 1;
      }
      while (v369);
    }
  }
  v374 = *v806;
  if (*(_BYTE *)(v5 + 427))
  {
    v375 = (unsigned __int16 *)((char *)v806 - v374);
    if (*v375 < 0x67u)
    {
      v376 = 0;
    }
    else
    {
      v376 = v375[51];
      if (v376)
        v376 = *(_QWORD *)((char *)v806 + v376);
    }
    v377 = 128 - 2 * __clz(v376);
    if (*(_DWORD *)(v7 + 208) > v377)
      v377 = *(_DWORD *)(v7 + 208);
    *(_DWORD *)(v7 + 208) = v377;
    v378 = (unsigned __int16 *)((char *)v806 - *v806);
    if (*v378 < 0x17u)
    {
      LODWORD(v379) = 0;
    }
    else
    {
      v379 = v378[11];
      if (v379)
        v379 = ((unint64_t)*(unsigned int *)((char *)v806 + v379) + 3) >> 2;
    }
    *(_DWORD *)(v7 + 200) = v379;
    *(_DWORD *)(v7 + 204) = 0;
    v374 = *v806;
  }
  v380 = (unsigned __int16 *)((char *)v806 - v374);
  if (*v380 >= 0x17u && (v381 = v380[11]) != 0)
  {
    v382 = ((unint64_t)*(unsigned int *)((char *)v806 + v381) + 3) >> 2;
    v383 = (_QWORD *)(v7 + 80);
    v384 = *(_QWORD *)(v7 + 72);
    v385 = (*(_QWORD *)(v7 + 80) - v384) >> 2;
    if (v382 > v385)
    {
      std::vector<unsigned int>::__append(v786, v382 - v385);
      goto LABEL_596;
    }
  }
  else
  {
    v382 = 0;
    v383 = (_QWORD *)(v7 + 80);
    v384 = *(_QWORD *)(v7 + 72);
    v385 = (*(_QWORD *)(v7 + 80) - v384) >> 2;
  }
  if (v385 > v382)
    *v383 = v384 + 4 * v382;
LABEL_596:
  if (v790 != (_QWORD *)(v5 + 192))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v790, *(char **)(v5 + 192), *(char **)(v5 + 200), (uint64_t)(*(_QWORD *)(v5 + 200) - *(_QWORD *)(v5 + 192)) >> 2);
  if (v789 != (_QWORD *)(v5 + 216))
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v789, *(char **)(v5 + 216), *(char **)(v5 + 224), (uint64_t)(*(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216)) >> 2);
  if (v788 != (_QWORD *)(v5 + 296))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v788, *(char **)(v5 + 296), *(char **)(v5 + 304), (uint64_t)(*(_QWORD *)(v5 + 304) - *(_QWORD *)(v5 + 296)) >> 1);
  if (v787 != (_QWORD *)(v5 + 344))
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v787, *(char **)(v5 + 344), *(char **)(v5 + 352), (uint64_t)(*(_QWORD *)(v5 + 352) - *(_QWORD *)(v5 + 344)) >> 1);
  *(_BYTE *)(v7 + 192) = *(_BYTE *)(v5 + 392);
  *(_BYTE *)(v7 + 356) = *(_QWORD *)(v5 + 160) != 0;
  *(_BYTE *)(v7 + 357) = *(_QWORD *)(v5 + 148) != 0;
  v386 = *(unsigned __int16 *)((char *)v806 - *v806 + 24);
  v387 = *(unsigned int *)((char *)v806 + v386);
  v388 = (unsigned int *)((char *)v806 + v386 + v387);
  v389 = *v388;
  if ((_DWORD)v389)
  {
    v390 = 0;
    v391 = 4 * v389;
    v392 = (char *)v806 + v386 + v387;
    do
    {
      v393 = v388[v390 / 4 + 1];
      v394 = v393 - *(int *)((char *)&v388[v390 / 4 + 1] + v393);
      v395 = &v392[v390 + v394];
      v396 = *((unsigned __int16 *)v395 + 2);
      if (v396 >= 5)
      {
        v397 = *((unsigned __int16 *)v395 + 4);
        if (v397)
        {
          if (v396 >= 7 && v392[v390 + 4 + v393 + v397] == 139)
          {
            if (*(_WORD *)&v392[v390 + 10 + v394])
            {
              v398 = *(_DWORD *)&v392[v390 + 4 + v393 + *(unsigned __int16 *)&v392[v390 + 10 + v394]];
              if (v396 >= 0xB)
                goto LABEL_615;
            }
            else
            {
              LOBYTE(v398) = 0;
              if (v396 >= 0xB)
              {
LABEL_615:
                v399 = *(unsigned __int16 *)&v392[v390 + 14 + v394];
                if (v399 && v392[v390 + 4 + v393 + v399])
                  *v798 |= 1 << v398;
              }
            }
          }
        }
      }
      v390 += 4;
    }
    while (v391 != v390);
  }
  v400 = (unsigned __int16 *)((char *)v796 - *v796);
  if (*v400 >= 0xDu)
  {
    v401 = v400[6];
    if (v401)
    {
      v402 = (int *)((char *)v796 + v401 + *(unsigned int *)((char *)v796 + v401));
      v403 = *v402;
      v404 = *(_BYTE **)(v7 + 944);
      if (v403 > (uint64_t)(*(_QWORD *)(v7 + 960) - (_QWORD)v404) >> 4)
      {
        v405 = *(_BYTE **)(v7 + 952);
        v406 = (char *)operator new(16 * v403);
        v407 = &v406[(v405 - v404) & 0xFFFFFFFFFFFFFFF0];
        v408 = v407;
        if (v405 != v404)
        {
          v409 = &v406[(v405 - v404) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v408 = v409 - 16;
            *((_OWORD *)v409 - 1) = *((_OWORD *)v405 - 1);
            v405 -= 16;
            v409 -= 16;
          }
          while (v405 != v404);
        }
        *(_QWORD *)(v7 + 944) = v408;
        *(_QWORD *)(v7 + 952) = v407;
        *(_QWORD *)(v7 + 960) = &v406[16 * v403];
        v359 = v796;
        if (v404)
          operator delete(v404);
      }
      v410 = (unsigned __int16 *)((char *)v359 - *v359);
      if (*v410 >= 0x41u && (v411 = v410[32]) != 0)
      {
        v412 = (int *)((char *)v359 + v411 + *(unsigned int *)((char *)v359 + v411));
        if (!*v402)
          goto LABEL_655;
      }
      else
      {
        v412 = 0;
        if (!*v402)
          goto LABEL_655;
      }
      v413 = 0;
      v803 = v412 + 1;
      v414 = v402 + 1;
      v813 = v412;
      v807 = v402 + 1;
      do
      {
        if (v412 && *v412)
          v416 = *(_QWORD *)&v803[2 * v413];
        else
          v416 = 0;
        v417 = *(_QWORD *)&v414[2 * v413];
        v418 = *(_QWORD **)(v7 + 952);
        v419 = *(_QWORD *)(v7 + 960);
        if ((unint64_t)v418 < v419)
        {
          *v418 = v417;
          v418[1] = v416;
          v415 = v418 + 2;
        }
        else
        {
          v420 = v402;
          v421 = (_QWORD *)*v801;
          v422 = ((uint64_t)v418 - *v801) >> 4;
          v423 = v422 + 1;
          if ((unint64_t)(v422 + 1) >> 60)
            abort();
          v424 = v419 - (_QWORD)v421;
          if (v424 >> 3 > v423)
            v423 = v424 >> 3;
          if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFF0)
            v425 = 0xFFFFFFFFFFFFFFFLL;
          else
            v425 = v423;
          if (v425)
          {
            if (v425 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v426 = (char *)operator new(16 * v425);
          }
          else
          {
            v426 = 0;
          }
          v427 = &v426[16 * v422];
          *(_QWORD *)v427 = v417;
          *((_QWORD *)v427 + 1) = v416;
          v428 = v427;
          v402 = v420;
          if (v418 != v421)
          {
            do
            {
              *((_OWORD *)v428 - 1) = *((_OWORD *)v418 - 1);
              v428 -= 16;
              v418 -= 2;
            }
            while (v418 != v421);
            v418 = (_QWORD *)*v801;
          }
          *(_QWORD *)(v7 + 944) = v428;
          v415 = v427 + 16;
          *(_QWORD *)(v7 + 952) = v427 + 16;
          *(_QWORD *)(v7 + 960) = &v426[16 * v425];
          if (v418)
            operator delete(v418);
          v412 = v813;
          v414 = v807;
        }
        *(_QWORD *)(v7 + 952) = v415;
        ++v413;
      }
      while (v413 < *v402);
    }
  }
LABEL_655:
  *(_BYTE *)(v7 + 844) = 0;
  if ((__str_16[7] & 0x80000000) != 0)
    operator delete((void *)__str);
  *(_QWORD *)v7 = &off_250401980;
  bzero((void *)(v7 + 1224), 0x2E9uLL);
  *(_OWORD *)(v7 + 1976) = *(_OWORD *)(v7 + 496);
  *(_QWORD *)(v7 + 1992) = *(_QWORD *)(v7 + 512);
  *(_QWORD *)(v7 + 2016) = 0;
  *(_OWORD *)(v7 + 2216) = 0u;
  *(_OWORD *)(v7 + 2232) = 0u;
  *(_OWORD *)(v7 + 2248) = 0u;
  *(_OWORD *)(v7 + 2264) = 0u;
  *(_OWORD *)(v7 + 2280) = 0u;
  *(_OWORD *)(v7 + 2296) = 0u;
  *(_OWORD *)(v7 + 2312) = 0u;
  *(_OWORD *)(v7 + 2328) = 0u;
  *(_OWORD *)(v7 + 2344) = 0u;
  *(_OWORD *)(v7 + 2360) = 0u;
  *(_OWORD *)(v7 + 2376) = 0u;
  *(_OWORD *)(v7 + 2392) = 0u;
  *(_OWORD *)(v7 + 2408) = 0u;
  *(_OWORD *)(v7 + 2440) = 0u;
  *(_OWORD *)(v7 + 2456) = 0u;
  *(_OWORD *)(v7 + 2472) = 0u;
  *(_OWORD *)(v7 + 2488) = 0u;
  *(_OWORD *)(v7 + 2504) = 0u;
  *(_OWORD *)(v7 + 2520) = 0u;
  *(_OWORD *)(v7 + 2536) = 0u;
  *(_OWORD *)(v7 + 2552) = 0u;
  *(_OWORD *)(v7 + 2568) = 0u;
  *(_OWORD *)(v7 + 2584) = 0u;
  *(_OWORD *)(v7 + 2600) = 0u;
  *(_OWORD *)(v7 + 2616) = 0u;
  *(_OWORD *)(v7 + 2632) = 0u;
  *(_OWORD *)(v7 + 2648) = 0u;
  *(_OWORD *)(v7 + 2664) = 0u;
  *(_OWORD *)(v7 + 2680) = 0u;
  *(_OWORD *)(v7 + 2696) = 0u;
  *(_OWORD *)(v7 + 2712) = 0u;
  *(_OWORD *)(v7 + 2424) = 0u;
  *(_OWORD *)(v7 + 2088) = 0u;
  *(_OWORD *)(v7 + 2104) = 0u;
  *(_OWORD *)(v7 + 2120) = 0u;
  *(_OWORD *)(v7 + 2136) = 0u;
  *(_OWORD *)(v7 + 2152) = 0u;
  *(_OWORD *)(v7 + 2168) = 0u;
  *(_OWORD *)(v7 + 2184) = 0u;
  *(_OWORD *)(v7 + 2196) = 0u;
  *(_OWORD *)(v7 + 2784) = 0u;
  *(_OWORD *)(v7 + 2768) = 0u;
  *(_OWORD *)(v7 + 2752) = 0u;
  *(_QWORD *)(v7 + 2800) = a2;
  *(_QWORD *)(v7 + 2808) = 0;
  if (*v797)
  {
    v429 = (unsigned int **)(v809 + 98);
    if (v809[29])
      v429 = v797;
  }
  else
  {
    v429 = (unsigned int **)(v809 + 98);
  }
  v430 = 0;
  if (*v429 && v429[1])
    v430 = (int *)((char *)*v429 + **v429);
  v431 = (unsigned __int16 *)((char *)v430 - *v430);
  if (*v431 >= 5u && (v432 = v431[2]) != 0)
  {
    v433 = (unsigned int *)((char *)v430 + v432 + *(unsigned int *)((char *)v430 + v432));
    if (!*v791)
      goto LABEL_668;
LABEL_670:
    v434 = (unsigned int **)(v809 + 128);
    if (v809[59])
      v434 = v791;
  }
  else
  {
    v433 = 0;
    if (*v791)
      goto LABEL_670;
LABEL_668:
    v434 = (unsigned int **)(v809 + 128);
  }
  v435 = 0;
  if (*v434 && v434[1])
    v435 = (int *)((char *)*v434 + **v434);
  v436 = (unsigned __int16 *)((char *)v435 - *v435);
  if (*v436 >= 5u && (v437 = v436[2]) != 0)
    v438 = (int *)((char *)v435 + v437 + *(unsigned int *)((char *)v435 + v437));
  else
    v438 = 0;
  v439 = (unsigned __int16 *)((char *)v438 - *v438);
  if (*v439 < 7u)
  {
    LODWORD(v440) = 0;
  }
  else
  {
    v440 = v439[3];
    if (v440)
      LODWORD(v440) = *(int *)((char *)v438 + v440);
  }
  *(_DWORD *)(v7 + 2744) = v440;
  v441 = (unsigned __int16 *)((char *)v438 - *v438);
  if (*v441 >= 0x13u && (v442 = v441[9]) != 0)
    v443 = (char *)v438 + v442 + *(unsigned int *)((char *)v438 + v442) + 4;
  else
    v443 = "";
  MEMORY[0x234927D28](v7 + 2752, v443);
  v444 = (unsigned __int16 *)((char *)v433 - (int)*v433);
  v445 = *(unsigned int *)((char *)v433 + v444[15] + *(unsigned int *)((char *)v433 + v444[15]));
  v446 = v444[13];
  if (v444[13])
    LODWORD(v446) = *(unsigned int *)((char *)v433 + v446);
  v447 = v446;
  if (*(_BYTE *)(v5 + 392))
    v448 = ((*(_QWORD *)(v5 + 224) + *(_QWORD *)(v5 + 200) - (*(_QWORD *)(v5 + 216) + *(_QWORD *)(v5 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
         + ((*(_QWORD *)(v5 + 376) + *(_QWORD *)(v5 + 328) - (*(_QWORD *)(v5 + 368) + *(_QWORD *)(v5 + 320))) & 0xFFFFFFFFFFFFFFFELL)
         + 8;
  else
    v448 = 0;
  v449 = v444[4];
  v450 = *(unsigned int *)((char *)v433 + v449);
  v451 = (unsigned int *)((char *)v433 + v449 + v450);
  v452 = *v451;
  if ((_DWORD)v452)
  {
    v453 = 0;
    v454 = 4 * v452;
    v455 = (char *)v433 + v449 + v450;
    while (1)
    {
      v456 = v451[v453 / 4 + 1];
      v457 = &v455[v453 + v456 - *(int *)((char *)&v451[v453 / 4 + 1] + v456)];
      if (*((unsigned __int16 *)v457 + 2) >= 5u)
      {
        v458 = *((unsigned __int16 *)v457 + 4);
        if (v458)
        {
          if (v455[v453 + 4 + v456 + v458] == 9)
            break;
        }
      }
      v453 += 4;
      if (v454 == v453)
        goto LABEL_699;
    }
    v459 = 0;
    v445 += 8;
  }
  else
  {
LABEL_699:
    v459 = 1;
  }
  v460 = (v445 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v447)
    v461 = (v445 + 7) & 0x3FFFFFFF8;
  else
    v461 = v445;
  if (v448 + v447 + v461)
  {
    v814 = v448;
    AGX::Heap<true>::allocateImpl(__dst, v805, v448 + v447 + v461, (_QWORD *)(v7 + 2144));
    *(_DWORD *)(v7 + 2812) += *(_DWORD *)&__dst[16];
    v462 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(v7 + 2424) = *(_OWORD *)__dst;
    *(_OWORD *)(v7 + 2440) = v462;
    *(_OWORD *)(v7 + 2449) = *(_OWORD *)&__dst[25];
    v463 = *(_QWORD **)(v7 + 2432);
    v464 = *(_QWORD *)(v7 + 2424);
    *(_QWORD *)(v7 + 2008) = 0;
    if (v445)
    {
      *(_QWORD *)(v7 + 2064) = v464;
      if ((v459 & 1) != 0)
      {
        v465 = v463;
      }
      else
      {
        *(_QWORD *)(v7 + 2072) = v464;
        *(_QWORD *)(v7 + 2064) = v464 + 8;
        *v463 = v464 + 8;
        v465 = v463 + 1;
      }
      v466 = (int)*v433;
      v467 = *(unsigned __int16 *)((char *)v433 - v466 + 30);
      if (*(_WORD *)((char *)v433 - v466 + 30))
      {
        v468 = *(unsigned int *)((char *)v433 + v467);
        v469 = (char *)v433 + v467 + v468;
      }
      else
      {
        v467 = 0;
        v469 = 0;
        v468 = *v433;
      }
      memcpy(v465, v469 + 4, *(unsigned int *)((char *)v433 + v467 + v468));
      *(_QWORD *)(v7 + 2672) = v465;
      *(_QWORD *)(v7 + 2664) = *(_QWORD *)(v7 + 2064);
    }
    if ((_DWORD)v447)
    {
      *(_QWORD *)(v7 + 2080) = v464 + v460;
      *(_QWORD *)(v7 + 1232) = (char *)v463 + v460;
    }
    if (v814)
    {
      *(_QWORD *)(v7 + 2008) = v461 + v447 + v464;
      v470 = (_WORD *)((char *)v463 + v461 + v447);
      v471 = *(const void **)(v5 + 192);
      v472 = *(_QWORD *)(v5 + 200) - (_QWORD)v471;
      *v470 = v472 >> 2;
      v470[1] = (*(_DWORD *)(v5 + 224) - *(_DWORD *)(v5 + 216)) >> 2;
      v470[2] = (*(_DWORD *)(v5 + 328) - *(_DWORD *)(v5 + 320)) >> 1;
      v470[3] = (*(_DWORD *)(v5 + 376) - *(_DWORD *)(v5 + 368)) >> 1;
      memcpy(v470 + 4, v471, v472);
      v473 = (char *)v470 + *(_QWORD *)(v5 + 200) - *(_QWORD *)(v5 + 192) + 8;
      memcpy(v473, *(const void **)(v5 + 216), *(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216));
      v474 = &v473[*(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216)];
      memcpy(v474, *(const void **)(v5 + 320), *(_QWORD *)(v5 + 328) - *(_QWORD *)(v5 + 320));
      memcpy(&v474[*(_QWORD *)(v5 + 328) - *(_QWORD *)(v5 + 320)], *(const void **)(v5 + 368), *(_QWORD *)(v5 + 376) - *(_QWORD *)(v5 + 368));
      if (v470[2])
      {
        if (v470[3])
          goto LABEL_717;
LABEL_1081:
        v470[3] = v470[1];
      }
      else
      {
        v470[2] = *v470;
        if (!v470[3])
          goto LABEL_1081;
      }
    }
  }
LABEL_717:
  v475 = (uint64_t *)(v7 + 1264);
  v476 = (unsigned __int16 *)((char *)v433 - (int)*v433);
  v477 = v476[8];
  v478 = *(unsigned int *)((char *)v433 + v477);
  v479 = (unsigned int *)((char *)v433 + v477 + v478);
  v480 = *v479;
  if ((_DWORD)v480)
  {
    v481 = 0;
    v482 = 4 * v480;
    v483 = (char *)v433 + v477 + v478;
    do
    {
      v487 = v479[v481 / 4 + 1];
      v488 = &v483[v481 + v487 - *(int *)((char *)&v479[v481 / 4 + 1] + v487)];
      if (*((unsigned __int16 *)v488 + 2) >= 7u && (v489 = *((unsigned __int16 *)v488 + 5)) != 0)
      {
        v490 = *(unsigned int *)&v483[v481 + 4 + v487 + v489];
        v484 = v490;
        if ((v490 & 0x80000000) != 0)
        {
          v485 = 1 << (v490 >> 20);
          v486 = (_QWORD *)(v7 + 1264);
          goto LABEL_721;
        }
      }
      else
      {
        v484 = 0;
      }
      v485 = 1 << v484;
      *(_QWORD *)(v7 + 1248) |= v485;
      v486 = (_QWORD *)(v7 + 1272);
LABEL_721:
      *v486 |= v485;
      v481 += 4;
    }
    while (v482 != v481);
  }
  v491 = v476[10];
  v492 = *(unsigned int *)((char *)v433 + v491);
  v493 = (unsigned int *)((char *)v433 + v491 + v492);
  v494 = *v493;
  if ((_DWORD)v494)
  {
    v495 = 0;
    v496 = 4 * v494;
    v497 = (char *)v433 + v491 + v492;
    do
    {
      v501 = v493[v495 / 4 + 1];
      v502 = &v497[v495 + v501 - *(int *)((char *)&v493[v495 / 4 + 1] + v501)];
      if (*((unsigned __int16 *)v502 + 2) >= 7u && (v503 = *((unsigned __int16 *)v502 + 5)) != 0)
      {
        v504 = *(unsigned int *)&v497[v495 + 4 + v501 + v503];
        v498 = v504;
        if ((v504 & 0x80000000) != 0)
        {
          v499 = 1 << (v504 >> 20);
          v500 = (_QWORD *)(v7 + 1264);
          goto LABEL_730;
        }
      }
      else
      {
        v498 = 0;
      }
      v499 = 1 << v498;
      *(_QWORD *)(v7 + 1256) |= v499;
      v500 = (_QWORD *)(v7 + 1280);
LABEL_730:
      *v500 |= v499;
      v495 += 4;
    }
    while (v496 != v495);
  }
  v505 = v476[6];
  v506 = *(unsigned int *)((char *)v433 + v505);
  v507 = (unsigned int *)((char *)v433 + v505 + v506);
  v508 = *v507;
  if (!(_DWORD)v508)
    goto LABEL_745;
  v509 = 0;
  v510 = 4 * v508;
  v511 = *v475;
  v512 = (char *)v433 + v505 + v506;
  while (2)
  {
    v515 = v507[v509 / 4 + 1];
    v516 = &v512[v509 + v515 - *(int *)((char *)&v507[v509 / 4 + 1] + v515)];
    if (*((unsigned __int16 *)v516 + 2) < 7u || (v517 = *((unsigned __int16 *)v516 + 5)) == 0)
    {
      v513 = 0;
LABEL_738:
      v514 = 1 << v513;
      *(_QWORD *)(v7 + 1240) |= v514;
      goto LABEL_739;
    }
    v518 = *(unsigned int *)&v512[v509 + 4 + v515 + v517];
    v513 = v518;
    if ((v518 & 0x80000000) == 0)
      goto LABEL_738;
    v514 = 1 << (v518 >> 20);
LABEL_739:
    v511 |= v514;
    v509 += 4;
    if (v510 != v509)
      continue;
    break;
  }
  *v475 = v511;
LABEL_745:
  v519 = v476[4];
  v520 = *(unsigned int *)((char *)v433 + v519);
  v521 = (unsigned int *)((char *)v433 + v519 + v520);
  v522 = *v521;
  if ((_DWORD)v522)
  {
    v523 = 0;
    v524 = 4 * v522;
    v525 = *(_QWORD *)(v5 + 416);
    v526 = (char *)v433 + v519 + v520;
    while (2)
    {
      v529 = v521[v523 / 4 + 1];
      v530 = v529 - *(int *)((char *)&v521[v523 / 4 + 1] + v529);
      v531 = &v526[v523 + v530];
      v532 = *((unsigned __int16 *)v531 + 2);
      if (v532 < 5)
        goto LABEL_750;
      v533 = *((unsigned __int16 *)v531 + 4);
      if (!v533 || v526[v523 + 4 + v529 + v533] != 5)
        goto LABEL_750;
      if (v532 >= 7 && (v534 = *(unsigned __int16 *)&v526[v523 + 10 + v530]) != 0)
      {
        v535 = *(unsigned int *)&v526[v523 + 4 + v529 + v534];
        v527 = v535;
        if ((v535 & 0x80000000) != 0)
        {
          v528 = 1 << (v535 >> 20);
          if ((v525 & v528) != 0)
          {
            *(_BYTE *)(v7 + 1968) = 1;
            *(_QWORD *)(v7 + 1376) |= v528;
          }
LABEL_749:
          *v475 |= v528;
LABEL_750:
          v523 += 4;
          if (v524 == v523)
            goto LABEL_759;
          continue;
        }
      }
      else
      {
        v527 = 0;
      }
      break;
    }
    v528 = 1 << v527;
    goto LABEL_749;
  }
LABEL_759:
  *(_QWORD *)(v7 + 1320) = *(_QWORD *)(v5 + 400);
  *(_QWORD *)(v7 + 1344) = *(_QWORD *)(v5 + 408);
  *(_QWORD *)(v7 + 1384) = *(_QWORD *)(v5 + 408) | *(_QWORD *)(v5 + 400);
  if (*v797)
  {
    if (v809[29])
      v536 = v797;
    else
      v536 = (unsigned int **)(v809 + 98);
  }
  else
  {
    v536 = (unsigned int **)(v809 + 98);
  }
  v538 = *v536;
  v537 = v536[1];
  if (v538)
    v539 = v537 == 0;
  else
    v539 = 1;
  if (v539)
    v540 = 0;
  else
    v540 = (int *)((char *)v538 + *v538);
  v541 = (unsigned __int16 *)((char *)v540 - *v540);
  if (*v541 >= 5u && (v542 = v541[2]) != 0)
    v543 = (int *)((char *)v540 + v542 + *(unsigned int *)((char *)v540 + v542));
  else
    v543 = 0;
  v544 = (unsigned __int16 *)((char *)v543 - *v543);
  if (*v544 >= 9u && (v545 = v544[4]) != 0)
    v546 = (unsigned int *)((char *)v543 + v545 + *(unsigned int *)((char *)v543 + v545));
  else
    v546 = 0;
  v547 = *(_QWORD *)(v7 + 2064);
  v548 = *(_QWORD *)(v7 + 2072);
  v549 = *(_QWORD *)(v7 + 2080);
  bzero(__dst, 0x248uLL);
  bzero((void *)(v7 + 1392), 0x240uLL);
  v550 = v546 + 1;
  v551 = *v546;
  if (!(_DWORD)v551)
  {
    v552 = 0;
    goto LABEL_968;
  }
  v552 = 0;
  v553 = &v550[v551];
  v554 = v7 + 4;
  while (2)
  {
    v558 = (int *)((char *)v550 + *v550);
    v559 = (unsigned __int16 *)((char *)v558 - *v558);
    v560 = *v559;
    if (v560 < 5)
    {
      LODWORD(v561) = 0;
      goto LABEL_791;
    }
    if (v559[2])
    {
      switch(*((_BYTE *)v558 + v559[2]))
      {
        case 0:
          goto LABEL_787;
        case 1:
          if (v560 < 0xD)
          {
            LODWORD(v583) = 0;
            v591 = 0;
            if (v560 < 9)
              goto LABEL_874;
          }
          else
          {
            v583 = v559[6];
            if (v559[6])
              LODWORD(v583) = *(int *)((char *)v558 + v583);
          }
          v592 = v559[4];
          if (v592)
            v591 = *(int *)((char *)v558 + v592);
          else
            v591 = 0;
LABEL_874:
          v613 = v591 + v583;
          if (v583 >= v591 + (int)v583)
            goto LABEL_783;
          v614 = (v613 >> 1) & 0x1FFFFFFF;
          v615 = v552;
          while (1)
          {
            v620 = (v583 >> 1) & 0x1FFFFFFF;
            v621 = *(_QWORD *)(v5 + 24);
            v622 = *(_DWORD *)(v621 + 4 * v620);
            if (v620 + 1 >= v614)
            {
              v623 = 1;
              v626 = v7 + 8 * v615;
              if (v622 < 0)
                goto LABEL_892;
            }
            else
            {
              v623 = 1;
              while (1)
              {
                v624 = *(_DWORD *)(v621 + 4 * (v620 + v623));
                if (v624 != -1 && v624 != ((v622 + v623) & 0xFFFFF | v622 & 0xFFF00000))
                  break;
                ++v623;
                if (!(v620 - v614 + v623))
                {
                  v623 = v614 - v620;
                  break;
                }
              }
              v626 = v7 + 8 * v615;
              if (v622 < 0)
              {
LABEL_892:
                *(_DWORD *)(v626 + 1408) = 0;
                v628 = 8 * (v622 & 0xFFFFF);
                v627 = v615;
                goto LABEL_894;
              }
            }
            v627 = v615;
            *(_DWORD *)(v626 + 1408) = 0;
            if ((v622 & 0x7FF00000) != 0)
              v628 = 8 * (v622 & 0xFFFFF);
            else
              v628 = 8 * ((v622 & 0xFFFFF) - *(_DWORD *)(v5 + 120));
LABEL_894:
            *(_DWORD *)(v554 + 8 * v627 + 1408) = v628;
            v629 = (unsigned __int16 *)((char *)v558 - *v558);
            v630 = *v629;
            if (v630 < 0xB)
            {
              LODWORD(v616) = 0;
            }
            else
            {
              v616 = v629[5];
              if (v629[5])
                LODWORD(v616) = *(int *)((char *)v558 + v616);
              if (v630 >= 0xD)
              {
                v617 = v629[6];
                if (v617)
                  LODWORD(v617) = *(int *)((char *)v558 + v617);
                goto LABEL_878;
              }
            }
            LODWORD(v617) = 0;
LABEL_878:
            v618 = (2 * v623);
            v552 = v615 + 1;
            v619 = &__dst[16 * v615];
            *(_QWORD *)v619 = v618;
            *((_DWORD *)v619 + 2) = v616 + v583 - v617;
            LODWORD(v583) = v583 + v618;
            v615 = v552;
            if (v583 >= v613)
              goto LABEL_783;
          }
        case 2:
          if (v560 < 0xD)
          {
            LODWORD(v581) = 0;
            v589 = 0;
            if (v560 < 9)
              goto LABEL_847;
          }
          else
          {
            v581 = v559[6];
            if (v559[6])
              LODWORD(v581) = *(int *)((char *)v558 + v581);
          }
          v590 = v559[4];
          if (v590)
            v589 = *(int *)((char *)v558 + v590);
          else
            v589 = 0;
LABEL_847:
          v595 = v589 + v581;
          if (v581 >= v589 + (int)v581)
            goto LABEL_783;
          v596 = (v595 >> 1) & 0x1FFFFFFF;
          v597 = v552;
          while (1)
          {
            v602 = (v581 >> 1) & 0x1FFFFFFF;
            v603 = *(_QWORD *)(v5 + 48);
            v604 = *(_DWORD *)(v603 + 4 * v602);
            if (v602 + 1 >= v596)
            {
              v605 = 1;
              v608 = v7 + 8 * v597;
              if (v604 < 0)
                goto LABEL_865;
            }
            else
            {
              v605 = 1;
              while (1)
              {
                v606 = *(_DWORD *)(v603 + 4 * (v602 + v605));
                if (v606 != -1 && v606 != ((v604 + v605) & 0xFFFFF | v604 & 0xFFF00000))
                  break;
                ++v605;
                if (!(v602 - v596 + v605))
                {
                  v605 = v596 - v602;
                  break;
                }
              }
              v608 = v7 + 8 * v597;
              if (v604 < 0)
              {
LABEL_865:
                *(_DWORD *)(v608 + 1408) = 0;
                v610 = 8 * (v604 & 0xFFFFF);
                v609 = v597;
                goto LABEL_867;
              }
            }
            v609 = v597;
            *(_DWORD *)(v608 + 1408) = 0;
            if ((v604 & 0x7FF00000) != 0)
              v610 = 8 * (v604 & 0xFFFFF);
            else
              v610 = 8 * (*(_DWORD *)(v5 + 124) + (v604 & 0xFFFFF) - (*(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128)));
LABEL_867:
            *(_DWORD *)(v554 + 8 * v609 + 1408) = v610;
            v611 = (unsigned __int16 *)((char *)v558 - *v558);
            v612 = *v611;
            if (v612 < 0xB)
            {
              LODWORD(v598) = 0;
            }
            else
            {
              v598 = v611[5];
              if (v611[5])
                LODWORD(v598) = *(int *)((char *)v558 + v598);
              if (v612 >= 0xD)
              {
                v599 = v611[6];
                if (v599)
                  LODWORD(v599) = *(int *)((char *)v558 + v599);
                goto LABEL_851;
              }
            }
            LODWORD(v599) = 0;
LABEL_851:
            v600 = (2 * v605);
            v552 = v597 + 1;
            v601 = &__dst[16 * v597];
            *(_QWORD *)v601 = v600;
            *((_DWORD *)v601 + 2) = v598 + v581 - v599;
            LODWORD(v581) = v581 + v600;
            v597 = v552;
            if (v581 >= v595)
              goto LABEL_783;
          }
        case 3:
          if (v560 < 0xD)
          {
            LODWORD(v584) = 0;
            v593 = 0;
            if (v560 < 9)
              goto LABEL_901;
          }
          else
          {
            v584 = v559[6];
            if (v559[6])
              LODWORD(v584) = *(int *)((char *)v558 + v584);
          }
          v594 = v559[4];
          if (v594)
            v593 = *(int *)((char *)v558 + v594);
          else
            v593 = 0;
LABEL_901:
          v631 = v593 + v584;
          if (v584 >= v593 + (int)v584)
            goto LABEL_783;
          v632 = (v631 >> 1) & 0x1FFFFFFF;
          v633 = v552;
          break;
        case 5:
          if (v560 >= 7 && v559[3] && *(int *)((char *)v558 + v559[3]) < 0)
            goto LABEL_783;
          v585 = 0;
          v586 = v7 + 8 * v552;
          *(_DWORD *)(v586 + 1408) = 0;
          v587 = (unsigned __int16 *)((char *)v558 - *v558);
          if (*v587 >= 0xDu)
          {
            v588 = v587[6];
            if (v588)
              v585 = *(int *)((char *)v558 + v588);
            else
              v585 = 0;
          }
          v582 = v552;
          *(_DWORD *)(v586 + 1412) = 4 * v585;
LABEL_929:
          v648 = (unsigned __int16 *)((char *)v558 - *v558);
          v649 = *v648;
          if (v649 < 9)
          {
            v555 = 0;
LABEL_781:
            v556 = 0;
            goto LABEL_782;
          }
          v555 = v648[4];
          if (v648[4])
            v555 = *(unsigned int *)((char *)v558 + v555);
          if (v649 < 0xB)
            goto LABEL_781;
          v650 = v648[5];
          if (!v650)
            goto LABEL_781;
          v556 = *(int *)((char *)v558 + v650);
LABEL_782:
          v557 = &__dst[16 * v582];
          *(_QWORD *)v557 = v555;
          ++v552;
          *((_DWORD *)v557 + 2) = v556;
          goto LABEL_783;
        case 8:
          v582 = v552;
          *(_QWORD *)(v7 + 8 * v552 + 1408) = 0;
          goto LABEL_929;
        default:
          goto LABEL_783;
      }
      while (1)
      {
        v638 = (v584 >> 1) & 0x1FFFFFFF;
        v639 = *(_QWORD *)(v5 + 72);
        v640 = *(_DWORD *)(v639 + 4 * v638);
        if (v638 + 1 >= v632)
        {
          v641 = 1;
        }
        else
        {
          v641 = 1;
          while (1)
          {
            v642 = *(_DWORD *)(v639 + 4 * (v638 + v641));
            if (v642 != -1 && v642 != ((v640 + v641) & 0xFFFFF | v640 & 0xFFF00000))
              break;
            ++v641;
            if (!(v638 - v632 + v641))
            {
              v641 = v632 - v638;
              break;
            }
          }
        }
        v644 = v7 + 8 * v633;
        if (v640 < 0)
        {
          *(_DWORD *)(v644 + 1408) = 0;
          v645 = 8 * (v640 & 0xFFFFF);
        }
        else
        {
          *(_DWORD *)(v644 + 1408) = 0;
          if ((v640 & 0x7FF00000) != 0)
            v645 = 8 * (v640 & 0xFFFFF);
          else
            v645 = 8
                 * (*(_DWORD *)(v5 + 124)
                  + *(_DWORD *)(v5 + 132)
                  + (v640 & 0xFFFFF)
                  - (*(_DWORD *)(v5 + 120)
                   + *(_DWORD *)(v5 + 128)
                   + *(_DWORD *)(v5 + 136)));
        }
        *(_DWORD *)(v554 + 8 * v633 + 1408) = v645;
        v646 = (unsigned __int16 *)((char *)v558 - *v558);
        v647 = *v646;
        if (v647 < 0xB)
        {
          LODWORD(v634) = 0;
        }
        else
        {
          v634 = v646[5];
          if (v646[5])
            LODWORD(v634) = *(int *)((char *)v558 + v634);
          if (v647 >= 0xD)
          {
            v635 = v646[6];
            if (v635)
              LODWORD(v635) = *(int *)((char *)v558 + v635);
            goto LABEL_905;
          }
        }
        LODWORD(v635) = 0;
LABEL_905:
        v636 = (2 * v641);
        v552 = v633 + 1;
        v637 = &__dst[16 * v633];
        *(_QWORD *)v637 = v636;
        *((_DWORD *)v637 + 2) = v634 + v584 - v635;
        LODWORD(v584) = v584 + v636;
        v633 = v552;
        if (v584 >= v631)
          goto LABEL_783;
      }
    }
LABEL_787:
    if (v560 >= 0xD)
    {
      v561 = v559[6];
      if (v559[6])
        LODWORD(v561) = *(int *)((char *)v558 + v561);
LABEL_819:
      v580 = v559[4];
      if (v580)
      {
        v562 = *(int *)((char *)v558 + v580);
        goto LABEL_792;
      }
LABEL_791:
      v562 = 0;
      goto LABEL_792;
    }
    LODWORD(v561) = 0;
    v562 = 0;
    if (v560 >= 9)
      goto LABEL_819;
LABEL_792:
    v563 = v562 + v561;
    if (v561 < v562 + (int)v561)
    {
      v564 = 1 - (v561 + v562);
      v565 = v552;
      do
      {
        v570 = *(_QWORD *)(v5 + 96);
        v571 = *(_DWORD *)(v570 + 4 * v561);
        if ((int)v561 + 1 >= v563)
        {
          v573 = 1;
        }
        else
        {
          v572 = 0;
          v573 = v563 - v561;
          while (1)
          {
            v574 = *(_DWORD *)(v570 + 4 * (v561 + v572 + 1));
            if (v574 != -1 && v574 != ((v571 + 1 + v572) & 0xFFFFF | v571 & 0xFFF00000))
              break;
            ++v572;
            if (!(v564 + (_DWORD)v561 + v572))
              goto LABEL_807;
          }
          v573 = v572 + 1;
        }
LABEL_807:
        v576 = v7 + 8 * v565;
        if (v571 < 0)
        {
          *(_DWORD *)(v576 + 1408) = 0;
        }
        else
        {
          v577 = (_DWORD *)(v576 + 1408);
          *v577 = (v571 & 0x7FF00000) == 0;
        }
        *(_DWORD *)(v7 + 1396 + 8 * v565 + 16) = 4 * (v571 & 0xFFFFF);
        v578 = (unsigned __int16 *)((char *)v558 - *v558);
        v579 = *v578;
        if (v579 < 0xB)
        {
          LODWORD(v566) = 0;
        }
        else
        {
          v566 = v578[5];
          if (v578[5])
            LODWORD(v566) = *(int *)((char *)v558 + v566);
          if (v579 >= 0xD)
          {
            v567 = v578[6];
            if (v567)
              LODWORD(v567) = *(int *)((char *)v558 + v567);
            goto LABEL_796;
          }
        }
        LODWORD(v567) = 0;
LABEL_796:
        v568 = v573;
        v552 = v565 + 1;
        v569 = &__dst[16 * v565];
        *(_QWORD *)v569 = v568;
        *((_DWORD *)v569 + 2) = v566 + v561 - v567;
        LODWORD(v561) = v561 + v568;
        v565 = v552;
      }
      while (v561 < v563);
    }
LABEL_783:
    if (++v550 != v553)
      continue;
    break;
  }
  v651 = *v546;
  if ((_DWORD)v651)
  {
    v652 = 0;
    v653 = 4 * v651;
    do
      v652 += 4;
    while (v653 != v652);
    v654 = 0;
    LODWORD(v551) = v552;
    while (1)
    {
      v658 = v546[v654 / 4 + 1];
      v659 = (char *)&v546[v654 / 4] + v658;
      v660 = v658 - *((int *)v659 + 1);
      v661 = (char *)&v546[v654 / 4] + v660;
      v662 = *((unsigned __int16 *)v661 + 2);
      if (v662 < 5)
        goto LABEL_942;
      v663 = *((unsigned __int16 *)v661 + 4);
      if (!v663)
        goto LABEL_942;
      v664 = *((char *)&v546[v654 / 4 + 1] + v658 + v663);
      if (v664 == 9)
      {
        *(_QWORD *)(v7 + 8 * v551 + 1408) = v548;
        v666 = v658 - *((int *)v659 + 1);
        v667 = *(unsigned __int16 *)((char *)&v546[v654 / 4 + 1] + v666);
        if (v667 < 9)
          goto LABEL_939;
        if (*(_WORD *)((char *)&v546[v654 / 4 + 3] + v666))
        {
          v655 = *(unsigned int *)((char *)&v546[v654 / 4 + 1]
                                 + v658
                                 + *(unsigned __int16 *)((char *)&v546[v654 / 4 + 3] + v666));
          if (v667 < 0xB)
            goto LABEL_940;
        }
        else
        {
          v655 = 0;
          if (v667 < 0xB)
            goto LABEL_940;
        }
      }
      else
      {
        if (v664 == 7)
        {
          *(_QWORD *)(v7 + 8 * v551 + 1408) = v549;
        }
        else
        {
          if (v664 != 6)
            goto LABEL_942;
          if (v662 < 0xD)
          {
            v665 = 0;
          }
          else
          {
            v665 = *(unsigned __int16 *)((char *)&v546[v654 / 4 + 4] + v660);
            if (v665)
              v665 = *(unsigned int *)((char *)&v546[v654 / 4 + 1] + v658 + v665);
          }
          *(_QWORD *)(v7 + 8 * v551 + 1408) = v547 + 4 * v665;
        }
        v666 = v658 - *((int *)v659 + 1);
        v668 = (char *)&v546[v654 / 4] + v666;
        v669 = *((unsigned __int16 *)v668 + 2);
        if (v669 < 9)
        {
LABEL_939:
          v655 = 0;
          goto LABEL_940;
        }
        v655 = *((unsigned __int16 *)v668 + 6);
        if (v655)
          v655 = *(unsigned int *)((char *)&v546[v654 / 4 + 1] + v658 + v655);
        if (v669 < 0xB)
          goto LABEL_940;
      }
      v670 = *(unsigned __int16 *)((char *)&v546[v654 / 4 + 3] + v666 + 2);
      if (v670)
      {
        v656 = *(unsigned int *)((char *)&v546[v654 / 4 + 1] + v658 + v670);
        goto LABEL_941;
      }
LABEL_940:
      v656 = 0;
LABEL_941:
      v657 = &__dst[16 * v551];
      *(_QWORD *)v657 = v655;
      LODWORD(v551) = v551 + 1;
      *((_DWORD *)v657 + 2) = v656;
LABEL_942:
      v654 += 4;
      if (v653 == v654)
        goto LABEL_968;
    }
  }
  LODWORD(v551) = v552;
LABEL_968:
  v834 = v551;
  v671 = v551;
  v835 = v7 + 1216 + 8 * v551 + 192;
  v672 = (2 * v551);
  v836 = 2 * v551;
  v673 = v551 - v552;
  v674 = 2 * (v551 - 1) + 5;
  v81 = (_DWORD)v551 == 0;
  v675 = 4;
  if (!v81)
    v675 = v674;
  v676 = ((v675 + v672) & 0x7FFFFFFFCLL) - v672;
  v838 = v676;
  v839 = (v671 & 0xFFFFFFFC) + 4;
  v840 = 0;
  *(_DWORD *)(v7 + 1392) = v552;
  *(_DWORD *)(v7 + 1400) = 0;
  *(_DWORD *)(v7 + 1404) = v673 + (v676 >> 1);
  v677 = 4 * ((v671 & 0xFFFFFFFC) + 4);
  *(_QWORD *)(v7 + 2024) = v677;
  AGX::Heap<true>::allocateImpl(&__str, v800, v677, 0);
  v678 = *(_QWORD *)__str_16;
  v679 = *(_QWORD *)&__str_16[8];
  *(_DWORD *)(v7 + 2812) += *(_DWORD *)__str_16;
  v680 = __str;
  v815 = *(_QWORD *)&__str_16[16];
  v816 = __str_16[24];
  *(_QWORD *)(v7 + 2000) = __str;
  v837 = *((_QWORD *)&v680 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)__dst, 0);
  *(_DWORD *)(v7 + 2040) = v840;
  *(_QWORD *)(v7 + 2032) = (4 * (v838 + v836) + 12) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 2128) = *(_QWORD *)(v679 + 296);
  *(_DWORD *)(v7 + 1216) = 8
                         * (*(_DWORD *)(v7 + 1396)
                          + *(_DWORD *)(v7 + 1392)
                          + *(_DWORD *)(v7 + 1400)
                          + *(_DWORD *)(v7 + 1404));
  *(_QWORD *)(v7 + 2216) = v800;
  *(_OWORD *)(v7 + 2224) = v680;
  *(_QWORD *)(v7 + 2240) = v678;
  *(_QWORD *)(v7 + 2248) = v679;
  *(_QWORD *)(v7 + 2256) = v815;
  *(_BYTE *)(v7 + 2264) = v816;
  *(_OWORD *)(v7 + 2272) = 0u;
  *(_OWORD *)(v7 + 2288) = 0u;
  *(_OWORD *)(v7 + 2297) = 0u;
  *(_QWORD *)(v7 + 2416) = v805;
  *(_BYTE *)(v7 + 2740) = 0;
  bzero((void *)(v7 + 2816), 0x240uLL);
  v681 = *v797;
  if (*v797)
  {
    v682 = v809;
    v683 = (unsigned int **)(v809 + 98);
    if (v809[29])
      v683 = v797;
  }
  else
  {
    v682 = v809;
    v683 = (unsigned int **)(v809 + 98);
  }
  v684 = 0;
  if (*v683 && v683[1])
    v684 = (int *)((char *)*v683 + **v683);
  v685 = (unsigned __int16 *)((char *)v684 - *v684);
  if (*v685 >= 5u && (v686 = v685[2]) != 0)
  {
    v687 = (int *)((char *)v684 + v686 + *(unsigned int *)((char *)v684 + v686));
    if (!v681)
      goto LABEL_981;
LABEL_983:
    v688 = (unsigned int **)(v682 + 98);
    if (v682[29])
      v688 = v797;
  }
  else
  {
    v687 = 0;
    if (v681)
      goto LABEL_983;
LABEL_981:
    v688 = (unsigned int **)(v682 + 98);
  }
  v689 = 0;
  if (*v688 && v688[1])
    v689 = (int *)((char *)*v688 + **v688);
  v690 = (unsigned __int16 *)((char *)v689 - *v689);
  if (*v690 >= 7u && (v691 = v690[3]) != 0)
  {
    v692 = (int *)((char *)v689 + v691 + *(unsigned int *)((char *)v689 + v691));
    if (!*v791)
      goto LABEL_991;
LABEL_993:
    v693 = (unsigned int **)(v682 + 128);
    if (v682[59])
      v693 = v791;
  }
  else
  {
    v692 = 0;
    if (*v791)
      goto LABEL_993;
LABEL_991:
    v693 = (unsigned int **)(v682 + 128);
  }
  v694 = 0;
  if (*v693 && v693[1])
    v694 = (int *)((char *)*v693 + **v693);
  v695 = (unsigned __int16 *)((char *)v694 - *v694);
  if (*v695 >= 7u && (v696 = v695[3]) != 0)
    v697 = (int *)((char *)v694 + v696 + *(unsigned int *)((char *)v694 + v696));
  else
    v697 = 0;
  bzero(__dst, 0x1F0uLL);
  v698 = *(unsigned __int16 *)((char *)v697 - *v697 + 4);
  v699 = *(unsigned int *)((char *)v697 + v698);
  v700 = (int *)((char *)v697 + v698 + v699);
  v701 = *v700;
  v702 = *(unsigned __int16 *)((char *)v700 - v701 + 6);
  v703 = *(unsigned int *)((char *)v700 + v702);
  if (*(int *)((char *)v700 + v702 + v703))
  {
    v704 = 0;
    v705 = (uint64_t)v697 + v699 + v698 + 16;
    do
    {
      v707 = v702 + v703;
      v708 = *(unsigned int *)(v705 + v707 - 12);
      v709 = v707 + v708;
      v710 = *(int *)(v705 + v707 + v708 - 12);
      v711 = v705 + v709 - v710;
      v712 = *(unsigned __int16 *)(v711 - 12);
      if (v712 >= 0xB)
      {
        v713 = *(unsigned __int16 *)(v711 - 2);
        if (v713)
        {
          if (*(_BYTE *)(v705 + v702 + v703 + v708 + v713 - 12) == 3)
          {
            v829 = 1;
            if (v712 >= 0xD && (v714 = v702 + v703 + v708, *(_WORD *)(v705 + v714 - v710)))
              v706 = *(_DWORD *)(v705 + v714 + *(unsigned __int16 *)(v705 + v714 - v710) - 12);
            else
              v706 = 0;
            v828 = v706;
            LODWORD(v701) = *v700;
          }
        }
      }
      ++v704;
      v702 = *(unsigned __int16 *)((char *)v700 - (int)v701 + 6);
      v703 = *(unsigned int *)((char *)v700 + v702);
      v705 += 4;
    }
    while (v704 < *(unsigned int *)((char *)v700 + v702 + v703));
  }
  v826 = 2 * v822;
  v715 = *(_QWORD *)(v7 + 1976);
  v825 = v7 + 8 * v822 + 2832;
  v823 = v715;
  v716 = (unsigned __int16 *)((char *)v687 - *v687);
  if (*v716 < 5u)
  {
    LODWORD(v717) = 0;
  }
  else
  {
    v717 = v716[2];
    if (v717)
      LODWORD(v717) = *(int *)((char *)v687 + v717);
  }
  v824 = v717;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)__dst, 1);
  v718 = (v830 + 1) >> 1;
  *(_DWORD *)(v7 + 2828) = v718;
  *(_DWORD *)(v7 + 1216) += 8 * v718;
  AGX::Heap<true>::allocateImpl(&__str, v800, 4 * v831, (_QWORD *)(v7 + 2136));
  v827 = *((_QWORD *)&__str + 1);
  v719 = __str;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)__dst, 0);
  *(_DWORD *)(v7 + 2736) = v832;
  v720 = (unsigned __int16 *)((char *)v687 - *v687);
  if (*v720 >= 7u && (v721 = v720[3]) != 0)
    v722 = ((*(int *)((char *)v687 + v721) << 13) + 129024) & 0xDFFE07FF | 0x20000000;
  else
    v722 = 0x20000000;
  v723 = (unsigned __int16 *)((char *)v692 - *v692);
  if (*v723 >= 5u && (v724 = v723[2]) != 0)
    v725 = ((*(int *)((char *)v692 + v724) << 9) + 1920) & 0xFFFFF800;
  else
    v725 = 0;
  v726 = (unsigned __int16 *)((char *)v697 - *v697);
  if (*v726 >= 0xBu && (v727 = v726[5]) != 0)
  {
    v728 = *(int *)((char *)v697 + v727);
    v729 = 1140862848;
    v730 = v833;
    v731 = v830;
    v732 = v826;
    v733 = v728 + 5;
    if ((v728 + 5) < 0x21)
    {
      v734 = 0;
      goto LABEL_1030;
    }
    v735 = v809;
    v736 = v797;
    if (v733 >= 0x31)
    {
      v734 = (v733 > 0x40) << 30;
      if (v733 >= 0x41)
        v729 = 1140852608;
      else
        v729 = 1140854656;
    }
    else
    {
      v734 = 0;
      v729 = 1140858752;
    }
  }
  else
  {
    v728 = 0;
    v734 = 0;
    v729 = 1140862848;
    v730 = v833;
    v731 = v830;
    v732 = v826;
LABEL_1030:
    v735 = v809;
    v736 = v797;
  }
  *(_DWORD *)(v7 + 3392) = v729;
  *(_DWORD *)(v7 + 3396) = v719;
  *(_DWORD *)(v7 + 3400) = v728;
  *(_DWORD *)(v7 + 3404) = (32 * v730 + 96) & 0xFFFFFF80 | v725 | ((4 * (v732 + v731) + 12) >> 4) | v734;
  v737 = (*(_DWORD *)(v7 + 2000) + 15) & 0xFFFFFFF0;
  *(_DWORD *)(v7 + 3408) = v722 | ((unint64_t)(*(_QWORD *)(v7 + 2032) + 15) >> 4);
  *(_DWORD *)(v7 + 3412) = 0;
  *(_DWORD *)(v7 + 3416) = v737;
  v738 = *(_OWORD *)__str_16;
  *(_OWORD *)(v7 + 2272) = __str;
  *(_OWORD *)(v7 + 2288) = v738;
  *(_OWORD *)(v7 + 2297) = *(_OWORD *)&__str_16[9];
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v7 + 1216);
  *(_QWORD *)(v7 + 3496) = 0;
  *(_OWORD *)(v7 + 3464) = 0u;
  *(_OWORD *)(v7 + 3480) = 0u;
  if (*v736)
  {
    v739 = (unsigned int **)(v735 + 98);
    if (v735[29])
      v739 = v736;
  }
  else
  {
    v739 = (unsigned int **)(v735 + 98);
  }
  v740 = 0;
  if (*v739 && v739[1])
    v740 = (int *)((char *)*v739 + **v739);
  v741 = (unsigned __int16 *)((char *)v740 - *v740);
  if (*v741 >= 5u && (v742 = v741[2]) != 0)
    v743 = (int *)((char *)v740 + v742 + *(unsigned int *)((char *)v740 + v742));
  else
    v743 = 0;
  v744 = *(_DWORD *)(v7 + 920);
  *(_QWORD *)(v7 + 2104) = *(_QWORD *)(v7 + 896);
  *(_DWORD *)(v7 + 2812) += v744;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v7 + 1216);
  v745 = *v743;
  v746 = *(unsigned __int16 *)((char *)v743 - v745 + 24);
  v747 = *(unsigned int *)((char *)v743 + v746);
  if (*(int *)((char *)v743 + v746 + v747))
  {
    v748 = 0;
    v749 = a5;
    while (1)
    {
      v750 = (uint64_t)&v743[v748] + v746 + v747;
      v751 = (int *)(v750 + 4 + *(unsigned int *)(v750 + 4));
      v752 = (unsigned __int16 *)((char *)v751 - *v751);
      v753 = *v752;
      if (v753 < 9)
      {
        v755 = v786->__begin_;
        v756 = v786->__begin_;
        if (v753 >= 5)
        {
          v757 = v752[2];
          if (v757)
            goto LABEL_1054;
        }
      }
      else
      {
        if (v752[4])
          v754 = *(unsigned int *)((char *)v751 + v752[4]);
        else
          v754 = 0;
        v755 = v786->__begin_;
        v756 = &v786->__begin_[v754];
        v757 = v752[2];
        if (v757)
        {
LABEL_1054:
          if (*((_BYTE *)v751 + v757) == 22)
          {
            *v756 = 0x100000000;
            LODWORD(v745) = *v743;
          }
        }
      }
      ++v748;
      v746 = *(unsigned __int16 *)((char *)v743 - (int)v745 + 24);
      v747 = *(unsigned int *)((char *)v743 + v746);
      if (v748 >= *(unsigned int *)((char *)v743 + v746 + v747))
        goto LABEL_1057;
    }
  }
  v755 = v786->__begin_;
  v749 = a5;
LABEL_1057:
  v759 = *(_QWORD *)(v7 + 240);
  v758 = *(_QWORD *)(v7 + 248);
  if (v758 == v759)
    v760 = 0;
  else
    v760 = *v783 & 1;
  v761 = *(_QWORD *)(v7 + 80) - (_DWORD)v755;
  v762 = (*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 2;
  v763 = 8 * (v762 + ((*(_QWORD *)(v7 + 104) - *(_QWORD *)(v7 + 96)) >> 2));
  *(_DWORD *)(v7 + 16) = ((*(_DWORD *)(v7 + 152)
                         - *(_DWORD *)(v7 + 144)
                         + ((v761
                           + 4
                           * (*(_DWORD *)(v7 + 212)
                            + *(_DWORD *)(v7 + 208)
                            + v760
                            + (((v758 - v759) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                       + v763;
  v764 = (*(_DWORD *)(v5 + 124)
        + *(_DWORD *)(v5 + 132)
        + *(_DWORD *)(v5 + 140)
        - (*(_DWORD *)(v5 + 120)
         + *(_DWORD *)(v5 + 128)
         + *(_DWORD *)(v5 + 136))
        + 1) & 0xFFFFFFFE;
  *(_DWORD *)(v7 + 20) = 8 * v764;
  v765 = *(unsigned __int8 *)(v5 + 184);
  v766 = *(_DWORD *)(v5 + 144);
  if (!*(_BYTE *)(v5 + 184))
    v766 = 0;
  *(_DWORD *)(v7 + 24) = 8 * (v766 + v764);
  *(_DWORD *)(v7 + 28) = 8 * v762;
  *(_DWORD *)(v7 + 32) = v763;
  *(_DWORD *)(v7 + 36) = v763 + (v761 & 0xFFFFFFFC);
  v767 = *(_DWORD *)(v5 + 144);
  if (v765)
    v768 = *(_DWORD *)(v5 + 144);
  else
    v768 = 0;
  v769 = *(_QWORD *)(v5 + 168);
  if (!v769)
    v767 = 0;
  *(_DWORD *)(v7 + 40) = 8 * (v768 + v767 + v764);
  v770 = *(_DWORD *)(v5 + 144);
  if (v769)
    v771 = *(_DWORD *)(v5 + 144);
  else
    v771 = 0;
  if (!v765)
    v770 = 0;
  v772 = *(_QWORD *)(v5 + 148);
  *(_DWORD *)(v7 + 44) = 8 * (v770 + v771 + v772 + v764);
  v773 = *(_DWORD *)(v5 + 144);
  if (v765)
    v774 = *(_DWORD *)(v5 + 144);
  else
    v774 = 0;
  if (!v769)
    v773 = 0;
  *(_DWORD *)(v7 + 316) = v774 + v773;
  *(_QWORD *)(v7 + 320) = v772;
  *(_DWORD *)(v7 + 3424) = ((v749[5] & 1) << 18) | ~(-1 << v749[4]) | (v749[3] << 24);
  *(_QWORD *)&__str = 0;
  AGX::Heap<true>::allocateImpl(__dst, v805, 16, &__str);
  v775 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(v7 + 3464) = *(_OWORD *)__dst;
  *(_OWORD *)(v7 + 3480) = v775;
  *(_OWORD *)(v7 + 3489) = *(_OWORD *)&__dst[25];
  v776 = __str + (int)*MEMORY[0x24BE51650];
  v777 = *(_QWORD *)(v776 + 48);
  *(_OWORD *)(v7 + 3440) = *(_OWORD *)(v776 + 32);
  *(_QWORD *)(v7 + 3456) = v777;
  v778 = *(_OWORD **)(v7 + 3472);
  v779 = *(_QWORD *)(v7 + 3464);
  *(_QWORD *)(v7 + 2088) = *(_QWORD *)(*(_QWORD *)(v7 + 3488) + 296);
  *v778 = xmmword_232D73A00;
  *(_QWORD *)(v7 + 3428) = __ROR8__(v779, 32) & 0xFFFFFFFC000000FFLL | 0x400;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v7 + 1216);
  return v7;
}

void sub_232CCE698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void **a10, _QWORD *a11, uint64_t a12, CompileStatistics *a13, void **a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, void **a20,void **a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,_QWORD **a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  void **v54;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;

  CompileStatistics::~CompileStatistics(a13);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v53 + 1032));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v53 + 992));
  v56 = *(void **)(v53 + 968);
  if (v56)
  {
    *(_QWORD *)(v53 + 976) = v56;
    operator delete(v56);
  }
  v57 = *a28;
  if (*a28)
  {
    *(_QWORD *)(v53 + 952) = v57;
    operator delete(v57);
  }
  if (*a9 < 0)
  {
    operator delete(*a10);
    if ((*(char *)(v53 + 479) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*(char *)(v53 + 479) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v53 + 455) < 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*a20);
  if (*(char *)(v53 + 455) < 0)
  {
LABEL_8:
    operator delete(*a21);
    if ((*(char *)(v53 + 431) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a34);
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a11);
      v58 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v53 + 176) = v58;
        operator delete(v58);
      }
      v59 = *a17;
      if (*a17)
      {
        *(_QWORD *)(v53 + 152) = v59;
        operator delete(v59);
      }
      v60 = *a16;
      if (*a16)
      {
        *(_QWORD *)(v53 + 128) = v60;
        operator delete(v60);
      }
      v61 = *a18;
      if (*a18)
      {
        *(_QWORD *)(v53 + 104) = v61;
        operator delete(v61);
      }
      v62 = *a14;
      if (*a14)
      {
        *(_QWORD *)(v53 + 80) = v62;
        operator delete(v62);
        v63 = *v54;
        if (!*v54)
        {
LABEL_24:
          if (a44 < 0)
            goto LABEL_25;
          goto LABEL_28;
        }
      }
      else
      {
        v63 = *v54;
        if (!*v54)
          goto LABEL_24;
      }
      *(_QWORD *)(v53 + 56) = v63;
      operator delete(v63);
      if (a44 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a22);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v53 + 431) & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(uint64_t result)
{
  unsigned int v1;
  int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v1 = *(_QWORD *)(result + 872) != 0;
  *(_DWORD *)(result + 984) = v1;
  if (*(_QWORD *)(result + 880))
  {
    v1 |= 2u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 888))
  {
    v1 |= 4u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 896))
  {
    v1 |= 8u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 904))
  {
    v1 |= 0x10u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 912))
  {
    v1 |= 0x20u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 920))
  {
    v1 |= 0x40u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 928))
  {
    v1 |= 0x80u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 936))
  {
    v1 |= 0x100u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 944))
  {
    v1 |= 0x200u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 952))
  {
    v1 |= 0x400u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 960))
  {
    v1 |= 0x800u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 968))
  {
    v1 |= 0x1000u;
    *(_DWORD *)(result + 984) = v1;
  }
  if (*(_QWORD *)(result + 976))
  {
    v1 |= 0x2000u;
    *(_DWORD *)(result + 984) = v1;
  }
  v2 = (int *)MEMORY[0x24BE51650];
  v3 = v1;
  do
  {
    v4 = __clz(__rbit32(v3));
    v5 = v3 & ~(1 << v4);
    if (!v5)
      break;
    v6 = (_QWORD *)(result + 8 * v4 + 872);
    v7 = *v2;
    v3 = v5;
    do
    {
      v8 = __clz(__rbit32(v5));
      v9 = 1 << v8;
      if (*(_DWORD *)(*v6 + v7 + 48) == *(_DWORD *)(*(_QWORD *)(result + 8 * v8 + 872) + v7 + 48))
      {
        v1 &= ~v9;
        *(_DWORD *)(result + 984) = v1;
        v3 &= ~v9;
      }
      v5 &= ~v9;
    }
    while (v5);
  }
  while (v3);
  return result;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::encodeConstantPDS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, unint64_t *a14, _DWORD *a15)
{
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  BOOL v24;
  int *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v48;
  int v49;
  _OWORD *v50;
  int *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _OWORD *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _OWORD *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int *v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int *v108;
  int v109;
  unsigned int *v110;
  unsigned __int16 *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _OWORD *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int *v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int *v132;
  int v133;
  unsigned int *v134;
  unsigned __int16 *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _OWORD *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  unsigned int *v156;
  unsigned int *v157;
  int v158;
  unsigned __int16 *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int *v164;
  _DWORD *v165;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned __int16 *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  _OWORD *v176;
  int *v177;
  unsigned __int16 *v178;
  unsigned int v179;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int *v188;
  _DWORD *v189;
  unsigned __int16 *v190;
  uint64_t v191;
  unsigned __int16 *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  _OWORD *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v218;
  _OWORD v219[2];
  _OWORD v220[32];
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;

  v21 = (unsigned int **)(a2 + 224);
  if (*(_QWORD *)(a2 + 224))
  {
    if (!*(_QWORD *)(a2 + 232))
      v21 = (unsigned int **)(a2 + 784);
  }
  else
  {
    v21 = (unsigned int **)(a2 + 784);
  }
  v23 = *v21;
  v22 = v21[1];
  if (v23)
    v24 = v22 == 0;
  else
    v24 = 1;
  if (v24)
    v25 = 0;
  else
    v25 = (int *)((char *)v23 + *v23);
  v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 5u && (v27 = v26[2]) != 0)
    v28 = (int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
  else
    v28 = 0;
  v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 9u && (v30 = v29[4]) != 0)
    v31 = (unsigned int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
  else
    v31 = 0;
  bzero(v220, 0x248uLL);
  bzero(a12, 0x240uLL);
  v32 = v31 + 1;
  v33 = *v31;
  if (!(_DWORD)v33)
  {
    v36 = 0;
    v34 = 0;
    v37 = 0;
    goto LABEL_23;
  }
  v214 = a6;
  v215 = a7;
  v216 = a8;
  v34 = 0;
  v35 = v31 + 1;
  while (1)
  {
    v51 = (int *)((char *)v35 + *v35);
    v52 = (unsigned __int16 *)((char *)v51 - *v51);
    v53 = *v52;
    if (v53 < 5)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      goto LABEL_38;
    }
    if (v52[2])
    {
      switch(*((_BYTE *)v51 + v52[2]))
      {
        case 0:
          goto LABEL_33;
        case 1:
          if (v53 < 0xD)
          {
            v79 = 0;
            LODWORD(v80) = 0;
            if (v53 >= 9)
            {
              v80 = v52[4];
              if (v52[4])
                goto LABEL_107;
            }
          }
          else
          {
            if (v52[6])
            {
              v79 = *(int *)((char *)v51 + v52[6]);
              v80 = v52[4];
              if (!v52[4])
                goto LABEL_108;
LABEL_107:
              LODWORD(v80) = *(int *)((char *)v51 + v80);
              goto LABEL_108;
            }
            v79 = 0;
            v80 = v52[4];
            if (v52[4])
              goto LABEL_107;
          }
LABEL_108:
          v89 = v80 + v79;
          if (v79 >= v80 + v79)
            goto LABEL_29;
          v90 = (v89 >> 1) & 0x1FFFFFFF;
          v91 = v34;
          while (1)
          {
            v97 = (v79 >> 1) & 0x1FFFFFFF;
            v98 = *(_QWORD *)(a3 + 24);
            v99 = *(_DWORD *)(v98 + 4 * v97);
            v100 = v99 & 0xFFF00000;
            if (v97 + 1 >= v90)
            {
              v101 = 1;
              if ((v99 & 0x80000000) != 0)
                goto LABEL_128;
            }
            else
            {
              v101 = 1;
              while (1)
              {
                v102 = *(_DWORD *)(v98 + 4 * (v97 + v101));
                if (v102 != -1 && v102 != ((v99 + v101) & 0xFFFFF | v100))
                  break;
                ++v101;
                if (!(v97 - v90 + v101))
                {
                  v101 = v90 - v97;
                  break;
                }
              }
              if ((v99 & 0x80000000) != 0)
              {
LABEL_128:
                v106 = (v99 >> 20) & 0x7FF;
                if (v106 >= 0x23)
                  v107 = -44;
                else
                  v107 = 7;
                if (!a5)
                  v107 = 65;
                v105 = v107 + v106;
                v104 = &a12[2 * v91];
LABEL_134:
                v104[4] = v105;
                v108 = v104 + 4;
                v109 = 8 * (v99 & 0xFFFFF);
                goto LABEL_139;
              }
            }
            if (a5)
            {
              if (v100 != 7340032)
              {
                if (v100 != 3145728)
                  return 0;
                v104 = &a12[2 * v91];
                v105 = 5;
                goto LABEL_134;
              }
              v110 = &a12[2 * v91];
              v110[4] = 3;
              v108 = v110 + 4;
              v109 = 8 * (v99 & 0xFFFFF);
            }
            else
            {
              v108 = &a12[2 * v91 + 4];
              if ((v99 & 0x7FF00000) != 0)
              {
                *v108 = 191;
                v109 = 8 * (v99 & 0xFFFFF);
              }
              else
              {
                *v108 = 397;
                v109 = 8 * ((v99 & 0xFFFFF) - *(_DWORD *)(a3 + 120));
              }
            }
LABEL_139:
            v108[1] = v109;
            v111 = (unsigned __int16 *)((char *)v51 - *v51);
            v112 = *v111;
            if (v112 < 0xB)
            {
              LODWORD(v92) = 0;
            }
            else
            {
              v92 = v111[5];
              if (v111[5])
                LODWORD(v92) = *(int *)((char *)v51 + v92);
              if (v112 >= 0xD)
              {
                v93 = v111[6];
                if (v93)
                  LODWORD(v93) = *(int *)((char *)v51 + v93);
                goto LABEL_112;
              }
            }
            LODWORD(v93) = 0;
LABEL_112:
            v94 = (2 * v101);
            v95 = v92 + v79 - v93;
            v34 = v91 + 1;
            v96 = &v220[v91];
            *(_QWORD *)v96 = v94;
            *((_DWORD *)v96 + 2) = v95;
            v79 += v94;
            ++v91;
            if (v79 >= v89)
              goto LABEL_29;
          }
        case 2:
          if (v53 < 0xD)
          {
            v81 = 0;
            LODWORD(v82) = 0;
            if (v53 >= 9)
            {
              v82 = v52[4];
              if (v52[4])
                goto LABEL_147;
            }
          }
          else
          {
            if (v52[6])
            {
              v81 = *(int *)((char *)v51 + v52[6]);
              v82 = v52[4];
              if (!v52[4])
                goto LABEL_148;
LABEL_147:
              LODWORD(v82) = *(int *)((char *)v51 + v82);
              goto LABEL_148;
            }
            v81 = 0;
            v82 = v52[4];
            if (v52[4])
              goto LABEL_147;
          }
LABEL_148:
          v113 = v82 + v81;
          if (v81 >= v82 + v81)
            goto LABEL_29;
          v114 = (v113 >> 1) & 0x1FFFFFFF;
          v115 = v34;
          while (1)
          {
            v121 = (v81 >> 1) & 0x1FFFFFFF;
            v122 = *(_QWORD *)(a3 + 48);
            v123 = *(_DWORD *)(v122 + 4 * v121);
            v124 = v123 & 0xFFF00000;
            if (v121 + 1 >= v114)
            {
              v125 = 1;
              if ((v123 & 0x80000000) != 0)
                goto LABEL_168;
            }
            else
            {
              v125 = 1;
              while (1)
              {
                v126 = *(_DWORD *)(v122 + 4 * (v121 + v125));
                if (v126 != -1 && v126 != ((v123 + v125) & 0xFFFFF | v124))
                  break;
                ++v125;
                if (!(v121 - v114 + v125))
                {
                  v125 = v114 - v121;
                  break;
                }
              }
              if ((v123 & 0x80000000) != 0)
              {
LABEL_168:
                v130 = (v123 >> 20) & 0x7FF;
                if (v130 >= 0x23)
                  v131 = -44;
                else
                  v131 = 7;
                if (!a5)
                  v131 = 65;
                v129 = v131 + v130;
                v128 = &a12[2 * v115];
LABEL_174:
                v128[4] = v129;
                v132 = v128 + 4;
                v133 = 8 * (v123 & 0xFFFFF);
                goto LABEL_179;
              }
            }
            if (a5)
            {
              if (v124 != 7340032)
              {
                if (v124 != 3145728)
                  return 0;
                v128 = &a12[2 * v115];
                v129 = 5;
                goto LABEL_174;
              }
              v134 = &a12[2 * v115];
              v134[4] = 3;
              v132 = v134 + 4;
              v133 = 8 * (v123 & 0xFFFFF);
            }
            else
            {
              v132 = &a12[2 * v115 + 4];
              if ((v123 & 0x7FF00000) != 0)
              {
                *v132 = 191;
                v133 = 8 * (v123 & 0xFFFFF);
              }
              else
              {
                *v132 = 397;
                v133 = 8 * (*(_DWORD *)(a3 + 124) + (v123 & 0xFFFFF) - (*(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128)));
              }
            }
LABEL_179:
            v132[1] = v133;
            v135 = (unsigned __int16 *)((char *)v51 - *v51);
            v136 = *v135;
            if (v136 < 0xB)
            {
              LODWORD(v116) = 0;
            }
            else
            {
              v116 = v135[5];
              if (v135[5])
                LODWORD(v116) = *(int *)((char *)v51 + v116);
              if (v136 >= 0xD)
              {
                v117 = v135[6];
                if (v117)
                  LODWORD(v117) = *(int *)((char *)v51 + v117);
                goto LABEL_152;
              }
            }
            LODWORD(v117) = 0;
LABEL_152:
            v118 = (2 * v125);
            v119 = v116 + v81 - v117;
            v34 = v115 + 1;
            v120 = &v220[v115];
            *(_QWORD *)v120 = v118;
            *((_DWORD *)v120 + 2) = v119;
            v81 += v118;
            ++v115;
            if (v81 >= v113)
              goto LABEL_29;
          }
        case 3:
          if (v53 < 0xD)
          {
            v83 = 0;
            LODWORD(v84) = 0;
            if (v53 >= 9)
            {
              v84 = v52[4];
              if (v52[4])
                goto LABEL_187;
            }
          }
          else
          {
            if (v52[6])
            {
              v83 = *(int *)((char *)v51 + v52[6]);
              v84 = v52[4];
              if (!v52[4])
                goto LABEL_188;
LABEL_187:
              LODWORD(v84) = *(int *)((char *)v51 + v84);
              goto LABEL_188;
            }
            v83 = 0;
            v84 = v52[4];
            if (v52[4])
              goto LABEL_187;
          }
LABEL_188:
          v137 = v84 + v83;
          if (v83 >= v84 + v83)
            goto LABEL_29;
          v138 = (v137 >> 1) & 0x1FFFFFFF;
          v139 = v34;
          break;
        case 5:
          if (v53 < 7)
          {
            LODWORD(v85) = 0;
          }
          else
          {
            v85 = v52[3];
            if (v52[3])
            {
              LODWORD(v85) = *(int *)((char *)v51 + v85);
              if ((v85 & 0x80000000) != 0)
                goto LABEL_29;
            }
          }
          v161 = v85 & 0xFFFFF;
          if (v161 >= 0x23)
            v162 = -44;
          else
            v162 = 7;
          if (!a5)
            v162 = 65;
          v163 = v162 + v161;
          v164 = &a12[2 * v34];
          v164[4] = v163;
          v165 = v164 + 4;
          v166 = (unsigned __int16 *)((char *)v51 - *v51);
          if (*v166 < 0xDu)
          {
            LODWORD(v167) = 0;
          }
          else
          {
            v167 = v166[6];
            if (v167)
              LODWORD(v167) = *(int *)((char *)v51 + v167);
          }
          v86 = v34;
          v165[1] = 4 * v167;
          v168 = (unsigned __int16 *)((char *)v51 - *v51);
          v169 = *v168;
          if (v169 < 9)
          {
LABEL_26:
            v48 = 0;
            goto LABEL_27;
          }
          if (v168[4])
          {
            v48 = *(unsigned int *)((char *)v51 + v168[4]);
            if (v169 < 0xB)
              goto LABEL_27;
          }
          else
          {
            v48 = 0;
            if (v169 < 0xB)
              goto LABEL_27;
          }
          v170 = v168[5];
          if (v168[5])
            goto LABEL_249;
          goto LABEL_27;
        case 8:
          if ((a5 & 1) != 0)
            return 0;
          v86 = v34;
          *(_QWORD *)&a12[2 * v34 + 4] = 399;
          v87 = (unsigned __int16 *)((char *)v51 - *v51);
          v88 = *v87;
          if (v88 < 9)
            goto LABEL_26;
          if (v87[4])
          {
            v48 = *(unsigned int *)((char *)v51 + v87[4]);
            if (v88 < 0xB)
              goto LABEL_27;
          }
          else
          {
            v48 = 0;
            if (v88 < 0xB)
              goto LABEL_27;
          }
          v170 = v87[5];
          if (!v170)
          {
LABEL_27:
            v49 = 0;
            goto LABEL_28;
          }
LABEL_249:
          v49 = *(int *)((char *)v51 + v170);
LABEL_28:
          v50 = &v220[v86];
          *(_QWORD *)v50 = v48;
          ++v34;
          *((_DWORD *)v50 + 2) = v49;
          goto LABEL_29;
        default:
          goto LABEL_29;
      }
      while (1)
      {
        v145 = (v83 >> 1) & 0x1FFFFFFF;
        v146 = *(_QWORD *)(a3 + 72);
        v147 = *(_DWORD *)(v146 + 4 * v145);
        v148 = v147 & 0xFFF00000;
        if (v145 + 1 >= v138)
        {
          v149 = 1;
          if ((v147 & 0x80000000) != 0)
            goto LABEL_208;
        }
        else
        {
          v149 = 1;
          while (1)
          {
            v150 = *(_DWORD *)(v146 + 4 * (v145 + v149));
            if (v150 != -1 && v150 != ((v147 + v149) & 0xFFFFF | v148))
              break;
            ++v149;
            if (!(v145 - v138 + v149))
            {
              v149 = v138 - v145;
              break;
            }
          }
          if ((v147 & 0x80000000) != 0)
          {
LABEL_208:
            v154 = (v147 >> 20) & 0x7FF;
            if (v154 >= 0x23)
              v155 = -44;
            else
              v155 = 7;
            if (!a5)
              v155 = 65;
            v153 = v155 + v154;
LABEL_214:
            v156 = &a12[2 * v139];
            v156[4] = v153;
            v157 = v156 + 4;
            v158 = 8 * (v147 & 0xFFFFF);
            goto LABEL_218;
          }
        }
        if (a5)
        {
          if ((v148 - 0x200000) >> 21 > 2)
            return 0;
          v152 = (v148 - 0x200000) >> 20;
          if (((0x33u >> v152) & 1) == 0)
            return 0;
          v153 = dword_232D7C898[v152];
          goto LABEL_214;
        }
        v157 = &a12[2 * v139 + 4];
        if ((v147 & 0x7FF00000) != 0)
        {
          *v157 = 191;
          v158 = 8 * (v147 & 0xFFFFF);
        }
        else
        {
          *v157 = 397;
          v158 = 8
               * (*(_DWORD *)(a3 + 124)
                + *(_DWORD *)(a3 + 132)
                + (v147 & 0xFFFFF)
                - (*(_DWORD *)(a3 + 120)
                 + *(_DWORD *)(a3 + 128)
                 + *(_DWORD *)(a3 + 136)));
        }
LABEL_218:
        v157[1] = v158;
        v159 = (unsigned __int16 *)((char *)v51 - *v51);
        v160 = *v159;
        if (v160 < 0xB)
        {
          LODWORD(v140) = 0;
        }
        else
        {
          v140 = v159[5];
          if (v159[5])
            LODWORD(v140) = *(int *)((char *)v51 + v140);
          if (v160 >= 0xD)
          {
            v141 = v159[6];
            if (v141)
              LODWORD(v141) = *(int *)((char *)v51 + v141);
            goto LABEL_192;
          }
        }
        LODWORD(v141) = 0;
LABEL_192:
        v142 = (2 * v149);
        v143 = v140 + v83 - v141;
        v34 = v139 + 1;
        v144 = &v220[v139];
        *(_QWORD *)v144 = v142;
        *((_DWORD *)v144 + 2) = v143;
        v83 += v142;
        ++v139;
        if (v83 >= v137)
          goto LABEL_29;
      }
    }
LABEL_33:
    if (v53 < 0xD)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      if (v53 >= 9)
      {
        v55 = v52[4];
        if (v52[4])
LABEL_81:
          LODWORD(v55) = *(int *)((char *)v51 + v55);
      }
    }
    else if (v52[6])
    {
      v54 = *(int *)((char *)v51 + v52[6]);
      v55 = v52[4];
      if (v52[4])
        goto LABEL_81;
    }
    else
    {
      v54 = 0;
      v55 = v52[4];
      if (v52[4])
        goto LABEL_81;
    }
LABEL_38:
    v56 = v55 + v54;
    if (v54 < v55 + v54)
      break;
LABEL_29:
    if (++v35 == &v32[v33])
    {
      v171 = *v31;
      if (!(_DWORD)v171)
      {
        v36 = v34;
        v37 = v34;
        goto LABEL_23;
      }
      v172 = &v32[v171];
      v36 = v34;
      while (1)
      {
        v177 = (int *)((char *)v32 + *v32);
        v178 = (unsigned __int16 *)((char *)v177 - *v177);
        v179 = *v178;
        if (v179 < 5 || !v178[2])
          goto LABEL_257;
        if (v179 < 7 || *((_BYTE *)v177 + v178[2]) != 5)
          goto LABEL_257;
        v181 = v178[3];
        if (!v181)
          goto LABEL_257;
        v182 = *(unsigned int *)((char *)v177 + v181);
        if ((v182 & 0x80000000) == 0)
          goto LABEL_257;
        v183 = (v182 >> 20) & 0x7FF;
        v184 = *(uint64_t **)(*(_QWORD *)(a4 + 8 * v183) + 48);
        if (!v184)
LABEL_314:
          abort();
        v185 = v182 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v186 = *((_DWORD *)v184 + 7);
            if (v186 <= v185)
              break;
            v184 = (uint64_t *)*v184;
            if (!v184)
              goto LABEL_314;
          }
          if (v186 >= v185)
            break;
          v184 = (uint64_t *)v184[1];
          if (!v184)
            goto LABEL_314;
        }
        v187 = *((_DWORD *)v184 + 8);
        v188 = &a12[2 * v36];
        *((_WORD *)v188 + 8) = v183;
        v189 = v188 + 4;
        *((_WORD *)v189 + 1) = v187 >> 3;
        v190 = (unsigned __int16 *)((char *)v177 - *v177);
        if (*v190 < 0xDu)
        {
          LODWORD(v191) = 0;
        }
        else
        {
          v191 = v190[6];
          if (v191)
            LODWORD(v191) = *(int *)((char *)v177 + v191);
        }
        v189[1] = 4 * v191;
        v192 = (unsigned __int16 *)((char *)v177 - *v177);
        v193 = *v192;
        if (v193 < 9)
        {
          v173 = 0;
        }
        else
        {
          v173 = v192[4];
          if (v192[4])
            v173 = *(unsigned int *)((char *)v177 + v173);
          if (v193 >= 0xB)
          {
            v194 = v192[5];
            if (v194)
            {
              v174 = *(int *)((char *)v177 + v194);
              goto LABEL_256;
            }
          }
        }
        v174 = 0;
LABEL_256:
        v175 = v36++;
        v176 = &v220[v175];
        *(_QWORD *)v176 = v173;
        *((_DWORD *)v176 + 2) = v174;
LABEL_257:
        if (++v32 == v172)
        {
          v195 = *v31;
          if ((_DWORD)v195)
          {
            v196 = 0;
            v197 = 4 * v195;
            v37 = v36;
            while (1)
            {
              v201 = v31[v196 / 4 + 1];
              v202 = (char *)&v31[v196 / 4] + v201;
              v203 = v201 - *((int *)v202 + 1);
              v204 = (char *)&v31[v196 / 4] + v203;
              v205 = *((unsigned __int16 *)v204 + 2);
              if (v205 < 5)
                goto LABEL_289;
              v206 = *((unsigned __int16 *)v204 + 4);
              if (!v206)
                goto LABEL_289;
              v207 = *((char *)&v31[v196 / 4 + 1] + v201 + v206);
              if (v207 == 9)
              {
                *(_QWORD *)&a12[2 * v37 + 4] = v215;
                v209 = v201 - *((int *)v202 + 1);
                v210 = *(unsigned __int16 *)((char *)&v31[v196 / 4 + 1] + v209);
                if (v210 < 9)
                  goto LABEL_286;
                if (*(_WORD *)((char *)&v31[v196 / 4 + 3] + v209))
                {
                  v198 = *(unsigned int *)((char *)&v31[v196 / 4 + 1]
                                         + v201
                                         + *(unsigned __int16 *)((char *)&v31[v196 / 4 + 3] + v209));
                  if (v210 < 0xB)
                    goto LABEL_287;
                }
                else
                {
                  v198 = 0;
                  if (v210 < 0xB)
                    goto LABEL_287;
                }
              }
              else
              {
                if (v207 == 7)
                {
                  *(_QWORD *)&a12[2 * v37 + 4] = v216;
                }
                else
                {
                  if (v207 != 6)
                    goto LABEL_289;
                  if (v205 < 0xD)
                  {
                    v208 = 0;
                  }
                  else
                  {
                    v208 = *(unsigned __int16 *)((char *)&v31[v196 / 4 + 4] + v203);
                    if (v208)
                      v208 = *(unsigned int *)((char *)&v31[v196 / 4 + 1] + v201 + v208);
                  }
                  *(_QWORD *)&a12[2 * v37 + 4] = v214 + 4 * v208;
                }
                v209 = v201 - *((int *)v202 + 1);
                v211 = (char *)&v31[v196 / 4] + v209;
                v212 = *((unsigned __int16 *)v211 + 2);
                if (v212 < 9)
                {
LABEL_286:
                  v198 = 0;
                  goto LABEL_287;
                }
                v198 = *((unsigned __int16 *)v211 + 6);
                if (v198)
                  v198 = *(unsigned int *)((char *)&v31[v196 / 4 + 1] + v201 + v198);
                if (v212 < 0xB)
                  goto LABEL_287;
              }
              v213 = *(unsigned __int16 *)((char *)&v31[v196 / 4 + 3] + v209 + 2);
              if (v213)
              {
                v199 = *(unsigned int *)((char *)&v31[v196 / 4 + 1] + v201 + v213);
                goto LABEL_288;
              }
LABEL_287:
              v199 = 0;
LABEL_288:
              v200 = &v220[v37];
              *(_QWORD *)v200 = v198;
              ++v37;
              *((_DWORD *)v200 + 2) = v199;
LABEL_289:
              v196 += 4;
              if (v197 == v196)
                goto LABEL_23;
            }
          }
          v37 = v36;
LABEL_23:
          v221 = v37;
          v38 = v37;
          v222 = (uint64_t)&a12[2 * v37 + 4];
          v39 = 2 * v37;
          v223 = 2 * v37;
          v40 = v36 - v34;
          v41 = v37 - v36;
          v42 = 2 * (v37 - 1) + 5;
          v24 = v37 == 0;
          v43 = 4;
          if (!v24)
            v43 = v42;
          v44 = ((v43 + v39) & 0x7FFFFFFFCLL) - v39;
          v225 = v44;
          v226 = (v38 & 0xFFFFFFFC) + 4;
          v227 = 0;
          *a12 = v34;
          a12[2] = v40;
          a12[3] = v41 + (v44 >> 1);
          v45 = 4 * ((v38 & 0xFFFFFFFC) + 4);
          *a11 = v45;
          AGX::Heap<true>::allocateImpl(&v218, a1, v45, 0);
          *a15 += LODWORD(v219[0]);
          v46 = v219[0];
          *(_OWORD *)a9 = v218;
          *(_OWORD *)(a9 + 16) = v46;
          *(_OWORD *)(a9 + 25) = *(_OWORD *)((char *)v219 + 9);
          *a10 = *(_QWORD *)a9;
          v224 = *(_QWORD *)(a9 + 8);
          AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)v220, 0);
          *a13 = v227;
          *a14 = (4 * (v225 + v223) + 12) & 0xFFFFFFFFFFFFFFF0;
          return 1;
        }
      }
    }
  }
  v57 = 1 - (v54 + v55);
  v58 = v34;
  while (1)
  {
    v64 = *(_QWORD *)(a3 + 96);
    v65 = *(_DWORD *)(v64 + 4 * v54);
    v66 = v65 & 0xFFF00000;
    if (v54 + 1 >= v56)
      break;
    v67 = 0;
    v68 = v56 - v54;
    do
    {
      v69 = *(_DWORD *)(v64 + 4 * (v54 + v67 + 1));
      if (v69 != -1 && v69 != ((v65 + 1 + v67) & 0xFFFFF | v66))
      {
        v68 = v67 + 1;
        if ((v65 & 0x80000000) != 0)
          goto LABEL_58;
        goto LABEL_52;
      }
      ++v67;
    }
    while (v57 + v54 + v67);
    if ((v65 & 0x80000000) == 0)
      goto LABEL_52;
LABEL_58:
    v72 = (v65 >> 20) & 0x7FF;
    if (a5)
    {
      if (v72 >= 0x23)
        v73 = -44;
      else
        v73 = 7;
      v71 = v73 + v72;
    }
    else
    {
      v71 = v72 + 65;
    }
LABEL_70:
    v74 = v58;
    a12[2 * v58 + 4] = v71;
LABEL_71:
    v76 = 4 * (v65 & 0xFFFFF);
LABEL_72:
    a12[2 * v74 + 5] = v76;
    v77 = (unsigned __int16 *)((char *)v51 - *v51);
    v78 = *v77;
    if (v78 < 0xB)
    {
      LODWORD(v59) = 0;
LABEL_41:
      LODWORD(v60) = 0;
      goto LABEL_42;
    }
    v59 = v77[5];
    if (v77[5])
      LODWORD(v59) = *(int *)((char *)v51 + v59);
    if (v78 < 0xD)
      goto LABEL_41;
    v60 = v77[6];
    if (v60)
      LODWORD(v60) = *(int *)((char *)v51 + v60);
LABEL_42:
    v61 = v68;
    v62 = v59 + v54 - v60;
    v34 = v58 + 1;
    v63 = &v220[v58];
    *(_QWORD *)v63 = v61;
    *((_DWORD *)v63 + 2) = v62;
    v54 += v61;
    ++v58;
    if (v54 >= v56)
      goto LABEL_29;
  }
  v68 = 1;
  if ((v65 & 0x80000000) != 0)
    goto LABEL_58;
LABEL_52:
  if (!a5)
  {
    v74 = v58;
    v75 = &a12[2 * v58 + 4];
    if ((v65 & 0x7FF00000) != 0)
      *v75 = 192;
    else
      *v75 = 398;
    goto LABEL_71;
  }
  switch(v66)
  {
    case 0x300000u:
      v71 = 5;
      goto LABEL_70;
    case 0x700000u:
      v74 = v58;
      a12[2 * v58 + 4] = 3;
      v76 = 4 * (v65 & 0xFFFFF) + 8 * ((*(_DWORD *)(a3 + 248) - *(_DWORD *)(a3 + 240)) >> 2);
      goto LABEL_72;
    case 0x600000u:
      v71 = 4;
      goto LABEL_70;
  }
  return 0;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;

  if (!*(_BYTE *)(a1 + 1516))
  {
    v2 = MEMORY[0x24BDAC760];
    if (*(_QWORD *)(a1 + 1072))
    {
      v3 = *(_QWORD *)(a1 + 1080);
      v4 = *(NSObject **)(v3 + 16);
      v23 = MEMORY[0x24BDAC760];
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v3;
      v28 = a1 + 1048;
      dispatch_sync(v4, &v23);
      *(_OWORD *)(a1 + 1073) = 0u;
      *(_OWORD *)(a1 + 1064) = 0u;
      *(_OWORD *)(a1 + 1048) = 0u;
    }
    if (*(_QWORD *)(a1 + 1024))
    {
      v5 = *(_QWORD *)(a1 + 1032);
      v6 = *(NSObject **)(v5 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v5;
      v28 = a1 + 1000;
      dispatch_sync(v6, &v23);
      *(_OWORD *)(a1 + 1025) = 0u;
      *(_OWORD *)(a1 + 1016) = 0u;
      *(_OWORD *)(a1 + 1000) = 0u;
    }
    if (*(_QWORD *)(a1 + 1168))
    {
      v7 = *(_QWORD *)(a1 + 1176);
      v8 = *(NSObject **)(v7 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v7;
      v28 = a1 + 1144;
      dispatch_sync(v8, &v23);
      *(_OWORD *)(a1 + 1169) = 0u;
      *(_OWORD *)(a1 + 1160) = 0u;
      *(_OWORD *)(a1 + 1144) = 0u;
    }
    if (*(_QWORD *)(a1 + 1120))
    {
      v9 = *(_QWORD *)(a1 + 1128);
      v10 = *(NSObject **)(v9 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v9;
      v28 = a1 + 1096;
      dispatch_sync(v10, &v23);
      *(_OWORD *)(a1 + 1121) = 0u;
      *(_OWORD *)(a1 + 1112) = 0u;
      *(_OWORD *)(a1 + 1096) = 0u;
    }
    if (*(_QWORD *)(a1 + 1224))
    {
      v11 = *(_QWORD *)(a1 + 1232);
      v12 = *(NSObject **)(v11 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v11;
      v28 = a1 + 1200;
      dispatch_sync(v12, &v23);
      *(_OWORD *)(a1 + 1225) = 0u;
      *(_OWORD *)(a1 + 1216) = 0u;
      *(_OWORD *)(a1 + 1200) = 0u;
    }
    if (*(_QWORD *)(a1 + 1272))
    {
      v13 = *(_QWORD *)(a1 + 1280);
      v14 = *(NSObject **)(v13 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v13;
      v28 = a1 + 1248;
      dispatch_sync(v14, &v23);
      *(_OWORD *)(a1 + 1273) = 0u;
      *(_OWORD *)(a1 + 1264) = 0u;
      *(_OWORD *)(a1 + 1248) = 0u;
    }
    if (*(_QWORD *)(a1 + 1320))
    {
      v15 = *(_QWORD *)(a1 + 1328);
      v16 = *(NSObject **)(v15 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v15;
      v28 = a1 + 1296;
      dispatch_sync(v16, &v23);
      *(_OWORD *)(a1 + 1321) = 0u;
      *(_OWORD *)(a1 + 1312) = 0u;
      *(_OWORD *)(a1 + 1296) = 0u;
    }
    if (*(_QWORD *)(a1 + 1368))
    {
      v17 = *(_QWORD *)(a1 + 1376);
      v18 = *(NSObject **)(v17 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v17;
      v28 = a1 + 1344;
      dispatch_sync(v18, &v23);
      *(_OWORD *)(a1 + 1369) = 0u;
      *(_OWORD *)(a1 + 1360) = 0u;
      *(_OWORD *)(a1 + 1344) = 0u;
    }
    if (*(_QWORD *)(a1 + 1416))
    {
      v19 = *(_QWORD *)(a1 + 1424);
      v20 = *(NSObject **)(v19 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v19;
      v28 = a1 + 1392;
      dispatch_sync(v20, &v23);
      *(_OWORD *)(a1 + 1417) = 0u;
      *(_OWORD *)(a1 + 1408) = 0u;
      *(_OWORD *)(a1 + 1392) = 0u;
    }
  }
  v21 = *(void **)(a1 + 1552);
  if (v21)
  {
    *(_QWORD *)(a1 + 1560) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 1551) < 0)
    operator delete(*(void **)(a1 + 1528));
  return a1;
}

unint64_t agxsGetShaderPassInfo(unint64_t result, unint64_t a2, unint64_t a3, _DWORD *a4, unsigned int *a5, BOOL *a6)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(result + 32) & 0xE00;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  *(_BYTE *)a5 = 0;
  v53 = 0;
  v54 = 0;
  v8 = *(unsigned __int8 *)(result + 32);
  if (*(_BYTE *)(result + 32))
  {
    v9 = 0;
    v10 = *(unsigned __int8 *)(result + 32);
    do
    {
      v11 = __clz(__rbit32(v10));
      v12 = *(_DWORD *)(result + 4 * v11) >> 5;
      ++*((_DWORD *)&v53 + (v12 - 1));
      v9 += v12;
      v10 ^= 1 << v11;
    }
    while (v10);
    v14 = v54;
    v13 = HIDWORD(v54);
    v15 = HIDWORD(v53);
  }
  else
  {
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v9 = 0;
  }
  v16 = v9 > v7;
  if (v9 <= v7)
    v17 = 0;
  else
    v17 = v13;
  v18 = v9 - v17;
  if (v18 <= v7)
    v19 = 0;
  else
    v19 = v14;
  if (v18 > v7)
    v16 = 2;
  v20 = v18 - v19;
  v21 = v14 + v15 + v13;
  if (v20 > v7)
  {
    v22 = 3;
  }
  else
  {
    v21 = 0;
    v22 = v16;
  }
  if (v20 - v21 <= v7)
    v23 = v22;
  else
    v23 = 4;
  if (v8)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = v23 - 1;
    do
    {
      v39 = __clz(__rbit32(v8));
      v38 = *(_DWORD *)(result + 4 * v39) >> 5;
      v40 = -1 << v38;
      v41 = ~(-1 << v38);
      v34 = (a2 >> (4 * v39)) & v41;
      v36 = (a3 >> (4 * v39)) & v41;
      switch(v28)
      {
        case 0:
          if (v38 == 4)
          {
            v34 = (v34 >> 1) & 6 | v34 & 3;
            v27 = (((v36 >> 1) ^ v36) & 2 | (unint64_t)v27) != 0;
            *(_BYTE *)a5 = v27;
            v36 = (v36 >> 1) & 6 | v36 & 3;
            v38 = 3;
          }
          break;
        case 1:
          if (v38 >= 3)
          {
            v34 = (v34 >> 1) & 6 | v34 & 3;
            v27 = (((v36 >> 1) ^ v36) & 2 | (unint64_t)v27) != 0;
            *(_BYTE *)a5 = v27;
            v36 = (v36 >> 1) & 6 | v36 & 3;
            --v38;
          }
          break;
        case 2:
          if (v38 >= 2)
          {
            v42 = (v40 + 8);
            v43 = ((v42 & ((uint64_t)(v34 << 62) >> 63) | v34) >> 2) & 2 | (((v42 & ((uint64_t)(v34 << 62) >> 63) | v34) & 7) != 0);
            v44 = v42 & ((uint64_t)(v36 << 62) >> 63) | v36;
            v34 = (v34 >> 2) & 2 | ((v34 & 7) != 0);
            if (v38 == 2)
            {
              v34 = v43;
              v36 = v44;
            }
            v45 = (v36 & 7) != 7 && (v36 & 7) != 0;
            v27 |= v45;
            *(_BYTE *)a5 = v27;
            v36 = (v36 >> 2) & 2 | ((v36 & 7) != 0);
            if (v38 == 4)
              v38 = 2;
            else
              v38 = 1;
          }
          break;
        case 3:
          v29 = v40 + 16;
          v30 = (1 << (v38 - 1));
          if ((v34 & v30) != 0)
            v31 = v29;
          else
            v31 = 0;
          v32 = v31 | v34;
          if ((v36 & v30) == 0)
            v29 = 0;
          v33 = v29 | v36;
          if (v38 > 3)
          {
            v35 = v36;
          }
          else
          {
            v34 = v32;
            v35 = v33;
          }
          v34 = v34 != 0;
          v36 = v35 != 0;
          v37 = v35 != 15 && v35 != 0;
          v27 |= v37;
          *(_BYTE *)a5 = v27;
          v38 = 1;
          break;
        default:
          break;
      }
      v24 |= v34 << v26;
      v25 |= v36 << v26;
      v26 += v38;
      v8 ^= 1 << v39;
    }
    while (v8);
    if (v26 <= v7)
    {
      *(_BYTE *)a5 = (v24 & v25 | v27) != 0;
      if (v26)
      {
        if (v26 < v7)
        {
          v52 = (-1 << v26) + (1 << v7);
          if ((v25 & (1 << (v26 - 1))) == 0)
            v52 = 0;
          LODWORD(v25) = v52 | v25;
        }
      }
      else
      {
        LODWORD(v25) = 0;
      }
    }
    else
    {
      v46 = ~(-1 << v7);
      v47 = v24 & v46;
      v48 = v25 & v46;
      do
      {
        v24 >>= v7;
        v25 >>= v7;
        v49 = v26 - v7;
        if (v7 >= v26 - v7)
          v50 = v26 - v7;
        else
          v50 = v7;
        v51 = ~(-1 << v50);
        result = (v48 ^ v25) & v51 | (unint64_t)v27;
        LOBYTE(v27) = result != 0;
        v47 |= v24 & v51;
        v48 |= v25 & v51;
        v26 = v49;
      }
      while (v7 < v49);
      *(_BYTE *)a5 = (v47 & v48 | (result != 0)) != 0;
      LODWORD(v25) = v48;
    }
  }
  else
  {
    LODWORD(v25) = 0;
    *(_BYTE *)a5 = 0;
  }
  *a4 = v25;
  if (v6)
  {
    if (*(_BYTE *)a5)
      *a4 = v25 | (1 << v7);
  }
  return result;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(uint64_t result)
{
  unsigned int v1;
  int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v1 = *(_QWORD *)(result + 872) != 0;
  *(_DWORD *)(result + 992) = v1;
  if (*(_QWORD *)(result + 880))
  {
    v1 |= 2u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 888))
  {
    v1 |= 4u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 896))
  {
    v1 |= 8u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 904))
  {
    v1 |= 0x10u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 912))
  {
    v1 |= 0x20u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 920))
  {
    v1 |= 0x40u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 928))
  {
    v1 |= 0x80u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 936))
  {
    v1 |= 0x100u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 944))
  {
    v1 |= 0x200u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 952))
  {
    v1 |= 0x400u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 960))
  {
    v1 |= 0x800u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 968))
  {
    v1 |= 0x1000u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 976))
  {
    v1 |= 0x2000u;
    *(_DWORD *)(result + 992) = v1;
  }
  if (*(_QWORD *)(result + 984))
  {
    v1 |= 0x4000u;
    *(_DWORD *)(result + 992) = v1;
  }
  v2 = (int *)MEMORY[0x24BE51650];
  v3 = v1;
  do
  {
    v4 = __clz(__rbit32(v3));
    v5 = v3 & ~(1 << v4);
    if (!v5)
      break;
    v6 = (_QWORD *)(result + 8 * v4 + 872);
    v7 = *v2;
    v3 = v5;
    do
    {
      v8 = __clz(__rbit32(v5));
      v9 = 1 << v8;
      if (*(_DWORD *)(*v6 + v7 + 48) == *(_DWORD *)(*(_QWORD *)(result + 8 * v8 + 872) + v7 + 48))
      {
        v1 &= ~v9;
        *(_DWORD *)(result + 992) = v1;
        v3 &= ~v9;
      }
      v5 &= ~v9;
    }
    while (v5);
  }
  while (v3);
  return result;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::encodeConstantPDS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, unint64_t *a14, _DWORD *a15)
{
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  BOOL v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v44;
  int v45;
  _OWORD *v46;
  int *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned __int16 *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned __int16 *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int *v100;
  unsigned int *v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned __int16 *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int *v123;
  unsigned int *v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned __int16 *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  unsigned int v146;
  unsigned int *v147;
  unsigned int *v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned __int16 *v153;
  unsigned int v154;
  unsigned int *v155;
  _DWORD *v156;
  unsigned __int16 *v157;
  uint64_t v158;
  unsigned __int16 *v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  _OWORD *v166;
  int *v167;
  unsigned __int16 *v168;
  unsigned int v169;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  _DWORD *v179;
  unsigned __int16 *v180;
  uint64_t v181;
  unsigned __int16 *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  _OWORD *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  char *v201;
  unsigned int v202;
  uint64_t v203;
  __int128 v209;
  _OWORD v210[2];
  _OWORD v211[32];
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;

  v17 = (unsigned int **)(a2 + 224);
  if (*(_QWORD *)(a2 + 224))
  {
    if (!*(_QWORD *)(a2 + 232))
      v17 = (unsigned int **)(a2 + 784);
  }
  else
  {
    v17 = (unsigned int **)(a2 + 784);
  }
  v19 = *v17;
  v18 = v17[1];
  if (v19)
    v20 = v18 == 0;
  else
    v20 = 1;
  if (v20)
    v21 = 0;
  else
    v21 = (int *)((char *)v19 + *v19);
  v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (v23 = v22[2]) != 0)
    v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  else
    v24 = 0;
  v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 9u && (v26 = v25[4]) != 0)
    v27 = (unsigned int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
  else
    v27 = 0;
  bzero(v211, 0x248uLL);
  bzero(a12, 0x240uLL);
  v28 = v27 + 1;
  v29 = *v27;
  if (!(_DWORD)v29)
  {
    v32 = 0;
    v30 = 0;
    v33 = 0;
    goto LABEL_23;
  }
  v30 = 0;
  v31 = v27 + 1;
  while (1)
  {
    v47 = (int *)((char *)v31 + *v31);
    v48 = (unsigned __int16 *)((char *)v47 - *v47);
    v49 = *v48;
    if (v49 < 5)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      goto LABEL_38;
    }
    if (v48[2])
    {
      switch(*((_BYTE *)v47 + v48[2]))
      {
        case 0:
          goto LABEL_33;
        case 1:
          if (v49 < 0xD)
          {
            v73 = 0;
            LODWORD(v74) = 0;
            if (v49 >= 9)
            {
              v74 = v48[4];
              if (v48[4])
                goto LABEL_111;
            }
          }
          else
          {
            if (v48[6])
            {
              v73 = *(int *)((char *)v47 + v48[6]);
              v74 = v48[4];
              if (!v48[4])
                goto LABEL_112;
LABEL_111:
              LODWORD(v74) = *(int *)((char *)v47 + v74);
              goto LABEL_112;
            }
            v73 = 0;
            v74 = v48[4];
            if (v48[4])
              goto LABEL_111;
          }
LABEL_112:
          v86 = v74 + v73;
          if (v73 >= v74 + v73)
            goto LABEL_29;
          v87 = (v86 >> 1) & 0x1FFFFFFF;
          v88 = v30;
          while (1)
          {
            v93 = (v73 >> 1) & 0x1FFFFFFF;
            v94 = *(_QWORD *)(a3 + 24);
            v95 = *(_DWORD *)(v94 + 4 * v93);
            v96 = v95 & 0xFFF00000;
            if (v93 + 1 >= v87)
            {
              v97 = 1;
              if ((v95 & 0x80000000) != 0)
                goto LABEL_132;
            }
            else
            {
              v97 = 1;
              while (1)
              {
                v98 = *(_DWORD *)(v94 + 4 * (v93 + v97));
                if (v98 != -1 && v98 != ((v95 + v97) & 0xFFFFF | v96))
                  break;
                ++v97;
                if (!(v93 - v87 + v97))
                {
                  v97 = v87 - v93;
                  break;
                }
              }
              if ((v95 & 0x80000000) != 0)
              {
LABEL_132:
                v103 = (v95 >> 20) & 0x7FF;
                if (a5)
                {
                  if (v103 >= 0x23)
                    v104 = v103 == 40;
                  else
                    v104 = v103 + 6;
                }
                else
                {
                  v104 = v103 + 67;
                }
                v105 = &a12[2 * v88];
                v105[4] = v104;
                v101 = v105 + 4;
                v102 = 8 * (v95 & 0xFFFFF);
                goto LABEL_142;
              }
            }
            if (a5)
            {
              if (v96 == 7340032)
              {
                v106 = &a12[2 * v88];
                v106[4] = 2;
                v101 = v106 + 4;
                v102 = 8 * (v95 & 0xFFFFF);
              }
              else
              {
                if (v96 != 3145728)
                  return 0;
                v100 = &a12[2 * v88];
                v100[4] = 4;
                v101 = v100 + 4;
                v102 = 8 * (v95 & 0xFFFFF);
              }
            }
            else
            {
              v101 = &a12[2 * v88 + 4];
              if ((v95 & 0x7FF00000) != 0)
              {
                *v101 = 197;
                v102 = 8 * (v95 & 0xFFFFF);
              }
              else
              {
                *v101 = 403;
                v102 = 8 * ((v95 & 0xFFFFF) - *(_DWORD *)(a3 + 120));
              }
            }
LABEL_142:
            v101[1] = v102;
            v107 = (unsigned __int16 *)((char *)v47 - *v47);
            v108 = *v107;
            if (v108 < 0xB)
            {
              LODWORD(v89) = 0;
            }
            else
            {
              v89 = v107[5];
              if (v107[5])
                LODWORD(v89) = *(int *)((char *)v47 + v89);
              if (v108 >= 0xD)
              {
                v90 = v107[6];
                if (v90)
                  LODWORD(v90) = *(int *)((char *)v47 + v90);
                goto LABEL_116;
              }
            }
            LODWORD(v90) = 0;
LABEL_116:
            v91 = (2 * v97);
            v30 = v88 + 1;
            v92 = &v211[v88];
            *(_QWORD *)v92 = v91;
            *((_DWORD *)v92 + 2) = v89 + v73 - v90;
            v73 += v91;
            ++v88;
            if (v73 >= v86)
              goto LABEL_29;
          }
        case 2:
          if (v49 < 0xD)
          {
            v75 = 0;
            LODWORD(v76) = 0;
            if (v49 >= 9)
            {
              v76 = v48[4];
              if (v48[4])
                goto LABEL_150;
            }
          }
          else
          {
            if (v48[6])
            {
              v75 = *(int *)((char *)v47 + v48[6]);
              v76 = v48[4];
              if (!v48[4])
                goto LABEL_151;
LABEL_150:
              LODWORD(v76) = *(int *)((char *)v47 + v76);
              goto LABEL_151;
            }
            v75 = 0;
            v76 = v48[4];
            if (v48[4])
              goto LABEL_150;
          }
LABEL_151:
          v109 = v76 + v75;
          if (v75 >= v76 + v75)
            goto LABEL_29;
          v110 = (v109 >> 1) & 0x1FFFFFFF;
          v111 = v30;
          while (1)
          {
            v116 = (v75 >> 1) & 0x1FFFFFFF;
            v117 = *(_QWORD *)(a3 + 48);
            v118 = *(_DWORD *)(v117 + 4 * v116);
            v119 = v118 & 0xFFF00000;
            if (v116 + 1 >= v110)
            {
              v120 = 1;
              if ((v118 & 0x80000000) != 0)
                goto LABEL_171;
            }
            else
            {
              v120 = 1;
              while (1)
              {
                v121 = *(_DWORD *)(v117 + 4 * (v116 + v120));
                if (v121 != -1 && v121 != ((v118 + v120) & 0xFFFFF | v119))
                  break;
                ++v120;
                if (!(v116 - v110 + v120))
                {
                  v120 = v110 - v116;
                  break;
                }
              }
              if ((v118 & 0x80000000) != 0)
              {
LABEL_171:
                v126 = (v118 >> 20) & 0x7FF;
                if (a5)
                {
                  if (v126 >= 0x23)
                    v127 = v126 == 40;
                  else
                    v127 = v126 + 6;
                }
                else
                {
                  v127 = v126 + 67;
                }
                v128 = &a12[2 * v111];
                v128[4] = v127;
                v124 = v128 + 4;
                v125 = 8 * (v118 & 0xFFFFF);
                goto LABEL_181;
              }
            }
            if (a5)
            {
              if (v119 == 7340032)
              {
                v129 = &a12[2 * v111];
                v129[4] = 2;
                v124 = v129 + 4;
                v125 = 8 * (v118 & 0xFFFFF);
              }
              else
              {
                if (v119 != 3145728)
                  return 0;
                v123 = &a12[2 * v111];
                v123[4] = 4;
                v124 = v123 + 4;
                v125 = 8 * (v118 & 0xFFFFF);
              }
            }
            else
            {
              v124 = &a12[2 * v111 + 4];
              if ((v118 & 0x7FF00000) != 0)
              {
                *v124 = 197;
                v125 = 8 * (v118 & 0xFFFFF);
              }
              else
              {
                *v124 = 403;
                v125 = 8 * (*(_DWORD *)(a3 + 124) + (v118 & 0xFFFFF) - (*(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128)));
              }
            }
LABEL_181:
            v124[1] = v125;
            v130 = (unsigned __int16 *)((char *)v47 - *v47);
            v131 = *v130;
            if (v131 < 0xB)
            {
              LODWORD(v112) = 0;
            }
            else
            {
              v112 = v130[5];
              if (v130[5])
                LODWORD(v112) = *(int *)((char *)v47 + v112);
              if (v131 >= 0xD)
              {
                v113 = v130[6];
                if (v113)
                  LODWORD(v113) = *(int *)((char *)v47 + v113);
                goto LABEL_155;
              }
            }
            LODWORD(v113) = 0;
LABEL_155:
            v114 = (2 * v120);
            v30 = v111 + 1;
            v115 = &v211[v111];
            *(_QWORD *)v115 = v114;
            *((_DWORD *)v115 + 2) = v112 + v75 - v113;
            v75 += v114;
            ++v111;
            if (v75 >= v109)
              goto LABEL_29;
          }
        case 3:
          if (v49 < 0xD)
          {
            v77 = 0;
            LODWORD(v78) = 0;
            if (v49 >= 9)
            {
              v78 = v48[4];
              if (v48[4])
                goto LABEL_189;
            }
          }
          else
          {
            if (v48[6])
            {
              v77 = *(int *)((char *)v47 + v48[6]);
              v78 = v48[4];
              if (!v48[4])
                goto LABEL_190;
LABEL_189:
              LODWORD(v78) = *(int *)((char *)v47 + v78);
              goto LABEL_190;
            }
            v77 = 0;
            v78 = v48[4];
            if (v48[4])
              goto LABEL_189;
          }
LABEL_190:
          v132 = v78 + v77;
          if (v77 >= v78 + v77)
            goto LABEL_29;
          v133 = (v132 >> 1) & 0x1FFFFFFF;
          v134 = v30;
          break;
        case 5:
          if (v49 < 7)
          {
            v80 = 0;
            if (a5)
              goto LABEL_97;
            goto LABEL_226;
          }
          v79 = v48[3];
          if (!v48[3] || (LODWORD(v79) = *(int *)((char *)v47 + v79), (v79 & 0x80000000) == 0))
          {
            v80 = v79 & 0xFFFFF;
            if (a5)
            {
LABEL_97:
              if (v80 >= 0x23)
                v81 = v80 == 40;
              else
                v81 = v80 + 6;
LABEL_227:
              v155 = &a12[2 * v30];
              v155[4] = v81;
              v156 = v155 + 4;
              v157 = (unsigned __int16 *)((char *)v47 - *v47);
              if (*v157 < 0xDu)
              {
                LODWORD(v158) = 0;
              }
              else
              {
                v158 = v157[6];
                if (v158)
                  LODWORD(v158) = *(int *)((char *)v47 + v158);
              }
              v82 = v30;
              v156[1] = 4 * v158;
              v159 = (unsigned __int16 *)((char *)v47 - *v47);
              v160 = *v159;
              if (v160 < 9)
              {
LABEL_26:
                v44 = 0;
              }
              else
              {
                v44 = v159[4];
                if (v159[4])
                  v44 = *(unsigned int *)((char *)v47 + v44);
                if (v160 >= 0xB)
                {
                  v85 = v159[5];
                  if (v159[5])
                  {
LABEL_236:
                    v45 = *(int *)((char *)v47 + v85);
                    goto LABEL_28;
                  }
                }
              }
LABEL_27:
              v45 = 0;
LABEL_28:
              v46 = &v211[v82];
              *(_QWORD *)v46 = v44;
              ++v30;
              *((_DWORD *)v46 + 2) = v45;
              goto LABEL_29;
            }
LABEL_226:
            v81 = v80 + 67;
            goto LABEL_227;
          }
          goto LABEL_29;
        case 8:
          if ((a5 & 1) != 0)
            return 0;
          v82 = v30;
          *(_QWORD *)&a12[2 * v30 + 4] = 405;
          v83 = (unsigned __int16 *)((char *)v47 - *v47);
          v84 = *v83;
          if (v84 < 9)
            goto LABEL_26;
          v44 = v83[4];
          if (v83[4])
            v44 = *(unsigned int *)((char *)v47 + v44);
          if (v84 < 0xB)
            goto LABEL_27;
          v85 = v83[5];
          if (!v85)
            goto LABEL_27;
          goto LABEL_236;
        default:
          goto LABEL_29;
      }
      while (1)
      {
        v139 = (v77 >> 1) & 0x1FFFFFFF;
        v140 = *(_QWORD *)(a3 + 72);
        v141 = *(_DWORD *)(v140 + 4 * v139);
        v142 = v141 & 0xFFF00000;
        if (v139 + 1 >= v133)
        {
          v143 = 1;
          if ((v141 & 0x80000000) != 0)
            goto LABEL_210;
        }
        else
        {
          v143 = 1;
          while (1)
          {
            v144 = *(_DWORD *)(v140 + 4 * (v139 + v143));
            if (v144 != -1 && v144 != ((v141 + v143) & 0xFFFFF | v142))
              break;
            ++v143;
            if (!(v139 - v133 + v143))
            {
              v143 = v133 - v139;
              break;
            }
          }
          if ((v141 & 0x80000000) != 0)
          {
LABEL_210:
            v150 = (v141 >> 20) & 0x7FF;
            if (a5)
            {
              if (v150 >= 0x23)
                v151 = v150 == 40;
              else
                v151 = v150 + 6;
            }
            else
            {
              v151 = v150 + 67;
            }
            v152 = &a12[2 * v134];
            v152[4] = v151;
            v148 = v152 + 4;
            v149 = 8 * (v141 & 0xFFFFF);
            goto LABEL_219;
          }
        }
        if (a5)
        {
          if ((v142 - 0x200000) >> 21 > 2)
            return 0;
          v146 = (v142 - 0x200000) >> 20;
          if (((0x33u >> v146) & 1) == 0)
            return 0;
          v147 = &a12[2 * v134];
          v147[4] = dword_232D7C8B0[v146];
          v148 = v147 + 4;
          v149 = 8 * (v141 & 0xFFFFF);
        }
        else
        {
          v148 = &a12[2 * v134 + 4];
          if ((v141 & 0x7FF00000) != 0)
          {
            *v148 = 197;
            v149 = 8 * (v141 & 0xFFFFF);
          }
          else
          {
            *v148 = 403;
            v149 = 8
                 * (*(_DWORD *)(a3 + 124)
                  + *(_DWORD *)(a3 + 132)
                  + (v141 & 0xFFFFF)
                  - (*(_DWORD *)(a3 + 120)
                   + *(_DWORD *)(a3 + 128)
                   + *(_DWORD *)(a3 + 136)));
          }
        }
LABEL_219:
        v148[1] = v149;
        v153 = (unsigned __int16 *)((char *)v47 - *v47);
        v154 = *v153;
        if (v154 < 0xB)
        {
          LODWORD(v135) = 0;
        }
        else
        {
          v135 = v153[5];
          if (v153[5])
            LODWORD(v135) = *(int *)((char *)v47 + v135);
          if (v154 >= 0xD)
          {
            v136 = v153[6];
            if (v136)
              LODWORD(v136) = *(int *)((char *)v47 + v136);
            goto LABEL_194;
          }
        }
        LODWORD(v136) = 0;
LABEL_194:
        v137 = (2 * v143);
        v30 = v134 + 1;
        v138 = &v211[v134];
        *(_QWORD *)v138 = v137;
        *((_DWORD *)v138 + 2) = v135 + v77 - v136;
        v77 += v137;
        ++v134;
        if (v77 >= v132)
          goto LABEL_29;
      }
    }
LABEL_33:
    if (v49 < 0xD)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      if (v49 >= 9)
      {
        v51 = v48[4];
        if (v48[4])
LABEL_80:
          LODWORD(v51) = *(int *)((char *)v47 + v51);
      }
    }
    else if (v48[6])
    {
      v50 = *(int *)((char *)v47 + v48[6]);
      v51 = v48[4];
      if (v48[4])
        goto LABEL_80;
    }
    else
    {
      v50 = 0;
      v51 = v48[4];
      if (v48[4])
        goto LABEL_80;
    }
LABEL_38:
    v52 = v51 + v50;
    if (v50 < v51 + v50)
      break;
LABEL_29:
    if (++v31 == &v28[v29])
    {
      v161 = *v27;
      if (!(_DWORD)v161)
      {
        v32 = v30;
        v33 = v30;
        goto LABEL_23;
      }
      v162 = &v28[v161];
      v32 = v30;
      while (1)
      {
        v167 = (int *)((char *)v28 + *v28);
        v168 = (unsigned __int16 *)((char *)v167 - *v167);
        v169 = *v168;
        if (v169 < 5 || !v168[2])
          goto LABEL_250;
        if (v169 < 7 || *((_BYTE *)v167 + v168[2]) != 5)
          goto LABEL_250;
        v171 = v168[3];
        if (!v171)
          goto LABEL_250;
        v172 = *(unsigned int *)((char *)v167 + v171);
        if ((v172 & 0x80000000) == 0)
          goto LABEL_250;
        v173 = (v172 >> 20) & 0x7FF;
        v174 = *(uint64_t **)(*(_QWORD *)(a4 + 8 * v173) + 48);
        if (!v174)
LABEL_307:
          abort();
        v175 = v172 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v176 = *((_DWORD *)v174 + 7);
            if (v176 <= v175)
              break;
            v174 = (uint64_t *)*v174;
            if (!v174)
              goto LABEL_307;
          }
          if (v176 >= v175)
            break;
          v174 = (uint64_t *)v174[1];
          if (!v174)
            goto LABEL_307;
        }
        v177 = *((_DWORD *)v174 + 8);
        v178 = &a12[2 * v32];
        *((_WORD *)v178 + 8) = v173;
        v179 = v178 + 4;
        *((_WORD *)v179 + 1) = v177 >> 3;
        v180 = (unsigned __int16 *)((char *)v167 - *v167);
        if (*v180 < 0xDu)
        {
          LODWORD(v181) = 0;
        }
        else
        {
          v181 = v180[6];
          if (v181)
            LODWORD(v181) = *(int *)((char *)v167 + v181);
        }
        v179[1] = 4 * v181;
        v182 = (unsigned __int16 *)((char *)v167 - *v167);
        v183 = *v182;
        if (v183 < 9)
        {
          v163 = 0;
        }
        else
        {
          v163 = v182[4];
          if (v182[4])
            v163 = *(unsigned int *)((char *)v167 + v163);
          if (v183 >= 0xB)
          {
            v184 = v182[5];
            if (v184)
            {
              v164 = *(int *)((char *)v167 + v184);
              goto LABEL_249;
            }
          }
        }
        v164 = 0;
LABEL_249:
        v165 = v32++;
        v166 = &v211[v165];
        *(_QWORD *)v166 = v163;
        *((_DWORD *)v166 + 2) = v164;
LABEL_250:
        if (++v28 == v162)
        {
          v185 = *v27;
          if ((_DWORD)v185)
          {
            v186 = 0;
            v187 = 4 * v185;
            v33 = v32;
            while (1)
            {
              v191 = v27[v186 / 4 + 1];
              v192 = (char *)&v27[v186 / 4] + v191;
              v193 = v191 - *((int *)v192 + 1);
              v194 = (char *)&v27[v186 / 4] + v193;
              v195 = *((unsigned __int16 *)v194 + 2);
              if (v195 < 5)
                goto LABEL_282;
              v196 = *((unsigned __int16 *)v194 + 4);
              if (!v196)
                goto LABEL_282;
              v197 = *((char *)&v27[v186 / 4 + 1] + v191 + v196);
              if (v197 == 9)
              {
                *(_QWORD *)&a12[2 * v33 + 4] = a7;
                v199 = v191 - *((int *)v192 + 1);
                v200 = *(unsigned __int16 *)((char *)&v27[v186 / 4 + 1] + v199);
                if (v200 < 9)
                  goto LABEL_279;
                if (*(_WORD *)((char *)&v27[v186 / 4 + 3] + v199))
                {
                  v188 = *(unsigned int *)((char *)&v27[v186 / 4 + 1]
                                         + v191
                                         + *(unsigned __int16 *)((char *)&v27[v186 / 4 + 3] + v199));
                  if (v200 < 0xB)
                    goto LABEL_280;
                }
                else
                {
                  v188 = 0;
                  if (v200 < 0xB)
                    goto LABEL_280;
                }
              }
              else
              {
                if (v197 == 7)
                {
                  *(_QWORD *)&a12[2 * v33 + 4] = a8;
                }
                else
                {
                  if (v197 != 6)
                    goto LABEL_282;
                  if (v195 < 0xD)
                  {
                    v198 = 0;
                  }
                  else
                  {
                    v198 = *(unsigned __int16 *)((char *)&v27[v186 / 4 + 4] + v193);
                    if (v198)
                      v198 = *(unsigned int *)((char *)&v27[v186 / 4 + 1] + v191 + v198);
                  }
                  *(_QWORD *)&a12[2 * v33 + 4] = a6 + 4 * v198;
                }
                v199 = v191 - *((int *)v192 + 1);
                v201 = (char *)&v27[v186 / 4] + v199;
                v202 = *((unsigned __int16 *)v201 + 2);
                if (v202 < 9)
                {
LABEL_279:
                  v188 = 0;
                  goto LABEL_280;
                }
                v188 = *((unsigned __int16 *)v201 + 6);
                if (v188)
                  v188 = *(unsigned int *)((char *)&v27[v186 / 4 + 1] + v191 + v188);
                if (v202 < 0xB)
                  goto LABEL_280;
              }
              v203 = *(unsigned __int16 *)((char *)&v27[v186 / 4 + 3] + v199 + 2);
              if (v203)
              {
                v189 = *(unsigned int *)((char *)&v27[v186 / 4 + 1] + v191 + v203);
                goto LABEL_281;
              }
LABEL_280:
              v189 = 0;
LABEL_281:
              v190 = &v211[v33];
              *(_QWORD *)v190 = v188;
              ++v33;
              *((_DWORD *)v190 + 2) = v189;
LABEL_282:
              v186 += 4;
              if (v187 == v186)
                goto LABEL_23;
            }
          }
          v33 = v32;
LABEL_23:
          v212 = v33;
          v34 = v33;
          v213 = (uint64_t)&a12[2 * v33 + 4];
          v35 = 2 * v33;
          v214 = 2 * v33;
          v36 = v32 - v30;
          v37 = v33 - v32;
          v38 = 2 * (v33 - 1) + 5;
          v20 = v33 == 0;
          v39 = 4;
          if (!v20)
            v39 = v38;
          v40 = ((v39 + v35) & 0x7FFFFFFFCLL) - v35;
          v216 = v40;
          v217 = (v34 & 0xFFFFFFFC) + 4;
          v218 = 0;
          *a12 = v30;
          a12[2] = v36;
          a12[3] = v37 + (v40 >> 1);
          v41 = 4 * ((v34 & 0xFFFFFFFC) + 4);
          *a11 = v41;
          AGX::Heap<true>::allocateImpl(&v209, a1, v41, 0);
          *a15 += LODWORD(v210[0]);
          v42 = v210[0];
          *(_OWORD *)a9 = v209;
          *(_OWORD *)(a9 + 16) = v42;
          *(_OWORD *)(a9 + 25) = *(_OWORD *)((char *)v210 + 9);
          *a10 = *(_QWORD *)a9;
          v215 = *(_QWORD *)(a9 + 8);
          AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)v211, 0);
          *a13 = v218;
          *a14 = (4 * (v216 + v214) + 12) & 0xFFFFFFFFFFFFFFF0;
          return 1;
        }
      }
    }
  }
  v53 = 1 - (v50 + v51);
  v54 = v30;
  while (1)
  {
    v59 = *(_QWORD *)(a3 + 96);
    v60 = *(_DWORD *)(v59 + 4 * v50);
    v61 = v60 & 0xFFF00000;
    if (v50 + 1 >= v52)
      break;
    v62 = 0;
    v63 = v52 - v50;
    do
    {
      v64 = *(_DWORD *)(v59 + 4 * (v50 + v62 + 1));
      if (v64 != -1 && v64 != ((v60 + 1 + v62) & 0xFFFFF | v61))
      {
        v63 = v62 + 1;
        if ((v60 & 0x80000000) != 0)
          goto LABEL_58;
        goto LABEL_52;
      }
      ++v62;
    }
    while (v53 + v50 + v62);
    if ((v60 & 0x80000000) == 0)
      goto LABEL_52;
LABEL_58:
    v67 = (v60 >> 20) & 0x7FF;
    if (a5)
    {
      if (v67 >= 0x23)
        v66 = v67 == 40;
      else
        v66 = v67 + 6;
LABEL_69:
      v68 = v54;
      a12[2 * v54 + 4] = v66;
    }
    else
    {
      v68 = v54;
      a12[2 * v54 + 4] = v67 + 67;
    }
LABEL_70:
    v70 = 4 * (v60 & 0xFFFFF);
LABEL_71:
    a12[2 * v68 + 5] = v70;
    v71 = (unsigned __int16 *)((char *)v47 - *v47);
    v72 = *v71;
    if (v72 < 0xB)
    {
      LODWORD(v55) = 0;
LABEL_41:
      LODWORD(v56) = 0;
      goto LABEL_42;
    }
    v55 = v71[5];
    if (v71[5])
      LODWORD(v55) = *(int *)((char *)v47 + v55);
    if (v72 < 0xD)
      goto LABEL_41;
    v56 = v71[6];
    if (v56)
      LODWORD(v56) = *(int *)((char *)v47 + v56);
LABEL_42:
    v57 = v63;
    v30 = v54 + 1;
    v58 = &v211[v54];
    *(_QWORD *)v58 = v57;
    *((_DWORD *)v58 + 2) = v55 + v50 - v56;
    v50 += v57;
    ++v54;
    if (v50 >= v52)
      goto LABEL_29;
  }
  v63 = 1;
  if ((v60 & 0x80000000) != 0)
    goto LABEL_58;
LABEL_52:
  if (!a5)
  {
    v68 = v54;
    v69 = &a12[2 * v54 + 4];
    if ((v60 & 0x7FF00000) != 0)
      *v69 = 198;
    else
      *v69 = 404;
    goto LABEL_70;
  }
  switch(v61)
  {
    case 0x300000u:
      v66 = 4;
      goto LABEL_69;
    case 0x700000u:
      v68 = v54;
      a12[2 * v54 + 4] = 2;
      v70 = 4 * (v60 & 0xFFFFF) + 8 * ((*(_DWORD *)(a3 + 248) - *(_DWORD *)(a3 + 240)) >> 2);
      goto LABEL_71;
    case 0x600000u:
      v66 = 3;
      goto LABEL_69;
  }
  return 0;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;

  if (!*(_BYTE *)(a1 + 1524))
  {
    v2 = MEMORY[0x24BDAC760];
    if (*(_QWORD *)(a1 + 1080))
    {
      v3 = *(_QWORD *)(a1 + 1088);
      v4 = *(NSObject **)(v3 + 16);
      v23 = MEMORY[0x24BDAC760];
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v3;
      v28 = a1 + 1056;
      dispatch_sync(v4, &v23);
      *(_OWORD *)(a1 + 1081) = 0u;
      *(_OWORD *)(a1 + 1072) = 0u;
      *(_OWORD *)(a1 + 1056) = 0u;
    }
    if (*(_QWORD *)(a1 + 1032))
    {
      v5 = *(_QWORD *)(a1 + 1040);
      v6 = *(NSObject **)(v5 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v5;
      v28 = a1 + 1008;
      dispatch_sync(v6, &v23);
      *(_OWORD *)(a1 + 1033) = 0u;
      *(_OWORD *)(a1 + 1008) = 0u;
      *(_OWORD *)(a1 + 1024) = 0u;
    }
    if (*(_QWORD *)(a1 + 1176))
    {
      v7 = *(_QWORD *)(a1 + 1184);
      v8 = *(NSObject **)(v7 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v7;
      v28 = a1 + 1152;
      dispatch_sync(v8, &v23);
      *(_OWORD *)(a1 + 1177) = 0u;
      *(_OWORD *)(a1 + 1168) = 0u;
      *(_OWORD *)(a1 + 1152) = 0u;
    }
    if (*(_QWORD *)(a1 + 1128))
    {
      v9 = *(_QWORD *)(a1 + 1136);
      v10 = *(NSObject **)(v9 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v9;
      v28 = a1 + 1104;
      dispatch_sync(v10, &v23);
      *(_OWORD *)(a1 + 1129) = 0u;
      *(_OWORD *)(a1 + 1120) = 0u;
      *(_OWORD *)(a1 + 1104) = 0u;
    }
    if (*(_QWORD *)(a1 + 1232))
    {
      v11 = *(_QWORD *)(a1 + 1240);
      v12 = *(NSObject **)(v11 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v11;
      v28 = a1 + 1208;
      dispatch_sync(v12, &v23);
      *(_OWORD *)(a1 + 1233) = 0u;
      *(_OWORD *)(a1 + 1208) = 0u;
      *(_OWORD *)(a1 + 1224) = 0u;
    }
    if (*(_QWORD *)(a1 + 1280))
    {
      v13 = *(_QWORD *)(a1 + 1288);
      v14 = *(NSObject **)(v13 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v13;
      v28 = a1 + 1256;
      dispatch_sync(v14, &v23);
      *(_OWORD *)(a1 + 1281) = 0u;
      *(_OWORD *)(a1 + 1256) = 0u;
      *(_OWORD *)(a1 + 1272) = 0u;
    }
    if (*(_QWORD *)(a1 + 1328))
    {
      v15 = *(_QWORD *)(a1 + 1336);
      v16 = *(NSObject **)(v15 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v15;
      v28 = a1 + 1304;
      dispatch_sync(v16, &v23);
      *(_OWORD *)(a1 + 1329) = 0u;
      *(_OWORD *)(a1 + 1304) = 0u;
      *(_OWORD *)(a1 + 1320) = 0u;
    }
    if (*(_QWORD *)(a1 + 1376))
    {
      v17 = *(_QWORD *)(a1 + 1384);
      v18 = *(NSObject **)(v17 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v17;
      v28 = a1 + 1352;
      dispatch_sync(v18, &v23);
      *(_OWORD *)(a1 + 1377) = 0u;
      *(_OWORD *)(a1 + 1352) = 0u;
      *(_OWORD *)(a1 + 1368) = 0u;
    }
    if (*(_QWORD *)(a1 + 1424))
    {
      v19 = *(_QWORD *)(a1 + 1432);
      v20 = *(NSObject **)(v19 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v19;
      v28 = a1 + 1400;
      dispatch_sync(v20, &v23);
      *(_OWORD *)(a1 + 1425) = 0u;
      *(_OWORD *)(a1 + 1400) = 0u;
      *(_OWORD *)(a1 + 1416) = 0u;
    }
  }
  v21 = *(void **)(a1 + 1560);
  if (v21)
  {
    *(_QWORD *)(a1 + 1568) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 1559) < 0)
    operator delete(*(void **)(a1 + 1536));
  return a1;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::buildUniqueResourceMask(uint64_t result)
{
  unsigned int v1;
  int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v1 = *(_QWORD *)(result + 872) != 0;
  *(_DWORD *)(result + 1000) = v1;
  if (*(_QWORD *)(result + 880))
  {
    v1 |= 2u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 888))
  {
    v1 |= 4u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 896))
  {
    v1 |= 8u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 904))
  {
    v1 |= 0x10u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 912))
  {
    v1 |= 0x20u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 920))
  {
    v1 |= 0x40u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 928))
  {
    v1 |= 0x80u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 936))
  {
    v1 |= 0x100u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 944))
  {
    v1 |= 0x200u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 952))
  {
    v1 |= 0x400u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 960))
  {
    v1 |= 0x800u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 968))
  {
    v1 |= 0x1000u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 976))
  {
    v1 |= 0x2000u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 984))
  {
    v1 |= 0x4000u;
    *(_DWORD *)(result + 1000) = v1;
  }
  if (*(_QWORD *)(result + 992))
  {
    v1 |= 0x8000u;
    *(_DWORD *)(result + 1000) = v1;
  }
  v2 = (int *)MEMORY[0x24BE51650];
  v3 = v1;
  do
  {
    v4 = __clz(__rbit32(v3));
    v5 = v3 & ~(1 << v4);
    if (!v5)
      break;
    v6 = (_QWORD *)(result + 8 * v4 + 872);
    v7 = *v2;
    v3 = v5;
    do
    {
      v8 = __clz(__rbit32(v5));
      v9 = 1 << v8;
      if (*(_DWORD *)(*v6 + v7 + 48) == *(_DWORD *)(*(_QWORD *)(result + 8 * v8 + 872) + v7 + 48))
      {
        v1 &= ~v9;
        *(_DWORD *)(result + 1000) = v1;
        v3 &= ~v9;
      }
      v5 &= ~v9;
    }
    while (v5);
  }
  while (v3);
  return result;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::encodeConstantPDS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, unint64_t *a14, _DWORD *a15)
{
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  BOOL v24;
  int *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v48;
  int v49;
  _OWORD *v50;
  int *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _OWORD *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned __int16 *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  _OWORD *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int *v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int *v108;
  int v109;
  unsigned int *v110;
  unsigned __int16 *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _OWORD *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int *v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int *v132;
  int v133;
  unsigned int *v134;
  unsigned __int16 *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _OWORD *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  unsigned int *v156;
  unsigned int *v157;
  int v158;
  unsigned __int16 *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned int *v164;
  _DWORD *v165;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned __int16 *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  _OWORD *v176;
  int *v177;
  unsigned __int16 *v178;
  unsigned int v179;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int *v188;
  _DWORD *v189;
  unsigned __int16 *v190;
  uint64_t v191;
  unsigned __int16 *v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  _OWORD *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v218;
  _OWORD v219[2];
  _OWORD v220[32];
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;

  v21 = (unsigned int **)(a2 + 224);
  if (*(_QWORD *)(a2 + 224))
  {
    if (!*(_QWORD *)(a2 + 232))
      v21 = (unsigned int **)(a2 + 784);
  }
  else
  {
    v21 = (unsigned int **)(a2 + 784);
  }
  v23 = *v21;
  v22 = v21[1];
  if (v23)
    v24 = v22 == 0;
  else
    v24 = 1;
  if (v24)
    v25 = 0;
  else
    v25 = (int *)((char *)v23 + *v23);
  v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 5u && (v27 = v26[2]) != 0)
    v28 = (int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
  else
    v28 = 0;
  v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 9u && (v30 = v29[4]) != 0)
    v31 = (unsigned int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
  else
    v31 = 0;
  bzero(v220, 0x248uLL);
  bzero(a12, 0x240uLL);
  v32 = v31 + 1;
  v33 = *v31;
  if (!(_DWORD)v33)
  {
    v36 = 0;
    v34 = 0;
    v37 = 0;
    goto LABEL_23;
  }
  v214 = a6;
  v215 = a7;
  v216 = a8;
  v34 = 0;
  v35 = v31 + 1;
  while (1)
  {
    v51 = (int *)((char *)v35 + *v35);
    v52 = (unsigned __int16 *)((char *)v51 - *v51);
    v53 = *v52;
    if (v53 < 5)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      goto LABEL_38;
    }
    if (v52[2])
    {
      switch(*((_BYTE *)v51 + v52[2]))
      {
        case 0:
          goto LABEL_33;
        case 1:
          if (v53 < 0xD)
          {
            v79 = 0;
            LODWORD(v80) = 0;
            if (v53 >= 9)
            {
              v80 = v52[4];
              if (v52[4])
                goto LABEL_107;
            }
          }
          else
          {
            if (v52[6])
            {
              v79 = *(int *)((char *)v51 + v52[6]);
              v80 = v52[4];
              if (!v52[4])
                goto LABEL_108;
LABEL_107:
              LODWORD(v80) = *(int *)((char *)v51 + v80);
              goto LABEL_108;
            }
            v79 = 0;
            v80 = v52[4];
            if (v52[4])
              goto LABEL_107;
          }
LABEL_108:
          v89 = v80 + v79;
          if (v79 >= v80 + v79)
            goto LABEL_29;
          v90 = (v89 >> 1) & 0x1FFFFFFF;
          v91 = v34;
          while (1)
          {
            v97 = (v79 >> 1) & 0x1FFFFFFF;
            v98 = *(_QWORD *)(a3 + 24);
            v99 = *(_DWORD *)(v98 + 4 * v97);
            v100 = v99 & 0xFFF00000;
            if (v97 + 1 >= v90)
            {
              v101 = 1;
              if ((v99 & 0x80000000) != 0)
                goto LABEL_128;
            }
            else
            {
              v101 = 1;
              while (1)
              {
                v102 = *(_DWORD *)(v98 + 4 * (v97 + v101));
                if (v102 != -1 && v102 != ((v99 + v101) & 0xFFFFF | v100))
                  break;
                ++v101;
                if (!(v97 - v90 + v101))
                {
                  v101 = v90 - v97;
                  break;
                }
              }
              if ((v99 & 0x80000000) != 0)
              {
LABEL_128:
                v106 = (v99 >> 20) & 0x7FF;
                if (v106 >= 0x23)
                  v107 = -44;
                else
                  v107 = 7;
                if (!a5)
                  v107 = 65;
                v105 = v107 + v106;
                v104 = &a12[2 * v91];
LABEL_134:
                v104[4] = v105;
                v108 = v104 + 4;
                v109 = 8 * (v99 & 0xFFFFF);
                goto LABEL_139;
              }
            }
            if (a5)
            {
              if (v100 != 7340032)
              {
                if (v100 != 3145728)
                  return 0;
                v104 = &a12[2 * v91];
                v105 = 5;
                goto LABEL_134;
              }
              v110 = &a12[2 * v91];
              v110[4] = 3;
              v108 = v110 + 4;
              v109 = 8 * (v99 & 0xFFFFF);
            }
            else
            {
              v108 = &a12[2 * v91 + 4];
              if ((v99 & 0x7FF00000) != 0)
              {
                *v108 = 191;
                v109 = 8 * (v99 & 0xFFFFF);
              }
              else
              {
                *v108 = 397;
                v109 = 8 * ((v99 & 0xFFFFF) - *(_DWORD *)(a3 + 120));
              }
            }
LABEL_139:
            v108[1] = v109;
            v111 = (unsigned __int16 *)((char *)v51 - *v51);
            v112 = *v111;
            if (v112 < 0xB)
            {
              LODWORD(v92) = 0;
            }
            else
            {
              v92 = v111[5];
              if (v111[5])
                LODWORD(v92) = *(int *)((char *)v51 + v92);
              if (v112 >= 0xD)
              {
                v93 = v111[6];
                if (v93)
                  LODWORD(v93) = *(int *)((char *)v51 + v93);
                goto LABEL_112;
              }
            }
            LODWORD(v93) = 0;
LABEL_112:
            v94 = (2 * v101);
            v95 = v92 + v79 - v93;
            v34 = v91 + 1;
            v96 = &v220[v91];
            *(_QWORD *)v96 = v94;
            *((_DWORD *)v96 + 2) = v95;
            v79 += v94;
            ++v91;
            if (v79 >= v89)
              goto LABEL_29;
          }
        case 2:
          if (v53 < 0xD)
          {
            v81 = 0;
            LODWORD(v82) = 0;
            if (v53 >= 9)
            {
              v82 = v52[4];
              if (v52[4])
                goto LABEL_147;
            }
          }
          else
          {
            if (v52[6])
            {
              v81 = *(int *)((char *)v51 + v52[6]);
              v82 = v52[4];
              if (!v52[4])
                goto LABEL_148;
LABEL_147:
              LODWORD(v82) = *(int *)((char *)v51 + v82);
              goto LABEL_148;
            }
            v81 = 0;
            v82 = v52[4];
            if (v52[4])
              goto LABEL_147;
          }
LABEL_148:
          v113 = v82 + v81;
          if (v81 >= v82 + v81)
            goto LABEL_29;
          v114 = (v113 >> 1) & 0x1FFFFFFF;
          v115 = v34;
          while (1)
          {
            v121 = (v81 >> 1) & 0x1FFFFFFF;
            v122 = *(_QWORD *)(a3 + 48);
            v123 = *(_DWORD *)(v122 + 4 * v121);
            v124 = v123 & 0xFFF00000;
            if (v121 + 1 >= v114)
            {
              v125 = 1;
              if ((v123 & 0x80000000) != 0)
                goto LABEL_168;
            }
            else
            {
              v125 = 1;
              while (1)
              {
                v126 = *(_DWORD *)(v122 + 4 * (v121 + v125));
                if (v126 != -1 && v126 != ((v123 + v125) & 0xFFFFF | v124))
                  break;
                ++v125;
                if (!(v121 - v114 + v125))
                {
                  v125 = v114 - v121;
                  break;
                }
              }
              if ((v123 & 0x80000000) != 0)
              {
LABEL_168:
                v130 = (v123 >> 20) & 0x7FF;
                if (v130 >= 0x23)
                  v131 = -44;
                else
                  v131 = 7;
                if (!a5)
                  v131 = 65;
                v129 = v131 + v130;
                v128 = &a12[2 * v115];
LABEL_174:
                v128[4] = v129;
                v132 = v128 + 4;
                v133 = 8 * (v123 & 0xFFFFF);
                goto LABEL_179;
              }
            }
            if (a5)
            {
              if (v124 != 7340032)
              {
                if (v124 != 3145728)
                  return 0;
                v128 = &a12[2 * v115];
                v129 = 5;
                goto LABEL_174;
              }
              v134 = &a12[2 * v115];
              v134[4] = 3;
              v132 = v134 + 4;
              v133 = 8 * (v123 & 0xFFFFF);
            }
            else
            {
              v132 = &a12[2 * v115 + 4];
              if ((v123 & 0x7FF00000) != 0)
              {
                *v132 = 191;
                v133 = 8 * (v123 & 0xFFFFF);
              }
              else
              {
                *v132 = 397;
                v133 = 8 * (*(_DWORD *)(a3 + 124) + (v123 & 0xFFFFF) - (*(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128)));
              }
            }
LABEL_179:
            v132[1] = v133;
            v135 = (unsigned __int16 *)((char *)v51 - *v51);
            v136 = *v135;
            if (v136 < 0xB)
            {
              LODWORD(v116) = 0;
            }
            else
            {
              v116 = v135[5];
              if (v135[5])
                LODWORD(v116) = *(int *)((char *)v51 + v116);
              if (v136 >= 0xD)
              {
                v117 = v135[6];
                if (v117)
                  LODWORD(v117) = *(int *)((char *)v51 + v117);
                goto LABEL_152;
              }
            }
            LODWORD(v117) = 0;
LABEL_152:
            v118 = (2 * v125);
            v119 = v116 + v81 - v117;
            v34 = v115 + 1;
            v120 = &v220[v115];
            *(_QWORD *)v120 = v118;
            *((_DWORD *)v120 + 2) = v119;
            v81 += v118;
            ++v115;
            if (v81 >= v113)
              goto LABEL_29;
          }
        case 3:
          if (v53 < 0xD)
          {
            v83 = 0;
            LODWORD(v84) = 0;
            if (v53 >= 9)
            {
              v84 = v52[4];
              if (v52[4])
                goto LABEL_187;
            }
          }
          else
          {
            if (v52[6])
            {
              v83 = *(int *)((char *)v51 + v52[6]);
              v84 = v52[4];
              if (!v52[4])
                goto LABEL_188;
LABEL_187:
              LODWORD(v84) = *(int *)((char *)v51 + v84);
              goto LABEL_188;
            }
            v83 = 0;
            v84 = v52[4];
            if (v52[4])
              goto LABEL_187;
          }
LABEL_188:
          v137 = v84 + v83;
          if (v83 >= v84 + v83)
            goto LABEL_29;
          v138 = (v137 >> 1) & 0x1FFFFFFF;
          v139 = v34;
          break;
        case 5:
          if (v53 < 7)
          {
            LODWORD(v85) = 0;
          }
          else
          {
            v85 = v52[3];
            if (v52[3])
            {
              LODWORD(v85) = *(int *)((char *)v51 + v85);
              if ((v85 & 0x80000000) != 0)
                goto LABEL_29;
            }
          }
          v161 = v85 & 0xFFFFF;
          if (v161 >= 0x23)
            v162 = -44;
          else
            v162 = 7;
          if (!a5)
            v162 = 65;
          v163 = v162 + v161;
          v164 = &a12[2 * v34];
          v164[4] = v163;
          v165 = v164 + 4;
          v166 = (unsigned __int16 *)((char *)v51 - *v51);
          if (*v166 < 0xDu)
          {
            LODWORD(v167) = 0;
          }
          else
          {
            v167 = v166[6];
            if (v167)
              LODWORD(v167) = *(int *)((char *)v51 + v167);
          }
          v86 = v34;
          v165[1] = 4 * v167;
          v168 = (unsigned __int16 *)((char *)v51 - *v51);
          v169 = *v168;
          if (v169 < 9)
          {
LABEL_26:
            v48 = 0;
            goto LABEL_27;
          }
          if (v168[4])
          {
            v48 = *(unsigned int *)((char *)v51 + v168[4]);
            if (v169 < 0xB)
              goto LABEL_27;
          }
          else
          {
            v48 = 0;
            if (v169 < 0xB)
              goto LABEL_27;
          }
          v170 = v168[5];
          if (v168[5])
            goto LABEL_249;
          goto LABEL_27;
        case 8:
          if ((a5 & 1) != 0)
            return 0;
          v86 = v34;
          *(_QWORD *)&a12[2 * v34 + 4] = 399;
          v87 = (unsigned __int16 *)((char *)v51 - *v51);
          v88 = *v87;
          if (v88 < 9)
            goto LABEL_26;
          if (v87[4])
          {
            v48 = *(unsigned int *)((char *)v51 + v87[4]);
            if (v88 < 0xB)
              goto LABEL_27;
          }
          else
          {
            v48 = 0;
            if (v88 < 0xB)
              goto LABEL_27;
          }
          v170 = v87[5];
          if (!v170)
          {
LABEL_27:
            v49 = 0;
            goto LABEL_28;
          }
LABEL_249:
          v49 = *(int *)((char *)v51 + v170);
LABEL_28:
          v50 = &v220[v86];
          *(_QWORD *)v50 = v48;
          ++v34;
          *((_DWORD *)v50 + 2) = v49;
          goto LABEL_29;
        default:
          goto LABEL_29;
      }
      while (1)
      {
        v145 = (v83 >> 1) & 0x1FFFFFFF;
        v146 = *(_QWORD *)(a3 + 72);
        v147 = *(_DWORD *)(v146 + 4 * v145);
        v148 = v147 & 0xFFF00000;
        if (v145 + 1 >= v138)
        {
          v149 = 1;
          if ((v147 & 0x80000000) != 0)
            goto LABEL_208;
        }
        else
        {
          v149 = 1;
          while (1)
          {
            v150 = *(_DWORD *)(v146 + 4 * (v145 + v149));
            if (v150 != -1 && v150 != ((v147 + v149) & 0xFFFFF | v148))
              break;
            ++v149;
            if (!(v145 - v138 + v149))
            {
              v149 = v138 - v145;
              break;
            }
          }
          if ((v147 & 0x80000000) != 0)
          {
LABEL_208:
            v154 = (v147 >> 20) & 0x7FF;
            if (v154 >= 0x23)
              v155 = -44;
            else
              v155 = 7;
            if (!a5)
              v155 = 65;
            v153 = v155 + v154;
LABEL_214:
            v156 = &a12[2 * v139];
            v156[4] = v153;
            v157 = v156 + 4;
            v158 = 8 * (v147 & 0xFFFFF);
            goto LABEL_218;
          }
        }
        if (a5)
        {
          if ((v148 - 0x200000) >> 21 > 2)
            return 0;
          v152 = (v148 - 0x200000) >> 20;
          if (((0x33u >> v152) & 1) == 0)
            return 0;
          v153 = dword_232D7C8C8[v152];
          goto LABEL_214;
        }
        v157 = &a12[2 * v139 + 4];
        if ((v147 & 0x7FF00000) != 0)
        {
          *v157 = 191;
          v158 = 8 * (v147 & 0xFFFFF);
        }
        else
        {
          *v157 = 397;
          v158 = 8
               * (*(_DWORD *)(a3 + 124)
                + *(_DWORD *)(a3 + 132)
                + (v147 & 0xFFFFF)
                - (*(_DWORD *)(a3 + 120)
                 + *(_DWORD *)(a3 + 128)
                 + *(_DWORD *)(a3 + 136)));
        }
LABEL_218:
        v157[1] = v158;
        v159 = (unsigned __int16 *)((char *)v51 - *v51);
        v160 = *v159;
        if (v160 < 0xB)
        {
          LODWORD(v140) = 0;
        }
        else
        {
          v140 = v159[5];
          if (v159[5])
            LODWORD(v140) = *(int *)((char *)v51 + v140);
          if (v160 >= 0xD)
          {
            v141 = v159[6];
            if (v141)
              LODWORD(v141) = *(int *)((char *)v51 + v141);
            goto LABEL_192;
          }
        }
        LODWORD(v141) = 0;
LABEL_192:
        v142 = (2 * v149);
        v143 = v140 + v83 - v141;
        v34 = v139 + 1;
        v144 = &v220[v139];
        *(_QWORD *)v144 = v142;
        *((_DWORD *)v144 + 2) = v143;
        v83 += v142;
        ++v139;
        if (v83 >= v137)
          goto LABEL_29;
      }
    }
LABEL_33:
    if (v53 < 0xD)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      if (v53 >= 9)
      {
        v55 = v52[4];
        if (v52[4])
LABEL_81:
          LODWORD(v55) = *(int *)((char *)v51 + v55);
      }
    }
    else if (v52[6])
    {
      v54 = *(int *)((char *)v51 + v52[6]);
      v55 = v52[4];
      if (v52[4])
        goto LABEL_81;
    }
    else
    {
      v54 = 0;
      v55 = v52[4];
      if (v52[4])
        goto LABEL_81;
    }
LABEL_38:
    v56 = v55 + v54;
    if (v54 < v55 + v54)
      break;
LABEL_29:
    if (++v35 == &v32[v33])
    {
      v171 = *v31;
      if (!(_DWORD)v171)
      {
        v36 = v34;
        v37 = v34;
        goto LABEL_23;
      }
      v172 = &v32[v171];
      v36 = v34;
      while (1)
      {
        v177 = (int *)((char *)v32 + *v32);
        v178 = (unsigned __int16 *)((char *)v177 - *v177);
        v179 = *v178;
        if (v179 < 5 || !v178[2])
          goto LABEL_257;
        if (v179 < 7 || *((_BYTE *)v177 + v178[2]) != 5)
          goto LABEL_257;
        v181 = v178[3];
        if (!v181)
          goto LABEL_257;
        v182 = *(unsigned int *)((char *)v177 + v181);
        if ((v182 & 0x80000000) == 0)
          goto LABEL_257;
        v183 = (v182 >> 20) & 0x7FF;
        v184 = *(uint64_t **)(*(_QWORD *)(a4 + 8 * v183) + 48);
        if (!v184)
LABEL_314:
          abort();
        v185 = v182 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v186 = *((_DWORD *)v184 + 7);
            if (v186 <= v185)
              break;
            v184 = (uint64_t *)*v184;
            if (!v184)
              goto LABEL_314;
          }
          if (v186 >= v185)
            break;
          v184 = (uint64_t *)v184[1];
          if (!v184)
            goto LABEL_314;
        }
        v187 = *((_DWORD *)v184 + 8);
        v188 = &a12[2 * v36];
        *((_WORD *)v188 + 8) = v183;
        v189 = v188 + 4;
        *((_WORD *)v189 + 1) = v187 >> 3;
        v190 = (unsigned __int16 *)((char *)v177 - *v177);
        if (*v190 < 0xDu)
        {
          LODWORD(v191) = 0;
        }
        else
        {
          v191 = v190[6];
          if (v191)
            LODWORD(v191) = *(int *)((char *)v177 + v191);
        }
        v189[1] = 4 * v191;
        v192 = (unsigned __int16 *)((char *)v177 - *v177);
        v193 = *v192;
        if (v193 < 9)
        {
          v173 = 0;
        }
        else
        {
          v173 = v192[4];
          if (v192[4])
            v173 = *(unsigned int *)((char *)v177 + v173);
          if (v193 >= 0xB)
          {
            v194 = v192[5];
            if (v194)
            {
              v174 = *(int *)((char *)v177 + v194);
              goto LABEL_256;
            }
          }
        }
        v174 = 0;
LABEL_256:
        v175 = v36++;
        v176 = &v220[v175];
        *(_QWORD *)v176 = v173;
        *((_DWORD *)v176 + 2) = v174;
LABEL_257:
        if (++v32 == v172)
        {
          v195 = *v31;
          if ((_DWORD)v195)
          {
            v196 = 0;
            v197 = 4 * v195;
            v37 = v36;
            while (1)
            {
              v201 = v31[v196 / 4 + 1];
              v202 = (char *)&v31[v196 / 4] + v201;
              v203 = v201 - *((int *)v202 + 1);
              v204 = (char *)&v31[v196 / 4] + v203;
              v205 = *((unsigned __int16 *)v204 + 2);
              if (v205 < 5)
                goto LABEL_289;
              v206 = *((unsigned __int16 *)v204 + 4);
              if (!v206)
                goto LABEL_289;
              v207 = *((char *)&v31[v196 / 4 + 1] + v201 + v206);
              if (v207 == 9)
              {
                *(_QWORD *)&a12[2 * v37 + 4] = v215;
                v209 = v201 - *((int *)v202 + 1);
                v210 = *(unsigned __int16 *)((char *)&v31[v196 / 4 + 1] + v209);
                if (v210 < 9)
                  goto LABEL_286;
                if (*(_WORD *)((char *)&v31[v196 / 4 + 3] + v209))
                {
                  v198 = *(unsigned int *)((char *)&v31[v196 / 4 + 1]
                                         + v201
                                         + *(unsigned __int16 *)((char *)&v31[v196 / 4 + 3] + v209));
                  if (v210 < 0xB)
                    goto LABEL_287;
                }
                else
                {
                  v198 = 0;
                  if (v210 < 0xB)
                    goto LABEL_287;
                }
              }
              else
              {
                if (v207 == 7)
                {
                  *(_QWORD *)&a12[2 * v37 + 4] = v216;
                }
                else
                {
                  if (v207 != 6)
                    goto LABEL_289;
                  if (v205 < 0xD)
                  {
                    v208 = 0;
                  }
                  else
                  {
                    v208 = *(unsigned __int16 *)((char *)&v31[v196 / 4 + 4] + v203);
                    if (v208)
                      v208 = *(unsigned int *)((char *)&v31[v196 / 4 + 1] + v201 + v208);
                  }
                  *(_QWORD *)&a12[2 * v37 + 4] = v214 + 4 * v208;
                }
                v209 = v201 - *((int *)v202 + 1);
                v211 = (char *)&v31[v196 / 4] + v209;
                v212 = *((unsigned __int16 *)v211 + 2);
                if (v212 < 9)
                {
LABEL_286:
                  v198 = 0;
                  goto LABEL_287;
                }
                v198 = *((unsigned __int16 *)v211 + 6);
                if (v198)
                  v198 = *(unsigned int *)((char *)&v31[v196 / 4 + 1] + v201 + v198);
                if (v212 < 0xB)
                  goto LABEL_287;
              }
              v213 = *(unsigned __int16 *)((char *)&v31[v196 / 4 + 3] + v209 + 2);
              if (v213)
              {
                v199 = *(unsigned int *)((char *)&v31[v196 / 4 + 1] + v201 + v213);
                goto LABEL_288;
              }
LABEL_287:
              v199 = 0;
LABEL_288:
              v200 = &v220[v37];
              *(_QWORD *)v200 = v198;
              ++v37;
              *((_DWORD *)v200 + 2) = v199;
LABEL_289:
              v196 += 4;
              if (v197 == v196)
                goto LABEL_23;
            }
          }
          v37 = v36;
LABEL_23:
          v221 = v37;
          v38 = v37;
          v222 = (uint64_t)&a12[2 * v37 + 4];
          v39 = 2 * v37;
          v223 = 2 * v37;
          v40 = v36 - v34;
          v41 = v37 - v36;
          v42 = 2 * (v37 - 1) + 5;
          v24 = v37 == 0;
          v43 = 4;
          if (!v24)
            v43 = v42;
          v44 = ((v43 + v39) & 0x7FFFFFFFCLL) - v39;
          v225 = v44;
          v226 = (v38 & 0xFFFFFFFC) + 4;
          v227 = 0;
          *a12 = v34;
          a12[2] = v40;
          a12[3] = v41 + (v44 >> 1);
          v45 = 4 * ((v38 & 0xFFFFFFFC) + 4);
          *a11 = v45;
          AGX::Heap<true>::allocateImpl(&v218, a1, v45, 0);
          *a15 += LODWORD(v219[0]);
          v46 = v219[0];
          *(_OWORD *)a9 = v218;
          *(_OWORD *)(a9 + 16) = v46;
          *(_OWORD *)(a9 + 25) = *(_OWORD *)((char *)v219 + 9);
          *a10 = *(_QWORD *)a9;
          v224 = *(_QWORD *)(a9 + 8);
          AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)v220, 0);
          *a13 = v227;
          *a14 = (4 * (v225 + v223) + 12) & 0xFFFFFFFFFFFFFFF0;
          return 1;
        }
      }
    }
  }
  v57 = 1 - (v54 + v55);
  v58 = v34;
  while (1)
  {
    v64 = *(_QWORD *)(a3 + 96);
    v65 = *(_DWORD *)(v64 + 4 * v54);
    v66 = v65 & 0xFFF00000;
    if (v54 + 1 >= v56)
      break;
    v67 = 0;
    v68 = v56 - v54;
    do
    {
      v69 = *(_DWORD *)(v64 + 4 * (v54 + v67 + 1));
      if (v69 != -1 && v69 != ((v65 + 1 + v67) & 0xFFFFF | v66))
      {
        v68 = v67 + 1;
        if ((v65 & 0x80000000) != 0)
          goto LABEL_58;
        goto LABEL_52;
      }
      ++v67;
    }
    while (v57 + v54 + v67);
    if ((v65 & 0x80000000) == 0)
      goto LABEL_52;
LABEL_58:
    v72 = (v65 >> 20) & 0x7FF;
    if (a5)
    {
      if (v72 >= 0x23)
        v73 = -44;
      else
        v73 = 7;
      v71 = v73 + v72;
    }
    else
    {
      v71 = v72 + 65;
    }
LABEL_70:
    v74 = v58;
    a12[2 * v58 + 4] = v71;
LABEL_71:
    v76 = 4 * (v65 & 0xFFFFF);
LABEL_72:
    a12[2 * v74 + 5] = v76;
    v77 = (unsigned __int16 *)((char *)v51 - *v51);
    v78 = *v77;
    if (v78 < 0xB)
    {
      LODWORD(v59) = 0;
LABEL_41:
      LODWORD(v60) = 0;
      goto LABEL_42;
    }
    v59 = v77[5];
    if (v77[5])
      LODWORD(v59) = *(int *)((char *)v51 + v59);
    if (v78 < 0xD)
      goto LABEL_41;
    v60 = v77[6];
    if (v60)
      LODWORD(v60) = *(int *)((char *)v51 + v60);
LABEL_42:
    v61 = v68;
    v62 = v59 + v54 - v60;
    v34 = v58 + 1;
    v63 = &v220[v58];
    *(_QWORD *)v63 = v61;
    *((_DWORD *)v63 + 2) = v62;
    v54 += v61;
    ++v58;
    if (v54 >= v56)
      goto LABEL_29;
  }
  v68 = 1;
  if ((v65 & 0x80000000) != 0)
    goto LABEL_58;
LABEL_52:
  if (!a5)
  {
    v74 = v58;
    v75 = &a12[2 * v58 + 4];
    if ((v65 & 0x7FF00000) != 0)
      *v75 = 192;
    else
      *v75 = 398;
    goto LABEL_71;
  }
  switch(v66)
  {
    case 0x300000u:
      v71 = 5;
      goto LABEL_70;
    case 0x700000u:
      v74 = v58;
      a12[2 * v58 + 4] = 3;
      v76 = 4 * (v65 & 0xFFFFF) + 8 * ((*(_DWORD *)(a3 + 248) - *(_DWORD *)(a3 + 240)) >> 2);
      goto LABEL_72;
    case 0x600000u:
      v71 = 4;
      goto LABEL_70;
  }
  return 0;
}

uint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::~ProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;

  if (!*(_BYTE *)(a1 + 1532))
  {
    v2 = MEMORY[0x24BDAC760];
    if (*(_QWORD *)(a1 + 1088))
    {
      v3 = *(_QWORD *)(a1 + 1096);
      v4 = *(NSObject **)(v3 + 16);
      v23 = MEMORY[0x24BDAC760];
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v3;
      v28 = a1 + 1064;
      dispatch_sync(v4, &v23);
      *(_OWORD *)(a1 + 1089) = 0u;
      *(_OWORD *)(a1 + 1080) = 0u;
      *(_OWORD *)(a1 + 1064) = 0u;
    }
    if (*(_QWORD *)(a1 + 1040))
    {
      v5 = *(_QWORD *)(a1 + 1048);
      v6 = *(NSObject **)(v5 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v5;
      v28 = a1 + 1016;
      dispatch_sync(v6, &v23);
      *(_OWORD *)(a1 + 1041) = 0u;
      *(_OWORD *)(a1 + 1032) = 0u;
      *(_OWORD *)(a1 + 1016) = 0u;
    }
    if (*(_QWORD *)(a1 + 1184))
    {
      v7 = *(_QWORD *)(a1 + 1192);
      v8 = *(NSObject **)(v7 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v7;
      v28 = a1 + 1160;
      dispatch_sync(v8, &v23);
      *(_OWORD *)(a1 + 1185) = 0u;
      *(_OWORD *)(a1 + 1176) = 0u;
      *(_OWORD *)(a1 + 1160) = 0u;
    }
    if (*(_QWORD *)(a1 + 1136))
    {
      v9 = *(_QWORD *)(a1 + 1144);
      v10 = *(NSObject **)(v9 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v9;
      v28 = a1 + 1112;
      dispatch_sync(v10, &v23);
      *(_OWORD *)(a1 + 1137) = 0u;
      *(_OWORD *)(a1 + 1128) = 0u;
      *(_OWORD *)(a1 + 1112) = 0u;
    }
    if (*(_QWORD *)(a1 + 1240))
    {
      v11 = *(_QWORD *)(a1 + 1248);
      v12 = *(NSObject **)(v11 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v11;
      v28 = a1 + 1216;
      dispatch_sync(v12, &v23);
      *(_OWORD *)(a1 + 1241) = 0u;
      *(_OWORD *)(a1 + 1232) = 0u;
      *(_OWORD *)(a1 + 1216) = 0u;
    }
    if (*(_QWORD *)(a1 + 1288))
    {
      v13 = *(_QWORD *)(a1 + 1296);
      v14 = *(NSObject **)(v13 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v13;
      v28 = a1 + 1264;
      dispatch_sync(v14, &v23);
      *(_OWORD *)(a1 + 1289) = 0u;
      *(_OWORD *)(a1 + 1280) = 0u;
      *(_OWORD *)(a1 + 1264) = 0u;
    }
    if (*(_QWORD *)(a1 + 1336))
    {
      v15 = *(_QWORD *)(a1 + 1344);
      v16 = *(NSObject **)(v15 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v15;
      v28 = a1 + 1312;
      dispatch_sync(v16, &v23);
      *(_OWORD *)(a1 + 1337) = 0u;
      *(_OWORD *)(a1 + 1328) = 0u;
      *(_OWORD *)(a1 + 1312) = 0u;
    }
    if (*(_QWORD *)(a1 + 1384))
    {
      v17 = *(_QWORD *)(a1 + 1392);
      v18 = *(NSObject **)(v17 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v17;
      v28 = a1 + 1360;
      dispatch_sync(v18, &v23);
      *(_OWORD *)(a1 + 1385) = 0u;
      *(_OWORD *)(a1 + 1376) = 0u;
      *(_OWORD *)(a1 + 1360) = 0u;
    }
    if (*(_QWORD *)(a1 + 1432))
    {
      v19 = *(_QWORD *)(a1 + 1440);
      v20 = *(NSObject **)(v19 + 16);
      v23 = v2;
      v24 = 3221225472;
      v25 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v26 = &__block_descriptor_48_e5_v8__0l;
      v27 = v19;
      v28 = a1 + 1408;
      dispatch_sync(v20, &v23);
      *(_OWORD *)(a1 + 1433) = 0u;
      *(_OWORD *)(a1 + 1424) = 0u;
      *(_OWORD *)(a1 + 1408) = 0u;
    }
  }
  v21 = *(void **)(a1 + 1568);
  if (v21)
  {
    *(_QWORD *)(a1 + 1576) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  return a1;
}

unint64_t AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::getShaderPassInfo(unint64_t a1, unsigned int **a2, _DWORD *a3, int *a4, BOOL *a5, BOOL *a6)
{
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  BOOL v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int *v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  BOOL v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int *v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t result;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  unsigned int v37;

  v9 = a2 + 28;
  if (a2[28])
  {
    if (!a2[29])
      v9 = a2 + 98;
  }
  else
  {
    v9 = a2 + 98;
  }
  v11 = *v9;
  v10 = v9[1];
  if (v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (int *)((char *)v11 + *v11);
  v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 9u && (v15 = v14[4]) != 0)
  {
    v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
    if (!a2[58])
    {
LABEL_15:
      v17 = a2 + 128;
      goto LABEL_19;
    }
  }
  else
  {
    v16 = 0;
    if (!a2[58])
      goto LABEL_15;
  }
  v17 = a2 + 58;
  if (!a2[59])
    v17 = a2 + 128;
LABEL_19:
  v19 = *v17;
  v18 = v17[1];
  if (v19)
    v20 = v18 == 0;
  else
    v20 = 1;
  if (v20)
    v21 = 0;
  else
    v21 = (int *)((char *)v19 + *v19);
  v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 9u && (v23 = v22[4]) != 0)
    v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  else
    v24 = 0;
  v25 = (unsigned __int16 *)((char *)v24 - *v24);
  v26 = *v25;
  if (v26 < 7)
  {
    v27 = 0;
    goto LABEL_34;
  }
  if (v25[3])
  {
    v27 = *(_QWORD *)((char *)v24 + v25[3]);
    if (v26 < 9)
      goto LABEL_34;
  }
  else
  {
    v27 = 0;
    if (v26 < 9)
      goto LABEL_34;
  }
  v35 = v25[4];
  if (v35)
  {
    v28 = *(_QWORD *)((char *)v24 + v35);
    goto LABEL_35;
  }
LABEL_34:
  v28 = 0;
LABEL_35:
  LOBYTE(v37) = 0;
  result = agxsGetShaderPassInfo(a1, v27, v28, a3, &v37, a6);
  v30 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v30 >= 7u)
  {
    v31 = v30[3];
    if (v31)
    {
      v32 = *((char *)v16 + v31);
      if (v32 == 2)
      {
        v34 = 0;
        v36 = 5;
      }
      else
      {
        if (v32 != 1)
        {
          if (v32)
          {
            v34 = 0;
            v33 = 0;
            *a4 = 0;
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        v34 = 0;
        if ((_BYTE)v37)
          v36 = 2;
        else
          v36 = 4;
      }
      *a4 = v36;
      v33 = 1;
      goto LABEL_41;
    }
  }
LABEL_40:
  v33 = 0;
  v34 = v28 == 0;
  *a4 = v37;
LABEL_41:
  *a5 = v34;
  *a6 = v33;
  return result;
}

uint64_t AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariantPDSState(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, __int128 *a5, uint64_t a6, int a7)
{
  uint64_t *v13;
  _OWORD *v14;
  __int128 v15;
  unsigned int **v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int **v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  const char *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _WORD *v58;
  uint64_t v59;
  const void *v60;
  size_t v61;
  char *v62;
  char *v63;
  uint64_t *v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  unsigned int *v129;
  unsigned int **v130;
  int *v131;
  unsigned __int16 *v132;
  uint64_t v133;
  int *v134;
  unsigned int **v135;
  int *v136;
  unsigned __int16 *v137;
  int *v138;
  unsigned int *v139;
  unsigned int **v140;
  int *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  int *v144;
  unsigned int **v145;
  int *v146;
  unsigned __int16 *v147;
  uint64_t v148;
  int *v149;
  unsigned int **v150;
  int *v151;
  unsigned __int16 *v152;
  uint64_t v153;
  int *v154;
  unsigned __int16 *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  int *v164;
  unsigned __int16 *v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int *v198;
  unsigned __int16 *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  char *v214;
  BOOL v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  char v224;
  int v225;
  int v226;
  int v227;
  unsigned int *v228;
  unsigned int *v229;
  unsigned int *v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int *v235;
  uint64_t v236;
  int *v237;
  unsigned __int16 *v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int16 *v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  _DWORD *v248;
  unsigned __int16 *v249;
  uint64_t v250;
  unsigned __int16 *v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  int v255;
  unsigned __int16 *v256;
  uint64_t v257;
  unsigned __int16 *v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  unsigned __int16 *v262;
  uint64_t *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  uint64_t v269;
  unsigned __int16 *v270;
  uint64_t v271;
  uint64_t v272;
  unsigned __int16 *v273;
  uint64_t v274;
  unsigned __int16 *v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  unsigned __int16 *v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  unsigned __int16 *v293;
  unsigned __int16 *v294;
  uint64_t v295;
  unsigned __int16 *v296;
  uint64_t v297;
  unsigned int v298;
  int v299;
  int v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  int v306;
  uint64_t v307;
  unsigned __int16 *v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint32x2_t *v317;
  char *v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  unsigned int v323;
  uint64_t v324;
  int v325;
  int v326;
  int v327;
  uint32x2_t *v328;
  int v329;
  uint64_t v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  double v338;
  double v339;
  int8x16_t v340;
  int64_t v341;
  unsigned __int16 *v342;
  unsigned __int16 *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  _WORD *v347;
  unsigned __int16 *v348;
  unsigned __int16 *v349;
  unsigned __int16 *v350;
  unsigned __int16 *v351;
  __int16 *v352;
  unint64_t v353;
  __int16 *v354;
  int v355;
  __int16 v356;
  unsigned int v357;
  __int16 v358;
  __int16 v359;
  int v360;
  __int16 v361;
  unsigned int v362;
  __int16 v363;
  __int16 v364;
  unsigned int *v365;
  uint64_t v366;
  int v367;
  _DWORD *v368;
  uint64_t v369;
  unsigned int v370;
  char *v371;
  uint64_t v372;
  __int16 v373;
  __int16 v374;
  __int128 v375;
  uint64_t v376;
  _OWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _DWORD *v382;
  int *v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  int v387;
  int v388;
  int v389;
  uint64_t v390;
  unsigned int v391;
  __int16 v392;
  int v393;
  __int16 v394;
  char *v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  __int128 v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  int8x16_t v403;
  int8x16_t v404;
  _BOOL4 v405;
  int8x16_t v406;
  uint64_t v407;
  uint64_t v408;
  int8x16_t v409;
  int8x8_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int *v414;
  __int128 v415;
  const float *v417;
  float *v418;
  int32x4_t v419;
  uint32x4_t v420;
  int8x16_t v421;
  uint64_t v422;
  const float *v423;
  int32x4_t v424;
  int32x4_t v425;
  int8x16_t v426;
  int8x16_t v427;
  float *v428;
  char *v429;
  unint64_t v430;
  unint64_t v431;
  BOOL v432;
  char v433;
  BOOL v434;
  uint64_t v435;
  uint64_t v436;
  int32x4_t v437;
  uint16x8_t v438;
  int8x16_t v439;
  int8x16_t v440;
  const __int16 *v441;
  uint64_t v442;
  uint16x8_t v443;
  int8x16_t v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  __int128 v450;
  uint64_t *v451;
  unsigned int **v452;
  unsigned int **v453;
  unint64_t ***v454;
  uint64_t v455;
  int *v456;
  unsigned int v457;
  int *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __int128 v464;
  _OWORD v465[14];
  unsigned __int16 *v466;
  unsigned __int16 *v467;
  unsigned __int16 *v468;
  unsigned __int16 *v469;
  void *v470;
  void *v471;
  uint64_t v472;
  int v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  __int128 v477;
  _OWORD v478[2];
  _DWORD v479[12];
  void *__p;
  char v481;
  int v482;
  int v483;
  int v484;
  int v485;
  unsigned int v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  unsigned int v493;
  uint64_t v494;
  int v495;
  int v496;
  char v497;
  char v498;
  int v499;
  int v500;
  uint64_t v501;
  int v502;
  int v503;
  __int128 v504;
  _OWORD v505[3];
  float32x4x2_t v506;
  int16x8x2_t v507;
  float32x4x2_t v508;

  v13 = (uint64_t *)(a1 + 8);
  v14 = (_OWORD *)(a1 + 760);
  bzero((void *)(a1 + 8), 0x2E9uLL);
  v15 = *a5;
  *(_QWORD *)(a1 + 776) = *((_QWORD *)a5 + 2);
  *v14 = v15;
  *(_QWORD *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_DWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_QWORD *)(a1 + 1576) = a2;
  *(_QWORD *)(a1 + 1584) = 0;
  if (a3[28])
  {
    v16 = a3 + 98;
    if (a3[29])
      v16 = a3 + 28;
  }
  else
  {
    v16 = a3 + 98;
  }
  v17 = 0;
  if (*v16 && v16[1])
    v17 = (int *)((char *)*v16 + **v16);
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 5u && (v19 = v18[2]) != 0)
    v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  else
    v20 = 0;
  if (a3[58])
  {
    v21 = a3 + 128;
    if (a3[59])
      v21 = a3 + 58;
  }
  else
  {
    v21 = a3 + 128;
  }
  v22 = 0;
  if (*v21 && v21[1])
    v22 = (int *)((char *)*v21 + **v21);
  v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 5u && (v24 = v23[2]) != 0)
    v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
  else
    v25 = 0;
  LODWORD(v26) = 0;
  if (a7)
    v27 = 3;
  else
    v27 = 0;
  v457 = v27;
  v28 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v28 >= 7u)
  {
    v26 = v28[3];
    if (v28[3])
      LODWORD(v26) = *(int *)((char *)v25 + v26);
  }
  *(_DWORD *)(a1 + 1520) = v26;
  v29 = (unsigned __int16 *)((char *)v25 - *v25);
  v452 = a3 + 28;
  if (*v29 >= 0x13u && (v30 = v29[9]) != 0)
    v31 = (char *)v25 + v30 + *(unsigned int *)((char *)v25 + v30) + 4;
  else
    v31 = "";
  v454 = (unint64_t ***)(a1 + 1552);
  MEMORY[0x234927D28](a1 + 1528, v31);
  v32 = (unsigned __int16 *)((char *)v20 - (int)*v20);
  v33 = *(unsigned int *)((char *)v20 + v32[15] + *(unsigned int *)((char *)v20 + v32[15]));
  if (v32[13])
    v34 = *(unsigned int *)((char *)v20 + v32[13]);
  else
    v34 = 0;
  v453 = a3 + 58;
  v460 = a6;
  v462 = (uint64_t)a3;
  v35 = v34;
  if (*(_BYTE *)(a4 + 392))
    v36 = ((*(_QWORD *)(a4 + 224) + *(_QWORD *)(a4 + 200) - (*(_QWORD *)(a4 + 216) + *(_QWORD *)(a4 + 192))) & 0xFFFFFFFFFFFFFFFCLL)
        + ((*(_QWORD *)(a4 + 376) + *(_QWORD *)(a4 + 328) - (*(_QWORD *)(a4 + 368) + *(_QWORD *)(a4 + 320))) & 0xFFFFFFFFFFFFFFFELL)
        + 8;
  else
    v36 = 0;
  v37 = v32[4];
  v38 = *(unsigned int *)((char *)v20 + v37);
  v39 = (unsigned int *)((char *)v20 + v37 + v38);
  v40 = *v39;
  v461 = a4;
  v451 = v13;
  if ((_DWORD)v40)
  {
    v41 = 0;
    v42 = 4 * v40;
    v43 = (char *)v20 + v37 + v38;
    while (1)
    {
      v44 = v39[v41 / 4 + 1];
      v45 = &v43[v41 + v44 - *(int *)((char *)&v39[v41 / 4 + 1] + v44)];
      if (*((unsigned __int16 *)v45 + 2) >= 5u)
      {
        v46 = *((unsigned __int16 *)v45 + 4);
        if (v46)
        {
          if (v43[v41 + 4 + v44 + v46] == 9)
            break;
        }
      }
      v41 += 4;
      if (v42 == v41)
        goto LABEL_48;
    }
    v47 = 0;
    v33 += 8;
  }
  else
  {
LABEL_48:
    v47 = 1;
  }
  v459 = a2;
  v455 = a2 + 4512;
  v48 = (v33 + 7) & 0x3FFFFFFF8;
  if ((_DWORD)v35)
    v49 = (v33 + 7) & 0x3FFFFFFF8;
  else
    v49 = v33;
  if (!(v36 + v35 + v49))
    goto LABEL_69;
  AGX::Heap<true>::allocateImpl(v479, v455 + 168 * v457, v36 + v35 + v49, (_QWORD *)(a1 + 928));
  *(_DWORD *)(a1 + 1588) += v479[4];
  v50 = *(_OWORD *)&v479[4];
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)v479;
  *(_OWORD *)(a1 + 1216) = v50;
  *(_OWORD *)(a1 + 1225) = *(_OWORD *)((char *)&v479[6] + 1);
  v51 = *(_QWORD **)(a1 + 1208);
  if (a7)
    v52 = *(_QWORD *)(a1 + 1200) + 0x300000000;
  else
    v52 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 792) = 0;
  if (v33)
  {
    *(_QWORD *)(a1 + 848) = v52;
    if ((v47 & 1) != 0)
    {
      v53 = v51;
    }
    else
    {
      *(_QWORD *)(a1 + 856) = v52;
      *(_QWORD *)(a1 + 848) = v52 + 8;
      *v51 = v52 + 8;
      v53 = v51 + 1;
    }
    v54 = (int)*v20;
    v55 = *(unsigned __int16 *)((char *)v20 - v54 + 30);
    if (*(_WORD *)((char *)v20 - v54 + 30))
    {
      v56 = *(unsigned int *)((char *)v20 + v55);
      v57 = (char *)v20 + v55 + v56;
    }
    else
    {
      v55 = 0;
      v57 = 0;
      v56 = *v20;
    }
    memcpy(v53, v57 + 4, *(unsigned int *)((char *)v20 + v55 + v56));
    *(_QWORD *)(a1 + 1448) = v53;
    *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a1 + 848);
  }
  if ((_DWORD)v35)
  {
    *(_QWORD *)(a1 + 864) = v52 + v48;
    *(_QWORD *)(a1 + 16) = (char *)v51 + v48;
  }
  if (!v36)
    goto LABEL_69;
  *(_QWORD *)(a1 + 792) = v49 + v35 + v52;
  v58 = (_WORD *)((char *)v51 + v49 + v35);
  v59 = v461;
  v60 = *(const void **)(v461 + 192);
  v61 = *(_QWORD *)(v461 + 200) - (_QWORD)v60;
  *v58 = v61 >> 2;
  v58[1] = (*(_DWORD *)(v461 + 224) - *(_DWORD *)(v461 + 216)) >> 2;
  v58[2] = (*(_DWORD *)(v461 + 328) - *(_DWORD *)(v461 + 320)) >> 1;
  v58[3] = (*(_DWORD *)(v461 + 376) - *(_DWORD *)(v461 + 368)) >> 1;
  memcpy(v58 + 4, v60, v61);
  v62 = (char *)v58 + *(_QWORD *)(v59 + 200) - *(_QWORD *)(v59 + 192) + 8;
  memcpy(v62, *(const void **)(v59 + 216), *(_QWORD *)(v59 + 224) - *(_QWORD *)(v59 + 216));
  v63 = &v62[*(_QWORD *)(v59 + 224) - *(_QWORD *)(v59 + 216)];
  memcpy(v63, *(const void **)(v59 + 320), *(_QWORD *)(v59 + 328) - *(_QWORD *)(v59 + 320));
  memcpy(&v63[*(_QWORD *)(v59 + 328) - *(_QWORD *)(v59 + 320)], *(const void **)(v59 + 368), *(_QWORD *)(v59 + 376) - *(_QWORD *)(v59 + 368));
  if (!v58[2])
  {
    v58[2] = *v58;
    if (v58[3])
      goto LABEL_69;
LABEL_410:
    v58[3] = v58[1];
    goto LABEL_69;
  }
  if (!v58[3])
    goto LABEL_410;
LABEL_69:
  v64 = (uint64_t *)(a1 + 48);
  v65 = (unsigned __int16 *)((char *)v20 - (int)*v20);
  v66 = v65[8];
  v67 = *(unsigned int *)((char *)v20 + v66);
  v68 = (unsigned int *)((char *)v20 + v66 + v67);
  v69 = *v68;
  if ((_DWORD)v69)
  {
    v70 = 0;
    v71 = 4 * v69;
    v72 = (char *)v20 + v66 + v67;
    do
    {
      v76 = v68[v70 / 4 + 1];
      v77 = &v72[v70 + v76 - *(int *)((char *)&v68[v70 / 4 + 1] + v76)];
      if (*((unsigned __int16 *)v77 + 2) >= 7u && (v78 = *((unsigned __int16 *)v77 + 5)) != 0)
      {
        v79 = *(unsigned int *)&v72[v70 + 4 + v76 + v78];
        v73 = v79;
        if ((v79 & 0x80000000) != 0)
        {
          v74 = 1 << (v79 >> 20);
          v75 = (_QWORD *)(a1 + 48);
          goto LABEL_73;
        }
      }
      else
      {
        v73 = 0;
      }
      v74 = 1 << v73;
      *(_QWORD *)(a1 + 32) |= v74;
      v75 = (_QWORD *)(a1 + 56);
LABEL_73:
      *v75 |= v74;
      v70 += 4;
    }
    while (v71 != v70);
  }
  v80 = v65[10];
  v81 = *(unsigned int *)((char *)v20 + v80);
  v82 = (unsigned int *)((char *)v20 + v80 + v81);
  v83 = *v82;
  if ((_DWORD)v83)
  {
    v84 = 0;
    v85 = 4 * v83;
    v86 = (char *)v20 + v80 + v81;
    do
    {
      v90 = v82[v84 / 4 + 1];
      v91 = &v86[v84 + v90 - *(int *)((char *)&v82[v84 / 4 + 1] + v90)];
      if (*((unsigned __int16 *)v91 + 2) >= 7u && (v92 = *((unsigned __int16 *)v91 + 5)) != 0)
      {
        v93 = *(unsigned int *)&v86[v84 + 4 + v90 + v92];
        v87 = v93;
        if ((v93 & 0x80000000) != 0)
        {
          v88 = 1 << (v93 >> 20);
          v89 = (_QWORD *)(a1 + 48);
          goto LABEL_82;
        }
      }
      else
      {
        v87 = 0;
      }
      v88 = 1 << v87;
      *(_QWORD *)(a1 + 40) |= v88;
      v89 = (_QWORD *)(a1 + 64);
LABEL_82:
      *v89 |= v88;
      v84 += 4;
    }
    while (v85 != v84);
  }
  v94 = v65[6];
  v95 = *(unsigned int *)((char *)v20 + v94);
  v96 = (unsigned int *)((char *)v20 + v94 + v95);
  v97 = *v96;
  if (!(_DWORD)v97)
    goto LABEL_97;
  v98 = 0;
  v99 = 4 * v97;
  v100 = *v64;
  v101 = (char *)v20 + v94 + v95;
  do
  {
    v104 = v96[v98 / 4 + 1];
    v105 = &v101[v98 + v104 - *(int *)((char *)&v96[v98 / 4 + 1] + v104)];
    if (*((unsigned __int16 *)v105 + 2) < 7u || (v106 = *((unsigned __int16 *)v105 + 5)) == 0)
    {
      v102 = 0;
LABEL_90:
      v103 = 1 << v102;
      *(_QWORD *)(a1 + 24) |= v103;
      goto LABEL_91;
    }
    v107 = *(unsigned int *)&v101[v98 + 4 + v104 + v106];
    v102 = v107;
    if ((v107 & 0x80000000) == 0)
      goto LABEL_90;
    v103 = 1 << (v107 >> 20);
LABEL_91:
    v100 |= v103;
    v98 += 4;
  }
  while (v99 != v98);
  *v64 = v100;
LABEL_97:
  v108 = v65[4];
  v109 = *(unsigned int *)((char *)v20 + v108);
  v110 = (unsigned int *)((char *)v20 + v108 + v109);
  v111 = *v110;
  if ((_DWORD)v111)
  {
    v112 = 0;
    v113 = 4 * v111;
    v114 = *(_QWORD *)(v461 + 416);
    v115 = (char *)v20 + v108 + v109;
    while (2)
    {
      v118 = v110[v112 / 4 + 1];
      v119 = v118 - *(int *)((char *)&v110[v112 / 4 + 1] + v118);
      v120 = &v115[v112 + v119];
      v121 = *((unsigned __int16 *)v120 + 2);
      if (v121 < 5)
        goto LABEL_102;
      v122 = *((unsigned __int16 *)v120 + 4);
      if (!v122 || v115[v112 + 4 + v118 + v122] != 5)
        goto LABEL_102;
      if (v121 >= 7 && (v123 = *(unsigned __int16 *)&v115[v112 + 10 + v119]) != 0)
      {
        v124 = *(unsigned int *)&v115[v112 + 4 + v118 + v123];
        v116 = v124;
        if ((v124 & 0x80000000) != 0)
        {
          v117 = 1 << (v124 >> 20);
          if ((v114 & v117) != 0)
          {
            *(_BYTE *)(a1 + 752) = 1;
            *(_QWORD *)(a1 + 160) |= v117;
          }
LABEL_101:
          *v64 |= v117;
LABEL_102:
          v112 += 4;
          if (v113 == v112)
            goto LABEL_111;
          continue;
        }
      }
      else
      {
        v116 = 0;
      }
      break;
    }
    v117 = 1 << v116;
    goto LABEL_101;
  }
LABEL_111:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v461 + 400);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(v461 + 408);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(v461 + 408) | *(_QWORD *)(v461 + 400);
  memset(v479, 0, 40);
  v125 = 504;
  if (!a7)
    v125 = 168;
  v126 = v455 + v125;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::encodeConstantPDS(v455 + v125, v462, v461, v460, 0, *(_QWORD *)(a1 + 848), *(_QWORD *)(a1 + 856), *(_QWORD *)(a1 + 864), (uint64_t)v479, (_QWORD *)(a1 + 784), (uint64_t *)(a1 + 808), (unsigned int *)(a1 + 176), (_DWORD *)(a1 + 824), (unint64_t *)(a1 + 816), (_DWORD *)(a1 + 1588));
  v127 = *(_QWORD *)(*(_QWORD *)&v479[6] + 296);
  v128 = *(_OWORD *)&v479[4];
  *(_OWORD *)(a1 + 1000) = *(_OWORD *)v479;
  *(_OWORD *)(a1 + 1016) = v128;
  *(_OWORD *)(a1 + 1025) = *(_OWORD *)((char *)&v479[6] + 1);
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1073) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_QWORD *)(a1 + 912) = v127;
  *(_DWORD *)a1 = 8 * (*(_DWORD *)(a1 + 180) + *(_DWORD *)(a1 + 176) + *(_DWORD *)(a1 + 184) + *(_DWORD *)(a1 + 188));
  *(_QWORD *)(a1 + 992) = v126;
  *(_QWORD *)(a1 + 1192) = v455 + 168 * v457;
  *(_BYTE *)(a1 + 1516) = 0;
  bzero((void *)(a1 + 1592), 0x258uLL);
  v129 = *v452;
  if (*v452)
  {
    v130 = (unsigned int **)(v462 + 784);
    if (*(_QWORD *)(v462 + 232))
      v130 = v452;
  }
  else
  {
    v130 = (unsigned int **)(v462 + 784);
  }
  v131 = 0;
  if (*v130 && v130[1])
    v131 = (int *)((char *)*v130 + **v130);
  v132 = (unsigned __int16 *)((char *)v131 - *v131);
  if (*v132 >= 5u && (v133 = v132[2]) != 0)
  {
    v134 = (int *)((char *)v131 + v133 + *(unsigned int *)((char *)v131 + v133));
    if (!v129)
      goto LABEL_124;
LABEL_126:
    v135 = (unsigned int **)(v462 + 784);
    if (*(_QWORD *)(v462 + 232))
      v135 = v452;
  }
  else
  {
    v134 = 0;
    if (v129)
      goto LABEL_126;
LABEL_124:
    v135 = (unsigned int **)(v462 + 784);
  }
  v136 = 0;
  if (*v135 && v135[1])
    v136 = (int *)((char *)*v135 + **v135);
  v137 = (unsigned __int16 *)((char *)v136 - *v136);
  if (*v137 < 7u)
  {
    v138 = 0;
  }
  else
  {
    v138 = (int *)v137[3];
    if (v138)
      v138 = (int *)((char *)v138 + (_QWORD)v136 + *(unsigned int *)((char *)v138 + (_QWORD)v136));
  }
  v139 = *v453;
  v458 = v138;
  if (*v453)
  {
    v140 = (unsigned int **)(v462 + 1024);
    if (*(_QWORD *)(v462 + 472))
      v140 = v453;
  }
  else
  {
    v140 = (unsigned int **)(v462 + 1024);
  }
  v141 = 0;
  if (*v140 && v140[1])
    v141 = (int *)((char *)*v140 + **v140);
  v142 = (unsigned __int16 *)((char *)v141 - *v141);
  if (*v142 >= 7u && (v143 = v142[3]) != 0)
  {
    v144 = (int *)((char *)v141 + v143 + *(unsigned int *)((char *)v141 + v143));
    if (!v139)
      goto LABEL_146;
LABEL_148:
    v145 = (unsigned int **)(v462 + 1024);
    if (*(_QWORD *)(v462 + 472))
      v145 = v453;
  }
  else
  {
    v144 = 0;
    if (v139)
      goto LABEL_148;
LABEL_146:
    v145 = (unsigned int **)(v462 + 1024);
  }
  v146 = 0;
  if (*v145 && v145[1])
    v146 = (int *)((char *)*v145 + **v145);
  v147 = (unsigned __int16 *)((char *)v146 - *v146);
  if (*v147 >= 0xDu && (v148 = v147[6]) != 0)
  {
    v149 = (int *)((char *)v146 + v148 + *(unsigned int *)((char *)v146 + v148));
    if (!v139)
      goto LABEL_156;
LABEL_158:
    v150 = (unsigned int **)(v462 + 1024);
    if (*(_QWORD *)(v462 + 472))
      v150 = v453;
  }
  else
  {
    v149 = 0;
    if (v139)
      goto LABEL_158;
LABEL_156:
    v150 = (unsigned int **)(v462 + 1024);
  }
  v151 = 0;
  if (*v150 && v150[1])
    v151 = (int *)((char *)*v150 + **v150);
  v152 = (unsigned __int16 *)((char *)v151 - *v151);
  if (*v152 >= 5u && (v153 = v152[2]) != 0)
    v154 = (int *)((char *)v151 + v153 + *(unsigned int *)((char *)v151 + v153));
  else
    v154 = 0;
  v155 = (unsigned __int16 *)((char *)v154 - *v154);
  v456 = v144;
  if (*v155 >= 0xBu && (v156 = v155[5]) != 0)
    v157 = (char *)v154 + v156 + *(unsigned int *)((char *)v154 + v156);
  else
    v157 = 0;
  v158 = *v134;
  v159 = *(unsigned __int16 *)((char *)v134 - v158 + 28);
  v160 = *(unsigned int *)((char *)v134 + v159);
  if (*(int *)((char *)v134 + v159 + v160))
  {
    v161 = 0;
    v162 = v157 + 4;
    LODWORD(v157) = *(unsigned __int16 *)((char *)v134 - v158 + 28);
    while (1)
    {
      v163 = (uint64_t)&v134[v161] + v157 + v160;
      v164 = (int *)(v163 + 4 + *(unsigned int *)(v163 + 4));
      v165 = (unsigned __int16 *)((char *)v164 - *v164);
      v166 = *v165;
      if (v166 >= 5 && v165[2] && *((_BYTE *)v164 + v165[2]) == 18)
        break;
LABEL_173:
      ++v161;
      v157 = (char *)*(unsigned __int16 *)((char *)v134 - (int)v158 + 28);
      v160 = *(unsigned int *)&v157[(_QWORD)v134];
      if (v161 >= *(unsigned int *)&v157[(_QWORD)v134 + v160])
        goto LABEL_188;
    }
    v167 = *(_QWORD **)(a1 + 16);
    if (v166 < 9)
    {
      if (v166 >= 7)
        goto LABEL_182;
      v169 = 0;
    }
    else
    {
      v168 = v165[4];
      if (v165[4])
        v168 = *(unsigned int *)((char *)v164 + v168);
      v167 = (_QWORD *)((char *)v167 + 4 * v168);
LABEL_182:
      v169 = v165[3];
      if (v165[3])
        v169 = *(unsigned int *)((char *)v164 + v169);
    }
    AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)v479, (int *)&v162[4 * v169 + *(unsigned int *)&v162[4 * v169]]);
    AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields::SamplerStateFields((unint64_t *)&v464, (float *)v479);
    *v167 = v464;
    if (v481 < 0)
      operator delete(__p);
    std::vector<AGXA10FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v454, (uint64_t)v167);
    LODWORD(v158) = *v134;
    goto LABEL_173;
  }
LABEL_188:
  AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerConstantSamplerList(v459, v454);
  v170 = *(unsigned __int16 *)((char *)v134 - *v134 + 24);
  v171 = *(unsigned int *)((char *)v134 + v170);
  v172 = (unsigned int *)((char *)v134 + v170 + v171);
  v173 = *v172;
  if ((_DWORD)v173)
  {
    v174 = 0;
    v175 = 4 * v173;
    v176 = (char *)v134 + v170 + v171;
    do
    {
      v179 = *(unsigned int *)&v176[v174 + 4];
      v180 = v179 - *(int *)((char *)&v172[v174 / 4 + 1] + v179);
      v181 = &v176[v174 + v180];
      v182 = *((unsigned __int16 *)v181 + 2);
      if (v182 >= 5)
      {
        v183 = *((unsigned __int16 *)v181 + 4);
        if (v183)
        {
          v184 = v176[v174 + 4 + v179 + v183];
          v177 = (_QWORD *)(a1 + 96);
          v178 = 16;
          switch(v184)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              if (v182 < 7 || (v185 = *(unsigned __int16 *)&v176[v174 + 10 + v180]) == 0)
              {
                v187 = 0;
LABEL_202:
                if (v184 == 98)
                  v188 = 16;
                else
                  v188 = 8;
                v178 = 1 << v187;
                v189 = a1 + v188;
                *(_QWORD *)(v189 + 72) |= 1 << v187;
                v177 = (_QWORD *)(v189 + 48);
                goto LABEL_191;
              }
              v186 = *(unsigned int *)&v176[v174 + 4 + v179 + v185];
              if ((v186 & 0xFFF00000) != 0x400000)
              {
                v187 = v186;
                if ((v186 & 0x80000000) != 0)
                {
                  v178 = 1 << (v186 >> 20);
                  v177 = (_QWORD *)(a1 + 48);
                  goto LABEL_191;
                }
                goto LABEL_202;
              }
              break;
            case 59:
              goto LABEL_191;
            case 60:
            case 61:
              v177 = (_QWORD *)(a1 + 96);
              v178 = 32;
LABEL_191:
              *v177 |= v178;
              break;
            default:
              break;
          }
        }
      }
      v174 += 4;
    }
    while (v175 != v174);
  }
  v190 = *(_DWORD *)(v459 + 6728);
  bzero(v479, 0x1F0uLL);
  v191 = (unsigned int *)((char *)v149 + *(unsigned __int16 *)((char *)v149 - *v149 + 6));
  v485 = *(unsigned int *)((char *)v191 + *v191);
  v499 = v190;
  v192 = *v149;
  v193 = *(unsigned __int16 *)((char *)v149 - v192 + 8);
  v194 = *(unsigned int *)((char *)v149 + v193);
  if (*(int *)((char *)v149 + v193 + v194))
  {
    v195 = 0;
    do
    {
      v197 = (uint64_t)&v149[v195] + v193 + v194;
      v198 = (int *)(v197 + 4 + *(unsigned int *)(v197 + 4));
      v199 = (unsigned __int16 *)((char *)v198 - *v198);
      if (*v199 >= 7u && v199[3])
      {
        v200 = *((char *)v198 + v199[3]);
        if (v200 == 3)
        {
          v497 = 1;
          v202 = v199[2];
          if (v202)
            v203 = *(int *)((char *)v198 + v202);
          else
            v203 = 0;
          v495 = v203;
        }
        else if (v200 == 1)
        {
          v498 = 1;
          v201 = v199[2];
          if (v201)
            v496 = *(int *)((char *)v198 + v201);
          else
            v496 = 0;
        }
      }
      ++v195;
      v196 = *v149;
      v193 = *(unsigned __int16 *)((char *)v149 - v196 + 8);
      v194 = *(unsigned int *)((char *)v149 + v193);
    }
    while (v195 < *(unsigned int *)((char *)v149 + v193 + v194));
    v204 = -v196;
  }
  else
  {
    v204 = -v192;
  }
  v205 = *(unsigned __int16 *)((char *)v149 + v204 + 6);
  v206 = *(unsigned int *)((char *)v149 + v205);
  v207 = (unsigned int *)((char *)v149 + v205 + v206);
  v208 = *v207;
  if ((_DWORD)v208)
  {
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 4 * v208;
    v214 = (char *)v149 + v205 + v206;
    do
    {
      v217 = v207[v209 / 4 + 1];
      v218 = v217 - *(int *)((char *)&v207[v209 / 4 + 1] + v217);
      v219 = &v214[v209 + v218];
      v220 = *((unsigned __int16 *)v219 + 2);
      if (v220 < 7)
      {
        v215 = 0;
        v216 = 1;
      }
      else
      {
        v221 = *((unsigned __int16 *)v219 + 5);
        if (v221)
          LODWORD(v221) = *(_DWORD *)&v214[v209 + 4 + v217 + v221];
        v222 = v221 >> 31;
        v216 = (int)v221 >= 0;
        v211 += v222;
        v215 = v220 >= 9
            && (v223 = *(unsigned __int16 *)&v214[v209 + 12 + v218]) != 0
            && v214[v209 + 4 + v217 + v223] != 0;
      }
      v212 += v216;
      v210 |= v215;
      v209 += 4;
    }
    while (v213 != v209);
  }
  else
  {
    v212 = 0;
    v211 = 0;
    v210 = 0;
  }
  v224 = v210 | (v498 != 0);
  v225 = 2 * v212;
  if (v190)
    v226 = 2 * v212;
  else
    v226 = 0;
  if ((v224 & 1) != 0)
    v227 = 2;
  else
    v227 = 0;
  v486 = v212;
  v489 = v226 + v225;
  v487 = v227 + v226 + v225;
  v493 = v487 + 2 * v211;
  v228 = (unsigned int *)((char *)v149 + *(unsigned __int16 *)((char *)v149 - *v149 + 6));
  v229 = (unsigned int *)((char *)v228 + *v228);
  v232 = *v229;
  v230 = v229 + 1;
  v231 = v232;
  if (v232)
  {
    v233 = 0;
    v234 = v212;
    v235 = &v230[v231];
    do
    {
      v237 = (int *)((char *)v230 + *v230);
      v238 = (unsigned __int16 *)((char *)v237 - *v237);
      v239 = *v238;
      if (v239 < 7)
      {
        LODWORD(v240) = 0;
      }
      else
      {
        v240 = v238[3];
        if (v238[3])
          LODWORD(v240) = *(int *)((char *)v237 + v240);
      }
      if ((int)v240 < 0)
        v241 = v234;
      else
        v241 = v233;
      if (v239 < 5)
      {
        LODWORD(v242) = 0;
      }
      else
      {
        v242 = v238[2];
        if (v242)
          LODWORD(v242) = *(int *)((char *)v237 + v242);
      }
      v479[4 * v241 + 2] = v242;
      v243 = (unsigned __int16 *)((char *)v237 - *v237);
      v244 = *v243;
      if (v244 <= 0xA)
      {
        v247 = 0;
        *(_QWORD *)&v479[4 * v241] = 0;
      }
      else
      {
        v245 = v243[5];
        if (v243[5])
          v245 = *(unsigned int *)((char *)v237 + v245);
        *(_QWORD *)&v479[4 * v241] = v245;
        if (v244 >= 0xF && (v246 = v243[7]) != 0)
          v247 = *(int *)((char *)v237 + v246);
        else
          v247 = 0;
      }
      v248 = &v479[v241];
      v248[64] = v247;
      v249 = (unsigned __int16 *)((char *)v237 - *v237);
      if (*v249 < 0x11u)
      {
        LODWORD(v250) = 0;
      }
      else
      {
        v250 = v249[8];
        if (v250)
          LODWORD(v250) = *(int *)((char *)v237 + v250);
      }
      v248[80] = v250;
      v251 = (unsigned __int16 *)((char *)v237 - *v237);
      if (*v251 >= 0x11u && (v252 = v251[8]) != 0)
      {
        v253 = *(int *)((char *)v237 + v252);
        v254 = 1 << v241;
        if (v253 <= 1)
          v255 = 0;
        else
          v255 = 1 << v241;
      }
      else
      {
        v255 = 0;
        v254 = 1 << v241;
      }
      v483 |= v255;
      v256 = (unsigned __int16 *)((char *)v237 - *v237);
      if (*v256 < 9u)
      {
        LODWORD(v257) = 0;
      }
      else
      {
        v257 = v256[4];
        if (v257)
        {
          if (*((_BYTE *)v237 + v257))
            LODWORD(v257) = v254;
          else
            LODWORD(v257) = 0;
        }
      }
      v482 |= v257;
      v258 = (unsigned __int16 *)((char *)v237 - *v237);
      if (*v258 >= 0x13u && (v259 = v258[9]) != 0)
      {
        if (!*((_BYTE *)v237 + v259))
          v254 = 0;
      }
      else
      {
        v254 = 0;
      }
      v484 |= v254;
      if ((v240 & 0x80000000) != 0)
      {
        v260 = (v240 >> 20) & 0x7FF;
        v263 = *(uint64_t **)(*(_QWORD *)(v460 + 8 * v260) + 48);
        if (!v263)
LABEL_525:
          abort();
        v264 = v234 - v212 + (v487 >> 1);
        v265 = v264 + v211;
        v266 = v240 & 0xFFFFF;
        while (1)
        {
          while (1)
          {
            v267 = *((_DWORD *)v263 + 7);
            if (v267 <= v266)
              break;
            v263 = (uint64_t *)*v263;
            if (!v263)
              goto LABEL_525;
          }
          if (v267 >= v266)
            break;
          v263 = (uint64_t *)v263[1];
          if (!v263)
            goto LABEL_525;
        }
        v268 = *((_DWORD *)v263 + 8) >> 3;
        v269 = a1 + 8 * v264;
        *(_WORD *)(v269 + 1632) = v260;
        *(_WORD *)(v269 + 1634) = v268;
        v270 = (unsigned __int16 *)((char *)v237 - *v237);
        if (*v270 < 0xDu)
        {
          LODWORD(v271) = 0;
        }
        else
        {
          v271 = v270[6];
          if (v271)
            LODWORD(v271) = *(int *)((char *)v237 + v271);
        }
        *(_DWORD *)(v269 + 1636) = 4 * v271;
        if (!v190)
          goto LABEL_244;
        v272 = a1 + 8 * v265;
        *(_WORD *)(v272 + 1632) = v260;
        *(_WORD *)(v272 + 1634) = v240;
        v273 = (unsigned __int16 *)((char *)v237 - *v237);
        if (*v273 < 0xDu)
          goto LABEL_308;
        v274 = v273[6];
        if (!v274)
          goto LABEL_308;
      }
      else
      {
        v260 = v240 & 0xFFFFF;
        v261 = a1 + 8 * v241;
        *(_DWORD *)(v261 + 1632) = (v240 & 0xFFFFF) + 65;
        v262 = (unsigned __int16 *)((char *)v237 - *v237);
        if (*v262 < 0xDu)
        {
          LODWORD(v236) = 0;
        }
        else
        {
          v236 = v262[6];
          if (v236)
            LODWORD(v236) = *(int *)((char *)v237 + v236);
        }
        *(_DWORD *)(v261 + 1636) = 4 * v236;
        if (!v190)
          goto LABEL_244;
        v272 = a1 + 8 * (v233 + v212);
        *(_DWORD *)(v272 + 1632) = v260 + 128;
        v275 = (unsigned __int16 *)((char *)v237 - *v237);
        if (*v275 < 0xDu || (v274 = v275[6]) == 0)
        {
LABEL_308:
          v276 = 0;
          goto LABEL_309;
        }
      }
      v276 = *(int *)((char *)v237 + v274);
LABEL_309:
      *(_DWORD *)(v272 + 1636) = 4 * v276;
LABEL_244:
      v233 += (int)v240 >= 0;
      v234 += v240 >> 31;
      *(_QWORD *)(a1 + 1592) |= 1 << v260;
      ++v230;
    }
    while (v230 != v235);
  }
  if ((v224 & 1) != 0)
  {
    *(_QWORD *)(a1 + ((4 * v489) & 0x3FFFFFFF8) + 1632) = 111;
    *(_QWORD *)(a1 + 1592) |= 0x400000000000uLL;
  }
  LODWORD(v277) = 0;
  v488 = 0;
  v278 = *(_QWORD *)(a1 + 760);
  v492 = a1 + 1632 + 4 * v493;
  v490 = v278;
  v279 = (unsigned __int16 *)((char *)v134 - *v134);
  if (*v279 >= 5u)
  {
    v277 = v279[2];
    if (v279[2])
      LODWORD(v277) = *(int *)((char *)v134 + v277);
  }
  v491 = v277;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)v479, 1);
  *(_DWORD *)(a1 + 1616) = v212 & 0x7FFFFFFF;
  v280 = v487;
  v281 = (v487 - v225) >> 1;
  *(_DWORD *)(a1 + 1620) = v281;
  v282 = (v493 - v280) >> 1;
  *(_DWORD *)(a1 + 1624) = v282;
  v283 = (v500 + 1) >> 1;
  *(_DWORD *)(a1 + 1628) = v283;
  *(_DWORD *)a1 += 8 * (v281 + v212 + v282 + v283);
  v284 = *(_QWORD *)(a1 + 992);
  v285 = v501;
  v488 = 1;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)v479, 1);
  v286 = v501;
  v488 = 2;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)v479, 1);
  AGX::Heap<true>::allocateImpl(&v477, v284, 4 * (v286 + v285 + v501), (_QWORD *)(a1 + 920));
  *(_DWORD *)(a1 + 1588) += LODWORD(v478[0]);
  v287 = *((_QWORD *)&v477 + 1);
  v288 = v477;
  v488 = 0;
  v494 = *((_QWORD *)&v477 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)v479, 0);
  *(_DWORD *)(a1 + 2288) = v288;
  LODWORD(v284) = v501;
  v289 = 4 * v501;
  v290 = v287 + 4 * v501;
  v488 = 1;
  v494 = v290;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)v479, 0);
  *(_DWORD *)(a1 + 2292) = v289 + v288;
  v291 = v501;
  v488 = 2;
  v494 = v290 + 4 * v501;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeVertexPDSProgram((uint64_t)v479, 0);
  LODWORD(v292) = 0;
  *(_DWORD *)(a1 + 2296) = v288 + 4 * (v291 + v284);
  *(_DWORD *)(a1 + 1512) = v502;
  v293 = (unsigned __int16 *)((char *)v134 - *v134);
  if (*v293 >= 7u)
  {
    v292 = v293[3];
    if (v293[3])
      LODWORD(v292) = *(int *)((char *)v134 + v292);
  }
  v294 = (unsigned __int16 *)((char *)v458 - *v458);
  if (*v294 < 5u)
  {
    LODWORD(v295) = 0;
  }
  else
  {
    v295 = v294[2];
    if (v295)
      LODWORD(v295) = *(int *)((char *)v458 + v295);
  }
  v296 = (unsigned __int16 *)((char *)v456 - *v456);
  if (*v296 < 0xBu)
  {
    LODWORD(v297) = 0;
  }
  else
  {
    v297 = v296[5];
    if (v297)
      LODWORD(v297) = *(int *)((char *)v456 + v297);
  }
  v298 = v297 + 5;
  v299 = v493 + v500;
  if ((v297 + 5) >= 0x41)
    v300 = 1140852608;
  else
    v300 = 1140854656;
  if (v298 < 0x31)
    v300 = 1140858752;
  if (v298 < 0x21)
    v300 = 1140862848;
  v301 = v503;
  *(_DWORD *)(a1 + 2192) = v300;
  *(_DWORD *)(a1 + 2196) = v288;
  *(_DWORD *)(a1 + 2200) = v297;
  v302 = (32 * v301 + 96) & 0xFFFFFF80 | (((_DWORD)v295 << 9) + 1920) & 0xFFFFF800 | ((4 * v299 + 12) >> 4) | (((v297 + 5) > 0x40) << 30);
  *(_DWORD *)(a1 + 2204) = v302;
  *(_DWORD *)(a1 + 2208) = v300;
  *(_DWORD *)(a1 + 2212) = v288;
  *(_DWORD *)(a1 + 2216) = v297;
  *(_DWORD *)(a1 + 2220) = v302;
  *(_DWORD *)(a1 + 2224) = v300 | 2;
  *(_DWORD *)(a1 + 2228) = v288;
  *(_DWORD *)(a1 + 2232) = v297;
  *(_DWORD *)(a1 + 2236) = v302;
  *(_DWORD *)(a1 + 2240) = v300 | 2;
  *(_DWORD *)(a1 + 2244) = v288;
  *(_DWORD *)(a1 + 2248) = v297;
  *(_DWORD *)(a1 + 2252) = v302;
  *(_DWORD *)(a1 + 2256) = v300 | 4;
  *(_DWORD *)(a1 + 2260) = v288;
  *(_DWORD *)(a1 + 2264) = v297;
  *(_DWORD *)(a1 + 2268) = v302;
  *(_DWORD *)(a1 + 2272) = v300 | 4;
  *(_DWORD *)(a1 + 2276) = v288;
  *(_DWORD *)(a1 + 2280) = v297;
  *(_DWORD *)(a1 + 2284) = v302;
  *(_DWORD *)(a1 + 2324) = v298;
  v303 = (((_DWORD)v292 << 13) + 129024) & 0xDFFE0000;
  v304 = (*(_DWORD *)(a1 + 784) + 15) & 0xFFFFFFF0;
  *(_DWORD *)(a1 + 2300) = v303 | ((unint64_t)(*(_QWORD *)(a1 + 816) + 15) >> 4) | 0x20000000;
  *(_DWORD *)(a1 + 2304) = 0;
  *(_DWORD *)(a1 + 2308) = v304;
  v305 = *(_DWORD *)(a1 + 188);
  v306 = *(_DWORD *)(a1 + 180) + *(_DWORD *)(a1 + 176) + *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 2344) = 0;
  if (v306 + v305)
  {
    v476 = 0;
    v475 = 0;
    v474 = 0;
    v473 = 0;
    AGX::Heap<true>::allocateImpl(&v464, *(_QWORD *)(a1 + 1192), 576, (_QWORD *)(a1 + 960));
    *(_DWORD *)(a1 + 1588) += LODWORD(v465[0]);
    *(_OWORD *)(a1 + 1248) = v464;
    *(_OWORD *)(a1 + 1264) = v465[0];
    *(_OWORD *)(a1 + 1273) = *(_OWORD *)((char *)v465 + 9);
    v307 = *(_QWORD *)(a1 + 1248);
    if (a7)
      v307 += 0x300000000;
    *(_QWORD *)(a1 + 2328) = v307;
    v471 = 0;
    v470 = 0;
    v472 = 0;
    v308 = (unsigned __int16 *)((char *)v134 - *v134);
    if (*v308 >= 0x17u)
    {
      v309 = v308[11];
      if (v309)
      {
        v310 = *(int *)((char *)v134 + v309) + 3;
        LODWORD(v464) = 0;
        if (v310 >= 4)
          std::vector<DriverEIOffset>::__append((unint64_t *)&v470, v310 >> 2, (const float *)&v464);
      }
    }
    v311 = *(unsigned __int16 *)((char *)v134 - *v134 + 24);
    v312 = *(unsigned int *)((char *)v134 + v311);
    v313 = (unsigned int *)((char *)v134 + v311 + v312);
    v314 = *v313;
    if ((_DWORD)v314)
    {
      v315 = 0;
      v316 = 4 * v314;
      v317 = (uint32x2_t *)v470;
      v318 = (char *)v134 + v311 + v312;
      while (1)
      {
        v320 = v313[v315 / 4 + 1];
        v321 = v320 - *(int *)((char *)&v313[v315 / 4 + 1] + v320);
        v322 = &v318[v315 + v321];
        v323 = *((unsigned __int16 *)v322 + 2);
        if (v323 >= 5 && (v324 = *((unsigned __int16 *)v322 + 4), *((_WORD *)v322 + 4)))
        {
          v325 = 0;
          v326 = v318[v315 + 4 + v320 + v324];
          switch(v326)
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              break;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_349;
            default:
              if (v326 != 113)
                goto LABEL_349;
              break;
          }
        }
        else
        {
LABEL_349:
          v325 = 1;
        }
        if (v323 < 7)
          break;
        if (*(_WORD *)&v318[v315 + 10 + v321])
        {
          v327 = *(_DWORD *)&v318[v315 + 4 + v320 + *(unsigned __int16 *)&v318[v315 + 10 + v321]];
          if (v327 >= 0)
            v325 = 1;
          if (v325 != 1)
            goto LABEL_344;
          if (v323 < 9)
            goto LABEL_362;
        }
        else
        {
          v327 = 0;
          if (v323 < 9)
            goto LABEL_362;
        }
        if (*(_WORD *)&v318[v315 + 12 + v321])
          v328 = (uint32x2_t *)((char *)v317
                              + 4
                              * *(unsigned int *)&v318[v315 + 4 + v320 + *(unsigned __int16 *)&v318[v315 + 12 + v321]]);
        else
          v328 = v317;
LABEL_363:
        if (*(_WORD *)&v318[v315 + 8 + v321])
        {
          v329 = v318[v315 + 4 + v320 + *(unsigned __int16 *)&v318[v315 + 8 + v321]];
          if (v323 < 7)
            goto LABEL_370;
        }
        else
        {
          v329 = 0;
          if (v323 < 7)
            goto LABEL_370;
        }
        v330 = *(unsigned __int16 *)&v318[v315 + 10 + v321];
        if (v330)
        {
          v331 = *(_DWORD *)&v318[v315 + 4 + v320 + v330];
          if (v329 != 131)
            goto LABEL_371;
          goto LABEL_342;
        }
LABEL_370:
        v331 = 0;
        if (v329 != 131)
        {
LABEL_371:
          if (v329 == 60)
          {
            if (v331 == 5)
            {
              v319 = 1073741845;
            }
            else
            {
              if (v331 == 3)
              {
                v328->i32[0] = 1073741844;
                goto LABEL_344;
              }
              if (v331 > 0x10)
              {
                v328->i32[0] = 0;
                goto LABEL_344;
              }
              v319 = dword_232D767D8[v331];
            }
          }
          else
          {
            v332 = 56 * (v327 & 0xFFFFF);
            v333 = v332 + 16;
            switch(v329)
            {
              case 11:
                *(uint32x4_t *)v328->i8 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v333), (int32x4_t)xmmword_232D737E0), 2uLL);
                goto LABEL_344;
              case 12:
                v328->i32[0] = v333 >> 2;
                v328->i32[1] = (v333 >> 2) | 1;
                v328[1] = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v333), (int32x2_t)0xC00000008), 2uLL);
                goto LABEL_344;
              case 13:
                v334 = v332 + 48;
                goto LABEL_405;
              case 16:
                v334 = v332 + 52;
                goto LABEL_405;
              case 17:
                v334 = v332 + 56;
                goto LABEL_405;
              case 59:
                *v328 = (uint32x2_t)0x1B7000001B6;
                goto LABEL_344;
              case 61:
                v328->i32[0] = 542;
                goto LABEL_344;
              case 62:
                v334 = v332 + 60;
                goto LABEL_405;
              case 64:
                *v328 = (uint32x2_t)0x21900000218;
                goto LABEL_344;
              case 74:
                goto LABEL_386;
              case 84:
                v328->i32[0] = 560;
                goto LABEL_344;
              case 85:
                v328->i32[0] = 561;
                goto LABEL_344;
              case 93:
                if ((v327 & 0xFFF00000) == 0x400000)
                {
LABEL_386:
                  v328->i32[0] = 2;
                  goto LABEL_344;
                }
                v334 = v332 + 64;
LABEL_405:
                v319 = v334 >> 2;
                break;
              case 97:
                v335 = 8 * (v327 & 0xFFFFF) + 1768;
                goto LABEL_395;
              case 98:
                v335 = 8 * (v327 & 0xFFFFF) + 2016;
LABEL_395:
                v336 = v335 >> 2;
                v328->i32[0] = v336;
                v328->i32[1] = v336 | 1;
                goto LABEL_344;
              case 108:
                v328->i32[0] = 562;
                goto LABEL_344;
              case 109:
                v337 = v331 + 657;
                goto LABEL_402;
              case 110:
                v337 = v331 + 720;
LABEL_402:
                v319 = v337 & 0x3FFFFFFF;
                goto LABEL_343;
              case 113:
                v334 = 8 * (v327 & 0xFFFFF) + 2016;
                goto LABEL_405;
              case 118:
                *v328 = (uint32x2_t)0x21B0000021ALL;
                goto LABEL_344;
              case 119:
                *v328 = (uint32x2_t)0x21D0000021CLL;
                goto LABEL_344;
              default:
                goto LABEL_344;
            }
          }
          goto LABEL_343;
        }
LABEL_342:
        v319 = v331 | 0xC0000000;
LABEL_343:
        v328->i32[0] = v319;
LABEL_344:
        v315 += 4;
        if (v316 == v315)
          goto LABEL_406;
      }
      if (v323 < 5)
        goto LABEL_344;
      v327 = 0;
LABEL_362:
      v328 = v317;
      goto LABEL_363;
    }
LABEL_406:
    if (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible((_QWORD *)v462, 0))
    {
      AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t *)&v464, (unsigned int **)v462, (const std::vector<unsigned int>::value_type *)1, *(_BYTE *)(v461 + 424), v460, 0, 0, 1, v338, v339, v340, (uint64_t *)&v470);
      v341 = (char *)v469 - (char *)v468;
      if (v469 != v468)
      {
        v343 = v466;
        v342 = v467;
        goto LABEL_412;
      }
      v343 = v466;
      v342 = v467;
      if (v467 != v466)
      {
LABEL_412:
        v344 = *(_QWORD *)(a1 + 1192);
        v345 = (char *)v342 - (char *)v343;
        v346 = v341 + 2 * v345;
        *(_DWORD *)(a1 + 1584) = v346;
        if (AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::ei_max_indirect_gather_size_watermark > v346)
          v346 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::ei_max_indirect_gather_size_watermark;
        AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::ei_max_indirect_gather_size_watermark = v346;
        AGX::Heap<true>::allocateImpl(&v504, v344, ((v341 + v345) & 0xFFFFFFFFFFFFFFFCLL) + 4, (_QWORD *)(a1 + 976));
        *(_DWORD *)(a1 + 1588) += LODWORD(v505[0]);
        *(_OWORD *)(a1 + 1392) = v504;
        *(_OWORD *)(a1 + 1408) = v505[0];
        *(_OWORD *)(a1 + 1417) = *(_OWORD *)((char *)v505 + 9);
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(a1 + 1392) + 0x300000000;
        v347 = *(_WORD **)(a1 + 1400);
        v349 = v466;
        v348 = v467;
        *v347 = ((_DWORD)v467 - (_DWORD)v466) >> 2;
        v351 = v468;
        v350 = v469;
        v347[1] = ((_DWORD)v469 - (_DWORD)v468) >> 2;
        v352 = v347 + 2;
        if (v348 != v349)
        {
          v353 = (char *)v348 - (char *)v349 - 4;
          if (v353 <= 0x1B
            || ((v429 = (char *)v347 + (v353 & 0xFFFFFFFFFFFFFFFCLL),
                 v430 = (unint64_t)(v429 + 6),
                 v431 = (unint64_t)(v429 + 8),
                 v347 + 3 < (unsigned __int16 *)((char *)v349 + (v353 & 0xFFFFFFFFFFFFFFFCLL) + 4))
              ? (v432 = (unint64_t)(v349 + 1) >= v431)
              : (v432 = 1),
                v432 ? (v433 = 0) : (v433 = 1),
                (unint64_t)v349 < v430
              ? (v434 = v352 >= (__int16 *)((char *)v349 + (v353 & 0xFFFFFFFFFFFFFFFCLL) + 2))
              : (v434 = 1),
                !v434 || (v433 & 1) != 0))
          {
            v354 = v352;
            do
            {
LABEL_417:
              v355 = *v349;
              v356 = v355 & 0x7FF;
              v357 = (v355 << 16) & 0x80000000 | ((v355 & 0x7FF) << 20);
              if ((v355 & 0x7FFu) >= 0x23)
                v358 = -44;
              else
                v358 = 7;
              v359 = v358 + v356;
              if (v357 == 0x200000)
                v359 = 6;
              *v354 = v359;
              v354[1] = v349[1];
              v354 += 2;
              v349 += 2;
            }
            while (v349 != v348);
          }
          else
          {
            v435 = (v353 >> 2) + 1;
            v436 = 2 * (v435 & 0x7FFFFFFFFFFFFFF8);
            v354 = &v352[v436];
            v437.i64[0] = 0x20000000200000;
            v437.i64[1] = 0x20000000200000;
            v438.i64[0] = 0x23002300230023;
            v438.i64[1] = 0x23002300230023;
            v439.i64[0] = 0x7000700070007;
            v439.i64[1] = 0x7000700070007;
            v440.i64[0] = 0x6000600060006;
            v440.i64[1] = 0x6000600060006;
            v441 = (const __int16 *)v349;
            v442 = v435 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v507 = vld2q_s16(v441);
              v441 += 16;
              v443 = vshrq_n_u16((uint16x8_t)v507.val[0], 0xFuLL);
              *(_OWORD *)v507.val &= __PAIR128__(0x7FF07FF07FF07FFLL, 0x7FF07FF07FF07FFLL);
              v444 = (int8x16_t)vcgtq_u16(v438, (uint16x8_t)v507.val[0]);
              v507.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v507.val[0].i8), 0x14uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v443.i8), 0x1FuLL)), v437), (int16x8_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v507.val[0]), 0x14uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v443), 0x1FuLL)), v437)),
                                         v440,
                                         (int8x16_t)vaddq_s16((int16x8_t)vorrq_s8(vandq_s8(v444, v439), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v444) & __PAIR128__(0xFFD4FFD4FFD4FFD4, 0xFFD4FFD4FFD4FFD4))), v507.val[0]));
              vst2q_s16(v352, v507);
              v352 += 16;
              v442 -= 8;
            }
            while (v442);
            if (v435 != (v435 & 0x7FFFFFFFFFFFFFF8))
            {
              v349 = (unsigned __int16 *)((char *)v349 + v436 * 2);
              goto LABEL_417;
            }
          }
          v352 = v354;
        }
        for (; v351 != v350; v352 += 2)
        {
          v360 = *v351;
          v361 = v360 & 0x7FF;
          v362 = (v360 << 16) & 0x80000000 | ((v360 & 0x7FF) << 20);
          if ((v360 & 0x7FFu) >= 0x23)
            v363 = -44;
          else
            v363 = 7;
          v364 = v363 + v361;
          if (v362 == 6291456)
            v364 = 4;
          if (v362 == 3145728)
            v364 = 5;
          if (v362 == 0x200000)
            v364 = 6;
          *v352 = v364;
          v352[1] = v351[1];
          v351 += 2;
        }
      }
      v365 = *(unsigned int **)(a1 + 1256);
      if (AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::encodeConstantPDS(*(_QWORD *)(a1 + 992), v462, (uint64_t)&v464, v460, 1, *(_QWORD *)(a1 + 848), *(_QWORD *)(a1 + 856), *(_QWORD *)(a1 + 864), a1 + 1096, &v476, &v475, v365, &v473, &v474, (_DWORD *)(a1 + 1588)))
      {
        *(_QWORD *)(a1 + 944) = *(_QWORD *)(*(_QWORD *)(a1 + 1120) + 296);
        v366 = v476;
        v367 = (v476 + 15) & 0xFFFFFFF0;
        *(_DWORD *)(a1 + 2312) = v303 | ((v474 + 15) >> 4) | 0x20000000;
        *(_DWORD *)(a1 + 2316) = 0;
        *(_DWORD *)(a1 + 2320) = v367;
        *(_QWORD *)(a1 + 832) = v366;
        *(_QWORD *)(a1 + 840) = v475;
        *(_DWORD *)(a1 + 2344) += 8 * (v365[1] + *v365 + v365[2] + v365[3]);
      }
      AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&v464);
    }
    if (v470)
    {
      v471 = v470;
      operator delete(v470);
    }
    AGX::Heap<true>::allocateImpl(&v464, *(_QWORD *)(a1 + 1192), 568, (_QWORD *)(a1 + 936));
    *(_DWORD *)(a1 + 1588) += LODWORD(v465[0]);
    v368 = (_DWORD *)*((_QWORD *)&v464 + 1);
    *(_QWORD *)(a1 + 2352) = v464;
    v369 = *(unsigned int *)(a1 + 184);
    *v368 = v369;
    if ((_DWORD)v369)
    {
      v370 = *(_DWORD *)(a1 + 176) + *(_DWORD *)(a1 + 180);
      v371 = (char *)v368 + 10;
      do
      {
        v372 = a1 + 8 * v370;
        v373 = *(_WORD *)(v372 + 192);
        v374 = *(_WORD *)(v372 + 198);
        LODWORD(v372) = *(_DWORD *)(v372 + 194);
        *((_WORD *)v371 - 1) = v373;
        *(_DWORD *)v371 = v372;
        *((_WORD *)v371 + 2) = v374;
        ++v370;
        v371 += 8;
        --v369;
      }
      while (v369);
    }
    v375 = v465[0];
    *(_OWORD *)(a1 + 1344) = v464;
    *(_OWORD *)(a1 + 1360) = v375;
    *(_OWORD *)(a1 + 1369) = *(_OWORD *)((char *)v465 + 9);
  }
  if (*(_DWORD *)(a1 + 1620) + *(_DWORD *)(a1 + 1616) + *(_DWORD *)(a1 + 1624) + *(_DWORD *)(a1 + 1628))
  {
    v376 = a1 + 1616;
    AGX::Heap<true>::allocateImpl(&v464, *(_QWORD *)(a1 + 1192), 576, (_QWORD *)(a1 + 968));
    *(_DWORD *)(a1 + 1588) += LODWORD(v465[0]);
    v377 = (_OWORD *)*((_QWORD *)&v464 + 1);
    v378 = v464;
    if (a7)
      v378 = v464 + 0x300000000;
    *(_QWORD *)(a1 + 2336) = v378;
    *v377 = *(_OWORD *)(a1 + 1616);
    v379 = (*(_DWORD *)(a1 + 1620) + *(_DWORD *)(a1 + 1616));
    if ((_DWORD)v379)
    {
      if (v379 > 7
        && ((v380 = 8 * v379 + 16, (unint64_t)(v377 + 1) >= v376 + v380)
         || a1 + 1632 >= (unint64_t)v377 + v380))
      {
        v381 = v379 & 0xFFFFFFF8;
        v417 = (const float *)(a1 + 1664);
        v418 = (float *)(v377 + 3);
        v419.i64[0] = 0x4000000040;
        v419.i64[1] = 0x4000000040;
        v420.i64[0] = 0x2300000023;
        v420.i64[1] = 0x2300000023;
        v421.i64[0] = 0x700000007;
        v421.i64[1] = 0x700000007;
        v422 = v381;
        do
        {
          v423 = v417 - 8;
          v506 = vld2q_f32(v423);
          v508 = vld2q_f32(v417);
          v424 = vaddq_s32((int32x4_t)v506.val[0], v419);
          v425 = vaddq_s32((int32x4_t)v508.val[0], v419);
          v426 = (int8x16_t)vcgtq_u32(v420, (uint32x4_t)v424);
          v427 = (int8x16_t)vcgtq_u32(v420, (uint32x4_t)v425);
          v506.val[0] = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v426, v421), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v426) & __PAIR128__(0xFFFFFFD4FFFFFFD4, 0xFFFFFFD4FFFFFFD4))), v424);
          v428 = v418 - 8;
          vst2q_f32(v428, v506);
          v508.val[0] = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v427, v421), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v427) & __PAIR128__(0xFFFFFFD4FFFFFFD4, 0xFFFFFFD4FFFFFFD4))), v425);
          vst2q_f32(v418, v508);
          v417 += 16;
          v418 += 16;
          v422 -= 8;
        }
        while (v422);
        if (v381 != v379)
          goto LABEL_452;
      }
      else
      {
        v381 = 0;
LABEL_452:
        v382 = (_DWORD *)v377 + 2 * v381 + 5;
        v383 = (int *)(8 * v381 + a1 + 1636);
        v384 = v379 - v381;
        do
        {
          v385 = *v383;
          v386 = *(v383 - 1) - 65;
          if (v386 >= 0x23)
            v387 = -44;
          else
            v387 = 7;
          *(v382 - 1) = v387 + v386;
          *v382 = v385;
          v382 += 2;
          v383 += 2;
          --v384;
        }
        while (v384);
      }
    }
    v388 = *(_DWORD *)(a1 + 1624);
    if (v388)
    {
      v389 = v379 + v388;
      do
      {
        v390 = 8 * v379;
        v391 = *(unsigned __int16 *)(a1 + v390 + 1632);
        v392 = *(_WORD *)(a1 + v390 + 1638);
        v393 = *(_DWORD *)(a1 + v390 + 1634);
        if (v391 >= 0x23)
          v394 = -44;
        else
          v394 = 7;
        v395 = (char *)v377 + v390;
        *((_WORD *)v395 + 8) = v394 + v391;
        *(_DWORD *)(v395 + 18) = v393;
        *((_WORD *)v395 + 11) = v392;
        LODWORD(v379) = v379 + 1;
        --v388;
      }
      while (v388);
      LODWORD(v379) = v389;
    }
    v396 = *(_DWORD *)(a1 + 1628);
    if (v396)
    {
      if (v396 <= 0xF || __CFADD__((_DWORD)v379, v396 - 1) || (unint64_t)v377 - v376 < 0x20)
      {
        v397 = 0;
LABEL_469:
        v398 = v396 - v397;
        do
        {
          *((_QWORD *)v377 + v379 + 2) = *(_QWORD *)(a1 + 8 * v379 + 1632);
          LODWORD(v379) = v379 + 1;
          --v398;
        }
        while (v398);
      }
      else
      {
        v397 = v396 & 0xFFFFFFFC;
        v445 = v396 & 0xFFFFFFFC;
        v446 = v379;
        do
        {
          v447 = 8 * v446;
          v448 = a1 + v447;
          v449 = (char *)v377 + v447;
          v450 = *(_OWORD *)(v448 + 1648);
          *((_OWORD *)v449 + 1) = *(_OWORD *)(v448 + 1632);
          *((_OWORD *)v449 + 2) = v450;
          v446 += 4;
          v445 -= 4;
        }
        while (v445);
        if (v396 != v397)
        {
          LODWORD(v379) = v379 + v397;
          goto LABEL_469;
        }
      }
    }
    v399 = v465[0];
    *(_OWORD *)(a1 + 1296) = v464;
    *(_OWORD *)(a1 + 1312) = v399;
    *(_OWORD *)(a1 + 1321) = *(_OWORD *)((char *)v465 + 9);
    *(_DWORD *)(a1 + 2344) += 8 * vaddvq_s32(*(int32x4_t *)(a1 + 1616));
  }
  if (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible((_QWORD *)v462, 0))
  {
    v400 = atomic_load((unsigned int *)&AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark);
    while (1)
    {
      v401 = *(unsigned int *)(a1 + 2344);
      if (v400 >= v401)
        break;
      v402 = v400;
      v400 = __ldaxr((unsigned int *)&AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark);
      if (v400 == v402)
      {
        if (!__stlxr(v401, (unsigned int *)&AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::icb_max_dma_size_watermark))break;
      }
      else
      {
        __clrex();
      }
    }
  }
  if (*(_BYTE *)(v461 + 288))
  {
    *(_QWORD *)(a1 + 112) |= *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
  }
  if (*(_BYTE *)(v461 + 289))
  {
    *(_QWORD *)(a1 + 120) |= *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (*(_BYTE *)(v461 + 290))
  {
    *(_QWORD *)(a1 + 104) |= *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_BYTE *)(v461 + 291))
  {
    v403 = vorrq_s8(*(int8x16_t *)(a1 + 144), *(int8x16_t *)(a1 + 88));
    v404 = vorrq_s8(*(int8x16_t *)(a1 + 128), *(int8x16_t *)(a1 + 72));
    *(int8x16_t *)(a1 + 128) = v404;
    *(int8x16_t *)(a1 + 144) = v403;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    v405 = 1;
  }
  else
  {
    v404 = *(int8x16_t *)(a1 + 128);
    v403 = *(int8x16_t *)(a1 + 144);
    v406 = vorrq_s8(*(int8x16_t *)(a1 + 72), *(int8x16_t *)(a1 + 88));
    v405 = vorr_s8(*(int8x8_t *)v406.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v406, v406, 8uLL)) == 0;
  }
  v407 = *(_QWORD *)(a1 + 32) | *(_QWORD *)(a1 + 24) | *(_QWORD *)(a1 + 40);
  v408 = *(_QWORD *)(a1 + 112) | *(_QWORD *)(a1 + 104) | *(_QWORD *)(a1 + 120);
  v409 = vorrq_s8(v404, v403);
  v410 = vorr_s8(*(int8x8_t *)v409.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v409, v409, 8uLL));
  v411 = *(_QWORD *)(a1 + 8);
  if (v407)
    v411 |= 0x6200uLL;
  if (!v405)
    v411 |= 0x6800uLL;
  if (v408)
    v411 |= 0x6400uLL;
  v412 = v408 | v407;
  v413 = v411 | 0x7000;
  if (!*(_QWORD *)&v410)
    v413 = v411;
  if (*(_QWORD *)&v410 | v412 || !v405)
    *v451 = v413;
  v414 = (unsigned int *)((char *)v134 + *(unsigned __int16 *)((char *)v134 - *v134 + 8));
  if (*(unsigned int *)((char *)v414 + *v414))
  {
    v413 |= 0x6000uLL;
    *v451 = v413;
  }
  *(_QWORD *)(a1 + 8) = v413 | 0x8000;
  v415 = v478[0];
  *(_OWORD *)(a1 + 1048) = v477;
  *(_OWORD *)(a1 + 1064) = v415;
  *(_OWORD *)(a1 + 1073) = *(_OWORD *)((char *)v478 + 9);
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(a1);
  return a1;
}

void sub_232CD4BF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v3;
    operator delete(v3);
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(v1);
  _Unwind_Resume(a1);
}

void std::vector<DriverEIOffset>::__append(unint64_t *a1, unint64_t a2, const float *a3)
{
  unint64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  const float *v16;
  unint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (float *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    v16 = (const float *)(v7 + 4 * a2);
    v17 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v17 >= 0xF && (v7 >= (unint64_t)(a3 + 1) || v16 <= a3))
    {
      v18 = v17 + 1;
      v19 = vld1q_dup_f32(a3);
      v20 = (float32x4_t *)(v7 + 16);
      v21 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      if (v18 == (v18 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
      v8 = (float *)(v7 + 4 * (v18 & 0x7FFFFFFFFFFFFFF8));
    }
    do
      *v8++ = *a3;
    while (v8 != v16);
LABEL_19:
    a1[1] = (unint64_t)v16;
    return;
  }
  v9 = (float *)*a1;
  v10 = v7 - *a1;
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + a2;
  if (v12 >> 62)
    abort();
  v13 = v6 - (_QWORD)v9;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = (char *)operator new(4 * v14);
  }
  else
  {
    v15 = 0;
  }
  v22 = (unint64_t)&v15[4 * v11];
  v23 = (char *)(v22 + 4 * a2);
  v24 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v25 = (char *)v22;
  if (v24 < 0x13)
    goto LABEL_28;
  if (v22 < (unint64_t)(a3 + 1))
  {
    v25 = &v15[4 * v11];
    if (&v15[4 * a2 + v10] > (char *)a3)
      goto LABEL_28;
  }
  v26 = v24 + 1;
  v27 = vld1q_dup_f32(a3);
  v28 = (float32x4_t *)&v15[4 * v11 + 16];
  v29 = v26 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v28[-1] = v27;
    *v28 = v27;
    v28 += 2;
    v29 -= 8;
  }
  while (v29);
  if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
  {
    v25 = (char *)(v22 + 4 * (v26 & 0x7FFFFFFFFFFFFFF8));
    do
    {
LABEL_28:
      *(float *)v25 = *a3;
      v25 += 4;
    }
    while (v25 != v23);
    v9 = (float *)*a1;
  }
  if ((float *)v7 != v9)
  {
    v30 = v7 - (_QWORD)v9 - 4;
    if (v30 < 0x2C)
      goto LABEL_46;
    if (v7 - (unint64_t)&v15[v10] < 0x20)
      goto LABEL_46;
    v31 = (v30 >> 2) + 1;
    v8 = (float *)(v7 - 4 * (v31 & 0x7FFFFFFFFFFFFFF8));
    v32 = &v15[4 * v11 - 16];
    v33 = (__int128 *)(v7 - 16);
    v34 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v35 = *v33;
      *((_OWORD *)v32 - 1) = *(v33 - 1);
      *(_OWORD *)v32 = v35;
      v32 -= 32;
      v33 -= 2;
      v34 -= 8;
    }
    while (v34);
    v22 -= 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
    {
      v8 = v9;
    }
    else
    {
LABEL_46:
      do
      {
        v36 = *((_DWORD *)v8-- - 1);
        *(_DWORD *)(v22 - 4) = v36;
        v22 -= 4;
      }
      while (v8 != v9);
      v8 = (float *)*a1;
    }
  }
  *a1 = v22;
  a1[1] = (unint64_t)v23;
  a1[2] = (unint64_t)&v15[4 * v14];
  if (v8)
    operator delete(v8);
}

uint64_t AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int64_t v5;

  if (!*(_BYTE *)(a1 + 1516))
  {
    v2 = *(_QWORD *)(a1 + 1576);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 6448));
    v3 = *(char **)(v2 + 6480);
    v4 = *(char **)(v2 + 6488);
    if (v3 != v4)
    {
      while (*(_QWORD *)v3 != a1 + 1552)
      {
        v3 += 8;
        if (v3 == v4)
        {
          v3 = *(char **)(v2 + 6488);
          break;
        }
      }
    }
    v5 = v4 - (v3 + 8);
    if (v4 != v3 + 8)
      memmove(v3, v3 + 8, v4 - (v3 + 8));
    *(_QWORD *)(v2 + 6488) = &v3[v5];
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 6448));
  }
  return AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState(a1);
}

uint64_t AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  _OWORD *v17;

  v2 = (_OWORD *)(a1 + 1672);
  if (*(_QWORD *)(a1 + 1744))
  {
    v3 = *(_QWORD *)(a1 + 1752);
    v4 = *(NSObject **)(v3 + 16);
    v12 = MEMORY[0x24BDAC760];
    v13 = 3221225472;
    v14 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v15 = &__block_descriptor_48_e5_v8__0l;
    v16 = v3;
    v17 = v2 + 3;
    dispatch_sync(v4, &v12);
    *(_OWORD *)((char *)v2 + 73) = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
  }
  if (!*(_BYTE *)(a1 + 1532))
  {
    v5 = *(_QWORD *)(a1 + 1592);
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 6448));
    v6 = *(char **)(v5 + 6480);
    v7 = *(char **)(v5 + 6488);
    if (v6 != v7)
    {
      while (*(_QWORD *)v6 != a1 + 1568)
      {
        v6 += 8;
        if (v6 == v7)
        {
          v6 = *(char **)(v5 + 6488);
          break;
        }
      }
    }
    v8 = v7 - (v6 + 8);
    if (v7 != v6 + 8)
      memmove(v6, v6 + 8, v7 - (v6 + 8));
    *(_QWORD *)(v5 + 6488) = &v6[v8];
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 6448));
    if (*(_QWORD *)(a1 + 1696))
    {
      v9 = *(_QWORD *)(a1 + 1704);
      v10 = *(NSObject **)(v9 + 16);
      v12 = MEMORY[0x24BDAC760];
      v13 = 3221225472;
      v14 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v15 = &__block_descriptor_48_e5_v8__0l;
      v16 = v9;
      v17 = v2;
      dispatch_sync(v10, &v12);
      *(_OWORD *)((char *)v2 + 25) = 0u;
      *v2 = 0u;
      v2[1] = 0u;
    }
  }
  return AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::~ProgramVariantPDSState(a1);
}

uint64_t AGX::ComputeProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v9[6];

  if (!*(_BYTE *)(a1 + 1524))
  {
    v2 = *(_QWORD *)(a1 + 1584);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 6448));
    v3 = *(char **)(v2 + 6480);
    v4 = *(char **)(v2 + 6488);
    if (v3 != v4)
    {
      while (*(_QWORD *)v3 != a1 + 1560)
      {
        v3 += 8;
        if (v3 == v4)
        {
          v3 = *(char **)(v2 + 6488);
          break;
        }
      }
    }
    v5 = v4 - (v3 + 8);
    if (v4 != v3 + 8)
      memmove(v3, v3 + 8, v4 - (v3 + 8));
    *(_QWORD *)(v2 + 6488) = &v3[v5];
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 6448));
  }
  if (*(_QWORD *)(a1 + 1752))
  {
    v6 = *(_QWORD *)(a1 + 1760);
    v7 = *(NSObject **)(v6 + 16);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v9[3] = &__block_descriptor_48_e5_v8__0l;
    v9[4] = v6;
    v9[5] = a1 + 1728;
    dispatch_sync(v7, v9);
    *(_OWORD *)(a1 + 1753) = 0u;
    *(_OWORD *)(a1 + 1744) = 0u;
    *(_OWORD *)(a1 + 1728) = 0u;
  }
  return AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState(a1);
}

uint64_t AGX::BlitFragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 1648))
  {
    v3 = (_OWORD *)(a1 + 1624);
    v4 = *(_QWORD *)(a1 + 1656);
    v5 = *(NSObject **)(v4 + 16);
    v28 = MEMORY[0x24BDAC760];
    v29 = 3221225472;
    v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v31 = &__block_descriptor_48_e5_v8__0l;
    v32 = v4;
    v33 = a1 + 1624;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 1649) = 0u;
    *v3 = 0u;
    *(_OWORD *)(a1 + 1640) = 0u;
  }
  if (*(_QWORD *)(a1 + 1696))
  {
    v6 = *(_QWORD *)(a1 + 1704);
    v7 = *(NSObject **)(v6 + 16);
    v28 = v2;
    v29 = 3221225472;
    v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v31 = &__block_descriptor_48_e5_v8__0l;
    v32 = v6;
    v33 = a1 + 1672;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 1697) = 0u;
    *(_OWORD *)(a1 + 1672) = 0u;
    *(_OWORD *)(a1 + 1688) = 0u;
  }
  if (!*(_BYTE *)(a1 + 1532))
  {
    if (*(_QWORD *)(a1 + 1088))
    {
      v8 = *(_QWORD *)(a1 + 1096);
      v9 = *(NSObject **)(v8 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v8;
      v33 = a1 + 1064;
      dispatch_sync(v9, &v28);
      *(_OWORD *)(a1 + 1089) = 0u;
      *(_OWORD *)(a1 + 1080) = 0u;
      *(_OWORD *)(a1 + 1064) = 0u;
    }
    if (*(_QWORD *)(a1 + 1040))
    {
      v10 = *(_QWORD *)(a1 + 1048);
      v11 = *(NSObject **)(v10 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v10;
      v33 = a1 + 1016;
      dispatch_sync(v11, &v28);
      *(_OWORD *)(a1 + 1041) = 0u;
      *(_OWORD *)(a1 + 1032) = 0u;
      *(_OWORD *)(a1 + 1016) = 0u;
    }
    if (*(_QWORD *)(a1 + 1184))
    {
      v12 = *(_QWORD *)(a1 + 1192);
      v13 = *(NSObject **)(v12 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v12;
      v33 = a1 + 1160;
      dispatch_sync(v13, &v28);
      *(_OWORD *)(a1 + 1185) = 0u;
      *(_OWORD *)(a1 + 1176) = 0u;
      *(_OWORD *)(a1 + 1160) = 0u;
    }
    if (*(_QWORD *)(a1 + 1136))
    {
      v14 = *(_QWORD *)(a1 + 1144);
      v15 = *(NSObject **)(v14 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v14;
      v33 = a1 + 1112;
      dispatch_sync(v15, &v28);
      *(_OWORD *)(a1 + 1137) = 0u;
      *(_OWORD *)(a1 + 1128) = 0u;
      *(_OWORD *)(a1 + 1112) = 0u;
    }
    if (*(_QWORD *)(a1 + 1240))
    {
      v16 = *(_QWORD *)(a1 + 1248);
      v17 = *(NSObject **)(v16 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v16;
      v33 = a1 + 1216;
      dispatch_sync(v17, &v28);
      *(_OWORD *)(a1 + 1241) = 0u;
      *(_OWORD *)(a1 + 1232) = 0u;
      *(_OWORD *)(a1 + 1216) = 0u;
    }
    if (*(_QWORD *)(a1 + 1288))
    {
      v18 = *(_QWORD *)(a1 + 1296);
      v19 = *(NSObject **)(v18 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v18;
      v33 = a1 + 1264;
      dispatch_sync(v19, &v28);
      *(_OWORD *)(a1 + 1289) = 0u;
      *(_OWORD *)(a1 + 1280) = 0u;
      *(_OWORD *)(a1 + 1264) = 0u;
    }
    if (*(_QWORD *)(a1 + 1336))
    {
      v20 = *(_QWORD *)(a1 + 1344);
      v21 = *(NSObject **)(v20 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v20;
      v33 = a1 + 1312;
      dispatch_sync(v21, &v28);
      *(_OWORD *)(a1 + 1337) = 0u;
      *(_OWORD *)(a1 + 1328) = 0u;
      *(_OWORD *)(a1 + 1312) = 0u;
    }
    if (*(_QWORD *)(a1 + 1384))
    {
      v22 = *(_QWORD *)(a1 + 1392);
      v23 = *(NSObject **)(v22 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v22;
      v33 = a1 + 1360;
      dispatch_sync(v23, &v28);
      *(_OWORD *)(a1 + 1385) = 0u;
      *(_OWORD *)(a1 + 1376) = 0u;
      *(_OWORD *)(a1 + 1360) = 0u;
    }
    if (*(_QWORD *)(a1 + 1432))
    {
      v24 = *(_QWORD *)(a1 + 1440);
      v25 = *(NSObject **)(v24 + 16);
      v28 = v2;
      v29 = 3221225472;
      v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v31 = &__block_descriptor_48_e5_v8__0l;
      v32 = v24;
      v33 = a1 + 1408;
      dispatch_sync(v25, &v28);
      *(_OWORD *)(a1 + 1433) = 0u;
      *(_OWORD *)(a1 + 1424) = 0u;
      *(_OWORD *)(a1 + 1408) = 0u;
    }
  }
  v26 = *(void **)(a1 + 1568);
  if (v26)
  {
    *(_QWORD *)(a1 + 1576) = v26;
    operator delete(v26);
  }
  if (*(char *)(a1 + 1567) < 0)
    operator delete(*(void **)(a1 + 1544));
  return a1;
}

uint64_t AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 680))
  {
    v3 = *(_QWORD *)(a1 + 688);
    v4 = *(NSObject **)(v3 + 16);
    v8 = MEMORY[0x24BDAC760];
    v9 = 3221225472;
    v10 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v11 = &__block_descriptor_48_e5_v8__0l;
    v12 = v3;
    v13 = a1 + 656;
    dispatch_sync(v4, &v8);
    *(_OWORD *)(a1 + 681) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
  }
  if (*(_QWORD *)(a1 + 728))
  {
    v5 = *(_QWORD *)(a1 + 736);
    v6 = *(NSObject **)(v5 + 16);
    v8 = v2;
    v9 = 3221225472;
    v10 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v11 = &__block_descriptor_48_e5_v8__0l;
    v12 = v5;
    v13 = a1 + 704;
    dispatch_sync(v6, &v8);
    *(_OWORD *)(a1 + 729) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
  }
  if (*(char *)(a1 + 783) < 0)
    operator delete(*(void **)(a1 + 760));
  return a1;
}

void sub_232CD5928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGX::G9::RayTracingAccelerationStructure::~RayTracingAccelerationStructure((AGX::G9::RayTracingAccelerationStructure *)va);
  _Unwind_Resume(a1);
}

void AGX::G9::RayTracingAccelerationStructure::~RayTracingAccelerationStructure(AGX::G9::RayTracingAccelerationStructure *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;

  if (*((_DWORD *)this + 6) && !*((_BYTE *)this + 40))
  {
    v2 = (os_unfair_lock_s *)(*((_QWORD *)this + 4) + 40);
    os_unfair_lock_lock(v2);
    v3 = *((_QWORD *)this + 4);
    v4 = *((unsigned int *)this + 6);
    v5 = (unint64_t *)(v3 + 32);
    v6 = *(_QWORD *)(v3 + 32);
    v7 = (int *)MEMORY[0x24BE51650];
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + (int)*MEMORY[0x24BE51650] + 24) + 8 * v4) = v6;
    v8 = __ldaxr((unint64_t *)(v3 + 32));
    if (v8 != v6)
    {
      __clrex();
      while (1)
      {
LABEL_12:
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + *v7 + 24) + 8 * v4) = v8;
        v9 = __ldaxr(v5);
        if (v9 == v8)
        {
          if (!__stlxr((v8 & 0xFFFFFFFF00000000 | v4) + 0x100000000, v5))
            goto LABEL_8;
        }
        else
        {
          __clrex();
        }
        v8 = v9;
      }
    }
    if (__stlxr((v6 & 0xFFFFFFFF00000000 | v4) + 0x100000000, v5))
      goto LABEL_12;
LABEL_8:
    os_unfair_lock_unlock(v2);
  }
}

void sub_232CD5E54(_Unwind_Exception *a1, uint64_t a2, AGXARayTracingAccelerationStructureSW *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  AGXARayTracingAccelerationStructureSW::~AGXARayTracingAccelerationStructureSW((AGXARayTracingAccelerationStructureSW *)&a11);
  _Unwind_Resume(a1);
}

void sub_232CD60A4(_Unwind_Exception *a1, uint64_t a2, AGXARayTracingAccelerationStructureSW *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  AGXARayTracingAccelerationStructureSW::~AGXARayTracingAccelerationStructureSW((AGXARayTracingAccelerationStructureSW *)&a11);
  _Unwind_Resume(a1);
}

void AGXARayTracingAccelerationStructureSW::~AGXARayTracingAccelerationStructureSW(AGXARayTracingAccelerationStructureSW *this)
{
  os_unfair_lock_s *v2;
  char *cpu;
  uint64_t gpu_low;
  unint64_t *v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;

  if (LODWORD(this->bvh_heap_allocation.buffer_.address.gpu) && !LOBYTE(this->bvh_heap_allocation.buffer_.size))
  {
    v2 = (os_unfair_lock_s *)(this->bvh_heap_allocation.buffer_.address.cpu + 40);
    os_unfair_lock_lock(v2);
    cpu = this->bvh_heap_allocation.buffer_.address.cpu;
    gpu_low = LODWORD(this->bvh_heap_allocation.buffer_.address.gpu);
    v5 = (unint64_t *)(cpu + 32);
    v6 = *((_QWORD *)cpu + 4);
    v7 = (int *)MEMORY[0x24BE51650];
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)cpu + 3) + 8) + (int)*MEMORY[0x24BE51650] + 24) + 8 * gpu_low) = v6;
    v8 = __ldaxr((unint64_t *)cpu + 4);
    if (v8 != v6)
    {
      __clrex();
      while (1)
      {
LABEL_12:
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)cpu + 3) + 8) + *v7 + 24) + 8 * gpu_low) = v8;
        v9 = __ldaxr(v5);
        if (v9 == v8)
        {
          if (!__stlxr((v8 & 0xFFFFFFFF00000000 | gpu_low) + 0x100000000, v5))
            goto LABEL_8;
        }
        else
        {
          __clrex();
        }
        v8 = v9;
      }
    }
    if (__stlxr((v6 & 0xFFFFFFFF00000000 | gpu_low) + 0x100000000, v5))
      goto LABEL_12;
LABEL_8:
    os_unfair_lock_unlock(v2);
  }
}

void sub_232CD9A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_232CD9AA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v4);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v3);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v2);
  MEMORY[0x234927ECC](v1, 0x10B0C404C6F8B55);
  _Unwind_Resume(a1);
}

void sub_232CDCBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232CDCBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54)
{
  if (__p)
    operator delete(__p);
  if (!a54)
    _Unwind_Resume(exception_object);
  operator delete(a54);
  _Unwind_Resume(exception_object);
}

uint64_t ProgressBinsSynchronizeBufferAccess(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result)
  {
    v6 = result;
    if (*(_BYTE *)(result + 48))
    {
      v8 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::find<objc_object  {objcproto9MTLBuffer}>((_QWORD *)(result + 96), a2);
      v9 = v8;
      if (v8)
      {
        v10 = v8;
        do
          v10 = (_QWORD *)*v10;
        while (v10 && v10[2] == a2);
        if (v10 != v8)
        {
          if (a3 == 1)
          {
            do
            {
              v11 = *((unsigned int *)v9 + 8);
              v12 = (unsigned __int16)*((_DWORD *)v9 + 9);
              *(_WORD *)(v6 + 42) = *((_DWORD *)v9 + 9);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v11, v12);
              v9 = (_QWORD *)*v9;
            }
            while (v9 != v10);
          }
          else
          {
            do
            {
              if (v9[3] == 1)
              {
                v16 = *((unsigned int *)v9 + 8);
                v17 = (unsigned __int16)*((_DWORD *)v9 + 9);
                *(_WORD *)(v6 + 42) = *((_DWORD *)v9 + 9);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v16, v17);
              }
              v9 = (_QWORD *)*v9;
            }
            while (v9 != v10);
          }
        }
      }
      v13 = operator new(0x40uLL);
      v13[2] = a2;
      v13[3] = a3;
      v13[4] = -1;
      v13[5] = 0;
      v13[6] = 0;
      *((_BYTE *)v13 + 56) = 0;
      v14 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      v15 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v14 >> 47) ^ v14);
      *v13 = 0;
      v13[1] = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      return (uint64_t)std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi((_QWORD *)(v6 + 56), v13);
    }
    else
    {
      result = ProgressBinsSynchronizeBuffer(result, (void *)a2);
      if ((result & 0x80000000) == 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, result, *(unsigned __int16 *)(v6 + 42));
    }
  }
  return result;
}

void sub_232CE0C04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(uint64_t a1, int a2, unsigned __int16 a3)
{
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned __int8 v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  char **v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned __int8 v37;
  unsigned __int8 v38;
  std::vector<unsigned int> v39;
  unsigned int *value;
  uint64_t v41;
  unsigned int v42;
  _QWORD v43[7];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD v48[5];
  unint64_t v49;
  void *v50;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  __int128 md;
  __int128 v55;
  CC_SHA256_CTX *p_c;
  uint64_t v57;
  __int128 v58;
  size_t v59[3];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v5 = a3 & 0xFF00;
  v6 = a3;
  v7 = (a2 - 76) < 0x13 || a3 == 0;
  if ((v8 & 1) == 0
  {
    if (shouldDumpOrVerifyBVHs(void)::once != -1)
      dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_492);
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(int,std::optional<BOOL>)::verify = 0;
  }
  v9 = !v7;
  if (!v5)
    v9 = 1;
  LODWORD(v39.__end_) = 24;
  value = 0;
  v41 = 0;
  v39.__end_cap_.__value_ = 0;
  v39.__begin_ = (std::vector<unsigned int>::pointer)off_2504021A0;
  if (!v6)
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = 0x80000000;
  v11 = v10 | (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(int,std::optional<BOOL>)::verify << 30);
  v12 = (v11 >> 31) & 0x88;
  v42 = v11 & 0xC0000000 | a2 & 0x3FFFFFFF;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(int,std::optional<BOOL>)::verify)
    v14 = 272;
  else
    v14 = 0;
  v15 = v12 + (a2 & 0x3FFFFFFFu) + v14;
  v16 = (unint64_t *)(v13 + 8 * v15 + 80);
  v17 = atomic_load(v16);
  if (!v17)
  {
    v18 = (os_unfair_lock_s *)(v13 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 72));
    v44 = 0;
    v45 = &v44;
    v46 = 0x2020000000;
    v47 = 0;
    v17 = *v16;
    v47 = v17;
    if (!v17)
    {
      v19 = *(_QWORD *)(v13 + 5464);
      v20 = MEMORY[0x24BDAC760];
      v43[0] = MEMORY[0x24BDAC760];
      v43[1] = 3221225472;
      v43[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBVHBuilderPipelineERNS_20BVHBuilderProgramKeyE_block_invoke;
      v43[3] = &unk_2504002B0;
      v43[4] = &v44;
      v43[5] = v13;
      v43[6] = v15;
      v21 = *(_QWORD *)(v19 + 8);
      if ((*((BOOL (**)(AGX::BVHBuilderProgramKey *))v39.__begin_ + 3))((AGX::BVHBuilderProgramKey *)&v39))
        v22 = v21;
      else
        v22 = 0;
      v23 = (void *)objc_opt_new();
      objc_msgSend(v23, "setSync:", 1);
      objc_msgSend(v23, "setPipelineCache:", v22);
      objc_msgSend(v23, "setBinaryArchives:", 0);
      v48[0] = v20;
      v48[1] = 3221225472;
      v48[2] = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
      v48[3] = &unk_2504023B8;
      v48[4] = v43;
      v49 = 0;
      v50 = 0;
      (*((void (**)(std::vector<unsigned int> *, unsigned int **, unint64_t *))v39.__begin_ + 2))(&v39, (unsigned int **)&v50, &v49);
      v24 = dispatch_data_create(v50, v49, 0, 0);
      objc_msgSend(v23, "setDriverKeyData:", v24);
      if (objc_msgSend(v23, "airScript"))
      {
        v25 = objc_msgSend(v23, "airScript");
        v58 = 0uLL;
        v59[0] = 0;
        *(_QWORD *)&v58 = dispatch_data_create_map(v25, (const void **)&v58 + 1, v59);
        v26 = *((_QWORD *)&v58 + 1);
        v27 = **((_DWORD **)&v58 + 1);
        CC_SHA256_Init(&c);
        (*(void (**)(std::vector<unsigned int> *, CC_SHA256_CTX *))v39.__begin_)(&v39, &c);
        *(_QWORD *)len = 0;
        data = 0;
        if (AGX::GetSerializedVertexFormat((AGX *)(v26 + v27), &data, (size_t *)len, v28, v29))
        {
          v30 = data;
          CC_SHA256_Update(&c, data, len[0]);
          free(v30);
        }
        CC_SHA256_Final((unsigned __int8 *)&md, &c);
        dispatch_release((dispatch_object_t)v58);
        v58 = md;
        *(_OWORD *)v59 = v55;
        objc_msgSend(v23, "setVendorPluginFunctionId:", &v58);
      }
      *(_QWORD *)c.count = v20;
      *(_QWORD *)c.hash = 3221225472;
      *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
      *(_QWORD *)&c.hash[4] = &unk_250402408;
      *(_QWORD *)&c.hash[6] = v23;
      *(_QWORD *)c.wbuf = v48;
      if (objc_msgSend(v23, "function"))
      {
        v31 = mach_absolute_time();
        v32 = *(void **)v19;
        *(_QWORD *)&md = v20;
        *((_QWORD *)&md + 1) = 3221225472;
        *(_QWORD *)&v55 = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
        *((_QWORD *)&v55 + 1) = &unk_250402458;
        p_c = &c;
        v57 = v31;
        objc_msgSend(v32, "compileFunctionRequest:completionHandler:", v23, &md);
      }
      else
      {
        if (objc_msgSend(v23, "frameworkData") || objc_msgSend(v23, "pipelineOptions"))
          AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
        *(_QWORD *)&md = v20;
        *((_QWORD *)&md + 1) = 3221225472;
        *(_QWORD *)&v55 = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
        *((_QWORD *)&v55 + 1) = &unk_250402430;
        p_c = &c;
        v33 = objc_msgSend((id)objc_msgSend(v23, "binaryArchives"), "count");
        v34 = *(void **)v19;
        v35 = objc_msgSend(v23, "driverKeyData");
        if (v33)
          objc_msgSend(v34, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v35, objc_msgSend(v23, "binaryArchives"), 0, objc_msgSend(v23, "pipelineCache"), objc_msgSend(v23, "sync"), &md);
        else
          objc_msgSend(v34, "compileRequest:pipelineCache:sync:completionHandler:", v35, objc_msgSend(v23, "pipelineCache"), objc_msgSend(v23, "sync"), &md);
      }
      dispatch_release(v24);

      v17 = v45[3];
    }
    _Block_object_dispose(&v44, 8);
    os_unfair_lock_unlock(v18);
  }
  v39.__begin_ = (std::vector<unsigned int>::pointer)off_2504021E0;
  if (v39.__end_cap_.__value_)
  {
    value = v39.__end_cap_.__value_;
    operator delete(v39.__end_cap_.__value_);
  }
  return v17;
}

void sub_232CE11B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  os_unfair_lock_s *v23;
  uint64_t v24;

  dispatch_release(*(dispatch_object_t *)(v24 - 128));
  _Block_object_dispose(&a23, 8);
  os_unfair_lock_unlock(v23);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_handle_merge_multi[abi:nn180100]<std::allocator<ADSCommandProgressBins::BufferUsage>>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;

  v3 = a2 + 2;
  v2 = (_QWORD *)a2[2];
  if (v2)
  {
    v5 = result;
    v6 = result + 2;
    while (1)
    {
      v8 = v2;
      v9 = v2 + 2;
      v10 = v2[2];
      v11 = HIDWORD(v10);
      v12 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
      v13 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 47));
      result = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi_prepare((uint64_t)v5, v13, v9);
      v14 = (int8x8_t)a2[1];
      v15 = v8[1];
      v16 = (uint8x8_t)vcnt_s8(v14);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v14)
          v15 %= *(_QWORD *)&v14;
      }
      else
      {
        v15 &= *(_QWORD *)&v14 - 1;
      }
      v2 = (_QWORD *)*v8;
      v17 = *(_QWORD **)(*a2 + 8 * v15);
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17 != v8);
      if (v18 != v3)
      {
        v19 = v18[1];
        if (v16.u32[0] > 1uLL)
        {
          if (v19 >= *(_QWORD *)&v14)
            v19 %= *(_QWORD *)&v14;
        }
        else
        {
          v19 &= *(_QWORD *)&v14 - 1;
        }
        v20 = (_QWORD *)*v8;
        if (v19 == v15)
          goto LABEL_25;
      }
      if (!v2)
        break;
      v21 = v2[1];
      if (v16.u32[0] > 1uLL)
      {
        if (v21 >= *(_QWORD *)&v14)
          v21 %= *(_QWORD *)&v14;
      }
      else
      {
        v21 &= *(_QWORD *)&v14 - 1;
      }
      v20 = (_QWORD *)*v8;
      if (v21 != v15)
        break;
LABEL_26:
      v22 = v20[1];
      if (v16.u32[0] > 1uLL)
      {
        if (v22 >= *(_QWORD *)&v14)
          v22 %= *(_QWORD *)&v14;
      }
      else
      {
        v22 &= *(_QWORD *)&v14 - 1;
      }
      if (v22 != v15)
      {
        *(_QWORD *)(*a2 + 8 * v22) = v18;
        v20 = (_QWORD *)*v8;
      }
LABEL_32:
      *v18 = v20;
      --a2[3];
      *v8 = 0;
      v8[1] = v13;
      v23 = (int8x8_t)v5[1];
      v24 = (uint8x8_t)vcnt_s8(v23);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v23)
          v13 %= *(_QWORD *)&v23;
      }
      else
      {
        v13 &= *(_QWORD *)&v23 - 1;
      }
      if (result)
      {
        *v8 = *result;
        *result = v8;
        if (!*v8)
          goto LABEL_5;
        v7 = *(_QWORD *)(*v8 + 8);
        if (v24.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v23)
            v7 %= *(_QWORD *)&v23;
        }
        else
        {
          v7 &= *(_QWORD *)&v23 - 1;
        }
        if (v7 == v13)
          goto LABEL_5;
      }
      else
      {
        *v8 = v5[2];
        v5[2] = v8;
        *(_QWORD *)(*v5 + 8 * v13) = v6;
        if (!*v8)
          goto LABEL_5;
        v7 = *(_QWORD *)(*v8 + 8);
        if (v24.u32[0] <= 1uLL)
        {
          v7 &= *(_QWORD *)&v23 - 1;
        }
        else if (v7 >= *(_QWORD *)&v23)
        {
          v7 %= *(_QWORD *)&v23;
        }
      }
      *(_QWORD *)(*v5 + 8 * v7) = v8;
LABEL_5:
      ++v5[3];
      if (!v2)
        return result;
    }
    *(_QWORD *)(*a2 + 8 * v15) = 0;
    v20 = (_QWORD *)*v8;
LABEL_25:
    if (!v20)
      goto LABEL_32;
    goto LABEL_26;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  _QWORD *j;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *result;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = v11;
    else
      prime = v10;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_85;
    if (prime >= v6)
      goto LABEL_40;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (prime <= v26)
      prime = v26;
    if (prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_85:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (prime != v15);
      v17 = a1 + 16;
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v18 = v16[1];
        v19 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v18 >= prime)
            v18 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v17;
          for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v18)
            {
              v16 = i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (_QWORD *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *v16 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v16;
                v16 = i;
                v18 = v37;
              }
            }
          }
        }
        else
        {
          v20 = v18 & v19;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v17;
          for (j = (_QWORD *)*v16; *v16; j = (_QWORD *)*v16)
          {
            v22 = j[1] & v19;
            if (v22 == v20)
            {
              v16 = j;
            }
            else
            {
              v23 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v22))
              {
                do
                {
                  v24 = v23;
                  v23 = (_QWORD *)*v23;
                }
                while (v23 && j[2] == v23[2]);
                *v16 = v23;
                v25 = 8 * v22;
                *v24 = **(_QWORD **)(*(_QWORD *)a1 + v25);
                **(_QWORD **)(*(_QWORD *)a1 + v25) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v16;
                v16 = j;
                v20 = v22;
              }
            }
          }
        }
      }
      v6 = prime;
    }
    else
    {
      v48 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v48)
        operator delete(v48);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v30 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & a2));
    if (v31)
    {
      v32 = 0;
      do
      {
        result = v31;
        v31 = (_QWORD *)*v31;
        if (!v31)
          break;
        v36 = v31[1];
        if ((v36 & v30) != (v30 & a2))
          break;
        v33 = v36 == a2 && v31[2] == *a3;
        v34 = v32 & !v33;
        v32 |= v33;
      }
      while ((v34 & 1) == 0);
      return result;
    }
    return 0;
  }
  v41 = a2;
  if (v6 <= a2)
    v41 = a2 % v6;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v41);
  if (!v42)
    return 0;
  v43 = 0;
  do
  {
    result = v42;
    v42 = (_QWORD *)*v42;
    if (!v42)
      break;
    v46 = v42[1];
    v47 = v46;
    if (v46 >= v6)
      v47 = v46 % v6;
    if (v47 != v41)
      break;
    v44 = v46 == a2 && v42[2] == *a3;
    v45 = v43 & !v44;
    v43 |= v44;
  }
  while (v45 != 1);
  return result;
}

uint64_t ProgressBinsSynchronizeBuffer(uint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint8x8_t v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  _QWORD *i;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  void *v52;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = objc_msgSend(a2, "gpuAddress");
  v5 = 73244475 * ((73244475 * (v4 ^ (v4 >> 16))) ^ ((73244475 * (v4 ^ (v4 >> 16))) >> 16));
  v6 = v5 ^ (v5 >> 16);
  v7 = *(unsigned int *)(a1 + 136);
  v8 = v6 % v7;
  if (((v6 % v7) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 160);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v6 % v7;
      if (v9 <= v8)
        v11 = v8 % v9;
    }
    else
    {
      v11 = (v9 + 0xFFFFFFFF) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)(a1 + 152) + 8 * v11);
    if (v13)
    {
      v14 = *v13;
      if (v14)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v8)
            {
              if (*((_DWORD *)v14 + 4) == (_DWORD)v8)
                return 0xFFFFFFFFLL;
            }
            else if ((v16 & (v9 - 1)) != v11)
            {
              goto LABEL_26;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_26;
          }
        }
        while (1)
        {
          v15 = v14[1];
          if (v15 == v8)
          {
            if (*((_DWORD *)v14 + 4) == (_DWORD)v8)
              return 0xFFFFFFFFLL;
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v11)
            {
LABEL_26:
              v12 = (_QWORD *)(a1 + 144);
              goto LABEL_27;
            }
          }
          v14 = (uint64_t *)*v14;
          if (!v14)
            goto LABEL_26;
        }
      }
    }
    v12 = (_QWORD *)(a1 + 144);
LABEL_27:
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v2 = v8;
      if (v9 <= v8)
        v2 = v8 % v9;
    }
    else
    {
      v2 = (v9 + 0xFFFFFFFF) & v8;
    }
    v19 = *(uint64_t ***)(*(_QWORD *)(a1 + 152) + 8 * v2);
    if (v19)
    {
      v20 = *v19;
      if (v20)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v20[1];
            if (v22 == v8)
            {
              if (*((_DWORD *)v20 + 4) == (_DWORD)v8)
                return *(unsigned int *)(*v12 + 4 * v8);
            }
            else if ((v22 & (v9 - 1)) != v2)
            {
              goto LABEL_46;
            }
            v20 = (uint64_t *)*v20;
            if (!v20)
              goto LABEL_46;
          }
        }
        do
        {
          v21 = v20[1];
          if (v21 == v8)
          {
            if (*((_DWORD *)v20 + 4) == (_DWORD)v8)
              return *(unsigned int *)(*v12 + 4 * v8);
          }
          else
          {
            if (v21 >= v9)
              v21 %= v9;
            if (v21 != v2)
              break;
          }
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    v12 = (_QWORD *)(a1 + 144);
  }
LABEL_46:
  v23 = operator new(0x18uLL);
  *v23 = 0;
  v23[1] = v8;
  *((_DWORD *)v23 + 4) = v8;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 176) + 1);
  v25 = *(float *)(a1 + 184);
  if (!v9 || (float)(v25 * (float)v9) < v24)
  {
    v26 = 1;
    if (v9 >= 3)
      v26 = (v9 & (v9 - 1)) != 0;
    v27 = v26 | (2 * v9);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 160);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_83;
      v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
      if (v9 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 160);
LABEL_83:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 + 0xFFFFFFFF) & v8;
        }
        goto LABEL_96;
      }
      if (!prime)
      {
        v52 = *(void **)(a1 + 152);
        *(_QWORD *)(a1 + 152) = 0;
        if (v52)
          operator delete(v52);
        v9 = 0;
        *(_QWORD *)(a1 + 160) = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v30 = operator new(8 * prime);
    v31 = *(void **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v30;
    if (v31)
      operator delete(v31);
    v32 = 0;
    *(_QWORD *)(a1 + 160) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v32++) = 0;
    while (prime != v32);
    v34 = a1 + 168;
    v33 = *(_QWORD **)(a1 + 168);
    if (!v33)
    {
LABEL_82:
      v9 = prime;
      goto LABEL_83;
    }
    v35 = v33[1];
    v36 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v37 = v35 & v36;
      *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v37) = v34;
      for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
      {
        v39 = i[1] & v36;
        if (v39 == v37)
        {
          v33 = i;
        }
        else
        {
          v40 = *(_QWORD *)(a1 + 152);
          if (*(_QWORD *)(v40 + 8 * v39))
          {
            *v33 = *i;
            v41 = 8 * v39;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 152) + v41);
            **(_QWORD **)(*(_QWORD *)(a1 + 152) + v41) = i;
          }
          else
          {
            *(_QWORD *)(v40 + 8 * v39) = v33;
            v33 = i;
            v37 = v39;
          }
        }
      }
      goto LABEL_82;
    }
    if (v35 >= prime)
      v35 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v35) = v34;
    v45 = (_QWORD *)*v33;
    if (!*v33)
      goto LABEL_82;
    while (1)
    {
      v47 = v45[1];
      if (v47 >= prime)
        v47 %= prime;
      if (v47 != v35)
      {
        v48 = *(_QWORD *)(a1 + 152);
        if (!*(_QWORD *)(v48 + 8 * v47))
        {
          *(_QWORD *)(v48 + 8 * v47) = v33;
          goto LABEL_87;
        }
        *v33 = *v45;
        v46 = 8 * v47;
        *v45 = **(_QWORD **)(*(_QWORD *)(a1 + 152) + v46);
        **(_QWORD **)(*(_QWORD *)(a1 + 152) + v46) = v45;
        v45 = v33;
      }
      v47 = v35;
LABEL_87:
      v33 = v45;
      v45 = (_QWORD *)*v45;
      v35 = v47;
      if (!v45)
        goto LABEL_82;
    }
  }
LABEL_96:
  v49 = *(_QWORD *)(a1 + 152);
  v50 = *(_QWORD **)(v49 + 8 * v2);
  if (v50)
  {
    *v23 = *v50;
  }
  else
  {
    *v23 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v23;
    *(_QWORD *)(v49 + 8 * v2) = a1 + 168;
    if (!*v23)
      goto LABEL_105;
    v51 = *(_QWORD *)(*v23 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v51 >= v9)
        v51 %= v9;
    }
    else
    {
      v51 &= v9 - 1;
    }
    v50 = (_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v51);
  }
  *v50 = v23;
LABEL_105:
  ++*(_QWORD *)(a1 + 176);
  return *(unsigned int *)(*v12 + 4 * v8);
}

void sub_232CE1E18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::find<objc_object  {objcproto9MTLBuffer}>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *result;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v5 = a2 + 2;
  v4 = a2[2];
  v6 = HIDWORD(v4);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  *(v5 - 1) = v8;
  result = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi_prepare((uint64_t)a1, v8, v5);
  v10 = (int8x8_t)a1[1];
  v11 = *(v5 - 1);
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v11 % *(_QWORD *)&v10;
  if (v11 < *(_QWORD *)&v10)
    v13 = *(v5 - 1);
  v14 = *(_QWORD *)&v10 - 1;
  v15 = (*(_QWORD *)&v10 - 1) & v11;
  if (v12.u32[0] <= 1uLL)
    v13 = v15;
  if (!result)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v13) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v16 = *(_QWORD *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v10)
        v16 %= *(_QWORD *)&v10;
    }
    else
    {
      v16 &= v14;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v16) = a2;
    goto LABEL_19;
  }
  *a2 = *result;
  *result = a2;
  if (*a2)
  {
    v16 = *(_QWORD *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v10)
        v16 %= *(_QWORD *)&v10;
    }
    else
    {
      v16 &= v14;
    }
    if (v16 != v13)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return result;
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline(uint64_t result, uint64_t a2, int a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v6 = (_QWORD *)result;
  v7 = *(_QWORD *)(a2 + 88);
  if (a4)
    v8 = 10;
  else
    v8 = 3;
  v9 = v7 + 16;
  if (a4)
  {
    if (!*(_QWORD *)(v9 + 32 * v8 + 48))
    {
      result = AGX::DataBufferAllocator<34ul>::growNoInline(v7 + 16, 10, 0);
      if ((result & 1) == 0)
LABEL_16:
        abort();
    }
  }
  v10 = (a3 + 15) & 0xFFFFFFF0;
  v11 = v9 + 32 * v8;
  v13 = *(_QWORD *)(v11 + 40);
  v12 = (_QWORD *)(v11 + 40);
  v15 = v12 + 1;
  v14 = v12[1];
  v16 = v10 | 0xF;
  v17 = v14 + (v10 | 0xF);
  if (v17 > v13)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(v7 + 16, v8, 0);
    v14 = *v15;
    if (!(_DWORD)result)
      goto LABEL_8;
    v17 = v14 + v16;
    if ((unint64_t)(v14 + v16) > *v12)
      goto LABEL_16;
  }
  v12[2] = v17;
LABEL_8:
  v18 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = *(_QWORD *)(v9 + 32 * v8 + 64);
  *v15 = v18 + v10;
  *v6 = v18;
  v6[1] = v18 + v19;
  if (a4 && !v18)
    result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v7 + 16);
  v6[2] = *(_QWORD *)(*(_QWORD *)(v7 + 40) + (v8 << 6) + 32) + (int)*MEMORY[0x24BE51650];
  return result;
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t Pipeline;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 88);
  *(_QWORD *)(v11 + 6056) = a2;
  *(_QWORD *)(*(_QWORD *)(v11 + 1792) + 536) = a2;
  *(_QWORD *)(v11 + 5280) = a3;
  *(_QWORD *)(v11 + 7136) |= 1uLL;
  *(_DWORD *)(v11 + 7152) |= 1u;
  v12 = *(_QWORD *)(v10 + 88);
  v13 = *a4;
  v14 = a4[3];
  *(_QWORD *)(v12 + 6080) = *a4;
  *(_QWORD *)(*(_QWORD *)(v12 + 1792) + 560) = v13;
  *(_QWORD *)(v12 + 5304) = v14;
  *(_QWORD *)(v12 + 7136) |= 8uLL;
  *(_DWORD *)(v12 + 7152) |= 1u;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v28, v10, 36, 1);
  v15 = v28;
  v16 = v29;
  v17 = v30;
  v18 = v29 + 24;
  *(_DWORD *)(v28 + 28) = a5;
  *(_DWORD *)(v15 + 32) = a6;
  *(_BYTE *)(v15 + 24) = *a4 != 0;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v19 + 88);
  *(_QWORD *)(v20 + 6064) = v18;
  *(_QWORD *)(*(_QWORD *)(v20 + 1792) + 544) = v18;
  *(_QWORD *)(v20 + 5288) = v17;
  *(_QWORD *)(v20 + 7136) |= 2uLL;
  *(_DWORD *)(v20 + 7152) |= 1u;
  v21 = *(_QWORD *)(v19 + 88);
  *(_QWORD *)(v21 + 6072) = v16;
  *(_QWORD *)(*(_QWORD *)(v21 + 1792) + 552) = v16;
  *(_QWORD *)(v21 + 5296) = v17;
  *(_QWORD *)(v21 + 7136) |= 4uLL;
  *(_DWORD *)(v21 + 7152) |= 1u;
  *(_OWORD *)v15 = xmmword_232D73B10;
  *(_QWORD *)(v15 + 16) = 0x100000001;
  Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 105, 0);
  v23 = *(_QWORD *)(v11 + 1776);
  *(_QWORD *)(v11 + 1776) = Pipeline;
  v24 = *(_QWORD *)(Pipeline + 16);
  *(_BYTE *)(v11 + 1745) = *(_BYTE *)(v24 + 216);
  *(_BYTE *)(v11 + 1746) = *(_BYTE *)(v24 + 1992);
  if (*(_DWORD *)(v11 + 1736) != 1)
  {
LABEL_5:
    if (!v23)
      return;
    goto LABEL_6;
  }
  if (*(_BYTE *)(v11 + 7672))
  {
    v25 = *(_QWORD *)(v11 + 7688);
    if (*(_QWORD *)(v11 + 7680) != v25)
    {
      *(_BYTE *)(v25 - 8) = 1;
      *(_BYTE *)(v25 - 7) = *(_BYTE *)(*(_QWORD *)(v11 + 1768) + 458);
    }
    goto LABEL_5;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v11 + 1624), (_QWORD *)(v11 + 16));
  v27 = *(_DWORD *)(v11 + 7316);
  if (*(_DWORD *)(v11 + 7312) < v27)
    *(_DWORD *)(v11 + 7312) = v27;
  *(_DWORD *)(v11 + 7316) = 0;
  if (v23)
  {
LABEL_6:
    *(_QWORD *)(v11 + 1776) = v23;
    v26 = *(_QWORD *)(v23 + 16);
    *(_BYTE *)(v11 + 1745) = *(_BYTE *)(v26 + 216);
    *(_BYTE *)(v11 + 1746) = *(_BYTE *)(v26 + 1992);
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeStridedCopy(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _QWORD *a5, unsigned __int8 a6, int a7, uint64_t *a8, uint64_t *a9, int a10)
{
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t Pipeline;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  _QWORD *v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88[3];
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;

  v15 = a6;
  if (!a6)
  {
    v85 = a7;
    v20 = (char *)*a5;
    v22 = a5[3];
    v23 = 1;
    goto LABEL_12;
  }
  if (!a5)
    return;
  v85 = a7;
  if (a6 == 1)
  {
    v16 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88);
    v17 = v16[20];
    v18 = v17 + 31;
    if ((unint64_t)(v17 + 31) > v16[19])
    {
      v79 = a5;
      v80 = AGX::DataBufferAllocator<34ul>::growNoInline(v16 + 2, 3, 0);
      v17 = v16[20];
      if (!v80)
      {
        a5 = v79;
        goto LABEL_6;
      }
      v18 = v17 + 31;
      a5 = v79;
      if ((unint64_t)(v17 + 31) > v16[19])
        goto LABEL_45;
    }
    v16[21] = v18;
LABEL_6:
    v19 = (_QWORD *)((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = (char *)v19 + v16[22];
    v21 = (int)*MEMORY[0x24BE51650];
    *v19 = a5;
    v16[20] = v19 + 2;
    v22 = *(_QWORD *)(v16[5] + 224) + v21;
    goto LABEL_9;
  }
  v20 = (char *)*a5;
  v22 = a5[3];
LABEL_9:
  if ((((unint64_t)a5 + 4294967294u) / 0xFFFFFFFF) <= 1)
    v23 = 1;
  else
    v23 = ((unint64_t)a5 + 4294967294u) / 0xFFFFFFFF;
LABEL_12:
  v90 = 0;
  v91 = 0;
  v92 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v90, *(_QWORD *)(a1 + 8), 4, 1);
  v88[0] = v91;
  v88[1] = (uint64_t)v90;
  v88[2] = 4;
  v89 = v92;
  *v90 = v23;
  v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
  v25 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88);
  v26 = v25[20];
  v27 = v26 + 31;
  v86 = a8;
  v87 = a2;
  if ((unint64_t)(v26 + 31) <= v25[19])
  {
LABEL_13:
    v25[21] = v27;
    goto LABEL_14;
  }
  v76 = AGX::DataBufferAllocator<34ul>::growNoInline(v25 + 2, 3, 0);
  v26 = v25[20];
  if (v76)
  {
    v27 = v26 + 31;
    v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
    if ((unint64_t)(v26 + 31) > v25[19])
      goto LABEL_45;
    goto LABEL_13;
  }
  v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
LABEL_14:
  v28 = (_DWORD *)((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v25[22];
  v30 = (int *)MEMORY[0x24BE51650];
  v31 = (int)*MEMORY[0x24BE51650];
  *v28 = a4;
  v25[20] = v28 + 4;
  v32 = *(_QWORD *)(v25[5] + 224);
  v33 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88);
  v34 = v33[20];
  v35 = v34 + 31;
  v84 = v15;
  v82 = v22;
  v83 = (uint64_t)v20;
  v81 = a3;
  if ((unint64_t)(v34 + 31) <= v33[19])
  {
LABEL_15:
    v33[21] = v35;
    goto LABEL_16;
  }
  v77 = AGX::DataBufferAllocator<34ul>::growNoInline(v33 + 2, 3, 0);
  v34 = v33[20];
  if (v77)
  {
    v35 = v34 + 31;
    v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
    v30 = (int *)MEMORY[0x24BE51650];
    if ((unint64_t)(v34 + 31) > v33[19])
      goto LABEL_45;
    goto LABEL_15;
  }
  v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
  v30 = (int *)MEMORY[0x24BE51650];
LABEL_16:
  v36 = (_DWORD *)((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v33[22];
  v38 = *v30;
  *v36 = v85;
  v33[20] = v36 + 4;
  v39 = *(_QWORD *)(v33[5] + 224);
  v40 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + v24[53]);
  v41 = v40[20];
  v42 = v41 + 31;
  if ((unint64_t)(v41 + 31) <= v40[19])
  {
LABEL_17:
    v40[21] = v42;
    goto LABEL_18;
  }
  v78 = AGX::DataBufferAllocator<34ul>::growNoInline(v40 + 2, 3, 0);
  v41 = v40[20];
  if (v78)
  {
    v42 = v41 + 31;
    v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
    v30 = (int *)MEMORY[0x24BE51650];
    if ((unint64_t)(v41 + 31) <= v40[19])
      goto LABEL_17;
LABEL_45:
    abort();
  }
  v24 = &OBJC_IVAR___BVHTopDownBuilder__library;
  v30 = (int *)MEMORY[0x24BE51650];
LABEL_18:
  v43 = (_DWORD *)((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (char *)v43 + v40[22];
  v45 = *v30;
  *v43 = a10;
  v40[20] = v43 + 4;
  v46 = *(_QWORD *)(v40[5] + 224) + v45;
  v47 = *(_QWORD *)(a1 + 8);
  v48 = v24[53];
  v49 = v24;
  v50 = *(_QWORD *)(v47 + v48);
  v51 = *v86;
  v52 = v86[3];
  *(_QWORD *)(v50 + 6096) = *v86;
  *(_QWORD *)(*(_QWORD *)(v50 + 1792) + 576) = v51;
  *(_QWORD *)(v50 + 5320) = v52;
  *(_QWORD *)(v50 + 7136) |= 0x20uLL;
  *(_DWORD *)(v50 + 7152) |= 1u;
  v53 = *(_QWORD *)(v47 + v48);
  v54 = *a9;
  v55 = a9[3];
  *(_QWORD *)(v53 + 6144) = *a9;
  *(_QWORD *)(*(_QWORD *)(v53 + 1792) + 624) = v54;
  *(_QWORD *)(v53 + 5368) = v55;
  *(_QWORD *)(v53 + 7136) |= 0x800uLL;
  *(_DWORD *)(v53 + 7152) |= 1u;
  v56 = *(_QWORD *)(v47 + v48);
  v57 = *v87;
  v58 = v87[3];
  *(_QWORD *)(v56 + 6152) = *v87;
  *(_QWORD *)(*(_QWORD *)(v56 + 1792) + 632) = v57;
  *(_QWORD *)(v56 + 5376) = v58;
  *(_QWORD *)(v56 + 7136) |= 0x1000uLL;
  *(_DWORD *)(v56 + 7152) |= 1u;
  v59 = *(_QWORD *)(v47 + v48);
  v60 = *v81;
  v61 = v81[3];
  *(_QWORD *)(v59 + 6160) = *v81;
  *(_QWORD *)(*(_QWORD *)(v59 + 1792) + 640) = v60;
  *(_QWORD *)(v59 + 5384) = v61;
  *(_QWORD *)(v59 + 7136) |= 0x2000uLL;
  *(_DWORD *)(v59 + 7152) |= 1u;
  v62 = *(_QWORD *)(v47 + v48);
  *(_QWORD *)(v62 + 6168) = v83;
  *(_QWORD *)(*(_QWORD *)(v62 + 1792) + 648) = v83;
  *(_QWORD *)(v62 + 5392) = v82;
  *(_QWORD *)(v62 + 7136) |= 0x4000uLL;
  *(_DWORD *)(v62 + 7152) |= 1u;
  v63 = *(_QWORD *)(v47 + v48);
  *(_QWORD *)(v63 + 6128) = (char *)v36 + v37;
  *(_QWORD *)(*(_QWORD *)(v63 + 1792) + 608) = (char *)v36 + v37;
  *(_QWORD *)(v63 + 5352) = v39 + v38;
  *(_QWORD *)(v63 + 7136) |= 0x200uLL;
  *(_DWORD *)(v63 + 7152) |= 1u;
  v64 = *(_QWORD *)(v47 + v48);
  *(_QWORD *)(v64 + 6232) = v44;
  *(_QWORD *)(*(_QWORD *)(v64 + 1792) + 712) = v44;
  *(_QWORD *)(v64 + 5456) = v46;
  *(_QWORD *)(v64 + 7136) |= 0x400000uLL;
  *(_DWORD *)(v64 + 7152) |= 1u;
  v65 = *(_QWORD *)(v47 + v48);
  *(_QWORD *)(v65 + 6120) = (char *)v28 + v29;
  *(_QWORD *)(*(_QWORD *)(v65 + 1792) + 600) = (char *)v28 + v29;
  *(_QWORD *)(v65 + 5344) = v32 + v31;
  *(_QWORD *)(v65 + 7136) |= 0x100uLL;
  *(_DWORD *)(v65 + 7152) |= 1u;
  v66 = *(_QWORD *)(v47 + v48);
  v67 = v88[0];
  v68 = v89;
  *(_QWORD *)(v66 + 6184) = v88[0];
  *(_QWORD *)(*(_QWORD *)(v66 + 1792) + 664) = v67;
  *(_QWORD *)(v66 + 5408) = v68;
  *(_QWORD *)(v66 + 7136) |= 0x10000uLL;
  *(_DWORD *)(v66 + 7152) |= 1u;
  Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 102, 0);
  if (!v84)
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, v83, v82, v88, 1, 0);
    return;
  }
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v49[53]);
  v71 = *(_QWORD *)(v70 + 1776);
  *(_QWORD *)(v70 + 1776) = Pipeline;
  v72 = *(_QWORD *)(Pipeline + 16);
  *(_BYTE *)(v70 + 1745) = *(_BYTE *)(v72 + 216);
  *(_BYTE *)(v70 + 1746) = *(_BYTE *)(v72 + 1992);
  if (*(_DWORD *)(v70 + 1736) == 1)
  {
    if (!*(_BYTE *)(v70 + 7672))
    {
      AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v70 + 1624), (_QWORD *)(v70 + 16));
      v75 = *(_DWORD *)(v70 + 7316);
      if (*(_DWORD *)(v70 + 7312) < v75)
        *(_DWORD *)(v70 + 7312) = v75;
      *(_DWORD *)(v70 + 7316) = 0;
      if (v71)
        goto LABEL_24;
      return;
    }
    v73 = *(_QWORD *)(v70 + 7688);
    if (*(_QWORD *)(v70 + 7680) != v73)
    {
      *(_BYTE *)(v73 - 8) = 1;
      *(_BYTE *)(v73 - 7) = *(_BYTE *)(*(_QWORD *)(v70 + 1768) + 458);
    }
  }
  if (v71)
  {
LABEL_24:
    *(_QWORD *)(v70 + 1776) = v71;
    v74 = *(_QWORD *)(v71 + 16);
    *(_BYTE *)(v70 + 1745) = *(_BYTE *)(v74 + 216);
    *(_BYTE *)(v70 + 1746) = *(_BYTE *)(v74 + 1992);
  }
}

void ProgressBinsSynchronizeBufferAccessRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;

  if ((v12 & 1) == 0
  {
    ProgressBinsSynchronizeBufferAccessRange(ADSCommandProgressBins *,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,MTLBindingAccess,void({block_pointer})(unsigned int,unsigned int))::useConservativeTracking = 0;
  }
  if (ProgressBinsSynchronizeBufferAccessRange(ADSCommandProgressBins *,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,MTLBindingAccess,void({block_pointer})(unsigned int,unsigned int))::useConservativeTracking)
  {
    ProgressBinsSynchronizeBufferAccess(a1, a2, a5, a6);
  }
  else if (a1)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v13 = objc_msgSend((id)a2, "gpuAddress") + a3;
      v14 = v13 + a4;
      v15 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::find<objc_object  {objcproto9MTLBuffer}>((_QWORD *)(a1 + 96), a2);
      v16 = v15;
      if (v15)
      {
        v17 = v15;
        do
          v17 = (_QWORD *)*v17;
        while (v17 && v17[2] == a2);
      }
      else
      {
        v17 = 0;
      }
      if (v17 != v15)
      {
        if (a5 == 1)
        {
          do
          {
            if ((v16[7] & 1) == 0 || (v13 < v16[6] ? (v19 = v14 >= v16[5]) : (v19 = 0), v19))
            {
              *(_WORD *)(a1 + 42) = *((_WORD *)v16 + 18);
              (*(void (**)(uint64_t))(a6 + 16))(a6);
            }
            v16 = (_QWORD *)*v16;
          }
          while (v16 != v17);
        }
        else
        {
          do
          {
            if (v16[3] == 1)
            {
              if ((v16[7] & 1) == 0 || (v13 < v16[6] ? (v20 = v14 >= v16[5]) : (v20 = 0), v20))
              {
                *(_WORD *)(a1 + 42) = *((_WORD *)v16 + 18);
                (*(void (**)(uint64_t))(a6 + 16))(a6);
              }
            }
            v16 = (_QWORD *)*v16;
          }
          while (v16 != v17);
        }
      }
      v21 = operator new(0x40uLL);
      v21[2] = a2;
      v21[3] = a5;
      v21[4] = -1;
      v21[5] = v13;
      v21[6] = v14;
      *((_BYTE *)v21 + 56) = 1;
      v22 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      v23 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v22 >> 47) ^ v22);
      *v21 = 0;
      v21[1] = 0x9DDFEA08EB382D69 * (v23 ^ (v23 >> 47));
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi((_QWORD *)(a1 + 56), v21);
    }
    else
    {
      v18 = ProgressBinsSynchronizeBuffer(a1, (void *)a2);
      if ((v18 & 0x80000000) == 0)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(a6 + 16))(a6, v18, *(unsigned __int16 *)(a1 + 42));
    }
  }
}

void sub_232CE3220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeDeserialize_impl(uint64_t a1, uint64_t *a2, void *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52[4];
  __int128 v53;
  __int128 v54;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 88);
  v12 = *a4 + 24;
  v13 = a4[3];
  *(_QWORD *)(v11 + 6152) = v12;
  *(_QWORD *)(*(_QWORD *)(v11 + 1792) + 632) = v12;
  *(_QWORD *)(v11 + 5376) = v13;
  *(_QWORD *)(v11 + 7136) |= 0x1000uLL;
  *(_DWORD *)(v11 + 7152) |= 1u;
  v14 = *(_QWORD *)(v10 + 88);
  v15 = *a2;
  v16 = a2[3];
  *(_QWORD *)(v14 + 6096) = *a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 1792) + 576) = v15;
  *(_QWORD *)(v14 + 5320) = v16;
  *(_QWORD *)(v14 + 7136) |= 0x20uLL;
  *(_DWORD *)(v14 + 7152) |= 1u;
  v17 = *(_QWORD **)(v10 + 88);
  v18 = v17[20];
  v19 = v18 + 31;
  if ((unint64_t)(v18 + 31) <= v17[19])
  {
LABEL_2:
    v17[21] = v19;
    goto LABEL_3;
  }
  v51 = AGX::DataBufferAllocator<34ul>::growNoInline(v17 + 2, 3, 0);
  v18 = v17[20];
  if (v51)
  {
    v19 = v18 + 31;
    if ((unint64_t)(v18 + 31) > v17[19])
      abort();
    goto LABEL_2;
  }
LABEL_3:
  v20 = (_QWORD *)((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (char *)v20 + v17[22];
  v22 = (int)*MEMORY[0x24BE51650];
  *v20 = a5;
  v17[20] = v20 + 2;
  v23 = *(_QWORD *)(v17[5] + 224) + v22;
  *(_QWORD *)(v11 + 6176) = v21;
  *(_QWORD *)(*(_QWORD *)(v11 + 1792) + 656) = v21;
  *(_QWORD *)(v11 + 5400) = v23;
  *(_QWORD *)(v11 + 7136) |= 0x8000uLL;
  *(_DWORD *)(v11 + 7152) |= 1u;
  v53 = 0uLL;
  *(_QWORD *)&v54 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v53, *(_QWORD *)(a1 + 8), 4, 1);
  v24 = *((_QWORD *)&v53 + 1);
  v25 = v54;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  *(_QWORD *)(v26 + 6224) = *((_QWORD *)&v53 + 1);
  *(_QWORD *)(*(_QWORD *)(v26 + 1792) + 704) = v24;
  *(_QWORD *)(v26 + 5448) = v25;
  *(_QWORD *)(v26 + 7136) |= 0x200000uLL;
  *(_DWORD *)(v26 + 7152) |= 1u;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 96, 0);
  v27 = *a4 + 16;
  v28 = a4[3];
  v53 = 0u;
  v54 = 0u;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, v27, v28, (uint64_t *)&v53, 1, 0);
  if (a3)
  {
    v29 = objc_msgSend(a3, "count");
    if ((unint64_t)objc_msgSend(a3, "count") < 2)
      v30 = 4;
    else
      v30 = 4 * objc_msgSend(a3, "count");
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation(v52, a1, v30, 0);
    if (v29)
    {
      v31 = 0;
      v32 = v52[1];
      do
      {
        *(_DWORD *)(v32 + 4 * v31) = *(_DWORD *)(objc_msgSend(a3, "objectAtIndexedSubscript:", v31) + 344);
        ++v31;
      }
      while (v29 != v31);
    }
    v33 = *(_QWORD *)(a1 + 8);
    v34 = *(_QWORD *)(v33 + 88);
    v35 = v52[0];
    v36 = v52[3];
    *(_QWORD *)(v34 + 6208) = v52[0];
    *(_QWORD *)(*(_QWORD *)(v34 + 1792) + 688) = v35;
    *(_QWORD *)(v34 + 5432) = v36;
    *(_QWORD *)(v34 + 7136) |= 0x80000uLL;
    *(_DWORD *)(v34 + 7152) |= 1u;
    if ((*(_BYTE *)(a4[1] + 91) & 0x40) != 0)
    {
      v47 = 98;
    }
    else
    {
      v37 = objc_msgSend(a3, "count");
      v38 = v37;
      if (v37 <= 1)
        v39 = 1;
      else
        v39 = v37;
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)&v53, a1, 8 * v39, 0);
      if (v38)
      {
        v40 = 0;
        v41 = *((_QWORD *)&v53 + 1);
        do
        {
          v42 = (void *)objc_msgSend(a3, "objectAtIndexedSubscript:", v40);
          v43 = objc_msgSend((id)objc_msgSend(v42, "buffer"), "gpuAddress");
          *(_QWORD *)(v41 + 8 * v40++) = objc_msgSend(v42, "bufferOffset") + v43;
        }
        while (v38 != v40);
      }
      v33 = *(_QWORD *)(a1 + 8);
      v44 = *(_QWORD *)(v33 + 88);
      v45 = v53;
      v46 = *((_QWORD *)&v54 + 1);
      *(_QWORD *)(v44 + 6216) = v53;
      *(_QWORD *)(*(_QWORD *)(v44 + 1792) + 696) = v45;
      *(_QWORD *)(v44 + 5440) = v46;
      *(_QWORD *)(v44 + 7136) |= 0x100000uLL;
      *(_DWORD *)(v44 + 7152) |= 1u;
      v47 = 97;
    }
    v48 = *(_QWORD *)(v33 + 88);
    v49 = *a2;
    v50 = a2[3];
    *(_QWORD *)(v48 + 6096) = *a2;
    *(_QWORD *)(*(_QWORD *)(v48 + 1792) + 576) = v49;
    *(_QWORD *)(v48 + 5320) = v50;
    *(_QWORD *)(v48 + 7136) |= 0x20uLL;
    *(_DWORD *)(v48 + 7152) |= 1u;
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, v47, 0);
    v53 = 0u;
    v54 = 0u;
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, v24, v25, (uint64_t *)&v53, 1, 0);
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 > 0xFFF)
  {
    v11 = (char *)objc_msgSend(*(id *)a2, "newBufferWithLength:options:", a3, 0);
    v8 = objc_msgSend(v11, "contents");
    v9 = objc_msgSend(v11, "gpuAddress");
    v10 = &v11[*MEMORY[0x24BE51650]];
    *a1 = v9;
    a1[1] = v8;
    a1[2] = a3;
    a1[3] = (uint64_t)v10;
    MTLResourceListAddResource();
    IOGPUResourceListAddResource();

  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v12, *(_QWORD *)(a2 + 8), a3, a4);
    v6 = v12;
    v7 = v14;
    *a1 = v13;
    a1[1] = v6;
    a1[2] = a3;
    a1[3] = v7;
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeSerialize_impl(_QWORD *a1, uint64_t *a2, void *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  _DWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t Pipeline;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[4];
  __int128 v54;
  __int128 v55;

  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 88);
  v54 = 0uLL;
  *(_QWORD *)&v55 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v54, v8, 40, 1);
  v10 = v54;
  v11 = v55;
  *(_QWORD *)(v54 + 32) = 0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)v10 = *a2;
  *(_QWORD *)(v10 + 8) = *a4;
  v13 = &unk_255FF8000;
  if ((v12 & 1) == 0)
  {
    v13 = &unk_255FF8000;
    if (v47)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      v13 = (_DWORD *)&unk_255FF8000;
    }
  }
  *(_DWORD *)(v10 + 28) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::kBvhChipCodes[v13[410] & ~((int)v13[410] >> 31)];
  if ((v14 & 1) == 0)
  {
    v13 = &unk_255FF8000;
    if (v48)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      v13 = (_DWORD *)&unk_255FF8000;
    }
  }
  *(_DWORD *)(v10 + 32) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::kBvhVersions[v13[410] & ~((int)v13[410] >> 31)] & 0x1FFFFFFF;
  *(_DWORD *)(v10 + 36) = 0;
  v15 = a1[1];
  v16 = *(_QWORD *)(v15 + 88);
  *(_QWORD *)(v16 + 6240) = *((_QWORD *)&v10 + 1);
  *(_QWORD *)(*(_QWORD *)(v16 + 1792) + 720) = *((_QWORD *)&v10 + 1);
  *(_QWORD *)(v16 + 5464) = v11;
  *(_QWORD *)(v16 + 7136) |= 0x800000uLL;
  *(_DWORD *)(v16 + 7152) |= 1u;
  v17 = *(_QWORD **)(v15 + 88);
  v18 = v17[20];
  v19 = v18 + 31;
  if ((unint64_t)(v18 + 31) <= v17[19])
    goto LABEL_4;
  v46 = AGX::DataBufferAllocator<34ul>::growNoInline(v17 + 2, 3, 0);
  v18 = v17[20];
  if (v46)
  {
    v19 = v18 + 31;
    if ((unint64_t)(v18 + 31) > v17[19])
      abort();
LABEL_4:
    v17[21] = v19;
  }
  v20 = (_QWORD *)((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int)*MEMORY[0x24BE51650];
  v53[0] = (uint64_t)v20 + v17[22];
  v53[1] = (uint64_t)v20;
  *v20 = 0;
  v17[20] = v20 + 2;
  v22 = *(_QWORD *)(v17[5] + 224) + v21;
  v53[2] = 8;
  v53[3] = v22;
  Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 114, 0);
  v24 = *(_QWORD *)(v9 + 1776);
  *(_QWORD *)(v9 + 1776) = Pipeline;
  v25 = *(_QWORD *)(Pipeline + 16);
  *(_BYTE *)(v9 + 1745) = *(_BYTE *)(v25 + 216);
  *(_BYTE *)(v9 + 1746) = *(_BYTE *)(v25 + 1992);
  if (*(_DWORD *)(v9 + 1736) != 1)
    goto LABEL_9;
  if (*(_BYTE *)(v9 + 7672))
  {
    v26 = *(_QWORD *)(v9 + 7688);
    if (*(_QWORD *)(v9 + 7680) != v26)
    {
      *(_BYTE *)(v26 - 8) = 1;
      *(_BYTE *)(v26 - 7) = *(_BYTE *)(*(_QWORD *)(v9 + 1768) + 458);
    }
LABEL_9:
    if (!v24)
      goto LABEL_11;
    goto LABEL_10;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v9 + 1624), (_QWORD *)(v9 + 16));
  v44 = *(_DWORD *)(v9 + 7316);
  if (*(_DWORD *)(v9 + 7312) < v44)
    *(_DWORD *)(v9 + 7312) = v44;
  *(_DWORD *)(v9 + 7316) = 0;
  if (v24)
  {
LABEL_10:
    *(_QWORD *)(v9 + 1776) = v24;
    v27 = *(_QWORD *)(v24 + 16);
    *(_BYTE *)(v9 + 1745) = *(_BYTE *)(v27 + 216);
    *(_BYTE *)(v9 + 1746) = *(_BYTE *)(v27 + 1992);
  }
LABEL_11:
  v28 = a2[2];
  v29 = a2[3];
  v30 = a2[1] + 72;
  *(_QWORD *)&v54 = *a2 + 72;
  *((_QWORD *)&v54 + 1) = v30;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v29;
  v31 = a4[1] + 24;
  v49 = *a4 + 24;
  v50 = v31;
  v32 = a4[3];
  v51 = a4[2];
  v52 = v32;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeStridedCopy((uint64_t)a1, a2, v53, 1, &v54, 0, 1, &v49, v53, 1);
  v33 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 119, 0);
  v34 = *(_QWORD *)(v9 + 1776);
  *(_QWORD *)(v9 + 1776) = v33;
  v35 = *(_QWORD *)(v33 + 16);
  *(_BYTE *)(v9 + 1745) = *(_BYTE *)(v35 + 216);
  *(_BYTE *)(v9 + 1746) = *(_BYTE *)(v35 + 1992);
  if (*(_DWORD *)(v9 + 1736) != 1)
    goto LABEL_15;
  if (*(_BYTE *)(v9 + 7672))
  {
    v36 = *(_QWORD *)(v9 + 7688);
    if (*(_QWORD *)(v9 + 7680) != v36)
    {
      *(_BYTE *)(v36 - 8) = 1;
      *(_BYTE *)(v36 - 7) = *(_BYTE *)(*(_QWORD *)(v9 + 1768) + 458);
    }
LABEL_15:
    if (!v34)
      goto LABEL_17;
    goto LABEL_16;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v9 + 1624), (_QWORD *)(v9 + 16));
  v45 = *(_DWORD *)(v9 + 7316);
  if (*(_DWORD *)(v9 + 7312) < v45)
    *(_DWORD *)(v9 + 7312) = v45;
  *(_DWORD *)(v9 + 7316) = 0;
  if (v34)
  {
LABEL_16:
    *(_QWORD *)(v9 + 1776) = v34;
    v37 = *(_QWORD *)(v34 + 16);
    *(_BYTE *)(v9 + 1745) = *(_BYTE *)(v37 + 216);
    *(_BYTE *)(v9 + 1746) = *(_BYTE *)(v37 + 1992);
  }
LABEL_17:
  v38 = *(_QWORD *)(*a1 + 808);
  if ((*(_DWORD *)(v38 + 5572) - 1) > 0xFFFFFFFD)
  {
    v41 = 4;
  }
  else
  {
    v39 = *(_DWORD *)(v38 + 5572);
    if (v39)
      v40 = v39 + 1;
    else
      v40 = 0;
    v41 = 4 * v40;
  }
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation(&v49, (uint64_t)a1, v41, 0);
  v42 = v50;
  if (objc_msgSend(a3, "count"))
  {
    v43 = 0;
    do
    {
      *(_DWORD *)(v42 + 4 * *(unsigned int *)(objc_msgSend(a3, "objectAtIndexedSubscript:", v43) + 344)) = v43;
      ++v43;
    }
    while (v43 < objc_msgSend(a3, "count"));
  }
  *(_QWORD *)(v10 + 16) = v49;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 99, 0);
  v54 = 0u;
  v55 = 0u;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended((uint64_t)a1, *((_QWORD *)&v10 + 1) + 24, v11, (uint64_t *)&v54, 1, 0);
}

uint64_t ProgressBinsGetPrimitiveCountFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if ((-[MTLAccelerationStructureDescriptor isInstanceDescriptor](a1, "isInstanceDescriptor") & 1) == 0)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v4 = (void *)-[MTLAccelerationStructureDescriptor geometryDescriptors](a1, "geometryDescriptors", 0);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (!v5)
      return 0;
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v22;
LABEL_7:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v22 != v8)
        objc_enumerationMutation(v4);
      v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v9);
      v12 = (void *)objc_opt_class();
      if (objc_msgSend(v12, "isSubclassOfClass:", objc_opt_class()))
        break;
      v13 = (void *)objc_opt_class();
      if (objc_msgSend(v13, "isSubclassOfClass:", objc_opt_class()))
      {
        v10 = objc_msgSend(v11, "boundingBoxCount");
        goto LABEL_9;
      }
      v14 = (void *)objc_opt_class();
      if (objc_msgSend(v14, "isSubclassOfClass:", objc_opt_class()))
      {
        v15 = objc_msgSend(v11, "triangleCount");
        v16 = (void *)objc_msgSend(v11, "vertexBuffers");
LABEL_24:
        v7 += objc_msgSend(v16, "count") * v15;
        goto LABEL_10;
      }
      v17 = (void *)objc_opt_class();
      if (objc_msgSend(v17, "isSubclassOfClass:", objc_opt_class()))
      {
        v15 = objc_msgSend(v11, "boundingBoxCount");
        v16 = (void *)objc_msgSend(v11, "boundingBoxBuffers");
        goto LABEL_24;
      }
      v18 = (void *)objc_opt_class();
      if (objc_msgSend(v18, "isSubclassOfClass:", objc_opt_class()))
      {
        v10 = objc_msgSend(v11, "segmentCount");
        goto LABEL_9;
      }
      v19 = (void *)objc_opt_class();
      if (objc_msgSend(v19, "isSubclassOfClass:", objc_opt_class()))
      {
        v15 = objc_msgSend(v11, "segmentCount");
        v16 = (void *)objc_msgSend(v11, "controlPointBuffers");
        goto LABEL_24;
      }
LABEL_10:
      if (v6 == ++v9)
      {
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        if (!v6)
          return v7;
        goto LABEL_7;
      }
    }
    v10 = objc_msgSend(v11, "triangleCount");
LABEL_9:
    v7 += v10;
    goto LABEL_10;
  }
  v2 = (void *)objc_opt_class();
  if (objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
    return -[MTLAccelerationStructureDescriptor instanceCount](a1, "instanceCount");
  v20 = (void *)objc_opt_class();
  if (objc_msgSend(v20, "isSubclassOfClass:", objc_opt_class()))
    return -[MTLAccelerationStructureDescriptor maxInstanceCount](a1, "maxInstanceCount");
  return 0;
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopy(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34[4];
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;

  objc_msgSend(*(id *)(a1 + 8), "useResource:usage:", a2, 1);
  objc_msgSend(*(id *)(a1 + 8), "useResource:usage:", a3, 2);
  v6 = (void *)objc_msgSend(a2, "buffer");
  v7 = objc_msgSend(a2, "bufferOffset");
  objc_msgSend(v6, "contents");
  v8 = objc_msgSend(v6, "gpuAddress");
  objc_msgSend(v6, "length");
  v9 = (int *)MEMORY[0x24BE51650];
  v10 = (uint64_t)v6 + (int)*MEMORY[0x24BE51650];
  v11 = v8 + v7;
  objc_msgSend(*(id *)(a1 + 8), "useResource:usage:", v6, 1);
  v12 = (char *)objc_msgSend(a3, "buffer");
  v13 = objc_msgSend(a3, "bufferOffset");
  objc_msgSend(v12, "contents");
  v14 = objc_msgSend(v12, "gpuAddress");
  objc_msgSend(v12, "length");
  v15 = &v12[*v9];
  v16 = v14 + v13;
  objc_msgSend(*(id *)(a1 + 8), "useResource:usage:", v12, 2);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v35, *(_QWORD *)(a1 + 8), 4, 1);
  v17 = v36;
  v18 = v37;
  v34[0] = v36;
  v34[1] = (uint64_t)v35;
  v34[2] = 4;
  v34[3] = v37;
  *v35 = 1;
  v19 = objc_msgSend(a3, "accelerationStructureUniqueIdentifier");
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
  {
    objc_msgSend((id)objc_msgSend(a2, "buffer"), "length");
    objc_msgSend((id)objc_msgSend(a3, "buffer"), "length");
    IOGPUDeviceTraceEvent();
  }
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(v20 + 88);
  *(_QWORD *)(v21 + 6152) = v11;
  *(_QWORD *)(*(_QWORD *)(v21 + 1792) + 632) = v11;
  *(_QWORD *)(v21 + 5376) = v10;
  *(_QWORD *)(v21 + 7136) |= 0x1000uLL;
  *(_DWORD *)(v21 + 7152) |= 1u;
  v22 = *(_QWORD *)(v20 + 88);
  *(_QWORD *)(v22 + 6096) = v16;
  *(_QWORD *)(*(_QWORD *)(v22 + 1792) + 576) = v16;
  *(_QWORD *)(v22 + 5320) = v15;
  *(_QWORD *)(v22 + 7136) |= 0x20uLL;
  *(_DWORD *)(v22 + 7152) |= 1u;
  v23 = *(_QWORD **)(v20 + 88);
  v24 = v23[20];
  v25 = v24 + 31;
  if ((unint64_t)(v24 + 31) > v23[19])
  {
    v33 = AGX::DataBufferAllocator<34ul>::growNoInline(v23 + 2, 3, 0);
    v24 = v23[20];
    if (!v33)
      goto LABEL_5;
    v25 = v24 + 31;
    if ((unint64_t)(v24 + 31) > v23[19])
      abort();
  }
  v23[21] = v25;
LABEL_5:
  v26 = (_QWORD *)((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (char *)v26 + v23[22];
  v28 = (int)*MEMORY[0x24BE51650];
  *v26 = v19;
  v23[20] = v26 + 2;
  v29 = *(_QWORD *)(v23[5] + 224) + v28;
  v30 = *(_QWORD *)(a1 + 8);
  v31 = *(_QWORD *)(v30 + 88);
  *(_QWORD *)(v31 + 6176) = v27;
  *(_QWORD *)(*(_QWORD *)(v31 + 1792) + 656) = v27;
  *(_QWORD *)(v31 + 5400) = v29;
  *(_QWORD *)(v31 + 7136) |= 0x8000uLL;
  *(_DWORD *)(v31 + 7152) |= 1u;
  v32 = *(_QWORD *)(v30 + 88);
  *(_QWORD *)(v32 + 6184) = v17;
  *(_QWORD *)(*(_QWORD *)(v32 + 1792) + 664) = v17;
  *(_QWORD *)(v32 + 5408) = v18;
  *(_QWORD *)(v32 + 7136) |= 0x10000uLL;
  *(_DWORD *)(v32 + 7152) |= 1u;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 100, 0);
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, v11 + 72, v10, v34, 16, 0);
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(void *a1, _BOOL4 a2, unsigned int a3)
{
  BVHDescriptor *v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  long double v40;
  double v41;
  char v43;

  v6 = -[BVHDescriptor initWithDescriptor:]([BVHDescriptor alloc], "initWithDescriptor:", a1);
  v7 = (unint64_t)v6;
  if (v6)
  {
    if (v6->_branchingFactor != 8)
    {
      v6->_branchingFactor = 8;
      -[BVHDescriptor updateMaxDepth](v6, "updateMaxDepth");
    }
    v8 = *(_DWORD *)(v7 + 128);
  }
  else
  {
    v8 = 0;
  }
  if ((objc_msgSend(a1, "isInstanceDescriptor") & 1) != 0)
  {
LABEL_6:
    v9 = 0;
    v10 = 1;
  }
  else
  {
    switch(v8)
    {
      case 0u:
      case 3u:
        v10 = 0;
        v9 = 1;
        break;
      case 1u:
      case 4u:
        v10 = 0;
        v9 = 3;
        break;
      case 2u:
      case 5u:
        v10 = 0;
        v9 = 4;
        break;
      default:
        goto LABEL_6;
    }
  }
  if (v7 && !a2)
    a2 = (objc_msgSend(*(id *)(v7 + 48), "usage") & 1) != 0 || *(_BYTE *)(v7 + 82) != 0;
  v11 = objc_msgSend(a1, "isInstanceDescriptor");
  objc_msgSend(a1, "isInstanceDescriptor");
  if ((v11 & 1) != 0)
  {
    if (v7)
    {
      LOBYTE(v12) = *(_BYTE *)(v7 + 82) != 0;
      goto LABEL_27;
    }
LABEL_108:
    if (a3 <= 2)
      objc_msgSend((id)v7, "setBuildAlgorithm:", 1);
    else
      objc_msgSend((id)v7, "setBuildAlgorithm:", 0);
    goto LABEL_49;
  }
  if (!v7)
    goto LABEL_108;
  v12 = *(_QWORD *)(v7 + 40);
  if (v12)
  {
    v13 = objc_msgSend((id)objc_msgSend(a1, "geometryDescriptors"), "count");
    LOBYTE(v12) = 0;
    v15 = v8 < 2 && v13 < 0x101;
    if (a3 > 2)
      goto LABEL_33;
    goto LABEL_28;
  }
LABEL_27:
  v15 = 1;
  if (a3 > 2)
  {
LABEL_33:
    v16 = 0;
    goto LABEL_34;
  }
LABEL_28:
  if (!v15 || (v12 & 1) != 0 || *(_QWORD *)(v7 + 32) || *(_DWORD *)(v7 + 24) >= 0x801u)
    goto LABEL_33;
  v16 = 1;
LABEL_34:
  objc_msgSend((id)v7, "setBuildAlgorithm:", v16);
  if (!*(_QWORD *)(v7 + 40) || *(_DWORD *)(v7 + 128))
    goto LABEL_36;
  if (!a2)
    goto LABEL_45;
  {
    v43 = 0;
    findEnvVarNum<BOOL>(&v43);
    isVertPosPairingFallbackAlwaysAllowed(void)::allow = v43;
  }
  if (isVertPosPairingFallbackAlwaysAllowed(void)::allow || *(_BYTE *)(v7 + 85))
  {
LABEL_45:
    v9 = 2;
    *(_DWORD *)(v7 + 132) = 2;
  }
  else
  {
LABEL_36:
    if (v10)
      v17 = 0;
    else
      v17 = v9;
    if ((v10 & 1) != 0)
    {
      v9 = v17;
      goto LABEL_49;
    }
  }
  if (!*(_BYTE *)(v7 + 83))
  {
    *(_BYTE *)(v7 + 83) = 1;
    objc_msgSend((id)v7, "updateMaxDepth");
  }
  *(_QWORD *)(v7 + 200) = 0;
LABEL_49:
  if ((v19 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerLeaf = xmmword_232D73B20;
    dword_255FF8690 = 1;
  }
  if ((v20 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerLeaf = xmmword_232D73B30;
    dword_255FF86B0 = 1;
  }
  if ((v21 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerInnerNode = xmmword_232D73B40;
    dword_255FF86D0 = 0;
  }
  if ((v22 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerInnerNode = xmmword_232D73B50;
    dword_255FF86F0 = 0;
  }
  if ((v23 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenPrimitiveCost = xmmword_232D73B60;
    dword_255FF8710 = 1065353216;
  }
  if ((v24 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenTraversalCost = xmmword_232D73B70;
    dword_255FF8730 = 0x40000000;
  }
  if ((v25 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenSplitCapacity = xmmword_232D73B80;
    dword_255FF8750 = 1065353216;
  }
  if (objc_msgSend((id)v7, "buildAlgorithm"))
  {
    if (v7)
    {
      *(_OWORD *)(v7 + 160) = xmmword_232D73720;
      *(_OWORD *)(v7 + 176) = xmmword_232D73B90;
      *(_DWORD *)(v7 + 144) = 1065353216;
    }
    if ((v26 & 1) == 0
    {
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::smallBuildMaxDepth = 8;
    }
    LODWORD(v27) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::smallBuildMaxDepth;
    if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::smallBuildMaxDepth <= 1)
      LODWORD(v27) = 1;
    if (v27 >= 8)
      v27 = 8;
    else
      v27 = v27;
    if (!v7 || *(_QWORD *)(v7 + 8) == v27)
      return v7;
LABEL_105:
    *(_QWORD *)(v7 + 8) = v27;
    objc_msgSend((id)v7, "updateMaxDepth");
    return v7;
  }
  if (!v7)
    return v7;
  LODWORD(v28) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerLeaf
                 + v9);
  if (v28 >= 4)
    v28 = 4;
  else
    v28 = v28;
  v29 = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerLeaf
        + v9);
  if (v28 > v29)
    v29 = v28;
  if (v29 >= 4)
    v30 = 4;
  else
    v30 = v29;
  v31 = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerInnerNode
        + v9);
  *(_QWORD *)(v7 + 160) = v28;
  *(_QWORD *)(v7 + 168) = v30;
  if (v31 >= 0x10)
    v32 = 16;
  else
    v32 = v31;
  v33 = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerInnerNode
        + v9);
  if (v32 > v33)
    v33 = v32;
  if (v33 >= 0x10)
    v34 = 16;
  else
    v34 = v33;
  *(_QWORD *)(v7 + 176) = v32;
  *(_QWORD *)(v7 + 184) = v34;
  *(_DWORD *)(v7 + 88) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenPrimitiveCost
                         + v9);
  *(_DWORD *)(v7 + 92) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenTraversalCost
                         + v9);
  *(_DWORD *)(v7 + 144) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenSplitCapacity
                          + v9);
  if (!*(_QWORD *)(v7 + 24))
  {
    v36 = *(_QWORD *)(v7 + 8);
    v27 = 1;
    goto LABEL_102;
  }
  v35 = -[BVHDescriptor maxLeafNodeCount](v7);
  v36 = *(_QWORD *)(v7 + 8);
  v37 = *(_QWORD *)(v7 + 152);
  if (v37 == 2)
  {
    v38 = (double)v36;
    v39 = (log((double)v35) / 0.693147181 + 2.0) * 1.35;
  }
  else
  {
    if (*(_QWORD *)(v7 + 232))
    {
      v27 = (v35 + v37 - 2) / (v37 - 1);
      if (v36 < v27)
        v27 = *(_QWORD *)(v7 + 8);
      goto LABEL_99;
    }
    v38 = (double)v36;
    v40 = log((double)v35);
    v39 = (v40 + v40) / log((double)v37) + 2.0;
  }
  v41 = ceil(v39);
  if (v41 > v38)
    v41 = v38;
  v27 = (unint64_t)v41;
LABEL_99:
  if (v27 <= 1)
    LODWORD(v27) = 1;
  v27 = v27;
LABEL_102:
  if (v27 >= 0x10)
    v27 = 16;
  if (v36 != v27)
    goto LABEL_105;
  return v7;
}

uint64_t getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *a1)
{
  unsigned __int8 v1;
  int v3;
  MTLAccelerationStructureDescriptor *v4;

  if ((v1 & 1) == 0)
  {
    v4 = a1;
    a1 = v4;
    if (v3)
    {
      getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode = 1;
      a1 = v4;
    }
  }
  if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode != 1
    || (-[MTLAccelerationStructureDescriptor usage](a1, "usage") & 1) != 0)
  {
    return 0;
  }
  if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode)
    return 2;
  return 0;
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v24 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calculateCurveControlPointTotalSizeAndOffsets<true>(uint64_t a1, void *a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v12;
  void *v13;

  if (!*(_QWORD *)(a1 + 40))
    return 0;
  v3 = *(_DWORD *)(a1 + 128);
  v4 = v3 == 5 || v3 == 2;
  if (!v4 || !objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
    return 0;
  if (v3 == 5)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v7);
      if (objc_msgSend(a2, "motionKeyframeCount"))
      {
        v10 = 0;
        do
        {
          *(_QWORD *)(a3 + 8 * (v10 + v7 * objc_msgSend(a2, "motionKeyframeCount"))) = v8;
          v8 += 16 * objc_msgSend(v9, "controlPointCount");
          ++v10;
        }
        while (objc_msgSend(a2, "motionKeyframeCount") > v10);
      }
      ++v7;
    }
    while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v7);
  }
  else
  {
    v12 = 0;
    v8 = 0;
    do
    {
      v13 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v12);
      *(_QWORD *)(a3 + 8 * v12) = v8;
      v8 += 16 * objc_msgSend(v13, "controlPointCount");
      ++v12;
    }
    while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v12);
  }
  return v8;
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calculateOutOfLinePerPrimitiveDataTotalSizeAndOffsets<true>(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a3 = 0;
  if (!objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
    return 0;
  if (a1)
  {
    v6 = *(unsigned int *)(a1 + 128);
    objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    v7 = v6 > 5 ? -1 : dword_232D77D28[v6];
  }
  else
  {
    objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    v7 = 0;
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
    return 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v8);
    v11 = v10;
    if (v7 == 1)
    {
      v12 = objc_msgSend(v10, "boundingBoxCount");
    }
    else if (v7)
    {
      v12 = objc_msgSend(v10, "segmentCount");
    }
    else
    {
      v12 = objc_msgSend(v10, "triangleCount");
    }
    v13 = v12;
    v14 = objc_msgSend(v11, "primitiveDataElementSize");
    v15 = (1 << -(char)__clz(v14 - 1));
    if (v14 > 0x10)
      v15 = 32;
    if (v14 < 2)
      v15 = 1;
    v16 = (((v14 + v15 - 1) & -v15) * v13 + 31) & 0xFFFFFFFFFFFFFFE0;
    v17 = v8 + 1;
    if (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > (unint64_t)(v8 + 1))
      a3[v8 + 1] = a3[v8] + v16;
    else
      v9 = a3[v8] + v16;
    ++v8;
  }
  while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v17);
  return v9;
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newGeometryBuffer(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  void *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v31;

  v6 = a4;
  if (a5)
    *a5 = 0;
  if (objc_msgSend(a4, "count"))
  {
    v28 = a5;
    if (a3)
    {
      v8 = *(unsigned int *)(a3 + 128);
      objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
      if (v8 > 5)
        v9 = -1;
      else
        v9 = dword_232D77D28[v8];
    }
    else
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
      v9 = 0;
    }
    v10 = objc_msgSend(v6, "count", v28);
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)a1, a2, 32 * v10, 0);
    v31 = v10;
    if (v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        v15 = (void *)objc_msgSend(v6, "objectAtIndexedSubscript:", v13);
        v16 = *(_QWORD *)(a1 + 8);
        v17 = objc_msgSend(v15, "opaque");
        if (objc_msgSend(v15, "allowDuplicateIntersectionFunctionInvocation"))
          v18 = 2;
        else
          v18 = 0;
        *(_DWORD *)(v16 + v11 + 12) = v18 | v17;
        *(_DWORD *)(v16 + v11 + 8) = objc_msgSend(v15, "intersectionFunctionTableOffset");
        v19 = objc_msgSend(v15, "primitiveDataBuffer");
        if (v19)
        {
          v20 = v6;
          v21 = (void *)objc_msgSend(v15, "primitiveDataBuffer");
          v22 = objc_msgSend(v15, "primitiveDataBufferOffset");
          objc_msgSend(v21, "contents");
          v23 = objc_msgSend(v21, "gpuAddress");
          objc_msgSend(v21, "length");
          v24 = v23 + v22;
          v25 = 1;
          objc_msgSend(*(id *)(a2 + 8), "useResource:usage:", v21, 1);
          *(_QWORD *)(v16 + v11) = v24;
          v26 = objc_msgSend(v15, "primitiveDataStride");
          LODWORD(v19) = objc_msgSend(v15, "primitiveDataElementSize");
          if (v19 >= 2)
          {
            if (v19 > 0x10)
              v25 = 32;
            else
              v25 = 1 << -__clz(v19 - 1);
          }
          v6 = v20;
        }
        else
        {
          v26 = 0;
          *(_QWORD *)(v16 + v11) = 0;
          v25 = 1;
        }
        v27 = (_DWORD *)(v16 + v11);
        v27[4] = v26;
        v27[5] = v19;
        v27[6] = (v19 + v25 - 1) & -v25;
        v27[7] = v12;
        if (v9 == 1)
        {
          v14 = objc_msgSend(v15, "boundingBoxCount");
        }
        else if (v9)
        {
          v14 = objc_msgSend(v15, "segmentCount");
        }
        else
        {
          v14 = objc_msgSend(v15, "triangleCount");
        }
        v12 += v14;
        ++v13;
        v11 += 32;
      }
      while (v31 != v13);
    }
    else
    {
      v12 = 0;
    }
    if (v29)
      *v29 = v12;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::G9::Encoders *)#1}::operator()<MTLIndirectInstanceAccelerationStructureDescriptor>(uint64_t *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43[4];
  uint64_t v44[4];

  v4 = *a1;
  if (objc_msgSend(a2, "instanceDescriptorType") == 2 || objc_msgSend(a2, "instanceDescriptorType") == 4)
  {
    v5 = objc_msgSend(a2, "motionTransformStride");
    v6 = objc_msgSend(a2, "motionTransformType");
    v7 = 64;
    if (!v6)
      v7 = 48;
    if (v5)
      v8 = v5;
    else
      v8 = v7;
    if (objc_msgSend(a2, "motionTransformType") == 1)
      v9 = 0x4000000000;
    else
      v9 = 0x3000000000;
    v10 = objc_msgSend(a2, "motionTransformType") == 0;
    v11 = objc_msgSend(a2, "instanceTransformationMatrixLayout") == 1;
    v12 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 88);
    v13 = v12[20];
    v14 = v13 + 31;
    if ((unint64_t)(v13 + 31) > v12[19])
    {
      v36 = AGX::DataBufferAllocator<34ul>::growNoInline(v12 + 2, 3, 0);
      v13 = v12[20];
      if (!v36)
      {
LABEL_13:
        v15 = v10 | (v11 << 8);
        v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
        v17 = v16 + v12[22];
        v12[20] = v16 + 16;
        v18 = (int *)MEMORY[0x24BE51650];
        v37 = *(_QWORD *)(v12[5] + 224) + (int)*MEMORY[0x24BE51650];
        *(_QWORD *)v16 = v9 & 0xFFFFFFFF00000000 | v8;
        *(_DWORD *)(v16 + 8) = v15;
        v19 = (void *)objc_opt_class();
        if (objc_msgSend(v19, "isSubclassOfClass:", objc_opt_class()))
        {
          v20 = (void *)objc_msgSend(a2, "motionTransformBuffer");
          v21 = objc_msgSend(a2, "motionTransformBufferOffset");
          objc_msgSend(v20, "contents");
          v22 = objc_msgSend(v20, "gpuAddress");
          objc_msgSend(v20, "length");
          v23 = (uint64_t)v20 + *v18;
          objc_msgSend(*(id *)(v4 + 8), "useResource:usage:", v20, 1);
          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getMotionTransformCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v44, v4, a2);
          v24 = (uint64_t *)a1[1];
          v25 = v24[2];
          v26 = v24[3];
          v27 = v24[1] + 136;
          v43[0] = *v24 + 136;
          v43[1] = v27;
          v43[2] = v25;
          v43[3] = v26;
          v38 = v17;
          v39 = v16;
          v40 = 12;
          v41 = v37;
          v42 = 1;
          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyWithIndirectCountAndDestOffset(v4, v22 + v21, v23, v44, v24, v43, &v38);
        }
        else
        {
          v28 = (void *)objc_msgSend(a2, "motionTransformBuffer");
          v29 = objc_msgSend(a2, "motionTransformBufferOffset");
          v30 = objc_msgSend(v28, "contents");
          v31 = objc_msgSend(v28, "gpuAddress");
          v32 = objc_msgSend(v28, "length");
          v33 = (uint64_t)v28 + *v18;
          v44[0] = v31 + v29;
          v44[1] = v29 + v30;
          v44[2] = v32;
          v44[3] = v33;
          objc_msgSend(*(id *)(v4 + 8), "useResource:usage:", v28, 1);
          v34 = objc_msgSend(a2, "maxMotionTransformCount");
          v35 = (uint64_t *)a1[1];
          v38 = v17;
          v39 = v16;
          v40 = 12;
          v41 = v37;
          v42 = 1;
          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyToBvhWithIndirectDestOffset(v4, v44, v34, v35, &v38);
        }
        return;
      }
      v14 = v13 + 31;
      if ((unint64_t)(v13 + 31) > v12[19])
        abort();
    }
    v12[21] = v14;
    goto LABEL_13;
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::G9::Encoders *)#1}::operator()<MTLInstanceAccelerationStructureDescriptor>(uint64_t *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54[4];
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  char *v58;

  v4 = *a1;
  if (objc_msgSend(a2, "instanceDescriptorType") != 2 && objc_msgSend(a2, "instanceDescriptorType") != 4)
    return;
  v5 = objc_msgSend(a2, "motionTransformStride");
  v6 = objc_msgSend(a2, "motionTransformType");
  v7 = 64;
  if (!v6)
    v7 = 48;
  if (v5)
    v8 = v5;
  else
    v8 = v7;
  if (objc_msgSend(a2, "motionTransformType") == 1)
    v9 = 0x4000000000;
  else
    v9 = 0x3000000000;
  v10 = objc_msgSend(a2, "motionTransformType") == 0;
  v11 = objc_msgSend(a2, "instanceTransformationMatrixLayout") == 1;
  v12 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 88);
  v13 = v12[20];
  v14 = v13 + 31;
  v48 = a1;
  if ((unint64_t)(v13 + 31) > v12[19])
  {
    v45 = AGX::DataBufferAllocator<34ul>::growNoInline(v12 + 2, 3, 0);
    v13 = v12[20];
    if (!v45)
      goto LABEL_13;
    v14 = v13 + 31;
    if ((unint64_t)(v13 + 31) > v12[19])
      goto LABEL_24;
  }
  v12[21] = v14;
LABEL_13:
  v15 = v10 | (v11 << 8);
  v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = v16 + v12[22];
  v12[20] = v16 + 16;
  v18 = *(_QWORD *)(v12[5] + 224);
  v19 = (int *)MEMORY[0x24BE51650];
  v20 = v18 + (int)*MEMORY[0x24BE51650];
  *(_QWORD *)v16 = v9 & 0xFFFFFFFF00000000 | v8;
  *(_DWORD *)(v16 + 8) = v15;
  v21 = (void *)objc_opt_class();
  if (objc_msgSend(v21, "isSubclassOfClass:", objc_opt_class()))
  {
    v47 = v20;
    v22 = (void *)objc_msgSend(a2, "motionTransformBuffer");
    v23 = objc_msgSend(a2, "motionTransformBufferOffset");
    objc_msgSend(v22, "contents");
    v24 = objc_msgSend(v22, "gpuAddress");
    objc_msgSend(v22, "length");
    v25 = *v19;
    objc_msgSend(*(id *)(v4 + 8), "useResource:usage:", v22, 1);
    v26 = objc_msgSend(a2, "motionTransformCount");
    v27 = *(_QWORD **)(*(_QWORD *)(v4 + 8) + 88);
    v28 = v27[20];
    v29 = v28 + 31;
    if ((unint64_t)(v28 + 31) <= v27[19])
      goto LABEL_15;
    v46 = AGX::DataBufferAllocator<34ul>::growNoInline(v27 + 2, 3, 0);
    v28 = v27[20];
    if (!v46)
      goto LABEL_16;
    v29 = v28 + 31;
    if ((unint64_t)(v28 + 31) <= v27[19])
    {
LABEL_15:
      v27[21] = v29;
LABEL_16:
      v30 = (_DWORD *)((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      v31 = *v19;
      v55 = (uint64_t)v30 + v27[22];
      v56 = v30;
      *v30 = v26;
      v27[20] = v30 + 4;
      v32 = (char *)(*(_QWORD *)(v27[5] + 224) + v31);
      v57 = 4;
      v58 = v32;
      v33 = (uint64_t *)v48[1];
      v34 = v33[2];
      v35 = v33[3];
      v36 = v33[1] + 136;
      v54[0] = *v33 + 136;
      v54[1] = v36;
      v54[2] = v34;
      v54[3] = v35;
      v49 = v17;
      v50 = v16;
      v51 = 12;
      v52 = v47;
      v53 = 1;
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyWithIndirectCountAndDestOffset(v4, v24 + v23, (uint64_t)v22 + v25, &v55, v33, v54, &v49);
      return;
    }
LABEL_24:
    abort();
  }
  v37 = (char *)objc_msgSend(a2, "motionTransformBuffer");
  v38 = objc_msgSend(a2, "motionTransformBufferOffset");
  v39 = objc_msgSend(v37, "contents");
  v40 = objc_msgSend(v37, "gpuAddress");
  v41 = objc_msgSend(v37, "length");
  v42 = &v37[*v19];
  v55 = v40 + v38;
  v56 = (_DWORD *)(v38 + v39);
  v57 = v41;
  v58 = v42;
  objc_msgSend(*(id *)(v4 + 8), "useResource:usage:", v37, 1);
  v43 = objc_msgSend(a2, "motionTransformCount");
  v44 = (uint64_t *)v48[1];
  v49 = v17;
  v50 = v16;
  v51 = 12;
  v52 = v20;
  v53 = 1;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyToBvhWithIndirectDestOffset(v4, &v55, v43, v44, &v49);
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyControlPoints(uint64_t a1, _QWORD *a2, int a3, MTLAttributeFormat a4, _QWORD *a5, int a6, MTLAttributeFormat a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  MTLAttributeFormat v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t Pipeline;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  MTLAttributeFormat v45;
  int v46;
  uint64_t v47;

  v47 = a8;
  if (!a8)
    return;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(v16 + 88);
  *(_QWORD *)(v17 + 6096) = a9;
  *(_QWORD *)(*(_QWORD *)(v17 + 1792) + 576) = a9;
  *(_QWORD *)(v17 + 5320) = a10;
  *(_QWORD *)(v17 + 7136) |= 0x20uLL;
  *(_DWORD *)(v17 + 7152) |= 1u;
  v18 = *(_QWORD *)(v16 + 88);
  v19 = *a11;
  v20 = a11[3];
  *(_QWORD *)(v18 + 6144) = *a11;
  *(_QWORD *)(*(_QWORD *)(v18 + 1792) + 624) = v19;
  *(_QWORD *)(v18 + 5368) = v20;
  *(_QWORD *)(v18 + 7136) |= 0x800uLL;
  *(_DWORD *)(v18 + 7152) |= 1u;
  v21 = *(_QWORD **)(v16 + 88);
  v22 = v21[20];
  v23 = v22 + 47;
  if ((unint64_t)(v22 + 47) > v21[19])
  {
    v44 = a5;
    v45 = a7;
    v46 = AGX::DataBufferAllocator<34ul>::growNoInline(v21 + 2, 3, 0);
    v22 = v21[20];
    if (!v46)
    {
      a7 = v45;
      a5 = v44;
      goto LABEL_4;
    }
    v23 = v22 + 47;
    a7 = v45;
    a5 = v44;
    if ((unint64_t)(v22 + 47) > v21[19])
      abort();
  }
  v21[21] = v23;
LABEL_4:
  v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = v21[22];
  v26 = (int)*MEMORY[0x24BE51650];
  *(_QWORD *)v24 = *a2;
  v21[20] = v24 + 32;
  v27 = *(_QWORD *)(v21[5] + 224);
  if (!a3)
  {
    v28 = a7;
    v29 = a5;
    v30 = MTLAttributeFormatSize(a4);
    a5 = v29;
    a7 = v28;
    a3 = v30;
  }
  v31 = v24 + v25;
  v32 = v27 + v26;
  *(_DWORD *)(v24 + 8) = a3;
  *(_DWORD *)(v24 + 12) = a4;
  *(_QWORD *)(v24 + 16) = *a5;
  if (!a6)
  {
    v33 = a7;
    v34 = MTLAttributeFormatSize(a7);
    LODWORD(a7) = v33;
    a6 = v34;
  }
  *(_DWORD *)(v24 + 24) = a6;
  *(_DWORD *)(v24 + 28) = a7;
  v35 = *(_QWORD **)(a1 + 8);
  v36 = v35[11];
  *(_QWORD *)(v36 + 6152) = v31;
  *(_QWORD *)(*(_QWORD *)(v36 + 1792) + 632) = v31;
  *(_QWORD *)(v36 + 5376) = v32;
  *(_QWORD *)(v36 + 7136) |= 0x1000uLL;
  *(_DWORD *)(v36 + 7152) |= 1u;
  objc_msgSend(v35, "setBytes:length:atIndex:", &v47, 8, 14);
  Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 103, 0);
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v39 = *(_QWORD *)(v38 + 1776);
  *(_QWORD *)(v38 + 1776) = Pipeline;
  v40 = *(_QWORD *)(Pipeline + 16);
  *(_BYTE *)(v38 + 1745) = *(_BYTE *)(v40 + 216);
  *(_BYTE *)(v38 + 1746) = *(_BYTE *)(v40 + 1992);
  if (*(_DWORD *)(v38 + 1736) != 1)
  {
LABEL_12:
    if (!v39)
      return;
    goto LABEL_13;
  }
  if (*(_BYTE *)(v38 + 7672))
  {
    v41 = *(_QWORD *)(v38 + 7688);
    if (*(_QWORD *)(v38 + 7680) != v41)
    {
      *(_BYTE *)(v41 - 8) = 1;
      *(_BYTE *)(v41 - 7) = *(_BYTE *)(*(_QWORD *)(v38 + 1768) + 458);
    }
    goto LABEL_12;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v38 + 1624), (_QWORD *)(v38 + 16));
  v43 = *(_DWORD *)(v38 + 7316);
  if (*(_DWORD *)(v38 + 7312) < v43)
    *(_DWORD *)(v38 + 7312) = v43;
  *(_DWORD *)(v38 + 7316) = 0;
  if (v39)
  {
LABEL_13:
    *(_QWORD *)(v38 + 1776) = v39;
    v42 = *(_QWORD *)(v39 + 16);
    *(_BYTE *)(v38 + 1745) = *(_BYTE *)(v42 + 216);
    *(_BYTE *)(v38 + 1746) = *(_BYTE *)(v42 + 1992);
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyWithIndirectCountAndDestOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v10 + 6152) = a2;
  *(_QWORD *)(*(_QWORD *)(v10 + 1792) + 632) = a2;
  *(_QWORD *)(v10 + 5376) = a3;
  *(_QWORD *)(v10 + 7136) |= 0x1000uLL;
  *(_DWORD *)(v10 + 7152) |= 1u;
  v11 = *(_QWORD *)(v9 + 88);
  v12 = *a4;
  v13 = a4[3];
  *(_QWORD *)(v11 + 6168) = *a4;
  *(_QWORD *)(*(_QWORD *)(v11 + 1792) + 648) = v12;
  *(_QWORD *)(v11 + 5392) = v13;
  *(_QWORD *)(v11 + 7136) |= 0x4000uLL;
  *(_DWORD *)(v11 + 7152) |= 1u;
  v14 = *(_QWORD *)(v9 + 88);
  v15 = *a5;
  v16 = a5[3];
  *(_QWORD *)(v14 + 6096) = *a5;
  *(_QWORD *)(*(_QWORD *)(v14 + 1792) + 576) = v15;
  *(_QWORD *)(v14 + 5320) = v16;
  *(_QWORD *)(v14 + 7136) |= 0x20uLL;
  *(_DWORD *)(v14 + 7152) |= 1u;
  v17 = *(_QWORD *)(v9 + 88);
  v18 = *a6;
  v19 = a6[3];
  *(_QWORD *)(v17 + 6144) = *a6;
  *(_QWORD *)(*(_QWORD *)(v17 + 1792) + 624) = v18;
  *(_QWORD *)(v17 + 5368) = v19;
  *(_QWORD *)(v17 + 7136) |= 0x800uLL;
  *(_DWORD *)(v17 + 7152) |= 1u;
  if (*((_BYTE *)a7 + 32))
  {
    v20 = *(_QWORD *)(v9 + 88);
    v21 = *a7;
    v22 = a7[3];
    *(_QWORD *)(v20 + 6184) = *a7;
    *(_QWORD *)(*(_QWORD *)(v20 + 1792) + 664) = v21;
    *(_QWORD *)(v20 + 5408) = v22;
    *(_QWORD *)(v20 + 7136) |= 0x10000uLL;
    *(_DWORD *)(v20 + 7152) |= 1u;
  }
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 66, 0);
  memset(v23, 0, sizeof(v23));
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, *a4, a4[3], (uint64_t *)v23, 1, 0);
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyToBvhWithIndirectDestOffset(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t Pipeline;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  v29 = a3;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 8), "setBytes:length:atIndex:", &v29, 4, 14);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 88);
    v11 = *a2;
    v12 = a2[3];
    *(_QWORD *)(v10 + 6152) = *a2;
    *(_QWORD *)(*(_QWORD *)(v10 + 1792) + 632) = v11;
    *(_QWORD *)(v10 + 5376) = v12;
    *(_QWORD *)(v10 + 7136) |= 0x1000uLL;
    *(_DWORD *)(v10 + 7152) |= 1u;
    v13 = *(_QWORD *)(v9 + 88);
    v14 = *a4;
    v15 = a4[3];
    *(_QWORD *)(v13 + 6096) = *a4;
    *(_QWORD *)(*(_QWORD *)(v13 + 1792) + 576) = v14;
    *(_QWORD *)(v13 + 5320) = v15;
    *(_QWORD *)(v13 + 7136) |= 0x20uLL;
    *(_DWORD *)(v13 + 7152) |= 1u;
    v16 = *a4 + 136;
    v17 = *(_QWORD *)(v9 + 88);
    v18 = a4[3];
    *(_QWORD *)(v17 + 6144) = v16;
    *(_QWORD *)(*(_QWORD *)(v17 + 1792) + 624) = v16;
    *(_QWORD *)(v17 + 5368) = v18;
    *(_QWORD *)(v17 + 7136) |= 0x800uLL;
    *(_DWORD *)(v17 + 7152) |= 1u;
    if (*((_BYTE *)a5 + 32))
    {
      v19 = *(_QWORD *)(v9 + 88);
      v20 = *a5;
      v21 = a5[3];
      *(_QWORD *)(v19 + 6184) = *a5;
      *(_QWORD *)(*(_QWORD *)(v19 + 1792) + 664) = v20;
      *(_QWORD *)(v19 + 5408) = v21;
      *(_QWORD *)(v19 + 7136) |= 0x10000uLL;
      *(_DWORD *)(v19 + 7152) |= 1u;
    }
    Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 66, 0);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
    v24 = *(_QWORD *)(v23 + 1776);
    *(_QWORD *)(v23 + 1776) = Pipeline;
    v25 = *(_QWORD *)(Pipeline + 16);
    *(_BYTE *)(v23 + 1745) = *(_BYTE *)(v25 + 216);
    *(_BYTE *)(v23 + 1746) = *(_BYTE *)(v25 + 1992);
    if (*(_DWORD *)(v23 + 1736) != 1)
    {
LABEL_8:
      if (!v24)
        return;
      goto LABEL_9;
    }
    if (*(_BYTE *)(v23 + 7672))
    {
      v26 = *(_QWORD *)(v23 + 7688);
      if (*(_QWORD *)(v23 + 7680) != v26)
      {
        *(_BYTE *)(v26 - 8) = 1;
        *(_BYTE *)(v26 - 7) = *(_BYTE *)(*(_QWORD *)(v23 + 1768) + 458);
      }
      goto LABEL_8;
    }
    AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v23 + 1624), (_QWORD *)(v23 + 16));
    v28 = *(_DWORD *)(v23 + 7316);
    if (*(_DWORD *)(v23 + 7312) < v28)
      *(_DWORD *)(v23 + 7312) = v28;
    *(_DWORD *)(v23 + 7316) = 0;
    if (v24)
    {
LABEL_9:
      *(_QWORD *)(v23 + 1776) = v24;
      v27 = *(_QWORD *)(v24 + 16);
      *(_BYTE *)(v23 + 1745) = *(_BYTE *)(v27 + 216);
      *(_BYTE *)(v23 + 1746) = *(_BYTE *)(v27 + 1992);
    }
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getMotionTransformCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  result = objc_msgSend(a3, "motionTransformCountBuffer");
  if (result)
  {
    v7 = (char *)result;
    v8 = objc_msgSend(a3, "motionTransformCountBufferOffset");
    v9 = objc_msgSend(v7, "contents");
    v10 = objc_msgSend(v7, "gpuAddress");
    v11 = objc_msgSend(v7, "length");
    v12 = &v7[*MEMORY[0x24BE51650]];
    *a1 = v10 + v8;
    a1[1] = v8 + v9;
    a1[2] = v11;
    a1[3] = v12;
    return objc_msgSend(*(id *)(a2 + 8), "useResource:usage:", v7, 1);
  }
  v13 = *(_QWORD **)(*(_QWORD *)(a2 + 8) + 88);
  v14 = v13[20];
  v15 = v14 + 31;
  if ((unint64_t)(v14 + 31) > v13[19])
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(v13 + 2, 3, 0);
    v14 = v13[20];
    if (!(_DWORD)result)
      goto LABEL_5;
    v15 = v14 + 31;
    if ((unint64_t)(v14 + 31) > v13[19])
      abort();
  }
  v13[21] = v15;
LABEL_5:
  v16 = (_DWORD *)((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int)*MEMORY[0x24BE51650];
  *a1 = (char *)v16 + v13[22];
  a1[1] = v16;
  *v16 = 0;
  v13[20] = v16 + 4;
  v18 = *(_QWORD *)(v13[5] + 224) + v17;
  a1[2] = 4;
  a1[3] = v18;
  return result;
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeWriteCompactedSize(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t Pipeline;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;

  v10 = *(_QWORD **)(a1 + 8);
  v11 = v10[11];
  objc_msgSend(v10, "useResource:usage:", a2, 1);
  if (a5 == 33)
    v12 = 117;
  else
    v12 = 118;
  Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, v12, 0);
  v14 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88);
  v15 = v14[20];
  v16 = v15 + 31;
  v45 = a4;
  if ((unint64_t)(v15 + 31) <= v14[19])
  {
LABEL_5:
    v14[21] = v16;
    goto LABEL_6;
  }
  v44 = AGX::DataBufferAllocator<34ul>::growNoInline(v14 + 2, 3, 0);
  v15 = v14[20];
  if (v44)
  {
    v16 = v15 + 31;
    if ((unint64_t)(v15 + 31) > v14[19])
      abort();
    goto LABEL_5;
  }
LABEL_6:
  v17 = (_DWORD *)((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v14[22];
  v19 = (int *)MEMORY[0x24BE51650];
  v20 = (int)*MEMORY[0x24BE51650];
  *v17 = 0;
  v14[20] = v17 + 4;
  v21 = *(_QWORD *)(v14[5] + 224);
  v22 = objc_msgSend(a2, "buffer");
  v23 = objc_msgSend(a2, "bufferOffset");
  if (v22)
  {
    v24 = v22 + *v19;
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(_QWORD *)(v24 + 24);
    LODWORD(v24) = *(_DWORD *)(v24 + 16);
    *(_QWORD *)(v11 + 6056) = v25;
    *(_QWORD *)(v11 + 6576) = v26;
    v27 = *(_QWORD **)(v11 + 1792);
    v27[67] = v25 + v23 + 64;
    *v27 = v26 + v23 + 64;
    *(_DWORD *)(v11 + 4352) = v24;
    *(_DWORD *)(v11 + 4612) = v24;
    *(_DWORD *)(v11 + 4872) = v25 >> 8;
    *(_QWORD *)(v11 + 5280) = v22 + *v19;
    *(_QWORD *)(v11 + 7136) |= 1uLL;
    *(_DWORD *)(v11 + 7152) |= 1u;
    if (*(_QWORD *)(v11 + 1480))
      MTLResourceListAddResource();
  }
  else
  {
    v28 = *(_QWORD *)(v11 + 1752);
    *(_QWORD *)(v11 + 6056) = v28;
    *(_QWORD *)(v11 + 6576) = 0;
    v29 = *(_QWORD **)(v11 + 1792);
    v29[67] = v28;
    *v29 = 0;
    *(_DWORD *)(v11 + 4352) = 0;
    *(_DWORD *)(v11 + 4612) = 0;
    *(_DWORD *)(v11 + 4872) = *(_QWORD *)(v11 + 1752) >> 8;
    *(_QWORD *)(v11 + 5280) = 0;
  }
  v30 = (char *)v17 + v18;
  v31 = v21 + v20;
  *(_DWORD *)(v11 + 4212) = 0;
  if (a3)
  {
    v32 = a3 + *v19;
    v33 = *(_QWORD *)(v32 + 8);
    v34 = *(_QWORD *)(v32 + 24);
    v35 = *(_DWORD *)(v32 + 16);
    *(_QWORD *)(v11 + 6064) = v33;
    *(_QWORD *)(v11 + 6584) = v34;
    v36 = *(_QWORD *)(v11 + 1792);
    *(_QWORD *)(v36 + 544) = v33 + v45;
    *(_QWORD *)(v36 + 8) = v34 + v45;
    *(_DWORD *)(v11 + 4356) = v35;
    *(_DWORD *)(v11 + 4616) = v35;
    *(_DWORD *)(v11 + 4876) = v33 >> 8;
    *(_QWORD *)(v11 + 5288) = v32;
    *(_QWORD *)(v11 + 7136) |= 2uLL;
    *(_DWORD *)(v11 + 7152) |= 1u;
    if (*(_QWORD *)(v11 + 1480))
      MTLResourceListAddResource();
  }
  else
  {
    v37 = *(_QWORD *)(v11 + 1752);
    *(_QWORD *)(v11 + 6064) = v37;
    *(_QWORD *)(v11 + 6584) = 0;
    v38 = *(_QWORD *)(v11 + 1792);
    *(_QWORD *)(v38 + 544) = v37;
    *(_QWORD *)(v38 + 8) = 0;
    *(_DWORD *)(v11 + 4356) = 0;
    *(_DWORD *)(v11 + 4616) = 0;
    *(_DWORD *)(v11 + 4876) = *(_QWORD *)(v11 + 1752) >> 8;
    *(_QWORD *)(v11 + 5288) = 0;
  }
  v39 = *(_QWORD *)(v11 + 1776);
  *(_DWORD *)(v11 + 4216) = 0;
  *(_QWORD *)(v11 + 6072) = v30;
  *(_QWORD *)(*(_QWORD *)(v11 + 1792) + 552) = v30;
  *(_QWORD *)(v11 + 5296) = v31;
  *(_QWORD *)(v11 + 7136) |= 4uLL;
  *(_DWORD *)(v11 + 7152) |= 1u;
  *(_QWORD *)(v11 + 1776) = Pipeline;
  v40 = *(_QWORD *)(Pipeline + 16);
  *(_BYTE *)(v11 + 1745) = *(_BYTE *)(v40 + 216);
  *(_BYTE *)(v11 + 1746) = *(_BYTE *)(v40 + 1992);
  if (*(_DWORD *)(v11 + 1736) != 1)
  {
LABEL_18:
    if (!v39)
      return;
    goto LABEL_19;
  }
  if (*(_BYTE *)(v11 + 7672))
  {
    v41 = *(_QWORD *)(v11 + 7688);
    if (*(_QWORD *)(v11 + 7680) != v41)
    {
      *(_BYTE *)(v41 - 8) = 1;
      *(_BYTE *)(v41 - 7) = *(_BYTE *)(*(_QWORD *)(v11 + 1768) + 458);
    }
    goto LABEL_18;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v11 + 1624), (_QWORD *)(v11 + 16));
  v43 = *(_DWORD *)(v11 + 7316);
  if (*(_DWORD *)(v11 + 7312) < v43)
    *(_DWORD *)(v11 + 7312) = v43;
  *(_DWORD *)(v11 + 7316) = 0;
  if (v39)
  {
LABEL_19:
    *(_QWORD *)(v11 + 1776) = v39;
    v42 = *(_QWORD *)(v39 + 16);
    *(_BYTE *)(v11 + 1745) = *(_BYTE *)(v42 + 216);
    *(_BYTE *)(v11 + 1746) = *(_BYTE *)(v42 + 1992);
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen()
{
  unsigned __int8 v0;
  _DWORD *v1;
  int v3;

  v1 = &unk_255FF8000;
  if ((v0 & 1) == 0)
  {
    v1 = &unk_255FF8000;
    if (v3)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      v1 = (_DWORD *)&unk_255FF8000;
    }
  }
  return v1[410] & ~((int)v1[410] >> 31);
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calcRiaBvhSize(unint64_t a1, void *a2, unsigned int a3, unint64_t *a4)
{
  unint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  _BOOL4 v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  unsigned __int8 v53;
  unint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  BOOL v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;

  if (a1)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 40) && !*(_DWORD *)(a1 + 128) && *(_DWORD *)(a1 + 140) == 3)
    {
      v9 = *(float *)(a1 + 144) + -1.0;
      if (v9 < 0.0)
        v9 = 0.0;
      v8 += vcvtpd_u64_f64(v9 * (double)v8);
    }
    if (*(_BYTE *)(a1 + 83))
    {
      v10 = *(_QWORD *)(a1 + 192);
      if (v10 >= 2)
        v8 *= v10 - 1;
    }
  }
  else
  {
    v8 = 0;
  }
  v11 = -[BVHDescriptor maxLeafNodeCount](a1);
  v12 = -[BVHDescriptor maxInnerNodeCount](a1);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if ((v14 & 1) == 0
  {
    getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode = 1;
  }
  v117 = v13;
  v15 = v13 << 6;
  v115 = a3;
  if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode != 1
    || (objc_msgSend(a2, "usage") & 1) != 0)
  {
    v16 = 0;
  }
  else if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode)
  {
    v16 = 2;
  }
  else
  {
    v16 = 0;
  }
  v17 = v15 + 128;
  v18 = objc_msgSend(a2, "isInstanceDescriptor");
  v109 = v11;
  if ((v18 & 1) == 0)
  {
    v26 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count");
    if (!v26)
    {
      v108 = 0;
      v24 = 0;
      v111 = 0;
      v112 = 0;
      v114 = 0;
      v116 = 0;
      v33 = 0;
      v34 = -1;
      v107 = 1;
      v35 = v117;
      goto LABEL_112;
    }
    v113 = v16;
    v116 = v26;
    v110 = a4;
    if (a1)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          if (v28 <= objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v27), "primitiveDataElementSize"))v28 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v27), "primitiveDataElementSize");
          ++v27;
        }
        while (*(_QWORD *)(a1 + 40) > v27);
        v32 = v28 != 0;
      }
      else
      {
        v32 = 0;
      }
      v36 = objc_msgSend(a2, "motionKeyframeCount");
      v37 = v36;
      v38 = *(_DWORD *)(a1 + 128);
      v107 = v36;
      if (v38 > 5)
      {
        v108 = 0;
        v41 = 0;
        v39 = 0;
        v42 = 0;
        v34 = -1;
        if (!v32)
          goto LABEL_79;
      }
      else
      {
        if (((1 << v38) & 9) == 0)
        {
          if (((1 << v38) & 0x12) != 0)
          {
            v39 = 0;
            if (v36 <= 1uLL)
              v40 = 4;
            else
              v40 = 5;
            v108 = v40;
            if (v36 <= 1uLL)
              v41 = 36;
            else
              v41 = 64;
            v42 = 1;
            v34 = 1;
            if (v32)
              goto LABEL_59;
          }
          else
          {
            v42 = 0;
            if (v36 <= 1uLL)
              v48 = 6;
            else
              v48 = 7;
            v108 = v48;
            if (v36 <= 1uLL)
              v41 = 24;
            else
              v41 = 32;
            v34 = 2;
            v39 = 1;
            if (v32)
              goto LABEL_59;
          }
LABEL_79:
          if (v41 < 5)
          {
            v24 = 4;
            goto LABEL_96;
          }
          if (v41 < 0x21)
          {
            v24 = 32;
            goto LABEL_96;
          }
          if (v41 < 0x31)
          {
            v24 = 48;
            goto LABEL_96;
          }
          if (v41 < 0x41)
          {
            v24 = 64;
            goto LABEL_96;
          }
          v44 = v41 > 0x60;
          goto LABEL_90;
        }
        v47 = *(_DWORD *)(a1 + 132);
        if (v47 == 2)
        {
          v39 = 0;
          v42 = 0;
          v34 = 0;
          if (v36 > 1uLL)
            v47 = 3;
          v108 = v47;
          if (v36 <= 1uLL)
            v41 = 64;
          else
            v41 = 116;
          if (v32)
            goto LABEL_59;
          goto LABEL_79;
        }
        if (!v47)
        {
LABEL_67:
          v39 = 0;
          v42 = 0;
          v34 = 0;
          v108 = v37 > 1;
          if (v37 <= 1)
            v41 = 48;
          else
            v41 = 88;
          if (v32)
            goto LABEL_59;
          goto LABEL_79;
        }
        v108 = 0;
        v41 = 0;
        v39 = 0;
        v42 = 0;
        v34 = 0;
        if (!v32)
          goto LABEL_79;
      }
LABEL_59:
      if (v38 != 3 && v38)
      {
        v49 = v42;
        v44 = (unint64_t)objc_msgSend(a2, "motionKeyframeCount") > 1;
        if (v49)
        {
          v45 = 48;
          v46 = 96;
        }
        else
        {
          v45 = 32;
          v46 = 48;
        }
        goto LABEL_93;
      }
      if (!a1)
        goto LABEL_64;
      v43 = *(_DWORD *)(a1 + 132);
      if (v43 != 2)
      {
        if (v43)
        {
          v24 = 0;
          goto LABEL_96;
        }
LABEL_64:
        v44 = (unint64_t)objc_msgSend(a2, "motionKeyframeCount", v107) > 1;
        v45 = 64;
        v46 = 96;
        goto LABEL_93;
      }
      v44 = (unint64_t)objc_msgSend(a2, "motionKeyframeCount") > 1;
LABEL_90:
      v45 = 96;
      v46 = 128;
LABEL_93:
      if (v44)
        v24 = v46;
      else
        v24 = v45;
LABEL_96:
      if (v37 < 2)
      {
        if (v113)
          v51 = v39;
        else
          v51 = 0;
        v52 = v51 == 1;
        a4 = v110;
        v33 = 0;
        v35 = v117;
        if (v52)
          v17 = ((v117 + v8) << 6) + 128;
        goto LABEL_111;
      }
      a4 = v110;
      if (a1)
      {
        if (*(_BYTE *)(a1 + 83))
        {
          v35 = v117;
          v17 += (32 * v117 - 32) & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = v15 + 256;
          v35 = v117;
        }
        if ((objc_msgSend(*(id *)(a1 + 48), "usage", v107) & 1) != 0)
        {
          v33 = 0;
          goto LABEL_111;
        }
        v50 = *(_QWORD *)(a1 + 176);
        if (v50 <= 1)
          v50 = 1;
      }
      else
      {
        v17 = v15 + 256;
        v50 = 1;
        v35 = v117;
      }
      v33 = (v8 + v50 - 1) / v50;
LABEL_111:
      v111 = 0;
      v112 = 0;
      v114 = 0;
      v17 += v8 * (((_WORD)v24 + 63) & 0x1C0);
      goto LABEL_112;
    }
    v106 = objc_msgSend(a2, "motionKeyframeCount");
    v38 = 0;
    v32 = 0;
    v37 = v106;
    v107 = v106;
    goto LABEL_67;
  }
  v19 = (void *)objc_opt_class();
  if (objc_msgSend(v19, "isSubclassOfClass:", objc_opt_class()))
  {
    v20 = objc_msgSend(a2, "maxInstanceCount");
    if (objc_msgSend(a2, "instanceDescriptorType") == 2 || objc_msgSend(a2, "instanceDescriptorType") == 4)
    {
      v112 = objc_msgSend(a2, "maxMotionTransformCount");
      v21 = objc_msgSend(a2, "motionTransformStride");
      v22 = objc_msgSend(a2, "motionTransformType");
      v23 = 64;
      v24 = 48;
      if (v22)
        v25 = 64;
      else
        v25 = 48;
      if (v21)
        v25 = v21;
      v111 = v25;
      v108 = 9;
    }
    else
    {
      v23 = 128;
      v108 = 8;
      v111 = 48;
      v112 = v20;
      v24 = 128;
    }
  }
  else
  {
    v20 = objc_msgSend(a2, "instanceCount");
    if (objc_msgSend(a2, "instanceDescriptorType") == 2 || objc_msgSend(a2, "instanceDescriptorType") == 4)
    {
      v112 = objc_msgSend(a2, "motionTransformCount");
      v29 = objc_msgSend(a2, "motionTransformStride");
      v30 = objc_msgSend(a2, "motionTransformType");
      v23 = 64;
      v24 = 48;
      if (v30)
        v31 = 64;
      else
        v31 = 48;
      if (v29)
        v31 = v29;
      v111 = v31;
      v108 = 9;
    }
    else
    {
      v23 = 128;
      v108 = 8;
      v111 = 48;
      v112 = v20;
      v24 = 128;
    }
  }
  v35 = v117;
  v116 = 0;
  v33 = 0;
  v114 = v20;
  v17 += v23 * v20;
  v34 = -1;
  v107 = 1;
LABEL_112:
  if (v33 < v35)
    v35 = v33;
  if ((v53 & 1) == 0
  {
  }
  v54 = v17 + (v35 << 7);
  if (v115 < 2 || v34)
  {
    if (v115 == 1 && v54 > 0x4000)
    {
      if (a1)
        v58 = *(_QWORD *)(a1 + 168);
      else
        LODWORD(v58) = 0;
      v59 = 8 * v58;
      if ((8 * v58) >= 0x10)
        v59 = 16;
      v60 = v59 / (int)v58;
      v61 = v59 / (int)v58 * v58;
      v62 = v58 * v24;
      v63 = v62 * v60;
      v64 = v62 <= 63;
      if (v62 <= 63)
        v65 = 0;
      else
        v65 = v60;
      if (v64)
        v66 = 0;
      else
        v66 = v63;
      if (v24 <= 0x3F)
        v67 = v65;
      else
        v67 = v65 + 1;
      if (v24 <= 0x3F)
        v68 = 0;
      else
        v68 = v24;
      v69 = v66 + v68;
      if (v59 == v61 || v65 > 7)
      {
        v71 = v66;
      }
      else
      {
        v65 = v67;
        v71 = v69;
      }
      v54 += ((v54 + (int)(0x4000 - ((v71 - (v65 << 6) + 575) & 0xFFFFFFC0)) - 1)
            / (int)(0x4000 - ((v71 - (v65 << 6) + 575) & 0xFFFFFFC0))
            - 1)
           * (int)((v71 - (v65 << 6) + 575) & 0xFFFFFFC0);
    }
  }
  else
  {
    if (objc_msgSend((id)a1, "buildAlgorithm") == 1)
    {
      if ((v55 & 1) == 0
      {
        AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSmallBuilderQTBsPerNode(BVHDescriptor const*)::qtbsPerNode = 1065353216;
      }
      v56 = (unint64_t)(float)((float)(*(float *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSmallBuilderQTBsPerNode(BVHDescriptor const*)::qtbsPerNode
                                            * (float)v117)
                                    + 0.5);
      if (v56 <= 1)
        v56 = 1;
      v57 = v56 << 6;
    }
    else
    {
      if (a1)
        v72 = *(_DWORD *)(a1 + 168) - 1;
      else
        v72 = -1;
      if (v108 > 3)
        v73 = 0;
      else
        v73 = dword_232D73DD0[v108];
      v74 = (v73 + v72) / v73;
      if (v74 >= 4)
        v74 = 4;
      v57 = v109 * (v74 << 6);
      if (a1)
        v75 = *(_QWORD *)(a1 + 176);
      else
        v75 = 0;
      v76 = ((v8 + v75 - 1) / v75) << 8;
      if (v76 < v57)
        v57 = v76;
    }
    v54 += v57;
  }
  *a4 = v54;
  if (a1 && *(_BYTE *)(a1 + 83))
  {
    if ((v18 & 1) != 0)
      goto LABEL_199;
    goto LABEL_162;
  }
  v101 = v107 - 1;
  if ((v107 - 1) <= 1)
    v102 = 1;
  else
    v102 = v101;
  v104 = v54 * v102 < 0x4000 || v101 < 2 || v115 > 1;
  v105 = (v54 + 0x3FFF) & 0xFFFFFFFFFFFFC000;
  if (v104)
    v105 = v54;
  v54 = v105 * v102;
  if ((v18 & 1) == 0)
  {
LABEL_162:
    if (v34 == 2)
    {
      if (a1
        && *(_QWORD *)(a1 + 40)
        && ((v77 = *(_DWORD *)(a1 + 128), v77 == 5) || v77 == 2)
        && objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors", v107), "count"))
      {
        if (v77 == 5)
        {
          v78 = 0;
          v79 = 0;
          do
          {
            v80 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v78);
            if (objc_msgSend(a2, "motionKeyframeCount"))
            {
              v81 = 0;
              do
              {
                v79 += 16 * objc_msgSend(v80, "controlPointCount");
                ++v81;
              }
              while (objc_msgSend(a2, "motionKeyframeCount") > v81);
            }
            ++v78;
          }
          while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v78);
        }
        else
        {
          v100 = 0;
          v79 = 0;
          do
            v79 += 16
                 * objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v100++), "controlPointCount");
          while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v100);
        }
        if (v79)
          v54 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
      }
      else
      {
        v79 = 0;
      }
      v54 += v79;
    }
    if (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors", v107), "count"))
    {
      if (a1)
      {
        v82 = *(unsigned int *)(a1 + 128);
        objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
        if (v82 > 5)
          v83 = -1;
        else
          v83 = dword_232D77D28[v82];
      }
      else
      {
        objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
        v83 = 0;
      }
      if (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
      {
        v85 = 0;
        v84 = 0;
        do
        {
          v90 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v85);
          v91 = v90;
          if (v83 == 1)
          {
            v86 = objc_msgSend(v90, "boundingBoxCount");
          }
          else if (v83)
          {
            v86 = objc_msgSend(v90, "segmentCount");
          }
          else
          {
            v86 = objc_msgSend(v90, "triangleCount");
          }
          v87 = v86;
          v88 = objc_msgSend(v91, "primitiveDataElementSize");
          v89 = (1 << -(char)__clz(v88 - 1));
          if (v88 > 0x10)
            v89 = 32;
          if (v88 < 2)
            v89 = 1;
          v84 += (((v88 + v89 - 1) & -v89) * v87 + 31) & 0xFFFFFFFFFFFFFFE0;
          ++v85;
        }
        while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v85);
        if (v84)
          v54 = (v54 + 31) & 0xFFFFFFFFFFFFFFE0;
      }
      else
      {
        v84 = 0;
      }
    }
    else
    {
      v84 = 0;
    }
    v54 += v84;
  }
LABEL_199:
  if (objc_msgSend((id)a1, "buildAlgorithm", v107) == 2)
  {
    if (!a1)
    {
      v92 = v111 * v112 + 0x100000;
      return ((((v92 + 16 * v114 + 7) & 0xFFFFFFFFFFFFFFF8) + 83) & 0xFFFFFFFFFFFFFFF8) + 8 * v116;
    }
    v92 = (((*(_DWORD *)(a1 + 24) << 11) + 4192256) & 0xFFC00000) + v111 * v112 + 0x100000;
    v93 = v117;
  }
  else
  {
    objc_msgSend((id)a1, "buildAlgorithm");
    v92 = v54 + v111 * v112;
    v93 = v117;
    if (!a1)
      return ((((v92 + 16 * v114 + 7) & 0xFFFFFFFFFFFFFFF8) + 83) & 0xFFFFFFFFFFFFFFF8) + 8 * v116;
  }
  if ((objc_msgSend(*(id *)(a1 + 48), "usage") & 1) != 0)
  {
    v94 = *a4 + 63;
    v95 = 2;
    v96 = 3;
    v97 = 8;
    if (!(v94 >> 38))
      v97 = 4;
    if (v94 >> 30)
      v96 = v97;
    if (v94 >= 0x400000)
      v95 = v96;
    if (v94 >= 0x4000)
      v98 = v95;
    else
      v98 = 1;
    v92 = ((v98 * v93 + 7) & 0xFFFFFFFFFFFFFFF8) + ((v92 + 279) & 0xFFFFFFFFFFFFFFF8);
  }
  return ((((v92 + 16 * v114 + 7) & 0xFFFFFFFFFFFFFFF8) + 83) & 0xFFFFFFFFFFFFFFF8) + 8 * v116;
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocatePLOCScratch(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;

  bzero(a1, 0x240uLL);
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 && !*(_DWORD *)(a2 + 128) && *(_DWORD *)(a2 + 132) == 2)
    {
      v7 = *(_QWORD *)(a2 + 208);
      v8 = *(_QWORD *)(a2 + 216);
      v9 = 8 * *(_QWORD *)(a2 + 24);
      v10 = a3 + 7;
      v11 = 16 * v8 + 63;
      v12 = a3[1];
      v13 = ((v11 + a3[7]) & 0xFFFFFFFFFFFFFFC0) >= v12;
      v14 = ((v11 + a3[7]) & 0xFFFFFFFFFFFFFFC0) >= v12;
      v15 = a3[v14 + 7];
      v10[v14] = (v15 + v11) & 0xFFFFFFFFFFFFFFC0;
      a1[48] = a3;
      *((_DWORD *)a1 + 98) = 0;
      *((_DWORD *)a1 + 99) = v13;
      a1[50] = v15;
      *((_DWORD *)a1 + 102) = 16 * v8;
      v16 = 4 * v8;
      v17 = 4 * v8 + 63;
      v18 = ((a3[7] + v17) & 0xFFFFFFFFFFFFFFC0) >= v12;
      v19 = ((a3[7] + v17) & 0xFFFFFFFFFFFFFFC0) >= v12;
      v20 = a3[v19 + 7];
      v10[v19] = (v20 + v17) & 0xFFFFFFFFFFFFFFC0;
      a1[52] = a3;
      *((_DWORD *)a1 + 106) = 0;
      *((_DWORD *)a1 + 107) = v18;
      a1[54] = v20;
      v8 *= 36;
      v21 = ((a3[7] + v8 + 63) & 0xFFFFFFFFFFFFFFC0) >= v12;
      v22 = ((a3[7] + v8 + 63) & 0xFFFFFFFFFFFFFFC0) >= v12;
      v23 = a3[v22 + 7];
      *((_DWORD *)a1 + 110) = v16;
      v10[v22] = (v23 + v8 + 63) & 0xFFFFFFFFFFFFFFC0;
      a1[56] = a3;
      *((_DWORD *)a1 + 114) = 0;
      *((_DWORD *)a1 + 115) = v21;
      a1[58] = v23;
      *((_DWORD *)a1 + 118) = v8;
      v24 = a3[14];
      v25 = v9 + v24 + 63;
      a1[60] = a3;
      a1[61] = 0x100000003;
      a1[62] = v24;
      *((_DWORD *)a1 + 126) = v9;
      v26 = 8 * v6;
      v27 = ((v25 | 0x38) + v26) & 0xFFFFFFFFFFFFFFC0;
      a1[64] = a3;
      a1[65] = 0x100000003;
      a1[66] = v25 & 0xFFFFFFFFFFFFFFC0;
      *((_DWORD *)a1 + 134) = v26;
      a3[14] = (v7 + v27 + 63) & 0xFFFFFFFFFFFFFFC0;
      a1[68] = a3;
      a1[69] = 0x100000003;
      a1[70] = v27;
      *((_DWORD *)a1 + 142) = v7;
    }
    result = objc_msgSend((id)a2, "buildAlgorithm");
    if (result == 1)
    {
      if (*(_QWORD *)(a2 + 24) <= 1uLL)
        v29 = 1;
      else
        v29 = *(_QWORD *)(a2 + 24);
      result = -[BVHDescriptor maxInnerNodeCount](a2);
      v30 = 24 * (result + v29);
      goto LABEL_11;
    }
    v32 = *(_QWORD *)(a2 + 24);
    v33 = ((v32 + 2047) >> 9) & 0x7FFFFC;
    v34 = (v32 + 2047) >> 11;
    v35 = (v34 << 10) + 1024;
    v36 = 4 * v32;
    v37 = 8 * v34;
  }
  else
  {
    result = objc_msgSend(0, "buildAlgorithm");
    if (result == 1)
    {
      v30 = 24;
LABEL_11:
      v31 = a3[14];
      a3[14] = (v31 + v30 + 63) & 0xFFFFFFFFFFFFFFC0;
      *a1 = a3;
      a1[1] = 0x100000003;
      a1[2] = v31;
      *((_DWORD *)a1 + 6) = v30;
      return result;
    }
    v37 = 0;
    v33 = 0;
    v36 = 0;
    v35 = 1024;
  }
  v38 = a3[14];
  v39 = v36 + v38 + 63;
  v40 = v39 & 0xFFFFFFFFFFFFFFC0;
  a1[4] = a3;
  a1[5] = 0x100000003;
  a1[6] = v38;
  *((_DWORD *)a1 + 14) = v36;
  if (a2)
    v41 = 4 * *(_QWORD *)(a2 + 24);
  else
    v41 = 0;
  a1[8] = a3;
  v42 = (v39 | 0x3C) + v41;
  v43 = v42 & 0xFFFFFFFFFFFFFFC0;
  a1[9] = 0x100000003;
  a1[10] = v40;
  *((_DWORD *)a1 + 22) = v41;
  if (a2)
    v44 = 4 * *(_QWORD *)(a2 + 24);
  else
    v44 = 0;
  a1[12] = a3;
  v45 = (v42 | 0x3C) + v44;
  v46 = v45 & 0xFFFFFFFFFFFFFFC0;
  a1[13] = 0x100000003;
  a1[14] = v43;
  *((_DWORD *)a1 + 30) = v44;
  if (a2)
    v47 = 4 * *(_QWORD *)(a2 + 24);
  else
    v47 = 0;
  v48 = ((v45 | 0x3C) + v47) & 0xFFFFFFFFFFFFFFC0;
  a1[16] = a3;
  a1[17] = 0x100000003;
  a1[18] = v46;
  *((_DWORD *)a1 + 38) = v47;
  v49 = (v48 + v35 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[20] = a3;
  a1[21] = 0x100000003;
  a1[22] = v48;
  *((_DWORD *)a1 + 46) = v35;
  v50 = (v49 + (v37 + 63)) & 0xFFFFFFFFFFFFFFC0;
  a1[24] = a3;
  a1[25] = 0x100000003;
  a1[26] = v49;
  *((_DWORD *)a1 + 54) = v37;
  LODWORD(v49) = 72 * (v33 | 1);
  v51 = (v50 + (v49 + 63)) & 0xFFFFFFFFFFFFFFC0;
  a1[28] = a3;
  a1[29] = 0x100000003;
  a1[30] = v50;
  *((_DWORD *)a1 + 62) = v49;
  v52 = (v51 + ((98304 * (v33 | 1)) | 0x3F)) & 0xFFFFFFFFFFFFFFC0;
  a1[32] = a3;
  a1[33] = 0x100000003;
  a1[34] = v51;
  *((_DWORD *)a1 + 70) = 98304 * (v33 | 1);
  v53 = 4 * v33;
  v54 = (v52 + v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[36] = a3;
  a1[37] = 0x100000003;
  a1[38] = v52;
  *((_DWORD *)a1 + 78) = 4 * v33;
  v55 = 24 * v33;
  v56 = (v55 + v54 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[40] = a3;
  a1[41] = 0x100000003;
  a1[42] = v54;
  *((_DWORD *)a1 + 86) = v55;
  a3[14] = (v56 + v53 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[44] = a3;
  a1[45] = 0x100000003;
  a1[46] = v56;
  *((_DWORD *)a1 + 94) = v53;
  return result;
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateTopDownScratch(_QWORD *a1, uint64_t a2, unint64_t a3, void *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BVHTopDownBuilder *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  _QWORD *v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;
  uint64_t v84;
  unint64_t v85;

  bzero(a1, 0x2B8uLL);
  if (a3)
  {
    v12 = *(_QWORD *)(a3 + 40);
    if (v12)
    {
      if (!*(_DWORD *)(a3 + 128) && *(_DWORD *)(a3 + 132) == 2)
      {
        v13 = *(_QWORD *)(a3 + 208);
        v14 = *(_QWORD *)(a3 + 216);
        v15 = 8 * *(_QWORD *)(a3 + 24);
        v16 = a5 + 7;
        v17 = 16 * v14 + 63;
        v18 = a5[1];
        v19 = ((v17 + a5[7]) & 0xFFFFFFFFFFFFFFC0) >= v18;
        v20 = ((v17 + a5[7]) & 0xFFFFFFFFFFFFFFC0) >= v18;
        v21 = a5[v20 + 7];
        v16[v20] = (v21 + v17) & 0xFFFFFFFFFFFFFFC0;
        *a1 = a5;
        *((_DWORD *)a1 + 2) = 0;
        *((_DWORD *)a1 + 3) = v19;
        a1[2] = v21;
        *((_DWORD *)a1 + 6) = 16 * v14;
        v22 = 4 * v14 + 63;
        v23 = ((a5[7] + v22) & 0xFFFFFFFFFFFFFFC0) >= v18;
        v24 = ((a5[7] + v22) & 0xFFFFFFFFFFFFFFC0) >= v18;
        v25 = a5[v24 + 7];
        v16[v24] = (v25 + v22) & 0xFFFFFFFFFFFFFFC0;
        a1[4] = a5;
        *((_DWORD *)a1 + 10) = 0;
        *((_DWORD *)a1 + 11) = v23;
        a1[6] = v25;
        *((_DWORD *)a1 + 14) = 4 * v14;
        v14 *= 36;
        v26 = ((a5[7] + v14 + 63) & 0xFFFFFFFFFFFFFFC0) >= v18;
        v27 = ((a5[7] + v14 + 63) & 0xFFFFFFFFFFFFFFC0) >= v18;
        v28 = a5[v27 + 7];
        v16[v27] = (v28 + v14 + 63) & 0xFFFFFFFFFFFFFFC0;
        a1[8] = a5;
        *((_DWORD *)a1 + 18) = 0;
        *((_DWORD *)a1 + 19) = v26;
        a1[10] = v28;
        *((_DWORD *)a1 + 22) = v14;
        v29 = a5[14];
        v30 = v15 + v29 + 63;
        a1[45] = a5;
        a1[46] = 0x100000003;
        a1[47] = v29;
        *((_DWORD *)a1 + 96) = v15;
        v31 = 8 * v12;
        v32 = ((v30 | 0x38) + v31) & 0xFFFFFFFFFFFFFFC0;
        a1[49] = a5;
        a1[50] = 0x100000003;
        a1[51] = v30 & 0xFFFFFFFFFFFFFFC0;
        *((_DWORD *)a1 + 104) = v31;
        a5[14] = (v13 + v32 + 63) & 0xFFFFFFFFFFFFFFC0;
        a1[53] = a5;
        a1[54] = 0x100000003;
        a1[55] = v32;
        *((_DWORD *)a1 + 112) = v13;
      }
    }
  }
  v33 = *(_QWORD *)(a2 + 808);
  v34 = (BVHTopDownBuilder *)atomic_load((unint64_t *)(v33 + 6816));
  if (!v34)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v33 + 6676));
    v34 = *(BVHTopDownBuilder **)(v33 + 6816);
    if (!v34)
    {
      v34 = -[BVHTopDownBuilder initWithDevice:]([BVHTopDownBuilder alloc], "initWithDevice:", a2);
      atomic_store((unint64_t)v34, (unint64_t *)(v33 + 6816));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 6676));
  }
  v35 = -[BVHDescriptor maxInnerNodeCount](a3);
  v36 = -[BVHDescriptor maxLeafNodeCount](a3);
  if (v35 <= 1)
    v37 = 1;
  else
    v37 = v35;
  v38 = -[BVHTopDownBuilder getBuildScratchBufferSizeForDescriptor:](v34, "getBuildScratchBufferSizeForDescriptor:", a3);
  v39 = a5[1];
  v40 = ((v38 + 63 + a5[9]) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v41 = 8 * (((v38 + 63 + a5[9]) & 0xFFFFFFFFFFFFFFC0) >= v39);
  v42 = *(_QWORD *)((char *)a5 + v41 + 72);
  *(_QWORD *)((char *)a5 + v41 + 72) = (v42 + v38 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[12] = a5;
  *((_DWORD *)a1 + 26) = 1;
  *((_DWORD *)a1 + 27) = v40;
  a1[14] = v42;
  *((_DWORD *)a1 + 30) = v38;
  *((_DWORD *)a1 + 40) = v37;
  v43 = a5 + 11;
  v44 = ((4 * v37) & 0x3FFFFFFFCLL) + 63;
  LODWORD(v41) = ((a5[11] + v44) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v45 = ((a5[11] + v44) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v46 = a5[v45 + 11];
  v43[v45] = (v46 + v44) & 0xFFFFFFFFFFFFFFC0;
  a1[16] = a5;
  *((_DWORD *)a1 + 34) = 2;
  *((_DWORD *)a1 + 35) = v41;
  a1[18] = v46;
  LODWORD(v41) = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v47 = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v48 = a5[v47 + 11];
  *((_DWORD *)a1 + 38) = 4 * v37;
  v43[v47] = (v48 + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[21] = a5;
  *((_DWORD *)a1 + 44) = 2;
  *((_DWORD *)a1 + 45) = v41;
  a1[23] = v48;
  *((_DWORD *)a1 + 48) = 4 * v37;
  LODWORD(v41) = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v49 = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v50 = a5[v49 + 11];
  v43[v49] = (v50 + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[25] = a5;
  *((_DWORD *)a1 + 52) = 2;
  *((_DWORD *)a1 + 53) = v41;
  a1[27] = v50;
  *((_DWORD *)a1 + 56) = 4 * v37;
  v51 = (v37 + 4095) & 0xFFFFFFFFFFFFF000;
  if (v51 <= 0x1000)
  {
    v54 = 0;
  }
  else
  {
    v52 = 0;
    do
    {
      v52 += (((v51 + 4095) >> 12) + 4095) & 0x1FFFFFFFFFF000;
      v53 = v51 > 0x1000000;
      v51 = (v51 + 4095) >> 12;
    }
    while (v53);
    v54 = 4 * v52;
  }
  v55 = a5 + 11;
  v56 = ((a5[11] + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v57 = ((a5[11] + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v58 = a5[v57 + 11];
  v55[v57] = (v58 + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0;
  a1[29] = a5;
  *((_DWORD *)a1 + 60) = 2;
  *((_DWORD *)a1 + 61) = v56;
  a1[31] = v58;
  *((_DWORD *)a1 + 64) = v54;
  v59 = ((a5[11] + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0) >= v39;
  v60 = v59;
  v61 = a5[v60 + 11];
  v55[v60] = (v61 + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0;
  a1[33] = a5;
  *((_DWORD *)a1 + 68) = 2;
  *((_DWORD *)a1 + 69) = v59;
  a1[35] = v61;
  *((_DWORD *)a1 + 72) = v54;
  v62 = a6 + 7;
  if ((unint64_t)(a6 + 7) >> 35)
    v63 = 8;
  else
    v63 = 4;
  if ((unint64_t)(a6 + 7) >> 27)
    v64 = v63;
  else
    v64 = 3;
  if (v62 >= 0x80000)
    v65 = v64;
  else
    v65 = 2;
  if (v62 >= 0x800)
    v66 = v65;
  else
    v66 = 1;
  *((_DWORD *)a1 + 122) = v66;
  v67 = (v36 + v35) * v66;
  v68 = a5[14];
  v69 = (v67 + v68 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[57] = a5;
  a1[58] = 0x100000003;
  a1[59] = v68;
  *((_DWORD *)a1 + 120) = v67;
  v70 = (4 * v35 + v69 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[62] = a5;
  a1[63] = 0x100000003;
  a1[64] = v69;
  *((_DWORD *)a1 + 130) = 4 * v35;
  v71 = (4 * v36 + v70 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[66] = a5;
  a1[67] = 0x100000003;
  a1[68] = v70;
  *((_DWORD *)a1 + 138) = 4 * v36;
  a5[14] = (v71 + 95) & 0xFFFFFFFFFFFFFFC0;
  a1[79] = a5;
  a1[80] = 0x100000003;
  a1[81] = v71;
  *((_DWORD *)a1 + 164) = 32;
  if (a3 && (objc_msgSend(*(id *)(a3 + 48), "usage") & 1) != 0)
  {
    v72 = a5[14];
    v73 = v72 + 335;
    v74 = (v72 + 335) & 0xFFFFFFFFFFFFFFC0;
    a5[14] = v74;
    a1[70] = a5;
    a1[71] = 0x100000003;
    a1[72] = v72;
    *((_DWORD *)a1 + 146) = 272;
    v75 = a6 + 63;
    if ((unint64_t)(a6 + 63) >= 0x4000)
    {
      if (v75 >= 0x400000)
      {
        if (v75 >> 30)
        {
          if (v75 >> 38)
            v76 = 8;
          else
            v76 = 4;
        }
        else
        {
          v76 = 3;
        }
      }
      else
      {
        v76 = 2;
      }
    }
    else
    {
      v76 = 1;
    }
    *((_DWORD *)a1 + 156) = v76;
    v77 = (v35 * v76 + 7) & 0xFFFFFFFFFFFFFFF8;
    a5[14] = ((v73 | 0x38) + v77) & 0xFFFFFFFFFFFFFFC0;
    a1[74] = a5;
    a1[75] = 0x100000003;
    a1[76] = v74;
    *((_DWORD *)a1 + 154) = v77;
  }
  if (objc_msgSend(a4, "isInstanceDescriptor"))
  {
    v78 = (void *)objc_opt_class();
    LODWORD(v78) = objc_msgSend(v78, "isSubclassOfClass:", objc_opt_class());
    v79 = objc_msgSend(a4, "instanceDescriptorType");
    if ((_DWORD)v78)
    {
      if (v79 == 2 || objc_msgSend(a4, "instanceDescriptorType") == 4)
        v80 = 56;
      else
        v80 = 24;
      v81 = objc_msgSend(a4, "maxInstanceCount");
    }
    else
    {
      if (v79 == 2 || objc_msgSend(a4, "instanceDescriptorType") == 4)
        v80 = 56;
      else
        v80 = 24;
      v81 = objc_msgSend(a4, "instanceCount");
    }
    v82 = a5[14];
    a5[14] = (v81 * v80 + v82 + 63) & 0xFFFFFFFFFFFFFFC0;
    a1[37] = a5;
    a1[38] = 0x100000003;
    a1[39] = v82;
    *((_DWORD *)a1 + 80) = v81 * v80;
  }
  result = -[BVHTopDownBuilder getGenericBVHSizeForDescriptor:](v34, "getGenericBVHSizeForDescriptor:", a3);
  v84 = a5[14];
  a1[41] = a5;
  v85 = (result + v84 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[42] = 0x100000003;
  a1[43] = v84;
  *((_DWORD *)a1 + 88) = result;
  a5[14] = (v85 + 87) & 0xFFFFFFFFFFFFFFC0;
  a1[83] = a5;
  a1[84] = 0x100000003;
  a1[85] = v85;
  *((_DWORD *)a1 + 172) = 24;
  return result;
}

void sub_232CE8268(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildAndEncodeRiaBvh(id *a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  void *v14;
  uint64_t v15;
  size_t v16;
  char v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;
  int v26;
  unsigned int v27;
  int v28;
  unint64_t Pipeline;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  unsigned __int8 v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  void *v129;
  _QWORD *v130;
  uint64_t v131;
  void *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  BOOL v138;
  _DWORD *v139;
  int64x2_t v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  char *v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  void *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  _DWORD *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  _BYTE *v227;
  _BYTE *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t i;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  _DWORD *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  _BOOL4 v277;
  unint64_t v278;
  _BYTE *v279;
  _BYTE *v280;
  void *v281;
  int v282;
  uint64_t v283;
  int v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  void *v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  unsigned int v297;
  int v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  int *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  void *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  unint64_t v357;
  void *v358;
  int v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  _DWORD *v369;
  _DWORD *v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  int v383;
  _BOOL4 v384;
  int v385;
  int v386;
  unsigned int v387;
  int v388;
  int v389;
  int v390;
  unint64_t v391;
  unsigned int v392;
  unsigned int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  unint64_t v398;
  int v399;
  unsigned __int8 v400;
  char v401;
  BOOL v402;
  int v403;
  int v404;
  BOOL v405;
  int v406;
  int v407;
  int v408;
  char v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  int v414;
  int v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  _DWORD *v419;
  char *v420;
  char *v421;
  int v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  _DWORD *v426;
  unsigned int v427;
  unsigned __int8 v428;
  BOOL v429;
  BOOL v430;
  char v431;
  unint64_t v432;
  char v433;
  char v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unsigned int v489;
  unint64_t v490;
  uint64_t v491;
  unsigned int v492;
  double v493;
  unint64_t v494;
  float v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int v530;
  int v531;
  int v532;
  int v533;
  BOOL v534;
  int v535;
  int v536;
  unint64_t v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  unsigned __int8 v550;
  unsigned __int8 v551;
  unsigned __int8 v552;
  unsigned __int8 v553;
  unsigned __int8 v554;
  unsigned __int8 v555;
  unint64_t v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  int v569;
  unint64_t v570;
  uint64_t v571;
  unsigned int v572;
  uint64_t v573;
  int v574;
  unsigned __int8 v575;
  unsigned int v576;
  void *v577;
  char v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  int v584;
  void *v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  char v598;
  char v599;
  void *v600;
  int v601;
  uint64_t v602;
  void *v603;
  uint64_t v604;
  void *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  char *v611;
  MTLAttributeFormat v612;
  char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  char *v618;
  MTLAttributeFormat v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t j;
  uint64_t v623;
  void *v624;
  unint64_t v625;
  uint64_t v626;
  char *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  char *v632;
  int v633;
  MTLAttributeFormat v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  char *v640;
  MTLAttributeFormat v641;
  uint64_t v642;
  uint64_t v643;
  unsigned __int8 v644;
  uint64_t v645;
  uint64_t v646;
  char *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  void *v651;
  _QWORD *v652;
  uint64_t v653;
  uint64_t v654;
  _QWORD *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  void *v660;
  void *v661;
  unsigned int v662;
  unint64_t v663;
  unsigned int v664;
  unsigned int v665;
  int v666;
  char *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  char *v672;
  int v673;
  uint64_t v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  char *v687;
  uint64_t v688;
  uint64_t v689;
  char *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  char *v698;
  uint64_t v699;
  uint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  uint64_t v703;
  _QWORD *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  void *v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  unsigned __int8 v718;
  unsigned int v719;
  int v720;
  int v721;
  char v722;
  int v723;
  uint64_t v724;
  uint64_t v725;
  _QWORD *v726;
  uint64_t v727;
  uint64_t v728;
  _BYTE *v729;
  uint64_t v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  __int128 v734;
  uint64_t v735;
  uint64_t v736;
  int v737;
  BOOL v738;
  int v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  void *v745;
  char v746;
  void *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  int v751;
  uint64_t v753;
  uint64_t v754;
  int v755;
  int v756;
  _QWORD *v757;
  _QWORD *v758;
  uint64_t v759;
  int v760;
  char *v761;
  char *v762;
  uint64_t v763;
  int v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  void *v768;
  void *v769;
  void *v770;
  uint64_t v771;
  char *v772;
  uint64_t v773;
  int v774;
  _BYTE *v775;
  uint64_t v776;
  void *v777;
  uint64_t v778;
  unsigned int v779;
  int64x2_t v780;
  unint64_t v781;
  unsigned int v783;
  uint64_t v784;
  _QWORD v785[5];
  __int128 v786;
  uint64_t v787;
  void *v788[2];
  __int128 v789;
  __int128 v790;
  uint64_t v791;
  int64x2_t v792;
  uint64_t v793;
  __int128 v794;
  uint64_t v795;
  uint64_t v796;
  int64x2_t v797;
  __int128 v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  uint64_t v807;
  uint64_t v808;
  int64x2_t v809;
  uint64_t v810;
  uint64_t v811;
  int64x2_t v812;
  uint64_t v813;
  char *v814;
  char *v815;
  _QWORD *v816;
  uint64_t v817;
  uint64_t v818;
  unsigned int v819;
  void *v820;
  int64x2_t v821;
  uint64_t v822;
  _BYTE v823[52];
  __int128 v824;
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  __int16 v831;
  int v832;
  char v833;
  __int128 v834;
  _BYTE v835[31];
  __int128 v836;
  _OWORD v837[4];
  int v838;
  __int128 v839;
  __int128 v840;
  int v841;
  uint64_t v842;
  int v843;
  uint64_t v844;
  int v845;
  uint64_t v846;
  int v847;
  uint64_t v848;
  int v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  uint64_t v854;
  uint64_t v855;
  __int16 v856;
  uint64_t v857;
  __int16 v858;
  uint64_t v859;
  __int16 v860;
  uint64_t v861;
  __int16 v862;
  uint64_t v863;

  v863 = *MEMORY[0x24BDAC8D0];
  v773 = objc_msgSend(a5, "accelerationStructureUniqueIdentifier");
  v14 = (void *)objc_msgSend(a5, "buffer");
  v777 = a5;
  objc_msgSend(a5, "bufferOffset");
  objc_msgSend(v14, "contents");
  objc_msgSend(v14, "gpuAddress");
  objc_msgSend(v14, "length");
  objc_msgSend(a1[1], "useResource:usage:", v14, 2);
  objc_msgSend(a7, "contents");
  objc_msgSend(a7, "gpuAddress");
  objc_msgSend(a7, "length");
  v784 = (uint64_t)a1;
  objc_msgSend(a1[1], "useResource:usage:", a7, 2);
  *(_OWORD *)v788 = 0u;
  v789 = 0u;
  v767 = a2;
  if (a2)
  {
    v15 = *(_QWORD *)(a2 + 40);
    if (v15 && !*(_DWORD *)(a2 + 128) && *(_DWORD *)(a2 + 132) == 2)
    {
      v16 = 4 * v15;
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v788, (uint64_t)a1, 4 * v15, 1);
      bzero(v788[1], v16);
      LODWORD(a2) = 1;
      v770 = v788[0];
      goto LABEL_8;
    }
    LODWORD(a2) = 0;
  }
  v770 = 0;
LABEL_8:
  v17 = objc_msgSend((id)v767, "buildAlgorithm");
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
  {
    if (v767)
    {
      objc_msgSend(a6, "isInstanceDescriptor");
      objc_msgSend(*(id *)(v767 + 48), "usage");
      objc_msgSend(*(id *)(v767 + 48), "usage");
      objc_msgSend(*(id *)(v767 + 48), "usage");
      if ((v18 & 1) == 0
      {
        -[BVHDescriptor isDeterministic]::forceDeterministic = 0;
      }
      if (!-[BVHDescriptor isDeterministic]::forceDeterministic)
        objc_msgSend(*(id *)(v767 + 48), "usage");
    }
    else
    {
      objc_msgSend(a6, "isInstanceDescriptor");
    }
    IOGPUDeviceTraceEvent();
  }
  if (v17 != 2)
  {
    if (v17 == 1)
    {
      v19 = objc_msgSend(v777, "buffer");
      v20 = objc_msgSend(v777, "bufferOffset");
      *(_QWORD *)(a3 + 32) = a7;
      *(_QWORD *)(a3 + 40) = v20;
      *(_QWORD *)(a3 + 48) = (a8 + 63) & 0xFFFFFFFFFFFFFFC0;
      v21 = *(_QWORD *)(a3 + 64);
      if (v21 <= *(_QWORD *)(a3 + 80))
        v21 = *(_QWORD *)(a3 + 80);
      if (v21 <= *(_QWORD *)(a3 + 96))
        v21 = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a3 + 16) = (v21 + 63) & 0xFFFFFFFFFFFFFFC0;
      *(_QWORD *)(a3 + 24) = v19;
      *(_BYTE *)a3 = 1;
      v22 = (void *)objc_msgSend(v777, "buffer");
      v23 = objc_msgSend(v777, "bufferOffset");
      v24 = objc_msgSend(a6, "isInstanceDescriptor");
      if ((v25 & 1) == 0
      {
        AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      }
      v26 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::kBvhVersions[AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride & ~(AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride >> 31)];
      if (v24)
        v27 = 0x80000000;
      else
        v27 = 0;
      if ((_DWORD)a2)
        v28 = 0x20000000;
      else
        v28 = 0;
      v778 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
      Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 67, 0);
      v816 = 0;
      v815 = 0;
      v817 = 0;
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calcAccelerationStructureSizes((unint64_t *)&v815, *(_QWORD *)v784, a6, (void *)v767);
      objc_msgSend(v22, "contents");
      v30 = objc_msgSend(v22, "gpuAddress");
      objc_msgSend(v22, "length");
      objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v22, 2);
      v31 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
      v32 = v31[20];
      v33 = v32 + 95;
      if ((unint64_t)(v32 + 95) > v31[19])
      {
        v541 = AGX::DataBufferAllocator<34ul>::growNoInline(v31 + 2, 3, 0);
        v32 = v31[20];
        if (!v541)
          goto LABEL_29;
        v33 = v32 + 95;
        if ((unint64_t)(v32 + 95) > v31[19])
          abort();
      }
      v31[21] = v33;
LABEL_29:
      v34 = (v27 | v28) & 0xE0000000 | v26 & 0x1FFFFFFF;
      v35 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
      v36 = v31[22];
      v31[20] = v35 + 80;
      *(_DWORD *)v35 = 0;
      *(_WORD *)(v35 + 16) = 0;
      v37 = (uint64_t)v815;
      *(_QWORD *)(v35 + 24) = v30 + v23;
      *(_QWORD *)(v35 + 32) = v37;
      v39 = v35 + v36;
      if (*(_DWORD *)(a4 + 8) == 3)
        v40 = *(_QWORD *)(*(_QWORD *)a4 + 16);
      else
        v40 = 0;
      v38 = *(_QWORD *)a4 + 8 * *(int *)(a4 + 12);
      v66 = v40
          + *(_QWORD *)(v38 + 40)
          + *(_QWORD *)(a4 + 16)
          + *(_QWORD *)(*(_QWORD *)(v38 + 24) + (int)*MEMORY[0x24BE51650] + 8);
      v67 = *(unsigned int *)(a4 + 24);
      *(_QWORD *)(v35 + 40) = v66;
      *(_QWORD *)(v35 + 48) = v67;
      *(_QWORD *)(v35 + 56) = 0;
      *(_WORD *)(v35 + 64) = 0;
      *(_QWORD *)v823 = v773;
      *(_DWORD *)&v823[8] = v34;
      v826 = 0;
      v827 = 0;
      v828 = 0;
      v829 = 0;
      v830 = 0;
      v831 = 0;
      v832 = 0;
      v833 = 0;
      *(_QWORD *)&v823[20] = 0;
      *(_QWORD *)&v823[26] = 0;
      *(_QWORD *)&v823[12] = 0;
      *(_OWORD *)&v823[36] = 0u;
      v824 = 0u;
      v825 = 0;
      v834 = 0u;
      memset(v835, 0, sizeof(v835));
      v836 = *(_OWORD *)(v35 + 24);
      v842 = 0;
      v843 = 0;
      v844 = 0;
      v845 = 0;
      v846 = 0;
      v847 = 0;
      v848 = 0;
      v849 = 0;
      memset(v837, 0, sizeof(v837));
      v838 = 0;
      v839 = 0u;
      v840 = 0u;
      v841 = 0;
      v850 = 0u;
      v851 = 0u;
      v852 = 0u;
      v853 = 0u;
      v854 = 0;
      v855 = v39;
      v856 = 1;
      v857 = 0;
      v858 = 0;
      v859 = 0;
      v860 = 0;
      v861 = 0;
      v862 = 0;
      if ((v68 & 1) == 0
      {
        if (shouldDumpOrVerifyBVHs(void)::once != -1)
          dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_492);
        AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildSmallBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify = 0;
      }
      if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildSmallBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        v69 = v784;
        v70 = (void *)objc_msgSend(*(id *)v784, "newBufferWithLength:options:", 18874760, 0);
        v71 = (_QWORD *)objc_msgSend(v70, "contents");
        v72 = objc_msgSend(v70, "gpuAddress");
        MTLResourceListAddResource();
        IOGPUResourceListAddResource();

        bzero(v71, 0x1200188uLL);
        v71[1] = -1;
      }
      else
      {
        v72 = 0;
        v71 = 0;
        v69 = v784;
      }
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setSmallBVHBuildParams(&v820, v69, a6, v767, (uint64_t)v823, a4, (uint64_t)v788[0]);
      *(_QWORD *)(v35 + 8) = *(_QWORD *)&v823[20];
      *(_WORD *)(v35 + 4) = *(_WORD *)&v823[16];
      if (v767 && *(_QWORD *)(v767 + 40) && !*(_DWORD *)(v767 + 128) && *(_DWORD *)(v767 + 132) == 2)
      {
        v173 = objc_msgSend(*(id *)(v767 + 48), "usage");
        AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTrianglePairingForBvh<AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo>(v784, v767, v821.i64[0], v173 & 1, v788, a4);
      }
      if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildSmallBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        v812 = (int64x2_t)(unint64_t)v72;
        objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v812, 16, 4);
        v174 = **(void ***)(*(_QWORD *)(v784 + 8) + 88);
        *(_QWORD *)&v802 = MEMORY[0x24BDAC760];
        *((_QWORD *)&v802 + 1) = 3221225472;
        *(_QWORD *)&v803 = ___ZN3AGX24RayTracingGPUBuilderGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE19encodeBuildSmallBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXA10FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke;
        *((_QWORD *)&v803 + 1) = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
        *(_QWORD *)&v804 = v71;
        objc_msgSend(v174, "addCompletedHandler:", &v802);
      }
      objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", v823, 512, 7);
      v812 = vdupq_n_s64(1uLL);
      v813 = 1;
      v809 = (int64x2_t)xmmword_232D73BB0;
      v810 = 1;
      AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(v778, Pipeline, (__int128 *)v812.i8, (__int128 *)v809.i8);
      goto LABEL_755;
    }
    v774 = a2;
    if ((v62 & 1) == 0
    {
      if (shouldDumpOrVerifyBVHs(void)::once != -1)
        dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_492);
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildAndEncodeRiaBvh(BVHDescriptor const*,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::ScratchAllocator *,void const*,unsigned long long,unsigned long long,AGXA10FamilyRayTracingAccelerationStructure *,MTLAccelerationStructureDescriptor *,AGXA10FamilyBuffer *,unsigned long)::verify = 0;
    }
    if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildAndEncodeRiaBvh(BVHDescriptor const*,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::ScratchAllocator *,void const*,unsigned long long,unsigned long long,AGXA10FamilyRayTracingAccelerationStructure *,MTLAccelerationStructureDescriptor *,AGXA10FamilyBuffer *,unsigned long)::verify)
    {
      v63 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", 18874760, 0);
      v64 = (_QWORD *)objc_msgSend(v63, "contents");
      v65 = objc_msgSend(v63, "gpuAddress");
      MTLResourceListAddResource();
      IOGPUResourceListAddResource();

      bzero(v64, 0x1200188uLL);
      v726 = v64;
      v64[1] = -1;
      *(_QWORD *)&v823[8] = 51;
      v742 = v65;
      *(_QWORD *)v823 = v65;
      objc_msgSend(a1[1], "setBytes:length:atIndex:", v823, 16, 4);
    }
    else
    {
      v742 = 0;
      v726 = 0;
    }
    v144 = objc_msgSend(v777, "buffer");
    v145 = objc_msgSend(v777, "bufferOffset");
    *(_QWORD *)(a3 + 32) = a7;
    *(_QWORD *)(a3 + 40) = v145;
    *(_QWORD *)(a3 + 48) = (a8 + 63) & 0xFFFFFFFFFFFFFFC0;
    v146 = *(_QWORD *)(a3 + 64);
    if (v146 <= *(_QWORD *)(a3 + 80))
      v146 = *(_QWORD *)(a3 + 80);
    if (v146 <= *(_QWORD *)(a3 + 96))
      v146 = *(_QWORD *)(a3 + 96);
    *(_QWORD *)(a3 + 16) = (v146 + 63) & 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(a3 + 24) = v144;
    *(_BYTE *)a3 = 1;
    v147 = *(_QWORD *)(a4 + 664);
    v148 = v147 + 8 * *(int *)(a4 + 676);
    if (*(_DWORD *)(a4 + 672) == 3)
      v149 = *(_QWORD *)(v147 + 16);
    else
      v149 = 0;
    v150 = *(_QWORD *)(v148 + 24);
    v151 = *(_QWORD *)(v148 + 40);
    v152 = *(_QWORD *)(a4 + 680);
    v153 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
    v154 = *(_QWORD *)(v153 + 160);
    v155 = v154 + 31;
    if ((unint64_t)(v154 + 31) > *(_QWORD *)(v153 + 152))
    {
      v542 = AGX::DataBufferAllocator<34ul>::growNoInline(v153 + 16, 3, 0);
      v154 = *(_QWORD *)(v153 + 160);
      if (!v542)
      {
LABEL_124:
        v156 = (_QWORD *)((v154 + 15) & 0xFFFFFFFFFFFFFFF0);
        v157 = (char *)v156 + *(_QWORD *)(v153 + 176);
        v158 = (int *)MEMORY[0x24BE51650];
        v159 = (int)*MEMORY[0x24BE51650];
        *v156 = 6;
        *(_QWORD *)(v153 + 160) = v156 + 2;
        v160 = *(_QWORD *)(*(_QWORD *)(v153 + 40) + 224) + v159;
        *(_QWORD *)(v153 + 6056) = v157;
        v161 = *(_QWORD *)(v153 + 1792);
        *(_QWORD *)(v161 + 536) = v157;
        *(_QWORD *)(v153 + 5280) = v160;
        *(_QWORD *)(v153 + 7136) |= 1uLL;
        LODWORD(v160) = *(_DWORD *)(v153 + 7152) | 1;
        *(_DWORD *)(v153 + 7152) = v160;
        v162 = v150 + *v158;
        v163 = *(_QWORD *)(v162 + 8) + v151 + v149 + v152;
        *(_QWORD *)(v153 + 6064) = v163;
        *(_QWORD *)(v161 + 544) = v163;
        *(_QWORD *)(v153 + 5288) = v162;
        *(_QWORD *)(v153 + 7136) |= 2uLL;
        *(_DWORD *)(v153 + 7152) = v160;
        v164 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 104, 0);
        v165 = *(_QWORD *)(v153 + 1776);
        *(_QWORD *)(v153 + 1776) = v164;
        v166 = *(_QWORD *)(v164 + 16);
        *(_BYTE *)(v153 + 1745) = *(_BYTE *)(v166 + 216);
        *(_BYTE *)(v153 + 1746) = *(_BYTE *)(v166 + 1992);
        if (*(_DWORD *)(v153 + 1736) == 1)
        {
          if (!*(_BYTE *)(v153 + 7672))
          {
            AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v153 + 1624), (_QWORD *)(v153 + 16));
            v190 = *(_DWORD *)(v153 + 7316);
            if (*(_DWORD *)(v153 + 7312) < v190)
              *(_DWORD *)(v153 + 7312) = v190;
            *(_DWORD *)(v153 + 7316) = 0;
            if (!v165)
            {
LABEL_130:
              if (!objc_msgSend(a6, "isInstanceDescriptor"))
                goto LABEL_231;
              v169 = *(_QWORD *)(a4 + 296);
              v170 = v169 + 8 * *(int *)(a4 + 308);
              v171 = *(char **)(v170 + 24);
              if (*(_DWORD *)(a4 + 304) == 3)
                v172 = *(_QWORD *)(v169 + 16);
              else
                v172 = 0;
              v175 = *(_QWORD *)(v170 + 40);
              v176 = *(_QWORD *)(a4 + 312);
              objc_msgSend(v171, "contents");
              v177 = objc_msgSend(v171, "gpuAddress");
              objc_msgSend(v171, "length");
              v178 = (int)*MEMORY[0x24BE51650];
              MTLResourceListAddResource();
              v179 = &v171[v178];
              IOGPUResourceListAddResource();
              v180 = (void *)objc_opt_class();
              v181 = v177 + v175 + v172 + v176;
              if (objc_msgSend(v180, "isSubclassOfClass:", objc_opt_class()))
              {
                v182 = objc_msgSend(a6, "maxInstanceCount");
                if (v182)
                {
                  v183 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                  switch(objc_msgSend(a6, "instanceDescriptorType"))
                  {
                    case 0:
                      v184 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 15, 0);
                      v185 = objc_msgSend(a6, "motionTransformType");
                      goto LABEL_166;
                    case 1:
                      v184 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 16, 0);
                      v185 = objc_msgSend(a6, "motionTransformType");
                      goto LABEL_166;
                    case 2:
                      if (objc_msgSend(a6, "motionTransformType") == 1)
                        v191 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 20, 0);
                      else
                        v191 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 18, 0);
                      goto LABEL_174;
                    case 3:
                      v184 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 17, 0);
                      v185 = objc_msgSend(a6, "motionTransformType");
LABEL_166:
                      if (v185)
                        fwrite("AGX: Motion transform type is not respected for this leaf type\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
                      goto LABEL_175;
                    case 4:
                      if (objc_msgSend(a6, "motionTransformType") == 1)
                        v191 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 21, 0);
                      else
                        v191 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 19, 0);
LABEL_174:
                      v184 = v191;
LABEL_175:
                      v193 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                      v194 = v193[20];
                      v195 = v194 + 31;
                      if ((unint64_t)(v194 + 31) <= v193[19])
                        goto LABEL_176;
                      v544 = AGX::DataBufferAllocator<34ul>::growNoInline(v193 + 2, 3, 0);
                      v194 = v193[20];
                      if (v544)
                      {
                        v195 = v194 + 31;
                        if ((unint64_t)(v194 + 31) > v193[19])
                          abort();
LABEL_176:
                        v193[21] = v195;
                      }
                      v197 = v193[22];
                      v198 = (int)*MEMORY[0x24BE51650];
                      v196 = (v194 + 15) & 0xFFFFFFFFFFFFFFF0;
                      *(_DWORD *)v196 = v182;
                      v193[20] = v196 + 16;
                      v199 = *(_QWORD *)(v193[5] + 224);
                      *(_DWORD *)(v196 + 4) = objc_msgSend(a6, "instanceDescriptorStride");
                      *(_BYTE *)(v196 + 8) = objc_msgSend(a6, "instanceTransformationMatrixLayout") == 1;
                      v200 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                      *(_QWORD *)(v200 + 6056) = v196 + v197;
                      *(_QWORD *)(*(_QWORD *)(v200 + 1792) + 536) = v196 + v197;
                      *(_QWORD *)(v200 + 5280) = v199 + v198;
                      *(_QWORD *)(v200 + 7136) |= 1uLL;
                      *(_DWORD *)(v200 + 7152) |= 1u;
                      v201 = (char *)objc_msgSend(a6, "instanceDescriptorBuffer");
                      v202 = objc_msgSend(a6, "instanceDescriptorBufferOffset");
                      objc_msgSend(v201, "contents");
                      v203 = objc_msgSend(v201, "gpuAddress");
                      objc_msgSend(v201, "length");
                      v204 = (int)*MEMORY[0x24BE51650];
                      objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v201, 1);
                      v205 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                      *(_QWORD *)(v205 + 6064) = v203 + v202;
                      *(_QWORD *)(*(_QWORD *)(v205 + 1792) + 544) = v203 + v202;
                      *(_QWORD *)(v205 + 5288) = &v201[v204];
                      *(_QWORD *)(v205 + 7136) |= 2uLL;
                      *(_DWORD *)(v205 + 7152) |= 1u;
                      if (objc_msgSend(a6, "instanceDescriptorType") == 2
                        || objc_msgSend(a6, "instanceDescriptorType") == 4)
                      {
                        v206 = (char *)objc_msgSend(a6, "motionTransformBuffer");
                        v207 = objc_msgSend(a6, "motionTransformBufferOffset");
                        objc_msgSend(v206, "contents");
                        v208 = objc_msgSend(v206, "gpuAddress");
                        objc_msgSend(v206, "length");
                        v209 = (int)*MEMORY[0x24BE51650];
                        objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v206, 1);
                        v210 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                        *(_QWORD *)(v210 + 6080) = v208 + v207;
                        *(_QWORD *)(*(_QWORD *)(v210 + 1792) + 560) = v208 + v207;
                        *(_QWORD *)(v210 + 5304) = &v206[v209];
                        *(_QWORD *)(v210 + 7136) |= 8uLL;
                        *(_DWORD *)(v210 + 7152) |= 1u;
                        v211 = objc_msgSend(a6, "motionTransformStride");
                        if (objc_msgSend(a6, "motionTransformType"))
                          v212 = 64;
                        else
                          v212 = 48;
                        if (!v211)
                          LODWORD(v211) = v212;
                        v213 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                        v214 = v213[20];
                        v215 = v214 + 31;
                        if ((unint64_t)(v214 + 31) > v213[19])
                        {
                          v547 = AGX::DataBufferAllocator<34ul>::growNoInline(v213 + 2, 3, 0);
                          v214 = v213[20];
                          if (!v547)
                            goto LABEL_186;
                          v215 = v214 + 31;
                          if ((unint64_t)(v214 + 31) > v213[19])
                            abort();
                        }
                        v213[21] = v215;
LABEL_186:
                        v216 = (_DWORD *)((v214 + 15) & 0xFFFFFFFFFFFFFFF0);
                        v217 = (char *)v216 + v213[22];
                        v218 = (int)*MEMORY[0x24BE51650];
                        *v216 = v211;
                        v213[20] = v216 + 4;
                        v219 = *(_QWORD *)(v213[5] + 224) + v218;
                        v220 = v784;
                        v221 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                        *(_QWORD *)(v221 + 6088) = v217;
                        *(_QWORD *)(*(_QWORD *)(v221 + 1792) + 568) = v217;
                        *(_QWORD *)(v221 + 5312) = v219;
                        *(_QWORD *)(v221 + 7136) |= 0x10uLL;
                        *(_DWORD *)(v221 + 7152) |= 1u;
                        goto LABEL_188;
                      }
                      v220 = v784;
LABEL_188:
                      v222 = *(_QWORD *)(*(_QWORD *)(v220 + 8) + 88);
                      *(_QWORD *)(v222 + 6096) = v181;
                      *(_QWORD *)(*(_QWORD *)(v222 + 1792) + 576) = v181;
                      *(_QWORD *)(v222 + 5320) = v179;
                      *(_QWORD *)(v222 + 7136) |= 0x20uLL;
                      *(_DWORD *)(v222 + 7152) |= 1u;
                      objc_msgSend(a6, "maxInstanceCount");
                      v223 = *(_QWORD *)(v183 + 1776);
                      *(_QWORD *)(v183 + 1776) = v184;
                      v224 = *(_QWORD *)(v184 + 16);
                      *(_BYTE *)(v183 + 1745) = *(_BYTE *)(v224 + 216);
                      *(_BYTE *)(v183 + 1746) = *(_BYTE *)(v224 + 1992);
                      if (*(_DWORD *)(v183 + 1736) == 1)
                      {
                        if (*(_BYTE *)(v183 + 7672))
                        {
                          v225 = *(_QWORD *)(v183 + 7688);
                          if (*(_QWORD *)(v183 + 7680) != v225)
                          {
                            *(_BYTE *)(v225 - 8) = 1;
                            *(_BYTE *)(v225 - 7) = *(_BYTE *)(*(_QWORD *)(v183 + 1768) + 458);
                          }
                        }
                        else
                        {
                          AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v183 + 1624), (_QWORD *)(v183 + 16));
                          v226 = *(_DWORD *)(v183 + 7316);
                          if (*(_DWORD *)(v183 + 7312) < v226)
                            *(_DWORD *)(v183 + 7312) = v226;
                          *(_DWORD *)(v183 + 7316) = 0;
                        }
                      }
                      if (!v223)
                        goto LABEL_231;
                      v227 = (_BYTE *)(v183 + 1745);
                      v228 = (_BYTE *)(v183 + 1746);
                      *(_QWORD *)(v183 + 1776) = v223;
                      break;
                    default:
                      goto LABEL_231;
                  }
                  goto LABEL_230;
                }
                goto LABEL_231;
              }
              v186 = objc_msgSend(a6, "instanceCount");
              if (!v186)
                goto LABEL_231;
              v187 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
              switch(objc_msgSend(a6, "instanceDescriptorType"))
              {
                case 0:
                  v188 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 15, 0);
                  v189 = objc_msgSend(a6, "motionTransformType");
                  goto LABEL_169;
                case 1:
                  v188 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 16, 0);
                  v189 = objc_msgSend(a6, "motionTransformType");
                  goto LABEL_169;
                case 2:
                  if (objc_msgSend(a6, "motionTransformType") == 1)
                    v192 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 20, 0);
                  else
                    v192 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 18, 0);
                  goto LABEL_198;
                case 3:
                  v188 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 17, 0);
                  v189 = objc_msgSend(a6, "motionTransformType");
LABEL_169:
                  if (v189)
                    fwrite("AGX: Motion transform type is not respected for this leaf type\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
                  goto LABEL_199;
                case 4:
                  if (objc_msgSend(a6, "motionTransformType") == 1)
                    v192 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 21, 0);
                  else
                    v192 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 19, 0);
LABEL_198:
                  v188 = v192;
LABEL_199:
                  v229 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                  v230 = v229[20];
                  v231 = v230 + 31;
                  if ((unint64_t)(v230 + 31) <= v229[19])
                    goto LABEL_200;
                  v545 = AGX::DataBufferAllocator<34ul>::growNoInline(v229 + 2, 3, 0);
                  v230 = v229[20];
                  if (v545)
                  {
                    v231 = v230 + 31;
                    if ((unint64_t)(v230 + 31) > v229[19])
                      abort();
LABEL_200:
                    v229[21] = v231;
                  }
                  v233 = v229[22];
                  v234 = (int)*MEMORY[0x24BE51650];
                  v232 = (v230 + 15) & 0xFFFFFFFFFFFFFFF0;
                  *(_DWORD *)v232 = v186;
                  v229[20] = v232 + 16;
                  v235 = *(_QWORD *)(v229[5] + 224);
                  *(_DWORD *)(v232 + 4) = objc_msgSend(a6, "instanceDescriptorStride");
                  *(_BYTE *)(v232 + 8) = objc_msgSend(a6, "instanceTransformationMatrixLayout") == 1;
                  v236 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                  *(_QWORD *)(v236 + 6056) = v232 + v233;
                  *(_QWORD *)(*(_QWORD *)(v236 + 1792) + 536) = v232 + v233;
                  *(_QWORD *)(v236 + 5280) = v235 + v234;
                  *(_QWORD *)(v236 + 7136) |= 1uLL;
                  *(_DWORD *)(v236 + 7152) |= 1u;
                  v237 = (char *)objc_msgSend(a6, "instanceDescriptorBuffer");
                  v238 = objc_msgSend(a6, "instanceDescriptorBufferOffset");
                  objc_msgSend(v237, "contents");
                  v239 = objc_msgSend(v237, "gpuAddress");
                  objc_msgSend(v237, "length");
                  v240 = (int)*MEMORY[0x24BE51650];
                  objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v237, 1);
                  v241 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                  *(_QWORD *)(v241 + 6064) = v239 + v238;
                  *(_QWORD *)(*(_QWORD *)(v241 + 1792) + 544) = v239 + v238;
                  *(_QWORD *)(v241 + 5288) = &v237[v240];
                  *(_QWORD *)(v241 + 7136) |= 2uLL;
                  *(_DWORD *)(v241 + 7152) |= 1u;
                  v242 = (void *)objc_msgSend(a6, "instancedAccelerationStructures");
                  v243 = objc_msgSend(v242, "count");
                  v244 = v243;
                  if (v243 <= 1)
                    v245 = 1;
                  else
                    v245 = v243;
                  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v823, v784, 8 * v245, 0);
                  if (v244)
                  {
                    v246 = 0;
                    v247 = *(_QWORD *)&v823[8];
                    do
                    {
                      v248 = (void *)objc_msgSend(v242, "objectAtIndexedSubscript:", v246);
                      v249 = objc_msgSend((id)objc_msgSend(v248, "buffer"), "gpuAddress");
                      *(_QWORD *)(v247 + 8 * v246++) = objc_msgSend(v248, "bufferOffset") + v249;
                    }
                    while (v244 != v246);
                  }
                  v250 = *(_QWORD *)v823;
                  v251 = *(_QWORD *)&v823[24];
                  v804 = 0u;
                  v805 = 0u;
                  v802 = 0u;
                  v803 = 0u;
                  for (i = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v802, v823, 16);
                        i;
                        i = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v802, v823, 16))
                  {
                    objc_msgSend(*(id *)(v784 + 8), "useResources:count:usage:", *((_QWORD *)&v802 + 1), i, 1);
                  }
                  v253 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                  *(_QWORD *)(v253 + 6072) = v250;
                  *(_QWORD *)(*(_QWORD *)(v253 + 1792) + 552) = v250;
                  *(_QWORD *)(v253 + 5296) = v251;
                  *(_QWORD *)(v253 + 7136) |= 4uLL;
                  *(_DWORD *)(v253 + 7152) |= 1u;
                  if (objc_msgSend(a6, "instanceDescriptorType") != 2
                    && objc_msgSend(a6, "instanceDescriptorType") != 4)
                  {
                    v268 = v784;
LABEL_221:
                    v270 = *(_QWORD *)(*(_QWORD *)(v268 + 8) + 88);
                    *(_QWORD *)(v270 + 6096) = v181;
                    *(_QWORD *)(*(_QWORD *)(v270 + 1792) + 576) = v181;
                    *(_QWORD *)(v270 + 5320) = v179;
                    *(_QWORD *)(v270 + 7136) |= 0x20uLL;
                    *(_DWORD *)(v270 + 7152) |= 1u;
                    objc_msgSend(a6, "instanceCount");
                    v223 = *(_QWORD *)(v187 + 1776);
                    *(_QWORD *)(v187 + 1776) = v188;
                    v271 = *(_QWORD *)(v188 + 16);
                    *(_BYTE *)(v187 + 1745) = *(_BYTE *)(v271 + 216);
                    *(_BYTE *)(v187 + 1746) = *(_BYTE *)(v271 + 1992);
                    if (*(_DWORD *)(v187 + 1736) == 1)
                    {
                      if (*(_BYTE *)(v187 + 7672))
                      {
                        v272 = *(_QWORD *)(v187 + 7688);
                        if (*(_QWORD *)(v187 + 7680) != v272)
                        {
                          *(_BYTE *)(v272 - 8) = 1;
                          *(_BYTE *)(v272 - 7) = *(_BYTE *)(*(_QWORD *)(v187 + 1768) + 458);
                        }
                      }
                      else
                      {
                        AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v187 + 1624), (_QWORD *)(v187 + 16));
                        v273 = *(_DWORD *)(v187 + 7316);
                        if (*(_DWORD *)(v187 + 7312) < v273)
                          *(_DWORD *)(v187 + 7312) = v273;
                        *(_DWORD *)(v187 + 7316) = 0;
                      }
                    }
                    if (v223)
                    {
                      v227 = (_BYTE *)(v187 + 1745);
                      v228 = (_BYTE *)(v187 + 1746);
                      *(_QWORD *)(v187 + 1776) = v223;
LABEL_230:
                      v274 = *(_QWORD *)(v223 + 16);
                      *v227 = *(_BYTE *)(v274 + 216);
                      *v228 = *(_BYTE *)(v274 + 1992);
                    }
LABEL_231:
                    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)&v786, v784, objc_msgSend((id)v767, "resourceBufferLength"), 0);
                    v275 = *((_QWORD *)&v786 + 1);
                    v741 = v786;
                    objc_msgSend((id)v767, "setResourceBufferContents:resourceBufferAddress:instanceBoundingBoxBufferAddress:useResourcesOnEncoder:", *((_QWORD *)&v786 + 1));
                    if (!((v767 == 0) | (v774 ^ 1) & 1))
                    {
                      v276 = objc_msgSend(*(id *)(v767 + 48), "usage");
                      if (*(_QWORD *)(v767 + 40))
                      {
                        v277 = (v276 & 1) == 0;
                        v735 = operator new[]();
                        if (v277)
                        {
                          v738 = *(_BYTE *)(v767 + 82) != 0;
                          if (*(_DWORD *)(v767 + 128))
                            goto LABEL_323;
                        }
                        else
                        {
                          v738 = 1;
                          if (*(_DWORD *)(v767 + 128))
                            goto LABEL_323;
                        }
                        v745 = (void *)objc_msgSend(*(id *)(v767 + 48), "geometryDescriptors");
                        if (*(_QWORD *)(v767 + 40))
                        {
                          v278 = 0;
                          v759 = 0;
                          v763 = 0;
                          v279 = (_BYTE *)(v275 + 59);
                          while (1)
                          {
                            v775 = v279;
                            v281 = (void *)objc_msgSend(v745, "objectAtIndexedSubscript:", v278);
                            if (objc_msgSend(v281, "triangleCount"))
                              break;
                            v280 = v775;
LABEL_240:
                            ++v278;
                            v279 = v280 + 96;
                            if (v278 >= *(_QWORD *)(v767 + 40))
                              goto LABEL_322;
                          }
                          v282 = objc_msgSend(v281, "vertexStride");
                          if (!v282)
                            v282 = MTLAttributeFormatSize((MTLAttributeFormat)objc_msgSend(v281, "vertexFormat"));
                          v283 = objc_msgSend(v281, "indexType");
                          if (objc_msgSend(v281, "indexBuffer"))
                          {
                            if (v283)
                              v284 = 4;
                            else
                              v284 = 2;
                          }
                          else
                          {
                            v285 = objc_msgSend(v281, "maxVertexIndex");
                            if (v285 >= 0x100)
                            {
                              if (v285 >= 0x10000)
                              {
                                if (v285 >> 24)
                                {
                                  if (HIDWORD(v285))
                                    v284 = 8;
                                  else
                                    v284 = 4;
                                }
                                else
                                {
                                  v284 = 3;
                                }
                              }
                              else
                              {
                                v284 = 2;
                              }
                            }
                            else
                            {
                              v284 = 1;
                            }
                          }
                          v755 = v284;
                          v753 = objc_msgSend(v281, "triangleCount");
                          v750 = objc_msgSend(v281, "triangleCount");
                          v286 = (void *)objc_msgSend(v281, "vertexBuffer");
                          v287 = objc_msgSend(v281, "vertexBufferOffset");
                          objc_msgSend(v286, "contents");
                          v288 = objc_msgSend(v286, "gpuAddress");
                          objc_msgSend(v286, "length");
                          if (objc_msgSend(v281, "indexBuffer"))
                          {
                            v289 = (void *)objc_msgSend(v281, "indexBuffer");
                            v290 = objc_msgSend(v281, "indexBufferOffset");
                            objc_msgSend(v289, "contents");
                            v291 = objc_msgSend(v289, "gpuAddress");
                            objc_msgSend(v289, "length");
                            v748 = v291 + v290;
                          }
                          else
                          {
                            v748 = 0;
                          }
                          if (objc_msgSend(v281, "transformationMatrixBuffer"))
                          {
                            v292 = (void *)objc_msgSend(v281, "transformationMatrixBuffer");
                            v293 = objc_msgSend(v281, "transformationMatrixBufferOffset");
                            objc_msgSend(v292, "contents");
                            v294 = objc_msgSend(v292, "gpuAddress");
                            objc_msgSend(v292, "length");
                            v295 = v294 + v293;
                          }
                          else
                          {
                            v295 = 0;
                          }
                          if (objc_msgSend(v281, "indexBuffer"))
                          {
                            if (objc_msgSend(v281, "indexType") == 1)
                              v296 = 4;
                            else
                              v296 = 2;
                          }
                          else
                          {
                            v296 = 0;
                          }
                          v297 = objc_msgSend(v281, "triangleCount");
                          v298 = objc_msgSend(v281, "vertexFormat");
                          v299 = objc_msgSend(v281, "transformationMatrixLayout");
                          v300 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                          v301 = v300[20];
                          v302 = v301 + 159;
                          if ((unint64_t)(v301 + 159) > v300[19])
                          {
                            v348 = AGX::DataBufferAllocator<34ul>::growNoInline(v300 + 2, 3, 0);
                            v301 = v300[20];
                            if (!v348)
                            {
                              v303 = v295;
LABEL_270:
                              v304 = (v301 + 15) & 0xFFFFFFFFFFFFFFF0;
                              v305 = v304 + v300[22];
                              v300[20] = v304 + 144;
                              v306 = (int *)MEMORY[0x24BE51650];
                              v307 = *(_QWORD *)(v300[5] + 224) + (int)*MEMORY[0x24BE51650];
                              v308 = *(_QWORD *)(v784 + 8);
                              v309 = *(_QWORD *)(v308 + 88);
                              *(_QWORD *)(v309 + 6096) = v305;
                              *(_QWORD *)(*(_QWORD *)(v309 + 1792) + 576) = v305;
                              *(_QWORD *)(v309 + 5320) = v307;
                              *(_QWORD *)(v309 + 7136) |= 0x20uLL;
                              *(_DWORD *)(v309 + 7152) |= 1u;
                              *(_BYTE *)(v304 + 140) = v738;
                              *(_BYTE *)(v304 + 141) = v738;
                              *(_QWORD *)(v304 + 96) = v763;
                              *(_QWORD *)(v304 + 104) = v759;
                              *(_DWORD *)(v304 + 112) = v278;
                              *(_QWORD *)v304 = v748;
                              *(_QWORD *)(v304 + 8) = v288 + v287;
                              *(_DWORD *)(v304 + 120) = v296;
                              *(_DWORD *)(v304 + 124) = v755;
                              *(_DWORD *)(v304 + 128) = v282;
                              *(_DWORD *)(v304 + 136) = v298;
                              v311 = *v306;
                              if (*(_DWORD *)(a4 + 8) == 3)
                                v312 = *(_QWORD *)(*(_QWORD *)a4 + 16);
                              else
                                v312 = 0;
                              v310 = *(_QWORD *)a4 + 8 * *(int *)(a4 + 12);
                              *(_QWORD *)(v304 + 16) = v312
                                                     + *(_QWORD *)(v310 + 40)
                                                     + *(_QWORD *)(a4 + 16)
                                                     + *(_QWORD *)(*(_QWORD *)(v310 + 24) + v311 + 8);
                              v313 = *(_QWORD *)(a4 + 64);
                              v314 = v313 + 8 * *(int *)(a4 + 76);
                              if (*(_DWORD *)(a4 + 72) == 3)
                                v315 = *(_QWORD *)(v313 + 16);
                              else
                                v315 = 0;
                              *(_QWORD *)(v304 + 72) = v315
                                                     + *(_QWORD *)(v314 + 40)
                                                     + *(_QWORD *)(a4 + 80)
                                                     + *(_QWORD *)(*(_QWORD *)(v314 + 24) + v311 + 8);
                              v316 = *(_QWORD *)(a4 + 360);
                              v317 = v316 + 8 * *(int *)(a4 + 372);
                              if (*(_DWORD *)(a4 + 368) == 3)
                                v318 = *(_QWORD *)(v316 + 16);
                              else
                                v318 = 0;
                              *(_QWORD *)(v304 + 24) = v318
                                                     + *(_QWORD *)(v317 + 40)
                                                     + *(_QWORD *)(a4 + 376)
                                                     + *(_QWORD *)(*(_QWORD *)(v317 + 24) + v311 + 8);
                              v319 = *(_QWORD *)(a4 + 392);
                              v320 = v319 + 8 * *(int *)(a4 + 404);
                              if (*(_DWORD *)(a4 + 400) == 3)
                                v321 = *(_QWORD *)(v319 + 16);
                              else
                                v321 = 0;
                              *(_QWORD *)(v304 + 32) = v321
                                                     + *(_QWORD *)(v320 + 40)
                                                     + *(_QWORD *)(a4 + 408)
                                                     + *(_QWORD *)(*(_QWORD *)(v320 + 24) + v311 + 8);
                              v322 = *(_QWORD *)(a4 + 424);
                              v323 = v322 + 8 * *(int *)(a4 + 436);
                              if (*(_DWORD *)(a4 + 432) == 3)
                                v324 = *(_QWORD *)(v322 + 16);
                              else
                                v324 = 0;
                              *(_QWORD *)(v304 + 40) = v324
                                                     + *(_QWORD *)(v323 + 40)
                                                     + *(_QWORD *)(a4 + 440)
                                                     + *(_QWORD *)(*(_QWORD *)(v323 + 24) + v311 + 8);
                              v325 = *(_QWORD *)(a4 + 32);
                              v326 = v325 + 8 * *(int *)(a4 + 44);
                              v327 = *(_QWORD *)(*(_QWORD *)(v326 + 24) + v311 + 8);
                              if (*(_DWORD *)(a4 + 40) == 3)
                                v328 = *(_QWORD *)(v325 + 16);
                              else
                                v328 = 0;
                              *(_QWORD *)(v304 + 88) = v328 + *(_QWORD *)(v326 + 40) + *(_QWORD *)(a4 + 48) + v327;
                              if (v297 >> 13)
                                v329 = 1024;
                              else
                                v329 = 32;
                              *(void **)(v304 + 48) = v788[0];
                              *(_QWORD *)(v304 + 56) = v303;
                              *(_BYTE *)(v304 + 142) = v299 == 1;
                              *(_DWORD *)(v304 + 132) = v329;
                              memset(v823, 0, 24);
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)v823, v308, 4, 1);
                              **(_DWORD **)v823 = 0;
                              *(_QWORD *)(v304 + 80) = *(_QWORD *)&v823[8];
                              *(_QWORD *)&v802 = v297;
                              objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v802, 8, 6);
                              v330 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 109, 0);
                              v331 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                              v332 = *(_QWORD *)(v331 + 1776);
                              *(_QWORD *)(v331 + 1776) = v330;
                              v333 = *(_QWORD *)(v330 + 16);
                              *(_BYTE *)(v331 + 1745) = *(_BYTE *)(v333 + 216);
                              *(_BYTE *)(v331 + 1746) = *(_BYTE *)(v333 + 1992);
                              if (*(_DWORD *)(v331 + 1736) == 1)
                              {
                                if (!*(_BYTE *)(v331 + 7672))
                                {
                                  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v331 + 1624), (_QWORD *)(v331 + 16));
                                  v346 = *(_DWORD *)(v331 + 7316);
                                  if (*(_DWORD *)(v331 + 7312) < v346)
                                    *(_DWORD *)(v331 + 7312) = v346;
                                  *(_DWORD *)(v331 + 7316) = 0;
                                  if (!v332)
                                  {
LABEL_297:
                                    if (v297 >> 13)
                                      v336 = 112;
                                    else
                                      v336 = 111;
                                    v337 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v336, 0);
                                    v338 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                                    v339 = *(_QWORD *)(v338 + 1776);
                                    *(_QWORD *)(v338 + 1776) = v337;
                                    v340 = *(_QWORD *)(v337 + 16);
                                    *(_BYTE *)(v338 + 1745) = *(_BYTE *)(v340 + 216);
                                    *(_BYTE *)(v338 + 1746) = *(_BYTE *)(v340 + 1992);
                                    if (*(_DWORD *)(v338 + 1736) == 1)
                                    {
                                      if (!*(_BYTE *)(v338 + 7672))
                                      {
                                        AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v338 + 1624), (_QWORD *)(v338 + 16));
                                        v347 = *(_DWORD *)(v338 + 7316);
                                        if (*(_DWORD *)(v338 + 7312) < v347)
                                          *(_DWORD *)(v338 + 7312) = v347;
                                        *(_DWORD *)(v338 + 7316) = 0;
                                        if (!v339)
                                          goto LABEL_306;
                                        goto LABEL_305;
                                      }
                                      v341 = *(_QWORD *)(v338 + 7688);
                                      if (*(_QWORD *)(v338 + 7680) != v341)
                                      {
                                        *(_BYTE *)(v341 - 8) = 1;
                                        *(_BYTE *)(v341 - 7) = *(_BYTE *)(*(_QWORD *)(v338 + 1768) + 458);
                                      }
                                    }
                                    if (!v339)
                                    {
LABEL_306:
                                      v343 = *(_QWORD *)(a4 + 424);
                                      v344 = v343 + 8 * *(int *)(a4 + 436);
                                      if (*(_DWORD *)(a4 + 432) == 3)
                                        v345 = *(_QWORD *)(v343 + 16);
                                      else
                                        v345 = 0;
                                      v280 = v775;
                                      v763 += v753;
                                      *(_QWORD *)(v775 - 27) = v345
                                                             + *(_QWORD *)(v344 + 40)
                                                             + *(_QWORD *)(a4 + 440)
                                                             + v759
                                                             + *(_QWORD *)(*(_QWORD *)(v344 + 24)
                                                                         + (int)*MEMORY[0x24BE51650]
                                                                         + 8);
                                      *v775 = v755;
                                      v759 += (v750 * (4 * v755) + 31) & 0xFFFFFFFFFFFFFFE0;
                                      goto LABEL_240;
                                    }
LABEL_305:
                                    *(_QWORD *)(v338 + 1776) = v339;
                                    v342 = *(_QWORD *)(v339 + 16);
                                    *(_BYTE *)(v338 + 1745) = *(_BYTE *)(v342 + 216);
                                    *(_BYTE *)(v338 + 1746) = *(_BYTE *)(v342 + 1992);
                                    goto LABEL_306;
                                  }
LABEL_296:
                                  *(_QWORD *)(v331 + 1776) = v332;
                                  v335 = *(_QWORD *)(v332 + 16);
                                  *(_BYTE *)(v331 + 1745) = *(_BYTE *)(v335 + 216);
                                  *(_BYTE *)(v331 + 1746) = *(_BYTE *)(v335 + 1992);
                                  goto LABEL_297;
                                }
                                v334 = *(_QWORD *)(v331 + 7688);
                                if (*(_QWORD *)(v331 + 7680) != v334)
                                {
                                  *(_BYTE *)(v334 - 8) = 1;
                                  *(_BYTE *)(v334 - 7) = *(_BYTE *)(*(_QWORD *)(v331 + 1768) + 458);
                                }
                              }
                              if (!v332)
                                goto LABEL_297;
                              goto LABEL_296;
                            }
                            v302 = v301 + 159;
                            if ((unint64_t)(v301 + 159) > v300[19])
                              abort();
                          }
                          v303 = v295;
                          v300[21] = v302;
                          goto LABEL_270;
                        }
LABEL_322:
                        MEMORY[0x234927EB4](v735, 0x1000C80504FFAC1);
                      }
                    }
LABEL_323:
                    v349 = (void *)objc_opt_class();
                    if (objc_msgSend(v349, "isSubclassOfClass:", objc_opt_class()))
                    {
                      objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", objc_msgSend(a6, "instanceCountBuffer"), 1);
                      v350 = objc_msgSend((id)objc_msgSend(a6, "instanceCountBuffer"), "gpuAddress");
                      v770 = (void *)(objc_msgSend(a6, "instanceCountBufferOffset") + v350);
                    }
                    objc_msgSend(*(id *)(v784 + 24), "buildGenericBVHWithEncoder:descriptor:outputBuffer:outputBufferOffset:scratchBuffer:scratchBufferOffset:primitiveCountBufferAddress:resourceBufferGPUAddress:debugBufferGPUAddress:", *(_QWORD *)(v784 + 8), v770, v741, v742);
                    v351 = (char *)objc_msgSend(v777, "buffer");
                    v352 = objc_msgSend(v777, "bufferOffset");
                    v353 = objc_msgSend(v351, "contents");
                    v354 = objc_msgSend(v351, "gpuAddress");
                    v355 = objc_msgSend(v351, "length");
                    v356 = &v351[*MEMORY[0x24BE51650]];
                    v820 = (void *)(v354 + v352);
                    v821.i64[0] = v352 + v353;
                    v821.i64[1] = v355;
                    v822 = (uint64_t)v356;
                    objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v351, 1);
                    v736 = objc_msgSend(v777, "accelerationStructureUniqueIdentifier");
                    if (v767)
                      v357 = *(_BYTE *)(v767 + 83) != 0;
                    else
                      v357 = 0;
                    v358 = (void *)objc_opt_class();
                    v359 = objc_msgSend(v358, "isSubclassOfClass:", objc_opt_class());
                    v360 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                    if (v359)
                      v361 = 336;
                    else
                      v361 = 352;
                    v362 = v361 | 0xF;
                    v363 = v360[20];
                    v364 = v363 + (v361 | 0xF);
                    if (v364 > v360[19])
                    {
                      v543 = AGX::DataBufferAllocator<34ul>::growNoInline(v360 + 2, 3, 0);
                      v363 = v360[20];
                      if (!v543)
                      {
LABEL_332:
                        v365 = v360[22];
                        v366 = (v363 + 15) & 0xFFFFFFFFFFFFFFF0;
                        v360[20] = v366 + v361;
                        v367 = v366 + v365;
                        v368 = *(_QWORD *)(v360[5] + 224) + (int)*MEMORY[0x24BE51650];
                        *(_OWORD *)(v366 + 160) = 0u;
                        *(_OWORD *)(v366 + 176) = 0u;
                        *(_OWORD *)(v366 + 128) = 0u;
                        *(_OWORD *)(v366 + 144) = 0u;
                        *(_OWORD *)(v366 + 96) = 0u;
                        *(_OWORD *)(v366 + 112) = 0u;
                        *(_OWORD *)(v366 + 64) = 0u;
                        *(_OWORD *)(v366 + 80) = 0u;
                        *(_OWORD *)(v366 + 32) = 0u;
                        *(_OWORD *)(v366 + 48) = 0u;
                        *(_OWORD *)v366 = 0u;
                        *(_OWORD *)(v366 + 16) = 0u;
                        *(_OWORD *)(v366 + 192) = 0u;
                        *(_OWORD *)(v366 + 208) = xmmword_232D73BD0;
                        *(_DWORD *)(v366 + 224) = -1;
                        *(_OWORD *)(v366 + 256) = 0u;
                        *(_OWORD *)(v366 + 244) = 0u;
                        *(_OWORD *)(v366 + 228) = 0u;
                        *(_DWORD *)(v366 + 272) = 255;
                        *(_OWORD *)(v366 + 320) = 0u;
                        *(_OWORD *)(v366 + 292) = 0u;
                        *(_OWORD *)(v366 + 308) = 0u;
                        *(_OWORD *)(v366 + 276) = 0u;
                        v781 = v366;
                        if ((v359 & 1) != 0)
                        {
                          v369 = 0;
                          v370 = 0;
                        }
                        else
                        {
                          v370 = (_DWORD *)(v366 + 336);
                          *(int64x2_t *)(v366 + 248) = vaddq_s64(vdupq_n_s64(v367), (int64x2_t)xmmword_232D73BE0);
                          v369 = (_DWORD *)(v366 + 340);
                          *(_QWORD *)(v366 + 336) = 0;
                        }
                        v371 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                        *(_QWORD *)(v371 + 6104) = v367;
                        *(_QWORD *)(*(_QWORD *)(v371 + 1792) + 584) = v367;
                        *(_QWORD *)(v371 + 5328) = v368;
                        *(_QWORD *)(v371 + 7136) |= 0x40uLL;
                        *(_DWORD *)(v371 + 7152) |= 1u;
                        if (v767)
                        {
                          *(_BYTE *)(v366 + 275) = objc_msgSend(*(id *)(v767 + 48), "usage") & 1;
                          v372 = objc_msgSend(*(id *)(v767 + 48), "usage");
                          v373 = v781;
                          v729 = (_BYTE *)(v781 + 275);
                          v374 = (v372 >> 1) & 1;
                        }
                        else
                        {
                          LOBYTE(v374) = 0;
                          v373 = v366;
                          v729 = (_BYTE *)(v366 + 275);
                          *(_BYTE *)(v366 + 275) = 0;
                        }
                        *(_BYTE *)(v373 + 282) = v374;
                        *(_WORD *)(v373 + 278) = 0;
                        *(_QWORD *)(v373 + 232) = 0;
                        *(_DWORD *)(v373 + 228) = 1;
                        v746 = objc_msgSend(a6, "isInstanceDescriptor");
                        if ((v746 & 1) != 0)
                        {
                          v375 = (void *)objc_opt_class();
                          LODWORD(v375) = objc_msgSend(v375, "isSubclassOfClass:", objc_opt_class());
                          v376 = objc_msgSend(a6, "motionTransformType");
                          v377 = objc_msgSend(a6, "instanceDescriptorType");
                          if ((_DWORD)v375)
                          {
                            v378 = 8;
                            switch(v377)
                            {
                              case 0:
                                goto LABEL_397;
                              case 1:
                                v378 = 9;
                                goto LABEL_397;
                              case 2:
                                v402 = v376 == 1;
                                v403 = 11;
                                v404 = 13;
                                goto LABEL_388;
                              case 3:
                                v378 = 10;
LABEL_397:
                                v737 = v378;
                                v411 = v781;
                                *(_QWORD *)(v781 + 216) = 0x800000080;
                                goto LABEL_401;
                              case 4:
                                v402 = v376 == 1;
                                v403 = 12;
                                v404 = 14;
LABEL_388:
                                if (v402)
                                  v403 = v404;
                                v737 = v403;
                                *(_QWORD *)(v781 + 216) = 0x900000030;
                                *(_DWORD *)(v781 + 212) = objc_msgSend(a6, "motionTransformType");
                                *(_DWORD *)(v781 + 224) = 0;
                                *(_DWORD *)(v781 + 184) = 1;
                                *(_BYTE *)(v781 + 280) = 1;
                                if (v359)
                                {
                                  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v823, v784, a6);
                                  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getMotionTransformCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(&v802, v784, a6);
                                  v760 = 86;
                                  v756 = 87;
                                  v385 = 84;
                                  v731 = 76;
                                  v739 = 1;
                                  v408 = 85;
                                  goto LABEL_403;
                                }
                                *v369 = objc_msgSend(a6, "maxInstanceCount");
                                v414 = objc_msgSend(a6, "maxMotionTransformCount");
                                v760 = 86;
                                v756 = 87;
                                v385 = 84;
                                v731 = 76;
                                v739 = 1;
                                v415 = 85;
                                goto LABEL_419;
                              default:
                                v737 = 1;
                                v411 = v781;
LABEL_401:
                                *(_DWORD *)(v411 + 224) = 0;
                                *(_DWORD *)(v411 + 184) = 1;
                                *(_BYTE *)(v781 + 280) = (objc_msgSend(a6, "usage") & 4) != 0;
                                if ((v359 & 1) != 0)
                                {
                                  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v823, v784, a6);
                                  v739 = 0;
                                  v731 = 0;
                                  v802 = *(_OWORD *)v823;
                                  v803 = *(_OWORD *)&v823[16];
                                  v760 = 24;
                                  v756 = 25;
                                  v385 = 22;
                                  v408 = 23;
LABEL_403:
                                  v764 = v408;
                                  v413 = *(_QWORD *)v823;
                                  *(_QWORD *)(v781 + 248) = v802;
                                  *(_QWORD *)(v781 + 256) = v413;
                                  goto LABEL_421;
                                }
                                *v369 = objc_msgSend(a6, "maxInstanceCount");
                                v414 = objc_msgSend(a6, "maxInstanceCount");
                                v739 = 0;
                                v731 = 0;
                                v760 = 24;
                                v756 = 25;
                                v385 = 22;
                                v415 = 23;
LABEL_419:
                                v764 = v415;
                                break;
                            }
LABEL_420:
                            *v370 = v414;
LABEL_421:
                            v724 = 0;
                            v725 = 0;
                            v771 = 0;
                            v732 = 0;
                            v749 = 0;
                            v730 = 0;
                            LODWORD(v380) = 0;
                            *(_BYTE *)(v781 + 283) = objc_msgSend(a6, "instanceTransformationMatrixLayout") == 1;
                            v751 = -1;
                            goto LABEL_422;
                          }
                          v383 = 8;
                          switch(v377)
                          {
                            case 0:
                              goto LABEL_399;
                            case 1:
                              v383 = 9;
                              goto LABEL_399;
                            case 2:
                              v405 = v376 == 1;
                              v406 = 11;
                              v407 = 13;
                              goto LABEL_393;
                            case 3:
                              v383 = 10;
LABEL_399:
                              v737 = v383;
                              v412 = v781;
                              *(_QWORD *)(v781 + 216) = 0x800000080;
                              goto LABEL_406;
                            case 4:
                              v405 = v376 == 1;
                              v406 = 12;
                              v407 = 14;
LABEL_393:
                              if (v405)
                                v406 = v407;
                              v737 = v406;
                              *(_QWORD *)(v781 + 216) = 0x900000030;
                              v409 = 0;
                              *(_DWORD *)(v781 + 212) = objc_msgSend(a6, "motionTransformType");
                              v760 = 86;
                              v756 = 87;
                              *(_DWORD *)(v781 + 224) = 0;
                              v739 = 1;
                              *(_DWORD *)(v781 + 184) = 1;
                              v385 = 84;
                              v731 = 76;
                              v764 = 85;
                              LOBYTE(v410) = 1;
                              goto LABEL_407;
                            default:
                              v737 = 1;
                              v412 = v781;
LABEL_406:
                              *(_DWORD *)(v412 + 224) = 0;
                              *(_DWORD *)(v412 + 184) = 1;
                              v739 = 0;
                              v731 = 0;
                              v410 = ((unint64_t)objc_msgSend(a6, "usage") >> 2) & 1;
                              v760 = 24;
                              v756 = 25;
                              v385 = 22;
                              v409 = 1;
                              v764 = 23;
LABEL_407:
                              *(_BYTE *)(v781 + 280) = v410;
                              if (!v359)
                              {
                                *v369 = objc_msgSend(a6, "instanceCount");
                                if ((v409 & 1) != 0)
                                  v414 = objc_msgSend(a6, "instanceCount");
                                else
                                  v414 = objc_msgSend(a6, "motionTransformCount");
                                goto LABEL_420;
                              }
                              v416 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                              v417 = v416[20];
                              v418 = v417 + 31;
                              if ((unint64_t)(v417 + 31) <= v416[19])
                                goto LABEL_409;
                              v546 = AGX::DataBufferAllocator<34ul>::growNoInline(v416 + 2, 3, 0);
                              v417 = v416[20];
                              if (v546)
                              {
                                v418 = v417 + 31;
                                if ((unint64_t)(v417 + 31) > v416[19])
                                  abort();
LABEL_409:
                                v416[21] = v418;
                              }
                              v419 = (_DWORD *)((v417 + 15) & 0xFFFFFFFFFFFFFFF0);
                              v420 = (char *)v419 + v416[22];
                              *v419 = 0;
                              v416[20] = v419 + 4;
                              v421 = v420;
                              if ((v409 & 1) != 0)
                                goto LABEL_414;
                              v422 = objc_msgSend(a6, "motionTransformCount");
                              v423 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                              v424 = v423[20];
                              v425 = v424 + 31;
                              if ((unint64_t)(v424 + 31) <= v423[19])
                                goto LABEL_412;
                              v549 = AGX::DataBufferAllocator<34ul>::growNoInline(v423 + 2, 3, 0);
                              v424 = v423[20];
                              if (v549)
                              {
                                v425 = v424 + 31;
                                if ((unint64_t)(v424 + 31) > v423[19])
                                  abort();
LABEL_412:
                                v423[21] = v425;
                              }
                              v426 = (_DWORD *)((v424 + 15) & 0xFFFFFFFFFFFFFFF0);
                              v421 = (char *)v426 + v423[22];
                              *v426 = v422;
                              v423[20] = v426 + 4;
LABEL_414:
                              *(_QWORD *)(v781 + 248) = v421;
                              *(_QWORD *)(v781 + 256) = v420;
                              goto LABEL_421;
                          }
                        }
                        if (!v767 || (v379 = *(_QWORD *)(v767 + 40)) == 0)
                        {
                          v731 = 0;
                          v739 = 0;
                          v724 = 0;
                          v725 = 0;
                          v771 = 0;
                          v732 = 0;
                          v749 = 0;
                          v730 = 0;
                          LODWORD(v380) = 0;
                          v751 = -1;
                          v737 = 1;
                          v764 = 23;
                          v385 = 22;
                          v756 = 25;
                          v760 = 24;
LABEL_422:
                          v722 = 1;
LABEL_423:
                          v427 = *(_DWORD *)(v784 + 32);
                          if ((v428 & 1) == 0
                          {
                          }
                          v429 = *(_DWORD *)(v781 + 184) < 3u;
                          if (v751)
                            v430 = 0;
                          else
                            v430 = v427 > 1;
                          v431 = v430;
                          *(_BYTE *)(v781 + 273) = v431;
                          if (!v430)
                            v429 = 0;
                          *(_BYTE *)(v781 + 284) = v429;
                          if (*(_BYTE *)(v781 + 275))
                            *(_BYTE *)(v781 + 278) = 0;
                          v723 = v380;
                          LOBYTE(v432) = v767;
                          if (v767)
                          {
                            if ((objc_msgSend(*(id *)(v767 + 48), "usage") & 1) != 0)
                              LOBYTE(v432) = 1;
                            else
                              v432 = ((unint64_t)objc_msgSend(*(id *)(v767 + 48), "usage") >> 1) & 1;
                          }
                          v433 = v746 ^ 1;
                          *(_BYTE *)(v781 + 274) = v432;
                          if (!v739)
                            v433 = 0;
                          if (*(_BYTE *)(v781 + 275))
                            v434 = 0;
                          else
                            v434 = v433;
                          *(_BYTE *)(v781 + 279) = v434;
                          *(_QWORD *)&v798 = 0;
                          v796 = 0;
                          *(_QWORD *)&v794 = 0;
                          v792.i64[0] = 0;
                          *(_QWORD *)&v790 = 0;
                          v800 = 0;
                          objc_msgSend(*(id *)(v784 + 24), "getGenericBVHSizeForDescriptor:nodeOffset:fragmentPrimitiveIndicesOffset:fragmentGeometryIndicesOffset:motionFragmentOffset:fragmentIndexOffset:childIndexOffset:", v767, &v798, &v796, &v794, &v792, &v790, &v800);
                          v435 = -[BVHDescriptor maxInnerNodeCount](v767);
                          v436 = *(_QWORD *)(a4 + 632);
                          v437 = v436 + 8 * *(int *)(a4 + 644);
                          v438 = *(void **)(v437 + 24);
                          if (*(_DWORD *)(a4 + 640) == 3)
                            v439 = *(_QWORD *)(v436 + 16);
                          else
                            v439 = 0;
                          v440 = *(_QWORD *)(v437 + 40);
                          v441 = *(_QWORD *)(a4 + 648);
                          v727 = objc_msgSend(v438, "contents");
                          v743 = objc_msgSend(v438, "gpuAddress");
                          v442 = objc_msgSend(v438, "length");
                          v443 = (int)*MEMORY[0x24BE51650];
                          MTLResourceListAddResource();
                          v776 = (uint64_t)v438 + v443;
                          IOGPUResourceListAddResource();
                          v444 = *(_QWORD *)(a4 + 456);
                          v445 = v444 + 8 * *(int *)(a4 + 468);
                          if (*(_DWORD *)(a4 + 464) == 3)
                            v446 = *(_QWORD *)(v444 + 16);
                          else
                            v446 = 0;
                          *(_QWORD *)v781 = v446
                                          + *(_QWORD *)(v445 + 40)
                                          + *(_QWORD *)(a4 + 472)
                                          + *(_QWORD *)(*(_QWORD *)(v445 + 24) + (int)*MEMORY[0x24BE51650] + 8);
                          *(_DWORD *)(v781 + 300) = *(_DWORD *)(a4 + 488);
                          v447 = *(_QWORD *)(a4 + 632);
                          v448 = v447 + 8 * *(int *)(a4 + 644);
                          v449 = (int)*MEMORY[0x24BE51650];
                          if (*(_DWORD *)(a4 + 640) == 3)
                            v450 = *(_QWORD *)(v447 + 16);
                          else
                            v450 = 0;
                          *(_QWORD *)(v781 + 8) = v450
                                                + *(_QWORD *)(v448 + 40)
                                                + *(_QWORD *)(a4 + 648)
                                                + *(_QWORD *)(*(_QWORD *)(v448 + 24) + v449 + 8);
                          v451 = *(_QWORD *)(a4 + 496);
                          v452 = v451 + 8 * *(int *)(a4 + 508);
                          if (*(_DWORD *)(a4 + 504) == 3)
                            v453 = *(_QWORD *)(v451 + 16);
                          else
                            v453 = 0;
                          *(_QWORD *)(v781 + 80) = v453
                                                 + *(_QWORD *)(v452 + 40)
                                                 + *(_QWORD *)(a4 + 512)
                                                 + *(_QWORD *)(*(_QWORD *)(v452 + 24) + v449 + 8);
                          v454 = *(_QWORD *)(a4 + 528);
                          v455 = v454 + 8 * *(int *)(a4 + 540);
                          if (*(_DWORD *)(a4 + 536) == 3)
                            v456 = *(_QWORD *)(v454 + 16);
                          else
                            v456 = 0;
                          v457 = a4;
                          *(_QWORD *)(v781 + 88) = v456
                                                 + *(_QWORD *)(v455 + 40)
                                                 + *(_QWORD *)(a4 + 544)
                                                 + *(_QWORD *)(*(_QWORD *)(v455 + 24) + v449 + 8);
                          v458 = *(unsigned __int8 *)(v781 + 275);
                          if (*(_BYTE *)(v781 + 275))
                          {
                            v459 = *(_QWORD *)(a4 + 560);
                            v460 = v459 + 8 * *(int *)(a4 + 572);
                            if (*(_DWORD *)(a4 + 568) == 3)
                              v461 = *(_QWORD *)(v459 + 16);
                            else
                              v461 = 0;
                            v457 = a4;
                            *(_QWORD *)(v781 + 16) = v461
                                                   + *(_QWORD *)(v460 + 40)
                                                   + *(_QWORD *)(a4 + 576)
                                                   + *(_QWORD *)(*(_QWORD *)(v460 + 24) + v449 + 8);
                          }
                          v462 = *(_QWORD *)(v457 + 664);
                          v463 = v462 + 8 * *(int *)(v457 + 676);
                          if (*(_DWORD *)(v457 + 672) == 3)
                            v464 = *(_QWORD *)(v462 + 16);
                          else
                            v464 = 0;
                          *(_QWORD *)(v781 + 96) = v464
                                                 + *(_QWORD *)(v463 + 40)
                                                 + *(_QWORD *)(a4 + 680)
                                                 + *(_QWORD *)(*(_QWORD *)(v463 + 24) + v449 + 8);
                          v465 = *(_QWORD *)(a4 + 328);
                          v466 = v465 + 8 * *(int *)(a4 + 340);
                          if (*(_DWORD *)(a4 + 336) == 3)
                            v467 = *(_QWORD *)(v465 + 16);
                          else
                            v467 = 0;
                          v468 = v467
                               + *(_QWORD *)(v466 + 40)
                               + *(_QWORD *)(a4 + 344)
                               + *(_QWORD *)(*(_QWORD *)(v466 + 24) + v449 + 8);
                          v469 = v767;
                          if (v767)
                            v469 = *(_DWORD *)(v767 + 136);
                          *(_DWORD *)(v781 + 320) = v469;
                          v470 = v800 + v468;
                          *(_QWORD *)(v781 + 56) = v798 + v468;
                          *(_QWORD *)(v781 + 64) = v470;
                          *(_QWORD *)(v781 + 72) = v468;
                          v471 = *(_QWORD *)(a4 + 128);
                          v472 = v471 + 8 * *(int *)(a4 + 140);
                          if (*(_DWORD *)(a4 + 136) == 3)
                            v473 = *(_QWORD *)(v471 + 16);
                          else
                            v473 = 0;
                          *(_QWORD *)(v781 + 24) = v473
                                                 + *(_QWORD *)(v472 + 40)
                                                 + *(_QWORD *)(a4 + 144)
                                                 + *(_QWORD *)(*(_QWORD *)(v472 + 24) + v449 + 8);
                          *(_DWORD *)(v781 + 304) = *(_DWORD *)(a4 + 160);
                          *(_DWORD *)(v781 + 308) = *(_DWORD *)(a4 + 624);
                          v474 = *(_QWORD *)(a4 + 168);
                          v475 = v474 + 8 * *(int *)(a4 + 180);
                          if (*(_DWORD *)(a4 + 176) == 3)
                            v476 = *(_QWORD *)(v474 + 16);
                          else
                            v476 = 0;
                          *(_QWORD *)(v781 + 32) = v476
                                                 + *(_QWORD *)(v475 + 40)
                                                 + *(_QWORD *)(a4 + 184)
                                                 + *(_QWORD *)(*(_QWORD *)(v475 + 24) + v449 + 8);
                          v477 = *(_QWORD *)(a4 + 200);
                          if (*(_DWORD *)(a4 + 208) == 3)
                            v479 = *(_QWORD *)(v477 + 16);
                          else
                            v479 = 0;
                          v478 = v477 + 8 * *(int *)(a4 + 212);
                          *(_QWORD *)(v781 + 40) = v479
                                                 + *(_QWORD *)(v478 + 40)
                                                 + *(_QWORD *)(a4 + 216)
                                                 + *(_QWORD *)(*(_QWORD *)(v478 + 24) + v449 + 8);
                          if (v458)
                          {
                            v480 = *(_QWORD *)(a4 + 592);
                            v481 = v480 + 8 * *(int *)(a4 + 604);
                            v482 = *(_QWORD *)(*(_QWORD *)(v481 + 24) + v449 + 8);
                            if (*(_DWORD *)(a4 + 600) == 3)
                              v483 = *(_QWORD *)(v480 + 16);
                            else
                              v483 = 0;
                            *(_QWORD *)(v781 + 48) = v483 + *(_QWORD *)(v481 + 40) + *(_QWORD *)(a4 + 608) + v482;
                          }
                          v733 = v468;
                          v484 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                          v754 = v357 ^ 1 | 0x100;
                          v485 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v385, v357 ^ 1 | 0x100);
                          v486 = *(_QWORD *)(v484 + 1776);
                          *(_QWORD *)(v484 + 1776) = v485;
                          v487 = *(_QWORD *)(v485 + 16);
                          *(_BYTE *)(v484 + 1745) = *(_BYTE *)(v487 + 216);
                          *(_BYTE *)(v484 + 1746) = *(_BYTE *)(v487 + 1992);
                          if (*(_DWORD *)(v484 + 1736) == 1)
                          {
                            if (*(_BYTE *)(v484 + 7672))
                            {
                              v488 = *(_QWORD *)(v484 + 7688);
                              if (*(_QWORD *)(v484 + 7680) != v488)
                              {
                                *(_BYTE *)(v488 - 8) = 1;
                                *(_BYTE *)(v488 - 7) = *(_BYTE *)(*(_QWORD *)(v484 + 1768) + 458);
                              }
                            }
                            else
                            {
                              AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v484 + 1624), (_QWORD *)(v484 + 16));
                              v489 = *(_DWORD *)(v484 + 7316);
                              if (*(_DWORD *)(v484 + 7312) < v489)
                                *(_DWORD *)(v484 + 7312) = v489;
                              *(_DWORD *)(v484 + 7316) = 0;
                            }
                          }
                          v490 = v440 + v439 + v441;
                          if (v486)
                          {
                            *(_QWORD *)(v484 + 1776) = v486;
                            v491 = *(_QWORD *)(v486 + 16);
                            *(_BYTE *)(v484 + 1745) = *(_BYTE *)(v491 + 216);
                            *(_BYTE *)(v484 + 1746) = *(_BYTE *)(v491 + 1992);
                          }
                          v744 = v743 + v490;
                          if (v435 <= 1)
                            v492 = 1;
                          else
                            v492 = v435;
                          v493 = log2((double)v492);
                          if (v767)
                          {
                            v819 = *(_DWORD *)(v767 + 16);
                            LODWORD(v802) = 0;
                            if (v819)
                            {
                              v494 = v490 + v727;
                              v495 = v493 / 3.0;
                              v496 = v744 + 28;
                              v497 = v494 + 28;
                              do
                              {
                                objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v802, 4, 7);
                                objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v819, 4, 8);
                                v441 = v441 & 0xFFFFFFFFFFFF0000 | v754;
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v764, v441);
                                memset(v823, 0, 32);
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(v784, v496, v776, (uint64_t *)v823, 1, 0);
                                v499 = v492;
                                if ((float)v802 < v495)
                                  v499 = exp2f((float)v802 * 3.0);
                                v500 = *(_QWORD *)(a4 + 168);
                                v501 = v500 + 8 * *(int *)(a4 + 180);
                                v502 = *(_QWORD *)(v501 + 24);
                                if (*(_DWORD *)(a4 + 176) == 3)
                                  v503 = *(_QWORD *)(v500 + 16);
                                else
                                  v503 = 0;
                                v504 = *(_QWORD *)(v501 + 40);
                                v505 = *(_QWORD *)(a4 + 232);
                                v506 = v505 + 8 * *(int *)(a4 + 244);
                                v507 = *(_QWORD *)(v506 + 24);
                                if (*(_DWORD *)(a4 + 240) == 3)
                                  v508 = *(_QWORD *)(v505 + 16);
                                else
                                  v508 = 0;
                                v509 = v504 + v503 + *(_QWORD *)(a4 + 184);
                                v510 = *(_QWORD *)(v506 + 40) + v508 + *(_QWORD *)(a4 + 248);
                                *(_QWORD *)v823 = v744 + 28;
                                *(_QWORD *)&v823[8] = v497;
                                *(_QWORD *)&v823[16] = v442;
                                *(_QWORD *)&v823[24] = v776;
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodePrefixSum(v784, v502, v509, v507, v510, (uint64_t *)v823, v499);
                                v511 = *(_QWORD *)(a4 + 200);
                                if (*(_DWORD *)(a4 + 208) == 3)
                                  v512 = *(_QWORD *)(v511 + 16);
                                else
                                  v512 = 0;
                                v513 = *(_QWORD *)(a4 + 264);
                                if (*(_DWORD *)(a4 + 272) == 3)
                                  v514 = *(_QWORD *)(v513 + 16);
                                else
                                  v514 = 0;
                                v515 = v511 + 8 * *(int *)(a4 + 212);
                                v516 = *(_QWORD *)(v515 + 24);
                                v517 = *(_QWORD *)(v515 + 40) + v512 + *(_QWORD *)(a4 + 216);
                                v518 = v513 + 8 * *(int *)(a4 + 276);
                                v519 = *(_QWORD *)(v518 + 24);
                                v520 = *(_QWORD *)(v518 + 40) + v514 + *(_QWORD *)(a4 + 280);
                                *(_QWORD *)v823 = v744 + 28;
                                *(_QWORD *)&v823[8] = v497;
                                *(_QWORD *)&v823[16] = v442;
                                *(_QWORD *)&v823[24] = v776;
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodePrefixSum(v784, v516, v517, v519, v520, (uint64_t *)v823, v499);
                                v440 = v440 & 0xFFFFFFFFFFFF0000 | v754;
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v760, v440);
                                memset(v823, 0, 32);
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(v784, v496, v776, (uint64_t *)v823, 1, 0);
                                v521 = *(_QWORD *)(v784 + 8);
                                v522 = *(_QWORD *)(v521 + 88);
                                v523 = v820;
                                v524 = v822;
                                *(_QWORD *)(v522 + 6096) = v820;
                                *(_QWORD *)(*(_QWORD *)(v522 + 1792) + 576) = v523;
                                *(_QWORD *)(v522 + 5320) = v524;
                                *(_QWORD *)(v522 + 7136) |= 0x20uLL;
                                *(_DWORD *)(v522 + 7152) |= 1u;
                                v525 = *(_QWORD *)(v521 + 88);
                                v357 = v357 & 0xFFFFFFFFFFFF0000 | v754;
                                v526 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v756, v357);
                                v527 = *(_QWORD *)(v525 + 1776);
                                *(_QWORD *)(v525 + 1776) = v526;
                                v528 = *(_QWORD *)(v526 + 16);
                                *(_BYTE *)(v525 + 1745) = *(_BYTE *)(v528 + 216);
                                *(_BYTE *)(v525 + 1746) = *(_BYTE *)(v528 + 1992);
                                if (*(_DWORD *)(v525 + 1736) == 1)
                                {
                                  if (!*(_BYTE *)(v525 + 7672))
                                  {
                                    AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v525 + 1624), (_QWORD *)(v525 + 16));
                                    v530 = *(_DWORD *)(v525 + 7316);
                                    if (*(_DWORD *)(v525 + 7312) < v530)
                                      *(_DWORD *)(v525 + 7312) = v530;
                                    *(_DWORD *)(v525 + 7316) = 0;
                                    if (!v527)
                                      goto LABEL_502;
LABEL_501:
                                    *(_QWORD *)(v525 + 1776) = v527;
                                    v498 = *(_QWORD *)(v527 + 16);
                                    *(_BYTE *)(v525 + 1745) = *(_BYTE *)(v498 + 216);
                                    *(_BYTE *)(v525 + 1746) = *(_BYTE *)(v498 + 1992);
                                    goto LABEL_502;
                                  }
                                  v529 = *(_QWORD *)(v525 + 7688);
                                  if (*(_QWORD *)(v525 + 7680) != v529)
                                  {
                                    *(_BYTE *)(v529 - 8) = 1;
                                    *(_BYTE *)(v529 - 7) = *(_BYTE *)(*(_QWORD *)(v525 + 1768) + 458);
                                  }
                                }
                                if (v527)
                                  goto LABEL_501;
LABEL_502:
                                LODWORD(v802) = v802 + 1;
                              }
                              while (v802 < v819);
                            }
                          }
                          else
                          {
                            v819 = 0;
                          }
                          v556 = v781;
                          v557 = *(_DWORD *)(v781 + 220) & 0xFFFFFFFE;
                          if (v557 == 2)
                          {
                            v558 = *(_QWORD *)(a4 + 360);
                            v559 = v558 + 8 * *(int *)(a4 + 372);
                            v560 = (int)*MEMORY[0x24BE51650];
                            if (*(_DWORD *)(a4 + 368) == 3)
                              v561 = *(_QWORD *)(v558 + 16);
                            else
                              v561 = 0;
                            *(_QWORD *)(v781 + 152) = v561
                                                    + *(_QWORD *)(v559 + 40)
                                                    + *(_QWORD *)(a4 + 376)
                                                    + *(_QWORD *)(*(_QWORD *)(v559 + 24) + v560 + 8);
                            v562 = *(_QWORD *)(a4 + 392);
                            v563 = v562 + 8 * *(int *)(a4 + 404);
                            v564 = *(_QWORD *)(*(_QWORD *)(v563 + 24) + v560 + 8);
                            if (*(_DWORD *)(a4 + 400) == 3)
                              v565 = *(_QWORD *)(v562 + 16);
                            else
                              v565 = 0;
                            v566 = v565 + *(_QWORD *)(v563 + 40) + *(_QWORD *)(a4 + 408) + v564;
                            v556 = v781;
                            *(_QWORD *)(v781 + 160) = v566;
                          }
                          v567 = v794 + v733;
                          *(_QWORD *)(v556 + 104) = v796 + v733;
                          *(_QWORD *)(v556 + 112) = v567;
                          if (v767)
                          {
                            v568 = *(_QWORD *)(v767 + 24);
                            if (v568 >= 0x100)
                            {
                              if (v568 >= 0x10000)
                              {
                                if (v568 >> 24)
                                {
                                  if (HIDWORD(v568))
                                    v569 = 8;
                                  else
                                    v569 = 4;
                                }
                                else
                                {
                                  v569 = 3;
                                }
                              }
                              else
                              {
                                v569 = 2;
                              }
                            }
                            else
                            {
                              v569 = 1;
                            }
                            *(_DWORD *)(v781 + 324) = v569;
                            v570 = *(_QWORD *)(v767 + 40);
                            if (v570 >= 0x100)
                            {
                              if (v570 >= 0x10000)
                              {
                                if (v570 >> 24)
                                {
                                  if (HIDWORD(v570))
                                    v572 = 8;
                                  else
                                    v572 = 4;
                                  v571 = v572 | 0x400000000;
                                }
                                else
                                {
                                  v571 = 0x400000003;
                                }
                              }
                              else
                              {
                                v571 = 0x400000002;
                              }
                            }
                            else
                            {
                              v571 = 0x400000001;
                            }
                          }
                          else
                          {
                            *(_DWORD *)(v781 + 324) = 0;
                            v571 = 0;
                          }
                          v573 = v790 + v733;
                          *(_QWORD *)(v781 + 120) = v792.i64[0] + v733;
                          *(_QWORD *)(v781 + 128) = v573;
                          *(_QWORD *)(v781 + 328) = v571;
                          *(_QWORD *)(v781 + 288) = v736;
                          v574 = objc_msgSend(a6, "isInstanceDescriptor");
                          if ((v575 & 1) == 0
                          {
                            AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
                          }
                          if (v574)
                            v576 = 0x80000000;
                          else
                            v576 = 0;
                          *(_DWORD *)(v781 + 296) = v576 & 0xE0000000 | ((v557 == 2) << 29) | (v739 << 30) | AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::kBvhVersions[AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride & ~(AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride >> 31)] & 0x1FFFFFFF;
                          *(_QWORD *)(v781 + 136) = v741;
                          if ((v746 & 1) != 0)
                          {
                            v577 = (void *)objc_opt_class();
                            v578 = objc_msgSend(v577, "isSubclassOfClass:", objc_opt_class());
                            v579 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                            v580 = objc_msgSend((id)objc_msgSend(a6, "instanceDescriptorBuffer"), "gpuAddress");
                            v581 = objc_msgSend(a6, "instanceDescriptorBufferOffset");
                            v582 = objc_msgSend(a6, "instanceDescriptorBuffer");
                            v583 = v582 + (int)*MEMORY[0x24BE51650];
                            *(_QWORD *)(v579 + 6112) = v581 + v580;
                            *(_QWORD *)(*(_QWORD *)(v579 + 1792) + 592) = v581 + v580;
                            *(_QWORD *)(v579 + 5336) = v583;
                            *(_QWORD *)(v579 + 7136) |= 0x80uLL;
                            *(_DWORD *)(v579 + 7152) |= 1u;
                            *(_DWORD *)(v781 + 312) = objc_msgSend(a6, "instanceDescriptorStride");
                            if ((objc_msgSend(a6, "usage") & 4) != 0)
                              v584 = -1;
                            else
                              v584 = 255;
                            *(_DWORD *)(v781 + 316) = v584;
                            if ((v578 & 1) != 0)
                            {
                              v734 = 0uLL;
                              v728 = 0;
                              v740 = 0;
                            }
                            else
                            {
                              v585 = (void *)objc_msgSend(a6, "instancedAccelerationStructures");
                              v586 = objc_msgSend(v585, "count");
                              v587 = v586;
                              if (v586 <= 1)
                                v588 = 1;
                              else
                                v588 = v586;
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v823, v784, 8 * v588, 0);
                              if (v587)
                              {
                                v589 = 0;
                                v590 = *(_QWORD *)&v823[8];
                                do
                                {
                                  v591 = (void *)objc_msgSend(v585, "objectAtIndexedSubscript:", v589);
                                  v592 = objc_msgSend((id)objc_msgSend(v591, "buffer"), "gpuAddress");
                                  *(_QWORD *)(v590 + 8 * v589++) = objc_msgSend(v591, "bufferOffset") + v592;
                                }
                                while (v587 != v589);
                              }
                              v593 = objc_msgSend(v585, "count");
                              if ((unint64_t)objc_msgSend(v585, "count") < 2)
                                v594 = 4;
                              else
                                v594 = 4 * objc_msgSend(v585, "count");
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)&v802, v784, v594, 0);
                              if (v593)
                              {
                                v595 = 0;
                                v596 = *((_QWORD *)&v802 + 1);
                                do
                                {
                                  *(_DWORD *)(v596 + 4 * v595) = *(_DWORD *)(objc_msgSend(v585, "objectAtIndexedSubscript:", v595)+ 344);
                                  ++v595;
                                }
                                while (v593 != v595);
                              }
                              v734 = 0uLL;
                              v728 = 0;
                              v740 = 0;
                              v597 = *(_QWORD *)v823;
                              *(_QWORD *)(v781 + 168) = v802;
                              *(_QWORD *)(v781 + 176) = v597;
                            }
                          }
                          else
                          {
                            AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newGeometryBuffer((uint64_t)v823, v784, v767, (void *)objc_msgSend(a6, "geometryDescriptors"), (_DWORD *)(v781 + 268));
                            v728 = *(_QWORD *)&v823[8];
                            v734 = *(_OWORD *)&v823[16];
                            v740 = *(_QWORD *)v823;
                            *(_QWORD *)(v781 + 144) = *(_QWORD *)v823;
                            if (*(_BYTE *)(v781 + 273))
                              objc_msgSend(*(id *)(v784 + 8), "setBuffer:offset:atIndex:", *(_QWORD *)(v784 + 16), 0, 10);
                          }
                          v598 = objc_msgSend(a6, "isInstanceDescriptor");
                          if (v751 == 2)
                            v599 = v598;
                          else
                            v599 = 1;
                          if (!((v767 == 0) | v599 & 1))
                          {
                            v600 = *(void **)(v767 + 48);
                            v601 = *(_DWORD *)(v767 + 128);
                            if (v601 == 5)
                            {
                              v747 = (void *)objc_msgSend(v600, "geometryDescriptors");
                              if (v723)
                              {
                                for (j = 0; j != v723; ++j)
                                {
                                  v623 = objc_msgSend(v747, "objectAtIndexedSubscript:", j);
                                  if (*(_DWORD *)(v781 + 184))
                                  {
                                    v624 = (void *)v623;
                                    v625 = 0;
                                    v766 = v821.i64[1];
                                    v769 = v820;
                                    v626 = v822;
                                    v758 = (_QWORD *)(v821.i64[0] + 152);
                                    v762 = (char *)v820 + 152;
                                    do
                                    {
                                      v627 = (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v624, "controlPointBuffers"), "objectAtIndexedSubscript:", v625), "buffer");
                                      v628 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v624, "controlPointBuffers"), "objectAtIndexedSubscript:", v625), "offset");
                                      v629 = objc_msgSend(v627, "contents");
                                      v630 = objc_msgSend(v627, "gpuAddress");
                                      v631 = objc_msgSend(v627, "length");
                                      v632 = &v627[*MEMORY[0x24BE51650]];
                                      *(_QWORD *)v823 = v630 + v628;
                                      *(_QWORD *)&v823[8] = v628 + v629;
                                      *(_QWORD *)&v823[16] = v631;
                                      *(_QWORD *)&v823[24] = v632;
                                      v633 = objc_msgSend(v624, "controlPointStride");
                                      v634 = objc_msgSend(v624, "controlPointFormat");
                                      v635 = (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v624, "radiusBuffers"), "objectAtIndexedSubscript:", v625), "buffer");
                                      v636 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v624, "radiusBuffers"), "objectAtIndexedSubscript:", v625), "offset");
                                      v637 = objc_msgSend(v635, "contents");
                                      v638 = objc_msgSend(v635, "gpuAddress");
                                      v639 = objc_msgSend(v635, "length");
                                      v640 = &v635[*MEMORY[0x24BE51650]];
                                      *(_QWORD *)&v802 = v638 + v636;
                                      *((_QWORD *)&v802 + 1) = v636 + v637;
                                      *(_QWORD *)&v803 = v639;
                                      *((_QWORD *)&v803 + 1) = v640;
                                      LODWORD(v635) = objc_msgSend(v624, "radiusStride");
                                      v641 = objc_msgSend(v624, "radiusFormat");
                                      v642 = objc_msgSend(v624, "controlPointCount");
                                      v643 = (uint64_t)v769
                                           + *(_QWORD *)(v771 + 8 * (v625 + j * *(unsigned int *)(v781 + 184)));
                                      v815 = v762;
                                      v816 = v758;
                                      v817 = v766;
                                      v818 = v626;
                                      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyControlPoints(v784, v823, v633, v634, &v802, (int)v635, v641, v642, v643, v626, (uint64_t *)&v815);
                                      ++v625;
                                    }
                                    while (v625 < *(unsigned int *)(v781 + 184));
                                  }
                                }
                              }
                            }
                            else if (v601 == 2)
                            {
                              v768 = (void *)objc_msgSend(v600, "geometryDescriptors");
                              if (v723)
                              {
                                v602 = 0;
                                v603 = v820;
                                v604 = v822;
                                v761 = (char *)v820 + 152;
                                v765 = v821.i64[1];
                                v757 = (_QWORD *)(v821.i64[0] + 152);
                                do
                                {
                                  v605 = (void *)objc_msgSend(v768, "objectAtIndexedSubscript:", v602);
                                  v606 = (char *)objc_msgSend(v605, "controlPointBuffer");
                                  v607 = objc_msgSend(v605, "controlPointBufferOffset");
                                  v608 = objc_msgSend(v606, "contents");
                                  v609 = objc_msgSend(v606, "gpuAddress");
                                  v610 = objc_msgSend(v606, "length");
                                  v611 = &v606[*MEMORY[0x24BE51650]];
                                  *(_QWORD *)v823 = v609 + v607;
                                  *(_QWORD *)&v823[8] = v607 + v608;
                                  *(_QWORD *)&v823[16] = v610;
                                  *(_QWORD *)&v823[24] = v611;
                                  LODWORD(v607) = objc_msgSend(v605, "controlPointStride");
                                  v612 = objc_msgSend(v605, "controlPointFormat");
                                  v613 = (char *)objc_msgSend(v605, "radiusBuffer");
                                  v614 = objc_msgSend(v605, "radiusBufferOffset");
                                  v615 = objc_msgSend(v613, "contents");
                                  v616 = objc_msgSend(v613, "gpuAddress");
                                  v617 = objc_msgSend(v613, "length");
                                  v618 = &v613[*MEMORY[0x24BE51650]];
                                  *(_QWORD *)&v802 = v616 + v614;
                                  *((_QWORD *)&v802 + 1) = v614 + v615;
                                  *(_QWORD *)&v803 = v617;
                                  *((_QWORD *)&v803 + 1) = v618;
                                  LODWORD(v614) = objc_msgSend(v605, "radiusStride");
                                  v619 = objc_msgSend(v605, "radiusFormat");
                                  v620 = objc_msgSend(v605, "controlPointCount");
                                  v621 = (uint64_t)v603 + *(_QWORD *)(v771 + 8 * v602);
                                  v815 = v761;
                                  v816 = v757;
                                  v817 = v765;
                                  v818 = v604;
                                  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyControlPoints(v784, v823, v607, v612, &v802, v614, v619, v620, v621, v604, (uint64_t *)&v815);
                                  ++v602;
                                }
                                while (v723 != v602);
                              }
                            }
                          }
                          if ((v644 & 1) == 0
                          {
                          }
                          v645 = *(_QWORD *)(v784 + 8);
                          v646 = *(_QWORD *)(v645 + 88);
                          v647 = (char *)v820;
                          v648 = v822;
                          *(_QWORD *)(v646 + 6096) = v820;
                          v772 = v647;
                          *(_QWORD *)(*(_QWORD *)(v646 + 1792) + 576) = v647;
                          *(_QWORD *)(v646 + 5320) = v648;
                          *(_QWORD *)(v646 + 7136) |= 0x20uLL;
                          *(_DWORD *)(v646 + 7152) |= 1u;
                          if (v730)
                          {
                            v649 = *(_QWORD *)(v645 + 88);
                            *(_QWORD *)(v649 + 6200) = v730;
                            *(_QWORD *)(*(_QWORD *)(v649 + 1792) + 680) = v730;
                            *(_QWORD *)(v649 + 5424) = v724;
                            *(_QWORD *)(v649 + 7136) |= 0x40000uLL;
                            *(_DWORD *)(v649 + 7152) |= 1u;
                          }
                          if (v732)
                          {
                            v650 = *(_QWORD *)(v645 + 88);
                            *(_QWORD *)(v650 + 6192) = v732;
                            *(_QWORD *)(*(_QWORD *)(v650 + 1792) + 672) = v732;
                            *(_QWORD *)(v650 + 5416) = v725;
                            *(_QWORD *)(v650 + 7136) |= 0x20000uLL;
                            *(_DWORD *)(v650 + 7152) |= 1u;
                          }
                          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v737, v754);
                          memset(v823, 0, 32);
                          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(v784, v744 + 16, v776, (uint64_t *)v823, 1, 0);
                          if (*(_BYTE *)(v781 + 273))
                            objc_msgSend(*(id *)(v784 + 8), "setBuffer:offset:atIndex:", *(_QWORD *)(v784 + 16), 0, 10);
                          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, v731, v754);
                          memset(v823, 0, 32);
                          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dispatchWithIndirectThreadCountExtended(v784, v744 + 12, v776, (uint64_t *)v823, 1, 1);
                          if (objc_msgSend(a6, "isInstanceDescriptor"))
                          {
                            *(_QWORD *)v823 = v784;
                            *(_QWORD *)&v823[8] = &v820;
                            v651 = (void *)objc_opt_class();
                            if (objc_msgSend(v651, "isSubclassOfClass:", objc_opt_class()))
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::G9::Encoders *)#1}::operator()<MTLIndirectInstanceAccelerationStructureDescriptor>((uint64_t *)v823, a6);
                            else
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::G9::Encoders *)#1}::operator()<MTLInstanceAccelerationStructureDescriptor>((uint64_t *)v823, a6);
                            goto LABEL_737;
                          }
                          v652 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                          v653 = v652[20];
                          v654 = v653 + 31;
                          if ((unint64_t)(v653 + 31) > v652[19])
                          {
                            v721 = AGX::DataBufferAllocator<34ul>::growNoInline(v652 + 2, 3, 0);
                            v653 = v652[20];
                            if (!v721)
                            {
LABEL_716:
                              v655 = (_QWORD *)((v653 + 15) & 0xFFFFFFFFFFFFFFF0);
                              v656 = (char *)v655 + v652[22];
                              v657 = (int)*MEMORY[0x24BE51650];
                              *v655 = 0;
                              v652[20] = v655 + 2;
                              v658 = *(_QWORD *)(v652[5] + 224) + v657;
                              *(_QWORD *)v823 = v656;
                              *(_QWORD *)&v823[8] = v655;
                              *(_QWORD *)&v823[16] = 8;
                              *(_QWORD *)&v823[24] = v658;
                              if ((v722 & 1) == 0 && objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "count"))
                              {
                                v659 = 0;
                                do
                                {
                                  v660 = (void *)objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "objectAtIndexedSubscript:", v659);
                                  v661 = v660;
                                  if (v751 == 1)
                                  {
                                    v662 = objc_msgSend(v660, "boundingBoxCount");
                                  }
                                  else if (v751)
                                  {
                                    v662 = objc_msgSend(v660, "segmentCount");
                                  }
                                  else
                                  {
                                    v662 = objc_msgSend(v660, "triangleCount");
                                  }
                                  v663 = v662;
                                  if (v662)
                                  {
                                    v664 = objc_msgSend(v661, "primitiveDataElementSize");
                                    v665 = v664;
                                    if (v664 < 2)
                                    {
                                      v666 = 1;
                                    }
                                    else if (v664 > 0x10)
                                    {
                                      v666 = 32;
                                    }
                                    else
                                    {
                                      v666 = 1 << -__clz(v664 - 1);
                                    }
                                    v667 = (char *)objc_msgSend(v661, "primitiveDataBuffer");
                                    v668 = objc_msgSend(v661, "primitiveDataBufferOffset");
                                    v669 = objc_msgSend(v667, "contents");
                                    v670 = objc_msgSend(v667, "gpuAddress");
                                    v671 = objc_msgSend(v667, "length");
                                    v672 = &v667[*MEMORY[0x24BE51650]];
                                    *(_QWORD *)&v802 = v670 + v668;
                                    *((_QWORD *)&v802 + 1) = v668 + v669;
                                    *(_QWORD *)&v803 = v671;
                                    *((_QWORD *)&v803 + 1) = v672;
                                    objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v667, 1);
                                    LODWORD(v667) = objc_msgSend(v661, "primitiveDataStride");
                                    v673 = objc_msgSend(v661, "primitiveDataElementSize");
                                    v674 = *(_QWORD *)(v749 + 8 * v659);
                                    v815 = &v772[v674];
                                    v816 = (_QWORD *)(v674 + v821.i64[0]);
                                    v817 = v821.i64[1];
                                    v818 = v648;
                                    v812.i64[0] = (uint64_t)(v772 + 136);
                                    v812.i64[1] = v821.i64[0] + 136;
                                    v813 = v821.i64[1];
                                    v814 = (char *)v648;
                                    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeStridedCopy(v784, (uint64_t *)&v802, (uint64_t *)v823, (int)v667, (_QWORD *)v663, 1u, v673, (uint64_t *)&v815, v812.i64, (v665 + v666 - 1) & -v666);
                                  }
                                  ++v659;
                                }
                                while (objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "count") > v659);
                              }
                              v675 = (_QWORD *)objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "count");
                              if (v740)
                              {
                                *(_QWORD *)&v802 = v740 + 24;
                                *((_QWORD *)&v802 + 1) = v728 + 24;
                                v803 = v734;
                                v815 = v772 + 80;
                                v816 = (_QWORD *)(v821.i64[0] + 80);
                                v817 = v821.i64[1];
                                v818 = v648;
                                v812.i64[0] = (uint64_t)(v772 + 112);
                                v812.i64[1] = v821.i64[0] + 112;
                                v813 = v821.i64[1];
                                v814 = (char *)v648;
                                AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeStridedCopy(v784, (uint64_t *)&v802, (uint64_t *)v823, 32, v675, 1u, 8, (uint64_t *)&v815, v812.i64, 8);
                              }
                              v676 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                              *(_QWORD *)(v676 + 6096) = v772;
                              *(_QWORD *)(*(_QWORD *)(v676 + 1792) + 576) = v772;
                              *(_QWORD *)(v676 + 5320) = v648;
                              *(_QWORD *)(v676 + 7136) |= 0x20uLL;
                              *(_DWORD *)(v676 + 7152) |= 1u;
LABEL_737:
                              if (!*v729)
                                goto LABEL_747;
                              v677 = *(_QWORD *)(a4 + 592);
                              v678 = v677 + 8 * *(int *)(a4 + 604);
                              v679 = *(char **)(v678 + 24);
                              if (*(_DWORD *)(a4 + 600) == 3)
                                v680 = *(_QWORD *)(v677 + 16);
                              else
                                v680 = 0;
                              v681 = *(_QWORD *)(v678 + 40);
                              v682 = *(_QWORD *)(a4 + 608);
                              v683 = objc_msgSend(v679, "contents");
                              v684 = objc_msgSend(v679, "gpuAddress");
                              v685 = objc_msgSend(v679, "length");
                              v686 = v681 + v680 + v682;
                              v687 = &v679[*MEMORY[0x24BE51650]];
                              *(_QWORD *)v823 = v684 + v686;
                              *(_QWORD *)&v823[8] = v686 + v683;
                              *(_QWORD *)&v823[16] = v685;
                              *(_QWORD *)&v823[24] = v687;
                              MTLResourceListAddResource();
                              IOGPUResourceListAddResource();
                              v688 = *(_QWORD *)(a4 + 560);
                              v689 = v688 + 8 * *(int *)(a4 + 572);
                              v690 = *(char **)(v689 + 24);
                              if (*(_DWORD *)(a4 + 568) == 3)
                                v691 = *(_QWORD *)(v688 + 16);
                              else
                                v691 = 0;
                              v692 = *(_QWORD *)(v689 + 40);
                              v693 = *(_QWORD *)(a4 + 576);
                              v694 = objc_msgSend(v690, "contents");
                              v695 = objc_msgSend(v690, "gpuAddress");
                              v696 = objc_msgSend(v690, "length");
                              v697 = v692 + v691 + v693;
                              v698 = &v690[*MEMORY[0x24BE51650]];
                              v699 = v695 + v697;
                              v700 = v697 + v694;
                              *(_QWORD *)&v802 = v699;
                              *((_QWORD *)&v802 + 1) = v700;
                              *(_QWORD *)&v803 = v696;
                              *((_QWORD *)&v803 + 1) = v698;
                              MTLResourceListAddResource();
                              IOGPUResourceListAddResource();
                              v701 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                              v702 = v701[20];
                              v703 = v702 + 31;
                              if ((unint64_t)(v702 + 31) > v701[19])
                              {
                                v720 = AGX::DataBufferAllocator<34ul>::growNoInline(v701 + 2, 3, 0);
                                v702 = v701[20];
                                if (!v720)
                                  goto LABEL_746;
                                v703 = v702 + 31;
                                if ((unint64_t)(v702 + 31) > v701[19])
                                  abort();
                              }
                              v701[21] = v703;
LABEL_746:
                              v704 = (_QWORD *)((v702 + 15) & 0xFFFFFFFFFFFFFFF0);
                              v705 = (int)*MEMORY[0x24BE51650];
                              v815 = (char *)v704 + v701[22];
                              v816 = v704;
                              *v704 = 0;
                              v701[20] = v704 + 2;
                              v706 = *(_QWORD *)(v701[5] + 224) + v705;
                              v817 = 8;
                              v818 = v706;
                              v812.i64[0] = (uint64_t)v820 + 120;
                              v812.i64[1] = v821.i64[0] + 120;
                              v813 = v821.i64[1];
                              v814 = (char *)v822;
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeStridedCopy(v784, (uint64_t *)&v802, (uint64_t *)&v815, 4, (_QWORD *)0x44, 1u, 4, (uint64_t *)&v820, v812.i64, 4);
                              v812.i64[0] = v699 + 256;
                              v812.i64[1] = v700 + 256;
                              v813 = v696;
                              v814 = v698;
                              v809.i64[0] = (uint64_t)v820 + 272;
                              v809.i64[1] = v821.i64[0] + 272;
                              v810 = v821.i64[1];
                              v811 = v822;
                              *(_QWORD *)&v806 = (char *)v820 + 120;
                              *((_QWORD *)&v806 + 1) = v821.i64[0] + 120;
                              v807 = v821.i64[1];
                              v808 = v822;
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeStridedCopy(v784, (uint64_t *)v823, (uint64_t *)&v815, 4, &v812, 0, 4, v809.i64, (uint64_t *)&v806, 4);
LABEL_747:
                              v707 = *(_QWORD *)(v784 + 8);
                              v708 = *(_QWORD *)(v707 + 88);
                              v709 = v820;
                              v710 = v822;
                              *(_QWORD *)(v708 + 6096) = v820;
                              *(_QWORD *)(*(_QWORD *)(v708 + 1792) + 576) = v709;
                              *(_QWORD *)(v708 + 5320) = v710;
                              *(_QWORD *)(v708 + 7136) |= 0x20uLL;
                              *(_DWORD *)(v708 + 7152) |= 1u;
                              v711 = *(_QWORD *)(v707 + 88);
                              v712 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 135, 0);
                              v713 = *(_QWORD *)(v711 + 1776);
                              *(_QWORD *)(v711 + 1776) = v712;
                              v714 = *(_QWORD *)(v712 + 16);
                              *(_BYTE *)(v711 + 1745) = *(_BYTE *)(v714 + 216);
                              *(_BYTE *)(v711 + 1746) = *(_BYTE *)(v714 + 1992);
                              if (*(_DWORD *)(v711 + 1736) == 1)
                              {
                                if (!*(_BYTE *)(v711 + 7672))
                                {
                                  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v711 + 1624), (_QWORD *)(v711 + 16));
                                  v719 = *(_DWORD *)(v711 + 7316);
                                  if (*(_DWORD *)(v711 + 7312) < v719)
                                    *(_DWORD *)(v711 + 7312) = v719;
                                  *(_DWORD *)(v711 + 7316) = 0;
                                  if (!v713)
                                    goto LABEL_753;
LABEL_752:
                                  *(_QWORD *)(v711 + 1776) = v713;
                                  v716 = *(_QWORD *)(v713 + 16);
                                  *(_BYTE *)(v711 + 1745) = *(_BYTE *)(v716 + 216);
                                  *(_BYTE *)(v711 + 1746) = *(_BYTE *)(v716 + 1992);
LABEL_753:
                                  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildAndEncodeRiaBvh(BVHDescriptor const*,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::ScratchAllocator *,void const*,unsigned long long,unsigned long long,AGXA10FamilyRayTracingAccelerationStructure *,MTLAccelerationStructureDescriptor *,AGXA10FamilyBuffer *,unsigned long)::verify)
                                  {
                                    v717 = **(void ***)(*(_QWORD *)(v784 + 8) + 88);
                                    v785[0] = MEMORY[0x24BDAC760];
                                    v785[1] = 3221225472;
                                    v785[2] = ___ZN3AGX24RayTracingGPUBuilderGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26encodeBuildAndEncodeRiaBvhEPK13BVHDescriptorPNS5_16ScratchAllocatorEPKvyyP43AGXA10FamilyRayTracingAccelerationStructureP34MTLAccelerationStructureDescriptorP18AGXA10FamilyBufferm_block_invoke;
                                    v785[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
                                    v785[4] = v726;
                                    objc_msgSend(v717, "addCompletedHandler:", v785);
                                  }
                                  goto LABEL_755;
                                }
                                v715 = *(_QWORD *)(v711 + 7688);
                                if (*(_QWORD *)(v711 + 7680) != v715)
                                {
                                  *(_BYTE *)(v715 - 8) = 1;
                                  *(_BYTE *)(v715 - 7) = *(_BYTE *)(*(_QWORD *)(v711 + 1768) + 458);
                                }
                              }
                              if (!v713)
                                goto LABEL_753;
                              goto LABEL_752;
                            }
                            v654 = v653 + 31;
                            if ((unint64_t)(v653 + 31) > v652[19])
                              abort();
                          }
                          v652[21] = v654;
                          goto LABEL_716;
                        }
                        v380 = *(_QWORD *)(v767 + 40);
                        *(_DWORD *)(v781 + 264) = v379;
                        if (*(_QWORD *)(v767 + 32))
                        {
                          v381 = 0;
                          v382 = 0;
                          do
                          {
                            if (v382 <= objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "objectAtIndexedSubscript:", v381), "primitiveDataElementSize"))v382 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "objectAtIndexedSubscript:", v381), "primitiveDataElementSize");
                            ++v381;
                          }
                          while (*(_QWORD *)(v767 + 40) > v381);
                          v384 = v382 != 0;
                        }
                        else
                        {
                          v384 = 0;
                        }
                        if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") <= 1)
                          v385 = 22;
                        else
                          v385 = 84;
                        if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") <= 1)
                          v386 = 0;
                        else
                          v386 = 76;
                        v731 = v386;
                        *(_DWORD *)(v781 + 224) = 1;
                        v387 = objc_msgSend(a6, "motionKeyframeCount");
                        *(_DWORD *)(v781 + 184) = v387;
                        if (v387 < 2)
                        {
                          v739 = 0;
                          v391 = v781;
                        }
                        else
                        {
                          objc_msgSend(a6, "motionStartTime");
                          *(_DWORD *)(v781 + 192) = v388;
                          objc_msgSend(a6, "motionEndTime");
                          *(_DWORD *)(v781 + 196) = v389;
                          *(_DWORD *)(v781 + 200) = objc_msgSend(a6, "motionStartBorderMode");
                          v390 = objc_msgSend(a6, "motionEndBorderMode");
                          v391 = v781;
                          *(_DWORD *)(v781 + 204) = v390;
                          *(_DWORD *)(v781 + 188) = 64;
                          v739 = 1;
                        }
                        *(_DWORD *)(v391 + 208) = 1;
                        v392 = *(_DWORD *)(v767 + 128);
                        if (v392 <= 5)
                        {
                          if (((1 << v392) & 9) == 0)
                          {
                            if (((1 << v392) & 0x12) != 0)
                            {
                              v725 = 0;
                              v771 = 0;
                              v732 = 0;
                              if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") < 2)
                              {
                                *(_DWORD *)(v781 + 220) = 4;
                                v393 = 36;
                                v394 = 1;
                                v764 = 23;
                                v737 = 5;
                                v756 = 25;
                                v395 = 24;
                              }
                              else
                              {
                                *(_DWORD *)(v781 + 220) = 5;
                                v393 = 64;
                                v394 = 1;
                                v764 = 85;
                                v737 = 81;
                                v756 = 87;
                                v395 = 86;
                              }
                              v760 = v395;
                              v751 = 1;
                              if (!v384)
                                goto LABEL_376;
                            }
                            else
                            {
                              if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") < 2)
                              {
                                *(_DWORD *)(v781 + 220) = 6;
                                *(_BYTE *)(v781 + 278) = 1;
                                if ((v400 & 1) == 0
                                {
                                  getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode = 1;
                                }
                                if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode != 1
                                  || (objc_msgSend(a6, "usage") & 1) != 0)
                                {
                                  v401 = 0;
                                }
                                else if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode)
                                {
                                  v401 = 2;
                                }
                                else
                                {
                                  v401 = 0;
                                }
                                v764 = 23;
                                v398 = v781;
                                *(_BYTE *)(v781 + 281) = v401;
                                v737 = 7;
                                v756 = 25;
                                v760 = 24;
                                v393 = 24;
                              }
                              else
                              {
                                v393 = 32;
                                v398 = v781;
                                *(_DWORD *)(v781 + 220) = 7;
                                v764 = 85;
                                v737 = 83;
                                v756 = 87;
                                v760 = 86;
                              }
                              AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v823, v784, 8 * v380 * *(unsigned int *)(v398 + 184), 0);
                              v732 = *(_QWORD *)v823;
                              v725 = *(_QWORD *)&v823[24];
                              v771 = *(_QWORD *)&v823[8];
                              v394 = 0;
                              *(_QWORD *)(v781 + 240) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calculateCurveControlPointTotalSizeAndOffsets<true>(v767, a6, *(uint64_t *)&v823[8]);
                              v751 = 2;
                              if (!v384)
                                goto LABEL_376;
                            }
LABEL_539:
                            if (v392 != 3 && v392)
                            {
                              v537 = objc_msgSend(a6, "motionKeyframeCount");
                              if (v394)
                              {
                                if (v537 <= 1)
                                  v538 = 48;
                                else
                                  v538 = 96;
                                *(_DWORD *)(v781 + 216) = v538;
                                v534 = (unint64_t)objc_msgSend(a6, "motionKeyframeCount") > 1;
                                v535 = 6;
                                v536 = 82;
                                goto LABEL_556;
                              }
                              if (v537 <= 1)
                                v540 = 32;
                              else
                                v540 = 48;
                              *(_DWORD *)(v781 + 216) = v540;
                            }
                            else
                            {
                              v532 = *(_DWORD *)(v767 + 132);
                              if (v532 == 2)
                              {
                                if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") <= 1)
                                  v539 = 96;
                                else
                                  v539 = 128;
                                *(_DWORD *)(v781 + 216) = v539;
                                v534 = (unint64_t)objc_msgSend(a6, "motionKeyframeCount") > 1;
                                v535 = 4;
                                v536 = 80;
                                goto LABEL_556;
                              }
                              if (!v532)
                              {
                                if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") <= 1)
                                  v533 = 64;
                                else
                                  v533 = 96;
                                *(_DWORD *)(v781 + 216) = v533;
                                v534 = (unint64_t)objc_msgSend(a6, "motionKeyframeCount") > 1;
                                v535 = 2;
                                v536 = 78;
LABEL_556:
                                if (v534)
                                  v535 = v536;
                                v737 = v535;
                              }
                            }
                            AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v823, v784, 8 * v380, 0);
                            v730 = *(_QWORD *)v823;
                            v724 = *(_QWORD *)&v823[24];
                            v749 = *(_QWORD *)&v823[8];
                            v722 = 0;
                            *(_QWORD *)(v781 + 232) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calculateOutOfLinePerPrimitiveDataTotalSizeAndOffsets<true>(v767, a6, *(_QWORD **)&v823[8]);
                            goto LABEL_423;
                          }
                          v396 = *(_DWORD *)(v767 + 132);
                          if (v396 == 2)
                          {
                            if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") >= 2)
                            {
                              v725 = 0;
                              v771 = 0;
                              v732 = 0;
                              v394 = 0;
                              v751 = 0;
                              *(_DWORD *)(v781 + 220) = 3;
                              v393 = 116;
                              v764 = 85;
                              v397 = 79;
LABEL_531:
                              v737 = v397;
                              v756 = 87;
                              v760 = 86;
                              if (v384)
                                goto LABEL_539;
LABEL_376:
                              if (v393 >= 5)
                              {
                                if (v393 >= 0x21)
                                {
                                  if (v393 >= 0x31)
                                  {
                                    if (v393 >= 0x41)
                                    {
                                      if (v393 <= 0x60)
                                        v399 = 96;
                                      else
                                        v399 = 128;
                                    }
                                    else
                                    {
                                      v399 = 64;
                                    }
                                  }
                                  else
                                  {
                                    v399 = 48;
                                  }
                                }
                                else
                                {
                                  v399 = 32;
                                }
                              }
                              else
                              {
                                v399 = 4;
                              }
                              v724 = 0;
                              v749 = 0;
                              v730 = 0;
                              *(_DWORD *)(v781 + 216) = v399;
                              goto LABEL_422;
                            }
                            v725 = 0;
                            v771 = 0;
                            v732 = 0;
                            v394 = 0;
                            v751 = 0;
                            *(_DWORD *)(v781 + 220) = 2;
                            *(_BYTE *)(v781 + 278) = 1;
                            v393 = 64;
                            v764 = 23;
                            v531 = 3;
                          }
                          else
                          {
                            if (!v396)
                            {
                              if ((unint64_t)objc_msgSend(a6, "motionKeyframeCount") >= 2)
                              {
                                v725 = 0;
                                v771 = 0;
                                v732 = 0;
                                v394 = 0;
                                v751 = 0;
                                *(_DWORD *)(v781 + 220) = 1;
                                v393 = 88;
                                v764 = 85;
                                v397 = 77;
                                goto LABEL_531;
                              }
                              v725 = 0;
                              v771 = 0;
                              v732 = 0;
                              v394 = 0;
                              v751 = 0;
                              *(_DWORD *)(v781 + 220) = 0;
                              v737 = 1;
                              *(_BYTE *)(v781 + 278) = 1;
                              v393 = 48;
                              goto LABEL_535;
                            }
                            v725 = 0;
                            v771 = 0;
                            v732 = 0;
                            v394 = 0;
                            v751 = 0;
                            v393 = 0;
                            v764 = 23;
                            v531 = 1;
                          }
                          v737 = v531;
LABEL_538:
                          v756 = 25;
                          v760 = 24;
                          if (v384)
                            goto LABEL_539;
                          goto LABEL_376;
                        }
                        v737 = 1;
                        v725 = 0;
                        v771 = 0;
                        v732 = 0;
                        v394 = 0;
                        v393 = 0;
                        v751 = -1;
LABEL_535:
                        v764 = 23;
                        goto LABEL_538;
                      }
                      v364 = v363 + v362;
                      if ((unint64_t)(v363 + v362) > v360[19])
                        abort();
                    }
                    v360[21] = v364;
                    goto LABEL_332;
                  }
                  v254 = (char *)objc_msgSend(a6, "motionTransformBuffer");
                  v255 = objc_msgSend(a6, "motionTransformBufferOffset");
                  objc_msgSend(v254, "contents");
                  v256 = objc_msgSend(v254, "gpuAddress");
                  objc_msgSend(v254, "length");
                  v257 = (int)*MEMORY[0x24BE51650];
                  objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v254, 1);
                  v258 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                  *(_QWORD *)(v258 + 6080) = v256 + v255;
                  *(_QWORD *)(*(_QWORD *)(v258 + 1792) + 560) = v256 + v255;
                  *(_QWORD *)(v258 + 5304) = &v254[v257];
                  *(_QWORD *)(v258 + 7136) |= 8uLL;
                  *(_DWORD *)(v258 + 7152) |= 1u;
                  v259 = objc_msgSend(a6, "motionTransformStride");
                  if (objc_msgSend(a6, "motionTransformType"))
                    v260 = 64;
                  else
                    v260 = 48;
                  if (!v259)
                    LODWORD(v259) = v260;
                  v261 = *(_QWORD **)(*(_QWORD *)(v784 + 8) + 88);
                  v262 = v261[20];
                  v263 = v262 + 31;
                  if ((unint64_t)(v262 + 31) <= v261[19])
                    goto LABEL_218;
                  v548 = AGX::DataBufferAllocator<34ul>::growNoInline(v261 + 2, 3, 0);
                  v262 = v261[20];
                  if (v548)
                  {
                    v263 = v262 + 31;
                    if ((unint64_t)(v262 + 31) > v261[19])
                      abort();
LABEL_218:
                    v261[21] = v263;
                  }
                  v264 = (_DWORD *)((v262 + 15) & 0xFFFFFFFFFFFFFFF0);
                  v265 = (char *)v264 + v261[22];
                  v266 = (int)*MEMORY[0x24BE51650];
                  *v264 = v259;
                  v261[20] = v264 + 4;
                  v267 = *(_QWORD *)(v261[5] + 224) + v266;
                  v268 = v784;
                  v269 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
                  *(_QWORD *)(v269 + 6088) = v265;
                  *(_QWORD *)(*(_QWORD *)(v269 + 1792) + 568) = v265;
                  *(_QWORD *)(v269 + 5312) = v267;
                  *(_QWORD *)(v269 + 7136) |= 0x10uLL;
                  *(_DWORD *)(v269 + 7152) |= 1u;
                  goto LABEL_221;
                default:
                  goto LABEL_231;
              }
            }
LABEL_129:
            *(_QWORD *)(v153 + 1776) = v165;
            v168 = *(_QWORD *)(v165 + 16);
            *(_BYTE *)(v153 + 1745) = *(_BYTE *)(v168 + 216);
            *(_BYTE *)(v153 + 1746) = *(_BYTE *)(v168 + 1992);
            goto LABEL_130;
          }
          v167 = *(_QWORD *)(v153 + 7688);
          if (*(_QWORD *)(v153 + 7680) != v167)
          {
            *(_BYTE *)(v167 - 8) = 1;
            *(_BYTE *)(v167 - 7) = *(_BYTE *)(*(_QWORD *)(v153 + 1768) + 458);
          }
        }
        if (!v165)
          goto LABEL_130;
        goto LABEL_129;
      }
      v155 = v154 + 31;
      if ((unint64_t)(v154 + 31) > *(_QWORD *)(v153 + 152))
        abort();
    }
    *(_QWORD *)(v153 + 168) = v155;
    goto LABEL_124;
  }
  v41 = objc_msgSend(v777, "buffer");
  v42 = objc_msgSend(v777, "bufferOffset");
  *(_QWORD *)(a3 + 32) = a7;
  *(_QWORD *)(a3 + 40) = v42;
  *(_QWORD *)(a3 + 48) = (a8 + 63) & 0xFFFFFFFFFFFFFFC0;
  v43 = *(_QWORD *)(a3 + 64);
  if (v43 <= *(_QWORD *)(a3 + 80))
    v43 = *(_QWORD *)(a3 + 80);
  if (v43 <= *(_QWORD *)(a3 + 96))
    v43 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 16) = (v43 + 63) & 0xFFFFFFFFFFFFFFC0;
  *(_QWORD *)(a3 + 24) = v41;
  *(_BYTE *)a3 = 1;
  v44 = (void *)objc_msgSend(v777, "buffer");
  v45 = objc_msgSend(v777, "bufferOffset");
  if ((v46 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
  }
  v47 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::kBvhVersions[AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride & ~(AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride >> 31)];
  if ((_DWORD)a2)
    v48 = 0x20000000;
  else
    v48 = 0;
  v49 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
  v816 = 0;
  v815 = 0;
  v817 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calcAccelerationStructureSizes((unint64_t *)&v815, *(_QWORD *)v784, a6, (void *)v767);
  objc_msgSend(v44, "contents");
  v50 = objc_msgSend(v44, "gpuAddress");
  objc_msgSend(v44, "length");
  objc_msgSend(*(id *)(v784 + 8), "useResource:usage:", v44, 2);
  if (v767)
  {
    v51 = v767;
    v779 = ((*(_DWORD *)(v767 + 24) + 2047) >> 9) & 0x7FFFFC;
  }
  else
  {
    v779 = 0;
    v51 = 0;
  }
  v52 = v51 == 0;
  memset(v823, 0, 24);
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)v823, *(_QWORD *)(v784 + 8), 512, 1);
  v53 = *(_QWORD *)v823;
  v54 = *(_QWORD *)&v823[8];
  v55 = *(_QWORD *)&v823[16];
  bzero(*(void **)v823, 0x200uLL);
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setSmallBVHBuildParams(&v802, v784, a6, v767, v53, a4, (uint64_t)v788[0]);
  if (!v52 && *(_QWORD *)(v767 + 40) && !*(_DWORD *)(v767 + 128) && *(_DWORD *)(v767 + 132) == 2)
  {
    v56 = objc_msgSend(*(id *)(v767 + 48), "usage");
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTrianglePairingForBvh<AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo>(v784, v767, *((uint64_t *)&v802 + 1), v56 & 1, v788, a4);
  }
  *(_QWORD *)v53 = v773;
  *(_DWORD *)(v53 + 8) = v48 & 0xE0000000 | v47 & 0x1FFFFFFF;
  v57 = (uint64_t)v815;
  *(_QWORD *)(v53 + 184) = v50 + v45;
  *(_QWORD *)(v53 + 192) = v57;
  v58 = *(_QWORD *)(a4 + 256);
  v59 = v58 + 8 * *(int *)(a4 + 268);
  v60 = (int)*MEMORY[0x24BE51650];
  if (*(_DWORD *)(a4 + 264) == 3)
    v61 = *(_QWORD *)(v58 + 16);
  else
    v61 = 0;
  v73 = *(unsigned int *)(a4 + 280);
  *(_QWORD *)(v53 + 200) = v61
                         + *(_QWORD *)(v59 + 40)
                         + *(_QWORD *)(a4 + 272)
                         + *(_QWORD *)(*(_QWORD *)(v59 + 24) + v60 + 8);
  *(_QWORD *)(v53 + 208) = v73;
  v74 = *(_QWORD *)(a4 + 32);
  v75 = v74 + 8 * *(int *)(a4 + 44);
  if (*(_DWORD *)(a4 + 40) == 3)
    v76 = *(_QWORD *)(v74 + 16);
  else
    v76 = 0;
  v77 = v76 + *(_QWORD *)(v75 + 40) + *(_QWORD *)(a4 + 48) + *(_QWORD *)(*(_QWORD *)(v75 + 24) + v60 + 8);
  v78 = *(_DWORD *)(a4 + 56) >> 2;
  *(_QWORD *)(v53 + 256) = v77;
  *(_DWORD *)(v53 + 264) = v78;
  v79 = *(_QWORD *)(a4 + 64);
  v80 = v79 + 8 * *(int *)(a4 + 76);
  if (*(_DWORD *)(a4 + 72) == 3)
    v81 = *(_QWORD *)(v79 + 16);
  else
    v81 = 0;
  v82 = v81 + *(_QWORD *)(v80 + 40) + *(_QWORD *)(a4 + 80) + *(_QWORD *)(*(_QWORD *)(v80 + 24) + v60 + 8);
  v83 = *(_DWORD *)(a4 + 88) >> 2;
  *(_QWORD *)(v53 + 296) = v82;
  *(_DWORD *)(v53 + 304) = v83;
  v84 = *(_QWORD *)(a4 + 96);
  v85 = v84 + 8 * *(int *)(a4 + 108);
  if (*(_DWORD *)(a4 + 104) == 3)
    v86 = *(_QWORD *)(v84 + 16);
  else
    v86 = 0;
  v87 = v86 + *(_QWORD *)(v85 + 40) + *(_QWORD *)(a4 + 112) + *(_QWORD *)(*(_QWORD *)(v85 + 24) + v60 + 8);
  v88 = *(_DWORD *)(a4 + 120) >> 2;
  *(_QWORD *)(v53 + 312) = v87;
  *(_DWORD *)(v53 + 320) = v88;
  v89 = *(_QWORD *)(a4 + 128);
  v90 = v89 + 8 * *(int *)(a4 + 140);
  if (*(_DWORD *)(a4 + 136) == 3)
    v91 = *(_QWORD *)(v89 + 16);
  else
    v91 = 0;
  v92 = v91 + *(_QWORD *)(v90 + 40) + *(_QWORD *)(a4 + 144) + *(_QWORD *)(*(_QWORD *)(v90 + 24) + v60 + 8);
  v93 = *(_DWORD *)(a4 + 152) >> 2;
  *(_QWORD *)(v53 + 328) = v92;
  *(_DWORD *)(v53 + 336) = v93;
  v94 = *(_QWORD *)(a4 + 160);
  v95 = v94 + 8 * *(int *)(a4 + 172);
  if (*(_DWORD *)(a4 + 168) == 3)
    v96 = *(_QWORD *)(v94 + 16);
  else
    v96 = 0;
  v97 = v96 + *(_QWORD *)(v95 + 40) + *(_QWORD *)(a4 + 176) + *(_QWORD *)(*(_QWORD *)(v95 + 24) + v60 + 8);
  v98 = *(_DWORD *)(a4 + 184) >> 2;
  *(_QWORD *)(v53 + 344) = v97;
  *(_DWORD *)(v53 + 352) = v98;
  v99 = *(_QWORD *)(a4 + 192);
  v100 = v99 + 8 * *(int *)(a4 + 204);
  if (*(_DWORD *)(a4 + 200) == 3)
    v101 = *(_QWORD *)(v99 + 16);
  else
    v101 = 0;
  v102 = v101 + *(_QWORD *)(v100 + 40) + *(_QWORD *)(a4 + 208) + *(_QWORD *)(*(_QWORD *)(v100 + 24) + v60 + 8);
  v103 = *(_DWORD *)(a4 + 216) >> 3;
  *(_QWORD *)(v53 + 360) = v102;
  *(_DWORD *)(v53 + 368) = v103;
  v104 = *(_QWORD *)(a4 + 224);
  v105 = v104 + 8 * *(int *)(a4 + 236);
  if (*(_DWORD *)(a4 + 232) == 3)
    v106 = *(_QWORD *)(v104 + 16);
  else
    v106 = 0;
  v107 = v106 + *(_QWORD *)(v105 + 40) + *(_QWORD *)(a4 + 240) + *(_QWORD *)(*(_QWORD *)(v105 + 24) + v60 + 8);
  v108 = *(_DWORD *)(a4 + 248) / 0x48u;
  *(_QWORD *)(v53 + 448) = v107;
  *(_WORD *)(v53 + 456) = v108;
  v109 = *(_QWORD *)(a4 + 320);
  v110 = v109 + 8 * *(int *)(a4 + 332);
  if (*(_DWORD *)(a4 + 328) == 3)
    v111 = *(_QWORD *)(v109 + 16);
  else
    v111 = 0;
  v112 = v111 + *(_QWORD *)(v110 + 40) + *(_QWORD *)(a4 + 336) + *(_QWORD *)(*(_QWORD *)(v110 + 24) + v60 + 8);
  v113 = *(_DWORD *)(a4 + 344) / 0x18u;
  *(_QWORD *)(v53 + 464) = v112;
  *(_WORD *)(v53 + 472) = v113;
  v114 = *(_QWORD *)(a4 + 352);
  v115 = v114 + 8 * *(int *)(a4 + 364);
  if (*(_DWORD *)(a4 + 360) == 3)
    v116 = *(_QWORD *)(v114 + 16);
  else
    v116 = 0;
  v117 = v116 + *(_QWORD *)(v115 + 40) + *(_QWORD *)(a4 + 368) + *(_QWORD *)(*(_QWORD *)(v115 + 24) + v60 + 8);
  v118 = *(_DWORD *)(a4 + 376) >> 2;
  *(_QWORD *)(v53 + 480) = v117;
  *(_WORD *)(v53 + 488) = v118;
  v119 = *(_QWORD *)(a4 + 288);
  v120 = v119 + 8 * *(int *)(a4 + 300);
  v121 = *(_QWORD *)(*(_QWORD *)(v120 + 24) + v60 + 8);
  if (*(_DWORD *)(a4 + 296) == 3)
    v122 = *(_QWORD *)(v119 + 16);
  else
    v122 = 0;
  v123 = v122 + *(_QWORD *)(v120 + 40) + *(_QWORD *)(a4 + 304) + v121;
  v124 = *(_DWORD *)(a4 + 312) >> 2;
  *(_QWORD *)(v53 + 496) = v123;
  *(_WORD *)(v53 + 504) = v124;
  v125 = (v779 << 20) | 0x100000;
  *(_DWORD *)(v53 + 216) = v125;
  v126 = v125;
  if (!*(_DWORD *)(v53 + 40))
  {
    v127 = *(_DWORD *)(v53 + 16);
    v125 += 48 * v127;
    v126 = v125 + 16 * v127;
  }
  *(_DWORD *)(v53 + 220) = v125;
  *(_DWORD *)(v53 + 224) = v126;
  *(_DWORD *)(v53 + 228) = (v126 + 7) & 0xFFFFFFF8;
  v128 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
  *(_QWORD *)(v128 + 6112) = v54;
  *(_QWORD *)(*(_QWORD *)(v128 + 1792) + 592) = v54;
  *(_QWORD *)(v128 + 5336) = v55;
  *(_QWORD *)(v128 + 7136) |= 0x80uLL;
  *(_DWORD *)(v128 + 7152) |= 1u;
  if ((v128 & 1) == 0
  {
    if (shouldDumpOrVerifyBVHs(void)::once != -1)
      dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_492);
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify = 0;
  }
  if (!AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    goto LABEL_93;
  v129 = (void *)objc_msgSend(*(id *)v784, "newBufferWithLength:options:", 18874760, 0);
  v130 = (_QWORD *)objc_msgSend(v129, "contents");
  v131 = objc_msgSend(v129, "gpuAddress");
  MTLResourceListAddResource();
  IOGPUResourceListAddResource();

  bzero(v130, 0x1200188uLL);
  v130[1] = -1;
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    v132 = **(void ***)(*(_QWORD *)(v784 + 8) + 88);
    *(_QWORD *)v823 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v823[8] = 3221225472;
    *(_QWORD *)&v823[16] = ___ZN3AGX24RayTracingGPUBuilderGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20encodeBuildMediumBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXA10FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke;
    *(_QWORD *)&v823[24] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
    *(_QWORD *)&v823[32] = v130;
    objc_msgSend(v132, "addCompletedHandler:", v823);
    v801 = 0;
    v800 = 0;
    if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    {
      v800 = v131;
      objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
    }
  }
  else
  {
LABEL_93:
    v801 = 0;
    v800 = 0;
  }
  v133 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 68, 0);
  v812 = vdupq_n_s64(1uLL);
  v813 = 1;
  v809 = v812;
  v810 = 1;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(v49, v133, (__int128 *)v812.i8, (__int128 *)v809.i8);
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    LODWORD(v801) = v801 + 1;
    objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
  }
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 69, 0);
  v134 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 70, 0);
  v135 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 71, 0);
  v136 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 72, 0);
  if (v767)
  {
    v137 = v767;
    v783 = (*(_DWORD *)(v767 + 24) + 2047) >> 11;
  }
  else
  {
    v783 = 0;
    v137 = 0;
  }
  v138 = v137 == 0;
  v821 = 0uLL;
  v820 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v820, *(_QWORD *)(v784 + 8), 16, 1);
  v139 = v820;
  v140 = v821;
  bzero(v820, 0x10uLL);
  if (v138)
    v141 = 0;
  else
    v141 = *(_DWORD *)(v767 + 24);
  *v139 = v141;
  v139[2] = v783;
  v142 = *(_QWORD *)(*(_QWORD *)(v784 + 8) + 88);
  *(_QWORD *)(v142 + 6120) = v140.i64[0];
  *(_QWORD *)(*(_QWORD *)(v142 + 1792) + 600) = v140.i64[0];
  *(_QWORD *)(v142 + 5344) = v140.i64[1];
  *(_QWORD *)(v142 + 7136) |= 0x100uLL;
  *(_DWORD *)(v142 + 7152) |= 1u;
  v792.i32[0] = 0;
  v780 = vdupq_n_s64(1uLL);
  do
  {
    objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v792, 4, 9);
    v820 = (void *)v783;
    v821 = v780;
    v806 = xmmword_232D73BA0;
    v807 = 1;
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(v49, v134, (__int128 *)&v820, &v806);
    v786 = xmmword_232D73BB0;
    v787 = 1;
    v798 = xmmword_232D73BA0;
    v799 = 1;
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(v49, v135, &v786, &v798);
    v795 = 1;
    v796 = v783;
    v797 = vdupq_n_s64(1uLL);
    v794 = xmmword_232D73BA0;
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(v49, v136, (__int128 *)&v796, &v794);
    if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    {
      LODWORD(v801) = v801 + 1;
      objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
    }
    ++v792.i32[0];
  }
  while (v792.i32[0] < 4u);
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    objc_msgSend(**(id **)(*(_QWORD *)(v784 + 8) + 88), "addCompletedHandler:", &__block_literal_global_3405);
    if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    {
      LODWORD(v801) = v801 + 1;
      objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
    }
  }
  v143 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 73, 0);
  v792 = vdupq_n_s64(1uLL);
  v793 = 1;
  v790 = xmmword_232D73BC0;
  v791 = 1;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(v49, v143, (__int128 *)v792.i8, &v790);
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    LODWORD(v801) = v801 + 1;
    objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
  }
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 74, 0);
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    LODWORD(v801) = v801 + 1;
    objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
  }
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 67, 0);
  if (AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXA10FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    LODWORD(v801) = v801 + 1;
    objc_msgSend(*(id *)(v784 + 8), "setBytes:length:atIndex:", &v800, 16, 4);
  }
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v784, 75, 0);
LABEL_755:
  if ((v718 & 1) == 0)
  {
  }
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26encodeBuildAndEncodeRiaBvhEPK13BVHDescriptorPNS5_16ScratchAllocatorEPKvyyP43AGXA10FamilyRayTracingAccelerationStructureP34MTLAccelerationStructureDescriptorP18AGXA10FamilyBufferm_block_invoke(uint64_t a1)
{
  bvhPrintDebugBufferContents(*(_QWORD *)(a1 + 32));
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodePrefixSum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t Pipeline;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _OWORD v25[2];

  if (a7)
  {
    if (a7 <= 0x1000)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeSubPrefixSum(a1, a2, a3, 0, 0, a6, a7);
      return;
    }
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeSubPrefixSum(a1, a2, a3, a4, a5, a6, a7);
    memset(v25, 0, sizeof(v25));
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodePrefixSum(a1, a4, a5, a4, 4 * ((a7 + 4095) >> 12) + a5, v25);
    LODWORD(v25[0]) = a7;
    objc_msgSend(*(id *)(a1 + 8), "setBuffer:offset:atIndex:", a2, a3, 9, *(_QWORD *)&v25[0]);
    objc_msgSend(*(id *)(a1 + 8), "setBuffer:offset:atIndex:", a4, a5, 10);
    v14 = *a6;
    v15 = *(_QWORD **)(a1 + 8);
    if (*a6)
    {
      v16 = v15[11];
      v17 = a6[3];
      *(_QWORD *)(v16 + 6144) = v14;
      *(_QWORD *)(*(_QWORD *)(v16 + 1792) + 624) = v14;
      *(_QWORD *)(v16 + 5368) = v17;
      *(_QWORD *)(v16 + 7136) |= 0x800uLL;
      *(_DWORD *)(v16 + 7152) |= 1u;
    }
    else
    {
      objc_msgSend(v15, "setBytes:length:atIndex:", v25, 4, 11);
    }
    Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, 123, 0);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
    v20 = *(_QWORD *)(v19 + 1776);
    *(_QWORD *)(v19 + 1776) = Pipeline;
    v21 = *(_QWORD *)(Pipeline + 16);
    *(_BYTE *)(v19 + 1745) = *(_BYTE *)(v21 + 216);
    *(_BYTE *)(v19 + 1746) = *(_BYTE *)(v21 + 1992);
    if (*(_DWORD *)(v19 + 1736) != 1)
    {
LABEL_11:
      if (!v20)
        return;
      goto LABEL_12;
    }
    if (*(_BYTE *)(v19 + 7672))
    {
      v22 = *(_QWORD *)(v19 + 7688);
      if (*(_QWORD *)(v19 + 7680) != v22)
      {
        *(_BYTE *)(v22 - 8) = 1;
        *(_BYTE *)(v22 - 7) = *(_BYTE *)(*(_QWORD *)(v19 + 1768) + 458);
      }
      goto LABEL_11;
    }
    AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v19 + 1624), (_QWORD *)(v19 + 16));
    v24 = *(_DWORD *)(v19 + 7316);
    if (*(_DWORD *)(v19 + 7312) < v24)
      *(_DWORD *)(v19 + 7312) = v24;
    *(_DWORD *)(v19 + 7316) = 0;
    if (v20)
    {
LABEL_12:
      *(_QWORD *)(v19 + 1776) = v20;
      v23 = *(_QWORD *)(v20 + 16);
      *(_BYTE *)(v19 + 1745) = *(_BYTE *)(v23 + 216);
      *(_BYTE *)(v19 + 1746) = *(_BYTE *)(v23 + 1992);
    }
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeSubPrefixSum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t Pipeline;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;

  v25 = a7;
  objc_msgSend(*(id *)(a1 + 8), "setBuffer:offset:atIndex:", a2, a3, 9);
  if (a4)
    v12 = a4;
  else
    v12 = a2;
  objc_msgSend(*(id *)(a1 + 8), "setBuffer:offset:atIndex:", v12, a5, 10);
  v13 = *a6;
  v14 = *(_QWORD **)(a1 + 8);
  if (*a6)
  {
    v15 = v14[11];
    v16 = a6[3];
    *(_QWORD *)(v15 + 6144) = v13;
    *(_QWORD *)(*(_QWORD *)(v15 + 1792) + 624) = v13;
    *(_QWORD *)(v15 + 5368) = v16;
    *(_QWORD *)(v15 + 7136) |= 0x800uLL;
    *(_DWORD *)(v15 + 7152) |= 1u;
  }
  else
  {
    objc_msgSend(v14, "setBytes:length:atIndex:", &v25, 4, 11);
  }
  if (a4)
    v17 = 122;
  else
    v17 = 121;
  Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(a1, v17, 0);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v20 = *(_QWORD *)(v19 + 1776);
  *(_QWORD *)(v19 + 1776) = Pipeline;
  v21 = *(_QWORD *)(Pipeline + 16);
  *(_BYTE *)(v19 + 1745) = *(_BYTE *)(v21 + 216);
  *(_BYTE *)(v19 + 1746) = *(_BYTE *)(v21 + 1992);
  if (*(_DWORD *)(v19 + 1736) != 1)
  {
LABEL_14:
    if (!v20)
      return;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v19 + 7672))
  {
    v22 = *(_QWORD *)(v19 + 7688);
    if (*(_QWORD *)(v19 + 7680) != v22)
    {
      *(_BYTE *)(v22 - 8) = 1;
      *(_BYTE *)(v22 - 7) = *(_BYTE *)(*(_QWORD *)(v19 + 1768) + 458);
    }
    goto LABEL_14;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v19 + 1624), (_QWORD *)(v19 + 16));
  v24 = *(_DWORD *)(v19 + 7316);
  if (*(_DWORD *)(v19 + 7312) < v24)
    *(_DWORD *)(v19 + 7312) = v24;
  *(_DWORD *)(v19 + 7316) = 0;
  if (v20)
  {
LABEL_15:
    *(_QWORD *)(v19 + 1776) = v20;
    v23 = *(_QWORD *)(v20 + 16);
    *(_BYTE *)(v19 + 1745) = *(_BYTE *)(v23 + 216);
    *(_BYTE *)(v19 + 1746) = *(_BYTE *)(v23 + 1992);
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  result = objc_msgSend(a3, "instanceCountBuffer");
  if (result)
  {
    v7 = (char *)result;
    v8 = objc_msgSend(a3, "instanceCountBufferOffset");
    v9 = objc_msgSend(v7, "contents");
    v10 = objc_msgSend(v7, "gpuAddress");
    v11 = objc_msgSend(v7, "length");
    v12 = &v7[*MEMORY[0x24BE51650]];
    *a1 = v10 + v8;
    a1[1] = v8 + v9;
    a1[2] = v11;
    a1[3] = v12;
    return objc_msgSend(*(id *)(a2 + 8), "useResource:usage:", v7, 1);
  }
  v13 = *(_QWORD **)(*(_QWORD *)(a2 + 8) + 88);
  v14 = v13[20];
  v15 = v14 + 31;
  if ((unint64_t)(v14 + 31) > v13[19])
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(v13 + 2, 3, 0);
    v14 = v13[20];
    if (!(_DWORD)result)
      goto LABEL_5;
    v15 = v14 + 31;
    if ((unint64_t)(v14 + 31) > v13[19])
      abort();
  }
  v13[21] = v15;
LABEL_5:
  v16 = (_DWORD *)((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int)*MEMORY[0x24BE51650];
  *a1 = (char *)v16 + v13[22];
  a1[1] = v16;
  *v16 = 0;
  v13[20] = v16 + 4;
  v18 = *(_QWORD *)(v13[5] + 224) + v17;
  a1[2] = 4;
  a1[3] = v18;
  return result;
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calcAccelerationStructureSizes(unint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  _QWORD v12[87];
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if ((v8 & 1) == 0
  {
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
  }
  v19 = 0;
  v9 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::calcRiaBvhSize((unint64_t)a4, a3, AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride & ~(AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride >> 31), (unint64_t *)&v19);
  *a1 = v9;
  a1[2] = 0;
  LOBYTE(v13[0]) = 0;
  v13[1] = v9;
  v13[2] = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  if (objc_msgSend(a4, "buildAlgorithm") - 1 > 1)
    result = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateTopDownScratch(v12, a2, (unint64_t)a4, a3, v13, v19);
  else
    result = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocatePLOCScratch(v12, (unint64_t)a4, v13);
  v11 = *((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1) <= *((_QWORD *)&v16 + 1))
    v11 = *((_QWORD *)&v16 + 1);
  if (v11 <= *((_QWORD *)&v17 + 1))
    v11 = *((_QWORD *)&v17 + 1);
  a1[1] = *((_QWORD *)&v18 + 1) + ((v11 + 63) & 0xFFFFFFFFFFFFFFC0) + 64;
  return result;
}

void AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setSmallBVHBuildParams(_OWORD *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  char v41;
  int v42;
  int v43;
  unsigned int v44;
  _BOOL4 v45;
  int v46;
  __int16 v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned __int8 v63;
  int v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned int v67;
  unsigned __int8 v68;
  unsigned int v69;
  unsigned __int8 v70;
  int v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74[4];
  uint64_t v75[4];
  _OWORD v76[4];
  _OWORD v77[8];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  *a1 = 0u;
  a1[1] = 0u;
  if (!a4)
  {
    v41 = objc_msgSend(a3, "isInstanceDescriptor");
    *(_WORD *)(a5 + 120) = 0;
    v16 = (_BYTE *)(a5 + 120);
    *(_WORD *)(a5 + 180) = 0;
    *(_BYTE *)(a5 + 182) = 0;
    *(_QWORD *)(a5 + 20) = 0;
    *(_QWORD *)(a5 + 12) = 0;
    *(_DWORD *)(a5 + 44) = 10;
    if ((v41 & 1) != 0)
      goto LABEL_6;
    v72 = (unsigned int *)(a5 + 24);
    LODWORD(v73) = 0;
    v17 = (_BYTE *)(a5 + 121);
LABEL_36:
    *(_DWORD *)(a5 + 40) = 1;
    if (objc_msgSend((id)objc_msgSend(a3, "geometryDescriptors"), "count"))
      objc_msgSend((id)objc_msgSend(a3, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    if (a4)
    {
      v42 = 0;
      v44 = *(_DWORD *)(a4 + 128);
      v43 = *(_DWORD *)(a4 + 132);
      v45 = v43 == 2;
      if (v44 > 7)
        goto LABEL_47;
      v46 = 1 << v44;
      if ((v46 & 0xD2) != 0)
      {
        v47 = 48;
        v48 = 4;
LABEL_46:
        *(_DWORD *)(a5 + 36) = v48;
        *(_WORD *)(a5 + 32) = v47;
LABEL_47:
        v71 = v42;
        objc_msgSend((id)a4, "primitiveMotion");
        AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v77, a2, objc_msgSend((id)a4, "resourceBufferLength"), 0);
        objc_msgSend((id)a4, "setResourceBufferContents:resourceBufferAddress:instanceBoundingBoxBufferAddress:useResourcesOnEncoder:", *((_QWORD *)&v77[0] + 1), *(_QWORD *)&v77[0], 0, *(_QWORD *)(a2 + 8));
        v49 = v77[1];
        *a1 = v77[0];
        a1[1] = v49;
        *(_QWORD *)(a5 + 48) = *(_QWORD *)a1;
        if (v45)
        {
          *(_QWORD *)(a5 + 64) = a7;
          *(_DWORD *)(a5 + 72) = 4 * v73;
          v50 = *(_QWORD *)(a6 + 480);
          v51 = v50 + 8 * *(int *)(a6 + 492);
          v52 = (int)*MEMORY[0x24BE51650];
          if (*(_DWORD *)(a6 + 488) == 3)
            v53 = *(_QWORD *)(v50 + 16);
          else
            v53 = 0;
          v54 = *(_DWORD *)(a6 + 504);
          *(_QWORD *)(a5 + 80) = v53
                               + *(_QWORD *)(v51 + 40)
                               + *(_QWORD *)(a6 + 496)
                               + *(_QWORD *)(*(_QWORD *)(v51 + 24) + v52 + 8);
          *(_DWORD *)(a5 + 88) = v54;
          v55 = *(_QWORD *)(a6 + 512);
          v56 = v55 + 8 * *(int *)(a6 + 524);
          v57 = *(_QWORD *)(*(_QWORD *)(v56 + 24) + v52 + 8);
          if (*(_DWORD *)(a6 + 520) == 3)
            v58 = *(_QWORD *)(v55 + 16);
          else
            v58 = 0;
          v59 = v58 + *(_QWORD *)(v56 + 40) + *(_QWORD *)(a6 + 528) + v57;
          v60 = *(_DWORD *)(a6 + 536);
          *(_QWORD *)(a5 + 96) = v59;
          *(_DWORD *)(a5 + 104) = v60;
        }
        LODWORD(v76[0]) = 0;
        AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newGeometryBuffer((uint64_t)v77, a2, a4, (void *)objc_msgSend(a3, "geometryDescriptors"), v76);
        *(_QWORD *)(a5 + 56) = *(_QWORD *)&v77[0];
        *(_DWORD *)(a5 + 16) = v76[0];
        *(_DWORD *)(a5 + 28) = objc_msgSend((id)objc_msgSend(a3, "geometryDescriptors"), "count");
        v61 = *(_DWORD *)(a2 + 32);
        v62 = *(unsigned __int8 *)(a5 + 181);
        if ((v63 & 1) == 0
        {
        }
        if (v61 > 1)
          v64 = v71;
        else
          v64 = 0;
        if (v62)
        {
          if ((v65 & 1) == 0
          {
          }
          *v16 = v64;
          *v17 = v64;
          if ((v64 & 1) == 0)
            return;
        }
        else
        {
          *v16 = v64;
          *v17 = v64;
          if (!v64)
            return;
        }
        if ((v66 & 1) == 0
        {
          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSmallBuilderQTBsPerNode(BVHDescriptor const*)::qtbsPerNode = 1065353216;
        }
        *(_DWORD *)(a5 + 124) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSmallBuilderQTBsPerNode(BVHDescriptor const*)::qtbsPerNode;
        v67 = *(_DWORD *)(a5 + 20);
        if ((v68 & 1) == 0
        {
          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSmallBuilderQTBsPerNode(BVHDescriptor const*)::qtbsPerNode = 1065353216;
        }
        v69 = (float)((float)(*(float *)&AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getSmallBuilderQTBsPerNode(BVHDescriptor const*)::qtbsPerNode
                                          * (float)v67)
                                  + 0.5);
        if (v69 <= 1)
          v69 = 1;
        *v72 = v69;
        if ((v70 & 1) == 0
        {
          AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&)::qtbEncodingOverride = -1;
        }
        *(_BYTE *)(a5 + 128) = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBuffer const&)::qtbEncodingOverride;
        *(_QWORD *)(a5 + 112) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + (int)*MEMORY[0x24BE51650] + 8);
        objc_msgSend(*(id *)(a2 + 8), "useResource:usage:");
        return;
      }
      if ((v46 & 9) == 0)
        goto LABEL_47;
      if (v43 == 2)
      {
        v45 = 1;
        v47 = 64;
        v48 = 2;
        v42 = 1;
        goto LABEL_46;
      }
    }
    v48 = 0;
    v45 = 0;
    v42 = 1;
    v47 = 48;
    goto LABEL_46;
  }
  v73 = *(_QWORD *)(a4 + 40);
  v14 = objc_msgSend(a3, "isInstanceDescriptor");
  *(int32x2_t *)(a5 + 12) = vmovn_s64(*(int64x2_t *)(a4 + 16));
  *(_BYTE *)(a5 + 181) = objc_msgSend(*(id *)(a4 + 48), "usage") & 1;
  v15 = -[BVHDescriptor maxInnerNodeCount](a4);
  *(_WORD *)(a5 + 120) = 0;
  v16 = (_BYTE *)(a5 + 120);
  *(_DWORD *)(a5 + 20) = v15;
  *(_DWORD *)(a5 + 24) = 0;
  v72 = (unsigned int *)(a5 + 24);
  *(_BYTE *)(a5 + 180) = 0;
  v17 = (_BYTE *)(a5 + 121);
  if ((objc_msgSend(*(id *)(a4 + 48), "usage") & 1) != 0)
    LOBYTE(v18) = 1;
  else
    v18 = (objc_msgSend(*(id *)(a4 + 48), "usage") >> 1) & 1;
  *(_BYTE *)(a5 + 182) = v18;
  *(_DWORD *)(a5 + 44) = 10;
  if ((v14 & 1) == 0)
    goto LABEL_36;
LABEL_6:
  *(_QWORD *)(a5 + 36) = 8;
  *(_WORD *)(a5 + 32) = 128;
  if ((objc_msgSend(a3, "usage") & 4) != 0)
    v19 = -1;
  else
    v19 = 255;
  *(_DWORD *)(a5 + 164) = v19;
  v20 = (void *)objc_opt_class();
  LODWORD(v20) = objc_msgSend(v20, "isSubclassOfClass:", objc_opt_class());
  v21 = (void *)objc_msgSend(a3, "instanceDescriptorBuffer");
  v22 = objc_msgSend(a3, "instanceDescriptorBufferOffset");
  objc_msgSend(v21, "contents");
  v23 = objc_msgSend(v21, "gpuAddress");
  objc_msgSend(v21, "length");
  objc_msgSend(*(id *)(a2 + 8), "useResource:usage:", v21, 1);
  *(_QWORD *)(a5 + 136) = v23 + v22;
  *(_DWORD *)(a5 + 160) = objc_msgSend(a3, "instanceDescriptorStride");
  v24 = objc_msgSend(a3, "instanceTransformationMatrixLayout") == 1;
  if ((_DWORD)v20)
  {
    *(_BYTE *)(a5 + 180) = v24;
    AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v77, a2, a3);
    *(_QWORD *)(a5 + 168) = *(_QWORD *)&v77[0];
    *(_DWORD *)(a5 + 16) = (unsigned __int16)objc_msgSend(a3, "maxInstanceCount");
    v25 = objc_msgSend(a3, "instanceDescriptorType");
    if (v25)
    {
      if (v25 != 3)
        goto LABEL_12;
LABEL_31:
      v26 = 1;
      goto LABEL_33;
    }
LABEL_32:
    v26 = 0;
    goto LABEL_33;
  }
  *(_BYTE *)(a5 + 180) = v24;
  v27 = (void *)objc_msgSend(a3, "instancedAccelerationStructures");
  v28 = objc_msgSend(v27, "count");
  v29 = v28;
  if (v28 <= 1)
    v30 = 1;
  else
    v30 = v28;
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation(v75, a2, 8 * v30, 0);
  if (v29)
  {
    v31 = 0;
    v32 = v75[1];
    do
    {
      v33 = (void *)objc_msgSend(v27, "objectAtIndexedSubscript:", v31);
      v34 = objc_msgSend((id)objc_msgSend(v33, "buffer"), "gpuAddress");
      *(_QWORD *)(v32 + 8 * v31++) = objc_msgSend(v33, "bufferOffset") + v34;
    }
    while (v29 != v31);
  }
  v35 = objc_msgSend(v27, "count");
  if ((unint64_t)objc_msgSend(v27, "count") < 2)
    v36 = 4;
  else
    v36 = 4 * objc_msgSend(v27, "count");
  AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BuilderBufferForPrivateAllocation(v74, a2, v36, 0);
  if (v35)
  {
    v37 = 0;
    v38 = v74[1];
    do
    {
      *(_DWORD *)(v38 + 4 * v37) = *(_DWORD *)(objc_msgSend(v27, "objectAtIndexedSubscript:", v37) + 344);
      ++v37;
    }
    while (v35 != v37);
  }
  v39 = v75[0];
  *(_QWORD *)(a5 + 144) = v74[0];
  *(_QWORD *)(a5 + 152) = v39;
  memset(v76, 0, sizeof(v76));
  for (i = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", v76, v77, 16);
        i;
        i = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", v76, v77, 16))
  {
    objc_msgSend(*(id *)(a2 + 8), "useResources:count:usage:", *((_QWORD *)&v76[0] + 1), i, 1);
  }
  *(_QWORD *)(a5 + 168) = 0;
  *(_DWORD *)(a5 + 16) = (unsigned __int16)objc_msgSend(a3, "instanceCount");
  v25 = objc_msgSend(a3, "instanceDescriptorType");
  if (!v25)
    goto LABEL_32;
  if (v25 == 3)
    goto LABEL_31;
LABEL_12:
  if (v25 == 1)
  {
    v26 = 2;
LABEL_33:
    *(_DWORD *)(a5 + 176) = v26;
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTrianglePairingForBvh<AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PLOCScratchInfo>(uint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  void *v14;
  int v15;
  int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t Pipeline;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD v96[2];
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;

  v95 = result;
  if (*(_QWORD *)(a2 + 40))
  {
    v9 = a2;
    result = operator new[]();
    v10 = (a4 & 1) != 0 || *(_BYTE *)(v9 + 82) != 0;
    v85 = v10;
    if (!*(_DWORD *)(v9 + 128))
    {
      v83 = result;
      v87 = (void *)objc_msgSend(*(id *)(v9 + 48), "geometryDescriptors");
      if (*(_QWORD *)(v9 + 40))
      {
        v11 = 0;
        v93 = 0;
        v94 = 0;
        v12 = (_BYTE *)(a3 + 59);
        v84 = v9;
        while (1)
        {
          v14 = (void *)objc_msgSend(v87, "objectAtIndexedSubscript:", v11, v82);
          if (objc_msgSend(v14, "triangleCount"))
            break;
LABEL_10:
          ++v11;
          v12 += 96;
          if (v11 >= *(_QWORD *)(v9 + 40))
            return MEMORY[0x234927EB4](v83, 0x1000C80504FFAC1);
        }
        v15 = objc_msgSend(v14, "vertexStride");
        if (!v15)
          v15 = MTLAttributeFormatSize((MTLAttributeFormat)objc_msgSend(v14, "vertexFormat"));
        if (objc_msgSend(v14, "indexType"))
          v16 = 4;
        else
          v16 = 2;
        v91 = v15;
        if (!objc_msgSend(v14, "indexBuffer"))
        {
          v17 = objc_msgSend(v14, "maxVertexIndex");
          if (v17 >= 0x100)
          {
            if (v17 >= 0x10000)
            {
              if (v17 >> 24)
              {
                if (HIDWORD(v17))
                  v16 = 8;
                else
                  v16 = 4;
              }
              else
              {
                v16 = 3;
              }
            }
            else
            {
              v16 = 2;
            }
          }
          else
          {
            v16 = 1;
          }
        }
        v92 = v16;
        v89 = objc_msgSend(v14, "triangleCount");
        v88 = objc_msgSend(v14, "triangleCount");
        v18 = (void *)objc_msgSend(v14, "vertexBuffer");
        v19 = objc_msgSend(v14, "vertexBufferOffset");
        objc_msgSend(v18, "contents");
        v20 = objc_msgSend(v18, "gpuAddress");
        objc_msgSend(v18, "length");
        if (objc_msgSend(v14, "indexBuffer"))
        {
          v21 = (void *)objc_msgSend(v14, "indexBuffer");
          v22 = objc_msgSend(v14, "indexBufferOffset");
          objc_msgSend(v21, "contents");
          v23 = objc_msgSend(v21, "gpuAddress");
          objc_msgSend(v21, "length");
          v90 = v23 + v22;
        }
        else
        {
          v90 = 0;
        }
        if (objc_msgSend(v14, "transformationMatrixBuffer"))
        {
          v24 = (void *)objc_msgSend(v14, "transformationMatrixBuffer");
          v25 = objc_msgSend(v14, "transformationMatrixBufferOffset");
          objc_msgSend(v24, "contents");
          v26 = objc_msgSend(v24, "gpuAddress");
          objc_msgSend(v24, "length");
          v27 = v26 + v25;
        }
        else
        {
          v27 = 0;
        }
        if (objc_msgSend(v14, "indexBuffer"))
        {
          if (objc_msgSend(v14, "indexType") == 1)
            v28 = 4;
          else
            v28 = 2;
        }
        else
        {
          v28 = 0;
        }
        v29 = objc_msgSend(v14, "triangleCount");
        v30 = objc_msgSend(v14, "vertexFormat");
        v31 = objc_msgSend(v14, "transformationMatrixLayout");
        v32 = *(_QWORD **)(*(_QWORD *)(v95 + 8) + 88);
        v33 = v32[20];
        v34 = v33 + 159;
        if ((unint64_t)(v33 + 159) > v32[19])
        {
          v82 = v31;
          v81 = AGX::DataBufferAllocator<34ul>::growNoInline(v32 + 2, 3, 0);
          v33 = v32[20];
          if (!v81)
          {
            v31 = v82;
LABEL_40:
            v35 = v20 + v19;
            v36 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
            v37 = v36 + v32[22];
            v32[20] = v36 + 144;
            v38 = (int *)MEMORY[0x24BE51650];
            v39 = *(_QWORD *)(v32[5] + 224) + (int)*MEMORY[0x24BE51650];
            v40 = *(_QWORD *)(v95 + 8);
            v41 = *(_QWORD *)(v40 + 88);
            *(_QWORD *)(v41 + 6096) = v37;
            *(_QWORD *)(*(_QWORD *)(v41 + 1792) + 576) = v37;
            *(_QWORD *)(v41 + 5320) = v39;
            *(_QWORD *)(v41 + 7136) |= 0x20uLL;
            *(_DWORD *)(v41 + 7152) |= 1u;
            *(_BYTE *)(v36 + 140) = v85;
            *(_BYTE *)(v36 + 141) = v85;
            *(_QWORD *)(v36 + 96) = v94;
            *(_QWORD *)(v36 + 104) = v93;
            *(_DWORD *)(v36 + 112) = v11;
            *(_QWORD *)v36 = v90;
            *(_QWORD *)(v36 + 8) = v35;
            *(_DWORD *)(v36 + 120) = v28;
            *(_DWORD *)(v36 + 124) = v92;
            *(_DWORD *)(v36 + 128) = v91;
            *(_DWORD *)(v36 + 136) = v30;
            v42 = *(_QWORD *)(a6 + 384);
            v43 = v42 + 8 * *(int *)(a6 + 396);
            v44 = *v38;
            if (*(_DWORD *)(a6 + 392) == 3)
              v45 = *(_QWORD *)(v42 + 16);
            else
              v45 = 0;
            *(_QWORD *)(v36 + 16) = v45
                                  + *(_QWORD *)(v43 + 40)
                                  + *(_QWORD *)(a6 + 400)
                                  + *(_QWORD *)(*(_QWORD *)(v43 + 24) + v44 + 8);
            v46 = *(_QWORD *)(a6 + 448);
            v47 = v46 + 8 * *(int *)(a6 + 460);
            if (*(_DWORD *)(a6 + 456) == 3)
              v48 = *(_QWORD *)(v46 + 16);
            else
              v48 = 0;
            *(_QWORD *)(v36 + 72) = v48
                                  + *(_QWORD *)(v47 + 40)
                                  + *(_QWORD *)(a6 + 464)
                                  + *(_QWORD *)(*(_QWORD *)(v47 + 24) + v44 + 8);
            v49 = *(_QWORD *)(a6 + 480);
            v50 = v49 + 8 * *(int *)(a6 + 492);
            if (*(_DWORD *)(a6 + 488) == 3)
              v51 = *(_QWORD *)(v49 + 16);
            else
              v51 = 0;
            *(_QWORD *)(v36 + 24) = v51
                                  + *(_QWORD *)(v50 + 40)
                                  + *(_QWORD *)(a6 + 496)
                                  + *(_QWORD *)(*(_QWORD *)(v50 + 24) + v44 + 8);
            v52 = *(_QWORD *)(a6 + 512);
            v53 = v52 + 8 * *(int *)(a6 + 524);
            if (*(_DWORD *)(a6 + 520) == 3)
              v54 = *(_QWORD *)(v52 + 16);
            else
              v54 = 0;
            *(_QWORD *)(v36 + 32) = v54
                                  + *(_QWORD *)(v53 + 40)
                                  + *(_QWORD *)(a6 + 528)
                                  + *(_QWORD *)(*(_QWORD *)(v53 + 24) + v44 + 8);
            v55 = *(_QWORD *)(a6 + 544);
            v56 = v55 + 8 * *(int *)(a6 + 556);
            if (*(_DWORD *)(a6 + 552) == 3)
              v57 = *(_QWORD *)(v55 + 16);
            else
              v57 = 0;
            *(_QWORD *)(v36 + 40) = v57
                                  + *(_QWORD *)(v56 + 40)
                                  + *(_QWORD *)(a6 + 560)
                                  + *(_QWORD *)(*(_QWORD *)(v56 + 24) + v44 + 8);
            v58 = *(_QWORD *)(a6 + 416);
            v59 = v58 + 8 * *(int *)(a6 + 428);
            v60 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + v44 + 8);
            if (*(_DWORD *)(a6 + 424) == 3)
              v61 = *(_QWORD *)(v58 + 16);
            else
              v61 = 0;
            *(_QWORD *)(v36 + 88) = v61 + *(_QWORD *)(v59 + 40) + *(_QWORD *)(a6 + 432) + v60;
            if (v29 >> 13)
              v62 = 1024;
            else
              v62 = 32;
            *(_QWORD *)(v36 + 48) = *a5;
            *(_QWORD *)(v36 + 56) = v27;
            *(_BYTE *)(v36 + 142) = v31 == 1;
            *(_DWORD *)(v36 + 132) = v62;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateInline((uint64_t)&v97, v40, 4, 1);
            v63 = v98;
            *v97 = 0;
            *(_QWORD *)(v36 + 80) = v63;
            v96[0] = v29;
            v96[1] = 0;
            objc_msgSend(*(id *)(v95 + 8), "setBytes:length:atIndex:", v96, 8, 6);
            Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v95, 109, 0);
            v65 = *(_QWORD *)(*(_QWORD *)(v95 + 8) + 88);
            v66 = *(_QWORD *)(v65 + 1776);
            *(_QWORD *)(v65 + 1776) = Pipeline;
            v67 = *(_QWORD *)(Pipeline + 16);
            *(_BYTE *)(v65 + 1745) = *(_BYTE *)(v67 + 216);
            *(_BYTE *)(v65 + 1746) = *(_BYTE *)(v67 + 1992);
            v9 = v84;
            if (*(_DWORD *)(v65 + 1736) == 1)
            {
              if (!*(_BYTE *)(v65 + 7672))
              {
                AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v65 + 1624), (_QWORD *)(v65 + 16));
                v79 = *(_DWORD *)(v65 + 7316);
                if (*(_DWORD *)(v65 + 7312) < v79)
                  *(_DWORD *)(v65 + 7312) = v79;
                *(_DWORD *)(v65 + 7316) = 0;
                if (!v66)
                {
LABEL_67:
                  if (v29 >> 13)
                    v70 = 112;
                  else
                    v70 = 111;
                  v71 = AGX::RayTracingGPUBuilderGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getOrCreatePipeline(v95, v70, 0);
                  v72 = *(_QWORD *)(*(_QWORD *)(v95 + 8) + 88);
                  v73 = *(_QWORD *)(v72 + 1776);
                  *(_QWORD *)(v72 + 1776) = v71;
                  v74 = *(_QWORD *)(v71 + 16);
                  *(_BYTE *)(v72 + 1745) = *(_BYTE *)(v74 + 216);
                  *(_BYTE *)(v72 + 1746) = *(_BYTE *)(v74 + 1992);
                  if (*(_DWORD *)(v72 + 1736) == 1)
                  {
                    if (!*(_BYTE *)(v72 + 7672))
                    {
                      AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v72 + 1624), (_QWORD *)(v72 + 16));
                      v80 = *(_DWORD *)(v72 + 7316);
                      if (*(_DWORD *)(v72 + 7312) < v80)
                        *(_DWORD *)(v72 + 7312) = v80;
                      *(_DWORD *)(v72 + 7316) = 0;
                      if (!v73)
                        goto LABEL_76;
                      goto LABEL_75;
                    }
                    v75 = *(_QWORD *)(v72 + 7688);
                    if (*(_QWORD *)(v72 + 7680) != v75)
                    {
                      *(_BYTE *)(v75 - 8) = 1;
                      *(_BYTE *)(v75 - 7) = *(_BYTE *)(*(_QWORD *)(v72 + 1768) + 458);
                    }
                  }
                  if (!v73)
                  {
LABEL_76:
                    v77 = *(_QWORD *)(a6 + 544);
                    v78 = v77 + 8 * *(int *)(a6 + 556);
                    if (*(_DWORD *)(a6 + 552) == 3)
                      v13 = *(_QWORD *)(v77 + 16);
                    else
                      v13 = 0;
                    v94 += v89;
                    *(_QWORD *)(v12 - 27) = v13
                                          + *(_QWORD *)(v78 + 40)
                                          + *(_QWORD *)(a6 + 560)
                                          + v93
                                          + *(_QWORD *)(*(_QWORD *)(v78 + 24) + (int)*MEMORY[0x24BE51650] + 8);
                    *v12 = v92;
                    v93 += (v88 * (4 * v92) + 31) & 0xFFFFFFFFFFFFFFE0;
                    goto LABEL_10;
                  }
LABEL_75:
                  *(_QWORD *)(v72 + 1776) = v73;
                  v76 = *(_QWORD *)(v73 + 16);
                  *(_BYTE *)(v72 + 1745) = *(_BYTE *)(v76 + 216);
                  *(_BYTE *)(v72 + 1746) = *(_BYTE *)(v76 + 1992);
                  goto LABEL_76;
                }
LABEL_66:
                *(_QWORD *)(v65 + 1776) = v66;
                v69 = *(_QWORD *)(v66 + 16);
                *(_BYTE *)(v65 + 1745) = *(_BYTE *)(v69 + 216);
                *(_BYTE *)(v65 + 1746) = *(_BYTE *)(v69 + 1992);
                goto LABEL_67;
              }
              v68 = *(_QWORD *)(v65 + 7688);
              if (*(_QWORD *)(v65 + 7680) != v68)
              {
                *(_BYTE *)(v68 - 8) = 1;
                *(_BYTE *)(v68 - 7) = *(_BYTE *)(*(_QWORD *)(v65 + 1768) + 458);
              }
            }
            if (!v66)
              goto LABEL_67;
            goto LABEL_66;
          }
          v34 = v33 + 159;
          v31 = v82;
          if ((unint64_t)(v33 + 159) > v32[19])
            abort();
        }
        v32[21] = v34;
        goto LABEL_40;
      }
      return MEMORY[0x234927EB4](v83, 0x1000C80504FFAC1);
    }
  }
  return result;
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20encodeBuildMediumBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXA10FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke(uint64_t a1)
{
  bvhPrintDebugBufferContents(*(_QWORD *)(a1 + 32));
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE19encodeBuildSmallBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXA10FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke(uint64_t a1)
{
  bvhPrintDebugBufferContents(*(_QWORD *)(a1 + 32));
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, __int128 *a2)
{
  void *v2;
  os_unfair_lock_s *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _Unwind_Exception *v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;

  v5 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  v6 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((_QWORD *)a1, &v15);
  if (v6)
  {
    v7 = v6;
    os_unfair_lock_unlock(v5);
    return (void *)v7[5];
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 72);
    if (!v9)
    {
      v14 = (_Unwind_Exception *)std::__throw_bad_function_call[abi:nn180100]();

      _Unwind_Resume(v14);
    }
    v8 = (void *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 48))(v9, a2);
    v10 = v8;
    v11 = objc_msgSend(v8, "threadExecutionWidth");
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    v17 = &v15;
    v12 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>((uint64_t *)a1, &v15, &v17);
    v12[5] = v10;
    v12[6] = v11;
    os_unfair_lock_unlock(v5);
  }
  return v8;
}

_QWORD *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>(_QWORD *a1, _QWORD *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  unint64_t v14;
  uint64_t v17;

  v4 = _MTLHashState();
  v5 = a1[1];
  if (!v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v5 <= v4)
      v8 = v4 % v5;
  }
  else
  {
    v8 = ((_DWORD)v5 - 1) & v4;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = v5 - 1;
      while (1)
      {
        v17 = result[1];
        if (v17 == v6)
        {
          if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2])
            return result;
        }
        else if ((v17 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v14 = result[1];
      if (v14 == v6)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2])
          return result;
      }
      else
      {
        if (v14 >= v5)
          v14 %= v5;
        if (v14 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>(uint64_t *a1, _QWORD *a2, _OWORD **a3)
{
  unint64_t v3;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v15;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  void *v47;

  v7 = _MTLHashState();
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v9 <= v7)
        v3 = v7 % v9;
    }
    else
    {
      v3 = ((_DWORD)v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v12[1];
            if (v18 == v7)
            {
              if (v12[2] == *a2 && v12[3] == a2[1] && v12[4] == a2[2])
                return v12;
            }
            else if ((v18 & (v9 - 1)) != v3)
            {
              goto LABEL_34;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_34;
          }
        }
        do
        {
          v15 = v12[1];
          if (v15 == v7)
          {
            if (v12[2] == *a2 && v12[3] == a2[1] && v12[4] == a2[2])
              return v12;
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_34:
  v19 = a1 + 2;
  v12 = operator new(0x38uLL);
  *v12 = 0;
  v12[1] = v8;
  v20 = *((_QWORD *)*a3 + 2);
  *((_OWORD *)v12 + 1) = **a3;
  v12[5] = 0;
  v12[6] = 0;
  v12[4] = v20;
  v21 = (float)(unint64_t)(a1[3] + 1);
  v22 = *((float *)a1 + 8);
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    v8 = v3;
    goto LABEL_84;
  }
  v23 = 1;
  if (v9 >= 3)
    v23 = (v9 & (v9 - 1)) != 0;
  v24 = v23 | (2 * v9);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = v25;
  else
    prime = v24;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = a1[1];
  }
  if (prime > v9)
  {
LABEL_47:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v27 = operator new(8 * prime);
    v28 = (void *)*a1;
    *a1 = (uint64_t)v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v29++) = 0;
    while (prime != v29);
    v30 = (_QWORD *)*v19;
    if (!*v19)
      goto LABEL_71;
    v31 = v30[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*a1 + 8 * v33) = v19;
      for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v30 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v35))
        {
          *v30 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*a1 + v36);
          **(_QWORD **)(*a1 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v35) = v30;
          v30 = i;
          v33 = v35;
        }
      }
LABEL_71:
      v9 = prime;
      goto LABEL_72;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(*a1 + 8 * v31) = v19;
    v40 = (_QWORD *)*v30;
    if (!*v30)
      goto LABEL_71;
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 != v31)
      {
        if (!*(_QWORD *)(*a1 + 8 * v42))
        {
          *(_QWORD *)(*a1 + 8 * v42) = v30;
          goto LABEL_76;
        }
        *v30 = *v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(*a1 + v41);
        **(_QWORD **)(*a1 + v41) = v40;
        v40 = v30;
      }
      v42 = v31;
LABEL_76:
      v30 = v40;
      v40 = (_QWORD *)*v40;
      v31 = v42;
      if (!v40)
        goto LABEL_71;
    }
  }
  if (prime >= v9)
    goto LABEL_72;
  v37 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v9 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
  {
    v37 = std::__next_prime(v37);
  }
  else
  {
    v39 = 1 << -(char)__clz(v37 - 1);
    if (v37 >= 2)
      v37 = v39;
  }
  if (prime <= v37)
    prime = v37;
  if (prime < v9)
  {
    if (!prime)
    {
      v47 = (void *)*a1;
      *a1 = 0;
      if (v47)
        operator delete(v47);
      v9 = 0;
      a1[1] = 0;
      goto LABEL_72;
    }
    goto LABEL_47;
  }
  v9 = a1[1];
LABEL_72:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
      v8 %= v9;
  }
  else
  {
    v8 = ((_DWORD)v9 - 1) & v8;
  }
LABEL_84:
  v43 = *a1;
  v44 = *(_QWORD **)(*a1 + 8 * v8);
  if (v44)
  {
    *v12 = *v44;
LABEL_92:
    *v44 = v12;
    goto LABEL_93;
  }
  *v12 = *v19;
  *v19 = v12;
  *(_QWORD *)(v43 + 8 * v8) = v19;
  if (*v12)
  {
    v45 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v45 >= v9)
        v45 %= v9;
    }
    else
    {
      v45 &= v9 - 1;
    }
    v44 = (_QWORD *)(*a1 + 8 * v45);
    goto LABEL_92;
  }
LABEL_93:
  ++a1[3];
  return v12;
}

void sub_232CF34DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  void *v3;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  _Unwind_Exception *v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;

  v7 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v17 = *a2;
  v18 = *((_QWORD *)a2 + 2);
  v8 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((_QWORD *)a1, &v17);
  if (v8)
  {
    v9 = v8;
    os_unfair_lock_unlock(v7);
    if (a3)
      *a3 = v9[6];
    return (void *)v9[5];
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 72);
    if (!v11)
    {
      v16 = (_Unwind_Exception *)std::__throw_bad_function_call[abi:nn180100]();

      _Unwind_Resume(v16);
    }
    v10 = (void *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 48))(v11, a2);
    v12 = v10;
    v13 = objc_msgSend(v10, "threadExecutionWidth");
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v19 = &v17;
    v14 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>((uint64_t *)a1, &v17, &v19);
    v14[5] = v12;
    v14[6] = v13;
    os_unfair_lock_unlock(v7);
    if (a3)
      *a3 = objc_msgSend(v10, "threadExecutionWidth");
  }
  return v10;
}

void sub_232CF4510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232CF589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v16 = (_QWORD *)v11[253];
  if (v16 == v12)
  {
    v17 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
    v12 = (_QWORD *)v11[253];
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v17))(v12);
LABEL_6:
  v18 = (_QWORD *)v11[249];
  if (v18 == v13)
  {
    v19 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v19 = 5;
    v13 = (_QWORD *)v11[249];
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v19))(v13);
LABEL_11:
  v20 = *(_QWORD **)(v14 - 176);
  if (v20 == (_QWORD *)(v14 - 200))
  {
    v21 = 4;
    v20 = (_QWORD *)(v14 - 200);
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_16:
  v22 = *(_QWORD **)(v14 - 144);
  if (v22 == (_QWORD *)(v14 - 168))
  {
    v23 = 4;
    v22 = (_QWORD *)(v14 - 168);
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_21:
  v24 = (_QWORD *)v11[244];
  if (v24 == a10)
  {
    v25 = 4;
    v24 = a10;
  }
  else
  {
    if (!v24)
      goto LABEL_26;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_26:
  v26 = (_QWORD *)v11[240];
  if (v26 == a11)
  {
    v27 = 4;
    v26 = a11;
  }
  else
  {
    if (!v26)
      goto LABEL_31;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_31:
  AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~ContextCommon((uint64_t)v11);
  _Unwind_Resume(a1);
}

void sub_232CF611C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (_QWORD *)v2[253];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v2[253];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  v6 = (_QWORD *)v2[249];
  if (v6 == v2 + 246)
  {
    v7 = 4;
    v6 = v2 + 246;
  }
  else
  {
    if (!v6)
      _Unwind_Resume(exception_object);
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  _Unwind_Resume(exception_object);
}

void sub_232CFB94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramSamplersWithLODOverrides(AGXA10FamilySampler const**,float const*,float const*,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramSamplerWithLODOverride(AGXA10FamilySampler *,float,float,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramSamplers(AGXA10FamilySampler const**,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramSampler(AGXA10FamilySampler *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramTextures(AGXA10FamilyTexture const**,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramTexture(AGXA10FamilyTexture *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramBuffers(AGXA10FamilyBuffer const**,unsigned long const*,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramBufferOffset(unsigned long,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramBuffer(AGXA10FamilyBuffer *,unsigned long,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramBufferBytes(void const*,unsigned long,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectThreadgroupMemoryLength(unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramSamplersWithLODOverrides(AGXA10FamilySampler const**,float const*,float const*,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramSamplerWithLODOverride(AGXA10FamilySampler *,float,float,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramSamplers(AGXA10FamilySampler const**,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramSampler(AGXA10FamilySampler *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramTextures(AGXA10FamilyTexture const**,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramTexture(AGXA10FamilyTexture *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramBuffers(AGXA10FamilyBuffer const**,unsigned long const*,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramBufferOffset(unsigned long,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramBuffer(AGXA10FamilyBuffer *,unsigned long,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramBufferBytes(void const*,unsigned long,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::hasObjectStage(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::drawMeshThreadgroups(MTLSize)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramAccelerationStructure(AGXA10FamilyRayTracingAccelerationStructureSW *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramAccelerationStructure(AGXA10FamilyRayTracingAccelerationStructureSW *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramIntersectionFunctionTable(AGXA10FamilyUserIntersectionFunctionTable *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramIntersectionFunctionTable(AGXA10FamilyUserIntersectionFunctionTable *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setMeshProgramVisibleFunctionTable(AGXA10FamilyVisibleFunctionTable *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setObjectProgramVisibleFunctionTable(AGXA10FamilyVisibleFunctionTable *,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void __Block_byref_object_copy__3761(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__3762(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

unint64_t AGX::SWTessellationContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::drawPatches(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10)
{
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned int v81;
  uint64_t v82;
  AGXBuffer *v83;
  int *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  int *v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  AGXBuffer *BufferInfo;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  int v137;
  int v138;
  BOOL v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  BOOL v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  BOOL v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  _BOOL8 v154;
  _QWORD *v155;
  _QWORD *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint32x4_t v160;
  uint64_t v161;
  uint32x4_t v162;
  uint32x4_t v163;
  uint32x4_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint32x4_t v168;
  uint32x4_t v169;
  uint32x4_t v170;
  uint32x4_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  _BOOL8 v189;
  _QWORD *v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint32x4_t v197;
  uint32x4_t v198;
  uint32x4_t v199;
  uint32x4_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint32x4_t v204;
  uint32x4_t v205;
  uint32x4_t v206;
  uint32x4_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BOOL8 v225;
  _QWORD *v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint32x4_t v232;
  uint32x4_t v233;
  uint32x4_t v234;
  uint32x4_t v235;
  uint64_t v236;
  _BOOL8 v237;
  _QWORD *v238;
  _QWORD *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint32x4_t v244;
  uint32x4_t v245;
  uint32x4_t v246;
  uint32x4_t v247;
  uint64_t v248;
  uint64_t v249;
  int *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t result;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  unsigned int *v290;
  char *v291;
  char *v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _DWORD *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BOOL8 v306;
  int8x16_t *v307;
  char *v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned __int8 *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  unsigned int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  unsigned int *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  int64x2_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _BOOL8 v344;
  uint64_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  int v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  unsigned int v370;
  int v372;
  uint64_t v373;
  uint64_t v374;
  AGXBuffer *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD v389[2];

  v10 = a4;
  v11 = a9;
  if ((a9 * (unint64_t)a4) >> 24)
    AGX::SWTessellationContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::drawPatches(unsigned int,unsigned int,unsigned int,AGXA10FamilyBuffer *,unsigned long,AGXA10FamilyBuffer *,unsigned long,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion _((uint64_t)instanceCount _ patchCount) __ ((1__24)-1)_]();
  v13 = a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v14 + 2688);
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15)
    LODWORD(v16) = (*(_WORD *)(v14 + 2308) & 1) != 0 || *(unsigned __int8 *)(v16 + 3223) != 0;
  v17 = a4 - 1;
  if (a4 == 1)
  {
    v18 = -1;
  }
  else
  {
    v19 = __clz(v17);
    v17 = v19 ^ 0x1F;
    v18 = ((unint64_t)a4 + (1 << (v19 ^ 0x3F)) - 1) / a4 - 1;
  }
  *(_DWORD *)(v14 + 11300) = v18;
  *(_DWORD *)(v14 + 11304) = v17;
  v20 = a9 - 1;
  if (a9 == 1)
  {
    v21 = -1;
  }
  else
  {
    v22 = __clz(v20);
    v20 = v22 ^ 0x1F;
    v21 = ((unint64_t)a9 + (1 << (v22 ^ 0x3F)) - 1) / a9 - 1;
  }
  *(_DWORD *)(v14 + 11308) = v21;
  *(_DWORD *)(v14 + 11312) = v20;
  v23 = a9 * a4;
  v24 = v23 - 1;
  if ((_DWORD)v23 == 1)
  {
    v25 = -1;
  }
  else
  {
    v26 = __clz(v24);
    v24 = v26 ^ 0x1F;
    v25 = (v23 + (1 << (v26 ^ 0x3F)) - 1) / v23 - 1;
  }
  *(_DWORD *)(v14 + 11316) = v25;
  *(_DWORD *)(v14 + 11320) = v24;
  *(_BYTE *)(v14 + 1544) = 0;
  v386 = *(_QWORD *)(v15 + 8);
  v27 = *(_DWORD *)(v386 + 3752);
  v384 = v15;
  if (!(_DWORD)v16)
  {
    if (v27 == 1)
    {
      v31 = *(_DWORD *)(v15 + 816);
      v32 = 16;
      if (v31 != 3)
      {
        if (v31 == 2)
          v32 = 16;
        else
          v32 = 4;
      }
    }
    else
    {
      v32 = 8;
    }
    v40 = *(unsigned int *)(v15 + 820);
    v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 1456) + 808) + 6184);
    v42 = v41 + 16 * v40;
    v352 = *(_DWORD *)(a1 + 24) & 1;
    v374 = v41;
    v376 = *(_QWORD *)(v42 + 8 * v352 + 40);
    v43 = v41 + 8 * v40;
    v359 = *(_QWORD *)(v43 + 168);
    v362 = *(void **)(v43 + 360);
    v363 = *(_QWORD *)(v42 + 8 * *(unsigned int *)(v15 + 812) + 232);
    v44 = *(char **)(v41 + 440);
    v45 = (int *)MEMORY[0x24BE51650];
    if (!*(_BYTE *)(a1 + 28))
    {
LABEL_44:
      v71 = *(unsigned int *)(v15 + 816);
      if (v71 > 3)
        v72 = 0;
      else
        v72 = dword_232D73DE0[v71];
      v73 = *(_DWORD *)(v386 + 3752);
      switch(*(_DWORD *)(v386 + 3756))
      {
        case 0:
          LODWORD(v23) = 1;
          break;
        case 1:
          LODWORD(v23) = v10;
          break;
        case 2:
          LODWORD(v23) = a9;
          break;
        case 3:
          break;
        default:
          LODWORD(v23) = 0;
          break;
      }
      v106 = v72 * v72;
      v383 = *(_DWORD *)(v386 + 3752);
      if (v73 == 1)
        v72 = (v72 + v72 * v72) >> 1;
      v370 = v72;
      if (v73 == 1)
        v107 = 20;
      else
        v107 = 16;
      v108 = (16 * (_DWORD)v23 + 63) & 0xFFFFFFC0;
      v109 = (v107 * v23 + 63) & 0xFFFFFFC0;
      v110 = (v23 * v32 + 63) & 0xFFFFFFC0;
      v111 = *(_QWORD **)(*(_QWORD *)(v15 + 920) + 8);
      if (!(v111[354] & 0x2000000000 | (v111[161] | v111[158]) & 0x2000000000 | (v111[164] | v111[168] | v111[171]) & 0x2000000000))
        v110 = 0;
      v112 = (v108 + v109);
      v380 = v110;
      BufferInfo = AGX::DeviceInternalBuffer<AGX::TessellationInternalBufferResourceInfo>::getBufferInfo(*(_QWORD *)(v374 + 8 * (*(_DWORD *)(v13 + 24) & 1) + 424), v110 + (int)v112);
      v114 = (char *)BufferInfo + *v45;
      v356 = *((_QWORD *)v114 + 2);
      v357 = *((_QWORD *)v114 + 9);
      -[IOGPUMetalBuffer contents](BufferInfo, "contents");
      v115 = *(_QWORD *)(a1 + 8);
      if (v44)
      {
        v116 = (1600 * v352);
        v117 = &v44[*v45];
        v119 = *((_QWORD *)v117 + 2);
        v118 = *((_QWORD *)v117 + 3);
        v120 = *((_QWORD *)v117 + 1);
        *(_QWORD *)(v115 + 17256) = v120;
        *(_QWORD *)(v115 + 19272) = v118;
        *(_QWORD *)(v115 + 3552) = v120 + v116;
        *(_QWORD *)(v115 + 4056) = (v119 & 0xFFFFFFFFFFFFFFLL) - v116;
        *(_QWORD *)(v115 + 3032) = v118 + v116;
        *(_DWORD *)(v115 + 11644) = v119;
        *(_DWORD *)(v115 + 11896) = v119;
        *(_DWORD *)(v115 + 12148) = v120 >> 8;
        *(_QWORD *)(v115 + 15744) = v117;
        if (*(_QWORD *)(v115 + 1480))
          MTLResourceListAddResource();
      }
      else
      {
        *(_QWORD *)(v115 + 15744) = 0;
        *(_QWORD *)(v115 + 3552) = 0;
        *(_QWORD *)(v115 + 4056) = 0;
        *(_QWORD *)(v115 + 3032) = 0;
        *(_QWORD *)(v115 + 17256) = 0;
        *(_QWORD *)(v115 + 19272) = 0;
        *(_DWORD *)(v115 + 11644) = 0;
        *(_DWORD *)(v115 + 11896) = 0;
      }
      *(_QWORD *)(v115 + 20960) |= 0x20000000000uLL;
      *(_QWORD *)(v115 + 20984) |= 0x20000000000uLL;
      *(_QWORD *)(v115 + 21152) |= 0xC0uLL;
      IOGPUResourceListAddResource();
      v121 = (char *)BufferInfo + *v45;
      v122 = *((_QWORD *)v121 + 9);
      v123 = *((_QWORD *)v121 + 2) & 0xFFFFFFFFFFFFFFLL;
      v124 = *(_QWORD **)(a1 + 8);
      v124[2158] = v122;
      v124[445] = v122;
      v124[508] = v123;
      v124[2620] |= 0x40000000000uLL;
      v124[2623] |= 0x40000000000uLL;
      v124[2644] |= 0xC0uLL;
      v124[1969] = v121;
      IOGPUResourceListAddResource();
      v125 = a1;
      v126 = (char *)BufferInfo + *v45;
      v127 = *((_QWORD *)v126 + 9);
      v128 = *((_QWORD *)v126 + 2) & 0xFFFFFFFFFFFFFFLL;
      v129 = *(_QWORD **)(a1 + 8);
      v129[2152] = v127;
      v129[439] = v127 + v108;
      v129[502] = v128 - v108;
      v129[2620] |= 0x1000000000uLL;
      v129[2623] |= 0x1000000000uLL;
      v129[2644] |= 0xC0uLL;
      v129[1963] = v126;
      if (v380)
      {
        IOGPUResourceListAddResource();
        v125 = a1;
        v130 = (char *)BufferInfo + *v45;
        v131 = *((_QWORD *)v130 + 9);
        v132 = *((_QWORD *)v130 + 2) & 0xFFFFFFFFFFFFFFLL;
        v133 = *(_QWORD **)(a1 + 8);
        v133[2153] = v131;
        v133[440] = v131 + v112;
        v133[503] = v132 - v112;
        v133[2620] |= 0x2000000000uLL;
        v133[2623] |= 0x2000000000uLL;
        v133[2644] |= 0xC0uLL;
        v133[1964] = v130;
      }
      else
      {
        v112 = 0;
        v134 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(v134 + 20960) |= 0x2000000000uLL;
        *(_QWORD *)(v134 + 20984) |= 0x2000000000uLL;
        *(_QWORD *)(v134 + 21152) |= 0xC0uLL;
        *(_QWORD *)(v134 + 15712) = 0;
        *(_QWORD *)(v134 + 3520) = 0;
        *(_QWORD *)(v134 + 4024) = 0;
        *(_QWORD *)(v134 + 3000) = 0;
        *(_QWORD *)(v134 + 17224) = 0;
        *(_QWORD *)(v134 + 19240) = 0;
        *(_DWORD *)(v134 + 11628) = 0;
        *(_DWORD *)(v134 + 11880) = 0;
      }
      v135 = *(_QWORD *)(v125 + 8);
      *(_DWORD *)(v135 + 11272) = a3;
      *(_DWORD *)(v135 + 11276) = v10;
      *(_DWORD *)(v135 + 11280) = a10;
      *(_DWORD *)(v135 + 11284) = a9;
      if (*(_BYTE *)(v384 + 836))
        v136 = *(float *)(v125 + 16);
      else
        v136 = 1.0;
      *(float *)(v135 + 11340) = v136;
      *(_DWORD *)(v135 + 11296) = *(_DWORD *)(v384 + 832);
      v137 = *(_DWORD *)(v384 + 828);
      v138 = *(_DWORD *)(v386 + 3752);
      if (v138 == 1)
      {
        v139 = v137 == 0;
        v140 = 24;
        v141 = 12;
      }
      else
      {
        if (v138)
        {
          v140 = 0;
          goto LABEL_97;
        }
        v139 = v137 == 0;
        v140 = 16;
        v141 = 8;
      }
      if (v139)
        v140 = v141;
LABEL_97:
      v142 = *(_DWORD *)(v386 + 3756);
      v143 = v142 >= 2;
      v144 = v142 - 2;
      if (v143)
      {
        if (v144 > 1)
          goto LABEL_102;
        v145 = *(_DWORD *)(v125 + 20) / v140;
      }
      else
      {
        v145 = 0;
      }
      *(_DWORD *)(v135 + 11292) = v145;
LABEL_102:
      *(_QWORD *)(v135 + 21000) |= 0x20uLL;
      *(_QWORD *)(v135 + 21152) |= 0x40uLL;
      AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(v135, *(_QWORD *)(v384 + 912));
      v353 = v112;
      switch(*(_DWORD *)(v386 + 3756))
      {
        case 0:
          v10 = 1;
          goto LABEL_104;
        case 1:
LABEL_104:
          v11 = 1;
          break;
        case 2:
          v10 = 1;
          break;
        case 3:
          break;
        default:
          v10 = 0;
          v11 = 0;
          break;
      }
      v188 = *(_QWORD *)(a1 + 8);
      v189 = *(_DWORD *)(v188 + 1720) != 0;
      *(_DWORD *)(v188 + 1720) = 0;
      if (((*(_QWORD *)(*(_QWORD *)(v188 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v188 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v188 + 2672) + 2832)) & 0x700000000000) == 0)
      {
        *(_QWORD *)(v188 + 21152) |= v189;
LABEL_149:
        v387 = v108;
        v373 = a7;
        if (*(_BYTE *)(v188 + 2529))
        {
          *(_BYTE *)(v188 + 2529) = 0;
          *(_QWORD *)(v188 + 21152) |= 1uLL;
        }
        AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v188, 0);
        AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v188, *(int8x16_t **)(v188 + 2672), *(int8x16_t **)(v188 + 2680), v188 + 2704, (_QWORD *)(v188 + 5904), v188 + 20960, 0);
        v194 = v11 - 1;
        v195 = *(_QWORD *)(v188 + 64);
        *(_DWORD *)v195 = 1849950208;
        *(_DWORD *)(v195 + 4) = v10;
        *(_DWORD *)(v195 + 8) = v11 - 1;
        *(_QWORD *)(v195 + 12) = 0x20000000000;
        *(_QWORD *)(v188 + 64) = v195 + 20;
        v196 = *(_QWORD *)(a1 + 8);
        v389[0] = 0;
        AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v196 + 1656, (_QWORD *)(v196 + 16), (int *)v389 + 1, v197, v198);
        AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v196 + 1656, (_QWORD *)(v196 + 16), (_DWORD *)(v196 + 21264), v389, v199, v200);
        v201 = a1;
        *(_QWORD *)(v196 + 21152) |= 0x10000000000000uLL;
        v202 = *(_DWORD *)(a1 + 24);
        if (v202 && (v202 & 1) == 0)
        {
          v203 = *(_QWORD *)(a1 + 8);
          v389[0] = 0;
          *(_BYTE *)(v203 + 2032) = 1;
          AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(v203 + 1656, (_QWORD *)(v203 + 16), (int *)v389 + 1);
          AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(v203);
          AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v203 + 1656, (_QWORD *)(v203 + 16), (int *)v389 + 1, v204, v205);
          AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v203 + 1656, (_QWORD *)(v203 + 16), (_DWORD *)(v203 + 21264), v389, v206, v207);
          v201 = a1;
          *(_QWORD *)(v203 + 21152) |= 0x10000000000000uLL;
        }
        v208 = *(_QWORD *)(v201 + 8);
        if (v376)
        {
          v209 = (_QWORD *)(v376 + (int)*MEMORY[0x24BE51650]);
          v211 = v209[2];
          v210 = v209[3];
          v212 = v209[1];
          *(_QWORD *)(v208 + 17240) = v212;
          *(_QWORD *)(v208 + 19256) = v210;
          *(_QWORD *)(v208 + 3536) = v212;
          *(_QWORD *)(v208 + 4040) = v211 & 0xFFFFFFFFFFFFFFLL;
          *(_QWORD *)(v208 + 3016) = v210;
          *(_DWORD *)(v208 + 11636) = v211;
          *(_DWORD *)(v208 + 11888) = v211;
          *(_DWORD *)(v208 + 12140) = v212 >> 8;
          *(_QWORD *)(v208 + 15728) = v209;
          if (*(_QWORD *)(v208 + 1480))
          {
            MTLResourceListAddResource();
            v201 = a1;
          }
        }
        else
        {
          *(_QWORD *)(v208 + 15728) = 0;
          *(_QWORD *)(v208 + 3536) = 0;
          *(_QWORD *)(v208 + 4040) = 0;
          *(_QWORD *)(v208 + 3016) = 0;
          *(_QWORD *)(v208 + 17240) = 0;
          *(_QWORD *)(v208 + 19256) = 0;
          *(_DWORD *)(v208 + 11636) = 0;
          *(_DWORD *)(v208 + 11888) = 0;
        }
        *(_QWORD *)(v208 + 20960) |= 0x8000000000uLL;
        *(_QWORD *)(v208 + 20984) |= 0x8000000000uLL;
        *(_QWORD *)(v208 + 21152) |= 0xC0uLL;
        v213 = *(_QWORD **)(v201 + 8);
        v214 = v213[48];
        if (!v214)
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v213 + 2, 10, 0))
            goto LABEL_275;
          v214 = v213[48];
        }
        v215 = v370 + v106;
        v216 = (4 * (v370 + v106) + 63) & 0x7FFFFFC0;
        v217 = v216 | 0x3F;
        v218 = v214 + (v216 | 0x3F);
        if (v218 > v213[47])
        {
          v346 = AGX::DataBufferAllocator<34ul>::growNoInline(v213 + 2, 10, 0);
          v214 = v213[48];
          if (!v346)
          {
LABEL_161:
            v219 = v213[50];
            v213[504] = v216;
            v213[2620] |= 0x4000000000uLL;
            v213[2644] |= 0x40uLL;
            v220 = (char *)((v214 + 63) & 0xFFFFFFFFFFFFFFC0);
            v213[48] = &v220[v216];
            v213[441] = &v220[v219];
            if (!v220)
              AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v213 + 2);
            v213[1965] = *(_QWORD *)(v213[5] + 672) + (int)*MEMORY[0x24BE51650];
            bzero(v220, (4 * v215 + 63) & 0x7FFFFFC0);
            v221 = *(_QWORD *)(a1 + 8);
            v222 = *(_QWORD *)(v221 + 3528);
            v223 = *(_QWORD *)(v221 + 4032);
            *(_DWORD *)(v221 + 11336) = (v215 + 15) >> 4;
            *(_QWORD *)(v221 + 21000) |= 0x20uLL;
            *(_QWORD *)(v221 + 21152) |= 0x40uLL;
            AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(v221, *(_QWORD *)(v374 + 32));
            v224 = *(_QWORD *)(a1 + 8);
            v225 = *(_DWORD *)(v224 + 1720) != 0;
            *(_DWORD *)(v224 + 1720) = 0;
            if (((*(_QWORD *)(*(_QWORD *)(v224 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v224 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v224 + 2672) + 2832)) & 0x700000000000) == 0)
            {
              *(_QWORD *)(v224 + 21152) |= v225;
              if (!*(_BYTE *)(v224 + 2529))
              {
LABEL_168:
                AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v224, 0);
                AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v224, *(int8x16_t **)(v224 + 2672), *(int8x16_t **)(v224 + 2680), v224 + 2704, (_QWORD *)(v224 + 5904), v224 + 20960, 0);
                v230 = *(_QWORD *)(v224 + 64);
                *(_DWORD *)v230 = 1849950208;
                *(_DWORD *)(v230 + 4) = v215;
                *(_QWORD *)(v230 + 8) = 0;
                *(_DWORD *)(v230 + 16) = 512;
                *(_QWORD *)(v224 + 64) = v230 + 20;
                v231 = *(_QWORD *)(a1 + 8);
                v389[0] = 0;
                AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v231 + 1656, (_QWORD *)(v231 + 16), (int *)v389 + 1, v232, v233);
                AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v231 + 1656, (_QWORD *)(v231 + 16), (_DWORD *)(v231 + 21264), v389, v234, v235);
                *(_QWORD *)(v231 + 21152) |= 0x10000000000000uLL;
                AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(*(_QWORD *)(a1 + 8), *(_QWORD *)(v384 + 920));
                v236 = *(_QWORD *)(a1 + 8);
                v237 = *(_DWORD *)(v236 + 1720) != 0;
                *(_DWORD *)(v236 + 1720) = 0;
                if (((*(_QWORD *)(*(_QWORD *)(v236 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v236 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v236 + 2672) + 2832)) & 0x700000000000) == 0)
                {
                  *(_QWORD *)(v236 + 21152) |= v237;
                  if (!*(_BYTE *)(v236 + 2529))
                  {
LABEL_173:
                    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v236, 0);
                    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v236, *(int8x16_t **)(v236 + 2672), *(int8x16_t **)(v236 + 2680), v236 + 2704, (_QWORD *)(v236 + 5904), v236 + 20960, 0);
                    v242 = *(_QWORD *)(v236 + 64);
                    *(_DWORD *)v242 = 1849950208;
                    *(_DWORD *)(v242 + 4) = v10;
                    *(_DWORD *)(v242 + 8) = v194;
                    *(_QWORD *)(v242 + 12) = 0x20000000000;
                    *(_QWORD *)(v236 + 64) = v242 + 20;
                    v243 = *(_QWORD *)(a1 + 8);
                    v389[0] = 0;
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v243 + 1656, (_QWORD *)(v243 + 16), (int *)v389 + 1, v244, v245);
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v243 + 1656, (_QWORD *)(v243 + 16), (_DWORD *)(v243 + 21264), v389, v246, v247);
                    *(_QWORD *)(v243 + 21152) |= 0x10000000000000uLL;
                    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(*(_QWORD *)(a1 + 8), v384);
                    v248 = a1;
                    v249 = *(_QWORD *)(a1 + 8);
                    if (v359)
                    {
                      v250 = (int *)MEMORY[0x24BE51650];
                      v251 = (_QWORD *)(v359 + (int)*MEMORY[0x24BE51650]);
                      v253 = v251[2];
                      v252 = v251[3];
                      v254 = v251[1];
                      *(_QWORD *)(v249 + 17248) = v254;
                      *(_QWORD *)(v249 + 19264) = v252;
                      *(_QWORD *)(v249 + 3544) = v254;
                      *(_QWORD *)(v249 + 4048) = v253 & 0xFFFFFFFFFFFFFFLL;
                      *(_QWORD *)(v249 + 3024) = v252;
                      *(_DWORD *)(v249 + 11640) = v253;
                      *(_DWORD *)(v249 + 11892) = v253;
                      *(_DWORD *)(v249 + 12144) = v254 >> 8;
                      *(_QWORD *)(v249 + 15736) = v251;
                      v255 = a5;
                      v256 = v373;
                      v257 = v363;
                      if (*(_QWORD *)(v249 + 1480))
                      {
                        MTLResourceListAddResource();
                        v248 = a1;
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v249 + 15736) = 0;
                      *(_QWORD *)(v249 + 3544) = 0;
                      *(_QWORD *)(v249 + 4048) = 0;
                      *(_QWORD *)(v249 + 3024) = 0;
                      *(_QWORD *)(v249 + 17248) = 0;
                      *(_QWORD *)(v249 + 19264) = 0;
                      *(_DWORD *)(v249 + 11640) = 0;
                      *(_DWORD *)(v249 + 11892) = 0;
                      v255 = a5;
                      v256 = v373;
                      v250 = (int *)MEMORY[0x24BE51650];
                      v257 = v363;
                    }
                    *(_QWORD *)(v249 + 20960) |= 0x10000000000uLL;
                    *(_QWORD *)(v249 + 20984) |= 0x10000000000uLL;
                    *(_QWORD *)(v249 + 21152) |= 0xC0uLL;
                    v258 = *(_QWORD *)(v248 + 8);
                    if (v255)
                    {
                      v259 = (_QWORD *)(v255 + *v250);
                      v261 = v259[2];
                      v260 = v259[3];
                      v262 = v259[1];
                      *(_QWORD *)(v258 + 17240) = v262;
                      *(_QWORD *)(v258 + 19256) = v260;
                      *(_QWORD *)(v258 + 3536) = v262 + a6;
                      *(_QWORD *)(v258 + 4040) = (v261 & 0xFFFFFFFFFFFFFFLL) - a6;
                      *(_QWORD *)(v258 + 3016) = v260 + a6;
                      *(_DWORD *)(v258 + 11636) = v261;
                      *(_DWORD *)(v258 + 11888) = v261;
                      *(_DWORD *)(v258 + 12140) = v262 >> 8;
                      *(_QWORD *)(v258 + 15728) = v259;
                      if (*(_QWORD *)(v258 + 1480))
                      {
LABEL_186:
                        MTLResourceListAddResource();
                        v248 = a1;
                      }
                    }
                    else
                    {
                      if (!v376)
                      {
                        *(_QWORD *)(v258 + 15728) = 0;
                        *(_QWORD *)(v258 + 3536) = 0;
                        *(_QWORD *)(v258 + 4040) = 0;
                        *(_QWORD *)(v258 + 3016) = 0;
                        *(_QWORD *)(v258 + 17240) = 0;
                        *(_QWORD *)(v258 + 19256) = 0;
                        *(_DWORD *)(v258 + 11636) = 0;
                        *(_DWORD *)(v258 + 11888) = 0;
                        goto LABEL_231;
                      }
                      v263 = (_QWORD *)(v376 + *v250);
                      v265 = v263[2];
                      v264 = v263[3];
                      v266 = v263[1];
                      *(_QWORD *)(v258 + 17240) = v266;
                      *(_QWORD *)(v258 + 19256) = v264;
                      *(_QWORD *)(v258 + 3536) = v266;
                      *(_QWORD *)(v258 + 4040) = v265 & 0xFFFFFFFFFFFFFFLL;
                      *(_QWORD *)(v258 + 3016) = v264;
                      *(_DWORD *)(v258 + 11636) = v265;
                      *(_DWORD *)(v258 + 11888) = v265;
                      *(_DWORD *)(v258 + 12140) = v266 >> 8;
                      *(_QWORD *)(v258 + 15728) = v263;
                      if (*(_QWORD *)(v258 + 1480))
                        goto LABEL_186;
                    }
LABEL_231:
                    v310 = v356 & 0xFFFFFFFFFFFFFFLL;
                    *(_QWORD *)(v258 + 20960) |= 0x8000000000uLL;
                    *(_QWORD *)(v258 + 20984) |= 0x8000000000uLL;
                    *(_QWORD *)(v258 + 21152) |= 0xC0uLL;
                    v311 = *(_QWORD *)(v248 + 8);
                    if (v256)
                    {
                      v312 = (_QWORD *)(v256 + *v250);
                      v314 = v312[2];
                      v313 = v312[3];
                      v315 = v312[1];
                      *(_QWORD *)(v311 + 17256) = v315;
                      *(_QWORD *)(v311 + 19272) = v313;
                      *(_QWORD *)(v311 + 3552) = v315 + a8;
                      *(_QWORD *)(v311 + 4056) = (v314 & 0xFFFFFFFFFFFFFFLL) - a8;
                      *(_QWORD *)(v311 + 3032) = v313 + a8;
                      *(_DWORD *)(v311 + 11644) = v314;
                      *(_DWORD *)(v311 + 11896) = v314;
                      *(_DWORD *)(v311 + 12148) = v315 >> 8;
                      *(_QWORD *)(v311 + 15744) = v312;
                      if (*(_QWORD *)(v311 + 1480))
                      {
                        MTLResourceListAddResource();
                        v248 = a1;
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v311 + 15744) = 0;
                      *(_QWORD *)(v311 + 3552) = 0;
                      *(_QWORD *)(v311 + 4056) = 0;
                      *(_QWORD *)(v311 + 3032) = 0;
                      *(_QWORD *)(v311 + 17256) = 0;
                      *(_QWORD *)(v311 + 19272) = 0;
                      *(_DWORD *)(v311 + 11644) = 0;
                      *(_DWORD *)(v311 + 11896) = 0;
                    }
                    *(_QWORD *)(v311 + 20960) |= 0x20000000000uLL;
                    *(_QWORD *)(v311 + 20984) |= 0x20000000000uLL;
                    *(_QWORD *)(v311 + 21152) |= 0xC0uLL;
                    v316 = *(_QWORD **)(v248 + 8);
                    v317 = v316[2625] | 0x20;
                    v318 = v316[2644];
                    v316[439] = v357 + v387;
                    v316[502] = v310 - v387;
                    v319 = v316[2620];
                    v316[2620] = v319 | 0x1000000000;
                    v320 = v316[2623];
                    v316[2623] = v320 | 0x1000000000;
                    if (v380)
                    {
                      v316[440] = v353 + v357;
                      v316[503] = v310 - v353;
                      v316[2620] = v319 | 0x3000000000;
                      v316[2623] = v320 | 0x3000000000;
                      v321 = v318 | 0xC0;
                    }
                    else
                    {
                      v321 = v318 | 0x40;
                    }
                    v316[1416] = 0;
                    v316[2625] = v317;
                    v316[2644] = v321;
                    v322 = (unsigned __int8 *)objc_msgSend(v362, "bytes", v353);
                    result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(*(_QWORD *)(a1 + 8), 3);
                    v274 = a1;
                    v323 = *v250;
                    v388 = *(_QWORD *)(v257 + v323 + 8);
                    v324 = *(_QWORD *)(a1 + 8);
                    if (*(_BYTE *)(v324 + 2529))
                    {
                      *(_BYTE *)(v324 + 2529) = 0;
                      *(_QWORD *)(v324 + 21152) |= 1uLL;
                    }
                    if (v257 != *(_QWORD *)(v324 + 2552))
                    {
                      result = IOGPUResourceListAddResource();
                      v274 = a1;
                      v324 = *(_QWORD *)(a1 + 8);
                      *(_QWORD *)(v324 + 2552) = v257;
                      LODWORD(v323) = *v250;
                    }
                    if (v376 != *(_QWORD *)(v324 + 2560))
                    {
                      result = IOGPUResourceListAddResource();
                      v274 = a1;
                      v324 = *(_QWORD *)(a1 + 8);
                      *(_QWORD *)(v324 + 2560) = v376;
                      LODWORD(v323) = *v250;
                    }
                    v325 = v384;
                    v326 = v383;
                    if (v215)
                    {
                      v327 = v215;
                      v328 = 0;
                      v329 = *(_QWORD *)(v376 + (int)v323 + 8);
                      v330 = *(_QWORD *)(*(_QWORD *)(v324 + 2672)
                                       + 16
                                       * (*(unsigned __int8 *)(v324 + 2528) | (2 * *(_DWORD *)(v324 + 2536)))
                                       + 3432) & 0xE23FFFFFLL | 0xFFFF10000000;
                      v331 = 20 * v327;
                      do
                      {
                        if (v326 == 1 && 20 * v370 == v328)
                        {
                          v338 = *(_QWORD *)(v274 + 8);
                          *(_DWORD *)(v338 + 11328) = 1;
                          *(_QWORD *)(v338 + 21000) |= 0x20uLL;
                          *(_QWORD *)(v338 + 21152) |= 0x40uLL;
                        }
                        if (*(_DWORD *)(v325 + 832) >= *v322)
                        {
                          v339 = *(int64x2_t **)(v274 + 8);
                          v339[220].i64[1] = v222;
                          v339[252].i64[0] = v223;
                          v340 = v339[1310].i64[0];
                          v339[1310].i64[0] = v340 | 0x4000000000;
                          v339[1311].i64[1] |= 0x4000000000uLL;
                          v341 = v339[1322].i64[0] | 0xC0;
                          v339[1322].i64[0] = v341;
                          v342 = v329 + v328;
                          v343 = (int)*MEMORY[0x24BE51650];
                          v344 = v339[107].i32[2] != 2;
                          v339[107].i32[2] = 2;
                          if (((*(_QWORD *)(v339[167].i64[0] + 1288) | *(_QWORD *)(v339[167].i64[0] + 1264) | *(_QWORD *)(v339[167].i64[0] + 2832)) & 0x700000000000) != 0)
                          {
                            v345 = v376 + v343;
                            v339[1310].i64[0] = v340 | 0x704000000000;
                            v339[223].i64[1] = v342 + 12;
                            v339[224].i64[0] = v342 + 16;
                            v339[255] = vaddq_s64(v339[255], (int64x2_t)xmmword_232D73CD0);
                            v339[986].i64[0] = v345;
                            v339[985].i64[1] = v345;
                          }
                          v339[1322].i64[0] = v341 | v344;
                          AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(*(_QWORD *)(v274 + 8), *(int8x16_t **)(*(_QWORD *)(v274 + 8) + 2672), *(int8x16_t **)(*(_QWORD *)(v274 + 8) + 2680), *(_QWORD *)(v274 + 8) + 2704, (_QWORD *)(*(_QWORD *)(v274 + 8) + 5904), *(_QWORD *)(v274 + 8) + 20960, 0);
                          v274 = a1;
                          v332 = *(_QWORD *)(a1 + 8);
                          v333 = *(uint64_t **)(v332 + 64);
                          *v333 = v330;
                          *(_QWORD *)(v332 + 64) = v333 + 1;
                          v334 = *(_QWORD *)(a1 + 8);
                          v335 = *(unsigned int **)(v334 + 64);
                          v336 = (char *)v335 + *(_QWORD *)(v334 + 80);
                          *(_QWORD *)(v334 + 64) = v335 + 13;
                          v337 = v336 + 32;
                          v336 += 52;
                          result = (unint64_t)(v342 + 6) >> 32;
                          *v335 = HIDWORD(v337) | 0x8D000000;
                          v335[1] = v337 & 0xFFFFFFFC;
                          v335[2] = (unint64_t)(v342 + 4) >> 32;
                          v335[3] = (v342 + 4) & 0xFFFFFFFE;
                          v335[4] = HIDWORD(v336) | 0x8A000000;
                          v335[5] = v336 & 0xFFFFFFFC;
                          v335[6] = result;
                          v335[7] = (v342 + 6) & 0xFFFFFFFE;
                          v335[8] = HIDWORD(v388) | 0x70C20600;
                          v335[9] = v388;
                          v335[10] = HIDWORD(v342);
                          v335[11] = v342 & 0xFFFFFFFC;
                          v335[12] = 170;
                          v325 = v384;
                          v326 = v383;
                        }
                        v328 += 20;
                        v223 -= 4;
                        v222 += 4;
                        ++v322;
                      }
                      while (v331 != v328);
                    }
                    goto LABEL_254;
                  }
LABEL_172:
                  *(_BYTE *)(v236 + 2529) = 0;
                  *(_QWORD *)(v236 + 21152) |= 1uLL;
                  goto LABEL_173;
                }
                *(_QWORD *)(v236 + 20960) |= 0x700000000000uLL;
                *(_QWORD *)(v236 + 21152) |= v237 | 0x40;
                *(_QWORD *)(v236 + 3592) = 0;
                v238 = *(_QWORD **)(v236 + 160);
                v239 = v238 + 1;
                if ((unint64_t)(v238 + 1) > *(_QWORD *)(v236 + 152))
                {
                  v350 = AGX::DataBufferAllocator<34ul>::growNoInline(v236 + 16, 3, 0);
                  v238 = *(_QWORD **)(v236 + 160);
                  if (!v350)
                  {
LABEL_171:
                    v240 = (char *)v238 + *(_QWORD *)(v236 + 176);
                    *(_QWORD *)(v236 + 160) = v238 + 1;
                    *(_QWORD *)(v236 + 3576) = v240;
                    *(_QWORD *)(v236 + 3584) = v240 + 4;
                    *v238 = 0;
                    v241 = *(_QWORD *)(*(_QWORD *)(v236 + 40) + 224) + (int)*MEMORY[0x24BE51650];
                    *(_QWORD *)(v236 + 15776) = v241;
                    *(_QWORD *)(v236 + 15768) = v241;
                    if (!*(_BYTE *)(v236 + 2529))
                      goto LABEL_173;
                    goto LABEL_172;
                  }
                  v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) > *(_QWORD *)(v236 + 152))
                    goto LABEL_275;
                }
                *(_QWORD *)(v236 + 168) = v239;
                goto LABEL_171;
              }
LABEL_167:
              *(_BYTE *)(v224 + 2529) = 0;
              *(_QWORD *)(v224 + 21152) |= 1uLL;
              goto LABEL_168;
            }
            *(_QWORD *)(v224 + 20960) |= 0x700000000000uLL;
            *(_QWORD *)(v224 + 21152) |= v225 | 0x40;
            *(_QWORD *)(v224 + 3592) = 0;
            v226 = *(_QWORD **)(v224 + 160);
            v227 = v226 + 1;
            if ((unint64_t)(v226 + 1) > *(_QWORD *)(v224 + 152))
            {
              v349 = AGX::DataBufferAllocator<34ul>::growNoInline(v224 + 16, 3, 0);
              v226 = *(_QWORD **)(v224 + 160);
              if (!v349)
              {
LABEL_166:
                v228 = (char *)v226 + *(_QWORD *)(v224 + 176);
                *(_QWORD *)(v224 + 160) = v226 + 1;
                *(_QWORD *)(v224 + 3576) = v228;
                *(_QWORD *)(v224 + 3584) = v228 + 4;
                *v226 = 0;
                v229 = *(_QWORD *)(*(_QWORD *)(v224 + 40) + 224) + (int)*MEMORY[0x24BE51650];
                *(_QWORD *)(v224 + 15776) = v229;
                *(_QWORD *)(v224 + 15768) = v229;
                if (!*(_BYTE *)(v224 + 2529))
                  goto LABEL_168;
                goto LABEL_167;
              }
              v227 = v226 + 1;
              if ((unint64_t)(v226 + 1) > *(_QWORD *)(v224 + 152))
                goto LABEL_275;
            }
            *(_QWORD *)(v224 + 168) = v227;
            goto LABEL_166;
          }
          v218 = v214 + v217;
          if ((unint64_t)(v214 + v217) > v213[47])
            goto LABEL_275;
        }
        v213[49] = v218;
        goto LABEL_161;
      }
      *(_QWORD *)(v188 + 20960) |= 0x700000000000uLL;
      *(_QWORD *)(v188 + 21152) |= v189 | 0x40;
      *(_QWORD *)(v188 + 3592) = 0;
      v190 = *(_QWORD **)(v188 + 160);
      v191 = v190 + 1;
      if ((unint64_t)(v190 + 1) > *(_QWORD *)(v188 + 152))
      {
        v348 = AGX::DataBufferAllocator<34ul>::growNoInline(v188 + 16, 3, 0);
        v190 = *(_QWORD **)(v188 + 160);
        if (!v348)
          goto LABEL_147;
        v191 = v190 + 1;
        if ((unint64_t)(v190 + 1) > *(_QWORD *)(v188 + 152))
          goto LABEL_275;
      }
      *(_QWORD *)(v188 + 168) = v191;
LABEL_147:
      v192 = (char *)v190 + *(_QWORD *)(v188 + 176);
      *(_QWORD *)(v188 + 160) = v190 + 1;
      *(_QWORD *)(v188 + 3576) = v192;
      *(_QWORD *)(v188 + 3584) = v192 + 4;
      *v190 = 0;
      v193 = *(_QWORD *)(*(_QWORD *)(v188 + 40) + 224) + *v45;
      *(_QWORD *)(v188 + 15776) = v193;
      *(_QWORD *)(v188 + 15768) = v193;
      goto LABEL_149;
    }
    v381 = v32;
    v46 = objc_msgSend(v44, "length");
    v47 = a1;
    v48 = v46;
    v49 = *(_QWORD *)(a1 + 8);
    if (v44)
    {
      v50 = &v44[*v45];
      v52 = *((_QWORD *)v50 + 2);
      v51 = *((_QWORD *)v50 + 3);
      v53 = *((_QWORD *)v50 + 1);
      *(_QWORD *)(v49 + 17256) = v53;
      *(_QWORD *)(v49 + 19272) = v51;
      *(_QWORD *)(v49 + 3552) = v53;
      *(_QWORD *)(v49 + 4056) = v52 & 0xFFFFFFFFFFFFFFLL;
      *(_QWORD *)(v49 + 3032) = v51;
      *(_DWORD *)(v49 + 11644) = v52;
      *(_DWORD *)(v49 + 11896) = v52;
      *(_DWORD *)(v49 + 12148) = v53 >> 8;
      *(_QWORD *)(v49 + 15744) = v50;
      if (*(_QWORD *)(v49 + 1480))
      {
        MTLResourceListAddResource();
        v47 = a1;
      }
    }
    else
    {
      *(_QWORD *)(v49 + 15744) = 0;
      *(_QWORD *)(v49 + 3552) = 0;
      *(_QWORD *)(v49 + 4056) = 0;
      *(_QWORD *)(v49 + 3032) = 0;
      *(_QWORD *)(v49 + 17256) = 0;
      *(_QWORD *)(v49 + 19272) = 0;
      *(_DWORD *)(v49 + 11644) = 0;
      *(_DWORD *)(v49 + 11896) = 0;
    }
    *(_QWORD *)(v49 + 20960) |= 0x20000000000uLL;
    *(_QWORD *)(v49 + 20984) |= 0x20000000000uLL;
    *(_QWORD *)(v49 + 21152) |= 0xC0uLL;
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(*(_QWORD *)(v47 + 8), *(_QWORD *)(v374 + 24));
    v54 = *(_QWORD *)(a1 + 8);
    v55 = *(_DWORD *)(v54 + 1720) != 0;
    *(_DWORD *)(v54 + 1720) = 0;
    if (((*(_QWORD *)(*(_QWORD *)(v54 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v54 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v54 + 2672) + 2832)) & 0x700000000000) == 0)
    {
      v58 = a9 * v10;
      *(_QWORD *)(v54 + 21152) |= v55;
      goto LABEL_41;
    }
    *(_QWORD *)(v54 + 20960) |= 0x700000000000uLL;
    *(_QWORD *)(v54 + 21152) |= v55 | 0x40;
    *(_QWORD *)(v54 + 3592) = 0;
    v56 = *(_QWORD **)(v54 + 160);
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) > *(_QWORD *)(v54 + 152))
    {
      v351 = AGX::DataBufferAllocator<34ul>::growNoInline(v54 + 16, 3, 0);
      v56 = *(_QWORD **)(v54 + 160);
      if (!v351)
        goto LABEL_39;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) > *(_QWORD *)(v54 + 152))
        goto LABEL_275;
    }
    *(_QWORD *)(v54 + 168) = v57;
LABEL_39:
    v58 = a9 * v10;
    v59 = (char *)v56 + *(_QWORD *)(v54 + 176);
    *(_QWORD *)(v54 + 160) = v56 + 1;
    *(_QWORD *)(v54 + 3576) = v59;
    *(_QWORD *)(v54 + 3584) = v59 + 4;
    *v56 = 0;
    v60 = *(_QWORD *)(*(_QWORD *)(v54 + 40) + 224) + *v45;
    *(_QWORD *)(v54 + 15776) = v60;
    *(_QWORD *)(v54 + 15768) = v60;
LABEL_41:
    if (*(_BYTE *)(v54 + 2529))
    {
      *(_BYTE *)(v54 + 2529) = 0;
      *(_QWORD *)(v54 + 21152) |= 1uLL;
    }
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v54, 0);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v54, *(int8x16_t **)(v54 + 2672), *(int8x16_t **)(v54 + 2680), v54 + 2704, (_QWORD *)(v54 + 5904), v54 + 20960, 0);
    v61 = *(_QWORD *)(v54 + 64);
    *(_DWORD *)v61 = 1849950208;
    *(_DWORD *)(v61 + 4) = v48 >> 4;
    *(_QWORD *)(v61 + 8) = 0;
    *(_DWORD *)(v61 + 16) = 512;
    *(_QWORD *)(v54 + 64) = v61 + 20;
    v62 = *(_QWORD *)(a1 + 8);
    v389[0] = 0;
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v62 + 1656, (_QWORD *)(v62 + 16), (int *)v389 + 1, v63, v64);
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v62 + 1656, (_QWORD *)(v62 + 16), (_DWORD *)(v62 + 21264), v389, v65, v66);
    *(_QWORD *)(v62 + 21152) |= 0x10000000000000uLL;
    v389[0] = 0;
    *(_BYTE *)(v62 + 2032) = 1;
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(v62 + 1656, (_QWORD *)(v62 + 16), (int *)v389 + 1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(v62);
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v62 + 1656, (_QWORD *)(v62 + 16), (int *)v389 + 1, v67, v68);
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v62 + 1656, (_QWORD *)(v62 + 16), (_DWORD *)(v62 + 21264), v389, v69, v70);
    v13 = a1;
    *(_QWORD *)(v62 + 21152) |= 0x10000000000000uLL;
    *(_BYTE *)(a1 + 28) = 0;
    v10 = a4;
    v15 = v384;
    LODWORD(v23) = v58;
    v32 = v381;
    goto LABEL_44;
  }
  if (v27 == 1)
  {
    v28 = *(_DWORD *)(v15 + 816);
    v29 = 16;
    if (v28 != 3)
    {
      if (v28 == 2)
        v29 = 16;
      else
        v29 = 4;
    }
    v30 = 5;
  }
  else
  {
    v29 = 8;
    v30 = 4;
  }
  v355 = v30;
  v33 = *(unsigned int *)(v15 + 820);
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 1456) + 808) + 6184);
  v35 = v34 + 16 * v33;
  v36 = *(_QWORD *)(v35 + 8 * (*(_DWORD *)(a1 + 24) & 1) + 40);
  v379 = a9 * a4;
  switch(*(_DWORD *)(v386 + 3756))
  {
    case 0:
      v38 = a7;
      v39 = 1;
      break;
    case 1:
      v38 = a7;
      v39 = a4;
      break;
    case 2:
      v38 = a7;
      v39 = a9;
      break;
    case 3:
      v38 = a7;
      v39 = a9 * a4;
      break;
    default:
      v38 = a7;
      v39 = 0;
      break;
  }
  v364 = *(_QWORD *)(v34 + 8 * v33 + 168);
  v382 = *(_DWORD *)(v386 + 3752);
  v377 = *(_QWORD *)(v35 + 8 * *(unsigned int *)(v15 + 812) + 232);
  if (v36)
  {
    v74 = (_QWORD *)(v36 + (int)*MEMORY[0x24BE51650]);
    v76 = v74[2];
    v75 = v74[3];
    v77 = v74[1];
    *(_QWORD *)(v14 + 17248) = v77;
    *(_QWORD *)(v14 + 19264) = v75;
    *(_QWORD *)(v14 + 3544) = v77;
    *(_QWORD *)(v14 + 4048) = v76 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v14 + 3024) = v75;
    *(_DWORD *)(v14 + 11640) = v76;
    *(_DWORD *)(v14 + 11892) = v76;
    *(_DWORD *)(v14 + 12144) = v77 >> 8;
    *(_QWORD *)(v14 + 15736) = v74;
    if (*(_QWORD *)(v14 + 1480))
    {
      MTLResourceListAddResource();
      v15 = v384;
      v13 = a1;
    }
  }
  else
  {
    *(_QWORD *)(v14 + 15736) = 0;
    *(_QWORD *)(v14 + 3544) = 0;
    *(_QWORD *)(v14 + 4048) = 0;
    *(_QWORD *)(v14 + 3024) = 0;
    *(_QWORD *)(v14 + 17248) = 0;
    *(_QWORD *)(v14 + 19264) = 0;
    *(_DWORD *)(v14 + 11640) = 0;
    *(_DWORD *)(v14 + 11892) = 0;
  }
  v360 = v36;
  *(_QWORD *)(v14 + 20960) |= 0x10000000000uLL;
  *(_QWORD *)(v14 + 20984) |= 0x10000000000uLL;
  *(_QWORD *)(v14 + 21152) |= 0xC0uLL;
  v78 = (20 * v39 * v355 + 63) & 0xFFFFFFC0;
  v79 = *(_QWORD *)(v15 + 904);
  v80 = *(_QWORD **)(v79 + 8);
  if (v80[354] & 0x2000000000 | (v80[161] | v80[158]) & 0x2000000000 | (v80[164] | v80[168] | v80[171]) & 0x2000000000)
    v81 = (v39 * v29 + 63) & 0xFFFFFFC0;
  else
    v81 = 0;
  v82 = v78 + ((4 * v39 * v355 + 63) & 0xFFFFFFC0);
  v83 = AGX::DeviceInternalBuffer<AGX::TessellationInternalBufferResourceInfo>::getBufferInfo(*(_QWORD *)(v34 + 8 * (*(_DWORD *)(v13 + 24) & 1) + 424), v81 + v82);
  -[IOGPUMetalBuffer contents](v83, "contents");
  v84 = (int *)MEMORY[0x24BE51650];
  IOGPUResourceListAddResource();
  v85 = (char *)v83 + *v84;
  v86 = *((_QWORD *)v85 + 9);
  v87 = *((_QWORD *)v85 + 2) & 0xFFFFFFFFFFFFFFLL;
  v88 = *(_QWORD **)(a1 + 8);
  v88[2155] = v86;
  v88[442] = v86;
  v88[505] = v87;
  v88[2620] |= 0x8000000000uLL;
  v88[2623] |= 0x8000000000uLL;
  v88[2644] |= 0xC0uLL;
  v88[1966] = v85;
  IOGPUResourceListAddResource();
  v89 = a1;
  v90 = (char *)v83 + *v84;
  v91 = *((_QWORD *)v90 + 9);
  v92 = *((_QWORD *)v90 + 2) & 0xFFFFFFFFFFFFFFLL;
  v93 = *(_QWORD **)(a1 + 8);
  v93[2152] = v91;
  v93[439] = v91 + v78;
  v93[502] = v92 - v78;
  v93[2620] |= 0x1000000000uLL;
  v93[2623] |= 0x1000000000uLL;
  v93[2644] |= 0xC0uLL;
  v93[1963] = v90;
  v375 = v83;
  if (v81)
  {
    IOGPUResourceListAddResource();
    v89 = a1;
    v94 = (char *)v83 + *v84;
    v95 = *((_QWORD *)v94 + 9);
    v96 = *((_QWORD *)v94 + 2) & 0xFFFFFFFFFFFFFFLL;
    v97 = *(_QWORD **)(a1 + 8);
    v97[2153] = v95;
    v97[440] = v95 + v82;
    v97[503] = v96 - v82;
    v97[2620] |= 0x2000000000uLL;
    v97[2623] |= 0x2000000000uLL;
    v97[2644] |= 0xC0uLL;
    v97[1964] = v94;
  }
  else
  {
    v98 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v98 + 15712) = 0;
    *(_QWORD *)(v98 + 3520) = 0;
    *(_QWORD *)(v98 + 4024) = 0;
    *(_QWORD *)(v98 + 3000) = 0;
    *(_QWORD *)(v98 + 17224) = 0;
    *(_QWORD *)(v98 + 19240) = 0;
    *(_DWORD *)(v98 + 11628) = 0;
    *(_DWORD *)(v98 + 11880) = 0;
    *(_QWORD *)(v98 + 20960) |= 0x2000000000uLL;
    *(_QWORD *)(v98 + 20984) |= 0x2000000000uLL;
    *(_QWORD *)(v98 + 21152) |= 0xC0uLL;
  }
  v99 = v38;
  v100 = *(_QWORD *)(v89 + 8);
  *(_DWORD *)(v100 + 11272) = a3;
  *(_DWORD *)(v100 + 11276) = v10;
  *(_DWORD *)(v100 + 11280) = a10;
  *(_DWORD *)(v100 + 11284) = a9;
  if (*(_BYTE *)(v384 + 836))
    v101 = *(float *)(v89 + 16);
  else
    v101 = 1.0;
  v102 = (int *)MEMORY[0x24BE51650];
  *(float *)(v100 + 11340) = v101;
  *(_DWORD *)(v100 + 11296) = *(_DWORD *)(v384 + 832);
  v103 = *(_DWORD *)(v386 + 3756);
  switch(v103)
  {
    case 0u:
      *(_DWORD *)(v100 + 11272) = 0;
      *(_DWORD *)(v100 + 11280) = 0;
      goto LABEL_68;
    case 1u:
      *(_DWORD *)(v100 + 11280) = 0;
      v105 = 1;
      v104 = v10;
      break;
    case 2u:
      *(_QWORD *)(v100 + 11272) = 0x100000000;
      v104 = 1;
      goto LABEL_108;
    case 3u:
      v104 = v10;
LABEL_108:
      v105 = a9;
      break;
    default:
LABEL_68:
      v104 = 1;
      v105 = 1;
      break;
  }
  v146 = *(_DWORD *)(v384 + 828);
  v147 = *(_DWORD *)(v386 + 3752);
  if (v147 == 1)
  {
    v148 = v146 == 0;
    v149 = 24;
    v150 = 12;
LABEL_113:
    if (v148)
      v149 = v150;
    v143 = v103 >= 2;
    v151 = v103 - 2;
    if (!v143)
      goto LABEL_120;
    goto LABEL_117;
  }
  if (!v147)
  {
    v148 = v146 == 0;
    v149 = 16;
    v150 = 8;
    goto LABEL_113;
  }
  v149 = 0;
  v143 = v103 >= 2;
  v151 = v103 - 2;
  if (!v143)
  {
LABEL_120:
    v152 = 0;
    goto LABEL_121;
  }
LABEL_117:
  if (v151 > 1)
    goto LABEL_122;
  v152 = *(_DWORD *)(a1 + 20) / v149;
LABEL_121:
  *(_DWORD *)(v100 + 11292) = v152;
LABEL_122:
  *(_QWORD *)(v100 + 21000) |= 0x20uLL;
  *(_QWORD *)(v100 + 21152) |= 0x40uLL;
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(v100, v79);
  v153 = *(_QWORD *)(a1 + 8);
  v154 = *(_DWORD *)(v153 + 1720) != 0;
  *(_DWORD *)(v153 + 1720) = 0;
  if (((*(_QWORD *)(*(_QWORD *)(v153 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v153 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v153 + 2672) + 2832)) & 0x700000000000) == 0)
  {
    *(_QWORD *)(v153 + 21152) |= v154;
    if (!*(_BYTE *)(v153 + 2529))
      goto LABEL_127;
    goto LABEL_126;
  }
  *(_QWORD *)(v153 + 20960) |= 0x700000000000uLL;
  *(_QWORD *)(v153 + 21152) |= v154 | 0x40;
  *(_QWORD *)(v153 + 3592) = 0;
  v155 = *(_QWORD **)(v153 + 160);
  v156 = v155 + 1;
  if ((unint64_t)(v155 + 1) <= *(_QWORD *)(v153 + 152))
    goto LABEL_124;
  v347 = AGX::DataBufferAllocator<34ul>::growNoInline(v153 + 16, 3, 0);
  v155 = *(_QWORD **)(v153 + 160);
  if (v347)
  {
    v156 = v155 + 1;
    if ((unint64_t)(v155 + 1) <= *(_QWORD *)(v153 + 152))
    {
LABEL_124:
      *(_QWORD *)(v153 + 168) = v156;
      goto LABEL_125;
    }
LABEL_275:
    abort();
  }
LABEL_125:
  v157 = (char *)v155 + *(_QWORD *)(v153 + 176);
  *(_QWORD *)(v153 + 160) = v155 + 1;
  *(_QWORD *)(v153 + 3576) = v157;
  *(_QWORD *)(v153 + 3584) = v157 + 4;
  *v155 = 0;
  v158 = *(_QWORD *)(*(_QWORD *)(v153 + 40) + 224) + *v102;
  *(_QWORD *)(v153 + 15776) = v158;
  *(_QWORD *)(v153 + 15768) = v158;
  if (*(_BYTE *)(v153 + 2529))
  {
LABEL_126:
    *(_BYTE *)(v153 + 2529) = 0;
    *(_QWORD *)(v153 + 21152) |= 1uLL;
  }
LABEL_127:
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v153, 0);
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v153, *(int8x16_t **)(v153 + 2672), *(int8x16_t **)(v153 + 2680), v153 + 2704, (_QWORD *)(v153 + 5904), v153 + 20960, 0);
  v159 = *(_QWORD *)(v153 + 64);
  *(_DWORD *)v159 = 1849950208;
  *(_DWORD *)(v159 + 4) = v104;
  *(_DWORD *)(v159 + 8) = v105 - 1;
  v160.i64[0] = 0x20000000000;
  *(_QWORD *)(v159 + 12) = 0x20000000000;
  *(_QWORD *)(v153 + 64) = v159 + 20;
  v161 = *(_QWORD *)(a1 + 8);
  v389[0] = 0;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v161 + 1656, (_QWORD *)(v161 + 16), (int *)v389 + 1, v160, v162);
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v161 + 1656, (_QWORD *)(v161 + 16), (_DWORD *)(v161 + 21264), v389, v163, v164);
  v165 = a1;
  *(_QWORD *)(v161 + 21152) |= 0x10000000000000uLL;
  v166 = *(_DWORD *)(a1 + 24);
  if (v166 && (v166 & 1) == 0)
  {
    v167 = *(_QWORD *)(a1 + 8);
    v389[0] = 0;
    *(_BYTE *)(v167 + 2032) = 1;
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(v167 + 1656, (_QWORD *)(v167 + 16), (int *)v389 + 1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(v167);
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v167 + 1656, (_QWORD *)(v167 + 16), (int *)v389 + 1, v168, v169);
    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v167 + 1656, (_QWORD *)(v167 + 16), (_DWORD *)(v167 + 21264), v389, v170, v171);
    v165 = a1;
    *(_QWORD *)(v167 + 21152) |= 0x10000000000000uLL;
  }
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(*(_QWORD *)(v165 + 8), v384);
  v172 = a1;
  v173 = *(_QWORD *)(a1 + 8);
  if (v364)
  {
    v174 = (_QWORD *)(v364 + *v102);
    v176 = v174[2];
    v175 = v174[3];
    v177 = v174[1];
    *(_QWORD *)(v173 + 17248) = v177;
    *(_QWORD *)(v173 + 19264) = v175;
    *(_QWORD *)(v173 + 3544) = v177;
    *(_QWORD *)(v173 + 4048) = v176 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v173 + 3024) = v175;
    *(_DWORD *)(v173 + 11640) = v176;
    *(_DWORD *)(v173 + 11892) = v176;
    *(_DWORD *)(v173 + 12144) = v177 >> 8;
    *(_QWORD *)(v173 + 15736) = v174;
    v178 = v377;
    if (*(_QWORD *)(v173 + 1480))
    {
      MTLResourceListAddResource();
      v172 = a1;
    }
  }
  else
  {
    *(_QWORD *)(v173 + 15736) = 0;
    *(_QWORD *)(v173 + 3544) = 0;
    *(_QWORD *)(v173 + 4048) = 0;
    *(_QWORD *)(v173 + 3024) = 0;
    *(_QWORD *)(v173 + 17248) = 0;
    *(_QWORD *)(v173 + 19264) = 0;
    *(_DWORD *)(v173 + 11640) = 0;
    *(_DWORD *)(v173 + 11892) = 0;
    v178 = v377;
  }
  *(_QWORD *)(v173 + 20960) |= 0x10000000000uLL;
  *(_QWORD *)(v173 + 20984) |= 0x10000000000uLL;
  *(_QWORD *)(v173 + 21152) |= 0xC0uLL;
  v179 = *(_QWORD *)(v172 + 8);
  if (a5)
  {
    v180 = (_QWORD *)(a5 + *v102);
    v182 = v180[2];
    v181 = v180[3];
    v183 = v180[1];
    *(_QWORD *)(v179 + 17240) = v183;
    *(_QWORD *)(v179 + 19256) = v181;
    *(_QWORD *)(v179 + 3536) = v183 + a6;
    *(_QWORD *)(v179 + 4040) = (v182 & 0xFFFFFFFFFFFFFFLL) - a6;
    *(_QWORD *)(v179 + 3016) = v181 + a6;
    *(_DWORD *)(v179 + 11636) = v182;
    *(_DWORD *)(v179 + 11888) = v182;
    *(_DWORD *)(v179 + 12140) = v183 >> 8;
    *(_QWORD *)(v179 + 15728) = v180;
    if (!*(_QWORD *)(v179 + 1480))
      goto LABEL_188;
LABEL_141:
    MTLResourceListAddResource();
    v172 = a1;
    goto LABEL_188;
  }
  if (v360)
  {
    v184 = (_QWORD *)(v360 + *v102);
    v186 = v184[2];
    v185 = v184[3];
    v187 = v184[1];
    *(_QWORD *)(v179 + 17240) = v187;
    *(_QWORD *)(v179 + 19256) = v185;
    *(_QWORD *)(v179 + 3536) = v187;
    *(_QWORD *)(v179 + 4040) = v186 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v179 + 3016) = v185;
    *(_DWORD *)(v179 + 11636) = v186;
    *(_DWORD *)(v179 + 11888) = v186;
    *(_DWORD *)(v179 + 12140) = v187 >> 8;
    *(_QWORD *)(v179 + 15728) = v184;
    if (!*(_QWORD *)(v179 + 1480))
      goto LABEL_188;
    goto LABEL_141;
  }
  *(_QWORD *)(v179 + 15728) = 0;
  *(_QWORD *)(v179 + 3536) = 0;
  *(_QWORD *)(v179 + 4040) = 0;
  *(_QWORD *)(v179 + 3016) = 0;
  *(_QWORD *)(v179 + 17240) = 0;
  *(_QWORD *)(v179 + 19256) = 0;
  *(_DWORD *)(v179 + 11636) = 0;
  *(_DWORD *)(v179 + 11888) = 0;
LABEL_188:
  *(_QWORD *)(v179 + 20960) |= 0x8000000000uLL;
  *(_QWORD *)(v179 + 20984) |= 0x8000000000uLL;
  *(_QWORD *)(v179 + 21152) |= 0xC0uLL;
  v267 = *(_QWORD *)(v172 + 8);
  if (v99)
  {
    v268 = (_QWORD *)(v99 + *v102);
    v270 = v268[2];
    v269 = v268[3];
    v271 = v268[1];
    *(_QWORD *)(v267 + 17256) = v271;
    *(_QWORD *)(v267 + 19272) = v269;
    *(_QWORD *)(v267 + 3552) = v271 + a8;
    *(_QWORD *)(v267 + 4056) = (v270 & 0xFFFFFFFFFFFFFFLL) - a8;
    *(_QWORD *)(v267 + 3032) = v269 + a8;
    *(_DWORD *)(v267 + 11644) = v270;
    *(_DWORD *)(v267 + 11896) = v270;
    *(_DWORD *)(v267 + 12148) = v271 >> 8;
    *(_QWORD *)(v267 + 15744) = v268;
    if (*(_QWORD *)(v267 + 1480))
    {
      MTLResourceListAddResource();
      v172 = a1;
    }
  }
  else
  {
    *(_QWORD *)(v267 + 15744) = 0;
    *(_QWORD *)(v267 + 3552) = 0;
    *(_QWORD *)(v267 + 4056) = 0;
    *(_QWORD *)(v267 + 3032) = 0;
    *(_QWORD *)(v267 + 17256) = 0;
    *(_QWORD *)(v267 + 19272) = 0;
    *(_DWORD *)(v267 + 11644) = 0;
    *(_DWORD *)(v267 + 11896) = 0;
  }
  *(_QWORD *)(v267 + 20960) |= 0x20000000000uLL;
  *(_QWORD *)(v267 + 20984) |= 0x20000000000uLL;
  *(_QWORD *)(v267 + 21152) |= 0xC0uLL;
  v272 = *(_QWORD *)(v172 + 8);
  *(_DWORD *)(v272 + 11272) = a3;
  *(_DWORD *)(v272 + 11276) = v10;
  *(_DWORD *)(v272 + 11280) = a10;
  *(_QWORD *)(v272 + 21000) |= 0x20uLL;
  *(_QWORD *)(v272 + 21152) |= 0x40uLL;
  result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v272, 3);
  v274 = a1;
  v275 = *v102;
  v385 = *(_QWORD *)(v178 + v275 + 8);
  v276 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v276 + 2529))
  {
    *(_BYTE *)(v276 + 2529) = 0;
    *(_QWORD *)(v276 + 21152) |= 1uLL;
  }
  if (v178 != *(_QWORD *)(v276 + 2552))
  {
    result = IOGPUResourceListAddResource();
    v274 = a1;
    v276 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v276 + 2552) = v178;
    LODWORD(v275) = *v102;
  }
  if (*(AGXBuffer **)(v276 + 2560) != v83)
  {
    result = IOGPUResourceListAddResource();
    v274 = a1;
    v276 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v276 + 2560) = v83;
    LODWORD(v275) = *v102;
  }
  if (a9 && v10)
  {
    v378 = *(_QWORD *)((char *)&v83->super.super._res.var0 + (int)v275);
    v277 = 20 * v355;
    v278 = *(_QWORD *)(*(_QWORD *)(v276 + 2672)
                     + 16 * (*(unsigned __int8 *)(v276 + 2528) | (2 * *(_DWORD *)(v276 + 2536)))
                     + 3432) & 0xE23FFFFFLL | 0xFFFF10000000;
    v279 = 0;
    do
    {
      v372 = 0;
      v358 = v279 * v10;
      v365 = v279;
      v361 = v279 * v355;
      do
      {
        v280 = *(_DWORD *)(v386 + 3756);
        if (v280 == 3)
        {
          v281 = v372 + v358;
        }
        else
        {
          v281 = v365;
          if (v280 != 2)
          {
            if (v280 == 1)
              v281 = v372;
            else
              v281 = 0;
          }
        }
        v282 = 0;
        v283 = 0;
        v284 = 0;
        v285 = v277 * v281;
        do
        {
          switch(*(_DWORD *)(v386 + 3756))
          {
            case 0:
              v293 = v282;
              v294 = v372 + v358;
              break;
            case 1:
              v293 = (v284 + v372 * v355) * a9;
              v294 = v365;
              break;
            case 2:
              v293 = (v284 + v361) * a4;
              v294 = v372;
              break;
            case 3:
              v294 = 0;
              v293 = v284 + (v372 + v358) * v355;
              break;
            default:
              v293 = 0;
              v294 = 0;
              break;
          }
          v295 = *(_QWORD *)(v274 + 8);
          if (v382 == 1)
          {
            *(_DWORD *)(v295 + 11328) = v283 != 0;
            v296 = *(_QWORD *)(v295 + 21000) | 0x20;
            v297 = *(_QWORD *)(v295 + 21152) | 0x40;
          }
          else
          {
            v296 = *(_QWORD *)(v295 + 21000);
            v297 = *(_QWORD *)(v295 + 21152);
          }
          *(_DWORD *)(v295 + 11332) = v294;
          *(_QWORD *)(v295 + 21000) = v296 | 0x20;
          *(_QWORD *)(v295 + 21152) = v297 | 0x40;
          v298 = *(_QWORD *)(v295 + 160);
          v299 = v298 + 31;
          if ((unint64_t)(v298 + 31) <= *(_QWORD *)(v295 + 152))
            goto LABEL_223;
          v309 = AGX::DataBufferAllocator<34ul>::growNoInline(v295 + 16, 3, 0);
          v298 = *(_QWORD *)(v295 + 160);
          if (v309)
          {
            v299 = v298 + 31;
            v274 = a1;
            if ((unint64_t)(v298 + 31) > *(_QWORD *)(v295 + 152))
              goto LABEL_275;
LABEL_223:
            *(_QWORD *)(v295 + 168) = v299;
            goto LABEL_224;
          }
          v274 = a1;
LABEL_224:
          v300 = (_DWORD *)((v298 + 15) & 0xFFFFFFFFFFFFFFF0);
          v301 = (unint64_t)v300 + *(_QWORD *)(v295 + 176);
          *(_QWORD *)(v295 + 160) = v300 + 4;
          *v300 = v293;
          v302 = (int)*MEMORY[0x24BE51650];
          v303 = *(_QWORD *)(*(_QWORD *)(v295 + 40) + 224) + v302;
          *(_QWORD *)(v295 + 20960) |= 0x4000000000uLL;
          *(_QWORD *)(v295 + 21152) |= 0x40uLL;
          *(_QWORD *)(v295 + 3528) = v301;
          *(_QWORD *)(v295 + 4032) = 16;
          *(_QWORD *)(v295 + 15720) = v303;
          *(_DWORD *)(v295 + 11632) = 4;
          *(_DWORD *)(v295 + 11884) = 4;
          *(_DWORD *)(v295 + 12136) = v301 >> 8;
          v304 = v378 + (v285 + v283);
          v305 = *(_QWORD *)(v274 + 8);
          v306 = *(_DWORD *)(v305 + 1720) != 2;
          *(_DWORD *)(v305 + 1720) = 2;
          v307 = *(int8x16_t **)(v305 + 2672);
          if (((v307[80].i64[1] | v307[79].i64[0] | v307[177].i64[0]) & 0x700000000000) != 0)
          {
            v308 = (char *)v375 + v302;
            *(_QWORD *)(v305 + 20960) |= 0x700000000000uLL;
            *(_QWORD *)(v305 + 21152) |= v306 | 0x40;
            *(_QWORD *)(v305 + 3576) = v304 + 12;
            *(_QWORD *)(v305 + 3584) = v304 + 16;
            *(int64x2_t *)(v305 + 4080) = vaddq_s64(*(int64x2_t *)(v305 + 4080), (int64x2_t)xmmword_232D73CD0);
            *(_QWORD *)(v305 + 15776) = v308;
            *(_QWORD *)(v305 + 15768) = v308;
            v305 = *(_QWORD *)(v274 + 8);
            v307 = *(int8x16_t **)(v305 + 2672);
          }
          else
          {
            *(_QWORD *)(v305 + 21152) |= v306;
          }
          v286 = v274;
          AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v305, v307, *(int8x16_t **)(v305 + 2680), v305 + 2704, (_QWORD *)(v305 + 5904), v305 + 20960, 0);
          v287 = *(_QWORD *)(v286 + 8);
          v288 = *(uint64_t **)(v287 + 64);
          *v288 = v278;
          *(_QWORD *)(v287 + 64) = v288 + 1;
          v289 = *(_QWORD *)(v286 + 8);
          v290 = *(unsigned int **)(v289 + 64);
          v291 = (char *)v290 + *(_QWORD *)(v289 + 80);
          *(_QWORD *)(v289 + 64) = v290 + 13;
          v292 = v291 + 32;
          v291 += 52;
          result = (unint64_t)(v304 + 6) >> 32;
          *v290 = HIDWORD(v292) | 0x8D000000;
          v290[1] = v292 & 0xFFFFFFFC;
          v290[2] = (unint64_t)(v304 + 4) >> 32;
          v290[3] = (v304 + 4) & 0xFFFFFFFE;
          v290[4] = HIDWORD(v291) | 0x8A000000;
          v290[5] = v291 & 0xFFFFFFFC;
          v290[6] = result;
          v290[7] = (v304 + 6) & 0xFFFFFFFE;
          v290[8] = HIDWORD(v385) | 0x70C20600;
          v290[9] = v385;
          v290[10] = HIDWORD(v304);
          v290[11] = v304 & 0xFFFFFFFC;
          v290[12] = 170;
          ++v284;
          v283 += 20;
          v282 += v379;
          v274 = v286;
        }
        while (v277 != v283);
        v10 = a4;
        ++v372;
      }
      while (v372 != a4);
      v279 = v365 + 1;
    }
    while (v365 + 1 != a9);
  }
LABEL_254:
  *(_QWORD *)(*(_QWORD *)(v274 + 8) + 21400) |= 0x40uLL;
  ++*(_DWORD *)(v274 + 24);
  return result;
}

void AGX::SWTessellationContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::drawPatches(unsigned int,unsigned int,unsigned int,AGXA10FamilyBuffer *,unsigned long,AGXA10FamilyBuffer *,unsigned long,unsigned int,unsigned int)::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion _((uint64_t)instanceCount _ patchCount) __ ((1__24)-1)_]()
{
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

void AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int8x16_t *v4;
  int8x8_t *v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  int **v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 v27;
  _BYTE *v28;
  unsigned __int8 v29;
  int8x8_t *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  int8x8_t *v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _OWORD *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  int8x8_t v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int64x2_t v62;
  int32x2_t v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  float v70;
  int v71;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  int8x8_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int8x8_t *v92;
  int8x8_t *v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;

  v2 = *(_QWORD *)(a1 + 2688);
  if (v2 == a2)
    return;
  *(_QWORD *)(a1 + 2688) = a2;
  if (*(_BYTE *)(a1 + 2060))
    *(_BYTE *)(a1 + 2064) = *(_DWORD *)(a1 + 2056) != *(_DWORD *)(a2 + 840);
  v4 = (int8x16_t *)(a1 + 21128);
  if (*(_BYTE *)(a2 + 844))
  {
    *(_DWORD *)(a1 + 2056) = *(_DWORD *)(a2 + 840);
    *(_BYTE *)(a1 + 2060) = 1;
  }
  v5 = (int8x8_t *)(a1 + 2156);
  v6 = *(_QWORD *)(a1 + 1960);
  if (*(_QWORD *)(a2 + 16))
  {
    if (!v6)
    {
      v7 = *(_QWORD *)(a1 + 21152);
      *(_OWORD *)(a1 + 2672) = 0u;
      v8 = vand_s8(*v5, (int8x8_t)0xF8FFFFFFFC1FFFFFLL);
      *v5 = vorr_s8(v8, (int8x8_t)0x200000);
      v9 = *(_DWORD *)(a1 + 2168) & 0xF8FFFFFF;
      *(_DWORD *)(a1 + 2160) = v8.i32[1] | 0x100000;
      *(_DWORD *)(a1 + 2168) = v9 | 0x100000;
      *(_DWORD *)(a1 + 2180) &= 0xFFDEFFFF;
      *(_QWORD *)(a1 + 21152) = v7 & 0xFFFFE07FFFFF01F8 | 0x100000000004;
      *(_BYTE *)(a1 + 21257) |= *(_BYTE *)(*(_QWORD *)(a2 + 16) + 382);
      return;
    }
LABEL_96:
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineState(AGX::G9::RenderPipeline const*,unsigned int &)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  }
  if (v6)
    goto LABEL_96;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 && *(_DWORD *)(v10 + 3760))
  {
    *(_QWORD *)(a1 + 21000) |= 0x20uLL;
    *(_QWORD *)(a1 + 21152) |= 0x40uLL;
  }
  v11 = *(_QWORD **)(a1 + 2672);
  v12 = (int **)MEMORY[0x24BE516B0];
  v13 = *(_DWORD *)*MEMORY[0x24BE516B0];
  if (v11 == (_QWORD *)v10)
    goto LABEL_43;
  if ((*(_BYTE *)(a1 + 21160) & 4) == 0 || *(_DWORD *)(a2 + 792) < 2u)
  {
    *(_QWORD *)(a1 + 2672) = v10;
    if (v10)
      goto LABEL_17;
LABEL_43:
    v24 = 0;
    goto LABEL_44;
  }
  v34 = (int8x8_t *)(a1 + 2156);
  v35 = v10;
  v36 = *(_DWORD *)*MEMORY[0x24BE516B0];
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setVertexAmplificationCount((_QWORD *)a1, (_QWORD *)(a1 + 21296));
  v13 = v36;
  v10 = v35;
  v5 = v34;
  v4[2].i32[0] &= ~4u;
  v11 = *(_QWORD **)(a1 + 2672);
  *(_QWORD *)(a1 + 2672) = v35;
  if (!v35)
    goto LABEL_43;
LABEL_17:
  v14 = *(_QWORD *)(a1 + 2664);
  *(_BYTE *)(v14 + 463) |= *(_BYTE *)(v10 + 377);
  *(_BYTE *)(v14 + 466) |= *(_BYTE *)(v10 + 382);
  *(_DWORD *)(a1 + 2180) = *(_DWORD *)(a1 + 2180) & 0xFBFF00 | *(_DWORD *)(v10 + 3600) & 0xFF0400FF;
  v15 = *(_QWORD *)(a1 + 21152) & 0xFFFFFFFFFFFF01BBLL | *(_QWORD *)(v10 + 1248);
  v16 = v15 | 5;
  *(_QWORD *)(a1 + 21152) = v15 | 5;
  v17 = *(_QWORD *)(v10 + 2832) & 0xFFFFBFFFFFFFFFFFLL | *(_QWORD *)(v10 + 1288) | *(_QWORD *)(v10 + 1264) | *(_QWORD *)(v10 + 1312) | *(_QWORD *)(v10 + 1344) | *(_QWORD *)(v10 + 1368);
  v18 = *(_QWORD *)(v10 + 1272) | *(_QWORD *)(v10 + 1296) | *(_QWORD *)(v10 + 1320) | *(_QWORD *)(v10 + 1352) | *(_QWORD *)(v10 + 1376) | *(_QWORD *)(v10 + 2840);
  v20 = *(_QWORD *)(v10 + 392);
  v19 = *(_QWORD *)(v10 + 400);
  if (v11)
  {
    v17 &= ~(v11[354] & 0xFFFFBFFFFFFFFFFFLL | v11[161] | v11[158] | v11[164] | v11[168] | v11[171]);
    v20 &= ~v11[49];
    v18 &= ~(v11[159] | v11[162] | v11[165] | v11[169] | v11[172] | v11[355]);
    v19 &= ~v11[50];
  }
  *(_QWORD *)(a1 + 20984) |= v17 | v20;
  *(_QWORD *)(a1 + 20992) |= v18 | v19;
  if (v17 | v20 | v18 | v19)
  {
    v21 = v15 | 0x85;
    if (v17 | v20)
      v22 = v21;
    else
      v22 = v16;
    if (v18 | v19)
      v22 |= 0x100uLL;
    *(_QWORD *)(a1 + 21152) = v22;
  }
  v23 = *(_DWORD **)(a1 + 2688);
  v24 = v23[193];
  v25 = v23[281];
  v26 = v23[10];
  if (v26 > *(_DWORD *)(a1 + 2584))
  {
    *(_DWORD *)(a1 + 2584) = v26;
    *(_BYTE *)(a1 + 2608) = 1;
  }
  else if (!*(_BYTE *)(a1 + 2608))
  {
    if (!v13)
      goto LABEL_29;
LABEL_36:
    v95 = v25;
    v99 = v10;
    v92 = v5;
    v32 = *(_QWORD **)(a1 + 2672);
    v33 = v32[354] & 0xFFFFBFFFFFFFFFFFLL | v32[161] | v32[164] | v32[168] | v32[171];
    if (((v33 | v32[158]) & ~(v33 & ~v32[158] | v32[119])) != 0 && **v12)
      IOGPUDeviceTraceEvent();
    v5 = v92;
    v10 = v99;
    if (v95 && **v12)
    {
      IOGPUDeviceTraceEvent();
      v10 = v99;
      v5 = v92;
    }
    goto LABEL_29;
  }
  v94 = v25;
  v98 = v10;
  v30 = v5;
  v31 = v13;
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindVertexUSCSpillBuffer(a1);
  v25 = v94;
  v10 = v98;
  v5 = v30;
  *(_QWORD *)(a1 + 21392) |= 0x80000000000uLL;
  if (v31)
    goto LABEL_36;
LABEL_29:
  v28 = &unk_255FF8000;
  if ((v27 & 1) == 0)
  {
    v83 = v5;
    v84 = v10;
    v28 = &unk_255FF8000;
    v10 = v84;
    v5 = v83;
    if (v85)
    {
      AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateVertexShaderVariant(AGX::G9::VertexProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloc = 0;
      v28 = (_BYTE *)&unk_255FF8000;
      v10 = v84;
      v5 = v83;
    }
  }
  if (v28[2664])
  {
    if ((v29 & 1) == 0)
    {
      v93 = v5;
      v88 = v10;
      v10 = v88;
      v5 = v93;
      if (v89)
      {
        AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateVertexShaderVariant(AGX::G9::VertexProgramVariant const*,unsigned int &)::per_shader_brk_space = 0;
        v10 = v88;
        v5 = v93;
      }
    }
    if (AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateVertexShaderVariant(AGX::G9::VertexProgramVariant const*,unsigned int &)::per_shader_brk_space)
      *(_QWORD *)(*(_QWORD *)(a1 + 2664) + 160) = (*(_QWORD *)(v10 + 512)
                                                   - AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateVertexShaderVariant(AGX::G9::VertexProgramVariant const*,unsigned int &)::per_shader_brk_space
                                                   + *(_QWORD *)(v10 + 736)
                                                   + 4095) & 0xFFFFFFFFFFFFF000;
  }
LABEL_44:
  v37 = *(uint64_t **)(a1 + 2688);
  v38 = *v37;
  v39 = *(_QWORD *)(a1 + 2680);
  v40 = **v12;
  if (v39 == *v37)
  {
    if (*(_BYTE *)(a1 + 2064))
    {
      v48 = v37 + 107;
      v49 = *(_DWORD *)(a1 + 2160) & 0xF00E0000;
      v50 = *(_DWORD *)(a1 + 2168) & 0xF00E0000;
      v51 = v37[109];
      *(_OWORD *)(a1 + 2152) = *v48;
      *(_QWORD *)(a1 + 2168) = v51;
      *(_DWORD *)(a1 + 2160) = *(_DWORD *)(a1 + 2160) & 0xFF1FFFF | v49;
      *(_DWORD *)(a1 + 2168) = v51 & 0xFF1FFFF | v50;
      *(_QWORD *)(a1 + 21152) |= 0x100000000000uLL;
    }
    goto LABEL_71;
  }
  *(_QWORD *)(a1 + 2680) = v38;
  if (v38)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 1264) |= *(_BYTE *)(v38 + 377);
    v4[8].i8[1] |= *(_BYTE *)(v38 + 382);
    v41 = *(_DWORD *)(a1 + 2160) & 0xF00E0000;
    v42 = *(_DWORD *)(a1 + 2168) & 0xF00E0000;
    v43 = v37[109];
    *(_OWORD *)(a1 + 2152) = *(_OWORD *)(v37 + 107);
    *(_QWORD *)(a1 + 2168) = v43;
    v44 = *(_DWORD *)(a1 + 2160) & 0xFE1FFFF | v41;
    v45 = v43 & 0xFE1FFFF | v42;
    v46 = *(unsigned __int8 *)(v38 + 3230);
    if (v46 == 3)
      v47 = 255;
    else
      v47 = byte_232D767D0[v46];
    v55 = ((v47 >> ((v41 >> 17) & 7)) & 1) << 20;
    *(_DWORD *)(a1 + 2160) = v55 | v44;
    *(_DWORD *)(a1 + 2168) = v55 | v45;
    v56 = *(_QWORD *)(a1 + 21152);
    *(_DWORD *)(a1 + 2180) = *(_DWORD *)(a1 + 2180) & 0xFFDEFFFF | *(_DWORD *)(v38 + 3152) & 0x210000;
    if (*(_BYTE *)(v38 + 3217))
      v57 = 1;
    else
      v57 = *(_BYTE *)(v38 + 3220) != 0;
    v4[17].i8[8] = v57;
    v58 = v56 & 0xFFFFE06FFFFFFFFBLL | *(_QWORD *)(v38 + 1248);
    v59 = v58 | 0x100000000006;
    *(_QWORD *)(a1 + 21152) = v58 | 0x100000000006;
    v60 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v38 + 1264), *(int8x16_t *)(v38 + 1312)), *(int8x16_t *)(v38 + 1368)), vorrq_s8(*(int8x16_t *)(v38 + 1288), *(int8x16_t *)(v38 + 1344)));
    v61 = *(int8x16_t *)(v38 + 392);
    if (v39)
    {
      v60 = vbicq_s8(v60, vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v39 + 1264), *(int8x16_t *)(v39 + 1312)), *(int8x16_t *)(v39 + 1368)), vorrq_s8(*(int8x16_t *)(v39 + 1288), *(int8x16_t *)(v39 + 1344))));
      v61 = vbicq_s8(v61, *(int8x16_t *)(v39 + 392));
    }
    v62 = (int64x2_t)vorrq_s8(v60, v61);
    *v4 = vorrq_s8(*v4, (int8x16_t)v62);
    if (vorrq_s8((int8x16_t)v62, (int8x16_t)vdupq_laneq_s64(v62, 1)).u64[0])
    {
      v63 = vmovn_s64(vceqzq_s64(v62));
      if ((v63.i8[0] & 1) == 0)
        v59 = v58 | 0x102000000006;
      if ((v63.i8[4] & 1) == 0)
        v59 |= 0x4000000000uLL;
      *(_QWORD *)(a1 + 21152) = v59;
    }
    v64 = *((_DWORD *)v37 + 194);
    v65 = *((_DWORD *)v37 + 303);
    v66 = *((_DWORD *)v37 + 11);
    if (v66 > *(_DWORD *)(a1 + 2616))
    {
      *(_DWORD *)(a1 + 2616) = v66;
      *(_BYTE *)(a1 + 2640) = 1;
    }
    else if (!*(_BYTE *)(a1 + 2640))
    {
LABEL_65:
      *(_BYTE *)(a1 + 2034) |= *(_QWORD *)(v38 + 392) != 0 || *(_QWORD *)(v38 + 400) != 0;
      if (v40)
      {
        v97 = v38;
        v101 = v65;
        v75 = *(_QWORD **)(a1 + 2680);
        v76 = v75[161];
        v77 = v75[158];
        v78 = v75[164];
        v79 = v75[168];
        v80 = v75[171];
        v81 = (v78 | v76 | v79 | v80) & ~v77 | v75[119];
        v82 = *v12;
        if (((v77 | v76 | v78 | v79 | v80) & ~v81) != 0 && *v82)
        {
          IOGPUDeviceTraceEvent();
          v82 = *v12;
        }
        if (v101 && *v82)
        {
          IOGPUDeviceTraceEvent();
          v82 = *v12;
        }
        v38 = v97;
        if (*v82)
        {
          IOGPUDeviceTraceEvent();
          v38 = v97;
        }
      }
      v24 |= v64;
      if ((v67 & 1) == 0)
      {
        v86 = v38;
        v38 = v86;
        if (v87)
        {
          AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateFragmentShaderVariant(AGX::G9::FragmentProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloc = 0;
          v38 = v86;
        }
      }
      if (AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateFragmentShaderVariant(AGX::G9::FragmentProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloc)
      {
        if ((v68 & 1) == 0)
        {
          v90 = v38;
          v38 = v90;
          if (v91)
          {
            AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateFragmentShaderVariant(AGX::G9::FragmentProgramVariant const*,unsigned int &)::per_shader_brk_space = 0;
            v38 = v90;
          }
        }
        if (AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateFragmentShaderVariant(AGX::G9::FragmentProgramVariant const*,unsigned int &)::per_shader_brk_space)
          *(_QWORD *)(*(_QWORD *)(a1 + 2664) + 976) = (*(_QWORD *)(v38 + 512)
                                                       - AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateFragmentShaderVariant(AGX::G9::FragmentProgramVariant const*,unsigned int &)::per_shader_brk_space
                                                       + *(_QWORD *)(v38 + 736)
                                                       + 4095) & 0xFFFFFFFFFFFFF000;
      }
      goto LABEL_71;
    }
    v100 = v65;
    v74 = v38;
    v96 = v40;
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFragmentUSCSpillBuffer(a1);
    v40 = v96;
    v38 = v74;
    v65 = v100;
    *(_QWORD *)(a1 + 21392) |= 0x100000000000uLL;
    goto LABEL_65;
  }
  v52 = *(_QWORD *)(a1 + 21152) & 0xFFFFE07FFFFFFFF9;
  v53 = vand_s8(*v5, (int8x8_t)0xF8FFFFFFFC1FFFFFLL);
  *v5 = vorr_s8(v53, (int8x8_t)0x200000);
  v54 = *(_DWORD *)(a1 + 2168) & 0xF8FFFFFF;
  *(_DWORD *)(a1 + 2160) = v53.i32[1] | 0x100000;
  *(_DWORD *)(a1 + 2168) = v54 | 0x100000;
  *(_DWORD *)(a1 + 2180) &= 0xFFDEFFFF;
  *(_QWORD *)(a1 + 21152) = v52 | 0x100000000004;
  v4[17].i8[8] = 0;
LABEL_71:
  v69 = *(_QWORD *)(a1 + 2688);
  if (v24)
  {
    do
    {
      v24 &= ~(1 << __clz(__rbit32(v24)));
      IOGPUResourceListAddResource();
    }
    while (v24);
    v69 = *(_QWORD *)(a1 + 2688);
  }
  v70 = *(float *)(v69 + 796);
  v71 = *(_DWORD *)(v69 + 800);
  if (*(float *)(a1 + 14628) != v70 || *(_DWORD *)(a1 + 14632) != v71)
  {
    *(float *)(a1 + 14628) = v70;
    *(_DWORD *)(a1 + 14632) = v71;
    if (v70 != 1.0 || v71 != -1)
      v4[1] = vorrq_s8(v4[1], (int8x16_t)xmmword_232D73CE0);
  }
  v73 = *(unsigned __int8 *)(v69 + 808);
  if (!v2
    || *(unsigned __int8 *)(a1 + 2528) != v73
    || *(_DWORD *)(v2 + 880) != *(_DWORD *)(v69 + 880)
    || *(float *)(v2 + 884) != *(float *)(v69 + 884)
    || *(_DWORD *)(v2 + 888) != *(_DWORD *)(v69 + 888))
  {
    *(_BYTE *)(a1 + 2528) = v73;
    *(_QWORD *)(a1 + 21152) |= 0x2000000000000uLL;
  }
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v10;
  int8x16_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  if (!a2)
  {
    if ((*(_BYTE *)(*(_QWORD *)(result + 2672) + 3602) & 4) != 0)
    {
      v2 = *(_DWORD *)(result + 2160);
      goto LABEL_16;
    }
    LODWORD(a2) = 2 * (*(_BYTE *)(result + 2528) == 0);
  }
  v2 = *(_DWORD *)(result + 2160);
  if (a2 > 6)
    goto LABEL_16;
  if (((1 << a2) & 0x26) != 0)
  {
    v7 = 0x10000000;
    v6 = v2 & 0xFFFFFFF | 0x10000000;
LABEL_17:
    *(_DWORD *)(result + 2160) = v6;
    *(_DWORD *)(result + 2168) = *(_DWORD *)(result + 2168) & 0xFFFFFFF | v7;
    v3 = 1;
LABEL_18:
    v8 = v6 & 0x70000000;
    v10 = (v6 & 0x70000000) == 0 || v8 == 1610612736 || v8 == 1342177280;
    *(_DWORD *)(result + 14640) = 0;
    v11.i32[0] = *(unsigned __int8 *)(result + 2344);
    v11.i32[1] = *(_DWORD *)(result + 2184);
    v11.i32[2] = *(unsigned __int8 *)(result + 2348);
    v11.i32[3] = *(_DWORD *)(result + 2188);
    *(int8x16_t *)(result + 2136) = vorrq_s8(vandq_s8(*(int8x16_t *)(result + 2136), (int8x16_t)xmmword_232D73C90), v11);
    v12 = *(_QWORD *)(result + 21152);
    if (v10)
      v13 = *(_DWORD *)(result + 2328) & 0xFFFEFFFF | (*(_DWORD *)(result + 2336) << 16) | *(_DWORD *)(result + 2124) & 0xFFFEFFFC;
    else
      v13 = *(_DWORD *)(result + 2328) & 0xFFFEFFFF | *(_DWORD *)(result + 2124) & 0xFFFEFFFC;
    *(_DWORD *)(result + 2124) = v13;
    v14 = v12 | 0x2100000000000;
    *(_QWORD *)(result + 21152) = v14;
    if (*(unsigned __int8 *)(result + 2530) != v3)
    {
      if (*(_QWORD *)(result + 2680))
        *(_QWORD *)(result + 21152) = v14 | 2;
      *(_BYTE *)(result + 2530) = v3;
    }
    goto LABEL_31;
  }
  if (((1 << a2) & 0x58) == 0)
  {
LABEL_16:
    v7 = 0x40000000u >> *(_BYTE *)(result + 21258);
    v6 = v2 & 0xFFFFFFF | v7;
    goto LABEL_17;
  }
  v3 = 0;
  v4 = *(_DWORD *)(result + 2504);
  if (v4 == 2)
    v5 = 1610612736;
  else
    v5 = 0;
  if (v4 == 1)
    v5 = 1342177280;
  v6 = v5 & 0xF0000000 | v2 & 0xFFFFFFF;
  *(_DWORD *)(result + 2160) = v6;
  *(_DWORD *)(result + 2168) = v5 & 0xF0000000 | *(_DWORD *)(result + 2168) & 0xFFFFFFF;
  if (v5 != v2 >> 28)
    goto LABEL_18;
LABEL_31:
  if (*(float *)(result + 2312) == 0.0 && *(float *)(result + 2316) == 0.0
    || (v15 = 1, (v16 = v6 & 0x70000000) != 0) && v16 != 1342177280 && v16 != 1610612736)
  {
    v15 = 0;
  }
  if (*(unsigned __int8 *)(result + 2324) != v15)
  {
    if (v15)
      v17 = 0x20000;
    else
      v17 = 0;
    *(_DWORD *)(result + 2132) = *(_DWORD *)(result + 2132) & 0xFFFDFFFF | v17;
    *(_QWORD *)(result + 21152) |= 0x100000000000uLL;
    *(_BYTE *)(result + 2324) = v15;
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(uint64_t a1, int8x16_t *a2, int8x16_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, int a7)
{
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *i;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  uint64_t result;
  int8x16_t v22;
  unint64_t v23;
  unint64_t j;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t k;
  unint64_t v30;
  uint64_t v31;
  unint64_t m;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t n;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int8x16_t *v41;
  int8x16_t v42;
  _QWORD *v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  int v74;
  int8x16_t *v75;
  char **v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  char v86;
  _QWORD *v87;
  int *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  char *v92;
  int v93;
  unsigned __int16 *v94;
  unint64_t v95;
  _QWORD *v96;
  char *v97;
  unsigned __int16 *v98;
  unint64_t ii;
  int v100;
  unint64_t jj;
  unsigned int *v102;
  unint64_t v103;
  unint64_t v104;
  _DWORD *v105;
  char *v106;
  unsigned int v107;
  unsigned __int16 *v108;
  unint64_t v109;
  _DWORD *v110;
  char *v111;
  unsigned __int16 *v112;
  unint64_t kk;
  int v114;
  unint64_t mm;
  unsigned int v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  unint64_t *v122;
  int8x8_t *v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  __int128 v127;
  _DWORD *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  unint64_t *v134;
  uint64_t v135;
  float v136;
  float v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  int v143;
  int8x8_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  unint64_t *v153;
  int8x8_t v154;
  __int32 v155;
  int8x8_t *v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  unint64_t *v162;
  _OWORD *v163;
  char *v164;
  unint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  __int128 v170;
  _DWORD *v171;
  char *v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  int v181;
  int *v182;
  char *v183;
  char *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  int *v191;
  char *v192;
  char *v193;
  unint64_t nn;
  int v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  _QWORD *v201;
  _WORD *v202;
  int v203;
  int8x16_t v204;
  float v205;
  uint64_t v206;
  int v207;
  uint32x4_t v208;
  int v209;
  uint32x4_t v210;
  int v211;
  int v212;
  uint32x4_t v213;
  unint64_t *v214;
  int v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  int v220;
  unint64_t *v221;
  uint64_t v222;
  int v223;
  int v224;
  char updated;
  int v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  _DWORD *v230;
  unint64_t *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  int v244;
  int v245;
  uint32x4_t v246;
  unint64_t v247;
  _BOOL4 v248;
  int v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  int v258;
  uint64_t v259;
  int v262;
  int v263;
  _QWORD *v264;
  int v265;
  uint64_t *v267;
  int8x16_t *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  _QWORD v273[2];

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  *(_BYTE *)(a1 + 2065) = 1;
  v12 = *(_DWORD *)(v11 + 5520);
  if (*(_DWORD *)(a1 + 2388) != v12)
    *(_DWORD *)(a1 + 2388) = v12;
  v13 = *(_DWORD *)(v11 + 4504);
  if (*(_DWORD *)(a1 + 2396) != v13)
  {
    *(_DWORD *)(a1 + 2396) = v13;
    v14 = *(_QWORD **)(v11 + 5016);
    if (!v14)
    {
      i = *(_QWORD **)(v11 + 4848);
      if (!i)
        goto LABEL_8;
      goto LABEL_7;
    }
    do
    {
      IOGPUResourceListAddResource();
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    for (i = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 4848); i; i = (_QWORD *)*i)
LABEL_7:
      IOGPUResourceListAddResource();
  }
LABEL_8:
  if (a3)
  {
    v16 = *(_QWORD *)(a1 + 2664);
    if (!*(_DWORD *)(v16 + 1276))
    {
      if (a3[80].i64[1])
        v17 = 1;
      else
        v17 = a3[60].i8[0] != 0;
      *(_DWORD *)(v16 + 1276) = v17;
    }
  }
  v18 = *(_QWORD *)(a1 + 2688);
  if (v18)
  {
    if (*(_BYTE *)(v18 + 1220))
      *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 1268) |= *(_BYTE *)(a1 + 1506);
    if (*(_BYTE *)(v18 + 1132))
      *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 468) |= *(_BYTE *)(a1 + 1506);
  }
  if (!a3)
  {
    *(_QWORD *)(a6 + 192) &= 0xFFFFFF8FFFFFFFFDLL;
    v259 = v11;
    if (a2)
      goto LABEL_23;
LABEL_25:
    v19 = *(_QWORD *)(a6 + 192) & 0xFFFFFFFFFFFFFE3ELL;
    *(_QWORD *)(a6 + 192) = v19;
    v20 = 0;
    goto LABEL_26;
  }
  v259 = v11;
  if (!a2)
    goto LABEL_25;
LABEL_23:
  v19 = *(_QWORD *)(a6 + 192);
  v20 = a2;
LABEL_26:
  result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::extractProgramVariantArgumentDirtyBits(v20, a3, (int8x16_t *)a6);
  v267 = (uint64_t *)a2;
  v268 = a3;
  v23 = v19 | result;
  v271 = v19 | result;
  if (((v19 | result) & 0x1000000000002) != 0 && (*(_WORD *)(a1 + 2308) & 2) != 0 && *(_BYTE *)(a1 + 21408))
    *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 1265) = 1;
  if ((v23 & 0x80) != 0 && (a7 & 1) == 0)
  {
    for (j = *(_QWORD *)(a6 + 24) & (a2[177].i64[0] & 0xFFFFBFFFFFFFFFFFLL | a2[80].i64[1] | a2[79].i64[0] | a2[82].i64[0] | a2[84].i64[0] | a2[85].i64[1]);
          j;
          j &= ~v26)
    {
      v25 = __clz(__rbit64(j));
      v26 = 1 << v25;
      if (*(_QWORD *)(a1 + 8 * v25 + 15416))
        result = IOGPUResourceListAddResource();
    }
  }
  if ((v23 & 0x100) != 0)
  {
    v27 = a2[25].i64[0];
    v28 = *(_QWORD *)(a1 + 10864);
    for (k = (a2[79].i64[1] | a2[81].i64[0] | a2[82].i64[1] | a2[84].i64[1] | a2[86].i64[0] | a2[177].i64[1]) & *(_QWORD *)(a1 + 10856) & *(_QWORD *)(a6 + 32);
          k;
          k &= ~v31)
    {
      v30 = __clz(__rbit64(k));
      v31 = 1 << v30;
      if (*(_QWORD *)(a1 + 8 * v30 + 16424))
        result = IOGPUResourceListAddResource();
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 468) |= (v28 & v27) != 0;
  }
  if ((v23 & 0x2000000000) != 0 && (a7 & 1) == 0)
  {
    for (m = *(_QWORD *)(a6 + 168) & (v268[79].i64[0] | v268[80].i64[1] | v268[82].i64[0] | v268[84].i64[0] | v268[85].i64[1]);
          m;
          m &= ~v34)
    {
      v33 = __clz(__rbit64(m));
      v34 = 1 << v33;
      if (*(_QWORD *)(a1 + 8 * v33 + 15920))
        result = IOGPUResourceListAddResource();
    }
  }
  if ((v23 & 0x4000000000) != 0)
  {
    v35 = v268[25].i64[0];
    v36 = *(_QWORD *)(a1 + 14000);
    for (n = (v268[79].i64[1] | v268[81].i64[0] | v268[82].i64[1] | v268[84].i64[1] | v268[86].i64[0]) & *(_QWORD *)(a1 + 13992) & *(_QWORD *)(a6 + 176);
          n;
          n &= ~v39)
    {
      v38 = __clz(__rbit64(n));
      v39 = 1 << v38;
      if (*(_QWORD *)(a1 + 8 * v38 + 16672))
        result = IOGPUResourceListAddResource();
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 1268) |= (v36 & v35) != 0;
  }
  v40 = *(_DWORD *)(a6 + 200);
  v41 = v268;
  if ((v40 & 1) != 0 && *(_BYTE *)(a1 + 2528))
    *(_DWORD *)(a6 + 200) = v40 & 0xFFFFFFFE;
  *(_QWORD *)(a6 + 192) = 0;
  v42.i32[1] = 0;
  v42.i64[1] = 0;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  v43 = (_QWORD *)(a1 + 16);
  v44 = *(unint64_t **)(a1 + 64);
  v45 = v267;
  v264 = (_QWORD *)(a1 + 16);
  if ((unint64_t)(v44 + 21) > *(_QWORD *)(a1 + 56))
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 0, 0);
    v43 = (_QWORD *)(a1 + 16);
    if ((_DWORD)result)
    {
      v196 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)(v196 + 168) > *(_QWORD *)(a1 + 56))
        goto LABEL_258;
      *(_QWORD *)(a1 + 72) = v196 + 168;
      *v44 = __ROR8__(*(_QWORD *)(a1 + 80) + v196, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v44 + 21;
  }
  if (v267)
  {
    v46 = *((unsigned int *)v267 + 10) + 36;
    v47 = *(_QWORD *)(a1 + 384);
    if (v47)
      goto LABEL_65;
  }
  else
  {
    v46 = 36;
    v47 = *(_QWORD *)(a1 + 384);
    if (v47)
      goto LABEL_65;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 10, 0);
  if (!(_DWORD)result)
    goto LABEL_258;
  v47 = *(_QWORD *)(a1 + 384);
  v43 = (_QWORD *)(a1 + 16);
LABEL_65:
  v48 = v46 + 7;
  v49 = v47 + v48;
  if (v49 <= *(_QWORD *)(a1 + 376))
  {
LABEL_66:
    *(_QWORD *)(a1 + 392) = v49;
    goto LABEL_67;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 10, 0);
  v43 = (_QWORD *)(a1 + 16);
  if ((_DWORD)result)
  {
    v49 = *(_QWORD *)(a1 + 384) + v48;
    if (v49 > *(_QWORD *)(a1 + 376))
      goto LABEL_258;
    goto LABEL_66;
  }
LABEL_67:
  v50 = *(_QWORD *)(a1 + 1024) + 104;
  if (v50 <= *(_QWORD *)(a1 + 1016))
  {
LABEL_68:
    *(_QWORD *)(a1 + 1032) = v50;
    goto LABEL_69;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 30, 0);
  v43 = (_QWORD *)(a1 + 16);
  if ((_DWORD)result)
  {
    v50 = *(_QWORD *)(a1 + 1024) + 104;
    if (v50 > *(_QWORD *)(a1 + 1016))
      goto LABEL_258;
    goto LABEL_68;
  }
LABEL_69:
  if ((v23 & 0xA000) == 0)
    goto LABEL_72;
  v51 = *((unsigned int *)v267 + 310) + 7;
  v52 = *(_QWORD *)(a1 + 224) + v51;
  if (v52 <= *(_QWORD *)(a1 + 216))
    goto LABEL_71;
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 5, 0);
  v43 = (_QWORD *)(a1 + 16);
  if ((_DWORD)result)
  {
    v52 = *(_QWORD *)(a1 + 224) + v51;
    if (v52 > *(_QWORD *)(a1 + 216))
      goto LABEL_258;
LABEL_71:
    *(_QWORD *)(a1 + 232) = v52;
  }
LABEL_72:
  if ((v23 & 0x80000000000) == 0)
    goto LABEL_75;
  v53 = v268[77].u32[2] + 7;
  v54 = *(_QWORD *)(a1 + 256) + v53;
  if (v54 <= *(_QWORD *)(a1 + 248))
    goto LABEL_74;
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 6, 0);
  v43 = (_QWORD *)(a1 + 16);
  if ((_DWORD)result)
  {
    v54 = *(_QWORD *)(a1 + 256) + v53;
    if (v54 > *(_QWORD *)(a1 + 248))
      goto LABEL_258;
LABEL_74:
    *(_QWORD *)(a1 + 264) = v54;
  }
LABEL_75:
  if ((v23 & 0x78000000000) == 0)
    goto LABEL_78;
  v55 = v268[2].u32[2] + 7;
  v56 = *(_QWORD *)(a1 + 416) + v55;
  if (v56 <= *(_QWORD *)(a1 + 408))
    goto LABEL_77;
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 11, 0);
  v43 = (_QWORD *)(a1 + 16);
  if ((_DWORD)result)
  {
    v56 = *(_QWORD *)(a1 + 416) + v55;
    if (v56 > *(_QWORD *)(a1 + 408))
      goto LABEL_258;
LABEL_77:
    *(_QWORD *)(a1 + 424) = v56;
  }
LABEL_78:
  v57 = *(_QWORD *)(a1 + 352) + 8;
  if (v57 <= *(_QWORD *)(a1 + 344))
  {
LABEL_79:
    *(_QWORD *)(a1 + 360) = v57;
    goto LABEL_80;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 9, 0);
  v43 = (_QWORD *)(a1 + 16);
  if ((_DWORD)result)
  {
    v57 = *(_QWORD *)(a1 + 352) + 8;
    if (v57 > *(_QWORD *)(a1 + 344))
      goto LABEL_258;
    goto LABEL_79;
  }
LABEL_80:
  v58 = 8 * *(unsigned int *)(a1 + 2268);
  v59 = *(_QWORD *)(a1 + 320) + v58;
  if (v59 > *(_QWORD *)(a1 + 312))
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 8, 1);
    v43 = (_QWORD *)(a1 + 16);
    if ((_DWORD)result)
    {
      v197 = *(_QWORD *)(a1 + 320) + v58;
      if (v197 > *(_QWORD *)(a1 + 312))
        goto LABEL_258;
      *(_QWORD *)(a1 + 328) = v197;
      *(_QWORD *)(*(_QWORD *)(a1 + 2664) + 720) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 512)
                                                  + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 536)
                                                  - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 520);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 328) = v59;
  }
  v60 = *(_QWORD *)(a1 + 288);
  if (!v60)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 7, 0);
    if (!(_DWORD)result)
      goto LABEL_258;
    v60 = *(_QWORD *)(a1 + 288);
    v43 = (_QWORD *)(a1 + 16);
  }
  v61 = v60 + 12;
  if (v61 > *(_QWORD *)(a1 + 280))
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 7, 1);
    v43 = (_QWORD *)(a1 + 16);
    if ((_DWORD)result)
    {
      v198 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)(v198 + 12) > *(_QWORD *)(a1 + 280))
        goto LABEL_258;
      *(_QWORD *)(a1 + 296) = v198 + 12;
      if (!v198)
      {
        result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v264);
        v43 = (_QWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 2664) + 728) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 448)
                                                  + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 472)
                                                  - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 456);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v61;
  }
  if ((v23 & 0x20000000000000) != 0)
  {
    v199 = *(_QWORD *)(a1 + 448) + 2;
    if (v199 > *(_QWORD *)(a1 + 440))
    {
      result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 12, 0);
      v43 = (_QWORD *)(a1 + 16);
      v62 = 0;
      if ((_DWORD)result)
      {
        v250 = *(_QWORD *)(a1 + 448) + 2;
        if (v250 > *(_QWORD *)(a1 + 440))
          goto LABEL_258;
        *(_QWORD *)(a1 + 456) = v250;
        result = (uint64_t)AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveVisibilityClearDatabufferSpace((_QWORD *)a1);
        v62 = 1;
        v45 = v267;
        v41 = v268;
        v43 = (_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v62 = 0;
      *(_QWORD *)(a1 + 456) = v199;
    }
  }
  else
  {
    v62 = 0;
  }
  v63 = a1 + 1656;
  if ((v23 & 0x1C1) == 0)
  {
    v65 = 0;
    v66 = 0;
    v64 = 0;
    v262 = 0;
    goto LABEL_93;
  }
  if (*((_BYTE *)v45 + 216))
  {
    v207 = v62;
    if ((v23 & 0x7400) != 0
      || (result = AGX::isIndirectGatherDirty<AGX::G9::VertexProgramVariantPDSState>(v45 + 155, *(_QWORD *)(a1 + 20960), *(_QWORD *)(a1 + 20968), *(_QWORD *)(a1 + 20976), *(_QWORD *)(a1 + 21000)), (_DWORD)result))
    {
      result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveGPUGatherDataBufferSpace((_QWORD *)a1);
      if ((_DWORD)result)
      {
        result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(a1 + 1656, v264, *(_QWORD *)(*(_QWORD *)(v259 + 6856) + 8), (uint32x4_t)v42, v208);
        v43 = (_QWORD *)(a1 + 16);
        v63 = a1 + 1656;
        v262 = 1;
        v64 = 1;
LABEL_302:
        v62 = v207;
        goto LABEL_90;
      }
      v64 = 0;
      v262 = 1;
    }
    else
    {
      v262 = 0;
      v64 = 0;
    }
    v43 = (_QWORD *)(a1 + 16);
    goto LABEL_302;
  }
  v262 = 0;
  v64 = 0;
LABEL_90:
  if (*((_BYTE *)v267 + 1992) && v267[175] & *(_QWORD *)(a1 + 20960) | v23 & 0x2000)
  {
    v209 = v62;
    result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveGPUDMAPromotionPatchUpDataBufferSpace(v43);
    if ((_DWORD)result)
    {
      result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(v63, v264, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5448) + 8), (uint32x4_t)v42, v210);
      v43 = (_QWORD *)(a1 + 16);
      v63 = a1 + 1656;
      v65 = 1;
      v66 = 1;
    }
    else
    {
      v65 = 0;
      v66 = 1;
      v43 = (_QWORD *)(a1 + 16);
    }
    v62 = v209;
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
LABEL_93:
  if ((v23 & 0x7000000002) == 0)
  {
    v68 = 0;
    v69 = 0;
    v265 = 0;
    v67 = 0;
    goto LABEL_98;
  }
  if (!v41[13].i8[8])
  {
    v265 = 0;
    v67 = 0;
    if (!v41[124].i8[8])
    {
LABEL_96:
      v68 = 0;
      v69 = 0;
      goto LABEL_98;
    }
    goto LABEL_306;
  }
  v211 = v65;
  v212 = v62;
  if ((v23 & 0xD0000000000) != 0
    || (result = AGX::isIndirectGatherDirty<AGX::G9::VertexProgramVariantPDSState>(&v41[77].i64[1], *(_QWORD *)(a1 + 21104), *(_QWORD *)(a1 + 21112), *(_QWORD *)(a1 + 21120), *(_QWORD *)(a1 + 21144)), (_DWORD)result))
  {
    result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveGPUGatherDataBufferSpace((_QWORD *)a1);
    if ((_DWORD)result)
    {
      result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(v63, v264, *(_QWORD *)(*(_QWORD *)(v259 + 6856) + 8), (uint32x4_t)v42, v213);
      v43 = (_QWORD *)(a1 + 16);
      v63 = a1 + 1656;
      v265 = 1;
      v67 = 1;
      goto LABEL_305;
    }
    v67 = 0;
    v265 = 1;
  }
  else
  {
    v265 = 0;
    v67 = 0;
  }
  v43 = (_QWORD *)(a1 + 16);
LABEL_305:
  v62 = v212;
  v65 = v211;
  if (!v41[124].i8[8])
    goto LABEL_96;
LABEL_306:
  if (!(v41[87].i64[1] & *(_QWORD *)(a1 + 21104) | v23 & 0x80000000000))
    goto LABEL_96;
  v244 = v65;
  v245 = v62;
  result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveGPUDMAPromotionPatchUpDataBufferSpace(v43);
  if ((_DWORD)result)
  {
    result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(v63, v264, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5448) + 8), (uint32x4_t)v42, v246);
    v43 = (_QWORD *)(a1 + 16);
    v68 = 1;
    v69 = 1;
  }
  else
  {
    v68 = 0;
    v69 = 1;
    v43 = (_QWORD *)(a1 + 16);
  }
  v62 = v245;
  v65 = v244;
LABEL_98:
  v263 = v69;
  if (*(_QWORD *)(a1 + 1960))
  {
    v70 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)(v70 + 8) > *(_QWORD *)(a1 + 56))
    {
      v214 = *(unint64_t **)(a1 + 64);
      v215 = v62;
      v216 = v65;
      result = AGX::DataBufferAllocator<34ul>::growNoInline(v43, 0, 0);
      v65 = v216;
      v62 = v215;
      v69 = v263;
      v43 = (_QWORD *)(a1 + 16);
      if ((_DWORD)result)
      {
        v217 = *(_QWORD *)(a1 + 64);
        v218 = v217 + v70 - (_QWORD)v214 + 8;
        if (v218 > *(_QWORD *)(a1 + 56))
          goto LABEL_258;
        *(_QWORD *)(a1 + 72) = v218;
        *v214 = __ROR8__(*(_QWORD *)(a1 + 80) + v217, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v70 + 8;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520))
    v71 = ((*(_QWORD *)(a1 + 320) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 536)) >> 3) > 0xFFFE;
  else
    v71 = 1;
  v72 = v71;
  v73 = *(_QWORD *)(a1 + 288);
  if (!v73)
  {
    v256 = v65;
    v200 = v62;
    v201 = v43;
    result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v43);
    v73 = *(_QWORD *)(a1 + 288);
    if (!v73)
    {
      result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v201);
      v73 = 0;
    }
    v43 = v201;
    v69 = v263;
    v62 = v200;
    v65 = v256;
  }
  if (-1431655765 * ((unint64_t)(v73 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 472)) >> 2) > 0xFFFE)
    v74 = 1;
  else
    v74 = v72;
  if (v74 == 1)
  {
    v75 = v268;
    v77 = v262;
    if (*(_QWORD *)(a1 + 1960))
    {
      *(_QWORD *)(a1 + 2040) = 0;
      *(_BYTE *)(a1 + 2048) = 1;
      return result;
    }
    v255 = v62;
    v258 = v65;
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::restartRenderPass(a1, &v271, 0, 1);
    v23 = v271;
    v221 = *(unint64_t **)(a1 + 64);
    if ((unint64_t)(v221 + 21) > *(_QWORD *)(a1 + 56))
    {
      if (AGX::DataBufferAllocator<34ul>::growNoInline(v264, 0, 0))
      {
        v251 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)(v251 + 168) > *(_QWORD *)(a1 + 56))
          goto LABEL_258;
        *(_QWORD *)(a1 + 72) = v251 + 168;
        *v221 = __ROR8__(*(_QWORD *)(a1 + 80) + v251, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
        v75 = v268;
        v77 = v262;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v221 + 21;
    }
    if (v267)
      v222 = *((unsigned int *)v267 + 10) + 36;
    else
      v222 = 36;
    v233 = *(_QWORD *)(a1 + 384);
    if (!v233)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 10, 0))
        goto LABEL_258;
      v233 = *(_QWORD *)(a1 + 384);
      v75 = v268;
      v77 = v262;
    }
    v234 = v222 + 7;
    v235 = v233 + v234;
    if (v235 > *(_QWORD *)(a1 + 376))
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 10, 0))
      {
LABEL_281:
        v236 = *(_QWORD *)(a1 + 1024) + 104;
        if (v236 > *(_QWORD *)(a1 + 1016))
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 30, 0))
          {
LABEL_283:
            if ((v23 & 0xA000) == 0)
              goto LABEL_286;
            v237 = *((unsigned int *)v267 + 310) + 7;
            v238 = *(_QWORD *)(a1 + 224) + v237;
            if (v238 > *(_QWORD *)(a1 + 216))
            {
              if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 5, 0))
              {
LABEL_286:
                if ((v23 & 0x80000000000) == 0)
                  goto LABEL_289;
                v239 = v75[77].u32[2] + 7;
                v240 = *(_QWORD *)(a1 + 256) + v239;
                if (v240 > *(_QWORD *)(a1 + 248))
                {
                  if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 6, 0))
                  {
LABEL_289:
                    if ((v23 & 0x78000000000) == 0)
                      goto LABEL_292;
                    v241 = v75[2].u32[2] + 7;
                    v242 = *(_QWORD *)(a1 + 416) + v241;
                    if (v242 > *(_QWORD *)(a1 + 408))
                    {
                      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 11, 0))
                      {
LABEL_292:
                        v243 = *(_QWORD *)(a1 + 352) + 8;
                        if (v243 > *(_QWORD *)(a1 + 344))
                        {
                          v76 = (char **)(a1 + 1656);
                          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 9, 0))
                          {
LABEL_294:
                            AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveScissorSpace((_QWORD *)a1, *(unsigned int *)(a1 + 2268));
                            AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveDepthBiasSpace(a1);
                            if ((v23 & 0x20000000000000) == 0)
                              goto LABEL_295;
                            v252 = *(_QWORD *)(a1 + 448) + 2;
                            if (v252 > *(_QWORD *)(a1 + 440))
                            {
                              v255 = 0;
                              v75 = v268;
                              v76 = (char **)(a1 + 1656);
                              v77 = v262;
                              if (!AGX::DataBufferAllocator<34ul>::growNoInline(v264, 12, 0))
                              {
LABEL_295:
                                v43 = (_QWORD *)(a1 + 16);
                                v69 = v263;
                                v62 = v255;
                                v65 = v258;
                                if (v77)
                                {
                                  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveGPUGatherDataBufferSpace((_QWORD *)a1);
                                  v62 = v255;
                                  v65 = v258;
                                  v69 = v263;
                                  v43 = (_QWORD *)(a1 + 16);
                                  if (!v265)
                                  {
LABEL_297:
                                    if (!v66)
                                      goto LABEL_298;
                                    goto LABEL_341;
                                  }
                                }
                                else if (!v265)
                                {
                                  goto LABEL_297;
                                }
                                AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveGPUGatherDataBufferSpace((_QWORD *)a1);
                                v62 = v255;
                                v65 = v258;
                                v69 = v263;
                                v43 = (_QWORD *)(a1 + 16);
                                if (!v66)
                                {
LABEL_298:
                                  if (!v69)
                                    goto LABEL_113;
LABEL_299:
                                  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveGPUDMAPromotionPatchUpDataBufferSpace(v43);
                                  v62 = v255;
                                  v65 = v258;
                                  v69 = v263;
                                  v43 = (_QWORD *)(a1 + 16);
                                  goto LABEL_113;
                                }
LABEL_341:
                                AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveGPUDMAPromotionPatchUpDataBufferSpace(v43);
                                v62 = v255;
                                v65 = v258;
                                v69 = v263;
                                v43 = (_QWORD *)(a1 + 16);
                                if (!v263)
                                  goto LABEL_113;
                                goto LABEL_299;
                              }
                              v253 = *(_QWORD *)(a1 + 448) + 2;
                              if (v253 > *(_QWORD *)(a1 + 440))
                                goto LABEL_258;
                              *(_QWORD *)(a1 + 456) = v253;
                              AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveVisibilityClearDatabufferSpace((_QWORD *)a1);
                              v255 = 1;
                            }
                            else
                            {
                              v255 = 0;
                              *(_QWORD *)(a1 + 456) = v252;
                            }
                            v75 = v268;
                            v76 = (char **)(a1 + 1656);
                            v77 = v262;
                            goto LABEL_295;
                          }
                          v243 = *(_QWORD *)(a1 + 352) + 8;
                          if (v243 > *(_QWORD *)(a1 + 344))
                            goto LABEL_258;
                        }
                        *(_QWORD *)(a1 + 360) = v243;
                        v76 = (char **)(a1 + 1656);
                        goto LABEL_294;
                      }
                      v242 = *(_QWORD *)(a1 + 416) + v241;
                      if (v242 > *(_QWORD *)(a1 + 408))
                        goto LABEL_258;
                    }
                    *(_QWORD *)(a1 + 424) = v242;
                    goto LABEL_292;
                  }
                  v240 = *(_QWORD *)(a1 + 256) + v239;
                  if (v240 > *(_QWORD *)(a1 + 248))
                    goto LABEL_258;
                }
                *(_QWORD *)(a1 + 264) = v240;
                goto LABEL_289;
              }
              v238 = *(_QWORD *)(a1 + 224) + v237;
              if (v238 > *(_QWORD *)(a1 + 216))
                goto LABEL_258;
            }
            *(_QWORD *)(a1 + 232) = v238;
            goto LABEL_286;
          }
          v236 = *(_QWORD *)(a1 + 1024) + 104;
          if (v236 > *(_QWORD *)(a1 + 1016))
            goto LABEL_258;
        }
        *(_QWORD *)(a1 + 1032) = v236;
        goto LABEL_283;
      }
      v235 = *(_QWORD *)(a1 + 384) + v234;
      if (v235 > *(_QWORD *)(a1 + 376))
        goto LABEL_258;
    }
    *(_QWORD *)(a1 + 392) = v235;
    goto LABEL_281;
  }
  v75 = v268;
  v76 = (char **)(a1 + 1656);
  v77 = v262;
LABEL_113:
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520))
  {
    v78 = *(_QWORD *)(a1 + 1552) - *(_QWORD *)(a1 + 1568);
    *(_DWORD *)(v78 + 12) = 1;
    if ((*(_BYTE *)(v78 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)a1 + 688) = 1;
  }
  if ((v23 & 0x20000000000000) != 0)
  {
    if (((v74 | v62 ^ 1) & 1) == 0)
    {
      v257 = v65;
      AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeVisibilityClear(a1);
      *(double *)v42.i64 = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitVisibilityClear(a1);
      v65 = v257;
      v69 = v263;
      v43 = (_QWORD *)(a1 + 16);
    }
    v202 = *(_WORD **)(a1 + 448);
    *v202 = *(_WORD *)(a1 + 2380);
    *(_QWORD *)(a1 + 448) = v202 + 1;
    LODWORD(v202) = *(_DWORD *)(a1 + 2376) + 1;
    *(_DWORD *)(a1 + 2376) = (_DWORD)v202;
    *(_DWORD *)(*(_QWORD *)(a1 + 2360) + 8) = (_DWORD)v202;
  }
  if (((v74 | v64 & v77 ^ 1) & 1) == 0)
  {
    v223 = v65;
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeGpuGather(a1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitGPUGather(a1);
    v65 = v223;
    v69 = v263;
    v43 = (_QWORD *)(a1 + 16);
  }
  v79 = (uint64_t)v267;
  if (((v74 | v265 & v67 ^ 1) & 1) == 0)
  {
    v224 = v65;
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeGpuGather(a1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitGPUGather(a1);
    v65 = v224;
    v69 = v263;
    v43 = (_QWORD *)(a1 + 16);
  }
  v80 = v66;
  if (((v74 | v65 & v66 ^ 1) & 1) == 0)
  {
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeGPUDMAPromotionPatchUp(a1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitGPUDMAPromotionPatchUp(a1);
    v69 = v263;
    v43 = (_QWORD *)(a1 + 16);
  }
  v81 = a5;
  if (((v74 | v68 & v69 ^ 1) & 1) != 0)
  {
    v82 = a4;
    if ((v23 & 0x200000000000) == 0)
      goto LABEL_125;
  }
  else
  {
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeGPUDMAPromotionPatchUp(a1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitGPUDMAPromotionPatchUp(a1);
    v43 = (_QWORD *)(a1 + 16);
    v82 = a4;
    if ((v23 & 0x200000000000) == 0)
      goto LABEL_125;
  }
  updated = AGX::ClipRectContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateClipRegions((uint64_t *)(a1 + 2192), &v271);
  if (*(_BYTE *)(a1 + 2266))
  {
    v226 = *(_DWORD *)(a1 + 2132);
    *(_DWORD *)(a1 + 2132) = v226 & 0xFFFEFFFF;
    v43 = (_QWORD *)(a1 + 16);
    if ((v226 & 0x10000) == 0)
      goto LABEL_125;
    goto LABEL_318;
  }
  if ((updated & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 2265))
    {
      v227 = 1;
      *(_BYTE *)(a1 + 2288) = 1;
      v228 = *(unint64_t **)(a1 + 320);
      *(_QWORD *)(a1 + 320) = v228 + 1;
      v229 = (unint64_t)v228 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 536);
      *v228 = (*(_DWORD *)(a1 + 2236) | (*(_DWORD *)(a1 + 2232) << 16)) | ((unint64_t)(*(_DWORD *)(a1 + 2244) | (*(_DWORD *)(a1 + 2240) << 16)) << 32);
      v230 = (_DWORD *)(a1 + 2260);
      while (v227 < *(unsigned int *)(a1 + 2268))
      {
        v231 = *(unint64_t **)(a1 + 320);
        *(_QWORD *)(a1 + 320) = v231 + 1;
        *v231 = (*(v230 - 2) | (*(v230 - 3) << 16)) | ((unint64_t)(*v230 | (*(v230 - 1) << 16)) << 32);
        ++v227;
        v230 += 4;
      }
      v247 = v229 >> 3;
    }
    else
    {
      LODWORD(v247) = *(_DWORD *)(a1 + 2292);
    }
    if (*(_BYTE *)(a1 + 2288))
    {
      *(_DWORD *)(a1 + 2108) = v247 | (*(unsigned __int16 *)(a1 + 2110) << 16);
      v271 |= 0x4000000000000uLL;
      v232 = 1;
    }
    else
    {
      v232 = 0;
    }
    v79 = (uint64_t)v267;
    v75 = v268;
    v82 = a4;
    v81 = a5;
    v43 = (_QWORD *)(a1 + 16);
    v76 = (char **)(a1 + 1656);
    v77 = v262;
  }
  else
  {
    v232 = *(unsigned __int8 *)(a1 + 2288);
    v43 = (_QWORD *)(a1 + 16);
  }
  v248 = v232 != 0;
  v249 = *(_DWORD *)(a1 + 2132);
  *(_DWORD *)(a1 + 2132) = v249 & 0xFFFEFFFF | (v248 << 16);
  if (((v248 ^ ((v249 & 0x10000u) >> 16)) & 1) != 0)
LABEL_318:
    v271 |= 0x100000000000uLL;
LABEL_125:
  v83 = v271;
  if ((v271 & 0x400000000000) != 0)
  {
    v42.i32[0] = *(_DWORD *)(a1 + 2312);
    v203 = *(_DWORD *)(a1 + 2320);
    v22.i32[0] = 931135616;
    v204.i64[0] = 0x8000000080000000;
    v204.i64[1] = 0x8000000080000000;
    LODWORD(v205) = vbslq_s8(v204, v22, v42).u32[0];
    if (*(_DWORD *)(*(_QWORD *)(a1 + 1736) + 2956))
      *(float *)v42.i32 = v205 + (float)(*(float *)v42.i32 * 0.000015259);
    v42.i32[1] = *(_DWORD *)(a1 + 2316);
    v206 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v206 + 12;
    *(_QWORD *)v206 = v42.i64[0];
    *(_DWORD *)(v206 + 8) = v203;
    *(_WORD *)(a1 + 2110) = -21845 * ((v206 - *(_DWORD *)(*(_QWORD *)(a1 + 40) + 472)) >> 2);
    v83 |= 0x4000000000000uLL;
    v271 = v83;
  }
  v269 = 0;
  v270 = 0;
  v84 = *(unsigned __int8 *)(a1 + 2528);
  v85 = *(_DWORD *)(a1 + 2536);
  v86 = *(_BYTE *)(a1 + 2540);
  LODWORD(v273[0]) = 0;
  LOBYTE(v254) = v86;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexProgramVariantAndArguments(v76, v43, v79, (_QWORD *)v82, a1 + 9104, v83, v84, v85, v254, &v270, v273);
  if ((v83 & 2) != 0)
  {
    v87 = *(_QWORD **)(a1 + 64);
    *v87 = v75[178].i64[(*(unsigned __int8 *)(a1 + 2530) | (2 * *(_DWORD *)(a1 + 2536)))
                      + ((*(unsigned __int8 *)(a1 + 2540) << 31 >> 31) & 6u)];
    *(_QWORD *)(a1 + 64) = v87 + 1;
  }
  if ((v83 & 0xF8000000000) != 0)
  {
    if ((v83 & 0x8000000000) != 0)
    {
      v88 = (int *)v75[4].i64[1];
      v89 = v75[5].i64[0] - (_QWORD)v88;
      v90 = v89 >> 2;
      v91 = (_QWORD *)((*(_QWORD *)(a1 + 416) + 7) & 0xFFFFFFFFFFFFFFF8);
      v92 = (char *)v91 + *(_QWORD *)(a1 + 432);
      *(_QWORD *)(a1 + 416) = (char *)v91 + ((2 * v89) & 0x7FFFFFFF8);
      for (v81[397] = v92; (_DWORD)v90; LODWORD(v90) = v90 - 1)
      {
        v93 = *v88++;
        *v91++ = v81[v93];
      }
    }
    if ((v83 & 0x10000000000) != 0)
    {
      v94 = (unsigned __int16 *)v75[7].i64[1];
      v95 = v75[8].i64[0] - (_QWORD)v94;
      v96 = (_QWORD *)((*(_QWORD *)(a1 + 416) + 7) & 0xFFFFFFFFFFFFFFF8);
      v97 = (char *)v96 + *(_QWORD *)(a1 + 432);
      *(_QWORD *)(a1 + 416) = (char *)v96 + ((2 * v95) & 0x7FFFFFFF8);
      v81[191] = v97;
      if (v75[13].i8[8])
      {
        v98 = (unsigned __int16 *)v75[9].i64[0];
        for (ii = (unint64_t)(v75[9].i64[1] - (_QWORD)v98) >> 1; (_DWORD)ii; LODWORD(ii) = ii - 1)
        {
          v100 = *v98++;
          v96[v100] = *(_QWORD *)(v81[v94[2 * v100]] + 8 * v94[2 * v100 + 1]);
        }
      }
      else
      {
        for (jj = v95 >> 2; (_DWORD)jj; LODWORD(jj) = jj - 1)
        {
          *v96++ = *(_QWORD *)(v81[*v94] + 8 * v94[1]);
          v94 += 2;
        }
      }
    }
    if ((v83 & 0x20000000000) != 0)
    {
      v102 = (unsigned int *)v75[6].i64[0];
      v103 = v75[6].i64[1] - (_QWORD)v102;
      v104 = v103 >> 2;
      v105 = *(_DWORD **)(a1 + 416);
      v106 = (char *)v105 + *(_QWORD *)(a1 + 432);
      *(_QWORD *)(a1 + 416) = (char *)v105 + (v103 & 0x3FFFFFFFCLL);
      for (v81[398] = v106; (_DWORD)v104; LODWORD(v104) = v104 - 1)
      {
        v107 = *v102++;
        *v105++ = *(_DWORD *)(a1 + 12240 + 4 * v107);
      }
    }
    if ((v83 & 0x40000000000) != 0)
    {
      v108 = (unsigned __int16 *)v75[10].i64[1];
      v109 = v75[11].i64[0] - (_QWORD)v108;
      v110 = *(_DWORD **)(a1 + 416);
      v111 = (char *)v110 + *(_QWORD *)(a1 + 432);
      *(_QWORD *)(a1 + 416) = (char *)v110 + (v109 & 0x3FFFFFFFCLL);
      v81[192] = v111;
      if (v75[13].i8[8])
      {
        v112 = (unsigned __int16 *)v75[12].i64[0];
        for (kk = (unint64_t)(v75[12].i64[1] - (_QWORD)v112) >> 1; (_DWORD)kk; LODWORD(kk) = kk - 1)
        {
          v114 = *v112++;
          v110[v114] = *(_DWORD *)(v81[v108[2 * v114]] + 4 * v108[2 * v114 + 1]);
        }
      }
      else
      {
        for (mm = v109 >> 2; (_DWORD)mm; LODWORD(mm) = mm - 1)
        {
          *v110++ = *(_DWORD *)(v81[*v108] + 4 * v108[1]);
          v108 += 2;
        }
      }
    }
    if ((v83 & 0x80000000000) != 0)
    {
      v116 = v75[88].i32[3] + v75[88].i32[2] + v75[89].i32[0] + v75[89].i32[1];
      v117 = (char *)((*(_QWORD *)(a1 + 256) + 7) & 0xFFFFFFFFFFFFFFF8);
      v118 = &v117[*(_QWORD *)(a1 + 272)];
      v272 = v117;
      v273[0] = v118;
      *(_QWORD *)(a1 + 256) = &v117[8 * v116];
      v119 = ((_QWORD)v118 << 32) | 0x200;
      v120 = *(uint64_t **)(a1 + 1024);
      v121 = (char *)v120 + *(_QWORD *)(a1 + 1040);
      *(_QWORD *)(a1 + 1024) = v120 + 1;
      *v120 = v119;
      v122 = *(unint64_t **)(a1 + 64);
      *v122 = __ROR8__(v121, 32) & 0xFFFFFFFC000000FFLL | 0x200;
      *(_QWORD *)(a1 + 64) = v122 + 1;
      agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v272, v273, (uint64_t)v81, &v75[88].i32[2], v75[124].i8[8], &v269);
    }
  }
  if ((v83 & 4) != 0)
  {
    v131 = *(_QWORD *)(a1 + 2176);
    v132 = *(_QWORD **)(a1 + 1024);
    v133 = (char *)v132 + *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1024) = v132 + 1;
    *v132 = v131;
    v134 = *(unint64_t **)(a1 + 64);
    *v134 = __ROR8__(v133, 32) & 0xFFFFFFFC000000FFLL | 0x200;
    *(_QWORD *)(a1 + 64) = v134 + 1;
    v123 = (int8x8_t *)(a1 + 2116);
    if ((v83 & 0x100000000000) == 0)
    {
LABEL_153:
      if ((v83 & 0x1000000000000) == 0)
        goto LABEL_154;
      goto LABEL_173;
    }
  }
  else
  {
    v123 = (int8x8_t *)(a1 + 2116);
    if ((v83 & 0x100000000000) == 0)
      goto LABEL_153;
  }
  if (a7)
    atomic_load((unsigned __int8 *)(v259 + 6753));
  v135 = 2512;
  if (*(_QWORD *)(a1 + 2504) == 2)
    v135 = 2516;
  v136 = *(float *)(a1 + v135) * 16.0;
  v137 = v136 + 0.5;
  if (v136 > 255.0)
    v137 = 255.5;
  v138 = v137;
  if (v136 < 0.0)
    v138 = 0;
  if (v138)
    v139 = (v138 << 8) - 256;
  else
    v139 = 0;
  *(_DWORD *)(a1 + 2136) = *(_DWORD *)(a1 + 2136) & 0xFFFF00FF | v139;
  v140 = *(_DWORD *)(a1 + 2144) & 0xFFFF00FF | v139;
  *(_DWORD *)(a1 + 2144) = v140;
  v141 = *(_DWORD *)(a1 + 2128);
  v142 = *(_DWORD *)(a1 + 2140);
  v143 = *(_DWORD *)(a1 + 2148);
  v144 = vbsl_s8((int8x8_t)0xF710000003E00000, v123[5], v123[2]);
  v145 = *(_DWORD *)(a1 + 2168) & 0xF7100000 | v140 & 0x8EFFFFF;
  v146 = *(_QWORD *)(a1 + 1024);
  v147 = *(_QWORD *)(a1 + 1040) + v146;
  *(_QWORD *)(a1 + 1024) = v146 + 24;
  *(_DWORD *)v146 = v141;
  *(int8x8_t *)(v146 + 4) = v144;
  *(_DWORD *)(v146 + 12) = v142;
  *(_DWORD *)(v146 + 16) = v145;
  *(_DWORD *)(v146 + 20) = v143;
  v148 = *(unint64_t **)(a1 + 64);
  *v148 = __ROR8__(v147, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  *(_QWORD *)(a1 + 64) = v148 + 1;
  v83 = v271;
  if ((v271 & 0x1000000000000) == 0)
  {
LABEL_154:
    if ((v83 & 0x2000000000000) == 0)
      goto LABEL_155;
    goto LABEL_174;
  }
LABEL_173:
  v149 = *(_QWORD *)(a1 + 384);
  v150 = *(_QWORD *)(a1 + 400) + v149;
  *(_QWORD *)(a1 + 384) = v149 + 36;
  v151 = *(_OWORD *)(a1 + 2068);
  v152 = *(_OWORD *)(a1 + 2084);
  *(_DWORD *)(v149 + 32) = *(_DWORD *)(a1 + 2100);
  *(_OWORD *)v149 = v151;
  *(_OWORD *)(v149 + 16) = v152;
  v153 = *(unint64_t **)(a1 + 64);
  *v153 = __ROR8__(v150, 32) & 0xFFFFFFFC000000FFLL | 0x900;
  *(_QWORD *)(a1 + 64) = v153 + 1;
  if ((v83 & 0x2000000000000) == 0)
  {
LABEL_155:
    if ((v83 & 0x4000000000000) == 0)
      goto LABEL_156;
    goto LABEL_175;
  }
LABEL_174:
  v154 = *v123;
  v155 = *(_DWORD *)(a1 + 2124);
  v156 = *(int8x8_t **)(a1 + 1024);
  v157 = (uint64_t)v156 + *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1024) = (char *)v156 + 12;
  *v156 = v154;
  v156[1].i32[0] = v155;
  v158 = *(unint64_t **)(a1 + 64);
  *v158 = __ROR8__(v157, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  *(_QWORD *)(a1 + 64) = v158 + 1;
  if ((v83 & 0x4000000000000) == 0)
  {
LABEL_156:
    if ((v83 & 0x10000000000000) == 0)
      goto LABEL_157;
    goto LABEL_176;
  }
LABEL_175:
  v159 = *(_QWORD *)(a1 + 2104);
  v160 = *(_QWORD **)(a1 + 352);
  v161 = (char *)v160 + *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 352) = v160 + 1;
  *v160 = v159;
  v162 = *(unint64_t **)(a1 + 64);
  *v162 = __ROR8__(v161, 32) & 0xFFFFFFFC000000FFLL | 0x200;
  *(_QWORD *)(a1 + 64) = v162 + 1;
  if ((v83 & 0x10000000000000) == 0)
  {
LABEL_157:
    if (v77)
      goto LABEL_158;
LABEL_177:
    if (!v265)
      goto LABEL_180;
    goto LABEL_178;
  }
LABEL_176:
  v163 = *(_OWORD **)(a1 + 1024);
  v164 = (char *)v163 + *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1024) = v163 + 1;
  *v163 = *(_OWORD *)v76;
  v165 = __ROR8__(v164, 32) & 0xFFFFFFFC000000FFLL | 0x400;
  v166 = *(unint64_t **)(a1 + 64);
  *v166 = v165;
  *(_QWORD *)(a1 + 64) = v166 + 1;
  if (!v77)
    goto LABEL_177;
LABEL_158:
  v124 = *(_QWORD *)(v79 + 2032);
  v125 = (*(_QWORD *)(a1 + 224) + 7) & 0xFFFFFFFFFFFFFFF8;
  v126 = v125 + *(_DWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v125 + 32;
  v127 = *(_OWORD *)(v82 + 1528);
  *(_QWORD *)v125 = v124;
  *(_OWORD *)(v125 + 8) = v127;
  v128 = *(_DWORD **)(a1 + 544);
  *v128 = v126;
  *(_QWORD *)(a1 + 544) = v128 + 1;
  LODWORD(v128) = *(_DWORD *)(a1 + 2424) + 1;
  *(_DWORD *)(a1 + 2424) = (_DWORD)v128;
  *(_DWORD *)(*(_QWORD *)(a1 + 2416) + 8) = (_DWORD)v128;
  v129 = (char *)((*(_QWORD *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
  v130 = &v129[*(_QWORD *)(a1 + 176)];
  *(_QWORD *)(a1 + 160) = v129 + 280;
  memcpy(v129, (const void *)(v82 + 520), 0x118uLL);
  *(_QWORD *)(v125 + 24) = v130;
  if (!v265)
    goto LABEL_180;
LABEL_178:
  v167 = v75[127].i64[0];
  v168 = (*(_QWORD *)(a1 + 224) + 7) & 0xFFFFFFFFFFFFFFF8;
  v169 = v168 + *(_DWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v168 + 32;
  v170 = *(_OWORD *)(v81 + 191);
  *(_QWORD *)v168 = v167;
  *(_OWORD *)(v168 + 8) = v170;
  v171 = *(_DWORD **)(a1 + 544);
  *v171 = v169;
  *(_QWORD *)(a1 + 544) = v171 + 1;
  LODWORD(v171) = *(_DWORD *)(a1 + 2424) + 1;
  *(_DWORD *)(a1 + 2424) = (_DWORD)v171;
  *(_DWORD *)(*(_QWORD *)(a1 + 2416) + 8) = (_DWORD)v171;
  v172 = (char *)((*(_QWORD *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
  v173 = &v172[*(_QWORD *)(a1 + 176)];
  *(_QWORD *)(a1 + 160) = v172 + 280;
  memcpy(v172, v81 + 65, 0x118uLL);
  *(_QWORD *)(v168 + 24) = v173;
  v174 = v75[88].u64[0];
  while (v174)
  {
    v174 &= ~(1 << __clz(__rbit64(v174)));
    IOGPUResourceListAddResource();
  }
LABEL_180:
  v175 = v269;
  if (v80)
  {
    v176 = v270;
    v177 = *(_QWORD *)(v79 + 3592);
    v178 = *(_QWORD *)(a1 + 160);
    v179 = v178 + 31;
    if ((unint64_t)(v178 + 31) > *(_QWORD *)(a1 + 152))
    {
      v219 = AGX::DataBufferAllocator<34ul>::growNoInline(v264, 3, 0);
      v178 = *(_QWORD *)(a1 + 160);
      if (!v219)
        goto LABEL_183;
      v179 = v178 + 31;
      if ((unint64_t)(v178 + 31) > *(_QWORD *)(a1 + 152))
        goto LABEL_258;
    }
    *(_QWORD *)(a1 + 168) = v179;
LABEL_183:
    v180 = (_QWORD *)((v178 + 7) & 0xFFFFFFFFFFFFFFF8);
    v181 = (_DWORD)v180 + *(_DWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 160) = v180 + 3;
    *v180 = v177;
    v180[1] = v176;
    v182 = *(int **)(a1 + 576);
    *v182 = v181;
    *(_QWORD *)(a1 + 576) = v182 + 1;
    v183 = *(char **)(a1 + 160);
    v184 = &v183[*(_QWORD *)(a1 + 176)];
    *(_QWORD *)(a1 + 160) = v183 + 280;
    memcpy(v183, (const void *)(v82 + 520), 0x118uLL);
    v180[2] = v184;
    v185 = *(_DWORD *)(a1 + 2488) + 1;
    *(_DWORD *)(a1 + 2488) = v185;
    *(_DWORD *)(*(_QWORD *)(a1 + 2480) + 8) = v185;
    v75 = v268;
  }
  result = a1 + 16;
  if (!v263)
    return result;
  v186 = v75[195].i64[1];
  v187 = *(_QWORD *)(a1 + 160);
  v188 = v187 + 31;
  if ((unint64_t)(v187 + 31) > *(_QWORD *)(a1 + 152))
  {
    v220 = AGX::DataBufferAllocator<34ul>::growNoInline(v264, 3, 0);
    v187 = *(_QWORD *)(a1 + 160);
    if (!v220)
      goto LABEL_187;
    v188 = v187 + 31;
    if ((unint64_t)(v187 + 31) > *(_QWORD *)(a1 + 152))
LABEL_258:
      abort();
  }
  *(_QWORD *)(a1 + 168) = v188;
LABEL_187:
  v189 = (_QWORD *)((v187 + 7) & 0xFFFFFFFFFFFFFFF8);
  v190 = (_DWORD)v189 + *(_DWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v189 + 3;
  *v189 = v186;
  v189[1] = v175;
  v191 = *(int **)(a1 + 576);
  *v191 = v190;
  *(_QWORD *)(a1 + 576) = v191 + 1;
  v192 = *(char **)(a1 + 160);
  v193 = &v192[*(_QWORD *)(a1 + 176)];
  *(_QWORD *)(a1 + 160) = v192 + 280;
  result = (uint64_t)memcpy(v192, v81 + 65, 0x118uLL);
  v189[2] = v193;
  for (nn = v268[87].u64[1]; nn; result = IOGPUResourceListAddResource())
    nn &= ~(1 << __clz(__rbit64(nn)));
  v195 = *(_DWORD *)(a1 + 2488) + 1;
  *(_DWORD *)(a1 + 2488) = v195;
  *(_DWORD *)(*(_QWORD *)(a1 + 2480) + 8) = v195;
  return result;
}

char **AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char **result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[2228];
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47[400];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 1456) + 808) + 6840) + 8);
  v42 = -1;
  bzero(v43, 0x88CuLL);
  *(_OWORD *)&v43[2212] = 0u;
  v44 = 1065353216;
  v45 = 0x100000001;
  bzero(&v46, 0x370uLL);
  LOBYTE(v41) = 0;
  result = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexProgramVariantAndArguments((char **)(v4 + 1656), (_QWORD *)(v4 + 16), v5, v47, (uint64_t)&v42, 57345, 0, 0, v41, 0, v3);
  v7 = v4 + 56;
  v8 = *(_QWORD *)(v4 + 1024);
  v9 = *(_QWORD *)(v4 + 1040) + v8;
  *(_QWORD *)(v4 + 1024) = v8 + 24;
  *(_OWORD *)v8 = xmmword_232D73CF0;
  *(_QWORD *)(v8 + 16) = 269487872;
  v10 = __ROR8__(v9, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  if ((*v3 & 2) != 0)
    v11 = 1;
  else
    v11 = (*v3 >> 1) & 2;
  v12 = v7 + 32 * v11;
  v13 = *(unint64_t **)(v12 + 8);
  *v13 = v10;
  *(_QWORD *)(v12 + 8) = v13 + 1;
  LODWORD(v14) = 0x20000;
  HIDWORD(v14) = *(_DWORD *)(v5 + 3600) & 0xFF0400FF;
  v15 = *(_QWORD **)(v4 + 1024);
  v16 = (char *)v15 + *(_QWORD *)(v4 + 1040);
  *(_QWORD *)(v4 + 1024) = v15 + 1;
  *v15 = v14;
  v17 = __ROR8__(v16, 32) & 0xFFFFFFFC000000FFLL | 0x200;
  if ((*v3 & 2) != 0)
    v18 = 1;
  else
    v18 = (*v3 >> 1) & 2;
  v19 = v7 + 32 * v18;
  v20 = *(unint64_t **)(v19 + 8);
  *v20 = v17;
  *(_QWORD *)(v19 + 8) = v20 + 1;
  v21 = *(_QWORD *)(v5 + 3432) & 0xE23FFFFFLL;
  v22 = *(_QWORD *)(v4 + 1024);
  v23 = *(_QWORD *)(v4 + 1040) + v22;
  *(_QWORD *)(v4 + 1024) = v22 + 12;
  *(_QWORD *)v22 = 0x1E3CE50800210000;
  *(_DWORD *)(v22 + 8) = 1184;
  v24 = __ROR8__(v23, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  if ((*v3 & 2) != 0)
    v25 = 1;
  else
    v25 = (*v3 >> 1) & 2;
  v26 = v7 + 32 * v25;
  v27 = *(unint64_t **)(v26 + 8);
  *v27 = v24;
  *(_QWORD *)(v26 + 8) = v27 + 1;
  v28 = v21 | 0xFFFF10000000;
  if ((*v3 & 2) != 0)
    v29 = 1;
  else
    v29 = (*v3 >> 1) & 2;
  v30 = v7 + 32 * v29;
  v31 = *(uint64_t **)(v30 + 8);
  *v31 = v28;
  *(_QWORD *)(v30 + 8) = v31 + 1;
  if ((*v3 & 2) != 0)
    v32 = 1;
  else
    v32 = (*v3 >> 1) & 2;
  v33 = v7 + 32 * v32;
  v34 = *(_QWORD *)(v33 + 8);
  *(_DWORD *)v34 = 1849950208;
  *(_QWORD *)(v34 + 4) = 1;
  *(_QWORD *)(v34 + 12) = 0x20000000000;
  *(_QWORD *)(v33 + 8) = v34 + 20;
  v35 = *(_QWORD *)(v4 + 2672);
  v36 = *(_QWORD *)(v4 + 1960);
  v37 = *(_QWORD *)(v4 + 21152) & 0x20000000000000;
  if (v35)
  {
    v38 = v37 | 0xFFDFF0701C0701FFLL | *(_QWORD *)(v35 + 1248);
    if (!v36)
      goto LABEL_18;
LABEL_21:
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dirtyDrawBits(unsigned long long &)const::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  }
  v38 = v37 | 0xFFDFF0701C0701FELL;
  if (v36)
    goto LABEL_21;
LABEL_18:
  v39 = *(_QWORD *)(v4 + 2680);
  if (v39)
    v40 = *(_QWORD *)(v39 + 1248) | v38;
  else
    v40 = v38 & 0xFFFFFFFFFFFFFFFDLL;
  *(_QWORD *)(v4 + 21152) = v40;
  return result;
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dirtyDrawBits(unsigned long long &)const::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

_QWORD *AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveVisibilityClearDatabufferSpace(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = result;
  v2 = result + 2;
  v3 = result[9];
  if ((unint64_t)(v3 + 100) > result[7])
  {
    v13 = (unint64_t *)result[8];
    result = (_QWORD *)AGX::DataBufferAllocator<34ul>::growNoInline(result + 2, 0, 0);
    if ((_DWORD)result)
    {
      v14 = v1[8];
      v15 = v14 + v3 - (_QWORD)v13 + 100;
      if (v15 > v1[7])
        goto LABEL_21;
      v1[9] = v15;
      *v13 = __ROR8__(v1[10] + v14, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    result[9] = v3 + 100;
  }
  v4 = *(_DWORD **)(*(_QWORD *)(v1[182] + 808) + 5184);
  v5 = (2 * (v4[20] - v4[18])) & 0xFFFFFFF8;
  v6 = v4[304];
  v7 = v1[21];
  v8 = v7 + v5;
  if ((unint64_t)(v7 + v5) <= v1[19])
  {
LABEL_4:
    v1[21] = v8;
    goto LABEL_5;
  }
  v16 = v1[20];
  result = (_QWORD *)AGX::DataBufferAllocator<34ul>::growNoInline(v2, 3, 0);
  if ((_DWORD)result)
  {
    v8 = v1[20] + v7 - v16 + v5;
    if (v8 > v1[19])
      goto LABEL_21;
    goto LABEL_4;
  }
LABEL_5:
  v9 = v1[129];
  v10 = v9 + 60;
  if ((unint64_t)(v9 + 60) <= v1[127])
  {
LABEL_6:
    v1[129] = v10;
    goto LABEL_7;
  }
  v17 = v1[128];
  result = (_QWORD *)AGX::DataBufferAllocator<34ul>::growNoInline(v2, 30, 0);
  if ((_DWORD)result)
  {
    v10 = v1[128] + v9 - v17 + 60;
    if (v10 > v1[127])
      goto LABEL_21;
    goto LABEL_6;
  }
LABEL_7:
  v11 = v1[29];
  v12 = v11 + v6;
  if ((unint64_t)(v11 + v6) <= v1[27])
  {
LABEL_8:
    v1[29] = v12;
    return result;
  }
  v18 = v1[28];
  result = (_QWORD *)AGX::DataBufferAllocator<34ul>::growNoInline(v2, 5, 0);
  if ((_DWORD)result)
  {
    v12 = v1[28] + v11 - v18 + v6;
    if (v12 <= v1[27])
      goto LABEL_8;
LABEL_21:
    abort();
  }
  return result;
}

BOOL AGX::isIndirectGatherDirty<AGX::G9::VertexProgramVariantPDSState>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (a1[14] & a3 | a1[13] & a2 | a1[15] & a4 | a1[17] & a3 | a1[16] & a2 | a1[18] & a4 | a1[19] & a5) != 0;
}

BOOL AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveGPUGatherDataBufferSpace(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL8 v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v2 = a1 + 2;
  v3 = a1[29];
  v4 = v3 + 39;
  if ((unint64_t)(v3 + 39) <= a1[27])
  {
LABEL_2:
    a1[29] = v4;
    goto LABEL_3;
  }
  v12 = a1[28];
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 2, 5, 0))
  {
    v4 = a1[28] + v3 - v12 + 39;
    if (v4 > a1[27])
      goto LABEL_16;
    goto LABEL_2;
  }
LABEL_3:
  v5 = a1[21];
  v6 = v5 + 287;
  if ((unint64_t)(v5 + 287) <= a1[19])
  {
LABEL_4:
    a1[21] = v6;
    goto LABEL_5;
  }
  v13 = a1[20];
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v2, 3, 0))
  {
    v6 = a1[20] + v5 - v13 + 287;
    if (v6 > a1[19])
      goto LABEL_16;
    goto LABEL_4;
  }
LABEL_5:
  v7 = a1[69];
  v8 = v7 + 4;
  v9 = a1[67];
  v10 = v7 + 4 > v9;
  if (v7 + 4 <= v9)
  {
LABEL_6:
    a1[69] = v8;
    return v10;
  }
  v14 = a1[68];
  v15 = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 15, 0);
  result = 0;
  if (v15)
  {
    v8 = a1[68] + v7 - v14 + 4;
    if (v8 <= a1[67])
      goto LABEL_6;
LABEL_16:
    abort();
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::restartRenderPass(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  unsigned int *v7;
  _QWORD *i;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v6 = *(_QWORD *)(a1 + 288);
  if (!v6)
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
    v6 = *(_QWORD *)(a1 + 288);
    if (!v6)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
      v6 = 0;
    }
  }
  v7 = (unsigned int *)(a1 + 21160);
  if (-1431655765 * ((unint64_t)(v6 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 472)) >> 2) <= 0xFFFE
    && !*(_QWORD *)(a1 + 288))
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
  }
  for (i = *(_QWORD **)(a1 + 2648); i; i = (_QWORD *)*i)
    (*(void (**)(void))(i[1] + 16))();
  v9 = *(_OWORD **)(a1 + 2664);
  v10 = *(_OWORD *)((char *)v9 + 1368);
  v9[42] = *(_OWORD *)((char *)v9 + 1352);
  v9[43] = v10;
  v9[44] = *(_OWORD *)((char *)v9 + 1384);
  v11 = *(_QWORD *)(a1 + 2664);
  *(_BYTE *)(v11 + 1578) = 0;
  v12 = *(_OWORD *)(v11 + 1416);
  *(_OWORD *)(v11 + 496) = *(_OWORD *)(v11 + 1400);
  *(_OWORD *)(v11 + 512) = v12;
  v13 = *(_OWORD *)(v11 + 1512);
  *(_OWORD *)(v11 + 592) = *(_OWORD *)(v11 + 1496);
  *(_OWORD *)(v11 + 608) = v13;
  v14 = *(_OWORD *)(v11 + 1480);
  *(_OWORD *)(v11 + 560) = *(_OWORD *)(v11 + 1464);
  *(_OWORD *)(v11 + 576) = v14;
  v15 = *(_OWORD *)(v11 + 1448);
  *(_OWORD *)(v11 + 528) = *(_OWORD *)(v11 + 1432);
  *(_OWORD *)(v11 + 544) = v15;
  IOGPUResourceListAddResource();
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endRenderPassCommon(a1, 0, 1, 1);
  *(_BYTE *)(a1 + 2033) = 0;
  ++*(_DWORD *)(a1 + 21260);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginRenderPass(a1);
  result = IOGPUResourceListAddResource();
  v17 = *(_QWORD *)(a1 + 2688);
  if (v17 && *(_DWORD *)(v17 + 768))
  {
    v18 = 0;
    v19 = v17 + 48;
    v20 = *(_DWORD *)(v17 + 772) | *(_DWORD *)(v17 + 776);
    do
    {
      if (((v20 >> v18) & 1) != 0)
      {
        result = IOGPUResourceListAddResource();
        v17 = *(_QWORD *)(a1 + 2688);
      }
      ++v18;
      v19 += 24;
    }
    while (v18 < *(unsigned int *)(v17 + 768));
  }
  v21 = *(_QWORD *)(a1 + 2672);
  if (v21)
  {
    v22 = *(_DWORD *)(v17 + 40);
    if (v22 > *(_DWORD *)(a1 + 2584))
    {
      *(_DWORD *)(a1 + 2584) = v22;
      *(_BYTE *)(a1 + 2608) = 1;
    }
    else if (!*(_BYTE *)(a1 + 2608))
    {
      goto LABEL_18;
    }
    result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindVertexUSCSpillBuffer(a1);
    v21 = *(_QWORD *)(a1 + 2672);
    v17 = *(_QWORD *)(a1 + 2688);
LABEL_18:
    v23 = *(_QWORD *)(v21 + 1264);
    v24 = *(_QWORD *)(v21 + 1312);
    v25 = *(_QWORD *)(v21 + 1344);
    v26 = *(_QWORD *)(v21 + 1368);
    v27 = *(_QWORD *)(v21 + 2832) & 0xFFFFBFFFFFFFFFFFLL | *(_QWORD *)(v21 + 1288) | v23 | v24 | v25 | v26;
    if (*(_BYTE *)(v17 + 837))
    {
      if (*(_QWORD *)(v17 + 1088))
        v28 = ((unint64_t)(*(_QWORD *)(v17 + 1072) != 0) << 59) | 0x1000000000000000;
      else
        v28 = (unint64_t)(*(_QWORD *)(v17 + 1072) != 0) << 59;
      v29 = v27 & ~v28;
      if (!v29)
        goto LABEL_33;
    }
    else
    {
      v29 = *(_QWORD *)(v21 + 2832) & 0xFFFFBFFFFFFFFFFFLL | *(_QWORD *)(v21 + 1288) | v23 | v24 | v25 | v26;
      if (!v27)
      {
LABEL_33:
        v32 = (*(_QWORD *)(v21 + 1272) | *(_QWORD *)(v21 + 1296) | *(_QWORD *)(v21 + 1320) | *(_QWORD *)(v21 + 1352) | *(_QWORD *)(v21 + 1376) | *(_QWORD *)(v21 + 2840)) & *(_QWORD *)(a1 + 10856);
        if (v32)
        {
          do
          {
            v33 = __clz(__rbit64(v32));
            v34 = 1 << v33;
            if (*(_QWORD *)(a1 + 8 * v33 + 16424))
              result = IOGPUResourceListAddResource();
            v32 &= ~v34;
          }
          while (v32);
          v21 = *(_QWORD *)(a1 + 2672);
        }
        v35 = *(_QWORD *)(a1 + 2664);
        *(_BYTE *)(v35 + 463) |= *(_BYTE *)(v21 + 377);
        *(_BYTE *)(v35 + 466) |= *(_BYTE *)(v21 + 382);
        goto LABEL_40;
      }
    }
    do
    {
      v30 = __clz(__rbit64(v29));
      v31 = 1 << v30;
      if (v30 <= 0x3D && ((1 << v30) & 0x3BD9800000000000) != 0
        || *(_QWORD *)(a1 + 8 * v30 + 15416)
        || a4)
      {
        result = IOGPUResourceListAddResource();
      }
      v29 &= ~v31;
    }
    while (v29);
    v21 = *(_QWORD *)(a1 + 2672);
    goto LABEL_33;
  }
LABEL_40:
  if (*(_QWORD *)(a1 + 1960))
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindAllResources(BOOL)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  v36 = *(_QWORD *)(a1 + 2680);
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 2688);
    v38 = *(_DWORD *)(v37 + 44);
    if (v38 > *(_DWORD *)(a1 + 2616))
    {
      *(_DWORD *)(a1 + 2616) = v38;
      *(_BYTE *)(a1 + 2640) = 1;
    }
    else if (!*(_BYTE *)(a1 + 2640))
    {
      goto LABEL_44;
    }
    result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFragmentUSCSpillBuffer(a1);
    v36 = *(_QWORD *)(a1 + 2680);
    v37 = *(_QWORD *)(a1 + 2688);
LABEL_44:
    v39 = *(_QWORD *)(v36 + 1344);
    v40 = *(_QWORD *)(v36 + 1264) | *(_QWORD *)(v36 + 1288) | *(_QWORD *)(v36 + 1312) | v39 | *(_QWORD *)(v36 + 1368);
    if (*(_BYTE *)(v37 + 837))
    {
      if (*(_QWORD *)(v37 + 1176))
        v41 = ((unint64_t)(*(_QWORD *)(v37 + 1160) != 0) << 59) | 0x1000000000000000;
      else
        v41 = (unint64_t)(*(_QWORD *)(v37 + 1160) != 0) << 59;
      v42 = v40 & ~v41;
      if (!v42)
        goto LABEL_59;
    }
    else
    {
      v42 = *(_QWORD *)(v36 + 1264) | *(_QWORD *)(v36 + 1288) | *(_QWORD *)(v36 + 1312) | v39 | *(_QWORD *)(v36 + 1368);
      if (!v40)
      {
LABEL_59:
        v45 = (*(_QWORD *)(v36 + 1272) | *(_QWORD *)(v36 + 1296) | *(_QWORD *)(v36 + 1320) | *(_QWORD *)(v36 + 1352) | *(_QWORD *)(v36 + 1376)) & *(_QWORD *)(a1 + 13992);
        if (v45)
        {
          do
          {
            v46 = __clz(__rbit64(v45));
            v47 = 1 << v46;
            if (*(_QWORD *)(a1 + 8 * v46 + 16672))
              result = IOGPUResourceListAddResource();
            v45 &= ~v47;
          }
          while (v45);
          v36 = *(_QWORD *)(a1 + 2680);
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 1264) |= *(_BYTE *)(v36 + 377);
        *(_BYTE *)(a1 + 21257) |= *(_BYTE *)(v36 + 382);
        goto LABEL_66;
      }
    }
    do
    {
      v43 = __clz(__rbit64(v42));
      v44 = 1 << v43;
      if (v43 <= 0x3D && ((1 << v43) & 0x3BD9800000000000) != 0
        || *(_QWORD *)(a1 + 8 * v43 + 15920)
        || a4)
      {
        result = IOGPUResourceListAddResource();
      }
      v42 &= ~v44;
    }
    while (v42);
    v36 = *(_QWORD *)(a1 + 2680);
    goto LABEL_59;
  }
LABEL_66:
  if (*(_QWORD *)(a1 + 2552))
    result = IOGPUResourceListAddResource();
  if (*(_QWORD *)(a1 + 2560))
    result = IOGPUResourceListAddResource();
  if (*(_BYTE *)(a1 + 2383))
  {
    v48 = *v7;
    if ((*v7 & 2) != 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 1736) + 2944))
      {
        result = IOGPUResourceListAddResource();
        v48 = *v7;
      }
      *v7 = v48 & 0xFFFFFFFD;
    }
  }
  v49 = *(_QWORD *)(a1 + 2672);
  v50 = *(_QWORD *)(a1 + 1960);
  v51 = *a2 & 0x20000000000000;
  if (v49)
  {
    v52 = v51 | 0xFFDFF0701C0701FELL | *(_QWORD *)(v49 + 1248) | 1;
    if (!v50)
      goto LABEL_77;
LABEL_80:
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::dirtyDrawBits(unsigned long long &)const::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  }
  v52 = v51 | 0xFFDFF0701C0701FELL;
  if (v50)
    goto LABEL_80;
LABEL_77:
  v53 = *(_QWORD *)(a1 + 2680);
  if (v53)
    v54 = *(_QWORD *)(v53 + 1248) | v52;
  else
    v54 = v52 & 0xFFFFFFFFFFFFFFFDLL;
  *a2 = v54;
  return result;
}

_QWORD *AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveScissorSpace(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = result;
  v3 = 8 * a2;
  v4 = result[40] + 8 * a2;
  if (v4 > result[39])
  {
    result = (_QWORD *)AGX::DataBufferAllocator<34ul>::growNoInline(result + 2, 8, 1);
    if ((_DWORD)result)
    {
      v5 = v2[40] + v3;
      if (v5 > v2[39])
        abort();
      v2[41] = v5;
      *(_QWORD *)(v2[333] + 720) = *(_QWORD *)(v2[5] + 512)
                                   + *(_QWORD *)(v2[5] + 536)
                                   - *(_QWORD *)(v2[5] + 520);
    }
  }
  else
  {
    result[41] = v4;
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveDepthBiasSpace(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)result;
  v2 = result + 16;
  v3 = *(_QWORD *)(result + 288);
  if (!v3)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(result + 16, 7, 0);
    if (!(_DWORD)result)
      goto LABEL_12;
    v3 = v1[36];
  }
  v4 = v3 + 12;
  if (v4 <= v1[35])
  {
    v1[37] = v4;
    return result;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 7, 1);
  if ((_DWORD)result)
  {
    v5 = v1[36];
    if ((unint64_t)(v5 + 12) <= v1[35])
    {
      v1[37] = v5 + 12;
      if (!v5)
        result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v2);
      *(_QWORD *)(v1[333] + 728) = *(_QWORD *)(v1[5] + 448)
                                   + *(_QWORD *)(v1[5] + 472)
                                   - *(_QWORD *)(v1[5] + 456);
      return result;
    }
LABEL_12:
    abort();
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeVisibilityClear(uint64_t result)
{
  int v1;
  unsigned int *v2;
  unsigned int v3;
  _WORD *v4;

  v1 = *(_DWORD *)(result + 2376);
  if (v1 == 1)
  {
    v4 = *(_WORD **)(result + 448);
    *v4 = *(_WORD *)(result + 2380);
    *(_QWORD *)(result + 448) = v4 + 1;
    *(_DWORD *)(result + 2376) = 2;
    *(_DWORD *)(*(_QWORD *)(result + 2360) + 8) = 2;
  }
  else if (!v1)
  {
    v2 = *(unsigned int **)(result + 2352);
    if (v2)
    {
      v3 = *(_DWORD *)(result + 2368) & 0xFFFFFFFC;
      *v2 = *(_DWORD *)(result + 2372) | 0x80000000;
      v2[1] = v3;
      *(_QWORD *)(result + 2352) = 0;
      *(_QWORD *)(result + 2368) = 0;
      ++*(_DWORD *)(result + 1536);
    }
  }
  return result;
}

double AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitVisibilityClear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  double result;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  char *v36;
  char *v37;

  *(_DWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2352) = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5184);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1736) + 2944);
  if (v3)
    v4 = *(_QWORD *)(v3 + (int)*MEMORY[0x24BE51650] + 8);
  else
    v4 = 0;
  v5 = *(_OWORD **)(a1 + 1024);
  v6 = (char *)v5 + *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1024) = v5 + 1;
  *v5 = *(_OWORD *)(a1 + 1656);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)v7 = __ROR8__(v6, 32) & 0xFFFFFFFC000000FFLL | 0x400;
  *(_QWORD *)(a1 + 64) = v7 + 8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v2 + 3392);
  *(_QWORD *)(a1 + 64) = v7 + 24;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v2 + 3428);
  *(_QWORD *)(a1 + 64) = v7 + 32;
  v8 = *(unsigned int **)(v2 + 72);
  v9 = *(_QWORD *)(v2 + 80) - (_QWORD)v8;
  v10 = v9 >> 2;
  v11 = *(_DWORD **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = (char *)v11 + (v9 & 0x3FFFFFFFCLL);
  v12 = (char *)v11 + *(_QWORD *)(a1 + 176);
  v35[0] = v4;
  for (v35[1] = v12; (_DWORD)v10; LODWORD(v10) = v10 - 1)
  {
    v13 = *v8++;
    *v11++ = *((_DWORD *)v35 + v13);
  }
  v14 = *(_DWORD *)(v2 + 1396)
      + *(_DWORD *)(v2 + 1392)
      + *(_DWORD *)(v2 + 1400)
      + *(_DWORD *)(v2 + 1404)
      + *(_DWORD *)(v2 + 2816)
      + *(_DWORD *)(v2 + 2820)
      + *(_DWORD *)(v2 + 2824)
      + *(_DWORD *)(v2 + 2828);
  v15 = *(char **)(a1 + 224);
  v16 = &v15[*(_QWORD *)(a1 + 240)];
  v36 = v15;
  v37 = v16;
  *(_QWORD *)(a1 + 224) = &v15[8 * v14];
  LODWORD(v15) = *(_DWORD *)(v2 + 3416);
  *(_QWORD *)(v7 + 32) = (((_QWORD)v16 << 32) + 0xF00000000) & 0xFFFFFFF000000000 | *(_QWORD *)(v2 + 3408) & 0xFFFFFFFFFLL;
  *(_DWORD *)(v7 + 40) = (_DWORD)v15;
  *(_QWORD *)(a1 + 64) = v7 + 44;
  agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v36, &v37, (uint64_t)v35, (_DWORD *)(v2 + 1392), 0, 0);
  v17 = *(uint64_t **)(a1 + 64);
  *v17 = *(_DWORD *)(v2 + 3392) & 0xE23FFFFF | ((_QWORD)v37 << 32) | 0x8000000;
  *(_QWORD *)(a1 + 64) = v17 + 1;
  agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v36, &v37, (uint64_t)v35, (_DWORD *)(v2 + 2816), 0, 0);
  v18 = *(_QWORD *)(a1 + 1024);
  v19 = *(_QWORD *)(a1 + 1040) + v18;
  *(_QWORD *)(a1 + 1024) = v18 + 24;
  *(_OWORD *)v18 = xmmword_232D73D00;
  *(_QWORD *)(v18 + 16) = 268439296;
  v20 = __ROR8__(v19, 32);
  v21 = *(unint64_t **)(a1 + 64);
  *v21 = v20 & 0xFFFFFFFC000000FFLL | 0x600;
  *(_QWORD *)(a1 + 64) = v21 + 1;
  LODWORD(v22) = 0x20000;
  HIDWORD(v22) = *(_DWORD *)(v2 + 3424) & 0xFF0400FF;
  v23 = *(_QWORD **)(a1 + 1024);
  v24 = (char *)v23 + *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1024) = v23 + 1;
  v25 = __ROR8__(v24, 32);
  *v23 = v22;
  v26 = *(unint64_t **)(a1 + 64);
  *v26 = v25 & 0xFFFFFFFC000000FFLL | 0x200;
  *(_QWORD *)(a1 + 64) = v26 + 1;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 768)
      + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 792)
      - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 776);
  v28 = *(_DWORD *)(v2 + 3392) & 0xE23FFFDF;
  v29 = *(_DWORD *)(a1 + 2376);
  v30 = *(_QWORD *)(a1 + 1024);
  v31 = *(_QWORD *)(a1 + 1040) + v30;
  *(_QWORD *)(a1 + 1024) = v30 + 12;
  result = 5.01764402e-163;
  *(_QWORD *)v30 = 0x1E3CE50800210000;
  *(_DWORD *)(v30 + 8) = 1184;
  v33 = __ROR8__(v31, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  v34 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)v34 = v33;
  *(_QWORD *)(v34 + 8) = v28 | 0xFFFF10000020;
  *(_DWORD *)(v34 + 20) = v27;
  *(_QWORD *)(v34 + 24) = v29;
  *(_DWORD *)(v34 + 32) = 0;
  *(_DWORD *)(v34 + 36) = 511;
  *(_DWORD *)(v34 + 16) = HIDWORD(v27) | 0x7E420300;
  *(_QWORD *)(a1 + 64) = v34 + 40;
  *(_QWORD *)(a1 + 2360) = v34 + 16;
  *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a1 + 80) + v34 + 40;
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeGpuGather(uint64_t result)
{
  int v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_DWORD *)(result + 2424);
  if (v1 || (v2 = *(unsigned int **)(result + 2408)) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(result + 2416) + 8) = v1;
  }
  else
  {
    v3 = *(_DWORD *)(result + 2432) & 0xFFFFFFFC;
    *v2 = *(_DWORD *)(result + 2436) | 0x80000000;
    v2[1] = v3;
    *(_QWORD *)(result + 2408) = 0;
    *(_QWORD *)(result + 2432) = 0;
    ++*(_DWORD *)(result + 1536);
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitGPUGather(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2408) = *(_QWORD *)(a1 + 64);
  result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitBatchingDraw(a1);
  *(_QWORD *)(a1 + 2416) = result;
  *(_QWORD *)(a1 + 2432) = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64);
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeGPUDMAPromotionPatchUp(uint64_t result)
{
  int v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_DWORD *)(result + 2488);
  if (v1 || (v2 = *(unsigned int **)(result + 2472)) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(result + 2480) + 8) = v1;
  }
  else
  {
    v3 = *(_DWORD *)(result + 2496) & 0xFFFFFFFC;
    *v2 = *(_DWORD *)(result + 2500) | 0x80000000;
    v2[1] = v3;
    *(_QWORD *)(result + 2472) = 0;
    *(_QWORD *)(result + 2496) = 0;
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitGPUDMAPromotionPatchUp(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 64);
  result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitBatchingDraw(a1);
  *(_QWORD *)(a1 + 2480) = result;
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64);
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitBatchingDraw(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint32x4_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint64_t v29;
  int v30;
  __int128 v31[139];
  int v32;
  uint64_t v33;
  _QWORD v34[400];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v31[0] = xmmword_232D73730;
  v32 = 1065353216;
  v33 = 0x100000001;
  v7 = v1 + 1656;
  v8 = (_QWORD *)(v1 + 16);
  v30 = 0;
  LOBYTE(v29) = 0;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexProgramVariantAndArguments((char **)(v1 + 1656), (_QWORD *)(v1 + 16), v4, v34, (uint64_t)v31, 57345, 0, 0, v29, 0, &v30);
  v9 = *(_QWORD *)(v6 + 1024);
  v10 = *(_QWORD *)(v6 + 1040) + v9;
  *(_QWORD *)(v6 + 1024) = v9 + 24;
  v11.i64[1] = 0xE000000103E0F00;
  *(_OWORD *)v9 = xmmword_232D73CF0;
  *(_QWORD *)(v9 + 16) = 269487872;
  v12 = __ROR8__(v10, 32);
  v13 = *(unint64_t **)(v6 + 64);
  *v13 = v12 & 0xFFFFFFFC000000FFLL | 0x600;
  *(_QWORD *)(v6 + 64) = v13 + 1;
  LODWORD(v14) = 0x20000;
  HIDWORD(v14) = *(_DWORD *)(v5 + 3600) & 0xFF0400FF;
  v15 = *(_QWORD **)(v6 + 1024);
  v16 = (char *)v15 + *(_QWORD *)(v6 + 1040);
  *(_QWORD *)(v6 + 1024) = v15 + 1;
  *v15 = v14;
  v17 = __ROR8__(v16, 32);
  v18 = *(unint64_t **)(v6 + 64);
  *v18 = v17 & 0xFFFFFFFC000000FFLL | 0x200;
  *(_QWORD *)(v6 + 64) = v18 + 1;
  v19 = *(_QWORD *)(v5 + 3432) & 0xE23FFFDFLL;
  v20 = *(_QWORD *)(v6 + 1024);
  v21 = *(_QWORD *)(v6 + 1040) + v20;
  *(_QWORD *)(v6 + 1024) = v20 + 12;
  *(_QWORD *)v20 = 0x1E3CE50800210000;
  *(_DWORD *)(v20 + 8) = 1184;
  v22 = __ROR8__(v21, 32);
  v23 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)v23 = v22 & 0xFFFFFFFC000000FFLL | 0x300;
  *(_QWORD *)(v23 + 8) = v19 | 0xFFFF10000020;
  *(_QWORD *)(v23 + 24) = 0;
  *(_DWORD *)(v23 + 20) = v3;
  v11.i64[0] = 0x20000000000;
  *(_QWORD *)(v23 + 32) = 0x20000000000;
  *(_DWORD *)(v23 + 16) = HIDWORD(v3) | 0x7E440000;
  v24 = v23 + 16;
  *(_QWORD *)(v6 + 64) = v23 + 40;
  LODWORD(v34[0]) = 0;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v7, v8, (_DWORD *)(v6 + 21264), v34, v11, v25);
  *(_BYTE *)(v6 + 2032) = 1;
  LODWORD(v34[0]) = 0;
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(v6);
  LODWORD(v34[0]) = 0;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v7, v8, (_DWORD *)(v6 + 21264), v34, v26, v27);
  *(_QWORD *)(v6 + 21152) |= 0x5F500000000001uLL;
  return v24;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endRenderPassCommon(uint64_t a1, int a2, int a3, int a4)
{
  int v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  _WORD *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  char v41;
  char v42;
  int v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  size_t v56;
  void *v57;
  _DWORD *v58;
  int *v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  _OWORD *v63;
  int8x16_t v64;
  _BYTE *v65;
  _BYTE *v66;
  size_t v67;
  void *v68;
  int *v69;
  uint64_t v70;
  _DWORD *v71;
  int v72;
  unsigned int *v73;
  uint64_t v74;
  _DWORD *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  _DWORD *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t i;
  uint64_t v100;
  char v102;
  uint64_t v103;
  void *v104;
  int v105;
  int v106;
  void *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t result;
  unsigned int v119;
  _QWORD __dst[188];

  v8 = *(_DWORD *)(a1 + 2376);
  if (v8 == 1)
  {
    v12 = *(_WORD **)(a1 + 448);
    *v12 = *(_WORD *)(a1 + 2380);
    *(_QWORD *)(a1 + 448) = v12 + 1;
    *(_DWORD *)(a1 + 2376) = 2;
    *(_DWORD *)(*(_QWORD *)(a1 + 2360) + 8) = 2;
    v11 = *(_DWORD *)(a1 + 2424);
    if (v11)
      goto LABEL_11;
  }
  else
  {
    if (!v8)
    {
      v9 = *(unsigned int **)(a1 + 2352);
      if (v9)
      {
        v10 = *(_DWORD *)(a1 + 2368) & 0xFFFFFFFC;
        *v9 = *(_DWORD *)(a1 + 2372) | 0x80000000;
        v9[1] = v10;
        *(_QWORD *)(a1 + 2352) = 0;
        *(_QWORD *)(a1 + 2368) = 0;
        ++*(_DWORD *)(a1 + 1536);
      }
    }
    v11 = *(_DWORD *)(a1 + 2424);
    if (v11)
      goto LABEL_11;
  }
  v13 = *(unsigned int **)(a1 + 2408);
  if (v13)
  {
    v14 = *(_DWORD *)(a1 + 2432) & 0xFFFFFFFC;
    *v13 = *(_DWORD *)(a1 + 2436) | 0x80000000;
    v13[1] = v14;
    *(_QWORD *)(a1 + 2408) = 0;
    *(_QWORD *)(a1 + 2432) = 0;
    ++*(_DWORD *)(a1 + 1536);
    v15 = *(_DWORD *)(a1 + 2488);
    if (v15)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_11:
  *(_DWORD *)(*(_QWORD *)(a1 + 2416) + 8) = v11;
  v15 = *(_DWORD *)(a1 + 2488);
  if (v15)
    goto LABEL_14;
LABEL_12:
  v16 = *(unsigned int **)(a1 + 2472);
  if (v16)
  {
    v17 = *(_DWORD *)(a1 + 2496) & 0xFFFFFFFC;
    *v16 = *(_DWORD *)(a1 + 2500) | 0x80000000;
    v16[1] = v17;
    *(_QWORD *)(a1 + 2472) = 0;
    *(_QWORD *)(a1 + 2496) = 0;
    goto LABEL_15;
  }
LABEL_14:
  *(_DWORD *)(*(_QWORD *)(a1 + 2480) + 8) = v15;
LABEL_15:
  v18 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)(*(_QWORD *)(a1 + 2656) + 4))
    goto LABEL_166;
  v19 = *(_QWORD *)(a1 + 1808);
  if (v19)
  {
    v20 = *(_QWORD *)(a1 + 21328);
    **(_QWORD **)(a1 + 21320) = __ROR8__(v19, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    v21 = *(_QWORD *)(a1 + 1776);
    v22 = __ROR8__(v20, 32);
    v23 = *(unint64_t **)(v21 + 80);
    *v23 = v22 & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    *(_QWORD *)(v21 + 80) = v23 + 1;
    v24 = *(_QWORD *)(a1 + 1824);
    if (v24)
      *(_DWORD *)(v24 + 4) = *(_DWORD *)(a1 + 1816);
    *(_QWORD *)(a1 + 1808) = 0;
    *(_DWORD *)(a1 + 1816) = 0;
    *(_QWORD *)(a1 + 1824) = 0;
    *(_QWORD *)(a1 + 1832) = 0;
  }
  v25 = *(_QWORD *)(a1 + 2664);
  *(_BYTE *)(v25 + 465) = *(_BYTE *)(a1 + 2032);
  if ((a2 & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 21256))
    {
      v26 = *(_QWORD *)(a1 + 1736);
      AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeStoreActions(v26);
      v27 = !*(_BYTE *)(a1 + 21257) && *(_BYTE *)(v26 + 2991) != 0;
      if ((*(_QWORD *)(v26 + 3024) & 0xFFFFFFFFFELL) != 0)
        *(_QWORD *)(v26 + 3008) = *(_QWORD *)(v26 + 3008) & 0xFFFFFFFFFFFFFFFELL | v27;
    }
    v31 = *(_DWORD **)(a1 + 1736);
    v32 = v31[909];
    v33 = v31[910];
    if (v32 | v33 && **v18)
    {
      IOGPUDeviceTraceEvent();
      v32 = v31[909];
      v33 = v31[910];
    }
    if ((v32 >> 7) & 4 | (v32 >> 8) & 1 | (v33 >> 7) & 2 | (v33 >> 6) & 8 && **v18)
      IOGPUDeviceTraceEvent();
    if (v31[914] && **v18)
      IOGPUDeviceTraceEvent();
    v28 = *(_QWORD *)(a1 + 1736);
    *(int8x16_t *)(a1 + 21392) = vorrq_s8(*(int8x16_t *)(a1 + 21392), *(int8x16_t *)(v28 + 3792));
    v25 = *(_QWORD *)(a1 + 2664);
    v29 = *(unsigned __int8 *)(a1 + 2033);
    if (!*(_BYTE *)(a1 + 2033))
      goto LABEL_39;
LABEL_25:
    v30 = *(_DWORD *)(v28 + 2924);
    goto LABEL_42;
  }
  v28 = *(_QWORD *)(a1 + 1736);
  v29 = *(unsigned __int8 *)(a1 + 2033);
  if (*(_BYTE *)(a1 + 2033))
    goto LABEL_25;
LABEL_39:
  if (*(_DWORD *)(v28 + 2188) <= 1u)
    v30 = 15;
  else
    v30 = 7;
LABEL_42:
  *(_DWORD *)(v25 + 1256) = v30;
  v34 = *(_QWORD *)(v28 + 3008);
  v35 = *(_OWORD *)(v28 + 3016);
  v36 = *(_QWORD *)(v28 + 3032);
  v37 = *(_QWORD *)(v28 + 3040);
  v38 = *(_QWORD *)(v28 + 3048);
  *(_QWORD *)(v25 + 744) = v34;
  *(_OWORD *)(v25 + 768) = v35;
  *(_QWORD *)(v25 + 816) = v36;
  *(_QWORD *)(v25 + 856) = v37;
  *(_QWORD *)(v25 + 896) = v38;
  *(_QWORD *)(v25 + 1528) = *((_QWORD *)&v35 + 1);
  *(_QWORD *)(v25 + 1536) = *(_QWORD *)(v25 + 800);
  *(_QWORD *)(v25 + 1560) = *(_QWORD *)(v25 + 784);
  *(_QWORD *)(v25 + 1544) = v37;
  *(_QWORD *)(v25 + 1552) = *(_QWORD *)(v25 + 880);
  *(_QWORD *)(v25 + 1568) = *(_QWORD *)(v25 + 864);
  *(_DWORD *)(v25 + 1248) = *(_DWORD *)(v28 + 2952);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 336) + 808) + 6684) < 0xB0000u
    || !v29
    || *(_DWORD *)(v28 + 3636)
    || *(_DWORD *)(v28 + 3632))
  {
    v39 = 768;
  }
  else
  {
    v39 = 256;
  }
  *(_DWORD *)(v25 + 1252) = v39 | *(unsigned __int8 *)(v28 + 2960);
  *(_BYTE *)(v25 + 1270) = *(_DWORD *)(v28 + 2956) != 0;
  v40 = *(_WORD *)(a1 + 2304);
  *(_BYTE *)(v25 + 1576) = 0;
  if (v29)
  {
    if (*(_BYTE *)(v28 + 2920))
      v41 = 1;
    else
      v41 = *(_WORD *)(v28 + 3112) != 0;
    *(_BYTE *)(v25 + 1577) = v41;
    *(_BYTE *)(v25 + 1578) = *(_BYTE *)(v28 + 1882);
    if (a2)
    {
      v41 = *(_BYTE *)(v28 + 2928);
      v42 = 1;
    }
    else
    {
      v42 = 0;
    }
  }
  else
  {
    v42 = 0;
    *(_BYTE *)(v25 + 1577) = 0;
    v41 = *(_BYTE *)(v28 + 1882);
    *(_BYTE *)(v25 + 1578) = v41;
    if (!a2)
      v41 = 0;
  }
  *(_BYTE *)(v25 + 1640) = v41;
  v43 = (unsigned __int16)(*(_WORD *)(v28 + 3104) & v40);
  v44 = v43 | *(unsigned __int16 *)(v28 + 3106);
  v45 = *(unsigned __int16 *)(v28 + 3108);
  if (v29)
    v43 = v44 & ~*(unsigned __int16 *)(v28 + 3114);
  v46 = v44 | v45;
  if (a2)
    v43 = (v43 | v45) & ~*(unsigned __int16 *)(v28 + 3116);
  if ((v46 & 3) != 0)
  {
    if ((v46 & 0xC) != 0)
      goto LABEL_62;
  }
  else
  {
    *(_QWORD *)(v25 + 800) = 0;
    *(_QWORD *)(v25 + 1560) = 0;
    *(_QWORD *)(v25 + 776) = 0;
    *(_QWORD *)(v25 + 784) = 0;
    *(_QWORD *)(v25 + 1528) = 0;
    *(_QWORD *)(v25 + 1536) = 0;
    if ((v46 & 0xC) != 0)
      goto LABEL_62;
  }
  *(_QWORD *)(v25 + 880) = 0;
  *(_QWORD *)(v25 + 1568) = 0;
  *(_QWORD *)(v25 + 856) = 0;
  *(_QWORD *)(v25 + 864) = 0;
  *(_QWORD *)(v25 + 1544) = 0;
  *(_QWORD *)(v25 + 1552) = 0;
LABEL_62:
  if ((v43 & 0xA) != 0)
    v47 = (2 * ((v43 & 5) != 0)) | 4;
  else
    v47 = 2 * ((v43 & 5) != 0);
  *(_QWORD *)(v25 + 744) = v34 | (v43 << 15) & 0x40000 | v47 | (v43 << 15) & 0x8000 | (unint64_t)((v43 << 18) & 0x80000) | (v43 << 12) & 0x4000;
  if ((v43 & 5) != 0)
    *(_DWORD *)(v25 + 1276) = 2;
  if ((v43 & 0xA) != 0 && *(_BYTE *)(v28 + 2928))
    *(_DWORD *)(v25 + 1276) = 2;
  if ((v42 & 1) == 0)
    *(_BYTE *)(v25 + 1267) = 1;
  v48 = *(unsigned __int8 *)(a1 + 2033);
  if (*(_BYTE *)(a1 + 2033))
    v49 = a2;
  else
    v49 = 0;
  v50 = *(_QWORD *)(a1 + 2664);
  *(_BYTE *)(v50 + 1848) = v49;
  *(_WORD *)(a1 + 2304) = *(_WORD *)(a1 + 2306);
  if (!v48 || *(_BYTE *)(*(_QWORD *)(a1 + 1736) + 2921) || *(_BYTE *)(a1 + 2034))
  {
    *(_BYTE *)(v50 + 1261) = 1;
    if (**v18)
    {
      IOGPUDeviceTraceEvent();
      v50 = *(_QWORD *)(a1 + 2664);
    }
  }
  if (!*(_BYTE *)(a1 + 2383))
    *(_QWORD *)(v50 + 1296) = 0;
  v51 = *(_QWORD *)(a1 + 1736);
  v52 = *(_QWORD *)(v51 + 3584);
  v53 = *(_QWORD *)(v51 + 3592);
  v54 = *(_BYTE **)(v51 + 3344);
  v55 = *(_BYTE **)(v51 + 3352);
  v56 = v55 - v54;
  if (v55 == v54)
  {
    v57 = 0;
  }
  else
  {
    if ((v56 & 0x8000000000000000) != 0)
      abort();
    v57 = operator new(v55 - v54);
    memcpy(v57, v54, v56);
  }
  v58 = (_DWORD *)(v51 + 384);
  v59 = *(int **)(v52 + 8);
  v60 = (*(_QWORD *)(v52 + 16) - (_QWORD)v59) >> 2;
  if ((_DWORD)v60)
  {
    v61 = *(_DWORD **)(a1 + 1672);
    do
    {
      v62 = *v59++;
      *v61++ = v58[v62];
      LODWORD(v60) = v60 - 1;
    }
    while ((_DWORD)v60);
  }
  v63 = (_OWORD *)(v51 + 3496);
  v64 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v51 + 3496), *(int8x16_t *)(v51 + 3368)), veorq_s8(*(int8x16_t *)(v51 + 3528), *(int8x16_t *)(v51 + 3400))), vorrq_s8(veorq_s8(*(int8x16_t *)(v51 + 3512), *(int8x16_t *)(v51 + 3384)), veorq_s8(*(int8x16_t *)(v51 + 3544), *(int8x16_t *)(v51 + 3416))));
  *(int8x8_t *)v64.i8 = vorr_s8(*(int8x8_t *)v64.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
  if (*(_QWORD *)(v51 + 3568) ^ *(_QWORD *)(v51 + 3440) | (unsigned __int16)(*(_WORD *)(v51 + 3576) ^ *(_WORD *)(v51 + 3448)) | (unsigned __int16)(*(_WORD *)(v51 + 3578) ^ *(_WORD *)(v51 + 3450)) | (unint64_t)(unsigned __int16)(*(_WORD *)(v51 + 3580) ^ *(_WORD *)(v51 + 3452)) | v64.i32[0] | (*(_DWORD *)(v51 + 3560) ^ *(_DWORD *)(v51 + 3432)) | v64.i32[1])
  {
    if (*(_BYTE *)(v53 + 1888))
    {
      memcpy(__dst, v58, 0x5D8uLL);
      v65 = *(_BYTE **)(v51 + 3472);
      v66 = *(_BYTE **)(v51 + 3480);
      v67 = v66 - v65;
      if (v66 == v65)
      {
        v68 = 0;
      }
      else
      {
        if ((v67 & 0x8000000000000000) != 0)
          abort();
        v68 = operator new(v66 - v65);
        memcpy(v68, v65, v67);
      }
      *(_OWORD *)&__dst[127] = v63[1];
      *(_OWORD *)&__dst[129] = v63[2];
      *(_OWORD *)&__dst[131] = v63[3];
      *(_OWORD *)&__dst[133] = v63[4];
      *(_OWORD *)&__dst[125] = *v63;
      v73 = *(unsigned int **)(v53 + 8);
      v74 = (*(_QWORD *)(v53 + 16) - (_QWORD)v73) >> 2;
      if ((_DWORD)v74)
      {
        v75 = *(_DWORD **)(a1 + 1680);
        do
        {
          v76 = *v73++;
          *v75++ = *((_DWORD *)__dst + v76);
          LODWORD(v74) = v74 - 1;
        }
        while ((_DWORD)v74);
      }
      if (v68)
        operator delete(v68);
    }
    else
    {
      v69 = *(int **)(v53 + 8);
      v70 = (*(_QWORD *)(v53 + 16) - (_QWORD)v69) >> 2;
      if ((_DWORD)v70)
      {
        v71 = *(_DWORD **)(a1 + 1680);
        do
        {
          v72 = *v69++;
          *v71++ = v58[v72];
          LODWORD(v70) = v70 - 1;
        }
        while ((_DWORD)v70);
      }
    }
  }
  if (v57)
    operator delete(v57);
  v18 = (_DWORD **)MEMORY[0x24BE516B0];
  if (a4)
  {
    v77 = *(_QWORD *)(a1 + 1024);
    v78 = *(_QWORD *)(a1 + 1040) + v77;
    *(_QWORD *)(a1 + 1024) = v77 + 12;
    v79 = *(_QWORD *)(a1 + 1876);
    *(_DWORD *)(v77 + 8) = *(_DWORD *)(a1 + 1884);
    *(_QWORD *)v77 = v79;
    v80 = *(unint64_t **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v80 + 1;
    *v80 = __ROR8__(v78, 32) & 0xFFFFFFFC000000FFLL | 0x300;
    v81 = *(_DWORD **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v81 + 1;
    *v81 = *(_DWORD *)(a1 + 1888);
  }
  v82 = *(_QWORD *)(a1 + 1736);
  v83 = *(_QWORD *)(v82 + 8);
  if (v83)
  {
    v84 = *(_WORD *)(v82 + 328);
    if ((v84 & 1) != 0)
    {
      v86 = (_DWORD *)(a1 + 21256);
      if ((a2 & 1) != 0)
      {
        if ((v84 & 2) != 0)
          goto LABEL_129;
        v85 = *(_QWORD *)(v82 + 128);
        v87 = 1;
        goto LABEL_121;
      }
      v91 = 0;
LABEL_131:
      __dst[0] = 0;
      objc_msgSend(*(id *)a1, "getCurrentKernelCommandBufferStart:current:end:", __dst, 0, 0, a1 + 21256);
      v92 = *(_QWORD *)(a1 + 21312) + __dst[0];
      v93 = *(_QWORD *)(a1 + 21208);
      if (v93 && (v94 = *(_DWORD *)(v93 + 528)) != 0)
      {
        v95 = a3;
        v96 = ((2 * v94 + 7) & 0xFFFFFFF8) + 16;
        v119 = 0;
        v97 = AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(a1 + 1464), v96, 1u, &v119);
        *(_DWORD *)v97 = 0;
        *(_DWORD *)(v97 + 4) = v94;
        *(_QWORD *)(v97 + 8) = 0;
        v98 = v119;
        *(_DWORD *)(v92 + 8) = v96;
        *(_DWORD *)(v92 + 12) = v98;
        a3 = v95;
        AGX::FenceList::copyFences(v93, (unsigned __int16 *)(v97 + 16));
        if (v95)
        {
          for (i = *(_QWORD *)(v93 + 512); i; i &= i - 1)
            bzero(*(void **)(v93 + 8 * __clz(__rbit64(i))), 0x88uLL);
          *(_DWORD *)(v93 + 528) = 0;
        }
        v88 = 1;
      }
      else
      {
        v88 = 0;
        *(_QWORD *)(v92 + 8) = 0;
      }
      v90 = 0;
      v89 = 0;
      if (v91)
        goto LABEL_144;
      goto LABEL_143;
    }
  }
  v85 = *(_QWORD *)(v82 + 128);
  v86 = (_DWORD *)(a1 + 21256);
  if (!v85)
  {
    v87 = 0;
    if ((a2 & 1) != 0)
      goto LABEL_114;
    goto LABEL_126;
  }
  v87 = (*(unsigned __int16 *)(v82 + 328) >> 2) & 1;
  if ((a2 & 1) == 0)
  {
LABEL_126:
    v91 = 0;
    if (!v87)
      goto LABEL_141;
    goto LABEL_131;
  }
LABEL_114:
  if (!v83 || (*(_WORD *)(v82 + 328) & 2) == 0)
  {
LABEL_121:
    if (v85 && (*(_WORD *)(v82 + 328) & 8) != 0)
    {
      v91 = 1;
      if (v87)
        goto LABEL_131;
    }
    else
    {
      v91 = *(_BYTE *)(v82 + 2988) != 0;
      if ((v87 & 1) != 0)
        goto LABEL_131;
    }
LABEL_141:
    v88 = 0;
    v90 = *(_QWORD *)(a1 + 21208);
    if (v91)
    {
      v89 = 0;
      goto LABEL_144;
    }
LABEL_143:
    v89 = *(_QWORD *)(a1 + 21176);
    goto LABEL_144;
  }
  if ((v87 & 1) != 0)
  {
LABEL_129:
    v91 = 1;
    goto LABEL_131;
  }
  v88 = 0;
  v89 = 0;
  v90 = *(_QWORD *)(a1 + 21208);
LABEL_144:
  if (v88 | FenceEncoder::encode((AGX::SidebandBufferAllocator *)(a1 + 1464), a3, *(_QWORD *)(a1 + 2656), *(_QWORD *)(a1 + 21200), *(_QWORD *)(a1 + 21168), v90, v89))*(_QWORD *)(a1 + 21400) |= 0x100uLL;
  v100 = *(_QWORD *)(a1 + 1736);
  if (*(_DWORD *)(v100 + 2184) == 4 && *(_DWORD *)(v100 + 2180) == 0x4000)
    v102 = 0;
  else
    v102 = 2;
  v103 = *(_QWORD *)(a1 + 2664);
  *(_BYTE *)(v103 + 1641) = v102;
  *(_BYTE *)(v103 + 1642) = v102;
  *(_QWORD *)(v103 + 960) = 0;
  *(_DWORD *)(v103 + 452) = v86[2];
  *(_BYTE *)(v103 + 471) = 0;
  if (!*(_QWORD *)(a1 + 21272))
    goto LABEL_160;
  if (*(_QWORD *)(a1 + 1480))
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  v103 = *(_QWORD *)(a1 + 2664);
  v104 = *(void **)(a1 + 21272);
  if (v104 && (v106 = v86[6], v105 = v86[7], (v106 & v105) != 0xFFFFFFFF))
  {
    *(_DWORD *)(v103 + 476) = objc_msgSend(v104, "resourceID");
    *(_DWORD *)(v103 + 480) = v106;
    *(_DWORD *)(v103 + 484) = v105;
  }
  else
  {
LABEL_160:
    *(_DWORD *)(v103 + 484) = -1;
    *(_QWORD *)(v103 + 476) = -1;
  }
  v86[6] = -1;
  v107 = *(void **)(a1 + 21272);
  if (!v107 || (v109 = v86[8], v108 = v86[9], (v109 & v108) == 0xFFFFFFFF))
  {
    *(_QWORD *)(v103 + 1280) = -1;
    *(_DWORD *)(v103 + 1288) = -1;
  }
  else
  {
    *(_DWORD *)(v103 + 1280) = objc_msgSend(v107, "resourceID");
    *(_DWORD *)(v103 + 1284) = v109;
    *(_DWORD *)(v103 + 1288) = v108;
  }
  v86[8] = -1;
  v110 = *(_QWORD *)(a1 + 2664);
  *(_BYTE *)(v110 + 1628) = *(_BYTE *)(a1 + 1512);
  *(_DWORD *)(v110 + 1624) = *(_DWORD *)(a1 + 1508);
  *(_QWORD *)(v110 + 1632) = *(_QWORD *)(a1 + 1516);
  *(_QWORD *)(v110 + 168) = 0x3A0012006B0003;
  *(_DWORD *)(v110 + 176) = 1;
  *(_BYTE *)(v110 + 1271) = 0;
  *(_BYTE *)(v110 + 470) = 0;
LABEL_166:
  *(_BYTE *)(a1 + 2032) = 0;
  if (**v18)
    IOGPUDeviceTraceEvent();
  v111 = 0;
  v112 = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 1552) - *(_QWORD *)(a1 + 1568) + 24) = 0;
  v113 = (uint64_t *)(a1 + 16);
  v114 = a1 + 56;
  do
  {
    v115 = *v113;
    if (*(_DWORD *)(*v113 + v112 + 24))
    {
      v116 = (_QWORD *)(v114 + v112);
      if (*(_QWORD *)(v114 + v112 + 8))
      {
        v117 = *(_QWORD *)(a1 + 40);
        if (*(_DWORD *)(a1 + 1440))
          AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1 + 16, (_QWORD *)(v117 + v111));
        if (*v116 == *(_QWORD *)(v117 + v111 + 16) - (*(_QWORD *)(v115 + v112 + 16) + *(_QWORD *)(v115 + v112 + 8)))
          *(_QWORD *)(v117 + v111 + 24) = v116[1];
      }
    }
    v112 += 32;
    v111 += 64;
  }
  while (v112 != 1088);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 1552);
  result = IOGPUMetalCommandBufferStorageEndSegment();
  *(_BYTE *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 2656) = 0;
  *(_QWORD *)(a1 + 2664) = 0;
  return result;
}

void sub_232D04718(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginRenderPass(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  char v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int8x8_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t BGOProgramVariant;
  uint64_t v54;
  uint64_t v55;
  int32x4_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  int32x4_t *v78;
  unsigned int v79;
  uint64_t v80;
  int8x16_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint32x4_t v87;
  uint32x4_t v88;
  unsigned int v89;
  uint32x4_t v90;
  uint32x4_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t result;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  void *__src;
  _DWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _OWORD v113[14];
  uint64_t v114;
  _OWORD __dst[27];
  _OWORD v116[14];
  uint64_t v117;

  v2 = (_DWORD *)(a1 + 21160);
  v3 = *(_QWORD *)(a1 + 1736);
  v4 = *(_BYTE *)(v3 + 2989);
  if (*(_BYTE *)(a1 + 2048))
    *(_BYTE *)(a1 + 2048) = 0;
  *(_DWORD *)(a1 + 21264) = 0;
  *(_DWORD *)(a1 + 1540) = 0;
  *(_BYTE *)(a1 + 1544) = 0;
  if (*(_BYTE *)(a1 + 2033)
    && (*(_QWORD *)(v3 + 8) && (*(_WORD *)(v3 + 328) & 1) != 0
     || *(_QWORD *)(v3 + 128) && (*(_WORD *)(v3 + 328) & 4) != 0))
  {
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeScratchRender((_QWORD *)a1, 0, 0);
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v5 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(a1, 2176);
  *(_DWORD *)(a1 + 2584) = 0;
  *(_BYTE *)(a1 + 2608) = 0;
  *(_DWORD *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2640) = 0;
  v6 = *(_QWORD *)(a1 + 384);
  if (!v6)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0))
      goto LABEL_107;
    v6 = *(_QWORD *)(a1 + 384);
  }
  v7 = v6 + 63;
  if ((unint64_t)(v6 + 63) <= *(_QWORD *)(a1 + 376))
  {
LABEL_13:
    *(_QWORD *)(a1 + 392) = v7;
    goto LABEL_14;
  }
  v103 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0);
  v6 = *(_QWORD *)(a1 + 384);
  if (v103)
  {
    v7 = v6 + 63;
    if ((unint64_t)(v6 + 63) > *(_QWORD *)(a1 + 376))
      goto LABEL_107;
    goto LABEL_13;
  }
LABEL_14:
  v8 = (v6 + 31) & 0xFFFFFFFFFFFFFFE0;
  v9 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 384) = v8 + 32;
  v10 = *(unint64_t **)(a1 + 64);
  if ((unint64_t)(v10 + 6) > *(_QWORD *)(a1 + 56))
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 0, 0))
    {
      v104 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)(v104 + 48) > *(_QWORD *)(a1 + 56))
        goto LABEL_107;
      *(_QWORD *)(a1 + 72) = v104 + 48;
      *v10 = __ROR8__(*(_QWORD *)(a1 + 80) + v104, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v10 + 6;
  }
  v11 = *(_QWORD *)(a1 + 1024) + 108;
  if (v11 <= *(_QWORD *)(a1 + 1016))
  {
LABEL_17:
    *(_QWORD *)(a1 + 1032) = v11;
    goto LABEL_18;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 30, 0))
  {
    v11 = *(_QWORD *)(a1 + 1024) + 108;
    if (v11 > *(_QWORD *)(a1 + 1016))
      goto LABEL_107;
    goto LABEL_17;
  }
LABEL_18:
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)(v5 + 5) = 0x100000858;
  *(_QWORD *)(a1 + 2656) = v5;
  v12 = v5 + 8;
  *(_QWORD *)(a1 + 2664) = v5 + 8;
  bzero(v5 + 8, 0x858uLL);
  v13 = *(_QWORD *)(a1 + 1736);
  *(_QWORD *)&v14 = *(_QWORD *)(v13 + 2180);
  v15 = *(_DWORD *)(v13 + 2972);
  v16 = *(_DWORD *)(v13 + 2936);
  *((_QWORD *)&v14 + 1) = *(_QWORD *)(v13 + 2192);
  v17 = *(_OWORD *)(v13 + 2200);
  v18 = *(_OWORD *)(v13 + 2216);
  v19 = *(_OWORD *)(v13 + 2232);
  v20 = *(_QWORD *)(v13 + 2248);
  v5[442] = *(_DWORD *)(v13 + 2176);
  *(_OWORD *)(v5 + 443) = v14;
  *(_OWORD *)(v5 + 447) = v17;
  *(_OWORD *)(v5 + 451) = v18;
  *(_OWORD *)(v5 + 455) = v19;
  *(_QWORD *)(v5 + 459) = v20;
  v5[461] = v15;
  *((_QWORD *)v5 + 231) = 0;
  v5[464] = v16;
  *(_QWORD *)(v5 + 465) = 0;
  *((_BYTE *)v5 + 1868) = 0;
  v21 = *(_DWORD *)(*(_QWORD *)(a1 + 1736) + 3664);
  if (v21 > *(_DWORD *)(a1 + 2616))
  {
    *(_DWORD *)(a1 + 2616) = v21;
    *(_BYTE *)(a1 + 2640) = 1;
  }
  else if (!*(_BYTE *)(a1 + 2640))
  {
    if (!*(_QWORD *)(a1 + 1960))
      goto LABEL_21;
LABEL_95:
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginRenderPass(BOOL)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  }
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFragmentUSCSpillBuffer(a1);
  if (*(_QWORD *)(a1 + 1960))
    goto LABEL_95;
LABEL_21:
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64);
  *((_QWORD *)v5 + 59) = v8 + v9;
  v5[120] = 4;
  *((_QWORD *)v5 + 94) = *(_QWORD *)(a1 + 336) + *(_QWORD *)(a1 + 320);
  v22 = *(_QWORD *)(a1 + 288);
  if (!v22)
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
    v22 = *(_QWORD *)(a1 + 288);
  }
  *((_QWORD *)v5 + 95) = *(_QWORD *)(a1 + 304) + v22;
  *((_QWORD *)v5 + 210) = 0;
  v23 = *(_QWORD *)(a1 + 1736);
  v24 = *(_QWORD *)(v23 + 2944);
  v25 = (int *)MEMORY[0x24BE51650];
  if (v24)
    *((_QWORD *)v5 + 166) = *(_QWORD *)(v24 + (int)*MEMORY[0x24BE51650] + 8);
  *((_BYTE *)v5 + 499) = *(_BYTE *)(v23 + 2931);
  *(_BYTE *)(*(_QWORD *)(a1 + 2664) + 462) = 0;
  *((_BYTE *)v5 + 496) = v4;
  *((_BYTE *)v5 + 1612) = v4;
  if (objc_msgSend(*(id *)a1, "skipRender"))
  {
    *((_BYTE *)v5 + 492) = 1;
    *((_BYTE *)v5 + 1294) = 1;
  }
  v5[122] = 0;
  v5[412] = 0;
  v5[130] = 0;
  v5[327] = 0;
  AGX::G9::ContextSwitcher::setupRenderCommand(*(_QWORD *)(a1 + 1624), *(_QWORD *)(a1 + 1632), (uint64_t)(v5 + 8), *(_QWORD *)(a1 + 1496), (_QWORD *)(a1 + 16));
  v26 = *(_QWORD *)(a1 + 1496);
  v27 = *(_QWORD *)(a1 + 1736);
  v28 = *(unsigned __int8 *)(a1 + 2033);
  v30 = *(_QWORD *)(a1 + 216);
  v29 = *(_QWORD *)(a1 + 224);
  v31 = v29 + 32;
  if (v29 + 32 <= v30)
  {
LABEL_28:
    *(_QWORD *)(a1 + 232) = v31;
    goto LABEL_29;
  }
  v105 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
  v30 = *(_QWORD *)(a1 + 216);
  v29 = *(_QWORD *)(a1 + 224);
  if (v105)
  {
    v31 = v29 + 32;
    if (v29 + 32 > v30)
      goto LABEL_107;
    goto LABEL_28;
  }
LABEL_29:
  v32 = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(v29 + 16) = -754974720;
  v33 = v32 + v29;
  v34 = v32 + v29 + 16;
  v35 = v29 + 32;
  *(_QWORD *)(a1 + 224) = v29 + 32;
  *(_DWORD *)(a1 + 1708) = 537001985;
  *(_DWORD *)(a1 + 1712) = (v33 + 15) & 0xFFFFFFF0;
  *(_DWORD *)(a1 + 1716) = (v34 + 15) & 0xFFFFFFF0;
  v36.i32[0] = 34;
  v36.i32[1] = v33 & 0xFFFFFFF0;
  *(int8x8_t *)(a1 + 1664) = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 1664), (int8x8_t)0xFFFFFF800), v36);
  v37 = v29 + 64;
  v112 = (_QWORD *)(a1 + 16);
  v110 = v2;
  if (v37 > v30)
  {
    v106 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
    v35 = *(_QWORD *)(a1 + 224);
    if (!v106)
      goto LABEL_31;
    v37 = v35 + 32;
    if ((unint64_t)(v35 + 32) > *(_QWORD *)(a1 + 216))
      goto LABEL_107;
  }
  *(_QWORD *)(a1 + 232) = v37;
LABEL_31:
  v111 = a1 + 1656;
  v38 = *(_DWORD *)(a1 + 240);
  *(_QWORD *)(v35 + 16) = 0xD3000000A0800010;
  *(_QWORD *)(a1 + 224) = v35 + 32;
  v12[92] = 603979905;
  v12[93] = (v38 + v35 + 15) & 0xFFFFFFF0 | 5;
  v12[94] = (v38 + v35 + 16 + 15) & 0xFFFFFFF0;
  v39 = *(_QWORD *)(a1 + 1688);
  *((_QWORD *)v12 + 1) = *(_QWORD *)(v39 + 24);
  v40 = *(_DWORD *)(v39 + 16);
  do
  {
    v40 &= ~(1 << __clz(__rbit32(v40)));
    IOGPUResourceListAddResource();
  }
  while (v40);
  v41 = *(_QWORD **)(v27 + 3128);
  if (!v41)
    v41 = *(_QWORD **)(v27 + 3120);
  v42 = *(_OWORD *)(v27 + 2432);
  v43 = *(_OWORD *)(v27 + 2464);
  v116[12] = *(_OWORD *)(v27 + 2448);
  v116[13] = v43;
  v117 = *(_QWORD *)(v27 + 2480);
  v44 = *(_OWORD *)(v27 + 2368);
  v45 = *(_OWORD *)(v27 + 2400);
  v116[8] = *(_OWORD *)(v27 + 2384);
  v116[9] = v45;
  v116[10] = *(_OWORD *)(v27 + 2416);
  v116[11] = v42;
  v46 = *(_OWORD *)(v27 + 2304);
  v47 = *(_OWORD *)(v27 + 2336);
  v116[4] = *(_OWORD *)(v27 + 2320);
  v116[5] = v47;
  v116[6] = *(_OWORD *)(v27 + 2352);
  v116[7] = v44;
  v48 = *(_OWORD *)(v27 + 2272);
  v116[0] = *(_OWORD *)(v27 + 2256);
  v116[1] = v48;
  v116[2] = *(_OWORD *)(v27 + 2288);
  v116[3] = v46;
  __src = (void *)(v27 + 2488);
  v49 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitBackgroundObjectArguments(v26, v112, (uint64_t)v41, (uint64_t)v116, v27 + 2488);
  v50 = v41[352];
  v51 = v41[353];
  *((_QWORD *)v12 + 163) = v41[351];
  *((_QWORD *)v12 + 164) = v50;
  *((_QWORD *)v12 + 165) = v49;
  *((_QWORD *)v12 + 166) = v51;
  if (v28)
    v52 = v27 + 3152;
  else
    v52 = v27 + 3240;
  BGOProgramVariant = AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBGOProgramVariant((_QWORD *)v27, v28 == 0);
  v54 = BGOProgramVariant;
  v56 = *(int32x4_t *)(v52 + 40);
  v55 = v52 + 40;
  v57 = *(_QWORD *)(v55 + 40);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v56, *(int32x4_t *)(v27 + 3280)), (int16x8_t)vceqq_s32(*(int32x4_t *)(v55 + 16), *(int32x4_t *)(v27 + 3296)))))) & 1) != 0|| *(_DWORD *)(v55 + 32) != *(_DWORD *)(v27 + 3312)|| v57 != *(_QWORD *)(v27 + 3320))
  {
    v58 = (_OWORD *)(v27 + 2256);
    if (*(_BYTE *)(BGOProgramVariant + 2848))
    {
      v59 = BGOProgramVariant;
      memcpy(__dst, __src, sizeof(__dst));
      v60 = *(_OWORD *)(v55 + 16);
      __dst[22] = *(_OWORD *)v55;
      __dst[23] = v60;
      *(_QWORD *)&__dst[24] = *(_QWORD *)(v55 + 32);
      *((_QWORD *)&__dst[24] + 1) = v57;
      v61 = *(_OWORD *)(v27 + 2464);
      v113[12] = *(_OWORD *)(v27 + 2448);
      v113[13] = v61;
      v114 = *(_QWORD *)(v27 + 2480);
      v62 = *(_OWORD *)(v27 + 2400);
      v113[8] = *(_OWORD *)(v27 + 2384);
      v113[9] = v62;
      v63 = *(_OWORD *)(v27 + 2432);
      v113[10] = *(_OWORD *)(v27 + 2416);
      v113[11] = v63;
      v64 = *(_OWORD *)(v27 + 2336);
      v113[4] = *(_OWORD *)(v27 + 2320);
      v113[5] = v64;
      v65 = *(_OWORD *)(v27 + 2368);
      v113[6] = *(_OWORD *)(v27 + 2352);
      v113[7] = v65;
      v66 = *(_OWORD *)(v27 + 2272);
      v113[0] = *v58;
      v113[1] = v66;
      v67 = *(_OWORD *)(v27 + 2304);
      v113[2] = *(_OWORD *)(v27 + 2288);
      v113[3] = v67;
      v68 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitBackgroundObjectArguments(v26, v112, v59, (uint64_t)v113, (uint64_t)__dst);
      v54 = v59;
    }
    else
    {
      v69 = *(_OWORD *)(v27 + 2464);
      __dst[12] = *(_OWORD *)(v27 + 2448);
      __dst[13] = v69;
      *(_QWORD *)&__dst[14] = *(_QWORD *)(v27 + 2480);
      v70 = *(_OWORD *)(v27 + 2400);
      __dst[8] = *(_OWORD *)(v27 + 2384);
      __dst[9] = v70;
      v71 = *(_OWORD *)(v27 + 2432);
      __dst[10] = *(_OWORD *)(v27 + 2416);
      __dst[11] = v71;
      v72 = *(_OWORD *)(v27 + 2336);
      __dst[4] = *(_OWORD *)(v27 + 2320);
      __dst[5] = v72;
      v73 = *(_OWORD *)(v27 + 2368);
      __dst[6] = *(_OWORD *)(v27 + 2352);
      __dst[7] = v73;
      v74 = *(_OWORD *)(v27 + 2272);
      __dst[0] = *v58;
      __dst[1] = v74;
      v75 = *(_OWORD *)(v27 + 2304);
      __dst[2] = *(_OWORD *)(v27 + 2288);
      __dst[3] = v75;
      v76 = BGOProgramVariant;
      v68 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitBackgroundObjectArguments(v26, v112, BGOProgramVariant, (uint64_t)__dst, (uint64_t)__src);
      v54 = v76;
    }
    v49 = v68;
  }
  v77 = *(_QWORD *)(v54 + 2824);
  *((_OWORD *)v12 + 39) = *(_OWORD *)(v54 + 2808);
  *((_QWORD *)v12 + 80) = v49;
  *((_QWORD *)v12 + 81) = v77;
  v78 = *(int32x4_t **)(v27 + 3584);
  v79 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitEndOfTileArgumentsEarly(v26, v112, v78, (_QWORD *)(a1 + 1672));
  v12[338] = v79;
  v12[339] = v78[69].i64[1];
  v12[340] = v78[70].i32[2];
  v80 = *(_QWORD *)(v27 + 3592);
  v81 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v27 + 3496), *(int8x16_t *)(v27 + 3368)), veorq_s8(*(int8x16_t *)(v27 + 3528), *(int8x16_t *)(v27 + 3400))), vorrq_s8(veorq_s8(*(int8x16_t *)(v27 + 3512), *(int8x16_t *)(v27 + 3384)), veorq_s8(*(int8x16_t *)(v27 + 3544), *(int8x16_t *)(v27 + 3416))));
  *(int8x8_t *)v81.i8 = vorr_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL));
  if (*(_QWORD *)(v27 + 3568) ^ *(_QWORD *)(v27 + 3440) | (unsigned __int16)(*(_WORD *)(v27 + 3576) ^ *(_WORD *)(v27 + 3448)) | (unsigned __int16)(*(_WORD *)(v27 + 3578) ^ *(_WORD *)(v27 + 3450)) | (unint64_t)(unsigned __int16)(*(_WORD *)(v27 + 3580) ^ *(_WORD *)(v27 + 3452)) | v81.i32[0] | (*(_DWORD *)(v27 + 3560) ^ *(_DWORD *)(v27 + 3432)) | v81.i32[1])
    v79 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitEndOfTileArgumentsEarly(v26, v112, *(int32x4_t **)(v27 + 3592), (_QWORD *)(a1 + 1680));
  v12[168] = v79;
  v12[169] = *(_QWORD *)(v80 + 1112);
  v12[170] = *(_DWORD *)(v80 + 1128);
  if (*(_BYTE *)(a1 + 2608))
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindVertexUSCSpillBuffer(a1);
  if (*((_BYTE *)v12 + 1579) && *(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  *(_QWORD *)(a1 + 2240) = -1;
  *(_QWORD *)(a1 + 2232) = -1;
  *((_QWORD *)v12 + 118) = 0;
  v82 = *(unsigned int *)(a1 + 2268);
  v83 = *(unint64_t **)(a1 + 320);
  if ((unint64_t)&v83[v82] > *(_QWORD *)(a1 + 312))
  {
    v107 = AGX::DataBufferAllocator<34ul>::growNoInline(v112, 8, 1);
    v83 = *(unint64_t **)(a1 + 320);
    if (v107)
    {
      if ((unint64_t)&v83[v82] > *(_QWORD *)(a1 + 312))
        goto LABEL_107;
      *(_QWORD *)(a1 + 328) = &v83[v82];
      *(_QWORD *)(*(_QWORD *)(a1 + 2664) + 720) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 512)
                                                  + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 536)
                                                  - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 520);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 328) = &v83[v82];
  }
  *(_QWORD *)(a1 + 2296) = (char *)v83 + *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 320) = v83 + 1;
  *(_DWORD *)(a1 + 2292) = ((unint64_t)v83 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 536)) >> 3;
  *v83 = (*(_DWORD *)(a1 + 2252) | (*(_DWORD *)(a1 + 2248) << 16)) | ((unint64_t)(*(_DWORD *)(a1 + 2260) | (*(_DWORD *)(a1 + 2256) << 16)) << 32);
  *(_QWORD *)(a1 + 21152) |= 0x40200000000000uLL;
  v84 = *(_QWORD *)(a1 + 1736);
  if (*(_BYTE *)(a1 + 2382) && *(_QWORD *)(v84 + 2944))
  {
    v85 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5184) + 2208);
    do
    {
      v85 &= ~(1 << __clz(__rbit32(v85)));
      IOGPUResourceListAddResource();
    }
    while (v85);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::reserveVisibilityClearDatabufferSpace((_QWORD *)a1);
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitVisibilityClear(a1);
    v84 = *(_QWORD *)(a1 + 1736);
  }
  if (*(_QWORD *)(v84 + 2944))
    *v110 |= 2u;
  v86 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 6856) + 8) + 2224);
  do
  {
    v86 &= ~(1 << __clz(__rbit32(v86)));
    IOGPUResourceListAddResource();
  }
  while (v86);
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(v111, v112, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 6856) + 8), v87, v88);
  *(_DWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2408) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 2416) = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitBatchingDraw(a1);
  *(_QWORD *)(a1 + 2432) = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64);
  v89 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5448) + 8) + 2224);
  do
  {
    v89 &= ~(1 << __clz(__rbit32(v89)));
    IOGPUResourceListAddResource();
  }
  while (v89);
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(v111, v112, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5448) + 8), v90, v91);
  *(_DWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 2480) = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitBatchingDraw(a1);
  *(_QWORD *)(a1 + 2496) = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 64);
  v92 = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  *(_DWORD *)(a1 + 2396) = *(_DWORD *)(v92 + 4504);
  v93 = *(_QWORD **)(v92 + 5016);
  if (v93)
  {
    do
    {
      IOGPUResourceListAddResource();
      v93 = (_QWORD *)*v93;
    }
    while (v93);
    v92 = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  }
  v94 = *(_QWORD **)(v92 + 4848);
  if (v94)
  {
    do
    {
      IOGPUResourceListAddResource();
      v94 = (_QWORD *)*v94;
    }
    while (v94);
    v92 = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  }
  v95 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 6840) + 8) + 2224);
  do
  {
    v95 &= ~(1 << __clz(__rbit32(v95)));
    IOGPUResourceListAddResource();
  }
  while (v95);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addGPUResources(*(_QWORD *)(a1 + 1736), *(_QWORD *)(a1 + 1496), 63);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520))
  {
    v96 = *(_QWORD *)(a1 + 1552) - *(_QWORD *)(a1 + 1568);
    *(_DWORD *)(v96 + 12) = 1;
    if ((*(_BYTE *)(v96 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)a1 + 688) = 1;
  }
  *(_QWORD *)(a1 + 2388) = 0;
  *(_BYTE *)(a1 + 2400) = 0;
  v97 = *(_QWORD *)(a1 + 160);
  v98 = v97 + 103;
  if ((unint64_t)(v97 + 103) <= *(_QWORD *)(a1 + 152))
    goto LABEL_77;
  v108 = AGX::DataBufferAllocator<34ul>::growNoInline(v112, 3, 0);
  v97 = *(_QWORD *)(a1 + 160);
  if (v108)
  {
    v98 = v97 + 103;
    if ((unint64_t)(v97 + 103) <= *(_QWORD *)(a1 + 152))
    {
LABEL_77:
      *(_QWORD *)(a1 + 168) = v98;
      goto LABEL_78;
    }
LABEL_107:
    abort();
  }
LABEL_78:
  v99 = (v97 + 15) & 0xFFFFFFFFFFFFFFF0;
  v100 = v99 + *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 21344) = v100;
  *(_QWORD *)(a1 + 160) = v99 + 88;
  *(_QWORD *)(a1 + 21352) = v99;
  *(_QWORD *)(a1 + 3672) = v100;
  *(_QWORD *)(a1 + 6872) = v100;
  if (*(_QWORD *)(a1 + 1960))
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setPerEncoderIndirectionTable(unsigned long long)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  v101 = objc_msgSend(*(id *)a1, "privateData");
  result = objc_msgSend(*(id *)a1, "privateDataOffset");
  if (v101)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 21352) + 80) = *(_QWORD *)(v101 + *v25 + 8) + result;
    return IOGPUResourceListAddResource();
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindVertexUSCSpillBuffer(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];

  result = AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(a1 + 2584, (_QWORD *)(*(_QWORD *)(a1 + 2664) + 184), *(_QWORD *)(a1 + 1488), (uint64_t)v2);
  if ((_DWORD)result)
    return IOGPUResourceListAddResource();
  return result;
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindAllResources(BOOL)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFragmentUSCSpillBuffer(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];

  result = AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(a1 + 2616, (_QWORD *)(*(_QWORD *)(a1 + 2664) + 1000), *(_QWORD *)(a1 + 1488), (uint64_t)v2);
  if ((_DWORD)result)
    return IOGPUResourceListAddResource();
  return result;
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeScratchRender(_QWORD *a1, unsigned int a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t BGOProgramVariant;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int32x4_t *EOTProgramVariant;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int *v27;
  unint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int *v42;
  void *v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _DWORD v84[156];
  int v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  _OWORD v90[14];
  uint64_t v91;
  __int128 v92;
  _BYTE v93[32];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v6 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand((uint64_t)a1, 1064);
  if (objc_msgSend((id)*a1, "skipRender"))
  {
    v55 = a1[194] - a1[196];
    *(_DWORD *)(v55 + 12) = 1;
    if ((*(_BYTE *)(v55 + 8) & 4) != 0)
      **(_BYTE **)(*a1 + 688) = 1;
  }
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)(v6 + 5) = 0x200000400;
  if (a3)
  {
    v7 = a1[2647];
    if (v7 && (v8 = *(_DWORD *)(v7 + 528)) != 0)
    {
      v9 = ((2 * v8 + 7) & 0xFFFFFFF8) + 16;
      *(_DWORD *)v57 = 0;
      v10 = AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(a1 + 183), v9, 1u, (unsigned int *)v57);
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 12) = v8;
      v11 = *(_DWORD *)v57;
      v6[2] = v9;
      v6[3] = v11;
      AGX::FenceList::copyFences(v7, (unsigned __int16 *)(v10 + 16));
      a1[2675] |= 0x100uLL;
    }
    else
    {
      v6[2] = 0;
    }
  }
  bzero(v6 + 8, 0x400uLL);
  v6[262] = 2;
  v56 = a1[187];
  v12 = a1[217];
  if (a2)
    v13 = 10;
  else
    v13 = 5;
  if (a2)
    v14 = 4;
  else
    v14 = 3;
  BGOProgramVariant = AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBGOProgramVariant((_QWORD *)a1[217], v14);
  bzero(&v92, 0xE8uLL);
  *(_QWORD *)v57 = -1;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  *(_OWORD *)&v57[8] = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  *(_QWORD *)&v82 = 0;
  bzero(v57, 0x1B0uLL);
  *(_QWORD *)&v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 336) + 808) + 6216);
  if (*(_QWORD *)(v12 + 8) && ((unsigned __int16)v13 & *(_WORD *)(v12 + 328) & 3) != 0)
  {
    v16 = v12 + 48 * a2;
    v92 = *(_OWORD *)(v16 + 32);
    *(_QWORD *)v93 = *(_QWORD *)(v16 + 48);
    v65 = xmmword_232D73D10;
    v66[0] = 0;
  }
  v17 = a1 + 2;
  if (*(_QWORD *)(v12 + 128) && ((unsigned __int16)v13 & *(_WORD *)(v12 + 328) & 0xC) != 0)
  {
    v18 = v12 + 48 * a2;
    *(_OWORD *)&v93[8] = *(_OWORD *)(v18 + 152);
    *(_QWORD *)&v93[24] = *(_QWORD *)(v18 + 168);
    *(_OWORD *)&v66[1] = xmmword_232D73D10;
    v66[3] = 0;
  }
  v90[12] = v103;
  v90[13] = v104;
  v91 = v105;
  v90[8] = v99;
  v90[9] = v100;
  v90[11] = v102;
  v90[10] = v101;
  v90[4] = v95;
  v90[5] = v96;
  v90[7] = v98;
  v90[6] = v97;
  v90[0] = v92;
  v90[1] = *(_OWORD *)v93;
  v90[3] = v94;
  v90[2] = *(_OWORD *)&v93[16];
  v19 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitBackgroundObjectArguments(v56, a1 + 2, BGOProgramVariant, (uint64_t)v90, (uint64_t)v57);
  v20 = *(_QWORD *)(BGOProgramVariant + 2824);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(BGOProgramVariant + 2808);
  *((_QWORD *)v6 + 22) = v19;
  *((_QWORD *)v6 + 23) = v20;
  EOTProgramVariant = (int32x4_t *)AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getEOTProgramVariant(v12, v14);
  *(_QWORD *)&v92 = 0;
  *(_OWORD *)v57 = xmmword_232D73730;
  *(_QWORD *)&v57[16] = 0xDEADBEEFBAADC0DELL;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v83 = 0;
  bzero(v84, 0x410uLL);
  if (*(_QWORD *)(v12 + 8))
  {
    v22 = a2;
    if (((unsigned __int16)v13 & *(_WORD *)(v12 + 328) & 3) != 0)
    {
      v23 = v12 + 48 * a2;
      v86 = *(_OWORD *)(v23 + 56);
      v87 = *(_QWORD *)(v23 + 72);
      v84[0] = 2
             * ((*(_DWORD *)(v12 + 40 * a2 + 248) >> 12)
              % (*(_WORD *)(v12 + 40 * a2 + 282) & 0x1FFu));
      v85 = 1;
      v24 = 3;
    }
    else
    {
      v24 = 2;
    }
  }
  else
  {
    v24 = 2;
    v22 = a2;
  }
  if (*(_QWORD *)(v12 + 128) && ((unsigned __int16)v13 & *(_WORD *)(v12 + 328) & 0xC) != 0)
  {
    v25 = v12 + 48 * v22;
    v88 = *(_OWORD *)(v25 + 176);
    v89 = *(_QWORD *)(v25 + 192);
    v84[1] = 2
           * ((*(_DWORD *)(v12 + 40 * v22 + 252) >> 12)
            % (*(_WORD *)(v12 + 40 * v22 + 282) & 0x1FFu));
    v85 = v24;
  }
  v26 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitEndOfTileArgumentsEarly(v56, a1 + 2, EOTProgramVariant, &v92);
  v27 = (int *)EOTProgramVariant->i64[1];
  v28 = (unint64_t)(EOTProgramVariant[1].i64[0] - (_QWORD)v27) >> 2;
  if ((_DWORD)v28)
  {
    v29 = (_DWORD *)v92;
    do
    {
      v30 = *v27++;
      *v29++ = *(_DWORD *)&v57[4 * v30];
      LODWORD(v28) = v28 - 1;
    }
    while ((_DWORD)v28);
  }
  v6[52] = v26;
  v6[53] = EOTProgramVariant[69].i64[1];
  v6[54] = EOTProgramVariant[70].i32[2];
  v31 = a1[217];
  v32 = *(_DWORD *)(v31 + 3676);
  if (v32)
  {
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindScratchBgoEotFragmentUSCSpillBuffer((uint64_t)a1, v32);
    v31 = a1[217];
  }
  v33 = *(_DWORD *)(v31 + 2176);
  *(_QWORD *)&v34 = *(_QWORD *)(v31 + 2180);
  *((_QWORD *)&v34 + 1) = *(_QWORD *)(v31 + 2192);
  v35 = *(_DWORD *)(v31 + 2972);
  v36 = *(_OWORD *)(v31 + 2200);
  v37 = *(_OWORD *)(v31 + 2216);
  v38 = *(_OWORD *)(v31 + 2232);
  v39 = *(_QWORD *)(v31 + 2248);
  *((_QWORD *)v6 + 119) = 0;
  v6[240] = v33;
  *(_OWORD *)(v6 + 241) = v34;
  *(_OWORD *)(v6 + 245) = v36;
  *(_OWORD *)(v6 + 249) = v37;
  *(_OWORD *)(v6 + 253) = v38;
  *(_QWORD *)(v6 + 257) = v39;
  v6[259] = v35;
  *((_QWORD *)v6 + 130) = 0;
  v40 = a1[217];
  v6[198] = *(_DWORD *)(v40 + 2924);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 336) + 808) + 6684) < 0xB0000u
    || *(_DWORD *)(v40 + 3636)
    || *(_DWORD *)(v40 + 3632))
  {
    v41 = 768;
  }
  else
  {
    v41 = 256;
  }
  v42 = (int *)(a1 + 2661);
  v6[197] = v41;
  *((_BYTE *)v6 + 806) = *(_DWORD *)(v40 + 2956) != 0;
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addAPIResources(v40, a1[185], a1[186]);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addGPUResources(a1[217], a1[187], 63);
  if (!a1[2659])
  {
    v44 = (_QWORD *)((char *)a1 + 1516);
LABEL_44:
    *((_QWORD *)v6 + 102) = -1;
    v6[206] = -1;
    goto LABEL_45;
  }
  if (a1[185])
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  v43 = (void *)a1[2659];
  v44 = (_QWORD *)((char *)a1 + 1516);
  if (!v43)
    goto LABEL_44;
  v46 = *v42;
  v45 = *((_DWORD *)a1 + 5323);
  if ((*v42 & v45) == 0xFFFFFFFF)
    goto LABEL_44;
  v6[204] = objc_msgSend(v43, "resourceID");
  v6[205] = v46;
  v6[206] = v45;
LABEL_45:
  *v42 = -1;
  *((_BYTE *)v6 + 844) = *((_BYTE *)a1 + 1512);
  v6[210] = *((_DWORD *)a1 + 377);
  *((_QWORD *)v6 + 106) = *v44;
  *((_QWORD *)v6 + 104) = 0;
  if (!*(_QWORD *)(a1[187] + 520))
  {
    v47 = a1[194] - a1[196];
    *(_DWORD *)(v47 + 12) = 1;
    if ((*(_BYTE *)(v47 + 8) & 4) != 0)
      **(_BYTE **)(*a1 + 688) = 1;
  }
  if (!v22)
  {
    *(_QWORD *)v57 = 0;
    objc_msgSend((id)*a1, "getCurrentKernelCommandBufferStart:current:end:", v57, 0, 0);
    a1[2664] = (char *)v6 - *(_QWORD *)v57;
  }
  v48 = 0;
  v49 = 0;
  *(_DWORD *)(a1[194] - a1[196] + 24) = 0;
  v50 = a1 + 7;
  do
  {
    v51 = *v17;
    if (*(_DWORD *)(*v17 + v49 * 8 + 24))
    {
      v52 = &v50[v49];
      if (v50[v49 + 1])
      {
        v53 = a1[5];
        if (*((_DWORD *)a1 + 360))
          AGX::DataBufferAllocator<34ul>::doBufferRandomization((uint64_t)(a1 + 2), (_QWORD *)(v53 + v48));
        if (*v52 == *(_QWORD *)(v53 + v48 + 16) - (*(_QWORD *)(v51 + v49 * 8 + 16) + *(_QWORD *)(v51 + v49 * 8 + 8)))
          *(_QWORD *)(v53 + v48 + 24) = v52[1];
      }
    }
    v49 += 4;
    v48 += 64;
  }
  while (v49 != 136);
  *(_QWORD *)(a1[1] + 48) = a1[194];
  result = IOGPUMetalCommandBufferStorageEndSegment();
  *((_BYTE *)a1 + 1504) = 0;
  return result;
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginRenderPass(BOOL)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setPerEncoderIndirectionTable(unsigned long long)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindScratchBgoEotFragmentUSCSpillBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 2616;
  if (*(_DWORD *)(a1 + 2616) < a2)
  {
    *(_DWORD *)(a1 + 2616) = a2;
    *(_BYTE *)(a1 + 2640) = 1;
  }
  result = AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(v3, (_QWORD *)(*(_QWORD *)(a1 + 2664) + 1000), *(_QWORD *)(a1 + 1488), (uint64_t)v5);
  if ((_DWORD)result)
    return IOGPUResourceListAddResource();
  return result;
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineState(AGX::G9::RenderPipeline const*,unsigned int &)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

_QWORD *AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setVertexAmplificationCount(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = result + 2662;
  if (a2)
    v3 = a2;
  result[2663] = *v3;
  v4 = result[20];
  v5 = v4 + 31;
  if ((unint64_t)(v4 + 31) <= result[19])
    goto LABEL_4;
  result = (_QWORD *)AGX::DataBufferAllocator<34ul>::growNoInline(result + 2, 3, 0);
  v4 = v2[20];
  if ((_DWORD)result)
  {
    v5 = v4 + 31;
    if ((unint64_t)(v4 + 31) > v2[19])
      abort();
LABEL_4:
    v2[21] = v5;
  }
  v6 = (_QWORD *)((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (unint64_t)v6 + v2[22];
  v2[20] = v6 + 2;
  *v6 = v2[2663];
  v8 = *(_QWORD *)(v2[5] + 224) + (int)*MEMORY[0x24BE51650];
  v2[2620] |= 0x400000000000000uLL;
  v9 = v2[2644];
  v2[2644] = v9 | 0x40;
  v2[461] = v7;
  v2[524] = 16;
  v2[1985] = v8;
  *((_DWORD *)v2 + 2928) = 8;
  *((_DWORD *)v2 + 2991) = 8;
  *((_DWORD *)v2 + 3054) = v7 >> 8;
  *((_DWORD *)v2 + 636) = 1;
  *((_DWORD *)v2 + 2836) = 1;
  v2[2625] |= 0x80uLL;
  *((_DWORD *)v2 + 5290) &= ~4u;
  v10 = v2[334];
  if (v10)
  {
    *((_DWORD *)v2 + 545) = *((_DWORD *)v2 + 545) & 0xFBFF00 | *(_DWORD *)(v10 + 3600) & 0xFF0400FF;
    v2[2644] = v9 | 0x44;
  }
  if (v2[245])
    AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setAmplificationCount(unsigned int,MTLVertexAmplificationViewMapping const*)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
  return result;
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setAmplificationCount(unsigned int,MTLVertexAmplificationViewMapping const*)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeIndirectNonindexedParameters(uint64_t result, uint64_t a2, unsigned int a3)
{
  _BOOL8 v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  char *v9;
  int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(result + 1720) != 2;
  *(_DWORD *)(result + 1720) = 2;
  if (((*(_QWORD *)(*(_QWORD *)(result + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(result + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(result + 2672) + 2832)) & 0x700000000000) == 0)
  {
    *(_QWORD *)(result + 21152) |= v3;
    return result;
  }
  *(_QWORD *)(result + 20960) |= 0x700000000000uLL;
  *(_QWORD *)(result + 21152) |= v3 | 0x40;
  v4 = (int *)MEMORY[0x24BE51650];
  v5 = a2 + (int)*MEMORY[0x24BE51650];
  v6 = *(_QWORD *)(v5 + 8) + a3;
  *(_QWORD *)(result + 3584) = v6 + 12;
  *(_QWORD *)(result + 4088) = (*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFLL) - a3 - 12;
  *(_QWORD *)(result + 15776) = v5;
  if (*(_BYTE *)(result + 2384))
  {
    *(_QWORD *)(result + 3576) = v6 + 8;
    *(_QWORD *)(result + 4080) = (*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFLL) - a3 - 8;
    *(_QWORD *)(result + 15768) = v5;
    return result;
  }
  v7 = *(_DWORD **)(result + 160);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > *(_QWORD *)(result + 152))
  {
    v11 = result;
    v10 = AGX::DataBufferAllocator<34ul>::growNoInline(result + 16, 3, 0);
    result = v11;
    v7 = *(_DWORD **)(v11 + 160);
    if (!v10)
    {
      v4 = (int *)MEMORY[0x24BE51650];
      goto LABEL_7;
    }
    v8 = v7 + 1;
    v4 = (int *)MEMORY[0x24BE51650];
    if ((unint64_t)(v7 + 1) > *(_QWORD *)(v11 + 152))
      abort();
  }
  *(_QWORD *)(result + 168) = v8;
LABEL_7:
  v9 = (char *)v7 + *(_QWORD *)(result + 176);
  *v7 = 0;
  *(_QWORD *)(result + 160) = v7 + 1;
  *(_QWORD *)(result + 3576) = v9;
  *(_QWORD *)(result + 4080) = 1;
  *(_QWORD *)(result + 15768) = *(_QWORD *)(*(_QWORD *)(result + 40) + 224) + *v4;
  return result;
}

char *AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::executeCommandsInBufferCommon(uint64_t a1)
{
  char *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  int8x8_t v18;
  int8x8_t v19;
  unsigned int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  uint32x4_t *v73;
  __int8 *v74;
  uint32x4_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint32x4_t v81;
  uint32x4_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  AGXBuffer *v129;
  AGXBuffer *v130;
  int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  AGXBuffer *v140;
  AGXBuffer *v141;
  uint64_t v142;
  char v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t j;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char **v183;
  _QWORD *v184;
  uint64_t v185;
  uint32x4_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  _QWORD *v203;
  uint32x4_t *v204;
  uint64_t v205;
  uint32x4_t v206;
  uint64_t v207;
  unint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  _OWORD *v217;
  unint64_t v218;
  unint64_t v219;
  unsigned int v220;
  unsigned int *v221;
  char *v222;
  char *v223;
  unint64_t v224;
  uint32x4_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  uint32x4_t v228;
  uint32x4_t v229;
  uint32x4_t v230;
  _QWORD *v231;
  unint64_t *v232;
  int *v233;
  _DWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  _BOOL4 v239;
  uint64_t v240;
  unsigned int v241;
  _BOOL4 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  AGXBuffer *BufferInfo;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  int v290;
  AGXBuffer *v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  char *v317;
  unint64_t *v318;
  _DWORD *v319;
  void *v320;
  uint64_t v321;
  int v322;
  int v323;
  int v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  int v329;
  void *v330;
  char *__dst;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  _BYTE v337[2212];
  __int128 v338;
  int v339;
  uint64_t v340;
  _BYTE v341[884];
  _QWORD v342[2];
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  unint64_t v375;
  char *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;

  result = (char *)MEMORY[0x24BDAC7A8](a1);
  v334 = v4;
  if (!*(_BYTE *)(*(_QWORD *)(v2 + 384) + 399))
    return result;
  v5 = v3;
  v6 = v2;
  v7 = (uint64_t)result;
  if (!result[2400])
  {
    result[2400] = 1;
    *(_QWORD *)(result + 2388) = 0;
  }
  if (*((_QWORD *)result + 185))
    MTLResourceListAddResource();
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v7, 3);
  v8 = 1;
  *(_DWORD *)(v7 + 1720) = 1;
  v9 = *(_QWORD *)(v6 + 384);
  if (!*(_BYTE *)(v9 + 397))
  {
    v8 = 0;
    v10 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 1456) + 808) + 6752));
    *(_BYTE *)(v7 + 21257) |= v10 & 1;
    v9 = *(_QWORD *)(v6 + 384);
  }
  v333 = v5;
  if (*(_BYTE *)(v9 + 396))
  {
    for (i = 0; i != 280; i += 8)
    {
      v12 = v7 + i;
      if (*(_QWORD *)(v7 + i + 3728))
      {
        if (*(_QWORD *)(v12 + 15416))
          IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
      }
      if (*(_QWORD *)(v12 + 6928))
      {
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
      }
    }
    v8 |= 2u;
  }
  *(_BYTE *)(v7 + 2540) = v8;
  *(_BYTE *)(v7 + 1544) = 0;
  if (!*(_QWORD *)(v7 + 1808))
  {
    v13 = *(_QWORD *)(v7 + 56);
    v14 = *(unint64_t **)(v7 + 64);
    *(_QWORD *)(v7 + 21320) = v14;
    if ((unint64_t)(v14 + 1) > v13)
    {
      v279 = AGX::DataBufferAllocator<34ul>::growNoInline(v7 + 16, 0, 0);
      v15 = *(unint64_t **)(v7 + 64);
      if (v279)
      {
        if ((unint64_t)(v15 + 1) > *(_QWORD *)(v7 + 56))
          goto LABEL_300;
        *(_QWORD *)(v7 + 72) = v15 + 1;
        *v14 = __ROR8__((char *)v15 + *(_QWORD *)(v7 + 80), 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
        v15 = *(unint64_t **)(v7 + 64);
      }
    }
    else
    {
      *(_QWORD *)(v7 + 72) = v14 + 1;
      v15 = v14;
    }
    *v15 = 0x80000000;
    v16 = v15 + 1;
    *(_QWORD *)(v7 + 64) = v16;
    *(_QWORD *)(v7 + 21328) = (char *)v16 + *(_QWORD *)(v7 + 80);
  }
  v320 = (void *)(v7 + 12240);
  v17 = *(uint64_t **)(v7 + 2688);
  v18 = *(int8x8_t *)(v7 + 2132);
  v322 = *(_DWORD *)(v7 + 2140);
  v323 = *(_DWORD *)(v7 + 2128);
  v329 = *(_DWORD *)(v7 + 2148);
  v19 = *(int8x8_t *)(v7 + 2156);
  v324 = *(_DWORD *)(v7 + 2168);
  v325 = *(_DWORD *)(v7 + 2144);
  v328 = *(_QWORD *)(v7 + 2116);
  v327 = *(_DWORD *)(v7 + 2124);
  v326 = *(_QWORD *)(v7 + 2336);
  v332 = *(_QWORD *)(v6 + 384);
  v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 1784) + 8) + 2224);
  v21 = (int *)MEMORY[0x24BE51650];
  do
  {
    v20 &= ~(1 << __clz(__rbit32(v20)));
    IOGPUResourceListAddResource();
  }
  while (v20);
  IOGPUResourceListAddResource();
  if (*(_QWORD *)(v7 + 1808))
  {
    v22 = v333;
    if ((_DWORD)v333)
    {
LABEL_26:
      v317 = 0;
      v318 = 0;
      v316 = 0;
      v23 = v332;
      goto LABEL_60;
    }
  }
  else
  {
    *(_QWORD *)(v7 + 1808) = *(_QWORD *)(*(_QWORD *)(v7 + 1776) + 96) + *(_QWORD *)(*(_QWORD *)(v7 + 1776) + 80);
    v22 = v333;
    if ((_DWORD)v333)
      goto LABEL_26;
  }
  v24 = *(_QWORD *)(v7 + 1832);
  v25 = *(_QWORD **)(v7 + 1776);
  v26 = v25[74];
  if (!v26)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 17, 0))
      goto LABEL_300;
    v26 = v25[74];
  }
  v27 = v26 + 32;
  v28 = v25[73];
  v29 = v27 > v28;
  if (v27 > v28)
  {
    v280 = AGX::DataBufferAllocator<34ul>::growNoInline(v25, 17, 0);
    v30 = 0;
    v23 = v332;
    if (!v280)
      goto LABEL_31;
    v27 = v25[74] + 32;
    if (v27 > v25[73])
      goto LABEL_300;
  }
  v25[75] = v27;
  v30 = v29;
  v23 = v332;
LABEL_31:
  if (!v24 || v30)
  {
    v31 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 1792) + 8) + 2224);
    do
    {
      v31 &= ~(1 << __clz(__rbit32(v31)));
      IOGPUResourceListAddResource();
    }
    while (v31);
    v32 = *(_QWORD *)(v7 + 1824);
    if (v32)
      *(_DWORD *)(v32 + 4) = *(_DWORD *)(v7 + 1816);
    v33 = *(_QWORD **)(v7 + 1776);
    v34 = v33[74];
    v35 = v33;
    if (!v34)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(*(_QWORD *)(v7 + 1776));
      v34 = v33[74];
      v35 = *(_QWORD **)(v7 + 1776);
    }
    v36 = v33[76] + v34;
    *(_DWORD *)(v7 + 1816) = 0;
    *(_QWORD *)(v7 + 1824) = 0;
    *(_QWORD *)(v7 + 1832) = v36;
    v37 = *(_QWORD *)(*(_QWORD *)(v7 + 1792) + 8);
    v374 = v36;
    v378 = 0;
    v342[0] = 0;
    v38 = (unint64_t *)v35[10];
    if ((unint64_t)(v38 + 25) > v35[9])
    {
      if (AGX::DataBufferAllocator<34ul>::growNoInline(v35, 1, 0))
      {
        v298 = v35[10];
        if ((unint64_t)(v298 + 200) > v35[9])
          goto LABEL_300;
        v35[11] = v298 + 200;
        *v38 = __ROR8__(v35[12] + v298, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
      }
    }
    else
    {
      v35[11] = v38 + 25;
    }
    v336 = -1;
    bzero(v337, 0x88CuLL);
    v338 = 0u;
    v339 = 1065353216;
    v340 = 0x100000001;
    bzero(v341, 0x370uLL);
    v39 = *(_QWORD **)(v7 + 1776);
    v40 = *(_QWORD *)(v37 + 1248);
    v41 = *(unsigned int *)(v37 + 40);
    v42 = v39[46];
    if (!v42)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 10, 0))
        goto LABEL_300;
      v42 = v39[46];
    }
    v43 = v41 + 43;
    v44 = v42 + v43;
    if (v44 > v39[45])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v39, 10, 0))
      {
LABEL_44:
        v45 = v39[126] + 104;
        if (v45 > v39[125])
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v39, 30, 0))
          {
LABEL_46:
            if ((v40 & 0xA000) == 0)
              goto LABEL_49;
            v46 = *(unsigned int *)(v37 + 1240) + 7;
            v47 = v39[26] + v46;
            if (v47 > v39[25])
            {
              if (!AGX::DataBufferAllocator<34ul>::growNoInline(v39, 5, 0))
              {
LABEL_49:
                if ((v40 & 0x80000000000) == 0)
                  goto LABEL_52;
                v48 = MEMORY[0x4D8] + 7;
                v49 = v39[30] + v48;
                if (v49 > v39[29])
                {
                  if (!AGX::DataBufferAllocator<34ul>::growNoInline(v39, 6, 0))
                  {
LABEL_52:
                    if ((v40 & 0x78000000000) != 0)
                    {
                      v50 = MEMORY[0x28] + 7;
                      v51 = v39[50] + v50;
                      if (v51 > v39[49])
                      {
                        if (!AGX::DataBufferAllocator<34ul>::growNoInline(v39, 11, 0))
                          goto LABEL_55;
                        v51 = v39[50] + v50;
                        if (v51 > v39[49])
                          goto LABEL_300;
                      }
                      v39[51] = v51;
                    }
LABEL_55:
                    v52 = *(char ***)(v7 + 1752);
                    v53 = *(_QWORD **)(v7 + 1776);
                    v54 = *(_QWORD *)(v37 + 1248);
                    v335 = 2;
                    LOBYTE(v299) = 0;
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexProgramVariantAndArguments(v52, v53, v37, v342, (uint64_t)&v336, v54 | 1, 0, 0, v299, 0, &v335);
                    v55 = *(_QWORD **)(v7 + 1776);
                    v56 = v55[126];
                    v57 = v55[128] + v56;
                    v55[126] = v56 + 24;
                    *(_OWORD *)v56 = xmmword_232D73CF0;
                    *(_QWORD *)(v56 + 16) = 269487872;
                    v58 = __ROR8__(v57, 32);
                    v59 = (unint64_t *)v55[10];
                    *v59 = v58 & 0xFFFFFFFC000000FFLL | 0x600;
                    v55[10] = v59 + 1;
                    LODWORD(v60) = 0x20000;
                    HIDWORD(v60) = *(_DWORD *)(v37 + 3600) & 0xFF0400FF;
                    v61 = *(_QWORD **)(v7 + 1776);
                    v62 = (_QWORD *)v61[126];
                    v63 = (char *)v62 + v61[128];
                    v61[126] = v62 + 1;
                    *v62 = v60;
                    v64 = __ROR8__(v63, 32);
                    v65 = (unint64_t *)v61[10];
                    *v65 = v64 & 0xFFFFFFFC000000FFLL | 0x200;
                    v61[10] = v65 + 1;
                    v66 = *(_QWORD *)(v37 + 3432);
                    v67 = *(_QWORD **)(v7 + 1776);
                    v68 = v67[126];
                    v69 = v67[128] + v68;
                    v67[126] = v68 + 12;
                    *(_QWORD *)v68 = 0x1E3CE50800210000;
                    v70 = __ROR8__(v69, 32);
                    *(_DWORD *)(v68 + 8) = 1184;
                    v71 = (unint64_t *)v67[10];
                    *v71 = v70 & 0xFFFFFFFC000000FFLL | 0x300;
                    v67[10] = v71 + 1;
                    v72 = *(_QWORD **)(v7 + 1776);
                    v73 = (uint32x4_t *)v72[126];
                    v74 = &v73->i8[v72[128]];
                    v75 = *(uint32x4_t *)*(_QWORD *)(v7 + 1752);
                    v72[126] = v73 + 1;
                    *v73 = v75;
                    v76 = (unint64_t *)v72[10];
                    *v76 = __ROR8__(v74, 32) & 0xFFFFFFFC000000FFLL | 0x400;
                    v72[10] = v76 + 1;
                    v77 = *(_QWORD *)(v7 + 1776);
                    v78 = *(uint64_t **)(v77 + 80);
                    *v78 = v66 & 0xE23FFFFF | 0xFFFF10000000;
                    *(_QWORD *)(v77 + 80) = v78 + 1;
                    v79 = *(_QWORD *)(v7 + 1776);
                    v80 = *(_QWORD *)(v79 + 80);
                    *(_DWORD *)(v80 + 4) = 0;
                    *(_DWORD *)(v80 + 8) = 0;
                    *(_DWORD *)v80 = 1849950208;
                    v75.i64[0] = 0x20000000000;
                    *(_QWORD *)(v80 + 12) = 0x20000000000;
                    *(_QWORD *)(v79 + 80) = v80 + 20;
                    *(_QWORD *)(v7 + 1824) = v80;
                    LODWORD(v342[0]) = 2;
                    LODWORD(v336) = 2;
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (int *)v342, v75, v81);
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (_DWORD *)(v7 + 21264), &v336, v82, v83);
                    *(_QWORD *)(v7 + 21152) |= 0x10000000000000uLL;
                    LODWORD(v342[0]) = 2;
                    LODWORD(v336) = 2;
                    *(_BYTE *)(v7 + 2032) = 1;
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(v7 + 1656, (_QWORD *)(v7 + 16), (int *)v342);
                    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(v7);
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (int *)v342, v84, v85);
                    AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (_DWORD *)(v7 + 21264), &v336, v86, v87);
                    *(_QWORD *)(v7 + 21152) |= 0x10000000000000uLL;
                    v23 = v332;
                    v22 = v333;
                    v21 = (int *)MEMORY[0x24BE51650];
                    goto LABEL_56;
                  }
                  v49 = v39[30] + v48;
                  if (v49 > v39[29])
                    goto LABEL_300;
                }
                v39[31] = v49;
                goto LABEL_52;
              }
              v47 = v39[26] + v46;
              if (v47 > v39[25])
                goto LABEL_300;
            }
            v39[27] = v47;
            goto LABEL_49;
          }
          v45 = v39[126] + 104;
          if (v45 > v39[125])
            goto LABEL_300;
        }
        v39[127] = v45;
        goto LABEL_46;
      }
      v44 = v39[46] + v43;
      if (v44 > v39[45])
        goto LABEL_300;
    }
    v39[47] = v44;
    goto LABEL_44;
  }
LABEL_56:
  v88 = *(_QWORD **)(v7 + 1776);
  v89 = v88[46];
  if (!v89)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 10, 0))
      goto LABEL_300;
    v89 = v88[46];
    v23 = v332;
  }
  v90 = v89 + 8;
  if (v90 > v88[45])
  {
    v281 = AGX::DataBufferAllocator<34ul>::growNoInline(v88, 10, 0);
    v23 = v332;
    if (!v281)
      goto LABEL_59;
    v90 = v88[46] + 8;
    if (v90 > v88[45])
      goto LABEL_300;
  }
  v88[47] = v90;
LABEL_59:
  v91 = *(_QWORD **)(v7 + 1776);
  v92 = (unint64_t *)v91[46];
  v317 = (char *)v92 + v91[48];
  v318 = v92;
  v91[46] = v92 + 1;
  v93 = (_QWORD *)v91[74];
  v91[74] = v93 + 4;
  *v93 = *(_QWORD *)(v6 + *v21 + 8);
  v93[1] = v334;
  v93[2] = 0;
  v93[3] = v317;
  v316 = v93;
  ++*(_DWORD *)(v7 + 1816);
LABEL_60:
  v94 = 0;
  if (v17)
  {
    v95 = 0;
    if (*(_BYTE *)(v23 + 397))
    {
      v94 = *v17;
      v95 = v17[1];
    }
  }
  else
  {
    v95 = 0;
  }
  v96 = *(_QWORD *)(*(_QWORD *)(v7 + 1784) + 8);
  v97 = *(_QWORD **)(v7 + 1776);
  v98 = v97[22] + 3183;
  if (v98 > v97[21])
  {
    v259 = v95;
    v260 = AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 4, 0);
    v95 = v259;
    v23 = v332;
    if (!v260)
      goto LABEL_66;
    v98 = v97[22] + 3183;
    if (v98 > v97[21])
      goto LABEL_300;
  }
  v97[23] = v98;
LABEL_66:
  v99 = *(_QWORD **)(v7 + 1776);
  v100 = (v99[22] + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = v99[24];
  v99[22] = v100 + 3176;
  v321 = v96;
  if (*(_BYTE *)(v23 + 397) && (!v94 || (*(_BYTE *)(v94 + 1336) & 4) == 0))
  {
    v102 = 0;
    v103 = 0;
    goto LABEL_73;
  }
  v104 = v100 + 6359;
  if (v100 + 6359 > v99[21])
  {
    v275 = v95;
    v276 = v100;
    v277 = v101;
    v278 = AGX::DataBufferAllocator<34ul>::growNoInline(v99, 4, 0);
    v101 = v277;
    v95 = v275;
    v100 = v276;
    v23 = v332;
    if (!v278)
      goto LABEL_72;
    v104 = v99[22] + 3183;
    if (v104 > v99[21])
      goto LABEL_300;
  }
  v99[23] = v104;
LABEL_72:
  v99 = *(_QWORD **)(v7 + 1776);
  v102 = (v99[22] + 7) & 0xFFFFFFFFFFFFFFF8;
  v103 = v102 + v99[24];
  v99[22] = v102 + 3176;
LABEL_73:
  v105 = v99[18] + 3143;
  if (v105 <= v99[17])
  {
LABEL_74:
    v99[19] = v105;
    goto LABEL_75;
  }
  v312 = v95;
  v261 = v100;
  v262 = v101;
  v263 = v103;
  v264 = AGX::DataBufferAllocator<34ul>::growNoInline(v99, 3, 0);
  v103 = v263;
  v101 = v262;
  v95 = v312;
  v100 = v261;
  v23 = v332;
  if (v264)
  {
    v105 = v99[18] + 3143;
    if (v105 > v99[17])
      goto LABEL_300;
    goto LABEL_74;
  }
LABEL_75:
  v106 = *(_QWORD **)(v7 + 1776);
  v107 = v106[17];
  v108 = (v106[18] + 7) & 0xFFFFFFFFFFFFFFF8;
  v106[18] = v108 + 3136;
  v109 = (_QWORD *)(v6 + (int)*MEMORY[0x24BE51650]);
  v110 = v109[2];
  v374 = v109[1];
  v111 = v106[20];
  v373 = 0u;
  v372 = 0u;
  v371 = 0u;
  v370 = 0u;
  v369 = 0u;
  v368 = 0u;
  v367 = 0u;
  v366 = 0u;
  v365 = 0u;
  v364 = 0u;
  v363 = 0u;
  v362 = 0u;
  v361 = 0u;
  v360 = 0u;
  v359 = 0u;
  v358 = 0u;
  v357 = 0u;
  v356 = 0u;
  v355 = 0u;
  v354 = 0u;
  v353 = 0u;
  v352 = 0u;
  v351 = 0u;
  v350 = 0u;
  v349 = 0u;
  v348 = 0u;
  v347 = 0u;
  v346 = 0u;
  v345 = 0u;
  v344 = 0u;
  v343 = 0u;
  v112 = v109[3];
  v378 = v110 & 0xFFFFFFFFFFFFFFLL;
  v330 = (void *)v100;
  __dst = (char *)v108;
  v113 = v108 + 3319;
  v342[0] = v112;
  if (v108 + 3319 <= v107)
  {
LABEL_76:
    v106[19] = v113;
    goto LABEL_77;
  }
  v313 = v95;
  v265 = v101;
  v266 = v103;
  v267 = v111;
  v268 = AGX::DataBufferAllocator<34ul>::growNoInline(v106, 3, 0);
  v111 = v267;
  v103 = v266;
  v101 = v265;
  v95 = v313;
  v100 = (unint64_t)v330;
  v23 = v332;
  if (v268)
  {
    v113 = v106[18] + 183;
    if (v113 > v106[17])
      goto LABEL_300;
    goto LABEL_76;
  }
LABEL_77:
  v114 = *(_QWORD *)(v7 + 1776);
  v115 = (*(_QWORD *)(v114 + 144) + 7) & 0xFFFFFFFFFFFFFFF8;
  v116 = v115 + *(_QWORD *)(v114 + 160);
  *(_QWORD *)(v114 + 144) = v115 + 176;
  *(_QWORD *)(v7 + 1800) = v115;
  v375 = v116;
  v379 = 176;
  v342[1] = v115;
  v319 = (_DWORD *)v102;
  if (v95)
  {
    v117 = *(_OWORD *)(v95 + 3568);
    v118 = *(_QWORD *)(v95 + 2040);
  }
  else
  {
    v118 = 0;
    v117 = 0uLL;
  }
  *(_OWORD *)(v115 + 56) = v117;
  *(_QWORD *)(v115 + 160) = v118;
  v119 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::ei_max_indirect_gather_size_watermark;
  v120 = *(unsigned __int8 *)(v23 + 397);
  v121 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::ei_max_indirect_gather_size_watermark;
  if (*(_BYTE *)(v23 + 397))
    v121 = *(_DWORD *)(v95 + 2824);
  *(_WORD *)(v115 + 154) = 0;
  if (v121)
  {
    if ((_DWORD)v22 == 1)
    {
      v122 = (v121 + v121 * (HIDWORD(v334) - v334));
      v123 = *(_QWORD **)(v7 + 1776);
      if (*(_QWORD *)(*v123 + 320) >= v122)
      {
        v124 = v123[46];
        if (!v124)
        {
          v305 = v103;
          v308 = v111;
          v284 = v101;
          v285 = v95;
          v286 = v100;
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v123, 10, 0))
            goto LABEL_300;
          v124 = v123[46];
          v23 = v332;
          v100 = v286;
          v95 = v285;
          v101 = v284;
          v103 = v305;
          v111 = v308;
        }
        v125 = v124 + v122;
        if (v125 > v123[45])
        {
          v309 = v111;
          v314 = v95;
          v287 = v100;
          v288 = v101;
          v289 = v103;
          v290 = AGX::DataBufferAllocator<34ul>::growNoInline(v123, 10, 0);
          v111 = v309;
          v95 = v314;
          v103 = v289;
          v101 = v288;
          v100 = v287;
          v23 = v332;
          if (!v290)
            goto LABEL_88;
          v125 = v123[46] + v122;
          if (v125 > v123[45])
            goto LABEL_300;
        }
        v123[47] = v125;
LABEL_88:
        v126 = *(_QWORD *)(v7 + 1776);
        v127 = *(_QWORD *)(v126 + 368);
        v128 = (char *)(*(_QWORD *)(v126 + 384) + v127);
        *(_QWORD *)(v126 + 368) = v127 + v122;
        LOWORD(v119) = v121;
LABEL_93:
        *(_WORD *)(*(_QWORD *)(v7 + 1800) + 154) = v119;
        v376 = v128;
        v380 = v122;
        *(_QWORD *)&v343 = v127;
        v120 = *(unsigned __int8 *)(v23 + 397);
        v22 = v333;
        goto LABEL_94;
      }
      v303 = v103;
      v306 = v111;
      v301 = v101;
      v310 = v95;
      BufferInfo = AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(v23 + 400, *(_DWORD *)v23 * v119);
      v283 = (v119 * v334);
      v127 = (uint64_t)(-[IOGPUMetalBuffer contents](BufferInfo, "contents") + v283);
      v128 = *(char **)((char *)&BufferInfo->super.super.super.super.super._label + (int)*MEMORY[0x24BE51650]) + v283;
      v122 = (v119 + v119 * (HIDWORD(v334) - v334));
    }
    else
    {
      v303 = v103;
      v306 = v111;
      v301 = v101;
      v310 = v95;
      v129 = AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(v23 + 400, *(_DWORD *)v23 * v119);
      v130 = v129;
      if ((_DWORD)v22)
      {
        v127 = 0;
        v128 = 0;
        v122 = 0;
      }
      else
      {
        v127 = -[IOGPUMetalBuffer contents](v129, "contents");
        v128 = *(char **)((char *)&v130->super.super.super.super.super._label + (int)*MEMORY[0x24BE51650]);
        v122 = -[IOGPUMetalBuffer length](v130, "length");
      }
    }
    IOGPUResourceListAddResource();
    v23 = v332;
    v100 = (unint64_t)v330;
    v111 = v306;
    v95 = v310;
    v101 = v301;
    v103 = v303;
    goto LABEL_93;
  }
LABEL_94:
  v131 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::ei_max_indirect_gather_size_watermark;
  v132 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::ei_max_indirect_gather_size_watermark;
  if (v120)
  {
    if (!v94)
    {
      v133 = *(_QWORD *)(v7 + 1800);
      *(_WORD *)(v133 + 156) = 0;
      goto LABEL_111;
    }
    v132 = *(_DWORD *)(v94 + 2840);
  }
  v133 = *(_QWORD *)(v7 + 1800);
  *(_WORD *)(v133 + 156) = 0;
  if (v132)
  {
    if ((_DWORD)v22 == 1)
    {
      v300 = v6;
      v134 = (v132 + v132 * (HIDWORD(v334) - v334));
      v135 = *(_QWORD **)(v7 + 1776);
      if (*(_QWORD *)(*v135 + 352) >= v134)
      {
        v136 = v135[50] + v134;
        if (v136 > v135[49])
        {
          v315 = v95;
          v293 = v100;
          v294 = v101;
          v295 = v103;
          v296 = v111;
          v297 = AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 11, 0);
          v111 = v296;
          v103 = v295;
          v101 = v294;
          v95 = v315;
          v100 = v293;
          v23 = v332;
          v6 = v300;
          if (!v297)
            goto LABEL_102;
          v136 = v135[50] + v134;
          if (v136 > v135[49])
            goto LABEL_300;
        }
        v135[51] = v136;
        v6 = v300;
LABEL_102:
        v137 = *(_QWORD *)(v7 + 1776);
        v138 = *(_QWORD *)(v137 + 400);
        v139 = (char *)(*(_QWORD *)(v137 + 416) + v138);
        *(_QWORD *)(v137 + 400) = v138 + v134;
        LOWORD(v131) = v132;
LABEL_108:
        v133 = *(_QWORD *)(v7 + 1800);
        *(_WORD *)(v133 + 156) = v131;
        v377 = v139;
        v381 = v134;
        *((_QWORD *)&v343 + 1) = v138;
        v22 = v333;
        goto LABEL_109;
      }
      v304 = v103;
      v307 = v111;
      v302 = v101;
      v311 = v95;
      v291 = AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(v23 + 456, *(_DWORD *)v23 * v131);
      v292 = (v131 * v334);
      v138 = (uint64_t)(-[IOGPUMetalBuffer contents](v291, "contents") + v292);
      v139 = *(char **)((char *)&v291->super.super.super.super.super._label + (int)*MEMORY[0x24BE51650]) + v292;
      v134 = (v131 + v131 * (HIDWORD(v334) - v334));
    }
    else
    {
      v304 = v103;
      v307 = v111;
      v302 = v101;
      v311 = v95;
      v140 = AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(v23 + 456, *(_DWORD *)v23 * v131);
      v141 = v140;
      if ((_DWORD)v22)
      {
        v138 = 0;
        v139 = 0;
        v134 = 0;
      }
      else
      {
        v138 = -[IOGPUMetalBuffer contents](v140, "contents");
        v139 = *(char **)((char *)&v141->super.super.super.super.super._label + (int)*MEMORY[0x24BE51650]);
        v134 = -[IOGPUMetalBuffer length](v141, "length");
      }
    }
    IOGPUResourceListAddResource();
    v23 = v332;
    v100 = (unint64_t)v330;
    v111 = v307;
    v95 = v311;
    v101 = v302;
    v103 = v304;
    goto LABEL_108;
  }
LABEL_109:
  if (v94)
  {
    *(_QWORD *)(v133 + 72) = *(_QWORD *)(v94 + 3112);
    v142 = *(_QWORD *)(v94 + 2040);
    v143 = 1;
    goto LABEL_112;
  }
LABEL_111:
  v142 = 0;
  v143 = 0;
  *(_QWORD *)(v133 + 72) = 0;
LABEL_112:
  *(_QWORD *)(v133 + 168) = v142;
  *(_QWORD *)v133 = v22;
  *(_QWORD *)(v133 + 8) = v334;
  v144 = *(unsigned __int8 *)(v23 + 397);
  v145 = *(_QWORD *)(v7 + 1800);
  *(_BYTE *)(v145 + 24) = v144;
  *(_BYTE *)(v145 + 26) = v143;
  *(_BYTE *)(v145 + 25) = 1;
  *(_QWORD *)(v145 + 32) = &__dst[v111];
  *(_QWORD *)(v145 + 40) = v100 + v101;
  *(_QWORD *)(v145 + 48) = v103;
  if (!*(_BYTE *)(v23 + 396))
  {
    v149 = 0;
    goto LABEL_138;
  }
  if (v95)
  {
    v146 = *(_QWORD *)(v95 + 2832) & 0x7FFFFFFFFLL | (*(_QWORD *)(v95 + 1288) | *(_QWORD *)(v95 + 1264)) & 0x7FFFFFFFFLL | (*(_QWORD *)(v95 + 1312) | *(_QWORD *)(v95 + 1344) | *(_QWORD *)(v95 + 1368)) & 0x7FFFFFFFFLL;
    if (v94)
      goto LABEL_115;
LABEL_119:
    v147 = 0x7FFFFFFFFLL;
    if (v144)
      goto LABEL_116;
    goto LABEL_120;
  }
  v146 = 0x7FFFFFFFFLL;
  if (!v94)
    goto LABEL_119;
LABEL_115:
  v147 = (*(_QWORD *)(v94 + 1264) | *(_QWORD *)(v94 + 1288) | *(_QWORD *)(v94 + 1312) | *(_QWORD *)(v94 + 1344) | *(_QWORD *)(v94 + 1368)) & 0x7FFFFFFFFLL;
  if (v144)
  {
LABEL_116:
    v148 = (0x4000000000 - (__clz(v147) << 32)) | (64 - __clz(v146));
    goto LABEL_121;
  }
LABEL_120:
  v148 = 0x2300000023;
LABEL_121:
  v150 = *(_QWORD **)(v7 + 1776);
  v151 = (8 * v148 + 56) & 0x7FFFFFFF8;
  v152 = v150[18] + (v151 | 7);
  if (v152 <= v150[17])
  {
LABEL_122:
    v150[19] = v152;
    goto LABEL_123;
  }
  v271 = v95;
  v272 = AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 3, 0);
  v95 = v271;
  v23 = v332;
  if (v272)
  {
    v152 = v150[18] + (v151 | 7);
    if (v152 > v150[17])
      goto LABEL_300;
    goto LABEL_122;
  }
LABEL_123:
  v153 = HIDWORD(v148);
  v154 = *(_QWORD **)(v7 + 1776);
  v155 = (v154[18] + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(*(_QWORD *)(v7 + 1800) + 136) = v155 + v154[20];
  v156 = v155 + v151;
  v154[18] = v155 + v151;
  v157 = (8 * HIDWORD(v148) + 56) & 0x7FFFFFFF8;
  v158 = v156 + (v157 | 7);
  if (v158 > v154[17])
  {
    v273 = v95;
    v274 = AGX::DataBufferAllocator<34ul>::growNoInline(v154, 3, 0);
    v95 = v273;
    v23 = v332;
    if (!v274)
      goto LABEL_125;
    v158 = v154[18] + (v157 | 7);
    if (v158 > v154[17])
      goto LABEL_300;
  }
  v154[19] = v158;
LABEL_125:
  v159 = *(_QWORD *)(v7 + 1776);
  v145 = *(_QWORD *)(v7 + 1800);
  v160 = (*(_QWORD *)(v159 + 144) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v145 + 144) = v160 + *(_QWORD *)(v159 + 160);
  *(_QWORD *)(v159 + 144) = v160 + v157;
  *(_QWORD *)(v155 + 48) = *(_QWORD *)(v145 + 136) + 56;
  *(_QWORD *)(v155 + 32) = *(_QWORD *)(v145 + 32);
  if ((_DWORD)v148)
  {
    v161 = 0;
    do
    {
      if (v161 >= 0x23)
        v162 = -44;
      else
        v162 = 7;
      *(_QWORD *)(v155 + 8 * (v162 + v161)) = *(_QWORD *)(v7 + 3224 + 8 * v161);
      ++v161;
    }
    while (v148 != v161);
  }
  *(_QWORD *)(v160 + 48) = *(_QWORD *)(v145 + 144) + 56;
  *(_QWORD *)(v160 + 32) = *(_QWORD *)(v145 + 40);
  LODWORD(v22) = v333;
  if (v153)
  {
    for (j = 0; j != v153; ++j)
    {
      if (j >= 0x23)
        v164 = -44;
      else
        v164 = 7;
      *(_QWORD *)(v160 + 8 * (v164 + j)) = *(_QWORD *)(v7 + 6424 + 8 * j);
    }
  }
  v149 = 1;
LABEL_138:
  *(_BYTE *)(v145 + 27) = v149;
  if (v95)
  {
    v165 = *(_QWORD *)(v95 + 3552);
    *(_DWORD *)(v145 + 88) = *(_DWORD *)(v95 + 3560);
    *(_QWORD *)(v145 + 80) = v165;
    *(_DWORD *)(*(_QWORD *)(v7 + 1800) + 92) = *(_DWORD *)(v95 + 3448) & 0xE23FFFFF;
    v145 = *(_QWORD *)(v7 + 1800);
  }
  *(_DWORD *)(v145 + 96) = v323;
  *(int8x8_t *)(v145 + 100) = vbsl_s8((int8x8_t)0xF710000003E00000, v19, v18);
  *(_DWORD *)(v145 + 108) = v322;
  *(_DWORD *)(v145 + 112) = v324 & 0xF7100000 | v325 & 0x8EFFFFF;
  *(_DWORD *)(v145 + 116) = v329;
  v166 = *(_QWORD *)(v7 + 1800);
  *(_QWORD *)(v166 + 120) = v328;
  *(_DWORD *)(v166 + 128) = v327;
  *(_BYTE *)(*(_QWORD *)(v7 + 1800) + 152) = v326;
  v167 = *(_QWORD **)(v7 + 1776);
  if (*(_BYTE *)(v23 + 397))
    v168 = 26;
  else
    v168 = 25;
  v169 = (unint64_t *)v167[10];
  if ((unint64_t)&v169[v168] > v167[9])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 1, 0))
    {
      v269 = v167[10];
      if ((unint64_t)(v269 + v168 * 8) > v167[9])
        goto LABEL_300;
      v167[11] = v269 + v168 * 8;
      *v169 = __ROR8__(v167[12] + v269, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    v167[11] = &v169[v168];
  }
  v336 = -1;
  bzero(v337, 0x88CuLL);
  v338 = 0u;
  v339 = 1065353216;
  v340 = 0x100000001;
  bzero(v341, 0x370uLL);
  v170 = *(_QWORD **)(v7 + 1776);
  v171 = *(_QWORD *)(v321 + 1248);
  v172 = *(unsigned int *)(v321 + 40);
  v173 = v170[46];
  if (!v173)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 10, 0))
      goto LABEL_300;
    v173 = v170[46];
  }
  v174 = v172 + 43;
  v175 = v173 + v174;
  if (v175 <= v170[45])
  {
LABEL_147:
    v170[47] = v175;
    goto LABEL_148;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v170, 10, 0))
  {
    v175 = v170[46] + v174;
    if (v175 > v170[45])
      goto LABEL_300;
    goto LABEL_147;
  }
LABEL_148:
  v176 = v170[126] + 104;
  if (v176 <= v170[125])
  {
LABEL_149:
    v170[127] = v176;
    goto LABEL_150;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v170, 30, 0))
  {
    v176 = v170[126] + 104;
    if (v176 > v170[125])
      goto LABEL_300;
    goto LABEL_149;
  }
LABEL_150:
  if ((v171 & 0xA000) == 0)
    goto LABEL_153;
  v177 = *(unsigned int *)(v321 + 1240) + 7;
  v178 = v170[26] + v177;
  if (v178 <= v170[25])
    goto LABEL_152;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v170, 5, 0))
  {
    v178 = v170[26] + v177;
    if (v178 > v170[25])
      goto LABEL_300;
LABEL_152:
    v170[27] = v178;
  }
LABEL_153:
  if ((v171 & 0x80000000000) == 0)
    goto LABEL_156;
  v179 = MEMORY[0x4D8] + 7;
  v180 = v170[30] + v179;
  if (v180 <= v170[29])
    goto LABEL_155;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v170, 6, 0))
  {
    v180 = v170[30] + v179;
    if (v180 > v170[29])
      goto LABEL_300;
LABEL_155:
    v170[31] = v180;
  }
LABEL_156:
  if ((v171 & 0x78000000000) == 0)
    goto LABEL_159;
  v181 = MEMORY[0x28] + 7;
  v182 = v170[50] + v181;
  if (v182 <= v170[49])
    goto LABEL_158;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v170, 11, 0))
  {
    v182 = v170[50] + v181;
    if (v182 > v170[49])
      goto LABEL_300;
LABEL_158:
    v170[51] = v182;
  }
LABEL_159:
  v183 = *(char ***)(v7 + 1752);
  v184 = *(_QWORD **)(v7 + 1776);
  v185 = *(_QWORD *)(v321 + 1248);
  v335 = 2;
  LOBYTE(v299) = 0;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexProgramVariantAndArguments(v183, v184, v321, v342, (uint64_t)&v336, v185 | 1, 0, 0, v299, 0, &v335);
  v187 = *(_QWORD **)(v7 + 1776);
  v188 = v187[126];
  v189 = v187[128] + v188;
  v187[126] = v188 + 24;
  *(_OWORD *)v188 = xmmword_232D73CF0;
  *(_QWORD *)(v188 + 16) = 269487872;
  v190 = __ROR8__(v189, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v191 = (unint64_t *)v187[10];
  *v191 = v190;
  v187[10] = v191 + 1;
  if (*(_BYTE *)(v332 + 397))
  {
    LODWORD(v192) = 0x20000;
    HIDWORD(v192) = *(_DWORD *)(v321 + 3600) & 0xFF0400FF;
    v193 = *(_QWORD **)(v7 + 1776);
    v194 = (_QWORD *)v193[126];
    v195 = v193[128];
    v193[126] = v194 + 1;
    *v194 = v192;
    v196 = __ROR8__((char *)v194 + v195, 32) & 0xFFFFFFFC000000FFLL | 0x200;
    v197 = (unint64_t *)v193[10];
    *v197 = v196;
    v193[10] = v197 + 1;
  }
  v198 = *(_QWORD **)(v7 + 1776);
  v199 = v198[126];
  v200 = v198[128];
  v198[126] = v199 + 12;
  *(_QWORD *)v199 = 0x1E3CE50800210000;
  *(_DWORD *)(v199 + 8) = 1184;
  v201 = __ROR8__(v200 + v199, 32);
  v202 = (unint64_t *)v198[10];
  *v202 = v201 & 0xFFFFFFFC000000FFLL | 0x300;
  v198[10] = v202 + 1;
  v203 = *(_QWORD **)(v7 + 1776);
  v204 = (uint32x4_t *)v203[126];
  v205 = v203[128];
  v206 = *(uint32x4_t *)*(_QWORD *)(v7 + 1752);
  v203[126] = v204 + 1;
  *v204 = v206;
  v207 = __ROR8__(&v204->i8[v205], 32);
  v208 = (unint64_t *)v203[10];
  *v208 = v207 & 0xFFFFFFFC000000FFLL | 0x400;
  v203[10] = v208 + 1;
  v209 = *(_QWORD *)(v7 + 1776);
  v210 = *(uint64_t **)(v209 + 80);
  *v210 = *(_QWORD *)(v321 + 3432) & 0xE23FFFFFLL | 0xFFFF10000000;
  *(_QWORD *)(v209 + 80) = v210 + 1;
  if ((_DWORD)v22 == 1)
  {
    v211 = *(_QWORD *)(v7 + 1776);
    v212 = *(_QWORD *)(v211 + 80);
    *(_DWORD *)v212 = 1849950208;
    *(_DWORD *)(v212 + 4) = HIDWORD(v334) - v334 + 1;
    *(_QWORD *)(v212 + 8) = 0;
    *(_DWORD *)(v212 + 16) = 512;
    *(_QWORD *)(v211 + 80) = v212 + 20;
    goto LABEL_167;
  }
  v213 = *(_QWORD **)(v7 + 1776);
  v214 = v213[46];
  if (!v214)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 10, 0))
      goto LABEL_300;
    v214 = v213[46];
  }
  v215 = v214 + 16;
  if (v215 > v213[45])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v213, 10, 0))
      goto LABEL_166;
    v215 = v213[46] + 16;
    if (v215 > v213[45])
      goto LABEL_300;
  }
  v213[47] = v215;
LABEL_166:
  v216 = *(_QWORD **)(v7 + 1776);
  v217 = (_OWORD *)v216[46];
  v218 = (unint64_t)v217 + v216[48];
  v316[2] = v218;
  v206 = (uint32x4_t)xmmword_232D73D20;
  *v217 = xmmword_232D73D20;
  v216[46] = v217 + 1;
  v219 = HIDWORD(v218);
  v220 = v218 & 0xFFFFFFFC;
  v221 = (unsigned int *)v216[10];
  v222 = (char *)v221 + v216[12];
  v216[10] = v221 + 12;
  v223 = v222 + 32;
  v222 += 48;
  v224 = (v218 + 4) >> 32;
  LODWORD(v217) = (v218 + 4) & 0xFFFFFFFE;
  v218 += 6;
  *v221 = HIDWORD(v223) | 0x8D000000;
  v221[1] = v223 & 0xFFFFFFFC;
  v221[2] = v224;
  v221[3] = v217;
  v221[4] = HIDWORD(v222) | 0x8A000000;
  v221[5] = v222 & 0xFFFFFFFC;
  v221[6] = HIDWORD(v218);
  v221[7] = v218 & 0xFFFFFFFE;
  v221[8] = 1623457792;
  v221[9] = v219;
  v221[10] = v220;
  v221[11] = 512;
LABEL_167:
  LODWORD(v342[0]) = 2;
  LODWORD(v336) = 2;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (int *)v342, v206, v186);
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (_DWORD *)(v7 + 21264), &v336, v225, v226);
  *(_QWORD *)(v7 + 21152) |= 0x10000000000000uLL;
  LODWORD(v342[0]) = 2;
  LODWORD(v336) = 2;
  *(_BYTE *)(v7 + 2032) = 1;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(v7 + 1656, (_QWORD *)(v7 + 16), (int *)v342);
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(v7);
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (int *)v342, v227, v228);
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(v7 + 1656, (_QWORD *)(v7 + 16), (_DWORD *)(v7 + 21264), &v336, v229, v230);
  *(_QWORD *)(v7 + 21152) |= 0x10000000000000uLL;
  v231 = *(_QWORD **)(v7 + 1776);
  v232 = (unint64_t *)v231[6];
  if ((unint64_t)(v232 + 1) <= v231[5])
  {
    v231[7] = v232 + 1;
    v233 = &OBJC_IVAR___BVHTopDownBuilder__library;
    v234 = v319;
    goto LABEL_169;
  }
  v233 = &OBJC_IVAR___BVHTopDownBuilder__library;
  v234 = v319;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v7 + 1776), 0, 0))
  {
    v270 = v231[6];
    if ((unint64_t)(v270 + 8) <= v231[5])
    {
      v231[7] = v270 + 8;
      *v232 = __ROR8__(v231[8] + v270, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
      goto LABEL_169;
    }
LABEL_300:
    abort();
  }
LABEL_169:
  v235 = 0x5F700000000003;
  *(_QWORD *)(v7 + 21152) = 0x5F700000000000;
  if (!*(_BYTE *)(*(_QWORD *)(v6 + v233[54]) + 397))
  {
    *(_BYTE *)(*(_QWORD *)(v7 + 2664) + 466) = 1;
    v243 = *(_QWORD *)(*(_QWORD *)(v7 + 1456) + 808);
    v244 = *(_QWORD *)(v243 + 6312);
    if (*(_DWORD *)v244 <= *(_DWORD *)(v7 + 2584))
    {
      if (*(_BYTE *)(v7 + 2608))
        v239 = 1;
      else
        v239 = *(unsigned __int8 *)(v244 + 24) != 0;
    }
    else
    {
      *(_DWORD *)(v7 + 2584) = *(_DWORD *)v244;
      v239 = 1;
    }
    *(_BYTE *)(v7 + 2608) = v239;
    v245 = *(_QWORD *)(v243 + 6320);
    if (*(_DWORD *)v245 <= *(_DWORD *)(v7 + 2616))
    {
      if (*(_BYTE *)(v7 + 2640))
        v242 = 1;
      else
        v242 = *(unsigned __int8 *)(v245 + 24) != 0;
    }
    else
    {
      *(_DWORD *)(v7 + 2616) = *(_DWORD *)v245;
      v242 = 1;
    }
    goto LABEL_188;
  }
  v236 = *(_QWORD *)(v7 + 2688);
  v237 = *(_QWORD *)(v236 + 8);
  if (!v237)
  {
    v239 = 0;
    v240 = 0x5F700000000006;
    if (*(_QWORD *)v236)
      goto LABEL_174;
LABEL_179:
    v242 = 0;
    goto LABEL_189;
  }
  *(_BYTE *)(*(_QWORD *)(v7 + 2664) + 466) |= *(_BYTE *)(v237 + 382);
  *(_QWORD *)(v7 + 21152) = 0x5F700000000005;
  v238 = *(_DWORD *)(v236 + 40);
  if (v238 > *(_DWORD *)(v7 + 2584))
  {
    *(_DWORD *)(v7 + 2584) = v238;
    v239 = 1;
    *(_BYTE *)(v7 + 2608) = 1;
  }
  else
  {
    v239 = *(_BYTE *)(v7 + 2608) != 0;
  }
  v240 = 0x5F700000000007;
  if (!*(_QWORD *)v236)
    goto LABEL_179;
LABEL_174:
  *(_QWORD *)(v7 + 21152) = v240;
  v241 = *(_DWORD *)(v236 + 44);
  if (v241 > *(_DWORD *)(v7 + 2616))
  {
    *(_DWORD *)(v7 + 2616) = v241;
    v242 = 1;
LABEL_188:
    *(_BYTE *)(v7 + 2640) = v242;
    goto LABEL_189;
  }
  v242 = *(_BYTE *)(v7 + 2640) != 0;
LABEL_189:
  if ((v246 & 1) == 0
  {
  }
  if (v239)
  {
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindVertexUSCSpillBuffer(v7);
    if (!v242)
      goto LABEL_192;
  }
  else if (!v242)
  {
    goto LABEL_192;
  }
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFragmentUSCSpillBuffer(v7);
LABEL_192:
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v7, 3);
  *(_DWORD *)(v7 + 1720) = 1;
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v7, *(int8x16_t **)(v7 + 2672), *(int8x16_t **)(v7 + 2680), v7 + 2704, (_QWORD *)(v7 + 5904), v7 + 20960, 1);
  *(_BYTE *)(v7 + 2540) = 0;
  if (*(_QWORD *)(v7 + 1480))
    MTLResourceListAddResource();
  v247 = v233[54];
  v248 = *(_QWORD *)(v6 + v247);
  memcpy(__dst, (const void *)(v7 + 9104), 0xC40uLL);
  result = (char *)memcpy(v330, v320, 0xC68uLL);
  if (v234)
  {
    result = (char *)memcpy(v234, v320, 0xC68uLL);
    v234[600] = 0;
  }
  if ((_DWORD)v333 == 1)
  {
    v249 = *(_QWORD *)(v7 + 1776);
    v250 = *(unint64_t **)(v249 + 48);
    *v250 = __ROR8__(*(_QWORD *)(v6 + (int)*MEMORY[0x24BE51650] + 8)+ (*(_DWORD *)(v248 + 140) + *(_DWORD *)(v248 + 144) * v334), 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    *(_QWORD *)(v249 + 48) = v250 + 1;
    v251 = *(_QWORD *)(*(_QWORD *)(v7 + 1776) + 64) + *(_QWORD *)(*(_QWORD *)(v7 + 1776) + 48);
    v252 = *(_QWORD *)(v7 + 1800);
    if (!v252)
      goto LABEL_201;
    goto LABEL_200;
  }
  v253 = *(_QWORD *)(v7 + 1776);
  v254 = *(unint64_t **)(v253 + 48);
  *v254 = __ROR8__(v317, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
  *(_QWORD *)(v253 + 48) = v254 + 1;
  v251 = *(_QWORD *)(*(_QWORD *)(v7 + 1776) + 64) + *(_QWORD *)(*(_QWORD *)(v7 + 1776) + 48);
  *v318 = __ROR8__(v251, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
  v252 = *(_QWORD *)(v7 + 1800);
  if (v252)
LABEL_200:
    *(_QWORD *)(v252 + 16) = v251;
LABEL_201:
  *(_QWORD *)(v7 + 1800) = 0;
  v255 = *(_QWORD *)(v7 + 2672);
  if (v255)
    v235 = *(_QWORD *)(v255 + 1248) | 0x5F700000000003;
  v256 = *(_QWORD *)(v7 + 2680);
  if (v256)
    v235 |= *(_QWORD *)(v256 + 1248);
  *(_QWORD *)(v7 + 21152) |= v235;
  if (!*(_BYTE *)(*(_QWORD *)(v6 + v247) + 397))
  {
    v257 = *(_BYTE *)(v7 + 1506);
    v258 = *(_QWORD *)(v7 + 2664);
    *(_BYTE *)(v258 + 1268) |= v257;
    *(_BYTE *)(v258 + 468) |= v257;
  }
  return result;
}

unint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setVertexProgramBuffers(unint64_t result, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  char v15;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v10 = a2;
  v11 = (_QWORD *)result;
  if (a5 && *(_QWORD *)(result + 1480))
  {
    v12 = a5;
    v13 = a2;
    do
    {
      if (*v13)
        result = MTLResourceListAddResource();
      ++v13;
      --v12;
    }
    while (v12);
  }
  if (a5)
  {
    v14 = v11 + 338;
    v15 = a5;
    v16 = (int *)MEMORY[0x24BE51650];
    v17 = a6;
    v18 = a5;
    v19 = a4;
    while (1)
    {
      v20 = *v10;
      v21 = (_DWORD *)v11 + v19;
      if (*v10)
      {
        v22 = v20 + *v16;
        result = *(_QWORD *)(v22 + 8);
        v25 = v22 + 16;
        v23 = *(_QWORD *)(v22 + 16);
        v24 = *(_QWORD *)(v25 + 8);
        v26 = *a3;
        v27 = v19;
        v28 = &v11[v27];
        v28[403] = *a3 + result;
        v28[466] = (v23 & 0xFFFFFFFFFFFFFFLL) - v26;
        v14[v27] = v24 + v26;
        v28[2116] = result;
        v28[2368] = v24;
        v21[2870] = v23;
        v21[2933] = v23;
        v21[2996] = result >> 8;
        v28[1927] = v20 + *v16;
        if (a6)
          goto LABEL_12;
      }
      else
      {
        v30 = v19;
        v31 = &v11[v30];
        v31[1927] = 0;
        v31[403] = 0;
        v31[466] = 0;
        v14[v30] = 0;
        v31[2116] = 0;
        v31[2368] = 0;
        v21[2870] = 0;
        v21[2933] = 0;
        if (a6)
        {
LABEL_12:
          v29 = *v17;
          if (v19 <= 0x1E)
            goto LABEL_16;
          goto LABEL_9;
        }
      }
      LODWORD(v29) = 0;
      if (v19 <= 0x1E)
LABEL_16:
        v21[2839] = v29;
LABEL_9:
      ++v19;
      ++v17;
      ++a3;
      ++v10;
      if (!--v18)
        goto LABEL_18;
    }
  }
  v15 = 0;
LABEL_18:
  v32 = ~(-1 << v15) << a4;
  v11[2620] |= v32;
  v11[2623] |= v32;
  v11[2644] |= 0xC0uLL;
  return result;
}

void AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::memoryBarrier(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;

  if ((v4 & 1) == 0)
  {
    v15 = a3;
    v16 = a2;
    a2 = v16;
    LODWORD(a3) = v15;
    if (v17)
    {
      if ((objc_msgSend(*(id *)(a1 + 1456), "supportsRenderMemoryBarrier", v15) & 1) != 0)
        v18 = 1;
      else
        v18 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::isAfterFragmentMemoryBarrierSupported();
      AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::supports_after_fragment = v18;
      LODWORD(a3) = v15;
      a2 = v16;
    }
  }
  if ((a3 & 7) != 0 && (a2 & 7) != 0)
  {
    if ((a2 & 6) != 0
      && AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::supports_after_fragment)
    {
      AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::restartRenderPass(a1, (unint64_t *)(a1 + 21152), 16, 0);
    }
    else if ((a3 & a2 & 1) != 0 && (a2 & 6) == 0)
    {
      v5 = *(_QWORD *)(a1 + 1808);
      if (v5)
      {
        v6 = *(_QWORD *)(a1 + 21328);
        **(_QWORD **)(a1 + 21320) = __ROR8__(v5, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
        v7 = *(_QWORD *)(a1 + 1776);
        v8 = __ROR8__(v6, 32);
        v9 = *(unint64_t **)(v7 + 80);
        *v9 = v8 & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
        *(_QWORD *)(v7 + 80) = v9 + 1;
        v10 = *(_QWORD *)(a1 + 1824);
        if (v10)
          *(_DWORD *)(v10 + 4) = *(_DWORD *)(a1 + 1816);
        *(_QWORD *)(a1 + 1808) = 0;
        *(_DWORD *)(a1 + 1816) = 0;
        *(_QWORD *)(a1 + 1824) = 0;
        *(_QWORD *)(a1 + 1832) = 0;
      }
      v19 = 0;
      *(_BYTE *)(a1 + 2032) = 1;
      AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(a1 + 1656, (_QWORD *)(a1 + 16), (int *)&v19 + 1);
      AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitNopDbgVDMFlush(a1);
      AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(a1 + 1656, (_QWORD *)(a1 + 16), (int *)&v19 + 1, v11, v12);
      AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(a1 + 1656, (_QWORD *)(a1 + 16), (_DWORD *)(a1 + 21264), &v19, v13, v14);
      *(_QWORD *)(a1 + 21152) |= 0x10000000000000uLL;
    }
  }
}

void sub_232D08228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::commitCommon(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t BackgroundObjectProgramVariant;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int32x4_t *EOTProgramVariant;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned __int32 v40;
  unsigned __int32 v41;
  void *v42;
  int *v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  double result;
  uint64_t v78;
  __int128 v79;
  void *__p;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _DWORD v108[158];
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  _OWORD v113[14];
  uint64_t v114;
  unsigned __int8 v115[16];

  if (!a2)
    goto LABEL_74;
  v3 = *(_QWORD *)(a1 + 1736);
  if (*(_QWORD *)(v3 + 8) && (*(_WORD *)(v3 + 328) & 2) != 0)
  {
    v4 = *(unsigned __int8 *)(v3 + 2988);
    goto LABEL_9;
  }
  if (*(_QWORD *)(v3 + 128))
  {
    v4 = *(unsigned __int8 *)(v3 + 2988);
    if ((*(_WORD *)(v3 + 328) & 8) == 0)
    {
      if (!*(_BYTE *)(v3 + 2988))
        goto LABEL_74;
      goto LABEL_12;
    }
LABEL_9:
    AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeScratchRender((_QWORD *)a1, 1u, v4 == 0);
    if (!v4)
      goto LABEL_74;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(v3 + 2988))
    goto LABEL_74;
LABEL_12:
  v5 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(a1, 1064);
  if (objc_msgSend(*(id *)a1, "skipRender"))
  {
    v78 = *(_QWORD *)(a1 + 1552) - *(_QWORD *)(a1 + 1568);
    *(_DWORD *)(v78 + 12) = 1;
    if ((*(_BYTE *)(v78 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)a1 + 688) = 1;
  }
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)(v5 + 5) = 0x200000400;
  v6 = v5 + 8;
  v7 = *(_QWORD *)(a1 + 21176);
  if (v7 && (v8 = *(_DWORD *)(v7 + 528)) != 0)
  {
    v9 = ((2 * v8 + 7) & 0xFFFFFFF8) + 16;
    LODWORD(v79) = 0;
    v10 = AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(a1 + 1464), v9, 1u, (unsigned int *)&v79);
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 12) = v8;
    v11 = v79;
    v5[2] = v9;
    v5[3] = v11;
    AGX::FenceList::copyFences(v7, (unsigned __int16 *)(v10 + 16));
    *(_QWORD *)(a1 + 21400) |= 0x100uLL;
  }
  else
  {
    v5[2] = 0;
  }
  bzero(v5 + 8, 0x400uLL);
  v5[262] = 1;
  v12 = *(_QWORD *)(a1 + 1496);
  v13 = *(_QWORD *)(a1 + 1736);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 336) + 808);
  DWORD2(v79) = 13;
  v81 = 0uLL;
  __p = 0;
  *(_QWORD *)&v79 = off_2504019E0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  BackgroundObjectProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBackgroundObjectProgramVariant(v14, (uint64_t)&v79, 0);
  v16 = (uint64_t *)(a1 + 16);
  *(_QWORD *)&v79 = off_250401A20;
  if (__p)
  {
    *(_QWORD *)&v81 = __p;
    operator delete(__p);
  }
  v17 = *(_OWORD *)(v13 + 2432);
  v18 = *(_OWORD *)(v13 + 2464);
  v113[12] = *(_OWORD *)(v13 + 2448);
  v113[13] = v18;
  v114 = *(_QWORD *)(v13 + 2480);
  v19 = *(_OWORD *)(v13 + 2368);
  v20 = *(_OWORD *)(v13 + 2400);
  v113[8] = *(_OWORD *)(v13 + 2384);
  v113[9] = v20;
  v21 = *(_OWORD *)(v13 + 2416);
  v113[11] = v17;
  v113[10] = v21;
  v22 = *(_OWORD *)(v13 + 2304);
  v23 = *(_OWORD *)(v13 + 2336);
  v113[4] = *(_OWORD *)(v13 + 2320);
  v113[5] = v23;
  v24 = *(_OWORD *)(v13 + 2352);
  v113[7] = v19;
  v113[6] = v24;
  v25 = *(_OWORD *)(v13 + 2272);
  v113[0] = *(_OWORD *)(v13 + 2256);
  v113[1] = v25;
  v26 = *(_OWORD *)(v13 + 2288);
  v113[3] = v22;
  v113[2] = v26;
  v27 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitBackgroundObjectArguments(v12, (_QWORD *)(a1 + 16), BackgroundObjectProgramVariant, (uint64_t)v113, v13 + 2488);
  v28 = *(_QWORD *)(BackgroundObjectProgramVariant + 2824);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(BackgroundObjectProgramVariant + 2808);
  *((_QWORD *)v6 + 18) = v27;
  *((_QWORD *)v6 + 19) = v28;
  v29 = *(_DWORD *)(BackgroundObjectProgramVariant + 296);
  if (*(_DWORD *)(a1 + 1724) > v29)
    v29 = *(_DWORD *)(a1 + 1724);
  if (v29 <= *(_DWORD *)(BackgroundObjectProgramVariant + 308))
    v29 = *(_DWORD *)(BackgroundObjectProgramVariant + 308);
  *(_DWORD *)(a1 + 1724) = v29;
  v30 = *(_DWORD *)(BackgroundObjectProgramVariant + 328);
  if (*(_DWORD *)(a1 + 1732) > v30)
    v30 = *(_DWORD *)(a1 + 1732);
  if (v30 <= *(_DWORD *)(BackgroundObjectProgramVariant + 340))
    v30 = *(_DWORD *)(BackgroundObjectProgramVariant + 340);
  *(_DWORD *)(a1 + 1732) = v30;
  *(_DWORD *)(a1 + 1728) = *(_DWORD *)(BackgroundObjectProgramVariant + 292);
  EOTProgramVariant = (int32x4_t *)AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getEOTProgramVariant(v13, 2);
  v112 = 0;
  v79 = xmmword_232D73730;
  __p = (void *)0xDEADBEEFBAADC0DELL;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v107 = 0;
  bzero(v108, 0x410uLL);
  v32 = *(_DWORD *)(v13 + 2188) > 1u;
  *(_WORD *)v115 = 513;
  v115[2] = 2 * v32;
  *(_QWORD *)&v115[4] = 2;
  if (((2 * v32) & 2) != 0)
    v33 = 4;
  else
    v33 = 2;
  v34 = 17448;
  if (v115[0] != 1)
    v34 = -8;
  v109 = v34 | v33;
  v110 = 0x8000000000000000;
  v111 = 0x80000000000;
  v108[0] = 0;
  v35 = AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitEndOfTileArgumentsEarly(v12, (_QWORD *)(a1 + 16), EOTProgramVariant, &v112);
  v36 = (unsigned int *)EOTProgramVariant->i64[1];
  v37 = (unint64_t)(EOTProgramVariant[1].i64[0] - (_QWORD)v36) >> 2;
  if ((_DWORD)v37)
  {
    v38 = v112;
    do
    {
      v39 = *v36++;
      *v38++ = *((_DWORD *)&v79 + v39);
      LODWORD(v37) = v37 - 1;
    }
    while ((_DWORD)v37);
  }
  v6[44] = v35;
  v6[45] = EOTProgramVariant[69].i64[1];
  v6[46] = EOTProgramVariant[70].i32[2];
  v40 = EOTProgramVariant[4].u32[1];
  if (*(_DWORD *)(a1 + 1724) > v40)
    v40 = *(_DWORD *)(a1 + 1724);
  if (v40 <= EOTProgramVariant[4].i32[3])
    v40 = EOTProgramVariant[4].u32[3];
  *(_DWORD *)(a1 + 1724) = v40;
  v41 = EOTProgramVariant[5].u32[0];
  if (*(_DWORD *)(a1 + 1732) > v41)
    v41 = *(_DWORD *)(a1 + 1732);
  if (v41 <= EOTProgramVariant[5].i32[2])
    v41 = EOTProgramVariant[5].u32[2];
  *(_DWORD *)(a1 + 1732) = v41;
  *(_DWORD *)(a1 + 1728) = EOTProgramVariant[5].i32[3];
  v42 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5496);
  *((_QWORD *)&v79 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  __p = v42;
  LODWORD(v79) = 0;
  LOBYTE(v81) = 0;
  if (v40)
  {
    LODWORD(v79) = v40;
    LOBYTE(v81) = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v79, (_QWORD *)v6 + 63, *(_QWORD *)(a1 + 1488), (uint64_t)v113))
    {
      IOGPUResourceListAddResource();
    }
  }
  v43 = (int *)(a1 + 21288);
  v44 = *(_QWORD *)(a1 + 1736);
  v45 = *(_DWORD *)(v44 + 2176);
  *(_QWORD *)&v46 = *(_QWORD *)(v44 + 2180);
  v47 = *(_DWORD *)(v44 + 2972);
  *((_QWORD *)&v46 + 1) = *(_QWORD *)(v44 + 2192);
  v48 = *(_OWORD *)(v44 + 2200);
  v49 = *(_OWORD *)(v44 + 2216);
  v50 = *(_OWORD *)(v44 + 2232);
  v51 = *(_QWORD *)(v44 + 2248);
  *((_QWORD *)v6 + 115) = 0;
  v6[232] = v45;
  *(_OWORD *)(v6 + 233) = v46;
  *(_OWORD *)(v6 + 237) = v48;
  *(_OWORD *)(v6 + 241) = v49;
  *(_OWORD *)(v6 + 245) = v50;
  *(_QWORD *)(v6 + 249) = v51;
  v6[251] = v47;
  *((_QWORD *)v6 + 126) = 0;
  if (!*(_QWORD *)(a1 + 21272))
  {
    v53 = (_QWORD *)(a1 + 1516);
LABEL_52:
    *((_QWORD *)v6 + 98) = -1;
    v6[198] = -1;
    goto LABEL_53;
  }
  if (*(_QWORD *)(a1 + 1480))
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  v52 = *(void **)(a1 + 21272);
  v53 = (_QWORD *)(a1 + 1516);
  if (!v52)
    goto LABEL_52;
  v55 = *v43;
  v54 = *(_DWORD *)(a1 + 21292);
  if ((*v43 & v54) == 0xFFFFFFFF)
    goto LABEL_52;
  v6[196] = objc_msgSend(v52, "resourceID");
  v6[197] = v55;
  v6[198] = v54;
LABEL_53:
  *v43 = -1;
  *((_BYTE *)v6 + 812) = *(_BYTE *)(a1 + 1512);
  v6[202] = *(_DWORD *)(a1 + 1508);
  *((_QWORD *)v6 + 102) = *v53;
  v56 = *(_QWORD *)(a1 + 1736);
  v57 = *(_QWORD *)(v56 + 3056);
  v58 = *(_QWORD *)(v56 + 3080);
  v59 = *(_QWORD *)(v56 + 3088);
  v60 = *(_QWORD *)(v56 + 3096);
  *((_QWORD *)v6 + 31) = v57;
  *((_OWORD *)v6 + 17) = *(_OWORD *)(v56 + 3064);
  *((_QWORD *)v6 + 40) = v58;
  *((_QWORD *)v6 + 45) = v59;
  *((_QWORD *)v6 + 50) = v60;
  v61 = *(unsigned __int16 *)(v56 + 3110);
  if ((v61 & 0xA) != 0)
    v62 = (2 * ((v61 & 5) != 0)) | 4;
  else
    v62 = 2 * ((v61 & 5) != 0);
  *((_QWORD *)v6 + 31) = v57 | ((_DWORD)v61 << 12) & 0x4000 | ((_DWORD)v61 << 15) & 0x40000 | v62 & 0xFFFFFFFFFFF77FFFLL | ((v61 & 1) << 15) | (((v61 >> 1) & 1) << 19);
  if ((v61 & 5) != 0)
    v6[195] = 2;
  if ((v61 & 0xA) != 0 && *(_BYTE *)(v56 + 2928))
    v6[195] = 2;
  v6[188] = *(_DWORD *)(v56 + 2952);
  v6[189] = *(unsigned __int8 *)(v56 + 2960) | 0x300;
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addAPIResources(v56, *(_QWORD *)(a1 + 1480), *(_QWORD *)(a1 + 1488));
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addGPUResources(*(_QWORD *)(a1 + 1736), *(_QWORD *)(a1 + 1496), 63);
  *((_QWORD *)v6 + 100) = 0;
  v63 = *(_QWORD *)(a1 + 1552);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520))
  {
    v64 = v63 - *(_QWORD *)(a1 + 1568);
  }
  else
  {
    v64 = v63 - *(_QWORD *)(a1 + 1568);
    *(_DWORD *)(v64 + 12) = 1;
    if ((*(_BYTE *)(v64 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)a1 + 688) = 1;
  }
  v65 = 0;
  v66 = 0;
  *(_DWORD *)(v64 + 24) = 0;
  v67 = a1 + 56;
  do
  {
    v68 = *v16;
    if (*(_DWORD *)(*v16 + v65 + 24))
    {
      v69 = (_QWORD *)(v67 + v65);
      if (*(_QWORD *)(v67 + v65 + 8))
      {
        v70 = *(_QWORD *)(a1 + 40);
        if (*(_DWORD *)(a1 + 1440))
          AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1 + 16, (_QWORD *)(v70 + v66));
        if (*v69 == *(_QWORD *)(v70 + v66 + 16) - (*(_QWORD *)(v68 + v65 + 16) + *(_QWORD *)(v68 + v65 + 8)))
          *(_QWORD *)(v70 + v66 + 24) = v69[1];
      }
    }
    v66 += 64;
    v65 += 32;
  }
  while (v66 != 2176);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) = *(_QWORD *)(a1 + 1552);
  IOGPUMetalCommandBufferStorageEndSegment();
  *(_BYTE *)(a1 + 1504) = 0;
LABEL_74:
  v71 = (unint64_t *)(*(_QWORD *)(a1 + 1456) + 816);
  v72 = *(_QWORD *)(a1 + 21392);
  v73 = *(_QWORD *)(a1 + 21400);
  do
    v74 = __ldaxr(v71);
  while (__stlxr(v74 | v72, v71));
  v75 = v71 + 1;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 | v73, v75));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1480) = 0u;
  return result;
}

void sub_232D08A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::PointerWithOnDemandObjectCreation<AGX::G9::NopGeometryPipelineContext>::~PointerWithOnDemandObjectCreation(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = a1 + 5;
  v9 = *a1;
  v3 = a1[8];
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v9);
    v4 = (_QWORD *)a1[8];
    if (v4 == v2)
    {
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_7;
      v5 = 5;
      v2 = (_QWORD *)a1[8];
    }
    (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_7:
    v6 = (uint64_t *)a1[4];
    if (v6 == a1 + 1)
    {
      v7 = 4;
      v6 = a1 + 1;
    }
    else
    {
      if (!v6)
        return (uint64_t)a1;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    return (uint64_t)a1;
  }
  result = std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
  return result;
}

void sub_232D08B6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (_QWORD *)v1[8];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[8];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  v6 = (_QWORD *)v1[4];
  if (v6 == v1 + 1)
  {
    v7 = 4;
    v6 = v1 + 1;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
  JUMPOUT(0x234927ECCLL);
}

_QWORD *std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2504024F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2504024F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t os_unfair_lock_opaque;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(os_unfair_lock_s **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1456) + 808);
    os_unfair_lock_lock(v3 + 1509);
    os_unfair_lock_opaque = v3[1508]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 7)
    {
      os_unfair_lock_unlock(v3 + 1509);
      free(v2);
    }
    else
    {
      v3[1508]._os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(_QWORD *)&v3[2 * os_unfair_lock_opaque + 1510]._os_unfair_lock_opaque = v2;
      os_unfair_lock_unlock(v3 + 1509);
    }
  }
}

void std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1}>,AGX::G9::NopGeometryPipelineContext * ()(void)>::~__func()
{
  JUMPOUT(0x234927ECCLL);
}

_QWORD *std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1}>,AGX::G9::NopGeometryPipelineContext * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2504024A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1}>,AGX::G9::NopGeometryPipelineContext * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2504024A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::{lambda(void)#1}>,AGX::G9::NopGeometryPipelineContext * ()(void)>::operator()(uint64_t a1)
{
  AGX::PooledAllocator<8u>::allocate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1456) + 808) + 6024, 0x18uLL);
  AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginRenderPass(BOOL)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
}

void AGX::G9::SWTessellationContext::~SWTessellationContext(AGX::G9::SWTessellationContext *this)
{
  JUMPOUT(0x234927ECCLL);
}

uint64_t AGX::SWTessellationContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setTessellationFactorBuffer(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v5 = result;
  if (a2)
  {
    v6 = a2 + (int)*MEMORY[0x24BE51650];
    v7 = *(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFFFLL;
    v8 = *(_QWORD **)(result + 8);
    v8[438] = *(_QWORD *)(v6 + 8) + a3;
    v8[501] = v7;
    v8[1962] = v6;
    v9 = *(_QWORD **)(result + 8);
    result = v9[185];
    if (result)
    {
      result = MTLResourceListAddResource();
      v9 = *(_QWORD **)(v5 + 8);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(result + 8) + 15696) = 0;
    v9 = *(_QWORD **)(result + 8);
    v9[438] = 0;
    v9[501] = 0;
  }
  v9[2620] |= 0x800000000uLL;
  v9[2623] |= 0x800000000uLL;
  v9[2644] |= 0xC0uLL;
  *(_DWORD *)(v5 + 20) = a4;
  return result;
}

uint64_t AGX::SWTessellationContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setTessellationFactorScale(uint64_t result, float a2)
{
  *(float *)(result + 16) = a2;
  return result;
}

void ___ZN3AGX34RenderIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20getVDMPatchUpVariantEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t (**v19)();
  int v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];
  size_t v31;
  const void *v32;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  __int128 md;
  __int128 v37;
  CC_SHA256_CTX *p_c;
  uint64_t v39;
  __int128 v40;
  size_t v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v25 = off_2504022F0;
  v26 = 20;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 5464);
  v3 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3321888768;
  v18[2] = ___ZN3AGX34RenderIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20getVDMPatchUpVariantEPNS1_6DeviceE_block_invoke_2;
  v18[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken20ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v19 = off_2504022F0;
  v20 = 20;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v24 = v1;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setSync:", 1);
  objc_msgSend(v5, "setPipelineCache:", v4);
  objc_msgSend(v5, "setBinaryArchives:", 0);
  v30[0] = v3;
  v30[1] = 3221225472;
  v30[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v30[3] = &unk_2504023B8;
  v30[4] = v18;
  v31 = 0;
  v32 = 0;
  ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)&v25, &v32, &v31);
  v6 = dispatch_data_create(v32, v31, 0, 0);
  objc_msgSend(v5, "setDriverKeyData:", v6);
  if (objc_msgSend(v5, "airScript"))
  {
    v7 = objc_msgSend(v5, "airScript");
    v40 = 0uLL;
    v41[0] = 0;
    *(_QWORD *)&v40 = dispatch_data_create_map(v7, (const void **)&v40 + 1, v41);
    v8 = *((_QWORD *)&v40 + 1);
    v9 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    ((void (*)(uint64_t (***)(), CC_SHA256_CTX *))*v25)(&v25, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v8 + v9), &data, (size_t *)len, v10, v11))
    {
      v12 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v12);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v40);
    v40 = md;
    *(_OWORD *)v41 = v37;
    objc_msgSend(v5, "setVendorPluginFunctionId:", &v40);
  }
  *(_QWORD *)c.count = v3;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v5;
  *(_QWORD *)c.wbuf = v30;
  if (objc_msgSend(v5, "function"))
  {
    v13 = mach_absolute_time();
    v14 = *(void **)v2;
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v37 + 1) = &unk_250402458;
    p_c = &c;
    v39 = v13;
    objc_msgSend(v14, "compileFunctionRequest:completionHandler:", v5, &md);
  }
  else
  {
    if (objc_msgSend(v5, "frameworkData") || objc_msgSend(v5, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v37 + 1) = &unk_250402430;
    p_c = &c;
    v15 = objc_msgSend((id)objc_msgSend(v5, "binaryArchives"), "count");
    v16 = *(void **)v2;
    v17 = objc_msgSend(v5, "driverKeyData");
    if (v15)
      objc_msgSend(v16, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "binaryArchives"), 0, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
    else
      objc_msgSend(v16, "compileRequest:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
  }
  dispatch_release(v6);

  v19 = off_2504022F0;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v25 = off_2504022F0;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_232D091D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  dispatch_release(*(dispatch_object_t *)(v23 - 128));
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void ___ZN3AGX34RenderIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24getRangeExecutionVariantEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t (**v19)();
  int v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];
  size_t v31;
  const void *v32;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  __int128 md;
  __int128 v37;
  CC_SHA256_CTX *p_c;
  uint64_t v39;
  __int128 v40;
  size_t v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v25 = off_250402330;
  v26 = 21;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 5464);
  v3 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3321888768;
  v18[2] = ___ZN3AGX34RenderIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24getRangeExecutionVariantEPNS1_6DeviceE_block_invoke_2;
  v18[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken21ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v19 = off_250402330;
  v20 = 21;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v24 = v1;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setSync:", 1);
  objc_msgSend(v5, "setPipelineCache:", v4);
  objc_msgSend(v5, "setBinaryArchives:", 0);
  v30[0] = v3;
  v30[1] = 3221225472;
  v30[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v30[3] = &unk_2504023B8;
  v30[4] = v18;
  v31 = 0;
  v32 = 0;
  ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)&v25, &v32, &v31);
  v6 = dispatch_data_create(v32, v31, 0, 0);
  objc_msgSend(v5, "setDriverKeyData:", v6);
  if (objc_msgSend(v5, "airScript"))
  {
    v7 = objc_msgSend(v5, "airScript");
    v40 = 0uLL;
    v41[0] = 0;
    *(_QWORD *)&v40 = dispatch_data_create_map(v7, (const void **)&v40 + 1, v41);
    v8 = *((_QWORD *)&v40 + 1);
    v9 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    ((void (*)(uint64_t (***)(), CC_SHA256_CTX *))*v25)(&v25, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v8 + v9), &data, (size_t *)len, v10, v11))
    {
      v12 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v12);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v40);
    v40 = md;
    *(_OWORD *)v41 = v37;
    objc_msgSend(v5, "setVendorPluginFunctionId:", &v40);
  }
  *(_QWORD *)c.count = v3;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v5;
  *(_QWORD *)c.wbuf = v30;
  if (objc_msgSend(v5, "function"))
  {
    v13 = mach_absolute_time();
    v14 = *(void **)v2;
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v37 + 1) = &unk_250402458;
    p_c = &c;
    v39 = v13;
    objc_msgSend(v14, "compileFunctionRequest:completionHandler:", v5, &md);
  }
  else
  {
    if (objc_msgSend(v5, "frameworkData") || objc_msgSend(v5, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v37 + 1) = &unk_250402430;
    p_c = &c;
    v15 = objc_msgSend((id)objc_msgSend(v5, "binaryArchives"), "count");
    v16 = *(void **)v2;
    v17 = objc_msgSend(v5, "driverKeyData");
    if (v15)
      objc_msgSend(v16, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "binaryArchives"), 0, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
    else
      objc_msgSend(v16, "compileRequest:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
  }
  dispatch_release(v6);

  v19 = off_250402330;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v25 = off_250402330;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_232D095B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  dispatch_release(*(dispatch_object_t *)(v23 - 128));
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX34RenderIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24getRangeExecutionVariantEPNS1_6DeviceE_block_invoke_2(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  uint64_t v11;
  const char *v14;
  const char *v15;
  const char *v16;
  _QWORD v17[3];
  uint64_t v18[54];
  std::string v19;

  if (a3)
  {
    v14 = "MTLCompilerErrorTimeout";
    v15 = "UnknownErrorCode";
    if (a3 == 2)
      v15 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v14 = v15;
    if (a3 == 1)
      v16 = "MTLCompilerErrorFatalError";
    else
      v16 = v14;
    v19.__r_.__value_.__r.__words[0] = 0;
    v17[0] = 0;
    ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v19, v17);
    v18[0] = a4;
    v18[1] = (uint64_t)v16;
    v18[2] = v17[0];
    v18[3] = v19.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 72);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v18, a2, 0, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v17, a2);
  *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
  v19.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v6, v7, (uint64_t)a2, &v19, (uint64_t)v18, 0, v17, 0, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  *v6 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v18);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize((uint64_t)v6);
  v11 = operator new();
  bzero((void *)v11, 0x8B0uLL);
  *(_QWORD *)(v11 + 792) = 0x3F80000000000001;
  *(_QWORD *)(v11 + 800) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v11 + 812) = xmmword_232D73520;
  *(_DWORD *)(v11 + 852) = 0;
  *(_QWORD *)(v11 + 828) = 0;
  *(_DWORD *)(v11 + 835) = 0;
  *(_OWORD *)(v11 + 856) = xmmword_232D73530;
  *(_QWORD *)(v11 + 872) = 3840;
  *(_QWORD *)(v11 + 880) = 0x1E3CE50800210000;
  *(_DWORD *)(v11 + 888) = 1184;
  *(_OWORD *)(v11 + 1000) = 0u;
  *(_OWORD *)(v11 + 1016) = 0u;
  *(_OWORD *)(v11 + 1032) = 0u;
  *(_QWORD *)(v11 + 1144) = 0;
  *(_QWORD *)(v11 + 1136) = 0;
  *(_BYTE *)(v11 + 1152) = 0;
  *(_OWORD *)(v11 + 1160) = 0u;
  *(_OWORD *)(v11 + 1176) = 0u;
  *(_OWORD *)(v11 + 1192) = 0u;
  *(_OWORD *)(v11 + 1205) = 0u;
  *(_QWORD *)(v11 + 1232) = 0;
  *(_QWORD *)(v11 + 1224) = 0;
  *(_BYTE *)(v11 + 1240) = 0;
  *(_OWORD *)(v11 + 1248) = 0u;
  *(_OWORD *)(v11 + 1264) = 0u;
  *(_OWORD *)(v11 + 1280) = 0u;
  *(_OWORD *)(v11 + 1293) = 0u;
  *(_QWORD *)(v11 + 1312) = 0;
  *(_QWORD *)(v11 + 1320) = 0;
  *(_BYTE *)(v11 + 1328) = 0;
  *(_OWORD *)(v11 + 1336) = 0u;
  *(_OWORD *)(v11 + 1352) = 0u;
  *(_OWORD *)(v11 + 1368) = 0u;
  *(_OWORD *)(v11 + 1381) = 0u;
  *(_QWORD *)(v11 + 1400) = 0;
  *(_QWORD *)(v11 + 1408) = 0;
  *(_BYTE *)(v11 + 1416) = 0;
  *(_OWORD *)(v11 + 1424) = 0u;
  *(_OWORD *)(v11 + 1440) = 0u;
  *(_OWORD *)(v11 + 1456) = 0u;
  *(_OWORD *)(v11 + 1469) = 0u;
  *(_QWORD *)(v11 + 1496) = 0;
  *(_QWORD *)(v11 + 1488) = 0;
  *(_BYTE *)(v11 + 1504) = 0;
  *(_DWORD *)(v11 + 992) = 0;
  *(_OWORD *)(v11 + 960) = 0u;
  *(_OWORD *)(v11 + 976) = 0u;
  *(_OWORD *)(v11 + 928) = 0u;
  *(_OWORD *)(v11 + 944) = 0u;
  *(_OWORD *)(v11 + 896) = 0u;
  *(_OWORD *)(v11 + 912) = 0u;
  *(_QWORD *)(v11 + 1125) = 0;
  *(_OWORD *)(v11 + 1096) = 0u;
  *(_OWORD *)(v11 + 1112) = 0u;
  *(_OWORD *)(v11 + 1064) = 0u;
  *(_OWORD *)(v11 + 1080) = 0u;
  *(_QWORD *)(v11 + 1656) = 0;
  *(_OWORD *)(v11 + 1624) = 0u;
  *(_OWORD *)(v11 + 1640) = 0u;
  *(_OWORD *)(v11 + 1592) = 0u;
  *(_OWORD *)(v11 + 1608) = 0u;
  *(_OWORD *)(v11 + 1560) = 0u;
  *(_OWORD *)(v11 + 1576) = 0u;
  *(_OWORD *)(v11 + 1528) = 0u;
  *(_OWORD *)(v11 + 1544) = 0u;
  *(_OWORD *)(v11 + 1512) = 0u;
  *(_DWORD *)(v11 + 1664) = 1065353216;
  *(_OWORD *)(v11 + 1688) = 0u;
  *(_OWORD *)(v11 + 1672) = 0u;
  *(_DWORD *)(v11 + 1704) = 1065353216;
  *(_OWORD *)(v11 + 1728) = 0u;
  *(_OWORD *)(v11 + 1712) = 0u;
  *(_DWORD *)(v11 + 1744) = 1065353216;
  *(_OWORD *)(v11 + 1768) = 0u;
  *(_OWORD *)(v11 + 1752) = 0u;
  *(_DWORD *)(v11 + 1784) = 1065353216;
  *(_OWORD *)(v11 + 1808) = 0u;
  *(_OWORD *)(v11 + 1792) = 0u;
  *(_DWORD *)(v11 + 1824) = 1065353216;
  *(_OWORD *)(v11 + 1832) = 0u;
  *(_OWORD *)(v11 + 1848) = 0u;
  *(_DWORD *)(v11 + 1864) = 1065353216;
  *(_QWORD *)(v11 + 1904) = 0;
  *(_OWORD *)(v11 + 1888) = 0u;
  *(_OWORD *)(v11 + 1872) = 0u;
  *(_DWORD *)(v11 + 1912) = 1065353216;
  *(_OWORD *)(v11 + 2184) = 0u;
  *(_OWORD *)(v11 + 2200) = 0u;
  *(_OWORD *)(v11 + 2152) = 0u;
  *(_OWORD *)(v11 + 2168) = 0u;
  *(_OWORD *)(v11 + 2120) = 0u;
  *(_OWORD *)(v11 + 2136) = 0u;
  *(_OWORD *)(v11 + 2088) = 0u;
  *(_OWORD *)(v11 + 2104) = 0u;
  *(_OWORD *)(v11 + 2056) = 0u;
  *(_OWORD *)(v11 + 2072) = 0u;
  *(_OWORD *)(v11 + 2024) = 0u;
  *(_OWORD *)(v11 + 2040) = 0u;
  *(_OWORD *)(v11 + 1992) = 0u;
  *(_OWORD *)(v11 + 2008) = 0u;
  *(_OWORD *)(v11 + 1960) = 0u;
  *(_OWORD *)(v11 + 1976) = 0u;
  *(_OWORD *)(v11 + 1928) = 0u;
  *(_OWORD *)(v11 + 1944) = 0u;
  AGX::RenderIndirectExecutionContextGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getRangeExecutionVariant(AGX::G9::Device *)::range_execution_pipeline = v11;
  *(_BYTE *)(v11 + 808) = 0;
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(v11, *(_QWORD *)(a1 + 72), (uint64_t)v6);
}

void sub_232D09948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 49) < 0)
    operator delete(*(void **)(v7 - 72));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232D09C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken21ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[4] = off_250402330;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  v3 = *(_BYTE **)(a2 + 48);
  v2 = *(_BYTE **)(a2 + 56);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[6] = v6;
    v5[7] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken21ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[4] = off_250402330;
  v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ___ZN3AGX34RenderIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20getVDMPatchUpVariantEPNS1_6DeviceE_block_invoke_2(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  uint64_t v11;
  const char *v14;
  const char *v15;
  const char *v16;
  _QWORD v17[3];
  uint64_t v18[54];
  std::string v19;

  if (a3)
  {
    v14 = "MTLCompilerErrorTimeout";
    v15 = "UnknownErrorCode";
    if (a3 == 2)
      v15 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v14 = v15;
    if (a3 == 1)
      v16 = "MTLCompilerErrorFatalError";
    else
      v16 = v14;
    v19.__r_.__value_.__r.__words[0] = 0;
    v17[0] = 0;
    ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v19, v17);
    v18[0] = a4;
    v18[1] = (uint64_t)v16;
    v18[2] = v17[0];
    v18[3] = v19.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a1 + 72);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v18, a2, 0, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v17, a2);
  *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
  v19.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v6, v7, (uint64_t)a2, &v19, (uint64_t)v18, 0, v17, 0, 0);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  *v6 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v18);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize((uint64_t)v6);
  v11 = operator new();
  bzero((void *)v11, 0x8B0uLL);
  *(_QWORD *)(v11 + 792) = 0x3F80000000000001;
  *(_QWORD *)(v11 + 800) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v11 + 812) = xmmword_232D73520;
  *(_DWORD *)(v11 + 852) = 0;
  *(_QWORD *)(v11 + 828) = 0;
  *(_DWORD *)(v11 + 835) = 0;
  *(_OWORD *)(v11 + 856) = xmmword_232D73530;
  *(_QWORD *)(v11 + 872) = 3840;
  *(_QWORD *)(v11 + 880) = 0x1E3CE50800210000;
  *(_DWORD *)(v11 + 888) = 1184;
  *(_OWORD *)(v11 + 1000) = 0u;
  *(_OWORD *)(v11 + 1016) = 0u;
  *(_OWORD *)(v11 + 1032) = 0u;
  *(_QWORD *)(v11 + 1144) = 0;
  *(_QWORD *)(v11 + 1136) = 0;
  *(_BYTE *)(v11 + 1152) = 0;
  *(_OWORD *)(v11 + 1160) = 0u;
  *(_OWORD *)(v11 + 1176) = 0u;
  *(_OWORD *)(v11 + 1192) = 0u;
  *(_OWORD *)(v11 + 1205) = 0u;
  *(_QWORD *)(v11 + 1232) = 0;
  *(_QWORD *)(v11 + 1224) = 0;
  *(_BYTE *)(v11 + 1240) = 0;
  *(_OWORD *)(v11 + 1248) = 0u;
  *(_OWORD *)(v11 + 1264) = 0u;
  *(_OWORD *)(v11 + 1280) = 0u;
  *(_OWORD *)(v11 + 1293) = 0u;
  *(_QWORD *)(v11 + 1312) = 0;
  *(_QWORD *)(v11 + 1320) = 0;
  *(_BYTE *)(v11 + 1328) = 0;
  *(_OWORD *)(v11 + 1336) = 0u;
  *(_OWORD *)(v11 + 1352) = 0u;
  *(_OWORD *)(v11 + 1368) = 0u;
  *(_OWORD *)(v11 + 1381) = 0u;
  *(_QWORD *)(v11 + 1400) = 0;
  *(_QWORD *)(v11 + 1408) = 0;
  *(_BYTE *)(v11 + 1416) = 0;
  *(_OWORD *)(v11 + 1424) = 0u;
  *(_OWORD *)(v11 + 1440) = 0u;
  *(_OWORD *)(v11 + 1456) = 0u;
  *(_OWORD *)(v11 + 1469) = 0u;
  *(_QWORD *)(v11 + 1496) = 0;
  *(_QWORD *)(v11 + 1488) = 0;
  *(_BYTE *)(v11 + 1504) = 0;
  *(_DWORD *)(v11 + 992) = 0;
  *(_OWORD *)(v11 + 960) = 0u;
  *(_OWORD *)(v11 + 976) = 0u;
  *(_OWORD *)(v11 + 928) = 0u;
  *(_OWORD *)(v11 + 944) = 0u;
  *(_OWORD *)(v11 + 896) = 0u;
  *(_OWORD *)(v11 + 912) = 0u;
  *(_QWORD *)(v11 + 1125) = 0;
  *(_OWORD *)(v11 + 1096) = 0u;
  *(_OWORD *)(v11 + 1112) = 0u;
  *(_OWORD *)(v11 + 1064) = 0u;
  *(_OWORD *)(v11 + 1080) = 0u;
  *(_QWORD *)(v11 + 1656) = 0;
  *(_OWORD *)(v11 + 1624) = 0u;
  *(_OWORD *)(v11 + 1640) = 0u;
  *(_OWORD *)(v11 + 1592) = 0u;
  *(_OWORD *)(v11 + 1608) = 0u;
  *(_OWORD *)(v11 + 1560) = 0u;
  *(_OWORD *)(v11 + 1576) = 0u;
  *(_OWORD *)(v11 + 1528) = 0u;
  *(_OWORD *)(v11 + 1544) = 0u;
  *(_OWORD *)(v11 + 1512) = 0u;
  *(_DWORD *)(v11 + 1664) = 1065353216;
  *(_OWORD *)(v11 + 1688) = 0u;
  *(_OWORD *)(v11 + 1672) = 0u;
  *(_DWORD *)(v11 + 1704) = 1065353216;
  *(_OWORD *)(v11 + 1728) = 0u;
  *(_OWORD *)(v11 + 1712) = 0u;
  *(_DWORD *)(v11 + 1744) = 1065353216;
  *(_OWORD *)(v11 + 1768) = 0u;
  *(_OWORD *)(v11 + 1752) = 0u;
  *(_DWORD *)(v11 + 1784) = 1065353216;
  *(_OWORD *)(v11 + 1808) = 0u;
  *(_OWORD *)(v11 + 1792) = 0u;
  *(_DWORD *)(v11 + 1824) = 1065353216;
  *(_OWORD *)(v11 + 1832) = 0u;
  *(_OWORD *)(v11 + 1848) = 0u;
  *(_DWORD *)(v11 + 1864) = 1065353216;
  *(_QWORD *)(v11 + 1904) = 0;
  *(_OWORD *)(v11 + 1888) = 0u;
  *(_OWORD *)(v11 + 1872) = 0u;
  *(_DWORD *)(v11 + 1912) = 1065353216;
  *(_OWORD *)(v11 + 2184) = 0u;
  *(_OWORD *)(v11 + 2200) = 0u;
  *(_OWORD *)(v11 + 2152) = 0u;
  *(_OWORD *)(v11 + 2168) = 0u;
  *(_OWORD *)(v11 + 2120) = 0u;
  *(_OWORD *)(v11 + 2136) = 0u;
  *(_OWORD *)(v11 + 2088) = 0u;
  *(_OWORD *)(v11 + 2104) = 0u;
  *(_OWORD *)(v11 + 2056) = 0u;
  *(_OWORD *)(v11 + 2072) = 0u;
  *(_OWORD *)(v11 + 2024) = 0u;
  *(_OWORD *)(v11 + 2040) = 0u;
  *(_OWORD *)(v11 + 1992) = 0u;
  *(_OWORD *)(v11 + 2008) = 0u;
  *(_OWORD *)(v11 + 1960) = 0u;
  *(_OWORD *)(v11 + 1976) = 0u;
  *(_OWORD *)(v11 + 1928) = 0u;
  *(_OWORD *)(v11 + 1944) = 0u;
  AGX::RenderIndirectExecutionContextGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getVDMPatchUpVariant(AGX::G9::Device *)::execute_indirect_pipeline = v11;
  *(_BYTE *)(v11 + 808) = 0;
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(v11, *(_QWORD *)(a1 + 72), (uint64_t)v6);
}

void sub_232D0A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 49) < 0)
    operator delete(*(void **)(v7 - 72));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232D0A4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken20ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[4] = off_2504022F0;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  v3 = *(_BYTE **)(a2 + 48);
  v2 = *(_BYTE **)(a2 + 56);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[6] = v6;
    v5[7] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken20ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[4] = off_2504022F0;
  v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

double ___ZN3AGX20RenderPDSStateLoaderINS_2G98EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke()
{
  double result;

  *(_QWORD *)&result = 0x2000;
  xmmword_2542350C0 = xmmword_232D734B0;
  qword_2542350D0 = 12;
  dword_2542350D8 = 1;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::databuffer_configs = xmmword_232D734B0;
  qword_2542350B0 = 12;
  dword_2542350B8 = 1;
  xmmword_254235100 = xmmword_232D734C0;
  qword_254235110 = 12;
  dword_254235118 = 1;
  qword_254235128 = 0;
  unk_254235130 = 0;
  qword_254235120 = 0x2000;
  dword_254235138 = 4;
  xmmword_254235460 = xmmword_232D734C0;
  qword_254235470 = 12;
  dword_254235478 = 1;
  qword_254235148 = 0;
  unk_254235150 = 0;
  qword_254235140 = 0x2000;
  dword_254235158 = 1;
  qword_254235168 = 0;
  unk_254235170 = 0;
  qword_254235160 = 0x2000;
  dword_254235178 = 4;
  qword_2542352C0 = 0x2000;
  qword_2542352C8 = 0;
  qword_2542352D0 = 0;
  dword_2542352D8 = 1;
  qword_254235188 = 0;
  unk_254235190 = 0;
  qword_254235180 = 0x2000;
  dword_254235198 = 4;
  qword_2542351A0 = 0x2000;
  unk_2542351A8 = 0;
  qword_2542351B0 = 0;
  dword_2542351B8 = 4;
  qword_2542351C0 = 0x2000;
  unk_2542351C8 = 0;
  qword_2542351D0 = 0;
  dword_2542351D8 = 1;
  xmmword_2542351E0 = xmmword_232D734B0;
  qword_2542351F0 = 0;
  dword_2542351F8 = 1;
  xmmword_254235220 = xmmword_232D734C0;
  qword_254235230 = 2;
  dword_254235238 = 1;
  xmmword_254235240 = xmmword_232D734C0;
  qword_254235250 = 12;
  dword_254235258 = 1;
  qword_254235208 = 0;
  unk_254235210 = 0;
  qword_254235200 = 0x2000;
  dword_254235218 = 4;
  xmmword_254235280 = xmmword_232D734C0;
  qword_254235290 = 4;
  dword_254235298 = 1;
  xmmword_2542352A0 = xmmword_232D734C0;
  qword_2542352B0 = 4;
  dword_2542352B8 = 1;
  qword_254235300 = 0x2000;
  qword_254235310 = 0;
  qword_254235308 = 0;
  dword_254235318 = 1;
  return result;
}

void AGX::SampledRenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::duplicateShaderAddresses(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  AGXA10FamilyRenderPipeline *v4;
  void *v5;
  FragmentProgramVariant *fragment_variant;
  VertexProgramVariant *vertex_variant;
  TileProgramVariant *tile_variant;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD v19[5];

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 1456) + 808);
  v4 = objc_alloc_init(AGXA10FamilyRenderPipeline);
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::clone((uint64_t)&v4->_impl, (uint64_t *)(v2 + 144), *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 48) + 1456));
  v5 = **(void ***)(a1 + 48);
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = ___ZN3AGX20SampledRenderContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24duplicateShaderAddressesEv_block_invoke;
  v19[3] = &unk_250402530;
  v19[4] = v4;
  objc_msgSend(v5, "addCompletedHandler:", v19);
  fragment_variant = v4->_impl.fragment_variant;
  vertex_variant = v4->_impl.vertex_variant;
  tile_variant = v4->_impl.tile_variant;
  v9 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v9 + 1480))
    MTLResourceListAddResource();
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setRenderPipelineStateCommon(v9, (uint64_t)&v4->_impl);
  if (tile_variant)
  {
    v10 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36);
    v11 = *(unsigned __int8 *)(v3 + 6376);
    *(_BYTE *)v10 = 3;
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 1508);
    if (v11)
    {
      *(_DWORD *)(v10 + 4) = v12;
      *(_DWORD *)v10 = (*(_DWORD *)(a1 + 40) << 8) | 3;
    }
    else
    {
      *(_DWORD *)v10 = (v12 << 8) | 3;
      *(_DWORD *)(v10 + 4) = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(v10 + 8) = *((_QWORD *)tile_variant + 64);
    *(_QWORD *)(v10 + 16) = *((_QWORD *)tile_variant + 92) + *((_QWORD *)tile_variant + 64);
    *(_DWORD *)(a1 + 36) = (*(_DWORD *)(a1 + 36) + 1) % *(_DWORD *)(a1 + 32);
  }
  if (vertex_variant)
  {
    v13 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36);
    v14 = *(unsigned __int8 *)(v3 + 6376);
    *(_BYTE *)v13 = 1;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 1508);
    if (v14)
    {
      *(_DWORD *)(v13 + 4) = v15;
      *(_DWORD *)v13 = (*(_DWORD *)(a1 + 40) << 8) | 1;
    }
    else
    {
      *(_DWORD *)v13 = (v15 << 8) | 1;
      *(_DWORD *)(v13 + 4) = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(v13 + 8) = *((_QWORD *)vertex_variant + 64);
    *(_QWORD *)(v13 + 16) = *((_QWORD *)vertex_variant + 92) + *((_QWORD *)vertex_variant + 64);
    *(_DWORD *)(a1 + 36) = (*(_DWORD *)(a1 + 36) + 1) % *(_DWORD *)(a1 + 32);
  }
  if (fragment_variant)
  {
    v16 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36);
    v17 = *(unsigned __int8 *)(v3 + 6376);
    *(_BYTE *)v16 = 2;
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 1508);
    if (v17)
    {
      *(_DWORD *)(v16 + 4) = v18;
      *(_DWORD *)v16 = (*(_DWORD *)(a1 + 40) << 8) | 2;
    }
    else
    {
      *(_DWORD *)v16 = (v18 << 8) | 2;
      *(_DWORD *)(v16 + 4) = *(_DWORD *)(a1 + 40);
    }
    *(_QWORD *)(v16 + 8) = *((_QWORD *)fragment_variant + 64);
    *(_QWORD *)(v16 + 16) = *((_QWORD *)fragment_variant + 92) + *((_QWORD *)fragment_variant + 64);
    *(_DWORD *)(a1 + 36) = (*(_DWORD *)(a1 + 36) + 1) % *(_DWORD *)(a1 + 32);
  }
  ++*(_DWORD *)(a1 + 40);
}

void ___ZN3AGX20SampledRenderContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24duplicateShaderAddressesEv_block_invoke(uint64_t a1)
{

}

uint64_t AGX::SampledRenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::drawIndexedPrimitives(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  uint64_t v16;
  int v17;
  _BOOL8 v18;
  int *v19;
  _DWORD *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  int v34;

  AGX::SampledRenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::duplicateShaderAddresses(a1);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = a4 != 0;
  v18 = *(_DWORD *)(v16 + 1720) != v17;
  *(_DWORD *)(v16 + 1720) = v17;
  v19 = (int *)MEMORY[0x24BE51650];
  if (((*(_QWORD *)(*(_QWORD *)(v16 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v16 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v16 + 2672) + 2832)) & 0x700000000000) != 0)
  {
    *(_QWORD *)(v16 + 20960) |= 0x700000000000uLL;
    *(_QWORD *)(v16 + 21152) |= v18 | 0x40;
    *(_QWORD *)(v16 + 3592) = a4;
    v20 = *(_DWORD **)(v16 + 160);
    v21 = v20 + 2;
    if ((unint64_t)(v20 + 2) > *(_QWORD *)(v16 + 152))
    {
      v34 = AGX::DataBufferAllocator<34ul>::growNoInline(v16 + 16, 3, 0);
      v20 = *(_DWORD **)(v16 + 160);
      if (!v34)
      {
LABEL_4:
        v22 = (char *)v20 + *(_QWORD *)(v16 + 176);
        *(_QWORD *)(v16 + 160) = v20 + 2;
        *(_QWORD *)(v16 + 3576) = v22;
        *(_QWORD *)(v16 + 3584) = v22 + 4;
        *v20 = a9;
        v20[1] = a4;
        v23 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 224) + *v19;
        *(_QWORD *)(v16 + 15776) = v23;
        *(_QWORD *)(v16 + 15768) = v23;
        if (*(_BYTE *)(v16 + 2529))
          goto LABEL_6;
        goto LABEL_5;
      }
      v21 = v20 + 2;
      if ((unint64_t)(v20 + 2) > *(_QWORD *)(v16 + 152))
        abort();
    }
    *(_QWORD *)(v16 + 168) = v21;
    goto LABEL_4;
  }
  *(_QWORD *)(v16 + 21152) |= v18;
  if (!*(_BYTE *)(v16 + 2529))
  {
LABEL_5:
    *(_BYTE *)(v16 + 2529) = 1;
    *(_QWORD *)(v16 + 21152) |= 1uLL;
  }
LABEL_6:
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v16, a2);
  v24 = *(_QWORD *)(a7 + *v19 + 8);
  if (*(_QWORD *)(v16 + 2552) != a7)
  {
    IOGPUResourceListAddResource();
    if (*(_QWORD *)(v16 + 1480))
      MTLResourceListAddResource();
    *(_QWORD *)(v16 + 2552) = a7;
  }
  result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v16, *(int8x16_t **)(v16 + 2672), *(int8x16_t **)(v16 + 2680), v16 + 2704, (_QWORD *)(v16 + 5904), v16 + 20960, 0);
  if (*(_BYTE *)(*(_QWORD *)(v16 + 1736) + 2932))
  {
    if ((unint64_t)(a2 - 2) >= 7)
      v26 = 0x10000000;
    else
      v26 = qword_232D77DB0[a2 - 2];
  }
  else
  {
    v26 = 268435488;
    if (!*(_BYTE *)(v16 + 2531))
      v26 = 0x10000000;
  }
  LODWORD(v27) = *(_DWORD *)(v16 + 2532);
  if (v27 >= 0xFFFF)
    v28 = 0xFFFF;
  else
    v28 = *(_DWORD *)(v16 + 2532);
  if (a6 == 1)
    v27 = v27;
  else
    v27 = v28;
  v29 = v24 + a8;
  v30 = v26 | *(_QWORD *)(*(_QWORD *)(v16 + 2672)
                        + 16 * (*(unsigned __int8 *)(v16 + 2528) | (2 * *(_DWORD *)(v16 + 2536)))
                        + 3432) & 0xE23FFFFFLL | (v27 << 32);
  v31 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)v31 = v30;
  v32 = 4 * a2;
  LODWORD(v30) = *(_DWORD *)((char *)&AGX::VDMEncoderGen1<kAGXRevG9>::PrimitiveTypeToVDMCTRLType + v32) | AGX::VDMEncoderGen1<kAGXRevG9>::IndexTypeToVDMCTRLType[a6] | 0x7E400000 | HIDWORD(v29);
  LODWORD(v32) = *(_DWORD *)((char *)&AGX::VDMEncoderGen1<kAGXRevG9>::PrimitiveTypeToSplitCount + v32);
  *(_DWORD *)(v31 + 8) = v30;
  *(_DWORD *)(v31 + 12) = v29;
  *(_DWORD *)(v31 + 16) = a3;
  *(_DWORD *)(v31 + 20) = a5 - 1;
  *(_DWORD *)(v31 + 24) = a9;
  *(_DWORD *)(v31 + 28) = v32;
  *(_QWORD *)(v16 + 64) = v31 + 32;
  if (*(_BYTE *)(a1 + 64))
  {
    v33 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::appendProgramAddressTables(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 2688), v33);
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", v33);
  }
  return result;
}

uint64_t AGX::SampledRenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::drawPrimitives(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6)
{
  uint64_t v12;
  int v13;
  int v14;
  _BOOL8 v15;
  int *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  int *v23;
  id v24;
  int v25;

  AGX::SampledRenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::duplicateShaderAddresses(a1);
  v12 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v12 + 2384))
    v13 = a3;
  else
    v13 = 0;
  v14 = a5 != 0;
  v15 = *(_DWORD *)(v12 + 1720) != v14;
  *(_DWORD *)(v12 + 1720) = v14;
  if (((*(_QWORD *)(*(_QWORD *)(v12 + 2672) + 1288) | *(_QWORD *)(*(_QWORD *)(v12 + 2672) + 1264) | *(_QWORD *)(*(_QWORD *)(v12 + 2672) + 2832)) & 0x700000000000) != 0)
  {
    *(_QWORD *)(v12 + 20960) |= 0x700000000000uLL;
    *(_QWORD *)(v12 + 21152) |= v15 | 0x40;
    *(_QWORD *)(v12 + 3592) = a5;
    v16 = *(int **)(v12 + 160);
    v17 = v16 + 2;
    if ((unint64_t)(v16 + 2) > *(_QWORD *)(v12 + 152))
    {
      v25 = AGX::DataBufferAllocator<34ul>::growNoInline(v12 + 16, 3, 0);
      v16 = *(int **)(v12 + 160);
      if (!v25)
      {
LABEL_7:
        v18 = (char *)v16 + *(_QWORD *)(v12 + 176);
        *(_QWORD *)(v12 + 160) = v16 + 2;
        *(_QWORD *)(v12 + 3576) = v18;
        *(_QWORD *)(v12 + 3584) = v18 + 4;
        *v16 = v13;
        v16[1] = a5;
        v19 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 224) + (int)*MEMORY[0x24BE51650];
        *(_QWORD *)(v12 + 15776) = v19;
        *(_QWORD *)(v12 + 15768) = v19;
        if (!*(_BYTE *)(v12 + 2529))
          goto LABEL_9;
        goto LABEL_8;
      }
      v17 = v16 + 2;
      if ((unint64_t)(v16 + 2) > *(_QWORD *)(v12 + 152))
        abort();
    }
    *(_QWORD *)(v12 + 168) = v17;
    goto LABEL_7;
  }
  *(_QWORD *)(v12 + 21152) |= v15;
  if (*(_BYTE *)(v12 + 2529))
  {
LABEL_8:
    *(_BYTE *)(v12 + 2529) = 0;
    *(_QWORD *)(v12 + 21152) |= 1uLL;
  }
LABEL_9:
  AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeISPPrimitiveType(v12, a2);
  result = AGX::RenderContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeAndEmitRenderState(v12, *(int8x16_t **)(v12 + 2672), *(int8x16_t **)(v12 + 2680), v12 + 2704, (_QWORD *)(v12 + 5904), v12 + 20960, 0);
  v21 = 4 * a2;
  v22 = *(_DWORD *)((char *)&AGX::VDMEncoderGen1<kAGXRevG9>::PrimitiveTypeToVDMCTRLType + v21) | 0x6E440000;
  LODWORD(v21) = *(_DWORD *)((char *)&AGX::VDMEncoderGen1<kAGXRevG9>::PrimitiveTypeToSplitCount + v21);
  v23 = *(int **)(v12 + 64);
  *v23 = v22;
  v23[1] = a4;
  v23[2] = a6 - 1;
  v23[3] = a3;
  v23[4] = v21;
  *(_QWORD *)(v12 + 64) = v23 + 5;
  if (*(_BYTE *)(a1 + 64))
  {
    v24 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::appendProgramAddressTables(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 2688), v24);
    return objc_msgSend(*(id *)(a1 + 8), "addObject:", v24);
  }
  return result;
}

char *AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitBackgroundObjectArguments(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  _DWORD *v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  char *v33;
  char *v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  char *v42;

  v9 = *(_DWORD *)(a3 + 2200);
  do
  {
    v9 &= ~(1 << __clz(__rbit32(v9)));
    IOGPUResourceListAddResource();
  }
  while (v9);
  v10 = *(_DWORD *)(a3 + 1392);
  v11 = *(_DWORD *)(a3 + 1396);
  v12 = *(_DWORD *)(a3 + 1400);
  v13 = *(_DWORD *)(a3 + 1404);
  v14 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
  v15 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
  v16 = (2 * v14) & 0x7FFFFFFF8;
  v17 = v15 & 0x3FFFFFFFCLL;
  v18 = (v15 & 0x3FFFFFFFCLL) + v16 + 7;
  v19 = a2[22] + v18;
  if (v19 <= a2[21])
  {
LABEL_4:
    a2[23] = v19;
    goto LABEL_5;
  }
  v40 = *(_DWORD *)(a3 + 1392);
  v36 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 4, 0);
  v10 = v40;
  v16 = (2 * v14) & 0x7FFFFFFF8;
  v17 = v15 & 0x3FFFFFFFCLL;
  if (v36)
  {
    v19 = a2[22] + v18;
    if (v19 > a2[21])
      goto LABEL_19;
    goto LABEL_4;
  }
LABEL_5:
  v20 = v11 + v10 + v12 + v13;
  v21 = (8 * v20) | 7;
  v22 = a2[30] + v21;
  if (v22 <= a2[29])
  {
LABEL_6:
    a2[31] = v22;
    goto LABEL_7;
  }
  v37 = v17;
  v38 = v16;
  v39 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 6, 0);
  v16 = v38;
  v17 = v37;
  if (v39)
  {
    v22 = a2[30] + v21;
    if (v22 <= a2[29])
      goto LABEL_6;
LABEL_19:
    abort();
  }
LABEL_7:
  v23 = v14 >> 2;
  v24 = v15 >> 2;
  if ((v14 >> 2))
  {
    v25 = (_QWORD *)((a2[22] + 7) & 0xFFFFFFFFFFFFFFF8);
    v26 = (char *)v25 + a2[24];
    a2[22] = (char *)v25 + v16;
    *(_QWORD *)(a4 + 200) = v26;
    v27 = *(unsigned int **)(a3 + 48);
    do
    {
      v28 = *v27++;
      *v25++ = *(_QWORD *)(a4 + 8 * v28);
      LODWORD(v23) = v23 - 1;
    }
    while ((_DWORD)v23);
  }
  if ((_DWORD)v24)
  {
    v29 = (_DWORD *)a2[22];
    v30 = (char *)v29 + a2[24];
    a2[22] = (char *)v29 + v17;
    *(_QWORD *)(a4 + 208) = v30;
    v31 = *(unsigned int **)(a3 + 72);
    do
    {
      v32 = *v31++;
      *v29++ = *(_DWORD *)(a5 + 4 * v32);
      LODWORD(v24) = v24 - 1;
    }
    while ((_DWORD)v24);
  }
  v33 = (char *)((a2[30] + 7) & 0xFFFFFFFFFFFFFFF8);
  v34 = &v33[a2[32]];
  v41 = v33;
  v42 = v34;
  a2[30] = &v33[8 * v20];
  agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v41, &v42, a4, (_DWORD *)(a3 + 1392), 0, 0);
  return v34;
}

char *AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitEndOfTileArgumentsEarly(uint64_t a1, _QWORD *a2, int32x4_t *a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v20;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v7 = a3[72].u32[2];
  do
  {
    v7 &= ~(1 << __clz(__rbit32(v7)));
    IOGPUResourceListAddResource();
  }
  while (v7);
  v8 = vaddvq_s32(a3[32]);
  v10 = a3->i64[1];
  v9 = a3[1].i64[0];
  v11 = (8 * v8) | 7;
  v12 = a2[30] + v11;
  if (v12 > a2[29])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a2, 6, 0))
      goto LABEL_5;
    v12 = a2[30] + v11;
    if (v12 > a2[29])
      goto LABEL_13;
  }
  a2[31] = v12;
LABEL_5:
  v13 = (v9 - v10) & 0x3FFFFFFFCLL;
  v14 = a2[22];
  v15 = v14 + v13;
  if ((unint64_t)(v14 + v13) > a2[21])
  {
    v20 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 4, 0);
    v14 = a2[22];
    if (!v20)
      goto LABEL_7;
    v15 = v14 + v13;
    if ((unint64_t)(v14 + v13) > a2[21])
LABEL_13:
      abort();
  }
  a2[23] = v15;
LABEL_7:
  v16 = a2[24] + v14;
  a2[22] = v14 + v13;
  *a4 = v14;
  v23[0] = v16;
  v17 = (char *)((a2[30] + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = &v17[a2[32]];
  v21 = v17;
  v22 = v18;
  a2[30] = &v17[8 * v8];
  agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v21, &v22, (uint64_t)v23, (int32x4_t *)a3[32].i32, 0, 0);
  return v18;
}

double ___ZN3AGX20RenderPDSStateLoaderINS_2G98EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke_3851()
{
  double result;

  *(_QWORD *)&result = 0x2000;
  xmmword_2542350C0 = xmmword_232D734B0;
  qword_2542350D0 = 12;
  dword_2542350D8 = 1;
  AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::databuffer_configs = xmmword_232D734B0;
  qword_2542350B0 = 12;
  dword_2542350B8 = 1;
  xmmword_254235100 = xmmword_232D734C0;
  qword_254235110 = 12;
  dword_254235118 = 1;
  qword_254235128 = 0;
  unk_254235130 = 0;
  qword_254235120 = 0x2000;
  dword_254235138 = 4;
  xmmword_254235460 = xmmword_232D734C0;
  qword_254235470 = 12;
  dword_254235478 = 1;
  qword_254235148 = 0;
  unk_254235150 = 0;
  qword_254235140 = 0x2000;
  dword_254235158 = 1;
  qword_254235168 = 0;
  unk_254235170 = 0;
  qword_254235160 = 0x2000;
  dword_254235178 = 4;
  qword_2542352C0 = 0x2000;
  qword_2542352C8 = 0;
  qword_2542352D0 = 0;
  dword_2542352D8 = 1;
  qword_254235188 = 0;
  unk_254235190 = 0;
  qword_254235180 = 0x2000;
  dword_254235198 = 4;
  qword_2542351A0 = 0x2000;
  unk_2542351A8 = 0;
  qword_2542351B0 = 0;
  dword_2542351B8 = 4;
  qword_2542351C0 = 0x2000;
  unk_2542351C8 = 0;
  qword_2542351D0 = 0;
  dword_2542351D8 = 1;
  xmmword_2542351E0 = xmmword_232D734B0;
  qword_2542351F0 = 0;
  dword_2542351F8 = 1;
  xmmword_254235220 = xmmword_232D734C0;
  qword_254235230 = 2;
  dword_254235238 = 1;
  xmmword_254235240 = xmmword_232D734C0;
  qword_254235250 = 12;
  dword_254235258 = 1;
  qword_254235208 = 0;
  unk_254235210 = 0;
  qword_254235200 = 0x2000;
  dword_254235218 = 4;
  xmmword_254235280 = xmmword_232D734C0;
  qword_254235290 = 4;
  dword_254235298 = 1;
  xmmword_2542352A0 = xmmword_232D734C0;
  qword_2542352B0 = 4;
  dword_2542352B8 = 1;
  qword_254235300 = 0x2000;
  qword_254235310 = 0;
  qword_254235308 = 0;
  dword_254235318 = 1;
  return result;
}

uint64_t AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::extractProgramVariantArgumentDirtyBits(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a3[12].i64[0];
  if ((v3 & 0x40) == 0)
  {
    result = 0;
    if (!a2)
      return result;
    goto LABEL_20;
  }
  v5 = a3[1].i64[0];
  v6 = a3->i64[1];
  v7 = a1[79].i64[1] & v6 | a1[79].i64[0] & a3->i64[0] | a1[80].i64[0] & v5;
  v8 = a1[81].i64[0] & v6 | a1[80].i64[1] & a3->i64[0] | a1[81].i64[1] & v5;
  v9.i64[0] = v5;
  v9.i64[1] = a3[2].i64[1];
  v10 = vorrq_s8(vandq_s8(a1[82], *a3), vandq_s8(a1[83], v9));
  v11 = vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
  v12 = a1[84].i64[1] & v6 | a1[84].i64[0] & a3->i64[0] | a1[85].i64[0] & v5;
  v13 = a1[86].i64[0] & v6 | a1[85].i64[1] & a3->i64[0] | a1[86].i64[1] & v5 | a1[87].i64[0] & v9.i64[1];
  v14 = a1[177].i64[1] & v6 | a1[177].i64[0] & a3->i64[0] | a1[178].i64[0] & v5;
  v15 = v7 == 0;
  v16 = 25088;
  if (v15)
    v16 = 0;
  if (v11)
    v17 = v16 | 0x6800;
  else
    v17 = v16;
  if (v14)
    v18 = v17 | 0x8000;
  else
    v18 = v17;
  if (v8)
    v18 |= 0x6000uLL;
  if (v12)
    v18 |= 0x6400uLL;
  if (v13)
    result = v18 | 0x7000;
  else
    result = v18;
  if (a2)
  {
LABEL_20:
    if ((v3 & 0x1000000000) != 0)
    {
      v19 = a3[10].i64[0];
      v20 = a3[9].i64[1];
      v21 = a3[9].i64[0];
      v22.i64[0] = v19;
      v22.i64[1] = a3[11].i64[1];
      v23 = vorrq_s8(vandq_s8(a2[82], a3[9]), vandq_s8(a2[83], v22));
      v24 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
      v25 = a2[84].i64[1] & v20 | a2[84].i64[0] & v21 | a2[85].i64[0] & v19;
      v26 = a2[86].i64[0] & v20 | a2[85].i64[1] & v21 | a2[86].i64[1] & v19 | a2[87].i64[0] & v22.i64[1];
      if (a2[79].i64[1] & v20 | a2[79].i64[0] & v21 | a2[80].i64[0] & v19)
        v27 = result | 0x88000000000;
      else
        v27 = result;
      if (a2[81].i64[0] & v20 | a2[80].i64[1] & v21 | a2[81].i64[1] & v19)
        v27 |= 0x80000000000uLL;
      if (v24)
        v28 = v27 | 0xA0000000000;
      else
        v28 = v27;
      if (v25)
        v28 |= 0x90000000000uLL;
      if (v26)
        return v28 | 0xC0000000000;
      else
        return v28;
    }
  }
  return result;
}

char **AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexProgramVariantAndArguments(char **result, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, __int16 a6, int a7, int a8, uint64_t a9, _QWORD *a10, _DWORD *a11)
{
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  int v32;
  unsigned __int16 *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  unsigned __int16 *v37;
  uint64_t i;
  int v39;
  unint64_t j;
  int v41;
  unsigned int *v42;
  unint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  char *v46;
  unsigned int v47;
  unsigned __int16 *v48;
  unint64_t v49;
  _DWORD *v50;
  char *v51;
  unsigned __int16 *v52;
  uint64_t k;
  int v54;
  unint64_t m;
  char *v56;
  char *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  char *v66;
  char *v67;

  v15 = a7 | (2 * a8);
  if ((a6 & 1) != 0)
  {
    v16 = (unsigned int *)(a3 + 3432 + 16 * v15);
    v17 = *v16;
    v18 = *((_QWORD *)v16 + 1);
    if ((*a11 & 2) != 0)
      v19 = 1;
    else
      v19 = (*a11 >> 1) & 2;
    v20 = (uint64_t)&a2[4 * v19 + 5];
    v21 = *(unint64_t **)(v20 + 8);
    *v21 = v17 | ((unint64_t)*(unsigned int *)(a3 + 3432 + 4 * *((unsigned int *)result + 16) + 96) << 32);
    v21[1] = v18;
    *(_QWORD *)(v20 + 8) = v21 + 2;
    if ((*a11 & 2) != 0)
      v22 = 1;
    else
      v22 = (*a11 >> 1) & 2;
    v23 = (uint64_t)&a2[4 * v22 + 5];
    v24 = *(_QWORD **)(v23 + 8);
    *v24 = *(_QWORD *)(a3 + 3620);
    *(_QWORD *)(v23 + 8) = v24 + 1;
  }
  if ((a6 & 0xFE00) != 0)
  {
    if ((a6 & 0x2000) != 0)
    {
      v25 = vaddvq_s32(*(int32x4_t *)(a3 + 1416));
      if (a6 < 0)
      {
LABEL_12:
        v26 = vaddvq_s32(*(int32x4_t *)(a3 + 2856));
        if ((a6 & 0x200) == 0)
          goto LABEL_18;
        goto LABEL_16;
      }
    }
    else
    {
      v25 = 0;
      if (a6 < 0)
        goto LABEL_12;
    }
    v26 = 0;
    if ((a6 & 0x200) == 0)
    {
LABEL_18:
      if ((a6 & 0x400) != 0)
      {
        v33 = *(unsigned __int16 **)(a3 + 120);
        v34 = *(_QWORD *)(a3 + 128) - (_QWORD)v33;
        v35 = (_QWORD *)((a2[46] + 7) & 0xFFFFFFFFFFFFFFF8);
        v36 = (char *)v35 + a2[48];
        a2[46] = (char *)v35 + ((2 * v34) & 0x7FFFFFFF8);
        a4[191] = v36;
        if (*(_BYTE *)(a3 + 216))
        {
          v37 = *(unsigned __int16 **)(a3 + 144);
          for (i = (*(_QWORD *)(a3 + 152) - (_QWORD)v37) >> 1; (_DWORD)i; LODWORD(i) = i - 1)
          {
            v39 = *v37++;
            v35[v39] = *(_QWORD *)(a4[v33[2 * v39]] + 8 * v33[2 * v39 + 1]);
          }
        }
        else
        {
          for (j = v34 >> 2; (_DWORD)j; LODWORD(j) = j - 1)
          {
            *v35++ = *(_QWORD *)(a4[*v33] + 8 * v33[1]);
            v33 += 2;
          }
        }
      }
      v41 = v26 + v25;
      if ((a6 & 0x800) != 0)
      {
        v42 = *(unsigned int **)(a3 + 96);
        v43 = *(_QWORD *)(a3 + 104) - (_QWORD)v42;
        v44 = v43 >> 2;
        v45 = (_DWORD *)a2[46];
        v46 = (char *)v45 + a2[48];
        a2[46] = (char *)v45 + (v43 & 0x3FFFFFFFCLL);
        for (a4[398] = v46; (_DWORD)v44; LODWORD(v44) = v44 - 1)
        {
          v47 = *v42++;
          *v45++ = *(_DWORD *)(a5 + 4 * v47);
        }
      }
      if ((a6 & 0x1000) != 0)
      {
        v48 = *(unsigned __int16 **)(a3 + 168);
        v49 = *(_QWORD *)(a3 + 176) - (_QWORD)v48;
        v50 = (_DWORD *)a2[46];
        v51 = (char *)v50 + a2[48];
        a2[46] = (char *)v50 + (v49 & 0x3FFFFFFFCLL);
        a4[192] = v51;
        if (*(_BYTE *)(a3 + 216))
        {
          v52 = *(unsigned __int16 **)(a3 + 192);
          for (k = (*(_QWORD *)(a3 + 200) - (_QWORD)v52) >> 1; (_DWORD)k; LODWORD(k) = k - 1)
          {
            v54 = *v52++;
            v50[v54] = *(_DWORD *)(a4[v48[2 * v54]] + 4 * v48[2 * v54 + 1]);
          }
        }
        else
        {
          for (m = v49 >> 2; (_DWORD)m; LODWORD(m) = m - 1)
          {
            *v50++ = *(_DWORD *)(a4[*v48] + 4 * v48[1]);
            v48 += 2;
          }
        }
      }
      if (v41)
      {
        v56 = (char *)((a2[26] + 7) & 0xFFFFFFFFFFFFFFF8);
        v57 = &v56[a2[28]];
        v66 = v56;
        v67 = v57;
        a2[26] = &v56[8 * v41];
        if ((a6 & 0x2000) != 0)
        {
          v58 = *(_DWORD *)(a3 + 3548);
          v59 = (((_QWORD)v57 << 32) + 0xF00000000) & 0xFFFFFFF000000000 | *(_QWORD *)(a3 + 3540) & 0xFFFFFFFFFLL;
          if ((*a11 & 2) != 0)
            v60 = 1;
          else
            v60 = (*a11 >> 1) & 2;
          v61 = &a2[4 * v60];
          v62 = v61[6];
          *(_QWORD *)v62 = v59;
          *(_DWORD *)(v62 + 8) = v58;
          v61[6] = v62 + 12;
          result = agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v66, &v67, (uint64_t)a4, (_DWORD *)(a3 + 1416), *(_BYTE *)(a3 + 1992), a10);
        }
        if (a6 < 0)
        {
          if ((*a11 & 2) != 0)
            v63 = 1;
          else
            v63 = (*a11 >> 1) & 2;
          v64 = &a2[4 * v63];
          v65 = (uint64_t *)v64[6];
          *v65 = *(_QWORD *)(a3 + 16 * v15 + 3432) & 0xE23FFFFFLL | ((_QWORD)v67 << 32) | 0x8000000;
          v64[6] = v65 + 1;
          return agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v66, &v67, (uint64_t)a4, (_DWORD *)(a3 + 2856), 0, 0);
        }
      }
      return result;
    }
LABEL_16:
    v27 = *(int **)(a3 + 72);
    v28 = *(_QWORD *)(a3 + 80) - (_QWORD)v27;
    v29 = v28 >> 2;
    v30 = (_QWORD *)((a2[46] + 7) & 0xFFFFFFFFFFFFFFF8);
    v31 = (char *)v30 + a2[48];
    a2[46] = (char *)v30 + ((2 * v28) & 0x7FFFFFFF8);
    for (a4[397] = v31; (_DWORD)v29; LODWORD(v29) = v29 - 1)
    {
      v32 = *v27++;
      *v30++ = a4[v32];
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveVertexBarrier(uint64_t result, _QWORD *a2, int *a3, uint32x4_t a4, uint32x4_t a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = result;
  v8 = *a3;
  v9 = a2[46];
  if (!v9)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 10, 0);
    if (!(_DWORD)result)
      goto LABEL_46;
    v9 = a2[46];
  }
  v10 = (v8 & 1) == 0;
  if ((v8 & 1) != 0)
    v11 = a2[47] - v9;
  else
    v11 = 0;
  if (!v10)
    v9 = a2[47];
  v12 = v9 + 23;
  if (v12 <= a2[45])
  {
LABEL_8:
    a2[47] = v12;
    goto LABEL_9;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 10, 0);
  if ((_DWORD)result)
  {
    v12 = a2[46] + v11 + 23;
    if (v12 > a2[45])
      goto LABEL_46;
    goto LABEL_8;
  }
LABEL_9:
  a4.i32[0] = 3;
  a5.i32[0] = *(_DWORD *)(v7 + 48);
  v13 = 4
      * vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a5, a4), 0), (int8x16_t)xmmword_232D73D30, (int8x16_t)vdupq_n_s64(4uLL)));
  v14 = a2[26];
  if ((*a3 & 1) != 0)
    v15 = a2[27] - v14;
  else
    v15 = 0;
  if ((*a3 & 1) != 0)
    v14 = a2[27];
  v16 = v14 + v13;
  if (v16 <= a2[25])
  {
LABEL_15:
    a2[27] = v16;
    goto LABEL_16;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 5, 0);
  if ((_DWORD)result)
  {
    v16 = a2[26] + v15 + v13;
    if (v16 > a2[25])
      goto LABEL_46;
    goto LABEL_15;
  }
LABEL_16:
  if ((*a3 & 2) != 0)
    v17 = 1;
  else
    v17 = (*a3 >> 1) & 2;
  v18 = &a2[4 * v17];
  v21 = (unint64_t *)v18[6];
  v20 = v18 + 6;
  v19 = v21;
  v22 = v20 - 1;
  v23 = v20 + 1;
  if ((*a3 & 1) != 0)
  {
    v25 = (unint64_t *)*v23;
    v24 = *v23 - (_QWORD)v19;
  }
  else
  {
    v24 = 0;
    v25 = v19;
  }
  v26 = (char *)v25 + 12;
  if ((unint64_t)v26 > *v22)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, v17, 0);
    if ((_DWORD)result)
    {
      v31 = *v20 + v24 + 12;
      if (v31 > *v22)
        goto LABEL_46;
      *v23 = v31;
      result = AGX::DataBufferAllocator<34ul>::getGPUAddress((uint64_t)a2, v17);
      *v19 = __ROR8__(result, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    *v23 = (unint64_t)v26;
  }
  v27 = *a3;
  if ((*a3 & 1) != 0)
    v28 = a2[127] - a2[126];
  else
    v28 = 0;
  if ((v27 & 1) != 0)
    v29 = a2[127];
  else
    v29 = a2[126];
  v30 = v29 + 12;
  if (v30 <= a2[125])
    goto LABEL_31;
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 30, 0);
  if ((_DWORD)result)
  {
    v30 = a2[126] + v28 + 12;
    if (v30 <= a2[125])
    {
LABEL_31:
      a2[127] = v30;
      return result;
    }
LABEL_46:
    abort();
  }
  return result;
}

uint64_t AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitVertexBarrier(uint64_t result, _QWORD *a2, _DWORD *a3, _DWORD *a4, uint32x4_t a5, uint32x4_t a6)
{
  unint64_t v6;
  uint64_t v7;
  unsigned __int32 v8;
  int8x16_t v9;
  int v10;
  int64x2_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _DWORD *v30;

  ++*a3;
  v6 = (a2[46] + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = a2[48];
  a2[46] = v6 | 8;
  *(_QWORD *)v6 = 0;
  v8 = *(_DWORD *)(result + 48);
  a5.i32[0] = 3;
  a6.i32[0] = v8;
  v9 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a6, a5), 0);
  v10 = 12;
  v11 = (int64x2_t)vbslq_s8(v9, (int8x16_t)xmmword_232D73D30, (int8x16_t)vdupq_n_s64(4uLL));
  v12 = (_DWORD *)a2[26];
  v13 = a2[28];
  a2[26] = &v12[vaddvq_s64(v11)];
  v14 = &v12[v11.i64[0]];
  if (v8 < 4)
  {
    v18 = 0;
    v10 = 4;
    v17 = v12;
  }
  else
  {
    v15 = v6 + v7;
    *v12 = v15 & 0xFFFFFFFC;
    v12[1] = BYTE4(v15) | 0x100000;
    v16 = BYTE4(v15) | 0x300000;
    v12[2] = v15 & 0xFFFFFFFC;
    v12[3] = v16;
    v12[4] = v8 >> 1;
    v12[5] = 1;
    v12[6] = v15 & 0xFFFFFFFC;
    v12[7] = v16;
    v12[8] = v15 & 0xFFFFFFFC;
    v12[9] = BYTE4(v15) | 0x300100;
    v17 = v12 + 10;
    *(_OWORD *)v14 = xmmword_232D73D50;
    *((_OWORD *)v14 + 1) = xmmword_232D73D60;
    *((_QWORD *)v14 + 4) = 0xD1800000D6000201;
    v14[10] = -796917756;
    v14 += 11;
    v18 = 2;
  }
  v19 = v13 + (_DWORD)v12;
  *v17 = 0;
  *(_QWORD *)v14 = 0xD3000000F000282BLL;
  v20 = ((unint64_t)(v18 | (8 * v10) | 0x5800u) << 32) | 0x800000;
  v21 = a2 + 5;
  v22 = a2[126];
  v23 = a2[128] + v22;
  a2[126] = v22 + 12;
  *(_QWORD *)v22 = v20;
  *(_DWORD *)(v22 + 8) = v19 & 0xFFFFFFF0;
  v24 = __ROR8__(v23, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  if ((*a4 & 2) != 0)
    v25 = 1;
  else
    v25 = (*a4 >> 1) & 2;
  v26 = &v21[4 * v25];
  v27 = (unint64_t *)v26[1];
  *v27 = v24;
  v26[1] = v27 + 1;
  if ((*a4 & 2) != 0)
    v28 = 1;
  else
    v28 = (*a4 >> 1) & 2;
  v29 = &v21[4 * v28];
  v30 = (_DWORD *)v29[1];
  *v30 = 1610612736;
  v29[1] = v30 + 1;
  return result;
}

uint64_t AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveNopDbgVDMFlush(uint64_t result, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v5 = result;
  if ((*a3 & 2) != 0)
    v6 = 1;
  else
    v6 = (*a3 >> 1) & 2;
  v7 = &a2[4 * v6];
  v10 = (unint64_t *)v7[6];
  v9 = v7 + 6;
  v8 = v10;
  v11 = v9 - 1;
  v12 = v9 + 1;
  if ((*a3 & 1) != 0)
  {
    v14 = (unint64_t *)*v12;
    v13 = *v12 - (_QWORD)v8;
  }
  else
  {
    v13 = 0;
    v14 = v8;
  }
  v15 = v14 + 24;
  if ((unint64_t)v15 > *v11)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, v6, 0);
    if ((_DWORD)result)
    {
      v30 = *v9 + v13 + 192;
      if (v30 > *v11)
        goto LABEL_48;
      *v12 = v30;
      result = AGX::DataBufferAllocator<34ul>::getGPUAddress((uint64_t)a2, v6);
      *v8 = __ROR8__(result, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    *v12 = (unint64_t)v15;
  }
  v16 = *(_QWORD *)(v5 + 40);
  if (v16)
    v17 = *(unsigned int *)(v16 + 40) + 43;
  else
    v17 = 43;
  v18 = *a3;
  v19 = a2[46];
  if (!v19)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 10, 0);
    if (!(_DWORD)result)
      goto LABEL_48;
    v19 = a2[46];
  }
  if ((v18 & 1) != 0)
    v20 = a2[47] - v19;
  else
    v20 = 0;
  if ((v18 & 1) != 0)
    v19 = a2[47];
  v21 = v19 + v17;
  if (v21 <= a2[45])
  {
LABEL_19:
    a2[47] = v21;
    goto LABEL_20;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 10, 0);
  if ((_DWORD)result)
  {
    v21 = a2[46] + v17 + v20;
    if (v21 > a2[45])
      goto LABEL_48;
    goto LABEL_19;
  }
LABEL_20:
  v22 = a2[126];
  if ((v18 & 1) != 0)
    v23 = a2[127] - v22;
  else
    v23 = 0;
  if ((v18 & 1) != 0)
    v22 = a2[127];
  v24 = v22 + 104;
  if (v24 <= a2[125])
  {
LABEL_26:
    a2[127] = v24;
    goto LABEL_27;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 30, 0);
  if ((_DWORD)result)
  {
    v24 = a2[126] + v23 + 104;
    if (v24 > a2[125])
      goto LABEL_48;
    goto LABEL_26;
  }
LABEL_27:
  v25 = *(unsigned int *)(v16 + 1240) + 7;
  v26 = a2[27];
  v27 = (v18 & 1) == 0;
  if ((v18 & 1) != 0)
    v28 = v26 - a2[26];
  else
    v28 = 0;
  if (v27)
    v26 = a2[26];
  v29 = v26 + v25;
  if (v29 <= a2[25])
    goto LABEL_33;
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 5, 0);
  if ((_DWORD)result)
  {
    v29 = a2[26] + v28 + v25;
    if (v29 <= a2[25])
    {
LABEL_33:
      a2[27] = v29;
      return result;
    }
LABEL_48:
    abort();
  }
  return result;
}

uint64_t AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveBatchingDrawDataBufferSpace(uint64_t result, _QWORD *a2, uint64_t a3, uint32x4_t a4, uint32x4_t a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = result;
  v8 = a2[7];
  if ((unint64_t)(v8 + 408) > a2[5])
  {
    v20 = (unint64_t *)a2[6];
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 0, 0);
    if ((_DWORD)result)
    {
      v21 = a2[6];
      v22 = v21 + v8 - (_QWORD)v20 + 408;
      if (v22 > a2[5])
        goto LABEL_24;
      a2[7] = v22;
      *v20 = __ROR8__(a2[8] + v21, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    a2[7] = v8 + 408;
  }
  v9 = *(_DWORD *)(a3 + 40);
  v10 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 40);
  v11 = a2[46];
  if (!v11)
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 10, 0);
    if (!(_DWORD)result)
      goto LABEL_24;
    v11 = a2[46];
  }
  v12 = (v9 + v10 + 32);
  v13 = a2[47];
  v14 = v13 + v12;
  if ((unint64_t)(v13 + v12) <= a2[45])
  {
LABEL_5:
    a2[47] = v14;
    goto LABEL_6;
  }
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 10, 0);
  if ((_DWORD)result)
  {
    v14 = a2[46] + v13 - v11 + v12;
    if (v14 > a2[45])
      goto LABEL_24;
    goto LABEL_5;
  }
LABEL_6:
  v15 = a2[127];
  v16 = v15 + 232;
  if ((unint64_t)(v15 + 232) <= a2[125])
  {
LABEL_7:
    a2[127] = v16;
    goto LABEL_8;
  }
  v23 = a2[126];
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 30, 0);
  if ((_DWORD)result)
  {
    v16 = a2[126] + v15 - v23 + 232;
    if (v16 > a2[125])
      goto LABEL_24;
    goto LABEL_7;
  }
LABEL_8:
  a4.i32[0] = 3;
  a5.i32[0] = *(_DWORD *)(v7 + 48);
  v17 = *(unsigned int *)(a3 + 1240)
      + 8
      * vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a5, a4), 0), (int8x16_t)xmmword_232D73D30, (int8x16_t)vdupq_n_s64(4uLL)))+ *(unsigned int *)(*(_QWORD *)(v7 + 40) + 1240);
  v18 = a2[27];
  v19 = v18 + v17;
  if ((unint64_t)(v18 + v17) <= a2[25])
  {
LABEL_9:
    a2[27] = v19;
    return result;
  }
  v24 = a2[26];
  result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 5, 0);
  if ((_DWORD)result)
  {
    v19 = a2[26] + v18 - v24 + v17;
    if (v19 <= a2[25])
      goto LABEL_9;
LABEL_24:
    abort();
  }
  return result;
}

BOOL AGX::RenderPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::reserveGPUDMAPromotionPatchUpDataBufferSpace(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = a1[19];
  v3 = v2 + 304;
  if ((unint64_t)(v2 + 304) <= a1[17])
  {
LABEL_2:
    a1[19] = v3;
    goto LABEL_3;
  }
  v9 = a1[18];
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a1, 3, 0))
  {
    v3 = a1[18] + v2 - v9 + 304;
    if (v3 > a1[17])
      goto LABEL_11;
    goto LABEL_2;
  }
LABEL_3:
  v4 = a1[71];
  v5 = v4 + 4;
  v6 = a1[69];
  v7 = v4 + 4 > v6;
  if (v4 + 4 <= v6)
  {
LABEL_4:
    a1[71] = v5;
    return v7;
  }
  v10 = a1[70];
  v11 = AGX::DataBufferAllocator<34ul>::growNoInline(a1, 16, 0);
  result = 0;
  if (v11)
  {
    v5 = a1[70] + v4 - v10 + 4;
    if (v5 <= a1[69])
      goto LABEL_4;
LABEL_11:
    abort();
  }
  return result;
}

uint64_t *AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  id *v68;
  id *v69;
  void *v70;
  id *v71;
  id *v72;
  void *v73;
  id *v74;
  id *v75;
  void *v76;
  id *v77;
  id *v78;
  void *v79;
  id *v80;
  id *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t);
  void *v162;
  uint64_t v163;
  uint64_t v164;

  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::destroy(a1);
  v2 = a1[275];
  a1[275] = 0;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 64) && *(_QWORD *)(v2 + 24))
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(NSObject **)(v3 + 16);
      v159 = MEMORY[0x24BDAC760];
      v160 = 3221225472;
      v161 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v162 = &__block_descriptor_48_e5_v8__0l;
      v163 = v3;
      v164 = v2;
      dispatch_sync(v4, &v159);
      *(_OWORD *)(v2 + 25) = 0u;
      *(_OWORD *)v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v2, 0x1070C4082A93E96);
  }
  v5 = a1[274];
  a1[274] = 0;
  if (v5)
  {
    if (*(_QWORD *)(v5 + 64) && *(_QWORD *)(v5 + 24))
    {
      v6 = *(_QWORD *)(v5 + 32);
      v7 = *(NSObject **)(v6 + 16);
      v159 = MEMORY[0x24BDAC760];
      v160 = 3221225472;
      v161 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v162 = &__block_descriptor_48_e5_v8__0l;
      v163 = v6;
      v164 = v5;
      dispatch_sync(v7, &v159);
      *(_OWORD *)(v5 + 25) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v5, 0x1070C4082A93E96);
  }
  v8 = a1[273];
  a1[273] = 0;
  if (v8)
  {
    if (*(_QWORD *)(v8 + 64) && *(_QWORD *)(v8 + 24))
    {
      v9 = *(_QWORD *)(v8 + 32);
      v10 = *(NSObject **)(v9 + 16);
      v159 = MEMORY[0x24BDAC760];
      v160 = 3221225472;
      v161 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v162 = &__block_descriptor_48_e5_v8__0l;
      v163 = v9;
      v164 = v8;
      dispatch_sync(v10, &v159);
      *(_OWORD *)(v8 + 25) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v8, 0x1070C4082A93E96);
  }
  v11 = a1[272];
  a1[272] = 0;
  if (v11)
  {
    if (*(_QWORD *)(v11 + 64) && *(_QWORD *)(v11 + 24))
    {
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *(NSObject **)(v12 + 16);
      v159 = MEMORY[0x24BDAC760];
      v160 = 3221225472;
      v161 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v162 = &__block_descriptor_48_e5_v8__0l;
      v163 = v12;
      v164 = v11;
      dispatch_sync(v13, &v159);
      *(_OWORD *)(v11 + 25) = 0u;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v11, 0x1070C4082A93E96);
  }
  v14 = a1[271];
  a1[271] = 0;
  if (v14)
  {
    if (*(_QWORD *)(v14 + 64) && *(_QWORD *)(v14 + 24))
    {
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(NSObject **)(v15 + 16);
      v159 = MEMORY[0x24BDAC760];
      v160 = 3221225472;
      v161 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v162 = &__block_descriptor_48_e5_v8__0l;
      v163 = v15;
      v164 = v14;
      dispatch_sync(v16, &v159);
      *(_OWORD *)(v14 + 25) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v14, 0x1070C4082A93E96);
  }
  v17 = (std::__shared_weak_count *)a1[270];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)a1[268];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)a1[266];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)a1[264];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)a1[262];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)a1[260];
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)a1[258];
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)a1[256];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)a1[254];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)a1[252];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)a1[250];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)a1[248];
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)a1[246];
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)a1[244];
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)a1[242];
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (_QWORD *)a1[237];
  if (v62)
  {
    do
    {
      v63 = (_QWORD *)*v62;
      operator delete(v62);
      v62 = v63;
    }
    while (v63);
  }
  v64 = (void *)a1[235];
  a1[235] = 0;
  if (v64)
    operator delete(v64);
  v65 = (_QWORD *)a1[231];
  if (v65)
  {
    do
    {
      v66 = (_QWORD *)*v65;
      operator delete(v65);
      v65 = v66;
    }
    while (v66);
  }
  v67 = (void *)a1[229];
  a1[229] = 0;
  if (v67)
    operator delete(v67);
  v68 = (id *)a1[226];
  if (v68)
  {
    do
    {
      v69 = (id *)*v68;

      operator delete(v68);
      v68 = v69;
    }
    while (v69);
  }
  v70 = (void *)a1[224];
  a1[224] = 0;
  if (v70)
    operator delete(v70);
  v71 = (id *)a1[221];
  if (v71)
  {
    do
    {
      v72 = (id *)*v71;

      operator delete(v71);
      v71 = v72;
    }
    while (v72);
  }
  v73 = (void *)a1[219];
  a1[219] = 0;
  if (v73)
    operator delete(v73);
  v74 = (id *)a1[216];
  if (v74)
  {
    do
    {
      v75 = (id *)*v74;

      operator delete(v74);
      v74 = v75;
    }
    while (v75);
  }
  v76 = (void *)a1[214];
  a1[214] = 0;
  if (v76)
    operator delete(v76);
  v77 = (id *)a1[211];
  if (v77)
  {
    do
    {
      v78 = (id *)*v77;

      operator delete(v77);
      v77 = v78;
    }
    while (v78);
  }
  v79 = (void *)a1[209];
  a1[209] = 0;
  if (v79)
    operator delete(v79);
  v80 = (id *)a1[206];
  if (v80)
  {
    do
    {
      v81 = (id *)*v80;

      operator delete(v80);
      v80 = v81;
    }
    while (v81);
  }
  v82 = (void *)a1[204];
  a1[204] = 0;
  if (v82)
    operator delete(v82);
  v83 = a1[201];
  if (v83)
  {
    v84 = a1[202];
    v85 = (void *)a1[201];
    if (v84 != v83)
    {
      do
      {
        v86 = *(std::__shared_weak_count **)(v84 - 8);
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v84 -= 16;
      }
      while (v84 != v83);
      v85 = (void *)a1[201];
    }
    a1[202] = v83;
    operator delete(v85);
  }
  v89 = a1[198];
  if (v89)
  {
    v90 = a1[199];
    v91 = (void *)a1[198];
    if (v90 != v89)
    {
      do
      {
        v92 = *(std::__shared_weak_count **)(v90 - 8);
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v90 -= 16;
      }
      while (v90 != v89);
      v91 = (void *)a1[198];
    }
    a1[199] = v89;
    operator delete(v91);
  }
  v95 = a1[195];
  if (v95)
  {
    v96 = a1[196];
    v97 = (void *)a1[195];
    if (v96 != v95)
    {
      do
      {
        v98 = *(std::__shared_weak_count **)(v96 - 8);
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v96 -= 16;
      }
      while (v96 != v95);
      v97 = (void *)a1[195];
    }
    a1[196] = v95;
    operator delete(v97);
  }
  v101 = a1[192];
  if (v101)
  {
    v102 = a1[193];
    v103 = (void *)a1[192];
    if (v102 != v101)
    {
      do
      {
        v104 = *(std::__shared_weak_count **)(v102 - 8);
        if (v104)
        {
          v105 = (unint64_t *)&v104->__shared_owners_;
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v102 -= 16;
      }
      while (v102 != v101);
      v103 = (void *)a1[192];
    }
    a1[193] = v101;
    operator delete(v103);
  }
  v107 = a1[189];
  if (v107)
  {
    v108 = a1[190];
    v109 = (void *)a1[189];
    if (v108 != v107)
    {
      do
      {
        v110 = *(std::__shared_weak_count **)(v108 - 8);
        if (v110)
        {
          v111 = (unint64_t *)&v110->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        v108 -= 16;
      }
      while (v108 != v107);
      v109 = (void *)a1[189];
    }
    a1[190] = v107;
    operator delete(v109);
  }
  v113 = (std::__shared_weak_count *)a1[183];
  if (v113)
  {
    v114 = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = (std::__shared_weak_count *)a1[181];
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)a1[179];
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = (std::__shared_weak_count *)a1[172];
  if (v122)
  {
    v123 = (unint64_t *)&v122->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = (std::__shared_weak_count *)a1[170];
  if (v125)
  {
    v126 = (unint64_t *)&v125->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)a1[168];
  if (v128)
  {
    v129 = (unint64_t *)&v128->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)a1[161];
  if (v131)
  {
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)a1[159];
  if (v134)
  {
    v135 = (unint64_t *)&v134->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)a1[157];
  if (v137)
  {
    v138 = (unint64_t *)&v137->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)a1[150];
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = (std::__shared_weak_count *)a1[148];
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = (std::__shared_weak_count *)a1[146];
  if (v146)
  {
    v147 = (unint64_t *)&v146->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = (std::__shared_weak_count *)a1[139];
  if (v149)
  {
    v150 = (unint64_t *)&v149->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (std::__shared_weak_count *)a1[137];
  if (v152)
  {
    v153 = (unint64_t *)&v152->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = (std::__shared_weak_count *)a1[135];
  if (v155)
  {
    v156 = (unint64_t *)&v155->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  return a1;
}

void sub_232D0FE30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 2200));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 2192));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 2184));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 2176));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 2168));
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2152);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2136);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2120);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2104);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2088);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2072);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2056);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2040);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2024);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 2008);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 1992);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 1976);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 1960);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 1944);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 1928);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v1 + 1880);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v1 + 1832);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 1792);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 1752);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 1712);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 1672);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 1632);
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v1 + 1608));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v1 + 1584));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v1 + 1560));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v1 + 1536));
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v1 + 1512));
  AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState((_QWORD *)(v1 + 1424));
  AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState((_QWORD *)(v1 + 1336));
  AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState((_QWORD *)(v1 + 1248));
  AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState((_QWORD *)(v1 + 1160));
  AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState((_QWORD *)(v1 + 1072));
  _Unwind_Resume(a1);
}

void AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::destroy(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **i;
  uint64_t v13;
  _QWORD v14[6];

  if (!*((_BYTE *)a1 + 788))
  {
    v6 = (_BYTE *)a1[3];
    if (!v6 || !v6[2986])
      goto LABEL_15;
LABEL_14:
    (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_15;
  }
  v2 = *a1;
  if (*a1)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (_BYTE *)a1[4];
  if (v6)
    goto LABEL_14;
LABEL_15:
  if (a1[129])
  {
    v7 = a1[130];
    v8 = *(NSObject **)(v7 + 16);
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v14[3] = &__block_descriptor_48_e5_v8__0l;
    v14[4] = v7;
    v14[5] = a1 + 126;
    dispatch_sync(v8, v14);
    *(_OWORD *)((char *)a1 + 1033) = 0u;
    *((_OWORD *)a1 + 63) = 0u;
    *((_OWORD *)a1 + 64) = 0u;
  }
  if (a1[113])
  {
    v9 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline();
    MEMORY[0x234927ECC](v9, 0x10F0C40BAA3AEAALL);
  }
  if (a1[114])
  {
    v10 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline();
    MEMORY[0x234927ECC](v10, 0x10F0C40BAA3AEAALL);
  }
  if (a1[115])
  {
    v11 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline();
    MEMORY[0x234927ECC](v11, 0x10F0C40BAA3AEAALL);
  }
  if (a1[234])
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 212);
    for (i = (uint64_t **)(a1 + 231); ; i[3])
    {
      i = (uint64_t **)*i;
      if (!i)
        break;
    }
    v13 = a1[234];
    if (v13)
      MEMORY[0x234927ECC](v13, 0xC400A2AC0F1);
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 212);
  }
}

void sub_232D10144(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::copyStateAndFunctionsFromOriginal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  unsigned int v44;
  int *v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  unsigned int v60;
  int *v61;
  int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  unsigned int v79;
  int *v80;
  int v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  unsigned int v89;
  int *v90;
  int v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::destroy((uint64_t *)a1);
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::copyState(a1, a3, 0, a2);
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 8) = v8;
    v9 = v8 + 3632;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    v10 = *(_DWORD *)(v8 + 2224);
    if (v10)
    {
      v11 = v8 + 2112;
      v12 = (int)*MEMORY[0x24BE51650];
      v13 = -1;
      do
      {
        v14 = v13++;
        v15 = __clz(__rbit32(v10));
        *((_QWORD *)&v94 + v13) = *(_QWORD *)(v11 + 8 * v15) + v12 + 32;
        v10 &= ~(1 << v15);
      }
      while (v10);
      *((_QWORD *)&v94 + v14 + 2) = v9;
      v16 = v13 + 2;
      if (v13 == -2)
        goto LABEL_6;
    }
    else
    {
      *(_QWORD *)&v94 = v8 + 3632;
      v16 = 1;
    }
    v74 = 0;
    v75 = *(unsigned int *)(a1 + 768);
    do
    {
      if ((_DWORD)v75)
      {
        v77 = 0;
        v78 = (__int128 *)*((_QWORD *)&v94 + v74);
        v79 = v75;
        v80 = (int *)(a1 + 64);
        while (1)
        {
          v81 = *v80;
          v80 += 6;
          if (*((_DWORD *)v78 + 4) == v81)
            break;
          if (v75 == ++v77)
            goto LABEL_77;
        }
      }
      else
      {
        LODWORD(v77) = 0;
      }
      if ((_DWORD)v77 == (_DWORD)v75)
      {
        v78 = (__int128 *)*((_QWORD *)&v94 + v74);
        v79 = v75;
LABEL_77:
        v82 = a1 + 24 * v79;
        v83 = *v78;
        *(_QWORD *)(v82 + 64) = *((_QWORD *)v78 + 2);
        *(_OWORD *)(v82 + 48) = v83;
        v76 = (*(_DWORD *)(a1 + 768) + 1);
        *(_DWORD *)(a1 + 768) = v76;
      }
      else
      {
        v76 = v75;
        LOBYTE(v75) = v77;
      }
      *(_DWORD *)(a1 + 772) |= 1 << v75;
      ++v74;
      v75 = v76;
    }
    while (v74 != v16);
  }
LABEL_6:
  v17 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)a1 = v17;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v18 = *(_DWORD *)(v17 + 2240);
    if (v18)
    {
      LODWORD(v19) = 0;
      v20 = v17 + 2112;
      v21 = (int)*MEMORY[0x24BE51650];
      do
      {
        v22 = __clz(__rbit32(v18));
        *((_QWORD *)&v94 + v19) = *(_QWORD *)(v20 + 8 * v22) + v21 + 32;
        v19 = (v19 + 1);
        v18 &= ~(1 << v22);
      }
      while (v18);
      if ((_DWORD)v19)
      {
        v23 = 0;
        v24 = *(unsigned int *)(a1 + 768);
        do
        {
          if ((_DWORD)v24)
          {
            v26 = 0;
            v27 = (__int128 *)*((_QWORD *)&v94 + v23);
            v28 = v24;
            v29 = (int *)(a1 + 64);
            while (1)
            {
              v30 = *v29;
              v29 += 6;
              if (*((_DWORD *)v27 + 4) == v30)
                break;
              if (v24 == ++v26)
                goto LABEL_22;
            }
          }
          else
          {
            LODWORD(v26) = 0;
          }
          if ((_DWORD)v26 == (_DWORD)v24)
          {
            v27 = (__int128 *)*((_QWORD *)&v94 + v23);
            v28 = v24;
LABEL_22:
            v31 = a1 + 24 * v28;
            v32 = *v27;
            *(_QWORD *)(v31 + 64) = *((_QWORD *)v27 + 2);
            *(_OWORD *)(v31 + 48) = v32;
            v25 = (*(_DWORD *)(a1 + 768) + 1);
            *(_DWORD *)(a1 + 768) = v25;
          }
          else
          {
            v25 = v24;
            LOBYTE(v24) = v26;
          }
          *(_DWORD *)(a1 + 776) |= 1 << v24;
          ++v23;
          v24 = v25;
        }
        while (v23 != v19);
      }
    }
  }
  v33 = *(_QWORD *)(a3 + 16);
  if (v33)
  {
    *(_QWORD *)(a1 + 16) = v33;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v34 = *(_DWORD *)(v33 + 2240);
    if (v34)
    {
      LODWORD(v35) = 0;
      v36 = v33 + 2112;
      v37 = (int)*MEMORY[0x24BE51650];
      do
      {
        v38 = __clz(__rbit32(v34));
        *((_QWORD *)&v94 + v35) = *(_QWORD *)(v36 + 8 * v38) + v37 + 32;
        v35 = (v35 + 1);
        v34 &= ~(1 << v38);
      }
      while (v34);
      if ((_DWORD)v35)
      {
        v39 = 0;
        v40 = *(unsigned int *)(a1 + 768);
        do
        {
          if ((_DWORD)v40)
          {
            v42 = 0;
            v43 = (__int128 *)*((_QWORD *)&v94 + v39);
            v44 = v40;
            v45 = (int *)(a1 + 64);
            while (1)
            {
              v46 = *v45;
              v45 += 6;
              if (*((_DWORD *)v43 + 4) == v46)
                break;
              if (v40 == ++v42)
                goto LABEL_39;
            }
          }
          else
          {
            LODWORD(v42) = 0;
          }
          if ((_DWORD)v42 == (_DWORD)v40)
          {
            v43 = (__int128 *)*((_QWORD *)&v94 + v39);
            v44 = v40;
LABEL_39:
            v47 = a1 + 24 * v44;
            v48 = *v43;
            *(_QWORD *)(v47 + 64) = *((_QWORD *)v43 + 2);
            *(_OWORD *)(v47 + 48) = v48;
            v41 = (*(_DWORD *)(a1 + 768) + 1);
            *(_DWORD *)(a1 + 768) = v41;
          }
          else
          {
            v41 = v40;
            LOBYTE(v40) = v42;
          }
          *(_DWORD *)(a1 + 776) |= 1 << v40;
          ++v39;
          v40 = v41;
        }
        while (v39 != v35);
      }
    }
  }
  v49 = *(_QWORD *)(a3 + 24);
  if (v49)
  {
    *(_QWORD *)(a1 + 24) = v49;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    v50 = *(_DWORD *)(v49 + 2224);
    if (v50)
    {
      LODWORD(v51) = 0;
      v52 = v49 + 2112;
      v53 = (int)*MEMORY[0x24BE51650];
      do
      {
        v54 = __clz(__rbit32(v50));
        *((_QWORD *)&v94 + v51) = *(_QWORD *)(v52 + 8 * v54) + v53 + 32;
        v51 = (v51 + 1);
        v50 &= ~(1 << v54);
      }
      while (v50);
      if ((_DWORD)v51)
      {
        v55 = 0;
        v56 = *(unsigned int *)(a1 + 768);
        do
        {
          if ((_DWORD)v56)
          {
            v58 = 0;
            v59 = (__int128 *)*((_QWORD *)&v94 + v55);
            v60 = v56;
            v61 = (int *)(a1 + 64);
            while (1)
            {
              v62 = *v61;
              v61 += 6;
              if (*((_DWORD *)v59 + 4) == v62)
                break;
              if (v56 == ++v58)
                goto LABEL_56;
            }
          }
          else
          {
            LODWORD(v58) = 0;
          }
          if ((_DWORD)v58 == (_DWORD)v56)
          {
            v59 = (__int128 *)*((_QWORD *)&v94 + v55);
            v60 = v56;
LABEL_56:
            v63 = a1 + 24 * v60;
            v64 = *v59;
            *(_QWORD *)(v63 + 64) = *((_QWORD *)v59 + 2);
            *(_OWORD *)(v63 + 48) = v64;
            v57 = (*(_DWORD *)(a1 + 768) + 1);
            *(_DWORD *)(a1 + 768) = v57;
          }
          else
          {
            v57 = v56;
            LOBYTE(v56) = v58;
          }
          *(_DWORD *)(a1 + 780) |= 1 << v56;
          ++v55;
          v56 = v57;
        }
        while (v55 != v51);
      }
    }
  }
  v65 = *(_QWORD *)(a3 + 32);
  if (v65)
  {
    *(_QWORD *)(a1 + 32) = v65;
    v66 = v65 + 2864;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    v67 = *(_DWORD *)(v65 + 2224);
    if (v67)
    {
      v68 = v65 + 2112;
      v69 = (int)*MEMORY[0x24BE51650];
      v70 = -1;
      do
      {
        v71 = v70++;
        v72 = __clz(__rbit32(v67));
        *((_QWORD *)&v94 + v70) = *(_QWORD *)(v68 + 8 * v72) + v69 + 32;
        v67 &= ~(1 << v72);
      }
      while (v67);
      *((_QWORD *)&v94 + v71 + 2) = v66;
      v73 = v70 + 2;
      if (v70 == -2)
        goto LABEL_62;
    }
    else
    {
      *(_QWORD *)&v94 = v65 + 2864;
      v73 = 1;
    }
    v84 = 0;
    v85 = *(unsigned int *)(a1 + 768);
    do
    {
      if ((_DWORD)v85)
      {
        v87 = 0;
        v88 = (__int128 *)*((_QWORD *)&v94 + v84);
        v89 = v85;
        v90 = (int *)(a1 + 64);
        while (1)
        {
          v91 = *v90;
          v90 += 6;
          if (*((_DWORD *)v88 + 4) == v91)
            break;
          if (v85 == ++v87)
            goto LABEL_90;
        }
      }
      else
      {
        LODWORD(v87) = 0;
      }
      if ((_DWORD)v87 == (_DWORD)v85)
      {
        v88 = (__int128 *)*((_QWORD *)&v94 + v84);
        v89 = v85;
LABEL_90:
        v92 = a1 + 24 * v89;
        v93 = *v88;
        *(_QWORD *)(v92 + 64) = *((_QWORD *)v88 + 2);
        *(_OWORD *)(v92 + 48) = v93;
        v86 = (*(_DWORD *)(a1 + 768) + 1);
        *(_DWORD *)(a1 + 768) = v86;
      }
      else
      {
        v86 = v85;
        LOBYTE(v85) = v87;
      }
      *(_DWORD *)(a1 + 784) |= 1 << v85;
      ++v84;
      v85 = v86;
    }
    while (v84 != v73);
  }
LABEL_62:
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::reserve(a1 + 1512, a4 + ((uint64_t)(*(_QWORD *)(a3 + 1520) - *(_QWORD *)(a3 + 1512)) >> 4));
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>>((void **)(a1 + 1512), *(_QWORD *)(a1 + 1520), *(_QWORD **)(a3 + 1512), *(_QWORD **)(a3 + 1520), (uint64_t)(*(_QWORD *)(a3 + 1520) - *(_QWORD *)(a3 + 1512)) >> 4);
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::reserve(a1 + 1536, a4 + ((uint64_t)(*(_QWORD *)(a3 + 1544) - *(_QWORD *)(a3 + 1536)) >> 4));
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>>((void **)(a1 + 1536), *(_QWORD *)(a1 + 1544), *(_QWORD **)(a3 + 1536), *(_QWORD **)(a3 + 1544), (uint64_t)(*(_QWORD *)(a3 + 1544) - *(_QWORD *)(a3 + 1536)) >> 4);
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::reserve(a1 + 1560, a4 + ((uint64_t)(*(_QWORD *)(a3 + 1568) - *(_QWORD *)(a3 + 1560)) >> 4));
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>>((void **)(a1 + 1560), *(_QWORD *)(a1 + 1568), *(_QWORD **)(a3 + 1560), *(_QWORD **)(a3 + 1568), (uint64_t)(*(_QWORD *)(a3 + 1568) - *(_QWORD *)(a3 + 1560)) >> 4);
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::reserve(a1 + 1584, a4 + ((uint64_t)(*(_QWORD *)(a3 + 1592) - *(_QWORD *)(a3 + 1584)) >> 4));
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>>((void **)(a1 + 1584), *(_QWORD *)(a1 + 1592), *(_QWORD **)(a3 + 1584), *(_QWORD **)(a3 + 1592), (uint64_t)(*(_QWORD *)(a3 + 1592) - *(_QWORD *)(a3 + 1584)) >> 4);
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::reserve(a1 + 1608, a4 + ((uint64_t)(*(_QWORD *)(a3 + 1616) - *(_QWORD *)(a3 + 1608)) >> 4));
  std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>>((void **)(a1 + 1608), *(_QWORD *)(a1 + 1616), *(_QWORD **)(a3 + 1608), *(_QWORD **)(a3 + 1616), (uint64_t)(*(_QWORD *)(a3 + 1616) - *(_QWORD *)(a3 + 1608)) >> 4);
  if (a1 != a3)
  {
    *(_DWORD *)(a1 + 1664) = *(_DWORD *)(a3 + 1664);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,void *> *>>((_QWORD *)(a1 + 1632), *(uint64_t ***)(a3 + 1648));
    *(_DWORD *)(a1 + 1704) = *(_DWORD *)(a3 + 1704);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,void *> *>>((_QWORD *)(a1 + 1672), *(uint64_t ***)(a3 + 1688));
    *(_DWORD *)(a1 + 1744) = *(_DWORD *)(a3 + 1744);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,void *> *>>((_QWORD *)(a1 + 1712), *(uint64_t ***)(a3 + 1728));
    *(_DWORD *)(a1 + 1784) = *(_DWORD *)(a3 + 1784);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,void *> *>>((_QWORD *)(a1 + 1752), *(uint64_t ***)(a3 + 1768));
    *(_DWORD *)(a1 + 1824) = *(_DWORD *)(a3 + 1824);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,void *> *>>((_QWORD *)(a1 + 1792), *(uint64_t ***)(a3 + 1808));
  }
}

uint64_t AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::copyState(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (_QWORD *)result;
  *(_BYTE *)(result + 788) = a3;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 796) = *(_DWORD *)(a2 + 796);
  *(_QWORD *)(result + 800) = *(_QWORD *)(a2 + 800);
  *(_BYTE *)(result + 808) = *(_BYTE *)(a2 + 808);
  *(_BYTE *)(result + 837) = *(_BYTE *)(a2 + 837);
  *(_OWORD *)(result + 812) = *(_OWORD *)(a2 + 812);
  *(_DWORD *)(result + 832) = *(_DWORD *)(a2 + 832);
  *(_DWORD *)(result + 828) = *(_DWORD *)(a2 + 828);
  *(_BYTE *)(result + 836) = *(_BYTE *)(a2 + 836);
  *(_DWORD *)(result + 792) = *(_DWORD *)(a2 + 792);
  *(_OWORD *)(result + 928) = *(_OWORD *)(a2 + 928);
  v7 = *(_OWORD *)(a2 + 944);
  v8 = *(_OWORD *)(a2 + 960);
  v9 = *(_OWORD *)(a2 + 976);
  *(_DWORD *)(result + 992) = *(_DWORD *)(a2 + 992);
  *(_OWORD *)(result + 960) = v8;
  *(_OWORD *)(result + 976) = v9;
  *(_OWORD *)(result + 944) = v7;
  v10 = *(_DWORD *)(a2 + 840);
  *(_BYTE *)(result + 844) = *(_BYTE *)(a2 + 844);
  *(_DWORD *)(result + 840) = v10;
  if (*(_QWORD *)(a2 + 904))
  {
    v11 = operator new();
    bzero((void *)v11, 0x8B0uLL);
    *(_QWORD *)(v11 + 792) = 0x3F80000000000001;
    *(_QWORD *)(v11 + 800) = 0x1FFFFFFFFLL;
    *(_BYTE *)(v11 + 808) = 1;
    *(_OWORD *)(v11 + 812) = xmmword_232D73520;
    *(_DWORD *)(v11 + 852) = 0;
    *(_QWORD *)(v11 + 828) = 0;
    *(_DWORD *)(v11 + 835) = 0;
    *(_OWORD *)(v11 + 856) = xmmword_232D73530;
    *(_QWORD *)(v11 + 872) = 3840;
    *(_QWORD *)(v11 + 880) = 0x1E3CE50800210000;
    *(_DWORD *)(v11 + 888) = 1184;
    *(_OWORD *)(v11 + 1000) = 0u;
    *(_OWORD *)(v11 + 1016) = 0u;
    *(_OWORD *)(v11 + 1032) = 0u;
    *(_QWORD *)(v11 + 1144) = 0;
    *(_QWORD *)(v11 + 1136) = 0;
    *(_BYTE *)(v11 + 1152) = 0;
    *(_OWORD *)(v11 + 1160) = 0u;
    *(_OWORD *)(v11 + 1176) = 0u;
    *(_OWORD *)(v11 + 1192) = 0u;
    *(_OWORD *)(v11 + 1205) = 0u;
    *(_QWORD *)(v11 + 1232) = 0;
    *(_QWORD *)(v11 + 1224) = 0;
    *(_BYTE *)(v11 + 1240) = 0;
    *(_OWORD *)(v11 + 1248) = 0u;
    *(_OWORD *)(v11 + 1264) = 0u;
    *(_OWORD *)(v11 + 1280) = 0u;
    *(_OWORD *)(v11 + 1293) = 0u;
    *(_QWORD *)(v11 + 1312) = 0;
    *(_QWORD *)(v11 + 1320) = 0;
    *(_BYTE *)(v11 + 1328) = 0;
    *(_OWORD *)(v11 + 1336) = 0u;
    *(_OWORD *)(v11 + 1352) = 0u;
    *(_OWORD *)(v11 + 1368) = 0u;
    *(_OWORD *)(v11 + 1381) = 0u;
    *(_QWORD *)(v11 + 1400) = 0;
    *(_QWORD *)(v11 + 1408) = 0;
    *(_BYTE *)(v11 + 1416) = 0;
    *(_OWORD *)(v11 + 1424) = 0u;
    *(_OWORD *)(v11 + 1440) = 0u;
    *(_OWORD *)(v11 + 1456) = 0u;
    *(_OWORD *)(v11 + 1469) = 0u;
    *(_QWORD *)(v11 + 1496) = 0;
    *(_QWORD *)(v11 + 1488) = 0;
    *(_BYTE *)(v11 + 1504) = 0;
    *(_DWORD *)(v11 + 992) = 0;
    *(_OWORD *)(v11 + 960) = 0u;
    *(_OWORD *)(v11 + 976) = 0u;
    *(_OWORD *)(v11 + 928) = 0u;
    *(_OWORD *)(v11 + 944) = 0u;
    *(_OWORD *)(v11 + 896) = 0u;
    *(_OWORD *)(v11 + 912) = 0u;
    *(_QWORD *)(v11 + 1125) = 0;
    *(_OWORD *)(v11 + 1096) = 0u;
    *(_OWORD *)(v11 + 1112) = 0u;
    *(_OWORD *)(v11 + 1064) = 0u;
    *(_OWORD *)(v11 + 1080) = 0u;
    *(_QWORD *)(v11 + 1656) = 0;
    *(_OWORD *)(v11 + 1624) = 0u;
    *(_OWORD *)(v11 + 1640) = 0u;
    *(_OWORD *)(v11 + 1592) = 0u;
    *(_OWORD *)(v11 + 1608) = 0u;
    *(_OWORD *)(v11 + 1560) = 0u;
    *(_OWORD *)(v11 + 1576) = 0u;
    *(_OWORD *)(v11 + 1528) = 0u;
    *(_OWORD *)(v11 + 1544) = 0u;
    *(_OWORD *)(v11 + 1512) = 0u;
    *(_DWORD *)(v11 + 1664) = 1065353216;
    *(_OWORD *)(v11 + 1688) = 0u;
    *(_OWORD *)(v11 + 1672) = 0u;
    *(_DWORD *)(v11 + 1704) = 1065353216;
    *(_OWORD *)(v11 + 1728) = 0u;
    *(_OWORD *)(v11 + 1712) = 0u;
    *(_DWORD *)(v11 + 1744) = 1065353216;
    *(_OWORD *)(v11 + 1768) = 0u;
    *(_OWORD *)(v11 + 1752) = 0u;
    *(_DWORD *)(v11 + 1784) = 1065353216;
    *(_OWORD *)(v11 + 1808) = 0u;
    *(_OWORD *)(v11 + 1792) = 0u;
    *(_DWORD *)(v11 + 1824) = 1065353216;
    *(_OWORD *)(v11 + 1832) = 0u;
    *(_OWORD *)(v11 + 1848) = 0u;
    *(_DWORD *)(v11 + 1864) = 1065353216;
    *(_QWORD *)(v11 + 1904) = 0;
    *(_OWORD *)(v11 + 1888) = 0u;
    *(_OWORD *)(v11 + 1872) = 0u;
    *(_DWORD *)(v11 + 1912) = 1065353216;
    *(_OWORD *)(v11 + 2184) = 0u;
    *(_OWORD *)(v11 + 2200) = 0u;
    *(_OWORD *)(v11 + 2152) = 0u;
    *(_OWORD *)(v11 + 2168) = 0u;
    *(_OWORD *)(v11 + 2120) = 0u;
    *(_OWORD *)(v11 + 2136) = 0u;
    *(_OWORD *)(v11 + 2088) = 0u;
    *(_OWORD *)(v11 + 2104) = 0u;
    *(_OWORD *)(v11 + 2056) = 0u;
    *(_OWORD *)(v11 + 2072) = 0u;
    *(_OWORD *)(v11 + 2024) = 0u;
    *(_OWORD *)(v11 + 2040) = 0u;
    *(_OWORD *)(v11 + 1992) = 0u;
    *(_OWORD *)(v11 + 2008) = 0u;
    *(_OWORD *)(v11 + 1960) = 0u;
    *(_OWORD *)(v11 + 1976) = 0u;
    *(_OWORD *)(v11 + 1928) = 0u;
    *(_OWORD *)(v11 + 1944) = 0u;
    result = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::clone(v11, *(_QWORD *)(a2 + 904), a4);
    v6[113] = v11;
  }
  if (*(_QWORD *)(a2 + 912))
  {
    v12 = operator new();
    bzero((void *)v12, 0x8B0uLL);
    *(_QWORD *)(v12 + 792) = 0x3F80000000000001;
    *(_QWORD *)(v12 + 800) = 0x1FFFFFFFFLL;
    *(_BYTE *)(v12 + 808) = 1;
    *(_OWORD *)(v12 + 812) = xmmword_232D73520;
    *(_DWORD *)(v12 + 852) = 0;
    *(_QWORD *)(v12 + 828) = 0;
    *(_DWORD *)(v12 + 835) = 0;
    *(_OWORD *)(v12 + 856) = xmmword_232D73530;
    *(_QWORD *)(v12 + 872) = 3840;
    *(_QWORD *)(v12 + 880) = 0x1E3CE50800210000;
    *(_DWORD *)(v12 + 888) = 1184;
    *(_OWORD *)(v12 + 1000) = 0u;
    *(_OWORD *)(v12 + 1016) = 0u;
    *(_OWORD *)(v12 + 1032) = 0u;
    *(_QWORD *)(v12 + 1144) = 0;
    *(_QWORD *)(v12 + 1136) = 0;
    *(_BYTE *)(v12 + 1152) = 0;
    *(_OWORD *)(v12 + 1160) = 0u;
    *(_OWORD *)(v12 + 1176) = 0u;
    *(_OWORD *)(v12 + 1192) = 0u;
    *(_OWORD *)(v12 + 1205) = 0u;
    *(_QWORD *)(v12 + 1232) = 0;
    *(_QWORD *)(v12 + 1224) = 0;
    *(_BYTE *)(v12 + 1240) = 0;
    *(_OWORD *)(v12 + 1248) = 0u;
    *(_OWORD *)(v12 + 1264) = 0u;
    *(_OWORD *)(v12 + 1280) = 0u;
    *(_OWORD *)(v12 + 1293) = 0u;
    *(_QWORD *)(v12 + 1312) = 0;
    *(_QWORD *)(v12 + 1320) = 0;
    *(_BYTE *)(v12 + 1328) = 0;
    *(_OWORD *)(v12 + 1336) = 0u;
    *(_OWORD *)(v12 + 1352) = 0u;
    *(_OWORD *)(v12 + 1368) = 0u;
    *(_OWORD *)(v12 + 1381) = 0u;
    *(_QWORD *)(v12 + 1400) = 0;
    *(_QWORD *)(v12 + 1408) = 0;
    *(_BYTE *)(v12 + 1416) = 0;
    *(_OWORD *)(v12 + 1424) = 0u;
    *(_OWORD *)(v12 + 1440) = 0u;
    *(_OWORD *)(v12 + 1456) = 0u;
    *(_OWORD *)(v12 + 1469) = 0u;
    *(_QWORD *)(v12 + 1496) = 0;
    *(_QWORD *)(v12 + 1488) = 0;
    *(_BYTE *)(v12 + 1504) = 0;
    *(_DWORD *)(v12 + 992) = 0;
    *(_OWORD *)(v12 + 960) = 0u;
    *(_OWORD *)(v12 + 976) = 0u;
    *(_OWORD *)(v12 + 928) = 0u;
    *(_OWORD *)(v12 + 944) = 0u;
    *(_OWORD *)(v12 + 896) = 0u;
    *(_OWORD *)(v12 + 912) = 0u;
    *(_QWORD *)(v12 + 1125) = 0;
    *(_OWORD *)(v12 + 1096) = 0u;
    *(_OWORD *)(v12 + 1112) = 0u;
    *(_OWORD *)(v12 + 1064) = 0u;
    *(_OWORD *)(v12 + 1080) = 0u;
    *(_QWORD *)(v12 + 1656) = 0;
    *(_OWORD *)(v12 + 1624) = 0u;
    *(_OWORD *)(v12 + 1640) = 0u;
    *(_OWORD *)(v12 + 1592) = 0u;
    *(_OWORD *)(v12 + 1608) = 0u;
    *(_OWORD *)(v12 + 1560) = 0u;
    *(_OWORD *)(v12 + 1576) = 0u;
    *(_OWORD *)(v12 + 1528) = 0u;
    *(_OWORD *)(v12 + 1544) = 0u;
    *(_OWORD *)(v12 + 1512) = 0u;
    *(_DWORD *)(v12 + 1664) = 1065353216;
    *(_OWORD *)(v12 + 1688) = 0u;
    *(_OWORD *)(v12 + 1672) = 0u;
    *(_DWORD *)(v12 + 1704) = 1065353216;
    *(_OWORD *)(v12 + 1728) = 0u;
    *(_OWORD *)(v12 + 1712) = 0u;
    *(_DWORD *)(v12 + 1744) = 1065353216;
    *(_OWORD *)(v12 + 1768) = 0u;
    *(_OWORD *)(v12 + 1752) = 0u;
    *(_DWORD *)(v12 + 1784) = 1065353216;
    *(_OWORD *)(v12 + 1808) = 0u;
    *(_OWORD *)(v12 + 1792) = 0u;
    *(_DWORD *)(v12 + 1824) = 1065353216;
    *(_OWORD *)(v12 + 1832) = 0u;
    *(_OWORD *)(v12 + 1848) = 0u;
    *(_DWORD *)(v12 + 1864) = 1065353216;
    *(_QWORD *)(v12 + 1904) = 0;
    *(_OWORD *)(v12 + 1888) = 0u;
    *(_OWORD *)(v12 + 1872) = 0u;
    *(_DWORD *)(v12 + 1912) = 1065353216;
    *(_OWORD *)(v12 + 2184) = 0u;
    *(_OWORD *)(v12 + 2200) = 0u;
    *(_OWORD *)(v12 + 2152) = 0u;
    *(_OWORD *)(v12 + 2168) = 0u;
    *(_OWORD *)(v12 + 2120) = 0u;
    *(_OWORD *)(v12 + 2136) = 0u;
    *(_OWORD *)(v12 + 2088) = 0u;
    *(_OWORD *)(v12 + 2104) = 0u;
    *(_OWORD *)(v12 + 2056) = 0u;
    *(_OWORD *)(v12 + 2072) = 0u;
    *(_OWORD *)(v12 + 2024) = 0u;
    *(_OWORD *)(v12 + 2040) = 0u;
    *(_OWORD *)(v12 + 1992) = 0u;
    *(_OWORD *)(v12 + 2008) = 0u;
    *(_OWORD *)(v12 + 1960) = 0u;
    *(_OWORD *)(v12 + 1976) = 0u;
    *(_OWORD *)(v12 + 1928) = 0u;
    *(_OWORD *)(v12 + 1944) = 0u;
    result = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::clone(v12, *(_QWORD *)(a2 + 912), a4);
    v6[114] = v12;
  }
  if (*(_QWORD *)(a2 + 920))
  {
    v13 = operator new();
    bzero((void *)v13, 0x8B0uLL);
    *(_QWORD *)(v13 + 792) = 0x3F80000000000001;
    *(_QWORD *)(v13 + 800) = 0x1FFFFFFFFLL;
    *(_BYTE *)(v13 + 808) = 1;
    *(_OWORD *)(v13 + 812) = xmmword_232D73520;
    *(_DWORD *)(v13 + 852) = 0;
    *(_QWORD *)(v13 + 828) = 0;
    *(_DWORD *)(v13 + 835) = 0;
    *(_OWORD *)(v13 + 856) = xmmword_232D73530;
    *(_QWORD *)(v13 + 872) = 3840;
    *(_QWORD *)(v13 + 880) = 0x1E3CE50800210000;
    *(_DWORD *)(v13 + 888) = 1184;
    *(_OWORD *)(v13 + 1000) = 0u;
    *(_OWORD *)(v13 + 1016) = 0u;
    *(_OWORD *)(v13 + 1032) = 0u;
    *(_QWORD *)(v13 + 1144) = 0;
    *(_QWORD *)(v13 + 1136) = 0;
    *(_BYTE *)(v13 + 1152) = 0;
    *(_OWORD *)(v13 + 1160) = 0u;
    *(_OWORD *)(v13 + 1176) = 0u;
    *(_OWORD *)(v13 + 1192) = 0u;
    *(_OWORD *)(v13 + 1205) = 0u;
    *(_QWORD *)(v13 + 1232) = 0;
    *(_QWORD *)(v13 + 1224) = 0;
    *(_BYTE *)(v13 + 1240) = 0;
    *(_OWORD *)(v13 + 1248) = 0u;
    *(_OWORD *)(v13 + 1264) = 0u;
    *(_OWORD *)(v13 + 1280) = 0u;
    *(_OWORD *)(v13 + 1293) = 0u;
    *(_QWORD *)(v13 + 1312) = 0;
    *(_QWORD *)(v13 + 1320) = 0;
    *(_BYTE *)(v13 + 1328) = 0;
    *(_OWORD *)(v13 + 1336) = 0u;
    *(_OWORD *)(v13 + 1352) = 0u;
    *(_OWORD *)(v13 + 1368) = 0u;
    *(_OWORD *)(v13 + 1381) = 0u;
    *(_QWORD *)(v13 + 1400) = 0;
    *(_QWORD *)(v13 + 1408) = 0;
    *(_BYTE *)(v13 + 1416) = 0;
    *(_OWORD *)(v13 + 1424) = 0u;
    *(_OWORD *)(v13 + 1440) = 0u;
    *(_OWORD *)(v13 + 1456) = 0u;
    *(_OWORD *)(v13 + 1469) = 0u;
    *(_QWORD *)(v13 + 1496) = 0;
    *(_QWORD *)(v13 + 1488) = 0;
    *(_BYTE *)(v13 + 1504) = 0;
    *(_DWORD *)(v13 + 992) = 0;
    *(_OWORD *)(v13 + 960) = 0u;
    *(_OWORD *)(v13 + 976) = 0u;
    *(_OWORD *)(v13 + 928) = 0u;
    *(_OWORD *)(v13 + 944) = 0u;
    *(_OWORD *)(v13 + 896) = 0u;
    *(_OWORD *)(v13 + 912) = 0u;
    *(_QWORD *)(v13 + 1125) = 0;
    *(_OWORD *)(v13 + 1096) = 0u;
    *(_OWORD *)(v13 + 1112) = 0u;
    *(_OWORD *)(v13 + 1064) = 0u;
    *(_OWORD *)(v13 + 1080) = 0u;
    *(_QWORD *)(v13 + 1656) = 0;
    *(_OWORD *)(v13 + 1624) = 0u;
    *(_OWORD *)(v13 + 1640) = 0u;
    *(_OWORD *)(v13 + 1592) = 0u;
    *(_OWORD *)(v13 + 1608) = 0u;
    *(_OWORD *)(v13 + 1560) = 0u;
    *(_OWORD *)(v13 + 1576) = 0u;
    *(_OWORD *)(v13 + 1528) = 0u;
    *(_OWORD *)(v13 + 1544) = 0u;
    *(_OWORD *)(v13 + 1512) = 0u;
    *(_DWORD *)(v13 + 1664) = 1065353216;
    *(_OWORD *)(v13 + 1688) = 0u;
    *(_OWORD *)(v13 + 1672) = 0u;
    *(_DWORD *)(v13 + 1704) = 1065353216;
    *(_OWORD *)(v13 + 1728) = 0u;
    *(_OWORD *)(v13 + 1712) = 0u;
    *(_DWORD *)(v13 + 1744) = 1065353216;
    *(_OWORD *)(v13 + 1768) = 0u;
    *(_OWORD *)(v13 + 1752) = 0u;
    *(_DWORD *)(v13 + 1784) = 1065353216;
    *(_OWORD *)(v13 + 1808) = 0u;
    *(_OWORD *)(v13 + 1792) = 0u;
    *(_DWORD *)(v13 + 1824) = 1065353216;
    *(_OWORD *)(v13 + 1832) = 0u;
    *(_OWORD *)(v13 + 1848) = 0u;
    *(_DWORD *)(v13 + 1864) = 1065353216;
    *(_QWORD *)(v13 + 1904) = 0;
    *(_OWORD *)(v13 + 1888) = 0u;
    *(_OWORD *)(v13 + 1872) = 0u;
    *(_DWORD *)(v13 + 1912) = 1065353216;
    *(_OWORD *)(v13 + 2184) = 0u;
    *(_OWORD *)(v13 + 2200) = 0u;
    *(_OWORD *)(v13 + 2152) = 0u;
    *(_OWORD *)(v13 + 2168) = 0u;
    *(_OWORD *)(v13 + 2120) = 0u;
    *(_OWORD *)(v13 + 2136) = 0u;
    *(_OWORD *)(v13 + 2088) = 0u;
    *(_OWORD *)(v13 + 2104) = 0u;
    *(_OWORD *)(v13 + 2056) = 0u;
    *(_OWORD *)(v13 + 2072) = 0u;
    *(_OWORD *)(v13 + 2024) = 0u;
    *(_OWORD *)(v13 + 2040) = 0u;
    *(_OWORD *)(v13 + 1992) = 0u;
    *(_OWORD *)(v13 + 2008) = 0u;
    *(_OWORD *)(v13 + 1960) = 0u;
    *(_OWORD *)(v13 + 1976) = 0u;
    *(_OWORD *)(v13 + 1928) = 0u;
    *(_OWORD *)(v13 + 1944) = 0u;
    result = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::clone(v13, *(_QWORD *)(a2 + 920), a4);
    v6[115] = v13;
  }
  return result;
}

void AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::clone(uint64_t a1, uint64_t *a2, os_unfair_lock_s *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  int *v49;
  int v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  unsigned int v70;
  int *v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  unsigned int v87;
  int *v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  int8x8_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  id v96;
  int v97;
  int v98;
  void *v99;
  uint64_t v100;
  int8x8_t *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  id v105;
  int v106;
  int v107;
  void *v108;
  uint64_t v109;
  int8x8_t *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  id v114;
  int v115;
  int v116;
  void *v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  char *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t i;
  int v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  os_unfair_lock_t lock;
  os_unfair_lock_s *locka;
  uint64_t *v156;
  __int128 v157;
  void *v158[2];
  void *__p[2];
  int v160;
  void *v161[2];
  void *v162[2];
  int v163;
  void *v164[2];
  void *v165[4];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;

  lock = a3;
  v171 = *MEMORY[0x24BDAC8D0];
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::destroy((uint64_t *)a1);
  v5 = a2[1];
  v156 = a2;
  if (!v5)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *a2;
    if (*a2)
      goto LABEL_11;
LABEL_19:
    v19 = 0;
    goto LABEL_20;
  }
  v6 = operator new();
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v6, v5);
  *(_QWORD *)v6 = &off_2504018A0;
  *(_BYTE *)(v6 + 1992) = 0;
  *(_QWORD *)(v6 + 2000) = 0;
  *(_OWORD *)(v6 + 2008) = 0u;
  *(_OWORD *)(v6 + 2240) = 0u;
  *(_OWORD *)(v6 + 2256) = 0u;
  *(_QWORD *)(v6 + 2272) = 0;
  *(_OWORD *)(v6 + 2288) = 0u;
  *(_OWORD *)(v6 + 2304) = 0u;
  *(_QWORD *)(v6 + 2320) = 0;
  *(_OWORD *)(v6 + 2336) = 0u;
  *(_OWORD *)(v6 + 2352) = 0u;
  *(_QWORD *)(v6 + 2368) = 0;
  *(_OWORD *)(v6 + 2384) = 0u;
  *(_OWORD *)(v6 + 2400) = 0u;
  *(_QWORD *)(v6 + 2416) = 0;
  *(_QWORD *)(v6 + 2472) = 0;
  *(_OWORD *)(v6 + 2456) = 0u;
  *(_OWORD *)(v6 + 2440) = 0u;
  *(_QWORD *)(v6 + 2520) = 0;
  *(_OWORD *)(v6 + 2504) = 0u;
  *(_OWORD *)(v6 + 2488) = 0u;
  *(_QWORD *)(v6 + 2568) = 0;
  *(_OWORD *)(v6 + 2552) = 0u;
  *(_OWORD *)(v6 + 2536) = 0u;
  *(_QWORD *)(v6 + 2616) = 0;
  *(_OWORD *)(v6 + 2600) = 0u;
  *(_OWORD *)(v6 + 2584) = 0u;
  *(_QWORD *)(v6 + 2664) = 0;
  *(_OWORD *)(v6 + 2648) = 0u;
  *(_OWORD *)(v6 + 2632) = 0u;
  *(_QWORD *)(v6 + 1408) = 0;
  *(_OWORD *)(v6 + 1392) = 0u;
  *(_OWORD *)(v6 + 1376) = 0u;
  *(_OWORD *)(v6 + 1360) = 0u;
  *(_OWORD *)(v6 + 1344) = 0u;
  *(_OWORD *)(v6 + 1328) = 0u;
  *(_OWORD *)(v6 + 1312) = 0u;
  *(_OWORD *)(v6 + 1296) = 0u;
  *(_OWORD *)(v6 + 1280) = 0u;
  *(_OWORD *)(v6 + 1264) = 0u;
  *(_OWORD *)(v6 + 2208) = 0u;
  *(_OWORD *)(v6 + 2192) = 0u;
  *(_OWORD *)(v6 + 2176) = 0u;
  *(_OWORD *)(v6 + 2160) = 0u;
  *(_OWORD *)(v6 + 2144) = 0u;
  *(_OWORD *)(v6 + 2128) = 0u;
  *(_OWORD *)(v6 + 2112) = 0u;
  *(_OWORD *)(v6 + 2680) = 0u;
  *(_OWORD *)(v6 + 2696) = 0u;
  *(_OWORD *)(v6 + 2712) = 0u;
  *(_OWORD *)(v6 + 2728) = 0u;
  *(_OWORD *)(v6 + 2768) = 0u;
  *(_OWORD *)(v6 + 2784) = 0u;
  *(_OWORD *)(v6 + 2800) = 0u;
  *(_QWORD *)(v6 + 2848) = 0;
  *(_OWORD *)(v6 + 2832) = 0u;
  *(_OWORD *)(v6 + 3656) = 0u;
  *(_OWORD *)(v6 + 3672) = 0u;
  *(_QWORD *)(v6 + 3688) = 0;
  *(_OWORD *)(v6 + 3720) = 0u;
  *(_OWORD *)(v6 + 3736) = 0u;
  *(_OWORD *)(v6 + 3704) = 0u;
  *(_OWORD *)(v6 + 3768) = 0u;
  *(_OWORD *)(v6 + 3784) = 0u;
  *(_DWORD *)(v6 + 3800) = 1065353216;
  *(_QWORD *)(v6 + 3824) = 850045863;
  *(_OWORD *)(v6 + 3832) = 0u;
  *(_OWORD *)(v6 + 3848) = 0u;
  *(_OWORD *)(v6 + 3864) = 0u;
  *(_QWORD *)(v6 + 3880) = 0;
  memcpy((void *)(v6 + 1240), (const void *)(v5 + 1240), 0x5F4uLL);
  std::string::operator=((std::string *)(v6 + 2768), (const std::string *)(v5 + 2768));
  if (v6 != v5)
    std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>((_QWORD *)(v6 + 2792), *(char **)(v5 + 2792), *(char **)(v5 + 2800), (uint64_t)(*(_QWORD *)(v5 + 2800) - *(_QWORD *)(v5 + 2792)) >> 3);
  *(_OWORD *)(v6 + 2816) = *(_OWORD *)(v5 + 2816);
  memcpy((void *)(v6 + 2832), (const void *)(v5 + 2832), 0x31CuLL);
  v7 = *(_OWORD *)(v5 + 3632);
  *(_QWORD *)(v6 + 3648) = *(_QWORD *)(v5 + 3648);
  *(_OWORD *)(v6 + 3632) = v7;
  v8 = *(_OWORD *)(v5 + 3688);
  v9 = *(_OWORD *)(v5 + 3656);
  *(_OWORD *)(v6 + 3672) = *(_OWORD *)(v5 + 3672);
  *(_OWORD *)(v6 + 3688) = v8;
  *(_OWORD *)(v6 + 3656) = v9;
  std::string::operator=((std::string *)(v6 + 3704), (const std::string *)(v5 + 3704));
  std::string::operator=((std::string *)(v6 + 3728), (const std::string *)(v5 + 3728));
  *(_QWORD *)(v6 + 3752) = *(_QWORD *)(v5 + 3752);
  *(_DWORD *)(v6 + 3760) = *(_DWORD *)(v5 + 3760);
  *(_WORD *)(v6 + 3764) = *(_WORD *)(v5 + 3764);
  if (v6 != v5)
  {
    *(_DWORD *)(v6 + 3800) = *(_DWORD *)(v5 + 3800);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(v6 + 3768), *(uint64_t **)(v5 + 3784));
  }
  *(_QWORD *)(v6 + 3808) = *(_QWORD *)(v5 + 3808);
  *(_DWORD *)(v6 + 3816) = *(_DWORD *)(v5 + 3816);
  *(_QWORD *)v6 = &off_250402580;
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::cloneProgramInfo(v6, v5);
  v10 = *(_DWORD *)(v6 + 944);
  *(_OWORD *)(v6 + 2000) = *(_OWORD *)(v6 + 520);
  *(_QWORD *)(v6 + 2016) = *(_QWORD *)(v6 + 536);
  *(_QWORD *)(v6 + 2128) = *(_QWORD *)(v6 + 920);
  *(_DWORD *)(v6 + 2828) += v10;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v6 + 1240);
  v11 = v6 + 4 * *(unsigned int *)(v6 + 2752);
  *(_BYTE *)(v6 + 2756) = 1;
  *(_DWORD *)(v6 + 2828) = *(_DWORD *)(v5 + 2828);
  *(_QWORD *)(v11 + 2872) = *(_QWORD *)(v11 + 2872) & 0xFFFFFFFF00000003 | *(_QWORD *)(v6 + 2000) & 0xFFFFFFFFFFFFFFFCLL;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v6 + 1240);
  *(_DWORD *)(v6 + 3760) = *(_DWORD *)(v5 + 3760);
  *(_QWORD *)(v6 + 3752) = *(_QWORD *)(v5 + 3752);
  *(_QWORD *)(v6 + 3808) = *(id *)(v5 + 3808);
  *(_DWORD *)(v6 + 3816) = *(_DWORD *)(v5 + 3816);
  *(_QWORD *)(a1 + 8) = v6;
  v168 = 0u;
  v169 = 0u;
  v166 = 0u;
  v167 = 0u;
  memset(v165, 0, sizeof(v165));
  *(_OWORD *)v164 = 0u;
  v12 = *(_DWORD *)(v6 + 2224);
  if (v12)
  {
    v13 = (int)*MEMORY[0x24BE51650];
    v14 = -1;
    do
    {
      v15 = v14++;
      v16 = __clz(__rbit32(v12));
      v164[v14] = (void *)(*(_QWORD *)(v6 + 2112 + 8 * v16) + v13 + 32);
      v12 &= ~(1 << v16);
    }
    while (v12);
    v164[v15 + 2] = (void *)(v6 + 3632);
    v17 = v14 + 2;
    if (v14 == -2)
      goto LABEL_10;
  }
  else
  {
    v164[0] = (void *)(v6 + 3632);
    v17 = 1;
  }
  v82 = 0;
  v83 = *(unsigned int *)(a1 + 768);
  do
  {
    if ((_DWORD)v83)
    {
      v85 = 0;
      v86 = v164[v82];
      v87 = v83;
      v88 = (int *)(a1 + 64);
      while (1)
      {
        v89 = *v88;
        v88 += 6;
        if (v86[4] == v89)
          break;
        if (v83 == ++v85)
          goto LABEL_92;
      }
    }
    else
    {
      LODWORD(v85) = 0;
    }
    if ((_DWORD)v85 == (_DWORD)v83)
    {
      v86 = v164[v82];
      v87 = v83;
LABEL_92:
      v90 = a1 + 24 * v87;
      v91 = *(_OWORD *)v86;
      *(_QWORD *)(v90 + 64) = *((_QWORD *)v86 + 2);
      *(_OWORD *)(v90 + 48) = v91;
      v84 = (*(_DWORD *)(a1 + 768) + 1);
      *(_DWORD *)(a1 + 768) = v84;
    }
    else
    {
      v84 = v83;
      LOBYTE(v83) = v85;
    }
    *(_DWORD *)(a1 + 772) |= 1 << v83;
    ++v82;
    v83 = v84;
  }
  while (v82 != v17);
LABEL_10:
  *(_QWORD *)(a1 + 1120) = *(_QWORD *)(v6 + 316);
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(v6 + 352);
  *(_QWORD *)(a1 + 1140) = 0;
  v18 = *a2;
  if (!*a2)
    goto LABEL_19;
LABEL_11:
  v19 = operator new();
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v19, v18);
  *(_QWORD *)v19 = &off_2504018C0;
  *(_BYTE *)(v19 + 1992) = 0;
  *(_QWORD *)(v19 + 2000) = 0;
  *(_QWORD *)(v19 + 2016) = 0;
  *(_QWORD *)(v19 + 2008) = 0;
  *(_OWORD *)(v19 + 2256) = 0u;
  *(_OWORD *)(v19 + 2272) = 0u;
  *(_QWORD *)(v19 + 2288) = 0;
  *(_OWORD *)(v19 + 2304) = 0u;
  *(_OWORD *)(v19 + 2320) = 0u;
  *(_QWORD *)(v19 + 2336) = 0;
  *(_OWORD *)(v19 + 2352) = 0u;
  *(_OWORD *)(v19 + 2368) = 0u;
  *(_QWORD *)(v19 + 2384) = 0;
  *(_OWORD *)(v19 + 2400) = 0u;
  *(_OWORD *)(v19 + 2416) = 0u;
  *(_QWORD *)(v19 + 2432) = 0;
  *(_QWORD *)(v19 + 2488) = 0;
  *(_OWORD *)(v19 + 2472) = 0u;
  *(_OWORD *)(v19 + 2456) = 0u;
  *(_QWORD *)(v19 + 2536) = 0;
  *(_OWORD *)(v19 + 2520) = 0u;
  *(_OWORD *)(v19 + 2504) = 0u;
  *(_QWORD *)(v19 + 2584) = 0;
  *(_OWORD *)(v19 + 2568) = 0u;
  *(_OWORD *)(v19 + 2552) = 0u;
  *(_QWORD *)(v19 + 2632) = 0;
  *(_OWORD *)(v19 + 2616) = 0u;
  *(_OWORD *)(v19 + 2600) = 0u;
  *(_QWORD *)(v19 + 2680) = 0;
  *(_OWORD *)(v19 + 2664) = 0u;
  *(_OWORD *)(v19 + 2648) = 0u;
  *(_QWORD *)(v19 + 1408) = 0;
  *(_OWORD *)(v19 + 1392) = 0u;
  *(_OWORD *)(v19 + 1376) = 0u;
  *(_OWORD *)(v19 + 1360) = 0u;
  *(_OWORD *)(v19 + 1344) = 0u;
  *(_OWORD *)(v19 + 1328) = 0u;
  *(_OWORD *)(v19 + 1312) = 0u;
  *(_OWORD *)(v19 + 1296) = 0u;
  *(_OWORD *)(v19 + 1280) = 0u;
  *(_OWORD *)(v19 + 1264) = 0u;
  *(_OWORD *)(v19 + 2224) = 0u;
  *(_OWORD *)(v19 + 2208) = 0u;
  *(_OWORD *)(v19 + 2192) = 0u;
  *(_OWORD *)(v19 + 2176) = 0u;
  *(_OWORD *)(v19 + 2160) = 0u;
  *(_OWORD *)(v19 + 2144) = 0u;
  *(_OWORD *)(v19 + 2128) = 0u;
  *(_OWORD *)(v19 + 2112) = 0u;
  *(_OWORD *)(v19 + 2696) = 0u;
  *(_OWORD *)(v19 + 2712) = 0u;
  *(_OWORD *)(v19 + 2728) = 0u;
  *(_OWORD *)(v19 + 2744) = 0u;
  *(_OWORD *)(v19 + 2784) = 0u;
  *(_OWORD *)(v19 + 2800) = 0u;
  *(_OWORD *)(v19 + 2816) = 0u;
  *(_OWORD *)(v19 + 2912) = 0u;
  *(_OWORD *)(v19 + 2928) = 0u;
  *(_QWORD *)(v19 + 2944) = 0;
  *(_QWORD *)(v19 + 2992) = 0;
  *(_OWORD *)(v19 + 2976) = 0u;
  *(_OWORD *)(v19 + 2960) = 0u;
  *(_QWORD *)(v19 + 3048) = 0;
  *(_OWORD *)(v19 + 3032) = 0u;
  *(_OWORD *)(v19 + 3016) = 0u;
  *(_QWORD *)(v19 + 3096) = 0;
  *(_OWORD *)(v19 + 3080) = 0u;
  *(_OWORD *)(v19 + 3064) = 0u;
  *(_DWORD *)(v19 + 3152) = 0;
  *(_BYTE *)(v19 + 3208) = 0;
  *(_OWORD *)(v19 + 3176) = 0u;
  *(_OWORD *)(v19 + 3192) = 0u;
  *(_OWORD *)(v19 + 3160) = 0u;
  *(_OWORD *)(v19 + 3264) = 0u;
  *(_OWORD *)(v19 + 3248) = 0u;
  *(_DWORD *)(v19 + 3280) = 1065353216;
  *(_QWORD *)(v19 + 3296) = 850045863;
  *(_QWORD *)(v19 + 3352) = 0;
  *(_OWORD *)(v19 + 3336) = 0u;
  *(_OWORD *)(v19 + 3320) = 0u;
  *(_OWORD *)(v19 + 3304) = 0u;
  memcpy((void *)(v19 + 1240), (const void *)(v18 + 1240), 0x604uLL);
  std::string::operator=((std::string *)(v19 + 2784), (const std::string *)(v18 + 2784));
  if (v19 != v18)
    std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>((_QWORD *)(v19 + 2808), *(char **)(v18 + 2808), *(char **)(v18 + 2816), (uint64_t)(*(_QWORD *)(v18 + 2816) - *(_QWORD *)(v18 + 2808)) >> 3);
  *(_OWORD *)(v19 + 2832) = *(_OWORD *)(v18 + 2832);
  memcpy((void *)(v19 + 2848), (const void *)(v18 + 2848), 0x134uLL);
  std::string::operator=((std::string *)(v19 + 3160), (const std::string *)(v18 + 3160));
  std::string::operator=((std::string *)(v19 + 3184), (const std::string *)(v18 + 3184));
  *(_BYTE *)(v19 + 3208) = *(_BYTE *)(v18 + 3208);
  *(_QWORD *)(v19 + 3216) = *(_QWORD *)(v18 + 3216);
  *(_DWORD *)(v19 + 3224) = *(_DWORD *)(v18 + 3224);
  *(_WORD *)(v19 + 3228) = *(_WORD *)(v18 + 3228);
  *(_BYTE *)(v19 + 3230) = *(_BYTE *)(v18 + 3230);
  *(_QWORD *)(v19 + 3232) = *(_QWORD *)(v18 + 3232);
  *(_WORD *)(v19 + 3240) = *(_WORD *)(v18 + 3240);
  if (v19 != v18)
  {
    *(_DWORD *)(v19 + 3280) = *(_DWORD *)(v18 + 3280);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(v19 + 3248), *(uint64_t **)(v18 + 3264));
  }
  *(_QWORD *)v19 = &off_2504025A0;
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::cloneProgramInfo(v19, v18);
  v20 = *(_DWORD *)(v19 + 944);
  *(_OWORD *)(v19 + 2000) = *(_OWORD *)(v19 + 520);
  *(_QWORD *)(v19 + 2016) = *(_QWORD *)(v19 + 536);
  *(_QWORD *)(v19 + 2128) = *(_QWORD *)(v19 + 920);
  *(_DWORD *)(v19 + 2844) += v20;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,16ul>::buildUniqueResourceMask(v19 + 1240);
  *(_BYTE *)(v19 + 2772) = 1;
  *(_DWORD *)(v19 + 2844) = *(_DWORD *)(v18 + 2844);
  AGX::Heap<true>::allocateImpl(v164, *(_QWORD *)(v18 + 2248), *(_QWORD *)(v18 + 3032), (_QWORD *)(v19 + 2160));
  *(_DWORD *)(v19 + 2844) += LODWORD(v165[0]);
  v21 = *(_OWORD *)v165;
  *(_OWORD *)(v19 + 3016) = *(_OWORD *)v164;
  *(_OWORD *)(v19 + 3032) = v21;
  *(_OWORD *)(v19 + 3041) = *(_OWORD *)((char *)&v165[1] + 1);
  v22 = *(_DWORD *)(v19 + 3016);
  memcpy(*(void **)(v19 + 3024), *(const void **)(v18 + 3024), *(_QWORD *)(v19 + 3032));
  *(_QWORD *)(*(_QWORD *)(v19 + 3024) + 4 * *(unsigned int *)(v19 + 2768)) = *(_QWORD *)(*(_QWORD *)(v19 + 3024)
                                                                                         + 4
                                                                                         * *(unsigned int *)(v19 + 2768)) & 0xFFFFFFFF00000003 | *(_QWORD *)(v19 + 2000) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(v19 + 2329) = *(_OWORD *)(v19 + 3041);
  v23 = *(_OWORD *)(v19 + 3032);
  *(_OWORD *)(v19 + 2304) = *(_OWORD *)(v19 + 3016);
  *(_OWORD *)(v19 + 2320) = v23;
  v24 = *(_OWORD *)(v18 + 2928);
  v25 = *(_OWORD *)(v18 + 2912);
  *(_OWORD *)(v19 + 2937) = *(_OWORD *)(v18 + 2937);
  *(_OWORD *)(v19 + 2912) = v25;
  *(_OWORD *)(v19 + 2928) = v24;
  AGX::Heap<true>::allocateImpl(v164, *(_QWORD *)(v18 + 2448), 192, (_QWORD *)(v19 + 2232));
  *(_DWORD *)(v19 + 2844) += LODWORD(v165[0]);
  v26 = *(_OWORD *)v165;
  *(_OWORD *)(v19 + 3064) = *(_OWORD *)v164;
  *(_OWORD *)(v19 + 3080) = v26;
  *(_OWORD *)(v19 + 3089) = *(_OWORD *)((char *)&v165[1] + 1);
  v27 = *(_QWORD *)(v19 + 3064);
  if (*(_BYTE *)(v18 + 3008))
    v27 += 0x300000000;
  v28 = *(_QWORD *)(v19 + 3072);
  v29 = *(_QWORD *)(v18 + 3072);
  v30 = *(_QWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_QWORD *)(v28 + 16) = v30;
  *(_DWORD *)(v28 + 4) = v22 & 0xFFFFFFF0;
  *(_QWORD *)(v19 + 2848) = __ROR8__(v27, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v31 = *(_QWORD *)(v29 + 40);
  *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
  *(_QWORD *)(v28 + 40) = v31;
  *(_DWORD *)(v28 + 28) = v22 & 0xFFFFFFF0;
  *(_QWORD *)(v19 + 2856) = __ROR8__(v27 + 24, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v32 = *(_QWORD *)(v29 + 64);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
  *(_QWORD *)(v28 + 64) = v32;
  *(_DWORD *)(v28 + 52) = v22 & 0xFFFFFFF0;
  *(_QWORD *)(v19 + 2864) = __ROR8__(v27 + 48, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v33 = *(_QWORD *)(v29 + 88);
  *(_OWORD *)(v28 + 72) = *(_OWORD *)(v29 + 72);
  *(_QWORD *)(v28 + 88) = v33;
  *(_DWORD *)(v28 + 76) = v22 & 0xFFFFFFF0;
  *(_QWORD *)(v19 + 2872) = __ROR8__(v27 + 72, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v34 = *(_QWORD *)(v29 + 112);
  *(_OWORD *)(v28 + 96) = *(_OWORD *)(v29 + 96);
  *(_QWORD *)(v28 + 112) = v34;
  *(_DWORD *)(v28 + 100) = v22 & 0xFFFFFFF0;
  *(_QWORD *)(v19 + 2880) = __ROR8__(v27 + 96, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v35 = *(_QWORD *)(v29 + 136);
  *(_OWORD *)(v28 + 120) = *(_OWORD *)(v29 + 120);
  *(_QWORD *)(v28 + 136) = v35;
  *(_DWORD *)(v28 + 124) = v22 & 0xFFFFFFF0;
  *(_QWORD *)(v19 + 2888) = __ROR8__(v27 + 120, 32) & 0xFFFFFFFC000000FFLL | 0x600;
  v36 = *(_OWORD *)(v19 + 3080);
  *(_OWORD *)(v19 + 2960) = *(_OWORD *)(v19 + 3064);
  *(_OWORD *)(v19 + 2976) = v36;
  *(_OWORD *)(v19 + 2985) = *(_OWORD *)(v19 + 3089);
  *(_QWORD *)(v19 + 3288) = *(id *)(v18 + 3288);
LABEL_20:
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setFragmentVariant(a1, v19);
  v37 = a2[2];
  if (v37)
  {
    v38 = operator new();
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v38, v37);
    *(_QWORD *)v38 = &off_250401960;
    *(_BYTE *)(v38 + 1992) = 0;
    *(_QWORD *)(v38 + 2000) = 0;
    *(_QWORD *)(v38 + 2016) = 0;
    *(_QWORD *)(v38 + 2008) = 0;
    *(_OWORD *)(v38 + 2256) = 0u;
    *(_OWORD *)(v38 + 2272) = 0u;
    *(_QWORD *)(v38 + 2288) = 0;
    *(_OWORD *)(v38 + 2304) = 0u;
    *(_OWORD *)(v38 + 2320) = 0u;
    *(_QWORD *)(v38 + 2336) = 0;
    *(_OWORD *)(v38 + 2352) = 0u;
    *(_OWORD *)(v38 + 2368) = 0u;
    *(_QWORD *)(v38 + 2384) = 0;
    *(_OWORD *)(v38 + 2400) = 0u;
    *(_OWORD *)(v38 + 2416) = 0u;
    *(_QWORD *)(v38 + 2432) = 0;
    *(_QWORD *)(v38 + 2488) = 0;
    *(_OWORD *)(v38 + 2472) = 0u;
    *(_OWORD *)(v38 + 2456) = 0u;
    *(_QWORD *)(v38 + 2536) = 0;
    *(_OWORD *)(v38 + 2520) = 0u;
    *(_OWORD *)(v38 + 2504) = 0u;
    *(_QWORD *)(v38 + 2584) = 0;
    *(_OWORD *)(v38 + 2568) = 0u;
    *(_OWORD *)(v38 + 2552) = 0u;
    *(_QWORD *)(v38 + 2632) = 0;
    *(_OWORD *)(v38 + 2616) = 0u;
    *(_OWORD *)(v38 + 2600) = 0u;
    *(_QWORD *)(v38 + 2680) = 0;
    *(_OWORD *)(v38 + 2664) = 0u;
    *(_OWORD *)(v38 + 2648) = 0u;
    *(_QWORD *)(v38 + 1408) = 0;
    *(_OWORD *)(v38 + 1392) = 0u;
    *(_OWORD *)(v38 + 1376) = 0u;
    *(_OWORD *)(v38 + 1360) = 0u;
    *(_OWORD *)(v38 + 1344) = 0u;
    *(_OWORD *)(v38 + 1328) = 0u;
    *(_OWORD *)(v38 + 1312) = 0u;
    *(_OWORD *)(v38 + 1296) = 0u;
    *(_OWORD *)(v38 + 1280) = 0u;
    *(_OWORD *)(v38 + 1264) = 0u;
    *(_OWORD *)(v38 + 2224) = 0u;
    *(_OWORD *)(v38 + 2208) = 0u;
    *(_OWORD *)(v38 + 2192) = 0u;
    *(_OWORD *)(v38 + 2176) = 0u;
    *(_OWORD *)(v38 + 2160) = 0u;
    *(_OWORD *)(v38 + 2144) = 0u;
    *(_OWORD *)(v38 + 2128) = 0u;
    *(_OWORD *)(v38 + 2112) = 0u;
    *(_OWORD *)(v38 + 2696) = 0u;
    *(_OWORD *)(v38 + 2712) = 0u;
    *(_OWORD *)(v38 + 2728) = 0u;
    *(_OWORD *)(v38 + 2744) = 0u;
    *(_OWORD *)(v38 + 2784) = 0u;
    *(_OWORD *)(v38 + 2800) = 0u;
    *(_OWORD *)(v38 + 2816) = 0u;
    *(_OWORD *)(v38 + 2912) = 0u;
    *(_OWORD *)(v38 + 2928) = 0u;
    *(_QWORD *)(v38 + 2944) = 0;
    *(_QWORD *)(v38 + 2992) = 0;
    *(_OWORD *)(v38 + 2976) = 0u;
    *(_OWORD *)(v38 + 2960) = 0u;
    *(_QWORD *)(v38 + 3048) = 0;
    *(_OWORD *)(v38 + 3032) = 0u;
    *(_OWORD *)(v38 + 3016) = 0u;
    *(_QWORD *)(v38 + 3096) = 0;
    *(_OWORD *)(v38 + 3080) = 0u;
    *(_OWORD *)(v38 + 3064) = 0u;
    *(_OWORD *)(v38 + 3168) = 0u;
    *(_OWORD *)(v38 + 3152) = 0u;
    *(_DWORD *)(v38 + 3184) = 1065353216;
    *(_QWORD *)(v38 + 3200) = 850045863;
    *(_OWORD *)(v38 + 3208) = 0u;
    *(_OWORD *)(v38 + 3224) = 0u;
    *(_OWORD *)(v38 + 3240) = 0u;
    *(_QWORD *)(v38 + 3256) = 0;
    memcpy((void *)(v38 + 1240), (const void *)(v37 + 1240), 0x604uLL);
    std::string::operator=((std::string *)(v38 + 2784), (const std::string *)(v37 + 2784));
    if (v38 != v37)
      std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>((_QWORD *)(v38 + 2808), *(char **)(v37 + 2808), *(char **)(v37 + 2816), (uint64_t)(*(_QWORD *)(v37 + 2816) - *(_QWORD *)(v37 + 2808)) >> 3);
    *(_OWORD *)(v38 + 2832) = *(_OWORD *)(v37 + 2832);
    memcpy((void *)(v38 + 2848), (const void *)(v37 + 2848), 0x129uLL);
    if (v38 != v37)
    {
      *(_DWORD *)(v38 + 3184) = *(_DWORD *)(v37 + 3184);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(v38 + 3152), *(uint64_t **)(v37 + 3168));
    }
    *(_QWORD *)(v38 + 3192) = *(_QWORD *)(v37 + 3192);
    *(_QWORD *)v38 = &off_2504025C0;
    *(_QWORD *)(a1 + 16) = v38;
    v169 = 0u;
    v170 = 0u;
    v167 = 0u;
    v168 = 0u;
    v166 = 0u;
    *(_OWORD *)v164 = 0u;
    memset(v165, 0, sizeof(v165));
    v39 = *(_DWORD *)(v38 + 2240);
    if (v39)
    {
      LODWORD(v40) = 0;
      v41 = (int)*MEMORY[0x24BE51650];
      do
      {
        v42 = __clz(__rbit32(v39));
        v164[v40] = (void *)(*(_QWORD *)(v38 + 2112 + 8 * v42) + v41 + 32);
        v40 = (v40 + 1);
        v39 &= ~(1 << v42);
      }
      while (v39);
      if ((_DWORD)v40)
      {
        v43 = 0;
        v44 = *(unsigned int *)(a1 + 768);
        do
        {
          if ((_DWORD)v44)
          {
            v46 = 0;
            v47 = v164[v43];
            v48 = v44;
            v49 = (int *)(a1 + 64);
            while (1)
            {
              v50 = *v49;
              v49 += 6;
              if (v47[4] == v50)
                break;
              if (v44 == ++v46)
                goto LABEL_40;
            }
          }
          else
          {
            LODWORD(v46) = 0;
          }
          if ((_DWORD)v46 == (_DWORD)v44)
          {
            v47 = v164[v43];
            v48 = v44;
LABEL_40:
            v51 = a1 + 24 * v48;
            v52 = *(_OWORD *)v47;
            *(_QWORD *)(v51 + 64) = *((_QWORD *)v47 + 2);
            *(_OWORD *)(v51 + 48) = v52;
            v45 = (*(_DWORD *)(a1 + 768) + 1);
            *(_DWORD *)(a1 + 768) = v45;
          }
          else
          {
            v45 = v44;
            LOBYTE(v44) = v46;
          }
          *(_DWORD *)(a1 + 776) |= 1 << v44;
          ++v43;
          v44 = v45;
        }
        while (v43 != v40);
      }
    }
    *(_QWORD *)(a1 + 1296) = *(_QWORD *)(v38 + 316);
    *(_DWORD *)(a1 + 1312) = *(_DWORD *)(v38 + 352);
    *(_QWORD *)(a1 + 1316) = 0;
    v53 = a2[3];
    if (v53)
    {
LABEL_42:
      v54 = operator new();
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v54, v53);
      *(_QWORD *)v54 = &off_250401860;
      *(_BYTE *)(v54 + 1992) = 0;
      *(_QWORD *)(v54 + 2000) = 0;
      *(_QWORD *)(v54 + 2016) = 0;
      *(_QWORD *)(v54 + 2008) = 0;
      *(_OWORD *)(v54 + 2240) = 0u;
      *(_OWORD *)(v54 + 2256) = 0u;
      *(_QWORD *)(v54 + 2272) = 0;
      *(_OWORD *)(v54 + 2288) = 0u;
      *(_OWORD *)(v54 + 2304) = 0u;
      *(_QWORD *)(v54 + 2320) = 0;
      *(_OWORD *)(v54 + 2336) = 0u;
      *(_OWORD *)(v54 + 2352) = 0u;
      *(_QWORD *)(v54 + 2368) = 0;
      *(_OWORD *)(v54 + 2384) = 0u;
      *(_OWORD *)(v54 + 2400) = 0u;
      *(_QWORD *)(v54 + 2416) = 0;
      *(_QWORD *)(v54 + 2472) = 0;
      *(_OWORD *)(v54 + 2456) = 0u;
      *(_OWORD *)(v54 + 2440) = 0u;
      *(_QWORD *)(v54 + 2520) = 0;
      *(_OWORD *)(v54 + 2504) = 0u;
      *(_OWORD *)(v54 + 2488) = 0u;
      *(_QWORD *)(v54 + 2568) = 0;
      *(_OWORD *)(v54 + 2552) = 0u;
      *(_OWORD *)(v54 + 2536) = 0u;
      *(_QWORD *)(v54 + 2616) = 0;
      *(_OWORD *)(v54 + 2600) = 0u;
      *(_OWORD *)(v54 + 2584) = 0u;
      *(_QWORD *)(v54 + 2664) = 0;
      *(_OWORD *)(v54 + 2648) = 0u;
      *(_OWORD *)(v54 + 2632) = 0u;
      *(_QWORD *)(v54 + 1408) = 0;
      *(_OWORD *)(v54 + 1392) = 0u;
      *(_OWORD *)(v54 + 1376) = 0u;
      *(_OWORD *)(v54 + 1360) = 0u;
      *(_OWORD *)(v54 + 1344) = 0u;
      *(_OWORD *)(v54 + 1328) = 0u;
      *(_OWORD *)(v54 + 1312) = 0u;
      *(_OWORD *)(v54 + 1296) = 0u;
      *(_OWORD *)(v54 + 1280) = 0u;
      *(_OWORD *)(v54 + 1264) = 0u;
      *(_OWORD *)(v54 + 2208) = 0u;
      *(_OWORD *)(v54 + 2192) = 0u;
      *(_OWORD *)(v54 + 2176) = 0u;
      *(_OWORD *)(v54 + 2160) = 0u;
      *(_OWORD *)(v54 + 2144) = 0u;
      *(_OWORD *)(v54 + 2128) = 0u;
      *(_OWORD *)(v54 + 2112) = 0u;
      *(_OWORD *)(v54 + 2680) = 0u;
      *(_OWORD *)(v54 + 2696) = 0u;
      *(_OWORD *)(v54 + 2712) = 0u;
      *(_OWORD *)(v54 + 2728) = 0u;
      *(_OWORD *)(v54 + 2768) = 0u;
      *(_OWORD *)(v54 + 2784) = 0u;
      *(_OWORD *)(v54 + 2800) = 0u;
      *(_OWORD *)(v54 + 3000) = 0u;
      *(_OWORD *)(v54 + 3016) = 0u;
      *(_DWORD *)(v54 + 3032) = 1065353216;
      *(_QWORD *)(v54 + 3048) = 850045863;
      *(_QWORD *)(v54 + 3104) = 0;
      *(_OWORD *)(v54 + 3088) = 0u;
      *(_OWORD *)(v54 + 3072) = 0u;
      *(_OWORD *)(v54 + 3056) = 0u;
      memcpy((void *)(v54 + 1240), (const void *)(v53 + 1240), 0x5F4uLL);
      std::string::operator=((std::string *)(v54 + 2768), (const std::string *)(v53 + 2768));
      if (v54 != v53)
        std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>((_QWORD *)(v54 + 2792), *(char **)(v53 + 2792), *(char **)(v53 + 2800), (uint64_t)(*(_QWORD *)(v53 + 2800) - *(_QWORD *)(v53 + 2792)) >> 3);
      *(_OWORD *)(v54 + 2816) = *(_OWORD *)(v53 + 2816);
      *(_QWORD *)(v54 + 2832) = *(_QWORD *)(v53 + 2832);
      *(_OWORD *)(v54 + 2840) = *(_OWORD *)(v53 + 2840);
      v55 = *(_OWORD *)(v53 + 2856);
      v56 = *(_OWORD *)(v53 + 2872);
      v57 = *(_OWORD *)(v53 + 2904);
      *(_OWORD *)(v54 + 2888) = *(_OWORD *)(v53 + 2888);
      *(_OWORD *)(v54 + 2904) = v57;
      *(_OWORD *)(v54 + 2856) = v55;
      *(_OWORD *)(v54 + 2872) = v56;
      v58 = *(_OWORD *)(v53 + 2920);
      v59 = *(_OWORD *)(v53 + 2936);
      v60 = *(_OWORD *)(v53 + 2952);
      *(_OWORD *)(v54 + 2964) = *(_OWORD *)(v53 + 2964);
      *(_OWORD *)(v54 + 2936) = v59;
      *(_OWORD *)(v54 + 2952) = v60;
      *(_OWORD *)(v54 + 2920) = v58;
      *(_DWORD *)(v54 + 2980) = *(_DWORD *)(v53 + 2980);
      *(_BYTE *)(v54 + 2984) = *(_DWORD *)(v53 + 2980) != 0;
      *(_WORD *)(v54 + 2985) = *(_WORD *)(v53 + 2985);
      *(_DWORD *)(v54 + 2988) = *(_DWORD *)(v53 + 2988);
      *(_DWORD *)(v54 + 2992) = *(_DWORD *)(v53 + 2992);
      *(_BYTE *)(v54 + 2996) = *(_BYTE *)(v53 + 2996);
      if (v54 != v53)
      {
        *(_DWORD *)(v54 + 3032) = *(_DWORD *)(v53 + 3032);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(v54 + 3000), *(uint64_t **)(v53 + 3016));
      }
      *(_QWORD *)(v54 + 3040) = *(_QWORD *)(v53 + 3040);
      *(_QWORD *)v54 = &off_2504025E0;
      AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::cloneProgramInfo(v54, v53);
      *(_QWORD *)(v54 + 3040) = *(id *)(v53 + 3040);
      *(_QWORD *)(a1 + 24) = v54;
      v168 = 0u;
      v169 = 0u;
      v166 = 0u;
      v167 = 0u;
      memset(v165, 0, sizeof(v165));
      *(_OWORD *)v164 = 0u;
      v61 = *(_DWORD *)(v54 + 2224);
      if (v61)
      {
        LODWORD(v62) = 0;
        v63 = (int)*MEMORY[0x24BE51650];
        do
        {
          v64 = __clz(__rbit32(v61));
          v164[v62] = (void *)(*(_QWORD *)(v54 + 2112 + 8 * v64) + v63 + 32);
          v62 = (v62 + 1);
          v61 &= ~(1 << v64);
        }
        while (v61);
        if ((_DWORD)v62)
        {
          v65 = 0;
          v66 = *(unsigned int *)(a1 + 768);
          do
          {
            if ((_DWORD)v66)
            {
              v68 = 0;
              v69 = v164[v65];
              v70 = v66;
              v71 = (int *)(a1 + 64);
              while (1)
              {
                v72 = *v71;
                v71 += 6;
                if (v69[4] == v72)
                  break;
                if (v66 == ++v68)
                  goto LABEL_61;
              }
            }
            else
            {
              LODWORD(v68) = 0;
            }
            if ((_DWORD)v68 == (_DWORD)v66)
            {
              v69 = v164[v65];
              v70 = v66;
LABEL_61:
              v73 = a1 + 24 * v70;
              v74 = *(_OWORD *)v69;
              *(_QWORD *)(v73 + 64) = *((_QWORD *)v69 + 2);
              *(_OWORD *)(v73 + 48) = v74;
              v67 = (*(_DWORD *)(a1 + 768) + 1);
              *(_DWORD *)(a1 + 768) = v67;
            }
            else
            {
              v67 = v66;
              LOBYTE(v66) = v68;
            }
            *(_DWORD *)(a1 + 780) |= 1 << v66;
            ++v65;
            v66 = v67;
          }
          while (v65 != v62);
        }
      }
      *(_QWORD *)(a1 + 1384) = *(_QWORD *)(v54 + 316);
      *(_DWORD *)(a1 + 1400) = *(_DWORD *)(v54 + 352);
      *(_QWORD *)(a1 + 1404) = 0;
      v75 = a2[4];
      if (v75)
        goto LABEL_63;
LABEL_70:
      v76 = 0;
      goto LABEL_71;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    v53 = a2[3];
    if (v53)
      goto LABEL_42;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v75 = a2[4];
  if (!v75)
    goto LABEL_70;
LABEL_63:
  v76 = operator new();
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v76, v75);
  *(_QWORD *)v76 = &off_250401880;
  *(_BYTE *)(v76 + 1992) = 0;
  *(_QWORD *)(v76 + 2000) = 0;
  *(_QWORD *)(v76 + 2016) = 0;
  *(_QWORD *)(v76 + 2008) = 0;
  *(_OWORD *)(v76 + 2240) = 0u;
  *(_OWORD *)(v76 + 2256) = 0u;
  *(_QWORD *)(v76 + 2272) = 0;
  *(_OWORD *)(v76 + 2288) = 0u;
  *(_OWORD *)(v76 + 2304) = 0u;
  *(_QWORD *)(v76 + 2320) = 0;
  *(_OWORD *)(v76 + 2336) = 0u;
  *(_OWORD *)(v76 + 2352) = 0u;
  *(_QWORD *)(v76 + 2368) = 0;
  *(_OWORD *)(v76 + 2384) = 0u;
  *(_OWORD *)(v76 + 2400) = 0u;
  *(_QWORD *)(v76 + 2416) = 0;
  *(_QWORD *)(v76 + 2472) = 0;
  *(_OWORD *)(v76 + 2456) = 0u;
  *(_OWORD *)(v76 + 2440) = 0u;
  *(_QWORD *)(v76 + 2520) = 0;
  *(_OWORD *)(v76 + 2504) = 0u;
  *(_OWORD *)(v76 + 2488) = 0u;
  *(_QWORD *)(v76 + 2568) = 0;
  *(_OWORD *)(v76 + 2552) = 0u;
  *(_OWORD *)(v76 + 2536) = 0u;
  *(_QWORD *)(v76 + 2616) = 0;
  *(_OWORD *)(v76 + 2600) = 0u;
  *(_OWORD *)(v76 + 2584) = 0u;
  *(_QWORD *)(v76 + 2664) = 0;
  *(_OWORD *)(v76 + 2648) = 0u;
  *(_OWORD *)(v76 + 2632) = 0u;
  *(_QWORD *)(v76 + 1408) = 0;
  *(_OWORD *)(v76 + 1392) = 0u;
  *(_OWORD *)(v76 + 1376) = 0u;
  *(_OWORD *)(v76 + 1360) = 0u;
  *(_OWORD *)(v76 + 1344) = 0u;
  *(_OWORD *)(v76 + 1328) = 0u;
  *(_OWORD *)(v76 + 1312) = 0u;
  *(_OWORD *)(v76 + 1296) = 0u;
  *(_OWORD *)(v76 + 1280) = 0u;
  *(_OWORD *)(v76 + 1264) = 0u;
  *(_OWORD *)(v76 + 2208) = 0u;
  *(_OWORD *)(v76 + 2192) = 0u;
  *(_OWORD *)(v76 + 2176) = 0u;
  *(_OWORD *)(v76 + 2160) = 0u;
  *(_OWORD *)(v76 + 2144) = 0u;
  *(_OWORD *)(v76 + 2128) = 0u;
  *(_OWORD *)(v76 + 2112) = 0u;
  *(_OWORD *)(v76 + 2680) = 0u;
  *(_OWORD *)(v76 + 2696) = 0u;
  *(_OWORD *)(v76 + 2712) = 0u;
  *(_OWORD *)(v76 + 2728) = 0u;
  *(_OWORD *)(v76 + 2768) = 0u;
  *(_OWORD *)(v76 + 2784) = 0u;
  *(_OWORD *)(v76 + 2800) = 0u;
  *(_OWORD *)(v76 + 2888) = 0u;
  *(_OWORD *)(v76 + 2904) = 0u;
  *(_QWORD *)(v76 + 2920) = 0;
  *(_OWORD *)(v76 + 2952) = 0u;
  *(_OWORD *)(v76 + 2968) = 0u;
  *(_OWORD *)(v76 + 2936) = 0u;
  *(_OWORD *)(v76 + 3024) = 0u;
  *(_OWORD *)(v76 + 3008) = 0u;
  *(_DWORD *)(v76 + 3040) = 1065353216;
  *(_QWORD *)(v76 + 3056) = 850045863;
  *(_OWORD *)(v76 + 3064) = 0u;
  *(_OWORD *)(v76 + 3080) = 0u;
  *(_OWORD *)(v76 + 3096) = 0u;
  *(_QWORD *)(v76 + 3112) = 0;
  memcpy((void *)(v76 + 1240), (const void *)(v75 + 1240), 0x5F4uLL);
  std::string::operator=((std::string *)(v76 + 2768), (const std::string *)(v75 + 2768));
  if (v76 != v75)
    std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>((_QWORD *)(v76 + 2792), *(char **)(v75 + 2792), *(char **)(v75 + 2800), (uint64_t)(*(_QWORD *)(v75 + 2800) - *(_QWORD *)(v75 + 2792)) >> 3);
  *(_OWORD *)(v76 + 2816) = *(_OWORD *)(v75 + 2816);
  *(_DWORD *)(v76 + 2832) = *(_DWORD *)(v75 + 2832);
  *(_OWORD *)(v76 + 2840) = *(_OWORD *)(v75 + 2840);
  *(_QWORD *)(v76 + 2856) = *(_QWORD *)(v75 + 2856);
  v77 = *(_OWORD *)(v75 + 2864);
  *(_QWORD *)(v76 + 2880) = *(_QWORD *)(v75 + 2880);
  *(_OWORD *)(v76 + 2864) = v77;
  v78 = *(_OWORD *)(v75 + 2888);
  v79 = *(_OWORD *)(v75 + 2920);
  *(_OWORD *)(v76 + 2904) = *(_OWORD *)(v75 + 2904);
  *(_OWORD *)(v76 + 2920) = v79;
  *(_OWORD *)(v76 + 2888) = v78;
  std::string::operator=((std::string *)(v76 + 2936), (const std::string *)(v75 + 2936));
  std::string::operator=((std::string *)(v76 + 2960), (const std::string *)(v75 + 2960));
  *(_QWORD *)(v76 + 2984) = *(_QWORD *)(v75 + 2984);
  *(_DWORD *)(v76 + 2992) = *(_DWORD *)(v75 + 2992);
  *(_DWORD *)(v76 + 2996) = *(_DWORD *)(v75 + 2996);
  *(_DWORD *)(v76 + 3000) = *(_DWORD *)(v75 + 3000);
  *(_BYTE *)(v76 + 3004) = *(_BYTE *)(v75 + 3004);
  if (v76 != v75)
  {
    *(_DWORD *)(v76 + 3040) = *(_DWORD *)(v75 + 3040);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(v76 + 3008), *(uint64_t **)(v75 + 3024));
  }
  *(_QWORD *)(v76 + 3048) = *(_QWORD *)(v75 + 3048);
  *(_QWORD *)v76 = &off_250402600;
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::cloneProgramInfo(v76, v75);
  *(_QWORD *)(v76 + 3048) = *(id *)(v75 + 3048);
LABEL_71:
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setMeshVariant(a1, v76);
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::copyState(a1, (uint64_t)a2, 1, (uint64_t)lock);
  if (*(_QWORD *)(a1 + 32))
  {
LABEL_72:
    v80 = *(_QWORD *)&lock[202]._os_unfair_lock_opaque;
    *(_QWORD *)(a1 + 1064) = lock;
    if (objc_msgSend(0, "maxAccelerationStructureTraversalDepth", lock))
      objc_msgSend(0, "maxAccelerationStructureTraversalDepth");
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::constructSpillParams((uint64_t *)a1, v80);
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::emitLabelUpdateSignpost((uint64_t *)a1, 0);
    if (*(_BYTE *)(a1 + 837))
      objc_msgSend(0, "resourceIndex");
    goto LABEL_94;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (*(_OWORD *)a1 == 0)
      goto LABEL_94;
    goto LABEL_72;
  }
  v81 = *(_QWORD *)&lock[202]._os_unfair_lock_opaque;
  *(_QWORD *)(a1 + 1064) = lock;
  if (objc_msgSend(0, "maxAccelerationStructureTraversalDepth"))
    objc_msgSend(0, "maxAccelerationStructureTraversalDepth");
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::constructSpillParams((uint64_t *)a1, v81);
  AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::emitLabelUpdateSignpost((uint64_t *)a1, 0);
LABEL_94:
  *(_OWORD *)v164 = 0u;
  *(_OWORD *)v165 = 0u;
  LODWORD(v165[2]) = 1065353216;
  *(_OWORD *)v161 = 0u;
  *(_OWORD *)v162 = 0u;
  v163 = 1065353216;
  *(_OWORD *)v158 = 0u;
  *(_OWORD *)__p = 0u;
  v160 = 1065353216;
  v92 = (int8x8_t *)a2[1];
  if (v92)
  {
    v93 = a2[206];
    if (v93)
    {
      v94 = *(void **)(a1 + 1064);
      v95 = *(_QWORD *)(a1 + 8);
      do
      {
        v96 = *(id *)(v93 + 24);
        if (objc_msgSend(v96, "functionType") == 6)
          v97 = objc_msgSend(v94, "requiresRaytracingEmulation");
        else
          v97 = 0;
        if (objc_msgSend(v96, "functionType", lock) == 5)
          v98 = 1;
        else
          v98 = v97;
        if (v98 != 1)
          goto LABEL_97;
        v99 = (void *)objc_msgSend(v96, "name");
        if (VisibleFunctionsMap::getVisibleFunctionOffset(v92 + 471, (const char *)objc_msgSend(v99, "cStringUsingEncoding:", 4)) == -1)
        {
          if (*(_QWORD *)(a1 + 1512) == *(_QWORD *)(a1 + 1520))
          {
            v100 = -1;
          }
          else
          {
            objc_msgSend(v99, "cStringUsingEncoding:", 4);
            v100 = 0;
          }
          if (v100 == -1)
            goto LABEL_97;
        }
        else
        {
          v100 = *(_QWORD *)(v95 + 512) - *(_QWORD *)&v92[64];
          if (v100 == -1)
            goto LABEL_97;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXA10FamilyFunctionHandle *>((float *)v164, 0, 0, (uint64_t)-[AGXA10FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXA10FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", objc_msgSend(v96, "functionType"), v99, v94, v100, 0));
LABEL_97:

        v93 = *(_QWORD *)v93;
      }
      while (v93);
    }
  }
  v101 = (int8x8_t *)*v156;
  if (*v156)
  {
    v102 = v156[211];
    if (v102)
    {
      v103 = *(void **)(a1 + 1064);
      v104 = *(_QWORD *)a1;
      do
      {
        v105 = *(id *)(v102 + 24);
        if (objc_msgSend(v105, "functionType") == 6)
          v106 = objc_msgSend(v103, "requiresRaytracingEmulation");
        else
          v106 = 0;
        if (objc_msgSend(v105, "functionType", lock) == 5)
          v107 = 1;
        else
          v107 = v106;
        if (v107 != 1)
          goto LABEL_116;
        v108 = (void *)objc_msgSend(v105, "name");
        if (VisibleFunctionsMap::getVisibleFunctionOffset(v101 + 406, (const char *)objc_msgSend(v108, "cStringUsingEncoding:", 4)) == -1)
        {
          if (*(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1544))
          {
            v109 = -1;
          }
          else
          {
            objc_msgSend(v108, "cStringUsingEncoding:", 4);
            v109 = 0;
          }
          if (v109 == -1)
            goto LABEL_116;
        }
        else
        {
          v109 = *(_QWORD *)(v104 + 512) - *(_QWORD *)&v101[64];
          if (v109 == -1)
            goto LABEL_116;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXA10FamilyFunctionHandle *>((float *)v161, 0, 0, (uint64_t)-[AGXA10FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXA10FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", objc_msgSend(v105, "functionType"), v108, v103, v109, 0));
LABEL_116:

        v102 = *(_QWORD *)v102;
      }
      while (v102);
    }
  }
  v110 = (int8x8_t *)v156[2];
  if (v110)
  {
    v111 = v156[216];
    if (v111)
    {
      v112 = *(void **)(a1 + 1064);
      v113 = *(_QWORD *)(a1 + 16);
      do
      {
        v114 = *(id *)(v111 + 24);
        if (objc_msgSend(v114, "functionType") == 6)
          v115 = objc_msgSend(v112, "requiresRaytracingEmulation");
        else
          v115 = 0;
        if (objc_msgSend(v114, "functionType", lock) == 5)
          v116 = 1;
        else
          v116 = v115;
        if (v116 != 1)
          goto LABEL_135;
        v117 = (void *)objc_msgSend(v114, "name");
        if (VisibleFunctionsMap::getVisibleFunctionOffset(v110 + 394, (const char *)objc_msgSend(v117, "cStringUsingEncoding:", 4)) == -1)
        {
          if (*(_QWORD *)(a1 + 1560) == *(_QWORD *)(a1 + 1568))
          {
            v118 = -1;
          }
          else
          {
            objc_msgSend(v117, "cStringUsingEncoding:", 4);
            v118 = 0;
          }
          if (v118 == -1)
            goto LABEL_135;
        }
        else
        {
          v118 = *(_QWORD *)(v113 + 512) - *(_QWORD *)&v110[64];
          if (v118 == -1)
            goto LABEL_135;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXA10FamilyFunctionHandle *>((float *)v158, 0, 0, (uint64_t)-[AGXA10FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXA10FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", objc_msgSend(v114, "functionType"), v117, v112, v118, 0));
LABEL_135:

        v111 = *(_QWORD *)v111;
      }
      while (v111);
    }
  }
  *(_QWORD *)(a1 + 1872) = operator new();
  locka = (os_unfair_lock_s *)(a1 + 848);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 848));
  v119 = (_QWORD *)v156[231];
  if (v119)
  {
    v120 = 0;
    v121 = 0;
    v122 = 0;
    while (1)
    {
      v124 = v119[2];
      if (v121 >= v122)
        break;
      *(_QWORD *)v121 = v124;
      v123 = v121 + 8;
LABEL_154:
      v119 = (_QWORD *)*v119;
      v121 = v123;
      if (!v119)
        goto LABEL_184;
    }
    v125 = (v121 - v120) >> 3;
    v126 = v125 + 1;
    if ((unint64_t)(v125 + 1) >> 61)
      abort();
    if ((v122 - v120) >> 2 > v126)
      v126 = (v122 - v120) >> 2;
    if ((unint64_t)(v122 - v120) >= 0x7FFFFFFFFFFFFFF8)
      v127 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v127 = v126;
    if (v127)
    {
      if (v127 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v128 = operator new(8 * v127);
    }
    else
    {
      v128 = 0;
    }
    v129 = &v128[8 * v125];
    *(_QWORD *)v129 = v124;
    v123 = v129 + 8;
    if (v121 != v120)
    {
      v130 = v121 - 8 - v120;
      if (v130 >= 0x168)
      {
        if (&v128[v121 - v120 - 8 - (v130 & 0xFFFFFFFFFFFFFFF8)] > &v128[v121 - v120 - 8])
        {
          v131 = v121;
        }
        else if (&v121[-(v130 & 0xFFFFFFFFFFFFFFF8) - 8] > v121 - 8)
        {
          v131 = v121;
        }
        else if ((unint64_t)(v120 - v128) >= 0x20)
        {
          v133 = (v130 >> 3) + 1;
          v131 = &v121[-8 * (v133 & 0x3FFFFFFFFFFFFFFCLL)];
          v134 = &v128[8 * v125 - 16];
          v135 = v121 - 16;
          v136 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v137 = *(_OWORD *)v135;
            *(v134 - 1) = *((_OWORD *)v135 - 1);
            *v134 = v137;
            v134 -= 2;
            v135 -= 32;
            v136 -= 4;
          }
          while (v136);
          v129 -= 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
          if (v133 == (v133 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_170;
        }
        else
        {
          v131 = v121;
        }
      }
      else
      {
        v131 = v121;
      }
      do
      {
        v132 = *((_QWORD *)v131 - 1);
        v131 -= 8;
        *((_QWORD *)v129 - 1) = v132;
        v129 -= 8;
      }
      while (v131 != v120);
    }
LABEL_170:
    v122 = &v128[8 * v127];
    if (v120)
      operator delete(v120);
    v120 = v129;
    goto LABEL_154;
  }
  v120 = 0;
LABEL_184:
  if (v156[232])
  {
    for (i = v156[231]; i; i = *(_QWORD *)i)
    {
      v157 = *(_OWORD *)(i + 16);
      v139 = *(_DWORD *)(*((_QWORD *)&v157 + 1) + 356);
      switch(v139)
      {
        case 3:
          v144 = v157;
          v141 = objc_msgSend(*((id *)&v157 + 1), "clone:clonedResourceIndex:clonedVisibleFunctionHeap:cloneHandleMap:", *(_QWORD *)(a1 + 1064), (_QWORD)v157, *(_QWORD *)(a1 + 1872), v158, locka);
          v142 = std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 1832, v144, &v157);
          break;
        case 2:
          v143 = v157;
          v141 = objc_msgSend(*((id *)&v157 + 1), "clone:clonedResourceIndex:clonedVisibleFunctionHeap:cloneHandleMap:", *(_QWORD *)(a1 + 1064), (_QWORD)v157, *(_QWORD *)(a1 + 1872), v161);
          v142 = std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 1832, v143, &v157);
          break;
        case 1:
          v140 = v157;
          v141 = objc_msgSend(*((id *)&v157 + 1), "clone:clonedResourceIndex:clonedVisibleFunctionHeap:cloneHandleMap:", *(_QWORD *)(a1 + 1064), (_QWORD)v157, *(_QWORD *)(a1 + 1872), v164);
          v142 = std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 1832, v140, &v157);
          break;
        default:
          continue;
      }
      v142[3] = v141;
    }
  }
  os_unfair_lock_unlock(locka);
  if (v120)
    operator delete(v120);
  v145 = __p[0];
  if (__p[0])
  {
    do
    {
      v146 = (_QWORD *)*v145;
      operator delete(v145);
      v145 = v146;
    }
    while (v146);
  }
  v147 = v158[0];
  v158[0] = 0;
  if (v147)
    operator delete(v147);
  v148 = v162[0];
  if (v162[0])
  {
    do
    {
      v149 = (_QWORD *)*v148;
      operator delete(v148);
      v148 = v149;
    }
    while (v149);
  }
  v150 = v161[0];
  v161[0] = 0;
  if (v150)
    operator delete(v150);
  v151 = v165[0];
  if (v165[0])
  {
    do
    {
      v152 = (_QWORD *)*v151;
      operator delete(v151);
      v151 = v152;
    }
    while (v152);
  }
  v153 = v164[0];
  v164[0] = 0;
  if (v153)
    operator delete(v153);
}

void sub_232D12B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10F3C40174EF3E0);
  _Unwind_Resume(a1);
}

void sub_232D12C9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock)
{
  void *v9;

  os_unfair_lock_unlock(lock);
  if (v9)
    operator delete(v9);
  JUMPOUT(0x232D12D14);
}

void sub_232D12D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);

  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100]((uint64_t)va);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100]((uint64_t)va1);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

int8x8_t AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setFragmentVariant(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unsigned int v11;
  int *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  int8x8_t v16;
  int8x8_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int8x8_t result;
  unsigned int v22;
  unsigned int v23;
  _OWORD v24[8];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  if (a2)
  {
    memset(v24, 0, sizeof(v24));
    v2 = *(_DWORD *)(a2 + 2240);
    if (v2)
    {
      LODWORD(v3) = 0;
      v4 = (int)*MEMORY[0x24BE51650];
      do
      {
        v5 = __clz(__rbit32(v2));
        *((_QWORD *)v24 + v3) = *(_QWORD *)(a2 + 2112 + 8 * v5) + v4 + 32;
        v3 = (v3 + 1);
        v2 &= ~(1 << v5);
      }
      while (v2);
      if ((_DWORD)v3)
      {
        v6 = 0;
        v7 = *(unsigned int *)(a1 + 768);
        do
        {
          if ((_DWORD)v7)
          {
            v9 = 0;
            v10 = (__int128 *)*((_QWORD *)v24 + v6);
            v11 = v7;
            v12 = (int *)(a1 + 64);
            while (1)
            {
              v13 = *v12;
              v12 += 6;
              if (*((_DWORD *)v10 + 4) == v13)
                break;
              if (v7 == ++v9)
                goto LABEL_17;
            }
          }
          else
          {
            LODWORD(v9) = 0;
          }
          if ((_DWORD)v9 == (_DWORD)v7)
          {
            v10 = (__int128 *)*((_QWORD *)v24 + v6);
            v11 = v7;
LABEL_17:
            v14 = a1 + 24 * v11;
            v15 = *v10;
            *(_QWORD *)(v14 + 64) = *((_QWORD *)v10 + 2);
            *(_OWORD *)(v14 + 48) = v15;
            v8 = (*(_DWORD *)(a1 + 768) + 1);
            *(_DWORD *)(a1 + 768) = v8;
          }
          else
          {
            v8 = v7;
            LOBYTE(v7) = v9;
          }
          *(_DWORD *)(a1 + 776) |= 1 << v7;
          ++v6;
          v7 = v8;
        }
        while (v6 != v3);
      }
    }
    v16 = *(int8x8_t *)(a2 + 3144);
    v17 = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 860), (int8x8_t)0xF8FFFFFFFC1FFFFFLL), v16);
    *(int8x8_t *)(a1 + 860) = v17;
    v18 = *(_DWORD *)(a1 + 872) & 0xF8EFFFFF;
    v19 = *(unsigned __int8 *)(a2 + 3230);
    if (v19 == 3)
      v20 = 255;
    else
      v20 = byte_232D767D0[v19];
    v23 = v20 >> (((unsigned __int32)v17.i32[1] >> 17) & 7);
    *(_DWORD *)(a1 + 864) = v17.i32[1] & 0xFFEFFFFF | ((v23 & 1) << 20);
    *(_DWORD *)(a1 + 872) = ((v23 & 1) << 20) | v18 | v16.i32[1] & 0xFFEFFFFF;
    result = *(int8x8_t *)(a2 + 316);
    *(int8x8_t *)(a1 + 1208) = result;
    *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 1228) = 0;
  }
  else
  {
    result = vand_s8(*(int8x8_t *)(a1 + 860), (int8x8_t)0xF8FFFFFFFC1FFFFFLL);
    *(int8x8_t *)(a1 + 860) = vorr_s8(result, (int8x8_t)0x200000);
    v22 = *(_DWORD *)(a1 + 872) & 0xF8FFFFFF;
    *(_DWORD *)(a1 + 864) = result.i32[1] | 0x100000;
    *(_DWORD *)(a1 + 872) = v22 | 0x100000;
  }
  return result;
}

double AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setMeshVariant(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unsigned int v14;
  int *v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  _OWORD v19[7];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 32) = a2;
  if (a2)
  {
    memset(v19, 0, sizeof(v19));
    v2 = *(_DWORD *)(a2 + 2224);
    if (v2)
    {
      v3 = (int)*MEMORY[0x24BE51650];
      v4 = -1;
      do
      {
        v5 = v4++;
        v6 = __clz(__rbit32(v2));
        *((_QWORD *)v19 + v4) = *(_QWORD *)(a2 + 2112 + 8 * v6) + v3 + 32;
        v2 &= ~(1 << v6);
      }
      while (v2);
      *((_QWORD *)&v19[1] + v5) = a2 + 2864;
      v7 = v4 + 2;
      if (v4 == -2)
      {
LABEL_6:
        *(_QWORD *)(a1 + 984) = 0;
        *(_QWORD *)(a1 + 976) = 0;
        *(_DWORD *)(a1 + 992) = 3;
        result = *(double *)(a2 + 316);
        *(double *)(a1 + 1472) = result;
        *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a2 + 352);
        *(_QWORD *)(a1 + 1492) = 0;
        return result;
      }
    }
    else
    {
      *(_QWORD *)&v19[0] = a2 + 2864;
      v7 = 1;
    }
    v9 = 0;
    v10 = *(unsigned int *)(a1 + 768);
    do
    {
      if ((_DWORD)v10)
      {
        v12 = 0;
        v13 = (__int128 *)*((_QWORD *)v19 + v9);
        v14 = v10;
        v15 = (int *)(a1 + 64);
        while (1)
        {
          v16 = *v15;
          v15 += 6;
          if (*((_DWORD *)v13 + 4) == v16)
            break;
          if (v10 == ++v12)
            goto LABEL_20;
        }
      }
      else
      {
        LODWORD(v12) = 0;
      }
      if ((_DWORD)v12 == (_DWORD)v10)
      {
        v13 = (__int128 *)*((_QWORD *)v19 + v9);
        v14 = v10;
LABEL_20:
        v17 = a1 + 24 * v14;
        v18 = *v13;
        *(_QWORD *)(v17 + 64) = *((_QWORD *)v13 + 2);
        *(_OWORD *)(v17 + 48) = v18;
        v11 = (*(_DWORD *)(a1 + 768) + 1);
        *(_DWORD *)(a1 + 768) = v11;
      }
      else
      {
        v11 = v10;
        LOBYTE(v10) = v12;
      }
      *(_DWORD *)(a1 + 784) |= 1 << v10;
      ++v9;
      v10 = v11;
    }
    while (v9 != v7);
    goto LABEL_6;
  }
  return result;
}

void AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::constructSpillParams(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  _OWORD v20[2];

  v4 = a1[1];
  if (v4)
    *((_DWORD *)a1 + 10) = *(_DWORD *)(v4 + 332) + *((_DWORD *)a1 + 281);
  if (*a1)
    *((_DWORD *)a1 + 11) = *(_DWORD *)(*a1 + 332) + *((_DWORD *)a1 + 303);
  v5 = a1[2];
  if (v5)
    *((_DWORD *)a1 + 11) = *(_DWORD *)(v5 + 332) + *((_DWORD *)a1 + 325);
  if (*((_BYTE *)a1 + 837))
  {
    AGX::Heap<true>::allocateImpl(&v19, a2 + 5016, 128, 0);
    v6 = v20[0];
    *((_OWORD *)a1 + 63) = v19;
    *((_OWORD *)a1 + 64) = v6;
    *(_OWORD *)((char *)a1 + 1033) = *(_OWORD *)((char *)v20 + 9);
    a1[125] = a1[126] + 0x300000000;
    v7 = a1[127];
    v8 = *a1;
    v9 = a1[1];
    *(_BYTE *)(v7 + 120) = 0;
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(v9 + 3620);
    if (v8)
    {
      LODWORD(v10) = 0x20000;
      HIDWORD(v10) = *(_DWORD *)(v8 + 3152) & 0x210000;
    }
    else
    {
      v10 = 0x20000;
    }
    HIDWORD(v10) = HIDWORD(v10) & 0xFBFF00 | *(_DWORD *)(v9 + 3600) & 0xFF0400FF;
    *(_QWORD *)(v7 + 72) = v10;
    v11 = *(_QWORD *)(v9 + 3552);
    *(_DWORD *)(v7 + 28) = *(_DWORD *)(v9 + 3560);
    *(_QWORD *)(v7 + 20) = v11;
    *(_DWORD *)(v7 + 16) = *(_DWORD *)(v9 + 3448) & 0xE23FFFFF;
    v12 = *(_QWORD *)(v9 + 3456);
    *(_QWORD *)v7 = *(unsigned int *)(v9 + 3448) | ((unint64_t)*(unsigned int *)(v9 + 3532) << 32);
    *(_QWORD *)(v7 + 8) = v12;
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v9 + 3568);
    *(_QWORD *)(v7 + 96) = *(_QWORD *)(v9 + 2040);
    if (v8)
    {
      *(_BYTE *)(v7 + 120) = 4;
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 2896);
      *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 3112);
      *(_QWORD *)(v7 + 112) = *(_QWORD *)(v8 + 2040);
      v13 = *(_OWORD *)(a1 + 107);
      *(_QWORD *)(v7 + 56) = a1[109];
      *(_OWORD *)(v7 + 40) = v13;
      v14 = 5;
    }
    else
    {
      v14 = 1;
    }
    *(_BYTE *)(v7 + 120) = v14;
    v15 = *(_QWORD *)(a2 + 6312);
    v16 = *((_DWORD *)a1 + 10);
    if (v16 > *(_DWORD *)v15)
    {
      *(_DWORD *)v15 = v16;
      *(_BYTE *)(v15 + 24) = 1;
      if (!*a1)
        return;
    }
    else if (!*a1)
    {
      return;
    }
    v17 = *(_QWORD *)(a2 + 6320);
    v18 = *((_DWORD *)a1 + 11);
    if (v18 > *(_DWORD *)v17)
    {
      *(_DWORD *)v17 = v18;
      *(_BYTE *)(v17 + 24) = 1;
    }
  }
}

void AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::emitLabelUpdateSignpost(uint64_t *a1, void *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!objc_msgSend(a2, "label"))
    return;
  v4 = a1[1];
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 2760);
    v6 = *a1;
    if (*a1)
      goto LABEL_4;
LABEL_7:
    v7 = -1;
    v8 = a1[2];
    if (v8)
      goto LABEL_5;
LABEL_8:
    v9 = -1;
    goto LABEL_9;
  }
  v5 = -1;
  v6 = *a1;
  if (!*a1)
    goto LABEL_7;
LABEL_4:
  v7 = *(_DWORD *)(v6 + 2776);
  v8 = a1[2];
  if (!v8)
    goto LABEL_8;
LABEL_5:
  v9 = *(_DWORD *)(v8 + 2776);
LABEL_9:
  {
    {
      v11 = 136446978;
      v12 = objc_msgSend((id)objc_msgSend(a2, "label"), "UTF8String");
      v13 = 1026;
      v14 = v5;
      v15 = 1026;
      v16 = v7;
      v17 = 1026;
      v18 = v9;
      _os_signpost_emit_with_name_impl(&dword_232C19000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "RenderPipelineLabel", "Label=%{public,signpost.description:attribute}s VertexID=%{public,signpost.description:attribute}u FragmentID=%{public,signpost.description:attribute}u TileID=%{public,signpost.description:attribute}u", (uint8_t *)&v11, 0x1Eu);
    }
  }
}

void AGX::G9::TileProgramVariant::~TileProgramVariant(AGX::G9::TileProgramVariant *this)
{
  AGX::TileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~TileProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

double AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariant(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unsigned int v14;
  int *v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  _OWORD v19[7];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = a2;
  if (a2)
  {
    memset(v19, 0, sizeof(v19));
    v2 = *(_DWORD *)(a2 + 2224);
    if (v2)
    {
      v3 = (int)*MEMORY[0x24BE51650];
      v4 = -1;
      do
      {
        v5 = v4++;
        v6 = __clz(__rbit32(v2));
        *((_QWORD *)v19 + v4) = *(_QWORD *)(a2 + 2112 + 8 * v6) + v3 + 32;
        v2 &= ~(1 << v6);
      }
      while (v2);
      *((_QWORD *)&v19[1] + v5) = a2 + 3632;
      v7 = v4 + 2;
      if (v4 == -2)
      {
LABEL_6:
        result = *(double *)(a2 + 316);
        *(double *)(a1 + 1120) = result;
        *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 352);
        *(_QWORD *)(a1 + 1140) = 0;
        return result;
      }
    }
    else
    {
      *(_QWORD *)&v19[0] = a2 + 3632;
      v7 = 1;
    }
    v9 = 0;
    v10 = *(unsigned int *)(a1 + 768);
    do
    {
      if ((_DWORD)v10)
      {
        v12 = 0;
        v13 = (__int128 *)*((_QWORD *)v19 + v9);
        v14 = v10;
        v15 = (int *)(a1 + 64);
        while (1)
        {
          v16 = *v15;
          v15 += 6;
          if (*((_DWORD *)v13 + 4) == v16)
            break;
          if (v10 == ++v12)
            goto LABEL_20;
        }
      }
      else
      {
        LODWORD(v12) = 0;
      }
      if ((_DWORD)v12 == (_DWORD)v10)
      {
        v13 = (__int128 *)*((_QWORD *)v19 + v9);
        v14 = v10;
LABEL_20:
        v17 = a1 + 24 * v14;
        v18 = *v13;
        *(_QWORD *)(v17 + 64) = *((_QWORD *)v13 + 2);
        *(_OWORD *)(v17 + 48) = v18;
        v11 = (*(_DWORD *)(a1 + 768) + 1);
        *(_DWORD *)(a1 + 768) = v11;
      }
      else
      {
        v11 = v10;
        LOBYTE(v10) = v12;
      }
      *(_DWORD *)(a1 + 772) |= 1 << v10;
      ++v9;
      v10 = v11;
    }
    while (v9 != v7);
    goto LABEL_6;
  }
  return result;
}

uint64_t AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unsigned int v16;
  int *v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  _OWORD v21[7];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
  {
    v10 = *(_DWORD *)(result + 1124);
    goto LABEL_8;
  }
  memset(v21, 0, sizeof(v21));
  v3 = *(_DWORD *)(a3 + 2224);
  if (!v3)
  {
    *(_QWORD *)&v21[0] = a3 + 3632;
    v8 = 1;
    goto LABEL_10;
  }
  v4 = (int)*MEMORY[0x24BE51650];
  v5 = -1;
  do
  {
    v6 = v5++;
    v7 = __clz(__rbit32(v3));
    *((_QWORD *)v21 + v5) = *(_QWORD *)(a3 + 2112 + 8 * v7) + v4 + 32;
    v3 &= ~(1 << v7);
  }
  while (v3);
  *((_QWORD *)&v21[1] + v6) = a3 + 3632;
  v8 = v5 + 2;
  if (v5 != -2)
  {
LABEL_10:
    v11 = 0;
    v12 = *(unsigned int *)(result + 768);
    do
    {
      if ((_DWORD)v12)
      {
        v14 = 0;
        v15 = (__int128 *)*((_QWORD *)v21 + v11);
        v16 = v12;
        v17 = (int *)(result + 64);
        while (1)
        {
          v18 = *v17;
          v17 += 6;
          if (*((_DWORD *)v15 + 4) == v18)
            break;
          if (v12 == ++v14)
            goto LABEL_21;
        }
      }
      else
      {
        LODWORD(v14) = 0;
      }
      if ((_DWORD)v14 == (_DWORD)v12)
      {
        v15 = (__int128 *)*((_QWORD *)v21 + v11);
        v16 = v12;
LABEL_21:
        v19 = result + 24 * v16;
        v20 = *v15;
        *(_QWORD *)(v19 + 64) = *((_QWORD *)v15 + 2);
        *(_OWORD *)(v19 + 48) = v20;
        v13 = (*(_DWORD *)(result + 768) + 1);
        *(_DWORD *)(result + 768) = v13;
      }
      else
      {
        v13 = v12;
        LOBYTE(v12) = v14;
      }
      *(_DWORD *)(result + 772) |= 1 << v12;
      ++v11;
      v12 = v13;
    }
    while (v11 != v8);
  }
  v9 = *(_QWORD *)(a3 + 316);
  *(_QWORD *)(result + 1120) = v9;
  *(_DWORD *)(result + 1136) = *(_DWORD *)(a3 + 352);
  *(_QWORD *)(result + 1140) = 0;
  v10 = HIDWORD(v9);
LABEL_8:
  *(_DWORD *)(result + 40) = *(_DWORD *)(a3 + 332) + v10;
  return result;
}

uint64_t AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::appendProgramAddressTables(uint64_t result, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  uint64_t v10;
  uint64_t k;
  _QWORD *v12;
  uint64_t v13;
  uint64_t m;
  _QWORD *v15;
  uint64_t v16;
  uint64_t n;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)result)
  {
    result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", *(_QWORD *)(*(_QWORD *)result + 512), *(_QWORD *)(*(_QWORD *)result + 736), *(_QWORD *)(*(_QWORD *)result + 424), CFSTR("fragment")));
    v4 = v3[192];
    for (i = v3[193]; v4 != i; v4 += 16)
      result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", 0, 0, 0, CFSTR("fragment-dylib-resource")));
  }
  v6 = (_QWORD *)v3[1];
  if (v6)
  {
    result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v6[64], v6[92], v6[53], CFSTR("vertex")));
    v7 = v3[189];
    for (j = v3[190]; v7 != j; v7 += 16)
      result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", 0, 0, 0, CFSTR("vertex-dylib-resource")));
  }
  v9 = (_QWORD *)v3[2];
  if (v9)
  {
    result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v9[64], v9[92], v9[53], CFSTR("tile")));
    v10 = v3[195];
    for (k = v3[196]; v10 != k; v10 += 16)
      result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", 0, 0, 0, CFSTR("tile-dylib-resource")));
  }
  v12 = (_QWORD *)v3[3];
  if (v12)
  {
    result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v12[64], v12[92], v12[53], CFSTR("object")));
    v13 = v3[198];
    for (m = v3[199]; v13 != m; v13 += 16)
      result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", 0, 0, 0, CFSTR("object-dylib-resource")));
  }
  v15 = (_QWORD *)v3[4];
  if (v15)
  {
    result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v15[64], v15[92], v15[53], CFSTR("mesh")));
    v16 = v3[201];
    for (n = v3[202]; v16 != n; v16 += 16)
      result = objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x24BDDD7F0]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", 0, 0, 0, CFSTR("mesh-dylib-resource")));
  }
  return result;
}

void sub_232D13E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unint64_t v16;

  if ((char *)STACK[0x828] != &a14 && STACK[0x828] != 0)
    MEMORY[0x234927EB4]();
  v16 = STACK[0xC40];
  if ((unint64_t *)STACK[0xC40] != &STACK[0x840])
  {
    if (v16)
      MEMORY[0x234927EB4](v16, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

uint64_t AGX::SampledComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::duplicateShaderAddresses(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  _BYTE *v46;
  int64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  char *v85;
  size_t v86;
  _BYTE *v87;
  _BYTE *v88;
  int64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  _OWORD *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  __int128 v132;
  uint64_t v133;
  void *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  int8x8_t *v138;
  uint64_t **i;
  uint64_t *v140;
  int v141;
  int v142;
  void *v143;
  uint64_t v144;
  os_unfair_lock_s *v145;
  unint64_t v146;
  char *v147;
  char *v148;
  _QWORD *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  char *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t *j;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *p_shared_owners;
  unint64_t v178;
  uint64_t result;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[5];
  void *v200[2];
  _BYTE __p[25];
  __int128 v202;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 1776);
  v196 = *(id *)v2;
  v197 = *(_QWORD *)(objc_msgSend(*(id *)v2, "device") + 808);
  v4 = operator new();
  v198 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)v4 = &off_2504019C0;
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v4 + 48) = v8;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  v10 = *(_BYTE **)(v5 + 72);
  v9 = *(_BYTE **)(v5 + 80);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      abort();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(v4 + 72) = v12;
    *(_QWORD *)(v4 + 80) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(v4 + 88) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(v4 + 80) = v13;
  }
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  v15 = *(_BYTE **)(v5 + 96);
  v14 = *(_BYTE **)(v5 + 104);
  v16 = v14 - v15;
  v194 = v4 + 72;
  if (v14 != v15)
  {
    if (v16 < 0)
      abort();
    v17 = (char *)operator new(v14 - v15);
    *(_QWORD *)(v4 + 96) = v17;
    *(_QWORD *)(v4 + 104) = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *(_QWORD *)(v4 + 112) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(v4 + 104) = v18;
  }
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  v20 = *(_BYTE **)(v5 + 120);
  v19 = *(_BYTE **)(v5 + 128);
  v21 = v19 - v20;
  v193 = v4 + 96;
  if (v19 != v20)
  {
    if (v21 < 0)
      abort();
    v22 = (char *)operator new(v19 - v20);
    *(_QWORD *)(v4 + 120) = v22;
    *(_QWORD *)(v4 + 128) = v22;
    v23 = &v22[4 * (v21 >> 2)];
    *(_QWORD *)(v4 + 136) = v23;
    memcpy(v22, v20, v21);
    *(_QWORD *)(v4 + 128) = v23;
  }
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  v191 = v4 + 144;
  v192 = v4 + 120;
  *(_QWORD *)(v4 + 160) = 0;
  v25 = *(_BYTE **)(v5 + 144);
  v24 = *(_BYTE **)(v5 + 152);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      abort();
    v27 = (char *)operator new(v24 - v25);
    *(_QWORD *)(v4 + 144) = v27;
    *(_QWORD *)(v4 + 152) = v27;
    v28 = &v27[2 * (v26 >> 1)];
    *(_QWORD *)(v4 + 160) = v28;
    memcpy(v27, v25, v26);
    *(_QWORD *)(v4 + 152) = v28;
  }
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  v190 = v4 + 168;
  *(_QWORD *)(v4 + 184) = 0;
  v30 = *(_BYTE **)(v5 + 168);
  v29 = *(_BYTE **)(v5 + 176);
  v31 = v29 - v30;
  if (v29 != v30)
  {
    if (v31 < 0)
      abort();
    v32 = (char *)operator new(v29 - v30);
    *(_QWORD *)(v4 + 168) = v32;
    *(_QWORD *)(v4 + 176) = v32;
    v33 = &v32[4 * (v31 >> 2)];
    *(_QWORD *)(v4 + 184) = v33;
    memcpy(v32, v30, v31);
    *(_QWORD *)(v4 + 176) = v33;
  }
  *(_QWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  v189 = v4 + 192;
  *(_QWORD *)(v4 + 208) = 0;
  v35 = *(_BYTE **)(v5 + 192);
  v34 = *(_BYTE **)(v5 + 200);
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0)
      abort();
    v37 = (char *)operator new(v34 - v35);
    *(_QWORD *)(v4 + 192) = v37;
    *(_QWORD *)(v4 + 200) = v37;
    v38 = &v37[2 * (v36 >> 1)];
    *(_QWORD *)(v4 + 208) = v38;
    memcpy(v37, v35, v36);
    *(_QWORD *)(v4 + 200) = v38;
  }
  v195 = a1;
  *(_BYTE *)(v4 + 216) = *(_BYTE *)(v5 + 216);
  v39 = *(_OWORD *)(v5 + 224);
  *(_QWORD *)(v4 + 240) = 0;
  *(_OWORD *)(v4 + 224) = v39;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  v41 = *(_BYTE **)(v5 + 240);
  v40 = *(_BYTE **)(v5 + 248);
  v42 = v40 - v41;
  if (v40 != v41)
  {
    if (v42 < 0)
      abort();
    v43 = (char *)operator new(v40 - v41);
    *(_QWORD *)(v4 + 240) = v43;
    *(_QWORD *)(v4 + 248) = v43;
    v44 = &v43[4 * (v42 >> 2)];
    *(_QWORD *)(v4 + 256) = v44;
    memcpy(v43, v41, v42);
    *(_QWORD *)(v4 + 248) = v44;
  }
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  v46 = *(_BYTE **)(v5 + 264);
  v45 = *(_BYTE **)(v5 + 272);
  v47 = v45 - v46;
  if (v45 != v46)
  {
    if (v47 < 0)
      abort();
    v48 = (char *)operator new(v45 - v46);
    *(_QWORD *)(v4 + 264) = v48;
    *(_QWORD *)(v4 + 272) = v48;
    v49 = &v48[4 * (v47 >> 2)];
    *(_QWORD *)(v4 + 280) = v49;
    memcpy(v48, v46, v47);
    *(_QWORD *)(v4 + 272) = v49;
  }
  *(_QWORD *)(v4 + 296) = 0;
  *(_QWORD *)(v4 + 304) = 0;
  *(_QWORD *)(v4 + 288) = v4 + 296;
  v188 = v4 + 296;
  std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>((uint64_t *)(v4 + 288), *(_QWORD **)(v5 + 288), (_QWORD *)(v5 + 296));
  v50 = *(_OWORD *)(v5 + 312);
  v51 = *(_OWORD *)(v5 + 328);
  v52 = *(_OWORD *)(v5 + 360);
  *(_OWORD *)(v4 + 344) = *(_OWORD *)(v5 + 344);
  *(_OWORD *)(v4 + 360) = v52;
  *(_OWORD *)(v4 + 312) = v50;
  *(_OWORD *)(v4 + 328) = v51;
  v53 = *(_OWORD *)(v5 + 376);
  v54 = *(_OWORD *)(v5 + 392);
  v55 = *(_OWORD *)(v5 + 408);
  *(_QWORD *)(v4 + 424) = *(_QWORD *)(v5 + 424);
  *(_OWORD *)(v4 + 392) = v54;
  *(_OWORD *)(v4 + 408) = v55;
  *(_OWORD *)(v4 + 376) = v53;
  if (*(char *)(v5 + 455) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 432), *(const std::string::value_type **)(v5 + 432), *(_QWORD *)(v5 + 440));
  }
  else
  {
    v56 = *(_OWORD *)(v5 + 432);
    *(_QWORD *)(v4 + 448) = *(_QWORD *)(v5 + 448);
    *(_OWORD *)(v4 + 432) = v56;
  }
  v57 = (std::string *)(v4 + 456);
  v186 = v4 + 456;
  v187 = v4 + 432;
  if (*(char *)(v5 + 479) < 0)
  {
    std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)(v5 + 456), *(_QWORD *)(v5 + 464));
  }
  else
  {
    v58 = *(_OWORD *)(v5 + 456);
    *(_QWORD *)(v4 + 472) = *(_QWORD *)(v5 + 472);
    *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
  }
  if (*(char *)(v5 + 503) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 480), *(const std::string::value_type **)(v5 + 480), *(_QWORD *)(v5 + 488));
  }
  else
  {
    v59 = *(_OWORD *)(v5 + 480);
    *(_QWORD *)(v4 + 496) = *(_QWORD *)(v5 + 496);
    *(_OWORD *)(v4 + 480) = v59;
  }
  v60 = *(_OWORD *)(v5 + 520);
  *(_OWORD *)(v4 + 504) = *(_OWORD *)(v5 + 504);
  *(_OWORD *)(v4 + 520) = v60;
  v61 = *(_OWORD *)(v5 + 536);
  v62 = *(_OWORD *)(v5 + 552);
  v63 = *(_OWORD *)(v5 + 584);
  *(_OWORD *)(v4 + 568) = *(_OWORD *)(v5 + 568);
  *(_OWORD *)(v4 + 584) = v63;
  *(_OWORD *)(v4 + 536) = v61;
  *(_OWORD *)(v4 + 552) = v62;
  v64 = *(_OWORD *)(v5 + 600);
  v65 = *(_OWORD *)(v5 + 616);
  v66 = *(_OWORD *)(v5 + 648);
  *(_OWORD *)(v4 + 632) = *(_OWORD *)(v5 + 632);
  *(_OWORD *)(v4 + 648) = v66;
  *(_OWORD *)(v4 + 600) = v64;
  *(_OWORD *)(v4 + 616) = v65;
  v67 = *(_OWORD *)(v5 + 664);
  v68 = *(_OWORD *)(v5 + 680);
  v69 = *(_OWORD *)(v5 + 696);
  *(_QWORD *)(v4 + 712) = *(_QWORD *)(v5 + 712);
  *(_OWORD *)(v4 + 680) = v68;
  *(_OWORD *)(v4 + 696) = v69;
  *(_OWORD *)(v4 + 664) = v67;
  v70 = (_OWORD *)(v4 + 720);
  v71 = *(_OWORD *)(v5 + 736);
  *(_OWORD *)(v4 + 720) = *(_OWORD *)(v5 + 720);
  *(_OWORD *)(v4 + 736) = v71;
  v72 = *(_OWORD *)(v5 + 752);
  v73 = *(_OWORD *)(v5 + 768);
  v74 = *(_OWORD *)(v5 + 800);
  *(_OWORD *)(v4 + 784) = *(_OWORD *)(v5 + 784);
  *(_OWORD *)(v4 + 800) = v74;
  *(_OWORD *)(v4 + 752) = v72;
  *(_OWORD *)(v4 + 768) = v73;
  v75 = *(_OWORD *)(v5 + 816);
  v76 = *(_OWORD *)(v5 + 832);
  v77 = *(_OWORD *)(v5 + 848);
  *(_QWORD *)(v4 + 861) = *(_QWORD *)(v5 + 861);
  *(_OWORD *)(v4 + 832) = v76;
  *(_OWORD *)(v4 + 848) = v77;
  *(_OWORD *)(v4 + 816) = v75;
  if (*(char *)(v5 + 895) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 872), *(const std::string::value_type **)(v5 + 872), *(_QWORD *)(v5 + 880));
  }
  else
  {
    v78 = *(_OWORD *)(v5 + 872);
    *(_QWORD *)(v4 + 888) = *(_QWORD *)(v5 + 888);
    *(_OWORD *)(v4 + 872) = v78;
  }
  *(_QWORD *)(v4 + 896) = *(_QWORD *)(v5 + 896);
  v79 = *(_OWORD *)(v5 + 904);
  v80 = *(_OWORD *)(v5 + 920);
  v81 = *(_OWORD *)(v5 + 936);
  *(_OWORD *)(v4 + 945) = *(_OWORD *)(v5 + 945);
  *(_OWORD *)(v4 + 920) = v80;
  *(_OWORD *)(v4 + 936) = v81;
  *(_OWORD *)(v4 + 904) = v79;
  *(_QWORD *)(v4 + 968) = 0;
  *(_QWORD *)(v4 + 984) = 0;
  *(_QWORD *)(v4 + 976) = 0;
  v82 = *(_BYTE **)(v5 + 968);
  v83 = *(_BYTE **)(v5 + 976);
  v84 = v83 - v82;
  if (v83 != v82)
  {
    if (v84 < 0)
      abort();
    v85 = (char *)operator new(v83 - v82);
    *(_QWORD *)(v4 + 968) = v85;
    *(_QWORD *)(v4 + 976) = v85;
    *(_QWORD *)(v4 + 984) = &v85[16 * (v84 >> 4)];
    v86 = v84 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v85, v82, v86);
    *(_QWORD *)(v4 + 976) = &v85[v86];
  }
  *(_QWORD *)(v4 + 1008) = 0;
  *(_OWORD *)(v4 + 992) = 0u;
  v87 = *(_BYTE **)(v5 + 992);
  v88 = *(_BYTE **)(v5 + 1000);
  v89 = v88 - v87;
  if (v88 != v87)
  {
    if (v89 < 0)
      abort();
    v90 = (char *)operator new(v88 - v87);
    *(_QWORD *)(v4 + 992) = v90;
    *(_QWORD *)(v4 + 1000) = v90;
    v91 = &v90[8 * (v89 >> 3)];
    *(_QWORD *)(v4 + 1008) = v91;
    memcpy(v90, v87, v89);
    *(_QWORD *)(v4 + 1000) = v91;
  }
  *(_QWORD *)(v4 + 1032) = 0;
  *(_OWORD *)(v4 + 1016) = 0u;
  v92 = *(char **)(v5 + 1016);
  v93 = *(char **)(v5 + 1024);
  v94 = v93 - v92;
  if (v93 != v92)
  {
    if (v94 < 0)
      abort();
    v95 = operator new(v93 - v92);
    *(_QWORD *)(v4 + 1016) = v95;
    *(_QWORD *)(v4 + 1024) = v95;
    *(_QWORD *)(v4 + 1032) = &v95[2 * (v94 >> 4)];
    do
    {
      *v95 = *(_QWORD *)v92;
      v96 = *((_QWORD *)v92 + 1);
      v95[1] = v96;
      if (v96)
      {
        v97 = (unint64_t *)(v96 + 8);
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      v92 += 16;
      v95 += 2;
    }
    while (v92 != v93);
    *(_QWORD *)(v4 + 1024) = v95;
  }
  *(_DWORD *)(v4 + 1040) = *(_DWORD *)(v5 + 1040);
  *(_QWORD *)(v4 + 1064) = 0;
  *(_QWORD *)(v4 + 1056) = 0;
  *(_QWORD *)(v4 + 1048) = v4 + 1056;
  std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>((uint64_t *)(v4 + 1048), *(_QWORD **)(v5 + 1048), (_QWORD *)(v5 + 1056));
  CompileStatistics::CompileStatistics((CompileStatistics *)(v4 + 1072), (const CompileStatistics *)(v5 + 1072));
  *(_QWORD *)v4 = &off_2504018E0;
  *(_BYTE *)(v4 + 1992) = 0;
  *(_QWORD *)(v4 + 2000) = 0;
  *(_QWORD *)(v4 + 2016) = 0;
  *(_QWORD *)(v4 + 2008) = 0;
  *(_QWORD *)(v4 + 2280) = 0;
  *(_OWORD *)(v4 + 2248) = 0u;
  *(_OWORD *)(v4 + 2264) = 0u;
  *(_QWORD *)(v4 + 2328) = 0;
  *(_OWORD *)(v4 + 2296) = 0u;
  *(_OWORD *)(v4 + 2312) = 0u;
  *(_QWORD *)(v4 + 2376) = 0;
  *(_OWORD *)(v4 + 2344) = 0u;
  *(_OWORD *)(v4 + 2360) = 0u;
  *(_QWORD *)(v4 + 2424) = 0;
  *(_OWORD *)(v4 + 2392) = 0u;
  *(_OWORD *)(v4 + 2408) = 0u;
  *(_QWORD *)(v4 + 2480) = 0;
  *(_OWORD *)(v4 + 2464) = 0u;
  *(_OWORD *)(v4 + 2448) = 0u;
  *(_QWORD *)(v4 + 2528) = 0;
  *(_OWORD *)(v4 + 2512) = 0u;
  *(_OWORD *)(v4 + 2496) = 0u;
  *(_QWORD *)(v4 + 2576) = 0;
  *(_OWORD *)(v4 + 2544) = 0u;
  *(_OWORD *)(v4 + 2560) = 0u;
  *(_OWORD *)(v4 + 2592) = 0u;
  *(_OWORD *)(v4 + 2608) = 0u;
  *(_QWORD *)(v4 + 2624) = 0;
  *(_OWORD *)(v4 + 2640) = 0u;
  *(_OWORD *)(v4 + 2656) = 0u;
  *(_QWORD *)(v4 + 2672) = 0;
  *(_OWORD *)(v4 + 1264) = 0u;
  *(_OWORD *)(v4 + 1280) = 0u;
  *(_OWORD *)(v4 + 1296) = 0u;
  *(_OWORD *)(v4 + 1312) = 0u;
  *(_OWORD *)(v4 + 1328) = 0u;
  *(_OWORD *)(v4 + 1344) = 0u;
  *(_OWORD *)(v4 + 1360) = 0u;
  *(_OWORD *)(v4 + 1376) = 0u;
  *(_OWORD *)(v4 + 1392) = 0u;
  *(_QWORD *)(v4 + 1408) = 0;
  *(_QWORD *)(v4 + 2224) = 0;
  *(_OWORD *)(v4 + 2208) = 0u;
  *(_OWORD *)(v4 + 2192) = 0u;
  *(_OWORD *)(v4 + 2176) = 0u;
  *(_OWORD *)(v4 + 2160) = 0u;
  *(_OWORD *)(v4 + 2144) = 0u;
  *(_OWORD *)(v4 + 2128) = 0u;
  *(_OWORD *)(v4 + 2112) = 0u;
  *(_OWORD *)(v4 + 2688) = 0u;
  *(_OWORD *)(v4 + 2704) = 0u;
  *(_OWORD *)(v4 + 2720) = 0u;
  *(_OWORD *)(v4 + 2736) = 0u;
  *(_OWORD *)(v4 + 2776) = 0u;
  *(_OWORD *)(v4 + 2792) = 0u;
  *(_OWORD *)(v4 + 2808) = 0u;
  *(_OWORD *)(v4 + 2968) = 0u;
  *(_OWORD *)(v4 + 2984) = 0u;
  *(_QWORD *)(v4 + 3000) = 0;
  *(_QWORD *)(v4 + 3048) = 0;
  *(_OWORD *)(v4 + 3032) = 0u;
  *(_OWORD *)(v4 + 3016) = 0u;
  *(_DWORD *)(v4 + 3268) = 0;
  *(_BYTE *)(v4 + 3272) = 0;
  *(_OWORD *)(v4 + 3280) = 0u;
  *(_OWORD *)(v4 + 3296) = 0u;
  *(_DWORD *)(v4 + 3312) = 1065353216;
  *(_QWORD *)(v4 + 3328) = 850045863;
  *(_OWORD *)(v4 + 3336) = 0u;
  *(_OWORD *)(v4 + 3352) = 0u;
  *(_OWORD *)(v4 + 3368) = 0u;
  *(_QWORD *)(v4 + 3384) = 0;
  memcpy((void *)(v4 + 1240), (const void *)(v5 + 1240), 0x5FCuLL);
  std::string::operator=((std::string *)(v4 + 2776), (const std::string *)(v5 + 2776));
  if (v4 != v5)
    std::vector<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields **>((_QWORD *)(v4 + 2800), *(char **)(v5 + 2800), *(char **)(v5 + 2808), (uint64_t)(*(_QWORD *)(v5 + 2808) - *(_QWORD *)(v5 + 2800)) >> 3);
  *(_OWORD *)(v4 + 2824) = *(_OWORD *)(v5 + 2824);
  v99 = *(_OWORD *)(v5 + 2920);
  v100 = *(_OWORD *)(v5 + 2936);
  v101 = *(_OWORD *)(v5 + 2952);
  *(_OWORD *)(v4 + 2904) = *(_OWORD *)(v5 + 2904);
  *(_OWORD *)(v4 + 2952) = v101;
  *(_OWORD *)(v4 + 2936) = v100;
  *(_OWORD *)(v4 + 2920) = v99;
  v102 = *(_OWORD *)(v5 + 2984);
  v103 = *(_OWORD *)(v5 + 3000);
  v104 = *(_OWORD *)(v5 + 3016);
  *(_OWORD *)(v4 + 2968) = *(_OWORD *)(v5 + 2968);
  *(_OWORD *)(v4 + 3016) = v104;
  *(_OWORD *)(v4 + 3000) = v103;
  *(_OWORD *)(v4 + 2984) = v102;
  v105 = *(_OWORD *)(v5 + 3048);
  v106 = *(_OWORD *)(v5 + 3064);
  v107 = *(_OWORD *)(v5 + 3076);
  *(_OWORD *)(v4 + 3032) = *(_OWORD *)(v5 + 3032);
  *(_OWORD *)(v4 + 3076) = v107;
  *(_OWORD *)(v4 + 3064) = v106;
  *(_OWORD *)(v4 + 3048) = v105;
  v108 = *(_OWORD *)(v5 + 2840);
  v109 = *(_OWORD *)(v5 + 2856);
  v110 = *(_OWORD *)(v5 + 2872);
  *(_OWORD *)(v4 + 2888) = *(_OWORD *)(v5 + 2888);
  *(_OWORD *)(v4 + 2872) = v110;
  *(_OWORD *)(v4 + 2856) = v109;
  *(_OWORD *)(v4 + 2840) = v108;
  *(_QWORD *)(v4 + 3096) = *(_QWORD *)(v5 + 3096);
  *(_OWORD *)(v4 + 3104) = *(_OWORD *)(v5 + 3104);
  v111 = *(_OWORD *)(v5 + 3120);
  v112 = *(_OWORD *)(v5 + 3136);
  v113 = *(_OWORD *)(v5 + 3152);
  *(_OWORD *)(v4 + 3168) = *(_OWORD *)(v5 + 3168);
  *(_OWORD *)(v4 + 3152) = v113;
  *(_OWORD *)(v4 + 3136) = v112;
  *(_OWORD *)(v4 + 3120) = v111;
  v114 = *(_OWORD *)(v5 + 3184);
  v115 = *(_OWORD *)(v5 + 3200);
  v116 = *(_OWORD *)(v5 + 3216);
  *(_OWORD *)(v4 + 3228) = *(_OWORD *)(v5 + 3228);
  *(_OWORD *)(v4 + 3216) = v116;
  *(_OWORD *)(v4 + 3200) = v115;
  *(_OWORD *)(v4 + 3184) = v114;
  *(_DWORD *)(v4 + 3244) = *(_DWORD *)(v5 + 3244);
  *(_QWORD *)(v4 + 3248) = *(_QWORD *)(v5 + 3248);
  *(_QWORD *)(v4 + 3256) = *(_QWORD *)(v5 + 3256);
  *(_BYTE *)(v4 + 3264) = *(_BYTE *)(v5 + 3264);
  *(_DWORD *)(v4 + 3268) = *(_DWORD *)(v5 + 3268);
  *(_BYTE *)(v4 + 3272) = *(_BYTE *)(v5 + 3272);
  *(_DWORD *)(v4 + 3276) = *(_DWORD *)(v5 + 3276);
  if (v4 != v5)
  {
    *(_DWORD *)(v4 + 3312) = *(_DWORD *)(v5 + 3312);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>((_QWORD *)(v4 + 3280), *(uint64_t **)(v5 + 3296));
  }
  *(_QWORD *)(v4 + 3320) = *(_QWORD *)(v5 + 3320);
  *(_QWORD *)v4 = &off_250401740;
  v117 = *(_QWORD *)(v198 + 16);
  AGX::Heap<true>::allocateImpl(v200, *(_QWORD *)(v117 + 544), *(_QWORD *)(v117 + 736), (_QWORD *)(v4 + 920));
  v118 = *(_OWORD *)__p;
  *v70 = *(_OWORD *)v200;
  *(_OWORD *)(v4 + 736) = v118;
  *(_OWORD *)(v4 + 745) = *(_OWORD *)&__p[9];
  *(_QWORD *)(v4 + 512) = *(_QWORD *)(v4 + 720);
  *(_DWORD *)(v4 + 864) = *(_DWORD *)(v117 + 864);
  memcpy(*(void **)(v4 + 728), *(const void **)(v117 + 728), *(_QWORD *)(v4 + 736));
  v119 = *(_QWORD *)(v117 + 784);
  if (v119)
  {
    AGX::Heap<true>::allocateImpl(v200, *(_QWORD *)(v117 + 544), v119, (_QWORD *)(v4 + 928));
    v120 = *(_OWORD *)__p;
    *(_OWORD *)(v4 + 768) = *(_OWORD *)v200;
    *(_OWORD *)(v4 + 784) = v120;
    *(_OWORD *)(v4 + 793) = *(_OWORD *)&__p[9];
    memcpy(*(void **)(v4 + 776), *(const void **)(v117 + 776), *(_QWORD *)(v4 + 784));
  }
  v121 = (_OWORD *)(v4 + 3016);
  v122 = *(_QWORD *)(v117 + 832);
  if (v122)
  {
    AGX::Heap<true>::allocateImpl(v200, *(_QWORD *)(v117 + 544), v122, (_QWORD *)(v4 + 936));
    v123 = *(_OWORD *)__p;
    *(_OWORD *)(v4 + 816) = *(_OWORD *)v200;
    *(_OWORD *)(v4 + 832) = v123;
    *(_OWORD *)(v4 + 841) = *(_OWORD *)&__p[9];
    memcpy(*(void **)(v4 + 824), *(const void **)(v117 + 824), *(_QWORD *)(v4 + 832));
    v124 = *(_QWORD *)(v4 + 832);
    *(_OWORD *)(v4 + 696) = *(_OWORD *)(v4 + 816);
    *(_QWORD *)(v4 + 712) = v124;
  }
  v125 = *(_OWORD *)(v4 + 736);
  *(_OWORD *)(v4 + 552) = *v70;
  *(_OWORD *)(v4 + 568) = v125;
  *(_OWORD *)(v4 + 577) = *(_OWORD *)(v4 + 745);
  v126 = *(_OWORD *)(v4 + 784);
  *(_OWORD *)(v4 + 600) = *(_OWORD *)(v4 + 768);
  *(_OWORD *)(v4 + 616) = v126;
  *(_OWORD *)(v4 + 625) = *(_OWORD *)(v4 + 793);
  v127 = *(_OWORD *)(v4 + 816);
  *(_OWORD *)(v4 + 664) = *(_OWORD *)(v4 + 832);
  *(_OWORD *)(v4 + 648) = v127;
  *(_OWORD *)(v4 + 673) = *(_OWORD *)(v4 + 841);
  v128 = *(_QWORD *)(v4 + 728);
  v129 = *(_QWORD *)(v4 + 736);
  *(_QWORD *)(v4 + 520) = *(_QWORD *)(v4 + 720);
  *(_QWORD *)(v4 + 528) = v128;
  *(_QWORD *)(v4 + 536) = v129;
  *(_BYTE *)(v4 + 868) = 1;
  LODWORD(v128) = *(_DWORD *)(v4 + 944);
  *(_QWORD *)(v4 + 2016) = v129;
  *(_OWORD *)(v4 + 2000) = *(_OWORD *)(v4 + 520);
  *(_QWORD *)(v4 + 2128) = *(_QWORD *)(v4 + 920);
  *(_DWORD *)(v4 + 2836) += v128;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v4 + 1240);
  *(_BYTE *)(v4 + 2764) = 1;
  *(_DWORD *)(v4 + 2836) = *(_DWORD *)(v117 + 2836);
  AGX::Heap<true>::allocateImpl(v200, *(_QWORD *)(v117 + 2240), *(_QWORD *)(v117 + 3032), (_QWORD *)(v4 + 2224));
  v130 = *(_OWORD *)__p;
  *v121 = *(_OWORD *)v200;
  *(_OWORD *)(v4 + 3032) = v130;
  *(_OWORD *)(v4 + 3041) = *(_OWORD *)&__p[9];
  v131 = *(_DWORD *)(v4 + 3016);
  memcpy(*(void **)(v4 + 3024), *(const void **)(v117 + 3024), *(_QWORD *)(v4 + 3032));
  *(_QWORD *)(*(_QWORD *)(v4 + 3024) + 4 * *(unsigned int *)(v4 + 2760)) = *(_QWORD *)(*(_QWORD *)(v4 + 3024)
                                                                                       + 4
                                                                                       * *(unsigned int *)(v4 + 2760)) & 0xFFFFFFFF00000003 | *(_QWORD *)(v4 + 2000) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v4 + 2908) = v131 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2908) & 0xF;
  *(_DWORD *)(v4 + 2940) = v131 & 0xFFFFFFF0 | *(_DWORD *)(v4 + 2940) & 0xF;
  *(_OWORD *)(v4 + 2993) = *(_OWORD *)(v4 + 3041);
  v132 = *(_OWORD *)(v4 + 3032);
  *(_OWORD *)(v4 + 2968) = *v121;
  *(_OWORD *)(v4 + 2984) = v132;
  *(_DWORD *)(v4 + 3064) = 8
                         * (*(_DWORD *)(v4 + 1420)
                          + *(_DWORD *)(v4 + 1416)
                          + *(_DWORD *)(v4 + 1424)
                          + *(_DWORD *)(v4 + 1428));
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::buildUniqueResourceMask(v4 + 1240);
  *(_QWORD *)(v4 + 3320) = *(id *)(v117 + 3320);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v4);
  v133 = operator new();
  *(_OWORD *)v133 = 0u;
  *(_OWORD *)(v133 + 16) = 0u;
  *(_OWORD *)(v133 + 32) = 0u;
  *(_OWORD *)(v133 + 48) = 0u;
  *(_OWORD *)(v133 + 64) = 0u;
  *(_OWORD *)(v133 + 80) = 0u;
  *(_OWORD *)(v133 + 96) = 0u;
  *(_OWORD *)(v133 + 112) = 0u;
  *(_OWORD *)(v133 + 128) = 0u;
  *(_OWORD *)(v133 + 144) = 0u;
  *(_OWORD *)(v133 + 160) = 0u;
  *(_OWORD *)(v133 + 176) = 0u;
  *(_OWORD *)(v133 + 192) = 0u;
  *(_OWORD *)(v133 + 208) = 0u;
  *(_OWORD *)(v133 + 224) = 0u;
  *(_OWORD *)(v133 + 240) = 0u;
  *(_OWORD *)(v133 + 256) = 0u;
  *(_OWORD *)(v133 + 272) = 0u;
  *(_OWORD *)(v133 + 320) = 0u;
  *(_OWORD *)(v133 + 336) = 0u;
  *(_QWORD *)(v133 + 344) = 0;
  *(_QWORD *)(v133 + 352) = 0;
  *(_DWORD *)(v133 + 264) = 1065353216;
  *(_OWORD *)(v133 + 272) = 0u;
  *(_OWORD *)(v133 + 288) = 0u;
  *(_OWORD *)(v133 + 288) = 0u;
  *(_OWORD *)(v133 + 304) = 0u;
  *(_DWORD *)(v133 + 304) = 1065353216;
  *(_OWORD *)(v133 + 312) = 0u;
  *(_OWORD *)(v133 + 328) = 0u;
  *(_DWORD *)(v133 + 352) = 1065353216;
  *(_OWORD *)(v133 + 360) = 0u;
  *(_OWORD *)(v133 + 376) = 0u;
  *(_OWORD *)(v133 + 392) = 0u;
  *(_QWORD *)(v133 + 16) = v4;
  *(_DWORD *)(v133 + 224) = *(_DWORD *)(v4 + 3248);
  *(_QWORD *)(v133 + 160) = *(_QWORD *)(v4 + 316);
  *(_DWORD *)(v133 + 176) = *(_DWORD *)(v4 + 352);
  *(_BYTE *)(v133 + 24) = *(_BYTE *)(v198 + 24);
  v134 = *(void **)(v198 + 104);
  *(_QWORD *)(v133 + 104) = v134;
  *(_BYTE *)(v133 + 26) = 1;
  v135 = *(_OWORD *)(v198 + 40);
  v136 = *(_OWORD *)(v198 + 56);
  v137 = *(_OWORD *)(v198 + 72);
  *(_QWORD *)(v133 + 88) = *(_QWORD *)(v198 + 88);
  *(_OWORD *)(v133 + 72) = v137;
  *(_OWORD *)(v133 + 56) = v136;
  *(_OWORD *)(v133 + 40) = v135;
  *(_OWORD *)v200 = 0u;
  *(_OWORD *)__p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  v138 = *(int8x8_t **)(v198 + 16);
  if (v138)
  {
    for (i = *(uint64_t ***)(v198 + 248); i; i = (uint64_t **)*i)
    {
      v140 = i[3];
      if (objc_msgSend(v140, "functionType", v186, v187, v188, v189, v190, v191, v192, v193, v194) == 6)
        v141 = objc_msgSend(v134, "requiresRaytracingEmulation");
      else
        v141 = 0;
      if (objc_msgSend(v140, "functionType") == 5)
        v142 = 1;
      else
        v142 = v141;
      if (v142 != 1)
        goto LABEL_63;
      v143 = (void *)objc_msgSend(v140, "name");
      if (VisibleFunctionsMap::getVisibleFunctionOffset(v138 + 410, (const char *)objc_msgSend(v143, "cStringUsingEncoding:", 4)) == -1)
      {
        if (*(_QWORD *)(v133 + 200) == *(_QWORD *)(v133 + 208))
        {
          v144 = -1;
        }
        else
        {
          objc_msgSend(v143, "cStringUsingEncoding:", 4);
          v144 = 0;
        }
        if (v144 == -1)
          goto LABEL_63;
      }
      else
      {
        v144 = *(_QWORD *)(v4 + 512) - *(_QWORD *)&v138[64];
        if (v144 == -1)
          goto LABEL_63;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXA10FamilyFunctionHandle *>((float *)v200, 0, 0, (uint64_t)-[AGXA10FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXA10FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", objc_msgSend(v140, "functionType"), v143, v134, v144, 0));
LABEL_63:

    }
  }
  *(_QWORD *)(v133 + 312) = operator new();
  v145 = (os_unfair_lock_s *)(v133 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)(v133 + 28));
  v146 = *(_QWORD *)(v198 + 296);
  if (v146)
  {
    if (v146 >> 61)
      abort();
    v147 = (char *)operator new(8 * v146);
    v148 = &v147[8 * v146];
  }
  else
  {
    v148 = 0;
    v147 = 0;
  }
  v149 = *(_QWORD **)(v198 + 288);
  if (v149)
  {
    v150 = v147;
    while (1)
    {
      v152 = v149[2];
      if (v150 >= v148)
        break;
      *(_QWORD *)v150 = v152;
      v151 = v150 + 8;
LABEL_86:
      v149 = (_QWORD *)*v149;
      v150 = v151;
      if (!v149)
      {
        v146 = *(_QWORD *)(v198 + 296);
        v145 = (os_unfair_lock_s *)(v133 + 28);
        goto LABEL_116;
      }
    }
    v153 = (v150 - v147) >> 3;
    v154 = v153 + 1;
    if ((unint64_t)(v153 + 1) >> 61)
      abort();
    if ((v148 - v147) >> 2 > v154)
      v154 = (v148 - v147) >> 2;
    if ((unint64_t)(v148 - v147) >= 0x7FFFFFFFFFFFFFF8)
      v155 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v155 = v154;
    if (v155)
    {
      if (v155 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v156 = operator new(8 * v155);
    }
    else
    {
      v156 = 0;
    }
    v157 = &v156[8 * v153];
    *(_QWORD *)v157 = v152;
    v151 = v157 + 8;
    if (v150 != v147)
    {
      v158 = v150 - 8 - v147;
      if (v158 >= 0x168)
      {
        if (&v156[v150 - v147 - 8 - (v158 & 0xFFFFFFFFFFFFFFF8)] > &v156[v150 - v147 - 8])
        {
          v159 = v150;
        }
        else if (&v150[-(v158 & 0xFFFFFFFFFFFFFFF8) - 8] > v150 - 8)
        {
          v159 = v150;
        }
        else if ((unint64_t)(v147 - v156) >= 0x20)
        {
          v161 = (v158 >> 3) + 1;
          v159 = &v150[-8 * (v161 & 0x3FFFFFFFFFFFFFFCLL)];
          v162 = &v156[8 * v153 - 16];
          v163 = v150 - 16;
          v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v165 = *(_OWORD *)v163;
            *(v162 - 1) = *((_OWORD *)v163 - 1);
            *v162 = v165;
            v162 -= 2;
            v163 -= 32;
            v164 -= 4;
          }
          while (v164);
          v157 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
          if (v161 == (v161 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_102;
        }
        else
        {
          v159 = v150;
        }
      }
      else
      {
        v159 = v150;
      }
      do
      {
        v160 = *((_QWORD *)v159 - 1);
        v159 -= 8;
        *((_QWORD *)v157 - 1) = v160;
        v157 -= 8;
      }
      while (v159 != v147);
    }
LABEL_102:
    v148 = &v156[8 * v155];
    if (v147)
      operator delete(v147);
    v147 = v157;
    goto LABEL_86;
  }
LABEL_116:
  if (v146)
  {
    for (j = *(uint64_t **)(v198 + 288); j; j = (uint64_t *)*j)
    {
      v202 = *((_OWORD *)j + 1);
      if (!*(_DWORD *)(*((_QWORD *)&v202 + 1) + 356))
      {
        v167 = v202;
        v168 = objc_msgSend(*((id *)&v202 + 1), "clone:clonedResourceIndex:clonedVisibleFunctionHeap:cloneHandleMap:", *(_QWORD *)(v133 + 104), (_QWORD)v202, *(_QWORD *)(v133 + 312), v200);
        std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v133 + 272, v167, &v202)[3] = v168;
      }
    }
  }
  os_unfair_lock_unlock(v145);
  if (v147)
    operator delete(v147);
  v169 = *(_QWORD **)__p;
  if (*(_QWORD *)__p)
  {
    do
    {
      v170 = (_QWORD *)*v169;
      operator delete(v169);
      v169 = v170;
    }
    while (v170);
  }
  v171 = v200[0];
  v200[0] = 0;
  if (v171)
    operator delete(v171);
  if (((*(_QWORD *)(*(_QWORD *)(v133 + 16) + 1264) | *(_QWORD *)(*(_QWORD *)(v133 + 16) + 1288) | *(_QWORD *)(*(_QWORD *)(v133 + 16) + 1312) | *(_QWORD *)(*(_QWORD *)(v133 + 16) + 1344) | *(_QWORD *)(*(_QWORD *)(v133 + 16) + 1368)) & 0x500000000000000) != 0)
    *(_BYTE *)(v133 + 25) = 1;
  v173 = *(_QWORD *)(v198 + 392);
  v172 = *(_QWORD *)(v198 + 400);
  if (v172)
  {
    v174 = (unint64_t *)(v172 + 8);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 1, v174));
  }
  v176 = *(std::__shared_weak_count **)(v133 + 400);
  *(_QWORD *)(v133 + 392) = v173;
  *(_QWORD *)(v133 + 400) = v172;
  if (v176)
  {
    p_shared_owners = (unint64_t *)&v176->__shared_owners_;
    do
      v178 = __ldaxr(p_shared_owners);
    while (__stlxr(v178 - 1, p_shared_owners));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v199[0] = MEMORY[0x24BDAC760];
  v199[1] = 3221225472;
  v199[2] = ___ZN3AGX21SampledComputeContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE24duplicateShaderAddressesEv_block_invoke;
  v199[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
  v199[4] = v133;
  result = objc_msgSend(v196, "addCompletedHandler:", v199, v186, v187);
  v180 = *(_QWORD *)(v195 + 48);
  *(_QWORD *)(v180 + 1776) = v133;
  v181 = *(_QWORD *)(v133 + 16);
  *(_BYTE *)(v180 + 1745) = *(_BYTE *)(v181 + 216);
  *(_BYTE *)(v180 + 1746) = *(_BYTE *)(v181 + 1992);
  v182 = *(_QWORD *)(v195 + 24) + 24 * *(unsigned int *)(v195 + 36);
  v183 = *(unsigned __int8 *)(v197 + 6376);
  *(_BYTE *)v182 = 3;
  v184 = *(_DWORD *)(*(_QWORD *)(v195 + 48) + 1508);
  if (v183)
  {
    *(_DWORD *)(v182 + 4) = v184;
    *(_DWORD *)v182 = (*(_DWORD *)(v195 + 40) << 8) | 3;
  }
  else
  {
    *(_DWORD *)v182 = (v184 << 8) | 3;
    *(_DWORD *)(v182 + 4) = *(_DWORD *)(v195 + 40);
  }
  *(_QWORD *)(v182 + 8) = *(_QWORD *)(v181 + 512);
  *(_QWORD *)(v182 + 16) = *(_QWORD *)(v181 + 736) + *(_QWORD *)(v181 + 512);
  v185 = *(_DWORD *)(v195 + 40) + 1;
  *(_DWORD *)(v195 + 36) = (*(_DWORD *)(v195 + 36) + 1) % *(_DWORD *)(v195 + 32);
  *(_DWORD *)(v195 + 40) = v185;
  return result;
}

void sub_232D15774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, _QWORD **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *__p)
{
  uint64_t v29;
  void **v30;
  void **v31;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  if (*(char *)(v29 + 503) < 0)
  {
    operator delete(*v30);
    if ((*(char *)(v29 + 479) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v29 + 455) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(v29 + 479) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*a9);
  if ((*(char *)(v29 + 455) & 0x80000000) == 0)
  {
LABEL_5:
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a11);
    v33 = *(void **)(v29 + 264);
    if (v33)
    {
      *(_QWORD *)(v29 + 272) = v33;
      operator delete(v33);
    }
    v34 = *v31;
    if (*v31)
    {
      *(_QWORD *)(v29 + 248) = v34;
      operator delete(v34);
    }
    v35 = *a12;
    if (*a12)
    {
      *(_QWORD *)(v29 + 200) = v35;
      operator delete(v35);
    }
    v36 = *a13;
    if (*a13)
    {
      *(_QWORD *)(v29 + 176) = v36;
      operator delete(v36);
    }
    v37 = *a14;
    if (*a14)
    {
      *(_QWORD *)(v29 + 152) = v37;
      operator delete(v37);
    }
    v38 = *a15;
    if (*a15)
    {
      *(_QWORD *)(v29 + 128) = v38;
      operator delete(v38);
    }
    v39 = *a16;
    if (*a16)
    {
      *(_QWORD *)(v29 + 104) = v39;
      operator delete(v39);
    }
    v40 = *a17;
    if (*a17)
    {
      *(_QWORD *)(v29 + 80) = v40;
      operator delete(v40);
    }
    MEMORY[0x234927ECC](v29, 0x10F3C40D6CD94FCLL);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*a10);
  goto LABEL_5;
}

void sub_232D15A70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_unfair_lock_t lock)
{
  void *v17;

  os_unfair_lock_unlock(lock);
  if (v17)
    operator delete(v17);
  JUMPOUT(0x232D15AB4);
}

void sub_232D15AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,_QWORD *__p)
{
  void *v29;
  _QWORD *v31;
  _QWORD *v32;

  v31 = __p;
  if (__p)
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  if (!a27)
    _Unwind_Resume(a1);
  operator delete(a27);
  _Unwind_Resume(a1);
}

void sub_232D15C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields::SamplerStateFields(unint64_t *result, float *a2)
{
  float v2;
  float v3;
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  unint64_t v33;

  v3 = a2[2];
  v2 = a2[3];
  v4 = *((unsigned int *)a2 + 1);
  v5 = *(_WORD *)a2;
  v6 = v4 & 0x4000;
  v7 = 0;
  switch(v4 >> 5)
  {
    case 0:
      break;
    case 2:
      v7 = v6 >> 14;
      break;
    case 3:
      v7 = v6 >> 13;
      break;
    case 4:
      v7 = 3;
      break;
    default:
      v7 = -1;
      break;
  }
  v8 = 0;
  switch((v4 >> 8) & 7)
  {
    case 0uLL:
      break;
    case 2uLL:
      v8 = v6 >> 14;
      break;
    case 3uLL:
      v8 = v6 >> 13;
      break;
    case 4uLL:
      v8 = 3;
      break;
    default:
      v8 = 0xFFFFFFFFLL;
      break;
  }
  v9 = 0;
  switch((v4 >> 11) & 7)
  {
    case 0uLL:
      break;
    case 2uLL:
      v9 = v6 >> 14;
      break;
    case 3uLL:
      v9 = v6 >> 13;
      break;
    case 4uLL:
      v9 = 3;
      break;
    default:
      v9 = 0xFFFFFFFFLL;
      break;
  }
  v10 = v5 & 0xF;
  if (v3 > v2)
  {
    v3 = a2[3];
    if ((v4 & 0x4000) != 0)
    {
LABEL_18:
      v11 = 0x2000000 - (__clz(~(-1 << -(char)__clz(((_DWORD)a2[1] & 0x1F) - 1))) << 20);
      if (((_DWORD)a2[1] & 0x1Fu) >= 2)
        v12 = v11;
      else
        v12 = 0;
      if (v10 <= 9)
        goto LABEL_22;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    goto LABEL_18;
  }
  v12 = 0;
  if (v10 <= 9)
  {
LABEL_22:
    v13 = qword_232D77DE8[v10] | qword_232D77E38[v10];
    goto LABEL_26;
  }
LABEL_25:
  v13 = 0x40000000000;
LABEL_26:
  v14 = WORD1(v4) & 3;
  v15 = v14 == 2;
  v16 = 0x10000000;
  if ((v5 & 0x40) == 0)
    v16 = 0x8000000;
  v17 = (v5 & 0x20) == 0 || (_DWORD)v6 == 0;
  v18 = ((unint64_t)((unsigned __int16)v4 & 0x8000) << 42) | (v6 << 24);
  v19 = (v4 >> 18) & 3;
  if (v17)
    v20 = 0;
  else
    v20 = v16;
  v21 = v14 != 1;
  v22 = v19 == 2;
  if (v19 == 2)
    v15 = 1;
  v23 = v19 << 23;
  if (v22)
    v21 = 1;
  v17 = !v21;
  v24 = 0x2000000;
  if (!v17)
    v24 = 0;
  if (v15)
    v23 = 0x1000000;
  v25 = v18 | v20 | v23;
  v26 = 0x4000000;
  if (!v15)
    v26 = v24;
  v27 = (v25 | v26) ^ 0x4000000000 | ((unint64_t)v7 << 29) | (v8 << 32) | (v9 << 35) | v12;
  v28 = v3 * 64.0;
  if (v28 <= 896.0)
    v29 = v28;
  else
    v29 = 896.0;
  v30 = v29;
  if (v28 < 0.0)
    v30 = 0;
  v31 = v2 * 64.0;
  if (v31 <= 896.0)
    v32 = v31;
  else
    v32 = 896.0;
  v33 = (unint64_t)v32 << 10;
  if (v31 < 0.0)
    v33 = 0;
  *result = v13 | v27 | v30 | v33;
  return result;
}

BOOL AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  AGXBuffer *v21;
  AGXBuffer *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  _BYTE v33[20];
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v4 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v7 = *(uint64_t **)(a1 + 16);
    v8 = *(_DWORD *)a1;
    os_unfair_lock_lock((os_unfair_lock_t)v7 + 18);
    if (*((_DWORD *)v7 + 16) < v8)
    {
      if (v8 <= 4)
        v12 = 4;
      else
        v12 = v8;
      v13 = -__clz(v12 - 1);
      v14 = 1 << v13;
      v15 = *((_DWORD *)v7 + 20);
      v16 = *((_DWORD *)v7 + 19) << v13;
      v17 = 32 - __clz(((1 << v13) >> 2) - 1);
      if (v12 >= 5)
        v18 = v17;
      else
        v18 = 0;
      *((_DWORD *)v7 + 14) = v16;
      *((_DWORD *)v7 + 15) = v18;
      *((_DWORD *)v7 + 16) = v14;

      v19 = *v7;
      v20 = (v15 * v16);
      v36 = 0;
      v37 = 0;
      *(_QWORD *)&v32 = 0;
      *((_QWORD *)&v32 + 1) = 0x100010001;
      *(_DWORD *)v33 = 16777473;
      *(_OWORD *)&v33[4] = 0u;
      v34 = 0u;
      v35 = 0;
      v38 = v20;
      v39 = xmmword_232D73D80;
      v40 = 0;
      LODWORD(v31) = 104;
      v21 = -[IOGPUMetalBuffer initWithDevice:pointer:length:options:sysMemSize:vidMemSize:args:argsSize:deallocator:]([AGXBuffer alloc], "initWithDevice:pointer:length:options:sysMemSize:vidMemSize:args:argsSize:deallocator:", v19, 0, v20, 0, v20, 0, &v32, v31, 0);
      v22 = v21;
      v23 = (int *)MEMORY[0x24BE51650];
      if (v21)
      {
        v24 = (int)*MEMORY[0x24BE51650];
        v25 = -[IOGPUMetalResource gpuAddress](v21, "gpuAddress");
        v26 = -[IOGPUMetalResource virtualAddress](v22, "virtualAddress");
        v27 = (Class *)((char *)&v22->super.super.super.super.super.super.isa + v24);
        v28 = *(_QWORD *)((_BYTE *)&v22->super.super.super.super.super._labelLock._os_unfair_lock_opaque + v24) & 0x1F00000000000000 | v20 | 0x2000000000000000;
        v27[1] = v25;
        v27[2] = v28;
        v27[3] = v26;
        v23 = (int *)MEMORY[0x24BE51650];
      }
      v7[1] = (uint64_t)v22;
      v29 = (char *)v22 + *v23;
      v9 = *((_QWORD *)v29 + 9);
      v7[6] = v9;
      v30 = *((_OWORD *)v29 + 2);
      v7[5] = *((_QWORD *)v29 + 6);
      *(_OWORD *)(v7 + 3) = v30;
    }
    else
    {
      v9 = v7[6];
    }
    v32 = *(_OWORD *)(v7 + 3);
    *(_QWORD *)v33 = v7[5];
    v10 = v7[7];
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)v7 + 18);
    *(_OWORD *)a4 = v32;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)v33;
    *a2 = v9;
    a2[3] = v10;
  }
  return v4 != 0;
}

void sub_232D16174(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

int8x16_t AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t GPUVirtualAddress;
  int v15;
  int8x8_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t result;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int8x16_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;

  v2 = *(_QWORD *)(a1 + 208);
  v3 = *(_DWORD *)(v2 + 24) >= 2u && *(_DWORD *)(v2 + 80) == 0;
  v73 = *(_QWORD *)(a1 + 380);
  v69 = *(unsigned int *)(a1 + 388);
  v65 = *(_QWORD *)(v2 + 8);
  v67 = *(_QWORD *)v2;
  v63 = *(_DWORD *)(a1 + 192);
  v71 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 128);
  v74 = a1 + 380;
  if (v4 == 9)
  {
    v61 = (v5 + 0x3FFF) >> 14;
    v6 = 1;
  }
  else
  {
    v61 = *(_DWORD *)(a1 + 132);
    v6 = *(_DWORD *)(a1 + 136);
  }
  v7 = *(_DWORD *)(a1 + 196);
  v8 = *(_DWORD *)(v2 + 64);
  v57 = *(_DWORD *)(a1 + 140);
  v59 = v6;
  v55 = *(_DWORD *)(a1 + 112);
  v9 = *(_DWORD *)(a1 + 376);
  v10 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, 0);
  v11 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, 0);
  if (v3)
  {
    v12 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, 1u);
    v13 = *(_QWORD *)(a1 + 72);
    GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a1, 0, 0, 0, 1u);
  }
  else
  {
    v12 = 0;
    GPUVirtualAddress = 0;
    v13 = *(_QWORD *)(a1 + 72);
  }
  if (v5 >= 0x4000)
    v15 = 0x4000;
  else
    v15 = v5;
  if (v4 != 9)
    v15 = v5;
  v16 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vshl_s32(vdup_n_s32(v8 | 8u), vneg_s32(vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v7), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (int32x2_t)0x300000003))), (uint32x2_t)0xC00000009), (int8x8_t)0x700000000E00);
  v17 = ((((v8 | 8) >> (3 * v7)) & 7) << 6) & 0xFFFC7FFF | ((((v8 | 8) >> (3 * HIBYTE(v7))) & 7) << 15) | v16.i32[0] | v16.i32[1];
  v18 = *(_DWORD *)(a1 + 308);
  v19 = *(_DWORD *)(a1 + 312);
  v20 = *(_QWORD *)(a1 + 208);
  AGX::ImageStateEncoderGen2<kAGXRevG9>::ImageStateFields::ImageStateFields((unint64_t *)&v75, v73, v69, v67, v65, v63, v17, v71, v15, v61, v59, v57, v55, v9, v10, v11, v12, v13, GPUVirtualAddress,
    v18,
    v19,
    *(_DWORD *)(v20 + 72));
  *(_OWORD *)(a1 + 400) = v75;
  *(_QWORD *)(a1 + 416) = v76;
  v21 = *(unsigned int *)(a1 + 144);
  v22.i64[0] = v21 << 57;
  v22.i64[1] = (v21 + *(_DWORD *)(a1 + 108) - 1);
  result = vorrq_s8(vandq_s8(*(int8x16_t *)(a1 + 400), (int8x16_t)xmmword_232D73D90), v22);
  *(int8x16_t *)(a1 + 400) = result;
  if ((*(_QWORD *)v74 & 0x20000) == 0)
  {
    v24 = *(_DWORD *)(v20 + 68);
    v25 = *(_DWORD *)(v20 + 24) >= 2u && *(_DWORD *)(v20 + 80) == 0;
    v26 = (0x58D1000u >> (3 * BYTE1(*(_DWORD *)(a1 + 196)))) & 0xE00;
    v27 = (0x2C688000u >> (3 * HIWORD(*(_DWORD *)(a1 + 196)))) & 0x7000;
    v28 = (0x2C688u >> (3 * HIBYTE(*(_DWORD *)(a1 + 196)))) & 7;
    v29 = (v24 >> 6) & 7;
    v30 = (0x2C688u >> (3 * *(_DWORD *)(a1 + 196))) & 7;
    if (v30 == v29)
    {
      v31 = 128;
    }
    else if (v29 == v26 >> 9)
    {
      v31 = 192;
    }
    else if (v29 == v27 >> 12)
    {
      v31 = 256;
    }
    else if (v28 == v29)
    {
      v31 = 320;
    }
    else
    {
      v31 = v29 << 6;
    }
    v32 = (v24 >> 9) & 7;
    if (v30 == v32)
    {
      v33 = 1024;
    }
    else if (v32 == v26 >> 9)
    {
      v33 = 1536;
    }
    else if (v32 == v27 >> 12)
    {
      v33 = 2048;
    }
    else if (v28 == v32)
    {
      v33 = 2560;
    }
    else
    {
      v33 = v32 << 9;
    }
    v34 = (v24 >> 12) & 7;
    if (v30 == v34)
    {
      v35 = 0x2000;
    }
    else if (v34 == v26 >> 9)
    {
      v35 = 12288;
    }
    else if (v34 == v27 >> 12)
    {
      v35 = 0x4000;
    }
    else if (v28 == v34)
    {
      v35 = 20480;
    }
    else
    {
      v35 = v34 << 12;
    }
    v36 = (v24 >> 15) & 7;
    if (v30 == v36)
    {
      v37 = 0x10000;
    }
    else if (v36 == v26 >> 9)
    {
      v37 = 98304;
    }
    else if (v36 == v27 >> 12)
    {
      v37 = 0x20000;
    }
    else if (v28 == v36)
    {
      v37 = 163840;
    }
    else
    {
      v37 = v36 << 15;
    }
    v72 = *(_QWORD *)v74;
    v70 = *(_QWORD *)v20;
    v68 = *(_QWORD *)(v20 + 8);
    v66 = *(_DWORD *)(a1 + 192);
    v62 = v37 | v35 | v33 | v31;
    v64 = *(unsigned int *)(a1 + 388);
    v58 = *(_DWORD *)(v20 + 72);
    v60 = *(_DWORD *)(v20 + 84);
    v56 = *(_QWORD *)(a1 + 72);
    v54 = v19;
    if (v25)
    {
      v38 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a1, 0, 0, 0, 1u);
      v39 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, 0);
      v40 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, 1u);
    }
    else
    {
      v39 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, 0);
      v38 = 0;
      v40 = 0;
    }
    v41 = v18;
    v42 = *(_QWORD *)(a1 + 24);
    v43 = *(_DWORD *)(a1 + 128);
    if (v43 >= 0x4000)
      v44 = 0x4000;
    else
      v44 = *(_DWORD *)(a1 + 128);
    if (v42 == 9)
      v45 = v44;
    else
      v45 = *(_DWORD *)(a1 + 128);
    if (v42 == 9)
    {
      v47 = (v43 + 0x3FFF) >> 14;
      v48 = *(_DWORD *)(a1 + 140);
      v49 = *(_DWORD *)(a1 + 376);
      v50 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, 0);
      v46 = 1;
      v51 = v47;
    }
    else
    {
      v47 = *(_DWORD *)(a1 + 132);
      v46 = *(_DWORD *)(a1 + 136);
      v48 = *(_DWORD *)(a1 + 140);
      v49 = *(_DWORD *)(a1 + 376);
      v50 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, 0);
      v51 = *(_DWORD *)(a1 + 132);
    }
    AGX::PBEStateEncoderGen3<kAGXRevG9>::StateFields::StateFields((unint64_t *)&v75, 1, v70, v68, v66, v62, v72, v64, v60, v41, v54, v58, v56, v38, v39, v40, v45, v47, v46,
      v48,
      v49,
      v50,
      0,
      0,
      v45,
      v51,
      0,
      0,
      0);
    *(_OWORD *)(v74 + 44) = v75;
    *(_QWORD *)(v74 + 60) = v76;
    v52 = *(unsigned int *)(a1 + 144);
    v53.i64[0] = v52 << 57;
    v53.i64[1] = (v52 + *(_DWORD *)(a1 + 108) - 1);
    result = vorrq_s8(vandq_s8(*(int8x16_t *)(v74 + 44), (int8x16_t)xmmword_232D73D90), v53);
    *(int8x16_t *)(v74 + 44) = result;
  }
  return result;
}

int64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  __IOSurface *v10;
  int v11;
  BOOL v12;
  size_t v13;
  _BYTE *BaseAddressOfPlane;
  uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
  unsigned int v16;
  uint64_t v17;
  int64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v10 = *(__IOSurface **)(a1 + 168);
  if (!v10 || ((v11 = *(unsigned __int8 *)(a1 + 380), v11 != 3) ? (v12 = v11 == 0) : (v12 = 1), !v12))
  {
    v16 = *(_DWORD *)(a1 + 368);
    v17 = a2 / v16;
    if (a5)
      v18 = *(_QWORD *)(a1 + 8 * (a5 - 1) + 336);
    else
      v18 = 0;
    v19 = v17 * v16;
    if (v16 <= a2 && (*(_QWORD *)(a1 + 380) & 0x10000) != 0)
    {
      v20 = *(unsigned int *)(a1 + 236);
      v21 = *(_QWORD *)(a1 + 380) & 0xFF00;
      v22 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a5);
      if ((_DWORD)v20)
      {
        if (v21 == 1024)
          v23 = (6 * v17)
              * ((((_DWORD)v20 << 8) + ((v22 + v20 - 1) & -(uint64_t)v20) - 1) & -(uint64_t)((_DWORD)v20 << 8));
        else
          v23 = v17
              * ((((_DWORD)v20 << 8) + ((v22 + v20 - 1) & -(uint64_t)v20) - 1) & -(uint64_t)((_DWORD)v20 << 8));
        v29 = (8 * v23 / v20);
      }
      else
      {
        v28 = 6 * v22;
        if (v21 != 1024)
          v28 = v22;
        v29 = v28 * v17;
      }
      v18 += v29;
      if (a2 == v19)
        goto LABEL_36;
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 380) & 0xFF00;
      if (a2 == v19)
        goto LABEL_36;
    }
    if (v21 == 1024)
    {
      v30 = a2 - v19;
      v31 = *(unsigned int *)(a1 + 236);
      v32 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a5);
      v33 = (v32 + v31 - 1) & -v31;
      if (!(_DWORD)v31)
        v33 = v32;
      v34 = v33 * v30;
      v35 = (8
                         * v30
                         * ((((_DWORD)v31 << 8) + v33 - 1) & (unint64_t)-(uint64_t)((_DWORD)v31 << 8))
                         / v31);
      if (!(_DWORD)v31)
        v35 = v34;
      goto LABEL_41;
    }
LABEL_36:
    if (!a4 || v21 != 768)
    {
LABEL_42:
      if (a3)
        v18 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a3, a5);
      return *(_QWORD *)(a1 + 72) + v18;
    }
    v36 = *(unsigned int *)(a1 + 236);
    if ((_DWORD)v36)
      v35 = (8
                         * a4
                         * ((AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a5)+ ((_DWORD)v36 << 8)- 1) & (unint64_t)-(uint64_t)((_DWORD)v36 << 8))/ v36);
    else
      v35 = (*(_QWORD *)(a1 + 328)
           + AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a5))* a4;
LABEL_41:
    v18 += v35;
    goto LABEL_42;
  }
  v13 = *(_DWORD *)(a1 + 176) + a5;
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v10, 0);
  if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0)
    BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
  else
    BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v13);
  v24 = BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
  v25 = *(unsigned int *)(a1 + 176);
  v26 = IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), 0);
  if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0)
    v27 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
  else
    v27 = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v25);
  v18 = &v26[v24] - &BaseAddressOfPlane[v27];
  return *(_QWORD *)(a1 + 72) + v18;
}

void *AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getDownsampleFunc(uint64_t a1)
{
  uint64_t v1;
  void *result;

  v1 = a1 - 1;
  result = agxsDownsample<AGXSDownsamplerGeneric<unsigned char,4u>>;
  switch(v1)
  {
    case 0:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      result = agxsDownsample<AGXSDownsamplerGeneric<unsigned char,1u>>;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      result = agxsDownsample<AGXSDownsamplerGeneric<unsigned char,2u>>;
      break;
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 79:
    case 80:
    case 83:
    case 84:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

int64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  __IOSurface *v8;
  int v9;
  BOOL v10;
  size_t v11;
  _BYTE *BaseAddressOfPlane;
  uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = *(__IOSurface **)(a1 + 168);
  if (!v8 || ((v9 = *(unsigned __int8 *)(a1 + 380), v9 != 3) ? (v10 = v9 == 0) : (v10 = 1), !v10))
  {
    v14 = *(_DWORD *)(a1 + 368);
    v15 = a2 / v14;
    if (a4)
      v16 = *(_QWORD *)(a1 + 8 * (a4 - 1) + 344);
    else
      v16 = 0;
    v17 = v15 * v14;
    if (v14 <= a2 && (*(_QWORD *)(a1 + 380) & 0x10000) != 0)
    {
      v18 = *(unsigned int *)(a1 + 236);
      v19 = *(_QWORD *)(a1 + 380) & 0xFF00;
      if ((_DWORD)v18)
      {
        if (v19 == 1024)
          v20 = (6 * v15)
              * ((((_DWORD)v18 << 8)
                + ((AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a4)+ v18- 1) & -(uint64_t)v18)- 1) & -(uint64_t)((_DWORD)v18 << 8));
        else
          v20 = v15
              * ((((_DWORD)v18 << 8)
                + ((AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a4)+ v18- 1) & -(uint64_t)v18)- 1) & -(uint64_t)((_DWORD)v18 << 8));
        v27 = (8 * v20 / v18);
      }
      else
      {
        v25 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a4);
        v26 = 6 * v25;
        if (v19 != 1024)
          v26 = v25;
        v27 = v26 * v15;
      }
      v16 += v27;
      if (a2 == v17)
        goto LABEL_36;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 380) & 0xFF00;
      if (a2 == v17)
      {
LABEL_36:
        if ((_DWORD)a3)
          v16 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a3, a4);
        return *(_QWORD *)(a1 + 296) + v16;
      }
    }
    if (v19 == 1024)
    {
      v28 = a2 - v17;
      v29 = *(unsigned int *)(a1 + 236);
      v30 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a4);
      v31 = (v30 + v29 - 1) & -v29;
      if (!(_DWORD)v29)
        v31 = v30;
      v32 = v31 * v28;
      v33 = (8
                         * v28
                         * ((((_DWORD)v29 << 8) + v31 - 1) & (unint64_t)-(uint64_t)((_DWORD)v29 << 8))
                         / v29);
      if (!(_DWORD)v29)
        v33 = v32;
      v16 += v33;
    }
    goto LABEL_36;
  }
  v11 = *(_DWORD *)(a1 + 176) + a4;
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v8, 0);
  if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0)
    BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
  else
    BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v11);
  v21 = BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
  v22 = *(unsigned int *)(a1 + 176);
  v23 = IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), 0);
  if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0)
    v24 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
  else
    v24 = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v22);
  v16 = &v23[v21] - &BaseAddressOfPlane[v24];
  return *(_QWORD *)(a1 + 296) + v16;
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(uint64_t a1, char a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v5;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v20;
  unsigned int v21;
  unsigned int v22;

  v2 = *(_DWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 32) - 250;
  if (v3 > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
  {
    v5 = *(_DWORD *)(a1 + 128);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 < 0x20 || *(_DWORD *)(a1 + 132) <= 0x1Fu) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v2 <= 1)
    {
      v9 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
      v10 = (v5 + ~v9) & v9;
      goto LABEL_18;
    }
  }
  v10 = v5;
LABEL_18:
  if (v10 <= 1)
    v10 = 1;
  if (v3 <= 0xB && ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) != 0)
  {
    v11 = *(_DWORD *)(a1 + 132);
    if ((v5 < 0x20 || v11 <= 0x1F) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v2 <= 1)
    {
      v12 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
      v11 = (v11 + ~v12) & v12;
    }
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 132);
  }
  if (*(_BYTE *)(a1 + 380) != 2)
    return 0;
  v13 = 0;
  v14 = *(_DWORD *)(a1 + 220);
  v15 = (*(_DWORD *)(a1 + 216) + v10 - 1) / *(_DWORD *)(a1 + 216);
  v16 = *(_QWORD *)(a1 + 208);
  if (v11 <= 1)
    v11 = 1;
  v17 = v11 + v14 - 1;
  v18 = 0;
  switch(*(unsigned __int8 *)(v16 + 88) * (unint64_t)*(unsigned int *)(a1 + 112))
  {
    case 1uLL:
      v13 = 128;
      v18 = 128;
      break;
    case 2uLL:
      v18 = 128;
      v13 = 64;
      break;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
      break;
    case 4uLL:
      v13 = 64;
      v18 = 64;
      break;
    case 8uLL:
      v18 = 64;
      v13 = 32;
      break;
    case 0x10uLL:
      v13 = 32;
      v18 = 32;
      break;
    case 0x20uLL:
      v18 = 32;
      v13 = 16;
      break;
    default:
      v18 = 0;
      break;
  }
  if (*(_DWORD *)(v16 + 56))
    v20 = ~(-1 << a2);
  else
    v20 = 0;
  v21 = (v20 + v17 / v14) >> a2;
  if (v21 <= 1)
    v21 = 1;
  v22 = (v20 + v15) >> a2;
  if (v22 <= 1)
    v22 = 1;
  return v22 >= v13 && v21 >= v18;
}

uint8x16_t *agxsDownsample<AGXSDownsamplerGeneric<unsigned char,1u>>(uint8x16_t *result, const char *a2, int a3, int a4, int a5, uint8x8_t a6)
{
  uint64_t v6;
  uint8x16_t *v7;
  unint64_t i;
  const char *v9;
  __int32 v10;
  int8x16x4_t v11;
  int8x16x4_t v12;
  int8x16x4_t v13;
  int8x16x4_t v14;

  if (result && a2)
  {
    v6 = (a4 * a3);
    v7 = (uint8x16_t *)((char *)result + v6);
    if (a5)
    {
      if (v7 > result)
      {
        do
        {
          result->i8[0] = (*((unsigned __int8 *)a2 + 1) + *(unsigned __int8 *)a2) >> 1;
          result = (uint8x16_t *)((char *)result + 1);
          a2 += 2;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      for (i = (unint64_t)v7 - (((_BYTE)a4 * (_BYTE)a3) & 0x3F); (unint64_t)result < i; result += 4)
      {
        v11 = vld4q_s8(a2);
        v9 = a2 + 64;
        v12 = vld4q_s8(v9);
        v9 += 64;
        v13 = vld4q_s8(v9);
        v9 += 64;
        v14 = vld4q_s8(v9);
        a2 = v9 + 64;
        *result = vhaddq_u8(vhaddq_u8((uint8x16_t)v11.val[0], (uint8x16_t)v11.val[1]), vhaddq_u8((uint8x16_t)v11.val[2], (uint8x16_t)v11.val[3]));
        result[1] = vhaddq_u8(vhaddq_u8((uint8x16_t)v12.val[0], (uint8x16_t)v12.val[1]), vhaddq_u8((uint8x16_t)v12.val[2], (uint8x16_t)v12.val[3]));
        result[2] = vhaddq_u8(vhaddq_u8((uint8x16_t)v13.val[0], (uint8x16_t)v13.val[1]), vhaddq_u8((uint8x16_t)v13.val[2], (uint8x16_t)v13.val[3]));
        result[3] = vhaddq_u8(vhaddq_u8((uint8x16_t)v14.val[0], (uint8x16_t)v14.val[1]), vhaddq_u8((uint8x16_t)v14.val[2], (uint8x16_t)v14.val[3]));
      }
      if (result < v7)
      {
        do
        {
          v10 = *(_DWORD *)a2;
          a2 += 4;
          a6.i32[0] = v10;
          a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
          a6.i16[0] = vaddv_s16((int16x4_t)a6);
          result->i8[0] = (unsigned __int32)a6.i32[0] >> 2;
          result = (uint8x16_t *)((char *)result + 1);
        }
        while (v7 != result);
      }
    }
  }
  return result;
}

uint8x16_t *agxsDownsample<AGXSDownsamplerGeneric<unsigned char,2u>>(uint8x16_t *result, const __int16 *a2, int a3, int a4, int a5)
{
  uint8x16_t *v5;
  unint64_t i;
  const __int16 *v7;
  int16x8x4_t v8;
  int16x8x4_t v9;
  int16x8x4_t v10;
  int16x8x4_t v11;

  if (result && a2)
  {
    v5 = (uint8x16_t *)((char *)result + 2 * (a4 * a3));
    if (a5)
    {
      for (; result < v5; a2 += 2)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 2) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 3) + *((unsigned __int8 *)a2 + 1)) >> 1;
        result = (uint8x16_t *)((char *)result + 2);
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 2) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 3) + *((unsigned __int8 *)a2 + 1)) >> 1;
        result = (uint8x16_t *)((char *)result + 2);
        a2 += 2;
      }
    }
    else
    {
      for (i = (unint64_t)v5 - 2 * (((_BYTE)a4 * (_BYTE)a3) & 0x1Fu); (unint64_t)result < i; result += 4)
      {
        v8 = vld4q_s16(a2);
        v7 = a2 + 32;
        v9 = vld4q_s16(v7);
        v7 += 32;
        v10 = vld4q_s16(v7);
        v7 += 32;
        v11 = vld4q_s16(v7);
        a2 = v7 + 32;
        *result = vhaddq_u8(vhaddq_u8((uint8x16_t)v8.val[0], (uint8x16_t)v8.val[1]), vhaddq_u8((uint8x16_t)v8.val[2], (uint8x16_t)v8.val[3]));
        result[1] = vhaddq_u8(vhaddq_u8((uint8x16_t)v9.val[0], (uint8x16_t)v9.val[1]), vhaddq_u8((uint8x16_t)v9.val[2], (uint8x16_t)v9.val[3]));
        result[2] = vhaddq_u8(vhaddq_u8((uint8x16_t)v10.val[0], (uint8x16_t)v10.val[1]), vhaddq_u8((uint8x16_t)v10.val[2], (uint8x16_t)v10.val[3]));
        result[3] = vhaddq_u8(vhaddq_u8((uint8x16_t)v11.val[0], (uint8x16_t)v11.val[1]), vhaddq_u8((uint8x16_t)v11.val[2], (uint8x16_t)v11.val[3]));
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 2)
                       + *(unsigned __int8 *)a2
                       + *((unsigned __int8 *)a2 + 4)
                       + *((unsigned __int8 *)a2 + 6)) >> 2;
        result->i8[1] = (*((unsigned __int8 *)a2 + 3)
                       + *((unsigned __int8 *)a2 + 1)
                       + *((unsigned __int8 *)a2 + 5)
                       + *((unsigned __int8 *)a2 + 7)) >> 2;
        result = (uint8x16_t *)((char *)result + 2);
        a2 += 4;
      }
    }
  }
  return result;
}

uint8x16_t *agxsDownsample<AGXSDownsamplerGeneric<unsigned char,4u>>(uint8x16_t *result, const float *a2, int a3, int a4, int a5)
{
  uint8x16_t *v5;
  unint64_t i;
  const float *v7;
  float32x4x4_t v8;
  float32x4x4_t v9;
  float32x4x4_t v10;
  float32x4x4_t v11;

  if (result && a2)
  {
    v5 = (uint8x16_t *)((char *)result + 4 * (a4 * a3));
    if (a5)
    {
      for (; result < v5; a2 += 2)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 4) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 5) + *((unsigned __int8 *)a2 + 1)) >> 1;
        result->i8[2] = (*((unsigned __int8 *)a2 + 6) + *((unsigned __int8 *)a2 + 2)) >> 1;
        result->i8[3] = (*((unsigned __int8 *)a2 + 7) + *((unsigned __int8 *)a2 + 3)) >> 1;
        result = (uint8x16_t *)((char *)result + 4);
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 4) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 5) + *((unsigned __int8 *)a2 + 1)) >> 1;
        result->i8[2] = (*((unsigned __int8 *)a2 + 6) + *((unsigned __int8 *)a2 + 2)) >> 1;
        result->i8[3] = (*((unsigned __int8 *)a2 + 7) + *((unsigned __int8 *)a2 + 3)) >> 1;
        result = (uint8x16_t *)((char *)result + 4);
        a2 += 2;
      }
    }
    else
    {
      for (i = (unint64_t)v5 - 4 * (((_BYTE)a4 * (_BYTE)a3) & 0xFu); (unint64_t)result < i; result += 4)
      {
        v8 = vld4q_f32(a2);
        v7 = a2 + 16;
        v9 = vld4q_f32(v7);
        v7 += 16;
        v10 = vld4q_f32(v7);
        v7 += 16;
        v11 = vld4q_f32(v7);
        a2 = v7 + 16;
        *result = vhaddq_u8(vhaddq_u8((uint8x16_t)v8.val[0], (uint8x16_t)v8.val[1]), vhaddq_u8((uint8x16_t)v8.val[2], (uint8x16_t)v8.val[3]));
        result[1] = vhaddq_u8(vhaddq_u8((uint8x16_t)v9.val[0], (uint8x16_t)v9.val[1]), vhaddq_u8((uint8x16_t)v9.val[2], (uint8x16_t)v9.val[3]));
        result[2] = vhaddq_u8(vhaddq_u8((uint8x16_t)v10.val[0], (uint8x16_t)v10.val[1]), vhaddq_u8((uint8x16_t)v10.val[2], (uint8x16_t)v10.val[3]));
        result[3] = vhaddq_u8(vhaddq_u8((uint8x16_t)v11.val[0], (uint8x16_t)v11.val[1]), vhaddq_u8((uint8x16_t)v11.val[2], (uint8x16_t)v11.val[3]));
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 4)
                       + *(unsigned __int8 *)a2
                       + *((unsigned __int8 *)a2 + 8)
                       + *((unsigned __int8 *)a2 + 12)) >> 2;
        result->i8[1] = (*((unsigned __int8 *)a2 + 5)
                       + *((unsigned __int8 *)a2 + 1)
                       + *((unsigned __int8 *)a2 + 9)
                       + *((unsigned __int8 *)a2 + 13)) >> 2;
        result->i8[2] = (*((unsigned __int8 *)a2 + 6)
                       + *((unsigned __int8 *)a2 + 2)
                       + *((unsigned __int8 *)a2 + 10)
                       + *((unsigned __int8 *)a2 + 14)) >> 2;
        result->i8[3] = (*((unsigned __int8 *)a2 + 7)
                       + *((unsigned __int8 *)a2 + 3)
                       + *((unsigned __int8 *)a2 + 11)
                       + *((unsigned __int8 *)a2 + 15)) >> 2;
        result = (uint8x16_t *)((char *)result + 4);
        a2 += 4;
      }
    }
  }
  return result;
}

__IOSurface *AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::writeRegion(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned __int8 *a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __IOSurface *result;
  int v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  BOOL v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  BOOL v53;
  BOOL v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  BOOL v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  __IOSurface *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t (*v107)(unint64_t, uint64_t);
  int64_t v108;
  size_t v109;
  int64_t CPUPtr;
  unsigned __int8 *v111;
  uint64_t v112;
  char *v113;
  size_t v114;
  uint64_t v115;
  int v116;
  unsigned __int8 CompressedTileWidthOfPlane;
  unsigned __int8 CompressedTileHeightOfPlane;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int AddressingBaseLevelWidthInBlocks;
  int v129;
  int v130;
  unsigned int AddressingBaseLevelHeightInBlocks;
  int v132;
  int v133;
  uint64_t (*TwiddleFunc)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t (*v137)(unint64_t, uint64_t);
  unsigned int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  __int128 *v144;
  unsigned __int16 *v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t (*v150)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  unsigned int v151;
  int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  unint64_t v164;
  unsigned __int8 *v165;
  unint64_t v166;
  int64_t v168;
  void (*v169)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *);
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned __int8 *v178;
  int64_t v179;
  uint64_t v180;
  unsigned int v182;
  int v183;
  int v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  unint64_t v191;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  int v197;
  unsigned __int8 *v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  int64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  int *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  int64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  unsigned int v220[3];

  v12 = a8;
  LODWORD(v13) = a7;
  v14 = a4;
  v15 = a1;
  v16 = a12;
  v208 = __PAIR64__(a6, a5);
  result = (__IOSurface *)AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::validateRegion(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (!(_DWORD)result)
    return result;
  v18 = *(_DWORD *)(v15 + 144);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 208) + 88);
  v195 = *(_DWORD *)(v15 + 112);
  v180 = v15;
  if (*(_BYTE *)(v15 + 240))
  {
    v183 = *(_DWORD *)(v15 + 144);
    v185 = v12;
    v193 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 208) + 88);
    v20 = (unint64_t)*(unsigned __int8 *)(v15 + 381) << 8;
    v21 = v20 == 768;
    v187 = v13;
    if (v20 == 768)
      v22 = v13;
    else
      v22 = 1;
    v190 = v14;
    if (v21)
      v23 = v14;
    else
      v23 = v12;
    v199 = v23;
    v202 = v22;
    if (v22)
    {
      v24 = 0;
      v25 = *(_QWORD *)(v15 + 296);
      v210 = (int *)(v25 - *(_QWORD *)(v15 + 72));
      v26 = v210 + 3;
      v197 = *(unsigned __int8 *)(v15 + 316);
      while (1)
      {
        agxCalcSparseInputs(*(_DWORD *)(v15 + 236), *(_DWORD *)(v15 + 128), *(_DWORD *)(v15 + 132), *(_DWORD *)(v15 + 216), *(_DWORD *)(v15 + 220), v195 * v193, *(_DWORD *)(v15 + 64), 1u, 1u, v24 + v199, a9, v197 != 0, 0, a2, a3, v208, SHIDWORD(v208), (uint64_t)&v215);
        v27 = *v210;
        v29 = v210[1];
        v28 = v210[2];
        v30 = v29 >= *v210 ? 0 : v210[2];
        v31 = v30 - v27 + v29;
        if (v31)
        {
          v220[0] = 0;
          v32 = HIDWORD(v217);
          v33 = v218 * HIDWORD(v217);
          if ((_DWORD)v218 * HIDWORD(v217))
          {
            v34 = BYTE9(v218);
            v35 = v216;
            v36 = DWORD1(v216);
            v37 = DWORD2(v216);
            v38 = HIDWORD(v216);
            v39 = v217;
            v40 = v217 | HIDWORD(v216);
            if (BYTE9(v218))
            {
              v41 = 0;
              do
              {
                if (v40)
                {
                  v42 = 0;
                  v43 = 0;
                  v44 = 1;
                  v45 = v38 != 0;
                  v46 = v39 != 0;
                  v47 = v38;
                  v48 = v39;
                  do
                  {
                    --v47;
                    if (v45)
                      v43 |= (v44 & (v35 + (unsigned __int16)(v41 % v32))) << v42;
                    else
                      v47 = 0;
                    if (v45)
                      ++v42;
                    --v48;
                    if (v46)
                      v43 |= (v44 & (v36 + (unsigned __int16)(v41 / v32))) << v42;
                    else
                      v48 = 0;
                    if (v46)
                      ++v42;
                    v44 *= 2;
                    --v42;
                    v46 = v48 != 0;
                    v45 = v47 != 0;
                  }
                  while (v48 | v47);
                }
                else
                {
                  v43 = 0;
                }
                if ((*(_DWORD *)(v25 + 4 * ((v43 + v37) | ((v43 + v37) >> 8 << 9))) & 0x80000000) == 0)
                {
                  do
                    v49 = __ldxr(v220);
                  while (__stxr(v49 + 1, v220));
                }
                ++v41;
              }
              while (v41 != v33);
            }
            else
            {
              do
              {
                if (v40)
                {
                  v50 = 0;
                  v51 = 0;
                  v52 = 1;
                  v53 = v39 != 0;
                  v54 = v38 != 0;
                  v55 = v39;
                  v56 = v38;
                  do
                  {
                    --v55;
                    if (v53)
                      v51 |= (v52 & (v36 + (unsigned __int16)(v34 / v32))) << v50;
                    else
                      v55 = 0;
                    if (v53)
                      ++v50;
                    --v56;
                    if (v54)
                      v51 |= (v52 & (v35 + (unsigned __int16)(v34 % v32))) << v50;
                    else
                      v56 = 0;
                    if (v54)
                      ++v50;
                    v52 *= 2;
                    --v50;
                    v54 = v56 != 0;
                    v53 = v55 != 0;
                  }
                  while (v56 | v55);
                }
                else
                {
                  v51 = 0;
                }
                if ((*(_DWORD *)(v25 + 4 * ((v51 + v37) | ((v51 + v37) >> 8 << 9))) & 0x80000000) == 0)
                {
                  do
                    v57 = __ldxr(v220);
                  while (__stxr(v57 + 1, v220));
                }
                ++v34;
              }
              while (v34 != v33);
            }
          }
          if (v31 >= v220[0])
            v31 = v220[0];
          v58 = v31 + v27 >= v28 ? v28 : 0;
          *v210 = v31 + v27 - v58;
          if (v33)
            break;
        }
LABEL_11:
        ++v24;
        v15 = v180;
        if (v24 == v202)
          goto LABEL_103;
      }
      v59 = 0;
      v60 = BYTE9(v218);
      v61 = v216;
      v62 = DWORD1(v216);
      v64 = DWORD2(v216);
      v63 = HIDWORD(v216);
      v65 = v217;
      v66 = v217 | HIDWORD(v216);
      while (1)
      {
        v67 = v61 + (unsigned __int16)(v59 % v32);
        v68 = v62 + (unsigned __int16)(v59 / v32);
        if (v60)
        {
          if (v66)
          {
            v69 = 0;
            v70 = 0;
            v71 = 1;
            v72 = v63 != 0;
            v73 = v65 != 0;
            v74 = v63;
            v75 = v65;
            do
            {
              --v74;
              v76 = !v72;
              if (v72)
              {
                v77 = ((v71 & v67) << v69) | v70;
              }
              else
              {
                v74 = 0;
                v77 = v70;
              }
              if (!v76)
                ++v69;
              v70 = ((v71 & v68) << v69) | v77;
              if (v73)
                --v75;
              else
                v75 = 0;
              if (v73)
              {
                v78 = v69 + 1;
              }
              else
              {
                v70 = v77;
                v78 = v69;
              }
              v71 *= 2;
              v69 = v78 - 1;
              v73 = v75 != 0;
              v72 = v74 != 0;
            }
            while (v75 | v74);
            goto LABEL_97;
          }
        }
        else if (v66)
        {
          v79 = 0;
          v70 = 0;
          v80 = 1;
          v81 = v65 != 0;
          v82 = v63 != 0;
          v83 = v65;
          v84 = v63;
          do
          {
            --v83;
            v85 = !v81;
            if (v81)
            {
              v86 = ((v80 & v68) << v79) | v70;
            }
            else
            {
              v83 = 0;
              v86 = v70;
            }
            if (!v85)
              ++v79;
            v70 = ((v80 & v67) << v79) | v86;
            if (v82)
              --v84;
            else
              v84 = 0;
            if (v82)
            {
              v87 = v79 + 1;
            }
            else
            {
              v70 = v86;
              v87 = v79;
            }
            v80 *= 2;
            v79 = v87 - 1;
            v82 = v84 != 0;
            v81 = v83 != 0;
          }
          while (v84 | v83);
          goto LABEL_97;
        }
        v70 = 0;
LABEL_97:
        v88 = (v70 + v64) | ((v70 + v64) >> 8 << 9);
        if ((*(_DWORD *)(v25 + 4 * v88) & 0x80000000) == 0 && v59 < v31)
        {
          if (v59 + v27 >= v28)
            v89 = v28;
          else
            v89 = 0;
          v90 = v59 + v27 - v89;
          *(_DWORD *)(v25 + 4 * v88) = v26[v90] & 0x3FFFFFF | 0xC0000000;
          v26[v90] = 66809520;
        }
        if (++v59 == v33)
          goto LABEL_11;
      }
    }
LABEL_103:
    v14 = v190;
    v16 = a12;
    v12 = v185;
    LODWORD(v13) = v187;
    v19 = v193;
    v18 = v183;
  }
  if (*(_QWORD *)(v15 + 168))
    IOSurfaceLockPlane();
  v91 = *(__IOSurface **)(v15 + 184);
  if (v91)
    IOSurfaceLock(v91, 0, 0);
  v92 = v18 + a9;
  v93 = *(_QWORD *)(v15 + 380);
  v94 = v93;
  if (!(_BYTE)v93)
  {
    v109 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(v15, 0);
    CPUPtr = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v15, v12, v92, 0);
    v111 = a10;
    if (HIDWORD(v208))
    {
      v112 = HIDWORD(v208);
      v113 = (char *)(CPUPtr + v109 * a3 + v19 * (unint64_t)a2);
      v114 = v19 * (unint64_t)v208;
      do
      {
        memcpy(v113, v111, v114);
        v111 += a11;
        v113 += v109;
        --v112;
      }
      while (v112);
    }
    goto LABEL_211;
  }
  v95 = v195 * (unint64_t)v19;
  v96 = ((unint64_t)((unsigned __int16)v93 & 0xFF00) - 256) >> 8;
  v97 = v92;
  if (v96 < 2)
    goto LABEL_112;
  if (v96 == 2)
  {
    v121 = v16;
    v212 = v95;
    v122 = *(_DWORD *)(v180 + 144) + a9;
    v123 = *(_DWORD *)(v180 + 132);
    if (*(_DWORD *)(v180 + 128) >> (*(_BYTE *)(v180 + 144) + a9) <= 1u)
      v124 = 1;
    else
      v124 = *(_DWORD *)(v180 + 128) >> (*(_BYTE *)(v180 + 144) + a9);
    if (v123 >> v122 <= 1)
      v125 = 1;
    else
      v125 = v123 >> v122;
    v126 = *(_DWORD *)(v180 + 136) >> v122;
    if (v126 <= 1)
      v126 = 1;
    v205 = v126;
    v127 = v97;
    AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(v180, v97);
    v129 = 1 << -(char)__clz(AddressingBaseLevelWidthInBlocks - 1);
    if (AddressingBaseLevelWidthInBlocks <= 1)
      v130 = 1;
    else
      v130 = v129;
    AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(v180, v127);
    v132 = 1 << -(char)__clz(AddressingBaseLevelHeightInBlocks - 1);
    if (AddressingBaseLevelHeightInBlocks <= 1)
      v133 = 1;
    else
      v133 = v132;
    if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(v180, v127))
    {
      v206 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v180, 0, v127, 0);
      v203 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(v180, 0);
      TwiddleFunc = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getTwiddleFunc(v180);
      v135 = a10;
      v136 = v212;
      if ((_DWORD)v13)
      {
        v137 = (uint64_t (*)(unint64_t, uint64_t))TwiddleFunc;
        v200 = *(_DWORD *)(v180 + 128);
        v138 = *(_DWORD *)(v180 + 216);
        v139 = *(_DWORD *)(v180 + 220);
        v13 = v13;
        v140 = *(unsigned __int8 *)(v180 + 317);
        do
        {
          TiledMemory<(TwiddleOrder)0>::convertTiles2D<false>(v206 + v203 * v14, (uint64_t)v135, v200, v127, a2, a3, v208, SHIDWORD(v208), a11, v138, v139, v136, v137, v140 != 0);
          v136 = v212;
          ++v14;
          v135 += v121;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      v213 = v130;
      v204 = v125;
      v201 = v133;
      if (*(_BYTE *)(v180 + 240))
      {
        v145 = (unsigned __int16 *)(v180 + 242);
        v146 = *(_QWORD *)(v180 + 72);
        v215 = __PAIR64__(v12, v127);
        LODWORD(v216) = 0;
        *((_QWORD *)&v216 + 1) = v146;
        v127 = 0;
        DWORD1(v216) = 8
                     * ((AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(v180, 0)+ (*(_DWORD *)(v180 + 236) << 8)- 1) & (unint64_t)-(uint64_t)(*(_DWORD *)(v180 + 236) << 8))/ *(unsigned int *)(v180 + 236);
        v147 = (unsigned int *)&v215;
      }
      else
      {
        v147 = 0;
        if (*(_BYTE *)(v180 + 232))
          v145 = (unsigned __int16 *)(v180 + 242);
        else
          v145 = 0;
      }
      v168 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v180, 0, v127, 0);
      v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)0>;
      switch(*(_QWORD *)(v180 + 32))
      {
        case 0x82:
        case 0x83:
        case 0x8CLL:
        case 0x8DLL:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)0>;
          break;
        case 0x84:
        case 0x85:
        case 0x86:
        case 0x87:
        case 0x8ELL:
        case 0x8FLL:
        case 0x96:
        case 0x97:
        case 0x98:
        case 0x99:
        case 0xBALL:
        case 0xCCLL:
        case 0xDELL:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)0>;
          break;
        case 0xB9:
        case 0xCBLL:
        case 0xDDLL:
          break;
        case 0xBBLL:
        case 0xCDLL:
        case 0xDFLL:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)0>;
          break;
        case 0xBCLL:
        case 0xCELL:
        case 0xE0:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)0>;
          break;
        case 0xBDLL:
        case 0xCFLL:
        case 0xE1:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)0>;
          break;
        case 0xBELL:
        case 0xD0:
        case 0xE2:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)0>;
          break;
        case 0xBFLL:
        case 0xD1:
        case 0xE3:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC0:
        case 0xD2:
        case 0xE4:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC1:
        case 0xD3:
        case 0xE5:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC2:
        case 0xD4:
        case 0xE6:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC3:
        case 0xD5:
        case 0xE7:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC4:
        case 0xD6:
        case 0xE8:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC5:
        case 0xD7:
        case 0xE9:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC6:
        case 0xD8:
        case 0xEALL:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC7:
        case 0xD9:
        case 0xEBLL:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)0>;
          break;
        case 0xC8:
        case 0xDALL:
        case 0xECLL:
          v169 = (void (*)(uint64_t, __int128 *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)0>;
          break;
        default:
          __asm { BR              X10 }
          return result;
      }
      v170 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(v180, 0);
      v169(v168, (__int128 *)a10, v124, v204, v205, v213, v201, v170, a2, a3, v14, v208, SHIDWORD(v208), v13, a11, v121, v145, v147);
    }
    goto LABEL_211;
  }
  if (v96 == 3)
  {
LABEL_112:
    v98 = *(_DWORD *)(v180 + 128) >> (*(_BYTE *)(v180 + 144) + a9);
    if (v98 <= 1)
      v98 = 1;
    v211 = v98;
    v99 = *(_DWORD *)(v180 + 132) >> (*(_BYTE *)(v180 + 144) + a9);
    if (v99 <= 1)
      v100 = 1;
    else
      v100 = v99;
    v101 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(v180, v92);
    v102 = 1 << -(char)__clz(v101 - 1);
    if (v101 <= 1)
      v103 = 1;
    else
      v103 = v102;
    v104 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(v180, v97);
    v105 = 1 << -(char)__clz(v104 - 1);
    if (v104 <= 1)
      v106 = 1;
    else
      v106 = v105;
    v107 = (uint64_t (*)(unint64_t, uint64_t))AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getTwiddleFunc(v180);
    if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(v180, v97))
    {
      v108 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v180, v12, v97, 0);
      TiledMemory<(TwiddleOrder)0>::convertTiles2D<false>(v108, (uint64_t)a10, *(_DWORD *)(v180 + 128), v97, a2, a3, v208, SHIDWORD(v208), a11, *(_DWORD *)(v180 + 216), *(_DWORD *)(v180 + 220), v95, v107, *(_BYTE *)(v180 + 317));
    }
    else if (v94 == 3)
    {
      v175 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v180, 0, 0, 0);
      v219 = 0;
      v217 = 0u;
      v218 = 0u;
      v215 = 0u;
      v216 = 0u;
      v115 = *(_QWORD *)(v180 + 208);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)&v215, 0, *(MTLPixelFormat *)(v180 + 32), *(unsigned __int8 *)(v115 + 49));
      v116 = BYTE2(v215);
      if (*(_QWORD *)(v180 + 168))
      {
        CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
        v119 = *(_QWORD *)(v180 + 208);
        v120 = a11;
      }
      else
      {
        CompressedTileWidthOfPlane = v215;
        CompressedTileHeightOfPlane = BYTE1(v215);
        v120 = a11;
        v119 = v115;
      }
      HIDWORD(v149) = v116;
      LODWORD(v149) = v116 - 8;
      v148 = v149 >> 3;
      if (v148 > 7)
        v150 = 0;
      else
        v150 = off_250402960[v148];
      v151 = a3 / CompressedTileHeightOfPlane;
      v174 = HIDWORD(v208) + a3;
      v189 = CompressedTileHeightOfPlane;
      v173 = (HIDWORD(v208) + a3 - 1) / CompressedTileHeightOfPlane;
      if (v151 <= v173)
      {
        v184 = v208 + a2;
        v186 = CompressedTileWidthOfPlane;
        v172 = a2 / CompressedTileWidthOfPlane;
        v182 = (v208 + a2 - 1) / CompressedTileWidthOfPlane;
        if (v172 <= v182)
        {
          v152 = 4 * v116;
          v196 = (CompressedTileWidthOfPlane >> 3) * 4 * v116;
          v177 = (CompressedTileWidthOfPlane * v116 * CompressedTileHeightOfPlane) >> 3;
          v171 = (v211 + CompressedTileWidthOfPlane - 1) / CompressedTileWidthOfPlane * v177;
          do
          {
            v179 = v175 + v171 * v151;
            v176 = v151;
            v153 = v151 * v189;
            if (a3 >= v153)
              v154 = a3 - v153;
            else
              v154 = 0;
            v188 = v174 - v153;
            v191 = v154 >> 2;
            v178 = &a10[v153 * v120];
            v155 = v172;
            do
            {
              v194 = v155;
              v156 = v155 * v186;
              v157 = a2 - v155 * v186;
              if (a2 >= v156)
                v158 = v157;
              else
                v158 = 0;
              v159 = v184 - v156;
              if (v186 - v158 < v184 - v156)
                v159 = v186 - v158;
              v160 = v159 - 1;
              v161 = v189 - v158;
              if (v189 - v158 >= v188)
                v161 = v188;
              v162 = v160 >> 3;
              v207 = (v161 - 1) >> 2;
              if (v191 <= v207 && v158 >> 3 <= v162)
              {
                v198 = &v178[*(unsigned __int8 *)(v119 + 49) * (unint64_t)v156];
                v164 = v191;
                do
                {
                  v209 = v164;
                  v214 = v179 + v194 * v177 + (v196 * v164);
                  v165 = &v198[(4 * v164) * v120];
                  v166 = v158 >> 3;
                  do
                  {
                    ((void (*)(int64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))v150)(v214 + (v152 * v166), &v165[8 * v166 * *(unsigned __int8 *)(v119 + 49)], 8, 4, 8, 4);
                    v120 = a11;
                  }
                  while (v166++ < v162);
                  v164 = v209 + 1;
                }
                while (v209 < v207);
              }
              v155 = v194 + 1;
            }
            while (v194 + 1 <= v182);
            v151 = v176 + 1;
          }
          while (v176 + 1 <= v173);
        }
      }
    }
    else
    {
      if (*(_BYTE *)(v180 + 240))
      {
        v141 = v180 + 242;
        v142 = *(_QWORD *)(v180 + 72);
        v215 = __PAIR64__(v12, v97);
        LODWORD(v216) = 0;
        *((_QWORD *)&v216 + 1) = v142;
        v143 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v180, 0, 0, 0);
        v144 = &v215;
      }
      else
      {
        if (*(_BYTE *)(v180 + 232))
          v141 = v180 + 242;
        else
          v141 = 0;
        v143 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(v180, v12, v97, 0);
        v144 = 0;
      }
      ((void (*)(int64_t, unsigned __int8 *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t, __int128 *))v107)(v143, a10, v211, v100, v103, v106, a2, a3, v208, a11, v141, v144);
    }
  }
LABEL_211:
  if (*(_QWORD *)(v180 + 168))
    IOSurfaceUnlockPlane();
  result = *(__IOSurface **)(v180 + 184);
  if (result)
    return (__IOSurface *)IOSurfaceUnlock(result, 0, 0);
  return result;
}

