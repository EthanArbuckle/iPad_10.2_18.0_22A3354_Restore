uint64_t std::vector<char const*>::~vector[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void bvhPrintDebugBufferContents(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  FILE **v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  NSObject *v18;
  int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t **v122;
  _QWORD *v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t **v126;
  unsigned int v127;
  uint64_t **v128;
  uint64_t **v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  const std::string::value_type **v133;
  unsigned int v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t (***v139)();
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _BOOL4 v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  const char *v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  unsigned int v368;
  BOOL v369;
  uint64_t v370;
  unsigned int v372;
  uint64_t *v373;
  uint64_t **v374;
  uint64_t *v375;
  uint64_t **v376;
  unsigned int v377;
  uint64_t **v378;
  uint64_t *v379;
  uint64_t v380;
  __int128 *v381;
  uint64_t v382;
  std::string *v383;
  unsigned int v384;
  size_t v385;
  uint64_t j;
  _BYTE *v387;
  uint64_t v388;
  const std::locale::facet *v389;
  NSObject *v390;
  const std::locale::facet *v391;
  FILE *v392;
  const char *v393;
  _BOOL4 v394;
  NSObject *v395;
  _BYTE *v396;
  _QWORD *v397;
  uint64_t v398;
  const std::string *v399;
  _QWORD *v400;
  uint64_t *v401;
  uint64_t *v402;
  _BYTE *v403;
  int v404;
  int v405;
  uint64_t (***v406)();
  uint64_t v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  _BOOL4 v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  const char *v429;
  uint64_t v430;
  uint64_t **i;
  uint64_t *v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t **v435;
  char v436;
  void *v437[3];
  _QWORD v438[3];
  _QWORD *v439;
  __int128 v440;
  uint64_t v441;
  _QWORD v442[3];
  _QWORD *v443;
  void *v444;
  char v445;
  uint64_t v446;
  _BYTE __p[24];
  _QWORD v448[3];
  _QWORD *v449;
  void *v450[3];
  _QWORD v451[3];
  _QWORD *v452;
  void *v453;
  __int128 v454;
  _QWORD v455[3];
  _QWORD *v456;
  void *v457[3];
  _QWORD v458[3];
  _QWORD *v459;
  __int128 v460;
  uint64_t v461;
  _QWORD v462[3];
  _QWORD *v463;
  void *v464[3];
  _QWORD v465[3];
  _QWORD *v466;
  void *v467;
  __int128 v468;
  _QWORD v469[3];
  _QWORD *v470;
  void *v471;
  __int128 v472;
  _QWORD v473[3];
  _QWORD *v474;
  void *v475;
  __int128 v476;
  _QWORD v477[3];
  _QWORD *v478;
  void *v479;
  __int128 v480;
  _QWORD v481[3];
  _QWORD *v482;
  void *v483[3];
  _QWORD v484[3];
  _QWORD *v485;
  void *v486[3];
  _QWORD v487[3];
  _QWORD *v488;
  void *v489[3];
  _QWORD v490[3];
  _QWORD *v491;
  void *v492;
  __int128 v493;
  _QWORD v494[3];
  _QWORD *v495;
  void *v496[3];
  _QWORD v497[3];
  _QWORD *v498;
  _BYTE v499[24];
  _QWORD v500[3];
  _QWORD *v501;
  void *v502[3];
  _QWORD v503[3];
  _QWORD *v504;
  void *v505[3];
  _QWORD v506[3];
  _QWORD *v507;
  void *v508;
  __int128 v509;
  _QWORD v510[3];
  _QWORD *v511;
  void *v512;
  __int128 v513;
  _QWORD v514[3];
  _QWORD *v515;
  void *v516[3];
  _QWORD v517[3];
  _QWORD *v518;
  void *v519[3];
  _QWORD v520[3];
  _QWORD *v521;
  void *v522;
  __int128 v523;
  _QWORD v524[3];
  _QWORD *v525;
  void *v526;
  __int128 v527;
  _QWORD v528[3];
  _QWORD *v529;
  __int128 v530;
  uint64_t v531;
  _QWORD v532[3];
  _QWORD *v533;
  void *v534;
  __int128 v535;
  _QWORD v536[3];
  _QWORD *v537;
  void *v538;
  __int128 v539;
  _QWORD v540[3];
  _QWORD *v541;
  void *v542;
  __int128 v543;
  _QWORD v544[3];
  _QWORD *v545;
  void *v546;
  __int128 v547;
  _QWORD v548[3];
  _QWORD *v549;
  void *v550[3];
  _QWORD v551[3];
  _QWORD *v552;
  void *v553;
  __int128 v554;
  _QWORD v555[3];
  _QWORD *v556;
  __int128 v557;
  uint64_t v558;
  _QWORD v559[3];
  _QWORD *v560;
  void *v561[3];
  _QWORD v562[3];
  _QWORD *v563;
  void *v564[3];
  _QWORD v565[3];
  _QWORD *v566;
  void *v567[3];
  _QWORD v568[3];
  _QWORD *v569;
  void *v570[3];
  _QWORD v571[3];
  _QWORD *v572;
  void *v573[3];
  _QWORD v574[3];
  _QWORD *v575;
  void *v576;
  __int128 v577;
  _QWORD v578[3];
  _QWORD *v579;
  void *v580;
  __int128 v581;
  _QWORD v582[3];
  _QWORD *v583;
  void *v584[3];
  _QWORD v585[3];
  _QWORD *v586;
  void *v587[2];
  uint64_t v588;
  _QWORD v589[3];
  _QWORD *v590;
  void *v591;
  __int128 v592;
  _QWORD v593[3];
  _QWORD *v594;
  void *v595;
  __int128 v596;
  _QWORD v597[3];
  _QWORD *v598;
  void *v599;
  __int128 v600;
  _QWORD v601[3];
  _QWORD *v602;
  void *v603;
  __int128 v604;
  _QWORD v605[3];
  _QWORD *v606;
  void *v607;
  __int128 v608;
  _QWORD v609[3];
  _QWORD *v610;
  void *v611;
  __int128 v612;
  _QWORD v613[3];
  _QWORD *v614;
  void *v615;
  __int128 v616;
  _QWORD v617[3];
  _QWORD *v618;
  void *v619;
  __int128 v620;
  _QWORD v621[3];
  _QWORD *v622;
  void *v623;
  __int128 v624;
  _QWORD v625[3];
  _QWORD *v626;
  void *v627[3];
  _QWORD v628[3];
  _QWORD *v629;
  void *v630;
  __int128 v631;
  _QWORD v632[3];
  _QWORD *v633;
  void *v634;
  __int128 v635;
  _QWORD v636[3];
  _QWORD *v637;
  void *v638;
  __int128 v639;
  _QWORD v640[3];
  _QWORD *v641;
  _BYTE v642[24];
  _QWORD v643[3];
  _QWORD *v644;
  void *v645;
  __int128 v646;
  _QWORD v647[3];
  _QWORD *v648;
  void *v649[3];
  _QWORD v650[3];
  _QWORD *v651;
  void *v652;
  __int128 v653;
  _QWORD v654[3];
  _QWORD *v655;
  __int128 v656;
  uint64_t v657;
  _QWORD v658[3];
  _QWORD *v659;
  void *v660[3];
  _QWORD v661[3];
  _QWORD *v662;
  void *v663[3];
  _QWORD v664[3];
  _QWORD *v665;
  void *v666[3];
  _QWORD v667[3];
  _QWORD *v668;
  __int128 v669;
  uint64_t v670;
  _QWORD v671[3];
  _QWORD *v672;
  void *v673;
  __int128 v674;
  _QWORD v675[3];
  _QWORD *v676;
  void *v677;
  __int128 v678;
  _QWORD v679[3];
  _QWORD *v680;
  void *v681;
  __int128 v682;
  _QWORD v683[3];
  _QWORD *v684;
  void *v685;
  __int128 v686;
  _QWORD v687[3];
  _QWORD *v688;
  void *v689[3];
  _QWORD v690[3];
  _QWORD *v691;
  void *v692[3];
  _QWORD v693[3];
  _QWORD *v694;
  void *v695[3];
  _QWORD v696[3];
  _QWORD *v697;
  void *v698[3];
  _QWORD v699[3];
  _QWORD *v700;
  void *v701;
  __int128 v702;
  _QWORD v703[3];
  _QWORD *v704;
  void *v705;
  __int128 v706;
  _QWORD v707[3];
  _QWORD *v708;
  void *v709[3];
  _QWORD v710[3];
  _QWORD *v711;
  void *v712;
  __int128 v713;
  _QWORD v714[3];
  _QWORD *v715;
  void *v716;
  __int128 v717;
  _QWORD v718[3];
  _QWORD *v719;
  void *v720;
  __int128 v721;
  _QWORD v722[3];
  _QWORD *v723;
  void *v724[3];
  _QWORD v725[3];
  _QWORD *v726;
  void *v727[3];
  _QWORD v728[3];
  _QWORD *v729;
  __int128 v730;
  uint64_t v731;
  _QWORD v732[3];
  _QWORD *v733;
  void *v734[3];
  _QWORD v735[3];
  _QWORD *v736;
  void *v737;
  __int128 v738;
  _QWORD v739[3];
  _QWORD *v740;
  void *v741;
  __int128 v742;
  _QWORD v743[3];
  _QWORD *v744;
  void *v745;
  __int128 v746;
  _QWORD v747[3];
  _QWORD *v748;
  void *v749[2];
  uint64_t v750;
  _QWORD v751[3];
  _QWORD *v752;
  void *v753;
  __int128 v754;
  _QWORD v755[3];
  _QWORD *v756;
  void *v757;
  __int128 v758;
  _QWORD v759[3];
  _QWORD *v760;
  void *v761;
  __int128 v762;
  _QWORD v763[3];
  _QWORD *v764;
  void *v765;
  __int128 v766;
  _QWORD v767[3];
  _QWORD *v768;
  void *v769;
  __int128 v770;
  _QWORD v771[3];
  _QWORD *v772;
  void *v773[3];
  _QWORD v774[3];
  _QWORD *v775;
  void *v776[3];
  _QWORD v777[3];
  _QWORD *v778;
  void *v779;
  __int128 v780;
  _QWORD v781[3];
  _QWORD *v782;
  void *v783[3];
  _QWORD v784[3];
  _QWORD *v785;
  void *v786;
  __int128 v787;
  _QWORD v788[3];
  _QWORD *v789;
  void *v790[3];
  _QWORD v791[3];
  _QWORD *v792;
  void *v793[3];
  _QWORD v794[3];
  _QWORD *v795;
  __int128 v796;
  uint64_t v797;
  _QWORD v798[3];
  _QWORD *v799;
  void *v800[3];
  _QWORD v801[3];
  _QWORD *v802;
  void *v803;
  __int128 v804;
  _QWORD v805[3];
  _QWORD *v806;
  void *v807[3];
  _QWORD v808[3];
  _QWORD *v809;
  __int128 v810;
  uint64_t v811;
  _QWORD v812[3];
  _QWORD *v813;
  void *v814[2];
  uint64_t v815;
  _QWORD v816[3];
  _QWORD *v817;
  __int128 v818;
  uint64_t v819;
  _QWORD v820[3];
  _QWORD *v821;
  void *v822[2];
  uint64_t v823;
  _QWORD v824[3];
  _QWORD *v825;
  _BYTE v826[24];
  _QWORD v827[3];
  _QWORD *v828;
  std::string v829;
  _QWORD v830[3];
  _QWORD *v831;
  std::string v832;
  uint64_t (**v833)();
  uint64_t (*v834)();
  uint64_t (***v835)();
  _QWORD v836[36];
  _QWORD v837[4];
  int v838;
  __int128 v839;
  uint64_t v840;
  _QWORD v841[4];
  int v842;
  __int128 v843;
  uint64_t v844;
  _QWORD v845[4];
  int v846;
  __int128 v847;
  uint64_t v848;
  _QWORD v849[4];
  int v850;
  __int128 v851;
  uint64_t v852;
  _QWORD v853[4];
  int v854;
  __int128 v855;
  void *v856;
  _QWORD v857[4];
  int v858;
  std::string v859;
  _QWORD v860[3];
  _QWORD *v861;
  int v862;
  __int128 v863;
  void *v864;
  _QWORD v865[4];
  int v866;
  __int128 v867;
  uint64_t v868;
  _QWORD v869[4];
  int v870;
  __int128 v871;
  void *v872;
  _QWORD v873[4];
  int v874;
  __int128 v875;
  void *v876;
  _QWORD v877[4];
  int v878;
  std::string v879;
  _QWORD v880[3];
  _QWORD *v881;
  int v882;
  __int128 v883;
  void *v884;
  _QWORD v885[4];
  int v886;
  std::string v887;
  _QWORD v888[3];
  _QWORD *v889;
  int v890;
  __int128 v891;
  void *v892;
  _QWORD v893[4];
  int v894;
  __int128 v895;
  void *v896;
  _QWORD v897[4];
  int v898;
  std::string v899;
  _QWORD v900[3];
  _QWORD *v901;
  int v902;
  std::string v903;
  _QWORD v904[3];
  _QWORD *v905;
  int v906;
  std::string v907;
  _QWORD v908[3];
  _QWORD *v909;
  int v910;
  std::string v911;
  _QWORD v912[3];
  _QWORD *v913;
  int v914;
  std::string v915;
  _QWORD v916[3];
  _QWORD *v917;
  int v918;
  __int128 v919;
  uint64_t v920;
  _QWORD v921[4];
  int v922;
  std::string v923;
  _QWORD v924[3];
  _QWORD *v925;
  int v926;
  std::string v927;
  _QWORD v928[3];
  _QWORD *v929;
  int v930;
  std::string v931;
  _QWORD v932[3];
  _QWORD *v933;
  int v934;
  __int128 v935;
  void *v936;
  _QWORD v937[4];
  int v938;
  __int128 v939;
  uint64_t v940;
  _QWORD v941[4];
  int v942;
  __int128 v943;
  void *v944;
  _QWORD v945[4];
  int v946;
  __int128 v947;
  void *v948;
  _QWORD v949[4];
  int v950;
  std::string v951;
  _QWORD v952[3];
  _QWORD *v953;
  int v954;
  std::string v955;
  _QWORD v956[3];
  _QWORD *v957;
  int v958;
  std::string v959;
  _QWORD v960[3];
  _QWORD *v961;
  int v962;
  __int128 v963;
  void *v964;
  _QWORD v965[4];
  int v966;
  std::string v967;
  _QWORD v968[3];
  _QWORD *v969;
  int v970;
  std::string v971;
  _QWORD v972[3];
  _QWORD *v973;
  int v974;
  __int128 v975;
  void *v976;
  _QWORD v977[4];
  int v978;
  __int128 v979;
  void *v980;
  _QWORD v981[4];
  int v982;
  __int128 v983;
  void *v984;
  _QWORD v985[4];
  int v986;
  __int128 v987;
  void *v988;
  _QWORD v989[4];
  int v990;
  std::string v991;
  _QWORD v992[3];
  _QWORD *v993;
  int v994;
  std::string v995;
  _QWORD v996[3];
  _QWORD *v997;
  int v998;
  std::string v999;
  _QWORD v1000[3];
  _QWORD *v1001;
  int v1002;
  std::string v1003;
  _QWORD v1004[3];
  _QWORD *v1005;
  int v1006;
  __int128 v1007;
  uint64_t v1008;
  _QWORD v1009[4];
  int v1010;
  __int128 v1011;
  void *v1012;
  _QWORD v1013[4];
  int v1014;
  __int128 v1015;
  void *v1016;
  _QWORD v1017[4];
  int v1018;
  __int128 v1019;
  void *v1020;
  _QWORD v1021[4];
  int v1022;
  __int128 v1023;
  uint64_t v1024;
  _QWORD v1025[4];
  int v1026;
  std::string v1027;
  _QWORD v1028[3];
  _QWORD *v1029;
  int v1030;
  __int128 v1031;
  void *v1032;
  _QWORD v1033[4];
  int v1034;
  std::string v1035;
  _QWORD v1036[3];
  _QWORD *v1037;
  int v1038;
  __int128 v1039;
  uint64_t v1040;
  _QWORD v1041[4];
  int v1042;
  std::string v1043;
  _QWORD v1044[3];
  _QWORD *v1045;
  int v1046;
  std::string v1047;
  _QWORD v1048[3];
  _QWORD *v1049;
  int v1050;
  std::string v1051;
  _QWORD v1052[3];
  _QWORD *v1053;
  int v1054;
  __int128 v1055;
  void *v1056;
  _QWORD v1057[4];
  int v1058;
  std::string v1059;
  _QWORD v1060[3];
  _QWORD *v1061;
  int v1062;
  std::string v1063;
  _QWORD v1064[3];
  _QWORD *v1065;
  int v1066;
  std::string v1067;
  _QWORD v1068[3];
  _QWORD *v1069;
  int v1070;
  std::string v1071;
  _QWORD v1072[3];
  _QWORD *v1073;
  int v1074;
  std::string v1075;
  _QWORD v1076[3];
  _QWORD *v1077;
  int v1078;
  std::string v1079;
  _QWORD v1080[3];
  _QWORD *v1081;
  int v1082;
  std::string v1083;
  _QWORD v1084[3];
  _QWORD *v1085;
  int v1086;
  std::string v1087;
  _QWORD v1088[3];
  _QWORD *v1089;
  int v1090;
  std::string v1091;
  _QWORD v1092[3];
  _QWORD *v1093;
  int v1094;
  __int128 v1095;
  uint64_t v1096;
  _QWORD v1097[4];
  int v1098;
  __int128 v1099;
  void *v1100;
  _QWORD v1101[4];
  int v1102;
  std::string v1103;
  _QWORD v1104[3];
  _QWORD *v1105;
  int v1106;
  std::string v1107;
  _QWORD v1108[3];
  _QWORD *v1109;
  int v1110;
  __int128 v1111;
  void *v1112;
  _QWORD v1113[4];
  int v1114;
  __int128 v1115;
  void *v1116;
  _QWORD v1117[4];
  int v1118;
  __int128 v1119;
  void *v1120;
  _QWORD v1121[4];
  int v1122;
  __int128 v1123;
  void *v1124;
  _QWORD v1125[4];
  int v1126;
  __int128 v1127;
  void *v1128;
  _QWORD v1129[4];
  int v1130;
  __int128 v1131;
  uint64_t v1132;
  _QWORD v1133[4];
  int v1134;
  std::string v1135;
  _QWORD v1136[3];
  _QWORD *v1137;
  int v1138;
  __int128 v1139;
  void *v1140;
  _QWORD v1141[4];
  int v1142;
  std::string v1143;
  _QWORD v1144[3];
  _QWORD *v1145;
  int v1146;
  std::string v1147;
  _QWORD v1148[3];
  _QWORD *v1149;
  int v1150;
  std::string v1151;
  _QWORD v1152[3];
  _QWORD *v1153;
  int v1154;
  std::string v1155;
  _QWORD v1156[3];
  _QWORD *v1157;
  int v1158;
  __int128 v1159;
  uint64_t v1160;
  _QWORD v1161[4];
  int v1162;
  std::string v1163;
  _QWORD v1164[3];
  _QWORD *v1165;
  int v1166;
  std::string v1167;
  _QWORD v1168[3];
  _QWORD *v1169;
  int v1170;
  __int128 v1171;
  void *v1172;
  _QWORD v1173[4];
  int v1174;
  __int128 v1175;
  void *v1176;
  _QWORD v1177[4];
  int v1178;
  std::string v1179;
  _QWORD v1180[3];
  _QWORD *v1181;
  int v1182;
  std::string v1183;
  _QWORD v1184[3];
  _QWORD *v1185;
  int v1186;
  __int128 v1187;
  void *v1188;
  _QWORD v1189[4];
  int v1190;
  __int128 v1191;
  void *v1192;
  _QWORD v1193[4];
  int v1194;
  __int128 v1195;
  uint64_t v1196;
  _QWORD v1197[4];
  int v1198;
  __int128 v1199;
  void *v1200;
  _QWORD v1201[4];
  int v1202;
  std::string v1203;
  _QWORD v1204[3];
  _QWORD *v1205;
  int v1206;
  __int128 v1207;
  void *v1208;
  _QWORD v1209[4];
  int v1210;
  __int128 v1211;
  void *v1212;
  _QWORD v1213[4];
  int v1214;
  __int128 v1215;
  void *v1216;
  _QWORD v1217[4];
  int v1218;
  std::string v1219;
  _QWORD v1220[3];
  _QWORD *v1221;
  int v1222;
  std::string v1223;
  _QWORD v1224[3];
  _QWORD *v1225;
  int v1226;
  std::string v1227;
  _QWORD v1228[3];
  _QWORD *v1229;
  int v1230;
  std::string v1231;
  _QWORD v1232[3];
  _QWORD *v1233;
  int v1234;
  __int128 v1235;
  void *v1236;
  _QWORD v1237[4];
  int v1238;
  __int128 v1239;
  uint64_t v1240;
  _QWORD v1241[4];
  int v1242;
  __int128 v1243;
  void *v1244;
  _QWORD v1245[4];
  int v1246;
  std::string v1247;
  _QWORD v1248[3];
  _QWORD *v1249;
  int v1250;
  __int128 v1251;
  void *v1252;
  _QWORD v1253[4];
  int v1254;
  __int128 v1255;
  uint64_t v1256;
  _QWORD v1257[3];
  _QWORD v1258[5];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v1258[2] = *MEMORY[0x24BDAC8D0];
  if (!v1)
  {
    fwrite("*** BVH Build Debug Log == nil ***\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v836[0]) = 0;
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: *** BVH Build Debug Log == nil ***\n", (uint8_t *)v836, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(v836[0]) = 0;
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: *** BVH Build Debug Log == nil ***\n", (uint8_t *)v836, 2u);
    }
    return;
  }
  v2 = (_DWORD *)v1;
  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  v429 = (const char *)v1;
  v422 = (v3 & v4) != -1;
  if ((v3 & v4) == 0xFFFFFFFF)
  {
    v19 = 0;
    v427 = 0;
  }
  else
  {
    v5 = (FILE **)MEMORY[0x24BDAC8D8];
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "**** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (const char *)(v1 + 16), v3, v4);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v408 = v2[2];
      v409 = v2[3];
      LODWORD(v836[0]) = 136315650;
      *(_QWORD *)((char *)v836 + 4) = v2 + 4;
      WORD2(v836[1]) = 1024;
      *(_DWORD *)((char *)&v836[1] + 6) = v408;
      WORD1(v836[2]) = 1024;
      HIDWORD(v836[2]) = v409;
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v836, 0x18u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v6 = v2[2];
      v7 = v2[3];
      LODWORD(v836[0]) = 136315650;
      *(_QWORD *)((char *)v836 + 4) = v2 + 4;
      WORD2(v836[1]) = 1024;
      *(_DWORD *)((char *)&v836[1] + 6) = v6;
      WORD1(v836[2]) = 1024;
      HIDWORD(v836[2]) = v7;
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v836, 0x18u);
    }
    fprintf(*v5, "Dispatch %d, TG {%d, %d, %d}, Thread In TG {%d, %d, %d}, Simd In TG %d\n", v2[68], v2[69], v2[70], v2[71], v2[72], v2[73], v2[74], v2[75]);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v410 = v2[68];
      v411 = v2[69];
      v412 = v2[70];
      v413 = v2[71];
      v414 = v2[72];
      v415 = v2[73];
      v416 = v2[74];
      v417 = v2[75];
      LODWORD(v836[0]) = 67110912;
      HIDWORD(v836[0]) = v410;
      LOWORD(v836[1]) = 1024;
      *(_DWORD *)((char *)&v836[1] + 2) = v411;
      HIWORD(v836[1]) = 1024;
      LODWORD(v836[2]) = v412;
      WORD2(v836[2]) = 1024;
      *(_DWORD *)((char *)&v836[2] + 6) = v413;
      WORD1(v836[3]) = 1024;
      HIDWORD(v836[3]) = v414;
      LOWORD(v836[4]) = 1024;
      *(_DWORD *)((char *)&v836[4] + 2) = v415;
      HIWORD(v836[4]) = 1024;
      LODWORD(v836[5]) = v416;
      WORD2(v836[5]) = 1024;
      *(_DWORD *)((char *)&v836[5] + 6) = v417;
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Dispatch %d, TG {%d, %d, %d}, Thread In TG {%d, %d, %d}, Simd In TG %d\n", (uint8_t *)v836, 0x32u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v8 = v2[68];
      v9 = v2[69];
      v10 = v2[70];
      v11 = v2[71];
      v12 = v2[72];
      v13 = v2[73];
      v14 = v2[74];
      v15 = v2[75];
      LODWORD(v836[0]) = 67110912;
      HIDWORD(v836[0]) = v8;
      LOWORD(v836[1]) = 1024;
      *(_DWORD *)((char *)&v836[1] + 2) = v9;
      HIWORD(v836[1]) = 1024;
      LODWORD(v836[2]) = v10;
      WORD2(v836[2]) = 1024;
      *(_DWORD *)((char *)&v836[2] + 6) = v11;
      WORD1(v836[3]) = 1024;
      HIDWORD(v836[3]) = v12;
      LOWORD(v836[4]) = 1024;
      *(_DWORD *)((char *)&v836[4] + 2) = v13;
      HIWORD(v836[4]) = 1024;
      LODWORD(v836[5]) = v14;
      WORD2(v836[5]) = 1024;
      *(_DWORD *)((char *)&v836[5] + 6) = v15;
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: Dispatch %d, TG {%d, %d, %d}, Thread In TG {%d, %d, %d}, Simd In TG %d\n", (uint8_t *)v836, 0x32u);
    }
    v16 = 0;
    v17 = v2 + 76;
    v18 = MEMORY[0x24BDACB70];
    do
    {
      fprintf(*v5, "ctx %d: 0x%16llx, %llu, %lld, %f\n", v16, *(_QWORD *)&v17[2 * v16], *(_QWORD *)&v17[2 * v16], *(_QWORD *)&v17[2 * v16], COERCE_FLOAT(*(_QWORD *)&v17[2 * v16]));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)((char *)&v836[1] + 2) = *(_QWORD *)&v17[2 * v16];
        *(_QWORD *)((char *)&v836[2] + 4) = *(_QWORD *)((char *)&v836[1] + 2);
        *(_QWORD *)((char *)&v836[3] + 6) = *(_QWORD *)((char *)&v836[1] + 2);
        LODWORD(v836[0]) = 67110144;
        HIDWORD(v836[0]) = v16;
        LOWORD(v836[1]) = 2048;
        WORD1(v836[2]) = 2048;
        WORD2(v836[3]) = 2048;
        HIWORD(v836[4]) = 2048;
        *(double *)&v836[5] = *(float *)((char *)&v836[1] + 2);
        _os_log_error_impl(&dword_232C19000, v18, OS_LOG_TYPE_ERROR, "AGX: ctx %d: 0x%16llx, %llu, %lld, %f\n", (uint8_t *)v836, 0x30u);
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_QWORD *)((char *)&v836[1] + 2) = *(_QWORD *)&v17[2 * v16];
        *(_QWORD *)((char *)&v836[2] + 4) = *(_QWORD *)((char *)&v836[1] + 2);
        *(_QWORD *)((char *)&v836[3] + 6) = *(_QWORD *)((char *)&v836[1] + 2);
        LODWORD(v836[0]) = 67110144;
        HIDWORD(v836[0]) = v16;
        LOWORD(v836[1]) = 2048;
        WORD1(v836[2]) = 2048;
        WORD2(v836[3]) = 2048;
        HIWORD(v836[4]) = 2048;
        *(double *)&v836[5] = *(float *)((char *)&v836[1] + 2);
        _os_log_impl(&dword_232C19000, v18, OS_LOG_TYPE_INFO, "AGX: ctx %d: 0x%16llx, %llu, %lld, %f\n", (uint8_t *)v836, 0x30u);
      }
      ++v16;
    }
    while (v16 != 10);
    v427 = *((_DWORD *)v429 + 69);
    v19 = *((_DWORD *)v429 + 68);
  }
  HIBYTE(v441) = 13;
  strcpy((char *)&v440, "UNINITIALIZED");
  v442[0] = &off_2503FFDF0;
  v442[1] = nothingFormatter;
  v443 = v442;
  LODWORD(v836[0]) = 0;
  *(_OWORD *)&v836[1] = v440;
  v836[3] = v441;
  v836[4] = &off_2503FFDF0;
  v836[7] = &v836[4];
  v836[5] = nothingFormatter;
  HIBYTE(v437[2]) = 19;
  strcpy((char *)v437, "span AssertInBounds");
  v438[0] = &off_2503FFDF0;
  v438[1] = int32x2Formatter;
  v439 = v438;
  LODWORD(v836[8]) = 2;
  *(_OWORD *)&v836[9] = *(_OWORD *)"span AssertInBounds";
  v836[11] = v437[2];
  v836[12] = &off_2503FFDF0;
  v836[15] = &v836[12];
  v836[13] = int32x2Formatter;
  *((_BYTE *)&v832.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v832, "array AssertInBounds");
  v833 = &off_2503FFDF0;
  v834 = int32x2Formatter;
  v835 = &v833;
  LODWORD(v836[16]) = 3;
  *(_OWORD *)&v836[17] = *(_OWORD *)"array AssertInBounds";
  v836[19] = *((_QWORD *)&v832.__r_.__value_.__l + 2);
  v836[20] = &off_2503FFDF0;
  v836[23] = &v836[20];
  v836[21] = int32x2Formatter;
  v20 = (char *)operator new(0x28uLL);
  *(_OWORD *)&v829.__r_.__value_.__r.__words[1] = xmmword_232D732D0;
  strcpy(v20, "Start w/ PrimCount, WideNodeCount");
  v829.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  v830[0] = &off_2503FFDF0;
  v830[1] = int32x2Formatter;
  v831 = v830;
  LODWORD(v836[24]) = 256;
  std::string::__init_copy_ctor_external((std::string *)&v836[25], v20, 0x21uLL);
  v21 = (uint64_t)v831;
  if (!v831)
    goto LABEL_26;
  if (v831 != v830)
  {
    v21 = (*(uint64_t (**)(void))(*v831 + 16))();
LABEL_26:
    v836[31] = v21;
    goto LABEL_28;
  }
  v836[31] = &v836[28];
  (*(void (**)(uint64_t, _QWORD *))(v830[0] + 24))((uint64_t)v830, &v836[28]);
LABEL_28:
  v428 = v19;
  v826[23] = 15;
  strcpy(v826, "WriteNullHeader");
  v827[0] = &off_2503FFDF0;
  v827[1] = nothingFormatter;
  v828 = v827;
  LODWORD(v836[32]) = 257;
  *(_OWORD *)&v836[33] = *(_OWORD *)v826;
  v836[35] = *(_QWORD *)&v826[16];
  v837[0] = &off_2503FFDF0;
  v837[3] = v837;
  v837[1] = nothingFormatter;
  HIBYTE(v823) = 8;
  strcpy((char *)v822, "EarlyOut");
  v824[0] = &off_2503FFDF0;
  v824[1] = nothingFormatter;
  v825 = v824;
  v838 = 258;
  v839 = *(_OWORD *)v822;
  v840 = v823;
  v841[0] = &off_2503FFDF0;
  v841[3] = v841;
  v841[1] = nothingFormatter;
  HIBYTE(v819) = 13;
  strcpy((char *)&v818, "WideTreeDepth");
  v820[0] = &off_2503FFDF0;
  v820[1] = intFormatter;
  v821 = v820;
  v842 = 259;
  v843 = v818;
  v844 = v819;
  v845[0] = &off_2503FFDF0;
  v845[3] = v845;
  v845[1] = intFormatter;
  HIBYTE(v815) = 9;
  strcpy((char *)v814, "BVHOutPtr");
  v816[0] = &off_2503FFDF0;
  v816[1] = hex64Formatter;
  v817 = v816;
  v846 = 272;
  v847 = *(_OWORD *)v814;
  v848 = v815;
  v849[0] = &off_2503FFDF0;
  v849[3] = v849;
  v849[1] = hex64Formatter;
  HIBYTE(v811) = 10;
  strcpy((char *)&v810, "BVHOutSize");
  v812[0] = &off_2503FFDF0;
  v812[1] = hex64Formatter;
  v813 = v812;
  v850 = 273;
  v851 = v810;
  v852 = v811;
  v853[3] = v853;
  v853[0] = &off_2503FFDF0;
  v853[1] = hex64Formatter;
  HIBYTE(v807[2]) = 18;
  strcpy((char *)v807, "Complete LoadLeafs");
  v808[0] = &off_2503FFDF0;
  v808[1] = nothingFormatter;
  v809 = v808;
  v854 = 1792;
  v855 = *(_OWORD *)"Complete LoadLeafs";
  v856 = v807[2];
  v857[3] = v857;
  v857[0] = &off_2503FFDF0;
  v857[1] = nothingFormatter;
  v22 = (char *)operator new(0x20uLL);
  v804 = xmmword_232D732E0;
  strcpy(v22, "Complete GenerateMortonCodes");
  v803 = v22;
  v805[0] = &off_2503FFDF0;
  v805[1] = nothingFormatter;
  v806 = v805;
  v858 = 1793;
  std::string::__init_copy_ctor_external(&v859, v22, 0x1CuLL);
  v23 = (uint64_t)v806;
  if (!v806)
  {
LABEL_31:
    v861 = (_QWORD *)v23;
    goto LABEL_33;
  }
  if (v806 != v805)
  {
    v23 = (*(uint64_t (**)(void))(*v806 + 16))();
    goto LABEL_31;
  }
  v861 = v860;
  (*(void (**)(uint64_t, _QWORD *))(v805[0] + 24))((uint64_t)v805, v860);
LABEL_33:
  HIBYTE(v800[2]) = 18;
  strcpy((char *)v800, "Complete RadixSort");
  v801[0] = &off_2503FFDF0;
  v801[1] = nothingFormatter;
  v802 = v801;
  v862 = 1794;
  v863 = *(_OWORD *)"Complete RadixSort";
  v864 = v800[2];
  v865[3] = v865;
  v865[0] = &off_2503FFDF0;
  v865[1] = nothingFormatter;
  HIBYTE(v797) = 13;
  strcpy((char *)&v796, "Complete PLOC");
  v798[0] = &off_2503FFDF0;
  v798[1] = nothingFormatter;
  v799 = v798;
  v866 = 1795;
  v867 = v796;
  v868 = v797;
  v869[3] = v869;
  v869[0] = &off_2503FFDF0;
  v869[1] = nothingFormatter;
  HIBYTE(v793[2]) = 18;
  strcpy((char *)v793, "Complete WideBuild");
  v794[0] = &off_2503FFDF0;
  v794[1] = nothingFormatter;
  v795 = v794;
  v870 = 1796;
  v871 = *(_OWORD *)"Complete WideBuild";
  v872 = v793[2];
  v873[3] = v873;
  v873[0] = &off_2503FFDF0;
  v873[1] = nothingFormatter;
  strcpy((char *)v790, "Complete AllocRIASpace");
  HIBYTE(v790[2]) = 22;
  v791[0] = &off_2503FFDF0;
  v791[1] = nothingFormatter;
  v792 = v791;
  v874 = 1797;
  v875 = *(_OWORD *)"Complete AllocRIASpace";
  v876 = v790[2];
  v877[3] = v877;
  v877[0] = &off_2503FFDF0;
  v877[1] = nothingFormatter;
  v24 = (char *)operator new(0x20uLL);
  v787 = xmmword_232D732F0;
  strcpy(v24, "Complete AssignBVHOffset");
  v786 = v24;
  v788[0] = &off_2503FFDF0;
  v788[1] = nothingFormatter;
  v789 = v788;
  v878 = 1798;
  std::string::__init_copy_ctor_external(&v879, v24, 0x18uLL);
  v25 = (uint64_t)v789;
  if (!v789)
  {
LABEL_36:
    v881 = (_QWORD *)v25;
    goto LABEL_38;
  }
  if (v789 != v788)
  {
    v25 = (*(uint64_t (**)(void))(*v789 + 16))();
    goto LABEL_36;
  }
  v881 = v880;
  (*(void (**)(uint64_t, _QWORD *))(v788[0] + 24))((uint64_t)v788, v880);
LABEL_38:
  HIBYTE(v783[2]) = 19;
  strcpy((char *)v783, "Complete EncodeLeaf");
  v784[0] = &off_2503FFDF0;
  v784[1] = nothingFormatter;
  v785 = v784;
  v882 = 1799;
  v883 = *(_OWORD *)"Complete EncodeLeaf";
  v884 = v783[2];
  v885[3] = v885;
  v885[0] = &off_2503FFDF0;
  v885[1] = nothingFormatter;
  v26 = (char *)operator new(0x20uLL);
  v780 = xmmword_232D732F0;
  strcpy(v26, "Complete InnerNodeBounds");
  v779 = v26;
  v781[0] = &off_2503FFDF0;
  v781[1] = nothingFormatter;
  v782 = v781;
  v886 = 1800;
  std::string::__init_copy_ctor_external(&v887, v26, 0x18uLL);
  if (v782)
  {
    if (v782 == v781)
    {
      v889 = v888;
      (*(void (**)(uint64_t, _QWORD *))(v781[0] + 24))((uint64_t)v781, v888);
    }
    else
    {
      v889 = (_QWORD *)(*(uint64_t (**)(void))(*v782 + 16))();
    }
  }
  else
  {
    v889 = 0;
  }
  HIBYTE(v776[2]) = 19;
  strcpy((char *)v776, "Complete EncodeNode");
  v777[0] = &off_2503FFDF0;
  v777[1] = nothingFormatter;
  v778 = v777;
  v890 = 1801;
  v891 = *(_OWORD *)"Complete EncodeNode";
  v892 = v776[2];
  v893[3] = v893;
  v893[0] = &off_2503FFDF0;
  v893[1] = nothingFormatter;
  HIBYTE(v773[2]) = 20;
  strcpy((char *)v773, "Sort(PassCount,Mask)");
  v774[0] = &off_2503FFDF0;
  v774[1] = int32_hex32_Formatter;
  v775 = v774;
  v894 = 512;
  v895 = *(_OWORD *)"Sort(PassCount,Mask)";
  v896 = v773[2];
  v897[3] = v897;
  v897[0] = &off_2503FFDF0;
  v897[1] = int32_hex32_Formatter;
  v27 = (char *)operator new(0x28uLL);
  v770 = xmmword_232D73300;
  strcpy(v27, "SimdMatchPass I->O (PassIndex,Mask)");
  v769 = v27;
  v771[0] = &off_2503FFDF0;
  v771[1] = int32_hex32_Formatter;
  v772 = v771;
  v898 = 513;
  std::string::__init_copy_ctor_external(&v899, v27, 0x23uLL);
  if (v772)
  {
    if (v772 == v771)
    {
      v901 = v900;
      (*(void (**)(uint64_t, _QWORD *))(v771[0] + 24))((uint64_t)v771, v900);
    }
    else
    {
      v901 = (_QWORD *)(*(uint64_t (**)(void))(*v772 + 16))();
    }
  }
  else
  {
    v901 = 0;
  }
  v28 = (char *)operator new(0x28uLL);
  v766 = xmmword_232D73300;
  strcpy(v28, "SimdMatchPass O->T (PassIndex,Mask)");
  v765 = v28;
  v767[0] = &off_2503FFDF0;
  v767[1] = int32_hex32_Formatter;
  v768 = v767;
  v902 = 514;
  std::string::__init_copy_ctor_external(&v903, v28, 0x23uLL);
  v29 = (uint64_t)v768;
  if (!v768)
    goto LABEL_51;
  if (v768 != v767)
  {
    v29 = (*(uint64_t (**)(void))(*v768 + 16))();
LABEL_51:
    v905 = (_QWORD *)v29;
    goto LABEL_53;
  }
  v905 = v904;
  (*(void (**)(uint64_t, _QWORD *))(v767[0] + 24))((uint64_t)v767, v904);
LABEL_53:
  v30 = (char *)operator new(0x28uLL);
  v762 = xmmword_232D73300;
  strcpy(v30, "SimdMatchPass T->O (PassIndex,Mask)");
  v761 = v30;
  v763[0] = &off_2503FFDF0;
  v763[1] = int32_hex32_Formatter;
  v764 = v763;
  v906 = 515;
  std::string::__init_copy_ctor_external(&v907, v30, 0x23uLL);
  v31 = (uint64_t)v764;
  if (!v764)
  {
LABEL_56:
    v909 = (_QWORD *)v31;
    goto LABEL_58;
  }
  if (v764 != v763)
  {
    v31 = (*(uint64_t (**)(void))(*v764 + 16))();
    goto LABEL_56;
  }
  v909 = v908;
  (*(void (**)(uint64_t, _QWORD *))(v763[0] + 24))((uint64_t)v763, v908);
LABEL_58:
  v32 = (char *)operator new(0x28uLL);
  v758 = xmmword_232D73310;
  strcpy(v32, "SimdMatchCopyback T->O (index,value)");
  v757 = v32;
  v759[0] = &off_2503FFDF0;
  v759[1] = int32x2Formatter;
  v760 = v759;
  v910 = 516;
  std::string::__init_copy_ctor_external(&v911, v32, 0x24uLL);
  v33 = (uint64_t)v760;
  if (!v760)
  {
LABEL_61:
    v913 = (_QWORD *)v33;
    goto LABEL_63;
  }
  if (v760 != v759)
  {
    v33 = (*(uint64_t (**)(void))(*v760 + 16))();
    goto LABEL_61;
  }
  v913 = v912;
  (*(void (**)(uint64_t, _QWORD *))(v759[0] + 24))((uint64_t)v759, v912);
LABEL_63:
  v34 = (char *)operator new(0x30uLL);
  v754 = xmmword_232D73320;
  strcpy(v34, "startElementThisSimd, elementsPerFullSimd");
  v753 = v34;
  v755[0] = &off_2503FFDF0;
  v755[1] = int32x2Formatter;
  v756 = v755;
  v914 = 528;
  std::string::__init_copy_ctor_external(&v915, v34, 0x29uLL);
  if (v756)
  {
    if (v756 == v755)
    {
      v917 = v916;
      (*(void (**)(uint64_t, _QWORD *))(v755[0] + 24))((uint64_t)v755, v916);
    }
    else
    {
      v917 = (_QWORD *)(*(uint64_t (**)(void))(*v756 + 16))();
    }
  }
  else
  {
    v917 = 0;
  }
  HIBYTE(v750) = 12;
  strcpy((char *)v749, "simdInBounds");
  v751[0] = &off_2503FFDF0;
  v751[1] = intFormatter;
  v752 = v751;
  v918 = 529;
  v919 = *(_OWORD *)v749;
  v920 = v750;
  v921[3] = v921;
  v921[0] = &off_2503FFDF0;
  v921[1] = intFormatter;
  v35 = (char *)operator new(0x20uLL);
  v746 = xmmword_232D73330;
  strcpy(v35, "SIMDInBounds: start,count");
  v745 = v35;
  v747[0] = &off_2503FFDF0;
  v747[1] = int32x2Formatter;
  v748 = v747;
  v922 = 530;
  std::string::__init_copy_ctor_external(&v923, v35, 0x19uLL);
  v36 = (uint64_t)v748;
  if (!v748)
    goto LABEL_71;
  if (v748 != v747)
  {
    v36 = (*(uint64_t (**)(void))(*v748 + 16))();
LABEL_71:
    v925 = (_QWORD *)v36;
    goto LABEL_73;
  }
  v925 = v924;
  (*(void (**)(uint64_t, _QWORD *))(v747[0] + 24))((uint64_t)v747, v924);
LABEL_73:
  v37 = (char *)operator new(0x20uLL);
  v742 = xmmword_232D73340;
  strcpy(v37, "OutputIndex,currentKeyValue");
  v741 = v37;
  v743[0] = &off_2503FFDF0;
  v743[1] = int32x2Formatter;
  v744 = v743;
  v926 = 645;
  std::string::__init_copy_ctor_external(&v927, v37, 0x1BuLL);
  v38 = (uint64_t)v744;
  if (!v744)
  {
LABEL_76:
    v929 = (_QWORD *)v38;
    goto LABEL_78;
  }
  if (v744 != v743)
  {
    v38 = (*(uint64_t (**)(void))(*v744 + 16))();
    goto LABEL_76;
  }
  v929 = v928;
  (*(void (**)(uint64_t, _QWORD *))(v743[0] + 24))((uint64_t)v743, v928);
LABEL_78:
  v39 = (char *)operator new(0x28uLL);
  v738 = xmmword_232D732D0;
  strcpy(v39, "numMatchesInSIMD, matchingTHreads");
  v737 = v39;
  v739[0] = &off_2503FFDF0;
  v739[1] = int32_hex32_Formatter;
  v740 = v739;
  v930 = 643;
  std::string::__init_copy_ctor_external(&v931, v39, 0x21uLL);
  v40 = (uint64_t)v740;
  if (!v740)
  {
LABEL_81:
    v933 = (_QWORD *)v40;
    goto LABEL_83;
  }
  if (v740 != v739)
  {
    v40 = (*(uint64_t (**)(void))(*v740 + 16))();
    goto LABEL_81;
  }
  v933 = v932;
  (*(void (**)(uint64_t, _QWORD *))(v739[0] + 24))((uint64_t)v739, v932);
LABEL_83:
  HIBYTE(v734[2]) = 17;
  strcpy((char *)v734, "digit, digitCount");
  v735[0] = &off_2503FFDF0;
  v735[1] = int32x2Formatter;
  v736 = v735;
  v934 = 644;
  v935 = *(_OWORD *)"digit, digitCount";
  v936 = v734[2];
  v937[3] = v937;
  v937[0] = &off_2503FFDF0;
  v937[1] = int32x2Formatter;
  HIBYTE(v731) = 9;
  strcpy((char *)&v730, "StartBVH2");
  v732[0] = &off_2503FFDF0;
  v732[1] = nothingFormatter;
  v733 = v732;
  v938 = 768;
  v939 = v730;
  v940 = v731;
  v941[3] = v941;
  v941[0] = &off_2503FFDF0;
  v941[1] = nothingFormatter;
  HIBYTE(v727[2]) = 18;
  strcpy((char *)v727, "StartPLOCIteration");
  v728[0] = &off_2503FFDF0;
  v728[1] = intFormatter;
  v729 = v728;
  v942 = 770;
  v943 = *(_OWORD *)"StartPLOCIteration";
  v944 = v727[2];
  v945[3] = v945;
  v945[0] = &off_2503FFDF0;
  v945[1] = intFormatter;
  HIBYTE(v724[2]) = 20;
  strcpy((char *)v724, "Candidate,NodeCounts");
  v725[0] = &off_2503FFDF0;
  v725[1] = int32x2Formatter;
  v726 = v725;
  v946 = 771;
  v947 = *(_OWORD *)"Candidate,NodeCounts";
  v948 = v724[2];
  v949[3] = v949;
  v949[0] = &off_2503FFDF0;
  v949[1] = int32x2Formatter;
  v41 = (char *)operator new(0x19uLL);
  v721 = xmmword_232D73350;
  strcpy(v41, "NeighborIndexComparison");
  v720 = v41;
  v722[0] = &off_2503FFDF0;
  v722[1] = int32x2Formatter;
  v723 = v722;
  v950 = 784;
  std::string::__init_copy_ctor_external(&v951, v41, 0x17uLL);
  v42 = (uint64_t)v723;
  if (!v723)
  {
LABEL_86:
    v953 = (_QWORD *)v42;
    goto LABEL_88;
  }
  if (v723 != v722)
  {
    v42 = (*(uint64_t (**)(void))(*v723 + 16))();
    goto LABEL_86;
  }
  v953 = v952;
  (*(void (**)(uint64_t, _QWORD *))(v722[0] + 24))((uint64_t)v722, v952);
LABEL_88:
  v43 = (char *)operator new(0x20uLL);
  v717 = xmmword_232D732F0;
  strcpy(v43, "IsPassthru,IsMutualMatch");
  v716 = v43;
  v718[0] = &off_2503FFDF0;
  v718[1] = int32x2Formatter;
  v719 = v718;
  v954 = 786;
  std::string::__init_copy_ctor_external(&v955, v43, 0x18uLL);
  v44 = (uint64_t)v719;
  if (!v719)
  {
LABEL_91:
    v957 = (_QWORD *)v44;
    goto LABEL_93;
  }
  if (v719 != v718)
  {
    v44 = (*(uint64_t (**)(void))(*v719 + 16))();
    goto LABEL_91;
  }
  v957 = v956;
  (*(void (**)(uint64_t, _QWORD *))(v718[0] + 24))((uint64_t)v718, v956);
LABEL_93:
  v45 = (char *)operator new(0x19uLL);
  v713 = xmmword_232D73350;
  strcpy(v45, "PassthruPrefixSum,Total");
  v712 = v45;
  v714[0] = &off_2503FFDF0;
  v714[1] = int32x2Formatter;
  v715 = v714;
  v958 = 787;
  std::string::__init_copy_ctor_external(&v959, v45, 0x17uLL);
  v46 = (uint64_t)v715;
  if (!v715)
  {
LABEL_96:
    v961 = (_QWORD *)v46;
    goto LABEL_98;
  }
  if (v715 != v714)
  {
    v46 = (*(uint64_t (**)(void))(*v715 + 16))();
    goto LABEL_96;
  }
  v961 = v960;
  (*(void (**)(uint64_t, _QWORD *))(v714[0] + 24))((uint64_t)v714, v960);
LABEL_98:
  strcpy((char *)v709, "NewNodePrefixSum,Total");
  HIBYTE(v709[2]) = 22;
  v710[0] = &off_2503FFDF0;
  v710[1] = int32x2Formatter;
  v711 = v710;
  v962 = 788;
  v963 = *(_OWORD *)"NewNodePrefixSum,Total";
  v964 = v709[2];
  v965[3] = v965;
  v965[0] = &off_2503FFDF0;
  v965[1] = int32x2Formatter;
  v47 = (char *)operator new(0x20uLL);
  v706 = xmmword_232D732E0;
  strcpy(v47, "MutualMatch: Left,RightChild");
  v705 = v47;
  v707[0] = &off_2503FFDF0;
  v707[1] = int32x2Formatter;
  v708 = v707;
  v966 = 790;
  std::string::__init_copy_ctor_external(&v967, v47, 0x1CuLL);
  v48 = (uint64_t)v708;
  if (!v708)
  {
LABEL_101:
    v969 = (_QWORD *)v48;
    goto LABEL_103;
  }
  if (v708 != v707)
  {
    v48 = (*(uint64_t (**)(void))(*v708 + 16))();
    goto LABEL_101;
  }
  v969 = v968;
  (*(void (**)(uint64_t, _QWORD *))(v707[0] + 24))((uint64_t)v707, v968);
LABEL_103:
  v49 = (char *)operator new(0x20uLL);
  v702 = xmmword_232D73360;
  strcpy(v49, "WriteCandidate: CandIdx,NodeIdx");
  v701 = v49;
  v703[0] = &off_2503FFDF0;
  v703[1] = int32x2Formatter;
  v704 = v703;
  v970 = 792;
  std::string::__init_copy_ctor_external(&v971, v49, 0x1FuLL);
  v50 = (uint64_t)v704;
  if (!v704)
  {
LABEL_106:
    v973 = (_QWORD *)v50;
    goto LABEL_108;
  }
  if (v704 != v703)
  {
    v50 = (*(uint64_t (**)(void))(*v704 + 16))();
    goto LABEL_106;
  }
  v973 = v972;
  (*(void (**)(uint64_t, _QWORD *))(v703[0] + 24))((uint64_t)v703, v972);
LABEL_108:
  HIBYTE(v698[2]) = 19;
  strcpy((char *)v698, "PLOCCount,NodeCount");
  v699[0] = &off_2503FFDF0;
  v699[1] = int32x2Formatter;
  v700 = v699;
  v974 = 800;
  v975 = *(_OWORD *)"PLOCCount,NodeCount";
  v976 = v698[2];
  v977[3] = v977;
  v977[0] = &off_2503FFDF0;
  v977[1] = int32x2Formatter;
  HIBYTE(v695[2]) = 20;
  strcpy((char *)v695, "BVH8 Level,NodeCount");
  v696[0] = &off_2503FFDF0;
  v696[1] = int32x2Formatter;
  v697 = v696;
  v978 = 1024;
  v979 = *(_OWORD *)"BVH8 Level,NodeCount";
  v980 = v695[2];
  v981[3] = v981;
  v981[0] = &off_2503FFDF0;
  v981[1] = int32x2Formatter;
  HIBYTE(v692[2]) = 19;
  strcpy((char *)v692, "BVH8 Node Start,End");
  v693[0] = &off_2503FFDF0;
  v693[1] = int32x2Formatter;
  v694 = v693;
  v982 = 1025;
  v983 = *(_OWORD *)"BVH8 Node Start,End";
  v984 = v692[2];
  v985[3] = v985;
  v985[0] = &off_2503FFDF0;
  v985[1] = int32x2Formatter;
  HIBYTE(v689[2]) = 20;
  strcpy((char *)v689, "BVH2,BVH8 Node Index");
  v690[0] = &off_2503FFDF0;
  v690[1] = int32x2Formatter;
  v691 = v690;
  v986 = 1026;
  v987 = *(_OWORD *)"BVH2,BVH8 Node Index";
  v988 = v689[2];
  v989[3] = v989;
  v989[0] = &off_2503FFDF0;
  v989[1] = int32x2Formatter;
  v51 = (char *)operator new(0x20uLL);
  v686 = xmmword_232D73330;
  strcpy(v51, "EmitLeaf BVH2Index,PrimID");
  v685 = v51;
  v687[0] = &off_2503FFDF0;
  v687[1] = int32x2Formatter;
  v688 = v687;
  v990 = 1031;
  std::string::__init_copy_ctor_external(&v991, v51, 0x19uLL);
  v52 = (uint64_t)v688;
  if (!v688)
  {
LABEL_111:
    v993 = (_QWORD *)v52;
    goto LABEL_113;
  }
  if (v688 != v687)
  {
    v52 = (*(uint64_t (**)(void))(*v688 + 16))();
    goto LABEL_111;
  }
  v993 = v992;
  (*(void (**)(uint64_t, _QWORD *))(v687[0] + 24))((uint64_t)v687, v992);
LABEL_113:
  v53 = (char *)operator new(0x20uLL);
  v682 = xmmword_232D732E0;
  strcpy(v53, "EmitNode WideIndex,BVH2Index");
  v681 = v53;
  v683[0] = &off_2503FFDF0;
  v683[1] = int32x2Formatter;
  v684 = v683;
  v994 = 1032;
  std::string::__init_copy_ctor_external(&v995, v53, 0x1CuLL);
  v54 = (uint64_t)v684;
  if (!v684)
  {
LABEL_116:
    v997 = (_QWORD *)v54;
    goto LABEL_118;
  }
  if (v684 != v683)
  {
    v54 = (*(uint64_t (**)(void))(*v684 + 16))();
    goto LABEL_116;
  }
  v997 = v996;
  (*(void (**)(uint64_t, _QWORD *))(v683[0] + 24))((uint64_t)v683, v996);
LABEL_118:
  v55 = (char *)operator new(0x20uLL);
  v678 = xmmword_232D73370;
  strcpy(v55, "Emitting InnerCount,LeafCount");
  v677 = v55;
  v679[0] = &off_2503FFDF0;
  v679[1] = int32x2Formatter;
  v680 = v679;
  v998 = 1033;
  std::string::__init_copy_ctor_external(&v999, v55, 0x1DuLL);
  v56 = (uint64_t)v680;
  if (!v680)
  {
LABEL_121:
    v1001 = (_QWORD *)v56;
    goto LABEL_123;
  }
  if (v680 != v679)
  {
    v56 = (*(uint64_t (**)(void))(*v680 + 16))();
    goto LABEL_121;
  }
  v1001 = v1000;
  (*(void (**)(uint64_t, _QWORD *))(v679[0] + 24))((uint64_t)v679, v1000);
LABEL_123:
  v57 = (char *)operator new(0x20uLL);
  v674 = xmmword_232D73380;
  strcpy(v57, "Final LevelCount,NodeCount");
  v673 = v57;
  v675[0] = &off_2503FFDF0;
  v675[1] = int32x2Formatter;
  v676 = v675;
  v1002 = 1040;
  std::string::__init_copy_ctor_external(&v1003, v57, 0x1AuLL);
  v58 = (uint64_t)v676;
  if (!v676)
  {
LABEL_126:
    v1005 = (_QWORD *)v58;
    goto LABEL_128;
  }
  if (v676 != v675)
  {
    v58 = (*(uint64_t (**)(void))(*v676 + 16))();
    goto LABEL_126;
  }
  v1005 = v1004;
  (*(void (**)(uint64_t, _QWORD *))(v675[0] + 24))((uint64_t)v675, v1004);
LABEL_128:
  HIBYTE(v670) = 15;
  strcpy((char *)&v669, "Final LeafCount");
  v671[0] = &off_2503FFDF0;
  v671[1] = intFormatter;
  v672 = v671;
  v1006 = 1041;
  v1007 = v669;
  v1008 = v670;
  v1009[3] = v1009;
  v1009[0] = &off_2503FFDF0;
  v1009[1] = intFormatter;
  HIBYTE(v666[2]) = 20;
  strcpy((char *)v666, "BVH8 Level,NodeCount");
  v667[0] = &off_2503FFDF0;
  v667[1] = int32x2Formatter;
  v668 = v667;
  v1010 = 1280;
  v1011 = *(_OWORD *)"BVH8 Level,NodeCount";
  v1012 = v666[2];
  v1013[3] = v1013;
  v1013[0] = &off_2503FFDF0;
  v1013[1] = int32x2Formatter;
  HIBYTE(v663[2]) = 19;
  strcpy((char *)v663, "BVH8 Node Start,End");
  v664[0] = &off_2503FFDF0;
  v664[1] = int32x2Formatter;
  v665 = v664;
  v1014 = 1281;
  v1015 = *(_OWORD *)"BVH8 Node Start,End";
  v1016 = v663[2];
  v1017[3] = v1017;
  v1017[0] = &off_2503FFDF0;
  v1017[1] = int32x2Formatter;
  HIBYTE(v660[2]) = 17;
  strcpy((char *)v660, "BVH2Node,BVH8Node");
  v661[0] = &off_2503FFDF0;
  v661[1] = int32x2Formatter;
  v662 = v661;
  v1018 = 1282;
  v1019 = *(_OWORD *)"BVH2Node,BVH8Node";
  v1020 = v660[2];
  v1021[3] = v1021;
  v1021[0] = &off_2503FFDF0;
  v1021[1] = int32x2Formatter;
  HIBYTE(v657) = 15;
  strcpy((char *)&v656, "InitialPathRank");
  v658[0] = &off_2503FFDF0;
  v658[1] = intFormatter;
  v659 = v658;
  v1022 = 1284;
  v1023 = v656;
  v1024 = v657;
  v1025[3] = v1025;
  v1025[0] = &off_2503FFDF0;
  v1025[1] = intFormatter;
  v59 = (char *)operator new(0x28uLL);
  v653 = xmmword_232D73390;
  strcpy(v59, "Descending BVH2Node,SubtreeCount");
  v652 = v59;
  v654[0] = &off_2503FFDF0;
  v654[1] = int32x2Formatter;
  v655 = v654;
  v1026 = 1286;
  std::string::__init_copy_ctor_external(&v1027, v59, 0x20uLL);
  if (v655)
  {
    if (v655 == v654)
    {
      v1029 = v1028;
      (*(void (**)(uint64_t, _QWORD *))(v654[0] + 24))((uint64_t)v654, v1028);
    }
    else
    {
      v1029 = (_QWORD *)(*(uint64_t (**)(void))(*v655 + 16))();
    }
  }
  else
  {
    v1029 = 0;
  }
  strcpy((char *)v649, "Choosing SAHScoreIndex");
  HIBYTE(v649[2]) = 22;
  v650[0] = &off_2503FFDF0;
  v650[1] = intFormatter;
  v651 = v650;
  v1030 = 1288;
  v1031 = *(_OWORD *)"Choosing SAHScoreIndex";
  v1032 = v649[2];
  v1033[3] = v1033;
  v1033[0] = &off_2503FFDF0;
  v1033[1] = intFormatter;
  v60 = (char *)operator new(0x20uLL);
  v646 = xmmword_232D73330;
  strcpy(v60, "PathRank,LeftSubtreeCount");
  v645 = v60;
  v647[0] = &off_2503FFDF0;
  v647[1] = int32x2Formatter;
  v648 = v647;
  v1034 = 1296;
  std::string::__init_copy_ctor_external(&v1035, v60, 0x19uLL);
  v61 = (uint64_t)v648;
  if (!v648)
    goto LABEL_136;
  if (v648 != v647)
  {
    v61 = (*(uint64_t (**)(void))(*v648 + 16))();
LABEL_136:
    v1037 = (_QWORD *)v61;
    goto LABEL_138;
  }
  v1037 = v1036;
  (*(void (**)(uint64_t, _QWORD *))(v647[0] + 24))((uint64_t)v647, v1036);
LABEL_138:
  v642[23] = 21;
  strcpy(v642, "NewChild IsLeaf,Index");
  v643[0] = &off_2503FFDF0;
  v643[1] = int32x2Formatter;
  v644 = v643;
  v1038 = 1297;
  v1039 = *(_OWORD *)v642;
  v1040 = *(_QWORD *)&v642[16];
  v1041[3] = v1041;
  v1041[0] = &off_2503FFDF0;
  v1041[1] = int32x2Formatter;
  v62 = (char *)operator new(0x20uLL);
  v639 = xmmword_232D732E0;
  strcpy(v62, "UpdatedPathRank,SubtreeCount");
  v638 = v62;
  v640[0] = &off_2503FFDF0;
  v640[1] = int32x2Formatter;
  v641 = v640;
  v1042 = 1298;
  std::string::__init_copy_ctor_external(&v1043, v62, 0x1CuLL);
  v63 = (uint64_t)v641;
  if (!v641)
  {
LABEL_141:
    v1045 = (_QWORD *)v63;
    goto LABEL_143;
  }
  if (v641 != v640)
  {
    v63 = (*(uint64_t (**)(void))(*v641 + 16))();
    goto LABEL_141;
  }
  v1045 = v1044;
  (*(void (**)(uint64_t, _QWORD *))(v640[0] + 24))((uint64_t)v640, v1044);
LABEL_143:
  v64 = (char *)operator new(0x28uLL);
  v635 = xmmword_232D73390;
  strcpy(v64, "EmitLeaf BVH2Index,BVH8LeafIndex");
  v634 = v64;
  v636[0] = &off_2503FFDF0;
  v636[1] = int32x2Formatter;
  v637 = v636;
  v1046 = 1302;
  std::string::__init_copy_ctor_external(&v1047, v64, 0x20uLL);
  v65 = (uint64_t)v637;
  if (!v637)
  {
LABEL_146:
    v1049 = (_QWORD *)v65;
    goto LABEL_148;
  }
  if (v637 != v636)
  {
    v65 = (*(uint64_t (**)(void))(*v637 + 16))();
    goto LABEL_146;
  }
  v1049 = v1048;
  (*(void (**)(uint64_t, _QWORD *))(v636[0] + 24))((uint64_t)v636, v1048);
LABEL_148:
  v66 = (char *)operator new(0x28uLL);
  v631 = xmmword_232D73390;
  strcpy(v66, "EmitNode BVH2Index,BVH8NodeIndex");
  v630 = v66;
  v632[0] = &off_2503FFDF0;
  v632[1] = int32x2Formatter;
  v633 = v632;
  v1050 = 1304;
  std::string::__init_copy_ctor_external(&v1051, v66, 0x20uLL);
  v67 = (uint64_t)v633;
  if (!v633)
  {
LABEL_151:
    v1053 = (_QWORD *)v67;
    goto LABEL_153;
  }
  if (v633 != v632)
  {
    v67 = (*(uint64_t (**)(void))(*v633 + 16))();
    goto LABEL_151;
  }
  v1053 = v1052;
  (*(void (**)(uint64_t, _QWORD *))(v632[0] + 24))((uint64_t)v632, v1052);
LABEL_153:
  HIBYTE(v627[2]) = 16;
  strcpy((char *)v627, "Final LevelCount");
  v628[0] = &off_2503FFDF0;
  v628[1] = intFormatter;
  v629 = v628;
  v1054 = 1312;
  v1055 = *(_OWORD *)"Final LevelCount";
  v1056 = v627[2];
  v1057[3] = v1057;
  v1057[0] = &off_2503FFDF0;
  v1057[1] = intFormatter;
  v68 = (char *)operator new(0x20uLL);
  v624 = xmmword_232D73330;
  strcpy(v68, "Final NodeCount,LeafCount");
  v623 = v68;
  v625[0] = &off_2503FFDF0;
  v625[1] = int32x2Formatter;
  v626 = v625;
  v1058 = 1313;
  std::string::__init_copy_ctor_external(&v1059, v68, 0x19uLL);
  v69 = (uint64_t)v626;
  if (!v626)
  {
LABEL_156:
    v1061 = (_QWORD *)v69;
    goto LABEL_158;
  }
  if (v626 != v625)
  {
    v69 = (*(uint64_t (**)(void))(*v626 + 16))();
    goto LABEL_156;
  }
  v1061 = v1060;
  (*(void (**)(uint64_t, _QWORD *))(v625[0] + 24))((uint64_t)v625, v1060);
LABEL_158:
  v70 = (char *)operator new(0x20uLL);
  v620 = xmmword_232D733A0;
  strcpy(v70, "ForceBalanced,CurrentWideLevel");
  v619 = v70;
  v621[0] = &off_2503FFDF0;
  v621[1] = int32x2Formatter;
  v622 = v621;
  v1062 = 1315;
  std::string::__init_copy_ctor_external(&v1063, v70, 0x1EuLL);
  v71 = (uint64_t)v622;
  if (!v622)
  {
LABEL_161:
    v1065 = (_QWORD *)v71;
    goto LABEL_163;
  }
  if (v622 != v621)
  {
    v71 = (*(uint64_t (**)(void))(*v622 + 16))();
    goto LABEL_161;
  }
  v1065 = v1064;
  (*(void (**)(uint64_t, _QWORD *))(v621[0] + 24))((uint64_t)v621, v1064);
LABEL_163:
  v72 = (char *)operator new(0x28uLL);
  v616 = xmmword_232D73310;
  strcpy(v72, "BalancedPrimCount,BalancedPrimOffset");
  v615 = v72;
  v617[0] = &off_2503FFDF0;
  v617[1] = int32x2Formatter;
  v618 = v617;
  v1066 = 1316;
  std::string::__init_copy_ctor_external(&v1067, v72, 0x24uLL);
  v73 = (uint64_t)v618;
  if (!v618)
  {
LABEL_166:
    v1069 = (_QWORD *)v73;
    goto LABEL_168;
  }
  if (v618 != v617)
  {
    v73 = (*(uint64_t (**)(void))(*v618 + 16))();
    goto LABEL_166;
  }
  v1069 = v1068;
  (*(void (**)(uint64_t, _QWORD *))(v617[0] + 24))((uint64_t)v617, v1068);
LABEL_168:
  v74 = (char *)operator new(0x40uLL);
  v612 = xmmword_232D733B0;
  strcpy(v74, "Exceeded Inner Node Count: attempedNodeIndex, availableSize");
  v611 = v74;
  v613[0] = &off_2503FFDF0;
  v613[1] = int32x2Formatter;
  v614 = v613;
  v1070 = 1317;
  std::string::__init_copy_ctor_external(&v1071, v74, 0x3BuLL);
  v75 = (uint64_t)v614;
  if (!v614)
  {
LABEL_171:
    v1073 = (_QWORD *)v75;
    goto LABEL_173;
  }
  if (v614 != v613)
  {
    v75 = (*(uint64_t (**)(void))(*v614 + 16))();
    goto LABEL_171;
  }
  v1073 = v1072;
  (*(void (**)(uint64_t, _QWORD *))(v613[0] + 24))((uint64_t)v613, v1072);
LABEL_173:
  v76 = (char *)operator new(0x40uLL);
  v608 = xmmword_232D733C0;
  strcpy(v76, "Exceeded Inner Node Count: required node count, available count");
  v607 = v76;
  v609[0] = &off_2503FFDF0;
  v609[1] = int32x2Formatter;
  v610 = v609;
  v1074 = 1318;
  std::string::__init_copy_ctor_external(&v1075, v76, 0x3FuLL);
  v77 = (uint64_t)v610;
  if (!v610)
  {
LABEL_176:
    v1077 = (_QWORD *)v77;
    goto LABEL_178;
  }
  if (v610 != v609)
  {
    v77 = (*(uint64_t (**)(void))(*v610 + 16))();
    goto LABEL_176;
  }
  v1077 = v1076;
  (*(void (**)(uint64_t, _QWORD *))(v609[0] + 24))((uint64_t)v609, v1076);
LABEL_178:
  v78 = (char *)operator new(0x30uLL);
  v604 = xmmword_232D733D0;
  strcpy(v78, "Balanced Build: Required Depth, Prim Count");
  v603 = v78;
  v605[0] = &off_2503FFDF0;
  v605[1] = int32x2Formatter;
  v606 = v605;
  v1078 = 1319;
  std::string::__init_copy_ctor_external(&v1079, v78, 0x2AuLL);
  v79 = (uint64_t)v606;
  if (!v606)
  {
LABEL_181:
    v1081 = (_QWORD *)v79;
    goto LABEL_183;
  }
  if (v606 != v605)
  {
    v79 = (*(uint64_t (**)(void))(*v606 + 16))();
    goto LABEL_181;
  }
  v1081 = v1080;
  (*(void (**)(uint64_t, _QWORD *))(v605[0] + 24))((uint64_t)v605, v1080);
LABEL_183:
  v80 = (char *)operator new(0x50uLL);
  v600 = xmmword_232D733E0;
  strcpy(v80, "Balanced Build: BalancedPrimOffset (before remainder), BalancedPrimCount");
  v599 = v80;
  v601[0] = &off_2503FFDF0;
  v601[1] = int32x2Formatter;
  v602 = v601;
  v1082 = 1320;
  std::string::__init_copy_ctor_external(&v1083, v80, 0x48uLL);
  v81 = (uint64_t)v602;
  if (!v602)
  {
LABEL_186:
    v1085 = (_QWORD *)v81;
    goto LABEL_188;
  }
  if (v602 != v601)
  {
    v81 = (*(uint64_t (**)(void))(*v602 + 16))();
    goto LABEL_186;
  }
  v1085 = v1084;
  (*(void (**)(uint64_t, _QWORD *))(v601[0] + 24))((uint64_t)v601, v1084);
LABEL_188:
  v82 = (char *)operator new(0x38uLL);
  v596 = xmmword_232D733F0;
  strcpy(v82, "Complete/Balanced Build: NewNodeCount, NewLeafCount");
  v595 = v82;
  v597[0] = &off_2503FFDF0;
  v597[1] = int32x2Formatter;
  v598 = v597;
  v1086 = 1330;
  std::string::__init_copy_ctor_external(&v1087, v82, 0x33uLL);
  v83 = (uint64_t)v598;
  if (!v598)
  {
LABEL_191:
    v1089 = (_QWORD *)v83;
    goto LABEL_193;
  }
  if (v598 != v597)
  {
    v83 = (*(uint64_t (**)(void))(*v598 + 16))();
    goto LABEL_191;
  }
  v1089 = v1088;
  (*(void (**)(uint64_t, _QWORD *))(v597[0] + 24))((uint64_t)v597, v1088);
LABEL_193:
  v84 = (char *)operator new(0x48uLL);
  v592 = xmmword_232D73400;
  strcpy(v84, "Complete/Balanced Build: NewBalancedPrimOffset, NewBalancedPrimCount");
  v591 = v84;
  v593[0] = &off_2503FFDF0;
  v593[1] = int32x2Formatter;
  v594 = v593;
  v1090 = 1331;
  std::string::__init_copy_ctor_external(&v1091, v84, 0x44uLL);
  v85 = (uint64_t)v594;
  if (!v594)
  {
LABEL_196:
    v1093 = (_QWORD *)v85;
    goto LABEL_198;
  }
  if (v594 != v593)
  {
    v85 = (*(uint64_t (**)(void))(*v594 + 16))();
    goto LABEL_196;
  }
  v1093 = v1092;
  (*(void (**)(uint64_t, _QWORD *))(v593[0] + 24))((uint64_t)v593, v1092);
LABEL_198:
  HIBYTE(v588) = 14;
  strcpy((char *)v587, "PrintBVH8Level");
  v589[0] = &off_2503FFDF0;
  v589[1] = intFormatter;
  v590 = v589;
  v1094 = 1536;
  v1095 = *(_OWORD *)v587;
  v1096 = v588;
  v1097[3] = v1097;
  v1097[0] = &off_2503FFDF0;
  v1097[1] = intFormatter;
  HIBYTE(v584[2]) = 17;
  strcpy((char *)v584, "StartNode,EndNode");
  v585[0] = &off_2503FFDF0;
  v585[1] = int32x2Formatter;
  v586 = v585;
  v1098 = 1537;
  v1099 = *(_OWORD *)"StartNode,EndNode";
  v1100 = v584[2];
  v1101[3] = v1101;
  v1101[0] = &off_2503FFDF0;
  v1101[1] = int32x2Formatter;
  v86 = (char *)operator new(0x20uLL);
  v581 = xmmword_232D73330;
  strcpy(v86, "WideNode,InnerChildOffset");
  v580 = v86;
  v582[0] = &off_2503FFDF0;
  v582[1] = int32x2Formatter;
  v583 = v582;
  v1102 = 1538;
  std::string::__init_copy_ctor_external(&v1103, v86, 0x19uLL);
  v87 = (uint64_t)v583;
  if (!v583)
  {
LABEL_201:
    v1105 = (_QWORD *)v87;
    goto LABEL_203;
  }
  if (v583 != v582)
  {
    v87 = (*(uint64_t (**)(void))(*v583 + 16))();
    goto LABEL_201;
  }
  v1105 = v1104;
  (*(void (**)(uint64_t, _QWORD *))(v582[0] + 24))((uint64_t)v582, v1104);
LABEL_203:
  v88 = (char *)operator new(0x20uLL);
  v577 = xmmword_232D732F0;
  strcpy(v88, "WideNode,InnerChildCount");
  v576 = v88;
  v578[0] = &off_2503FFDF0;
  v578[1] = int32x2Formatter;
  v579 = v578;
  v1106 = 1539;
  std::string::__init_copy_ctor_external(&v1107, v88, 0x18uLL);
  v89 = (uint64_t)v579;
  if (!v579)
  {
LABEL_206:
    v1109 = (_QWORD *)v89;
    goto LABEL_208;
  }
  if (v579 != v578)
  {
    v89 = (*(uint64_t (**)(void))(*v579 + 16))();
    goto LABEL_206;
  }
  v1109 = v1108;
  (*(void (**)(uint64_t, _QWORD *))(v578[0] + 24))((uint64_t)v578, v1108);
LABEL_208:
  HIBYTE(v573[2]) = 19;
  strcpy((char *)v573, "WideNode,LeafOffset");
  v574[0] = &off_2503FFDF0;
  v574[1] = int32x2Formatter;
  v575 = v574;
  v1110 = 1540;
  v1111 = *(_OWORD *)"WideNode,LeafOffset";
  v1112 = v573[2];
  v1113[3] = v1113;
  v1113[0] = &off_2503FFDF0;
  v1113[1] = int32x2Formatter;
  HIBYTE(v570[2]) = 18;
  strcpy((char *)v570, "WideNode,LeafCount");
  v571[0] = &off_2503FFDF0;
  v571[1] = int32x2Formatter;
  v572 = v571;
  v1114 = 1541;
  v1115 = *(_OWORD *)"WideNode,LeafCount";
  v1116 = v570[2];
  v1117[3] = v1117;
  v1117[0] = &off_2503FFDF0;
  v1117[1] = int32x2Formatter;
  HIBYTE(v567[2]) = 17;
  strcpy((char *)v567, "WideNode,LeafPair");
  v568[0] = &off_2503FFDF0;
  v568[1] = int32_hex32_Formatter;
  v569 = v568;
  v1118 = 1542;
  v1119 = *(_OWORD *)"WideNode,LeafPair";
  v1120 = v567[2];
  v1121[3] = v1121;
  v1121[0] = &off_2503FFDF0;
  v1121[1] = int32_hex32_Formatter;
  HIBYTE(v564[2]) = 19;
  strcpy((char *)v564, "LeafIndex,PrimIndex");
  v565[0] = &off_2503FFDF0;
  v565[1] = int32x2Formatter;
  v566 = v565;
  v1122 = 1543;
  v1123 = *(_OWORD *)"LeafIndex,PrimIndex";
  v1124 = v564[2];
  v1125[3] = v1125;
  v1125[0] = &off_2503FFDF0;
  v1125[1] = int32x2Formatter;
  HIBYTE(v561[2]) = 19;
  strcpy((char *)v561, "LeafIndex,GeomIndex");
  v562[0] = &off_2503FFDF0;
  v562[1] = int32x2Formatter;
  v563 = v562;
  v1126 = 1544;
  v1127 = *(_OWORD *)"LeafIndex,GeomIndex";
  v1128 = v561[2];
  v1129[3] = v1129;
  v1129[0] = &off_2503FFDF0;
  v1129[1] = int32x2Formatter;
  HIBYTE(v558) = 14;
  strcpy((char *)&v557, "Load InnerNode");
  v559[0] = &off_2503FFDF0;
  v559[1] = intFormatter;
  v560 = v559;
  v1130 = 2048;
  v1131 = v557;
  v1132 = v558;
  v1133[3] = v1133;
  v1133[0] = &off_2503FFDF0;
  v1133[1] = intFormatter;
  v90 = (char *)operator new(0x20uLL);
  v554 = xmmword_232D73360;
  strcpy(v90, "InnerChildCount,NodeLeafSpaeReq");
  v553 = v90;
  v555[0] = &off_2503FFDF0;
  v555[1] = int32x2Formatter;
  v556 = v555;
  v1134 = 2049;
  std::string::__init_copy_ctor_external(&v1135, v90, 0x1FuLL);
  v91 = (uint64_t)v556;
  if (!v556)
  {
LABEL_211:
    v1137 = (_QWORD *)v91;
    goto LABEL_213;
  }
  if (v556 != v555)
  {
    v91 = (*(uint64_t (**)(void))(*v556 + 16))();
    goto LABEL_211;
  }
  v1137 = v1136;
  (*(void (**)(uint64_t, _QWORD *))(v555[0] + 24))((uint64_t)v555, v1136);
LABEL_213:
  HIBYTE(v550[2]) = 16;
  strcpy((char *)v550, "PreClampQTBCount");
  v551[0] = &off_2503FFDF0;
  v551[1] = intFormatter;
  v552 = v551;
  v1138 = 2050;
  v1139 = *(_OWORD *)"PreClampQTBCount";
  v1140 = v550[2];
  v1141[3] = v1141;
  v1141[0] = &off_2503FFDF0;
  v1141[1] = intFormatter;
  v92 = (char *)operator new(0x20uLL);
  v547 = xmmword_232D732E0;
  strcpy(v92, "NodeID, Child Offset Pre QTB");
  v546 = v92;
  v548[0] = &off_2503FFDF0;
  v548[1] = int32x2Formatter;
  v549 = v548;
  v1142 = 2051;
  std::string::__init_copy_ctor_external(&v1143, v92, 0x1CuLL);
  v93 = (uint64_t)v549;
  if (!v549)
  {
LABEL_216:
    v1145 = (_QWORD *)v93;
    goto LABEL_218;
  }
  if (v549 != v548)
  {
    v93 = (*(uint64_t (**)(void))(*v549 + 16))();
    goto LABEL_216;
  }
  v1145 = v1144;
  (*(void (**)(uint64_t, _QWORD *))(v548[0] + 24))((uint64_t)v548, v1144);
LABEL_218:
  v94 = (char *)operator new(0x20uLL);
  v543 = xmmword_232D733A0;
  strcpy(v94, "NodeID, Child Offset Relocated");
  v542 = v94;
  v544[0] = &off_2503FFDF0;
  v544[1] = int32x2Formatter;
  v545 = v544;
  v1146 = 2052;
  std::string::__init_copy_ctor_external(&v1147, v94, 0x1EuLL);
  v95 = (uint64_t)v545;
  if (!v545)
  {
LABEL_221:
    v1149 = (_QWORD *)v95;
    goto LABEL_223;
  }
  if (v545 != v544)
  {
    v95 = (*(uint64_t (**)(void))(*v545 + 16))();
    goto LABEL_221;
  }
  v1149 = v1148;
  (*(void (**)(uint64_t, _QWORD *))(v544[0] + 24))((uint64_t)v544, v1148);
LABEL_223:
  v96 = (char *)operator new(0x20uLL);
  v539 = xmmword_232D73370;
  strcpy(v96, "NodeID, Child Offset Post QTB");
  v538 = v96;
  v540[0] = &off_2503FFDF0;
  v540[1] = int32x2Formatter;
  v541 = v540;
  v1150 = 2053;
  std::string::__init_copy_ctor_external(&v1151, v96, 0x1DuLL);
  v97 = (uint64_t)v541;
  if (!v541)
  {
LABEL_226:
    v1153 = (_QWORD *)v97;
    goto LABEL_228;
  }
  if (v541 != v540)
  {
    v97 = (*(uint64_t (**)(void))(*v541 + 16))();
    goto LABEL_226;
  }
  v1153 = v1152;
  (*(void (**)(uint64_t, _QWORD *))(v540[0] + 24))((uint64_t)v540, v1152);
LABEL_228:
  v98 = (char *)operator new(0x20uLL);
  v535 = xmmword_232D73360;
  strcpy(v98, "QTBExclusiveSum,ClampedQTBCount");
  v534 = v98;
  v536[0] = &off_2503FFDF0;
  v536[1] = int32x2Formatter;
  v537 = v536;
  v1154 = 2054;
  std::string::__init_copy_ctor_external(&v1155, v98, 0x1FuLL);
  v99 = (uint64_t)v537;
  if (!v537)
  {
LABEL_231:
    v1157 = (_QWORD *)v99;
    goto LABEL_233;
  }
  if (v537 != v536)
  {
    v99 = (*(uint64_t (**)(void))(*v537 + 16))();
    goto LABEL_231;
  }
  v1157 = v1156;
  (*(void (**)(uint64_t, _QWORD *))(v536[0] + 24))((uint64_t)v536, v1156);
LABEL_233:
  HIBYTE(v531) = 10;
  strcpy((char *)&v530, "QTBNodeEnd");
  v532[0] = &off_2503FFDF0;
  v532[1] = intFormatter;
  v533 = v532;
  v1158 = 2055;
  v1159 = v530;
  v1160 = v531;
  v1161[3] = v1161;
  v1161[0] = &off_2503FFDF0;
  v1161[1] = intFormatter;
  v100 = (char *)operator new(0x28uLL);
  v527 = xmmword_232D732D0;
  strcpy(v100, "AssignOffset: InnerNode,ChildNode");
  v526 = v100;
  v528[0] = &off_2503FFDF0;
  v528[1] = int32x2Formatter;
  v529 = v528;
  v1162 = 2064;
  std::string::__init_copy_ctor_external(&v1163, v100, 0x21uLL);
  v101 = (uint64_t)v529;
  if (!v529)
  {
LABEL_236:
    v1165 = (_QWORD *)v101;
    goto LABEL_238;
  }
  if (v529 != v528)
  {
    v101 = (*(uint64_t (**)(void))(*v529 + 16))();
    goto LABEL_236;
  }
  v1165 = v1164;
  (*(void (**)(uint64_t, _QWORD *))(v528[0] + 24))((uint64_t)v528, v1164);
LABEL_238:
  v102 = (char *)operator new(0x20uLL);
  v523 = xmmword_232D73380;
  strcpy(v102, "InnerNode,FirstChildOffset");
  v522 = v102;
  v524[0] = &off_2503FFDF0;
  v524[1] = int32x2Formatter;
  v525 = v524;
  v1166 = 2096;
  std::string::__init_copy_ctor_external(&v1167, v102, 0x1AuLL);
  v103 = (uint64_t)v525;
  if (!v525)
  {
LABEL_241:
    v1169 = (_QWORD *)v103;
    goto LABEL_243;
  }
  if (v525 != v524)
  {
    v103 = (*(uint64_t (**)(void))(*v525 + 16))();
    goto LABEL_241;
  }
  v1169 = v1168;
  (*(void (**)(uint64_t, _QWORD *))(v524[0] + 24))((uint64_t)v524, v1168);
LABEL_243:
  strcpy((char *)v519, "ChildInnerNode,BOffset");
  HIBYTE(v519[2]) = 22;
  v520[0] = &off_2503FFDF0;
  v520[1] = int32x2Formatter;
  v521 = v520;
  v1170 = 2097;
  v1171 = *(_OWORD *)"ChildInnerNode,BOffset";
  v1172 = v519[2];
  v1173[3] = v1173;
  v1173[0] = &off_2503FFDF0;
  v1173[1] = int32x2Formatter;
  strcpy((char *)v516, "ChildLeafIndex,BOffset");
  HIBYTE(v516[2]) = 22;
  v517[0] = &off_2503FFDF0;
  v517[1] = int32x2Formatter;
  v518 = v517;
  v1174 = 2098;
  v1175 = *(_OWORD *)"ChildLeafIndex,BOffset";
  v1176 = v516[2];
  v1177[3] = v1177;
  v1177[0] = &off_2503FFDF0;
  v1177[1] = int32x2Formatter;
  v104 = (char *)operator new(0x20uLL);
  v513 = xmmword_232D733A0;
  strcpy(v104, "ChildLeafOffset,ChildLeafCount");
  v512 = v104;
  v514[0] = &off_2503FFDF0;
  v514[1] = int32x2Formatter;
  v515 = v514;
  v1178 = 2099;
  std::string::__init_copy_ctor_external(&v1179, v104, 0x1EuLL);
  v105 = (uint64_t)v515;
  if (!v515)
  {
LABEL_246:
    v1181 = (_QWORD *)v105;
    goto LABEL_248;
  }
  if (v515 != v514)
  {
    v105 = (*(uint64_t (**)(void))(*v515 + 16))();
    goto LABEL_246;
  }
  v1181 = v1180;
  (*(void (**)(uint64_t, _QWORD *))(v514[0] + 24))((uint64_t)v514, v1180);
LABEL_248:
  v106 = (char *)operator new(0x20uLL);
  v509 = xmmword_232D73380;
  strcpy(v106, "Lower,Upper Subtree offset");
  v508 = v106;
  v510[0] = &off_2503FFDF0;
  v510[1] = hex32x2Formatter;
  v511 = v510;
  v1182 = 2560;
  std::string::__init_copy_ctor_external(&v1183, v106, 0x1AuLL);
  v107 = (uint64_t)v511;
  if (!v511)
  {
LABEL_251:
    v1185 = (_QWORD *)v107;
    goto LABEL_253;
  }
  if (v511 != v510)
  {
    v107 = (*(uint64_t (**)(void))(*v511 + 16))();
    goto LABEL_251;
  }
  v1185 = v1184;
  (*(void (**)(uint64_t, _QWORD *))(v510[0] + 24))((uint64_t)v510, v1184);
LABEL_253:
  strcpy((char *)v505, "LeafCount,MaxSpanCount");
  HIBYTE(v505[2]) = 22;
  v506[0] = &off_2503FFDF0;
  v506[1] = int32x2Formatter;
  v507 = v506;
  v1186 = 2816;
  v1187 = *(_OWORD *)"LeafCount,MaxSpanCount";
  v1188 = v505[2];
  v1189[3] = v1189;
  v1189[0] = &off_2503FFDF0;
  v1189[1] = int32x2Formatter;
  HIBYTE(v502[2]) = 19;
  strcpy((char *)v502, "LeafIndex,PrimIndex");
  v503[0] = &off_2503FFDF0;
  v503[1] = int32x2Formatter;
  v504 = v503;
  v1190 = 3072;
  v1191 = *(_OWORD *)"LeafIndex,PrimIndex";
  v1192 = v502[2];
  v1193[3] = v1193;
  v1193[0] = &off_2503FFDF0;
  v1193[1] = int32x2Formatter;
  v499[23] = 19;
  strcpy(v499, "LeafIndex,GeomIndex");
  v500[0] = &off_2503FFDF0;
  v500[1] = int32x2Formatter;
  v501 = v500;
  v1194 = 3073;
  v1195 = *(_OWORD *)v499;
  v1196 = *(_QWORD *)&v499[16];
  v1197[3] = v1197;
  v1197[0] = &off_2503FFDF0;
  v1197[1] = int32x2Formatter;
  HIBYTE(v496[2]) = 17;
  strcpy((char *)v496, "LeafIndex,Invalid");
  v497[0] = &off_2503FFDF0;
  v497[1] = int32x2Formatter;
  v498 = v497;
  v1198 = 3074;
  v1199 = *(_OWORD *)"LeafIndex,Invalid";
  v1200 = v496[2];
  v1201[3] = v1201;
  v1201[0] = &off_2503FFDF0;
  v1201[1] = int32x2Formatter;
  v108 = (char *)operator new(0x20uLL);
  v493 = xmmword_232D73340;
  strcpy(v108, "WorkQueueCount, OutputCount");
  v492 = v108;
  v494[0] = &off_2503FFDF0;
  v494[1] = int32x2Formatter;
  v495 = v494;
  v1202 = 3328;
  std::string::__init_copy_ctor_external(&v1203, v108, 0x1BuLL);
  v109 = (uint64_t)v495;
  if (!v495)
  {
LABEL_256:
    v1205 = (_QWORD *)v109;
    goto LABEL_258;
  }
  if (v495 != v494)
  {
    v109 = (*(uint64_t (**)(void))(*v495 + 16))();
    goto LABEL_256;
  }
  v1205 = v1204;
  (*(void (**)(uint64_t, _QWORD *))(v494[0] + 24))((uint64_t)v494, v1204);
LABEL_258:
  HIBYTE(v489[2]) = 19;
  strcpy((char *)v489, "InRange Start,Count");
  v490[0] = &off_2503FFDF0;
  v490[1] = int32x2Formatter;
  v491 = v490;
  v1206 = 3329;
  v1207 = *(_OWORD *)"InRange Start,Count";
  v1208 = v489[2];
  v1209[3] = v1209;
  v1209[0] = &off_2503FFDF0;
  v1209[1] = int32x2Formatter;
  HIBYTE(v486[2]) = 21;
  strcpy((char *)v486, "LeftRange Start,Count");
  v487[0] = &off_2503FFDF0;
  v487[1] = int32x2Formatter;
  v488 = v487;
  v1210 = 3330;
  v1211 = *(_OWORD *)"LeftRange Start,Count";
  v1212 = v486[2];
  v1213[3] = v1213;
  v1213[0] = &off_2503FFDF0;
  v1213[1] = int32x2Formatter;
  strcpy((char *)v483, "RightRange Start,Count");
  HIBYTE(v483[2]) = 22;
  v484[0] = &off_2503FFDF0;
  v484[1] = int32x2Formatter;
  v485 = v484;
  v1214 = 3331;
  v1215 = *(_OWORD *)"RightRange Start,Count";
  v1216 = v483[2];
  v1217[3] = v1217;
  v1217[0] = &off_2503FFDF0;
  v1217[1] = int32x2Formatter;
  v110 = (char *)operator new(0x20uLL);
  v480 = xmmword_232D73330;
  strcpy(v110, "newOutCount, newWorkCount");
  v479 = v110;
  v481[0] = &off_2503FFDF0;
  v481[1] = int32x2Formatter;
  v482 = v481;
  v1218 = 3332;
  std::string::__init_copy_ctor_external(&v1219, v110, 0x19uLL);
  v111 = (uint64_t)v482;
  if (!v482)
  {
LABEL_261:
    v1221 = (_QWORD *)v111;
    goto LABEL_263;
  }
  if (v482 != v481)
  {
    v111 = (*(uint64_t (**)(void))(*v482 + 16))();
    goto LABEL_261;
  }
  v1221 = v1220;
  (*(void (**)(uint64_t, _QWORD *))(v481[0] + 24))((uint64_t)v481, v1220);
LABEL_263:
  v112 = (char *)operator new(0x20uLL);
  v476 = xmmword_232D73330;
  strcpy(v112, "newOutIndex, newWorkIndex");
  v475 = v112;
  v477[0] = &off_2503FFDF0;
  v477[1] = int32x2Formatter;
  v478 = v477;
  v1222 = 3333;
  std::string::__init_copy_ctor_external(&v1223, v112, 0x19uLL);
  v113 = (uint64_t)v478;
  if (!v478)
  {
LABEL_266:
    v1225 = (_QWORD *)v113;
    goto LABEL_268;
  }
  if (v478 != v477)
  {
    v113 = (*(uint64_t (**)(void))(*v478 + 16))();
    goto LABEL_266;
  }
  v1225 = v1224;
  (*(void (**)(uint64_t, _QWORD *))(v477[0] + 24))((uint64_t)v477, v1224);
LABEL_268:
  v114 = (char *)operator new(0x28uLL);
  v472 = xmmword_232D73390;
  strcpy(v114, "Partitions: LeftCount,RightCount");
  v471 = v114;
  v473[0] = &off_2503FFDF0;
  v473[1] = int32x2Formatter;
  v474 = v473;
  v1226 = 3334;
  std::string::__init_copy_ctor_external(&v1227, v114, 0x20uLL);
  v115 = (uint64_t)v474;
  if (!v474)
  {
LABEL_271:
    v1229 = (_QWORD *)v115;
    goto LABEL_273;
  }
  if (v474 != v473)
  {
    v115 = (*(uint64_t (**)(void))(*v474 + 16))();
    goto LABEL_271;
  }
  v1229 = v1228;
  (*(void (**)(uint64_t, _QWORD *))(v473[0] + 24))((uint64_t)v473, v1228);
LABEL_273:
  v116 = (char *)operator new(0x28uLL);
  v468 = xmmword_232D73410;
  strcpy(v116, "PartitionsTooSmall: NextPartitionValue");
  v467 = v116;
  v469[0] = &off_2503FFDF0;
  v469[1] = hex32Formatter;
  v470 = v469;
  v1230 = 3335;
  std::string::__init_copy_ctor_external(&v1231, v116, 0x26uLL);
  v117 = (uint64_t)v470;
  if (!v470)
  {
LABEL_276:
    v1233 = (_QWORD *)v117;
    goto LABEL_278;
  }
  if (v470 != v469)
  {
    v117 = (*(uint64_t (**)(void))(*v470 + 16))();
    goto LABEL_276;
  }
  v1233 = v1232;
  (*(void (**)(uint64_t, _QWORD *))(v469[0] + 24))((uint64_t)v469, v1232);
LABEL_278:
  HIBYTE(v464[2]) = 18;
  strcpy((char *)v464, "NextPartitionValue");
  v465[0] = &off_2503FFDF0;
  v465[1] = hex32Formatter;
  v466 = v465;
  v1234 = 3336;
  v1235 = *(_OWORD *)"NextPartitionValue";
  v1236 = v464[2];
  v1237[3] = v1237;
  v1237[0] = &off_2503FFDF0;
  v1237[1] = hex32Formatter;
  HIBYTE(v461) = 13;
  strcpy((char *)&v460, "FinalOutCount");
  v462[0] = &off_2503FFDF0;
  v462[1] = intFormatter;
  v463 = v462;
  v1238 = 3344;
  v1239 = v460;
  v1240 = v461;
  v1241[3] = v1241;
  v1241[0] = &off_2503FFDF0;
  v1241[1] = intFormatter;
  HIBYTE(v457[2]) = 21;
  strcpy((char *)v457, "InputStart,InputCount");
  v458[0] = &off_2503FFDF0;
  v458[1] = int32x2Formatter;
  v459 = v458;
  v1242 = 3840;
  v1243 = *(_OWORD *)"InputStart,InputCount";
  v1244 = v457[2];
  v1245[3] = v1245;
  v1245[0] = &off_2503FFDF0;
  v1245[1] = int32x2Formatter;
  v118 = (char *)operator new(0x20uLL);
  v454 = xmmword_232D73330;
  strcpy(v118, "Local,Lower Subtree Index");
  v453 = v118;
  v455[0] = &off_2503FFDF0;
  v455[1] = int32x2Formatter;
  v456 = v455;
  v1246 = 3841;
  std::string::__init_copy_ctor_external(&v1247, v118, 0x19uLL);
  v119 = (uint64_t)v456;
  if (v456)
  {
    if (v456 == v455)
    {
      v1249 = v1248;
      (*(void (**)(uint64_t, _QWORD *))(v455[0] + 24))((uint64_t)v455, v1248);
      goto LABEL_283;
    }
    v119 = (*(uint64_t (**)(void))(*v456 + 16))();
  }
  v1249 = (_QWORD *)v119;
LABEL_283:
  v120 = 0;
  v121 = 0;
  HIBYTE(v450[2]) = 19;
  strcpy((char *)v450, "LeafStart,LeafCount");
  v451[0] = &off_2503FFDF0;
  v451[1] = int32x2Formatter;
  v452 = v451;
  v1250 = 3842;
  v1251 = *(_OWORD *)"LeafStart,LeafCount";
  v1252 = v450[2];
  v1253[3] = v1253;
  v1253[0] = &off_2503FFDF0;
  v1253[1] = int32x2Formatter;
  __p[23] = 17;
  strcpy(__p, "LowerSubtreeCount");
  v448[0] = &off_2503FFDF0;
  v448[1] = intFormatter;
  v449 = v448;
  v1254 = 3843;
  v1255 = *(_OWORD *)"LowerSubtreeCount";
  v1256 = *(_QWORD *)&__p[16];
  v1258[0] = v1257;
  v1257[0] = &off_2503FFDF0;
  v1257[1] = intFormatter;
  v433 = 0;
  v122 = &v432;
  v432 = 0;
  for (i = &v432; ; v122 = i)
  {
    v123 = &v836[8 * v121];
    v124 = &v432;
    if (v122 == &v432)
      goto LABEL_290;
    v125 = v120;
    v126 = &v432;
    if (v120)
    {
      do
      {
        v124 = (uint64_t **)v125;
        v125 = (uint64_t *)v125[1];
      }
      while (v125);
    }
    else
    {
      do
      {
        v124 = (uint64_t **)v126[2];
        v369 = *v124 == (uint64_t *)v126;
        v126 = v124;
      }
      while (v369);
    }
    v127 = *(_DWORD *)v123;
    if (*((_DWORD *)v124 + 8) < *(_DWORD *)v123)
    {
LABEL_290:
      if (v120)
        v128 = v124;
      else
        v128 = &v432;
      if (v120)
        v129 = v124 + 1;
      else
        v129 = &v432;
    }
    else
    {
      v128 = &v432;
      v129 = &v432;
      if (v120)
      {
        v129 = &v432;
        while (1)
        {
          while (1)
          {
            v128 = (uint64_t **)v120;
            v134 = *((_DWORD *)v120 + 8);
            if (v127 >= v134)
              break;
            v120 = *v128;
            v129 = v128;
            if (!*v128)
              goto LABEL_297;
          }
          if (v134 >= v127)
            break;
          v129 = v128 + 1;
          v120 = v128[1];
          if (!v120)
            goto LABEL_297;
        }
      }
    }
    if (!*v129)
    {
LABEL_297:
      v130 = (char *)operator new(0x60uLL);
      v131 = v130;
      v434 = (uint64_t *)v130;
      v435 = &v432;
      v436 = 0;
      *((_DWORD *)v130 + 8) = *(_DWORD *)v123;
      v132 = &v836[8 * v121];
      v133 = (const std::string::value_type **)(v132 + 1);
      if (*((char *)v123 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v130 + 40), *v133, v132[2]);
      }
      else
      {
        *(_OWORD *)(v130 + 40) = *(_OWORD *)v133;
        *((_QWORD *)v130 + 7) = v132[3];
      }
      v135 = &v836[8 * v121];
      v136 = v135[7];
      if (v136)
      {
        if ((_QWORD *)v136 == v135 + 4)
        {
          *((_QWORD *)v131 + 11) = v131 + 64;
          (*(void (**)(uint64_t))(*(_QWORD *)v136 + 24))(v136);
          goto LABEL_312;
        }
        v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
      }
      *((_QWORD *)v131 + 11) = v136;
LABEL_312:
      v436 = 1;
      v137 = v434;
      *v434 = 0;
      v137[1] = 0;
      v137[2] = (uint64_t)v128;
      *v129 = v137;
      if (*i)
      {
        i = (uint64_t **)*i;
        v137 = *v129;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v432, v137);
      ++v433;
    }
    if (++v121 == 110)
      break;
    v120 = v432;
  }
  v138 = 0;
  v139 = &v833;
  v140 = v830;
  v141 = v448;
  do
  {
    v142 = (_QWORD *)v1258[v138];
    if (&v1257[v138] == v142)
    {
      v142 = &v1257[v138];
      v143 = 4;
    }
    else
    {
      if (!v142)
        goto LABEL_324;
      v143 = 5;
    }
    (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_324:
    if (*((char *)&v1256 + v138 * 8 + 7) < 0)
      operator delete(*(void **)((char *)&v1255 + v138 * 8));
    v138 -= 8;
  }
  while (v138 != -880);
  if (v449 == v448)
  {
    v147 = 4;
    v144 = v422;
    v145 = v442;
    v146 = v438;
LABEL_330:
    (*(void (**)(_QWORD *))(*v141 + 8 * v147))(v141);
  }
  else
  {
    v144 = v422;
    v145 = v442;
    v146 = v438;
    if (v449)
    {
      v147 = 5;
      v141 = v449;
      goto LABEL_330;
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v148 = v451;
  v149 = v429;
  v150 = v428;
  if (v452 == v451)
  {
    v151 = 4;
LABEL_337:
    (*(void (**)(void))(*v148 + 8 * v151))();
  }
  else if (v452)
  {
    v151 = 5;
    v148 = v452;
    goto LABEL_337;
  }
  if (SHIBYTE(v450[2]) < 0)
    operator delete(v450[0]);
  v152 = v455;
  if (v456 == v455)
  {
    v153 = 4;
LABEL_344:
    (*(void (**)(void))(*v152 + 8 * v153))();
  }
  else if (v456)
  {
    v153 = 5;
    v152 = v456;
    goto LABEL_344;
  }
  if (SHIBYTE(v454) < 0)
    operator delete(v453);
  v154 = v458;
  if (v459 == v458)
  {
    v155 = 4;
LABEL_351:
    (*(void (**)(void))(*v154 + 8 * v155))();
  }
  else if (v459)
  {
    v155 = 5;
    v154 = v459;
    goto LABEL_351;
  }
  if (SHIBYTE(v457[2]) < 0)
    operator delete(v457[0]);
  v156 = v462;
  if (v463 == v462)
  {
    v157 = 4;
LABEL_358:
    (*(void (**)(void))(*v156 + 8 * v157))();
  }
  else if (v463)
  {
    v157 = 5;
    v156 = v463;
    goto LABEL_358;
  }
  if (SHIBYTE(v461) < 0)
    operator delete((void *)v460);
  v158 = v465;
  if (v466 == v465)
  {
    v159 = 4;
LABEL_365:
    (*(void (**)(void))(*v158 + 8 * v159))();
  }
  else if (v466)
  {
    v159 = 5;
    v158 = v466;
    goto LABEL_365;
  }
  if (SHIBYTE(v464[2]) < 0)
    operator delete(v464[0]);
  v160 = v469;
  if (v470 == v469)
  {
    v161 = 4;
LABEL_372:
    (*(void (**)(void))(*v160 + 8 * v161))();
  }
  else if (v470)
  {
    v161 = 5;
    v160 = v470;
    goto LABEL_372;
  }
  if (SHIBYTE(v468) < 0)
    operator delete(v467);
  v162 = v473;
  if (v474 == v473)
  {
    v163 = 4;
LABEL_379:
    (*(void (**)(void))(*v162 + 8 * v163))();
  }
  else if (v474)
  {
    v163 = 5;
    v162 = v474;
    goto LABEL_379;
  }
  if (SHIBYTE(v472) < 0)
    operator delete(v471);
  v164 = v477;
  if (v478 == v477)
  {
    v165 = 4;
LABEL_386:
    (*(void (**)(void))(*v164 + 8 * v165))();
  }
  else if (v478)
  {
    v165 = 5;
    v164 = v478;
    goto LABEL_386;
  }
  if (SHIBYTE(v476) < 0)
    operator delete(v475);
  v166 = v481;
  if (v482 == v481)
  {
    v167 = 4;
LABEL_393:
    (*(void (**)(void))(*v166 + 8 * v167))();
  }
  else if (v482)
  {
    v167 = 5;
    v166 = v482;
    goto LABEL_393;
  }
  if (SHIBYTE(v480) < 0)
    operator delete(v479);
  v168 = v484;
  if (v485 == v484)
  {
    v169 = 4;
LABEL_400:
    (*(void (**)(void))(*v168 + 8 * v169))();
  }
  else if (v485)
  {
    v169 = 5;
    v168 = v485;
    goto LABEL_400;
  }
  if (SHIBYTE(v483[2]) < 0)
    operator delete(v483[0]);
  v170 = v487;
  if (v488 == v487)
  {
    v171 = 4;
LABEL_407:
    (*(void (**)(void))(*v170 + 8 * v171))();
  }
  else if (v488)
  {
    v171 = 5;
    v170 = v488;
    goto LABEL_407;
  }
  if (SHIBYTE(v486[2]) < 0)
    operator delete(v486[0]);
  v172 = v490;
  if (v491 == v490)
  {
    v173 = 4;
LABEL_414:
    (*(void (**)(void))(*v172 + 8 * v173))();
  }
  else if (v491)
  {
    v173 = 5;
    v172 = v491;
    goto LABEL_414;
  }
  if (SHIBYTE(v489[2]) < 0)
    operator delete(v489[0]);
  v174 = v494;
  if (v495 == v494)
  {
    v175 = 4;
LABEL_421:
    (*(void (**)(void))(*v174 + 8 * v175))();
  }
  else if (v495)
  {
    v175 = 5;
    v174 = v495;
    goto LABEL_421;
  }
  if (SHIBYTE(v493) < 0)
    operator delete(v492);
  v176 = v497;
  if (v498 == v497)
  {
    v177 = 4;
LABEL_428:
    (*(void (**)(void))(*v176 + 8 * v177))();
  }
  else if (v498)
  {
    v177 = 5;
    v176 = v498;
    goto LABEL_428;
  }
  if (SHIBYTE(v496[2]) < 0)
    operator delete(v496[0]);
  v178 = v500;
  if (v501 == v500)
  {
    v179 = 4;
LABEL_435:
    (*(void (**)(void))(*v178 + 8 * v179))();
  }
  else if (v501)
  {
    v179 = 5;
    v178 = v501;
    goto LABEL_435;
  }
  if ((v499[23] & 0x80000000) != 0)
    operator delete(*(void **)v499);
  v180 = v503;
  if (v504 == v503)
  {
    v181 = 4;
LABEL_442:
    (*(void (**)(void))(*v180 + 8 * v181))();
  }
  else if (v504)
  {
    v181 = 5;
    v180 = v504;
    goto LABEL_442;
  }
  if (SHIBYTE(v502[2]) < 0)
    operator delete(v502[0]);
  v182 = v506;
  if (v507 == v506)
  {
    v183 = 4;
LABEL_449:
    (*(void (**)(void))(*v182 + 8 * v183))();
  }
  else if (v507)
  {
    v183 = 5;
    v182 = v507;
    goto LABEL_449;
  }
  if (SHIBYTE(v505[2]) < 0)
    operator delete(v505[0]);
  v184 = v510;
  if (v511 == v510)
  {
    v185 = 4;
LABEL_456:
    (*(void (**)(void))(*v184 + 8 * v185))();
  }
  else if (v511)
  {
    v185 = 5;
    v184 = v511;
    goto LABEL_456;
  }
  if (SHIBYTE(v509) < 0)
    operator delete(v508);
  v186 = v514;
  if (v515 == v514)
  {
    v187 = 4;
LABEL_463:
    (*(void (**)(void))(*v186 + 8 * v187))();
  }
  else if (v515)
  {
    v187 = 5;
    v186 = v515;
    goto LABEL_463;
  }
  if (SHIBYTE(v513) < 0)
    operator delete(v512);
  v188 = v517;
  if (v518 == v517)
  {
    v189 = 4;
LABEL_470:
    (*(void (**)(void))(*v188 + 8 * v189))();
  }
  else if (v518)
  {
    v189 = 5;
    v188 = v518;
    goto LABEL_470;
  }
  if (SHIBYTE(v516[2]) < 0)
    operator delete(v516[0]);
  v190 = v520;
  if (v521 == v520)
  {
    v191 = 4;
LABEL_477:
    (*(void (**)(void))(*v190 + 8 * v191))();
  }
  else if (v521)
  {
    v191 = 5;
    v190 = v521;
    goto LABEL_477;
  }
  if (SHIBYTE(v519[2]) < 0)
    operator delete(v519[0]);
  v192 = v524;
  if (v525 == v524)
  {
    v193 = 4;
LABEL_484:
    (*(void (**)(void))(*v192 + 8 * v193))();
  }
  else if (v525)
  {
    v193 = 5;
    v192 = v525;
    goto LABEL_484;
  }
  if (SHIBYTE(v523) < 0)
    operator delete(v522);
  v194 = v528;
  if (v529 == v528)
  {
    v195 = 4;
LABEL_491:
    (*(void (**)(void))(*v194 + 8 * v195))();
  }
  else if (v529)
  {
    v195 = 5;
    v194 = v529;
    goto LABEL_491;
  }
  if (SHIBYTE(v527) < 0)
    operator delete(v526);
  v196 = v532;
  if (v533 == v532)
  {
    v197 = 4;
LABEL_498:
    (*(void (**)(void))(*v196 + 8 * v197))();
  }
  else if (v533)
  {
    v197 = 5;
    v196 = v533;
    goto LABEL_498;
  }
  if (SHIBYTE(v531) < 0)
    operator delete((void *)v530);
  v198 = v536;
  if (v537 == v536)
  {
    v199 = 4;
LABEL_505:
    (*(void (**)(void))(*v198 + 8 * v199))();
  }
  else if (v537)
  {
    v199 = 5;
    v198 = v537;
    goto LABEL_505;
  }
  if (SHIBYTE(v535) < 0)
    operator delete(v534);
  v200 = v540;
  if (v541 == v540)
  {
    v201 = 4;
LABEL_512:
    (*(void (**)(void))(*v200 + 8 * v201))();
  }
  else if (v541)
  {
    v201 = 5;
    v200 = v541;
    goto LABEL_512;
  }
  if (SHIBYTE(v539) < 0)
    operator delete(v538);
  v202 = v544;
  if (v545 == v544)
  {
    v203 = 4;
LABEL_519:
    (*(void (**)(void))(*v202 + 8 * v203))();
  }
  else if (v545)
  {
    v203 = 5;
    v202 = v545;
    goto LABEL_519;
  }
  if (SHIBYTE(v543) < 0)
    operator delete(v542);
  v204 = v548;
  if (v549 == v548)
  {
    v205 = 4;
LABEL_526:
    (*(void (**)(void))(*v204 + 8 * v205))();
  }
  else if (v549)
  {
    v205 = 5;
    v204 = v549;
    goto LABEL_526;
  }
  if (SHIBYTE(v547) < 0)
    operator delete(v546);
  v206 = v551;
  if (v552 == v551)
  {
    v207 = 4;
LABEL_533:
    (*(void (**)(void))(*v206 + 8 * v207))();
  }
  else if (v552)
  {
    v207 = 5;
    v206 = v552;
    goto LABEL_533;
  }
  if (SHIBYTE(v550[2]) < 0)
    operator delete(v550[0]);
  v208 = v555;
  if (v556 == v555)
  {
    v209 = 4;
LABEL_540:
    (*(void (**)(void))(*v208 + 8 * v209))();
  }
  else if (v556)
  {
    v209 = 5;
    v208 = v556;
    goto LABEL_540;
  }
  if (SHIBYTE(v554) < 0)
    operator delete(v553);
  v210 = v559;
  if (v560 == v559)
  {
    v211 = 4;
LABEL_547:
    (*(void (**)(void))(*v210 + 8 * v211))();
  }
  else if (v560)
  {
    v211 = 5;
    v210 = v560;
    goto LABEL_547;
  }
  if (SHIBYTE(v558) < 0)
    operator delete((void *)v557);
  v212 = v562;
  if (v563 == v562)
  {
    v213 = 4;
LABEL_554:
    (*(void (**)(void))(*v212 + 8 * v213))();
  }
  else if (v563)
  {
    v213 = 5;
    v212 = v563;
    goto LABEL_554;
  }
  if (SHIBYTE(v561[2]) < 0)
    operator delete(v561[0]);
  v214 = v565;
  if (v566 == v565)
  {
    v215 = 4;
LABEL_561:
    (*(void (**)(void))(*v214 + 8 * v215))();
  }
  else if (v566)
  {
    v215 = 5;
    v214 = v566;
    goto LABEL_561;
  }
  if (SHIBYTE(v564[2]) < 0)
    operator delete(v564[0]);
  v216 = v568;
  if (v569 == v568)
  {
    v217 = 4;
LABEL_568:
    (*(void (**)(void))(*v216 + 8 * v217))();
  }
  else if (v569)
  {
    v217 = 5;
    v216 = v569;
    goto LABEL_568;
  }
  if (SHIBYTE(v567[2]) < 0)
    operator delete(v567[0]);
  v218 = v571;
  if (v572 == v571)
  {
    v219 = 4;
LABEL_575:
    (*(void (**)(void))(*v218 + 8 * v219))();
  }
  else if (v572)
  {
    v219 = 5;
    v218 = v572;
    goto LABEL_575;
  }
  if (SHIBYTE(v570[2]) < 0)
    operator delete(v570[0]);
  v220 = v574;
  if (v575 == v574)
  {
    v221 = 4;
LABEL_582:
    (*(void (**)(void))(*v220 + 8 * v221))();
  }
  else if (v575)
  {
    v221 = 5;
    v220 = v575;
    goto LABEL_582;
  }
  if (SHIBYTE(v573[2]) < 0)
    operator delete(v573[0]);
  v222 = v578;
  if (v579 == v578)
  {
    v223 = 4;
LABEL_589:
    (*(void (**)(void))(*v222 + 8 * v223))();
  }
  else if (v579)
  {
    v223 = 5;
    v222 = v579;
    goto LABEL_589;
  }
  if (SHIBYTE(v577) < 0)
    operator delete(v576);
  v224 = v582;
  if (v583 == v582)
  {
    v225 = 4;
LABEL_596:
    (*(void (**)(void))(*v224 + 8 * v225))();
  }
  else if (v583)
  {
    v225 = 5;
    v224 = v583;
    goto LABEL_596;
  }
  if (SHIBYTE(v581) < 0)
    operator delete(v580);
  v226 = v585;
  if (v586 == v585)
  {
    v227 = 4;
LABEL_603:
    (*(void (**)(void))(*v226 + 8 * v227))();
  }
  else if (v586)
  {
    v227 = 5;
    v226 = v586;
    goto LABEL_603;
  }
  if (SHIBYTE(v584[2]) < 0)
    operator delete(v584[0]);
  v228 = v589;
  if (v590 == v589)
  {
    v229 = 4;
LABEL_610:
    (*(void (**)(void))(*v228 + 8 * v229))();
  }
  else if (v590)
  {
    v229 = 5;
    v228 = v590;
    goto LABEL_610;
  }
  if (SHIBYTE(v588) < 0)
    operator delete(v587[0]);
  v230 = v593;
  if (v594 == v593)
  {
    v231 = 4;
LABEL_617:
    (*(void (**)(void))(*v230 + 8 * v231))();
  }
  else if (v594)
  {
    v231 = 5;
    v230 = v594;
    goto LABEL_617;
  }
  if (SHIBYTE(v592) < 0)
    operator delete(v591);
  v232 = v597;
  if (v598 == v597)
  {
    v233 = 4;
LABEL_624:
    (*(void (**)(void))(*v232 + 8 * v233))();
  }
  else if (v598)
  {
    v233 = 5;
    v232 = v598;
    goto LABEL_624;
  }
  if (SHIBYTE(v596) < 0)
    operator delete(v595);
  v234 = v601;
  if (v602 == v601)
  {
    v235 = 4;
LABEL_631:
    (*(void (**)(void))(*v234 + 8 * v235))();
  }
  else if (v602)
  {
    v235 = 5;
    v234 = v602;
    goto LABEL_631;
  }
  if (SHIBYTE(v600) < 0)
    operator delete(v599);
  v236 = v605;
  if (v606 == v605)
  {
    v237 = 4;
LABEL_638:
    (*(void (**)(void))(*v236 + 8 * v237))();
  }
  else if (v606)
  {
    v237 = 5;
    v236 = v606;
    goto LABEL_638;
  }
  if (SHIBYTE(v604) < 0)
    operator delete(v603);
  v238 = v609;
  if (v610 == v609)
  {
    v239 = 4;
LABEL_645:
    (*(void (**)(void))(*v238 + 8 * v239))();
  }
  else if (v610)
  {
    v239 = 5;
    v238 = v610;
    goto LABEL_645;
  }
  if (SHIBYTE(v608) < 0)
    operator delete(v607);
  v240 = v613;
  if (v614 == v613)
  {
    v241 = 4;
LABEL_652:
    (*(void (**)(void))(*v240 + 8 * v241))();
  }
  else if (v614)
  {
    v241 = 5;
    v240 = v614;
    goto LABEL_652;
  }
  if (SHIBYTE(v612) < 0)
    operator delete(v611);
  v242 = v617;
  if (v618 == v617)
  {
    v243 = 4;
LABEL_659:
    (*(void (**)(void))(*v242 + 8 * v243))();
  }
  else if (v618)
  {
    v243 = 5;
    v242 = v618;
    goto LABEL_659;
  }
  if (SHIBYTE(v616) < 0)
    operator delete(v615);
  v244 = v621;
  if (v622 == v621)
  {
    v245 = 4;
LABEL_666:
    (*(void (**)(void))(*v244 + 8 * v245))();
  }
  else if (v622)
  {
    v245 = 5;
    v244 = v622;
    goto LABEL_666;
  }
  if (SHIBYTE(v620) < 0)
    operator delete(v619);
  v246 = v625;
  if (v626 == v625)
  {
    v247 = 4;
LABEL_673:
    (*(void (**)(void))(*v246 + 8 * v247))();
  }
  else if (v626)
  {
    v247 = 5;
    v246 = v626;
    goto LABEL_673;
  }
  if (SHIBYTE(v624) < 0)
    operator delete(v623);
  v248 = v628;
  if (v629 == v628)
  {
    v249 = 4;
LABEL_680:
    (*(void (**)(void))(*v248 + 8 * v249))();
  }
  else if (v629)
  {
    v249 = 5;
    v248 = v629;
    goto LABEL_680;
  }
  if (SHIBYTE(v627[2]) < 0)
    operator delete(v627[0]);
  v250 = v632;
  if (v633 == v632)
  {
    v251 = 4;
LABEL_687:
    (*(void (**)(void))(*v250 + 8 * v251))();
  }
  else if (v633)
  {
    v251 = 5;
    v250 = v633;
    goto LABEL_687;
  }
  if (SHIBYTE(v631) < 0)
    operator delete(v630);
  v252 = v636;
  if (v637 == v636)
  {
    v253 = 4;
LABEL_694:
    (*(void (**)(void))(*v252 + 8 * v253))();
  }
  else if (v637)
  {
    v253 = 5;
    v252 = v637;
    goto LABEL_694;
  }
  if (SHIBYTE(v635) < 0)
    operator delete(v634);
  v254 = v640;
  if (v641 == v640)
  {
    v255 = 4;
LABEL_701:
    (*(void (**)(void))(*v254 + 8 * v255))();
  }
  else if (v641)
  {
    v255 = 5;
    v254 = v641;
    goto LABEL_701;
  }
  if (SHIBYTE(v639) < 0)
    operator delete(v638);
  v256 = v643;
  if (v644 == v643)
  {
    v257 = 4;
LABEL_708:
    (*(void (**)(void))(*v256 + 8 * v257))();
  }
  else if (v644)
  {
    v257 = 5;
    v256 = v644;
    goto LABEL_708;
  }
  if ((v642[23] & 0x80000000) != 0)
    operator delete(*(void **)v642);
  v258 = v647;
  if (v648 == v647)
  {
    v259 = 4;
LABEL_715:
    (*(void (**)(void))(*v258 + 8 * v259))();
  }
  else if (v648)
  {
    v259 = 5;
    v258 = v648;
    goto LABEL_715;
  }
  if (SHIBYTE(v646) < 0)
    operator delete(v645);
  v260 = v650;
  if (v651 == v650)
  {
    v261 = 4;
LABEL_722:
    (*(void (**)(void))(*v260 + 8 * v261))();
  }
  else if (v651)
  {
    v261 = 5;
    v260 = v651;
    goto LABEL_722;
  }
  if (SHIBYTE(v649[2]) < 0)
    operator delete(v649[0]);
  v262 = v654;
  if (v655 == v654)
  {
    v263 = 4;
LABEL_729:
    (*(void (**)(void))(*v262 + 8 * v263))();
  }
  else if (v655)
  {
    v263 = 5;
    v262 = v655;
    goto LABEL_729;
  }
  if (SHIBYTE(v653) < 0)
    operator delete(v652);
  v264 = v658;
  if (v659 == v658)
  {
    v265 = 4;
LABEL_736:
    (*(void (**)(void))(*v264 + 8 * v265))();
  }
  else if (v659)
  {
    v265 = 5;
    v264 = v659;
    goto LABEL_736;
  }
  if (SHIBYTE(v657) < 0)
    operator delete((void *)v656);
  v266 = v661;
  if (v662 == v661)
  {
    v267 = 4;
LABEL_743:
    (*(void (**)(void))(*v266 + 8 * v267))();
  }
  else if (v662)
  {
    v267 = 5;
    v266 = v662;
    goto LABEL_743;
  }
  if (SHIBYTE(v660[2]) < 0)
    operator delete(v660[0]);
  v268 = v664;
  if (v665 == v664)
  {
    v269 = 4;
LABEL_750:
    (*(void (**)(void))(*v268 + 8 * v269))();
  }
  else if (v665)
  {
    v269 = 5;
    v268 = v665;
    goto LABEL_750;
  }
  if (SHIBYTE(v663[2]) < 0)
    operator delete(v663[0]);
  v270 = v667;
  if (v668 == v667)
  {
    v271 = 4;
LABEL_757:
    (*(void (**)(void))(*v270 + 8 * v271))();
  }
  else if (v668)
  {
    v271 = 5;
    v270 = v668;
    goto LABEL_757;
  }
  if (SHIBYTE(v666[2]) < 0)
    operator delete(v666[0]);
  v272 = v671;
  if (v672 == v671)
  {
    v273 = 4;
LABEL_764:
    (*(void (**)(void))(*v272 + 8 * v273))();
  }
  else if (v672)
  {
    v273 = 5;
    v272 = v672;
    goto LABEL_764;
  }
  if (SHIBYTE(v670) < 0)
    operator delete((void *)v669);
  v274 = v675;
  if (v676 == v675)
  {
    v275 = 4;
LABEL_771:
    (*(void (**)(void))(*v274 + 8 * v275))();
  }
  else if (v676)
  {
    v275 = 5;
    v274 = v676;
    goto LABEL_771;
  }
  if (SHIBYTE(v674) < 0)
    operator delete(v673);
  v276 = v679;
  if (v680 == v679)
  {
    v277 = 4;
LABEL_778:
    (*(void (**)(void))(*v276 + 8 * v277))();
  }
  else if (v680)
  {
    v277 = 5;
    v276 = v680;
    goto LABEL_778;
  }
  if (SHIBYTE(v678) < 0)
    operator delete(v677);
  v278 = v683;
  if (v684 == v683)
  {
    v279 = 4;
LABEL_785:
    (*(void (**)(void))(*v278 + 8 * v279))();
  }
  else if (v684)
  {
    v279 = 5;
    v278 = v684;
    goto LABEL_785;
  }
  if (SHIBYTE(v682) < 0)
    operator delete(v681);
  v280 = v687;
  if (v688 == v687)
  {
    v281 = 4;
LABEL_792:
    (*(void (**)(void))(*v280 + 8 * v281))();
  }
  else if (v688)
  {
    v281 = 5;
    v280 = v688;
    goto LABEL_792;
  }
  if (SHIBYTE(v686) < 0)
    operator delete(v685);
  v282 = v690;
  if (v691 == v690)
  {
    v283 = 4;
LABEL_799:
    (*(void (**)(void))(*v282 + 8 * v283))();
  }
  else if (v691)
  {
    v283 = 5;
    v282 = v691;
    goto LABEL_799;
  }
  if (SHIBYTE(v689[2]) < 0)
    operator delete(v689[0]);
  v284 = v693;
  if (v694 == v693)
  {
    v285 = 4;
LABEL_806:
    (*(void (**)(void))(*v284 + 8 * v285))();
  }
  else if (v694)
  {
    v285 = 5;
    v284 = v694;
    goto LABEL_806;
  }
  if (SHIBYTE(v692[2]) < 0)
    operator delete(v692[0]);
  v286 = v696;
  if (v697 == v696)
  {
    v287 = 4;
LABEL_813:
    (*(void (**)(void))(*v286 + 8 * v287))();
  }
  else if (v697)
  {
    v287 = 5;
    v286 = v697;
    goto LABEL_813;
  }
  if (SHIBYTE(v695[2]) < 0)
    operator delete(v695[0]);
  v288 = v699;
  if (v700 == v699)
  {
    v289 = 4;
LABEL_820:
    (*(void (**)(void))(*v288 + 8 * v289))();
  }
  else if (v700)
  {
    v289 = 5;
    v288 = v700;
    goto LABEL_820;
  }
  if (SHIBYTE(v698[2]) < 0)
    operator delete(v698[0]);
  v290 = v703;
  if (v704 == v703)
  {
    v291 = 4;
LABEL_827:
    (*(void (**)(void))(*v290 + 8 * v291))();
  }
  else if (v704)
  {
    v291 = 5;
    v290 = v704;
    goto LABEL_827;
  }
  if (SHIBYTE(v702) < 0)
    operator delete(v701);
  v292 = v707;
  if (v708 == v707)
  {
    v293 = 4;
LABEL_834:
    (*(void (**)(void))(*v292 + 8 * v293))();
  }
  else if (v708)
  {
    v293 = 5;
    v292 = v708;
    goto LABEL_834;
  }
  if (SHIBYTE(v706) < 0)
    operator delete(v705);
  v294 = v710;
  if (v711 == v710)
  {
    v295 = 4;
LABEL_841:
    (*(void (**)(void))(*v294 + 8 * v295))();
  }
  else if (v711)
  {
    v295 = 5;
    v294 = v711;
    goto LABEL_841;
  }
  if (SHIBYTE(v709[2]) < 0)
    operator delete(v709[0]);
  v296 = v714;
  if (v715 == v714)
  {
    v297 = 4;
LABEL_848:
    (*(void (**)(void))(*v296 + 8 * v297))();
  }
  else if (v715)
  {
    v297 = 5;
    v296 = v715;
    goto LABEL_848;
  }
  if (SHIBYTE(v713) < 0)
    operator delete(v712);
  v298 = v718;
  if (v719 == v718)
  {
    v299 = 4;
LABEL_855:
    (*(void (**)(void))(*v298 + 8 * v299))();
  }
  else if (v719)
  {
    v299 = 5;
    v298 = v719;
    goto LABEL_855;
  }
  if (SHIBYTE(v717) < 0)
    operator delete(v716);
  v300 = v722;
  if (v723 == v722)
  {
    v301 = 4;
LABEL_862:
    (*(void (**)(void))(*v300 + 8 * v301))();
  }
  else if (v723)
  {
    v301 = 5;
    v300 = v723;
    goto LABEL_862;
  }
  if (SHIBYTE(v721) < 0)
    operator delete(v720);
  v302 = v725;
  if (v726 == v725)
  {
    v303 = 4;
LABEL_869:
    (*(void (**)(void))(*v302 + 8 * v303))();
  }
  else if (v726)
  {
    v303 = 5;
    v302 = v726;
    goto LABEL_869;
  }
  if (SHIBYTE(v724[2]) < 0)
    operator delete(v724[0]);
  v304 = v728;
  if (v729 == v728)
  {
    v305 = 4;
LABEL_876:
    (*(void (**)(void))(*v304 + 8 * v305))();
  }
  else if (v729)
  {
    v305 = 5;
    v304 = v729;
    goto LABEL_876;
  }
  if (SHIBYTE(v727[2]) < 0)
    operator delete(v727[0]);
  v306 = v732;
  if (v733 == v732)
  {
    v307 = 4;
LABEL_883:
    (*(void (**)(void))(*v306 + 8 * v307))();
  }
  else if (v733)
  {
    v307 = 5;
    v306 = v733;
    goto LABEL_883;
  }
  if (SHIBYTE(v731) < 0)
    operator delete((void *)v730);
  v308 = v735;
  if (v736 == v735)
  {
    v309 = 4;
LABEL_890:
    (*(void (**)(void))(*v308 + 8 * v309))();
  }
  else if (v736)
  {
    v309 = 5;
    v308 = v736;
    goto LABEL_890;
  }
  if (SHIBYTE(v734[2]) < 0)
    operator delete(v734[0]);
  v310 = v739;
  if (v740 == v739)
  {
    v311 = 4;
LABEL_897:
    (*(void (**)(void))(*v310 + 8 * v311))();
  }
  else if (v740)
  {
    v311 = 5;
    v310 = v740;
    goto LABEL_897;
  }
  if (SHIBYTE(v738) < 0)
    operator delete(v737);
  v312 = v743;
  if (v744 == v743)
  {
    v313 = 4;
LABEL_904:
    (*(void (**)(void))(*v312 + 8 * v313))();
  }
  else if (v744)
  {
    v313 = 5;
    v312 = v744;
    goto LABEL_904;
  }
  if (SHIBYTE(v742) < 0)
    operator delete(v741);
  v314 = v747;
  if (v748 == v747)
  {
    v315 = 4;
LABEL_911:
    (*(void (**)(void))(*v314 + 8 * v315))();
  }
  else if (v748)
  {
    v315 = 5;
    v314 = v748;
    goto LABEL_911;
  }
  if (SHIBYTE(v746) < 0)
    operator delete(v745);
  v316 = v751;
  if (v752 == v751)
  {
    v317 = 4;
LABEL_918:
    (*(void (**)(void))(*v316 + 8 * v317))();
  }
  else if (v752)
  {
    v317 = 5;
    v316 = v752;
    goto LABEL_918;
  }
  if (SHIBYTE(v750) < 0)
    operator delete(v749[0]);
  v318 = v755;
  if (v756 == v755)
  {
    v319 = 4;
LABEL_925:
    (*(void (**)(void))(*v318 + 8 * v319))();
  }
  else if (v756)
  {
    v319 = 5;
    v318 = v756;
    goto LABEL_925;
  }
  if (SHIBYTE(v754) < 0)
    operator delete(v753);
  v320 = v759;
  if (v760 == v759)
  {
    v321 = 4;
LABEL_932:
    (*(void (**)(void))(*v320 + 8 * v321))();
  }
  else if (v760)
  {
    v321 = 5;
    v320 = v760;
    goto LABEL_932;
  }
  if (SHIBYTE(v758) < 0)
    operator delete(v757);
  v322 = v763;
  if (v764 == v763)
  {
    v323 = 4;
LABEL_939:
    (*(void (**)(void))(*v322 + 8 * v323))();
  }
  else if (v764)
  {
    v323 = 5;
    v322 = v764;
    goto LABEL_939;
  }
  if (SHIBYTE(v762) < 0)
    operator delete(v761);
  v324 = v767;
  if (v768 == v767)
  {
    v325 = 4;
LABEL_946:
    (*(void (**)(void))(*v324 + 8 * v325))();
  }
  else if (v768)
  {
    v325 = 5;
    v324 = v768;
    goto LABEL_946;
  }
  if (SHIBYTE(v766) < 0)
    operator delete(v765);
  v326 = v771;
  if (v772 == v771)
  {
    v327 = 4;
LABEL_953:
    (*(void (**)(void))(*v326 + 8 * v327))();
  }
  else if (v772)
  {
    v327 = 5;
    v326 = v772;
    goto LABEL_953;
  }
  if (SHIBYTE(v770) < 0)
    operator delete(v769);
  v328 = v774;
  if (v775 == v774)
  {
    v329 = 4;
LABEL_960:
    (*(void (**)(void))(*v328 + 8 * v329))();
  }
  else if (v775)
  {
    v329 = 5;
    v328 = v775;
    goto LABEL_960;
  }
  if (SHIBYTE(v773[2]) < 0)
    operator delete(v773[0]);
  v330 = v777;
  if (v778 == v777)
  {
    v331 = 4;
LABEL_967:
    (*(void (**)(void))(*v330 + 8 * v331))();
  }
  else if (v778)
  {
    v331 = 5;
    v330 = v778;
    goto LABEL_967;
  }
  if (SHIBYTE(v776[2]) < 0)
    operator delete(v776[0]);
  v332 = v781;
  if (v782 == v781)
  {
    v333 = 4;
LABEL_974:
    (*(void (**)(void))(*v332 + 8 * v333))();
  }
  else if (v782)
  {
    v333 = 5;
    v332 = v782;
    goto LABEL_974;
  }
  if (SHIBYTE(v780) < 0)
    operator delete(v779);
  v334 = v784;
  if (v785 == v784)
  {
    v335 = 4;
LABEL_981:
    (*(void (**)(void))(*v334 + 8 * v335))();
  }
  else if (v785)
  {
    v335 = 5;
    v334 = v785;
    goto LABEL_981;
  }
  if (SHIBYTE(v783[2]) < 0)
    operator delete(v783[0]);
  v336 = v788;
  if (v789 == v788)
  {
    v337 = 4;
LABEL_988:
    (*(void (**)(void))(*v336 + 8 * v337))();
  }
  else if (v789)
  {
    v337 = 5;
    v336 = v789;
    goto LABEL_988;
  }
  if (SHIBYTE(v787) < 0)
    operator delete(v786);
  v338 = v791;
  if (v792 == v791)
  {
    v339 = 4;
LABEL_995:
    (*(void (**)(void))(*v338 + 8 * v339))();
  }
  else if (v792)
  {
    v339 = 5;
    v338 = v792;
    goto LABEL_995;
  }
  if (SHIBYTE(v790[2]) < 0)
    operator delete(v790[0]);
  v340 = v794;
  if (v795 == v794)
  {
    v341 = 4;
LABEL_1002:
    (*(void (**)(void))(*v340 + 8 * v341))();
  }
  else if (v795)
  {
    v341 = 5;
    v340 = v795;
    goto LABEL_1002;
  }
  if (SHIBYTE(v793[2]) < 0)
    operator delete(v793[0]);
  v342 = v798;
  if (v799 == v798)
  {
    v343 = 4;
LABEL_1009:
    (*(void (**)(void))(*v342 + 8 * v343))();
  }
  else if (v799)
  {
    v343 = 5;
    v342 = v799;
    goto LABEL_1009;
  }
  if (SHIBYTE(v797) < 0)
    operator delete((void *)v796);
  v344 = v801;
  if (v802 == v801)
  {
    v345 = 4;
LABEL_1016:
    (*(void (**)(void))(*v344 + 8 * v345))();
  }
  else if (v802)
  {
    v345 = 5;
    v344 = v802;
    goto LABEL_1016;
  }
  if (SHIBYTE(v800[2]) < 0)
    operator delete(v800[0]);
  v346 = v805;
  if (v806 == v805)
  {
    v347 = 4;
LABEL_1023:
    (*(void (**)(void))(*v346 + 8 * v347))();
  }
  else if (v806)
  {
    v347 = 5;
    v346 = v806;
    goto LABEL_1023;
  }
  if (SHIBYTE(v804) < 0)
    operator delete(v803);
  v348 = v808;
  if (v809 == v808)
  {
    v349 = 4;
LABEL_1030:
    (*(void (**)(void))(*v348 + 8 * v349))();
  }
  else if (v809)
  {
    v349 = 5;
    v348 = v809;
    goto LABEL_1030;
  }
  if (SHIBYTE(v807[2]) < 0)
    operator delete(v807[0]);
  v350 = v812;
  if (v813 == v812)
  {
    v351 = 4;
LABEL_1037:
    (*(void (**)(void))(*v350 + 8 * v351))();
  }
  else if (v813)
  {
    v351 = 5;
    v350 = v813;
    goto LABEL_1037;
  }
  if (SHIBYTE(v811) < 0)
    operator delete((void *)v810);
  v352 = v816;
  if (v817 == v816)
  {
    v353 = 4;
LABEL_1044:
    (*(void (**)(void))(*v352 + 8 * v353))();
  }
  else if (v817)
  {
    v353 = 5;
    v352 = v817;
    goto LABEL_1044;
  }
  if (SHIBYTE(v815) < 0)
    operator delete(v814[0]);
  v354 = v820;
  if (v821 == v820)
  {
    v355 = 4;
LABEL_1051:
    (*(void (**)(void))(*v354 + 8 * v355))();
  }
  else if (v821)
  {
    v355 = 5;
    v354 = v821;
    goto LABEL_1051;
  }
  if (SHIBYTE(v819) < 0)
    operator delete((void *)v818);
  v356 = v824;
  if (v825 == v824)
  {
    v357 = 4;
LABEL_1058:
    (*(void (**)(void))(*v356 + 8 * v357))();
  }
  else if (v825)
  {
    v357 = 5;
    v356 = v825;
    goto LABEL_1058;
  }
  if (SHIBYTE(v823) < 0)
    operator delete(v822[0]);
  v358 = v827;
  if (v828 == v827)
  {
    v359 = 4;
LABEL_1065:
    (*(void (**)(void))(*v358 + 8 * v359))();
  }
  else if (v828)
  {
    v359 = 5;
    v358 = v828;
    goto LABEL_1065;
  }
  if ((v826[23] & 0x80000000) != 0)
    operator delete(*(void **)v826);
  if (v831 == v830)
  {
    v360 = 4;
LABEL_1072:
    (*(void (**)(_QWORD *))(*v140 + 8 * v360))(v140);
  }
  else if (v831)
  {
    v360 = 5;
    v140 = v831;
    goto LABEL_1072;
  }
  if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v829.__r_.__value_.__l.__data_);
  if (v835 == &v833)
  {
    v361 = 4;
LABEL_1079:
    ((void (*)(uint64_t (***)()))(*v139)[v361])(v139);
  }
  else if (v835)
  {
    v361 = 5;
    v139 = v835;
    goto LABEL_1079;
  }
  if (SHIBYTE(v832.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v832.__r_.__value_.__l.__data_);
  if (v439 == v438)
  {
    v362 = 4;
LABEL_1086:
    (*(void (**)(_QWORD *))(*v146 + 8 * v362))(v146);
  }
  else if (v439)
  {
    v362 = 5;
    v146 = v439;
    goto LABEL_1086;
  }
  if (SHIBYTE(v437[2]) < 0)
    operator delete(v437[0]);
  if (v443 == v442)
  {
    v363 = 4;
LABEL_1093:
    (*(void (**)(_QWORD *))(*v145 + 8 * v363))(v145);
  }
  else if (v443)
  {
    v363 = 5;
    v145 = v443;
    goto LABEL_1093;
  }
  if (SHIBYTE(v441) < 0)
  {
    operator delete((void *)v440);
    if (!v144)
      goto LABEL_1211;
  }
  else if (!v144)
  {
    goto LABEL_1211;
  }
  *((_BYTE *)&v832.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v832, "Unknown");
  v833 = &off_2503FFDF0;
  v834 = hex64Formatter;
  v835 = &v833;
  fwrite("*** Debug Log ***\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v836[0]) = 0;
    _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: *** Debug Log ***\n", (uint8_t *)v836, 2u);
  }
  v364 = v427;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    LOWORD(v836[0]) = 0;
    _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: *** Debug Log ***\n", (uint8_t *)v836, 2u);
  }
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%d entries (%d nontemporal)\n", *((_DWORD *)v429 + 96), *((_DWORD *)v429 + 97));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v418 = *((_DWORD *)v429 + 96);
    v419 = *((_DWORD *)v429 + 97);
    LODWORD(v836[0]) = 67109376;
    HIDWORD(v836[0]) = v418;
    LOWORD(v836[1]) = 1024;
    *(_DWORD *)((char *)&v836[1] + 2) = v419;
    _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: %d entries (%d nontemporal)\n", (uint8_t *)v836, 0xEu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v365 = *((_DWORD *)v429 + 96);
    v366 = *((_DWORD *)v429 + 97);
    LODWORD(v836[0]) = 67109376;
    HIDWORD(v836[0]) = v365;
    LOWORD(v836[1]) = 1024;
    *(_DWORD *)((char *)&v836[1] + 2) = v366;
    _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: %d entries (%d nontemporal)\n", (uint8_t *)v836, 0xEu);
  }
  LODWORD(v367) = *((_DWORD *)v429 + 96);
  v368 = *((_DWORD *)v429 + 97);
  v369 = (_DWORD)v367 == v368;
  if (v367 <= v368)
    LODWORD(v367) = *((_DWORD *)v429 + 97);
  if (!v369)
    LODWORD(v367) = v367 + 4;
  if ((int)v367 >= 0x10000)
    v367 = 0x10000;
  else
    v367 = v367;
  v430 = v367;
  if ((_DWORD)v367)
  {
    v370 = 0;
    v426 = *MEMORY[0x24BEDB7F0];
    v425 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v424 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v423 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      memcpy(v836, &v149[288 * v370 + 392], sizeof(v836));
      if (HIDWORD(v836[0]) == v364 && LODWORD(v836[0]) == v150)
      {
        v372 = HIDWORD(v836[2]);
        if (HIDWORD(v836[2]) != 1)
          break;
      }
LABEL_1116:
      if (++v370 == v430)
        goto LABEL_1200;
    }
    v373 = v432;
    if (v432)
    {
      v374 = &v432;
      do
      {
        v375 = v373;
        v376 = v374;
        v377 = *((_DWORD *)v373 + 8);
        v378 = (uint64_t **)(v373 + 1);
        if (v377 >= HIDWORD(v836[2]))
        {
          v378 = (uint64_t **)v375;
          v374 = (uint64_t **)v375;
        }
        v373 = *v378;
      }
      while (v373);
      if (v374 != &v432)
      {
        v379 = v377 >= HIDWORD(v836[2]) ? v375 : (uint64_t *)v376;
        if (HIDWORD(v836[2]) >= *((_DWORD *)v379 + 8))
        {
          memset(&v829, 0, sizeof(v829));
          v831 = 0;
          if (v377 >= HIDWORD(v836[2]))
            v399 = (const std::string *)(v375 + 5);
          else
            v399 = (const std::string *)(v376 + 5);
          std::string::operator=(&v829, v399);
          if (v377 >= v372)
            v400 = v375;
          else
            v400 = v376;
          if (v377 >= v372)
            v401 = v375 + 8;
          else
            v401 = (uint64_t *)(v376 + 8);
          v402 = (uint64_t *)v400[11];
          if (v402)
          {
            if (v402 == v401)
            {
              v442[0] = &v440;
              (*(void (**)(void))(v400[8] + 24))();
              goto LABEL_1137;
            }
            v380 = (*(uint64_t (**)(uint64_t *))(*v402 + 16))(v402);
          }
          else
          {
            v380 = 0;
          }
LABEL_1136:
          v442[0] = v380;
          goto LABEL_1137;
        }
      }
    }
    memset(&v829, 0, sizeof(v829));
    v831 = 0;
    std::string::operator=(&v829, &v832);
    v380 = (uint64_t)v835;
    if (!v835)
      goto LABEL_1136;
    if (v835 != &v833)
    {
      v380 = (*v835)[2]();
      goto LABEL_1136;
    }
    v442[0] = &v440;
    ((void (*)(uint64_t (***)(), __int128 *))v833[3])(&v833, &v440);
LABEL_1137:
    std::__function::__value_func<std::string ()(unsigned long long)>::swap[abi:nn180100](&v440, v830);
    v381 = (__int128 *)v442[0];
    if ((__int128 *)v442[0] == &v440)
    {
      v381 = &v440;
      v382 = 4;
LABEL_1141:
      (*(void (**)(void))(*(_QWORD *)v381 + 8 * v382))();
    }
    else if (v442[0])
    {
      v382 = 5;
      goto LABEL_1141;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v440);
    v383 = &v829;
    if ((v829.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v383 = (std::string *)v829.__r_.__value_.__r.__words[0];
    v384 = v836[3];
    snprintf((char *)v437, 0x100uLL, "%s, logID 0x%08x, logSlot %d, Dispatch[%u], TG[%u,%u,%u], Wave%u, Mask%#010x\n", (const char *)v383, HIDWORD(v836[2]), v370, LODWORD(v836[0]), HIDWORD(v836[0]), LODWORD(v836[1]), HIDWORD(v836[1]), LODWORD(v836[2]), LODWORD(v836[3]));
    v385 = strlen((const char *)v437);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v441, (uint64_t)v437, v385);
    for (j = 0; j != 32; ++j)
    {
      if (((v384 >> j) & 1) != 0)
      {
        *(_QWORD *)((char *)&v442[2] + *(_QWORD *)(v441 - 24)) = 19;
        v822[0] = (void *)v836[j + 4];
        if (!v831)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        (*(void (**)(_BYTE *__return_ptr, _QWORD *, void **))(*v831 + 48))(v826, v831, v822);
        if (v826[23] >= 0)
          v387 = v826;
        else
          v387 = *(_BYTE **)v826;
        if (v826[23] >= 0)
          v388 = v826[23];
        else
          v388 = *(_QWORD *)&v826[8];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v441, (uint64_t)v387, v388);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v441, (uint64_t)"; ", 2);
      }
      else
      {
        v826[23] = 19;
        strcpy(v826, "                   ");
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v441, (uint64_t)v826, 19);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v441, (uint64_t)"; ", 2);
      }
      if ((v826[23] & 0x80000000) != 0)
        operator delete(*(void **)v826);
      if ((~(_DWORD)j & 7) == 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v442[-1] + *(_QWORD *)(v441 - 24)));
        v389 = std::locale::use_facet((const std::locale *)v826, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v389->__vftable[2].~facet_0)(v389, 10);
        std::locale::~locale((std::locale *)v826);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v442[-1] + *(_QWORD *)(v441 - 24)));
    v390 = MEMORY[0x24BDACB70];
    v391 = std::locale::use_facet((const std::locale *)v826, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v391->__vftable[2].~facet_0)(v391, 10);
    std::locale::~locale((std::locale *)v826);
    std::ostream::put();
    std::ostream::flush();
    v392 = (FILE *)*MEMORY[0x24BDAC8D8];
    std::stringbuf::str();
    if (v826[23] >= 0)
      v393 = v826;
    else
      v393 = *(const char **)v826;
    fputs(v393, v392);
    if ((v826[23] & 0x80000000) != 0)
      operator delete(*(void **)v826);
    v394 = os_log_type_enabled(v390, OS_LOG_TYPE_ERROR);
    v395 = v390;
    v149 = v429;
    v150 = v428;
    if (v394)
    {
      std::stringbuf::str();
      v403 = v826;
      if (v826[23] < 0)
        v403 = *(_BYTE **)v826;
      LODWORD(v822[0]) = 136315138;
      *(void **)((char *)v822 + 4) = v403;
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: %s", (uint8_t *)v822, 0xCu);
      if ((v826[23] & 0x80000000) != 0)
        operator delete(*(void **)v826);
      v395 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v395, OS_LOG_TYPE_INFO))
    {
      std::stringbuf::str();
      v396 = v826;
      if (v826[23] < 0)
        v396 = *(_BYTE **)v826;
      LODWORD(v822[0]) = 136315138;
      *(void **)((char *)v822 + 4) = v396;
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: %s", (uint8_t *)v822, 0xCu);
      if ((v826[23] & 0x80000000) != 0)
        operator delete(*(void **)v826);
    }
    *(_QWORD *)&v440 = v426;
    *(_QWORD *)((char *)&v440 + *(_QWORD *)(v426 - 24)) = v425;
    v441 = v424;
    v442[0] = v423;
    if (v445 < 0)
      operator delete(v444);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x234927E9C](&v446);
    v397 = v831;
    if (v831 == v830)
    {
      v397 = v830;
      v398 = 4;
LABEL_1177:
      (*(void (**)(void))(*v397 + 8 * v398))();
    }
    else if (v831)
    {
      v398 = 5;
      goto LABEL_1177;
    }
    if (SHIBYTE(v829.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v829.__r_.__value_.__l.__data_);
    v364 = v427;
    goto LABEL_1116;
  }
LABEL_1200:
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "**** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", v149 + 16, *((_DWORD *)v149 + 2), *((_DWORD *)v149 + 3));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v420 = *((_DWORD *)v149 + 2);
    v421 = *((_DWORD *)v149 + 3);
    LODWORD(v836[0]) = 136315650;
    *(_QWORD *)((char *)v836 + 4) = v149 + 16;
    WORD2(v836[1]) = 1024;
    *(_DWORD *)((char *)&v836[1] + 6) = v420;
    WORD1(v836[2]) = 1024;
    HIDWORD(v836[2]) = v421;
    _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v836, 0x18u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v404 = *((_DWORD *)v149 + 2);
    v405 = *((_DWORD *)v149 + 3);
    LODWORD(v836[0]) = 136315650;
    *(_QWORD *)((char *)v836 + 4) = v149 + 16;
    WORD2(v836[1]) = 1024;
    *(_DWORD *)((char *)&v836[1] + 6) = v404;
    WORD1(v836[2]) = 1024;
    HIDWORD(v836[2]) = v405;
    _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v836, 0x18u);
  }
  v406 = &v833;
  if (v835 == &v833)
  {
    v407 = 4;
LABEL_1208:
    (*v406)[v407]();
  }
  else if (v835)
  {
    v407 = 5;
    v406 = v835;
    goto LABEL_1208;
  }
  if (SHIBYTE(v832.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v832.__r_.__value_.__l.__data_);
LABEL_1211:
  std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy((char *)v432);
}

void sub_232C267E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45)
{
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;

  if (*(char *)(v45 + 2752) < 0)
    operator delete((void *)STACK[0x3D58]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xA88]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xAC0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xAF8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xB30]);
  STACK[0x770] = a45;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xB70]);
  v50 = STACK[0x770];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xBA8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xBE0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xC18]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xC50]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xC90]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xCD0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xD08]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xD40]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xD80]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xDC0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xE00]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xE40]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xE78]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xEB0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xEF0]);
  STACK[0x210] = v50;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xF28]);
  STACK[0x270] = STACK[0x210];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xF60]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xF98]);
  STACK[0x278] = STACK[0x270];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xFD0]);
  STACK[0x280] = STACK[0x278];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1008]);
  STACK[0x288] = STACK[0x280];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1040]);
  STACK[0x290] = STACK[0x288];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1078]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x10B0]);
  STACK[0x298] = STACK[0x290];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x10F0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1128]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1160]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x11A0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x11E0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1220]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1260]);
  STACK[0x2A0] = STACK[0x298];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x12A0]);
  STACK[0x2A8] = STACK[0x2A0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x12D8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1310]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1350]);
  STACK[0x2B0] = STACK[0x2A8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1388]);
  STACK[0x2B8] = STACK[0x2B0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x13C0]);
  STACK[0x2C0] = STACK[0x2B8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x13F8]);
  STACK[0x2C8] = STACK[0x2C0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1430]);
  STACK[0x2D0] = STACK[0x2C8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1468]);
  STACK[0x2D8] = STACK[0x2D0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x14A0]);
  STACK[0x2E0] = STACK[0x2D8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x14D8]);
  STACK[0x2E8] = STACK[0x2E0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1510]);
  STACK[0x2F0] = STACK[0x2E8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1548]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1580]);
  STACK[0x2F8] = STACK[0x2F0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x15B8]);
  STACK[0x300] = STACK[0x2F8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x15F0]);
  STACK[0x308] = STACK[0x300];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1628]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1660]);
  STACK[0x310] = STACK[0x308];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1698]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x16D0]);
  STACK[0x318] = STACK[0x310];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1710]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1748]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1780]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x17C0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1800]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1838]);
  STACK[0x320] = STACK[0x318];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1870]);
  STACK[0x328] = STACK[0x320];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x18A8]);
  STACK[0x330] = STACK[0x328];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x18E0]);
  STACK[0x338] = STACK[0x330];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1918]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1950]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1990]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x19D0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1A10]);
  v47 = STACK[0x338];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1A50]);
  STACK[0x340] = v47;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1A88]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1AC0]);
  STACK[0x348] = STACK[0x340];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1AF8]);
  STACK[0x350] = STACK[0x348];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1B30]);
  STACK[0x358] = STACK[0x350];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1B68]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1BA0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1BE0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1C18]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1C50]);
  STACK[0x360] = STACK[0x358];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1C88]);
  STACK[0x368] = STACK[0x360];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1CC0]);
  STACK[0x370] = STACK[0x368];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1CF8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1D30]);
  STACK[0x378] = STACK[0x370];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1D68]);
  STACK[0x380] = STACK[0x378];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1DA0]);
  STACK[0x388] = STACK[0x380];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1DD8]);
  STACK[0x390] = STACK[0x388];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1E10]);
  STACK[0x398] = STACK[0x390];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1E48]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1E80]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1EC0]);
  v48 = STACK[0x398];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1EF8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1F30]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1F68]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1FA0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1FE0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2018]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2050]);
  STACK[0x3A0] = v48;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2088]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x20C0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x20F8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2130]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2168]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x21A0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x21E0]);
  v49 = (unint64_t *)STACK[0x3A0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2218]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2250]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x7F0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x8F8]);
  while (v49 != &STACK[0x2290])
  {
    v49 -= 8;
    std::pair<unsigned int const,DebugLogEntryMetadata>::~pair((uint64_t)v49);
  }
  _Unwind_Resume(a1);
}

void nothingFormatter(_BYTE *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

uint64_t int32x2Formatter()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v3);
  *(_QWORD *)((char *)&v4[3] + *(_QWORD *)(v4[0] - 24)) = 8;
  v0 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v0, (uint64_t)",", 1);
  *(_QWORD *)((char *)&v4[3] + *(_QWORD *)(v4[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB7F0];
  v1 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v4[0] = v1;
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x234927E9C](&v6);
}

void sub_232C27F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t hex64Formatter()
{
  uint64_t v0;
  char *v1;
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  std::locale v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"0x", 2);
  v0 = v6[0];
  v1 = (char *)v6 + *(_QWORD *)(v6[0] - 24);
  if (*((_DWORD *)v1 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[0] - 24)));
    v2 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
    v0 = v6[0];
  }
  *((_DWORD *)v1 + 36) = 48;
  *(_QWORD *)((char *)&v6[3] + *(_QWORD *)(v0 - 24)) = 16;
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v0 - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v0 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x234927E9C](&v8);
}

void sub_232C28158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t int32_hex32_Formatter()
{
  uint64_t v0;
  const std::ios_base *v1;
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  std::locale v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  *(_QWORD *)((char *)&v6[3] + *(_QWORD *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  v0 = v6[0];
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v6[0] - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (const std::ios_base *)((char *)v6 + *(_QWORD *)(v0 - 24));
  if (v1[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v1);
    v2 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
  }
  v1[1].__fmtflags_ = 48;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)",0x", 3);
  *(_QWORD *)((char *)&v6[3] + *(_QWORD *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x234927E9C](&v8);
}

void sub_232C28304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t hex32x2Formatter()
{
  uint64_t v0;
  const std::ios_base *v1;
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  std::locale v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  v0 = v6[0];
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v6[0] - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (const std::ios_base *)((char *)v6 + *(_QWORD *)(v0 - 24));
  if (v1[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v1);
    v2 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
  }
  v1[1].__fmtflags_ = 48;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"0x", 2);
  *(_QWORD *)((char *)&v6[3] + *(_QWORD *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)",0x", 3);
  *(_QWORD *)((char *)&v6[3] + *(_QWORD *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x234927E9C](&v8);
}

void sub_232C284C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t hex32Formatter()
{
  uint64_t v0;
  const std::ios_base *v1;
  const std::locale::facet *v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  std::locale v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  v0 = v6[0];
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v6[0] - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (const std::ios_base *)((char *)v6 + *(_QWORD *)(v0 - 24));
  if (v1[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v1);
    v2 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
  }
  v1[1].__fmtflags_ = 48;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"0x", 2);
  *(_QWORD *)((char *)&v6[3] + *(_QWORD *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x234927E9C](&v8);
}

void sub_232C28650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int const,DebugLogEntryMetadata>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void DebugLogEntryMetadata::~DebugLogEntryMetadata(DebugLogEntryMetadata *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

_QWORD *std::__function::__value_func<std::string ()(unsigned long long)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_232C289A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x234927E9C](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  void *locale;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];
  std::locale __b;
  size_t v26;
  int64_t v27;

  MEMORY[0x234927DAC](v24, a1);
  if (v24[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_30;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v26 = v16;
        v27 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v27) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      if (v27 >= 0)
        locale = &__b;
      else
        locale = __b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v7 + 96))(v7, locale, v16);
      v22 = v21;
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__b.__locale_);
        if (v22 != v16)
        {
LABEL_30:
          std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
          goto LABEL_31;
        }
      }
      else if (v21 != v16)
      {
        goto LABEL_30;
      }
    }
    if (v11 - v12 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) != v11 - v12)
    {
      goto LABEL_30;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x234927DB8](v24);
  return a1;
}

void sub_232C28BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x234927DB8](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  uint64_t v0;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v0);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x234927E9C](a1 + 128);
  return a1;
}

void std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(char *a1)
{
  char *v2;
  uint64_t v3;

  if (!a1)
    return;
  std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(*(_QWORD *)a1);
  std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(*((_QWORD *)a1 + 1));
  v2 = (char *)*((_QWORD *)a1 + 11);
  if (v2 == a1 + 64)
  {
    v3 = 4;
    v2 = a1 + 64;
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  if (a1[63] < 0)
    operator delete(*((void **)a1 + 5));
  operator delete(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,DebugLogEntryMetadata>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,DebugLogEntryMetadata>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 88);
    if (v3 == (_QWORD *)(v2 + 64))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 64);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 63) < 0)
      operator delete(*(void **)(v2 + 40));
    goto LABEL_10;
  }
  return a1;
}

void std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::~__func()
{
  JUMPOUT(0x234927ECCLL);
}

_QWORD *std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2503FFDF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2503FFDF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

void AGX::Mempool<16u,0u,true,unsigned long long>::grow(uint64_t a1, unsigned int a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v4 = -[AGXBuffer initUntrackedInternalBufferWithDevice:length:options:]([AGXBuffer alloc], "initUntrackedInternalBufferWithDevice:length:options:", *(_QWORD *)a1, 8 * a2, 0);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (int *)MEMORY[0x24BE51650];
  if (v6)
  {
    memcpy(*(void **)&v4[*MEMORY[0x24BE51650] + 24], *(const void **)(v6 + (int)*MEMORY[0x24BE51650] + 24), 8 * *(unsigned int *)(a1 + 16));

  }
  *(_QWORD *)(a1 + 8) = v5;
  LODWORD(v8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  if (v8 <= 1)
    v8 = 1;
  else
    v8 = v8;
  v9 = a2 - 1;
  v10 = *(_QWORD *)(a1 + 24);
  if (v8 < v9)
  {
    v11 = 8 * v8;
    v12 = v8;
    do
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + *v7 + 24) + v11) = ++v12;
      v11 += 8;
    }
    while (v9 != v12);
  }
  v13 = (unint64_t *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = 8 * v9;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + *v7 + 24) + v15) = v14;
  v16 = __ldaxr((unint64_t *)(a1 + 32));
  if (v16 != v14)
  {
    __clrex();
    while (1)
    {
LABEL_22:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + *v7 + 24) + v15) = v16;
      v21 = __ldaxr(v13);
      if (v21 == v16)
      {
        if (!__stlxr((v16 & 0xFFFFFFFF00000000 | v8) + 0x100000000, v13))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      v16 = v21;
    }
  }
  if (__stlxr((v14 & 0xFFFFFFFF00000000 | v8) + 0x100000000, v13))
    goto LABEL_22;
LABEL_14:
  v17 = *(unsigned int **)(a1 + 56);
  v18 = *v17;
  if (*v17 + 1 > 1)
    v19 = v18 + 1;
  else
    v19 = 1;
  v20 = __ldaxr(v17);
  if (v20 != v18)
  {
    __clrex();
    while (1)
    {
LABEL_29:
      if (v20 + 1 > 1)
        v22 = v20 + 1;
      else
        v22 = 1;
      v23 = __ldaxr(v17);
      if (v23 == v20)
      {
        if (!__stlxr(v22, v17))
          return;
      }
      else
      {
        __clrex();
      }
      v20 = v23;
    }
  }
  if (__stlxr(v19, v17))
    goto LABEL_29;
}

unsigned int *AGX::Mempool<16u,0u,true,unsigned long long>::Allocation::Allocation(unsigned int *a1, os_unfair_lock_s *a2, unsigned int a3)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t os_unfair_lock_opaque;
  unint64_t v21;
  unsigned int *v22;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v24;

  *a1 = a3;
  *((_QWORD *)a1 + 1) = a2;
  *((_BYTE *)a1 + 16) = a3 != 0;
  if (a3)
  {
    v19 = a3;
  }
  else
  {
    v4 = a2 + 10;
    os_unfair_lock_lock(a2 + 10);
    v5 = *((_QWORD *)a1 + 1);
    v6 = (unint64_t *)(v5 + 32);
    v7 = atomic_load((unint64_t *)(v5 + 32));
    v8 = (int *)MEMORY[0x24BE51650];
    if ((_DWORD)v7)
    {
      v9 = v7;
      do
      {
        v10 = v7 & 0xFFFFFFFF00000000;
        v11 = v7 & 0xFFFFFFFF00000000 | v9;
        v7 = __ldaxr(v6);
        if (v7 == v11)
        {
          if (!__stlxr((v10 | *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + *v8 + 24) + 8 * v9))+ 0x100000000, v6))goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        v9 = v7;
      }
      while ((_DWORD)v7);
    }
    *a1 = 0;
    v12 = *((_QWORD *)a1 + 1);
    v13 = *(_DWORD *)(v12 + 16);
    if (v13)
    {
      if (!*(_QWORD *)(v12 + 32))
        AGX::Mempool<16u,0u,true,unsigned long long>::grow(v12, 2 * v13);
    }
    else
    {
      AGX::Mempool<16u,0u,true,unsigned long long>::grow(v12, 0x10u);
    }
    v14 = *((_QWORD *)a1 + 1);
    v15 = (unint64_t *)(v14 + 32);
    v16 = atomic_load((unint64_t *)(v14 + 32));
    if ((_DWORD)v16)
    {
      v9 = v16;
      do
      {
        v17 = v16 & 0xFFFFFFFF00000000;
        v18 = v16 & 0xFFFFFFFF00000000 | v9;
        v16 = __ldaxr(v15);
        if (v16 == v18)
        {
          if (!__stlxr((v17 | *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + *v8 + 24) + 8 * v9))+ 0x100000000, v15))goto LABEL_20;
        }
        else
        {
          __clrex();
        }
        v9 = v16;
      }
      while ((_DWORD)v16);
    }
    LODWORD(v9) = 0;
LABEL_20:
    *a1 = v9;
    os_unfair_lock_unlock(v4);
    a2 = (os_unfair_lock_s *)*((_QWORD *)a1 + 1);
    v19 = *a1;
  }
  os_unfair_lock_opaque = a2[11]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque < v19)
  {
    do
    {
      v21 = os_unfair_lock_opaque;
      v22 = (unsigned int *)(*((_QWORD *)a1 + 1) + 44);
      os_unfair_lock_opaque = __ldxr(v22);
      if (os_unfair_lock_opaque == v21)
      {
        if (!__stxr(v19, v22))
          break;
      }
      else
      {
        __clrex();
      }
      v19 = *a1;
    }
    while (os_unfair_lock_opaque < v19);
    a2 = (os_unfair_lock_s *)*((_QWORD *)a1 + 1);
  }
  p_os_unfair_lock_opaque = &a2[12]._os_unfair_lock_opaque;
  do
    v24 = __ldaxr(p_os_unfair_lock_opaque);
  while (__stlxr(v24 + 1, p_os_unfair_lock_opaque));
  return a1;
}

void sub_232C293F0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX14FenceGroupPool17releaseFenceGroupEPNS_10FenceGroupE_block_invoke(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 32);
  **(_QWORD **)(result + 40) = *v1;
  *v1 = *(_QWORD *)(result + 40);
  return result;
}

uint64_t AGX::FenceList::copyFences(uint64_t this, unsigned __int16 *a2)
{
  unint64_t i;
  unint64_t v3;
  _QWORD *v4;
  __int16 v5;
  unint64_t j;
  unint64_t k;
  unint64_t m;
  unint64_t n;
  unint64_t ii;
  unint64_t jj;
  unint64_t kk;
  unint64_t mm;
  unint64_t nn;
  unint64_t i1;
  unint64_t i2;
  unint64_t i3;
  unint64_t i4;
  unint64_t i5;
  unint64_t i6;
  unint64_t i7;

  for (i = *(_QWORD *)(this + 512); i; i &= i - 1)
  {
    v3 = __clz(__rbit64(i));
    v4 = *(_QWORD **)(this + 8 * v3);
    v5 = (_WORD)v3 << 10;
    for (j = v4[1]; j; j &= j - 1)
      *a2++ = v5 | __clz(__rbit64(j));
    for (k = v4[2]; k; k &= k - 1)
      *a2++ = v5 | __clz(__rbit64(k)) | 0x40;
    for (m = v4[3]; m; m &= m - 1)
      *a2++ = v5 | __clz(__rbit64(m)) | 0x80;
    for (n = v4[4]; n; n &= n - 1)
      *a2++ = v5 | __clz(__rbit64(n)) | 0xC0;
    for (ii = v4[5]; ii; ii &= ii - 1)
      *a2++ = v5 | __clz(__rbit64(ii)) | 0x100;
    for (jj = v4[6]; jj; jj &= jj - 1)
      *a2++ = v5 | 0x140 | __clz(__rbit64(jj));
    for (kk = v4[7]; kk; kk &= kk - 1)
      *a2++ = v5 | __clz(__rbit64(kk)) | 0x180;
    for (mm = v4[8]; mm; mm &= mm - 1)
      *a2++ = v5 | __clz(__rbit64(mm)) | 0x1C0;
    for (nn = v4[9]; nn; nn &= nn - 1)
      *a2++ = v5 | __clz(__rbit64(nn)) | 0x200;
    for (i1 = v4[10]; i1; i1 &= i1 - 1)
      *a2++ = v5 | 0x240 | __clz(__rbit64(i1));
    for (i2 = v4[11]; i2; i2 &= i2 - 1)
      *a2++ = v5 | 0x280 | __clz(__rbit64(i2));
    for (i3 = v4[12]; i3; i3 &= i3 - 1)
      *a2++ = v5 | 0x2C0 | __clz(__rbit64(i3));
    for (i4 = v4[13]; i4; i4 &= i4 - 1)
      *a2++ = v5 | __clz(__rbit64(i4)) | 0x300;
    for (i5 = v4[14]; i5; i5 &= i5 - 1)
      *a2++ = v5 | 0x340 | __clz(__rbit64(i5));
    for (i6 = v4[15]; i6; i6 &= i6 - 1)
      *a2++ = v5 | __clz(__rbit64(i6)) | 0x380;
    for (i7 = v4[16]; i7; i7 &= i7 - 1)
      *a2++ = v5 | __clz(__rbit64(i7)) | 0x3C0;
  }
  return this;
}

void AGX::FenceList::insertFence(AGX::FenceList *this, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2 >> 10;
  v4 = (a2 >> 6) & 0xF;
  v5 = a2 & 0x3F;
  v6 = *((_QWORD *)this + v3);
  if (!v6)
  {
    v7 = *((_QWORD *)this + 65);
    v14 = 0;
    v15 = &v14;
    v16 = 0x2020000000;
    v17 = 0;
    v8 = *(NSObject **)(v7 + 16);
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = ___ZN3AGX14FenceGroupPool13getFenceGroupEv_block_invoke;
    v13[3] = &unk_2503FFE30;
    v13[4] = &v14;
    v13[5] = v7;
    dispatch_sync(v8, v13);
    bzero((void *)(v15[3] + 8), 0x80uLL);
    v6 = v15[3];
    _Block_object_dispose(&v14, 8);
    *((_QWORD *)this + v3) = v6;
    *((_QWORD *)this + 64) |= 1 << v3;
  }
  v9 = v6 + 8 * v4;
  v12 = *(_QWORD *)(v9 + 8);
  v10 = (uint64_t *)(v9 + 8);
  v11 = v12;
  if ((v12 & (1 << v5)) == 0)
  {
    *v10 = v11 | (1 << v5);
    ++*((_DWORD *)this + 132);
  }
}

void AGX::FenceList::merge(AGX::FenceList *this, AGX::FenceList *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  _QWORD v52[6];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *((_QWORD *)a2 + 64);
  if (v2)
  {
    v5 = MEMORY[0x24BDAC760];
    do
    {
      v17 = __clz(__rbit64(v2));
      if ((*((_QWORD *)this + 64) & (1 << v17)) != 0)
      {
        v18 = *((_QWORD *)this + v17);
        v19 = (_QWORD *)*((_QWORD *)a2 + v17);
        v20 = *(int8x16_t *)(v18 + 72);
        v21 = *(int8x16_t *)(v18 + 88);
        v22 = *(int8x16_t *)(v18 + 104);
        v23 = *(int8x16_t *)(v18 + 120);
        v24 = *(int8x16_t *)(v18 + 56);
        v25 = *(int8x16_t *)(v18 + 40);
        v26 = *(int8x16_t *)(v18 + 24);
        v27 = *(_QWORD *)(v18 + 16);
        v28 = (uint8x16_t)vcntq_s8(*(int8x16_t *)(v18 + 8));
        v29 = v19[1] | *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v18 + 8) = v29;
        v30 = v19[2] | v27;
        *(_QWORD *)(v18 + 16) = v30;
        v31 = v19[3] | v26.i64[0];
        *(_QWORD *)(v18 + 24) = v31;
        v32 = v19[4] | v26.i64[1];
        *(_QWORD *)(v18 + 32) = v32;
        v33 = v25.i64[1];
        v34 = v19[5] | v25.i64[0];
        *(_QWORD *)(v18 + 40) = v34;
        v35 = (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v25))));
        v36 = vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v21)))));
        v37 = vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v28))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v26)))));
        v38 = vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v22)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v23)))));
        v39 = vuzp1q_s32(v35, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v24)))));
        v40 = v19[6] | v33;
        *(_QWORD *)(v18 + 48) = v40;
        v41 = v19[7] | v24.i64[0];
        *(_QWORD *)(v18 + 56) = v41;
        v42 = v19[8] | v24.i64[1];
        v24.i64[0] = v31;
        v24.i64[1] = v32;
        v43.i64[0] = v29;
        v43.i64[1] = v30;
        v35.i64[0] = v41;
        v35.i64[1] = v42;
        v44.i64[0] = v34;
        v44.i64[1] = v40;
        *(_QWORD *)(v18 + 64) = v42;
        v45 = v19[9] | v20.i64[0];
        *(_QWORD *)(v18 + 72) = v45;
        v46 = v19[10] | v20.i64[1];
        *(_QWORD *)(v18 + 80) = v46;
        v47 = v19[11] | v21.i64[0];
        *(_QWORD *)(v18 + 88) = v47;
        v21.i64[0] = v47;
        v21.i64[1] |= v19[12];
        v20.i64[0] = v45;
        v20.i64[1] = v46;
        *(_QWORD *)(v18 + 96) = v21.i64[1];
        v48 = (int8x8_t)(v19[13] | v22.i64[0]);
        *(int8x8_t *)(v18 + 104) = v48;
        *(int8x8_t *)v22.i8 = vcnt_s8(v48);
        v22.i16[0] = vaddlv_u8(*(uint8x8_t *)v22.i8);
        v48.i32[0] = v22.i32[0];
        v49 = (int8x8_t)(v19[14] | v22.i64[1]);
        *(int8x8_t *)(v18 + 112) = v49;
        *(int8x8_t *)v22.i8 = vcnt_s8(v49);
        v22.i16[0] = vaddlv_u8(*(uint8x8_t *)v22.i8);
        v50 = (int8x8_t)(v19[15] | v23.i64[0]);
        *(int8x8_t *)(v18 + 120) = v50;
        *(int8x8_t *)v23.i8 = vcnt_s8(v50);
        v23.i16[0] = vaddlv_u8(*(uint8x8_t *)v23.i8);
        v50.i32[0] = v23.i32[0];
        v51 = (int8x8_t)(v19[16] | v23.i64[1]);
        *(int8x8_t *)(v18 + 128) = v51;
        *(int8x8_t *)v23.i8 = vcnt_s8(v51);
        v23.i16[0] = vaddlv_u8(*(uint8x8_t *)v23.i8);
        v16 = *((_DWORD *)this + 132)
            + v23.i32[0]
            + vaddvq_s32(vaddq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v43)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v24))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v44)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)v35)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v21)))))))+ v48.i32[0]+ v22.i32[0]+ v50.i32[0]- vaddvq_s32(vaddq_s32(vaddq_s32(v37, v36), vaddq_s32(v39, v38)));
      }
      else
      {
        v6 = *((_QWORD *)this + 65);
        v53 = 0;
        v54 = &v53;
        v55 = 0x2020000000;
        v56 = 0;
        v7 = *(NSObject **)(v6 + 16);
        v52[0] = v5;
        v52[1] = 3221225472;
        v52[2] = ___ZN3AGX14FenceGroupPool13getFenceGroupEv_block_invoke;
        v52[3] = &unk_2503FFE30;
        v52[4] = &v53;
        v52[5] = v6;
        dispatch_sync(v7, v52);
        bzero((void *)(v54[3] + 8), 0x80uLL);
        v8 = v54[3];
        _Block_object_dispose(&v53, 8);
        *((_QWORD *)this + v17) = v8;
        *((_QWORD *)this + 64) |= 1 << v17;
        v9 = *((_QWORD *)a2 + v17);
        v10 = *(_OWORD *)(v9 + 8);
        v11 = *(_OWORD *)(v9 + 24);
        v12 = *(_OWORD *)(v9 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
        *(_OWORD *)(v8 + 40) = v12;
        *(_OWORD *)(v8 + 24) = v11;
        *(_OWORD *)(v8 + 8) = v10;
        v13 = *(_OWORD *)(v9 + 72);
        v14 = *(_OWORD *)(v9 + 88);
        v15 = *(_OWORD *)(v9 + 104);
        *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
        *(_OWORD *)(v8 + 104) = v15;
        *(_OWORD *)(v8 + 88) = v14;
        *(_OWORD *)(v8 + 72) = v13;
        v16 = vaddvq_s32(vaddq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 8))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 24)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 72))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 88))))))), vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 40))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 56)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 104))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v8 + 120)))))))))+ *((_DWORD *)this + 132);
      }
      *((_DWORD *)this + 132) = v16;
      v2 &= v2 - 1;
    }
    while (v2);
  }
}

void AGX::FenceGroupPool::~FenceGroupPool(AGX::FenceGroupPool *this)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX14FenceGroupPoolD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_release(*((dispatch_object_t *)this + 2));
}

void sub_232C2A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_232C2A700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_232C2AA24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(_QWORD *result, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  _QWORD *v6;
  void *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD **v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  id v21;
  void *v22;

  v6 = result;
  v21 = a5;
  v22 = a2;
  v20 = a6;
  if (a3)
  {
    v18[0] = &v21;
    v18[1] = &v20;
    v18[2] = &v22;
    v18[3] = &v19;
    v19 = (id)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(a5, "count"));
    v12 = (void *)objc_msgSend(a2, "loadDynamicLibrariesForFunction:insertLibraries:error:", a3, a5, a6);
    if (objc_msgSend(v12, "count"))
    {
      v13 = 0;
      do
      {
        if ((objc_msgSend(v19, "containsObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", v13)) & 1) == 0)
          objc_msgSend(v19, "addObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", v13));
        ++v13;
      }
      while (objc_msgSend(v12, "count") > v13);
    }

    v17 = (_QWORD **)v18;
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(AGXA10FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(&v17, (void *)objc_msgSend(a4, "functions"));
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(AGXA10FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(&v17, (void *)objc_msgSend(a4, "binaryFunctions"));
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(AGXA10FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(&v17, (void *)objc_msgSend(a4, "privateFunctions"));
    v14 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v19, "count"));
    if (objc_msgSend(v21, "count"))
    {
      v15 = 0;
      do
      {
        if (objc_msgSend(v19, "containsObject:", objc_msgSend(v21, "objectAtIndexedSubscript:", v15)))
          objc_msgSend(v14, "addObject:", objc_msgSend(v21, "objectAtIndexedSubscript:", v15));
        ++v15;
      }
      while (objc_msgSend(v21, "count") > v15);
    }
    if (objc_msgSend(v19, "count"))
    {
      v16 = 0;
      do
      {
        if ((objc_msgSend(v14, "containsObject:", objc_msgSend(v19, "objectAtIndexedSubscript:", v16)) & 1) == 0)
          objc_msgSend(v14, "addObject:", objc_msgSend(v19, "objectAtIndexedSubscript:", v16));
        ++v16;
      }
      while (objc_msgSend(v19, "count") > v16);
    }
    result = (_QWORD *)objc_msgSend(v14, "copy");
    *v6 = result;
  }
  else
  {
    *result = MEMORY[0x24BDBD1A8];
  }
  return result;
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createComputeProgramVariant(id **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, NSObject *a8, unsigned __int8 a9, uint64_t a10)
{
  unsigned __int8 v17;
  NSObject *v18;
  uint64_t v19;
  unsigned __int8 v20;
  dispatch_object_t *v21;
  int *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  int *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int *v30;
  void *v31;
  void *v32;
  NSObject *map;
  void *v34;
  void *v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned __int16 v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  unint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  _AGCCommonContextStateAGP v60;
  unsigned int key;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  NSObject *v76;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  void *v80;
  NSObject *v81;
  void *v82;
  uint64_t v83;
  void **v84;
  NSObject *v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  char **v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  NSObject *v97;
  NSObject *global_queue;
  id *v99;
  uint64_t v100;
  id **v101;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[6];
  char v106;
  ComputeProgramKey v107;
  int64_t var0;
  void *v109[3];
  uint64_t v110;
  _QWORD v111[6];
  _QWORD v112[5];
  _QWORD v113[5];
  size_t v114;
  const void *v115;
  CC_LONG len[2];
  void *data;
  _QWORD block[2];
  void (*v119)(_QWORD *);
  void *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (**v125)(AGX::Impl::ComputeProgramKey *__hidden, CC_SHA256state_st *);
  void *v126;
  void *v127;
  void *v128;
  char v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  _QWORD v137[8];
  __int128 v138;
  __int128 v139;
  _QWORD v140[10];
  uint64_t (**v141)(AGX::Impl::ComputeProgramKey *__hidden, CC_SHA256state_st *);
  void *v142;
  void *v143;
  void *v144;
  char v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unsigned __int8 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 __p;
  __int128 v159;
  CC_SHA256_CTX *p_buffer_ptr;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  CC_SHA256_CTX buffer_ptr;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v111[0] = 0;
  v111[1] = v111;
  v111[2] = 0x3052000000;
  v111[3] = __Block_byref_object_copy_;
  v111[4] = __Block_byref_object_dispose_;
  v111[5] = 0;
  v104 = objc_msgSend(a2, "computeFunction");
  if ((v17 & 1) == 0
  {
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLComputePipelineDescriptor>(MTLComputePipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLComputePipelineDescriptor>(MTLComputePipelineDescriptor const*)::enable_pipeline_script)
  {
    v18 = objc_msgSend(a2, "newPipelineScript");
    v19 = operator new();
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)v19 = dispatch_data_create_map(v18, (const void **)(v19 + 8), (size_t *)(v19 + 16));
    dispatch_release(v18);
    v113[0] = v19;
    if ((v20 & 1) == 0
    {
    }
    v21 = (dispatch_object_t *)v113[0];
    v22 = (int *)(*(_QWORD *)(v113[0] + 8) + **(unsigned int **)(v113[0] + 8));
    v23 = (unsigned __int16 *)((char *)v22 - *v22);
    v24 = *v23;
    if (v24 >= 9
      && v23[4]
      && (v24 >= 0xB ? (v25 = *((_BYTE *)v22 + v23[4]) == 2) : (v25 = 0), v25 && (v26 = v23[5]) != 0))
    {
      v27 = (int *)((char *)v22 + v26 + *(unsigned int *)((char *)v22 + v26));
    }
    else
    {
      v27 = 0;
    }
    v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 >= 7u && (v29 = v28[3]) != 0)
      v30 = (int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
    else
      v30 = 0;
    ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a6);
    v31 = (void *)objc_msgSend(a2, "linkedFunctions");
    __p = 0uLL;
    *(_QWORD *)&v159 = 0;
    ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__p, (void *)objc_msgSend(v31, "functions"), 0);
    ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__p, (void *)objc_msgSend(v31, "privateFunctions"), 1u);
    AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateComputeProgramKey((uint64_t)&v107, v30, a8, (char **)&buffer_ptr, (char **)&__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (*(_QWORD *)buffer_ptr.count)
    {
      *(_QWORD *)buffer_ptr.hash = *(_QWORD *)buffer_ptr.count;
      operator delete(*(void **)buffer_ptr.count);
    }
    dispatch_release(*v21);
    MEMORY[0x234927ECC](v21, 0x10C0C40495EAE30);
  }
  else
  {
    v32 = (void *)objc_msgSend(a2, "linkedFunctions");
    AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)&v107);
    v107._vptr$ProgramKey = (void **)&off_250401E10;
    v110 = 0;
    if (a8)
    {
      *(_QWORD *)buffer_ptr.count = 0;
      *(_QWORD *)&__p = 0;
      map = dispatch_data_create_map(a8, (const void **)&buffer_ptr, (size_t *)&__p);
      std::string::append((std::string *)&v107.stage_in_desc, *(const std::string::value_type **)buffer_ptr.count, __p);
      dispatch_release(map);
    }
    ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a6);
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(&v107.stage_in_desc.var0, *(char **)buffer_ptr.count, *(char **)buffer_ptr.hash, (uint64_t)(*(_QWORD *)buffer_ptr.hash - *(_QWORD *)buffer_ptr.count) >> 5);
    if (*(_QWORD *)buffer_ptr.count)
    {
      *(_QWORD *)buffer_ptr.hash = *(_QWORD *)buffer_ptr.count;
      operator delete(*(void **)buffer_ptr.count);
    }
    memset(&buffer_ptr, 0, 24);
    ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)objc_msgSend(v32, "functions"), 0);
    ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)objc_msgSend(v32, "privateFunctions"), 1u);
    v34 = *(void **)buffer_ptr.count;
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v109, *(char **)buffer_ptr.count, *(char **)buffer_ptr.hash, (uint64_t)(*(_QWORD *)buffer_ptr.hash - *(_QWORD *)buffer_ptr.count) >> 5);
    if (v34)
      operator delete(v34);
    v35 = (void *)objc_msgSend(a2, "driverCompilerOptions");
    v36 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "linkedFunctions"), "binaryFunctions"), "count");
    v37 = objc_msgSend(a2, "supportAddingBinaryFunctions");
    if (objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v38 = 4;
    else
      v38 = 0;
    v107.cs.common.key = v107.cs.common.key & 0xFFFFFFFB | v38;
    v39 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue");
    v107.cs.common.key = v107.cs.common.key & 0xFC0003FF | (v39 << 10);
    if (objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v40 = 0x8000000;
    else
      v40 = 0;
    if (v36)
      v41 = 1;
    else
      v41 = v37;
    if (v41)
      v42 = 512;
    else
      v42 = 0;
    v107.cs.common.key = v40 | v107.cs.common.key & 0xF7FFFDFF | v42;
    v43 = (void *)objc_msgSend(a2, "buffers");
    v44 = 0;
    for (i = 0; i != 31; ++i)
    {
      v46 = objc_msgSend((id)objc_msgSend(v43, "_descriptorAtIndex:", i), "mutability");
      v47 = 1 << i;
      if (v46 != 1)
        v47 = 0;
      v44 |= v47;
    }
    v107.cs.mutableBuffers = v44;
    LOBYTE(v107.stage_in_desc.__r_.var0) = objc_msgSend(a2, "supportIndirectCommandBuffers");
    v107.cs.maxTotalThreadsPerThreadgroup = objc_msgSend(a2, "maxTotalThreadsPerThreadgroup");
    v48 = objc_msgSend(a2, "threadGroupSizeIsMultipleOfThreadExecutionWidth");
    v107.cs.var0.key = v107.cs.var0.key & 0xFFFFFFFE | v48;
    if (objc_msgSend(a2, "needsCustomBorderColorSamplers"))
      v49 = 2;
    else
      v49 = 0;
    v107.cs.var0.key = v107.cs.var0.key & 0xFFFFFFFD | v49;
    v50 = objc_msgSend(a2, "textureWriteRoundingMode");
    v51 = 8 * (v50 == 1);
    if (v50 == 2)
      v51 = 16;
    v107.cs.var0.key = v51 | v107.cs.var0.key & 0xFFFFFFE7;
    v52 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "linkedFunctions"), "binaryFunctions"), "count");
    v53 = objc_msgSend(a2, "supportAddingBinaryFunctions");
    if (v52)
      v54 = 1;
    else
      v54 = v53;
    if (v54)
      v55 = 32;
    else
      v55 = 0;
    v107.cs.common.key &= ~0x80u;
    v107.cs.var0.key = v107.cs.var0.key & 0xFFFFFDDF | v55;
    objc_msgSend(a2, "supportIndirectCommandBuffers");
  }
  v56 = *(_QWORD *)(a3 + 808);
  v57 = *(unsigned __int8 *)(v56 + 6360);
  v58 = *(_DWORD *)(v56 + 6224);
  if (v57)
    v59 = 67109120;
  else
    v59 = 256;
  v60.key = v59 | v107.cs.common.key & 0x8BFFFEFF;
  key = (v58 >> 14) & 0x80 | (v58 >> 8) & 0x40 | v107.cs.var0.key & 0xFFFFF73B;
  v107.cs.common = v60;
  v107.cs.var0.key = key;
  v110 = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v62 = 1;
    v60.var0 = ($CBEC0DC0C06941078BCF76921B43C9FE)v107.cs.common;
    key = v107.cs.var0.key;
  }
  else
  {
    v62 = 0;
  }
  v107.cs.common.key = (a4 >> 21) & 8 | v62 | v60.key & 0xFFFFFFF4;
  v107.cs.var0.key = key & 0xFFFFFEFF | (((a4 >> 21) & 1) << 8);
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&buffer_ptr, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
  v156 = *(_OWORD *)buffer_ptr.count;
  v157 = *(_OWORD *)&buffer_ptr.hash[2];
  os_unfair_lock_lock((os_unfair_lock_t)(a7 + 1144));
  v63 = *(_QWORD *)(a7 + 1104);
  v64 = *(unsigned int *)(a7 + 1112);
  v65 = (_QWORD *)VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v63, *(_DWORD *)(a7 + 1112), &v156);
  if (!v65)
  {
    if ((_DWORD)v64 == 4)
    {
      v63 = operator new();
      v64 = 0;
      *(_QWORD *)(v63 + 224) = *(_QWORD *)(a7 + 1104);
      *(_OWORD *)(v63 + 192) = 0u;
      *(_OWORD *)(v63 + 208) = 0u;
      *(_OWORD *)(v63 + 160) = 0u;
      *(_OWORD *)(v63 + 176) = 0u;
      *(_OWORD *)(v63 + 128) = 0u;
      *(_OWORD *)(v63 + 144) = 0u;
      *(_OWORD *)(v63 + 96) = 0u;
      *(_OWORD *)(v63 + 112) = 0u;
      *(_OWORD *)(v63 + 64) = 0u;
      *(_OWORD *)(v63 + 80) = 0u;
      *(_OWORD *)(v63 + 32) = 0u;
      *(_OWORD *)(v63 + 48) = 0u;
      *(_OWORD *)v63 = 0u;
      *(_OWORD *)(v63 + 16) = 0u;
      *(_QWORD *)(a7 + 1104) = v63;
      *(_DWORD *)(a7 + 1112) = 0;
    }
    v66 = (_OWORD *)(v63 + 32 * v64);
    v67 = v157;
    *v66 = v156;
    v66[1] = v67;
    v68 = *(_QWORD *)(a7 + 1104);
    v69 = *(_DWORD *)(a7 + 1112);
    *(_DWORD *)(a7 + 1112) = v69 + 1;
    v65 = (_QWORD *)(v68 + 24 * v69 + 128);
  }
  v70 = a4 & 0x330000 | 3;
  v100 = a3;
  v101 = a1;
  if ((v70 & ~v65[1]) != 0)
  {
    v71 = *v65 | v70;
    *v65 = v71;
  }
  else
  {
    v71 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 1144));
  v72 = v71 | a4 & 0xFFFFFFFFFFCCFFFCLL;
  if (v71 & 4 | a4 & 4 || a5)
  {
    v73 = operator new();
    *(_WORD *)(v73 + 40) = 0;
    *(_OWORD *)(v73 + 24) = 0u;
    *(_OWORD *)(v73 + 8) = 0u;
    *(_BYTE *)(v73 + 41) = 1;
    v76 = dispatch_group_create();
    *(_QWORD *)v73 = v76;
    dispatch_group_enter(v76);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a7 + 1144));
    v73 = VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::operator[](a7, (uint64_t)&v107);
    if (*(_QWORD *)v73)
    {
      if (!*(_BYTE *)(v73 + 40))
      {
        if ((v71 & 0x330003) != 0)
        {
          dispatch_group_enter(*(dispatch_group_t *)v73);
          os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 1144));
          v99 = *v101;
          v137[0] = MEMORY[0x24BDAC760];
          v137[1] = 3221225472;
          v137[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2;
          v137[3] = &unk_250400D20;
          v138 = v156;
          v139 = v157;
          v137[5] = a7;
          v137[4] = v100;
          v137[6] = v71 | a4 & 0xFFFFFFFFFFCCFFFCLL;
          v137[7] = v73;
          objc_msgSend(*v99, "reflectionWithFunction:options:sync:completionHandler:", v104, v71 & 0x330003, a9 ^ 1u, v137);
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 1144));
        }
        goto LABEL_111;
      }
      v74 = *(_QWORD *)(v73 + 8);
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      *(_QWORD *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 16) = 0;

      *(_QWORD *)(v73 + 24) = 0;
      *(_QWORD *)(v73 + 32) = 0;
      *(_BYTE *)(v73 + 40) = 0;
      v75 = *(NSObject **)v73;
    }
    else
    {
      v75 = dispatch_group_create();
      *(_QWORD *)v73 = v75;
    }
    dispatch_group_enter(v75);
    os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 1144));
  }
  v103 = a7;
  v77 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
  v78 = (void *)objc_msgSend(a2, "pipelineLibrary");
  if (objc_msgSend(v78, "pipelineCache") && (objc_msgSend(v78, "disableRunTimeCompilation") & 1) != 0)
    LOBYTE(v79) = 1;
  else
    v79 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v80 = (void *)objc_opt_new();
  objc_msgSend(v80, "setSync:", a9 ^ 1u);
  objc_msgSend(v80, "setFunction:", v104);
  objc_msgSend(v80, "setFrameworkData:", a8);
  objc_msgSend(v80, "setPipelineCache:", v77);
  objc_msgSend(v80, "setDestinationBinaryArchive:", a5);
  objc_msgSend(v80, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
  objc_msgSend(v80, "setPipelineOptions:", a4 | 3);
  if ((a4 & 0x330003) == 0)
    objc_msgSend(v80, "setPipelineOptions:", objc_msgSend(v80, "pipelineOptions") | 0x8000);
  v81 = objc_msgSend(a2, "newPipelineScript");
  if (v81)
  {
    objc_msgSend(v80, "setAirScript:", v81);
    dispatch_release(v81);
  }
  objc_msgSend(v80, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
  v82 = (void *)objc_msgSend(a2, "linkedFunctions");
  objc_msgSend(v80, "setVisibleFunctions:", objc_msgSend(v82, "functions"));
  objc_msgSend(v80, "setVisibleFunctionGroups:", objc_msgSend(v82, "groups"));
  objc_msgSend(v80, "setPrivateVisibleFunctions:", objc_msgSend(v82, "privateFunctions"));
  v83 = MEMORY[0x24BDAC760];
  v140[0] = MEMORY[0x24BDAC760];
  v140[1] = 3321888768;
  v140[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke;
  v140[3] = &unk_2504011A0;
  v140[7] = v111;
  v140[4] = v104;
  v153 = a9;
  v140[8] = v101;
  v140[9] = v73;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)&v141, &v107);
  v155 = v157;
  v141 = &off_250401E10;
  v150 = v110;
  v151 = v103;
  v152 = v72;
  v154 = v156;
  v140[5] = v100;
  v140[6] = a2;
  v105[0] = v83;
  v105[1] = 3221225472;
  v105[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_201;
  v105[3] = &unk_250400E40;
  v105[4] = v140;
  v105[5] = v73;
  v106 = v79;
  v84 = *v101;
  v112[0] = v83;
  v112[1] = 3221225472;
  v112[2] = ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_17ComputeProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
  v112[3] = &unk_250400D80;
  v112[4] = v105;
  v113[0] = v83;
  v113[1] = 3221225472;
  v113[2] = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v113[3] = &unk_2504023B8;
  v113[4] = v112;
  v114 = 0;
  v115 = 0;
  (*((void (**)(ComputeProgramKey *, const void **, size_t *))v107._vptr$ProgramKey + 2))(&v107, &v115, &v114);
  v85 = dispatch_data_create(v115, v114, 0, 0);
  objc_msgSend(v80, "setDriverKeyData:", v85);
  if (objc_msgSend(v80, "airScript"))
  {
    v86 = objc_msgSend(v80, "airScript");
    v162 = 0uLL;
    *(_QWORD *)&v163 = 0;
    *(_QWORD *)&v162 = dispatch_data_create_map(v86, (const void **)&v162 + 1, (size_t *)&v163);
    v87 = *((_QWORD *)&v162 + 1);
    v88 = **((_DWORD **)&v162 + 1);
    CC_SHA256_Init(&buffer_ptr);
    ((void (*)(ComputeProgramKey *, CC_SHA256_CTX *))*v107._vptr$ProgramKey)(&v107, &buffer_ptr);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v87 + v88), &data, (size_t *)len, v89, v90))
    {
      v91 = data;
      CC_SHA256_Update(&buffer_ptr, data, len[0]);
      free(v91);
    }
    CC_SHA256_Final((unsigned __int8 *)&__p, &buffer_ptr);
    dispatch_release((dispatch_object_t)v162);
    v162 = __p;
    v163 = v159;
    objc_msgSend(v80, "setVendorPluginFunctionId:", &v162);
  }
  *(_QWORD *)buffer_ptr.count = MEMORY[0x24BDAC760];
  *(_QWORD *)buffer_ptr.hash = 3221225472;
  *(_QWORD *)&buffer_ptr.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&buffer_ptr.hash[4] = &unk_250402408;
  *(_QWORD *)&buffer_ptr.hash[6] = v80;
  *(_QWORD *)buffer_ptr.wbuf = v113;
  if (objc_msgSend(v80, "function"))
  {
    v92 = mach_absolute_time();
    v93 = *v84;
    *(_QWORD *)&__p = MEMORY[0x24BDAC760];
    *((_QWORD *)&__p + 1) = 3221225472;
    *(_QWORD *)&v159 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v159 + 1) = &unk_250402458;
    v161 = v92;
    p_buffer_ptr = &buffer_ptr;
    objc_msgSend(v93, "compileFunctionRequest:completionHandler:", v80, &__p);
  }
  else
  {
    if (objc_msgSend(v80, "frameworkData") || objc_msgSend(v80, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&__p = MEMORY[0x24BDAC760];
    *((_QWORD *)&__p + 1) = 3221225472;
    *(_QWORD *)&v159 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v159 + 1) = &unk_250402430;
    p_buffer_ptr = &buffer_ptr;
    v94 = objc_msgSend((id)objc_msgSend(v80, "binaryArchives"), "count");
    v95 = *v84;
    v96 = objc_msgSend(v80, "driverKeyData");
    if (v94)
      objc_msgSend(v95, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v96, objc_msgSend(v80, "binaryArchives"), 0, objc_msgSend(v80, "pipelineCache"), objc_msgSend(v80, "sync"), &__p);
    else
      objc_msgSend(v95, "compileRequest:pipelineCache:sync:completionHandler:", v96, objc_msgSend(v80, "pipelineCache"), objc_msgSend(v80, "sync"), &__p);
  }
  dispatch_release(v85);

  v141 = &off_250402A80;
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  a7 = v103;
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (v145 < 0)
    operator delete(v144);
  v141 = (uint64_t (**)(AGX::Impl::ComputeProgramKey *__hidden, CC_SHA256state_st *))off_250401DD0;
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
LABEL_111:
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3321888768;
  v119 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3;
  v120 = &unk_2504011D8;
  v123 = a7;
  v124 = v73;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)&v125, &v107);
  v125 = &off_250401E10;
  v134 = v110;
  v135 = v156;
  v136 = v157;
  v121 = a10;
  v122 = v111;
  v97 = *(NSObject **)v73;
  if (a9)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v97, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v97, 0xFFFFFFFFFFFFFFFFLL);
    v119(block);
  }
  v125 = &off_250402A80;
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (v129 < 0)
    operator delete(v128);
  v125 = (uint64_t (**)(AGX::Impl::ComputeProgramKey *__hidden, CC_SHA256state_st *))off_250401DD0;
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  v107._vptr$ProgramKey = (void **)&off_250402A80;
  if (v109[0])
  {
    v109[1] = v109[0];
    operator delete(v109[0]);
  }
  if (v107.stage_in_desc.var0)
  {
    var0 = v107.stage_in_desc.var0;
    operator delete((void *)v107.stage_in_desc.var0);
  }
  if (*((char *)&v107.stage_in_desc.__r_.__value_.var0.__l + 23) < 0)
    operator delete(v107.stage_in_desc.__r_.__value_.var0.__l.__data_);
  v107._vptr$ProgramKey = (void **)off_250401DD0;
  if (v107.stream.__begin_)
  {
    v107.stream.__end_ = v107.stream.__begin_;
    operator delete(v107.stream.__begin_);
  }
  _Block_object_dispose(v111, 8);
}

void sub_232C2BDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  os_unfair_lock_s *v42;

  os_unfair_lock_unlock(v42);
  AGX::ComputeProgramKey::~ComputeProgramKey((AGX::ComputeProgramKey *)&a23);
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

double ReflectionKey::initGPUCompilerSPIOptionsHash(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  double result;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CC_SHA256_CTX c;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    CC_SHA256_Init(&c);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = (void *)objc_msgSend((id)objc_msgSend(a2, "allKeys"), "sortedArrayUsingSelector:", sel_compare_);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          bzero(v11, 0x10uLL);
          v11[1] = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v9, objc_msgSend(v9, "hash")), "hash");
          CC_SHA256_Update(&c, v11, 0x10u);
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
      }
      while (v6);
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CC_SHA256_Final((unsigned __int8 *)a1, &c);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, const __CFString **a5, _BYTE *a6)
{
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  void *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v39[54];
  void *__dst[2];
  unint64_t v41;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 248));
  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    v12 = (void *)objc_msgSend(v11, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v12)
      objc_msgSend(v12, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  *a4 = *(_QWORD *)(a3 + 40);
  *a5 = *(const __CFString **)(a3 + 48);
  *a6 = 0;
  v13 = *a4;
  if (!*a4)
  {
    if (a2[33])
    {
      v14 = a2 + 33;
      if (!a2[34])
        v14 = a2 + 103;
      if (!*v14)
        goto LABEL_14;
    }
    else
    {
      v14 = a2 + 103;
      if (!a2[103])
        goto LABEL_14;
    }
    if (v14[1])
      goto LABEL_21;
LABEL_14:
    if (a2[63])
    {
      v15 = a2 + 63;
      if (!a2[64])
        v15 = a2 + 133;
      if (!*v15)
        goto LABEL_22;
    }
    else
    {
      v15 = a2 + 133;
      if (!a2[133])
        goto LABEL_22;
    }
    if (v15[1])
    {
LABEL_21:
      *a4 = 2;
      *a5 = CFSTR("Internal error during function compilation");
      *a6 = 1;
      v13 = *a4;
      if (*a4)
        goto LABEL_26;
    }
LABEL_22:
    if (*(_BYTE *)(a1 + 168)
      && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(a2, 1) & 1) == 0)
    {
      *a4 = 2;
      *a5 = CFSTR("Compute function cannot be used with indirect command buffers");
      *a6 = 1;
      v13 = *a4;
    }
    else
    {
      v13 = 0;
    }
  }
LABEL_26:
  AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(NSObject **)(a3 + 16), a1 + 249, *(void **)(a1 + 40), v13);
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  if (*a4)
    return 0;
  v16 = operator new();
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 808);
  v18 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v18)
    v19 = (const char *)v18;
  else
    v19 = "";
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = (void *)v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    v25 = (void **)operator new(v26 + 1);
    __dst[1] = v24;
    v41 = v27 | 0x8000000000000000;
    __dst[0] = v25;
    goto LABEL_38;
  }
  HIBYTE(v41) = v20;
  v25 = __dst;
  if (v20)
LABEL_38:
    memmove(v25, v19, (size_t)v24);
  *((_BYTE *)v24 + (_QWORD)v25) = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v39, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)3, 0, *(_QWORD *)(a1 + 232) + 1152, *(_QWORD *)(a1 + 120), 0, 0, v21, v22, v23, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v16, v17, (uint64_t)a2, (uint64_t)v39, *(_QWORD *)(a1 + 232) + 1152, *(unsigned __int8 *)(a1 + 168), *(void **)(a3 + 24));
  *(_QWORD *)v16 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v39);
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__dst[0]);
    if (!*(_BYTE *)(a1 + 168))
      goto LABEL_44;
  }
  else if (!*(_BYTE *)(a1 + 168))
  {
    goto LABEL_44;
  }
  if (!*(_QWORD *)(v16 + 2352))
  {
    v29 = CFSTR("Internal error during function compilation");
    goto LABEL_58;
  }
LABEL_44:
  v28 = 0x10000;
  if (!*(_BYTE *)(v16 + 379))
    v28 = 4096;
  if (v28 < *(unsigned int *)(v16 + 320))
  {
    v29 = CFSTR("Compute function exceeds available stack space");
LABEL_58:
    (*(void (**)(unint64_t))(*(_QWORD *)v16 + 8))(v16);
    v16 = 0;
    *a4 = 2;
    *a5 = v29;
    return v16;
  }
  v30 = 0x400800000000;
  if (!*(_QWORD *)(v16 + 400))
    v30 = 0x800000001;
  v31 = 0x1000000000000;
  if (!*(_BYTE *)(v16 + 3262))
    v31 = 1;
  v32 = v31 | v30;
  v33 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 | v32, v33));
  v35 = v33 + 1;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36, v35));
  return v16;
}

void sub_232C2C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

AGX::Impl::ComputeProgramKey *AGX::Impl::ComputeProgramKey::ComputeProgramKey(AGX::Impl::ComputeProgramKey *this, const ComputeProgramKey *a2)
{
  unsigned int *end;
  unsigned int *begin;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char var0;
  void **v12;
  void **v13;
  int64_t v14;
  char *v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  int64_t v19;
  char *v20;
  char *v21;

  *(_QWORD *)this = off_250401DD0;
  *((_DWORD *)this + 2) = a2->streamType;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  begin = a2->stream.__begin_;
  end = a2->stream.__end_;
  v6 = (char *)end - (char *)begin;
  if (end != begin)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new((char *)end - (char *)begin);
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)this + 4) = v8;
    memcpy(v7, begin, v6);
    *((_QWORD *)this + 3) = v8;
  }
  *(_QWORD *)this = &off_250402A80;
  v9 = *(_OWORD *)&a2->cs.mutableBuffers;
  *((_QWORD *)this + 7) = *(_QWORD *)&a2->cs.var0.var0;
  *(_OWORD *)((char *)this + 40) = v9;
  if (*((char *)&a2->stage_in_desc.__r_.__value_.var0.__l + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), a2->stage_in_desc.__r_.__value_.var0.__l.__data_, a2->stage_in_desc.__r_.__value_.var0.__l.__size_);
  }
  else
  {
    v10 = *(_OWORD *)a2->stage_in_desc.__r_.__value_.var0.__s.__data_;
    *((_QWORD *)this + 10) = *((_QWORD *)&a2->stage_in_desc.__r_.__value_.var0.__l + 2);
    *((_OWORD *)this + 4) = v10;
  }
  var0 = a2->stage_in_desc.__r_.var0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 88) = var0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v13 = (void **)a2->stage_in_desc.var0;
  v12 = a2[1]._vptr$ProgramKey;
  v14 = (char *)v12 - (char *)v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new((char *)v12 - (char *)v13);
    *((_QWORD *)this + 12) = v15;
    *((_QWORD *)this + 13) = v15;
    v16 = &v15[32 * (v14 >> 5)];
    *((_QWORD *)this + 14) = v16;
    memcpy(v15, v13, v14);
    *((_QWORD *)this + 13) = v16;
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v18 = a2[1].stream.__begin_;
  v17 = a2[1].stream.__end_;
  v19 = (char *)v17 - (char *)v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      abort();
    v20 = (char *)operator new((char *)v17 - (char *)v18);
    *((_QWORD *)this + 15) = v20;
    *((_QWORD *)this + 16) = v20;
    v21 = &v20[32 * (v19 >> 5)];
    *((_QWORD *)this + 17) = v21;
    memcpy(v20, v18, v19);
    *((_QWORD *)this + 16) = v21;
  }
  return this;
}

void sub_232C2C6C0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_201(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  BOOL v12;
  char v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6 = *(_QWORD *)(a1 + 40);
  v8 = v15;
  v7 = v16;
  v9 = *(void **)(a3 + 32);
  v10 = *(unsigned __int8 *)(a1 + 48);
  v11 = v14;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 16) = v7;

  *(_QWORD *)(v6 + 24) = objc_msgSend(v8, "copy");
  if (*(_QWORD *)(v6 + 8))
  {

    *(_QWORD *)(v6 + 32) = v9;
  }
  else
  {
    if (v10)
      v12 = v11 == 0;
    else
      v12 = 0;
    v13 = v12;
    *(_BYTE *)(v6 + 40) = v13;
  }
  dispatch_group_leave(*(dispatch_group_t *)v6);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_17ComputeProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke(uint64_t a1)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[8];

  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void AGX::ComputeProgramKey::~ComputeProgramKey(AGX::ComputeProgramKey *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_250402A80;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  *(_QWORD *)this = off_250401DD0;
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3(_QWORD *a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[32];

  memset(v12, 0, 26);
  v2 = a1[7];
  if (!*(_BYTE *)(v2 + 41))
  {
    v6 = 0;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v2 + 8))
  {
    v3 = (os_unfair_lock_s *)a1[6];
    v4 = v3 + 286;
    os_unfair_lock_lock(v3 + 286);
    v5 = VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::operator[]((uint64_t)v3, (uint64_t)(a1 + 8));
    if (*(_QWORD *)v5)
    {
      os_unfair_lock_unlock(v4);
      dispatch_group_wait(*(dispatch_group_t *)v5, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      v8 = dispatch_group_create();
      *(_QWORD *)v5 = v8;
      dispatch_group_enter(v8);
      v9 = *(_QWORD *)(v2 + 16);
      v10 = *(void **)(v2 + 24);
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v5 + 16) = v9;

      *(_QWORD *)(v5 + 24) = objc_msgSend(v10, "copy", (unsigned __int128)0, 0, *(_OWORD *)&v12[8], *(_QWORD *)&v12[24]);
      if (*(_QWORD *)(v5 + 8))
      {

        *(_QWORD *)(v5 + 32) = 0;
      }
      else
      {
        *(_BYTE *)(v5 + 40) = 0;
      }
      dispatch_group_leave(*(dispatch_group_t *)v5);
      *(_QWORD *)(v2 + 8) = 0;
      os_unfair_lock_unlock(v4);
    }
    v6 = 0;
    v7 = *(NSObject **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_14;
  }
  else
  {
    v6 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = *(NSObject **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_14;
  }
  dispatch_release(v7);
LABEL_14:
  v11 = *(_QWORD *)(v2 + 8);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  MEMORY[0x234927ECC](v2, 0x10A0C405D73F519);
LABEL_17:
  (*(void (**)(void))(a1[4] + 16))();

}

void sub_232C2CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

AGX::Impl::ComputeProgramKey *__copy_helper_block_e8_64c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1, uint64_t a2)
{
  AGX::Impl::ComputeProgramKey *result;

  result = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 64), (const ComputeProgramKey *)(a2 + 64));
  *(_QWORD *)(a1 + 64) = &off_250401E10;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return result;
}

void __destroy_helper_block_e8_64c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 64) = &off_250402A80;
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  *(_QWORD *)(a1 + 64) = off_250401DD0;
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

uint64_t AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;

  v2 = *(NSObject **)a1;
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  return a1;
}

uint64_t VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  const void *v56;
  size_t v57;
  uint64_t v58;
  int v59;
  const void *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  const void *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  const void *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  const void *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  const void *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  size_t v98;
  std::string *v100;

  v2 = a2;
  v3 = a1;
  v4 = *(unsigned int *)(a1 + 816);
  v5 = *(_QWORD *)(a1 + 808);
  v6 = *(unsigned int *)(a2 + 48);
  if (!(_DWORD)v4)
  {
    v11 = *(_DWORD *)(a2 + 52);
    v10 = *(_DWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    LOBYTE(v18) = *(_BYTE *)(a2 + 87);
    v8 = *(const void **)(a2 + 64);
    v19 = *(_QWORD *)(a2 + 72);
    v21 = *(unsigned __int8 *)(a2 + 88);
    v22 = *(_QWORD *)(a2 + 144);
    goto LABEL_35;
  }
  v7 = 0;
  v9 = (unsigned __int8 *)(a2 + 64);
  v8 = *(const void **)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 52);
  v10 = *(_DWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(unsigned __int8 *)(a2 + 87);
  v18 = (char)v17;
  v19 = *(_QWORD *)(a2 + 72);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(a2 + 87);
  else
    v20 = *(_QWORD *)(a2 + 72);
  v21 = *(unsigned __int8 *)(a2 + 88);
  v22 = *(_QWORD *)(a2 + 144);
  do
  {
    v24 = v5 + 152 * v7;
    if (v10 != *(_DWORD *)(v24 + 56) || v11 != *(_DWORD *)(v24 + 52) || v12 != *(_QWORD *)(v24 + 40))
      goto LABEL_8;
    v25 = (_DWORD)v6 == *(_DWORD *)(v24 + 48) && v13 == v14;
    if (!v25 || v16 != v15)
      goto LABEL_8;
    v27 = *(unsigned __int8 *)(v24 + 87);
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *(_QWORD *)(v24 + 72);
    if (v20 != v27)
      goto LABEL_8;
    if (v28 >= 0)
      v29 = (unsigned __int8 *)(v24 + 64);
    else
      v29 = *(unsigned __int8 **)(v24 + 64);
    if (v18 < 0)
    {
      v91 = v22;
      v90 = v6;
      v95 = v12;
      v93 = v21;
      v88 = v19;
      v89 = v8;
      v86 = v16;
      v87 = v13;
      v84 = v17;
      v85 = v15;
      v83 = v20;
      v23 = memcmp(v8, v29, v19);
      v20 = v83;
      v17 = v84;
      v15 = v85;
      v16 = v86;
      v13 = v87;
      v19 = v88;
      v8 = v89;
      v22 = v91;
      v21 = v93;
      v12 = v95;
      v6 = v90;
      if (v23)
        goto LABEL_8;
    }
    else if (v18)
    {
      v30 = v9;
      v31 = v17;
      while (*v30 == *v29)
      {
        ++v30;
        ++v29;
        if (!--v31)
          goto LABEL_31;
      }
      goto LABEL_8;
    }
LABEL_31:
    if (v21 == *(unsigned __int8 *)(v24 + 88) && v22 == *(_QWORD *)(v5 + 152 * v7 + 144))
    {
      v32 = v5 + 48 * v7;
      return v32 + 608;
    }
LABEL_8:
    ++v7;
  }
  while (v7 != v4);
  v3 = a1;
  v2 = a2;
LABEL_35:
  v100 = (std::string *)(v2 + 64);
  if ((v18 & 0x80u) == 0)
    v33 = v18;
  else
    v33 = v19;
  if (v13 == v14 && *(_QWORD *)(v2 + 128) == *(_QWORD *)(v2 + 120))
  {
    v34 = *(_QWORD *)(v5 + 800);
    if ((v18 & 0x80) == 0)
    {
      if (v34)
      {
        v35 = 1;
        while (1)
        {
          if (v10 == *(_DWORD *)(v34 + 56)
            && v11 == *(_DWORD *)(v34 + 52)
            && v12 == *(_QWORD *)(v34 + 40)
            && (_DWORD)v6 == *(_DWORD *)(v34 + 48))
          {
            v36 = *(unsigned __int8 *)(v34 + 87);
            v37 = (char)v36;
            if ((v36 & 0x80u) != 0)
              v36 = *(_QWORD *)(v34 + 72);
            if (v33 == v36)
            {
              if ((_BYTE)v18)
              {
                if (v37 >= 0)
                  v38 = (unsigned __int8 *)(v34 + 64);
                else
                  v38 = *(unsigned __int8 **)(v34 + 64);
                v39 = (unsigned __int8 *)(v2 + 64);
                v40 = v18;
                while (*v39 == *v38)
                {
                  ++v39;
                  ++v38;
                  if (!--v40)
                    goto LABEL_58;
                }
              }
              else
              {
LABEL_58:
                if (v21 == *(unsigned __int8 *)(v34 + 88) && v22 == *(_QWORD *)(v34 + 144))
                  goto LABEL_172;
              }
            }
          }
          if (v10 == *(_DWORD *)(v34 + 208)
            && v11 == *(_DWORD *)(v34 + 204)
            && v12 == *(_QWORD *)(v34 + 192)
            && (_DWORD)v6 == *(_DWORD *)(v34 + 200))
          {
            v41 = *(unsigned __int8 *)(v34 + 239);
            v42 = (char)v41;
            if ((v41 & 0x80u) != 0)
              v41 = *(_QWORD *)(v34 + 224);
            if (v33 == v41)
            {
              if ((_BYTE)v18)
              {
                if (v42 >= 0)
                  v43 = (unsigned __int8 *)(v34 + 216);
                else
                  v43 = *(unsigned __int8 **)(v34 + 216);
                v44 = (unsigned __int8 *)(v2 + 64);
                v45 = v18;
                while (*v44 == *v43)
                {
                  ++v44;
                  ++v43;
                  if (!--v45)
                    goto LABEL_74;
                }
              }
              else
              {
LABEL_74:
                if (v21 == *(unsigned __int8 *)(v34 + 240) && v22 == *(_QWORD *)(v34 + 296))
                  goto LABEL_175;
              }
            }
          }
          if (v10 == *(_DWORD *)(v34 + 360)
            && v11 == *(_DWORD *)(v34 + 356)
            && v12 == *(_QWORD *)(v34 + 344)
            && (_DWORD)v6 == *(_DWORD *)(v34 + 352))
          {
            v46 = *(unsigned __int8 *)(v34 + 391);
            v47 = (char)v46;
            if ((v46 & 0x80u) != 0)
              v46 = *(_QWORD *)(v34 + 376);
            if (v33 == v46)
            {
              if ((_BYTE)v18)
              {
                if (v47 >= 0)
                  v48 = (unsigned __int8 *)(v34 + 368);
                else
                  v48 = *(unsigned __int8 **)(v34 + 368);
                v49 = (unsigned __int8 *)(v2 + 64);
                v50 = v18;
                while (*v49 == *v48)
                {
                  ++v49;
                  ++v48;
                  if (!--v50)
                    goto LABEL_90;
                }
              }
              else
              {
LABEL_90:
                if (v21 == *(unsigned __int8 *)(v34 + 392) && v22 == *(_QWORD *)(v34 + 448))
                  goto LABEL_173;
              }
            }
          }
          if (v10 == *(_DWORD *)(v34 + 512)
            && v11 == *(_DWORD *)(v34 + 508)
            && v12 == *(_QWORD *)(v34 + 496)
            && (_DWORD)v6 == *(_DWORD *)(v34 + 504))
          {
            v51 = *(unsigned __int8 *)(v34 + 543);
            v52 = (char)v51;
            if ((v51 & 0x80u) != 0)
              v51 = *(_QWORD *)(v34 + 528);
            if (v33 == v51)
            {
              if ((_BYTE)v18)
              {
                if (v52 >= 0)
                  v53 = (unsigned __int8 *)(v34 + 520);
                else
                  v53 = *(unsigned __int8 **)(v34 + 520);
                v54 = (unsigned __int8 *)(v2 + 64);
                v55 = v18;
                while (*v54 == *v53)
                {
                  ++v54;
                  ++v53;
                  if (!--v55)
                    goto LABEL_106;
                }
              }
              else
              {
LABEL_106:
                if (v21 == *(unsigned __int8 *)(v34 + 544) && v22 == *(_QWORD *)(v34 + 600))
                  goto LABEL_164;
              }
            }
          }
          v34 = *(_QWORD *)(v34 + 800);
          if (!v34)
            goto LABEL_165;
        }
      }
      goto LABEL_165;
    }
    if (!v34)
      goto LABEL_165;
    v96 = v12;
    v98 = v33;
    v94 = v21;
    v92 = v22;
    v56 = v8;
    v57 = v19;
    while (1)
    {
      if (v10 == *(_DWORD *)(v34 + 56)
        && v11 == *(_DWORD *)(v34 + 52)
        && v12 == *(_QWORD *)(v34 + 40)
        && (_DWORD)v6 == *(_DWORD *)(v34 + 48))
      {
        v58 = *(unsigned __int8 *)(v34 + 87);
        v59 = (char)v58;
        if ((v58 & 0x80u) != 0)
          v58 = *(_QWORD *)(v34 + 72);
        if (v33 == v58)
        {
          v60 = v59 >= 0 ? (const void *)(v34 + 64) : *(const void **)(v34 + 64);
          v61 = v6;
          v62 = memcmp(v8, v60, v19);
          v19 = v57;
          v8 = v56;
          v12 = v96;
          v33 = v98;
          v6 = v61;
          if (!v62 && v94 == *(unsigned __int8 *)(v34 + 88) && v92 == *(_QWORD *)(v34 + 144))
          {
LABEL_172:
            v35 = 0;
            goto LABEL_175;
          }
        }
      }
      if (v10 == *(_DWORD *)(v34 + 208)
        && v11 == *(_DWORD *)(v34 + 204)
        && v12 == *(_QWORD *)(v34 + 192)
        && (_DWORD)v6 == *(_DWORD *)(v34 + 200))
      {
        v63 = *(unsigned __int8 *)(v34 + 239);
        v64 = (char)v63;
        if ((v63 & 0x80u) != 0)
          v63 = *(_QWORD *)(v34 + 224);
        if (v33 == v63)
        {
          v65 = v64 >= 0 ? (const void *)(v34 + 216) : *(const void **)(v34 + 216);
          v66 = v6;
          v67 = memcmp(v8, v65, v19);
          v19 = v57;
          v8 = v56;
          v12 = v96;
          v33 = v98;
          v6 = v66;
          if (!v67 && v94 == *(unsigned __int8 *)(v34 + 240) && v92 == *(_QWORD *)(v34 + 296))
            break;
        }
      }
      if (v10 == *(_DWORD *)(v34 + 360)
        && v11 == *(_DWORD *)(v34 + 356)
        && v12 == *(_QWORD *)(v34 + 344)
        && (_DWORD)v6 == *(_DWORD *)(v34 + 352))
      {
        v68 = *(unsigned __int8 *)(v34 + 391);
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *(_QWORD *)(v34 + 376);
        if (v33 == v68)
        {
          v70 = v69 >= 0 ? (const void *)(v34 + 368) : *(const void **)(v34 + 368);
          v71 = v6;
          v72 = memcmp(v8, v70, v19);
          v19 = v57;
          v8 = v56;
          v12 = v96;
          v33 = v98;
          v6 = v71;
          if (!v72 && v94 == *(unsigned __int8 *)(v34 + 392) && v92 == *(_QWORD *)(v34 + 448))
          {
LABEL_173:
            v35 = 2;
            goto LABEL_175;
          }
        }
      }
      if (v10 == *(_DWORD *)(v34 + 512)
        && v11 == *(_DWORD *)(v34 + 508)
        && v12 == *(_QWORD *)(v34 + 496)
        && (_DWORD)v6 == *(_DWORD *)(v34 + 504))
      {
        v73 = *(unsigned __int8 *)(v34 + 543);
        v74 = (char)v73;
        if ((v73 & 0x80u) != 0)
          v73 = *(_QWORD *)(v34 + 528);
        if (v33 == v73)
        {
          v75 = v74 >= 0 ? (const void *)(v34 + 520) : *(const void **)(v34 + 520);
          v76 = v6;
          v77 = memcmp(v8, v75, v19);
          v19 = v57;
          v8 = v56;
          v12 = v96;
          v33 = v98;
          v6 = v76;
          if (!v77 && v94 == *(unsigned __int8 *)(v34 + 544) && v92 == *(_QWORD *)(v34 + 600))
          {
LABEL_164:
            v35 = 3;
            goto LABEL_175;
          }
        }
      }
      v34 = *(_QWORD *)(v34 + 800);
      if (!v34)
        goto LABEL_165;
    }
    v35 = 1;
LABEL_175:
    v32 = v34 + 48 * v35;
  }
  else
  {
LABEL_165:
    if ((_DWORD)v4 == 4)
    {
      v5 = operator new();
      VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::Chunk::Chunk(v5);
      LODWORD(v4) = 0;
      *(_QWORD *)(v5 + 800) = *(_QWORD *)(v3 + 808);
      *(_QWORD *)(v3 + 808) = v5;
      *(_DWORD *)(v3 + 816) = 0;
    }
    v78 = v5 + 152 * v4;
    *(_DWORD *)(v78 + 8) = *(_DWORD *)(v2 + 8);
    if (v78 == v2)
    {
      std::string::operator=(v100, v100);
    }
    else
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v78 + 16), *(char **)(v2 + 16), *(char **)(v2 + 24), (uint64_t)(*(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16)) >> 2);
      v79 = *(_OWORD *)(v2 + 40);
      *(_DWORD *)(v78 + 56) = *(_DWORD *)(v2 + 56);
      *(_OWORD *)(v78 + 40) = v79;
      std::string::operator=((std::string *)(v78 + 64), v100);
      *(_BYTE *)(v78 + 88) = *(_BYTE *)(v2 + 88);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v78 + 96), *(char **)(v2 + 96), *(char **)(v2 + 104), (uint64_t)(*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v78 + 120), *(char **)(v2 + 120), *(char **)(v2 + 128), (uint64_t)(*(_QWORD *)(v2 + 128) - *(_QWORD *)(v2 + 120)) >> 5);
    }
    *(_QWORD *)(v5 + 152 * v4 + 144) = *(_QWORD *)(v2 + 144);
    v80 = *(_QWORD *)(v3 + 808);
    v81 = *(_DWORD *)(v3 + 816);
    *(_DWORD *)(v3 + 816) = v81 + 1;
    v32 = v80 + 48 * v81;
  }
  return v32 + 608;
}

void sub_232C2D44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10B2C4095AF869BLL);
  _Unwind_Resume(a1);
}

uint64_t VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::Chunk::Chunk(uint64_t a1)
{
  AGX::Impl::ComputeProgramKey *v2;

  v2 = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)a1);
  *(_QWORD *)v2 = &off_250401E10;
  *((_QWORD *)v2 + 18) = 0;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)((char *)v2 + 152));
  *(_QWORD *)(a1 + 152) = &off_250401E10;
  *(_QWORD *)(a1 + 296) = 0;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 304));
  *(_QWORD *)(a1 + 304) = &off_250401E10;
  *(_QWORD *)(a1 + 448) = 0;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 456));
  *(_QWORD *)(a1 + 456) = &off_250401E10;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 682) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 730) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 778) = 0u;
  *(_WORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  return a1;
}

void sub_232C2D518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = v2;
  while (1)
  {
    *(_QWORD *)(v4 - 152) = &off_250402A80;
    v4 -= 152;
    v5 = *(void **)(v4 + 120);
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 - 56);
    if (v6)
    {
      *(_QWORD *)(v2 - 48) = v6;
      operator delete(v6);
    }
    if (*(char *)(v2 - 65) < 0)
      operator delete(*(void **)(v2 - 88));
    *(_QWORD *)(v2 - 152) = off_250401DD0;
    v7 = *(void **)(v2 - 136);
    if (v7)
    {
      *(_QWORD *)(v2 - 128) = v7;
      operator delete(v7);
    }
    v2 = v4;
    if (v4 == v1)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      abort();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_22;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_22:
      abort();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

AGX::Impl::ComputeProgramKey *AGX::Impl::ComputeProgramKey::ComputeProgramKey(AGX::Impl::ComputeProgramKey *this)
{
  *((_DWORD *)this + 2) = 6;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &off_250402A80;
  *(_WORD *)((char *)this + 87) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)this + 12, 0);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)this + 15, (void *)objc_msgSend(0, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)this + 15, (void *)objc_msgSend(0, "privateFunctions"), 1u);
  return this;
}

void sub_232C2D8B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*(void **)(v1 + 64));
  *(_QWORD *)v1 = off_250401DD0;
  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  os_unfair_lock_s *lock;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1144));
    v13 = *(_QWORD *)(a1 + 1104);
    v14 = *(unsigned int *)(a1 + 1112);
    v15 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v13, *(_DWORD *)(a1 + 1112), (_QWORD *)a4);
    v16 = (_QWORD *)v15;
    if (v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if ((_DWORD)v14 == 4)
      {
        v13 = operator new();
        v14 = 0;
        *(_QWORD *)(v13 + 224) = *(_QWORD *)(a1 + 1104);
        *(_OWORD *)(v13 + 192) = 0u;
        *(_OWORD *)(v13 + 208) = 0u;
        *(_OWORD *)(v13 + 160) = 0u;
        *(_OWORD *)(v13 + 176) = 0u;
        *(_OWORD *)(v13 + 128) = 0u;
        *(_OWORD *)(v13 + 144) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_QWORD *)(a1 + 1104) = v13;
        *(_DWORD *)(a1 + 1112) = 0;
      }
      v18 = (_OWORD *)(v13 + 32 * v14);
      v19 = *(_OWORD *)(a4 + 16);
      *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      v20 = *(_QWORD *)(a1 + 1104);
      v21 = *(_DWORD *)(a1 + 1112);
      *(_DWORD *)(a1 + 1112) = v21 + 1;
      v16 = (_QWORD *)(v20 + 24 * v21 + 128);
      v17 = *(_QWORD *)(v20 + 24 * v21 + 136);
      if (a6)
        goto LABEL_4;
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3)
        dispatch_retain(a3);
      v22 = v16[2];
      if (v22)
        dispatch_release(v22);
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(_BYTE *)(a1 + 1400))
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD5B8]), "initWithDevice:reflectionData:functionType:options:", a5, a3, 3, a2 | 0x8000);
      v23 = (void *)objc_msgSend(v30, "arguments");
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v33 != v25)
              objc_enumerationMutation(v23);
            v27 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            if (!objc_msgSend(v27, "type")
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              v28 = (_QWORD *)objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              v29 = v28[2];
              v28[2] = 0;
              *(_QWORD *)(a1 + 8 * objc_msgSend(v27, "index") + 1152) = v29;

            }
          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v24);
      }

      *(_BYTE *)(a1 + 1400) = 1;
    }
    goto LABEL_26;
  }
}

void sub_232C2DBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  BOOL v6;
  _QWORD *v8;
  unsigned int v9;
  BOOL v19;
  BOOL v20;

  if (a2)
  {
    v3 = 0;
    v4 = a1;
    while (1)
    {
      v5 = *a3 == *v4 && a3[1] == v4[1];
      v6 = v5 && a3[2] == v4[2];
      if (v6 && a3[3] == v4[3])
        return (uint64_t)&a1[3 * v3 + 16];
      ++v3;
      v4 += 4;
      if (a2 == v3)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    v8 = (_QWORD *)a1[28];
    if (v8)
    {
      v9 = 1;
      while (1)
      {
        if (*a3 == *v8 && a3[1] == v8[1] && a3[2] == v8[2] && a3[3] == v8[3])
        {
          v9 = 0;
          return (uint64_t)&v8[3 * v9 + 16];
        }
        if (*a3 == v8[4] && a3[1] == v8[5] && a3[2] == v8[6] && a3[3] == v8[7])
          return (uint64_t)&v8[3 * v9 + 16];
        if (*a3 == v8[8] && a3[1] == v8[9] && a3[2] == v8[10] && a3[3] == v8[11])
        {
          v9 = 2;
          return (uint64_t)&v8[3 * v9 + 16];
        }
        v19 = *a3 == v8[12] && a3[1] == v8[13];
        v20 = v19 && a3[2] == v8[14];
        if (v20 && a3[3] == v8[15])
          break;
        v8 = (_QWORD *)v8[28];
        if (!v8)
          return 0;
      }
      v9 = 3;
      return (uint64_t)&v8[3 * v9 + 16];
    }
    else
    {
      return 0;
    }
  }
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v3 = (char *)a1[3];
  v2 = a1[4];
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (char *)a1[2];
    v7 = (v3 - v6) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      abort();
    v9 = v2 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *v12 = 96;
    v5 = v12 + 1;
    if (v3 != v6)
    {
      v14 = v3 - v6 - 4;
      if (v14 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v11) < 0x20)
        goto LABEL_27;
      v15 = (v14 >> 2) + 1;
      v4 = &v3[-4 * (v15 & 0x7FFFFFFFFFFFFFF8)];
      v16 = &v11[4 * v7 - 16];
      v17 = v3 - 16;
      v18 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19 = *(_OWORD *)v17;
        *(v16 - 1) = *((_OWORD *)v17 - 1);
        *v16 = v19;
        v16 -= 2;
        v17 -= 32;
        v18 -= 8;
      }
      while (v18);
      v12 -= v15 & 0x7FFFFFFFFFFFFFF8;
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v20 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--v12 = v20;
        }
        while (v4 != v6);
      }
    }
    a1[2] = v12;
    a1[3] = v5;
    a1[4] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v3 = 96;
    v5 = v3 + 4;
  }
  a1[3] = v5;
}

void ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

void AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]()
{
  _os_crash();
  __break(1u);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C2E1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGCDeserializedReply::AGCDeserializedReply(AGCDeserializedReply *this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  size_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  size_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  size_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  size_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74[2];
  char v75;
  int v76;
  void *v77[2];
  char v78;
  int v79;
  void *v80[2];
  unint64_t v81;
  int v82;
  void *v83[2];
  unint64_t v84;
  int v85;
  void *v86[2];
  unint64_t v87;
  int v88;
  void *v89[2];
  unint64_t v90;
  int v91;
  void *v92[2];
  unint64_t v93;
  int v94;
  void *v95[2];
  unint64_t v96;
  int v97;
  void *v98[2];
  unint64_t v99;
  int v100;
  void *v101[2];
  unint64_t v102;
  int v103;
  void *v104[2];
  unint64_t v105;
  int v106;
  void *v107[2];
  unint64_t v108;
  int v109;
  void *v110[2];
  unint64_t v111;
  int v112;
  void *__p[2];
  unint64_t v114;
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_BYTE *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_BYTE *)this + 280) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_BYTE *)this + 320) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 94) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_BYTE *)this + 360) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_BYTE *)this + 400) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_BYTE *)this + 440) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 61) = 0;
  *((_DWORD *)this + 124) = 0;
  *((_BYTE *)this + 480) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((_BYTE *)this + 520) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_QWORD *)this + 71) = 0;
  *((_DWORD *)this + 144) = 0;
  *((_BYTE *)this + 560) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 76) = 0;
  *((_DWORD *)this + 154) = 0;
  *((_BYTE *)this + 600) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 81) = 0;
  *((_DWORD *)this + 164) = 0;
  *((_BYTE *)this + 640) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 86) = 0;
  *((_DWORD *)this + 174) = 0;
  *((_BYTE *)this + 680) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 91) = 0;
  *((_DWORD *)this + 184) = 0;
  *((_BYTE *)this + 720) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_BYTE *)this + 760) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 101) = 0;
  *((_DWORD *)this + 204) = 0;
  *((_BYTE *)this + 800) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((_QWORD *)this + 106) = 0;
  *((_DWORD *)this + 214) = 0;
  *((_BYTE *)this + 840) = 0;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_QWORD *)this + 111) = 0;
  *((_DWORD *)this + 224) = 0;
  *((_BYTE *)this + 880) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_QWORD *)this + 116) = 0;
  *((_DWORD *)this + 234) = 0;
  *((_BYTE *)this + 920) = 0;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_QWORD *)this + 121) = 0;
  *((_DWORD *)this + 244) = 0;
  *((_BYTE *)this + 960) = 0;
  *((_OWORD *)this + 59) = 0u;
  *((_QWORD *)this + 126) = 0;
  *((_DWORD *)this + 254) = 0;
  *((_BYTE *)this + 1000) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_QWORD *)this + 131) = 0;
  *((_DWORD *)this + 264) = 0;
  *((_BYTE *)this + 1040) = 0;
  *((_OWORD *)this + 64) = 0u;
  *((_QWORD *)this + 136) = 0;
  *((_DWORD *)this + 274) = 0;
  *((_BYTE *)this + 1080) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_QWORD *)this + 141) = 0;
  *((_DWORD *)this + 284) = 0;
  *((_BYTE *)this + 1120) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_BYTE *)this + 1144) = 0;
  *((_QWORD *)this + 147) = 0;
  *((_DWORD *)this + 296) = 0;
  *((_BYTE *)this + 1168) = 0;
  *((_OWORD *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 306) = 1065353216;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_DWORD *)this + 316) = 1065353216;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_DWORD *)this + 326) = 1065353216;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 336) = 1065353216;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *((_DWORD *)this + 346) = 1065353216;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_DWORD *)this + 356) = 1065353216;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *((_DWORD *)this + 366) = 1065353216;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 92) = 0u;
  *((_DWORD *)this + 376) = 1065353216;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((_DWORD *)this + 386) = 1065353216;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_DWORD *)this + 396) = 1065353216;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *((_DWORD *)this + 406) = 1065353216;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 102) = 0u;
  *((_DWORD *)this + 416) = 1065353216;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_DWORD *)this + 426) = 1065353216;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_DWORD *)this + 436) = 1065353216;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *((_DWORD *)this + 446) = 1065353216;
  *((_DWORD *)this + 452) = 0;
  *((_OWORD *)this + 112) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1848) = xmmword_2503FFF40;
  *(_OWORD *)((char *)this + 1864) = *(_OWORD *)&off_2503FFF50;
  *(_OWORD *)((char *)this + 1928) = xmmword_2503FFF90;
  *(_OWORD *)((char *)this + 1944) = *(_OWORD *)off_2503FFFA0;
  *(_OWORD *)((char *)this + 1896) = *(_OWORD *)&off_2503FFF70;
  *(_OWORD *)((char *)this + 1912) = xmmword_2503FFF80;
  *(_OWORD *)((char *)this + 1880) = xmmword_2503FFF60;
  v75 = 6;
  strcpy((char *)v74, "__TEXT");
  v76 = 0;
  v78 = 12;
  strcpy((char *)v77, "__TEXT_CONST");
  v79 = 1;
  v2 = (const char *)*((_QWORD *)this + 233);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    v80[1] = v4;
    v81 = v7 | 0x8000000000000000;
    v80[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v81) = v3;
  v5 = v80;
  if (v3)
LABEL_8:
    memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v82 = 2;
  v8 = v83;
  v9 = (const char *)*((_QWORD *)this + 234);
  v10 = strlen(v9);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    v83[1] = v11;
    v84 = v13 | 0x8000000000000000;
    v83[0] = v8;
    goto LABEL_16;
  }
  HIBYTE(v84) = v10;
  if (v10)
LABEL_16:
    memmove(v8, v9, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v8) = 0;
  v85 = 3;
  v14 = v86;
  v15 = (const char *)*((_QWORD *)this + 235);
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v14 = operator new(v18 + 1);
    v86[1] = v17;
    v87 = v19 | 0x8000000000000000;
    v86[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v87) = v16;
  if (v16)
LABEL_24:
    memmove(v14, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v14) = 0;
  v88 = 4;
  v20 = v89;
  v21 = (const char *)*((_QWORD *)this + 236);
  v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v23 = (void *)v22;
  if (v22 >= 0x17)
  {
    v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v24 = v22 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    v89[1] = v23;
    v90 = v25 | 0x8000000000000000;
    v89[0] = v20;
    goto LABEL_32;
  }
  HIBYTE(v90) = v22;
  if (v22)
LABEL_32:
    memmove(v20, v21, (size_t)v23);
  *((_BYTE *)v23 + (_QWORD)v20) = 0;
  v91 = 5;
  v26 = v92;
  v27 = (const char *)*((_QWORD *)this + 237);
  v28 = strlen(v27);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v30 = v28 | 7;
    v31 = v30 + 1;
    v26 = operator new(v30 + 1);
    v92[1] = v29;
    v93 = v31 | 0x8000000000000000;
    v92[0] = v26;
    goto LABEL_40;
  }
  HIBYTE(v93) = v28;
  if (v28)
LABEL_40:
    memmove(v26, v27, (size_t)v29);
  *((_BYTE *)v29 + (_QWORD)v26) = 0;
  v94 = 6;
  v32 = v95;
  v33 = (const char *)*((_QWORD *)this + 238);
  v34 = strlen(v33);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v36 = v34 | 7;
    v37 = v36 + 1;
    v32 = operator new(v36 + 1);
    v95[1] = v35;
    v96 = v37 | 0x8000000000000000;
    v95[0] = v32;
    goto LABEL_48;
  }
  HIBYTE(v96) = v34;
  if (v34)
LABEL_48:
    memmove(v32, v33, (size_t)v35);
  *((_BYTE *)v35 + (_QWORD)v32) = 0;
  v97 = 7;
  v38 = v98;
  v39 = (const char *)*((_QWORD *)this + 239);
  v40 = strlen(v39);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v41 = (void *)v40;
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v38 = operator new(v42 + 1);
    v98[1] = v41;
    v99 = v43 | 0x8000000000000000;
    v98[0] = v38;
    goto LABEL_56;
  }
  HIBYTE(v99) = v40;
  if (v40)
LABEL_56:
    memmove(v38, v39, (size_t)v41);
  *((_BYTE *)v41 + (_QWORD)v38) = 0;
  v100 = 8;
  v44 = v101;
  v45 = (const char *)*((_QWORD *)this + 240);
  v46 = strlen(v45);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v47 = (void *)v46;
  if (v46 >= 0x17)
  {
    v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v48 = v46 | 7;
    v49 = v48 + 1;
    v44 = operator new(v48 + 1);
    v101[1] = v47;
    v102 = v49 | 0x8000000000000000;
    v101[0] = v44;
    goto LABEL_64;
  }
  HIBYTE(v102) = v46;
  if (v46)
LABEL_64:
    memmove(v44, v45, (size_t)v47);
  *((_BYTE *)v47 + (_QWORD)v44) = 0;
  v103 = 9;
  v50 = v104;
  v51 = (const char *)*((_QWORD *)this + 241);
  v52 = strlen(v51);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v53 = (void *)v52;
  if (v52 >= 0x17)
  {
    v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v54 = v52 | 7;
    v55 = v54 + 1;
    v50 = operator new(v54 + 1);
    v104[1] = v53;
    v105 = v55 | 0x8000000000000000;
    v104[0] = v50;
    goto LABEL_72;
  }
  HIBYTE(v105) = v52;
  if (v52)
LABEL_72:
    memmove(v50, v51, (size_t)v53);
  *((_BYTE *)v53 + (_QWORD)v50) = 0;
  v106 = 10;
  v56 = (const char *)*((_QWORD *)this + 242);
  v57 = strlen(v56);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v58 = (void *)v57;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = operator new(v60 + 1);
    v107[1] = v58;
    v108 = v61 | 0x8000000000000000;
    v107[0] = v59;
    goto LABEL_80;
  }
  HIBYTE(v108) = v57;
  v59 = v107;
  if (v57)
LABEL_80:
    memmove(v59, v56, (size_t)v58);
  *((_BYTE *)v58 + (_QWORD)v59) = 0;
  v109 = 11;
  v62 = (const char *)*((_QWORD *)this + 243);
  v63 = strlen(v62);
  if (v63 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v64 = (void *)v63;
  if (v63 >= 0x17)
  {
    v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v66 = v63 | 7;
    v67 = v66 + 1;
    v65 = operator new(v66 + 1);
    v110[1] = v64;
    v111 = v67 | 0x8000000000000000;
    v110[0] = v65;
    goto LABEL_88;
  }
  HIBYTE(v111) = v63;
  v65 = v110;
  if (v63)
LABEL_88:
    memmove(v65, v62, (size_t)v64);
  *((_BYTE *)v64 + (_QWORD)v65) = 0;
  v112 = 12;
  v68 = (const char *)*((_QWORD *)this + 244);
  v69 = strlen(v68);
  if (v69 > 0x7FFFFFFFFFFFFFF7)
    abort();
  v70 = (void *)v69;
  if (v69 >= 0x17)
  {
    v72 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17)
      v72 = v69 | 7;
    v73 = v72 + 1;
    v71 = operator new(v72 + 1);
    v114 = v73 | 0x8000000000000000;
    __p[0] = v71;
    __p[1] = v70;
    goto LABEL_96;
  }
  HIBYTE(v114) = v69;
  v71 = __p;
  if (v69)
LABEL_96:
    memmove(v71, v68, (size_t)v70);
  *((_BYTE *)v70 + (_QWORD)v71) = 0;
  v115 = 13;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *((_DWORD *)this + 498) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v74, (uint64_t)v74);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v77, (uint64_t)v77);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v80, (uint64_t)v80);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v83, (uint64_t)v83);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v86, (uint64_t)v86);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v89, (uint64_t)v89);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v92, (uint64_t)v92);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v95, (uint64_t)v95);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v98, (uint64_t)v98);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v101, (uint64_t)v101);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v104, (uint64_t)v104);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v107, (uint64_t)v107);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v110, (uint64_t)v110);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v114) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v111) & 0x80000000) == 0)
    {
LABEL_99:
      if ((SHIBYTE(v108) & 0x80000000) == 0)
        goto LABEL_100;
      goto LABEL_114;
    }
  }
  else if ((SHIBYTE(v111) & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v110[0]);
  if ((SHIBYTE(v108) & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v105) & 0x80000000) == 0)
      goto LABEL_101;
    goto LABEL_115;
  }
LABEL_114:
  operator delete(v107[0]);
  if ((SHIBYTE(v105) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v102) & 0x80000000) == 0)
      goto LABEL_102;
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v104[0]);
  if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
LABEL_102:
    if ((SHIBYTE(v99) & 0x80000000) == 0)
      goto LABEL_103;
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v101[0]);
  if ((SHIBYTE(v99) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v96) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v98[0]);
  if ((SHIBYTE(v96) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v93) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_119;
  }
LABEL_118:
  operator delete(v95[0]);
  if ((SHIBYTE(v93) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v90) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_120;
  }
LABEL_119:
  operator delete(v92[0]);
  if ((SHIBYTE(v90) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v87) & 0x80000000) == 0)
      goto LABEL_107;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v89[0]);
  if ((SHIBYTE(v87) & 0x80000000) == 0)
  {
LABEL_107:
    if ((SHIBYTE(v84) & 0x80000000) == 0)
      goto LABEL_108;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v86[0]);
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_108:
    if ((SHIBYTE(v81) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_123;
  }
LABEL_122:
  operator delete(v83[0]);
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_109:
    if ((v78 & 0x80000000) == 0)
      goto LABEL_110;
    goto LABEL_124;
  }
LABEL_123:
  operator delete(v80[0]);
  if ((v78 & 0x80000000) == 0)
  {
LABEL_110:
    if ((v75 & 0x80000000) == 0)
      return;
LABEL_125:
    operator delete(v74[0]);
    return;
  }
LABEL_124:
  operator delete(v77[0]);
  if (v75 < 0)
    goto LABEL_125;
}

void sub_232C2EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  void *v27;

  v26 = v25;
  while (1)
  {
    if (*((char *)v26 - 9) < 0)
      operator delete(*(v26 - 4));
    v26 -= 4;
    if (v26 == &__p)
    {
      v27 = *(void **)(v23 + 1824);
      if (v27)
      {
        *(_QWORD *)(v23 + 1832) = v27;
        operator delete(v27);
      }
      std::unordered_map<unsigned int,std::string>::~unordered_map[abi:nn180100](a11);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1712);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24 + 480);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1632);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24 + 400);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1552);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24 + 320);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1472);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a12);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1392);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a13);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1312);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a14);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1232);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24);
      _Unwind_Resume(a1);
    }
  }
}

BOOL AGCDeserializedReply::deserialize(AGCDeserializedReply *this, _DWORD *a2, uint64_t a3)
{
  int v4;
  _DWORD *v5;
  uint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_dst;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  const void *v34;
  size_t v35;
  std::string::size_type v36;
  std::string *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type size;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t **v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void **v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void **v61;
  std::string *v62;
  int v63;
  int v64;
  char *v65;
  float v66;
  float v67;
  _BOOL8 v68;
  unint64_t v69;
  unint64_t v70;
  size_t prime;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _DWORD *v78;
  int v79;
  unsigned __int8 v80;
  std::vector<unsigned int>::pointer begin;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  char v92;
  std::string *v93;
  size_t v94;
  std::string::size_type v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  uint64_t v104;
  char *v105;
  size_t v106;
  size_t v107;
  std::string::size_type p_size;
  uint64_t v109;
  uint64_t i;
  uint64_t v111;
  const std::ios_base *v112;
  const std::locale::facet *v113;
  std::ios_base::fmtflags v114;
  _QWORD *v115;
  const std::locale::facet *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t data_low;
  unint64_t v120;
  uint8x8_t v121;
  uint64_t **v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  float v127;
  float v128;
  _BOOL8 v129;
  unint64_t v130;
  unint64_t v131;
  size_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  size_t v137;
  size_t v138;
  size_t v139;
  _QWORD *j;
  size_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint8x8_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  size_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  void *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  unint64_t v161;
  std::string *__s2;
  void *__p;
  int v164;
  char *v165;
  char *v166;
  char *v167;
  std::string::size_type v168;
  _QWORD *v169;
  char v170;
  int v171;
  char *v172;
  uint64_t v173;
  std::string::size_type v174;
  std::string::size_type v175;
  std::string::size_type v176;
  char *v177;
  int v178;
  _DWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  std::vector<unsigned int> *v182;
  int v183;
  unsigned int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  std::string v189;
  std::string __dst;
  unint64_t v191;
  void *v192;
  char v193;
  uint64_t v194;
  std::locale v195;
  _QWORD *v196;
  char v197;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (*a2 != -17958193)
    return 0;
  v171 = a2[4];
  if (v171)
  {
    v4 = 0;
    v5 = a2 + 8;
    v182 = (std::vector<unsigned int> *)((char *)this + 1824);
    v165 = (char *)this + 1880;
    v166 = (char *)this + 1864;
    v167 = (char *)this + 1856;
    v172 = (char *)this + 1912;
    v177 = (char *)this + 1904;
    v180 = (_QWORD *)((char *)this + 1960);
    v181 = (_QWORD *)((char *)this + 1768);
    v176 = *MEMORY[0x24BEDB7F0];
    v174 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v175 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v6 = (uint64_t *)MEMORY[0x24BEDB310];
    v173 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v7 = *v5;
      v178 = v4;
      v179 = v5;
      if (*v5 == 2)
      {
        v12 = v5[3];
        v13 = *(_QWORD *)this + v5[4];
        v14 = (unsigned int *)(*(_QWORD *)this + v5[2]);
        *((_QWORD *)this + 224) = v14;
        *((_QWORD *)this + 225) = v13;
        *((_DWORD *)this + 452) = v12;
        v15 = v5[3];
        if (!v15)
          goto LABEL_5;
        v16 = 0;
        v186 = v13 + 1;
LABEL_14:
        v17 = *(int8x8_t *)((char *)this + 1760);
        if (!*(_QWORD *)&v17)
          goto LABEL_13;
        v18 = *((unsigned __int8 *)v14 + 5);
        v19 = (uint8x8_t)vcnt_s8(v17);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          v20 = *((unsigned __int8 *)v14 + 5);
          if (*(_QWORD *)&v17 <= v18)
            v20 = v18 % *(_QWORD *)&v17;
        }
        else
        {
          v20 = (v17.i32[0] - 1) & v18;
        }
        v21 = *(uint64_t ***)(*((_QWORD *)this + 219) + 8 * v20);
        if (!v21)
          goto LABEL_13;
        v22 = *v21;
        if (!v22)
          goto LABEL_13;
        v23 = *v14;
        if (v19.u32[0] < 2uLL)
        {
          v24 = *(_QWORD *)&v17 - 1;
          while (1)
          {
            v26 = v22[1];
            if (v26 == v18)
            {
              if (*((_DWORD *)v22 + 4) == (_DWORD)v18)
                goto LABEL_35;
            }
            else if ((v26 & v24) != v20)
            {
              goto LABEL_13;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_13;
          }
        }
        while (1)
        {
          v25 = v22[1];
          if (v25 == v18)
          {
            if (*((_DWORD *)v22 + 4) == (_DWORD)v18)
            {
LABEL_35:
              if ((~*((unsigned __int8 *)v14 + 4) & 0xE) != 0)
                goto LABEL_13;
              v27 = (const char *)(v22 + 3);
              if (*((char *)v22 + 47) < 0)
                v27 = *(const char **)v27;
              v28 = strlen(v27);
              if (v28 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_329;
              v29 = v28;
              v187 = *((_QWORD *)v14 + 1);
              if (v28 >= 0x17)
              {
                v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28 | 7) != 0x17)
                  v31 = v28 | 7;
                v32 = v31 + 1;
                p_dst = (std::string *)operator new(v31 + 1);
                __dst.__r_.__value_.__l.__size_ = v29;
                __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
                p_dst = &__dst;
                if (!v28)
                {
LABEL_46:
                  p_dst->__r_.__value_.__s.__data_[v29] = 0;
                  v33 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v180, (uint64_t)&__dst);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  v34 = (const void *)(v186 + v23);
                  v35 = strlen((const char *)(v186 + v23));
                  if (v35 <= 0x7FFFFFFFFFFFFFF7)
                  {
                    v36 = v35;
                    if (v35 >= 0x17)
                    {
                      v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v35 | 7) != 0x17)
                        v39 = v35 | 7;
                      v40 = v39 + 1;
                      v37 = (std::string *)operator new(v39 + 1);
                      v189.__r_.__value_.__l.__size_ = v36;
                      v189.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                      v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
                      v38 = v187;
                    }
                    else
                    {
                      *((_BYTE *)&v189.__r_.__value_.__s + 23) = v35;
                      v37 = &v189;
                      v38 = v187;
                      if (!v35)
                        goto LABEL_56;
                    }
                    memmove(v37, v34, v36);
LABEL_56:
                    v37->__r_.__value_.__s.__data_[v36] = 0;
                    v41 = *((_DWORD *)v33 + 10);
                    v183 = SHIBYTE(v189.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&__dst, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
                    else
                      __dst = v189;
                    LODWORD(v191) = v38;
                    v42 = (char *)this + 40 * v41;
                    v43 = (uint64_t)(v42 + 1192);
                    v164 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    __p = (void *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v44 = &__dst;
                    else
                      v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    else
                      size = __dst.__r_.__value_.__l.__size_;
                    v168 = size;
                    v46 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v44, size);
                    v47 = v46;
                    v48 = *((_QWORD *)v42 + 150);
                    if (v48)
                    {
                      v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
                      v49.i16[0] = vaddlv_u8(v49);
                      if (v49.u32[0] > 1uLL)
                      {
                        v42 = (char *)v46;
                        if (v46 >= v48)
                          v42 = (char *)(v46 % v48);
                      }
                      else
                      {
                        v42 = (char *)((v48 - 1) & v46);
                      }
                      v50 = *(uint64_t ***)(*(_QWORD *)v43 + 8 * (_QWORD)v42);
                      if (v50)
                      {
                        __s2 = v44;
                        v51 = *v50;
                        if (*v50)
                        {
                          if (v49.u32[0] < 2uLL)
                          {
                            v52 = v48 - 1;
                            while (1)
                            {
                              v58 = v51[1];
                              if (v58 == v47)
                              {
                                v59 = *((unsigned __int8 *)v51 + 39);
                                if ((v59 & 0x80u) == 0)
                                  v60 = *((unsigned __int8 *)v51 + 39);
                                else
                                  v60 = v51[3];
                                if (v60 == v168)
                                {
                                  v61 = (const void **)(v51 + 2);
                                  if ((v59 & 0x80) != 0)
                                  {
                                    v161 = v52;
                                    v63 = memcmp(*v61, __s2, v51[3]);
                                    v52 = v161;
                                    if (!v63)
                                      goto LABEL_105;
                                  }
                                  else
                                  {
                                    if (!*((_BYTE *)v51 + 39))
                                      goto LABEL_105;
                                    v62 = __s2;
                                    while (*(unsigned __int8 *)v61 == v62->__r_.__value_.__s.__data_[0])
                                    {
                                      v61 = (const void **)((char *)v61 + 1);
                                      v62 = (std::string *)((char *)v62 + 1);
                                      if (!--v59)
                                        goto LABEL_105;
                                    }
                                  }
                                }
                              }
                              else if ((char *)(v58 & v52) != v42)
                              {
                                goto LABEL_107;
                              }
                              v51 = (uint64_t *)*v51;
                              if (!v51)
                                goto LABEL_107;
                            }
                          }
                          do
                          {
                            v53 = v51[1];
                            if (v53 == v47)
                            {
                              v54 = *((unsigned __int8 *)v51 + 39);
                              if ((v54 & 0x80u) == 0)
                                v55 = *((unsigned __int8 *)v51 + 39);
                              else
                                v55 = v51[3];
                              if (v55 == v168)
                              {
                                v56 = (const void **)(v51 + 2);
                                if ((v54 & 0x80) != 0)
                                {
                                  if (!memcmp(*v56, __s2, v51[3]))
                                  {
LABEL_105:
                                    v64 = v183;
                                    if (v164 < 0)
                                      operator delete(__p);
LABEL_145:
                                    if (v64 < 0)
                                      operator delete(v189.__r_.__value_.__l.__data_);
LABEL_13:
                                    v14 += 4;
                                    if (++v16 != v15)
                                      goto LABEL_14;
                                    goto LABEL_5;
                                  }
                                }
                                else
                                {
                                  if (!*((_BYTE *)v51 + 39))
                                    goto LABEL_105;
                                  v57 = __s2;
                                  while (*(unsigned __int8 *)v56 == v57->__r_.__value_.__s.__data_[0])
                                  {
                                    v56 = (const void **)((char *)v56 + 1);
                                    v57 = (std::string *)((char *)v57 + 1);
                                    if (!--v54)
                                      goto LABEL_105;
                                  }
                                }
                              }
                            }
                            else
                            {
                              if (v53 >= v48)
                                v53 %= v48;
                              if ((char *)v53 != v42)
                                break;
                            }
                            v51 = (uint64_t *)*v51;
                          }
                          while (v51);
                        }
                      }
                    }
LABEL_107:
                    v65 = (char *)operator new(0x30uLL);
                    v195.__locale_ = (std::locale::__imp *)v65;
                    v196 = (_QWORD *)(v43 + 16);
                    v169 = (_QWORD *)(v43 + 16);
                    *(_QWORD *)v65 = 0;
                    *((_QWORD *)v65 + 1) = v47;
                    *(std::string *)(v65 + 16) = __dst;
                    *((_DWORD *)v65 + 10) = v187;
                    v197 = 1;
                    v66 = (float)(unint64_t)(*(_QWORD *)(v43 + 24) + 1);
                    v67 = *(float *)(v43 + 32);
                    if (!v48 || (float)(v67 * (float)v48) < v66)
                    {
                      v68 = (v48 & (v48 - 1)) != 0;
                      if (v48 < 3)
                        v68 = 1;
                      v69 = v68 | (2 * v48);
                      v70 = vcvtps_u32_f32(v66 / v67);
                      if (v69 <= v70)
                        prime = v70;
                      else
                        prime = v69;
                      if (prime == 1)
                      {
                        prime = 2;
                      }
                      else if ((prime & (prime - 1)) != 0)
                      {
                        prime = std::__next_prime(prime);
                        v48 = *(_QWORD *)(v43 + 8);
                      }
                      if (prime > v48)
                        goto LABEL_119;
                      if (prime < v48)
                      {
                        v72 = vcvtps_u32_f32((float)*(unint64_t *)(v43 + 24) / *(float *)(v43 + 32));
                        if (v48 < 3
                          || (v73 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v73.i16[0] = vaddlv_u8(v73), v73.u32[0] > 1uLL))
                        {
                          v72 = std::__next_prime(v72);
                        }
                        else
                        {
                          v74 = 1 << -(char)__clz(v72 - 1);
                          if (v72 >= 2)
                            v72 = v74;
                        }
                        if (prime <= v72)
                          prime = v72;
                        if (prime < v48)
LABEL_119:
                          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(v43, prime);
                      }
                      v48 = *(_QWORD *)(v43 + 8);
                      if ((v48 & (v48 - 1)) != 0)
                      {
                        if (v47 >= v48)
                          v42 = (char *)(v47 % v48);
                        else
                          v42 = (char *)v47;
                      }
                      else
                      {
                        v42 = (char *)((v48 - 1) & v47);
                      }
                    }
                    v75 = *(_QWORD *)v43;
                    v76 = *(_QWORD **)(*(_QWORD *)v43 + 8 * (_QWORD)v42);
                    if (v76)
                    {
                      *(_QWORD *)v65 = *v76;
                      v64 = v183;
                      goto LABEL_143;
                    }
                    *(_QWORD *)v65 = *v169;
                    *v169 = v65;
                    *(_QWORD *)(v75 + 8 * (_QWORD)v42) = v169;
                    v64 = v183;
                    if (*(_QWORD *)v65)
                    {
                      v77 = *(_QWORD *)(*(_QWORD *)v65 + 8);
                      if ((v48 & (v48 - 1)) != 0)
                      {
                        if (v77 >= v48)
                          v77 %= v48;
                      }
                      else
                      {
                        v77 &= v48 - 1;
                      }
                      v76 = (_QWORD *)(*(_QWORD *)v43 + 8 * v77);
LABEL_143:
                      *v76 = v65;
                    }
                    ++*(_QWORD *)(v43 + 24);
                    goto LABEL_145;
                  }
LABEL_329:
                  abort();
                }
              }
              memmove(p_dst, v27, v29);
              goto LABEL_46;
            }
          }
          else
          {
            if (v25 >= *(_QWORD *)&v17)
              v25 %= *(_QWORD *)&v17;
            if (v25 != v20)
              goto LABEL_13;
          }
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_13;
        }
      }
      if (v7 == 11)
      {
        *((_QWORD *)this + 227) = *((_QWORD *)v5 + 2);
        goto LABEL_5;
      }
      if (v7 == 25)
      {
        *((_QWORD *)this + 2) = v5;
        v185 = v5[30];
        v8 = v5[16];
        v9 = (v8 + 1);
        v10 = *((_QWORD *)this + 228);
        v11 = (*((_QWORD *)this + 229) - v10) >> 2;
        if (v9 <= v11)
        {
          if (v9 < v11)
            *((_QWORD *)this + 229) = v10 + 4 * v9;
        }
        else
        {
          std::vector<unsigned int>::__append(v182, v9 - v11);
          LOBYTE(v8) = *(_BYTE *)(*((_QWORD *)this + 2) + 64);
        }
        v184 = v8;
        if ((_BYTE)v8)
          break;
      }
LABEL_5:
      v5 = (_DWORD *)((char *)v179 + v179[1]);
      v4 = v178 + 1;
      if (v178 + 1 == v171)
        goto LABEL_309;
    }
    v188 = 0;
    v170 = 0;
    v78 = v179 + 18;
    v79 = 1;
    v80 = 1;
    while (1)
    {
      *((_BYTE *)&v189.__r_.__value_.__s + 23) = 16;
      *(_OWORD *)&v189.__r_.__value_.__l.__data_ = *((_OWORD *)v78 + 1);
      v189.__r_.__value_.__s.__data_[16] = 0;
      begin = v182->__begin_;
      v182->__begin_[v80] = v78[12] - v185;
      if (!strncmp((const char *)v78 + 16, "__GPU_STATS", 0x10uLL))
        break;
      if (!strncmp((const char *)v78 + 16, "__DWARF", 0x10uLL))
        goto LABEL_204;
      if (strncmp((const char *)v78 + 16, "__GPU_METADATA", 0x10uLL))
      {
LABEL_154:
        if (!strncmp((const char *)v78 + 16, "__TEXT", 0x10uLL))
        {
          v90 = strncmp((const char *)v78, "__const", 0x10uLL);
          v82 = v167;
          if (!v90)
            goto LABEL_170;
          v91 = strncmp((const char *)v78, "__cstring", 0x10uLL);
          v82 = v166;
          if (!v91)
            goto LABEL_170;
        }
        if (!strncmp((const char *)v78 + 16, "__DATA", 0x10uLL) && !strncmp((const char *)v78, "__common", 0x10uLL))
        {
          begin[v80] = *((_QWORD *)v78 + 4);
          v82 = v165;
          goto LABEL_170;
        }
        goto LABEL_171;
      }
      if (!strncmp((const char *)v78, "__helpers", 0x10uLL) && *((_QWORD *)this + 28) && *((_QWORD *)this + 29))
      {
        v92 = 1;
      }
      else
      {
        if (!strncmp((const char *)v78, "__helpers", 0x10uLL))
          goto LABEL_154;
        if ((v170 & 1) != 0)
        {
          v85 = *((_QWORD *)v78 + 5);
          v86 = *(_QWORD *)this;
          v87 = v78;
          if (v85)
            v87 = (_DWORD *)(v86 + v78[12]);
          v88 = v78[14];
          v89 = v78[15];
          *((_QWORD *)this + 144) = v87;
          *((_QWORD *)this + 145) = v85;
          *((_BYTE *)this + 1168) = v80;
          *((_QWORD *)this + 147) = v86 + v88;
          *((_DWORD *)this + 296) = v89;
          v170 = 1;
          *((_BYTE *)this + 1144) = 1;
          if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_205;
          goto LABEL_299;
        }
        v92 = 0;
        v170 = 1;
      }
LABEL_172:
      if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v189;
      else
        v93 = (std::string *)v189.__r_.__value_.__r.__words[0];
      v94 = strlen((const char *)v93);
      if (v94 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v95 = v94;
      if (v94 >= 0x17)
      {
        v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v94 | 7) != 0x17)
          v97 = v94 | 7;
        v98 = v97 + 1;
        v96 = (std::string *)operator new(v97 + 1);
        __dst.__r_.__value_.__l.__size_ = v95;
        __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
LABEL_182:
        memmove(v96, v93, v95);
        goto LABEL_183;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v94;
      v96 = &__dst;
      if (v94)
        goto LABEL_182;
LABEL_183:
      v96->__r_.__value_.__s.__data_[v95] = 0;
      v99 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v180, (uint64_t)&__dst);
      v100 = v99;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v100)
        {
LABEL_194:
          v109 = *((_QWORD *)this + 1);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&__dst);
          if (v109)
          {
            for (i = 0; i != v109; ++i)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"", 0);
              v111 = *v6;
              *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
              v112 = (const std::ios_base *)((char *)v6 + *(_QWORD *)(v111 - 24));
              if (v112[1].__fmtflags_ == -1)
              {
                std::ios_base::getloc(v112);
                v113 = std::locale::use_facet(&v195, MEMORY[0x24BEDB350]);
                v114 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 32);
                std::locale::~locale(&v195);
                v112[1].__fmtflags_ = v114;
                v111 = *v6;
              }
              v112[1].__fmtflags_ = 48;
              *(_DWORD *)((char *)v6 + *(_QWORD *)(v111 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v111 - 24)
                                                                                             + 8) & 0xFFFFFFB5 | 8;
              v115 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v115, (uint64_t)" ", 1);
              if ((~(_BYTE)i & 0x1F) == 0)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
                v116 = std::locale::use_facet(&v195, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
                std::locale::~locale(&v195);
                std::ostream::put();
                std::ostream::flush();
              }
            }
          }
          std::ostream::flush();
          __dst.__r_.__value_.__r.__words[0] = v176;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v176 - 24)) = v175;
          __dst.__r_.__value_.__r.__words[2] = v174;
          v191 = v173;
          if (v193 < 0)
            operator delete(v192);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x234927E9C](&v194);
LABEL_204:
          if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_205;
          goto LABEL_299;
        }
      }
      else if (!v99)
      {
        goto LABEL_194;
      }
      v101 = *((_QWORD *)v78 + 5);
      v102 = v78;
      if (v101)
        v102 = (_DWORD *)(*(_QWORD *)this + v78[12]);
      if ((v92 & 1) == 0)
      {
        v103 = v78[15];
        v104 = *(_QWORD *)this + v78[14];
        v105 = (char *)this + 40 * *((unsigned int *)v100 + 10);
        *((_QWORD *)v105 + 3) = v102;
        *((_QWORD *)v105 + 4) = v101;
        v105[40] = v80;
        *((_QWORD *)v105 + 6) = v104;
        *((_DWORD *)v105 + 14) = v103;
      }
      LODWORD(__dst.__r_.__value_.__l.__data_) = v79;
      v106 = strlen((const char *)v93);
      if (v106 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v107 = v106;
      if (v106 >= 0x17)
      {
        v117 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v106 | 7) != 0x17)
          v117 = v106 | 7;
        v118 = v117 + 1;
        p_size = (std::string::size_type)operator new(v117 + 1);
        __dst.__r_.__value_.__r.__words[2] = v107;
        v191 = v118 | 0x8000000000000000;
        __dst.__r_.__value_.__l.__size_ = p_size;
      }
      else
      {
        HIBYTE(v191) = v106;
        p_size = (std::string::size_type)&__dst.__r_.__value_.__l.__size_;
        if (!v106)
          goto LABEL_212;
      }
      memmove((void *)p_size, v93, v107);
LABEL_212:
      *(_BYTE *)(p_size + v107) = 0;
      data_low = LODWORD(__dst.__r_.__value_.__l.__data_);
      v120 = *((_QWORD *)this + 220);
      if (v120)
      {
        v121 = (uint8x8_t)vcnt_s8((int8x8_t)v120);
        v121.i16[0] = vaddlv_u8(v121);
        if (v121.u32[0] > 1uLL)
        {
          p_size = LODWORD(__dst.__r_.__value_.__l.__data_);
          if (v120 <= LODWORD(__dst.__r_.__value_.__l.__data_))
            p_size = LODWORD(__dst.__r_.__value_.__l.__data_) % v120;
        }
        else
        {
          p_size = (v120 - 1) & (uint64_t)__dst.__r_.__value_.__l.__data_;
        }
        v122 = *(uint64_t ***)(*((_QWORD *)this + 219) + 8 * p_size);
        if (v122)
        {
          v123 = *v122;
          if (v123)
          {
            if (v121.u32[0] < 2uLL)
            {
              while (1)
              {
                v125 = v123[1];
                if (v125 == LODWORD(__dst.__r_.__value_.__l.__data_))
                {
                  if (*((_DWORD *)v123 + 4) == LODWORD(__dst.__r_.__value_.__l.__data_))
                    goto LABEL_296;
                }
                else if ((v125 & (v120 - 1)) != p_size)
                {
                  goto LABEL_232;
                }
                v123 = (uint64_t *)*v123;
                if (!v123)
                  goto LABEL_232;
              }
            }
            do
            {
              v124 = v123[1];
              if (v124 == LODWORD(__dst.__r_.__value_.__l.__data_))
              {
                if (*((_DWORD *)v123 + 4) == LODWORD(__dst.__r_.__value_.__l.__data_))
                  goto LABEL_296;
              }
              else
              {
                if (v124 >= v120)
                  v124 %= v120;
                if (v124 != p_size)
                  break;
              }
              v123 = (uint64_t *)*v123;
            }
            while (v123);
          }
        }
      }
LABEL_232:
      v126 = (char *)operator new(0x30uLL);
      v195.__locale_ = (std::locale::__imp *)v126;
      v196 = v181;
      *(_QWORD *)v126 = 0;
      *((_QWORD *)v126 + 1) = data_low;
      *((_DWORD *)v126 + 4) = data_low;
      *(_OWORD *)(v126 + 24) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
      *((_QWORD *)v126 + 5) = v191;
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
      v191 = 0;
      v197 = 1;
      v127 = (float)(unint64_t)(*((_QWORD *)this + 222) + 1);
      v128 = *((float *)this + 446);
      if (v120 && (float)(v128 * (float)v120) >= v127)
      {
        data_low = p_size;
        goto LABEL_286;
      }
      v129 = (v120 & (v120 - 1)) != 0;
      if (v120 < 3)
        v129 = 1;
      v130 = v129 | (2 * v120);
      v131 = vcvtps_u32_f32(v127 / v128);
      if (v130 <= v131)
        v132 = v131;
      else
        v132 = v130;
      if (v132 == 1)
      {
        v132 = 2;
      }
      else if ((v132 & (v132 - 1)) != 0)
      {
        v132 = std::__next_prime(v132);
        v120 = *((_QWORD *)this + 220);
      }
      if (v132 > v120)
        goto LABEL_245;
      if (v132 >= v120)
        goto LABEL_274;
      v144 = vcvtps_u32_f32((float)*((unint64_t *)this + 222) / *((float *)this + 446));
      if (v120 < 3 || (v145 = (uint8x8_t)vcnt_s8((int8x8_t)v120), v145.i16[0] = vaddlv_u8(v145), v145.u32[0] > 1uLL))
      {
        v144 = std::__next_prime(v144);
      }
      else
      {
        v146 = 1 << -(char)__clz(v144 - 1);
        if (v144 >= 2)
          v144 = v146;
      }
      if (v132 <= v144)
        v132 = v144;
      if (v132 < v120)
      {
        if (!v132)
        {
          v154 = (void *)*((_QWORD *)this + 219);
          *((_QWORD *)this + 219) = 0;
          if (v154)
            operator delete(v154);
          v120 = 0;
          *((_QWORD *)this + 220) = 0;
          goto LABEL_274;
        }
LABEL_245:
        if (v132 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v133 = operator new(8 * v132);
        v134 = (void *)*((_QWORD *)this + 219);
        *((_QWORD *)this + 219) = v133;
        if (v134)
          operator delete(v134);
        v135 = 0;
        *((_QWORD *)this + 220) = v132;
        do
          *(_QWORD *)(*((_QWORD *)this + 219) + 8 * v135++) = 0;
        while (v132 != v135);
        v136 = (_QWORD *)*v181;
        if (!*v181)
        {
LABEL_273:
          v120 = v132;
          goto LABEL_274;
        }
        v137 = v136[1];
        v138 = v132 - 1;
        if ((v132 & (v132 - 1)) == 0)
        {
          v139 = v137 & v138;
          *(_QWORD *)(*((_QWORD *)this + 219) + 8 * v139) = v181;
          for (j = (_QWORD *)*v136; *v136; j = (_QWORD *)*v136)
          {
            v141 = j[1] & v138;
            if (v141 == v139)
            {
              v136 = j;
            }
            else
            {
              v142 = *((_QWORD *)this + 219);
              if (*(_QWORD *)(v142 + 8 * v141))
              {
                *v136 = *j;
                v143 = 8 * v141;
                *j = **(_QWORD **)(*((_QWORD *)this + 219) + v143);
                **(_QWORD **)(*((_QWORD *)this + 219) + v143) = j;
              }
              else
              {
                *(_QWORD *)(v142 + 8 * v141) = v136;
                v136 = j;
                v139 = v141;
              }
            }
          }
          goto LABEL_273;
        }
        if (v137 >= v132)
          v137 %= v132;
        *(_QWORD *)(*((_QWORD *)this + 219) + 8 * v137) = v181;
        v147 = (_QWORD *)*v136;
        if (!*v136)
          goto LABEL_273;
        while (2)
        {
          v149 = v147[1];
          if (v149 >= v132)
            v149 %= v132;
          if (v149 != v137)
          {
            v150 = *((_QWORD *)this + 219);
            if (!*(_QWORD *)(v150 + 8 * v149))
            {
              *(_QWORD *)(v150 + 8 * v149) = v136;
LABEL_278:
              v136 = v147;
              v147 = (_QWORD *)*v147;
              v137 = v149;
              if (!v147)
                goto LABEL_273;
              continue;
            }
            *v136 = *v147;
            v148 = 8 * v149;
            *v147 = **(_QWORD **)(*((_QWORD *)this + 219) + v148);
            **(_QWORD **)(*((_QWORD *)this + 219) + v148) = v147;
            v147 = v136;
          }
          break;
        }
        v149 = v137;
        goto LABEL_278;
      }
      v120 = *((_QWORD *)this + 220);
LABEL_274:
      if ((v120 & (v120 - 1)) != 0)
      {
        if (v120 <= data_low)
          data_low %= v120;
      }
      else
      {
        data_low = ((_DWORD)v120 - 1) & data_low;
      }
LABEL_286:
      v151 = *((_QWORD *)this + 219);
      v152 = *(_QWORD **)(v151 + 8 * data_low);
      if (v152)
      {
        *(_QWORD *)v126 = *v152;
LABEL_294:
        *v152 = v126;
        goto LABEL_295;
      }
      *(_QWORD *)v126 = *v181;
      *v181 = v126;
      *(_QWORD *)(v151 + 8 * data_low) = v181;
      if (*(_QWORD *)v126)
      {
        v153 = *(_QWORD *)(*(_QWORD *)v126 + 8);
        if ((v120 & (v120 - 1)) != 0)
        {
          if (v153 >= v120)
            v153 %= v120;
        }
        else
        {
          v153 &= v120 - 1;
        }
        v152 = (_QWORD *)(*((_QWORD *)this + 219) + 8 * v153);
        goto LABEL_294;
      }
LABEL_295:
      ++*((_QWORD *)this + 222);
LABEL_296:
      if (SHIBYTE(v191) < 0)
        operator delete((void *)__dst.__r_.__value_.__l.__size_);
      ++v188;
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_205;
LABEL_299:
      operator delete(v189.__r_.__value_.__l.__data_);
LABEL_205:
      v79 = ++v80;
      if (v184 >= v80)
      {
        v78 += 20;
        if (v188 <= 0xE)
          continue;
      }
      goto LABEL_5;
    }
    v83 = strncmp((const char *)v78, "__counters", 0x10uLL);
    v82 = v177;
    if (!v83 || (v84 = strncmp((const char *)v78, "__telemetry", 0x10uLL), v82 = v172, !v84))
LABEL_170:
      MEMORY[0x234927D28](&v189, *v82);
LABEL_171:
    v92 = 0;
    goto LABEL_172;
  }
LABEL_309:
  v155 = (char *)this + 24;
  if (*((_QWORD *)this + 3))
  {
    if (!*((_QWORD *)this + 4))
      v155 = (char *)this + 584;
    if (!*(_QWORD *)v155)
      return 0;
  }
  else if (!*((_QWORD *)this + 73))
  {
    return 0;
  }
  v156 = (char *)this + 224;
  if (*((_QWORD *)this + 28))
  {
    if (!*((_QWORD *)this + 29))
      v156 = (char *)this + 784;
  }
  else
  {
    v156 = (char *)this + 784;
  }
  v158 = *(_QWORD *)v156;
  v157 = *((_QWORD *)v156 + 1);
  if (v158)
    v159 = v157 == 0;
  else
    v159 = 1;
  if (!v159)
    return *((_QWORD *)this + 152) != 0;
  return 0;
}

void sub_232C30408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,int a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void AGCDeserializedReply::~AGCDeserializedReply(AGCDeserializedReply *this)
{
  void **v2;
  void *v3;
  void *v4;
  AGCDeserializedReply *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void *v10;
  void **v11;
  void **v12;
  void **v13;

  v2 = (void **)*((_QWORD *)this + 247);
  if (v2)
  {
    do
    {
      v12 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v12;
    }
    while (v12);
  }
  v3 = (void *)*((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 228);
  if (v4)
  {
    *((_QWORD *)this + 229) = v4;
    operator delete(v4);
  }
  v5 = (AGCDeserializedReply *)((char *)this + 1752);
  v6 = (void **)*((_QWORD *)this + 221);
  if (v6)
  {
    do
    {
      v13 = (void **)*v6;
      if (*((char *)v6 + 47) < 0)
        operator delete(v6[3]);
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  v7 = *(void **)v5;
  *(_QWORD *)v5 = 0;
  if (v7)
    operator delete(v7);
  do
  {
    v8 = (void **)*((_QWORD *)v5 - 3);
    if (v8)
    {
      do
      {
        v11 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v11;
      }
      while (v11);
    }
    v10 = (void *)*((_QWORD *)v5 - 5);
    v5 = (AGCDeserializedReply *)((char *)v5 - 40);
    v9 = v10;
    *(_QWORD *)v5 = 0;
    if (v10)
      operator delete(v9);
  }
  while (v5 != (AGCDeserializedReply *)((char *)this + 1192));
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v6;
  std::vector<unsigned int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      abort();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &end[-(v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = (__int128 *)(end - 4);
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *--v6;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (uint64_t *)a2;
  else
    v4 = *(uint64_t **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          v13 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v19 = v12[1];
            if (v8 == v19)
            {
              v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0)
                v21 = *((unsigned __int8 *)v12 + 39);
              else
                v21 = v12[3];
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22)
                      return v12;
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v15 = v12[1];
          if (v8 == v15)
          {
            v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v12 + 39);
            else
              v17 = v12[3];
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v7)
              v15 %= *(_QWORD *)&v7;
            if (v15 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v32 = 0x9DDFEA08EB382D69;
    v33 = *(uint64_t *)((char *)a1 + a2 - 48);
    v34 = *(uint64_t *)((char *)a1 + a2 - 40);
    v35 = *(uint64_t *)((char *)a1 + a2 - 24);
    v37 = *(uint64_t *)((char *)a1 + a2 - 64);
    v36 = *(uint64_t *)((char *)a1 + a2 - 56);
    v38 = *(uint64_t *)((char *)a1 + a2 - 16);
    v39 = *(uint64_t *)((char *)a1 + a2 - 8);
    v40 = v36 + v38;
    v41 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))));
    v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    v43 = v37 + a2 + v36 + v33;
    v44 = v43 + v34;
    v45 = __ROR8__(v43, 44) + v37 + a2 + __ROR8__(v34 + v37 + a2 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 21);
    v46 = v36 + v38 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v47 = v46 + v35 + v38;
    v48 = __ROR8__(v47, 44);
    v49 = v47 + v39;
    v50 = v48 + v46 + __ROR8__(v46 + v34 + v39, 21);
    v52 = *a1;
    v51 = a1 + 4;
    v53 = v52 - 0x4B6D499041670D8DLL * v34;
    v54 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v55 = *(v51 - 3);
      v56 = v53 + v44 + v40 + v55;
      v57 = v51[2];
      v58 = v51[3];
      v59 = v51[1];
      v40 = v59 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v40 + v45 + v57, 42);
      v60 = v42 + v49;
      v61 = *(v51 - 2);
      v62 = *(v51 - 1);
      v63 = *(v51 - 4) - 0x4B6D499041670D8DLL * v45;
      v64 = v63 + v49 + v62;
      v65 = v63 + v55 + v61;
      v44 = v65 + v62;
      v66 = __ROR8__(v65, 44) + v63;
      v67 = (0xB492B66FBE98F273 * __ROR8__(v56, 37)) ^ v50;
      v53 = 0xB492B66FBE98F273 * __ROR8__(v60, 33);
      v45 = v66 + __ROR8__(v64 + v67, 21);
      v68 = v53 + v50 + *v51;
      v49 = v68 + v59 + v57 + v58;
      v50 = __ROR8__(v68 + v59 + v57, 44) + v68 + __ROR8__(v40 + v61 + v68 + v58, 21);
      v51 += 8;
      v42 = v67;
      v54 += 64;
    }
    while (v54);
    v69 = v53
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) >> 47));
    v70 = 0x9DDFEA08EB382D69
        * (v69 ^ (v67
                - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47))));
    v71 = 0x9DDFEA08EB382D69 * (v69 ^ (v70 >> 47) ^ v70);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * ((v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v29);
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 >= 9)
  {
    v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 >= 4)
  {
    v72 = *(unsigned int *)((char *)a1 + a2 - 4);
    v23 = 0x9DDFEA08EB382D69;
    v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
    v31 = v72 ^ (v73 >> 47) ^ v73;
    goto LABEL_8;
  }
  v32 = 0x9AE16A3B2F90404FLL;
  if (a2)
  {
    v71 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v32 *= v71 ^ (v71 >> 47);
  }
  return v32;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t *j;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  uint64_t *i;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v10)
            {
              v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0)
                v22 = *((unsigned __int8 *)v14 + 39);
              else
                v22 = v14[3];
              if (v22 == v8)
              {
                v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; i = (uint64_t *)((char *)i + 1))
                  {
                    v23 = (const void **)((char *)v23 + 1);
                    if (!--v21)
                      return;
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_49;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0)
              v17 = *((unsigned __int8 *)v14 + 39);
            else
              v17 = v14[3];
            if (v17 == v8)
            {
              v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
                {
                  v18 = (const void **)((char *)v18 + 1);
                  if (!--v16)
                    return;
                }
              }
            }
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  v25 = (char *)operator new(0x30uLL);
  v39 = v25;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_64;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_64:
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v39 = *v37;
    *v37 = v39;
  }
  else
  {
    *(_QWORD *)v39 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v39;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v39)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v39 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v38 >= v11)
          v38 %= v11;
      }
      else
      {
        v38 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v39;
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_232C313B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,std::string>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void AGX::Impl::ComputeProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  __int128 v20;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFDFLL)
  {
    begin = &value[v17 + 8];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 8uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x4E;
  v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(_QWORD *)(v19 + 5) = this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::Impl::ComputeProgramKey::getSupportIndirectCommandBuffers(AGX::Impl::ComputeProgramKey *this)
{
  return *((unsigned __int8 *)this + 88);
}

AGX::Impl::ComputeProgramKey *__copy_helper_block_e8_80c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1, uint64_t a2)
{
  AGX::Impl::ComputeProgramKey *result;

  result = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 80), (const ComputeProgramKey *)(a2 + 80));
  *(_QWORD *)(a1 + 80) = &off_250401E10;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  return result;
}

void __destroy_helper_block_e8_80c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 80) = &off_250402A80;
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  *(_QWORD *)(a1 + 80) = off_250401DD0;
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
}

uint64_t AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(NSObject *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v19;
  void *buffer_ptr;

  objc_msgSend(a3, "setObject:forKey:", a5, *MEMORY[0x24BDDD188]);
  objc_msgSend(a3, "setObject:forKey:", &unk_25041E100, *MEMORY[0x24BDDD198]);
  v10 = *MEMORY[0x24BDDD170];
  if (a1)
  {
    objc_msgSend(a3, "setObject:forKey:", MEMORY[0x24BDBD1C0], v10);
    v19 = 0;
    buffer_ptr = 0;
    v11 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &v19);
    if (buffer_ptr && v19)
    {
      v12 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *((_QWORD *)buffer_ptr + 1));
      objc_msgSend(a3, "setObject:forKey:", v12, *MEMORY[0x24BDDD178]);
      v13 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *((_QWORD *)buffer_ptr + 2));
      objc_msgSend(a3, "setObject:forKey:", v13, *MEMORY[0x24BDDD1B8]);
      v14 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)buffer_ptr);
      objc_msgSend(a3, "setObject:forKey:", v14, *MEMORY[0x24BDDD180]);
      v15 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *((_QWORD *)buffer_ptr + 3));
      objc_msgSend(a3, "setObject:forKey:", v15, *MEMORY[0x24BDDD168]);
      if ((a6 & 1) != 0)
      {
        v16 = *MEMORY[0x24BDDD190];
        v17 = &unk_25041E100;
      }
      else
      {
        v17 = (void *)objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", a4);
        v16 = *MEMORY[0x24BDDD190];
      }
      objc_msgSend(a3, "setObject:forKey:", v17, v16);
    }
    if (v11)
      dispatch_release(v11);
    return _MTLAddCompilerServiceCompileTimeStats();
  }
  else
  {
    objc_msgSend(a3, "setObject:forKey:", MEMORY[0x24BDBD1C8], v10);
    objc_msgSend(a3, "setObject:forKey:", &unk_25041E100, *MEMORY[0x24BDDD178]);
    objc_msgSend(a3, "setObject:forKey:", &unk_25041E100, *MEMORY[0x24BDDD1B8]);
    objc_msgSend(a3, "setObject:forKey:", &unk_25041E100, *MEMORY[0x24BDDD180]);
    objc_msgSend(a3, "setObject:forKey:", &unk_25041E100, *MEMORY[0x24BDDD168]);
    return objc_msgSend(a3, "setObject:forKey:", &unk_25041E100, *MEMORY[0x24BDDD190]);
  }
}

uint64_t AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(_QWORD *)(a1 + 376) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 344);
  if (v3)
  {
    *(_QWORD *)(a1 + 352) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 320);
  if (v4)
  {
    *(_QWORD *)(a1 + 328) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 296);
  if (v5)
  {
    *(_QWORD *)(a1 + 304) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 264);
  if (v6)
  {
    *(_QWORD *)(a1 + 272) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 240);
  if (v7)
  {
    *(_QWORD *)(a1 + 248) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 216);
  if (v8)
  {
    *(_QWORD *)(a1 + 224) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 192);
  if (v9)
  {
    *(_QWORD *)(a1 + 200) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(_QWORD *)(a1 + 104) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 72);
  if (v11)
  {
    *(_QWORD *)(a1 + 80) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(_QWORD *)(a1 + 56) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 24);
  if (v13)
  {
    *(_QWORD *)(a1 + 32) = v13;
    operator delete(v13);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AGX::G9::ComputeProgramVariant::~ComputeProgramVariant(AGX::G9::ComputeProgramVariant *this)
{
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ComputeProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

_QWORD *AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateComputeProgramKey(uint64_t a1, int *a2, NSObject *a3, char **a4, char **a5)
{
  AGX::Impl::ComputeProgramKey *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD *result;
  unsigned int v42;
  char v43;
  size_t size_ptr;
  void *buffer_ptr;

  v10 = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)a1);
  *(_QWORD *)v10 = &off_250401E10;
  *((_QWORD *)v10 + 18) = 0;
  if (!a2)
  {
    v11 = atomic_load(&AGX::defaultComputeDescriptor(void)::once);
    if (v11 != -1)
    {
      buffer_ptr = &v43;
      size_ptr = (size_t)&buffer_ptr;
      std::__call_once(&AGX::defaultComputeDescriptor(void)::once, &size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultComputeDescriptor(void)::$_0 &&>>);
    }
    a2 = (int *)AGX::defaultComputeDescriptor(void)::_desc;
  }
  v12 = (unsigned __int16 *)((char *)a2 - *a2);
  v13 = *v12;
  if (v13 < 0xD)
  {
    v20 = 0;
  }
  else
  {
    v14 = v12[6];
    if (!v12[6]
      || ((v15 = *(unsigned int *)((char *)a2 + v14), v16 = (unsigned int *)((char *)a2 + v14 + v15), *v16 >= 0x1F)
        ? (v17 = 31)
        : (v17 = *v16),
          !v17))
    {
      *(_QWORD *)(a1 + 40) = 0;
      goto LABEL_23;
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 4 * v17;
    v22 = (char *)a2 + v14 + v15;
    do
    {
      v23 = *(unsigned int *)&v22[v18 + 4];
      v24 = &v22[v18 + v23 - *(int *)((char *)&v16[v18 / 4 + 1] + v23)];
      if (*((unsigned __int16 *)v24 + 2) >= 5u)
      {
        v25 = *((unsigned __int16 *)v24 + 4);
        if (v25)
        {
          if (v22[v18 + 4 + v23 + v25] == 1)
            v26 = 1 << v19;
          else
            v26 = 0;
          v20 |= v26;
        }
      }
      ++v19;
      v18 += 4;
    }
    while (v21 != v18);
  }
  *(_QWORD *)(a1 + 40) = v20;
  if (v13 <= 6)
  {
    LODWORD(v27) = 0;
    goto LABEL_25;
  }
LABEL_23:
  v27 = v12[3];
  if (v27)
    LODWORD(v27) = *(int *)((char *)a2 + v27);
LABEL_25:
  *(_DWORD *)(a1 + 48) = v27;
  v28 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v28 < 5u)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    v29 = v28[2];
    if (v29)
      LODWORD(v29) = *((unsigned __int8 *)a2 + v29) != 0;
  }
  v30 = *(_DWORD *)(a1 + 56) & 0xFFFFFFFE | v29;
  *(_DWORD *)(a1 + 56) = v30;
  v31 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v31 < 0x15u)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    v32 = v31[10];
    if (v32)
      LODWORD(v32) = 2 * (*((_BYTE *)a2 + v32) != 0);
  }
  v33 = v32 | v30 & 0xFFFFFFFD;
  *(_DWORD *)(a1 + 56) = v33;
  v34 = (unsigned __int16 *)((char *)a2 - *a2);
  v35 = *v34;
  if (v35 <= 0xE)
  {
    LODWORD(v37) = 0;
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v36 = v34[7];
    if (v34[7])
      LOBYTE(v36) = *((_BYTE *)a2 + v36) != 0;
    *(_BYTE *)(a1 + 88) = v36;
    if (v35 < 0x11)
    {
      LODWORD(v37) = 0;
    }
    else
    {
      v37 = v34[8];
      if (v37)
        LODWORD(v37) = 32 * (*((_BYTE *)a2 + v37) != 0);
    }
  }
  *(_DWORD *)(a1 + 56) = v37 | v33 & 0xFFFFFFDF;
  v38 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v38 < 0x11u)
  {
    LODWORD(v39) = 0;
  }
  else
  {
    v39 = v38[8];
    if (v39)
      LODWORD(v39) = (*((_BYTE *)a2 + v39) != 0) << 9;
  }
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFFFFFD7F | v39;
  if (a3)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v40 = dispatch_data_create_map(a3, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a1 + 64), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v40);
  }
  if ((char **)(a1 + 96) != a4)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 96), *a4, a4[1], (a4[1] - *a4) >> 5);
  result = (_QWORD *)(a1 + 120);
  if ((char **)(a1 + 120) != a5)
    result = std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(result, *a5, a5[1], (a5[1] - *a5) >> 5);
  v42 = *(_DWORD *)(a1 + 56) & 0xFFFFF73B;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0x8BFFFEFF | 0x100;
  *(_DWORD *)(a1 + 56) = v42;
  return result;
}

void sub_232C31D64(_Unwind_Exception *a1)
{
  AGX::ComputeProgramKey *v1;

  AGX::ComputeProgramKey::~ComputeProgramKey(v1);
  _Unwind_Resume(a1);
}

dispatch_object_t **std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100](dispatch_object_t **a1)
{
  dispatch_object_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    dispatch_release(*v2);
    MEMORY[0x234927ECC](v2, 0x10C0C40495EAE30);
  }
  return a1;
}

_QWORD *AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateVertexProgramKey(uint64_t a1, int *a2, uint64_t a3, NSObject *a4, char **a5, char **a6, int a7)
{
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int16 *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  NSObject *v60;
  _QWORD *result;
  int v62;
  std::string v63;
  std::string __p;
  char v65;
  char v66;
  size_t size_ptr;
  void *buffer_ptr;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v63 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    __p = *(std::string *)(a3 + 24);
  v65 = *(_BYTE *)(a3 + 48);
  AGX::VertexProgramKey::VertexProgramKey(a1, (uint64_t)&v63, 0, 0, 0, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_12:
    operator delete(v63.__r_.__value_.__l.__data_);
    if (a2)
      goto LABEL_16;
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
LABEL_9:
  if (a2)
    goto LABEL_16;
LABEL_13:
  v14 = atomic_load(&AGX::defaultVertexDescriptor(void)::once);
  if (v14 != -1)
  {
    buffer_ptr = &v66;
    size_ptr = (size_t)&buffer_ptr;
    std::__call_once(&AGX::defaultVertexDescriptor(void)::once, &size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultVertexDescriptor(void)::$_0 &&>>);
  }
  a2 = (int *)AGX::defaultVertexDescriptor(void)::_desc;
LABEL_16:
  v15 = *(_QWORD *)(a1 + 56) | 0xFFLL;
  *(_QWORD *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 48) = 0;
  v16 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v16 < 0x15u)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    v17 = v16[10];
    if (v17)
      LOBYTE(v17) = *((_BYTE *)a2 + v17);
  }
  v18 = v15 & 0xFFFFFFFFFFFFF3FFLL | ((unint64_t)(v17 & 3) << 10);
  *(_QWORD *)(a1 + 56) = v18;
  v19 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v19 < 0x19u)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    v20 = v19[12];
    if (v20)
      LOBYTE(v20) = *((_BYTE *)a2 + v20);
  }
  v21 = v18 & 0xFFFFFFFFFFFFFCFFLL | ((unint64_t)(v20 & 3) << 8);
  *(_QWORD *)(a1 + 56) = v21;
  v22 = (unsigned __int16 *)((char *)a2 - *a2);
  v23 = *v22;
  if (v23 <= 0x1E)
  {
    LODWORD(v37) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v24 = v22[15];
    if (v22[15]
      && ((v25 = *(unsigned int *)((char *)a2 + v24), v26 = (unsigned int *)((char *)a2 + v24 + v25), *v26 >= 0x1F)
        ? (v27 = 31)
        : (v27 = *v26),
          v27))
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 4 * v27;
      v32 = (char *)a2 + v24 + v25;
      do
      {
        v33 = *(unsigned int *)&v32[v28 + 4];
        v34 = &v32[v28 + v33 - *(int *)((char *)&v26[v28 / 4 + 1] + v33)];
        if (*((unsigned __int16 *)v34 + 2) >= 5u)
        {
          v35 = *((unsigned __int16 *)v34 + 4);
          if (v35)
          {
            if (v32[v28 + 4 + v33 + v35] == 1)
              v36 = 1 << v29;
            else
              v36 = 0;
            v30 |= v36;
          }
        }
        ++v29;
        v28 += 4;
      }
      while (v31 != v28);
    }
    else
    {
      v30 = 0;
    }
    *(_QWORD *)(a1 + 40) = v30;
    if (v23 < 0x21)
    {
      LODWORD(v37) = 0;
    }
    else
    {
      v37 = v22[16];
      if (v37)
        LODWORD(v37) = *((unsigned __int8 *)a2 + v37) != 0;
    }
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFFFFFFE | v37;
  v38 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v38 < 0x1Du)
  {
    v39 = 0;
  }
  else
  {
    v39 = v38[14];
    if (v39)
      v39 = (unint64_t)(*((_BYTE *)a2 + v39) & 3) << 12;
  }
  v40 = v39 | v21 & 0xFFFFFFFFFFFFCFFFLL;
  *(_QWORD *)(a1 + 56) = v40;
  v41 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v41 >= 0x1Bu && (v42 = v41[13]) != 0)
    v43 = (unint64_t)(*(int *)((char *)a2 + v42) & 0xF) << 14;
  else
    v43 = 0x4000;
  v44 = v43 | v40 & 0xFFFFFFFFFFFC3FFFLL;
  *(_QWORD *)(a1 + 56) = v44;
  v45 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v45 < 0x2Bu)
  {
    v46 = 0;
  }
  else
  {
    v46 = v45[21];
    if (v46)
      v46 = (unint64_t)(*((_BYTE *)a2 + v46) != 0) << 19;
  }
  v47 = v46 | v44 & 0xFFFFFFFFFFF7FFFFLL;
  *(_QWORD *)(a1 + 56) = v47;
  v48 = (unsigned __int16 *)((char *)a2 - *a2);
  v49 = *v48;
  if (v49 < 9)
    goto LABEL_64;
  if (!v48[4])
  {
    if (v49 >= 0xB)
      goto LABEL_62;
LABEL_64:
    v50 = 0;
    goto LABEL_65;
  }
  v50 = 0;
  if (v49 >= 0xB && *((_BYTE *)a2 + v48[4]))
  {
LABEL_62:
    v51 = v48[5];
    if (v51)
    {
      v50 = (unint64_t)(*((_BYTE *)a2 + v51) == 1) << 20;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v52 = v50 | v47 & 0xFFFFFFFFFFEFFFFFLL;
  *(_QWORD *)(a1 + 56) = v52;
  v53 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v53 < 0x11u)
  {
    v54 = 0;
  }
  else
  {
    v54 = v53[8];
    if (v54)
      v54 = (unint64_t)(*((_BYTE *)a2 + v54) & 1) << 22;
  }
  v55 = v54 | v52 & 0xFFFFFFFFFFBFFFFFLL;
  *(_QWORD *)(a1 + 56) = v55;
  v56 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v56 < 0x23u)
  {
    v57 = 0;
  }
  else
  {
    v57 = v56[17];
    if (v57)
      v57 = (unint64_t)(*((_BYTE *)a2 + v57) != 0) << 25;
  }
  *(_QWORD *)(a1 + 56) = v57 | v55 & 0xFFFFFFFFFDFFFFFFLL;
  v58 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v58 < 0x23u)
  {
    LODWORD(v59) = 0;
  }
  else
  {
    v59 = v58[17];
    if (v59)
      LODWORD(v59) = (*((_BYTE *)a2 + v59) != 0) << 9;
  }
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFFFFFD7F | v59;
  if (a4)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v60 = dispatch_data_create_map(a4, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a1 + 64), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v60);
  }
  if ((char **)(a1 + 96) != a5)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 96), *a5, a5[1], (a5[1] - *a5) >> 5);
  result = (_QWORD *)(a1 + 120);
  if ((char **)(a1 + 120) != a6)
    result = std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(result, *a6, a6[1], (a6[1] - *a6) >> 5);
  if (a7)
    v62 = 2;
  else
    v62 = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFFFFFFD | v62;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0x8BFFFEFF | 0x100;
  *(_QWORD *)(a1 + 56) &= 0xFFFFFDFFF67FFFFFLL;
  return result;
}

void sub_232C32314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_232C32330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  _Unwind_Resume(a1);
}

void sub_232C32344(_Unwind_Exception *a1)
{
  void **v1;

  AGX::VertexProgramKey::~VertexProgramKey(v1);
  _Unwind_Resume(a1);
}

_QWORD *AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateFragmentProgramKey(uint64_t a1, int *a2, int a3, NSObject *a4, char **a5, char **a6)
{
  MTLPixelFormat v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  int *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  int *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  char v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  char *v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  unsigned int v100;
  unsigned __int16 *v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  unsigned __int16 *v106;
  uint64_t v107;
  int v108;
  unsigned __int16 *v109;
  uint64_t v110;
  int v111;
  unsigned __int16 *v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned __int16 *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned __int16 *v136;
  uint64_t v137;
  int v138;
  unsigned __int16 *v139;
  uint64_t v140;
  int v141;
  int v142;
  NSObject *map;
  _QWORD *result;
  unsigned int v145;
  std::string::value_type *__s[2];
  __int128 v147;
  __int128 v148;
  _BYTE v149[31];
  int v150;
  __int16 v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  char v159;
  size_t *v160;
  size_t size_ptr[2];

  AGX::FragmentProgramKey::FragmentProgramKey(a1, 0, 0, 0);
  v148 = 0u;
  memset(v149, 0, sizeof(v149));
  *(_OWORD *)__s = 0u;
  v147 = 0u;
  v150 = 1;
  v151 = 0;
  v152 = 0;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0u;
  bzero(__s, 0x28uLL);
  if (!a2)
  {
    AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((uint64_t)__s);
    v41 = v147;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)__s;
    *(_OWORD *)(a1 + 128) = v41;
    *(_QWORD *)(a1 + 144) = v148;
    v42 = atomic_load(&AGX::defaultFragmentDescriptor(void)::once);
    if (v42 != -1)
    {
      size_ptr[0] = (size_t)&v159;
      v160 = size_ptr;
      std::__call_once(&AGX::defaultFragmentDescriptor(void)::once, &v160, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultFragmentDescriptor(void)::$_0 &&>>);
    }
    a2 = (int *)AGX::defaultFragmentDescriptor(void)::_desc;
    goto LABEL_58;
  }
  v13 = (unsigned __int16 *)((char *)a2 - *a2);
  v14 = *v13;
  if (v14 >= 0x17)
  {
    if (v13[11])
    {
      v15 = (unsigned int *)((char *)a2 + v13[11] + *(unsigned int *)((char *)a2 + v13[11]));
      v16 = *v15;
      if (*v15)
      {
        v17 = (int *)((char *)v15 + v15[1] + 4);
        v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 >= 5u)
        {
          v19 = v18[2];
          if (v19)
          {
            if (*(_WORD *)((char *)v17 + v19))
            {
              *(_QWORD *)&v153 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v17 + v19), v12);
              DWORD2(v148) |= 1u;
            }
          }
        }
        if (v16 >= 2)
        {
          v20 = (int *)((char *)v15 + v15[2] + 8);
          v21 = (unsigned __int16 *)((char *)v20 - *v20);
          if (*v21 >= 5u)
          {
            v22 = v21[2];
            if (v22)
            {
              if (*(_WORD *)((char *)v20 + v22))
              {
                *((_QWORD *)&v153 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v20 + v22), v12);
                DWORD2(v148) |= 2u;
              }
            }
          }
          if (v16 >= 3)
          {
            v23 = (int *)((char *)v15 + v15[3] + 12);
            v24 = (unsigned __int16 *)((char *)v23 - *v23);
            if (*v24 >= 5u)
            {
              v25 = v24[2];
              if (v25)
              {
                if (*(_WORD *)((char *)v23 + v25))
                {
                  *(_QWORD *)&v154 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v23 + v25), v12);
                  DWORD2(v148) |= 4u;
                }
              }
            }
            if (v16 >= 4)
            {
              v26 = (int *)((char *)v15 + v15[4] + 16);
              v27 = (unsigned __int16 *)((char *)v26 - *v26);
              if (*v27 >= 5u)
              {
                v28 = v27[2];
                if (v28)
                {
                  if (*(_WORD *)((char *)v26 + v28))
                  {
                    *((_QWORD *)&v154 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v26 + v28), v12);
                    DWORD2(v148) |= 8u;
                  }
                }
              }
              if (v16 >= 5)
              {
                v29 = (int *)((char *)v15 + v15[5] + 20);
                v30 = (unsigned __int16 *)((char *)v29 - *v29);
                if (*v30 >= 5u)
                {
                  v31 = v30[2];
                  if (v31)
                  {
                    if (*(_WORD *)((char *)v29 + v31))
                    {
                      *(_QWORD *)&v155 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v29 + v31), v12);
                      DWORD2(v148) |= 0x10u;
                    }
                  }
                }
                if (v16 >= 6)
                {
                  v32 = (int *)((char *)v15 + v15[6] + 24);
                  v33 = (unsigned __int16 *)((char *)v32 - *v32);
                  if (*v33 >= 5u)
                  {
                    v34 = v33[2];
                    if (v34)
                    {
                      if (*(_WORD *)((char *)v32 + v34))
                      {
                        *((_QWORD *)&v155 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v32 + v34), v12);
                        DWORD2(v148) |= 0x20u;
                      }
                    }
                  }
                  if (v16 >= 7)
                  {
                    v35 = (int *)((char *)v15 + v15[7] + 28);
                    v36 = (unsigned __int16 *)((char *)v35 - *v35);
                    if (*v36 >= 5u)
                    {
                      v37 = v36[2];
                      if (v37)
                      {
                        if (*(_WORD *)((char *)v35 + v37))
                        {
                          *(_QWORD *)&v156 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v35 + v37), v12);
                          DWORD2(v148) |= 0x40u;
                        }
                      }
                    }
                    if (v16 >= 8)
                    {
                      v38 = (int *)((char *)v15 + v15[8] + 32);
                      v39 = (unsigned __int16 *)((char *)v38 - *v38);
                      if (*v39 >= 5u)
                      {
                        v40 = v39[2];
                        if (v40)
                        {
                          if (*(_WORD *)((char *)v38 + v40))
                          {
                            *((_QWORD *)&v156 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)*(unsigned __int16 *)((char *)v38 + v40), v12);
                            DWORD2(v148) |= 0x80u;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    if (v13[6])
      v43 = *((_BYTE *)a2 + v13[6]);
    else
      v43 = 1;
    LOBYTE(v151) = v43;
    HIBYTE(v151) = v43;
    if (v14 < 0xF)
      goto LABEL_57;
    if (!v13[7])
      goto LABEL_57;
    v44 = *((_BYTE *)a2 + v13[7]);
    if (!v44)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (v14 > 0xC)
    goto LABEL_48;
  v44 = 1;
  LOBYTE(v151) = 1;
LABEL_56:
  HIBYTE(v151) = v44;
LABEL_57:
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((uint64_t)__s);
  v45 = v147;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)__s;
  *(_OWORD *)(a1 + 128) = v45;
  *(_QWORD *)(a1 + 144) = v148;
LABEL_58:
  v46 = *a2;
  v47 = (char *)a2 - v46;
  v48 = *(unsigned __int16 *)((char *)a2 - v46);
  if (v48 < 0x17)
    goto LABEL_118;
  v49 = -v46;
  v50 = *((unsigned __int16 *)v47 + 11);
  if (*((_WORD *)v47 + 11))
  {
    v51 = (char *)a2 + v50;
    v52 = *(unsigned int *)((char *)a2 + v50);
    v53 = *(unsigned int *)((char *)a2 + v50 + v52);
    if ((_DWORD)v53)
    {
      v54 = 0;
      v55 = a1 + 64;
      v56 = v50 + v52;
      while (1)
      {
        v57 = *(unsigned int *)((char *)a2 + v56 + 4);
        v58 = (char *)a2 + v56 + v57;
        v59 = *((int *)v58 + 1);
        v60 = (char *)a2 + v56 + v57 - v59;
        v61 = *((unsigned __int16 *)v60 + 2);
        if (v61 < 5)
          goto LABEL_104;
        v62 = *((unsigned __int16 *)v60 + 4);
        if (!v62 || !*(_WORD *)((char *)a2 + v56 + v57 + v62 + 4))
          goto LABEL_104;
        v63 = -v59;
        if (v61 >= 9)
        {
          if (!*(_WORD *)((char *)a2 + v56 + v57 - v59 + 12)
            || !*((_BYTE *)a2 + v56 + v57 + *(unsigned __int16 *)((char *)a2 + v56 + v57 - v59 + 12) + 4))
          {
            goto LABEL_100;
          }
          v64 = *(_DWORD *)(v55 + 4 * v54) | 1;
          *(_DWORD *)(v55 + 4 * v54) = v64;
          v65 = (char *)a2 + v56 + v57 - *((int *)v58 + 1);
          if (*((unsigned __int16 *)v65 + 2) >= 0x15u && (v66 = *((unsigned __int16 *)v65 + 12)) != 0)
          {
            v67 = *((unsigned __int8 *)a2 + v56 + v57 + v66 + 4);
            if (v67 > 0x12)
              v68 = 0;
            else
              v68 = 2 * v67 + 2;
          }
          else
          {
            v68 = 4;
          }
          v69 = v68 | v64 & 0xFFFFFFC1;
          *(_DWORD *)(v55 + 4 * v54) = v69;
          v70 = v57 - *((int *)v58 + 1);
          if (*(unsigned __int16 *)((char *)a2 + v56 + v70 + 4) >= 0x11u
            && (v71 = *(unsigned __int16 *)((char *)a2 + v56 + v70 + 20)) != 0)
          {
            v72 = *((unsigned __int8 *)a2 + v56 + v57 + v71 + 4);
            if (v72 > 0x12)
              v73 = 0;
            else
              v73 = (v72 << 6) + 64;
          }
          else
          {
            v73 = 64;
          }
          v74 = v73 | v69 & 0xFFFFF83F;
          *(_DWORD *)(v55 + 4 * v54) = v74;
          v75 = (char *)a2 + v56 + v57 - *((int *)v58 + 1);
          if (*((unsigned __int16 *)v75 + 2) >= 0x13u && (v76 = *((unsigned __int16 *)v75 + 11)) != 0)
          {
            v77 = *((unsigned __int8 *)a2 + v56 + v57 + v76 + 4);
            if (v77 > 0x12)
              v78 = 0;
            else
              v78 = (v77 << 11) + 2048;
          }
          else
          {
            v78 = 4096;
          }
          v79 = v78 | v74 & 0xFFFF07FF;
          *(_DWORD *)(v55 + 4 * v54) = v79;
          v80 = v57 - *((int *)v58 + 1);
          if (*(unsigned __int16 *)((char *)a2 + v56 + v80 + 4) >= 0xFu
            && (v81 = *(unsigned __int16 *)((char *)a2 + v56 + v80 + 18)) != 0)
          {
            v82 = *((unsigned __int8 *)a2 + v56 + v57 + v81 + 4);
            if (v82 > 0x12)
              v83 = 0;
            else
              v83 = (v82 << 16) + 0x10000;
          }
          else
          {
            v83 = 0x10000;
          }
          v84 = v83 | v79 & 0xFFE0FFFF;
          *(_DWORD *)(v55 + 4 * v54) = v84;
          v85 = (char *)a2 + v56 + v57 - *((int *)v58 + 1);
          if (*((unsigned __int16 *)v85 + 2) >= 0xDu && (v86 = *((unsigned __int16 *)v85 + 8)) != 0)
          {
            v87 = *((unsigned __int8 *)a2 + v56 + v57 + v86 + 4);
            if (v87 > 4)
              v88 = 0;
            else
              v88 = dword_232D7C750[v87];
          }
          else
          {
            v88 = 6291456;
          }
          v89 = v88 | v84 & 0xFF1FFFFF;
          *(_DWORD *)(v55 + 4 * v54) = v89;
          v90 = v57 - *((int *)v58 + 1);
          if (*(unsigned __int16 *)((char *)a2 + v56 + v90 + 4) >= 0xBu
            && (v91 = *(unsigned __int16 *)((char *)a2 + v56 + v90 + 14)) != 0)
          {
            v92 = *((unsigned __int8 *)a2 + v56 + v57 + v91 + 4);
            if (v92 > 4)
              v93 = 0;
            else
              v93 = dword_232D7C764[v92];
          }
          else
          {
            v93 = 50331648;
          }
          *(_DWORD *)(v55 + 4 * v54) = v93 | v89 & 0xF8FFFFFF;
          v94 = *((int *)v58 + 1);
          v63 = -v94;
          v61 = *(unsigned __int16 *)((char *)a2 + v56 + v57 - v94 + 4);
        }
        if (v61 < 7)
          goto LABEL_102;
LABEL_100:
        v95 = v63 + v56;
        if (!*(_WORD *)((char *)a2 + v57 + v95 + 10))
        {
LABEL_102:
          v96 = 15;
          goto LABEL_103;
        }
        v96 = *((unsigned __int8 *)a2 + v56 + v57 + *(unsigned __int16 *)((char *)a2 + v57 + v95 + 10) + 4);
LABEL_103:
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFF0000FF | (v96 << 31 >> 31) & (0x1000000 << v54) | (1 << v54) & (v96 << 28 >> 31) | ((unsigned __int16)((256 << v54) & ((__int16)((_WORD)v96 << 13) >> 15)) | (unsigned __int16)*(_DWORD *)(a1 + 48)) & 0xFF00 | ((0x10000 << v54) & (v96 << 30 >> 31) | *(_DWORD *)(a1 + 48)) & 0xFF0000;
        v53 = *(unsigned int *)&v51[v52];
LABEL_104:
        if (v54 <= 6)
        {
          ++v54;
          v56 += 4;
          if (v54 < v53)
            continue;
        }
        v97 = *a2;
        v49 = -v97;
        v48 = *(unsigned __int16 *)((char *)a2 - v97);
        break;
      }
    }
  }
  if (v48 >= 0x27 && *(_WORD *)((char *)a2 + v49 + 38))
  {
    v98 = *((unsigned __int8 *)a2 + *(unsigned __int16 *)((char *)a2 + v49 + 38));
    if (v98 > 0xF)
      v99 = 0;
    else
      v99 = dword_232D7C6F0[v98];
  }
  else
  {
LABEL_118:
    v99 = 64;
  }
  v100 = *(_DWORD *)(a1 + 40) & 0xFFFFF83F | v99;
  *(_DWORD *)(a1 + 40) = v100;
  v101 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v101 >= 0x2Bu && (v102 = v101[21]) != 0)
  {
    v103 = *((unsigned __int8 *)a2 + v102);
    if (v103 > 7)
      v104 = 0;
    else
      v104 = dword_232D7C730[v103];
  }
  else
  {
    v104 = 4096;
  }
  v105 = v104 | v100 & 0xFFFF0FFF;
  *(_DWORD *)(a1 + 40) = v105;
  v106 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v106 < 9u)
  {
    LODWORD(v107) = 0;
  }
  else
  {
    v107 = v106[4];
    if (v107)
      LODWORD(v107) = *((unsigned __int8 *)a2 + v107) != 0;
  }
  v108 = v105 & 0xFFFFFFFE | v107;
  *(_DWORD *)(a1 + 40) = v108;
  v109 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v109 < 0xBu)
  {
    LODWORD(v110) = 0;
  }
  else
  {
    v110 = v109[5];
    if (v110)
      LODWORD(v110) = 2 * (*((_BYTE *)a2 + v110) != 0);
  }
  v111 = v110 | v108 & 0xFFFFFFFD;
  *(_DWORD *)(a1 + 40) = v111;
  v112 = (unsigned __int16 *)((char *)a2 - *a2);
  v113 = *v112;
  if (v113 < 0x11)
  {
    LODWORD(v115) = 0;
    v114 = -1;
    goto LABEL_140;
  }
  if (v112[8])
  {
    v114 = *(int *)((char *)a2 + v112[8]);
    if (v113 >= 0x13)
      goto LABEL_135;
LABEL_139:
    LODWORD(v115) = 0;
    goto LABEL_140;
  }
  v114 = -1;
  if (v113 < 0x13)
    goto LABEL_139;
LABEL_135:
  v115 = v112[9];
  if (v115)
    LODWORD(v115) = *(float *)((char *)a2 + v115) != 1.0;
LABEL_140:
  if (v114 == -1)
    v116 = v115;
  else
    v116 = 1;
  if (v116)
    v117 = 4;
  else
    v117 = 0;
  *(_DWORD *)(a1 + 40) = v117 | v111 & 0xFFFFFFFB;
  v118 = (unsigned __int16 *)((char *)a2 - *a2);
  v119 = *v118;
  if (v119 <= 0x1C)
  {
    *(_QWORD *)(a1 + 56) = 0;
LABEL_168:
    LODWORD(v134) = 0;
    *(_BYTE *)(a1 + 224) = 0;
    goto LABEL_169;
  }
  v120 = v118[14];
  if (v118[14]
    && ((v121 = *(unsigned int *)((char *)a2 + v120), v122 = (unsigned int *)((char *)a2 + v120 + v121), *v122 >= 0x1F)
      ? (v123 = 31)
      : (v123 = *v122),
        v123))
  {
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = 4 * v123;
    v128 = (char *)a2 + v120 + v121;
    do
    {
      v129 = *(unsigned int *)&v128[v124 + 4];
      v130 = &v128[v124 + v129 - *(int *)((char *)&v122[v124 / 4 + 1] + v129)];
      if (*((unsigned __int16 *)v130 + 2) >= 5u)
      {
        v131 = *((unsigned __int16 *)v130 + 4);
        if (v131)
        {
          if (v128[v124 + 4 + v129 + v131] == 1)
            v132 = 1 << v125;
          else
            v132 = 0;
          v126 |= v132;
        }
      }
      ++v125;
      v124 += 4;
    }
    while (v127 != v124);
  }
  else
  {
    v126 = 0;
  }
  *(_QWORD *)(a1 + 56) = v126;
  if (v119 <= 0x1E)
    goto LABEL_168;
  v133 = v118[15];
  if (v118[15])
    LOBYTE(v133) = *((_BYTE *)a2 + v133) != 0;
  *(_BYTE *)(a1 + 224) = v133;
  if (v119 < 0x33)
  {
    LODWORD(v134) = 0;
  }
  else
  {
    v134 = v118[25];
    if (v134)
      LODWORD(v134) = 4 * (*((_BYTE *)a2 + v134) != 0);
  }
LABEL_169:
  v135 = *(_DWORD *)(a1 + 104) & 0xFFFFFFFB | v134;
  *(_DWORD *)(a1 + 104) = v135;
  v136 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v136 < 0x21u)
  {
    LODWORD(v137) = 0;
  }
  else
  {
    v137 = v136[16];
    if (v137)
      LODWORD(v137) = (*((_BYTE *)a2 + v137) != 0) << 6;
  }
  v138 = v137 | v135 & 0xFFFFFFBF;
  *(_DWORD *)(a1 + 104) = v138;
  v139 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v139 < 0x21u)
  {
    LODWORD(v140) = 0;
  }
  else
  {
    v140 = v139[16];
    if (v140)
      LODWORD(v140) = (*((_BYTE *)a2 + v140) != 0) << 9;
  }
  v141 = *(_DWORD *)(a1 + 100) & 0xFFFFFD7F | v140;
  if (a3)
    v142 = 256;
  else
    v142 = 0;
  *(_DWORD *)(a1 + 100) = v141;
  *(_DWORD *)(a1 + 104) = v138 & 0xFFFFFEFF | v142;
  if (a4)
  {
    __s[0] = 0;
    size_ptr[0] = 0;
    map = dispatch_data_create_map(a4, (const void **)__s, size_ptr);
    std::string::append((std::string *)(a1 + 200), __s[0], size_ptr[0]);
    dispatch_release(map);
  }
  if ((char **)(a1 + 232) != a5)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 232), *a5, a5[1], (a5[1] - *a5) >> 5);
  result = (_QWORD *)(a1 + 256);
  if ((char **)(a1 + 256) != a6)
    result = std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(result, *a6, a6[1], (a6[1] - *a6) >> 5);
  v145 = *(_DWORD *)(a1 + 104) & 0xFFFFF7F7;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0x8BFFFEFF | 0x100;
  *(_DWORD *)(a1 + 104) = v145;
  return result;
}

void sub_232C32F2C(_Unwind_Exception *a1)
{
  AGX::FragmentProgramKey *v1;

  AGX::FragmentProgramKey::~FragmentProgramKey(v1);
  _Unwind_Resume(a1);
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::BVHBuilderProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x55;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

BOOL AGX::BVHBuilderProgramKey::isPrecompiledToPipelineCache(AGX::BVHBuilderProgramKey *this)
{
  return (*((_BYTE *)this + 43) & 0x40) == 0;
}

uint64_t AGX::BVHBuilderProgramKey::isPrecompiledToBinaryArchive(AGX::BVHBuilderProgramKey *this)
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::EndOfTileProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFA7)
  {
    begin = &value[v17 + 22];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0x16uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x45;
  *(_OWORD *)(v19 + 1) = *(_OWORD *)&this[1].__end_cap_.__value_;
  v20 = *(_OWORD *)&this[2].__end_;
  v21 = *(_OWORD *)&this[3].__begin_;
  v22 = *(_OWORD *)&this[3].__end_cap_.__value_;
  *(_OWORD *)(v19 + 17) = *(_OWORD *)&this[4].__end_;
  *(_OWORD *)(v19 + 13) = v22;
  *(_OWORD *)(v19 + 9) = v21;
  *(_OWORD *)(v19 + 5) = v20;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

BOOL AGX::EndOfTileProgramKey::isPrecompiledToPipelineCache(AGX::EndOfTileProgramKey *this)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;

  v1 = *((_DWORD *)this + 10);
  v2 = *((_DWORD *)this + 11);
  v3 = *((_DWORD *)this + 12);
  v4 = *((_DWORD *)this + 13);
  v5 = *((_DWORD *)this + 14);
  v6 = *((_DWORD *)this + 15);
  v7 = *((_DWORD *)this + 16);
  v8 = *((_DWORD *)this + 17);
  v9 = *((_DWORD *)this + 18);
  v10 = *((_DWORD *)this + 19);
  v11 = *((_DWORD *)this + 20);
  v12 = *((_DWORD *)this + 21);
  v13 = *((_DWORD *)this + 22);
  v14 = *((_DWORD *)this + 23);
  v15 = *((_DWORD *)this + 24);
  v16 = *((_DWORD *)this + 25);
  v17 = *((_DWORD *)this + 26);
  v18 = v2 | v1 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17;
  v19 = *((_QWORD *)this + 14) | *((unsigned __int16 *)this + 60) | *((unsigned __int16 *)this + 61) | (unint64_t)*((unsigned __int16 *)this + 62);
  return !(v19 | v18)
      || (v19 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | (v18 & 0x2000000 | (v18 != 0)) ^ v1 | v13 | v14 | v15 | v16 | v17) == 0x200000000000000;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::BackgroundObjectProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  __int128 v25;
  __int128 v26;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFEFLL)
  {
    begin = &value[v17 + 4];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 4uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x44;
  *(_QWORD *)(v19 + 1) = this[3].__end_;
  v20 = this->__end_cap_.__value_;
  v21 = (char *)this[1].__begin_ - (char *)v20;
  v22 = v21 >> 2;
  if ((unint64_t)v21 > 0xFFFFFFFFFFFFFFCFLL)
  {
    v23 = &v20[v22 + 12];
    this[1].__begin_ = v23;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    v20 = this->__end_cap_.__value_;
    v23 = this[1].__begin_;
  }
  v24 = &v20[v22];
  *v24 = (((_DWORD)v23 - (_DWORD)v20) >> 2 << 8) | 0x42;
  v25 = *(_OWORD *)&this[1].__end_cap_.__value_;
  v26 = *(_OWORD *)&this[2].__end_;
  *(_QWORD *)(v24 + 9) = this[3].__begin_;
  *(_OWORD *)(v24 + 5) = v26;
  *(_OWORD *)(v24 + 1) = v25;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

BOOL AGX::BackgroundObjectProgramKey::isPrecompiledToPipelineCache(AGX::BackgroundObjectProgramKey *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v12;

  v2 = *((_DWORD *)this + 17);
  v1 = *((_DWORD *)this + 18);
  v3 = *((_DWORD *)this + 10);
  v4 = *((_DWORD *)this + 11);
  v6 = *((_DWORD *)this + 12);
  v5 = *((_DWORD *)this + 13);
  v7 = *((_DWORD *)this + 14);
  v8 = *((_DWORD *)this + 15);
  v9 = *((_DWORD *)this + 16);
  v10 = *((_QWORD *)this + 10);
  if (v10 == 0x10000000000 && (v3 | v4 | v1 & 0xFFFF0FFF | v6 | v5 | v7 | v8 | v9 | v2) == 0)
    return 1;
  v12 = v4 | v3 | v1 | v6 | v5 | v7 | v8 | v9 | v2;
  return !v10 && v12 == 0;
}

uint64_t AGX::FragmentProgramKey::FragmentProgramKey(uint64_t a1, NSObject *a2, void *a3, void *a4)
{
  std::string *v8;
  std::string::value_type **v9;
  NSObject *v10;
  std::string::value_type *__s;
  char *v13;
  uint64_t v14;
  size_t size_ptr;

  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = (std::string *)(a1 + 200);
  *(_QWORD *)a1 = &off_250402A40;
  v9 = (std::string::value_type **)(a1 + 232);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 209) = 0u;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 232), 0);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 256), (void *)objc_msgSend(0, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 256), (void *)objc_msgSend(0, "privateFunctions"), 1u);
  *(_QWORD *)a1 = &off_250401D90;
  *(_QWORD *)(a1 + 280) = 0;
  if (a2)
  {
    __s = 0;
    size_ptr = 0;
    v10 = dispatch_data_create_map(a2, (const void **)&__s, &size_ptr);
    std::string::append(v8, __s, size_ptr);
    dispatch_release(v10);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(&__s, a4);
  if (v9 != &__s)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v9, __s, v13, (v13 - __s) >> 5);
  if (__s)
  {
    v13 = __s;
    operator delete(__s);
  }
  v13 = 0;
  v14 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, (void *)objc_msgSend(a3, "functions", 0), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, (void *)objc_msgSend(a3, "privateFunctions"), 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 256), __s, v13, (v13 - __s) >> 5);
  if (__s)
  {
    v13 = __s;
    operator delete(__s);
  }
  return a1;
}

void sub_232C339D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  AGX::FragmentProgramKey *v10;

  if (__p)
    operator delete(__p);
  AGX::FragmentProgramKey::~FragmentProgramKey(v10);
  _Unwind_Resume(a1);
}

void sub_232C33A2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 264) = v7;
    operator delete(v7);
    v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      if ((*(char *)(v1 + 223) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v8 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 240) = v8;
  operator delete(v8);
  if ((*(char *)(v1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    AGX::VertexProgramVaryings::~VertexProgramVaryings(v5);
    *(_QWORD *)v1 = off_250401D50;
    v9 = *(void **)(v1 + 16);
    if (v9)
    {
      *(_QWORD *)(v1 + 24) = v9;
      operator delete(v9);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v4);
  goto LABEL_5;
}

void AGX::FragmentProgramKey::~FragmentProgramKey(AGX::FragmentProgramKey *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_250402A40;
  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if ((*((char *)this + 199) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    operator delete(*((void **)this + 22));
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_13;
  }
  operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    goto LABEL_12;
LABEL_7:
  if ((*((char *)this + 175) & 0x80000000) == 0)
    goto LABEL_8;
LABEL_13:
  operator delete(*((void **)this + 19));
LABEL_8:
  *(_QWORD *)this = off_250401D50;
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t AGX::Impl::FragmentProgramKey::legalizeStateForTargetOS(_DWORD *a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = a2[1];
  if ((v2 & 0x1000A0011000E00) != 0 && (*a2 & v2) < (v2 & 0x1000A0011000E00))
  {
    if ((a1[28] & 0x1F) == 0x16)
      a1[28] = a1[28] & 0xFFFFFFE0 | 0xF;
    if ((a1[29] & 0x1F) == 0x16)
      a1[29] = a1[29] & 0xFFFFFFE0 | 0xF;
    if ((a1[30] & 0x1F) == 0x16)
      a1[30] = a1[30] & 0xFFFFFFE0 | 0xF;
    if ((a1[31] & 0x1F) == 0x16)
      a1[31] = a1[31] & 0xFFFFFFE0 | 0xF;
    if ((a1[32] & 0x1F) == 0x16)
      a1[32] = a1[32] & 0xFFFFFFE0 | 0xF;
    if ((a1[33] & 0x1F) == 0x16)
      a1[33] = a1[33] & 0xFFFFFFE0 | 0xF;
    if ((a1[34] & 0x1F) == 0x16)
      a1[34] = a1[34] & 0xFFFFFFE0 | 0xF;
    if ((a1[35] & 0x1F) == 0x16)
      a1[35] = a1[35] & 0xFFFFFFE0 | 0xF;
  }
  return 1;
}

void AGX::Impl::FragmentProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *begin;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  __int128 v29;
  __int128 v30;
  std::vector<unsigned int>::pointer *p_end;
  size_t begin_high;
  unsigned int *v33;
  unsigned int *v34;
  unint64_t v35;
  std::vector<unsigned int>::size_type v36;
  unsigned int *v37;
  std::vector<unsigned int>::pointer *v38;
  size_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unint64_t v42;
  std::vector<unsigned int>::size_type v43;
  unsigned int *v44;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = (char *)v10 - (char *)value;
  v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFAFLL)
  {
    begin = &value[v18 + 20];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0x14uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v20 = &value[v18];
  *v20 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x3F;
  *(_OWORD *)(v20 + 1) = *(_OWORD *)&this[1].__end_cap_.__value_;
  v21 = *(_OWORD *)&this[2].__end_;
  v22 = *(_OWORD *)&this[3].__begin_;
  v23 = *(_OWORD *)&this[3].__end_cap_.__value_;
  *(_QWORD *)(v20 + 17) = this[4].__end_;
  *(_OWORD *)(v20 + 13) = v23;
  *(_OWORD *)(v20 + 9) = v22;
  *(_OWORD *)(v20 + 5) = v21;
  v24 = this->__end_cap_.__value_;
  v25 = (char *)this[1].__begin_ - (char *)v24;
  v26 = v25 >> 2;
  if ((unint64_t)v25 > 0xFFFFFFFFFFFFFFCFLL)
  {
    v27 = &v24[v26 + 12];
    this[1].__begin_ = v27;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    v24 = this->__end_cap_.__value_;
    v27 = this[1].__begin_;
  }
  v28 = &v24[v26];
  *v28 = (((_DWORD)v27 - (_DWORD)v24) >> 2 << 8) | 0x42;
  v29 = *(_OWORD *)&this[4].__end_cap_.__value_;
  v30 = *(_OWORD *)&this[5].__end_;
  *(_QWORD *)(v28 + 9) = this[6].__begin_;
  *(_OWORD *)(v28 + 5) = v30;
  *(_OWORD *)(v28 + 1) = v29;
  p_end = &this[6].__end_;
  if (SHIBYTE(this[7].__begin_) < 0)
  {
    begin_high = (size_t)this[6].__end_cap_.__value_;
    if (!begin_high)
      goto LABEL_27;
    p_end = (std::vector<unsigned int>::pointer *)*p_end;
  }
  else
  {
    begin_high = HIBYTE(this[7].__begin_);
    if (!HIBYTE(this[7].__begin_))
      goto LABEL_27;
  }
  v33 = this->__end_cap_.__value_;
  v34 = this[1].__begin_;
  v35 = v34 - v33;
  v36 = (((begin_high + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v35 >= v35 + v36)
  {
    if (v35 > v35 + v36)
    {
      v34 = &v33[v35 + v36];
      this[1].__begin_ = v34;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, v36);
    v33 = this->__end_cap_.__value_;
    v34 = this[1].__begin_;
  }
  v37 = &v33[v35];
  *v37 = (((_DWORD)v34 - (_DWORD)v33) >> 2 << 8) | 0x4B;
  memcpy(v37 + 1, p_end, begin_high);
LABEL_27:
  v38 = &this[7].__end_;
  if (SHIBYTE(this[8].__begin_) < 0)
  {
    v39 = (size_t)this[7].__end_cap_.__value_;
    if (!v39)
      goto LABEL_37;
    v38 = (std::vector<unsigned int>::pointer *)*v38;
  }
  else
  {
    v39 = HIBYTE(this[8].__begin_);
    if (!HIBYTE(this[8].__begin_))
      goto LABEL_37;
  }
  v40 = this->__end_cap_.__value_;
  v41 = this[1].__begin_;
  v42 = v41 - v40;
  v43 = (((v39 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v42 >= v42 + v43)
  {
    if (v42 > v42 + v43)
    {
      v41 = &v40[v42 + v43];
      this[1].__begin_ = v41;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, v43);
    v40 = this->__end_cap_.__value_;
    v41 = this[1].__begin_;
  }
  v44 = &v40[v42];
  *v44 = (((_DWORD)v41 - (_DWORD)v40) >> 2 << 8) | 0x4C;
  memcpy(v44 + 1, v38, v39);
LABEL_37:
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::Impl::FragmentProgramKey::getSupportIndirectCommandBuffers(AGX::Impl::FragmentProgramKey *this)
{
  return *((unsigned __int8 *)this + 224);
}

void AGX::VertexProgramVaryings::~VertexProgramVaryings(void **this)
{
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*this);
    return;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_5;
}

void AGX::MeshProgramKey::~MeshProgramKey(void **this)
{
  void *v2;
  void *v3;
  void *v4;

  *this = &off_2504029F8;
  if (*((char *)this + 199) < 0)
  {
    operator delete(this[22]);
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[19]);
LABEL_3:
  *this = off_250401C80;
  v2 = this[16];
  if (v2)
  {
    this[17] = v2;
    operator delete(v2);
  }
  v3 = this[13];
  if (v3)
  {
    this[14] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = off_250401CC8;
  v4 = this[2];
  if (v4)
  {
    this[3] = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::serialize(std::vector<unsigned int> *this, unsigned int **a2, _QWORD *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  __int128 v20;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFD7)
  {
    begin = &value[v17 + 10];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xAuLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x3E;
  v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(_OWORD *)(v19 + 5) = *(_OWORD *)&this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  (*((void (**)(std::vector<unsigned int> *))this->__begin_ + 6))(this);
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

uint64_t AGX::MeshProgramKey::MeshProgramKey(uint64_t a1, NSObject *a2, int a3, int a4, uint64_t a5, void *a6, void *a7, int a8)
{
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  void *buffer_ptr;
  char *v23;
  uint64_t v24;
  std::string v25;
  std::string v26;
  unsigned __int8 v27;
  size_t size_ptr;

  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v25 = *(std::string *)a5;
  if (*(char *)(a5 + 47) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a5 + 24), *(_QWORD *)(a5 + 32));
  else
    v26 = *(std::string *)(a5 + 24);
  v27 = *(_BYTE *)(a5 + 48);
  v14 = v27;
  *(_DWORD *)(a1 + 8) = 10;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_250401C80;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 104), 0);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)objc_msgSend(0, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)objc_msgSend(0, "privateFunctions"), 1u);
  *(std::string *)(a1 + 152) = v25;
  *(std::string *)(a1 + 176) = v26;
  *(_BYTE *)(a1 + 200) = v14;
  if (a3)
    v15 = 128;
  else
    v15 = 0;
  if (a4)
    v16 = 256;
  else
    v16 = 0;
  *(_DWORD *)(a1 + 56) = v16 | v15 | (16 * v14) | *(_DWORD *)(a1 + 56) & 0xFFFFFE6F;
  *(_QWORD *)a1 = &off_250401D08;
  *(_QWORD *)(a1 + 208) = 0;
  if (a2)
  {
    buffer_ptr = 0;
    size_ptr = 0;
    v17 = dispatch_data_create_map(a2, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a1 + 72), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v17);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a7);
  if ((void **)(a1 + 104) != &buffer_ptr)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 104), (char *)buffer_ptr, v23, (v23 - (_BYTE *)buffer_ptr) >> 5);
  if (buffer_ptr)
  {
    v23 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  buffer_ptr = 0;
  v23 = 0;
  v24 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)objc_msgSend(a6, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)objc_msgSend(a6, "privateFunctions"), 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 128), (char *)buffer_ptr, v23, (v23 - (_BYTE *)buffer_ptr) >> 5);
  if (buffer_ptr)
  {
    v23 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  if (a8)
    v18 = 2;
  else
    v18 = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96) & 0xFFFFFFFD | v18;
  return a1;
}

void sub_232C3462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_232C34648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  void **v15;

  if (__p)
    operator delete(__p);
  AGX::MeshProgramKey::~MeshProgramKey(v15);
  _Unwind_Resume(a1);
}

void sub_232C346A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a7);
  v12 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v7 + 136) = v12;
    operator delete(v12);
    v13 = *v9;
    if (!*v9)
    {
LABEL_3:
      if ((*(char *)(v7 + 95) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v13 = *v9;
    if (!*v9)
      goto LABEL_3;
  }
  *(_QWORD *)(v7 + 112) = v13;
  operator delete(v13);
  if ((*(char *)(v7 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)v7 = off_250401CC8;
    v14 = *(void **)(v7 + 16);
    if (v14)
    {
      *(_QWORD *)(v7 + 24) = v14;
      operator delete(v14);
    }
    AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)va);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v10);
  goto LABEL_5;
}

char *AGX::Impl::MeshProgramKey::addToSerializeStream(char *this)
{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  std::vector<unsigned int> *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::vector<unsigned int>::size_type v8;
  unsigned int *v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<unsigned int>::size_type v15;
  unsigned int *v16;

  v1 = (uint64_t)this;
  v2 = this + 152;
  if (this[175] < 0)
  {
    v3 = *((_QWORD *)this + 20);
    if (!v3)
      goto LABEL_11;
    v2 = (_QWORD *)*v2;
  }
  else
  {
    v3 = this[175];
    if (!this[175])
      goto LABEL_11;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v4 = (std::vector<unsigned int> *)(this + 16);
  v7 = (v6 - v5) >> 2;
  v8 = (((v3 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v7 >= v7 + v8)
  {
    if (v7 > v7 + v8)
    {
      v6 = v5 + 4 * (v7 + v8);
      *(_QWORD *)(v1 + 24) = v6;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v4, v8);
    v5 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
  }
  v9 = (unsigned int *)(v5 + 4 * v7);
  *v9 = ((v6 - v5) >> 2 << 8) | 0x4B;
  this = (char *)memcpy(v9 + 1, v2, v3);
LABEL_11:
  v10 = (_QWORD *)(v1 + 176);
  if (*(char *)(v1 + 199) < 0)
  {
    v11 = *(_QWORD *)(v1 + 184);
    if (!v11)
      return this;
    v10 = (_QWORD *)*v10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v1 + 199);
    if (!*(_BYTE *)(v1 + 199))
      return this;
  }
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = (v13 - v12) >> 2;
  v15 = (((v11 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v14 >= v14 + v15)
  {
    if (v14 > v14 + v15)
    {
      v13 = v12 + 4 * (v14 + v15);
      *(_QWORD *)(v1 + 24) = v13;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v1 + 16), v15);
    v12 = *(_QWORD *)(v1 + 16);
    v13 = *(_QWORD *)(v1 + 24);
  }
  v16 = (unsigned int *)(v12 + 4 * v14);
  *v16 = ((v13 - v12) >> 2 << 8) | 0x4C;
  return (char *)memcpy(v16 + 1, v10, v11);
}

uint64_t AGX::ObjectProgramKey::ObjectProgramKey(uint64_t a1, NSObject *a2, void *a3, void *a4, int a5, int a6)
{
  std::string *v12;
  std::string::value_type **v13;
  int v14;
  int v15;
  NSObject *v16;
  std::string::value_type *__s;
  char *v19;
  uint64_t v20;
  size_t size_ptr;

  *(_DWORD *)(a1 + 8) = 9;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_250401BB0;
  *(_OWORD *)(a1 + 72) = 0u;
  v12 = (std::string *)(a1 + 72);
  v13 = (std::string::value_type **)(a1 + 104);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 104), 0);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)objc_msgSend(0, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)objc_msgSend(0, "privateFunctions"), 1u);
  if (a5)
    v14 = 2;
  else
    v14 = 0;
  if (a6)
    v15 = 4;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 56) = v15 | v14 | *(_DWORD *)(a1 + 56) & 0xFFFFFFF9;
  *(_QWORD *)a1 = &off_250401C38;
  *(_QWORD *)(a1 + 152) = 0;
  if (a2)
  {
    __s = 0;
    size_ptr = 0;
    v16 = dispatch_data_create_map(a2, (const void **)&__s, &size_ptr);
    std::string::append(v12, __s, size_ptr);
    dispatch_release(v16);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(&__s, a4);
  if (v13 != &__s)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v13, __s, v19, (v19 - __s) >> 5);
  if (__s)
  {
    v19 = __s;
    operator delete(__s);
  }
  v19 = 0;
  v20 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, (void *)objc_msgSend(a3, "functions", 0), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, (void *)objc_msgSend(a3, "privateFunctions"), 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 128), __s, v19, (v19 - __s) >> 5);
  if (__s)
  {
    v19 = __s;
    operator delete(__s);
  }
  return a1;
}

void sub_232C34A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  AGX::ObjectProgramKey *v10;

  if (__p)
    operator delete(__p);
  AGX::ObjectProgramKey::~ObjectProgramKey(v10);
  _Unwind_Resume(a1);
}

void sub_232C34A9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 136) = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 112) = v7;
  operator delete(v7);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)v1 = off_250401BF8;
    v8 = *(void **)(v1 + 16);
    if (v8)
    {
      *(_QWORD *)(v1 + 24) = v8;
      operator delete(v8);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v4);
  goto LABEL_5;
}

void AGX::ObjectProgramKey::~ObjectProgramKey(AGX::ObjectProgramKey *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_250401BB0;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  *(_QWORD *)this = off_250401BF8;
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::serialize(std::vector<unsigned int> *this, unsigned int **a2, _QWORD *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  __int128 v20;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFD7)
  {
    begin = &value[v17 + 10];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xAuLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x3D;
  v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(_OWORD *)(v19 + 5) = *(_OWORD *)&this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  (*((void (**)(std::vector<unsigned int> *))this->__begin_ + 6))(this);
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

uint64_t AGX::VertexProgramKey::VertexProgramKey(uint64_t a1, uint64_t a2, NSObject *a3, void *a4, void *a5, int a6)
{
  uint64_t v12;
  NSObject *v13;
  int v14;
  void *buffer_ptr;
  char *v17;
  uint64_t v18;
  std::string v19;
  std::string v20;
  unsigned __int8 v21;
  size_t size_ptr;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v19 = *(std::string *)a2;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v20 = *(std::string *)(a2 + 24);
  v21 = *(_BYTE *)(a2 + 48);
  v12 = v21;
  *(_DWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_250401AE0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 96), 0);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 120), (void *)objc_msgSend(0, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 120), (void *)objc_msgSend(0, "privateFunctions"), 1u);
  *(std::string *)(a1 + 144) = v19;
  *(std::string *)(a1 + 168) = v20;
  *(_BYTE *)(a1 + 192) = v12;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFBFFFFLL | (v12 << 18);
  *(_QWORD *)a1 = &off_250401B68;
  if (a3)
  {
    buffer_ptr = 0;
    size_ptr = 0;
    v13 = dispatch_data_create_map(a3, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a1 + 64), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v13);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a5);
  if ((void **)(a1 + 96) != &buffer_ptr)
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 96), (char *)buffer_ptr, v17, (v17 - (_BYTE *)buffer_ptr) >> 5);
  if (buffer_ptr)
  {
    v17 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  buffer_ptr = 0;
  v17 = 0;
  v18 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)objc_msgSend(a4, "functions"), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)objc_msgSend(a4, "privateFunctions"), 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(a1 + 120), (char *)buffer_ptr, v17, (v17 - (_BYTE *)buffer_ptr) >> 5);
  if (buffer_ptr)
  {
    v17 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  if (a6)
    v14 = 2;
  else
    v14 = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a1 + 88) & 0xFFFFFFFD | v14;
  return a1;
}

void sub_232C35048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_232C35064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  void **v13;

  if (__p)
    operator delete(__p);
  AGX::VertexProgramKey::~VertexProgramKey(v13);
  _Unwind_Resume(a1);
}

void sub_232C350BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a5);
  v10 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v5 + 128) = v10;
    operator delete(v10);
    v11 = *v7;
    if (!*v7)
    {
LABEL_3:
      if ((*(char *)(v5 + 87) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v11 = *v7;
    if (!*v7)
      goto LABEL_3;
  }
  *(_QWORD *)(v5 + 104) = v11;
  operator delete(v11);
  if ((*(char *)(v5 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)v5 = off_250401B28;
    v12 = *(void **)(v5 + 16);
    if (v12)
    {
      *(_QWORD *)(v5 + 24) = v12;
      operator delete(v12);
    }
    AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)va);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v8);
  goto LABEL_5;
}

void AGX::VertexProgramKey::~VertexProgramKey(void **this)
{
  void *v2;
  void *v3;
  void *v4;

  *this = &off_2504029B0;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    if ((*((char *)this + 167) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[18]);
LABEL_3:
  *this = off_250401AE0;
  v2 = this[15];
  if (v2)
  {
    this[16] = v2;
    operator delete(v2);
  }
  v3 = this[12];
  if (v3)
  {
    this[13] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  *this = off_250401B28;
  v4 = this[2];
  if (v4)
  {
    this[3] = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::serialize(std::vector<unsigned int> *this, unsigned int **a2, _QWORD *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  __int128 v20;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFDFLL)
  {
    begin = &value[v17 + 8];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 8uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x3C;
  v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(_QWORD *)(v19 + 5) = this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  (*((void (**)(std::vector<unsigned int> *))this->__begin_ + 6))(this);
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) & 1;
}

char *AGX::Impl::VertexProgramKey::addToSerializeStream(char *this)
{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;
  std::vector<unsigned int> *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::vector<unsigned int>::size_type v8;
  unsigned int *v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<unsigned int>::size_type v15;
  unsigned int *v16;

  v1 = (uint64_t)this;
  v2 = this + 144;
  if (this[167] < 0)
  {
    v3 = *((_QWORD *)this + 19);
    if (!v3)
      goto LABEL_11;
    v2 = (_QWORD *)*v2;
  }
  else
  {
    v3 = this[167];
    if (!this[167])
      goto LABEL_11;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  v4 = (std::vector<unsigned int> *)(this + 16);
  v7 = (v6 - v5) >> 2;
  v8 = (((v3 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v7 >= v7 + v8)
  {
    if (v7 > v7 + v8)
    {
      v6 = v5 + 4 * (v7 + v8);
      *(_QWORD *)(v1 + 24) = v6;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v4, v8);
    v5 = *(_QWORD *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
  }
  v9 = (unsigned int *)(v5 + 4 * v7);
  *v9 = ((v6 - v5) >> 2 << 8) | 0x4B;
  this = (char *)memcpy(v9 + 1, v2, v3);
LABEL_11:
  v10 = (_QWORD *)(v1 + 168);
  if (*(char *)(v1 + 191) < 0)
  {
    v11 = *(_QWORD *)(v1 + 176);
    if (!v11)
      return this;
    v10 = (_QWORD *)*v10;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v1 + 191);
    if (!*(_BYTE *)(v1 + 191))
      return this;
  }
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = (v13 - v12) >> 2;
  v15 = (((v11 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v14 >= v14 + v15)
  {
    if (v14 > v14 + v15)
    {
      v13 = v12 + 4 * (v14 + v15);
      *(_QWORD *)(v1 + 24) = v13;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v1 + 16), v15);
    v12 = *(_QWORD *)(v1 + 16);
    v13 = *(_QWORD *)(v1 + 24);
  }
  v16 = (unsigned int *)(v12 + 4 * v14);
  *v16 = ((v13 - v12) >> 2 << 8) | 0x4C;
  return (char *)memcpy(v16 + 1, v10, v11);
}

uint64_t AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(AGXA10FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(_QWORD ***a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  void *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(a2);
        v8 = *a1;
        v9 = (void *)objc_msgSend((id)*(*a1)[2], "loadDynamicLibrariesForFunction:insertLibraries:error:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v7), ***a1, *(*a1)[1]);
        if (objc_msgSend(v9, "count"))
        {
          v10 = 0;
          do
          {
            if ((objc_msgSend((id)*v8[3], "containsObject:", objc_msgSend(v9, "objectAtIndexedSubscript:", v10)) & 1) == 0)
              objc_msgSend((id)*v8[3], "addObject:", objc_msgSend(v9, "objectAtIndexedSubscript:", v10));
            ++v10;
          }
          while (objc_msgSend(v9, "count") > v10);
        }

        ++v7;
      }
      while (v7 != v5);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateRenderPipelineDescriptorInfo<MTLMeshRenderPipelineDescriptor>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v22;
  _QWORD v23[5];
  uint64_t v24;

  *a2 = objc_msgSend(a3, "fragmentFunction");
  a2[3] = objc_msgSend(a3, "objectFunction");
  v12 = objc_msgSend(a3, "meshFunction");
  a2[2] = v12;
  if (v12)
  {
    v13 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("Mesh render pipeline unsupported on this device"), *MEMORY[0x24BDD0FC8]);
    v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 1, v13);
    result = 0;
    *a6 = v14;
  }
  else
  {
    if (!a2[9])
      return 0;
    v16 = objc_msgSend(a3, "newSerializedFragmentDataWithFlags:options:error:", 540, a4, 0);
    v17 = a2[8];
    if (v17 != v16)
    {
      if (v17)
        dispatch_release(v17);
      a2[8] = v16;
    }
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v24, a5, *a2, (void *)objc_msgSend(a3, "fragmentLinkedFunctions"), (void *)objc_msgSend(a3, "fragmentPreloadedLibraries"), (uint64_t)a6);
    v18 = (void *)a2[12];
    a2[12] = v24;

    if (!a2[12])
      return 0;
    v19 = a2[2];
    if (!v19)
      goto LABEL_12;
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v24, a5, v19, (void *)objc_msgSend(a3, "meshLinkedFunctions"), (void *)objc_msgSend(a3, "meshPreloadedLibraries"), (uint64_t)a6);
    v20 = (void *)a2[14];
    a2[14] = v24;

    if (!a2[14])
      return 0;
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v24, a5, a2[3], (void *)objc_msgSend(a3, "objectLinkedFunctions"), (void *)objc_msgSend(a3, "objectPreloadedLibraries"), (uint64_t)a6);
    v21 = (void *)a2[15];
    a2[15] = v24;

    if (a2[15])
    {
LABEL_12:
      v22 = *(NSObject **)(a1 + 16);
      v23[0] = MEMORY[0x24BDAC760];
      v23[1] = 3221225472;
      v23[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI31MTLMeshRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXA10FamilyDeviceRP7NSError_block_invoke;
      v23[3] = &__block_descriptor_40_e5_v8__0l;
      v23[4] = a2;
      dispatch_sync(v22, v23);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = *(NSObject **)(a1 + 88);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 80);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 72);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 64);
  if (v5)
    dispatch_release(v5);
  return a1;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v7 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(result);
    result = MEMORY[0x234927ECC](v7, 0xA0C402B819244);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a4 == 0;
  return result;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void ***v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  __int16 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v22[6];

  if (a2)
  {
    v8 = *(void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v10 = *(void ****)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD **)(a1 + 80);
    v12 = (void *)v11[15];
    v13 = (void *)v11[3];
    v14 = v11[11];
    v15 = *(_WORD *)(a2 + 2994);
    v16 = *(_BYTE *)(a1 + 88);
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v22[3] = &unk_2503FFED0;
    v17 = *(_QWORD *)(a1 + 48);
    v22[4] = *(_QWORD *)(a1 + 56);
    v22[5] = v10;
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(v10, v8, v7, v9, v17, a7, v12, v13, v14, v15, HIBYTE(v15), v16, (uint64_t)v22);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 56);
    if (a5 > 3)
      v19 = 5;
    else
      v19 = qword_232D76128[a5];
    v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v19, v20);
    if (v18)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v18 + 16))(v18, 0, 0, v21);
  }
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, os_unfair_lock_s *a8, uint64_t a9, NSObject *a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v18;
  std::string *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  NSObject **v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  void *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void **v32;
  id *v33;
  NSObject *v34;
  NSObject *global_queue;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t CompileOptions;
  uint64_t v42;
  os_unfair_lock_s *v44;
  char v45;
  __int128 v46;
  void *v47[2];
  __int128 v48;
  uint64_t v49;
  std::string v50;
  std::string __p;
  char v52;
  _QWORD v53[2];
  void *v54;
  void *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  void *v59;
  char v60;
  unsigned __int8 v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  uint64_t v70;
  _QWORD v71[6];
  _QWORD v72[5];
  _QWORD block[2];
  void (*v74)(uint64_t);
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject **v78;
  os_unfair_lock_s *v79;
  uint64_t (**v80)();
  void *v81;
  void *v82;
  void *v83;
  char v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[8];
  __int128 v96;
  __int128 v97;
  _QWORD v98[14];
  unsigned __int8 v99;
  char v100;
  __int128 v101;
  __int128 v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v71[0] = 0;
  v71[1] = v71;
  v71[2] = 0x3052000000;
  v71[3] = __Block_byref_object_copy_;
  v71[4] = __Block_byref_object_dispose_;
  v71[5] = 0;
  v42 = objc_msgSend(a2, "meshFunction");
  if (a9)
  {
    v18 = objc_msgSend(a2, "objectFunction");
    if (*(char *)(a9 + 3183) < 0)
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a9 + 3160), *(_QWORD *)(a9 + 3168));
    else
      v50 = *(std::string *)(a9 + 3160);
    if (*(char *)(a9 + 3207) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a9 + 3184), *(_QWORD *)(a9 + 3192));
    else
      __p = *(std::string *)(a9 + 3184);
    v52 = *(_BYTE *)(a9 + 3208);
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey<MTLMeshRenderPipelineDescriptor>((uint64_t)v53, a2, a10, a7, v18 == 0, (uint64_t)&v50, *(unsigned __int8 *)(a9 + 3225));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    v19 = &v50;
  }
  else
  {
    v49 = 0;
    *(_OWORD *)v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey<MTLMeshRenderPipelineDescriptor>((uint64_t)v53, a2, a10, a7, objc_msgSend(a2, "objectFunction") == 0, (uint64_t)&v46, 0);
    if (SHIBYTE(v48) < 0)
    {
      operator delete(v47[1]);
      if ((SHIBYTE(v47[0]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v47[0]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    v19 = (std::string *)&v46;
  }
  operator delete(v19->__r_.__value_.__l.__data_);
LABEL_19:
  if (*(_BYTE *)(*(_QWORD *)(a3 + 808) + 6360))
    v20 = 67109120;
  else
    v20 = 256;
  v21 = v20 | v57 & 0x8BFFFEFF;
  v57 = v21;
  v58 &= ~0x200u;
  v70 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v22 = 1;
    v21 = v57;
  }
  else
  {
    v22 = 0;
  }
  v57 = v22 | (a4 >> 21) & 8 | v21 & 0xFFFFFFF4;
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v106, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
  v104 = v106;
  v105 = v107;
  v45 = 0;
  v44 = a8;
  CompileOptions = AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a8, a4 | 3, (uint64_t)&v104);
  v23 = AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a8, (uint64_t)v53, &v45, CompileOptions, a5 != 0);
  v24 = (NSObject **)v23;
  if (v45)
  {
    v39 = v56;
    HIDWORD(v36) = v61;
    v25 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v26 = (void *)objc_msgSend(a2, "pipelineLibrary");
    if (objc_msgSend(v26, "pipelineCache") && (objc_msgSend(v26, "disableRunTimeCompilation") & 1) != 0)
      v27 = 1;
    else
      v27 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    LODWORD(v36) = v27;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v28 = (void *)objc_opt_new();
    objc_msgSend(v28, "setSync:", a11 ^ 1u);
    objc_msgSend(v28, "setFunction:", v42);
    objc_msgSend(v28, "setFrameworkData:", a10);
    objc_msgSend(v28, "setPipelineCache:", v25);
    objc_msgSend(v28, "setDestinationBinaryArchive:", a5);
    objc_msgSend(v28, "setArchiverId:", a6);
    objc_msgSend(v28, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    objc_msgSend(v28, "setPipelineOptions:", a4 | 3);
    if ((a4 & 0x330003) == 0)
      objc_msgSend(v28, "setPipelineOptions:", objc_msgSend(v28, "pipelineOptions") | 0x8000);
    v29 = objc_msgSend(a2, "newPipelineScript", v36);
    if (v29)
    {
      objc_msgSend(v28, "setAirScript:", v29);
      dispatch_release(v29);
    }
    objc_msgSend(v28, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v30 = (void *)objc_msgSend(a2, "meshLinkedFunctions");
    objc_msgSend(v28, "setVisibleFunctions:", objc_msgSend(v30, "functions"));
    objc_msgSend(v28, "setVisibleFunctionGroups:", objc_msgSend(v30, "groups"));
    objc_msgSend(v28, "setPrivateVisibleFunctions:", objc_msgSend(v30, "privateFunctions"));
    v98[0] = MEMORY[0x24BDAC760];
    v101 = v104;
    v98[1] = 3221225472;
    v98[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke;
    v98[3] = &unk_250400CF8;
    v99 = a11;
    v98[8] = a1;
    v98[9] = v24;
    v100 = v38 & 1;
    v98[10] = v44;
    v98[11] = CompileOptions;
    v98[12] = a9;
    v102 = v105;
    v98[4] = v42;
    v98[5] = a3;
    v98[6] = a2;
    v98[7] = v71;
    v31 = MEMORY[0x24BDAC760];
    v98[13] = v39;
    v103 = v37;
    v32 = *a1;
    v72[0] = MEMORY[0x24BDAC760];
    v72[1] = 3221225472;
    v72[2] = ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14MeshProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
    v72[3] = &unk_250400D80;
    v72[4] = v98;
    *(_QWORD *)&v106 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v106 + 1) = 3221225472;
    *(_QWORD *)&v107 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    *((_QWORD *)&v107 + 1) = &unk_2504023B8;
    v108 = v72;
    AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v32, (uint64_t)v53, v28, (uint64_t)&v106);

  }
  else
  {
    v31 = MEMORY[0x24BDAC760];
    if ((CompileOptions & 0x330003) != 0)
    {
      v33 = *a1;
      v95[0] = MEMORY[0x24BDAC760];
      v95[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2;
      v95[1] = 3221225472;
      v95[3] = &unk_250400D20;
      v95[5] = v44;
      v95[6] = CompileOptions;
      v96 = v104;
      v97 = v105;
      v95[4] = a3;
      v95[7] = v23;
      objc_msgSend(*v33, "reflectionWithFunction:options:sync:completionHandler:", v42, CompileOptions & 0x330003, a11 ^ 1u, v95);
    }
  }
  block[0] = v31;
  block[1] = 3321888768;
  v74 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3;
  v75 = &unk_250400D48;
  v78 = v24;
  v79 = v44;
  AGX::MeshProgramKey::MeshProgramKey((AGX::MeshProgramKey *)&v80, (const AGX::MeshProgramKey *)v53);
  v93 = v104;
  v94 = v105;
  v76 = a12;
  v77 = v71;
  v34 = *v24;
  if (a11)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v34, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v34, 0xFFFFFFFFFFFFFFFFLL);
    v74((uint64_t)block);
  }
  v80 = (uint64_t (**)())&off_2504029F8;
  if (v92 < 0)
  {
    operator delete(v91);
    if ((v90 & 0x80000000) == 0)
      goto LABEL_46;
  }
  else if ((v90 & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v89);
LABEL_46:
  v80 = off_250401C80;
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v84 < 0)
    operator delete(v83);
  v80 = off_250401CC8;
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  v53[0] = &off_2504029F8;
  if (v69 < 0)
  {
    operator delete(v68);
    if ((v67 & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((v67 & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v66);
LABEL_56:
  v53[0] = off_250401C80;
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v60 < 0)
    operator delete(v59);
  v53[0] = off_250401CC8;
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  _Block_object_dispose(v71, 8);
}

void sub_232C3634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  if (a34 < 0)
    operator delete(__p);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void ***v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  os_unfair_lock_s *v10;
  NSObject *v11;
  _QWORD v12[6];
  __int128 v13;
  void ***v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(void ****)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD **)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = (void *)v7[12];
  v10 = (os_unfair_lock_s *)v7[4];
  v12[0] = MEMORY[0x24BDAC760];
  v12[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke_3;
  v12[3] = &unk_2503FFE80;
  v11 = v7[8];
  v12[1] = 3221225472;
  v14 = v6;
  v15 = v7;
  v12[4] = v4;
  v12[5] = v3;
  v13 = *(_OWORD *)(a1 + 48);
  v16 = v5;
  v17 = v8;
  AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createFragmentProgramVariant<MTLMeshRenderPipelineDescriptor>(v6, v3, v4, v5, v13, v9, v10, a2, v11, 0, (uint64_t)v12);
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramAnalysis<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, unsigned int a4, os_unfair_lock_s *a5, NSObject *a6, int a7, uint64_t a8)
{
  unsigned int v16;
  int v17;
  dispatch_group_t *VariantEntry;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void **v28;
  NSObject *v29;
  NSObject *global_queue;
  char v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD block[2];
  uint64_t (*v36)(_QWORD *);
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  dispatch_group_t *v40;
  _QWORD v41[10];
  char v42;
  char v43;
  _QWORD v44[2];
  void *v45;
  void *v46;
  unsigned int v47;
  void *v48;
  char v49;
  void *v50;
  void *v51;
  void *__p;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  uint64_t v58;
  _QWORD v59[4];
  _BYTE v60[48];
  uint64_t v61;

  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2020000000;
  v59[3] = 0;
  v61 = 0;
  memset(v60, 0, sizeof(v60));
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)v44, a6, 1, 0, (uint64_t)v60, 0, 0, 0);
  AGX::MeshProgramKey::initCommon<MTLMeshRenderPipelineDescriptor>((uint64_t)v44, a2);
  v16 = v47 & 0xFFFFFF7F;
  v47 &= ~0x80u;
  v58 = a4 & 0xC00C0000;
  v34 = a8;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v17 = 1;
    v16 = v47;
  }
  else
  {
    v17 = 0;
  }
  v47 = v17 | (a4 >> 21) & 8 | v16 & 0xFFFFFFF4;
  v60[0] = 0;
  VariantEntry = (dispatch_group_t *)AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a5, (uint64_t)v44, v60, 0, 0);
  v32 = a5;
  v33 = a3;
  v19 = objc_msgSend(a2, "meshFunction");
  v20 = v60[0];
  if (v60[0])
  {
    v21 = v19;
    v22 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v23 = (void *)objc_msgSend(a2, "pipelineLibrary");
    if (objc_msgSend(v23, "pipelineCache") && (objc_msgSend(v23, "disableRunTimeCompilation") & 1) != 0)
      LOBYTE(v24) = 1;
    else
      v24 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    v31 = v24;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v25 = (void *)objc_opt_new();
    objc_msgSend(v25, "setSync:", a7 ^ 1u);
    objc_msgSend(v25, "setFunction:", v21);
    objc_msgSend(v25, "setFrameworkData:", a6);
    objc_msgSend(v25, "setPipelineCache:", v22);
    objc_msgSend(v25, "setDestinationBinaryArchive:", 0);
    objc_msgSend(v25, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    objc_msgSend(v25, "setPipelineOptions:", 0);
    v26 = objc_msgSend(a2, "newPipelineScript");
    if (v26)
    {
      objc_msgSend(v25, "setAirScript:", v26);
      dispatch_release(v26);
    }
    objc_msgSend(v25, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v27 = (void *)objc_msgSend(a2, "meshLinkedFunctions");
    objc_msgSend(v25, "setVisibleFunctions:", objc_msgSend(v27, "functions"));
    objc_msgSend(v25, "setVisibleFunctionGroups:", objc_msgSend(v27, "groups"));
    objc_msgSend(v25, "setPrivateVisibleFunctions:", objc_msgSend(v27, "privateFunctions"));
    v28 = *a1;
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 3221225472;
    v41[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke;
    v41[3] = &unk_250400EA0;
    v41[6] = a1;
    v41[7] = VariantEntry;
    v42 = v20;
    v41[8] = v32;
    v41[9] = 0;
    v41[4] = v33;
    v41[5] = v59;
    v43 = v31;
    AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v28, (uint64_t)v44, v25, (uint64_t)v41);

  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  v36 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2;
  v37 = &unk_250400EC8;
  v39 = v59;
  v40 = VariantEntry;
  v38 = v34;
  v29 = *VariantEntry;
  if (a7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v29, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*VariantEntry, 0xFFFFFFFFFFFFFFFFLL);
    v36(block);
  }
  v44[0] = &off_2504029F8;
  if (v57 < 0)
  {
    operator delete(v56);
    if ((v55 & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((v55 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v54);
LABEL_21:
  v44[0] = off_250401C80;
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v49 < 0)
    operator delete(v48);
  v44[0] = off_250401CC8;
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  _Block_object_dispose(v59, 8);
}

void sub_232C368C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  AGX::MeshProgramKey::~MeshProgramKey(&a32);
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, _BYTE *a3, int a4, int a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;

  *a3 = 0;
  if ((a4 & 4) == 0 && !a5)
  {
    v9 = a1 + 350;
    os_unfair_lock_lock(a1 + 350);
    v10 = VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::G9::MeshProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
    if (*(_QWORD *)v10)
    {
      if (!*(_BYTE *)(v10 + 40))
      {
        if ((*(_QWORD *)&a4 & 0x330003) != 0)
          dispatch_group_enter(*(dispatch_group_t *)v10);
        goto LABEL_11;
      }
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;

      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 0;
      v12 = *(NSObject **)v10;
    }
    else
    {
      v12 = dispatch_group_create();
      *(_QWORD *)v10 = v12;
    }
    dispatch_group_enter(v12);
    *a3 = 1;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return v10;
  }
  v10 = operator new();
  *(_WORD *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 41) = 1;
  v13 = dispatch_group_create();
  *(_QWORD *)v10 = v13;
  dispatch_group_enter(v13);
  *a3 = 1;
  return v10;
}

void sub_232C36A3C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, void *a7, uint64_t a8, __CFString *a9)
{
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  NSObject *v44;
  _OWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a2[68])
  {
    if (a2[69])
      v12 = (unsigned int **)(a2 + 68);
    else
      v12 = (unsigned int **)(a2 + 138);
  }
  else
  {
    v12 = (unsigned int **)(a2 + 138);
  }
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *v12;
  v15 = v12[1];
  if (v14)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = *v14;
    v18 = (char *)v14 + v17;
    v19 = (unsigned __int16 *)((char *)v14 + v17 - *(int *)((char *)v14 + v17));
    if (*v19 >= 9u)
    {
      v20 = v19[4];
      if (v20)
      {
        v21 = &v18[v20];
        v22 = *(unsigned int *)&v18[v20];
        if (*(_DWORD *)&v18[v20 + v22])
        {
          v23 = 0;
          v24 = 0;
          v25 = (uint64_t)v14 + v17 + v22 + v20 + 10;
          do
          {
            v26 = *(unsigned int *)(v25 - 6);
            v27 = v26 - *(int *)(v25 + v26 - 6);
            if (*(unsigned __int16 *)(v25 + v27 - 6) >= 7u && (v28 = *(unsigned __int16 *)(v25 + v27)) != 0)
              v29 = *(_QWORD *)(v25 + v26 + v28 - 6);
            else
              v29 = 0;
            if (getTimebaseInfo(void)::once[0] != -1)
            {
              v43 = v13;
              v44 = a5;
              dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
              v13 = v43;
              a5 = v44;
            }
            v24 += v29 * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo / unk_254235750;
            ++v23;
            v25 += 4;
          }
          while (v23 < *(unsigned int *)&v21[v22]);
        }
      }
    }
  }
  v30 = a8;
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
  {
    v31 = a5;
    IOGPUDeviceTraceEvent();
    a5 = v31;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    if (a8)
    {
      v32 = 1;
    }
    else
    {
      if (a2[33])
      {
        v33 = a2 + 33;
        if (!a2[34])
          v33 = a2 + 103;
      }
      else
      {
        v33 = a2 + 103;
      }
      v35 = *v33;
      v34 = v33[1];
      if (v35)
        v36 = v34 == 0;
      else
        v36 = 1;
      if (v36)
      {
        v30 = 0;
        v32 = 1;
      }
      else
      {
        v32 = 0;
        a9 = CFSTR("Internal error during function compilation");
        v30 = 2;
      }
    }
    v37 = *(_QWORD *)(a1 + 64);
    v38 = *(_QWORD *)(a1 + 72);
    memset(v48, 0, sizeof(v48));
    AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(v37, v38, a5, (uint64_t)v48, *(void **)(a1 + 32), v30);
    if (!v30)
    {
      v39 = (_QWORD *)operator new();
      AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::MeshProgramVariant((uint64_t)v39, (const AGCDeserializedReply *)a2);
      *v39 = &off_250402600;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v39;
    }
    v40 = *(_QWORD *)(a1 + 56);
    v41 = *(unsigned __int8 *)(a1 + 81);
    *(_QWORD *)(v40 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *(_QWORD *)(v40 + 16) = v30;

    *(_QWORD *)(v40 + 24) = -[__CFString copy](a9, "copy");
    if (*(_QWORD *)(v40 + 8))
    {

      *(_QWORD *)(v40 + 32) = a7;
    }
    else
    {
      if (v41)
        v42 = v32;
      else
        v42 = 0;
      *(_BYTE *)(v40 + 40) = v42;
    }
    dispatch_group_leave(*(dispatch_group_t *)v40);
  }
}

void sub_232C36DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10F3C40174EF3E0);
  _Unwind_Resume(a1);
}

void AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  char **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[6];
  _QWORD v21[5];
  _QWORD v22[6];
  dispatch_object_t object;
  unsigned int *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  _OWORD v31[2];
  unsigned __int8 md[16];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(_QWORD *)a2 + 16))(a2, &v27, &v26);
  v8 = dispatch_data_create(v27, v26, 0, 0);
  objc_msgSend(a3, "setDriverKeyData:", v8);
  if (objc_msgSend(a3, "airScript"))
  {
    v24 = 0;
    v25 = 0;
    object = dispatch_data_create_map((dispatch_data_t)objc_msgSend(a3, "airScript"), (const void **)&v24, &v25);
    v9 = v24;
    v10 = *v24;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v31[0] = *(_OWORD *)md;
    v31[1] = v33;
    objc_msgSend(a3, "setVendorPluginFunctionId:", v31);
  }
  v14 = MEMORY[0x24BDAC760];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v22[3] = &unk_250402408;
  v22[4] = a3;
  v22[5] = a4;
  if (objc_msgSend(a3, "function"))
  {
    v15 = mach_absolute_time();
    v16 = *a1;
    v20[0] = v14;
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v20[3] = &unk_250402458;
    v20[4] = v22;
    v20[5] = v15;
    objc_msgSend(v16, "compileFunctionRequest:completionHandler:", a3, v20);
  }
  else
  {
    if (objc_msgSend(a3, "frameworkData") || objc_msgSend(a3, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    v21[0] = v14;
    v21[1] = 3221225472;
    v21[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v21[3] = &unk_250402430;
    v21[4] = v22;
    v17 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    v18 = *a1;
    v19 = objc_msgSend(a3, "driverKeyData");
    if (v17)
      objc_msgSend(v18, "compileRequest:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
    else
      objc_msgSend(v18, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
  }
  dispatch_release(v8);
}

void sub_232C370B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
  dispatch_release(object);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(a1[6] + 8);
  v1 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v1)
    v2 = v1 + 2936;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], v2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C3734C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  os_unfair_lock_s *lock;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1400);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1400));
    v13 = *(_QWORD *)(a1 + 1360);
    v14 = *(unsigned int *)(a1 + 1368);
    v15 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v13, *(_DWORD *)(a1 + 1368), (_QWORD *)a4);
    v16 = (_QWORD *)v15;
    if (v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if ((_DWORD)v14 == 4)
      {
        v13 = operator new();
        v14 = 0;
        *(_QWORD *)(v13 + 224) = *(_QWORD *)(a1 + 1360);
        *(_OWORD *)(v13 + 192) = 0u;
        *(_OWORD *)(v13 + 208) = 0u;
        *(_OWORD *)(v13 + 160) = 0u;
        *(_OWORD *)(v13 + 176) = 0u;
        *(_OWORD *)(v13 + 128) = 0u;
        *(_OWORD *)(v13 + 144) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_QWORD *)(a1 + 1360) = v13;
        *(_DWORD *)(a1 + 1368) = 0;
      }
      v18 = (_OWORD *)(v13 + 32 * v14);
      v19 = *(_OWORD *)(a4 + 16);
      *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      v20 = *(_QWORD *)(a1 + 1360);
      v21 = *(_DWORD *)(a1 + 1368);
      *(_DWORD *)(a1 + 1368) = v21 + 1;
      v16 = (_QWORD *)(v20 + 24 * v21 + 128);
      v17 = *(_QWORD *)(v20 + 24 * v21 + 136);
      if (a6)
        goto LABEL_4;
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3)
        dispatch_retain(a3);
      v22 = v16[2];
      if (v22)
        dispatch_release(v22);
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(_BYTE *)(a1 + 1656))
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD5B8]), "initWithDevice:reflectionData:functionType:options:", a5, a3, 7, a2 | 0x8000);
      v23 = (void *)objc_msgSend(v30, "arguments");
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v33 != v25)
              objc_enumerationMutation(v23);
            v27 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            if (!objc_msgSend(v27, "type")
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              v28 = (_QWORD *)objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              v29 = v28[2];
              v28[2] = 0;
              *(_QWORD *)(a1 + 8 * objc_msgSend(v27, "index") + 1408) = v29;

            }
          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v24);
      }

      *(_BYTE *)(a1 + 1656) = 1;
    }
    goto LABEL_26;
  }
}

void sub_232C37600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void AGX::G9::MeshProgramVariant::~MeshProgramVariant(AGX::G9::MeshProgramVariant *this)
{
  AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~MeshProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

uint64_t VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::G9::MeshProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  std::string *v26;
  size_t v27;
  size_t v28;
  std::string *v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  size_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  size_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  size_t v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  size_t v73;
  unsigned int v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v80;
  int v81;
  void *__s1;
  uint64_t v85;
  size_t __n;
  int v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  std::string *v91;
  size_t v92;
  std::string *__str;
  int v94;
  int v95;
  const void *v96;
  int v97;

  v2 = a2;
  v3 = a1;
  v4 = *(unsigned int *)(a1 + 1072);
  if (!(_DWORD)v4)
  {
    LOBYTE(v9) = *(_BYTE *)(a2 + 95);
    v25 = *(_QWORD *)(a2 + 80);
    v96 = *(const void **)(a2 + 72);
    v97 = *(_DWORD *)(a2 + 56);
    v94 = *(_DWORD *)(a2 + 96);
    v95 = *(_DWORD *)(a2 + 52);
    v26 = *(std::string **)(a2 + 104);
    v29 = *(std::string **)(a2 + 112);
    v27 = *(unsigned __int8 *)(a2 + 175);
    v28 = *(_QWORD *)(a2 + 160);
    __s1 = *(void **)(a2 + 152);
    v87 = *(_DWORD *)(a2 + 60);
    v81 = *(_DWORD *)(a2 + 64);
    v80 = *(_QWORD *)(a2 + 208);
    goto LABEL_46;
  }
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 1064);
  v7 = (unsigned __int8 *)(a2 + 72);
  v96 = *(const void **)(a2 + 72);
  v8 = *(unsigned __int8 *)(a2 + 95);
  LOBYTE(v9) = v8;
  v10 = *(_QWORD *)(a2 + 80);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a2 + 95);
  else
    v11 = *(_QWORD *)(a2 + 80);
  v97 = *(_DWORD *)(a2 + 56);
  v94 = *(_DWORD *)(a2 + 96);
  v95 = *(_DWORD *)(a2 + 52);
  v91 = *(std::string **)(a2 + 104);
  __str = *(std::string **)(a2 + 112);
  v88 = *(_QWORD *)(a2 + 128);
  v89 = *(_QWORD *)(a2 + 136);
  v90 = *(unsigned __int8 *)(a2 + 175);
  __n = *(_QWORD *)(a2 + 160);
  if (*(char *)(a2 + 175) >= 0)
    v12 = *(unsigned __int8 *)(a2 + 175);
  else
    v12 = *(_QWORD *)(a2 + 160);
  __s1 = *(void **)(a2 + 152);
  v85 = v12;
  v87 = *(_DWORD *)(a2 + 60);
  v81 = *(_DWORD *)(a2 + 64);
  v80 = *(_QWORD *)(a2 + 208);
  do
  {
    v13 = v6 + 216 * v5;
    v14 = *(unsigned __int8 *)(v13 + 95);
    v15 = (char)v14;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v13 + 80);
    if (v11 != v14)
      goto LABEL_10;
    if (v15 >= 0)
      v16 = (unsigned __int8 *)(v13 + 72);
    else
      v16 = *(unsigned __int8 **)(v13 + 72);
    if ((char)v8 < 0)
    {
      if (memcmp(v96, v16, v10))
        goto LABEL_10;
    }
    else if ((_BYTE)v8)
    {
      v17 = v7;
      v18 = v8;
      while (*v17 == *v16)
      {
        ++v17;
        ++v16;
        if (!--v18)
          goto LABEL_22;
      }
      goto LABEL_10;
    }
LABEL_22:
    if (v97 != *(_DWORD *)(v13 + 56)
      || v95 != *(_DWORD *)(v13 + 52)
      || v94 != *(_DWORD *)(v13 + 96)
      || __str != v91
      || v89 != v88)
    {
      goto LABEL_10;
    }
    v19 = *(unsigned __int8 *)(v13 + 175);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(v13 + 160);
    if (v85 != v19)
      goto LABEL_10;
    if (v20 >= 0)
      v21 = (unsigned __int8 *)(v13 + 152);
    else
      v21 = *(unsigned __int8 **)(v13 + 152);
    if ((v90 & 0x80) != 0)
    {
      if (memcmp(__s1, v21, __n))
        goto LABEL_10;
LABEL_40:
      if (v87 == *(_DWORD *)(v13 + 60) && v81 == *(_DWORD *)(v13 + 64) && v80 == *(_QWORD *)(v6 + 216 * v5 + 208))
      {
        v24 = v6 + 48 * v5;
        return v24 + 864;
      }
      goto LABEL_10;
    }
    if (!(_DWORD)v90)
      goto LABEL_40;
    v22 = v7 + 80;
    v23 = v90;
    while (*v22 == *v21)
    {
      ++v22;
      ++v21;
      if (!--v23)
        goto LABEL_40;
    }
LABEL_10:
    ++v5;
  }
  while (v5 != v4);
  v25 = v10;
  v2 = a2;
  v3 = a1;
  v27 = v90;
  v26 = v91;
  v28 = __n;
  v29 = __str;
LABEL_46:
  v30 = v9;
  if ((v9 & 0x80u) == 0)
    v9 = v9;
  else
    v9 = v25;
  if ((v27 & 0x80u) == 0)
    v31 = v27;
  else
    v31 = v28;
  v92 = v31;
  if (v29 != v26
    || *(_QWORD *)(v2 + 136) != *(_QWORD *)(v2 + 128)
    || (v32 = *(_QWORD *)(*(_QWORD *)(v3 + 1064) + 1056)) == 0)
  {
LABEL_55:
    if ((_DWORD)v4 == 4)
    {
      v33 = operator new();
      VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::G9::MeshProgramVariant>,4u>::Chunk::Chunk((_OWORD *)v33);
      LODWORD(v4) = 0;
      *(_QWORD *)(v33 + 1056) = *(_QWORD *)(v3 + 1064);
      *(_QWORD *)(v3 + 1064) = v33;
      *(_DWORD *)(v3 + 1072) = 0;
    }
    else
    {
      v33 = *(_QWORD *)(v3 + 1064);
    }
    v75 = v33 + 216 * v4;
    *(_DWORD *)(v75 + 8) = *(_DWORD *)(v2 + 8);
    if (v75 == v2)
    {
      std::string::operator=((std::string *)(v2 + 72), (const std::string *)(v2 + 72));
    }
    else
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v75 + 16), *(char **)(v2 + 16), *(char **)(v2 + 24), (uint64_t)(*(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16)) >> 2);
      v76 = *(_OWORD *)(v2 + 40);
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v2 + 56);
      *(_OWORD *)(v75 + 40) = v76;
      std::string::operator=((std::string *)(v75 + 72), (const std::string *)(v2 + 72));
      *(_DWORD *)(v75 + 96) = *(_DWORD *)(v2 + 96);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v75 + 104), *(char **)(v2 + 104), *(char **)(v2 + 112), (uint64_t)(*(_QWORD *)(v2 + 112) - *(_QWORD *)(v2 + 104)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v75 + 128), *(char **)(v2 + 128), *(char **)(v2 + 136), (uint64_t)(*(_QWORD *)(v2 + 136) - *(_QWORD *)(v2 + 128)) >> 5);
    }
    std::string::operator=((std::string *)(v75 + 152), (const std::string *)(v2 + 152));
    std::string::operator=((std::string *)(v75 + 176), (const std::string *)(v2 + 176));
    *(_BYTE *)(v75 + 200) = *(_BYTE *)(v2 + 200);
    *(_QWORD *)(v33 + 216 * v4 + 208) = *(_QWORD *)(v2 + 208);
    v77 = *(_QWORD *)(v3 + 1064);
    v78 = *(_DWORD *)(v3 + 1072);
    *(_DWORD *)(v3 + 1072) = v78 + 1;
    v24 = v77 + 48 * v78;
    return v24 + 864;
  }
  while (2)
  {
    v34 = *(unsigned __int8 *)(v32 + 95);
    v35 = (char)v34;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(v32 + 80);
    if (v9 == v34)
    {
      if (v35 >= 0)
        v36 = (unsigned __int8 *)(v32 + 72);
      else
        v36 = *(unsigned __int8 **)(v32 + 72);
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(v96, v36, v25))
          goto LABEL_91;
      }
      else if ((_DWORD)v30)
      {
        v37 = (unsigned __int8 *)(v2 + 72);
        v38 = v30;
        while (*v37 == *v36)
        {
          ++v37;
          ++v36;
          if (!--v38)
            goto LABEL_72;
        }
        goto LABEL_91;
      }
LABEL_72:
      if (v97 != *(_DWORD *)(v32 + 56) || v95 != *(_DWORD *)(v32 + 52) || v94 != *(_DWORD *)(v32 + 96))
        goto LABEL_91;
      v39 = *(unsigned __int8 *)(v32 + 175);
      v40 = (char)v39;
      if ((v39 & 0x80u) != 0)
        v39 = *(_QWORD *)(v32 + 160);
      if (v92 != v39)
        goto LABEL_91;
      if (v40 >= 0)
        v41 = (unsigned __int8 *)(v32 + 152);
      else
        v41 = *(unsigned __int8 **)(v32 + 152);
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(__s1, v41, v28))
          goto LABEL_91;
      }
      else if ((_DWORD)v27)
      {
        v42 = (unsigned __int8 *)(v2 + 152);
        v43 = v27;
        while (*v42 == *v41)
        {
          ++v42;
          ++v41;
          if (!--v43)
            goto LABEL_88;
        }
        goto LABEL_91;
      }
LABEL_88:
      if (v87 == *(_DWORD *)(v32 + 60) && v81 == *(_DWORD *)(v32 + 64) && v80 == *(_QWORD *)(v32 + 208))
      {
        v74 = 0;
        goto LABEL_195;
      }
    }
LABEL_91:
    v44 = *(unsigned __int8 *)(v32 + 311);
    v45 = (char)v44;
    if ((v44 & 0x80u) != 0)
      v44 = *(_QWORD *)(v32 + 296);
    if (v9 == v44)
    {
      if (v45 >= 0)
        v46 = (unsigned __int8 *)(v32 + 288);
      else
        v46 = *(unsigned __int8 **)(v32 + 288);
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(v96, v46, v25))
          goto LABEL_123;
      }
      else if ((_DWORD)v30)
      {
        v47 = (unsigned __int8 *)(v2 + 72);
        v48 = v30;
        while (*v47 == *v46)
        {
          ++v47;
          ++v46;
          if (!--v48)
            goto LABEL_104;
        }
        goto LABEL_123;
      }
LABEL_104:
      if (v97 != *(_DWORD *)(v32 + 272) || v95 != *(_DWORD *)(v32 + 268) || v94 != *(_DWORD *)(v32 + 312))
        goto LABEL_123;
      v49 = *(unsigned __int8 *)(v32 + 391);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *(_QWORD *)(v32 + 376);
      if (v92 != v49)
        goto LABEL_123;
      if (v50 >= 0)
        v51 = (unsigned __int8 *)(v32 + 368);
      else
        v51 = *(unsigned __int8 **)(v32 + 368);
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(__s1, v51, v28))
          goto LABEL_123;
      }
      else if ((_DWORD)v27)
      {
        v52 = (unsigned __int8 *)(v2 + 152);
        v53 = v27;
        while (*v52 == *v51)
        {
          ++v52;
          ++v51;
          if (!--v53)
            goto LABEL_120;
        }
        goto LABEL_123;
      }
LABEL_120:
      if (v87 == *(_DWORD *)(v32 + 276) && v81 == *(_DWORD *)(v32 + 280) && v80 == *(_QWORD *)(v32 + 424))
      {
        v74 = 1;
        goto LABEL_195;
      }
    }
LABEL_123:
    v54 = *(unsigned __int8 *)(v32 + 527);
    v55 = (char)v54;
    if ((v54 & 0x80u) != 0)
      v54 = *(_QWORD *)(v32 + 512);
    if (v9 != v54)
    {
LABEL_155:
      v64 = *(unsigned __int8 *)(v32 + 743);
      v65 = (char)v64;
      if ((v64 & 0x80u) != 0)
        v64 = *(_QWORD *)(v32 + 728);
      if (v9 != v64)
        goto LABEL_58;
      if (v65 >= 0)
        v66 = (unsigned __int8 *)(v32 + 720);
      else
        v66 = *(unsigned __int8 **)(v32 + 720);
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(v96, v66, v25))
          goto LABEL_58;
      }
      else if ((_DWORD)v30)
      {
        v67 = (unsigned __int8 *)(v2 + 72);
        v68 = v30;
        while (*v67 == *v66)
        {
          ++v67;
          ++v66;
          if (!--v68)
            goto LABEL_166;
        }
LABEL_58:
        v32 = *(_QWORD *)(v32 + 1056);
        if (!v32)
          goto LABEL_55;
        continue;
      }
LABEL_166:
      if (v97 != *(_DWORD *)(v32 + 704) || v95 != *(_DWORD *)(v32 + 700) || v94 != *(_DWORD *)(v32 + 744))
        goto LABEL_58;
      v69 = *(unsigned __int8 *)(v32 + 823);
      v70 = (char)v69;
      if ((v69 & 0x80u) != 0)
        v69 = *(_QWORD *)(v32 + 808);
      if (v92 != v69)
        goto LABEL_58;
      if (v70 >= 0)
        v71 = (unsigned __int8 *)(v32 + 800);
      else
        v71 = *(unsigned __int8 **)(v32 + 800);
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(__s1, v71, v28))
          goto LABEL_58;
      }
      else if ((_DWORD)v27)
      {
        v72 = (unsigned __int8 *)(v2 + 152);
        v73 = v27;
        while (*v72 == *v71)
        {
          ++v72;
          ++v71;
          if (!--v73)
            goto LABEL_182;
        }
        goto LABEL_58;
      }
LABEL_182:
      if (v87 == *(_DWORD *)(v32 + 708) && v81 == *(_DWORD *)(v32 + 712) && v80 == *(_QWORD *)(v32 + 856))
      {
        v74 = 3;
        goto LABEL_195;
      }
      goto LABEL_58;
    }
    break;
  }
  if (v55 >= 0)
    v56 = (unsigned __int8 *)(v32 + 504);
  else
    v56 = *(unsigned __int8 **)(v32 + 504);
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(v96, v56, v25))
      goto LABEL_155;
  }
  else if ((_DWORD)v30)
  {
    v57 = (unsigned __int8 *)(v2 + 72);
    v58 = v30;
    while (*v57 == *v56)
    {
      ++v57;
      ++v56;
      if (!--v58)
        goto LABEL_136;
    }
    goto LABEL_155;
  }
LABEL_136:
  if (v97 != *(_DWORD *)(v32 + 488) || v95 != *(_DWORD *)(v32 + 484) || v94 != *(_DWORD *)(v32 + 528))
    goto LABEL_155;
  v59 = *(unsigned __int8 *)(v32 + 607);
  v60 = (char)v59;
  if ((v59 & 0x80u) != 0)
    v59 = *(_QWORD *)(v32 + 592);
  if (v92 != v59)
    goto LABEL_155;
  if (v60 >= 0)
    v61 = (unsigned __int8 *)(v32 + 584);
  else
    v61 = *(unsigned __int8 **)(v32 + 584);
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(__s1, v61, v28))
      goto LABEL_155;
  }
  else if ((_DWORD)v27)
  {
    v62 = (unsigned __int8 *)(v2 + 152);
    v63 = v27;
    while (*v62 == *v61)
    {
      ++v62;
      ++v61;
      if (!--v63)
        goto LABEL_152;
    }
    goto LABEL_155;
  }
LABEL_152:
  if (v87 != *(_DWORD *)(v32 + 492) || v81 != *(_DWORD *)(v32 + 496) || v80 != *(_QWORD *)(v32 + 640))
    goto LABEL_155;
  v74 = 2;
LABEL_195:
  v24 = v32 + 48 * v74;
  return v24 + 864;
}

void sub_232C37FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10B2C40C2EAE88FLL);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::G9::MeshProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  void *v3[2];
  void *__p[2];
  __int128 v5;
  uint64_t v6;

  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)a1, 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v3[0]);
LABEL_3:
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)a1 + 216, 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v3[0]);
LABEL_5:
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)(a1 + 27), 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v3[0]);
LABEL_7:
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)a1 + 648, 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_17:
    operator delete(v3[0]);
    goto LABEL_9;
  }
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_17;
LABEL_9:
  a1[54] = 0u;
  a1[55] = 0u;
  *(_OWORD *)((char *)a1 + 890) = 0u;
  a1[57] = 0u;
  a1[58] = 0u;
  *(_OWORD *)((char *)a1 + 938) = 0u;
  a1[60] = 0u;
  a1[61] = 0u;
  *(_OWORD *)((char *)a1 + 986) = 0u;
  a1[63] = 0u;
  a1[64] = 0u;
  *(_OWORD *)((char *)a1 + 1034) = 0u;
  return a1;
}

void sub_232C381C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  _Unwind_Resume(a1);
}

void sub_232C381DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void **v9;
  void **v10;

  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  do
  {
    v10 -= 27;
    AGX::MeshProgramKey::~MeshProgramKey(v10);
  }
  while (v10 != v9);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI31MTLMeshRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  void ***v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  os_unfair_lock_s *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  _QWORD v21[6];
  __int128 v22;
  void ***v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;

  if (a2)
  {
    v7 = *(_QWORD **)(a1 + 72);
    if (v7[2])
    {
      v8 = *(void ****)(a1 + 64);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void **)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 80);
      v12 = *(_OWORD *)(a1 + 48);
      v13 = (void *)v7[14];
      v14 = (os_unfair_lock_s *)v7[6];
      v15 = v7[10];
      v21[1] = 3221225472;
      v21[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
      v21[3] = &unk_2503FFEF8;
      v21[4] = v10;
      v21[5] = v9;
      v23 = v8;
      v24 = v11;
      v25 = v7;
      v22 = v12;
      v26 = 0;
      v21[0] = MEMORY[0x24BDAC760];
      AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(v8, v10, v9, v11, v12, a7, v13, v14, a2, v15, 0, (uint64_t)v21);
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 56);
    if (a5 > 3)
      v17 = 5;
    else
      v17 = qword_232D76128[a5];
    v18 = *(_QWORD **)(a1 + 88);
    v19 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v20 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v17, v19);
    if (v16)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v16 + 16))(v16, 0, 0, v20);
    }
    else if (v18)
    {
      *v18 = v20;
    }
  }
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createFragmentProgramVariant<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, os_unfair_lock_s *a7, uint64_t a8, NSObject *a9, unsigned __int8 a10, uint64_t a11)
{
  NSObject *v17;
  unsigned __int8 v18;
  NSObject *v19;
  uint64_t v20;
  unsigned __int8 v21;
  dispatch_object_t *v22;
  int *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  int v26;
  uint64_t v29;
  int *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  MTLPixelFormat v42;
  AGX::G9::TextureFormatTable *v43;
  _BOOL4 v44;
  int v45;
  _QWORD *v46;
  MTLPixelFormat v47;
  int v48;
  AGX::G9::TextureFormatTable *v49;
  int v50;
  int v51;
  _QWORD *v52;
  MTLPixelFormat v53;
  AGX::G9::TextureFormatTable *v54;
  int v55;
  _QWORD *v56;
  MTLPixelFormat v57;
  AGX::G9::TextureFormatTable *v58;
  int v59;
  _QWORD *v60;
  MTLPixelFormat v61;
  int v62;
  AGX::G9::TextureFormatTable *v63;
  int v64;
  int v65;
  _QWORD *v66;
  MTLPixelFormat v67;
  AGX::G9::TextureFormatTable *v68;
  int v69;
  _QWORD *v70;
  MTLPixelFormat v71;
  AGX::G9::TextureFormatTable *v72;
  int v73;
  _QWORD *v74;
  MTLPixelFormat v75;
  int v76;
  AGX::G9::TextureFormatTable *v77;
  int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned __int16 v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  void *v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  void *v98;
  void *v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  int v113;
  int v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  float v123;
  float v124;
  int v125;
  int v126;
  unsigned int v127;
  float v128;
  int v130;
  int v131;
  void *v132;
  uint64_t v133;
  uint64_t i;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  unint64_t CompileOptions;
  uint64_t v148;
  dispatch_group_t *v149;
  char *v150;
  uint64_t v151;
  void *v152;
  unsigned int v153;
  void *v154;
  NSObject *v155;
  void *v156;
  void **v157;
  id *v158;
  NSObject *v159;
  NSObject *global_queue;
  uint64_t v161;
  void *v162;
  char *v163;
  char **v164;
  void *v165;
  char v166;
  void ***v167;
  uint64_t v168;
  _QWORD v171[6];
  char v172;
  std::string v173;
  std::string v174;
  _QWORD v175[2];
  void *v176;
  void *v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  _DWORD v181[9];
  unsigned int v182;
  unsigned int v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  std::string __p;
  std::string v188;
  void *v189;
  char v190;
  char v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  _QWORD v197[6];
  char *v198[5];
  uint64_t v199;
  _QWORD block[2];
  void (*v201)(uint64_t);
  void *v202;
  uint64_t v203;
  _QWORD *v204;
  dispatch_group_t *v205;
  os_unfair_lock_s *v206;
  uint64_t (**v207)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *);
  void *v208;
  void *v209;
  void *v210;
  char v211;
  void *v212;
  char v213;
  void *v214;
  char v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  _QWORD v223[8];
  __int128 v224;
  __int128 v225;
  _QWORD v226[10];
  uint64_t (**v227)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *);
  void *v228;
  void *v229;
  void *v230;
  char v231;
  void *v232;
  char v233;
  void *v234;
  char v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  uint64_t v240;
  os_unfair_lock_s *v241;
  unint64_t v242;
  unsigned __int8 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  _BYTE v251[31];
  int v252;
  __int16 v253;
  int v254;
  void *v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;

  v262 = *MEMORY[0x24BDAC8D0];
  v197[0] = 0;
  v197[1] = v197;
  v197[2] = 0x3052000000;
  v197[3] = __Block_byref_object_copy_;
  v197[4] = __Block_byref_object_dispose_;
  v197[5] = 0;
  v168 = objc_msgSend(a2, "fragmentFunction");
  v167 = a1;
  if (objc_msgSend(a2, "openGLModeEnabled"))
    v17 = a9;
  else
    v17 = 0;
  if ((v18 & 1) == 0
  {
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLMeshRenderPipelineDescriptor>(MTLMeshRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLMeshRenderPipelineDescriptor>(MTLMeshRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    v19 = objc_msgSend(a2, "newPipelineScript");
    v20 = operator new();
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)v20 = dispatch_data_create_map(v19, (const void **)(v20 + 8), (size_t *)(v20 + 16));
    dispatch_release(v19);
    v199 = v20;
    if ((v21 & 1) == 0
    {
    }
    v22 = (dispatch_object_t *)v199;
    v23 = (int *)(*(_QWORD *)(v199 + 8) + **(unsigned int **)(v199 + 8));
    v24 = (unsigned __int16 *)((char *)v23 - *v23);
    v25 = *v24;
    if (v25 >= 9 && v24[4])
    {
      v26 = *((unsigned __int8 *)v23 + v24[4]);
      if (v25 >= 0xB && v26 == 1)
      {
        v34 = v24[5];
        if (v34)
        {
          v35 = (int *)((char *)v23 + v34 + *(unsigned int *)((char *)v23 + v34));
          v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 0xBu && (v37 = v36[5]) != 0)
            v38 = (int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          else
            v38 = 0;
          v161 = objc_msgSend(a2, "meshFunction");
          ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(v198, a6);
          v162 = (void *)objc_msgSend(a2, "fragmentLinkedFunctions");
          v248 = 0uLL;
          *(_QWORD *)&v249 = 0;
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v248, (void *)objc_msgSend(v162, "functions"), 0);
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v248, (void *)objc_msgSend(v162, "privateFunctions"), 1u);
          AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateFragmentProgramKey((uint64_t)v175, v38, v161 != 0, v17, v198, (char **)&v248);
          if ((_QWORD)v248)
          {
            *((_QWORD *)&v248 + 1) = v248;
            operator delete((void *)v248);
          }
          v163 = v198[0];
          if (!v198[0])
            goto LABEL_245;
          v164 = v198;
          goto LABEL_244;
        }
      }
      else if (v25 >= 0xB && v26 == 4)
      {
        v29 = v24[5];
        if (v29)
        {
          v30 = (int *)((char *)v23 + v29 + *(unsigned int *)((char *)v23 + v29));
          v31 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v31 >= 0xFu && (v32 = v31[7]) != 0)
            v33 = (int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
          else
            v33 = 0;
          ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&v246, a6);
          v165 = (void *)objc_msgSend(a2, "fragmentLinkedFunctions");
          v248 = 0uLL;
          *(_QWORD *)&v249 = 0;
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v248, (void *)objc_msgSend(v165, "functions"), 0);
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v248, (void *)objc_msgSend(v165, "privateFunctions"), 1u);
          AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateFragmentProgramKey((uint64_t)v175, v33, 1, v17, (char **)&v246, (char **)&v248);
          if ((_QWORD)v248)
          {
            *((_QWORD *)&v248 + 1) = v248;
            operator delete((void *)v248);
          }
          v163 = (char *)v246;
          if (!(_QWORD)v246)
            goto LABEL_245;
          v164 = (char **)&v246;
LABEL_244:
          v164[1] = v163;
          operator delete(v163);
LABEL_245:
          dispatch_release(*v22);
          MEMORY[0x234927ECC](v22, 0x10C0C40495EAE30);
          goto LABEL_161;
        }
      }
    }
    dispatch_release(*(dispatch_object_t *)v199);
    MEMORY[0x234927ECC](v22, 0x10C0C40495EAE30);
  }
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)v175, v17, (void *)objc_msgSend(a2, "fragmentLinkedFunctions"), a6);
  v250 = 0u;
  memset(v251, 0, sizeof(v251));
  v248 = 0u;
  v249 = 0u;
  v252 = 1;
  v253 = 0;
  v254 = 0;
  v256 = 0u;
  v257 = 0u;
  v258 = 0u;
  v259 = 0u;
  v260 = 0u;
  v261 = 0;
  bzero(&v248, 0x28uLL);
  v39 = objc_msgSend(a2, "_descriptorPrivate");
  v40 = *(id *)v39;
  v41 = (_QWORD *)objc_msgSend((id)objc_msgSend(*(id *)v39, "_descriptorAtIndex:", 0), "_descriptorPrivate");
  if (v41)
    v43 = (AGX::G9::TextureFormatTable *)(*v41 >> 36);
  else
    v43 = 0;
  v255 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v43, v42);
  v44 = v43 != 0;
  v45 = DWORD2(v250);
  v46 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 1), "_descriptorPrivate");
  v48 = v45 | v44;
  if (v46)
  {
    v49 = (AGX::G9::TextureFormatTable *)(*v46 >> 36);
    *(_QWORD *)&v256 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v49, v47);
    if (v49)
    {
      v50 = 2;
      goto LABEL_35;
    }
  }
  else
  {
    *(_QWORD *)&v256 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v47);
  }
  v50 = 0;
LABEL_35:
  v51 = v48 | v50;
  DWORD2(v250) = v51;
  v52 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 2), "_descriptorPrivate");
  if (v52)
  {
    v54 = (AGX::G9::TextureFormatTable *)(*v52 >> 36);
    *((_QWORD *)&v256 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v54, v53);
    if (v54)
    {
      v55 = 4;
      goto LABEL_40;
    }
  }
  else
  {
    *((_QWORD *)&v256 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v53);
  }
  v55 = 0;
LABEL_40:
  v56 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 3), "_descriptorPrivate");
  if (v56)
  {
    v58 = (AGX::G9::TextureFormatTable *)(*v56 >> 36);
    *(_QWORD *)&v257 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v58, v57);
    if (v58)
    {
      v59 = 8;
      goto LABEL_45;
    }
  }
  else
  {
    *(_QWORD *)&v257 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v57);
  }
  v59 = 0;
LABEL_45:
  v60 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 4), "_descriptorPrivate");
  v62 = v55 | v59;
  if (v60)
  {
    v63 = (AGX::G9::TextureFormatTable *)(*v60 >> 36);
    *((_QWORD *)&v257 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v63, v61);
    if (v63)
    {
      v64 = 16;
      goto LABEL_50;
    }
  }
  else
  {
    *((_QWORD *)&v257 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v61);
  }
  v64 = 0;
LABEL_50:
  v65 = v62 | v64 | v51;
  DWORD2(v250) = v65;
  v66 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 5), "_descriptorPrivate");
  if (v66)
  {
    v68 = (AGX::G9::TextureFormatTable *)(*v66 >> 36);
    *(_QWORD *)&v258 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v68, v67);
    if (v68)
    {
      v69 = 32;
      goto LABEL_55;
    }
  }
  else
  {
    *(_QWORD *)&v258 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v67);
  }
  v69 = 0;
LABEL_55:
  v70 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 6), "_descriptorPrivate");
  if (v70)
  {
    v72 = (AGX::G9::TextureFormatTable *)(*v70 >> 36);
    *((_QWORD *)&v258 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v72, v71);
    if (v72)
    {
      v73 = 64;
      goto LABEL_60;
    }
  }
  else
  {
    *((_QWORD *)&v258 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v71);
  }
  v73 = 0;
LABEL_60:
  v74 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 7), "_descriptorPrivate");
  v76 = v69 | v73;
  if (!v74)
  {
    *(_QWORD *)&v259 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v75);
    goto LABEL_64;
  }
  v77 = (AGX::G9::TextureFormatTable *)(*v74 >> 36);
  *(_QWORD *)&v259 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v77, v75);
  if (!v77)
  {
LABEL_64:
    v78 = 0;
    goto LABEL_65;
  }
  v78 = 128;
LABEL_65:
  DWORD2(v250) = v76 | v78 | v65;
  LOBYTE(v253) = objc_msgSend(a2, "rasterSampleCount");
  v79 = *(_QWORD *)(v39 + 40);
  if (!v79)
    LOBYTE(v79) = objc_msgSend(a2, "rasterSampleCount");
  HIBYTE(v253) = v79;
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((uint64_t)&v248);
  v184 = v248;
  v185 = v249;
  v186 = v250;
  v80 = (void *)objc_msgSend(a2, "driverCompilerOptions");
  v81 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count");
  v82 = objc_msgSend(a2, "supportAddingFragmentBinaryFunctions");
  if (objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v83 = 4;
  else
    v83 = 0;
  v182 = v182 & 0xFFFFFFFB | v83;
  v84 = objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue");
  v182 = v182 & 0xFC0003FF | (v84 << 10);
  if (objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v85 = 0x8000000;
  else
    v85 = 0;
  if (v81)
    v86 = 1;
  else
    v86 = v82;
  if (v86)
    v87 = 512;
  else
    v87 = 0;
  v182 = v85 | v182 & 0xF7FFFDFF | v87;
  v88 = 0;
  v89 = *(void **)objc_msgSend(a2, "_descriptorPrivate");
  do
  {
    v98 = (void *)objc_msgSend(v89, "_descriptorAtIndex:", v88);
    v99 = v98;
    if (v98 && objc_msgSend(v98, "pixelFormat"))
    {
      if (objc_msgSend(v99, "isBlendingEnabled"))
      {
        v181[v88] |= 1u;
        v100 = objc_msgSend(v99, "sourceRGBBlendFactor");
        v101 = 2 * v100 + 2;
        if (v100 >= 0x13)
          v101 = 0;
        v181[v88] = v181[v88] & 0xFFFFFFC1 | v101;
        v102 = objc_msgSend(v99, "destinationRGBBlendFactor");
        v103 = ((_DWORD)v102 << 6) + 64;
        if (v102 >= 0x13)
          v103 = 0;
        v181[v88] = v181[v88] & 0xFFFFF83F | v103;
        v104 = objc_msgSend(v99, "sourceAlphaBlendFactor");
        v105 = ((_DWORD)v104 << 11) + 2048;
        if (v104 >= 0x13)
          v105 = 0;
        v181[v88] = v181[v88] & 0xFFFF07FF | v105;
        v106 = objc_msgSend(v99, "destinationAlphaBlendFactor");
        v107 = ((_DWORD)v106 << 16) + 0x10000;
        if (v106 >= 0x13)
          v107 = 0;
        v181[v88] = v181[v88] & 0xFFE0FFFF | v107;
        v108 = objc_msgSend(v99, "rgbBlendOperation");
        if (v108 > 4)
          v109 = 0;
        else
          v109 = dword_232D7C750[v108];
        v181[v88] = v181[v88] & 0xFF1FFFFF | v109;
        v110 = objc_msgSend(v99, "alphaBlendOperation");
        if (v110 <= 4)
          v90 = dword_232D7C764[v110];
        else
          v90 = 0;
        v181[v88] = v181[v88] & 0xF8FFFFFF | v90;
      }
      v91 = objc_msgSend(v99, "writeMask");
      v92 = 1 << v88;
      if ((v91 & 8) == 0)
        v92 = 0;
      v93 = 256 << v88;
      if ((v91 & 4) == 0)
        LOWORD(v93) = 0;
      v94 = ((unsigned __int16)v93 | (unsigned __int16)v179) & 0xFF00;
      v95 = 0x10000 << v88;
      if ((v91 & 2) == 0)
        v95 = 0;
      v96 = (v95 | v179) & 0xFF0000;
      v97 = 0x1000000 << v88;
      if ((v91 & 1) == 0)
        v97 = 0;
      v179 = v179 & 0xFF0000FF | v97 | v92 | v94 | v96;
    }
    ++v88;
  }
  while (v88 != 8);
  if (objc_msgSend(a2, "isLogicOperationEnabled"))
    v111 = 32;
  else
    v111 = 0;
  v178 = v178 & 0xFFFFFFDF | v111;
  v112 = objc_msgSend(a2, "logicOperation");
  if (v112 > 0xF)
    v113 = 0;
  else
    v113 = dword_232D7C6F0[v112];
  v178 = v178 & 0xFFFFF83F | v113;
  if (objc_msgSend(a2, "isAlphaTestEnabled"))
    v114 = 2048;
  else
    v114 = 0;
  v178 = v178 & 0xFFFFF7FF | v114;
  v115 = objc_msgSend(a2, "alphaTestFunction");
  if (v115 > 7)
    v116 = 0;
  else
    v116 = dword_232D7C730[v115];
  v178 = v178 & 0xFFFF0FFF | v116;
  if (objc_msgSend(a2, "isPointSmoothEnabled"))
    v117 = 0x10000;
  else
    v117 = 0;
  v178 = v178 & 0xFFFAFFFF | ((HIWORD(v117) & 1) << 18) | v117;
  v181[8] = objc_msgSend(a2, "fragmentDepthCompareClampMask");
  if (objc_msgSend(a2, "isDepthStencilWriteDisabled"))
    v118 = 16;
  else
    v118 = 0;
  v178 = v178 & 0xFFFFFFEF | v118;
  v119 = objc_msgSend(a2, "sampleMask");
  v120 = objc_msgSend(a2, "isAlphaToCoverageEnabled");
  v178 = v178 & 0xFFFFFFFE | v120;
  if (objc_msgSend(a2, "isAlphaToOneEnabled"))
    v121 = 2;
  else
    v121 = 0;
  v178 = v178 & 0xFFFFFFFD | v121;
  if ((objc_msgSend(a2, "openGLModeEnabled") & 1) != 0)
  {
    v122 = objc_msgSend(a2, "sampleCoverageInvert");
    objc_msgSend(a2, "sampleCoverage");
    v124 = 1.0;
    if (v122)
      v124 = 0.0;
    v125 = 4 * (v123 != v124);
    if (v119 != -1)
      v125 = 4;
    v178 = v178 & 0xFFFFFFFB | v125;
    if (objc_msgSend(a2, "sampleCoverageInvert"))
      v126 = 8;
    else
      v126 = 0;
    v127 = v178 & 0xFFFFFFF7 | v126;
  }
  else
  {
    objc_msgSend(a2, "sampleCoverage");
    if (v119 == -1 && v128 == 1.0)
      v130 = 0;
    else
      v130 = 4;
    v127 = v130 | v178 & 0xFFFFFFFB;
  }
  v178 = v127;
  v183 &= 0xFFFFFFFC;
  if (objc_msgSend(a2, "openGLModeEnabled"))
    v131 = 2;
  else
    v131 = 0;
  v183 = v183 & 0xFFFFFFFD | v131;
  v132 = (void *)objc_msgSend(a2, "fragmentBuffers");
  v133 = 0;
  for (i = 0; i != 31; ++i)
  {
    v135 = objc_msgSend((id)objc_msgSend(v132, "_descriptorAtIndex:", i), "mutability");
    v136 = 1 << i;
    if (v135 != 1)
      v136 = 0;
    v133 |= v136;
  }
  v180 = v133;
  v191 = objc_msgSend(a2, "supportIndirectCommandBuffers");
  if (objc_msgSend(a2, "needsCustomBorderColorSamplers"))
    v137 = 4;
  else
    v137 = 0;
  v183 = v183 & 0xFFFFFFFB | v137;
  v138 = objc_msgSend(a2, "textureWriteRoundingMode");
  v139 = 16 * (v138 == 1);
  if (v138 == 2)
    v139 = 32;
  v183 = v139 | v183 & 0xFFFFFFCF;
  v140 = objc_msgSend(a2, "meshFunction");
  v183 = v183 & 0xFFFFFEFF | ((v140 != 0) << 8);
  if ((objc_msgSend(a2, "supportAddingFragmentBinaryFunctions") & 1) != 0)
    v141 = 64;
  else
    v141 = (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count") != 0) << 6;
  v183 = v183 & 0xFFFFFDBF | v141;
  v182 &= ~0x80u;
  objc_msgSend(a2, "supportIndirectCommandBuffers");
LABEL_161:
  v142 = *(_QWORD *)(a3 + 808);
  if (*(_BYTE *)(v142 + 6360))
    v143 = 67109120;
  else
    v143 = 256;
  v144 = v143 | v182 & 0x8BFFFEFF;
  v145 = v183 & 0xFFFFF7F7 | (*(_DWORD *)(v142 + 6224) >> 7) & 8;
  v182 = v144;
  v183 = v145;
  v196 = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v146 = 1;
    v144 = v182;
    v145 = v183;
  }
  else
  {
    v146 = 0;
  }
  v182 = (a4 >> 21) & 8 | v146 | v144 & 0xFFFFFFF4;
  v183 = v145 & 0xFFFFFF7F | (((a4 >> 21) & 1) << 7);
  if (a8)
  {
    if (*(char *)(a8 + 23) < 0)
      std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
    else
      v173 = *(std::string *)a8;
    if (*(char *)(a8 + 47) < 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)(a8 + 24), *(_QWORD *)(a8 + 32));
    else
      v174 = *(std::string *)(a8 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v173;
    *((_BYTE *)&v173.__r_.__value_.__s + 23) = 0;
    v173.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v188.__r_.__value_.__l.__data_);
    v188 = v174;
    *((_BYTE *)&v174.__r_.__value_.__s + 23) = 0;
    v174.__r_.__value_.__s.__data_[0] = 0;
  }
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v248, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
  v246 = v248;
  v247 = v249;
  CompileOptions = AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a7, a4 | 3, (uint64_t)&v246);
  LOBYTE(v199) = 0;
  v148 = AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a7, (uint64_t)v175, &v199, CompileOptions, a5 != 0);
  v149 = (dispatch_group_t *)v148;
  v150 = (char *)MEMORY[0x24BDAC760];
  if ((_BYTE)v199)
  {
    v151 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v152 = (void *)objc_msgSend(a2, "pipelineLibrary");
    if (objc_msgSend(v152, "pipelineCache") && (objc_msgSend(v152, "disableRunTimeCompilation") & 1) != 0)
      LOBYTE(v153) = 1;
    else
      v153 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    v166 = v153;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v154 = (void *)objc_opt_new();
    objc_msgSend(v154, "setSync:", a10 ^ 1u);
    objc_msgSend(v154, "setFunction:", v168);
    objc_msgSend(v154, "setFrameworkData:", a9);
    objc_msgSend(v154, "setPipelineCache:", v151);
    objc_msgSend(v154, "setDestinationBinaryArchive:", a5);
    objc_msgSend(v154, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    objc_msgSend(v154, "setPipelineOptions:", a4 | 3);
    if ((a4 & 0x330003) == 0)
      objc_msgSend(v154, "setPipelineOptions:", objc_msgSend(v154, "pipelineOptions") | 0x8000);
    v155 = objc_msgSend(a2, "newPipelineScript");
    if (v155)
    {
      objc_msgSend(v154, "setAirScript:", v155);
      dispatch_release(v155);
    }
    objc_msgSend(v154, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v156 = (void *)objc_msgSend(a2, "fragmentLinkedFunctions");
    objc_msgSend(v154, "setVisibleFunctions:", objc_msgSend(v156, "functions"));
    objc_msgSend(v154, "setVisibleFunctionGroups:", objc_msgSend(v156, "groups"));
    objc_msgSend(v154, "setPrivateVisibleFunctions:", objc_msgSend(v156, "privateFunctions"));
    v226[0] = v150;
    v226[1] = 3321888768;
    v226[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke;
    v226[3] = &unk_250400E08;
    v226[7] = v197;
    v226[4] = v168;
    v243 = a10;
    v226[8] = v167;
    v226[9] = v149;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v227, (const AGX::Impl::FragmentProgramKey *)v175);
    v227 = &off_250401D90;
    v240 = v196;
    v241 = a7;
    v242 = CompileOptions;
    v244 = v246;
    v245 = v247;
    v226[5] = a3;
    v226[6] = a2;
    v171[0] = v150;
    v171[1] = 3221225472;
    v171[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2;
    v171[3] = &unk_250400E40;
    v171[4] = v226;
    v171[5] = v149;
    v172 = v166;
    v157 = *v167;
    v198[0] = v150;
    v198[1] = (char *)3221225472;
    v198[2] = (char *)___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_18FragmentProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
    v198[3] = (char *)&unk_250400D80;
    v198[4] = (char *)v171;
    *(_QWORD *)&v248 = v150;
    *((_QWORD *)&v248 + 1) = 3221225472;
    *(_QWORD *)&v249 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    *((_QWORD *)&v249 + 1) = &unk_2504023B8;
    *(_QWORD *)&v250 = v198;
    AGX::Compiler::compileProgram<AGX::FragmentProgramKey,AGCDeserializedReply>(v157, (uint64_t)v175, v154, (uint64_t)&v248);

    v227 = &off_250402A40;
    if (v238)
    {
      v239 = v238;
      operator delete(v238);
    }
    if (v236)
    {
      v237 = v236;
      operator delete(v236);
    }
    if (v235 < 0)
    {
      operator delete(v234);
      if ((v233 & 0x80000000) == 0)
      {
LABEL_198:
        if ((v231 & 0x80000000) == 0)
          goto LABEL_199;
LABEL_233:
        operator delete(v230);
LABEL_199:
        v227 = (uint64_t (**)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *))off_250401D50;
        if (v228)
        {
          v229 = v228;
          operator delete(v228);
        }
        goto LABEL_203;
      }
    }
    else if ((v233 & 0x80000000) == 0)
    {
      goto LABEL_198;
    }
    operator delete(v232);
    if ((v231 & 0x80000000) == 0)
      goto LABEL_199;
    goto LABEL_233;
  }
  if ((CompileOptions & 0x330003) != 0)
  {
    v158 = *v167;
    v223[0] = MEMORY[0x24BDAC760];
    v223[1] = 3221225472;
    v223[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3;
    v223[3] = &unk_250400D20;
    v224 = v246;
    v225 = v247;
    v223[5] = a7;
    v223[4] = a3;
    v223[6] = CompileOptions;
    v223[7] = v148;
    objc_msgSend(*v158, "reflectionWithFunction:options:sync:completionHandler:", v168, CompileOptions & 0x330003, a10 ^ 1u, v223);
  }
LABEL_203:
  block[0] = v150;
  block[1] = 3321888768;
  v201 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_4;
  v202 = &unk_250400E68;
  v205 = v149;
  v206 = a7;
  AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v207, (const AGX::Impl::FragmentProgramKey *)v175);
  v207 = &off_250401D90;
  v220 = v196;
  v221 = v246;
  v222 = v247;
  v203 = a11;
  v204 = v197;
  v159 = *v149;
  if (a10)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v159, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*v149, 0xFFFFFFFFFFFFFFFFLL);
    v201((uint64_t)block);
  }
  v207 = &off_250402A40;
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if ((v215 & 0x80000000) == 0)
  {
    if ((v213 & 0x80000000) == 0)
      goto LABEL_212;
LABEL_226:
    operator delete(v212);
    if ((v211 & 0x80000000) == 0)
      goto LABEL_213;
    goto LABEL_227;
  }
  operator delete(v214);
  if (v213 < 0)
    goto LABEL_226;
LABEL_212:
  if ((v211 & 0x80000000) == 0)
    goto LABEL_213;
LABEL_227:
  operator delete(v210);
LABEL_213:
  v207 = (uint64_t (**)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *))off_250401D50;
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  v175[0] = &off_250402A40;
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if ((v190 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_221;
LABEL_229:
    operator delete(v188.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_222;
    goto LABEL_230;
  }
  operator delete(v189);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_229;
LABEL_221:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_222;
LABEL_230:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_222:
  v175[0] = off_250401D50;
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  _Block_object_dispose(v197, 8);
}

void sub_232C397E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v69;
  void *v70;

  v69 = (void *)STACK[0x5E0];
  if (STACK[0x5E0])
  {
    STACK[0x5E8] = (unint64_t)v69;
    operator delete(v69);
  }
  v70 = (void *)STACK[0x5C0];
  if (STACK[0x5C0])
  {
    STACK[0x5C8] = (unint64_t)v70;
    operator delete(v70);
  }
  std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100]((dispatch_object_t **)&STACK[0x230]);
  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

unint64_t AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v4 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    v7 = (os_unfair_lock_s *)(a1 + 1688);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1688));
    v8 = *(_QWORD *)(a1 + 1648);
    v9 = *(unsigned int *)(a1 + 1656);
    v10 = (_QWORD *)VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v8, *(_DWORD *)(a1 + 1656), (_QWORD *)a3);
    if (!v10)
    {
      if ((_DWORD)v9 == 4)
      {
        v8 = operator new();
        v9 = 0;
        *(_QWORD *)(v8 + 224) = *(_QWORD *)(a1 + 1648);
        *(_OWORD *)(v8 + 192) = 0u;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 160) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_QWORD *)(a1 + 1648) = v8;
        *(_DWORD *)(a1 + 1656) = 0;
      }
      v11 = (_OWORD *)(v8 + 32 * v9);
      v12 = *(_OWORD *)(a3 + 16);
      *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v13 = *(_QWORD *)(a1 + 1648);
      v14 = *(_DWORD *)(a1 + 1656);
      *(_DWORD *)(a1 + 1656) = v14 + 1;
      v10 = (_QWORD *)(v13 + 24 * v14 + 128);
    }
    if ((v4 & ~v10[1]) != 0)
    {
      v15 = *v10 | v4;
      *v10 = v15;
    }
    else
    {
      v15 = 0;
    }
    os_unfair_lock_unlock(v7);
  }
  else
  {
    v15 = 0;
  }
  return v15 | a2 & 0xFFFFFFFFFFCCFFFCLL;
}

void sub_232C39A24(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, _BYTE *a3, int a4, int a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;

  *a3 = 0;
  if ((a4 & 4) == 0 && !a5)
  {
    v9 = a1 + 422;
    os_unfair_lock_lock(a1 + 422);
    v10 = (uint64_t)VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::FragmentProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
    if (*(_QWORD *)v10)
    {
      if (!*(_BYTE *)(v10 + 40))
      {
        if ((*(_QWORD *)&a4 & 0x330003) != 0)
          dispatch_group_enter(*(dispatch_group_t *)v10);
        goto LABEL_11;
      }
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;

      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 0;
      v12 = *(NSObject **)v10;
    }
    else
    {
      v12 = dispatch_group_create();
      *(_QWORD *)v10 = v12;
    }
    dispatch_group_enter(v12);
    *a3 = 1;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return v10;
  }
  v10 = operator new();
  *(_WORD *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 41) = 1;
  v13 = dispatch_group_create();
  *(_QWORD *)v10 = v13;
  dispatch_group_enter(v13);
  *a3 = 1;
  return v10;
}

void sub_232C39B68(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, const __CFString **a5, _BYTE *a6)
{
  void *v11;
  void *v12;
  const __CFString **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  void *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v42;
  uint64_t v43;
  void *__dst[2];
  unint64_t v45;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 384));
  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    v12 = (void *)objc_msgSend(v11, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v12)
      objc_msgSend(v12, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  *a4 = *(_QWORD *)(a3 + 40);
  v13 = a5;
  *a5 = *(const __CFString **)(a3 + 48);
  *a6 = 0;
  v14 = *a4;
  if (!*a4)
  {
    if (a2[33])
    {
      v15 = a2 + 33;
      if (!a2[34])
        v15 = a2 + 103;
      if (!*v15)
        goto LABEL_14;
    }
    else
    {
      v15 = a2 + 103;
      if (!a2[103])
        goto LABEL_14;
    }
    if (v15[1])
      goto LABEL_21;
LABEL_14:
    if (a2[63])
    {
      v16 = a2 + 63;
      if (!a2[64])
        v16 = a2 + 133;
      if (!*v16)
        goto LABEL_22;
    }
    else
    {
      v16 = a2 + 133;
      if (!a2[133])
        goto LABEL_22;
    }
    if (v16[1])
    {
LABEL_21:
      *a4 = 2;
      *a5 = CFSTR("Internal error during function compilation");
      *a6 = 1;
      v14 = *a4;
      if (*a4)
        goto LABEL_26;
    }
LABEL_22:
    if (*(_BYTE *)(a1 + 304)
      && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
    {
      *a4 = 2;
      *a5 = CFSTR("Fragment shader cannot be used with indirect command buffers");
      *a6 = 1;
      v14 = *a4;
    }
    else
    {
      v14 = 0;
    }
  }
LABEL_26:
  AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(NSObject **)(a3 + 16), a1 + 385, *(void **)(a1 + 40), v14);
  if (*a4)
    return 0;
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  v17 = operator new();
  v18 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v18)
    v19 = (const char *)v18;
  else
    v19 = "";
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = (void *)v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    v25 = (void **)operator new(v26 + 1);
    __dst[1] = v24;
    v45 = v27 | 0x8000000000000000;
    __dst[0] = v25;
    goto LABEL_38;
  }
  HIBYTE(v45) = v20;
  v25 = __dst;
  if (v20)
LABEL_38:
    memmove(v25, v19, (size_t)v24);
  *((_BYTE *)v24 + (_QWORD)v25) = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(&v42, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)2, 0, *(_QWORD *)(a1 + 368) + 1696, *(_QWORD *)(a1 + 136), 0, 0, v21, v22, v23, 0);
  AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::FragmentProgramVariant();
  *(_QWORD *)v17 = &off_2504025A0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&v42);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
  v28 = 0x10000;
  if (!*(_BYTE *)(v17 + 379))
    v28 = 4096;
  if (v28 < *(unsigned int *)(v17 + 320))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v17 = 0;
    *a4 = 2;
    v29 = CFSTR("Fragment function exceeds available stack space");
LABEL_45:
    *v13 = v29;
    return v17;
  }
  if (*(_BYTE *)(a1 + 304) && !*(_QWORD *)(v17 + 2360))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v17 = 0;
    *a4 = 2;
    v29 = CFSTR("Internal error during function compilation");
    goto LABEL_45;
  }
  v30 = 0x20400000000;
  if (!*(_BYTE *)(v17 + 3219))
    v30 = 0x400000001;
  v31 = 0x40000000000;
  if (!*(_BYTE *)(v17 + 3220))
    v31 = 1;
  v42 = v31 | v30;
  v43 = 0;
  v32 = 82;
  if (!*(_BYTE *)(v17 + 3224))
    v32 = 0;
  *(uint64_t *)((char *)&v42 + ((v32 >> 3) & 8)) |= 1 << (v32 & 0x3E);
  if (*(_QWORD *)(v17 + 400))
    v33 = 0x400000000000;
  else
    v33 = 1;
  v34 = v43;
  v35 = v33 | v42;
  v42 = v35;
  v36 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 | v35, v36));
  v38 = v36 + 1;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 | v34, v38));
  return v17;
}

void sub_232C3A058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  MEMORY[0x234927ECC](v3, 0x10F3C400724793BLL);
  _Unwind_Resume(a1);
}

AGX::Impl::FragmentProgramKey *AGX::Impl::FragmentProgramKey::FragmentProgramKey(AGX::Impl::FragmentProgramKey *this, const AGX::Impl::FragmentProgramKey *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char *v27;
  char *v28;

  *(_QWORD *)this = off_250401D50;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)this + 4) = v8;
    memcpy(v7, v5, v6);
    *((_QWORD *)this + 3) = v8;
  }
  *(_QWORD *)this = &off_250402A40;
  v9 = *(_OWORD *)((char *)a2 + 40);
  v10 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 56) = v10;
  *(_OWORD *)((char *)this + 40) = v9;
  v11 = *(_OWORD *)((char *)a2 + 88);
  v12 = *(_OWORD *)((char *)a2 + 104);
  v13 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v13;
  *(_OWORD *)((char *)this + 104) = v12;
  *(_OWORD *)((char *)this + 88) = v11;
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v14 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v14;
  }
  v15 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v16 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v17 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v17;
  }
  v18 = *((_BYTE *)a2 + 224);
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 224) = v18;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  v20 = (_BYTE *)*((_QWORD *)a2 + 29);
  v19 = (_BYTE *)*((_QWORD *)a2 + 30);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      abort();
    v22 = (char *)operator new(v19 - v20);
    *((_QWORD *)this + 29) = v22;
    *((_QWORD *)this + 30) = v22;
    v23 = &v22[32 * (v21 >> 5)];
    *((_QWORD *)this + 31) = v23;
    memcpy(v22, v20, v21);
    *((_QWORD *)this + 30) = v23;
  }
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  v25 = (_BYTE *)*((_QWORD *)a2 + 32);
  v24 = (_BYTE *)*((_QWORD *)a2 + 33);
  v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0)
      abort();
    v27 = (char *)operator new(v24 - v25);
    *((_QWORD *)this + 32) = v27;
    *((_QWORD *)this + 33) = v27;
    v28 = &v27[32 * (v26 >> 5)];
    *((_QWORD *)this + 34) = v28;
    memcpy(v27, v25, v26);
    *((_QWORD *)this + 33) = v28;
  }
  return this;
}

void sub_232C3A2AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  void *v5;

  AGX::VertexProgramVaryings::~VertexProgramVaryings(v2);
  *v1 = v3;
  v5 = (void *)v1[2];
  if (v5)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  BOOL v12;
  char v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6 = *(_QWORD *)(a1 + 40);
  v8 = v15;
  v7 = v16;
  v9 = *(void **)(a3 + 32);
  v10 = *(unsigned __int8 *)(a1 + 48);
  v11 = v14;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 16) = v7;

  *(_QWORD *)(v6 + 24) = objc_msgSend(v8, "copy");
  if (*(_QWORD *)(v6 + 8))
  {

    *(_QWORD *)(v6 + 32) = v9;
  }
  else
  {
    if (v10)
      v12 = v11 == 0;
    else
      v12 = 0;
    v13 = v12;
    *(_BYTE *)(v6 + 40) = v13;
  }
  dispatch_group_leave(*(dispatch_group_t *)v6);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_18FragmentProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke(uint64_t a1)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[8];

  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void AGX::Compiler::compileProgram<AGX::FragmentProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  char **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[6];
  _QWORD v21[5];
  _QWORD v22[6];
  dispatch_object_t object;
  unsigned int *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  _OWORD v31[2];
  unsigned __int8 md[16];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(_QWORD *)a2 + 16))(a2, &v27, &v26);
  v8 = dispatch_data_create(v27, v26, 0, 0);
  objc_msgSend(a3, "setDriverKeyData:", v8);
  if (objc_msgSend(a3, "airScript"))
  {
    v24 = 0;
    v25 = 0;
    object = dispatch_data_create_map((dispatch_data_t)objc_msgSend(a3, "airScript"), (const void **)&v24, &v25);
    v9 = v24;
    v10 = *v24;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v31[0] = *(_OWORD *)md;
    v31[1] = v33;
    objc_msgSend(a3, "setVendorPluginFunctionId:", v31);
  }
  v14 = MEMORY[0x24BDAC760];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v22[3] = &unk_250402408;
  v22[4] = a3;
  v22[5] = a4;
  if (objc_msgSend(a3, "function"))
  {
    v15 = mach_absolute_time();
    v16 = *a1;
    v20[0] = v14;
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v20[3] = &unk_250402458;
    v20[4] = v22;
    v20[5] = v15;
    objc_msgSend(v16, "compileFunctionRequest:completionHandler:", a3, v20);
  }
  else
  {
    if (objc_msgSend(a3, "frameworkData") || objc_msgSend(a3, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    v21[0] = v14;
    v21[1] = 3221225472;
    v21[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v21[3] = &unk_250402430;
    v21[4] = v22;
    v17 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    v18 = *a1;
    v19 = objc_msgSend(a3, "driverKeyData");
    if (v17)
      objc_msgSend(v18, "compileRequest:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
    else
      objc_msgSend(v18, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
  }
  dispatch_release(v8);
}

void sub_232C3A714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
  dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_4(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  dispatch_object_t object[2];
  id v7[4];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(*(_QWORD *)(a1 + 48) + 32);
  *(_OWORD *)object = 0u;
  memset(v7, 0, 26);
  v3 = AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(_QWORD *)(a1 + 48), a1 + 64, object);
  v4 = v3[1];
  v5 = *(_OWORD *)(a1 + 368);
  v8[0] = *(_OWORD *)(a1 + 352);
  v8[1] = v5;
  (*(void (**)(_QWORD, uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0])
    dispatch_release(object[0]);
  if (object[1])
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);

}

void sub_232C3A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

AGX::Impl::FragmentProgramKey *__copy_helper_block_e8_64c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1, uint64_t a2)
{
  AGX::Impl::FragmentProgramKey *result;

  result = AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)(a1 + 64), (const AGX::Impl::FragmentProgramKey *)(a2 + 64));
  *(_QWORD *)(a1 + 64) = &off_250401D90;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  return result;
}

void __destroy_helper_block_e8_64c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 64) = &off_250402A40;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 263) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_11:
    operator delete(*(void **)(a1 + 240));
    if ((*(char *)(a1 + 239) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 264));
  if (*(char *)(a1 + 263) < 0)
    goto LABEL_11;
LABEL_7:
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
    goto LABEL_8;
LABEL_12:
  operator delete(*(void **)(a1 + 216));
LABEL_8:
  *(_QWORD *)(a1 + 64) = off_250401D50;
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

_QWORD *AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  os_unfair_lock_s *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  void *v15;

  if (!*(_BYTE *)(a2 + 41))
    return (_QWORD *)a2;
  if (!*(_QWORD *)(a2 + 8))
  {
    v8 = a4;
    v10 = *(_QWORD *)(a2 + 24);
    a4[2] = *(_QWORD *)(a2 + 16);
    a4[3] = v10;
    *(_QWORD *)(a2 + 24) = 0;
    v9 = *(NSObject **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_9;
LABEL_8:
    dispatch_release(v9);
    goto LABEL_9;
  }
  v7 = a1 + 422;
  os_unfair_lock_lock(a1 + 422);
  v8 = VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::FragmentProgramVariant>,4u>::operator[]((uint64_t)a1, a3);
  if (*v8)
  {
    os_unfair_lock_unlock(v7);
    dispatch_group_wait((dispatch_group_t)*v8, 0xFFFFFFFFFFFFFFFFLL);
    v9 = *(NSObject **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = dispatch_group_create();
  *v8 = v13;
  dispatch_group_enter(v13);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(void **)(a2 + 24);
  v8[1] = *(_QWORD *)(a2 + 8);
  v8[2] = v14;

  v8[3] = objc_msgSend(v15, "copy");
  if (v8[1])
  {

    v8[4] = 0;
  }
  else
  {
    *((_BYTE *)v8 + 40) = 0;
  }
  dispatch_group_leave((dispatch_group_t)*v8);
  *(_QWORD *)(a2 + 8) = 0;
  os_unfair_lock_unlock(v7);
  v9 = *(NSObject **)a2;
  if (*(_QWORD *)a2)
    goto LABEL_8;
LABEL_9:
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  MEMORY[0x234927ECC](a2, 0x10A0C405D73F519);
  return v8;
}

void sub_232C3AAB4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::FragmentProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;

  v4 = *(unsigned int *)(a1 + 1360);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 1352);
    v7 = *(_QWORD *)(a2 + 280);
    v8 = v6;
    while (!AGX::Impl::FragmentProgramKey::operator==(a2, v8) || v7 != *(_QWORD *)(v8 + 280))
    {
      ++v5;
      v8 += 288;
      if (v4 == v5)
        goto LABEL_8;
    }
    v9 = (_QWORD *)(v6 + 48 * v5);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 1352);
LABEL_8:
    v10 = *(_QWORD **)(v6 + 1344);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 280);
      v12 = 1;
      while (1)
      {
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)v10) && v11 == v10[35])
        {
          v12 = 0;
          goto LABEL_29;
        }
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)(v10 + 36)) && v11 == v10[71])
          goto LABEL_29;
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)(v10 + 72)) && v11 == v10[107])
          break;
        if (AGX::Impl::FragmentProgramKey::operator==(a2, (uint64_t)(v10 + 108)) && v11 == v10[143])
        {
          v12 = 3;
          goto LABEL_29;
        }
        v10 = (_QWORD *)v10[168];
        if (!v10)
          goto LABEL_20;
      }
      v12 = 2;
LABEL_29:
      v9 = &v10[6 * v12];
    }
    else
    {
LABEL_20:
      if ((_DWORD)v4 == 4)
      {
        v6 = operator new();
        VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::FragmentProgramVariant>,4u>::Chunk::Chunk((_OWORD *)v6);
        LODWORD(v4) = 0;
        *(_QWORD *)(v6 + 1344) = *(_QWORD *)(a1 + 1352);
        *(_QWORD *)(a1 + 1352) = v6;
        *(_DWORD *)(a1 + 1360) = 0;
      }
      v13 = v6 + 288 * v4;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
      if (v13 != a2)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v13 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      *(_OWORD *)(v13 + 40) = *(_OWORD *)(a2 + 40);
      v14 = *(_OWORD *)(a2 + 56);
      v15 = *(_OWORD *)(a2 + 72);
      v16 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(v13 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(v13 + 88) = v16;
      *(_OWORD *)(v13 + 72) = v15;
      *(_OWORD *)(v13 + 56) = v14;
      v17 = *(_OWORD *)(a2 + 112);
      v18 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(v13 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(v13 + 112) = v17;
      *(_OWORD *)(v13 + 128) = v18;
      std::string::operator=((std::string *)(v13 + 152), (const std::string *)(a2 + 152));
      std::string::operator=((std::string *)(v13 + 176), (const std::string *)(a2 + 176));
      std::string::operator=((std::string *)(v13 + 200), (const std::string *)(a2 + 200));
      *(_BYTE *)(v13 + 224) = *(_BYTE *)(a2 + 224);
      if (v13 != a2)
      {
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v13 + 232), *(char **)(a2 + 232), *(char **)(a2 + 240), (uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 5);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v13 + 256), *(char **)(a2 + 256), *(char **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 5);
      }
      *(_QWORD *)(v6 + 288 * v4 + 280) = *(_QWORD *)(a2 + 280);
      v19 = *(_QWORD *)(a1 + 1352);
      v20 = *(_DWORD *)(a1 + 1360);
      *(_DWORD *)(a1 + 1360) = v20 + 1;
      v9 = (_QWORD *)(v19 + 48 * v20);
    }
  }
  return v9 + 144;
}

void sub_232C3AD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10B2C40D3941106);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::FragmentProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v2;

  v2 = AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)a1, 0, 0, 0);
  AGX::FragmentProgramKey::FragmentProgramKey(v2 + 288, 0, 0, 0);
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)(a1 + 36), 0, 0, 0);
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)(a1 + 54), 0, 0, 0);
  a1[73] = 0u;
  a1[72] = 0u;
  *(_OWORD *)((char *)a1 + 1178) = 0u;
  a1[75] = 0u;
  a1[76] = 0u;
  *(_OWORD *)((char *)a1 + 1226) = 0u;
  a1[78] = 0u;
  a1[79] = 0u;
  *(_OWORD *)((char *)a1 + 1274) = 0u;
  a1[81] = 0u;
  a1[82] = 0u;
  *(_OWORD *)((char *)a1 + 1322) = 0u;
  return a1;
}

void sub_232C3AE10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = v2;
  for (i = v3 - 136; ; i -= 288)
  {
    *(_QWORD *)(i - 152) = &off_250402A40;
    v7 = *(void **)(i + 104);
    if (v7)
    {
      *(_QWORD *)(i + 112) = v7;
      operator delete(v7);
    }
    v8 = *(void **)(i + 80);
    if (v8)
    {
      *(_QWORD *)(i + 88) = v8;
      operator delete(v8);
    }
    if (*(char *)(i + 71) < 0)
    {
      operator delete(*(void **)(i + 48));
      if (*(char *)(i + 47) < 0)
      {
LABEL_13:
        operator delete(*(void **)(i + 24));
        if ((*(char *)(i + 23) & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_14;
      }
    }
    else if (*(char *)(i + 47) < 0)
    {
      goto LABEL_13;
    }
    if ((*(char *)(i + 23) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_14:
    operator delete(*(void **)i);
LABEL_10:
    *(_QWORD *)(i - 152) = off_250401D50;
    v9 = *(void **)(i - 136);
    if (v9)
    {
      *(_QWORD *)(i - 128) = v9;
      operator delete(v9);
    }
    v6 = i - 152;
    if (v6 == v1)
      _Unwind_Resume(exception_object);
  }
}

BOOL AGX::Impl::FragmentProgramKey::operator==(uint64_t a1, uint64_t a2)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v44;
  BOOL v45;
  _BOOL4 v46;

  v4.i64[0] = *(_QWORD *)(a2 + 48);
  v4.i32[1] = *(_DWORD *)(a2 + 96);
  v4.i64[1] = *(_QWORD *)(a2 + 64);
  v5.i32[0] = *(_DWORD *)(a1 + 48);
  v5.i32[1] = *(_DWORD *)(a1 + 96);
  v5.i64[1] = *(_QWORD *)(a1 + 64);
  v6 = vorrq_s8(veorq_s8(v4, v5), veorq_s8(*(int8x16_t *)(a2 + 72), *(int8x16_t *)(a1 + 72)));
  *(int8x8_t *)v6.i8 = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = v6.i32[0] | *(_DWORD *)(a2 + 104) ^ *(_DWORD *)(a1 + 104) | v6.i32[1] | *(_DWORD *)(a2 + 100) ^ *(_DWORD *)(a1 + 100) | *(_DWORD *)(a2 + 40) ^ *(_DWORD *)(a1 + 40) | *(_DWORD *)(a2 + 88) ^ *(_DWORD *)(a1 + 88) | *(_DWORD *)(a2 + 92) ^ *(_DWORD *)(a1 + 92) | *(unsigned __int8 *)(a2 + 224) ^ *(unsigned __int8 *)(a1 + 224);
  v8 = *(_DWORD *)(a1 + 144);
  for (i = v8; i; i &= ~(1 << v10))
  {
    v10 = __clz(__rbit32(i));
    v7 |= (*(_DWORD *)(a2 + 112 + 4 * v10) ^ *(_DWORD *)(a1 + 112 + 4 * v10));
  }
  v11 = *(_DWORD *)(a2 + 144);
  v12 = *(unsigned __int8 *)(a1 + 223);
  if ((v12 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(a1 + 223);
  else
    v13 = *(_QWORD *)(a1 + 208);
  v14 = *(unsigned __int8 *)(a2 + 223);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 208);
  if (v13 != v14)
  {
LABEL_17:
    v18 = 1;
    goto LABEL_19;
  }
  v16 = (const void **)(a1 + 200);
  if (v15 >= 0)
    v17 = (unsigned __int8 *)(a2 + 200);
  else
    v17 = *(unsigned __int8 **)(a2 + 200);
  if ((v12 & 0x80) == 0)
  {
    if (!*(_BYTE *)(a1 + 223))
    {
LABEL_16:
      v18 = 0;
      goto LABEL_19;
    }
    while (*(unsigned __int8 *)v16 == *v17)
    {
      v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12)
        goto LABEL_16;
    }
    goto LABEL_17;
  }
  v18 = memcmp(*v16, v17, *(_QWORD *)(a1 + 208)) != 0;
LABEL_19:
  v20 = *(_QWORD *)(a1 + 232);
  v19 = *(_QWORD *)(a1 + 240);
  v22 = *(_QWORD *)(a1 + 256);
  v21 = *(_QWORD *)(a1 + 264);
  v23 = *(unsigned __int8 *)(a1 + 175);
  if ((v23 & 0x80u) == 0)
    v24 = *(unsigned __int8 *)(a1 + 175);
  else
    v24 = *(_QWORD *)(a1 + 160);
  v25 = *(unsigned __int8 *)(a2 + 175);
  v26 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(a2 + 160);
  if (v24 != v25)
    goto LABEL_53;
  v27 = (const void **)(a1 + 152);
  if (v26 >= 0)
    v28 = (unsigned __int8 *)(a2 + 152);
  else
    v28 = *(unsigned __int8 **)(a2 + 152);
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v27, v28, *(_QWORD *)(a1 + 160)))
    {
LABEL_53:
      v46 = 0;
      return (v7 | v18 | v11 ^ v8 | (v19 != v20) | (v21 != v22 || !v46)) == 0;
    }
  }
  else if (*(_BYTE *)(a1 + 175))
  {
    while (*(unsigned __int8 *)v27 == *v28)
    {
      v27 = (const void **)((char *)v27 + 1);
      ++v28;
      if (!--v23)
        goto LABEL_34;
    }
    goto LABEL_53;
  }
LABEL_34:
  v29 = *(unsigned __int8 *)(a1 + 199);
  if ((v29 & 0x80u) == 0)
    v30 = *(unsigned __int8 *)(a1 + 199);
  else
    v30 = *(_QWORD *)(a1 + 184);
  v31 = *(unsigned __int8 *)(a2 + 199);
  v32 = (char)v31;
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a2 + 184);
  if (v30 != v31)
    goto LABEL_53;
  v33 = (const void **)(a1 + 176);
  v36 = *(unsigned __int8 **)(a2 + 176);
  v35 = (unsigned __int8 *)(a2 + 176);
  v34 = v36;
  if (v32 >= 0)
    v37 = v35;
  else
    v37 = v34;
  if ((v29 & 0x80) != 0)
  {
    v46 = memcmp(*v33, v37, *(_QWORD *)(a1 + 184)) == 0;
  }
  else if (*(_BYTE *)(a1 + 199))
  {
    v38 = v29 - 1;
    do
    {
      v40 = *(unsigned __int8 *)v33;
      v33 = (const void **)((char *)v33 + 1);
      v39 = v40;
      v42 = *v37++;
      v41 = v42;
      v44 = v38-- != 0;
      v45 = v39 == v41;
      v46 = v39 == v41;
    }
    while (v45 && v44);
  }
  else
  {
    v46 = 1;
  }
  return (v7 | v18 | v11 ^ v8 | (v19 != v20) | (v21 != v22 || !v46)) == 0;
}

void AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  os_unfair_lock_s *lock;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1688);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1688));
    v13 = *(_QWORD *)(a1 + 1648);
    v14 = *(unsigned int *)(a1 + 1656);
    v15 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v13, *(_DWORD *)(a1 + 1656), (_QWORD *)a4);
    v16 = (_QWORD *)v15;
    if (v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if ((_DWORD)v14 == 4)
      {
        v13 = operator new();
        v14 = 0;
        *(_QWORD *)(v13 + 224) = *(_QWORD *)(a1 + 1648);
        *(_OWORD *)(v13 + 192) = 0u;
        *(_OWORD *)(v13 + 208) = 0u;
        *(_OWORD *)(v13 + 160) = 0u;
        *(_OWORD *)(v13 + 176) = 0u;
        *(_OWORD *)(v13 + 128) = 0u;
        *(_OWORD *)(v13 + 144) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_QWORD *)(a1 + 1648) = v13;
        *(_DWORD *)(a1 + 1656) = 0;
      }
      v18 = (_OWORD *)(v13 + 32 * v14);
      v19 = *(_OWORD *)(a4 + 16);
      *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      v20 = *(_QWORD *)(a1 + 1648);
      v21 = *(_DWORD *)(a1 + 1656);
      *(_DWORD *)(a1 + 1656) = v21 + 1;
      v16 = (_QWORD *)(v20 + 24 * v21 + 128);
      v17 = *(_QWORD *)(v20 + 24 * v21 + 136);
      if (a6)
        goto LABEL_4;
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3)
        dispatch_retain(a3);
      v22 = v16[2];
      if (v22)
        dispatch_release(v22);
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(_BYTE *)(a1 + 1944))
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD5B8]), "initWithDevice:reflectionData:functionType:options:", a5, a3, 2, a2 | 0x8000);
      v23 = (void *)objc_msgSend(v30, "arguments");
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v33 != v25)
              objc_enumerationMutation(v23);
            v27 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            if (!objc_msgSend(v27, "type")
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              v28 = (_QWORD *)objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              v29 = v28[2];
              v28[2] = 0;
              *(_QWORD *)(a1 + 8 * objc_msgSend(v27, "index") + 1696) = v29;

            }
          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v24);
      }

      *(_BYTE *)(a1 + 1944) = 1;
    }
    goto LABEL_26;
  }
}

void sub_232C3B460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C3B6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

AGX::Impl::FragmentProgramKey *__copy_helper_block_e8_80c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1, uint64_t a2)
{
  AGX::Impl::FragmentProgramKey *result;

  result = AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)(a1 + 80), (const AGX::Impl::FragmentProgramKey *)(a2 + 80));
  *(_QWORD *)(a1 + 80) = &off_250401D90;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  return result;
}

void __destroy_helper_block_e8_80c30_ZTSN3AGX18FragmentProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 80) = &off_250402A40;
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 312);
  if (v3)
  {
    *(_QWORD *)(a1 + 320) = v3;
    operator delete(v3);
  }
  if ((*(char *)(a1 + 303) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 279) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_11:
    operator delete(*(void **)(a1 + 256));
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 280));
  if (*(char *)(a1 + 279) < 0)
    goto LABEL_11;
LABEL_7:
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
    goto LABEL_8;
LABEL_12:
  operator delete(*(void **)(a1 + 232));
LABEL_8:
  *(_QWORD *)(a1 + 80) = off_250401D50;
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
}

void AGX::G9::FragmentProgramVariant::~FragmentProgramVariant(AGX::G9::FragmentProgramVariant *this)
{
  AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

uint64_t AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey<MTLMeshRenderPipelineDescriptor>(uint64_t a1, void *a2, NSObject *a3, void *a4, int a5, uint64_t a6, int a7)
{
  void *v14;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  char v20;

  v14 = (void *)objc_msgSend(a2, "meshLinkedFunctions");
  *(_OWORD *)v16 = *(_OWORD *)a6;
  v17 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a6 + 24);
  v19 = *(_QWORD *)(a6 + 40);
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  v20 = *(_BYTE *)(a6 + 48);
  AGX::MeshProgramKey::MeshProgramKey(a1, a3, 0, a5, (uint64_t)v16, v14, a4, a7);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    operator delete(v16[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v17) < 0)
    goto LABEL_5;
LABEL_3:
  AGX::MeshProgramKey::initCommon<MTLMeshRenderPipelineDescriptor>(a1, a2);
  *(_DWORD *)(a1 + 52) &= ~0x80u;
  return objc_msgSend(a2, "supportIndirectCommandBuffers");
}

void sub_232C3B908(_Unwind_Exception *a1)
{
  void **v1;

  AGX::MeshProgramKey::~MeshProgramKey(v1);
  _Unwind_Resume(a1);
}

void sub_232C3B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  _Unwind_Resume(a1);
}

unint64_t AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v4 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    v7 = (os_unfair_lock_s *)(a1 + 1400);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1400));
    v8 = *(_QWORD *)(a1 + 1360);
    v9 = *(unsigned int *)(a1 + 1368);
    v10 = (_QWORD *)VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v8, *(_DWORD *)(a1 + 1368), (_QWORD *)a3);
    if (!v10)
    {
      if ((_DWORD)v9 == 4)
      {
        v8 = operator new();
        v9 = 0;
        *(_QWORD *)(v8 + 224) = *(_QWORD *)(a1 + 1360);
        *(_OWORD *)(v8 + 192) = 0u;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 160) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_QWORD *)(a1 + 1360) = v8;
        *(_DWORD *)(a1 + 1368) = 0;
      }
      v11 = (_OWORD *)(v8 + 32 * v9);
      v12 = *(_OWORD *)(a3 + 16);
      *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v13 = *(_QWORD *)(a1 + 1360);
      v14 = *(_DWORD *)(a1 + 1368);
      *(_DWORD *)(a1 + 1368) = v14 + 1;
      v10 = (_QWORD *)(v13 + 24 * v14 + 128);
    }
    if ((v4 & ~v10[1]) != 0)
    {
      v15 = *v10 | v4;
      *v10 = v15;
    }
    else
    {
      v15 = 0;
    }
    os_unfair_lock_unlock(v7);
  }
  else
  {
    v15 = 0;
  }
  return v15 | a2 & 0xFFFFFFFFFFCCFFFCLL;
}

void sub_232C3BA68(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  double v14;
  double v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  std::string::size_type v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41[54];
  std::string __dst;
  uint64_t v43[54];
  _DWORD v44[8];

  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(__CFString **)(a3 + 48);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 112));
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_msgSend(v8, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v9)
      objc_msgSend(v9, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (v7)
  {
    v10 = 1;
    goto LABEL_24;
  }
  if (*(_QWORD *)(a2 + 264))
  {
    v11 = (_QWORD *)(a2 + 264);
    if (!*(_QWORD *)(a2 + 272))
      v11 = (_QWORD *)(a2 + 824);
    if (!*v11)
      goto LABEL_15;
  }
  else
  {
    v11 = (_QWORD *)(a2 + 824);
    if (!*(_QWORD *)(a2 + 824))
      goto LABEL_15;
  }
  if (v11[1])
    goto LABEL_22;
LABEL_15:
  if (!*(_QWORD *)(a2 + 504))
  {
    v12 = (_QWORD *)(a2 + 1064);
    if (!*(_QWORD *)(a2 + 1064))
      goto LABEL_66;
    goto LABEL_21;
  }
  v12 = (_QWORD *)(a2 + 504);
  if (!*(_QWORD *)(a2 + 512))
    v12 = (_QWORD *)(a2 + 1064);
  if (*v12)
  {
LABEL_21:
    if (!v12[1])
      goto LABEL_66;
LABEL_22:
    v10 = 0;
    v6 = CFSTR("Internal error during function compilation");
LABEL_23:
    v7 = 2;
    goto LABEL_24;
  }
LABEL_66:
  if (*(_BYTE *)(a1 + 113)
    && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible((_QWORD *)a2, 0) & 1) == 0)
  {
    v10 = 0;
    v6 = CFSTR("Mesh shader cannot be used with indirect command buffers");
    goto LABEL_23;
  }
  v7 = 0;
  v10 = 1;
LABEL_24:
  AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 114, *(void **)(a1 + 40), v7);
  if (v7)
  {
    v13 = 0;
    goto LABEL_59;
  }
  v40 = v10;
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v44, (_QWORD *)a2);
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v43, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)8, 0, *(_QWORD *)(a1 + 80) + 1408, *(_QWORD *)(a1 + 104), 0, 0, v14, v15, v16, 0);
  v13 = operator new();
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 808);
  v18 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v18)
    v19 = (const char *)v18;
  else
    v19 = "";
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_36;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
  p_dst = &__dst;
  if (v20)
LABEL_36:
    memmove(p_dst, v19, v24);
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  if (*(_BYTE *)(a2 + 1144))
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v41, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)8, 0, *(_QWORD *)(a1 + 80) + 1408, *(_QWORD *)(a1 + 104), 1, 0, v21, v22, v23, 0);
  else
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t)v41, (uint64_t)v43);
  v10 = v40;
  AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::MeshProgramVariant(v13, v17, (unsigned int **)a2, &__dst, (uint64_t)v43, v44, *(unsigned __int8 *)(a1 + 113), *(void **)(a3 + 24));
  *(_QWORD *)v13 = &off_250402600;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v41);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = 0x10000;
  if (!*(_BYTE *)(v13 + 379))
    v28 = 4096;
  if (v28 >= *(unsigned int *)(v13 + 320))
  {
    if (!*(_BYTE *)(a1 + 113) || *(_QWORD *)(v13 + 2344))
    {
      v29 = 0x410000000000;
      if (!*(_QWORD *)(v13 + 400))
        v29 = 0x10000000001;
      v30 = 0x1000000000000;
      if (!*(_BYTE *)(v13 + 3004))
        v30 = 1;
      v31 = v30 | v29;
      v32 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | v31, v32));
      v34 = v32 + 1;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35, v34));
      v7 = 0;
      goto LABEL_58;
    }
    v6 = CFSTR("Internal error during function compilation");
  }
  else
  {
    v6 = CFSTR("Mesh function exceeds available stack space");
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
  v13 = 0;
  v7 = 2;
LABEL_58:
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v43);
LABEL_59:
  v36 = *(_QWORD *)(a1 + 72);
  v37 = *(void **)(a3 + 32);
  v38 = *(unsigned __int8 *)(a1 + 146);
  *(_QWORD *)(v36 + 8) = v13;
  *(_QWORD *)(v36 + 16) = v7;

  *(_QWORD *)(v36 + 24) = -[__CFString copy](v6, "copy");
  if (*(_QWORD *)(v36 + 8))
  {

    *(_QWORD *)(v36 + 32) = v37;
  }
  else
  {
    if (v38)
      v39 = v10;
    else
      v39 = 0;
    *(_BYTE *)(v36 + 40) = v39;
  }
  dispatch_group_leave(*(dispatch_group_t *)v36);
}

void sub_232C3BF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  char a72;
  uint64_t v72;

  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&a12);
  if (a71 < 0)
    operator delete(__p);
  MEMORY[0x234927ECC](v72, 0x10F3C40174EF3E0);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&a72);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14MeshProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke(uint64_t a1)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[8];

  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  dispatch_object_t object[2];
  id v7[4];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(*(_QWORD *)(a1 + 48) + 32);
  *(_OWORD *)object = 0u;
  memset(v7, 0, 26);
  v3 = (_QWORD *)AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(_QWORD *)(a1 + 48), a1 + 64, (uint64_t)object);
  v4 = v3[1];
  v5 = *(_OWORD *)(a1 + 296);
  v8[0] = *(_OWORD *)(a1 + 280);
  v8[1] = v5;
  (*(void (**)(_QWORD, uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0])
    dispatch_release(object[0]);
  if (object[1])
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);

}

void sub_232C3C140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

AGX::MeshProgramKey *AGX::MeshProgramKey::MeshProgramKey(AGX::MeshProgramKey *this, const AGX::MeshProgramKey *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;

  *(_QWORD *)this = off_250401CC8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)this + 4) = v8;
    memcpy(v7, v5, v6);
    *((_QWORD *)this + 3) = v8;
  }
  *(_QWORD *)this = off_250401C80;
  v9 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v9;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)((char *)this + 72) = v10;
  }
  v11 = *((_DWORD *)a2 + 24);
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 24) = v11;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 13);
  v12 = (_BYTE *)*((_QWORD *)a2 + 14);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new(v12 - v13);
    *((_QWORD *)this + 13) = v15;
    *((_QWORD *)this + 14) = v15;
    v16 = &v15[32 * (v14 >> 5)];
    *((_QWORD *)this + 15) = v16;
    memcpy(v15, v13, v14);
    *((_QWORD *)this + 14) = v16;
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 16);
  v17 = (_BYTE *)*((_QWORD *)a2 + 17);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      abort();
    v20 = (char *)operator new(v17 - v18);
    *((_QWORD *)this + 16) = v20;
    *((_QWORD *)this + 17) = v20;
    v21 = &v20[32 * (v19 >> 5)];
    *((_QWORD *)this + 18) = v21;
    memcpy(v20, v18, v19);
    *((_QWORD *)this + 17) = v21;
  }
  *(_QWORD *)this = &off_2504029F8;
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v22 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v22;
  }
  v23 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v24 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)this = &off_250401D08;
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  return this;
}

void sub_232C3C360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;

  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  *(_QWORD *)v1 = v5;
  v8 = *(void **)(v1 + 128);
  if (v8)
  {
    *(_QWORD *)(v1 + 136) = v8;
    operator delete(v8);
  }
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 112) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = v4;
  v10 = *(void **)(v1 + 16);
  if (v10)
  {
    *(_QWORD *)(v1 + 24) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

AGX::MeshProgramKey *__copy_helper_block_e8_64c26_ZTSN3AGX14MeshProgramKeyE(uint64_t a1, uint64_t a2)
{
  return AGX::MeshProgramKey::MeshProgramKey((AGX::MeshProgramKey *)(a1 + 64), (const AGX::MeshProgramKey *)(a2 + 64));
}

void __destroy_helper_block_e8_64c26_ZTSN3AGX14MeshProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 64) = &off_2504029F8;
  if (*(char *)(a1 + 263) < 0)
  {
    operator delete(*(void **)(a1 + 240));
    if ((*(char *)(a1 + 239) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 216));
LABEL_3:
  *(_QWORD *)(a1 + 64) = off_250401C80;
  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 64) = off_250401CC8;
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

uint64_t AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  void *v15;

  if (!*(_BYTE *)(a2 + 41))
    return a2;
  if (!*(_QWORD *)(a2 + 8))
  {
    v8 = a4;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a4 + 24) = v10;
    *(_QWORD *)(a2 + 24) = 0;
    v9 = *(NSObject **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_9;
LABEL_8:
    dispatch_release(v9);
    goto LABEL_9;
  }
  v7 = a1 + 350;
  os_unfair_lock_lock(a1 + 350);
  v8 = VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::G9::MeshProgramVariant>,4u>::operator[]((uint64_t)a1, a3);
  if (*(_QWORD *)v8)
  {
    os_unfair_lock_unlock(v7);
    dispatch_group_wait(*(dispatch_group_t *)v8, 0xFFFFFFFFFFFFFFFFLL);
    v9 = *(NSObject **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = dispatch_group_create();
  *(_QWORD *)v8 = v13;
  dispatch_group_enter(v13);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(void **)(a2 + 24);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 16) = v14;

  *(_QWORD *)(v8 + 24) = objc_msgSend(v15, "copy");
  if (*(_QWORD *)(v8 + 8))
  {

    *(_QWORD *)(v8 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v8);
  *(_QWORD *)(a2 + 8) = 0;
  os_unfair_lock_unlock(v7);
  v9 = *(NSObject **)a2;
  if (*(_QWORD *)a2)
    goto LABEL_8;
LABEL_9:
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  MEMORY[0x234927ECC](a2, 0x10A0C405D73F519);
  return v8;
}

void sub_232C3C5FC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  int64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  __int128 v41;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  char *v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  int64_t v59;
  char *v60;
  char *v61;
  _BYTE *v62;
  _BYTE *v63;
  int64_t v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  _BYTE *v68;
  int64_t v69;
  char *v70;
  char *v71;
  _BYTE *v72;
  _BYTE *v73;
  int64_t v74;
  char *v75;
  char *v76;
  _BYTE *v77;
  _BYTE *v78;
  int64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 < 0)
      abort();
    v5 = ((unint64_t)(v4 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v18 = *(_BYTE **)(a2 + 24);
  v17 = *(_BYTE **)(a2 + 32);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      abort();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v20;
    v21 = &v20[4 * (v19 >> 2)];
    *(_QWORD *)(a1 + 40) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 32) = v21;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v23 = *(_BYTE **)(a2 + 48);
  v22 = *(_BYTE **)(a2 + 56);
  v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0)
      abort();
    v25 = (char *)operator new(v22 - v23);
    *(_QWORD *)(a1 + 48) = v25;
    *(_QWORD *)(a1 + 56) = v25;
    v26 = &v25[4 * (v24 >> 2)];
    *(_QWORD *)(a1 + 64) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a1 + 56) = v26;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v28 = *(_BYTE **)(a2 + 72);
  v27 = *(_BYTE **)(a2 + 80);
  v29 = v27 - v28;
  if (v27 != v28)
  {
    if (v29 < 0)
      abort();
    v30 = (char *)operator new(v27 - v28);
    *(_QWORD *)(a1 + 72) = v30;
    *(_QWORD *)(a1 + 80) = v30;
    v31 = &v30[4 * (v29 >> 2)];
    *(_QWORD *)(a1 + 88) = v31;
    memcpy(v30, v28, v29);
    *(_QWORD *)(a1 + 80) = v31;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v33 = *(_BYTE **)(a2 + 96);
  v32 = *(_BYTE **)(a2 + 104);
  v34 = v32 - v33;
  if (v32 != v33)
  {
    if (v34 < 0)
      abort();
    v35 = (char *)operator new(v32 - v33);
    *(_QWORD *)(a1 + 96) = v35;
    *(_QWORD *)(a1 + 104) = v35;
    v36 = &v35[4 * (v34 >> 2)];
    *(_QWORD *)(a1 + 112) = v36;
    memcpy(v35, v33, v34);
    *(_QWORD *)(a1 + 104) = v36;
  }
  v37 = *(_OWORD *)(a2 + 136);
  v38 = *(_OWORD *)(a2 + 152);
  v39 = *(_OWORD *)(a2 + 168);
  v40 = *(_BYTE *)(a2 + 184);
  v41 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 120) = v41;
  *(_BYTE *)(a1 + 184) = v40;
  *(_OWORD *)(a1 + 168) = v39;
  *(_OWORD *)(a1 + 152) = v38;
  *(_OWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v43 = *(_BYTE **)(a2 + 192);
  v42 = *(_BYTE **)(a2 + 200);
  v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0)
      abort();
    v45 = (char *)operator new(v42 - v43);
    *(_QWORD *)(a1 + 192) = v45;
    *(_QWORD *)(a1 + 200) = v45;
    v46 = &v45[4 * (v44 >> 2)];
    *(_QWORD *)(a1 + 208) = v46;
    memcpy(v45, v43, v44);
    *(_QWORD *)(a1 + 200) = v46;
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v48 = *(_BYTE **)(a2 + 216);
  v47 = *(_BYTE **)(a2 + 224);
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0)
      abort();
    v50 = (char *)operator new(v47 - v48);
    *(_QWORD *)(a1 + 216) = v50;
    *(_QWORD *)(a1 + 224) = v50;
    v51 = &v50[4 * (v49 >> 2)];
    *(_QWORD *)(a1 + 232) = v51;
    memcpy(v50, v48, v49);
    *(_QWORD *)(a1 + 224) = v51;
  }
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v53 = *(_BYTE **)(a2 + 240);
  v52 = *(_BYTE **)(a2 + 248);
  v54 = v52 - v53;
  if (v52 != v53)
  {
    if (v54 < 0)
      abort();
    v55 = (char *)operator new(v52 - v53);
    *(_QWORD *)(a1 + 240) = v55;
    *(_QWORD *)(a1 + 248) = v55;
    v56 = &v55[4 * (v54 >> 2)];
    *(_QWORD *)(a1 + 256) = v56;
    memcpy(v55, v53, v54);
    *(_QWORD *)(a1 + 248) = v56;
  }
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v58 = *(_BYTE **)(a2 + 264);
  v57 = *(_BYTE **)(a2 + 272);
  v59 = v57 - v58;
  if (v57 != v58)
  {
    if (v59 < 0)
      abort();
    v60 = (char *)operator new(v57 - v58);
    *(_QWORD *)(a1 + 264) = v60;
    *(_QWORD *)(a1 + 272) = v60;
    v61 = &v60[4 * (v59 >> 2)];
    *(_QWORD *)(a1 + 280) = v61;
    memcpy(v60, v58, v59);
    *(_QWORD *)(a1 + 272) = v61;
  }
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  v63 = *(_BYTE **)(a2 + 296);
  v62 = *(_BYTE **)(a2 + 304);
  v64 = v62 - v63;
  if (v62 != v63)
  {
    if (v64 < 0)
      abort();
    v65 = (char *)operator new(v62 - v63);
    *(_QWORD *)(a1 + 296) = v65;
    *(_QWORD *)(a1 + 304) = v65;
    v66 = &v65[2 * (v64 >> 1)];
    *(_QWORD *)(a1 + 312) = v66;
    memcpy(v65, v63, v64);
    *(_QWORD *)(a1 + 304) = v66;
  }
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v68 = *(_BYTE **)(a2 + 320);
  v67 = *(_BYTE **)(a2 + 328);
  v69 = v67 - v68;
  if (v67 != v68)
  {
    if (v69 < 0)
      abort();
    v70 = (char *)operator new(v67 - v68);
    *(_QWORD *)(a1 + 320) = v70;
    *(_QWORD *)(a1 + 328) = v70;
    v71 = &v70[2 * (v69 >> 1)];
    *(_QWORD *)(a1 + 336) = v71;
    memcpy(v70, v68, v69);
    *(_QWORD *)(a1 + 328) = v71;
  }
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v73 = *(_BYTE **)(a2 + 344);
  v72 = *(_BYTE **)(a2 + 352);
  v74 = v72 - v73;
  if (v72 != v73)
  {
    if (v74 < 0)
      abort();
    v75 = (char *)operator new(v72 - v73);
    *(_QWORD *)(a1 + 344) = v75;
    *(_QWORD *)(a1 + 352) = v75;
    v76 = &v75[2 * (v74 >> 1)];
    *(_QWORD *)(a1 + 360) = v76;
    memcpy(v75, v73, v74);
    *(_QWORD *)(a1 + 352) = v76;
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v78 = *(_BYTE **)(a2 + 368);
  v77 = *(_BYTE **)(a2 + 376);
  v79 = v77 - v78;
  if (v77 != v78)
  {
    if (v79 < 0)
      abort();
    v80 = (char *)operator new(v77 - v78);
    *(_QWORD *)(a1 + 368) = v80;
    *(_QWORD *)(a1 + 376) = v80;
    v81 = &v80[2 * (v79 >> 1)];
    *(_QWORD *)(a1 + 384) = v81;
    memcpy(v80, v78, v79);
    *(_QWORD *)(a1 + 376) = v81;
  }
  v82 = *(_OWORD *)(a2 + 392);
  v83 = *(_OWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 392) = v82;
  *(_OWORD *)(a1 + 408) = v83;
  return a1;
}

void sub_232C3CB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v18 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 352) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v10 + 320);
  if (v19)
  {
    *(_QWORD *)(v10 + 328) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v10 + 296);
  if (v20)
  {
    *(_QWORD *)(v10 + 304) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v10 + 264);
  if (v21)
  {
    *(_QWORD *)(v10 + 272) = v21;
    operator delete(v21);
    v22 = *v11;
    if (!*v11)
    {
LABEL_9:
      v23 = *v16;
      if (!*v16)
        goto LABEL_10;
      goto LABEL_16;
    }
  }
  else
  {
    v22 = *v11;
    if (!*v11)
      goto LABEL_9;
  }
  *(_QWORD *)(v10 + 248) = v22;
  operator delete(v22);
  v23 = *v16;
  if (!*v16)
  {
LABEL_10:
    v24 = *v15;
    if (!*v15)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v10 + 224) = v23;
  operator delete(v23);
  v24 = *v15;
  if (!*v15)
  {
LABEL_11:
    v25 = *v14;
    if (!*v14)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v10 + 200) = v24;
  operator delete(v24);
  v25 = *v14;
  if (!*v14)
  {
LABEL_12:
    v26 = *v13;
    if (!*v13)
    {
LABEL_20:
      v27 = *a9;
      if (*a9)
      {
        *(_QWORD *)(v10 + 56) = v27;
        operator delete(v27);
      }
      v28 = *a10;
      if (*a10)
      {
        *(_QWORD *)(v10 + 32) = v28;
        operator delete(v28);
        v29 = *(void **)v10;
        if (!*(_QWORD *)v10)
LABEL_24:
          _Unwind_Resume(exception_object);
      }
      else
      {
        v29 = *(void **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_24;
      }
      operator delete(v29);
      _Unwind_Resume(exception_object);
    }
LABEL_19:
    *(_QWORD *)(v10 + 80) = v26;
    operator delete(v26);
    goto LABEL_20;
  }
LABEL_18:
  *(_QWORD *)(v10 + 104) = v25;
  operator delete(v25);
  v26 = *v13;
  if (!*v13)
    goto LABEL_20;
  goto LABEL_19;
}

void sub_232C3CC84()
{
  JUMPOUT(0x232C3CC38);
}

void sub_232C3CC8C()
{
  JUMPOUT(0x232C3CC4CLL);
}

void sub_232C3CC94()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x232C3CC78);
  JUMPOUT(0x232C3CC60);
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, NSObject *a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned __int16 v21;
  int v22;
  int v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  char v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned __int8 v38;
  unint64_t CompileOptions;
  uint64_t v40;
  NSObject **v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  void *v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  void **v49;
  id *v50;
  NSObject *v51;
  NSObject *global_queue;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v59;
  char v62;
  _QWORD v63[2];
  void *v64;
  void *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  void *v71;
  char v72;
  unsigned int v73;
  void *__p;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  _QWORD v79[6];
  _QWORD v80[5];
  _BYTE v81[32];
  __int128 block;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  os_unfair_lock_s *v86;
  NSObject **v87;
  uint64_t (**v88)();
  void *v89;
  void *v90;
  void *v91;
  char v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  os_unfair_lock_s *v105;
  unint64_t v106;
  _QWORD *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  unsigned __int8 v111;
  char v112;
  __int128 v113;
  __int128 v114;
  char v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if (a8)
  {
    v16 = objc_msgSend(a8, "vendorPrivate");
    v79[0] = 0;
    v79[1] = v79;
    v79[2] = 0x3052000000;
    v79[3] = __Block_byref_object_copy_;
    v79[4] = __Block_byref_object_dispose_;
    v79[5] = 0;
    v59 = objc_msgSend(a2, "objectFunction");
    AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)v63, a9, (void *)objc_msgSend(a2, "objectLinkedFunctions"), a7, a10, a11);
    v17 = (void *)objc_msgSend(a2, "driverCompilerOptions");
    v18 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectLinkedFunctions"), "binaryFunctions"), "count");
    v19 = objc_msgSend(a2, "supportAddingObjectBinaryFunctions");
    if (objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v20 = 4;
    else
      v20 = 0;
    v67 = v67 & 0xFFFFFFFB | v20;
    v21 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue");
    v67 = v67 & 0xFC0003FF | (v21 << 10);
    if (objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v22 = 0x8000000;
    else
      v22 = 0;
    if (v18)
      v23 = 1;
    else
      v23 = v19;
    if (v23)
      v24 = 512;
    else
      v24 = 0;
    v67 = v22 | v67 & 0xF7FFFDFF | v24;
    v25 = (void *)objc_msgSend(a2, "objectBuffers");
    v26 = 0;
    v27 = 0;
    v28 = (os_unfair_lock_s *)(v16 + 8);
    do
    {
      v29 = objc_msgSend((id)objc_msgSend(v25, "_descriptorAtIndex:", v27), "mutability");
      v30 = 1 << v27;
      if (v29 != 1)
        v30 = 0;
      v26 |= v30;
      ++v27;
    }
    while (v27 != 31);
    v66 = v26;
    v31 = objc_msgSend(a2, "supportIndirectCommandBuffers");
    v73 = v73 & 0xFFFFFFFE | v31;
    v32 = objc_msgSend(a2, "maxTotalThreadsPerObjectThreadgroup");
    v33 = objc_msgSend(a2, "payloadMemoryLength");
    v69 = v32;
    v70 = v33;
    v34 = objc_msgSend(a2, "maxVertexAmplificationCount");
    v67 &= ~0x80u;
    v68 = v68 & 0xFFFFFF87 | (8 * (v34 & 0xF));
    objc_msgSend(a2, "supportIndirectCommandBuffers");
    if (*(_BYTE *)(*(_QWORD *)(a3 + 808) + 6360))
      v35 = 67109120;
    else
      v35 = 256;
    v36 = v35 | v67 & 0x8BFFFEFF;
    v67 = v36;
    v68 &= ~0x80u;
    v78 = a4 & 0xC00C0000;
    if ((a4 & 0x40000) != 0)
    {
      if (AGX::isTelemetryEnabled(void)::once != -1)
        dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
      v37 = 1;
      v36 = v67;
    }
    else
    {
      v37 = 0;
    }
    v67 = v37 | (a4 >> 21) & 8 | v36 & 0xFFFFFFF4;
    ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&block, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v116 = block;
    v117 = v83;
    CompileOptions = AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)v28, a4 | 3, (uint64_t)&v116);
    v62 = 0;
    v40 = AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(v28, (uint64_t)v63, &v62, CompileOptions, a5 != 0);
    v41 = (NSObject **)v40;
    if (v62)
    {
      v56 = v66;
      HIDWORD(v53) = v73;
      v42 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
      v43 = (void *)objc_msgSend(a2, "pipelineLibrary");
      if (objc_msgSend(v43, "pipelineCache") && (objc_msgSend(v43, "disableRunTimeCompilation") & 1) != 0)
        v44 = 1;
      else
        v44 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
      LODWORD(v53) = v44;
      if (*(_DWORD *)*MEMORY[0x24BE516B0])
        IOGPUDeviceTraceEvent();
      v45 = (void *)objc_opt_new();
      objc_msgSend(v45, "setSync:", a12 ^ 1u);
      objc_msgSend(v45, "setFunction:", v59);
      objc_msgSend(v45, "setFrameworkData:", a9);
      objc_msgSend(v45, "setPipelineCache:", v42);
      objc_msgSend(v45, "setDestinationBinaryArchive:", a5);
      objc_msgSend(v45, "setArchiverId:", a6);
      objc_msgSend(v45, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
      objc_msgSend(v45, "setPipelineOptions:", a4 | 3);
      if ((a4 & 0x330003) == 0)
        objc_msgSend(v45, "setPipelineOptions:", objc_msgSend(v45, "pipelineOptions") | 0x8000);
      v46 = objc_msgSend(a2, "newPipelineScript", v53);
      if (v46)
      {
        objc_msgSend(v45, "setAirScript:", v46);
        dispatch_release(v46);
      }
      objc_msgSend(v45, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
      v47 = (void *)objc_msgSend(a2, "objectLinkedFunctions");
      objc_msgSend(v45, "setVisibleFunctions:", objc_msgSend(v47, "functions"));
      objc_msgSend(v45, "setVisibleFunctionGroups:", objc_msgSend(v47, "groups"));
      objc_msgSend(v45, "setPrivateVisibleFunctions:", objc_msgSend(v47, "privateFunctions"));
      v100 = MEMORY[0x24BDAC760];
      v113 = v116;
      v101 = 3221225472;
      v102 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke;
      v103 = &unk_250400DA8;
      v107 = v79;
      *(_QWORD *)&v108 = a1;
      v104 = v59;
      v111 = a12;
      v112 = v55 & 1;
      *((_QWORD *)&v108 + 1) = v41;
      *(_QWORD *)&v109 = v28;
      *((_QWORD *)&v109 + 1) = CompileOptions;
      v114 = v117;
      v105 = (os_unfair_lock_s *)a3;
      v106 = (unint64_t)a2;
      v48 = MEMORY[0x24BDAC760];
      v110 = v56;
      v115 = v54;
      v49 = *a1;
      v80[0] = MEMORY[0x24BDAC760];
      v80[1] = 3221225472;
      v80[2] = ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16ObjectProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
      v80[3] = &unk_250400D80;
      v80[4] = &v100;
      *(_QWORD *)&block = MEMORY[0x24BDAC760];
      *((_QWORD *)&block + 1) = 3221225472;
      *(_QWORD *)&v83 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((_QWORD *)&v83 + 1) = &unk_2504023B8;
      v84 = v80;
      AGX::Compiler::compileProgram<AGX::ObjectProgramKey,AGCDeserializedReply>(v49, (uint64_t)v63, v45, (uint64_t)&block);

    }
    else
    {
      v48 = MEMORY[0x24BDAC760];
      if ((CompileOptions & 0x330003) != 0)
      {
        v50 = *a1;
        v100 = MEMORY[0x24BDAC760];
        v101 = 3221225472;
        v102 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2;
        v103 = &unk_250400D20;
        v108 = v116;
        v109 = v117;
        v104 = a3;
        v105 = v28;
        v106 = CompileOptions;
        v107 = (_QWORD *)v40;
        objc_msgSend(*v50, "reflectionWithFunction:options:sync:completionHandler:", v59, CompileOptions & 0x330003, a12 ^ 1u, &v100);
      }
    }
    *(_QWORD *)&block = v48;
    *((_QWORD *)&block + 1) = 3321888768;
    *(_QWORD *)&v83 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3;
    *((_QWORD *)&v83 + 1) = &unk_250400DD0;
    v86 = v28;
    v87 = v41;
    AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey((uint64_t)&v88, (uint64_t)v63);
    v88 = (uint64_t (**)())&off_250401C38;
    v97 = v78;
    v98 = v116;
    v99 = v117;
    v84 = (_QWORD *)a13;
    v85 = v79;
    v51 = *v41;
    if (a12)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_group_notify(v51, global_queue, &block);
    }
    else
    {
      dispatch_group_wait(v51, 0xFFFFFFFFFFFFFFFFLL);
      ((void (*)(__int128 *))v83)(&block);
    }
    v88 = off_250401BB0;
    if (v95)
    {
      v96 = v95;
      operator delete(v95);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    if (v92 < 0)
      operator delete(v91);
    v88 = off_250401BF8;
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    v63[0] = off_250401BB0;
    if (v76)
    {
      v77 = v76;
      operator delete(v76);
    }
    if (__p)
    {
      v75 = __p;
      operator delete(__p);
    }
    if (v72 < 0)
      operator delete(v71);
    v63[0] = off_250401BF8;
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
    _Block_object_dispose(v79, 8);
  }
  else
  {
    if ((v38 & 1) == 0
    {
      AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::meshNeedsPassThroughObjectShader();
    }
    memset(v81, 0, sizeof(v81));
    (*(void (**)(uint64_t, _QWORD, _BYTE *, _QWORD, const __CFString *))(a13 + 16))(a13, 0, v81, 0, &stru_2504033A8);
  }
}

void sub_232C3D5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232C3D5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  AGX::ObjectProgramKey *v40;

  AGX::ObjectProgramKey::~ObjectProgramKey(v40);
  AGX::ObjectProgramKey::~ObjectProgramKey((AGX::ObjectProgramKey *)&a20);
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

unint64_t AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v4 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    v7 = (os_unfair_lock_s *)(a1 + 1176);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1176));
    v8 = *(_QWORD *)(a1 + 1136);
    v9 = *(unsigned int *)(a1 + 1144);
    v10 = (_QWORD *)VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v8, *(_DWORD *)(a1 + 1144), (_QWORD *)a3);
    if (!v10)
    {
      if ((_DWORD)v9 == 4)
      {
        v8 = operator new();
        v9 = 0;
        *(_QWORD *)(v8 + 224) = *(_QWORD *)(a1 + 1136);
        *(_OWORD *)(v8 + 192) = 0u;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 160) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 128) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_QWORD *)(a1 + 1136) = v8;
        *(_DWORD *)(a1 + 1144) = 0;
      }
      v11 = (_OWORD *)(v8 + 32 * v9);
      v12 = *(_OWORD *)(a3 + 16);
      *v11 = *(_OWORD *)a3;
      v11[1] = v12;
      v13 = *(_QWORD *)(a1 + 1136);
      v14 = *(_DWORD *)(a1 + 1144);
      *(_DWORD *)(a1 + 1144) = v14 + 1;
      v10 = (_QWORD *)(v13 + 24 * v14 + 128);
    }
    if ((v4 & ~v10[1]) != 0)
    {
      v15 = *v10 | v4;
      *v10 = v15;
    }
    else
    {
      v15 = 0;
    }
    os_unfair_lock_unlock(v7);
  }
  else
  {
    v15 = 0;
  }
  return v15 | a2 & 0xFFFFFFFFFFCCFFFCLL;
}

void sub_232C3D75C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, _BYTE *a3, int a4, int a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;

  *a3 = 0;
  if ((a4 & 4) == 0 && !a5)
  {
    v9 = a1 + 294;
    os_unfair_lock_lock(a1 + 294);
    v10 = VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::ObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
    if (*(_QWORD *)v10)
    {
      if (!*(_BYTE *)(v10 + 40))
      {
        if ((*(_QWORD *)&a4 & 0x330003) != 0)
          dispatch_group_enter(*(dispatch_group_t *)v10);
        goto LABEL_11;
      }
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;

      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 0;
      v12 = *(NSObject **)v10;
    }
    else
    {
      v12 = dispatch_group_create();
      *(_QWORD *)v10 = v12;
    }
    dispatch_group_enter(v12);
    *a3 = 1;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return v10;
  }
  v10 = operator new();
  *(_WORD *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 41) = 1;
  v13 = dispatch_group_create();
  *(_QWORD *)v10 = v13;
  dispatch_group_enter(v13);
  *a3 = 1;
  return v10;
}

void sub_232C3D8A0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  double v18;
  double v19;
  int8x16_t v20;
  std::string::size_type v21;
  std::string *p_dst;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38[54];
  std::string __dst;

  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(__CFString **)(a3 + 48);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 104));
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_msgSend(v8, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v9)
      objc_msgSend(v9, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (v7)
  {
    v10 = 1;
    goto LABEL_24;
  }
  if (a2[33])
  {
    v11 = a2 + 33;
    if (!a2[34])
      v11 = a2 + 103;
    if (!*v11)
      goto LABEL_15;
  }
  else
  {
    v11 = a2 + 103;
    if (!a2[103])
      goto LABEL_15;
  }
  if (v11[1])
    goto LABEL_22;
LABEL_15:
  if (!a2[63])
  {
    v12 = a2 + 133;
    if (!a2[133])
      goto LABEL_62;
    goto LABEL_21;
  }
  v12 = a2 + 63;
  if (!a2[64])
    v12 = a2 + 133;
  if (*v12)
  {
LABEL_21:
    if (!v12[1])
      goto LABEL_62;
LABEL_22:
    v10 = 0;
    v6 = CFSTR("Internal error during function compilation");
LABEL_23:
    v7 = 2;
    goto LABEL_24;
  }
LABEL_62:
  if (*(_BYTE *)(a1 + 105)
    && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
  {
    v10 = 0;
    v6 = CFSTR("Object shader cannot be used with indirect command buffers");
    goto LABEL_23;
  }
  v7 = 0;
  v10 = 1;
LABEL_24:
  AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 106, *(void **)(a1 + 40), 8, v7);
  if (v7)
  {
    v13 = 0;
    goto LABEL_55;
  }
  v37 = v10;
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  v13 = operator new();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 808);
  v15 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v15)
    v16 = (const char *)v15;
  else
    v16 = "";
  v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v21 = v17;
  if (v17 >= 0x17)
  {
    v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v23 = v17 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_36;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
  p_dst = &__dst;
  if (v17)
LABEL_36:
    memmove(p_dst, v16, v21);
  p_dst->__r_.__value_.__s.__data_[v21] = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v38, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)7, 0, *(_QWORD *)(a1 + 80) + 1184, *(_QWORD *)(a1 + 96), 0, 0, v18, v19, v20, 0);
  AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ObjectProgramVariant(v13, v14, (unsigned int **)a2, &__dst, (uint64_t)v38, *(unsigned __int8 *)(a1 + 105), 0, *(void **)(a3 + 24));
  v10 = v37;
  *(_QWORD *)v13 = &off_2504025E0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v38);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v25 = 0x10000;
  if (!*(_BYTE *)(v13 + 379))
    v25 = 4096;
  if (v25 < *(unsigned int *)(v13 + 320))
  {
    v6 = CFSTR("Object function exceeds available stack space");
LABEL_43:
    (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
    v13 = 0;
    v7 = 2;
    goto LABEL_55;
  }
  if (*(_BYTE *)(a1 + 105) && !*(_QWORD *)(v13 + 2344))
  {
    v6 = CFSTR("Internal error during function compilation");
    goto LABEL_43;
  }
  v26 = 0x408000000000;
  if (!*(_QWORD *)(v13 + 400))
    v26 = 0x8000000001;
  v27 = 0x1000000000000;
  if (!*(_BYTE *)(v13 + 2996))
    v27 = 1;
  v28 = v27 | v26;
  v29 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 | v28, v29));
  v31 = v29 + 1;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32, v31));
  v7 = 0;
LABEL_55:
  v33 = *(_QWORD *)(a1 + 72);
  v34 = *(void **)(a3 + 32);
  v35 = *(unsigned __int8 *)(a1 + 138);
  *(_QWORD *)(v33 + 8) = v13;
  *(_QWORD *)(v33 + 16) = v7;

  *(_QWORD *)(v33 + 24) = -[__CFString copy](v6, "copy");
  if (*(_QWORD *)(v33 + 8))
  {

    *(_QWORD *)(v33 + 32) = v34;
  }
  else
  {
    if (v35)
      v36 = v10;
    else
      v36 = 0;
    *(_BYTE *)(v33 + 40) = v36;
  }
  dispatch_group_leave(*(dispatch_group_t *)v33);
}

void sub_232C3DD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  MEMORY[0x234927ECC](v3, 0x10F3C400BF709EDLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16ObjectProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke(uint64_t a1)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[8];

  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void AGX::Compiler::compileProgram<AGX::ObjectProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  char **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[6];
  _QWORD v21[5];
  _QWORD v22[6];
  dispatch_object_t object;
  unsigned int *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  _OWORD v31[2];
  unsigned __int8 md[16];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(_QWORD *)a2 + 16))(a2, &v27, &v26);
  v8 = dispatch_data_create(v27, v26, 0, 0);
  objc_msgSend(a3, "setDriverKeyData:", v8);
  if (objc_msgSend(a3, "airScript"))
  {
    v24 = 0;
    v25 = 0;
    object = dispatch_data_create_map((dispatch_data_t)objc_msgSend(a3, "airScript"), (const void **)&v24, &v25);
    v9 = v24;
    v10 = *v24;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v31[0] = *(_OWORD *)md;
    v31[1] = v33;
    objc_msgSend(a3, "setVendorPluginFunctionId:", v31);
  }
  v14 = MEMORY[0x24BDAC760];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v22[3] = &unk_250402408;
  v22[4] = a3;
  v22[5] = a4;
  if (objc_msgSend(a3, "function"))
  {
    v15 = mach_absolute_time();
    v16 = *a1;
    v20[0] = v14;
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v20[3] = &unk_250402458;
    v20[4] = v22;
    v20[5] = v15;
    objc_msgSend(v16, "compileFunctionRequest:completionHandler:", a3, v20);
  }
  else
  {
    if (objc_msgSend(a3, "frameworkData") || objc_msgSend(a3, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    v21[0] = v14;
    v21[1] = 3221225472;
    v21[2] = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v21[3] = &unk_250402430;
    v21[4] = v22;
    v17 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    v18 = *a1;
    v19 = objc_msgSend(a3, "driverKeyData");
    if (v17)
      objc_msgSend(v18, "compileRequest:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
    else
      objc_msgSend(v18, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
  }
  dispatch_release(v8);
}

void sub_232C3E0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
  dispatch_release(object);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), 7, a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI31MTLMeshRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  dispatch_object_t object[2];
  id v7[4];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)object = 0u;
  memset(v7, 0, 26);
  v2 = (_QWORD *)AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 48), *(_QWORD *)(a1 + 56), a1 + 64, (uint64_t)object);
  v3 = v2[1];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 240);
  v8[0] = *(_OWORD *)(a1 + 224);
  v8[1] = v5;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD))(v4 + 16))(v4, v3, v8, v2[2], v2[3]);

  if (object[0])
    dispatch_release(object[0]);
  if (object[1])
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);

}

void sub_232C3E1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;

  *(_QWORD *)a1 = off_250401BF8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 32) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 24) = v8;
  }
  *(_QWORD *)a1 = off_250401BB0;
  v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v10;
  }
  v11 = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v13 = *(_BYTE **)(a2 + 104);
  v12 = *(_BYTE **)(a2 + 112);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = v15;
    v16 = &v15[32 * (v14 >> 5)];
    *(_QWORD *)(a1 + 120) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 112) = v16;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v18 = *(_BYTE **)(a2 + 128);
  v17 = *(_BYTE **)(a2 + 136);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      abort();
    v20 = (char *)operator new(v17 - v18);
    *(_QWORD *)(a1 + 128) = v20;
    *(_QWORD *)(a1 + 136) = v20;
    v21 = &v20[32 * (v19 >> 5)];
    *(_QWORD *)(a1 + 144) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 136) = v21;
  }
  return a1;
}

void sub_232C3E370(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;

  *v1 = v2;
  v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_64c28_ZTSN3AGX16ObjectProgramKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey(a1 + 64, a2 + 64);
  *(_QWORD *)(a1 + 64) = &off_250401C38;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return result;
}

void __destroy_helper_block_e8_64c28_ZTSN3AGX16ObjectProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 64) = off_250401BB0;
  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 176) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  *(_QWORD *)(a1 + 64) = off_250401BF8;
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

uint64_t AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  void *v15;

  if (!*(_BYTE *)(a2 + 41))
    return a2;
  if (!*(_QWORD *)(a2 + 8))
  {
    v8 = a4;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a4 + 24) = v10;
    *(_QWORD *)(a2 + 24) = 0;
    v9 = *(NSObject **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_9;
LABEL_8:
    dispatch_release(v9);
    goto LABEL_9;
  }
  v7 = a1 + 294;
  os_unfair_lock_lock(a1 + 294);
  v8 = VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::ObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a3);
  if (*(_QWORD *)v8)
  {
    os_unfair_lock_unlock(v7);
    dispatch_group_wait(*(dispatch_group_t *)v8, 0xFFFFFFFFFFFFFFFFLL);
    v9 = *(NSObject **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = dispatch_group_create();
  *(_QWORD *)v8 = v13;
  dispatch_group_enter(v13);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(void **)(a2 + 24);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 16) = v14;

  *(_QWORD *)(v8 + 24) = objc_msgSend(v15, "copy");
  if (*(_QWORD *)(v8 + 8))
  {

    *(_QWORD *)(v8 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v8);
  *(_QWORD *)(a2 + 8) = 0;
  os_unfair_lock_unlock(v7);
  v9 = *(NSObject **)a2;
  if (*(_QWORD *)a2)
    goto LABEL_8;
LABEL_9:
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  MEMORY[0x234927ECC](a2, 0x10A0C405D73F519);
  return v8;
}

void sub_232C3E5D4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::ObjectProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 v9;
  size_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  const void *v59;
  uint64_t v60;
  int v61;
  const void *v62;
  uint64_t v63;
  int v64;
  const void *v65;
  uint64_t v66;
  int v67;
  const void *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  void *__s1;

  v2 = a2;
  v3 = a1;
  v4 = *(unsigned int *)(a1 + 848);
  v84 = v4;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 840);
    v7 = (unsigned __int8 *)(a2 + 72);
    __s1 = *(void **)(a2 + 72);
    v8 = *(unsigned __int8 *)(a2 + 95);
    v9 = v8;
    v10 = *(_QWORD *)(a2 + 80);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(a2 + 95);
    else
      v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_DWORD *)(a2 + 56);
    v81 = *(_DWORD *)(a2 + 96);
    v82 = *(_DWORD *)(a2 + 52);
    v78 = *(_QWORD *)(a2 + 104);
    v79 = *(_QWORD *)(a2 + 112);
    v76 = *(_QWORD *)(a2 + 128);
    v77 = *(_QWORD *)(a2 + 136);
    v83 = *(_DWORD *)(a2 + 60);
    v80 = *(_DWORD *)(a2 + 64);
    v75 = *(_QWORD *)(a2 + 152);
    while (1)
    {
      v14 = v6 + 160 * v5;
      v15 = *(unsigned __int8 *)(v14 + 95);
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(v14 + 80);
      if (v11 == v15)
      {
        if (v16 >= 0)
          v17 = (unsigned __int8 *)(v14 + 72);
        else
          v17 = *(unsigned __int8 **)(v14 + 72);
        if (((char)v8 & 0x80000000) == 0)
        {
          if ((_BYTE)v8)
          {
            v18 = v7;
            v19 = v8;
            while (*v18 == *v17)
            {
              ++v18;
              ++v17;
              if (!--v19)
                goto LABEL_19;
            }
            goto LABEL_7;
          }
LABEL_19:
          if (v12 == *(_DWORD *)(v14 + 56)
            && v82 == *(_DWORD *)(v14 + 52)
            && v81 == *(_DWORD *)(v14 + 96)
            && v79 == v78
            && v77 == v76
            && v83 == *(_DWORD *)(v14 + 60)
            && v80 == *(_DWORD *)(v14 + 64)
            && v75 == *(_QWORD *)(v6 + 160 * v5 + 152))
          {
            v20 = v6 + 48 * v5;
            return v20 + 640;
          }
          goto LABEL_7;
        }
        v13 = memcmp(__s1, v17, v10);
        v4 = v84;
        if (!v13)
          goto LABEL_19;
      }
LABEL_7:
      if (++v5 == v4)
      {
        v2 = a2;
        v3 = a1;
        v22 = v81;
        v21 = v82;
        v24 = v78;
        v23 = v79;
        v26 = v76;
        v25 = v77;
        goto LABEL_30;
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 840);
  v9 = *(_BYTE *)(a2 + 95);
  v10 = *(_QWORD *)(a2 + 80);
  __s1 = *(void **)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 52);
  v12 = *(_DWORD *)(a2 + 56);
  v22 = *(_DWORD *)(a2 + 96);
  v24 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a2 + 128);
  v25 = *(_QWORD *)(a2 + 136);
  v83 = *(_DWORD *)(a2 + 60);
  v80 = *(_DWORD *)(a2 + 64);
  v75 = *(_QWORD *)(a2 + 152);
LABEL_30:
  if ((v9 & 0x80u) == 0)
    v27 = v9;
  else
    v27 = v10;
  v28 = v23 == v24;
  v29 = v25 == v26;
  if ((v9 & 0x80) != 0)
  {
    if (v28 && v29)
    {
      v52 = *(_QWORD *)(v6 + 832);
      if (v52)
      {
        while (1)
        {
          v57 = *(unsigned __int8 *)(v52 + 95);
          v58 = (char)v57;
          if ((v57 & 0x80u) != 0)
            v57 = *(_QWORD *)(v52 + 80);
          if (v27 == v57)
          {
            v59 = v58 >= 0 ? (const void *)(v52 + 72) : *(const void **)(v52 + 72);
            if (!memcmp(__s1, v59, v10)
              && v12 == *(_DWORD *)(v52 + 56)
              && v21 == *(_DWORD *)(v52 + 52)
              && v22 == *(_DWORD *)(v52 + 96)
              && v83 == *(_DWORD *)(v52 + 60)
              && v80 == *(_DWORD *)(v52 + 64)
              && v75 == *(_QWORD *)(v52 + 152))
            {
              break;
            }
          }
          v60 = *(unsigned __int8 *)(v52 + 255);
          v61 = (char)v60;
          if ((v60 & 0x80u) != 0)
            v60 = *(_QWORD *)(v52 + 240);
          if (v27 == v60)
          {
            v62 = v61 >= 0 ? (const void *)(v52 + 232) : *(const void **)(v52 + 232);
            if (!memcmp(__s1, v62, v10)
              && v12 == *(_DWORD *)(v52 + 216)
              && v21 == *(_DWORD *)(v52 + 212)
              && v22 == *(_DWORD *)(v52 + 256)
              && v83 == *(_DWORD *)(v52 + 220)
              && v80 == *(_DWORD *)(v52 + 224)
              && v75 == *(_QWORD *)(v52 + 312))
            {
              v69 = 1;
              goto LABEL_171;
            }
          }
          v63 = *(unsigned __int8 *)(v52 + 415);
          v64 = (char)v63;
          if ((v63 & 0x80u) != 0)
            v63 = *(_QWORD *)(v52 + 400);
          if (v27 == v63)
          {
            v65 = v64 >= 0 ? (const void *)(v52 + 392) : *(const void **)(v52 + 392);
            if (!memcmp(__s1, v65, v10)
              && v12 == *(_DWORD *)(v52 + 376)
              && v21 == *(_DWORD *)(v52 + 372)
              && v22 == *(_DWORD *)(v52 + 416)
              && v83 == *(_DWORD *)(v52 + 380)
              && v80 == *(_DWORD *)(v52 + 384)
              && v75 == *(_QWORD *)(v52 + 472))
            {
              v69 = 2;
              goto LABEL_171;
            }
          }
          v66 = *(unsigned __int8 *)(v52 + 575);
          v67 = (char)v66;
          if ((v66 & 0x80u) != 0)
            v66 = *(_QWORD *)(v52 + 560);
          if (v27 == v66)
          {
            v68 = v67 >= 0 ? (const void *)(v52 + 552) : *(const void **)(v52 + 552);
            if (!memcmp(__s1, v68, v10)
              && v12 == *(_DWORD *)(v52 + 536)
              && v21 == *(_DWORD *)(v52 + 532)
              && v22 == *(_DWORD *)(v52 + 576)
              && v83 == *(_DWORD *)(v52 + 540)
              && v80 == *(_DWORD *)(v52 + 544)
              && v75 == *(_QWORD *)(v52 + 632))
            {
              v69 = 3;
LABEL_171:
              v20 = v52 + 48 * v69;
              return v20 + 640;
            }
          }
          v52 = *(_QWORD *)(v52 + 832);
          if (!v52)
            goto LABEL_104;
        }
        v69 = 0;
        goto LABEL_171;
      }
    }
LABEL_104:
    v53 = v84;
    if ((_DWORD)v84 == 4)
    {
      v6 = operator new();
      VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::ObjectProgramVariant>,4u>::Chunk::Chunk((_OWORD *)v6);
      v53 = 0;
      *(_QWORD *)(v6 + 832) = *(_QWORD *)(v3 + 840);
      *(_QWORD *)(v3 + 840) = v6;
      *(_DWORD *)(v3 + 848) = 0;
    }
    v54 = v53;
    v55 = v6 + 160 * v53;
    *(_DWORD *)(v55 + 8) = *(_DWORD *)(v2 + 8);
    if (v55 == v2)
    {
      std::string::operator=((std::string *)(v2 + 72), (const std::string *)(v2 + 72));
    }
    else
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v55 + 16), *(char **)(v2 + 16), *(char **)(v2 + 24), (uint64_t)(*(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16)) >> 2);
      v56 = *(_OWORD *)(v2 + 40);
      *(_OWORD *)(v55 + 56) = *(_OWORD *)(v2 + 56);
      *(_OWORD *)(v55 + 40) = v56;
      std::string::operator=((std::string *)(v55 + 72), (const std::string *)(v2 + 72));
      *(_DWORD *)(v55 + 96) = *(_DWORD *)(v2 + 96);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v55 + 104), *(char **)(v2 + 104), *(char **)(v2 + 112), (uint64_t)(*(_QWORD *)(v2 + 112) - *(_QWORD *)(v2 + 104)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v55 + 128), *(char **)(v2 + 128), *(char **)(v2 + 136), (uint64_t)(*(_QWORD *)(v2 + 136) - *(_QWORD *)(v2 + 128)) >> 5);
    }
    *(_QWORD *)(v6 + 160 * v54 + 152) = *(_QWORD *)(v2 + 152);
    v70 = *(_QWORD *)(v3 + 840);
    v71 = *(_DWORD *)(v3 + 848);
    *(_DWORD *)(v3 + 848) = v71 + 1;
    v20 = v70 + 48 * v71;
    return v20 + 640;
  }
  v30 = *(_QWORD *)(v6 + 832);
  if (!v30)
    goto LABEL_104;
  v31 = 1;
  while (1)
  {
    v32 = *(unsigned __int8 *)(v30 + 95);
    v33 = (char)v32;
    if ((v32 & 0x80u) != 0)
      v32 = *(_QWORD *)(v30 + 80);
    if (v27 == v32)
    {
      if (v9)
      {
        if (v33 >= 0)
          v34 = (unsigned __int8 *)(v30 + 72);
        else
          v34 = *(unsigned __int8 **)(v30 + 72);
        v35 = (unsigned __int8 *)(v2 + 72);
        v36 = v9;
        while (*v35 == *v34)
        {
          ++v35;
          ++v34;
          if (!--v36)
            goto LABEL_47;
        }
      }
      else
      {
LABEL_47:
        if (v12 == *(_DWORD *)(v30 + 56)
          && v21 == *(_DWORD *)(v30 + 52)
          && v29
          && v28
          && v22 == *(_DWORD *)(v30 + 96)
          && v83 == *(_DWORD *)(v30 + 60)
          && v80 == *(_DWORD *)(v30 + 64)
          && v75 == *(_QWORD *)(v30 + 152))
        {
          v31 = 0;
          goto LABEL_167;
        }
      }
    }
    v37 = *(unsigned __int8 *)(v30 + 255);
    v38 = (char)v37;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(v30 + 240);
    if (v27 == v37)
    {
      if (v9)
      {
        if (v38 >= 0)
          v39 = (unsigned __int8 *)(v30 + 232);
        else
          v39 = *(unsigned __int8 **)(v30 + 232);
        v40 = (unsigned __int8 *)(v2 + 72);
        v41 = v9;
        while (*v40 == *v39)
        {
          ++v40;
          ++v39;
          if (!--v41)
            goto LABEL_63;
        }
      }
      else
      {
LABEL_63:
        if (v12 == *(_DWORD *)(v30 + 216)
          && v21 == *(_DWORD *)(v30 + 212)
          && v29
          && v28
          && v22 == *(_DWORD *)(v30 + 256)
          && v83 == *(_DWORD *)(v30 + 220)
          && v80 == *(_DWORD *)(v30 + 224)
          && v75 == *(_QWORD *)(v30 + 312))
        {
          goto LABEL_167;
        }
      }
    }
    v42 = *(unsigned __int8 *)(v30 + 415);
    v43 = (char)v42;
    if ((v42 & 0x80u) != 0)
      v42 = *(_QWORD *)(v30 + 400);
    if (v27 == v42)
      break;
LABEL_85:
    v47 = *(unsigned __int8 *)(v30 + 575);
    v48 = (char)v47;
    if ((v47 & 0x80u) != 0)
      v47 = *(_QWORD *)(v30 + 560);
    if (v27 == v47)
    {
      if (v9)
      {
        if (v48 >= 0)
          v49 = (unsigned __int8 *)(v30 + 552);
        else
          v49 = *(unsigned __int8 **)(v30 + 552);
        v50 = (unsigned __int8 *)(v2 + 72);
        v51 = v9;
        while (*v50 == *v49)
        {
          ++v50;
          ++v49;
          if (!--v51)
            goto LABEL_95;
        }
      }
      else
      {
LABEL_95:
        if (v12 == *(_DWORD *)(v30 + 536)
          && v21 == *(_DWORD *)(v30 + 532)
          && v29
          && v28
          && v22 == *(_DWORD *)(v30 + 576)
          && v83 == *(_DWORD *)(v30 + 540)
          && v80 == *(_DWORD *)(v30 + 544)
          && v75 == *(_QWORD *)(v30 + 632))
        {
          v31 = 3;
          goto LABEL_167;
        }
      }
    }
    v30 = *(_QWORD *)(v30 + 832);
    if (!v30)
      goto LABEL_104;
  }
  if (v9)
  {
    if (v43 >= 0)
      v44 = (unsigned __int8 *)(v30 + 392);
    else
      v44 = *(unsigned __int8 **)(v30 + 392);
    v45 = (unsigned __int8 *)(v2 + 72);
    v46 = v9;
    while (*v45 == *v44)
    {
      ++v45;
      ++v44;
      if (!--v46)
        goto LABEL_79;
    }
    goto LABEL_85;
  }
LABEL_79:
  if (v12 != *(_DWORD *)(v30 + 376)
    || v21 != *(_DWORD *)(v30 + 372)
    || !v29
    || !v28
    || v22 != *(_DWORD *)(v30 + 416)
    || v83 != *(_DWORD *)(v30 + 380)
    || v80 != *(_DWORD *)(v30 + 384)
    || v75 != *(_QWORD *)(v30 + 472))
  {
    goto LABEL_85;
  }
  v31 = 2;
LABEL_167:
  v20 = v30 + 48 * v31;
  return v20 + 640;
}

void sub_232C3EEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10B2C40CE86BACFLL);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::ObjectProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v2;

  v2 = AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)a1, 0, 0, 0, 0, 0);
  AGX::ObjectProgramKey::ObjectProgramKey(v2 + 160, 0, 0, 0, 0, 0);
  AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)(a1 + 20), 0, 0, 0, 0, 0);
  AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)(a1 + 30), 0, 0, 0, 0, 0);
  a1[40] = 0u;
  a1[41] = 0u;
  *(_OWORD *)((char *)a1 + 666) = 0u;
  a1[43] = 0u;
  a1[44] = 0u;
  *(_OWORD *)((char *)a1 + 714) = 0u;
  a1[46] = 0u;
  a1[47] = 0u;
  *(_OWORD *)((char *)a1 + 762) = 0u;
  a1[49] = 0u;
  a1[50] = 0u;
  *(_OWORD *)((char *)a1 + 810) = 0u;
  return a1;
}

void sub_232C3EFB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = v2;
  while (1)
  {
    *(_QWORD *)(v4 - 160) = off_250401BB0;
    v4 -= 160;
    v5 = *(void **)(v4 + 128);
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(v2 - 56);
    if (v6)
    {
      *(_QWORD *)(v2 - 48) = v6;
      operator delete(v6);
    }
    if (*(char *)(v2 - 65) < 0)
      operator delete(*(void **)(v2 - 88));
    *(_QWORD *)(v2 - 160) = off_250401BF8;
    v7 = *(void **)(v2 - 144);
    if (v7)
    {
      *(_QWORD *)(v2 - 136) = v7;
      operator delete(v7);
    }
    v2 = v4;
    if (v4 == v1)
      _Unwind_Resume(exception_object);
  }
}

void AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v32;
  os_unfair_lock_s *lock;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v7 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1176);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1176));
    v14 = *(_QWORD *)(a1 + 1136);
    v15 = *(unsigned int *)(a1 + 1144);
    v16 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v14, *(_DWORD *)(a1 + 1144), (_QWORD *)a4);
    v17 = (_QWORD *)v16;
    if (v16)
    {
      v18 = *(_QWORD *)(v16 + 8);
      if (a7)
      {
LABEL_4:
        *v17 = v18;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if ((_DWORD)v15 == 4)
      {
        v14 = operator new();
        v15 = 0;
        *(_QWORD *)(v14 + 224) = *(_QWORD *)(a1 + 1136);
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)v14 = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_QWORD *)(a1 + 1136) = v14;
        *(_DWORD *)(a1 + 1144) = 0;
      }
      v19 = (_OWORD *)(v14 + 32 * v15);
      v20 = *(_OWORD *)(a4 + 16);
      *v19 = *(_OWORD *)a4;
      v19[1] = v20;
      v21 = *(_QWORD *)(a1 + 1136);
      v22 = *(_DWORD *)(a1 + 1144);
      *(_DWORD *)(a1 + 1144) = v22 + 1;
      v17 = (_QWORD *)(v21 + 24 * v22 + 128);
      v18 = *(_QWORD *)(v21 + 24 * v22 + 136);
      if (a7)
        goto LABEL_4;
    }
    if ((v7 & ~v18) != 0)
    {
      if (a3)
        dispatch_retain(a3);
      v23 = v17[2];
      if (v23)
        dispatch_release(v23);
      v17[1] = v7;
      v17[2] = a3;
    }
    if (!*(_BYTE *)(a1 + 1432))
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD5B8]), "initWithDevice:reflectionData:functionType:options:", a5, a3, a6, a2 | 0x8000);
      v24 = (void *)objc_msgSend(v32, "arguments");
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (v25)
      {
        v26 = *(_QWORD *)v35;
        do
        {
          for (i = 0; i != v25; ++i)
          {
            if (*(_QWORD *)v35 != v26)
              objc_enumerationMutation(v24);
            v28 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
            if (!objc_msgSend(v28, "type")
              && (objc_msgSend((id)objc_msgSend(v28, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              v29 = (_QWORD *)objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v28, "bufferStructType"));
              v30 = v29[2];
              v29[2] = 0;
              *(_QWORD *)(a1 + 8 * objc_msgSend(v28, "index") + 1184) = v30;

            }
          }
          v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        }
        while (v25);
      }

      *(_BYTE *)(a1 + 1432) = 1;
    }
    goto LABEL_26;
  }
}

void sub_232C3F2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C3F550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::G9::ObjectProgramVariant::~ObjectProgramVariant(AGX::G9::ObjectProgramVariant *this)
{
  AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~ObjectProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI31MTLMeshRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXA10FamilyDeviceRP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  AGXA10FamilyComputeOrFragmentOrTileProgram *v4;
  AGXA10FamilyFragmentProgram *frag;
  void *v6;
  AGXA10FamilyMeshProgram *v7;
  void *v8;
  AGXA10FamilyObjectProgram *v9;
  AGXA10FamilyVertexProgram *v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)v2)
  {
    v3 = objc_msgSend(*(id *)v2, "vendorPrivate");
    v4 = (AGXA10FamilyComputeOrFragmentOrTileProgram *)v3;
    if (v3)
    {
      frag = *(AGXA10FamilyFragmentProgram **)(v3 + 16);
      if (frag)
      {
LABEL_5:
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = &frag->_impl;
        v2 = *(_QWORD *)(a1 + 32);
        goto LABEL_6;
      }
    }
    else
    {
      v4 = objc_alloc_init(AGXA10FamilyComputeOrFragmentOrTileProgram);
      objc_msgSend(**(id **)(a1 + 32), "setVendorPrivate:", v4);

      frag = v4->_frag;
      if (frag)
        goto LABEL_5;
    }
    frag = objc_alloc_init(AGXA10FamilyFragmentProgram);
    v4->_frag = frag;
    goto LABEL_5;
  }
LABEL_6:
  v6 = *(void **)(v2 + 16);
  if (v6)
  {
    v7 = (AGXA10FamilyMeshProgram *)objc_msgSend(v6, "vendorPrivate");
    if (!v7)
    {
      v7 = objc_alloc_init(AGXA10FamilyMeshProgram);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setVendorPrivate:", v7);

    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = &v7->_impl;
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    if (v8)
    {
      v9 = (AGXA10FamilyObjectProgram *)objc_msgSend(v8, "vendorPrivate");
      if (!v9)
      {
        v9 = objc_alloc_init(AGXA10FamilyObjectProgram);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setVendorPrivate:", v9);

      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = &v9->_impl;
    }
  }
  else
  {
    v10 = (AGXA10FamilyVertexProgram *)objc_msgSend(*(id *)(v2 + 8), "vendorPrivate");
    if (!v10)
    {
      v10 = objc_alloc_init(AGXA10FamilyVertexProgram);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setVendorPrivate:", v10);

    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = &v10->_impl;
  }
}

uint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateRenderPipelineDescriptorInfo<MTLRenderPipelineDescriptor>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  _QWORD v27[5];
  uint64_t v28;

  *a2 = objc_msgSend(a3, "fragmentFunction");
  a2[1] = objc_msgSend(a3, "vertexFunction");
  a2[3] = objc_msgSend(a3, "objectFunction");
  v12 = objc_msgSend(a3, "meshFunction");
  a2[2] = v12;
  if (v12)
  {
    v13 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("Mesh render pipeline unsupported on this device"), *MEMORY[0x24BDD0FC8]);
    v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 1, v13);
    result = 0;
    *a6 = v14;
  }
  else
  {
    v16 = objc_msgSend(a3, "newSerializedVertexDataWithFlags:options:error:", 540, a4, a6);
    v17 = a2[9];
    if (v17 != v16)
    {
      if (v17)
        dispatch_release(v17);
      a2[9] = v16;
    }
    if (!v16)
      return 0;
    v18 = objc_msgSend(a3, "newSerializedFragmentDataWithFlags:options:", 540, a4);
    v19 = a2[8];
    if (v19 != v18)
    {
      if (v19)
        dispatch_release(v19);
      a2[8] = v18;
    }
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v28, a5, *a2, (void *)objc_msgSend(a3, "fragmentLinkedFunctions"), (void *)objc_msgSend(a3, "fragmentPreloadedLibraries"), (uint64_t)a6);
    v20 = (void *)a2[12];
    a2[12] = v28;

    if (!a2[12])
      return 0;
    v21 = a2[1];
    if (v21)
    {
      AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v28, a5, v21, (void *)objc_msgSend(a3, "vertexLinkedFunctions"), (void *)objc_msgSend(a3, "vertexPreloadedLibraries"), (uint64_t)a6);
      v22 = (void *)a2[13];
      a2[13] = v28;

      if (!a2[13])
        return 0;
    }
    v23 = a2[2];
    if (!v23)
      goto LABEL_18;
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v28, a5, v23, (void *)objc_msgSend(a3, "meshLinkedFunctions"), (void *)objc_msgSend(a3, "meshPreloadedLibraries"), (uint64_t)a6);
    v24 = (void *)a2[14];
    a2[14] = v28;

    if (!a2[14])
      return 0;
    AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v28, a5, a2[3], (void *)objc_msgSend(a3, "objectLinkedFunctions"), (void *)objc_msgSend(a3, "objectPreloadedLibraries"), (uint64_t)a6);
    v25 = (void *)a2[15];
    a2[15] = v28;

    if (a2[15])
    {
LABEL_18:
      v26 = *(NSObject **)(a1 + 16);
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI27MTLRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXA10FamilyDeviceRP7NSError_block_invoke;
      v27[3] = &__block_descriptor_40_e5_v8__0l;
      v27[4] = a2;
      dispatch_sync(v26, v27);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v7 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(result);
    result = MEMORY[0x234927ECC](v7, 0xA0C402B819244);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a4 == 0;
  return result;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void ***v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  __int16 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v22[6];

  if (a2)
  {
    v8 = *(void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v10 = *(void ****)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD **)(a1 + 80);
    v12 = (void *)v11[15];
    v13 = (void *)v11[3];
    v14 = v11[11];
    v15 = *(_WORD *)(a2 + 2994);
    v16 = *(_BYTE *)(a1 + 88);
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v22[3] = &unk_2503FFED0;
    v17 = *(_QWORD *)(a1 + 48);
    v22[4] = *(_QWORD *)(a1 + 56);
    v22[5] = v10;
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(v10, v8, v7, v9, v17, a7, v12, v13, v14, v15, HIBYTE(v15), v16, (uint64_t)v22);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 56);
    if (a5 > 3)
      v19 = 5;
    else
      v19 = qword_232D76128[a5];
    v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v19, v20);
    if (v18)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v18 + 16))(v18, 0, 0, v21);
  }
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, os_unfair_lock_s *a8, uint64_t a9, NSObject *a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v18;
  std::string *v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  NSObject **v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  void *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void **v32;
  id *v33;
  NSObject *v34;
  NSObject *global_queue;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t CompileOptions;
  uint64_t v42;
  os_unfair_lock_s *v44;
  char v45;
  __int128 v46;
  void *v47[2];
  __int128 v48;
  uint64_t v49;
  std::string v50;
  std::string __p;
  char v52;
  _QWORD v53[2];
  void *v54;
  void *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  void *v59;
  char v60;
  unsigned __int8 v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  uint64_t v70;
  _QWORD v71[6];
  _QWORD v72[5];
  _QWORD block[2];
  void (*v74)(uint64_t);
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject **v78;
  os_unfair_lock_s *v79;
  uint64_t (**v80)();
  void *v81;
  void *v82;
  void *v83;
  char v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[8];
  __int128 v96;
  __int128 v97;
  _QWORD v98[14];
  unsigned __int8 v99;
  char v100;
  __int128 v101;
  __int128 v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v71[0] = 0;
  v71[1] = v71;
  v71[2] = 0x3052000000;
  v71[3] = __Block_byref_object_copy_;
  v71[4] = __Block_byref_object_dispose_;
  v71[5] = 0;
  v42 = objc_msgSend(a2, "meshFunction");
  if (a9)
  {
    v18 = objc_msgSend(a2, "objectFunction");
    if (*(char *)(a9 + 3183) < 0)
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(a9 + 3160), *(_QWORD *)(a9 + 3168));
    else
      v50 = *(std::string *)(a9 + 3160);
    if (*(char *)(a9 + 3207) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a9 + 3184), *(_QWORD *)(a9 + 3192));
    else
      __p = *(std::string *)(a9 + 3184);
    v52 = *(_BYTE *)(a9 + 3208);
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey<MTLRenderPipelineDescriptor>((uint64_t)v53, a2, a10, a7, v18 == 0, (uint64_t)&v50, *(unsigned __int8 *)(a9 + 3225));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    v19 = &v50;
  }
  else
  {
    v49 = 0;
    *(_OWORD *)v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey<MTLRenderPipelineDescriptor>((uint64_t)v53, a2, a10, a7, objc_msgSend(a2, "objectFunction") == 0, (uint64_t)&v46, 0);
    if (SHIBYTE(v48) < 0)
    {
      operator delete(v47[1]);
      if ((SHIBYTE(v47[0]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v47[0]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    v19 = (std::string *)&v46;
  }
  operator delete(v19->__r_.__value_.__l.__data_);
LABEL_19:
  if (*(_BYTE *)(*(_QWORD *)(a3 + 808) + 6360))
    v20 = 67109120;
  else
    v20 = 256;
  v21 = v20 | v57 & 0x8BFFFEFF;
  v57 = v21;
  v58 &= ~0x200u;
  v70 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v22 = 1;
    v21 = v57;
  }
  else
  {
    v22 = 0;
  }
  v57 = v22 | (a4 >> 21) & 8 | v21 & 0xFFFFFFF4;
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v106, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
  v104 = v106;
  v105 = v107;
  v45 = 0;
  v44 = a8;
  CompileOptions = AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a8, a4 | 3, (uint64_t)&v104);
  v23 = AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a8, (uint64_t)v53, &v45, CompileOptions, a5 != 0);
  v24 = (NSObject **)v23;
  if (v45)
  {
    v39 = v56;
    HIDWORD(v36) = v61;
    v25 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v26 = (void *)objc_msgSend(a2, "pipelineLibrary");
    if (objc_msgSend(v26, "pipelineCache") && (objc_msgSend(v26, "disableRunTimeCompilation") & 1) != 0)
      v27 = 1;
    else
      v27 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    LODWORD(v36) = v27;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v28 = (void *)objc_opt_new();
    objc_msgSend(v28, "setSync:", a11 ^ 1u);
    objc_msgSend(v28, "setFunction:", v42);
    objc_msgSend(v28, "setFrameworkData:", a10);
    objc_msgSend(v28, "setPipelineCache:", v25);
    objc_msgSend(v28, "setDestinationBinaryArchive:", a5);
    objc_msgSend(v28, "setArchiverId:", a6);
    objc_msgSend(v28, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    objc_msgSend(v28, "setPipelineOptions:", a4 | 3);
    if ((a4 & 0x330003) == 0)
      objc_msgSend(v28, "setPipelineOptions:", objc_msgSend(v28, "pipelineOptions") | 0x8000);
    v29 = objc_msgSend(a2, "newPipelineScript", v36);
    if (v29)
    {
      objc_msgSend(v28, "setAirScript:", v29);
      dispatch_release(v29);
    }
    objc_msgSend(v28, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v30 = (void *)objc_msgSend(a2, "meshLinkedFunctions");
    objc_msgSend(v28, "setVisibleFunctions:", objc_msgSend(v30, "functions"));
    objc_msgSend(v28, "setVisibleFunctionGroups:", objc_msgSend(v30, "groups"));
    objc_msgSend(v28, "setPrivateVisibleFunctions:", objc_msgSend(v30, "privateFunctions"));
    v98[0] = MEMORY[0x24BDAC760];
    v101 = v104;
    v98[1] = 3221225472;
    v98[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke;
    v98[3] = &unk_250400CF8;
    v99 = a11;
    v98[8] = a1;
    v98[9] = v24;
    v100 = v38 & 1;
    v98[10] = v44;
    v98[11] = CompileOptions;
    v98[12] = a9;
    v102 = v105;
    v98[4] = v42;
    v98[5] = a3;
    v98[6] = a2;
    v98[7] = v71;
    v31 = MEMORY[0x24BDAC760];
    v98[13] = v39;
    v103 = v37;
    v32 = *a1;
    v72[0] = MEMORY[0x24BDAC760];
    v72[1] = 3221225472;
    v72[2] = ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14MeshProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
    v72[3] = &unk_250400D80;
    v72[4] = v98;
    *(_QWORD *)&v106 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v106 + 1) = 3221225472;
    *(_QWORD *)&v107 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    *((_QWORD *)&v107 + 1) = &unk_2504023B8;
    v108 = v72;
    AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v32, (uint64_t)v53, v28, (uint64_t)&v106);

  }
  else
  {
    v31 = MEMORY[0x24BDAC760];
    if ((CompileOptions & 0x330003) != 0)
    {
      v33 = *a1;
      v95[0] = MEMORY[0x24BDAC760];
      v95[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2;
      v95[1] = 3221225472;
      v95[3] = &unk_250400D20;
      v95[5] = v44;
      v95[6] = CompileOptions;
      v96 = v104;
      v97 = v105;
      v95[4] = a3;
      v95[7] = v23;
      objc_msgSend(*v33, "reflectionWithFunction:options:sync:completionHandler:", v42, CompileOptions & 0x330003, a11 ^ 1u, v95);
    }
  }
  block[0] = v31;
  block[1] = 3321888768;
  v74 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3;
  v75 = &unk_250400D48;
  v78 = v24;
  v79 = v44;
  AGX::MeshProgramKey::MeshProgramKey((AGX::MeshProgramKey *)&v80, (const AGX::MeshProgramKey *)v53);
  v93 = v104;
  v94 = v105;
  v76 = a12;
  v77 = v71;
  v34 = *v24;
  if (a11)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v34, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v34, 0xFFFFFFFFFFFFFFFFLL);
    v74((uint64_t)block);
  }
  v80 = (uint64_t (**)())&off_2504029F8;
  if (v92 < 0)
  {
    operator delete(v91);
    if ((v90 & 0x80000000) == 0)
      goto LABEL_46;
  }
  else if ((v90 & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v89);
LABEL_46:
  v80 = off_250401C80;
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v84 < 0)
    operator delete(v83);
  v80 = off_250401CC8;
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  v53[0] = &off_2504029F8;
  if (v69 < 0)
  {
    operator delete(v68);
    if ((v67 & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((v67 & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v66);
LABEL_56:
  v53[0] = off_250401C80;
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v60 < 0)
    operator delete(v59);
  v53[0] = off_250401CC8;
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  _Block_object_dispose(v71, 8);
}

void sub_232C40340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  if (a34 < 0)
    operator delete(__p);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createVertexProgramVariant(void ***a1, MTLRenderPipelineDescriptor *a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, NSObject *a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject **v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  void *v39;
  NSObject *v40;
  MTLLinkedFunctions *v41;
  uint64_t v42;
  void **v43;
  id *v44;
  NSObject *v45;
  NSObject *global_queue;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char v56;
  std::string v57;
  std::string __p;
  char v59;
  _QWORD v60[2];
  void *v61;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  void *v66;
  char v67;
  unsigned __int8 v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  uint64_t v77;
  _QWORD v78[6];
  void *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  __int128 v82;
  uint64_t v83;
  char v84;
  _QWORD block[2];
  void (*v86)(_QWORD *);
  void *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  NSObject **v91;
  uint64_t (**v92)();
  void *v93;
  void *v94;
  void *v95;
  char v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  __int128 v105;
  __int128 v106;
  _QWORD v107[8];
  __int128 v108;
  __int128 v109;
  _QWORD v110[14];
  unsigned __int8 v111;
  char v112;
  __int128 v113;
  __int128 v114;
  char v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[3];
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v78[0] = 0;
  v78[1] = v78;
  v78[2] = 0x3052000000;
  v78[3] = __Block_byref_object_copy_;
  v78[4] = __Block_byref_object_dispose_;
  v78[5] = 0;
  v54 = -[MTLRenderPipelineDescriptor vertexFunction](a2, "vertexFunction");
  if (a8)
  {
    if (*(char *)(a8 + 3183) < 0)
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a8 + 3160), *(_QWORD *)(a8 + 3168));
    else
      v57 = *(std::string *)(a8 + 3160);
    if (*(char *)(a8 + 3207) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a8 + 3184), *(_QWORD *)(a8 + 3192));
    else
      __p = *(std::string *)(a8 + 3184);
    v59 = *(_BYTE *)(a8 + 3208);
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateVertexProgramKey((uint64_t)v60, a2, a9, (uint64_t)&v57, *(unsigned __int8 *)(a8 + 3225), a6, (*(_QWORD *)(*(_QWORD *)(a3 + 808) + 6224) >> 22) & 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    v18 = (void *)v57.__r_.__value_.__r.__words[0];
  }
  else
  {
    v119 = 0;
    memset(v118, 0, sizeof(v118));
    v80 = 0;
    v81 = 0;
    v79 = 0;
    v82 = *(_OWORD *)((char *)&v118[1] + 8);
    v83 = 0;
    v84 = 0;
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateVertexProgramKey((uint64_t)v60, a2, a9, (uint64_t)&v79, 0, a6, 0);
    if (SHIBYTE(v83) < 0)
    {
      operator delete((void *)v82);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    v18 = v79;
  }
  operator delete(v18);
LABEL_19:
  v19 = *(_QWORD *)(a3 + 808);
  v20 = (unint64_t)*(unsigned int *)(v19 + 6224) >> 8;
  if (*(_BYTE *)(v19 + 6360))
    v21 = 67109120;
  else
    v21 = 256;
  v22 = v21 | v64 & 0x8BFFFEFF;
  v64 = v22;
  v23 = v65 & 0xFFFFFDFFF67FFFFFLL | ((v20 & 3) << 23);
  v65 = v23;
  v77 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v22 = v64;
    v24 = 1;
    v23 = v65;
  }
  else
  {
    v24 = 0;
  }
  v64 = v24 | (a4 >> 21) & 8 | v22 & 0xFFFFFFF4;
  v65 = v23 & 0xFFFFFFFFFBFFFFFFLL | (((a4 >> 21) & 1) << 26);
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)v118, (void *)-[MTLRenderPipelineDescriptor gpuCompilerSPIOptions](a2, "gpuCompilerSPIOptions"));
  v116 = v118[0];
  v117 = v118[1];
  os_unfair_lock_lock((os_unfair_lock_t)(a7 + 1368));
  v25 = *(_QWORD *)(a7 + 1328);
  v26 = *(unsigned int *)(a7 + 1336);
  v27 = (_QWORD *)VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v25, *(_DWORD *)(a7 + 1336), &v116);
  if (!v27)
  {
    if ((_DWORD)v26 == 4)
    {
      v25 = operator new();
      v26 = 0;
      *(_QWORD *)(v25 + 224) = *(_QWORD *)(a7 + 1328);
      *(_OWORD *)(v25 + 192) = 0u;
      *(_OWORD *)(v25 + 208) = 0u;
      *(_OWORD *)(v25 + 160) = 0u;
      *(_OWORD *)(v25 + 176) = 0u;
      *(_OWORD *)(v25 + 128) = 0u;
      *(_OWORD *)(v25 + 144) = 0u;
      *(_OWORD *)(v25 + 96) = 0u;
      *(_OWORD *)(v25 + 112) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 80) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_QWORD *)(a7 + 1328) = v25;
      *(_DWORD *)(a7 + 1336) = 0;
    }
    v28 = (_OWORD *)(v25 + 32 * v26);
    v29 = v117;
    *v28 = v116;
    v28[1] = v29;
    v30 = *(_QWORD *)(a7 + 1328);
    v31 = *(_DWORD *)(a7 + 1336);
    *(_DWORD *)(a7 + 1336) = v31 + 1;
    v27 = (_QWORD *)(v30 + 24 * v31 + 128);
  }
  v32 = a4 & 0x330000 | 3;
  v52 = a3;
  if ((v32 & ~v27[1]) != 0)
  {
    v33 = *v27 | v32;
    *v27 = v33;
  }
  else
  {
    v33 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a7 + 1368));
  v56 = 0;
  v51 = v33 | a4 & 0xFFFFFFFFFFCCFFFCLL;
  v34 = AGX::Program<AGX::G9::VertexProgramVariant,AGX::VertexProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry((os_unfair_lock_s *)a7, (uint64_t)v60, &v56, v33 | a4 & 0xFFCCFFFC, a5 != 0);
  v35 = (NSObject **)v34;
  if (v56)
  {
    v50 = v63;
    HIDWORD(v47) = v68;
    v36 = objc_msgSend((id)-[MTLRenderPipelineDescriptor pipelineLibrary](a2, "pipelineLibrary"), "pipelineCache");
    v37 = (void *)-[MTLRenderPipelineDescriptor pipelineLibrary](a2, "pipelineLibrary");
    if (objc_msgSend(v37, "pipelineCache") && (objc_msgSend(v37, "disableRunTimeCompilation") & 1) != 0)
      v38 = 1;
    else
      v38 = (-[NSArray count](-[MTLRenderPipelineDescriptor binaryArchives](a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    LODWORD(v47) = v38;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v39 = (void *)objc_opt_new();
    objc_msgSend(v39, "setSync:", a11 ^ 1u);
    objc_msgSend(v39, "setFunction:", v54);
    objc_msgSend(v39, "setFrameworkData:", a9);
    objc_msgSend(v39, "setPipelineCache:", v36);
    objc_msgSend(v39, "setDestinationBinaryArchive:", a5);
    objc_msgSend(v39, "setBinaryArchives:", -[MTLRenderPipelineDescriptor binaryArchives](a2, "binaryArchives"));
    objc_msgSend(v39, "setPipelineOptions:", a4 | 3);
    if ((a4 & 0x330003) == 0)
      objc_msgSend(v39, "setPipelineOptions:", objc_msgSend(v39, "pipelineOptions") | 0x8000);
    v40 = -[MTLRenderPipelineDescriptor newPipelineScript](a2, "newPipelineScript", v47);
    if (v40)
    {
      objc_msgSend(v39, "setAirScript:", v40);
      dispatch_release(v40);
    }
    objc_msgSend(v39, "setGpuCompilerSPIOptions:", -[MTLRenderPipelineDescriptor gpuCompilerSPIOptions](a2, "gpuCompilerSPIOptions"));
    v41 = -[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions");
    objc_msgSend(v39, "setVisibleFunctions:", -[MTLLinkedFunctions functions](v41, "functions"));
    objc_msgSend(v39, "setVisibleFunctionGroups:", -[MTLLinkedFunctions groups](v41, "groups"));
    objc_msgSend(v39, "setPrivateVisibleFunctions:", -[MTLLinkedFunctions privateFunctions](v41, "privateFunctions"));
    objc_msgSend(v39, "setArchiverId:", a10);
    v110[0] = MEMORY[0x24BDAC760];
    v110[1] = 3221225472;
    v110[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke;
    v110[3] = &unk_250400CF8;
    v110[7] = v78;
    v110[8] = a1;
    v110[4] = v54;
    v111 = a11;
    v112 = v49 & 1;
    v110[9] = v35;
    v110[10] = a7;
    v110[11] = v51;
    v113 = v116;
    v114 = v117;
    v110[5] = v52;
    v110[6] = a2;
    v110[12] = a8;
    v42 = MEMORY[0x24BDAC760];
    v110[13] = v50;
    v115 = v48;
    v43 = *a1;
    v79 = (void *)MEMORY[0x24BDAC760];
    v80 = 3221225472;
    v81 = ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16VertexProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
    *(_QWORD *)&v82 = &unk_250400D80;
    *((_QWORD *)&v82 + 1) = v110;
    *(_QWORD *)&v118[0] = MEMORY[0x24BDAC760];
    *((_QWORD *)&v118[0] + 1) = 3221225472;
    *(_QWORD *)&v118[1] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    *((_QWORD *)&v118[1] + 1) = &unk_2504023B8;
    *(_QWORD *)&v118[2] = &v79;
    AGX::Compiler::compileProgram<AGX::VertexProgramKey,AGCDeserializedReply>(v43, (uint64_t)v60, v39, (uint64_t)v118);

  }
  else
  {
    v42 = MEMORY[0x24BDAC760];
    if ((v33 & 0x330003) != 0)
    {
      v44 = *a1;
      v107[0] = MEMORY[0x24BDAC760];
      v107[1] = 3221225472;
      v107[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2;
      v107[3] = &unk_250400D20;
      v108 = v116;
      v109 = v117;
      v107[4] = v52;
      v107[5] = a7;
      v107[6] = v33 | a4 & 0xFFFFFFFFFFCCFFFCLL;
      v107[7] = v34;
      objc_msgSend(*v44, "reflectionWithFunction:options:sync:completionHandler:", v54, v33 & 0x330003, a11 ^ 1u, v107);
    }
  }
  block[0] = v42;
  block[1] = 3321888768;
  v86 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3;
  v87 = &unk_2504010E0;
  v90 = a7;
  v91 = v35;
  AGX::VertexProgramKey::VertexProgramKey((AGX::VertexProgramKey *)&v92, (const AGX::VertexProgramKey *)v60);
  v88 = a12;
  v105 = v116;
  v106 = v117;
  v89 = v78;
  v45 = *v35;
  if (a11)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v45, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v45, 0xFFFFFFFFFFFFFFFFLL);
    v86(block);
  }
  v92 = (uint64_t (**)())&off_2504029B0;
  if (v104 < 0)
  {
    operator delete(v103);
    if ((v102 & 0x80000000) == 0)
      goto LABEL_53;
  }
  else if ((v102 & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(v101);
LABEL_53:
  v92 = off_250401AE0;
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v96 < 0)
    operator delete(v95);
  v92 = off_250401B28;
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  v60[0] = &off_2504029B0;
  if (v76 < 0)
  {
    operator delete(v75);
    if ((v74 & 0x80000000) == 0)
      goto LABEL_63;
  }
  else if ((v74 & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v73);
LABEL_63:
  v60[0] = off_250401AE0;
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v67 < 0)
    operator delete(v66);
  v60[0] = off_250401B28;
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  _Block_object_dispose(v78, 8);
}

void sub_232C40DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  os_unfair_lock_s *v62;

  os_unfair_lock_unlock(v62);
  AGX::VertexProgramKey::~VertexProgramKey(&a30);
  _Block_object_dispose(&a56, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void ***v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  os_unfair_lock_s *v10;
  NSObject *v11;
  _QWORD v12[6];
  __int128 v13;
  void ***v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(void ****)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD **)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = (void *)v7[12];
  v10 = (os_unfair_lock_s *)v7[4];
  v12[0] = MEMORY[0x24BDAC760];
  v12[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke_3;
  v12[3] = &unk_2503FFE80;
  v11 = v7[8];
  v12[1] = 3221225472;
  v14 = v6;
  v15 = v7;
  v12[4] = v4;
  v12[5] = v3;
  v13 = *(_OWORD *)(a1 + 48);
  v16 = v5;
  v17 = v8;
  AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createFragmentProgramVariant<MTLRenderPipelineDescriptor>(v6, v3, v4, v5, v13, v9, v10, a2, v11, 0, (uint64_t)v12);
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramAnalysis<MTLRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, unsigned int a4, os_unfair_lock_s *a5, NSObject *a6, int a7, uint64_t a8)
{
  unsigned int v16;
  int v17;
  dispatch_group_t *VariantEntry;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void **v28;
  NSObject *v29;
  NSObject *global_queue;
  char v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD block[2];
  uint64_t (*v36)(_QWORD *);
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  dispatch_group_t *v40;
  _QWORD v41[10];
  char v42;
  char v43;
  _QWORD v44[2];
  void *v45;
  void *v46;
  unsigned int v47;
  void *v48;
  char v49;
  void *v50;
  void *v51;
  void *__p;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  uint64_t v58;
  _QWORD v59[4];
  _BYTE v60[48];
  uint64_t v61;

  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2020000000;
  v59[3] = 0;
  v61 = 0;
  memset(v60, 0, sizeof(v60));
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)v44, a6, 1, 0, (uint64_t)v60, 0, 0, 0);
  AGX::MeshProgramKey::initCommon<MTLRenderPipelineDescriptor>((uint64_t)v44, a2);
  v16 = v47 & 0xFFFFFF7F;
  v47 &= ~0x80u;
  v58 = a4 & 0xC00C0000;
  v34 = a8;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v17 = 1;
    v16 = v47;
  }
  else
  {
    v17 = 0;
  }
  v47 = v17 | (a4 >> 21) & 8 | v16 & 0xFFFFFFF4;
  v60[0] = 0;
  VariantEntry = (dispatch_group_t *)AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a5, (uint64_t)v44, v60, 0, 0);
  v32 = a5;
  v33 = a3;
  v19 = objc_msgSend(a2, "meshFunction");
  v20 = v60[0];
  if (v60[0])
  {
    v21 = v19;
    v22 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v23 = (void *)objc_msgSend(a2, "pipelineLibrary");
    if (objc_msgSend(v23, "pipelineCache") && (objc_msgSend(v23, "disableRunTimeCompilation") & 1) != 0)
      LOBYTE(v24) = 1;
    else
      v24 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    v31 = v24;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v25 = (void *)objc_opt_new();
    objc_msgSend(v25, "setSync:", a7 ^ 1u);
    objc_msgSend(v25, "setFunction:", v21);
    objc_msgSend(v25, "setFrameworkData:", a6);
    objc_msgSend(v25, "setPipelineCache:", v22);
    objc_msgSend(v25, "setDestinationBinaryArchive:", 0);
    objc_msgSend(v25, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    objc_msgSend(v25, "setPipelineOptions:", 0);
    v26 = objc_msgSend(a2, "newPipelineScript");
    if (v26)
    {
      objc_msgSend(v25, "setAirScript:", v26);
      dispatch_release(v26);
    }
    objc_msgSend(v25, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v27 = (void *)objc_msgSend(a2, "meshLinkedFunctions");
    objc_msgSend(v25, "setVisibleFunctions:", objc_msgSend(v27, "functions"));
    objc_msgSend(v25, "setVisibleFunctionGroups:", objc_msgSend(v27, "groups"));
    objc_msgSend(v25, "setPrivateVisibleFunctions:", objc_msgSend(v27, "privateFunctions"));
    v28 = *a1;
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 3221225472;
    v41[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke;
    v41[3] = &unk_250400EA0;
    v41[6] = a1;
    v41[7] = VariantEntry;
    v42 = v20;
    v41[8] = v32;
    v41[9] = 0;
    v41[4] = v33;
    v41[5] = v59;
    v43 = v31;
    AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v28, (uint64_t)v44, v25, (uint64_t)v41);

  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  v36 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2;
  v37 = &unk_250400EC8;
  v39 = v59;
  v40 = VariantEntry;
  v38 = v34;
  v29 = *VariantEntry;
  if (a7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v29, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*VariantEntry, 0xFFFFFFFFFFFFFFFFLL);
    v36(block);
  }
  v44[0] = &off_2504029F8;
  if (v57 < 0)
  {
    operator delete(v56);
    if ((v55 & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((v55 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v54);
LABEL_21:
  v44[0] = off_250401C80;
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v49 < 0)
    operator delete(v48);
  v44[0] = off_250401CC8;
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  _Block_object_dispose(v59, 8);
}

void sub_232C41354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  AGX::MeshProgramKey::~MeshProgramKey(&a32);
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createVertexProgramAnalysis(void ***a1, MTLRenderPipelineDescriptor *a2, uint64_t a3, unsigned int a4, os_unfair_lock_s *a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v15;
  dispatch_group_t *VariantEntry;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  void **v21;
  NSObject *v22;
  NSObject *global_queue;
  _QWORD block[2];
  uint64_t (*v26)(_QWORD *);
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  dispatch_group_t *v30;
  _QWORD v31[8];
  char v32;
  _QWORD v33[2];
  void *v34;
  void *v35;
  int v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  void *__p;
  void *v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  _QWORD v48[4];
  _OWORD v49[3];
  uint64_t v50;

  v48[0] = 0;
  v48[1] = v48;
  v48[2] = 0x2020000000;
  v48[3] = 0;
  v15 = -[MTLRenderPipelineDescriptor vertexFunction](a2, "vertexFunction");
  v50 = 0;
  memset(v49, 0, sizeof(v49));
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)v33, (uint64_t)v49, 0, 0, 0, 0);
  AGX::VertexProgramKey::initCommon((AGX::VertexProgramKey *)v33, a2);
  v36 &= ~0x80u;
  v37 |= 0x200000uLL;
  LOBYTE(v49[0]) = 0;
  VariantEntry = (dispatch_group_t *)AGX::Program<AGX::G9::VertexProgramVariant,AGX::VertexProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a5, (uint64_t)v33, v49, 0, 0);
  if (LOBYTE(v49[0]))
  {
    v17 = objc_msgSend((id)-[MTLRenderPipelineDescriptor pipelineLibrary](a2, "pipelineLibrary"), "pipelineCache");
    v18 = (void *)-[MTLRenderPipelineDescriptor pipelineLibrary](a2, "pipelineLibrary");
    if (objc_msgSend(v18, "pipelineCache") && (objc_msgSend(v18, "disableRunTimeCompilation") & 1) != 0)
      LOBYTE(v19) = 1;
    else
      v19 = (-[NSArray count](-[MTLRenderPipelineDescriptor binaryArchives](a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v20 = (void *)objc_opt_new();
    objc_msgSend(v20, "setSync:", a7 ^ 1u);
    objc_msgSend(v20, "setFunction:", v15);
    objc_msgSend(v20, "setFrameworkData:", a6);
    objc_msgSend(v20, "setPipelineOptions:", 0);
    objc_msgSend(v20, "setPipelineCache:", v17);
    objc_msgSend(v20, "setGpuCompilerSPIOptions:", -[MTLRenderPipelineDescriptor gpuCompilerSPIOptions](a2, "gpuCompilerSPIOptions"));
    v21 = *a1;
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 3221225472;
    v31[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke;
    v31[3] = &unk_250401118;
    v31[6] = a1;
    v31[7] = VariantEntry;
    v31[4] = a3;
    v31[5] = v48;
    v32 = v19;
    AGX::Compiler::compileProgram<AGX::VertexProgramKey,AGCDeserializedReply>(v21, (uint64_t)v33, v20, (uint64_t)v31);

  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  v26 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2;
  v27 = &unk_250400EC8;
  v29 = v48;
  v30 = VariantEntry;
  v28 = a8;
  v22 = *VariantEntry;
  if (a7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v22, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*VariantEntry, 0xFFFFFFFFFFFFFFFFLL);
    v26(block);
  }
  v33[0] = &off_2504029B0;
  if (v47 < 0)
  {
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
      goto LABEL_14;
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v44);
LABEL_14:
  v33[0] = off_250401AE0;
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0)
    operator delete(v38);
  v33[0] = off_250401B28;
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  _Block_object_dispose(v48, 8);
}

void sub_232C416E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  AGX::VertexProgramKey::~VertexProgramKey(&a27);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t AGX::Program<AGX::G9::VertexProgramVariant,AGX::VertexProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, _BYTE *a3, int a4, int a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;

  *a3 = 0;
  if ((a4 & 4) == 0 && !a5)
  {
    v9 = a1 + 342;
    os_unfair_lock_lock(a1 + 342);
    v10 = (uint64_t)VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
    if (*(_QWORD *)v10)
    {
      if (!*(_BYTE *)(v10 + 40))
      {
        if ((*(_QWORD *)&a4 & 0x330003) != 0)
          dispatch_group_enter(*(dispatch_group_t *)v10);
        goto LABEL_11;
      }
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;

      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 40) = 0;
      v12 = *(NSObject **)v10;
    }
    else
    {
      v12 = dispatch_group_create();
      *(_QWORD *)v10 = v12;
    }
    dispatch_group_enter(v12);
    *a3 = 1;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return v10;
  }
  v10 = operator new();
  *(_WORD *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_BYTE *)(v10 + 41) = 1;
  v13 = dispatch_group_create();
  *(_QWORD *)v10 = v13;
  dispatch_group_enter(v13);
  *a3 = 1;
  return v10;
}

void sub_232C41858(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  void *v10;
  void *v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  int8x16_t v39;
  double v40;
  double v41;
  int8x16_t v42;
  void **v43;
  int v44;
  void **v45;
  int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[2];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  std::string v57;

  v9 = a8;
  v10 = a7;
  v13 = a9;
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
  {
    if (*(_QWORD *)(a2 + 544))
    {
      v14 = (unsigned int **)(a2 + 544);
      if (!*(_QWORD *)(a2 + 552))
        v14 = (unsigned int **)(a2 + 1104);
    }
    else
    {
      v14 = (unsigned int **)(a2 + 1104);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *v14;
    v18 = v14[1];
    if (v17)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
    {
      v20 = *v17;
      v21 = (char *)v17 + v20;
      v22 = (unsigned __int16 *)((char *)v17 + v20 - *(int *)((char *)v17 + v20));
      if (*v22 >= 9u)
      {
        v23 = v22[4];
        if (v23)
        {
          v24 = &v21[v23];
          v25 = *(unsigned int *)&v21[v23];
          if (*(_DWORD *)&v21[v23 + v25])
          {
            v26 = 0;
            v27 = 0;
            v28 = (uint64_t)v17 + v20 + v25 + v23 + 10;
            do
            {
              v29 = *(unsigned int *)(v28 - 6);
              v30 = v29 - *(int *)(v28 + v29 - 6);
              if (*(unsigned __int16 *)(v28 + v30 - 6) >= 7u && (v31 = *(unsigned __int16 *)(v28 + v30)) != 0)
                v32 = *(_QWORD *)(v28 + v29 + v31 - 6);
              else
                v32 = 0;
              if (getTimebaseInfo(void)::once[0] != -1)
              {
                v49 = v16;
                v50 = v15;
                dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
                v16 = v49;
                v15 = v50;
              }
              v27 += v32 * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo / unk_254235750;
              ++v26;
              v28 += 4;
            }
            while (v26 < *(unsigned int *)&v24[v25]);
          }
        }
      }
    }
    v13 = a9;
    v10 = a7;
    v9 = a8;
    IOGPUDeviceTraceEvent();
  }
  v33 = v9;
  if (!v9)
  {
    v34 = v13;
    v35 = operator new();
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t *)__p, (unsigned int **)a2, 0, 1, 0, 0, 0, 0, v37, v38, v39, 0);
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = 0;
    v57.__r_.__value_.__s.__data_[0] = 0;
    AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::ProgramVariant(v35, v36, a2, &v57, (uint64_t)__p, 0);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)__p);
    *(_QWORD *)v35 = &off_2504018A0;
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t *)__p, (unsigned int **)a2, 0, 1, 0, 0, 0, 0, v40, v41, v42, 0);
    AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)&v57, (_QWORD *)a2);
    AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariantPDSState(v35 + 1240, v36, (unsigned int **)a2, (uint64_t)__p, (__int128 *)(v35 + 520), 0, 0);
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)__p);
    *(_QWORD *)(v35 + 3688) = 0;
    *(_OWORD *)(v35 + 3656) = 0u;
    *(_OWORD *)(v35 + 3672) = 0u;
    v43 = (void **)(v35 + 3704);
    *(_OWORD *)(v35 + 3704) = 0u;
    *(_OWORD *)(v35 + 3720) = 0u;
    *(_OWORD *)(v35 + 3736) = 0u;
    *(_OWORD *)(v35 + 3768) = 0u;
    *(_OWORD *)(v35 + 3784) = 0u;
    *(_DWORD *)(v35 + 3800) = 1065353216;
    *(_QWORD *)(v35 + 3824) = 850045863;
    *(_OWORD *)(v35 + 3832) = 0u;
    *(_OWORD *)(v35 + 3848) = 0u;
    *(_OWORD *)(v35 + 3864) = 0u;
    *(_QWORD *)(v35 + 3880) = 0;
    v44 = *(_DWORD *)(v35 + 944);
    *(_QWORD *)(v35 + 2128) = *(_QWORD *)(v35 + 920);
    *(_DWORD *)(v35 + 2828) += v44;
    AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::buildUniqueResourceMask(v35 + 1240);
    VisibleFunctionsMap::populate<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*)),AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>>(v35 + 3768, (_QWORD *)a2, v35);
    AGX::VertexProgramVaryings::VertexProgramVaryings((AGX::VertexProgramVaryings *)__p, (const AGCDeserializedReply *)a2);
    if (*(char *)(v35 + 3727) < 0)
      operator delete(*v43);
    *(_OWORD *)v43 = *(_OWORD *)__p;
    *(_QWORD *)(v35 + 3720) = v54;
    HIBYTE(v54) = 0;
    LOBYTE(__p[0]) = 0;
    v45 = (void **)(v35 + 3728);
    if (*(char *)(v35 + 3751) < 0)
    {
      operator delete(*v45);
      v46 = SHIBYTE(v54);
      *(_OWORD *)v45 = v55;
      *(_QWORD *)(v35 + 3744) = v56;
      HIBYTE(v56) = 0;
      LOBYTE(v55) = 0;
      if (v46 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v45 = v55;
      *(_QWORD *)(v35 + 3744) = v56;
    }
    if (!(*(_QWORD *)(v35 + 2832) & 0x1800000000000000 | (*(_QWORD *)(v35 + 1288) | *(_QWORD *)(v35 + 1264)) & 0x1800000000000000 | (*(_QWORD *)(v35 + 1312) | *(_QWORD *)(v35 + 1344) | *(_QWORD *)(v35 + 1368)) & 0x1800000000000000))
      AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v35);
    *(_QWORD *)v35 = &off_250402580;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v35;
    v13 = v34;
    v33 = a8;
  }
  v47 = *(_QWORD *)(a1 + 56);
  v48 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(v47 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  *(_QWORD *)(v47 + 16) = v33;

  *(_QWORD *)(v47 + 24) = objc_msgSend(v13, "copy");
  if (*(_QWORD *)(v47 + 8))
  {

    *(_QWORD *)(v47 + 32) = v10;
  }
  else
  {
    *(_BYTE *)(v47 + 40) = v48;
  }
  dispatch_group_leave(*(dispatch_group_t *)v47);
}

void sub_232C41D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  unint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  std::mutex *v19;

  std::mutex::~mutex(v19);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v18);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(v17);
  AGX::VertexProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariantPDSState(v16);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,true,true>::~ProgramVariant(v15);
  MEMORY[0x234927ECC](v15, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

void AGX::Compiler::compileProgram<AGX::VertexProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSObject *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  char **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[6];
  _QWORD v21[5];
  _QWORD v22[6];
  dispatch_object_t object;
  unsigned int *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  _OWORD v31[2];
  unsigned __int8 md[16];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(_QWORD *)a2 + 16))(a2, &v27, &v26);
  v8 = dispatch_data_create(v27, v26, 0, 0);
  objc_msgSend(a3, "setDriverKeyData:", v8);
  if (objc_msgSend(a3, "airScript"))
  {
    v24 = 0;
    v25 = 0;
    object = dispatch_data_create_map((dispatch_data_t)objc_msgSend(a3, "airScript"), (const void **)&v24, &v25);
    v9 = v24;
    v10 = *v24;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v31[0] = *(_OWORD *)md;
    v31[1] = v33;
    objc_msgSend(a3, "setVendorPluginFunctionId:", v31);
  }
  v14 = MEMORY[0x24BDAC760];
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v22[3] = &unk_250402408;
  v22[4] = a3;
  v22[5] = a4;
  if (objc_msgSend(a3, "function"))
  {
    v15 = mach_absolute_time();
    v16 = *a1;
    v20[0] = v14;
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v20[3] = &unk_250402458;
    v20[4] = v22;
    v20[5] = v15;
    objc_msgSend(v16, "compileFunctionRequest:completionHandler:", a3, v20);
  }
  else
  {
    if (objc_msgSend(a3, "frameworkData") || objc_msgSend(a3, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    v21[0] = v14;
    v21[1] = 3221225472;
    v21[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v21[3] = &unk_250402430;
    v21[4] = v22;
    v17 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    v18 = *a1;
    v19 = objc_msgSend(a3, "driverKeyData");
    if (v17)
      objc_msgSend(v18, "compileRequest:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
    else
      objc_msgSend(v18, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v19, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v21);
  }
  dispatch_release(v8);
}

void sub_232C42064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
  dispatch_release(object);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(a1[6] + 8);
  v1 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v1)
    v2 = v1 + 3704;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], v2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C42300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::G9::VertexProgramVariant::~VertexProgramVariant(AGX::G9::VertexProgramVariant *this)
{
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~VertexProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

_QWORD *VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;

  v4 = *(unsigned int *)(a1 + 1040);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 1032);
    v7 = *(_QWORD *)(a2 + 200);
    v8 = v6;
    while (!AGX::Impl::VertexProgramKey::operator==(a2, v8) || v7 != *(_QWORD *)(v8 + 200))
    {
      ++v5;
      v8 += 208;
      if (v4 == v5)
        goto LABEL_8;
    }
    v9 = (_QWORD *)(v6 + 48 * v5);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 1032);
LABEL_8:
    v10 = *(_QWORD **)(v6 + 1024);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 200);
      v12 = 1;
      while (1)
      {
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)v10) && v11 == v10[25])
        {
          v12 = 0;
          goto LABEL_28;
        }
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)(v10 + 26)) && v11 == v10[51])
          goto LABEL_28;
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)(v10 + 52)) && v11 == v10[77])
          break;
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)(v10 + 78)) && v11 == v10[103])
        {
          v12 = 3;
          goto LABEL_28;
        }
        v10 = (_QWORD *)v10[128];
        if (!v10)
          goto LABEL_20;
      }
      v12 = 2;
LABEL_28:
      v9 = &v10[6 * v12];
    }
    else
    {
LABEL_20:
      if ((_DWORD)v4 == 4)
      {
        v6 = operator new();
        VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::Chunk((_OWORD *)v6);
        LODWORD(v4) = 0;
        *(_QWORD *)(v6 + 1024) = *(_QWORD *)(a1 + 1032);
        *(_QWORD *)(a1 + 1032) = v6;
        *(_DWORD *)(a1 + 1040) = 0;
      }
      v13 = v6 + 208 * v4;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
      if (v13 == a2)
      {
        std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a2 + 64));
      }
      else
      {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v13 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
        v14 = *(_OWORD *)(a2 + 40);
        *(_QWORD *)(v13 + 56) = *(_QWORD *)(a2 + 56);
        *(_OWORD *)(v13 + 40) = v14;
        std::string::operator=((std::string *)(v13 + 64), (const std::string *)(a2 + 64));
        *(_DWORD *)(v13 + 88) = *(_DWORD *)(a2 + 88);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v13 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v13 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 5);
      }
      std::string::operator=((std::string *)(v13 + 144), (const std::string *)(a2 + 144));
      std::string::operator=((std::string *)(v13 + 168), (const std::string *)(a2 + 168));
      *(_BYTE *)(v13 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(v6 + 208 * v4 + 200) = *(_QWORD *)(a2 + 200);
      v15 = *(_QWORD *)(a1 + 1032);
      v16 = *(_DWORD *)(a1 + 1040);
      *(_DWORD *)(a1 + 1040) = v16 + 1;
      v9 = (_QWORD *)(v15 + 48 * v16);
    }
  }
  return v9 + 104;
}

void sub_232C42588(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10B2C4049FF2409);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  void *v3[2];
  void *__p[2];
  __int128 v5;
  uint64_t v6;

  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)a1, (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v3[0]);
LABEL_3:
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)(a1 + 13), (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v3[0]);
LABEL_5:
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)(a1 + 26), (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v3[0]);
LABEL_7:
  v6 = 0;
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)(a1 + 39), (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_17:
    operator delete(v3[0]);
    goto LABEL_9;
  }
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_17;
LABEL_9:
  a1[52] = 0u;
  a1[53] = 0u;
  *(_OWORD *)((char *)a1 + 858) = 0u;
  a1[55] = 0u;
  a1[56] = 0u;
  *(_OWORD *)((char *)a1 + 906) = 0u;
  a1[58] = 0u;
  a1[59] = 0u;
  *(_OWORD *)((char *)a1 + 954) = 0u;
  a1[61] = 0u;
  a1[62] = 0u;
  *(_OWORD *)((char *)a1 + 1002) = 0u;
  return a1;
}

void sub_232C4276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  _Unwind_Resume(a1);
}

void sub_232C42780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void **v9;
  void **v10;

  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  do
  {
    v10 -= 26;
    AGX::VertexProgramKey::~VertexProgramKey(v10);
  }
  while (v10 != v9);
  _Unwind_Resume(a1);
}

BOOL AGX::Impl::VertexProgramKey::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void **v20;
  unsigned __int8 *v21;

  v2 = *(unsigned __int8 *)(a1 + 87);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 87);
  else
    v3 = *(_QWORD *)(a1 + 72);
  v4 = *(unsigned __int8 *)(a2 + 87);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 72);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 64);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 64);
  else
    v9 = *(unsigned __int8 **)(a2 + 64);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 72)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56)
    || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)
    || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)
    || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a1 + 96)
    || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a1 + 120))
  {
    return 0;
  }
  v10 = *(unsigned __int8 *)(a1 + 167);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 167);
  else
    v11 = *(_QWORD *)(a1 + 152);
  v12 = *(unsigned __int8 *)(a2 + 167);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 152);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 144);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 144);
  else
    v15 = *(unsigned __int8 **)(a2 + 144);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(_QWORD *)(a1 + 152)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 167))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_36;
    }
    return 0;
  }
LABEL_36:
  v16 = *(unsigned __int8 *)(a1 + 191);
  if ((v16 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(a1 + 191);
  else
    v17 = *(_QWORD *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a2 + 191);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a2 + 176);
  if (v17 != v18)
    return 0;
  v20 = (const void **)(a1 + 168);
  if (v19 >= 0)
    v21 = (unsigned __int8 *)(a2 + 168);
  else
    v21 = *(unsigned __int8 **)(a2 + 168);
  if ((v16 & 0x80) != 0)
  {
    if (!memcmp(*v20, v21, *(_QWORD *)(a1 + 176)))
      return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
    return 0;
  }
  if (*(_BYTE *)(a1 + 191))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16)
        return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
    }
    return 0;
  }
  return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, void *a7, uint64_t a8, __CFString *a9)
{
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  NSObject *v44;
  _OWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a2[68])
  {
    if (a2[69])
      v12 = (unsigned int **)(a2 + 68);
    else
      v12 = (unsigned int **)(a2 + 138);
  }
  else
  {
    v12 = (unsigned int **)(a2 + 138);
  }
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *v12;
  v15 = v12[1];
  if (v14)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = *v14;
    v18 = (char *)v14 + v17;
    v19 = (unsigned __int16 *)((char *)v14 + v17 - *(int *)((char *)v14 + v17));
    if (*v19 >= 9u)
    {
      v20 = v19[4];
      if (v20)
      {
        v21 = &v18[v20];
        v22 = *(unsigned int *)&v18[v20];
        if (*(_DWORD *)&v18[v20 + v22])
        {
          v23 = 0;
          v24 = 0;
          v25 = (uint64_t)v14 + v17 + v22 + v20 + 10;
          do
          {
            v26 = *(unsigned int *)(v25 - 6);
            v27 = v26 - *(int *)(v25 + v26 - 6);
            if (*(unsigned __int16 *)(v25 + v27 - 6) >= 7u && (v28 = *(unsigned __int16 *)(v25 + v27)) != 0)
              v29 = *(_QWORD *)(v25 + v26 + v28 - 6);
            else
              v29 = 0;
            if (getTimebaseInfo(void)::once[0] != -1)
            {
              v43 = v13;
              v44 = a5;
              dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
              v13 = v43;
              a5 = v44;
            }
            v24 += v29 * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo / unk_254235750;
            ++v23;
            v25 += 4;
          }
          while (v23 < *(unsigned int *)&v21[v22]);
        }
      }
    }
  }
  v30 = a8;
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
  {
    v31 = a5;
    IOGPUDeviceTraceEvent();
    a5 = v31;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    if (a8)
    {
      v32 = 1;
    }
    else
    {
      if (a2[33])
      {
        v33 = a2 + 33;
        if (!a2[34])
          v33 = a2 + 103;
      }
      else
      {
        v33 = a2 + 103;
      }
      v35 = *v33;
      v34 = v33[1];
      if (v35)
        v36 = v34 == 0;
      else
        v36 = 1;
      if (v36)
      {
        v30 = 0;
        v32 = 1;
      }
      else
      {
        v32 = 0;
        a9 = CFSTR("Internal error during function compilation");
        v30 = 2;
      }
    }
    v37 = *(_QWORD *)(a1 + 64);
    v38 = *(_QWORD *)(a1 + 72);
    memset(v48, 0, sizeof(v48));
    AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(v37, v38, a5, (uint64_t)v48, *(void **)(a1 + 32), v30);
    if (!v30)
    {
      v39 = (_QWORD *)operator new();
      AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::MeshProgramVariant((uint64_t)v39, (const AGCDeserializedReply *)a2);
      *v39 = &off_250402600;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v39;
    }
    v40 = *(_QWORD *)(a1 + 56);
    v41 = *(unsigned __int8 *)(a1 + 81);
    *(_QWORD *)(v40 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *(_QWORD *)(v40 + 16) = v30;

    *(_QWORD *)(v40 + 24) = -[__CFString copy](a9, "copy");
    if (*(_QWORD *)(v40 + 8))
    {

      *(_QWORD *)(v40 + 32) = a7;
    }
    else
    {
      if (v41)
        v42 = v32;
      else
        v42 = 0;
      *(_BYTE *)(v40 + 40) = v42;
    }
    dispatch_group_leave(*(dispatch_group_t *)v40);
  }
}

void sub_232C42D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10F3C40174EF3E0);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(a1[6] + 8);
  v1 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v1)
    v2 = v1 + 2936;
  else
    v2 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1[4] + 16))(a1[4], v2);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE35addRenderPipelineFunctionsToArchiveI27MTLRenderPipelineDescriptorEEbPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePP7NSError_block_invoke_3(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  void ***v9;
  _QWORD *v10;
  MTLRenderPipelineDescriptor *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  os_unfair_lock_s *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  _QWORD v27[6];
  _QWORD v28[11];
  char v29;

  if (a2)
  {
    v9 = (void ***)a1[8];
    v10 = (_QWORD *)a1[9];
    v12 = a1[4];
    v11 = (MTLRenderPipelineDescriptor *)a1[5];
    v13 = a1[10];
    v14 = a1[6];
    v15 = a1[7];
    if (v10[2])
    {
      v16 = (void *)v10[14];
      v17 = (os_unfair_lock_s *)v10[6];
      v18 = v10[10];
      v28[0] = MEMORY[0x24BDAC760];
      v28[1] = 3221225472;
      v28[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
      v28[3] = &unk_2503FFEF8;
      v28[4] = v11;
      v28[5] = v12;
      v28[8] = v9;
      v28[9] = v13;
      v28[10] = v10;
      v29 = 0;
      v28[6] = v14;
      v28[7] = v15;
      AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLRenderPipelineDescriptor>(v9, v11, v12, v13, v14, a7, v16, v17, a2, v18, 0, (uint64_t)v28);
    }
    else
    {
      v21 = (void *)v10[13];
      v22 = v10[5];
      v23 = v10[9];
      v27[1] = 3221225472;
      v27[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb1EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3;
      v27[3] = &unk_2503FFF20;
      v27[4] = v15;
      v27[5] = v9;
      v27[0] = MEMORY[0x24BDAC760];
      AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createVertexProgramVariant(v9, v11, v12, v13, v14, v21, v22, a2, v23, a7, 0, (uint64_t)v27);
    }
  }
  else
  {
    v19 = a1[7];
    if (a5 > 3)
      v20 = 5;
    else
      v20 = qword_232D76128[a5];
    v24 = (_QWORD *)a1[11];
    v25 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v26 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v20, v25);
    if (v19)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v19 + 16))(v19, 0, 0, v26);
    }
    else if (v24)
    {
      *v24 = v26;
    }
  }
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createFragmentProgramVariant<MTLRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, os_unfair_lock_s *a7, uint64_t a8, NSObject *a9, unsigned __int8 a10, uint64_t a11)
{
  NSObject *v17;
  unsigned __int8 v18;
  NSObject *v19;
  uint64_t v20;
  unsigned __int8 v21;
  dispatch_object_t *v22;
  int *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  int v26;
  uint64_t v29;
  int *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  MTLPixelFormat v42;
  AGX::G9::TextureFormatTable *v43;
  _BOOL4 v44;
  int v45;
  _QWORD *v46;
  MTLPixelFormat v47;
  int v48;
  AGX::G9::TextureFormatTable *v49;
  int v50;
  int v51;
  _QWORD *v52;
  MTLPixelFormat v53;
  AGX::G9::TextureFormatTable *v54;
  int v55;
  _QWORD *v56;
  MTLPixelFormat v57;
  AGX::G9::TextureFormatTable *v58;
  int v59;
  _QWORD *v60;
  MTLPixelFormat v61;
  int v62;
  AGX::G9::TextureFormatTable *v63;
  int v64;
  int v65;
  _QWORD *v66;
  MTLPixelFormat v67;
  AGX::G9::TextureFormatTable *v68;
  int v69;
  _QWORD *v70;
  MTLPixelFormat v71;
  AGX::G9::TextureFormatTable *v72;
  int v73;
  _QWORD *v74;
  MTLPixelFormat v75;
  int v76;
  AGX::G9::TextureFormatTable *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned __int16 v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  void *v90;
  int v91;
  char v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  void *v99;
  void *v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  int v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  float v124;
  float v125;
  int v126;
  int v127;
  unsigned int v128;
  float v129;
  int v131;
  int v132;
  void *v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unint64_t CompileOptions;
  uint64_t v149;
  dispatch_group_t *v150;
  char *v151;
  uint64_t v152;
  void *v153;
  unsigned int v154;
  void *v155;
  NSObject *v156;
  void *v157;
  void **v158;
  id *v159;
  NSObject *v160;
  NSObject *global_queue;
  uint64_t v162;
  void *v163;
  char *v164;
  char **v165;
  void *v166;
  char v167;
  void ***v168;
  uint64_t v169;
  _QWORD v172[6];
  char v173;
  std::string v174;
  std::string v175;
  _QWORD v176[2];
  void *v177;
  void *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  _DWORD v182[9];
  unsigned int v183;
  unsigned int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  std::string __p;
  std::string v189;
  void *v190;
  char v191;
  char v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  uint64_t v197;
  _QWORD v198[6];
  char *v199[5];
  uint64_t v200;
  _QWORD block[2];
  void (*v202)(uint64_t);
  void *v203;
  uint64_t v204;
  _QWORD *v205;
  dispatch_group_t *v206;
  os_unfair_lock_s *v207;
  uint64_t (**v208)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *);
  void *v209;
  void *v210;
  void *v211;
  char v212;
  void *v213;
  char v214;
  void *v215;
  char v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  _QWORD v224[8];
  __int128 v225;
  __int128 v226;
  _QWORD v227[10];
  uint64_t (**v228)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *);
  void *v229;
  void *v230;
  void *v231;
  char v232;
  void *v233;
  char v234;
  void *v235;
  char v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  uint64_t v241;
  os_unfair_lock_s *v242;
  unint64_t v243;
  unsigned __int8 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _BYTE v252[31];
  int v253;
  __int16 v254;
  int v255;
  void *v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  v198[0] = 0;
  v198[1] = v198;
  v198[2] = 0x3052000000;
  v198[3] = __Block_byref_object_copy_;
  v198[4] = __Block_byref_object_dispose_;
  v198[5] = 0;
  v169 = objc_msgSend(a2, "fragmentFunction");
  v168 = a1;
  if (objc_msgSend(a2, "openGLModeEnabled"))
    v17 = a9;
  else
    v17 = 0;
  if ((v18 & 1) == 0
  {
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    v19 = objc_msgSend(a2, "newPipelineScript");
    v20 = operator new();
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)v20 = dispatch_data_create_map(v19, (const void **)(v20 + 8), (size_t *)(v20 + 16));
    dispatch_release(v19);
    v200 = v20;
    if ((v21 & 1) == 0
    {
    }
    v22 = (dispatch_object_t *)v200;
    v23 = (int *)(*(_QWORD *)(v200 + 8) + **(unsigned int **)(v200 + 8));
    v24 = (unsigned __int16 *)((char *)v23 - *v23);
    v25 = *v24;
    if (v25 >= 9 && v24[4])
    {
      v26 = *((unsigned __int8 *)v23 + v24[4]);
      if (v25 >= 0xB && v26 == 1)
      {
        v34 = v24[5];
        if (v34)
        {
          v35 = (int *)((char *)v23 + v34 + *(unsigned int *)((char *)v23 + v34));
          v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 0xBu && (v37 = v36[5]) != 0)
            v38 = (int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          else
            v38 = 0;
          v162 = objc_msgSend(a2, "meshFunction");
          ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(v199, a6);
          v163 = (void *)objc_msgSend(a2, "fragmentLinkedFunctions");
          v249 = 0uLL;
          *(_QWORD *)&v250 = 0;
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v249, (void *)objc_msgSend(v163, "functions"), 0);
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v249, (void *)objc_msgSend(v163, "privateFunctions"), 1u);
          AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateFragmentProgramKey((uint64_t)v176, v38, v162 != 0, v17, v199, (char **)&v249);
          if ((_QWORD)v249)
          {
            *((_QWORD *)&v249 + 1) = v249;
            operator delete((void *)v249);
          }
          v164 = v199[0];
          if (!v199[0])
            goto LABEL_247;
          v165 = v199;
          goto LABEL_246;
        }
      }
      else if (v25 >= 0xB && v26 == 4)
      {
        v29 = v24[5];
        if (v29)
        {
          v30 = (int *)((char *)v23 + v29 + *(unsigned int *)((char *)v23 + v29));
          v31 = (unsigned __int16 *)((char *)v30 - *v30);
          if (*v31 >= 0xFu && (v32 = v31[7]) != 0)
            v33 = (int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
          else
            v33 = 0;
          ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&v247, a6);
          v166 = (void *)objc_msgSend(a2, "fragmentLinkedFunctions");
          v249 = 0uLL;
          *(_QWORD *)&v250 = 0;
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v249, (void *)objc_msgSend(v166, "functions"), 0);
          ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&v249, (void *)objc_msgSend(v166, "privateFunctions"), 1u);
          AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateFragmentProgramKey((uint64_t)v176, v33, 1, v17, (char **)&v247, (char **)&v249);
          if ((_QWORD)v249)
          {
            *((_QWORD *)&v249 + 1) = v249;
            operator delete((void *)v249);
          }
          v164 = (char *)v247;
          if (!(_QWORD)v247)
            goto LABEL_247;
          v165 = (char **)&v247;
LABEL_246:
          v165[1] = v164;
          operator delete(v164);
LABEL_247:
          dispatch_release(*v22);
          MEMORY[0x234927ECC](v22, 0x10C0C40495EAE30);
          goto LABEL_163;
        }
      }
    }
    dispatch_release(*(dispatch_object_t *)v200);
    MEMORY[0x234927ECC](v22, 0x10C0C40495EAE30);
  }
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)v176, v17, (void *)objc_msgSend(a2, "fragmentLinkedFunctions"), a6);
  v251 = 0u;
  memset(v252, 0, sizeof(v252));
  v249 = 0u;
  v250 = 0u;
  v253 = 1;
  v254 = 0;
  v255 = 0;
  v257 = 0u;
  v258 = 0u;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0;
  bzero(&v249, 0x28uLL);
  v39 = objc_msgSend(a2, "_descriptorPrivate");
  v40 = *(id *)v39;
  v41 = (_QWORD *)objc_msgSend((id)objc_msgSend(*(id *)v39, "_descriptorAtIndex:", 0), "_descriptorPrivate");
  if (v41)
    v43 = (AGX::G9::TextureFormatTable *)(*v41 >> 36);
  else
    v43 = 0;
  v256 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v43, v42);
  v44 = v43 != 0;
  v45 = DWORD2(v251);
  v46 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 1), "_descriptorPrivate");
  v48 = v45 | v44;
  if (v46)
  {
    v49 = (AGX::G9::TextureFormatTable *)(*v46 >> 36);
    *(_QWORD *)&v257 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v49, v47);
    if (v49)
    {
      v50 = 2;
      goto LABEL_35;
    }
  }
  else
  {
    *(_QWORD *)&v257 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v47);
  }
  v50 = 0;
LABEL_35:
  v51 = v48 | v50;
  DWORD2(v251) = v51;
  v52 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 2), "_descriptorPrivate");
  if (v52)
  {
    v54 = (AGX::G9::TextureFormatTable *)(*v52 >> 36);
    *((_QWORD *)&v257 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v54, v53);
    if (v54)
    {
      v55 = 4;
      goto LABEL_40;
    }
  }
  else
  {
    *((_QWORD *)&v257 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v53);
  }
  v55 = 0;
LABEL_40:
  v56 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 3), "_descriptorPrivate");
  if (v56)
  {
    v58 = (AGX::G9::TextureFormatTable *)(*v56 >> 36);
    *(_QWORD *)&v258 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v58, v57);
    if (v58)
    {
      v59 = 8;
      goto LABEL_45;
    }
  }
  else
  {
    *(_QWORD *)&v258 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v57);
  }
  v59 = 0;
LABEL_45:
  v60 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 4), "_descriptorPrivate");
  v62 = v55 | v59;
  if (v60)
  {
    v63 = (AGX::G9::TextureFormatTable *)(*v60 >> 36);
    *((_QWORD *)&v258 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v63, v61);
    if (v63)
    {
      v64 = 16;
      goto LABEL_50;
    }
  }
  else
  {
    *((_QWORD *)&v258 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v61);
  }
  v64 = 0;
LABEL_50:
  v65 = v62 | v64 | v51;
  DWORD2(v251) = v65;
  v66 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 5), "_descriptorPrivate");
  if (v66)
  {
    v68 = (AGX::G9::TextureFormatTable *)(*v66 >> 36);
    *(_QWORD *)&v259 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v68, v67);
    if (v68)
    {
      v69 = 32;
      goto LABEL_55;
    }
  }
  else
  {
    *(_QWORD *)&v259 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v67);
  }
  v69 = 0;
LABEL_55:
  v70 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 6), "_descriptorPrivate");
  if (v70)
  {
    v72 = (AGX::G9::TextureFormatTable *)(*v70 >> 36);
    *((_QWORD *)&v259 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v72, v71);
    if (v72)
    {
      v73 = 64;
      goto LABEL_60;
    }
  }
  else
  {
    *((_QWORD *)&v259 + 1) = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v71);
  }
  v73 = 0;
LABEL_60:
  v74 = (_QWORD *)objc_msgSend((id)objc_msgSend(v40, "_descriptorAtIndex:", 7), "_descriptorPrivate");
  v76 = v69 | v73;
  if (!v74)
  {
    *(_QWORD *)&v260 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(0, v75);
    goto LABEL_64;
  }
  v77 = (AGX::G9::TextureFormatTable *)(*v74 >> 36);
  *(_QWORD *)&v260 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(v77, v75);
  if (!v77)
  {
LABEL_64:
    v78 = 0;
    goto LABEL_65;
  }
  v78 = 128;
LABEL_65:
  DWORD2(v251) = v76 | v78 | v65;
  v79 = *(_QWORD *)(v39 + 184);
  if (!v79)
    LOBYTE(v79) = objc_msgSend(a2, "sampleCount");
  LOBYTE(v254) = v79;
  v80 = *(_QWORD *)(v39 + 216);
  if (!v80)
    LOBYTE(v80) = objc_msgSend(a2, "sampleCount");
  HIBYTE(v254) = v80;
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((uint64_t)&v249);
  v185 = v249;
  v186 = v250;
  v187 = v251;
  v81 = (void *)objc_msgSend(a2, "driverCompilerOptions");
  v82 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count");
  v83 = objc_msgSend(a2, "supportAddingFragmentBinaryFunctions");
  if (objc_msgSend((id)objc_msgSend(v81, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v84 = 4;
  else
    v84 = 0;
  v183 = v183 & 0xFFFFFFFB | v84;
  v85 = objc_msgSend((id)objc_msgSend(v81, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue");
  v183 = v183 & 0xFC0003FF | (v85 << 10);
  if (objc_msgSend((id)objc_msgSend(v81, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v86 = 0x8000000;
  else
    v86 = 0;
  if (v82)
    v87 = 1;
  else
    v87 = v83;
  if (v87)
    v88 = 512;
  else
    v88 = 0;
  v183 = v86 | v183 & 0xF7FFFDFF | v88;
  v89 = 0;
  v90 = *(void **)objc_msgSend(a2, "_descriptorPrivate");
  do
  {
    v99 = (void *)objc_msgSend(v90, "_descriptorAtIndex:", v89);
    v100 = v99;
    if (v99 && objc_msgSend(v99, "pixelFormat"))
    {
      if (objc_msgSend(v100, "isBlendingEnabled"))
      {
        v182[v89] |= 1u;
        v101 = objc_msgSend(v100, "sourceRGBBlendFactor");
        v102 = 2 * v101 + 2;
        if (v101 >= 0x13)
          v102 = 0;
        v182[v89] = v182[v89] & 0xFFFFFFC1 | v102;
        v103 = objc_msgSend(v100, "destinationRGBBlendFactor");
        v104 = ((_DWORD)v103 << 6) + 64;
        if (v103 >= 0x13)
          v104 = 0;
        v182[v89] = v182[v89] & 0xFFFFF83F | v104;
        v105 = objc_msgSend(v100, "sourceAlphaBlendFactor");
        v106 = ((_DWORD)v105 << 11) + 2048;
        if (v105 >= 0x13)
          v106 = 0;
        v182[v89] = v182[v89] & 0xFFFF07FF | v106;
        v107 = objc_msgSend(v100, "destinationAlphaBlendFactor");
        v108 = ((_DWORD)v107 << 16) + 0x10000;
        if (v107 >= 0x13)
          v108 = 0;
        v182[v89] = v182[v89] & 0xFFE0FFFF | v108;
        v109 = objc_msgSend(v100, "rgbBlendOperation");
        if (v109 > 4)
          v110 = 0;
        else
          v110 = dword_232D7C750[v109];
        v182[v89] = v182[v89] & 0xFF1FFFFF | v110;
        v111 = objc_msgSend(v100, "alphaBlendOperation");
        if (v111 <= 4)
          v91 = dword_232D7C764[v111];
        else
          v91 = 0;
        v182[v89] = v182[v89] & 0xF8FFFFFF | v91;
      }
      v92 = objc_msgSend(v100, "writeMask");
      v93 = 1 << v89;
      if ((v92 & 8) == 0)
        v93 = 0;
      v94 = 256 << v89;
      if ((v92 & 4) == 0)
        LOWORD(v94) = 0;
      v95 = ((unsigned __int16)v94 | (unsigned __int16)v180) & 0xFF00;
      v96 = 0x10000 << v89;
      if ((v92 & 2) == 0)
        v96 = 0;
      v97 = (v96 | v180) & 0xFF0000;
      v98 = 0x1000000 << v89;
      if ((v92 & 1) == 0)
        v98 = 0;
      v180 = v180 & 0xFF0000FF | v98 | v93 | v95 | v97;
    }
    ++v89;
  }
  while (v89 != 8);
  if (objc_msgSend(a2, "isLogicOperationEnabled"))
    v112 = 32;
  else
    v112 = 0;
  v179 = v179 & 0xFFFFFFDF | v112;
  v113 = objc_msgSend(a2, "logicOperation");
  if (v113 > 0xF)
    v114 = 0;
  else
    v114 = dword_232D7C6F0[v113];
  v179 = v179 & 0xFFFFF83F | v114;
  if (objc_msgSend(a2, "isAlphaTestEnabled"))
    v115 = 2048;
  else
    v115 = 0;
  v179 = v179 & 0xFFFFF7FF | v115;
  v116 = objc_msgSend(a2, "alphaTestFunction");
  if (v116 > 7)
    v117 = 0;
  else
    v117 = dword_232D7C730[v116];
  v179 = v179 & 0xFFFF0FFF | v117;
  if (objc_msgSend(a2, "isPointSmoothEnabled"))
    v118 = 0x10000;
  else
    v118 = 0;
  v179 = v179 & 0xFFFAFFFF | ((HIWORD(v118) & 1) << 18) | v118;
  v182[8] = objc_msgSend(a2, "fragmentDepthCompareClampMask");
  if (objc_msgSend(a2, "isDepthStencilWriteDisabled"))
    v119 = 16;
  else
    v119 = 0;
  v179 = v179 & 0xFFFFFFEF | v119;
  v120 = objc_msgSend(a2, "sampleMask");
  v121 = objc_msgSend(a2, "isAlphaToCoverageEnabled");
  v179 = v179 & 0xFFFFFFFE | v121;
  if (objc_msgSend(a2, "isAlphaToOneEnabled"))
    v122 = 2;
  else
    v122 = 0;
  v179 = v179 & 0xFFFFFFFD | v122;
  if ((objc_msgSend(a2, "openGLModeEnabled") & 1) != 0)
  {
    v123 = objc_msgSend(a2, "sampleCoverageInvert");
    objc_msgSend(a2, "sampleCoverage");
    v125 = 1.0;
    if (v123)
      v125 = 0.0;
    v126 = 4 * (v124 != v125);
    if (v120 != -1)
      v126 = 4;
    v179 = v179 & 0xFFFFFFFB | v126;
    if (objc_msgSend(a2, "sampleCoverageInvert"))
      v127 = 8;
    else
      v127 = 0;
    v128 = v179 & 0xFFFFFFF7 | v127;
  }
  else
  {
    objc_msgSend(a2, "sampleCoverage");
    if (v120 == -1 && v129 == 1.0)
      v131 = 0;
    else
      v131 = 4;
    v128 = v131 | v179 & 0xFFFFFFFB;
  }
  v179 = v128;
  v184 &= 0xFFFFFFFC;
  if (objc_msgSend(a2, "openGLModeEnabled"))
    v132 = 2;
  else
    v132 = 0;
  v184 = v184 & 0xFFFFFFFD | v132;
  v133 = (void *)objc_msgSend(a2, "fragmentBuffers");
  v134 = 0;
  for (i = 0; i != 31; ++i)
  {
    v136 = objc_msgSend((id)objc_msgSend(v133, "_descriptorAtIndex:", i), "mutability");
    v137 = 1 << i;
    if (v136 != 1)
      v137 = 0;
    v134 |= v137;
  }
  v181 = v134;
  v192 = objc_msgSend(a2, "supportIndirectCommandBuffers");
  if (objc_msgSend(a2, "needsCustomBorderColorSamplers"))
    v138 = 4;
  else
    v138 = 0;
  v184 = v184 & 0xFFFFFFFB | v138;
  v139 = objc_msgSend(a2, "textureWriteRoundingMode");
  v140 = 16 * (v139 == 1);
  if (v139 == 2)
    v140 = 32;
  v184 = v140 | v184 & 0xFFFFFFCF;
  v141 = objc_msgSend(a2, "meshFunction");
  v184 = v184 & 0xFFFFFEFF | ((v141 != 0) << 8);
  if ((objc_msgSend(a2, "supportAddingFragmentBinaryFunctions") & 1) != 0)
    v142 = 64;
  else
    v142 = (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count") != 0) << 6;
  v184 = v184 & 0xFFFFFDBF | v142;
  v183 &= ~0x80u;
  objc_msgSend(a2, "supportIndirectCommandBuffers");
LABEL_163:
  v143 = *(_QWORD *)(a3 + 808);
  if (*(_BYTE *)(v143 + 6360))
    v144 = 67109120;
  else
    v144 = 256;
  v145 = v144 | v183 & 0x8BFFFEFF;
  v146 = v184 & 0xFFFFF7F7 | (*(_DWORD *)(v143 + 6224) >> 7) & 8;
  v183 = v145;
  v184 = v146;
  v197 = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1)
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
    v147 = 1;
    v145 = v183;
    v146 = v184;
  }
  else
  {
    v147 = 0;
  }
  v183 = (a4 >> 21) & 8 | v147 | v145 & 0xFFFFFFF4;
  v184 = v146 & 0xFFFFFF7F | (((a4 >> 21) & 1) << 7);
  if (a8)
  {
    if (*(char *)(a8 + 23) < 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
    else
      v174 = *(std::string *)a8;
    if (*(char *)(a8 + 47) < 0)
      std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)(a8 + 24), *(_QWORD *)(a8 + 32));
    else
      v175 = *(std::string *)(a8 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v174;
    *((_BYTE *)&v174.__r_.__value_.__s + 23) = 0;
    v174.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v189.__r_.__value_.__l.__data_);
    v189 = v175;
    *((_BYTE *)&v175.__r_.__value_.__s + 23) = 0;
    v175.__r_.__value_.__s.__data_[0] = 0;
  }
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v249, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
  v247 = v249;
  v248 = v250;
  CompileOptions = AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a7, a4 | 3, (uint64_t)&v247);
  LOBYTE(v200) = 0;
  v149 = AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a7, (uint64_t)v176, &v200, CompileOptions, a5 != 0);
  v150 = (dispatch_group_t *)v149;
  v151 = (char *)MEMORY[0x24BDAC760];
  if ((_BYTE)v200)
  {
    v152 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    v153 = (void *)objc_msgSend(a2, "pipelineLibrary");
    if (objc_msgSend(v153, "pipelineCache") && (objc_msgSend(v153, "disableRunTimeCompilation") & 1) != 0)
      LOBYTE(v154) = 1;
    else
      v154 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    v167 = v154;
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
      IOGPUDeviceTraceEvent();
    v155 = (void *)objc_opt_new();
    objc_msgSend(v155, "setSync:", a10 ^ 1u);
    objc_msgSend(v155, "setFunction:", v169);
    objc_msgSend(v155, "setFrameworkData:", a9);
    objc_msgSend(v155, "setPipelineCache:", v152);
    objc_msgSend(v155, "setDestinationBinaryArchive:", a5);
    objc_msgSend(v155, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    objc_msgSend(v155, "setPipelineOptions:", a4 | 3);
    if ((a4 & 0x330003) == 0)
      objc_msgSend(v155, "setPipelineOptions:", objc_msgSend(v155, "pipelineOptions") | 0x8000);
    v156 = objc_msgSend(a2, "newPipelineScript");
    if (v156)
    {
      objc_msgSend(v155, "setAirScript:", v156);
      dispatch_release(v156);
    }
    objc_msgSend(v155, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v157 = (void *)objc_msgSend(a2, "fragmentLinkedFunctions");
    objc_msgSend(v155, "setVisibleFunctions:", objc_msgSend(v157, "functions"));
    objc_msgSend(v155, "setVisibleFunctionGroups:", objc_msgSend(v157, "groups"));
    objc_msgSend(v155, "setPrivateVisibleFunctions:", objc_msgSend(v157, "privateFunctions"));
    v227[0] = v151;
    v227[1] = 3321888768;
    v227[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke;
    v227[3] = &unk_250400E08;
    v227[7] = v198;
    v227[4] = v169;
    v244 = a10;
    v227[8] = v168;
    v227[9] = v150;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v228, (const AGX::Impl::FragmentProgramKey *)v176);
    v228 = &off_250401D90;
    v241 = v197;
    v242 = a7;
    v243 = CompileOptions;
    v245 = v247;
    v246 = v248;
    v227[5] = a3;
    v227[6] = a2;
    v172[0] = v151;
    v172[1] = 3221225472;
    v172[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_195;
    v172[3] = &unk_250400E40;
    v172[4] = v227;
    v172[5] = v150;
    v173 = v167;
    v158 = *v168;
    v199[0] = v151;
    v199[1] = (char *)3221225472;
    v199[2] = (char *)___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_18FragmentProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
    v199[3] = (char *)&unk_250400D80;
    v199[4] = (char *)v172;
    *(_QWORD *)&v249 = v151;
    *((_QWORD *)&v249 + 1) = 3221225472;
    *(_QWORD *)&v250 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    *((_QWORD *)&v250 + 1) = &unk_2504023B8;
    *(_QWORD *)&v251 = v199;
    AGX::Compiler::compileProgram<AGX::FragmentProgramKey,AGCDeserializedReply>(v158, (uint64_t)v176, v155, (uint64_t)&v249);

    v228 = &off_250402A40;
    if (v239)
    {
      v240 = v239;
      operator delete(v239);
    }
    if (v237)
    {
      v238 = v237;
      operator delete(v237);
    }
    if (v236 < 0)
    {
      operator delete(v235);
      if ((v234 & 0x80000000) == 0)
      {
LABEL_200:
        if ((v232 & 0x80000000) == 0)
          goto LABEL_201;
LABEL_235:
        operator delete(v231);
LABEL_201:
        v228 = (uint64_t (**)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *))off_250401D50;
        if (v229)
        {
          v230 = v229;
          operator delete(v229);
        }
        goto LABEL_205;
      }
    }
    else if ((v234 & 0x80000000) == 0)
    {
      goto LABEL_200;
    }
    operator delete(v233);
    if ((v232 & 0x80000000) == 0)
      goto LABEL_201;
    goto LABEL_235;
  }
  if ((CompileOptions & 0x330003) != 0)
  {
    v159 = *v168;
    v224[0] = MEMORY[0x24BDAC760];
    v224[1] = 3221225472;
    v224[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2;
    v224[3] = &unk_250400D20;
    v225 = v247;
    v226 = v248;
    v224[5] = a7;
    v224[4] = a3;
    v224[6] = CompileOptions;
    v224[7] = v149;
    objc_msgSend(*v159, "reflectionWithFunction:options:sync:completionHandler:", v169, CompileOptions & 0x330003, a10 ^ 1u, v224);
  }
LABEL_205:
  block[0] = v151;
  block[1] = 3321888768;
  v202 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3;
  v203 = &unk_250400E68;
  v206 = v150;
  v207 = a7;
  AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v208, (const AGX::Impl::FragmentProgramKey *)v176);
  v208 = &off_250401D90;
  v221 = v197;
  v222 = v247;
  v223 = v248;
  v204 = a11;
  v205 = v198;
  v160 = *v150;
  if (a10)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v160, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*v150, 0xFFFFFFFFFFFFFFFFLL);
    v202((uint64_t)block);
  }
  v208 = &off_250402A40;
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if ((v216 & 0x80000000) == 0)
  {
    if ((v214 & 0x80000000) == 0)
      goto LABEL_214;
LABEL_228:
    operator delete(v213);
    if ((v212 & 0x80000000) == 0)
      goto LABEL_215;
    goto LABEL_229;
  }
  operator delete(v215);
  if (v214 < 0)
    goto LABEL_228;
LABEL_214:
  if ((v212 & 0x80000000) == 0)
    goto LABEL_215;
LABEL_229:
  operator delete(v211);
LABEL_215:
  v208 = (uint64_t (**)(AGX::Impl::FragmentProgramKey *__hidden, CC_SHA256state_st *))off_250401D50;
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  v176[0] = &off_250402A40;
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if ((v191 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_223;
LABEL_231:
    operator delete(v189.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_224;
    goto LABEL_232;
  }
  operator delete(v190);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_231;
LABEL_223:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_224;
LABEL_232:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_224:
  v176[0] = off_250401D50;
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  _Block_object_dispose(v198, 8);
}

void sub_232C4439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v69;
  void *v70;

  v69 = (void *)STACK[0x5E0];
  if (STACK[0x5E0])
  {
    STACK[0x5E8] = (unint64_t)v69;
    operator delete(v69);
  }
  v70 = (void *)STACK[0x5C0];
  if (STACK[0x5C0])
  {
    STACK[0x5C8] = (unint64_t)v70;
    operator delete(v70);
  }
  std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100]((dispatch_object_t **)&STACK[0x230]);
  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, const __CFString **a5, _BYTE *a6)
{
  void *v11;
  void *v12;
  const __CFString **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  void *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v42;
  uint64_t v43;
  void *__dst[2];
  unint64_t v45;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 384));
  v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    v12 = (void *)objc_msgSend(v11, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v12)
      objc_msgSend(v12, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  *a4 = *(_QWORD *)(a3 + 40);
  v13 = a5;
  *a5 = *(const __CFString **)(a3 + 48);
  *a6 = 0;
  v14 = *a4;
  if (!*a4)
  {
    if (a2[33])
    {
      v15 = a2 + 33;
      if (!a2[34])
        v15 = a2 + 103;
      if (!*v15)
        goto LABEL_14;
    }
    else
    {
      v15 = a2 + 103;
      if (!a2[103])
        goto LABEL_14;
    }
    if (v15[1])
      goto LABEL_21;
LABEL_14:
    if (a2[63])
    {
      v16 = a2 + 63;
      if (!a2[64])
        v16 = a2 + 133;
      if (!*v16)
        goto LABEL_22;
    }
    else
    {
      v16 = a2 + 133;
      if (!a2[133])
        goto LABEL_22;
    }
    if (v16[1])
    {
LABEL_21:
      *a4 = 2;
      *a5 = CFSTR("Internal error during function compilation");
      *a6 = 1;
      v14 = *a4;
      if (*a4)
        goto LABEL_26;
    }
LABEL_22:
    if (*(_BYTE *)(a1 + 304)
      && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
    {
      *a4 = 2;
      *a5 = CFSTR("Fragment shader cannot be used with indirect command buffers");
      *a6 = 1;
      v14 = *a4;
    }
    else
    {
      v14 = 0;
    }
  }
LABEL_26:
  AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(NSObject **)(a3 + 16), a1 + 385, *(void **)(a1 + 40), v14);
  if (*a4)
    return 0;
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  v17 = operator new();
  v18 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v18)
    v19 = (const char *)v18;
  else
    v19 = "";
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = (void *)v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    v25 = (void **)operator new(v26 + 1);
    __dst[1] = v24;
    v45 = v27 | 0x8000000000000000;
    __dst[0] = v25;
    goto LABEL_38;
  }
  HIBYTE(v45) = v20;
  v25 = __dst;
  if (v20)
LABEL_38:
    memmove(v25, v19, (size_t)v24);
  *((_BYTE *)v24 + (_QWORD)v25) = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(&v42, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)2, 0, *(_QWORD *)(a1 + 368) + 1696, *(_QWORD *)(a1 + 136), 0, 0, v21, v22, v23, 0);
  AGX::FragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::FragmentProgramVariant();
  *(_QWORD *)v17 = &off_2504025A0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&v42);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
  v28 = 0x10000;
  if (!*(_BYTE *)(v17 + 379))
    v28 = 4096;
  if (v28 < *(unsigned int *)(v17 + 320))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v17 = 0;
    *a4 = 2;
    v29 = CFSTR("Fragment function exceeds available stack space");
LABEL_45:
    *v13 = v29;
    return v17;
  }
  if (*(_BYTE *)(a1 + 304) && !*(_QWORD *)(v17 + 2360))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v17 = 0;
    *a4 = 2;
    v29 = CFSTR("Internal error during function compilation");
    goto LABEL_45;
  }
  v30 = 0x20400000000;
  if (!*(_BYTE *)(v17 + 3219))
    v30 = 0x400000001;
  v31 = 0x40000000000;
  if (!*(_BYTE *)(v17 + 3220))
    v31 = 1;
  v42 = v31 | v30;
  v43 = 0;
  v32 = 82;
  if (!*(_BYTE *)(v17 + 3224))
    v32 = 0;
  *(uint64_t *)((char *)&v42 + ((v32 >> 3) & 8)) |= 1 << (v32 & 0x3E);
  if (*(_QWORD *)(v17 + 400))
    v33 = 0x400000000000;
  else
    v33 = 1;
  v34 = v43;
  v35 = v33 | v42;
  v42 = v35;
  v36 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 | v35, v36));
  v38 = v36 + 1;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 | v34, v38));
  return v17;
}

void sub_232C44984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  MEMORY[0x234927ECC](v3, 0x10F3C400724793BLL);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_195(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  BOOL v12;
  char v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6 = *(_QWORD *)(a1 + 40);
  v8 = v15;
  v7 = v16;
  v9 = *(void **)(a3 + 32);
  v10 = *(unsigned __int8 *)(a1 + 48);
  v11 = v14;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 16) = v7;

  *(_QWORD *)(v6 + 24) = objc_msgSend(v8, "copy");
  if (*(_QWORD *)(v6 + 8))
  {

    *(_QWORD *)(v6 + 32) = v9;
  }
  else
  {
    if (v10)
      v12 = v11 == 0;
    else
      v12 = 0;
    v13 = v12;
    *(_BYTE *)(v6 + 40) = v13;
  }
  dispatch_group_leave(*(dispatch_group_t *)v6);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  dispatch_object_t object[2];
  id v7[4];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(*(_QWORD *)(a1 + 48) + 32);
  *(_OWORD *)object = 0u;
  memset(v7, 0, 26);
  v3 = AGX::Program<AGX::G9::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(_QWORD *)(a1 + 48), a1 + 64, object);
  v4 = v3[1];
  v5 = *(_OWORD *)(a1 + 368);
  v8[0] = *(_OWORD *)(a1 + 352);
  v8[1] = v5;
  (*(void (**)(_QWORD, uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0])
    dispatch_release(object[0]);
  if (object[1])
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);

}

void sub_232C44BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateVertexProgramKey(uint64_t a1, MTLRenderPipelineDescriptor *a2, NSObject *a3, uint64_t a4, int a5, void *a6, int a7)
{
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  int *v19;
  unsigned __int16 *v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  int *v27;
  __int128 v28;
  uint64_t v29;
  MTLLinkedFunctions *v31;
  void *v32[2];
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  char v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void *v40[3];
  std::string v41;
  std::string v42;
  char v43;
  uint64_t v44;

  if ((v14 & 1) == 0
  {
    AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    v15 = -[MTLRenderPipelineDescriptor newPipelineScript](a2, "newPipelineScript");
    v16 = operator new();
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)v16 = dispatch_data_create_map(v15, (const void **)(v16 + 8), (size_t *)(v16 + 16));
    dispatch_release(v15);
    v44 = v16;
    if ((v17 & 1) == 0
    {
    }
    v18 = v44;
    v19 = (int *)(*(_QWORD *)(v18 + 8) + **(unsigned int **)(v18 + 8));
    v20 = (unsigned __int16 *)((char *)v19 - *v19);
    v21 = *v20;
    if (v21 >= 9
      && v20[4]
      && (v21 >= 0xB ? (v22 = *((_BYTE *)v19 + v20[4]) == 1) : (v22 = 0), v22 && (v23 = v20[5]) != 0))
    {
      v24 = (int *)((char *)v19 + v23 + *(unsigned int *)((char *)v19 + v23));
    }
    else
    {
      v24 = 0;
    }
    v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 9u && (v26 = v25[4]) != 0)
    {
      v27 = (int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
      if (*(char *)(a4 + 23) < 0)
      {
LABEL_17:
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        goto LABEL_20;
      }
    }
    else
    {
      v27 = 0;
      if (*(char *)(a4 + 23) < 0)
        goto LABEL_17;
    }
    v41 = *(std::string *)a4;
LABEL_20:
    if (*(char *)(a4 + 47) < 0)
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a4 + 24), *(_QWORD *)(a4 + 32));
    else
      v42 = *(std::string *)(a4 + 24);
    v43 = *(_BYTE *)(a4 + 48);
    ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)v40, a6);
    v31 = -[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions");
    __p = 0;
    v38 = 0;
    v39 = 0;
    ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__p, -[MTLLinkedFunctions functions](v31, "functions"), 0);
    ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__p, -[MTLLinkedFunctions privateFunctions](v31, "privateFunctions"), 1u);
    AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateVertexProgramKey(a1, v27, (uint64_t)&v41, a3, (char **)v40, (char **)&__p, a5);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if (v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_34;
    }
    else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_34:
      dispatch_release(*(dispatch_object_t *)v18);
      return MEMORY[0x234927ECC](v18, 0x10C0C40495EAE30);
    }
    operator delete(v41.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  *(_OWORD *)v32 = *(_OWORD *)a4;
  v33 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v28 = *(_OWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)v34 = v28;
  v35 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v36 = *(_BYTE *)(a4 + 48);
  AGX::VertexProgramKey::VertexProgramKey(a1, (uint64_t)v32, a3, -[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions"), a6, a5);
  if (SHIBYTE(v35) < 0)
  {
    operator delete(v34[0]);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_39:
    operator delete(v32[0]);
    goto LABEL_24;
  }
  if (SHIBYTE(v33) < 0)
    goto LABEL_39;
LABEL_24:
  AGX::VertexProgramKey::initCommon((AGX::VertexProgramKey *)a1, a2);
  *(_DWORD *)(a1 + 52) &= ~0x80u;
  v29 = 0x8000000;
  if (!a7)
    v29 = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFF7FFFFFFLL | v29;
  return -[MTLRenderPipelineDescriptor supportIndirectCommandBuffers](a2, "supportIndirectCommandBuffers");
}

void sub_232C44F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100]((dispatch_object_t **)(v28 - 88));
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  double v18;
  double v19;
  int8x16_t v20;
  std::string::size_type v21;
  std::string *p_dst;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  char v34;
  char v35;
  uint64_t v36[54];
  std::string __dst;
  _DWORD v38[8];

  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(__CFString **)(a3 + 48);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 112));
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_msgSend(v8, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v9)
      objc_msgSend(v9, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (v7)
  {
    v10 = 1;
    goto LABEL_24;
  }
  if (a2[33])
  {
    v11 = a2 + 33;
    if (!a2[34])
      v11 = a2 + 103;
    if (!*v11)
      goto LABEL_15;
  }
  else
  {
    v11 = a2 + 103;
    if (!a2[103])
      goto LABEL_15;
  }
  if (v11[1])
    goto LABEL_22;
LABEL_15:
  if (!a2[63])
  {
    v12 = a2 + 133;
    if (!a2[133])
      goto LABEL_62;
    goto LABEL_21;
  }
  v12 = a2 + 63;
  if (!a2[64])
    v12 = a2 + 133;
  if (*v12)
  {
LABEL_21:
    if (!v12[1])
      goto LABEL_62;
LABEL_22:
    v10 = 0;
    v6 = CFSTR("Internal error during function compilation");
LABEL_23:
    v7 = 2;
    goto LABEL_24;
  }
LABEL_62:
  if (*(_BYTE *)(a1 + 113)
    && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
  {
    v10 = 0;
    v6 = CFSTR("Vertex shader cannot be used with indirect command buffers");
    goto LABEL_23;
  }
  v7 = 0;
  v10 = 1;
LABEL_24:
  AGX::Program<AGX::G9::VertexProgramVariant,AGX::VertexProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 114, *(void **)(a1 + 40), v7);
  if (v7)
  {
    v13 = 0;
    goto LABEL_55;
  }
  v35 = v10;
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v38, a2);
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  v13 = operator new();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 808);
  v15 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v15)
    v16 = (const char *)v15;
  else
    v16 = "";
  v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v21 = v17;
  if (v17 >= 0x17)
  {
    v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v23 = v17 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_36;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
  p_dst = &__dst;
  if (v17)
LABEL_36:
    memmove(p_dst, v16, v21);
  p_dst->__r_.__value_.__s.__data_[v21] = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v36, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)1, 0, *(_QWORD *)(a1 + 80) + 1376, *(_QWORD *)(a1 + 104), 0, 0, v18, v19, v20, 0);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant(v13, v14, (uint64_t)a2, &__dst, (uint64_t)v36, *(_QWORD *)(a1 + 80) + 1376, v38, *(unsigned __int8 *)(a1 + 113), *(void **)(a3 + 24));
  v10 = v35;
  *(_QWORD *)v13 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v36);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v25 = 0x10000;
  if (!*(_BYTE *)(v13 + 379))
    v25 = 4096;
  if (v25 < *(unsigned int *)(v13 + 320))
  {
    v6 = CFSTR("Vertex function exceeds available stack space");
LABEL_43:
    (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
    v13 = 0;
    v7 = 2;
    goto LABEL_55;
  }
  if (*(_BYTE *)(a1 + 113))
  {
    if (!*(_QWORD *)(v13 + 2344))
    {
      v6 = CFSTR("Internal error during function compilation");
      goto LABEL_43;
    }
    if (*(_DWORD *)(v13 + 3760) == 1)
    {
      v6 = CFSTR("Post-tessellation vertex shader cannot be used with indirect command buffers");
      goto LABEL_43;
    }
  }
  v26 = 0x400200000000;
  if (!*(_QWORD *)(v13 + 400))
    v26 = 0x200000001;
  v27 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 | v26, v27));
  v29 = v27 + 1;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30, v29));
  v7 = 0;
LABEL_55:
  v31 = *(_QWORD *)(a1 + 72);
  v32 = *(void **)(a3 + 32);
  v33 = *(unsigned __int8 *)(a1 + 146);
  *(_QWORD *)(v31 + 8) = v13;
  *(_QWORD *)(v31 + 16) = v7;

  *(_QWORD *)(v31 + 24) = -[__CFString copy](v6, "copy");
  if (*(_QWORD *)(v31 + 8))
  {

    *(_QWORD *)(v31 + 32) = v32;
  }
  else
  {
    if (v33)
      v34 = v10;
    else
      v34 = 0;
    *(_BYTE *)(v31 + 40) = v34;
  }
  dispatch_group_leave(*(dispatch_group_t *)v31);
}

void sub_232C454A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v5 - 113) < 0)
    operator delete(*(void **)(v5 - 136));
  MEMORY[0x234927ECC](v4, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16VertexProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke(uint64_t a1)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD v11[8];

  v11[0] = a3;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::VertexProgramVariant,AGX::VertexProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createVertexProgramVariantEP27MTLRenderPipelineDescriptorP18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchiveP7NSArrayPNS1_13VertexProgramEPNS1_22FragmentProgramVariantEPU27objcproto16OS_dispatch_data8NSObjectSK_bU13block_pointerFvPNS1_20VertexProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3(_QWORD *a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[32];

  memset(v12, 0, 26);
  v2 = a1[7];
  if (!*(_BYTE *)(v2 + 41))
  {
    v6 = 0;
    goto LABEL_17;
  }
  if (*(_QWORD *)(v2 + 8))
  {
    v3 = (os_unfair_lock_s *)a1[6];
    v4 = v3 + 342;
    os_unfair_lock_lock(v3 + 342);
    v5 = VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::operator[]((uint64_t)v3, (uint64_t)(a1 + 8));
    if (*v5)
    {
      os_unfair_lock_unlock(v4);
      dispatch_group_wait((dispatch_group_t)*v5, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      v8 = dispatch_group_create();
      *v5 = v8;
      dispatch_group_enter(v8);
      v9 = *(_QWORD *)(v2 + 16);
      v10 = *(void **)(v2 + 24);
      v5[1] = *(_QWORD *)(v2 + 8);
      v5[2] = v9;

      v5[3] = objc_msgSend(v10, "copy", (unsigned __int128)0, 0, *(_OWORD *)&v12[8], *(_QWORD *)&v12[24]);
      if (v5[1])
      {

        v5[4] = 0;
      }
      else
      {
        *((_BYTE *)v5 + 40) = 0;
      }
      dispatch_group_leave((dispatch_group_t)*v5);
      *(_QWORD *)(v2 + 8) = 0;
      os_unfair_lock_unlock(v4);
    }
    v6 = 0;
    v7 = *(NSObject **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_14;
  }
  else
  {
    v6 = *(void **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = *(NSObject **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_14;
  }
  dispatch_release(v7);
LABEL_14:
  v11 = *(_QWORD *)(v2 + 8);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);

  MEMORY[0x234927ECC](v2, 0x10A0C405D73F519);
LABEL_17:
  (*(void (**)(void))(a1[4] + 16))();

}

void sub_232C45768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

AGX::VertexProgramKey *AGX::VertexProgramKey::VertexProgramKey(AGX::VertexProgramKey *this, const AGX::VertexProgramKey *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;

  *(_QWORD *)this = off_250401B28;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *((_QWORD *)this + 4) = v8;
    memcpy(v7, v5, v6);
    *((_QWORD *)this + 3) = v8;
  }
  *(_QWORD *)this = off_250401AE0;
  v9 = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *(_OWORD *)((char *)this + 40) = v9;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v10;
  }
  v11 = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 22) = v11;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v13 = (_BYTE *)*((_QWORD *)a2 + 12);
  v12 = (_BYTE *)*((_QWORD *)a2 + 13);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      abort();
    v15 = (char *)operator new(v12 - v13);
    *((_QWORD *)this + 12) = v15;
    *((_QWORD *)this + 13) = v15;
    v16 = &v15[32 * (v14 >> 5)];
    *((_QWORD *)this + 14) = v16;
    memcpy(v15, v13, v14);
    *((_QWORD *)this + 13) = v16;
  }
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v18 = (_BYTE *)*((_QWORD *)a2 + 15);
  v17 = (_BYTE *)*((_QWORD *)a2 + 16);
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      abort();
    v20 = (char *)operator new(v17 - v18);
    *((_QWORD *)this + 15) = v20;
    *((_QWORD *)this + 16) = v20;
    v21 = &v20[32 * (v19 >> 5)];
    *((_QWORD *)this + 17) = v21;
    memcpy(v20, v18, v19);
    *((_QWORD *)this + 16) = v21;
  }
  *(_QWORD *)this = &off_2504029B0;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v22 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *((_OWORD *)this + 9) = v22;
  }
  v23 = (std::string *)((char *)this + 168);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v24 = *(_OWORD *)((char *)a2 + 168);
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  *(_QWORD *)this = &off_250401B68;
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  return this;
}

void sub_232C45994(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*v3);
  *(_QWORD *)v1 = v5;
  v8 = *(void **)(v1 + 120);
  if (v8)
  {
    *(_QWORD *)(v1 + 128) = v8;
    operator delete(v8);
  }
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 104) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = v4;
  v10 = *(void **)(v1 + 16);
  if (v10)
  {
    *(_QWORD *)(v1 + 24) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

AGX::VertexProgramKey *__copy_helper_block_e8_64c28_ZTSN3AGX16VertexProgramKeyE(uint64_t a1, uint64_t a2)
{
  return AGX::VertexProgramKey::VertexProgramKey((AGX::VertexProgramKey *)(a1 + 64), (const AGX::VertexProgramKey *)(a2 + 64));
}

void __destroy_helper_block_e8_64c28_ZTSN3AGX16VertexProgramKeyE(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)(a1 + 64) = &off_2504029B0;
  if (*(char *)(a1 + 255) < 0)
  {
    operator delete(*(void **)(a1 + 232));
    if ((*(char *)(a1 + 231) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(a1 + 231) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 208));
LABEL_3:
  *(_QWORD *)(a1 + 64) = off_250401AE0;
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  *(_QWORD *)(a1 + 64) = off_250401B28;
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
}

void AGX::Program<AGX::G9::VertexProgramVariant,AGX::VertexProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  os_unfair_lock_s *lock;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    lock = (os_unfair_lock_s *)(a1 + 1368);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1368));
    v13 = *(_QWORD *)(a1 + 1328);
    v14 = *(unsigned int *)(a1 + 1336);
    v15 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v13, *(_DWORD *)(a1 + 1336), (_QWORD *)a4);
    v16 = (_QWORD *)v15;
    if (v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if ((_DWORD)v14 == 4)
      {
        v13 = operator new();
        v14 = 0;
        *(_QWORD *)(v13 + 224) = *(_QWORD *)(a1 + 1328);
        *(_OWORD *)(v13 + 192) = 0u;
        *(_OWORD *)(v13 + 208) = 0u;
        *(_OWORD *)(v13 + 160) = 0u;
        *(_OWORD *)(v13 + 176) = 0u;
        *(_OWORD *)(v13 + 128) = 0u;
        *(_OWORD *)(v13 + 144) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 112) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)(v13 + 48) = 0u;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_QWORD *)(a1 + 1328) = v13;
        *(_DWORD *)(a1 + 1336) = 0;
      }
      v18 = (_OWORD *)(v13 + 32 * v14);
      v19 = *(_OWORD *)(a4 + 16);
      *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      v20 = *(_QWORD *)(a1 + 1328);
      v21 = *(_DWORD *)(a1 + 1336);
      *(_DWORD *)(a1 + 1336) = v21 + 1;
      v16 = (_QWORD *)(v20 + 24 * v21 + 128);
      v17 = *(_QWORD *)(v20 + 24 * v21 + 136);
      if (a6)
        goto LABEL_4;
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3)
        dispatch_retain(a3);
      v22 = v16[2];
      if (v22)
        dispatch_release(v22);
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(_BYTE *)(a1 + 1624))
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD5B8]), "initWithDevice:reflectionData:functionType:options:", a5, a3, 1, a2 | 0x8000);
      v23 = (void *)objc_msgSend(v30, "arguments");
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v33 != v25)
              objc_enumerationMutation(v23);
            v27 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            if (!objc_msgSend(v27, "type")
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              v28 = (_QWORD *)objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              v29 = v28[2];
              v28[2] = 0;
              *(_QWORD *)(a1 + 8 * objc_msgSend(v27, "index") + 1376) = v29;

            }
          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
        }
        while (v24);
      }

      *(_BYTE *)(a1 + 1624) = 1;
    }
    goto LABEL_26;
  }
}

void sub_232C45D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t AGX::UserProgramKeyFactory<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey<MTLRenderPipelineDescriptor>(uint64_t a1, void *a2, NSObject *a3, void *a4, int a5, uint64_t a6, int a7)
{
  void *v14;
  void *v16[2];
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  char v20;

  v14 = (void *)objc_msgSend(a2, "meshLinkedFunctions");
  *(_OWORD *)v16 = *(_OWORD *)a6;
  v17 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a6 + 24);
  v19 = *(_QWORD *)(a6 + 40);
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  v20 = *(_BYTE *)(a6 + 48);
  AGX::MeshProgramKey::MeshProgramKey(a1, a3, 0, a5, (uint64_t)v16, v14, a4, a7);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    operator delete(v16[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v17) < 0)
    goto LABEL_5;
LABEL_3:
  AGX::MeshProgramKey::initCommon<MTLRenderPipelineDescriptor>(a1, a2);
  *(_DWORD *)(a1 + 52) &= ~0x80u;
  return objc_msgSend(a2, "supportIndirectCommandBuffers");
}

void sub_232C45EA4(_Unwind_Exception *a1)
{
  void **v1;

  AGX::MeshProgramKey::~MeshProgramKey(v1);
  _Unwind_Resume(a1);
}

void sub_232C45EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  double v14;
  double v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  double v21;
  double v22;
  int8x16_t v23;
  std::string::size_type v24;
  std::string *p_dst;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41[54];
  std::string __dst;
  uint64_t v43[54];
  _DWORD v44[8];

  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(__CFString **)(a3 + 48);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 112));
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_msgSend(v8, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v9)
      objc_msgSend(v9, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (v7)
  {
    v10 = 1;
    goto LABEL_24;
  }
  if (*(_QWORD *)(a2 + 264))
  {
    v11 = (_QWORD *)(a2 + 264);
    if (!*(_QWORD *)(a2 + 272))
      v11 = (_QWORD *)(a2 + 824);
    if (!*v11)
      goto LABEL_15;
  }
  else
  {
    v11 = (_QWORD *)(a2 + 824);
    if (!*(_QWORD *)(a2 + 824))
      goto LABEL_15;
  }
  if (v11[1])
    goto LABEL_22;
LABEL_15:
  if (!*(_QWORD *)(a2 + 504))
  {
    v12 = (_QWORD *)(a2 + 1064);
    if (!*(_QWORD *)(a2 + 1064))
      goto LABEL_66;
    goto LABEL_21;
  }
  v12 = (_QWORD *)(a2 + 504);
  if (!*(_QWORD *)(a2 + 512))
    v12 = (_QWORD *)(a2 + 1064);
  if (*v12)
  {
LABEL_21:
    if (!v12[1])
      goto LABEL_66;
LABEL_22:
    v10 = 0;
    v6 = CFSTR("Internal error during function compilation");
LABEL_23:
    v7 = 2;
    goto LABEL_24;
  }
LABEL_66:
  if (*(_BYTE *)(a1 + 113)
    && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible((_QWORD *)a2, 0) & 1) == 0)
  {
    v10 = 0;
    v6 = CFSTR("Mesh shader cannot be used with indirect command buffers");
    goto LABEL_23;
  }
  v7 = 0;
  v10 = 1;
LABEL_24:
  AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 114, *(void **)(a1 + 40), v7);
  if (v7)
  {
    v13 = 0;
    goto LABEL_59;
  }
  v40 = v10;
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v44, (_QWORD *)a2);
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v43, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)8, 0, *(_QWORD *)(a1 + 80) + 1408, *(_QWORD *)(a1 + 104), 0, 0, v14, v15, v16, 0);
  v13 = operator new();
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 808);
  v18 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v18)
    v19 = (const char *)v18;
  else
    v19 = "";
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v24 = v20;
  if (v20 >= 0x17)
  {
    v26 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v26 = v20 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_36;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20;
  p_dst = &__dst;
  if (v20)
LABEL_36:
    memmove(p_dst, v19, v24);
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  if (*(_BYTE *)(a2 + 1144))
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v41, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)8, 0, *(_QWORD *)(a1 + 80) + 1408, *(_QWORD *)(a1 + 104), 1, 0, v21, v22, v23, 0);
  else
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t)v41, (uint64_t)v43);
  v10 = v40;
  AGX::MeshProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::MeshProgramVariant(v13, v17, (unsigned int **)a2, &__dst, (uint64_t)v43, v44, *(unsigned __int8 *)(a1 + 113), *(void **)(a3 + 24));
  *(_QWORD *)v13 = &off_250402600;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v41);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = 0x10000;
  if (!*(_BYTE *)(v13 + 379))
    v28 = 4096;
  if (v28 >= *(unsigned int *)(v13 + 320))
  {
    if (!*(_BYTE *)(a1 + 113) || *(_QWORD *)(v13 + 2344))
    {
      v29 = 0x410000000000;
      if (!*(_QWORD *)(v13 + 400))
        v29 = 0x10000000001;
      v30 = 0x1000000000000;
      if (!*(_BYTE *)(v13 + 3004))
        v30 = 1;
      v31 = v30 | v29;
      v32 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | v31, v32));
      v34 = v32 + 1;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35, v34));
      v7 = 0;
      goto LABEL_58;
    }
    v6 = CFSTR("Internal error during function compilation");
  }
  else
  {
    v6 = CFSTR("Mesh function exceeds available stack space");
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
  v13 = 0;
  v7 = 2;
LABEL_58:
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v43);
LABEL_59:
  v36 = *(_QWORD *)(a1 + 72);
  v37 = *(void **)(a3 + 32);
  v38 = *(unsigned __int8 *)(a1 + 146);
  *(_QWORD *)(v36 + 8) = v13;
  *(_QWORD *)(v36 + 16) = v7;

  *(_QWORD *)(v36 + 24) = -[__CFString copy](v6, "copy");
  if (*(_QWORD *)(v36 + 8))
  {

    *(_QWORD *)(v36 + 32) = v37;
  }
  else
  {
    if (v38)
      v39 = v10;
    else
      v39 = 0;
    *(_BYTE *)(v36 + 40) = v39;
  }
  dispatch_group_leave(*(dispatch_group_t *)v36);
}

void sub_232C463A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  char a72;
  uint64_t v72;

  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&a12);
  if (a71 < 0)
    operator delete(__p);
  MEMORY[0x234927ECC](v72, 0x10F3C40174EF3E0);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24createMeshProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_11MeshProgramEPNS1_22FragmentProgramVariantESG_bU13block_pointerFvPNS1_18MeshProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSG_E_block_invoke_3(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  dispatch_object_t object[2];
  id v7[4];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(*(_QWORD *)(a1 + 48) + 32);
  *(_OWORD *)object = 0u;
  memset(v7, 0, 26);
  v3 = (_QWORD *)AGX::Program<AGX::G9::MeshProgramVariant,AGX::MeshProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 56), *(_QWORD *)(a1 + 48), a1 + 64, (uint64_t)object);
  v4 = v3[1];
  v5 = *(_OWORD *)(a1 + 296);
  v8[0] = *(_OWORD *)(a1 + 280);
  v8[1] = v5;
  (*(void (**)(_QWORD, uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4, v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3[2], v3[3], v2);

  if (object[0])
    dispatch_release(object[0]);
  if (object[1])
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);

}

void sub_232C4652C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, NSObject *a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13)
{
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned __int8 v38;
  unint64_t CompileOptions;
  uint64_t v40;
  NSObject **v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  void *v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  void **v49;
  id *v50;
  NSObject *v51;
  NSObject *global_queue;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v61;
  _QWORD v62[2];
  void *v63;
  void *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  void *v70;
  char v71;
  unsigned int v72;
  void *__p;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD v78[6];
  _QWORD v79[5];
  _BYTE v80[32];
  __int128 block;
  __int128 v82;
  _QWORD *v83;
  _QWORD *v84;
  os_unfair_lock_s *v85;
  NSObject **v86;
  uint64_t (**v87)();
  void *v88;
  void *v89;
  void *v90;
  char v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  os_unfair_lock_s *v104;
  unint64_t v105;
  _QWORD *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unsigned __int8 v110;
  char v111;
  __int128 v112;
  __int128 v113;
  char v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (a8)
  {
    v18 = objc_msgSend(a8, "vendorPrivate");
    v78[0] = 0;
    v78[1] = v78;
    v78[2] = 0x3052000000;
    v78[3] = __Block_byref_object_copy_;
    v78[4] = __Block_byref_object_dispose_;
    v78[5] = 0;
    v58 = objc_msgSend(a2, "objectFunction");
    v57 = a6;
    AGX::ObjectProgramKey::ObjectProgramKey((uint64_t)v62, a9, (void *)objc_msgSend(a2, "objectLinkedFunctions"), a7, a10, a11);
    v19 = (void *)objc_msgSend(a2, "driverCompilerOptions");
    v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectLinkedFunctions"), "binaryFunctions"), "count");
    v21 = objc_msgSend(a2, "supportAddingObjectBinaryFunctions");
    if (objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v22 = 4;
    else
      v22 = 0;
    v66 = v66 & 0xFFFFFFFB | v22;
    v23 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue");
    v66 = v66 & 0xFC0003FF | (v23 << 10);
    if (objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v24 = 0x8000000;
    else
      v24 = 0;
    if (v20)
      v25 = 1;
    else
      v25 = v21;
    if (v25)
      v26 = 512;
    else
      v26 = 0;
    v66 = v24 | v66 & 0xF7FFFDFF | v26;
    v27 = (void *)objc_msgSend(a2, "objectBuffers");
    v28 = 0;
    v29 = 0;
    v30 = (os_unfair_lock_s *)(v18 + 8);
    do
    {
      v31 = objc_msgSend((id)objc_msgSend(v27, "_descriptorAtIndex:", v29), "mutability");
      v32 = 1 << v29;
      if (v31 != 1)
        v32 = 0;
      v28 |= v32;
      ++v29;
    }
    while (v29 != 31);
    v65 = v28;
    v33 = objc_msgSend(a2, "supportIndirectCommandBuffers");
    v72 = v72 & 0xFFFFFFFE | v33;
    v68 = objc_msgSend(a2, "maxTotalThreadsPerObjectThreadgroup");
    v69 = 0;
    v34 = objc_msgSend(a2, "maxVertexAmplificationCount");
    v66 &= ~0x80u;
    v67 = v67 & 0xFFFFFF87 | (8 * (v34 & 0xF));
    objc_msgSend(a2, "supportIndirectCommandBuffers");
    if (*(_BYTE *)(*(_QWORD *)(a3 + 808) + 6360))
      v35 = 67109120;
    else
      v35 = 256;
    v36 = v35 | v66 & 0x8BFFFEFF;
    v66 = v36;
    v67 &= ~0x80u;
    v77 = a4 & 0xC00C0000;
    if ((a4 & 0x40000) != 0)
    {
      if (AGX::isTelemetryEnabled(void)::once != -1)
        dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_5011);
      v37 = 1;
      v36 = v66;
    }
    else
    {
      v37 = 0;
    }
    v66 = v37 | (a4 >> 21) & 8 | v36 & 0xFFFFFFF4;
    ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&block, (void *)objc_msgSend(a2, "gpuCompilerSPIOptions"));
    v115 = block;
    v116 = v82;
    CompileOptions = AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)v30, a4 | 3, (uint64_t)&v115);
    v61 = 0;
    v40 = AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(v30, (uint64_t)v62, &v61, CompileOptions, a5 != 0);
    v41 = (NSObject **)v40;
    if (v61)
    {
      v56 = v65;
      HIDWORD(v53) = v72;
      v42 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
      v43 = (void *)objc_msgSend(a2, "pipelineLibrary");
      if (objc_msgSend(v43, "pipelineCache") && (objc_msgSend(v43, "disableRunTimeCompilation") & 1) != 0)
        v44 = 1;
      else
        v44 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
      LODWORD(v53) = v44;
      if (*(_DWORD *)*MEMORY[0x24BE516B0])
        IOGPUDeviceTraceEvent();
      v45 = (void *)objc_opt_new();
      objc_msgSend(v45, "setSync:", a12 ^ 1u);
      objc_msgSend(v45, "setFunction:", v58);
      objc_msgSend(v45, "setFrameworkData:", a9);
      objc_msgSend(v45, "setPipelineCache:", v42);
      objc_msgSend(v45, "setDestinationBinaryArchive:", a5);
      objc_msgSend(v45, "setArchiverId:", v57);
      objc_msgSend(v45, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
      objc_msgSend(v45, "setPipelineOptions:", a4 | 3);
      if ((a4 & 0x330003) == 0)
        objc_msgSend(v45, "setPipelineOptions:", objc_msgSend(v45, "pipelineOptions") | 0x8000);
      v46 = objc_msgSend(a2, "newPipelineScript", v53);
      if (v46)
      {
        objc_msgSend(v45, "setAirScript:", v46);
        dispatch_release(v46);
      }
      objc_msgSend(v45, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
      v47 = (void *)objc_msgSend(a2, "objectLinkedFunctions");
      objc_msgSend(v45, "setVisibleFunctions:", objc_msgSend(v47, "functions"));
      objc_msgSend(v45, "setVisibleFunctionGroups:", objc_msgSend(v47, "groups"));
      objc_msgSend(v45, "setPrivateVisibleFunctions:", objc_msgSend(v47, "privateFunctions"));
      v99 = MEMORY[0x24BDAC760];
      v112 = v115;
      v100 = 3221225472;
      v101 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke;
      v102 = &unk_250400DA8;
      v106 = v78;
      *(_QWORD *)&v107 = a1;
      v103 = v58;
      v110 = a12;
      v111 = v55 & 1;
      *((_QWORD *)&v107 + 1) = v41;
      *(_QWORD *)&v108 = v30;
      *((_QWORD *)&v108 + 1) = CompileOptions;
      v113 = v116;
      v104 = (os_unfair_lock_s *)a3;
      v105 = (unint64_t)a2;
      v48 = MEMORY[0x24BDAC760];
      v109 = v56;
      v114 = v54;
      v49 = *a1;
      v79[0] = MEMORY[0x24BDAC760];
      v79[1] = 3221225472;
      v79[2] = ___ZN3AGX17UserShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_16ObjectProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb0EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb0EEEE_block_invoke;
      v79[3] = &unk_250400D80;
      v79[4] = &v99;
      *(_QWORD *)&block = MEMORY[0x24BDAC760];
      *((_QWORD *)&block + 1) = 3221225472;
      *(_QWORD *)&v82 = ___ZN3AGX8Compiler14compileProgramINS_16ObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((_QWORD *)&v82 + 1) = &unk_2504023B8;
      v83 = v79;
      AGX::Compiler::compileProgram<AGX::ObjectProgramKey,AGCDeserializedReply>(v49, (uint64_t)v62, v45, (uint64_t)&block);

    }
    else
    {
      v48 = MEMORY[0x24BDAC760];
      if ((CompileOptions & 0x330003) != 0)
      {
        v50 = *a1;
        v99 = MEMORY[0x24BDAC760];
        v100 = 3221225472;
        v101 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2;
        v102 = &unk_250400D20;
        v107 = v115;
        v108 = v116;
        v103 = a3;
        v104 = v30;
        v105 = CompileOptions;
        v106 = (_QWORD *)v40;
        objc_msgSend(*v50, "reflectionWithFunction:options:sync:completionHandler:", v58, CompileOptions & 0x330003, a12 ^ 1u, &v99);
      }
    }
    *(_QWORD *)&block = v48;
    *((_QWORD *)&block + 1) = 3321888768;
    *(_QWORD *)&v82 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3;
    *((_QWORD *)&v82 + 1) = &unk_250400DD0;
    v85 = v30;
    v86 = v41;
    AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::GeometrySharedKey((uint64_t)&v87, (uint64_t)v62);
    v87 = (uint64_t (**)())&off_250401C38;
    v96 = v77;
    v97 = v115;
    v98 = v116;
    v83 = (_QWORD *)a13;
    v84 = v78;
    v51 = *v41;
    if (a12)
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_group_notify(v51, global_queue, &block);
    }
    else
    {
      dispatch_group_wait(v51, 0xFFFFFFFFFFFFFFFFLL);
      ((void (*)(__int128 *))v82)(&block);
    }
    v87 = off_250401BB0;
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
    if (v91 < 0)
      operator delete(v90);
    v87 = off_250401BF8;
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    v62[0] = off_250401BB0;
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    if (__p)
    {
      v74 = __p;
      operator delete(__p);
    }
    if (v71 < 0)
      operator delete(v70);
    v62[0] = off_250401BF8;
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    _Block_object_dispose(v78, 8);
  }
  else
  {
    if ((v38 & 1) == 0
    {
      AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::meshNeedsPassThroughObjectShader();
    }
    memset(v80, 0, sizeof(v80));
    (*(void (**)(uint64_t, _QWORD, _BYTE *, _QWORD, const __CFString *))(a13 + 16))(a13, 0, v80, 0, &stru_2504033A8);
  }
}

void sub_232C46E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232C46E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  AGX::ObjectProgramKey *v40;

  AGX::ObjectProgramKey::~ObjectProgramKey(v40);
  AGX::ObjectProgramKey::~ObjectProgramKey((AGX::ObjectProgramKey *)&a20);
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  double v18;
  double v19;
  int8x16_t v20;
  std::string::size_type v21;
  std::string *p_dst;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38[54];
  std::string __dst;

  v7 = *(_QWORD *)(a3 + 40);
  v6 = *(__CFString **)(a3 + 48);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x24BDBCED8]);
  AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(_QWORD *)(a3 + 8), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a3 + 56), objc_msgSend(*(id *)(a1 + 32), "name"), *(_BYTE *)(a1 + 104));
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v8)
  {
    v9 = (void *)objc_msgSend(v8, "objectForKey:", *MEMORY[0x24BDDD168]);
    if (v9)
      objc_msgSend(v9, "unsignedLongLongValue");
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (v7)
  {
    v10 = 1;
    goto LABEL_24;
  }
  if (a2[33])
  {
    v11 = a2 + 33;
    if (!a2[34])
      v11 = a2 + 103;
    if (!*v11)
      goto LABEL_15;
  }
  else
  {
    v11 = a2 + 103;
    if (!a2[103])
      goto LABEL_15;
  }
  if (v11[1])
    goto LABEL_22;
LABEL_15:
  if (!a2[63])
  {
    v12 = a2 + 133;
    if (!a2[133])
      goto LABEL_62;
    goto LABEL_21;
  }
  v12 = a2 + 63;
  if (!a2[64])
    v12 = a2 + 133;
  if (*v12)
  {
LABEL_21:
    if (!v12[1])
      goto LABEL_62;
LABEL_22:
    v10 = 0;
    v6 = CFSTR("Internal error during function compilation");
LABEL_23:
    v7 = 2;
    goto LABEL_24;
  }
LABEL_62:
  if (*(_BYTE *)(a1 + 105)
    && (AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
  {
    v10 = 0;
    v6 = CFSTR("Object shader cannot be used with indirect command buffers");
    goto LABEL_23;
  }
  v7 = 0;
  v10 = 1;
LABEL_24:
  AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 106, *(void **)(a1 + 40), 8, v7);
  if (v7)
  {
    v13 = 0;
    goto LABEL_55;
  }
  v37 = v10;
  objc_msgSend(*(id *)(a1 + 48), "needsCustomBorderColorSamplers");
  objc_msgSend(*(id *)(a1 + 48), "profileControl");
  v13 = operator new();
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 808);
  v15 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "label"), "UTF8String");
  if (v15)
    v16 = (const char *)v15;
  else
    v16 = "";
  v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v21 = v17;
  if (v17 >= 0x17)
  {
    v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v23 = v17 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_36;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17;
  p_dst = &__dst;
  if (v17)
LABEL_36:
    memmove(p_dst, v16, v21);
  p_dst->__r_.__value_.__s.__data_[v21] = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v38, (unsigned int **)a2, (const std::vector<unsigned int>::value_type *)7, 0, *(_QWORD *)(a1 + 80) + 1184, *(_QWORD *)(a1 + 96), 0, 0, v18, v19, v20, 0);
  AGX::ObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ObjectProgramVariant(v13, v14, (unsigned int **)a2, &__dst, (uint64_t)v38, *(unsigned __int8 *)(a1 + 105), 0, *(void **)(a3 + 24));
  v10 = v37;
  *(_QWORD *)v13 = &off_2504025E0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v38);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v25 = 0x10000;
  if (!*(_BYTE *)(v13 + 379))
    v25 = 4096;
  if (v25 < *(unsigned int *)(v13 + 320))
  {
    v6 = CFSTR("Object function exceeds available stack space");
LABEL_43:
    (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
    v13 = 0;
    v7 = 2;
    goto LABEL_55;
  }
  if (*(_BYTE *)(a1 + 105) && !*(_QWORD *)(v13 + 2344))
  {
    v6 = CFSTR("Internal error during function compilation");
    goto LABEL_43;
  }
  v26 = 0x408000000000;
  if (!*(_QWORD *)(v13 + 400))
    v26 = 0x8000000001;
  v27 = 0x1000000000000;
  if (!*(_BYTE *)(v13 + 2996))
    v27 = 1;
  v28 = v27 | v26;
  v29 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 | v28, v29));
  v31 = v29 + 1;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32, v31));
  v7 = 0;
LABEL_55:
  v33 = *(_QWORD *)(a1 + 72);
  v34 = *(void **)(a3 + 32);
  v35 = *(unsigned __int8 *)(a1 + 138);
  *(_QWORD *)(v33 + 8) = v13;
  *(_QWORD *)(v33 + 16) = v7;

  *(_QWORD *)(v33 + 24) = -[__CFString copy](v6, "copy");
  if (*(_QWORD *)(v33 + 8))
  {

    *(_QWORD *)(v33 + 32) = v34;
  }
  else
  {
    if (v35)
      v36 = v10;
    else
      v36 = 0;
    *(_BYTE *)(v33 + 40) = v36;
  }
  dispatch_group_leave(*(dispatch_group_t *)v33);
}

void sub_232C47340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  MEMORY[0x234927ECC](v3, 0x10F3C400BF709EDLL);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::signalPending(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), 7, a2);
  dispatch_group_leave(**(dispatch_group_t **)(a1 + 56));
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE26createObjectProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXA10FamilyDevicemP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectP7NSArrayPNS1_13ObjectProgramESG_bbbU13block_pointerFvPNS1_20ObjectProgramVariantE13ReflectionKey16MTLCompilerErrorP8NSStringE_block_invoke_3(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  dispatch_object_t object[2];
  id v7[4];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)object = 0u;
  memset(v7, 0, 26);
  v2 = (_QWORD *)AGX::Program<AGX::G9::ObjectProgramVariant,AGX::ObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::consolidate(*(os_unfair_lock_s **)(a1 + 48), *(_QWORD *)(a1 + 56), a1 + 64, (uint64_t)object);
  v3 = v2[1];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 240);
  v8[0] = *(_OWORD *)(a1 + 224);
  v8[1] = v5;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, _QWORD, _QWORD))(v4 + 16))(v4, v3, v8, v2[2], v2[3]);

  if (object[0])
    dispatch_release(object[0]);
  if (object[1])
    (*((void (**)(dispatch_object_t))object[1]->isa + 1))(object[1]);

}

void sub_232C4749C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI27MTLRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXA10FamilyDeviceRP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  AGXA10FamilyComputeOrFragmentOrTileProgram *v4;
  AGXA10FamilyFragmentProgram *frag;
  void *v6;
  AGXA10FamilyMeshProgram *v7;
  void *v8;
  AGXA10FamilyObjectProgram *v9;
  AGXA10FamilyVertexProgram *v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)v2)
  {
    v3 = objc_msgSend(*(id *)v2, "vendorPrivate");
    v4 = (AGXA10FamilyComputeOrFragmentOrTileProgram *)v3;
    if (v3)
    {
      frag = *(AGXA10FamilyFragmentProgram **)(v3 + 16);
      if (frag)
      {
LABEL_5:
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = &frag->_impl;
        v2 = *(_QWORD *)(a1 + 32);
        goto LABEL_6;
      }
    }
    else
    {
      v4 = objc_alloc_init(AGXA10FamilyComputeOrFragmentOrTileProgram);
      objc_msgSend(**(id **)(a1 + 32), "setVendorPrivate:", v4);

      frag = v4->_frag;
      if (frag)
        goto LABEL_5;
    }
    frag = objc_alloc_init(AGXA10FamilyFragmentProgram);
    v4->_frag = frag;
    goto LABEL_5;
  }
LABEL_6:
  v6 = *(void **)(v2 + 16);
  if (v6)
  {
    v7 = (AGXA10FamilyMeshProgram *)objc_msgSend(v6, "vendorPrivate");
    if (!v7)
    {
      v7 = objc_alloc_init(AGXA10FamilyMeshProgram);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setVendorPrivate:", v7);

    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = &v7->_impl;
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    if (v8)
    {
      v9 = (AGXA10FamilyObjectProgram *)objc_msgSend(v8, "vendorPrivate");
      if (!v9)
      {
        v9 = objc_alloc_init(AGXA10FamilyObjectProgram);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setVendorPrivate:", v9);

      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = &v9->_impl;
    }
  }
  else
  {
    v10 = (AGXA10FamilyVertexProgram *)objc_msgSend(*(id *)(v2 + 8), "vendorPrivate");
    if (!v10)
    {
      v10 = objc_alloc_init(AGXA10FamilyVertexProgram);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setVendorPrivate:", v10);

    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = &v10->_impl;
  }
}

void sub_232C48B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v63;

  _Block_object_dispose(&a40, 8);
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a56, 8);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  _Block_object_dispose((const void *)(v63 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_232C490D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToBuffer(uint64_t *result, char *a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110[3];
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;

  v7 = a4;
  v8 = a2;
  v9 = result;
  v10 = (int)*MEMORY[0x24BE51650];
  v11 = *(_QWORD *)&a2[v10 + 72] + a3;
  v12 = *(_QWORD *)&a4[v10 + 72] + a5;
  v13 = v12 >= v11 + a6 || v11 >= v12 + a6;
  if (v13)
  {
    v110[0] = *(_QWORD *)&a2[v10 + 72] + a3;
    v110[1] = v12;
    v110[2] = a6;
    return (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(result, v110, a2, a4);
  }
  else
  {
    v14 = v11 - v12;
    if (v11 != v12)
    {
      if (v14 >= 0)
        v15 = v11 - v12;
      else
        v15 = v12 - v11;
      if ((v15 & 0x7FFFFFFFFFFFFFF0) <= 0x8000)
        v16 = 0x8000;
      else
        v16 = v15 & 0x7FFFFFFFFFFFFFF0;
      v98 = v15;
      v101 = result;
      v109 = v12;
      if (v16 <= v15)
      {
        v19 = 1 << __clz(__rbit64(v14));
        if (v19 >= 0x10)
          v20 = 16;
        else
          v20 = v19;
        v18 = v20 - 1;
        v17 = ~((v20 - 1 + v11) & (v20 - 1)) + v20;
        result = (uint64_t *)result[809];
      }
      else
      {
        result = (uint64_t *)result[809];
        if (!result)
        {
          result = (uint64_t *)AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBlitBounceBuffer(v9);
          v12 = v109;
          v9[809] = (uint64_t)result;
        }
        v17 = -(int)v11 & 0xFLL;
        v18 = 15;
      }
      if (v17 >= a6)
        v21 = a6;
      else
        v21 = v17;
      v22 = (a6 - v21) & v18;
      v97 = a6;
      v23 = a6 - (v21 + v22);
      v24 = v16 - 1;
      v107 = v8;
      v108 = v7;
      v106 = v11;
      v99 = v16 - 1;
      if (v11 >= v12)
      {
        v94 = v21 + v22;
        v96 = a6 - (v21 + v22);
        v33 = v22 + v24;
        if (v33 >= v16)
        {
          v34 = v33 / v16;
          v13 = v33 / v16 != 0;
          v35 = v33 / v16 - 1;
          if (v35 != 0 && v13)
            v36 = v34;
          else
            v36 = 1;
          if (v16 <= v98)
          {
            v50 = v16 * v35;
            v51 = a6 + v50 - v22;
            v52 = v22 - v50;
            do
            {
              if (v52 >= v16)
                v53 = v16;
              else
                v53 = v52;
              v114 = v106 + v51;
              v115 = v12 + v51;
              v116 = v53;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v8, v7);
              v12 = v109;
              v51 -= v16;
              v52 += v16;
              --v36;
            }
            while (v36);
          }
          else
          {
            v103 = result + 9;
            v105 = (char *)result;
            v37 = v16 * v35;
            v38 = a6 + v37 - v22;
            v39 = v22 - v37;
            do
            {
              if (v39 >= v16)
                v40 = v16;
              else
                v40 = v39;
              v114 = *(uint64_t *)((char *)v103 + (int)*MEMORY[0x24BE51650]);
              v41 = v114;
              v115 = v12 + v38;
              v116 = v40;
              AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v105, v7);
              v111 = v11 + v38;
              v112 = v41;
              v8 = v107;
              v113 = v40;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, (uint64_t *)&v111, v107, v105);
              v12 = v109;
              v38 -= v16;
              v39 += v16;
              --v36;
            }
            while (v36);
          }
        }
        v54 = v96 + v99;
        if (v96 + v99 >= v16)
        {
          v55 = v54 / v16;
          v13 = v54 / v16 != 0;
          v56 = v54 / v16 - 1;
          if (v56 == 0 || !v13)
            v55 = 1;
          if (v16 <= v98)
          {
            v74 = -v55;
            v75 = v16 * v56;
            v76 = v21 + v75;
            v77 = v97 - v75 - v94;
            do
            {
              if (v77 >= v16)
                v78 = v16;
              else
                v78 = v77;
              v114 = v106 + v76;
              v115 = v12 + v76;
              v116 = v78;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v8, v7);
              v12 = v109;
              v76 -= v16;
              v77 += v16;
              v13 = __CFADD__(v74++, 1);
            }
            while (!v13);
          }
          else
          {
            v57 = (char *)v101[809];
            v58 = -v55;
            v59 = v16 * v56;
            v60 = v21 + v59;
            v61 = v97 - v59 - v94;
            do
            {
              if (v61 >= v16)
                v62 = v16;
              else
                v62 = v61;
              v114 = *(_QWORD *)&v57[*MEMORY[0x24BE51650] + 72];
              v63 = v114;
              v115 = v12 + v60;
              v116 = v62;
              AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v57, v108);
              v111 = v106 + v60;
              v112 = v63;
              v8 = v107;
              v7 = v108;
              v113 = v62;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, (uint64_t *)&v111, v107, v57);
              v12 = v109;
              v60 -= v16;
              v61 += v16;
              v13 = __CFADD__(v58++, 1);
            }
            while (!v13);
          }
        }
        v79 = v21 + v99;
        if (v21 + v99 >= v16)
        {
          v80 = v79 / v16;
          v13 = v79 / v16 != 0;
          v81 = v79 / v16 - 1;
          if (v81 != 0 && v13)
            v82 = v80;
          else
            v82 = 1;
          if (v16 <= v98)
          {
            v91 = v16 * v81;
            v92 = v21 - v16 * v81;
            do
            {
              if (v92 >= v16)
                v93 = v16;
              else
                v93 = v92;
              v114 = v106 + v91;
              v115 = v12 + v91;
              v116 = v93;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v8, v7);
              v12 = v109;
              v91 -= v16;
              v92 += v16;
              --v82;
            }
            while (v82);
          }
          else
          {
            v83 = (char *)v101[809];
            v84 = v16 * v81;
            v85 = v21 - v16 * v81;
            do
            {
              if (v85 >= v16)
                v86 = v16;
              else
                v86 = v85;
              v114 = *(_QWORD *)&v83[*MEMORY[0x24BE51650] + 72];
              v87 = v114;
              v115 = v12 + v84;
              v116 = v86;
              AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v83, v108);
              v111 = v106 + v84;
              v112 = v87;
              v113 = v86;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, (uint64_t *)&v111, v107, v83);
              v12 = v109;
              v84 -= v16;
              v85 += v16;
              --v82;
            }
            while (v82);
          }
        }
      }
      else
      {
        v95 = v22;
        v25 = v21 + v24;
        v26 = v101;
        if (v25 >= v16)
        {
          v27 = v25 / v16;
          if (v27 <= 1)
            v28 = 1;
          else
            v28 = v27;
          if (v16 <= v98)
          {
            v42 = 0;
            v43 = v21;
            v26 = v101;
            do
            {
              v44 = v43 - v16;
              if (v43 >= v16)
                v43 = v16;
              v114 = v11 + v42;
              v115 = v12 + v42;
              v116 = v43;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v8, v7);
              v12 = v109;
              v42 += v16;
              v43 = v44;
              --v28;
            }
            while (v28);
          }
          else
          {
            v29 = 0;
            v104 = (char *)result;
            v100 = result + 9;
            v30 = v21;
            v26 = v101;
            do
            {
              v102 = v30 - v16;
              if (v30 >= v16)
                v31 = v16;
              else
                v31 = v30;
              v114 = *(uint64_t *)((char *)v100 + (int)*MEMORY[0x24BE51650]);
              v32 = v114;
              v115 = v12 + v29;
              v116 = v31;
              AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v104, v108);
              v111 = v11 + v29;
              v112 = v32;
              v113 = v31;
              v8 = v107;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, (uint64_t *)&v111, v107, v104);
              v7 = v108;
              v12 = v109;
              v29 += v16;
              v30 = v102;
              --v28;
            }
            while (v28);
          }
        }
        if (v23 + v99 >= v16)
        {
          v45 = (v23 + v99) / v16;
          if (v45 <= 1)
            v45 = 1;
          if (v16 <= v98)
          {
            v64 = -(uint64_t)v45;
            v26 = v101;
            do
            {
              if (v23 >= v16)
                v65 = v16;
              else
                v65 = v23;
              v114 = v11 + v21;
              v115 = v12 + v21;
              v116 = v65;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v8, v7);
              v12 = v109;
              v21 += v16;
              v23 -= v16;
              v13 = __CFADD__(v64++, 1);
            }
            while (!v13);
          }
          else
          {
            v26 = v101;
            v46 = (char *)v101[809];
            v47 = -(uint64_t)v45;
            do
            {
              v48 = v23 - v16;
              if (v23 >= v16)
                v23 = v16;
              v114 = *(_QWORD *)&v46[*MEMORY[0x24BE51650] + 72];
              v49 = v114;
              v115 = v12 + v21;
              v116 = v23;
              AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, &v114, v46, v108);
              v111 = v106 + v21;
              v112 = v49;
              v8 = v107;
              v7 = v108;
              v113 = v23;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v101, (uint64_t *)&v111, v107, v46);
              v12 = v109;
              v21 += v16;
              v23 = v48;
              v13 = __CFADD__(v47++, 1);
            }
            while (!v13);
          }
        }
        v66 = v95;
        if (v95 + v99 >= v16)
        {
          v67 = v26;
          if ((v95 + v99) / v16 <= 1)
            v68 = 1;
          else
            v68 = (v95 + v99) / v16;
          if (v16 <= v98)
          {
            v88 = v97 - v95;
            do
            {
              v89 = v66 - v16;
              if (v66 >= v16)
                v90 = v16;
              else
                v90 = v66;
              v114 = v106 + v88;
              v115 = v12 + v88;
              v116 = v90;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v26, &v114, v8, v7);
              v12 = v109;
              v88 += v16;
              v66 = v89;
              --v68;
            }
            while (v68);
          }
          else
          {
            v69 = (char *)v26[809];
            v70 = v97 - v95;
            do
            {
              v71 = v66 - v16;
              if (v66 >= v16)
                v72 = v16;
              else
                v72 = v66;
              v114 = *(_QWORD *)&v69[*MEMORY[0x24BE51650] + 72];
              v73 = v114;
              v115 = v12 + v70;
              v116 = v72;
              AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v67, &v114, v69, v108);
              v111 = v106 + v70;
              v112 = v73;
              v113 = v72;
              result = (uint64_t *)AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(v67, (uint64_t *)&v111, v107, v69);
              v12 = v109;
              v70 += v16;
              v66 = v71;
              --v68;
            }
            while (v68);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyRange(uint64_t *a1, uint64_t *a2, char *a3, char *a4)
{
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint32x2_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint32x2_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  _QWORD v55[56];
  unint64_t v56[57];
  __int128 v57;
  _QWORD v58[13];
  void *v59;
  void *v60[3];

  v60[1] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = (char *)a2[1];
  v9 = a2[2];
  v59 = a4;
  v60[0] = a3;
  v56[0] = 0;
  v55[0] = 0;
  v52 = v7;
  v53 = v8;
  result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitBuffer(a1, v60, v7, &v59, v8, v9, 0, 0, v56, v55);
  if (!(_DWORD)result)
  {
    v11 = v9 - v55[0] - v56[0];
    if (v9 - v55[0] != v56[0])
    {
      v12 = (int)*MEMORY[0x24BE51650];
      v50 = *(_QWORD *)&a4[v12 + 144];
      v51 = *(_QWORD *)&a4[v12 + 152];
      v48 = *(_QWORD *)&a3[v12 + 144];
      v49 = *(_QWORD *)&a3[v12 + 152];
      v13 = 0;
      v57 = xmmword_232D73420;
      v58[0] = 0;
      v58[1] = 0;
      v58[2] = 0x100000000;
      v58[3] = 0;
      v58[4] = 0;
      v58[5] = 0x100000000;
      v58[6] = 0;
      v58[7] = 0;
      v58[8] = 0x100000000;
      v58[9] = 0;
      v58[10] = 0;
      v58[11] = 0x100000000;
      v58[12] = 0;
      v46 = v56[0];
      if (&v53[v56[0]])
      {
        v14 = ((_DWORD)v53 - v52) & (v52 - (_DWORD)v53);
        if (v14 >= 0x10)
          v14 = 16;
      }
      else
      {
        v14 = 16;
      }
      v15 = (unint64_t)v14 << 26;
      v16 = v11 / v15;
      if ((v11 / v15))
      {
        v13 = (uint32x2_t)0x200000002000;
        *(_QWORD *)&v57 = 0x200000002000;
        *((_QWORD *)&v57 + 1) = __PAIR64__(v16, v14);
        v17 = (v11 / v15) * v15;
        v11 -= v17;
        LODWORD(v16) = 1;
      }
      else
      {
        v17 = 0;
      }
      v18 = v11 / ((unint64_t)v14 << 13);
      if (v18 <= 1)
        LODWORD(v18) = 1;
      v19 = v18 + 31;
      v20 = v19 & 0xFFFFFFE0;
      if ((v19 & 0xFFFFFFE0) != 0)
      {
        v21 = v11 / (v20 * v14);
        if ((_DWORD)v21)
        {
          v22 = &v56[3 * v16 + 56];
          LODWORD(v16) = v16 + 1;
          *((_DWORD *)v22 + 2) = v20;
          *((_DWORD *)v22 + 3) = v21;
          *((_DWORD *)v22 + 4) = v14;
          *((_DWORD *)v22 + 5) = 1;
          v22[3] = v17;
          v23 = v21 * (unint64_t)v14 * v20;
          v17 += v23;
          v11 -= v23;
        }
      }
      v24 = (v11 / v14) & -(0x10u / v14);
      if (v24)
      {
        v25 = &v56[3 * v16 + 56];
        *((_DWORD *)v25 + 2) = v24;
        *((_DWORD *)v25 + 3) = 1;
        LODWORD(v16) = v16 + 1;
        *((_DWORD *)v25 + 4) = v14;
        *((_DWORD *)v25 + 5) = 1;
        v25[3] = v17;
      }
      else if (!(_DWORD)v16)
      {
        return result;
      }
      v26 = 0;
      v27 = v16;
      v47 = v16;
      do
      {
        v28 = &v56[3 * v26 + 56];
        v30 = *((_DWORD *)v28 + 2);
        v29 = *((unsigned int *)v28 + 3);
        v31 = *((_DWORD *)v28 + 5);
        if (v30)
          v32 = 0;
        else
          v32 = (_DWORD)v29 == 0;
        if (!v32 || v31 != 0)
        {
          v34 = v58[3 * v26 - 1];
          v35 = 1;
          v36 = 2;
          v37 = 13;
          v38 = 4;
          v39 = 113;
          switch(v34)
          {
            case 2u:
              v37 = 23;
              v36 = 2;
              goto LABEL_39;
            case 3u:
            case 5u:
            case 6u:
            case 7u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
              goto LABEL_39;
            case 4u:
              v37 = 53;
              v36 = 2;
              goto LABEL_39;
            case 8u:
              v37 = 103;
              v36 = 2;
              goto LABEL_39;
            case 0x10u:
              v37 = 123;
              v36 = 2;
              goto LABEL_39;
            case 0x20u:
              goto LABEL_38;
            default:
              if (v34 == 64)
              {
                v38 = 4;
              }
              else
              {
                if (v34 != 128)
                  goto LABEL_39;
                v38 = 8;
              }
              v39 = 123;
LABEL_38:
              v37 = v39;
              v35 = v38;
              v36 = 4;
LABEL_39:
              v40 = v34 * (unint64_t)v30;
              LODWORD(v44) = 0;
              AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v56, *(MTLPixelFormat *)(a1[808] + 808), v36, (AGX::G9::TextureFormatTable *)v37, 0, v50, 2, 0, 0, 84148994, v13, v30, v29, 1u, 1, v35 | 0x100000000, v34 * v30, v44, v51,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0);
              v56[0] = (unint64_t)off_250402690;
              LODWORD(v45) = 0;
              result = AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v55, *(MTLPixelFormat *)(a1[808] + 808), v36, (AGX::G9::TextureFormatTable *)v37, 0, v48, 2, 0, 0, 84148994, v41, v30, v29, 1u, 1, v35 | 0x100000000, v40, v45, v49,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0);
              v55[0] = off_250402690;
              if (v31)
              {
                v42 = v40 * v29;
                v43 = v46 + v58[3 * v26];
                do
                {
                  v56[37] = 0;
                  v56[9] = (unint64_t)&v53[v43];
                  (*(void (**)(unint64_t *))(v56[0] + 16))(v56);
                  v55[37] = 0;
                  v55[9] = v52 + v43;
                  (*(void (**)(uint64_t))(v55[0] + 16))((uint64_t)v55);
                  v54 = 0;
                  result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::renderTexture((uint64_t)a1, (uint64_t)v60, (uint64_t)v55, 0, (uint64_t)&v59, (uint64_t)v56, (uint64_t)&v54, 0, 0, 0);
                  v43 += v42;
                  --v31;
                }
                while (v31);
              }
              v27 = v47;
              break;
          }
        }
        ++v26;
      }
      while (v26 != v27);
    }
  }
  return result;
}

double ___ZN3AGX11BlitContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXA10FamilyTexturejjS7_jjjj_block_invoke_2(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v4;
  uint32x2_t *v5;
  int v6;
  unsigned int v7;
  uint32x2_t *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint32x2_t v19;
  int64x2_t v20;
  double result;
  int64x2_t v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;

  v4 = (uint64_t *)a1[6];
  v5 = *(uint32x2_t **)(*(_QWORD *)a3 + 536);
  v6 = a3[4];
  v7 = v5[18].i32[0] + v6;
  v8 = *(uint32x2_t **)(*(_QWORD *)a2 + 536);
  v9 = a2[3];
  v10 = a2[4];
  v11 = v8[18].i32[0] + v10;
  v12 = (unsigned __int32)v5[17].i32[0] >> (v5[18].i8[0] + v6);
  if (v12 <= 1)
    v12 = 1;
  LODWORD(v13) = (unsigned __int32)v8[17].i32[0] >> v11;
  if (v13 <= 1)
    LODWORD(v13) = 1;
  if (v13 >= v12)
    v13 = v12;
  else
    v13 = v13;
  v24 = 0uLL;
  v14 = a2[2];
  v26 = 0uLL;
  v27 = 0;
  v15 = a1[4];
  v16 = a1[5];
  v17 = a3[2];
  v18 = a3[3];
  v25 = 0;
  v19 = vmin_u32(vmax_u32(vshl_u32(v8[16], (uint32x2_t)vneg_s32(vdup_n_s32(v11))), (uint32x2_t)0x100000001), vmax_u32(vshl_u32(v5[16], (uint32x2_t)vneg_s32(vdup_n_s32(v7))), (uint32x2_t)0x100000001));
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v22 = v20;
  v23 = v13;
  AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTextureImpl(v4, v15, v14, v9, v10, &v26, v16, v17, v18, v6, &v24, &v22);
  return result;
}

uint64_t ___ZN3AGX11BlitContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXA10FamilyTexturejjS7_jjjj_block_invoke_3(uint64_t result, uint64_t a2, _DWORD *a3)
{
  unsigned int v3;

  if (*(_BYTE *)(result + 40))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536) + 136) >> (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 536)
                                                                               + 144)
                                                                   + a3[4]);
    if (v3 <= 1)
      v3 = 1;
  }
  else
  {
    v3 = 1;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v3;
  return result;
}

__n128 __Block_byref_object_copy__222(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__223(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN3AGX11BlitContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXA10FamilyTexturejjS7_jjjj_block_invoke_182(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int64_t GPUVirtualAddress;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;

  v4 = a1;
  v5 = &OBJC_IVAR___BVHTopDownBuilder__library;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 536);
  v7 = a3[4];
  if (*(_BYTE *)(a1 + 48))
  {
    v8 = *(_DWORD *)(v6 + 144);
    v9 = v8 + v7;
    v10 = *(_DWORD *)(v6 + 136) >> (v8 + v7);
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 144) + v7;
    v11 = 1;
  }
  v12 = a3[2];
  v13 = *(unsigned __int8 *)(v6 + 380);
  if (v13 == 3 || v13 == 0)
  {
    v15 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(*(_QWORD *)(*(_QWORD *)a3 + 536), a3[2]);
  }
  else
  {
    v16 = v9 + 1;
    if (v9 + 1 < *(_DWORD *)(v6 + 140) || v16 == *(_DWORD *)(v6 + 64))
      v17 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(*(_QWORD *)(*(_QWORD *)a3 + 536), v16, a3[2]);
    else
      v17 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(*(_QWORD *)(*(_QWORD *)a3 + 536), a3[2]);
    v15 = v17
        - AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(v6, v9, v12);
  }
  v18 = 0;
  v39 = v4;
  v40 = v15;
  v38 = v11;
  do
  {
    v19 = *(_QWORD *)(*(_QWORD *)a3 + v5[56]);
    GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v19, a3[3], *(_DWORD *)(v19 + 144) + a3[4], v18, a3[2]);
    v21 = *(_QWORD **)(*(_QWORD *)(v4 + 40) + 8);
    v22 = v21[7];
    if (v21[6] != v22 && *(_QWORD *)(v22 - 8) == GPUVirtualAddress)
    {
      *(_QWORD *)(v22 - 8) = GPUVirtualAddress + v15;
    }
    else
    {
      v23 = (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 32) + 16))();
      v25 = v23;
      v26 = v24;
      v28 = (uint64_t *)v21[7];
      v27 = v21[8];
      if ((unint64_t)v28 >= v27)
      {
        v29 = (uint64_t *)v21[6];
        v30 = ((char *)v28 - (char *)v29) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          abort();
        v32 = v27 - (_QWORD)v29;
        if (v32 >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v34 = (char *)operator new(16 * v33);
        }
        else
        {
          v34 = 0;
        }
        v35 = (uint64_t *)&v34[16 * v30];
        *v35 = v25;
        v35[1] = v26;
        v36 = v35;
        if (v28 == v29)
        {
          v15 = v40;
        }
        else
        {
          v15 = v40;
          do
          {
            *((_OWORD *)v36 - 1) = *((_OWORD *)v28 - 1);
            v36 -= 2;
            v28 -= 2;
          }
          while (v28 != v29);
          v28 = (uint64_t *)v21[6];
        }
        v37 = v35 + 2;
        v21[6] = v36;
        v21[7] = v35 + 2;
        v21[8] = &v34[16 * v33];
        if (v28)
          operator delete(v28);
        v5 = &OBJC_IVAR___BVHTopDownBuilder__library;
        v4 = v39;
        v11 = v38;
        v21[7] = v37;
      }
      else
      {
        *v28 = v23;
        v28[1] = v24;
        v15 = v40;
        v21[7] = v28 + 2;
      }
    }
    ++v18;
  }
  while (v18 != v11);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 *v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  BOOL v52;
  __n128 v53;
  unint64_t v54;
  unint64_t n128_u64;
  __n128 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  __n128 *v60;
  __n128 *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 *v65;
  unint64_t v66;
  __n128 *v67;
  BOOL v69;
  uint64_t v70;
  __n128 *v71;
  __n128 *v72;
  __n128 *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  int64_t v79;
  BOOL v80;
  uint64_t v81;
  __n128 *v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  __n128 *v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  BOOL v90;
  unint64_t v91;
  __n128 *v92;
  uint64_t v93;
  __n128 *v94;
  unint64_t v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 *v101;
  __n128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __n128 *v107;
  unint64_t v108;
  unint64_t v109;
  __n128 *v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;

LABEL_1:
  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < v12->n128_u64[0])
          goto LABEL_99;
        return result;
      case 3:
        v61 = v12 + 1;
        v62 = v12[1].n128_u64[0];
        v63 = v9->n128_u64[0];
        if (v62 >= v12->n128_u64[0])
        {
          if (v63 < v62)
          {
            result = *v61;
            *v61 = *v9;
            *v9 = result;
            goto LABEL_178;
          }
        }
        else if (v63 >= v62)
        {
          v133 = *v12;
          *v12 = *v61;
          result = v133;
          *v61 = v133;
          if (v9->n128_u64[0] < v12[1].n128_u64[0])
          {
            result = *v61;
            *v61 = *v9;
            *v9 = result;
          }
        }
        else
        {
LABEL_99:
          v129 = *v12;
          *v12 = *v9;
          result = v129;
          *v9 = v129;
        }
        return result;
      case 4:
        v61 = v12 + 1;
        v64 = v12[1].n128_u64[0];
        v65 = v12 + 2;
        v66 = v12[2].n128_u64[0];
        if (v64 >= v12->n128_u64[0])
        {
          if (v66 < v64)
          {
            result = *v61;
            *v61 = *v65;
            *v65 = result;
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v131 = *v12;
              *v12 = *v61;
              result = v131;
              *v61 = v131;
            }
          }
        }
        else
        {
          if (v66 >= v64)
          {
            v134 = *v12;
            *v12 = *v61;
            result = v134;
            *v61 = v134;
            if (v66 >= v12[1].n128_u64[0])
              goto LABEL_175;
            result = *v61;
            *v61 = *v65;
          }
          else
          {
            v130 = *v12;
            *v12 = *v65;
            result = v130;
          }
          *v65 = result;
        }
LABEL_175:
        if (v9->n128_u64[0] < v65->n128_u64[0])
        {
          result = *v65;
          *v65 = *v9;
          *v9 = result;
          if (v65->n128_u64[0] < v61->n128_u64[0])
          {
            result = *v61;
            *v61 = *v65;
            *v65 = result;
LABEL_178:
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v135 = *v12;
              *v12 = *v61;
              result = v135;
              *v61 = v135;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v78 = (unint64_t)(v14 - 2) >> 1;
              v79 = v78;
              do
              {
                if (v78 >= v79)
                {
                  v81 = (2 * v79) | 1;
                  v82 = &v12[v81];
                  v83 = v82->n128_u64[0];
                  if (2 * v79 + 2 < v14)
                  {
                    v84 = v82[1].n128_u64[0];
                    v85 = v83 >= v84;
                    if (v83 <= v84)
                      v83 = v82[1].n128_u64[0];
                    if (!v85)
                    {
                      ++v82;
                      v81 = 2 * v79 + 2;
                    }
                  }
                  v86 = &v12[v79];
                  v87 = *v86;
                  v88 = v86->n128_u64[0];
                  if (v83 >= v86->n128_u64[0])
                  {
                    do
                    {
                      v92 = v82;
                      *v86 = *v82;
                      if (v78 < v81)
                        break;
                      v93 = (2 * v81) | 1;
                      v82 = &v12[v93];
                      v81 = 2 * v81 + 2;
                      v91 = v82->n128_u64[0];
                      if (v81 < v14)
                      {
                        v89 = v82[1].n128_u64[0];
                        v90 = v91 >= v89;
                        if (v91 <= v89)
                          v91 = v82[1].n128_u64[0];
                        if (v90)
                          v81 = v93;
                        else
                          ++v82;
                      }
                      else
                      {
                        v81 = v93;
                      }
                      v86 = v92;
                    }
                    while (v91 >= v88);
                    *v92 = v87;
                  }
                }
                v80 = v79-- <= 0;
              }
              while (!v80);
              v99 = (unint64_t)v13 >> 4;
              do
              {
                v100 = 0;
                v132 = *v12;
                v101 = v12;
                do
                {
                  v102 = &v101[v100 + 1];
                  v103 = (2 * v100) | 1;
                  v104 = 2 * v100 + 2;
                  if (v104 < v99 && v102->n128_u64[0] < v102[1].n128_u64[0])
                  {
                    ++v102;
                    v103 = v104;
                  }
                  *v101 = *v102;
                  v101 = v102;
                  v100 = v103;
                }
                while (v103 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
                if (v102 == --a2)
                {
                  result = v132;
                  *v102 = v132;
                }
                else
                {
                  *v102 = *a2;
                  result = v132;
                  *a2 = v132;
                  v105 = (char *)v102 - (char *)v12 + 16;
                  if (v105 >= 17)
                  {
                    v106 = (((unint64_t)v105 >> 4) - 2) >> 1;
                    v107 = &v12[v106];
                    v108 = v102->n128_u64[0];
                    if (v107->n128_u64[0] < v102->n128_u64[0])
                    {
                      v109 = v102->n128_u64[1];
                      do
                      {
                        v110 = v107;
                        result = *v107;
                        *v102 = *v107;
                        if (!v106)
                          break;
                        v106 = (v106 - 1) >> 1;
                        v107 = &v12[v106];
                        v102 = v110;
                      }
                      while (v107->n128_u64[0] < v108);
                      v110->n128_u64[0] = v108;
                      v110->n128_u64[1] = v109;
                    }
                  }
                }
                v80 = v99-- <= 2;
              }
              while (!v80);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = v16->n128_u64[0];
            if (v16->n128_u64[0] >= v12->n128_u64[0])
            {
              if (v17 < v18)
              {
                v113 = *v16;
                *v16 = *v9;
                *v9 = v113;
                if (v16->n128_u64[0] < v12->n128_u64[0])
                {
                  v114 = *v12;
                  *v12 = *v16;
                  *v16 = v114;
                }
              }
            }
            else
            {
              if (v17 >= v18)
              {
                v117 = *v12;
                *v12 = *v16;
                *v16 = v117;
                if (v9->n128_u64[0] >= v16->n128_u64[0])
                  goto LABEL_21;
                v111 = *v16;
                *v16 = *v9;
              }
              else
              {
                v111 = *v12;
                *v12 = *v9;
              }
              *v9 = v111;
            }
LABEL_21:
            v20 = v12 + 1;
            v21 = &v12[v15];
            v24 = v21[-1].n128_u64[0];
            v22 = v21 - 1;
            v23 = v24;
            v25 = v10->n128_u64[0];
            if (v24 >= v12[1].n128_u64[0])
            {
              if (v25 < v23)
              {
                v118 = *v22;
                *v22 = *v10;
                *v10 = v118;
                if (v22->n128_u64[0] < v20->n128_u64[0])
                {
                  v27 = *v20;
                  *v20 = *v22;
                  *v22 = v27;
                }
              }
            }
            else
            {
              if (v25 >= v23)
              {
                v28 = *v20;
                *v20 = *v22;
                *v22 = v28;
                if (v10->n128_u64[0] >= v22->n128_u64[0])
                  goto LABEL_33;
                v120 = *v22;
                *v22 = *v10;
                v26 = v120;
              }
              else
              {
                v26 = *v20;
                *v20 = *v10;
              }
              *v10 = v26;
            }
LABEL_33:
            v29 = v12 + 2;
            v30 = &v12[v15];
            v33 = v30[1].n128_u64[0];
            v31 = v30 + 1;
            v32 = v33;
            v34 = v11->n128_u64[0];
            if (v33 >= v12[2].n128_u64[0])
            {
              if (v34 < v32)
              {
                v121 = *v31;
                *v31 = *v11;
                *v11 = v121;
                if (v31->n128_u64[0] < v29->n128_u64[0])
                {
                  v36 = *v29;
                  *v29 = *v31;
                  *v31 = v36;
                }
              }
            }
            else
            {
              if (v34 >= v32)
              {
                v37 = *v29;
                *v29 = *v31;
                *v31 = v37;
                if (v11->n128_u64[0] >= v31->n128_u64[0])
                  goto LABEL_42;
                v122 = *v31;
                *v31 = *v11;
                v35 = v122;
              }
              else
              {
                v35 = *v29;
                *v29 = *v11;
              }
              *v11 = v35;
            }
LABEL_42:
            v38 = v16->n128_u64[0];
            v39 = v31->n128_u64[0];
            if (v16->n128_u64[0] >= v22->n128_u64[0])
            {
              if (v39 < v38)
              {
                v124 = *v16;
                *v16 = *v31;
                *v31 = v124;
                if (v16->n128_u64[0] < v22->n128_u64[0])
                {
                  v125 = *v22;
                  *v22 = *v16;
                  *v16 = v125;
                }
              }
              goto LABEL_51;
            }
            if (v39 >= v38)
            {
              v126 = *v22;
              *v22 = *v16;
              *v16 = v126;
              if (v31->n128_u64[0] >= v16->n128_u64[0])
              {
LABEL_51:
                v127 = *v12;
                *v12 = *v16;
                result = v127;
                *v16 = v127;
                goto LABEL_52;
              }
              v123 = *v16;
              *v16 = *v31;
            }
            else
            {
              v123 = *v22;
              *v22 = *v31;
            }
            *v31 = v123;
            goto LABEL_51;
          }
          v19 = v12->n128_u64[0];
          if (v12->n128_u64[0] >= v16->n128_u64[0])
          {
            if (v17 < v19)
            {
              v115 = *v12;
              *v12 = *v9;
              result = v115;
              *v9 = v115;
              if (v12->n128_u64[0] < v16->n128_u64[0])
              {
                v116 = *v16;
                *v16 = *v12;
                result = v116;
                *v12 = v116;
              }
            }
          }
          else
          {
            if (v17 >= v19)
            {
              v119 = *v16;
              *v16 = *v12;
              result = v119;
              *v12 = v119;
              if (v9->n128_u64[0] >= v12->n128_u64[0])
                goto LABEL_52;
              v112 = *v12;
              *v12 = *v9;
            }
            else
            {
              v112 = *v16;
              *v16 = *v9;
            }
            result = v112;
            *v9 = v112;
          }
LABEL_52:
          --a3;
          v40 = v12->n128_u64[0];
          if ((a4 & 1) == 0)
          {
            v41 = v12->n128_u64[1];
            if (v12[-1].n128_u64[0] < v40)
              goto LABEL_55;
            if (v40 >= v9->n128_u64[0])
            {
              n128_u64 = (unint64_t)v12[1].n128_u64;
              do
              {
                v12 = (__n128 *)n128_u64;
                if (n128_u64 >= (unint64_t)a2)
                  break;
                n128_u64 += 16;
              }
              while (v40 >= v12->n128_u64[0]);
            }
            else
            {
              do
              {
                v54 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v40 >= v54);
            }
            v56 = a2;
            if (v12 < a2)
            {
              v56 = a2;
              do
              {
                v57 = v56[-1].n128_u64[0];
                --v56;
              }
              while (v40 < v57);
            }
            while (v12 < v56)
            {
              v128 = *v12;
              *v12 = *v56;
              result = v128;
              *v56 = v128;
              do
              {
                v58 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v40 >= v58);
              do
              {
                v59 = v56[-1].n128_u64[0];
                --v56;
              }
              while (v40 < v59);
            }
            v60 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v60;
              *a1 = *v60;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v40;
            v12[-1].n128_u64[1] = v41;
            continue;
          }
          v41 = v12->n128_u64[1];
LABEL_55:
          v42 = v12;
          do
          {
            v43 = v42;
            v44 = v42[1].n128_u64[0];
            ++v42;
          }
          while (v44 < v40);
          v45 = a2;
          if (v43 == v12)
          {
            v45 = a2;
            do
            {
              if (v42 >= v45)
                break;
              v47 = v45[-1].n128_u64[0];
              --v45;
            }
            while (v47 >= v40);
          }
          else
          {
            do
            {
              v46 = v45[-1].n128_u64[0];
              --v45;
            }
            while (v46 >= v40);
          }
          v12 = v42;
          if (v42 < v45)
          {
            v48 = v45;
            do
            {
              result = *v12;
              *v12 = *v48;
              *v48 = result;
              do
              {
                v49 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v49 < v40);
              do
              {
                v50 = v48[-1].n128_u64[0];
                --v48;
              }
              while (v50 >= v40);
            }
            while (v12 < v48);
          }
          v51 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v51;
            *a1 = *v51;
          }
          v12[-1].n128_u64[0] = v40;
          v12[-1].n128_u64[1] = v41;
          if (v42 < v45)
            goto LABEL_74;
          v52 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(a1, v12 - 1, result);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(v12, a2, v53))
          {
            if (v52)
              continue;
LABEL_74:
            std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v52)
            return result;
          goto LABEL_1;
        }
        v67 = v12 + 1;
        v69 = v12 == a2 || v67 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v69)
          {
            v70 = 0;
            v71 = v12;
            do
            {
              v73 = v67;
              v74 = v71[1].n128_u64[0];
              if (v74 < v71->n128_u64[0])
              {
                v75 = v71[1].n128_i64[1];
                v76 = v70;
                do
                {
                  result = *(__n128 *)((char *)v12 + v76);
                  *(__n128 *)((char *)v12 + v76 + 16) = result;
                  if (!v76)
                  {
                    v72 = v12;
                    goto LABEL_114;
                  }
                  v77 = *(unint64_t *)((char *)v12[-1].n128_u64 + v76);
                  v76 -= 16;
                }
                while (v74 < v77);
                v72 = (__n128 *)((char *)v12 + v76 + 16);
LABEL_114:
                v72->n128_u64[0] = v74;
                v72->n128_u64[1] = v75;
              }
              v67 = v73 + 1;
              v70 += 16;
              v71 = v73;
            }
            while (&v73[1] != a2);
          }
        }
        else if (!v69)
        {
          do
          {
            v94 = v67;
            v95 = a1[1].n128_u64[0];
            if (v95 < a1->n128_u64[0])
            {
              v96 = a1[1].n128_u64[1];
              v97 = v94;
              do
              {
                result = v97[-1];
                *v97 = result;
                v98 = v97[-2].n128_u64[0];
                --v97;
              }
              while (v95 < v98);
              v97->n128_u64[0] = v95;
              v97->n128_u64[1] = v96;
            }
            v67 = v94 + 1;
            a1 = v94;
          }
          while (&v94[1] != a2);
        }
        return result;
    }
  }
}

  v9 = (__n128 *)(a2 - 24);
  v10 = (unint64_t *)(a2 - 48);
  v11 = (unint64_t *)(a2 - 72);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < *(_QWORD *)v12)
          goto LABEL_98;
        return result;
      case 3:
        v91 = (__n128 *)(v12 + 24);
        v92 = *(_QWORD *)(v12 + 24);
        v93 = v9->n128_u64[0];
        if (v92 >= *(_QWORD *)v12)
        {
          if (v93 < v92)
          {
            result = *v91;
            v125 = *(_QWORD *)(v12 + 40);
            v126 = *(_QWORD *)(a2 - 8);
            *v91 = *v9;
            *(_QWORD *)(v12 + 40) = v126;
            *(_QWORD *)(a2 - 8) = v125;
            *v9 = result;
            goto LABEL_178;
          }
        }
        else if (v93 >= v92)
        {
          v200 = *(_QWORD *)(v12 + 16);
          v175 = *(__n128 *)v12;
          *(__n128 *)v12 = *v91;
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
          result = v175;
          *v91 = v175;
          *(_QWORD *)(v12 + 40) = v200;
          if (v9->n128_u64[0] < *(_QWORD *)(v12 + 24))
          {
            result = *v91;
            v145 = *(_QWORD *)(v12 + 40);
            v146 = *(_QWORD *)(a2 - 8);
            *v91 = *v9;
            *(_QWORD *)(v12 + 40) = v146;
            *(_QWORD *)(a2 - 8) = v145;
            *v9 = result;
          }
        }
        else
        {
LABEL_98:
          v196 = *(_QWORD *)(v12 + 16);
          v168 = *(__n128 *)v12;
          v94 = *v9;
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
          *(__n128 *)v12 = v94;
          result = v168;
          *(_QWORD *)(a2 - 8) = v196;
          *v9 = v168;
        }
        return result;
      case 4:
        v91 = (__n128 *)(v12 + 24);
        v95 = *(_QWORD *)(v12 + 24);
        v96 = (__n128 *)(v12 + 48);
        v97 = *(_QWORD *)(v12 + 48);
        if (v95 >= *(_QWORD *)v12)
        {
          if (v97 < v95)
          {
            v127 = *(_QWORD *)(v12 + 40);
            result = *v91;
            *v91 = *v96;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v96 = result;
            *(_QWORD *)(v12 + 64) = v127;
            if (*(_QWORD *)(v12 + 24) < *(_QWORD *)v12)
            {
              v198 = *(_QWORD *)(v12 + 16);
              v172 = *(__n128 *)v12;
              *(__n128 *)v12 = *v91;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
              result = v172;
              *v91 = v172;
              *(_QWORD *)(v12 + 40) = v198;
            }
          }
        }
        else
        {
          if (v97 >= v95)
          {
            v201 = *(_QWORD *)(v12 + 16);
            v176 = *(__n128 *)v12;
            *(__n128 *)v12 = *v91;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            result = v176;
            *v91 = v176;
            *(_QWORD *)(v12 + 40) = v201;
            if (v97 >= *(_QWORD *)(v12 + 24))
              goto LABEL_175;
            v98 = *(_QWORD *)(v12 + 40);
            result = *v91;
            *v91 = *v96;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v96 = result;
          }
          else
          {
            v197 = *(_QWORD *)(v12 + 16);
            v169 = *(__n128 *)v12;
            *(__n128 *)v12 = *v96;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 64);
            result = v169;
            *v96 = v169;
            v98 = v197;
          }
          *(_QWORD *)(v12 + 64) = v98;
        }
LABEL_175:
        if (v9->n128_u64[0] < v96->n128_u64[0])
        {
          result = *v96;
          v147 = *(_QWORD *)(v12 + 64);
          v148 = *(_QWORD *)(a2 - 8);
          *v96 = *v9;
          *(_QWORD *)(v12 + 64) = v148;
          *(_QWORD *)(a2 - 8) = v147;
          *v9 = result;
          if (v96->n128_u64[0] < v91->n128_u64[0])
          {
            v149 = *(_QWORD *)(v12 + 40);
            result = *v91;
            *v91 = *v96;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v96 = result;
            *(_QWORD *)(v12 + 64) = v149;
LABEL_178:
            if (*(_QWORD *)(v12 + 24) < *(_QWORD *)v12)
            {
              v202 = *(_QWORD *)(v12 + 16);
              v177 = *(__n128 *)v12;
              *(__n128 *)v12 = *v91;
              *(_QWORD *)(v12 + 16) = v91[1].n128_u64[0];
              result = v177;
              *v91 = v177;
              v91[1].n128_u64[0] = v202;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*>((__n128 *)v12, (__n128 *)(v12 + 24), (unint64_t *)(v12 + 48), v12 + 72, a2 - 24, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 575)
        {
          v99 = v12 + 24;
          v101 = v12 == a2 || v99 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v101)
            {
              v102 = 0;
              v103 = (__n128 *)v12;
              do
              {
                v105 = (__n128 *)v99;
                v106 = v103[1].n128_u64[1];
                if (v106 < v103->n128_u64[0])
                {
                  v170 = v103[2];
                  v107 = v102;
                  do
                  {
                    v108 = v12 + v107;
                    *(_OWORD *)(v108 + 24) = *(_OWORD *)(v12 + v107);
                    *(_QWORD *)(v108 + 40) = *(_QWORD *)(v12 + v107 + 16);
                    if (!v107)
                    {
                      v104 = v12;
                      goto LABEL_113;
                    }
                    v107 -= 24;
                  }
                  while (v106 < *(_QWORD *)(v108 - 24));
                  v104 = v12 + v107 + 24;
LABEL_113:
                  *(_QWORD *)v104 = v106;
                  result = v170;
                  *(__n128 *)(v104 + 8) = v170;
                }
                v99 = (unint64_t)&v105[1].n128_u64[1];
                v102 += 24;
                v103 = v105;
              }
              while (&v105[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          else if (!v101)
          {
            do
            {
              v128 = v99;
              v129 = *(_QWORD *)(a1 + 24);
              if (v129 < *(_QWORD *)a1)
              {
                v173 = *(__n128 *)(a1 + 32);
                do
                {
                  *(_OWORD *)v99 = *(_OWORD *)(v99 - 24);
                  *(_QWORD *)(v99 + 16) = *(_QWORD *)(v99 - 8);
                  v130 = *(_QWORD *)(v99 - 48);
                  v99 -= 24;
                }
                while (v129 < v130);
                *(_QWORD *)v99 = v129;
                result = v173;
                *(__n128 *)(v99 + 8) = v173;
              }
              v99 = v128 + 24;
              a1 = v128;
            }
            while (v128 + 24 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v109 = (unint64_t)(v14 - 2) >> 1;
            v110 = v109;
            do
            {
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = (unint64_t *)(v12 + 24 * v112);
                v114 = *v113;
                if (2 * v110 + 2 < v14)
                {
                  v115 = v113[3];
                  v116 = v114 >= v115;
                  if (v114 <= v115)
                    v114 = v113[3];
                  if (!v116)
                  {
                    v113 += 3;
                    v112 = 2 * v110 + 2;
                  }
                }
                v117 = (unint64_t *)(v12 + 24 * v110);
                v118 = *v117;
                if (v114 >= *v117)
                {
                  v171 = *(_OWORD *)(v117 + 1);
                  while (1)
                  {
                    v122 = v117;
                    v117 = v113;
                    v123 = *(_OWORD *)v113;
                    v122[2] = v113[2];
                    *(_OWORD *)v122 = v123;
                    if (v109 < v112)
                      break;
                    v124 = (2 * v112) | 1;
                    v113 = (unint64_t *)(v12 + 24 * v124);
                    v112 = 2 * v112 + 2;
                    v121 = *v113;
                    if (v112 < v14)
                    {
                      v119 = v113[3];
                      v120 = v121 >= v119;
                      if (v121 <= v119)
                        v121 = v113[3];
                      if (v120)
                        v112 = v124;
                      else
                        v113 += 3;
                      if (v121 < v118)
                        break;
                    }
                    else
                    {
                      v112 = v124;
                      if (v121 < v118)
                        break;
                    }
                  }
                  *v117 = v118;
                  *(_OWORD *)(v117 + 1) = v171;
                }
              }
              v111 = v110-- <= 0;
            }
            while (!v111);
            v131 = v13 / 0x18uLL;
            do
            {
              v132 = 0;
              v199 = *(_QWORD *)(v12 + 16);
              v174 = *(__n128 *)v12;
              v133 = v12;
              do
              {
                v135 = v133 + 24 * v132 + 24;
                v136 = (2 * v132) | 1;
                v137 = 2 * v132 + 2;
                if (v137 < v131 && *(_QWORD *)v135 < *(_QWORD *)(v135 + 24))
                {
                  v135 += 24;
                  v136 = v137;
                }
                v134 = *(_OWORD *)v135;
                *(_QWORD *)(v133 + 16) = *(_QWORD *)(v135 + 16);
                *(_OWORD *)v133 = v134;
                v133 = v135;
                v132 = v136;
              }
              while (v136 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
              a2 -= 24;
              if (v135 == a2)
              {
                result = v174;
                *(_QWORD *)(v135 + 16) = v199;
                *(__n128 *)v135 = v174;
              }
              else
              {
                v138 = *(__n128 *)a2;
                *(_QWORD *)(v135 + 16) = *(_QWORD *)(a2 + 16);
                *(__n128 *)v135 = v138;
                result = v174;
                *(_QWORD *)(a2 + 16) = v199;
                *(__n128 *)a2 = v174;
                v139 = v135 - v12 + 24;
                if (v139 >= 25)
                {
                  v140 = (v139 / 0x18uLL - 2) >> 1;
                  v141 = v12 + 24 * v140;
                  v142 = *(_QWORD *)v135;
                  if (*(_QWORD *)v141 < *(_QWORD *)v135)
                  {
                    v205 = *(__n128 *)(v135 + 8);
                    do
                    {
                      v143 = v135;
                      v135 = v141;
                      v144 = *(_OWORD *)v141;
                      *(_QWORD *)(v143 + 16) = *(_QWORD *)(v141 + 16);
                      *(_OWORD *)v143 = v144;
                      if (!v140)
                        break;
                      v140 = (v140 - 1) >> 1;
                      v141 = v12 + 24 * v140;
                    }
                    while (*(_QWORD *)v141 < v142);
                    *(_QWORD *)v135 = v142;
                    result = v205;
                    *(__n128 *)(v135 + 8) = v205;
                  }
                }
              }
              v111 = v131-- <= 2;
            }
            while (!v111);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = (unint64_t *)(v12 + 24 * ((unint64_t)v14 >> 1));
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 >= 0xC01)
        {
          v18 = *v16;
          if (*v16 >= *(_QWORD *)v12)
          {
            if (v17 < v18)
            {
              v180 = v16[2];
              v152 = *(__n128 *)v16;
              v22 = *v9;
              v16[2] = *(_QWORD *)(a2 - 8);
              *(__n128 *)v16 = v22;
              *(_QWORD *)(a2 - 8) = v180;
              *v9 = v152;
              if (*v16 < *(_QWORD *)v12)
              {
                v181 = *(_QWORD *)(v12 + 16);
                v153 = *(__n128 *)v12;
                v23 = *(__n128 *)v16;
                *(_QWORD *)(v12 + 16) = v16[2];
                *(__n128 *)v12 = v23;
                v16[2] = v181;
                *(__n128 *)v16 = v153;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v178 = *(_QWORD *)(v12 + 16);
              v150 = *(__n128 *)v12;
              v19 = *v9;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
              *(__n128 *)v12 = v19;
              goto LABEL_20;
            }
            v184 = *(_QWORD *)(v12 + 16);
            v156 = *(__n128 *)v12;
            v26 = *(__n128 *)v16;
            *(_QWORD *)(v12 + 16) = v16[2];
            *(__n128 *)v12 = v26;
            v16[2] = v184;
            *(__n128 *)v16 = v156;
            if (v9->n128_u64[0] < *v16)
            {
              v178 = v16[2];
              v150 = *(__n128 *)v16;
              v27 = *v9;
              v16[2] = *(_QWORD *)(a2 - 8);
              *(__n128 *)v16 = v27;
LABEL_20:
              *(_QWORD *)(a2 - 8) = v178;
              *v9 = v150;
            }
          }
          v28 = (__int128 *)(v12 + 24);
          v29 = v12 + 24 * v15;
          v32 = *(_QWORD *)(v29 - 24);
          v30 = v29 - 24;
          v31 = v32;
          v33 = *v10;
          if (v32 >= *(_QWORD *)(v12 + 24))
          {
            if (v33 < v31)
            {
              v185 = *(_QWORD *)(v30 + 16);
              v157 = *(_OWORD *)v30;
              v37 = *(_OWORD *)v10;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(a2 - 32);
              *(_OWORD *)v30 = v37;
              *(_QWORD *)(a2 - 32) = v185;
              *(_OWORD *)v10 = v157;
              if (*(_QWORD *)v30 < *(_QWORD *)v28)
              {
                v38 = *v28;
                v39 = *(_QWORD *)(v12 + 40);
                v40 = *(_QWORD *)(v30 + 16);
                *v28 = *(_OWORD *)v30;
                *(_QWORD *)(v12 + 40) = v40;
                *(_QWORD *)(v30 + 16) = v39;
                *(_OWORD *)v30 = v38;
              }
            }
          }
          else
          {
            if (v33 < v31)
            {
              v34 = *v28;
              v35 = *(_QWORD *)(v12 + 40);
              v36 = *(_QWORD *)(a2 - 32);
              *v28 = *(_OWORD *)v10;
              *(_QWORD *)(v12 + 40) = v36;
              *(_QWORD *)(a2 - 32) = v35;
              goto LABEL_32;
            }
            v43 = *v28;
            v44 = *(_QWORD *)(v12 + 40);
            v45 = *(_QWORD *)(v30 + 16);
            *v28 = *(_OWORD *)v30;
            *(_QWORD *)(v12 + 40) = v45;
            *(_QWORD *)(v30 + 16) = v44;
            *(_OWORD *)v30 = v43;
            if (*v10 < *(_QWORD *)v30)
            {
              v187 = *(_QWORD *)(v30 + 16);
              v159 = *(_OWORD *)v30;
              v46 = *(_OWORD *)v10;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(a2 - 32);
              *(_OWORD *)v30 = v46;
              v34 = v159;
              *(_QWORD *)(a2 - 32) = v187;
LABEL_32:
              *(_OWORD *)v10 = v34;
            }
          }
          v47 = (__int128 *)(v12 + 48);
          v48 = v12 + 24 * v15;
          v51 = *(_QWORD *)(v48 + 24);
          v49 = v48 + 24;
          v50 = v51;
          v52 = *v11;
          if (v51 >= *(_QWORD *)(v12 + 48))
          {
            if (v52 < v50)
            {
              v188 = *(_QWORD *)(v49 + 16);
              v160 = *(_OWORD *)v49;
              v56 = *(_OWORD *)v11;
              *(_QWORD *)(v49 + 16) = *(_QWORD *)(a2 - 56);
              *(_OWORD *)v49 = v56;
              *(_QWORD *)(a2 - 56) = v188;
              *(_OWORD *)v11 = v160;
              if (*(_QWORD *)v49 < *(_QWORD *)v47)
              {
                v57 = *v47;
                v58 = *(_QWORD *)(v12 + 64);
                v59 = *(_QWORD *)(v49 + 16);
                *v47 = *(_OWORD *)v49;
                *(_QWORD *)(v12 + 64) = v59;
                *(_QWORD *)(v49 + 16) = v58;
                *(_OWORD *)v49 = v57;
              }
            }
          }
          else
          {
            if (v52 < v50)
            {
              v53 = *v47;
              v54 = *(_QWORD *)(v12 + 64);
              v55 = *(_QWORD *)(a2 - 56);
              *v47 = *(_OWORD *)v11;
              *(_QWORD *)(v12 + 64) = v55;
              *(_QWORD *)(a2 - 56) = v54;
              goto LABEL_41;
            }
            v60 = *v47;
            v61 = *(_QWORD *)(v12 + 64);
            v62 = *(_QWORD *)(v49 + 16);
            *v47 = *(_OWORD *)v49;
            *(_QWORD *)(v12 + 64) = v62;
            *(_QWORD *)(v49 + 16) = v61;
            *(_OWORD *)v49 = v60;
            if (*v11 < *(_QWORD *)v49)
            {
              v189 = *(_QWORD *)(v49 + 16);
              v161 = *(_OWORD *)v49;
              v63 = *(_OWORD *)v11;
              *(_QWORD *)(v49 + 16) = *(_QWORD *)(a2 - 56);
              *(_OWORD *)v49 = v63;
              v53 = v161;
              *(_QWORD *)(a2 - 56) = v189;
LABEL_41:
              *(_OWORD *)v11 = v53;
            }
          }
          v64 = *v16;
          v65 = *(_QWORD *)v49;
          if (*v16 >= *(_QWORD *)v30)
          {
            if (v65 < v64)
            {
              v191 = v16[2];
              v163 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              v16[2] = *(_QWORD *)(v49 + 16);
              *(_QWORD *)(v49 + 16) = v191;
              *(__n128 *)v49 = v163;
              if (*v16 < *(_QWORD *)v30)
              {
                v192 = *(_QWORD *)(v30 + 16);
                v164 = *(_OWORD *)v30;
                *(_OWORD *)v30 = *(_OWORD *)v16;
                *(_QWORD *)(v30 + 16) = v16[2];
                v16[2] = v192;
                *(_OWORD *)v16 = v164;
              }
            }
          }
          else
          {
            if (v65 < v64)
            {
              v190 = *(_QWORD *)(v30 + 16);
              v162 = *(_OWORD *)v30;
              *(_OWORD *)v30 = *(_OWORD *)v49;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(v49 + 16);
              goto LABEL_50;
            }
            v193 = *(_QWORD *)(v30 + 16);
            v165 = *(_OWORD *)v30;
            *(_OWORD *)v30 = *(_OWORD *)v16;
            *(_QWORD *)(v30 + 16) = v16[2];
            v16[2] = v193;
            *(_OWORD *)v16 = v165;
            if (*(_QWORD *)v49 < *v16)
            {
              v190 = v16[2];
              v162 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v49;
              v16[2] = *(_QWORD *)(v49 + 16);
LABEL_50:
              *(_QWORD *)(v49 + 16) = v190;
              *(_OWORD *)v49 = v162;
            }
          }
          v194 = *(_QWORD *)(v12 + 16);
          v166 = *(__n128 *)v12;
          v66 = *(__n128 *)v16;
          *(_QWORD *)(v12 + 16) = v16[2];
          *(__n128 *)v12 = v66;
          v16[2] = v194;
          *(__n128 *)v16 = v166;
          goto LABEL_52;
        }
        v20 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= *v16)
        {
          if (v17 < v20)
          {
            v182 = *(_QWORD *)(v12 + 16);
            v154 = *(__n128 *)v12;
            v24 = *v9;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
            *(__n128 *)v12 = v24;
            *(_QWORD *)(a2 - 8) = v182;
            *v9 = v154;
            if (*(_QWORD *)v12 < *v16)
            {
              v183 = v16[2];
              v155 = *(__n128 *)v16;
              v25 = *(__n128 *)v12;
              v16[2] = *(_QWORD *)(v12 + 16);
              *(__n128 *)v16 = v25;
              *(_QWORD *)(v12 + 16) = v183;
              *(__n128 *)v12 = v155;
            }
          }
        }
        else
        {
          if (v17 >= v20)
          {
            v186 = v16[2];
            v158 = *(__n128 *)v16;
            v41 = *(__n128 *)v12;
            v16[2] = *(_QWORD *)(v12 + 16);
            *(__n128 *)v16 = v41;
            *(_QWORD *)(v12 + 16) = v186;
            *(__n128 *)v12 = v158;
            if (v9->n128_u64[0] >= *(_QWORD *)v12)
              goto LABEL_52;
            v179 = *(_QWORD *)(v12 + 16);
            v151 = *(__n128 *)v12;
            v42 = *v9;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 8);
            *(__n128 *)v12 = v42;
          }
          else
          {
            v179 = v16[2];
            v151 = *(__n128 *)v16;
            v21 = *v9;
            v16[2] = *(_QWORD *)(a2 - 8);
            *(__n128 *)v16 = v21;
          }
          *(_QWORD *)(a2 - 8) = v179;
          *v9 = v151;
        }
LABEL_52:
        --a3;
        v67 = *(_QWORD *)v12;
        if ((a4 & 1) == 0 && *(_QWORD *)(v12 - 24) >= v67)
        {
          v204 = *(__n128 *)(v12 + 8);
          if (v67 >= v9->n128_u64[0])
          {
            v84 = v12 + 24;
            do
            {
              v12 = v84;
              if (v84 >= a2)
                break;
              v84 += 24;
            }
            while (v67 >= *(_QWORD *)v12);
          }
          else
          {
            do
            {
              v83 = *(_QWORD *)(v12 + 24);
              v12 += 24;
            }
            while (v67 >= v83);
          }
          v85 = a2;
          if (v12 < a2)
          {
            v85 = a2;
            do
            {
              v86 = *(_QWORD *)(v85 - 24);
              v85 -= 24;
            }
            while (v67 < v86);
          }
          while (v12 < v85)
          {
            v195 = *(_QWORD *)(v12 + 16);
            v167 = *(__n128 *)v12;
            v87 = *(__n128 *)v85;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v85 + 16);
            *(__n128 *)v12 = v87;
            *(_QWORD *)(v85 + 16) = v195;
            *(__n128 *)v85 = v167;
            do
            {
              v88 = *(_QWORD *)(v12 + 24);
              v12 += 24;
            }
            while (v67 >= v88);
            do
            {
              v89 = *(_QWORD *)(v85 - 24);
              v85 -= 24;
            }
            while (v67 < v89);
          }
          if (v12 - 24 != a1)
          {
            v90 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)a1 = v90;
          }
          a4 = 0;
          *(_QWORD *)(v12 - 24) = v67;
          result = v204;
          *(__n128 *)(v12 - 16) = v204;
          continue;
        }
        v203 = *(__n128 *)(v12 + 8);
        v68 = v12;
        do
        {
          v69 = v68;
          v70 = *(_QWORD *)(v68 + 24);
          v68 += 24;
        }
        while (v70 < v67);
        v71 = a2;
        if (v69 == v12)
        {
          v71 = a2;
          do
          {
            if (v68 >= v71)
              break;
            v73 = *(_QWORD *)(v71 - 24);
            v71 -= 24;
          }
          while (v73 >= v67);
        }
        else
        {
          do
          {
            v72 = *(_QWORD *)(v71 - 24);
            v71 -= 24;
          }
          while (v72 >= v67);
        }
        v12 = v68;
        if (v68 < v71)
        {
          v74 = v71;
          do
          {
            v75 = *(__n128 *)v12;
            v76 = *(_QWORD *)(v12 + 16);
            v77 = *(_QWORD *)(v74 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v74;
            *(_QWORD *)(v12 + 16) = v77;
            *(_QWORD *)(v74 + 16) = v76;
            *(__n128 *)v74 = v75;
            do
            {
              v78 = *(_QWORD *)(v12 + 24);
              v12 += 24;
            }
            while (v78 < v67);
            do
            {
              v79 = *(_QWORD *)(v74 - 24);
              v74 -= 24;
            }
            while (v79 >= v67);
          }
          while (v12 < v74);
        }
        if (v12 - 24 != a1)
        {
          v80 = *(_OWORD *)(v12 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
          *(_OWORD *)a1 = v80;
        }
        *(_QWORD *)(v12 - 24) = v67;
        *(__n128 *)(v12 - 16) = v203;
        if (v68 < v71)
        {
LABEL_73:
          std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*,false>(a1, v12 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v81 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*>(a1, (_OWORD *)(v12 - 24), v203);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*>(v12, (_OWORD *)a2, v82))
        {
          if (v81)
            continue;
          goto LABEL_73;
        }
        a2 = v12 - 24;
        if (!v81)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 __Block_byref_object_copy__184(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__185(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN3AGX11BlitContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXA10FamilyTexturejjS7_jjjj_block_invoke_2_190(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int *v3;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t GPUVirtualAddress;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint32x2_t *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint32x2_t *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint32x2_t v54;
  int64x2_t v55;
  int64_t *v56;
  int64_t *v57;
  __int128 v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  int64x2_t v63;
  uint64_t v64;
  int64x2_t v65;
  uint64_t v66;
  int64x2_t v67;
  uint64_t v68;

  v3 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 536);
  v7 = a3[4];
  if (*(_BYTE *)(a1 + 89))
  {
    v8 = *(_DWORD *)(v6 + 144);
    v9 = v8 + v7;
    v10 = *(_DWORD *)(v6 + 136) >> (v8 + v7);
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 144) + v7;
    v11 = 1;
  }
  v61 = *(uint64_t **)(a1 + 80);
  v12 = a3[2];
  v13 = *(unsigned __int8 *)(v6 + 380);
  if (v13 == 3 || v13 == 0)
  {
    v62 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(v6, a3[2]);
  }
  else
  {
    v15 = v9 + 1;
    if (v9 + 1 < *(_DWORD *)(v6 + 140) || v15 == *(_DWORD *)(v6 + 64))
      v16 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(v6, v15, a3[2]);
    else
      v16 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(v6, a3[2]);
    v62 = v16
        - AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(v6, v9, v12);
  }
  v17 = 0;
  v18 = &OBJC_IVAR___BVHTopDownBuilder__library;
  v59 = v3;
  v60 = v11;
  do
  {
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48;
    v22 = *(_QWORD *)(*(_QWORD *)a2 + v18[56]);
    v23 = *(_QWORD *)(a1 + 48);
    GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v22, *(_DWORD *)(a2 + 12), *(_DWORD *)(v22 + 144) + *(_DWORD *)(a2 + 16), v17, *(_DWORD *)(a2 + 8));
    v25 = (*(uint64_t (**)(uint64_t, int64_t, unint64_t))(v20 + 16))(v20, GPUVirtualAddress, v62);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16))(v23, v21, v25, v26))
    {
      v27 = *(_QWORD *)(*(_QWORD *)a2 + v18[56]);
      v28 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + 8);
      v29 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v27, *(_DWORD *)(a2 + 12), *(_DWORD *)(v27 + 144) + *(_DWORD *)(a2 + 16), v17, *(_DWORD *)(a2 + 8));
      v30 = *(_QWORD *)(*(_QWORD *)v3 + v18[56]);
      v31 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v30, v3[3], *(_DWORD *)(v30 + 144) + v3[4], v17, v3[2]);
      v32 = v31;
      v34 = (int64_t *)v28[7];
      v33 = v28[8];
      if ((unint64_t)v34 < v33)
      {
        *v34 = v29;
        v34[1] = v31;
        v19 = v34 + 3;
        v34[2] = v62;
      }
      else
      {
        v35 = (_QWORD *)v28[6];
        v36 = 0xAAAAAAAAAAAAAAABLL * (v34 - v35) + 1;
        if (v36 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v35) >> 3);
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0x555555555555555)
          v38 = 0xAAAAAAAAAAAAAAALL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v39 = (char *)operator new(24 * v38);
        }
        else
        {
          v39 = 0;
        }
        v56 = (int64_t *)&v39[8 * (v34 - v35)];
        *v56 = v29;
        v56[1] = v32;
        v56[2] = v62;
        v57 = v56;
        if (v34 != v35)
        {
          do
          {
            v58 = *(_OWORD *)(v34 - 3);
            *(v57 - 1) = *(v34 - 1);
            *(_OWORD *)(v57 - 3) = v58;
            v57 -= 3;
            v34 -= 3;
          }
          while (v34 != v35);
          v34 = (int64_t *)v28[6];
        }
        v19 = v56 + 3;
        v28[6] = v57;
        v28[7] = v56 + 3;
        v28[8] = &v39[24 * v38];
        v3 = v59;
        if (v34)
          operator delete(v34);
        v18 = &OBJC_IVAR___BVHTopDownBuilder__library;
      }
      v28[7] = v19;
      v11 = v60;
    }
    else
    {
      v40 = v18[56];
      v41 = *(uint32x2_t **)(*(_QWORD *)a2 + v40);
      v42 = *(_DWORD *)(a2 + 16);
      if (*(_BYTE *)(a1 + 89))
      {
        v43 = v41[18].i32[0] + v42;
        v44 = 1;
      }
      else
      {
        v43 = v41[18].i32[0] + v42;
        v44 = (unsigned __int32)v41[17].i32[0] >> (v41[18].i8[0] + v42);
        if (v44 <= 1)
          v44 = 1;
      }
      v45 = *(uint32x2_t **)(*(_QWORD *)v3 + v40);
      v47 = v3[3];
      v46 = v3[4];
      v48 = v45[18].i32[0] + v46;
      v65 = 0uLL;
      v49 = *(_DWORD *)(a2 + 8);
      v50 = *(_DWORD *)(a2 + 12);
      v67 = 0uLL;
      v68 = v17;
      v51 = *(_QWORD *)(a1 + 32);
      v52 = *(_QWORD *)(a1 + 40);
      v53 = v3[2];
      v66 = v17;
      v54 = vmin_u32(vmax_u32(vshl_u32(v41[16], (uint32x2_t)vneg_s32(vdup_n_s32(v43))), (uint32x2_t)0x100000001), vmax_u32(vshl_u32(v45[16], (uint32x2_t)vneg_s32(vdup_n_s32(v48))), (uint32x2_t)0x100000001));
      v55.i64[0] = v54.u32[0];
      v55.i64[1] = v54.u32[1];
      v63 = v55;
      v64 = v44;
      AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTextureImpl(v61, v51, v49, v50, v42, &v67, v52, v53, v47, v46, &v65, &v63);
    }
    ++v17;
  }
  while (v17 != v11);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  __n128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  __int128 v80;
  BOOL v81;
  __n128 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  __n128 v87;
  unint64_t v88;
  unint64_t v89;
  __int128 v90;
  __n128 *v91;
  unint64_t v92;
  unint64_t v93;
  __n128 v94;
  unint64_t v95;
  __n128 *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v101;
  uint64_t v102;
  __n128 *v103;
  uint64_t v104;
  __n128 *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  int64_t v110;
  BOOL v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int64_t v131;
  uint64_t v132;
  unint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __int128 v157;
  __n128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __n128 v163;
  __int128 v164;
  __int128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __int128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*>(__n128 *a1, __n128 *a2, unint64_t *a3, uint64_t a4, uint64_t a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      v10 = a2[1].n128_i64[0];
      result = *a2;
      v11 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v11;
      *(__n128 *)a3 = result;
      a3[2] = v10;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v12 = a1[1].n128_u64[0];
        result = *a1;
        v13 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v13;
        *a2 = result;
        a2[1].n128_u64[0] = v12;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      v8 = a1[1].n128_u64[0];
      result = *a1;
      v9 = a3[2];
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v9;
LABEL_9:
      *(__n128 *)a3 = result;
      a3[2] = v8;
      goto LABEL_10;
    }
    v14 = a1[1].n128_u64[0];
    result = *a1;
    v15 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v15;
    *a2 = result;
    a2[1].n128_u64[0] = v14;
    if (*a3 < a2->n128_u64[0])
    {
      v8 = a2[1].n128_u64[0];
      result = *a2;
      v16 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    v17 = a3[2];
    result = *(__n128 *)a3;
    v18 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v18;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v17;
    if (*a3 < a2->n128_u64[0])
    {
      v19 = a2[1].n128_i64[0];
      result = *a2;
      v20 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v20;
      *(__n128 *)a3 = result;
      a3[2] = v19;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        v21 = a1[1].n128_u64[0];
        result = *a1;
        v22 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v22;
        *a2 = result;
        a2[1].n128_u64[0] = v21;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    v23 = *(_QWORD *)(a4 + 16);
    result = *(__n128 *)a4;
    v24 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v24;
    *(__n128 *)a5 = result;
    *(_QWORD *)(a5 + 16) = v23;
    if (*(_QWORD *)a4 < *a3)
    {
      v25 = a3[2];
      result = *(__n128 *)a3;
      v26 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v26;
      *(__n128 *)a4 = result;
      *(_QWORD *)(a4 + 16) = v25;
      if (*a3 < a2->n128_u64[0])
      {
        v27 = a2[1].n128_i64[0];
        result = *a2;
        v28 = a3[2];
        *a2 = *(__n128 *)a3;
        a2[1].n128_u64[0] = v28;
        *(__n128 *)a3 = result;
        a3[2] = v27;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          v29 = a1[1].n128_u64[0];
          result = *a1;
          v30 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v30;
          *a2 = result;
          a2[1].n128_u64[0] = v29;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*>(uint64_t a1, _OWORD *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  _OWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  __n128 v62;
  __int128 v64;

  v3 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      v5 = *((_QWORD *)a2 - 3);
      v4 = (uint64_t)a2 - 24;
      if (v5 < *(_QWORD *)a1)
        goto LABEL_9;
      return 1;
    case 3uLL:
      v13 = a1 + 24;
      v14 = *(_QWORD *)(a1 + 24);
      v16 = *((_QWORD *)a2 - 3);
      v4 = (uint64_t)a2 - 24;
      v15 = v16;
      if (v14 < *(_QWORD *)a1)
      {
        if (v15 >= v14)
        {
          v49 = *(_QWORD *)(a1 + 16);
          v50 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *(__n128 *)v13 = v50;
          *(_QWORD *)(a1 + 40) = v49;
          if (*(_QWORD *)v4 < *(_QWORD *)(a1 + 24))
          {
            v51 = *(_QWORD *)(a1 + 40);
            v52 = *(_OWORD *)v13;
            v53 = *(_QWORD *)(v4 + 16);
            *(_OWORD *)v13 = *(_OWORD *)v4;
            *(_QWORD *)(a1 + 40) = v53;
            *(_OWORD *)v4 = v52;
            *(_QWORD *)(v4 + 16) = v51;
          }
        }
        else
        {
LABEL_9:
          v17 = *(_QWORD *)(a1 + 16);
          v18 = *(__n128 *)a1;
          v19 = *(_QWORD *)(v4 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v4;
          *(_QWORD *)(a1 + 16) = v19;
          *(__n128 *)v4 = v18;
          *(_QWORD *)(v4 + 16) = v17;
        }
        return 1;
      }
      if (v15 >= v14)
        return 1;
      v31 = *(_QWORD *)(a1 + 40);
      v32 = *(_OWORD *)v13;
      v33 = *(_QWORD *)(v4 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v4;
      *(_QWORD *)(a1 + 40) = v33;
      *(_OWORD *)v4 = v32;
      *(_QWORD *)(v4 + 16) = v31;
      goto LABEL_42;
    case 4uLL:
      v13 = a1 + 24;
      v20 = *(_QWORD *)(a1 + 24);
      v21 = (__n128 *)(a1 + 48);
      v22 = *(_QWORD *)(a1 + 48);
      v23 = (__n128 *)((char *)a2 - 24);
      v24 = *(_QWORD *)a1;
      if (v20 >= *(_QWORD *)a1)
      {
        if (v22 < v20)
        {
          v34 = *(_QWORD *)(a1 + 40);
          v35 = *(__n128 *)v13;
          *(__n128 *)v13 = *v21;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v21 = v35;
          *(_QWORD *)(a1 + 64) = v34;
          if (*(_QWORD *)v13 < v24)
          {
            v36 = *(_QWORD *)(a1 + 16);
            v37 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *(__n128 *)v13 = v37;
            *(_QWORD *)(a1 + 40) = v36;
          }
        }
      }
      else
      {
        if (v22 >= v20)
        {
          v54 = *(_QWORD *)(a1 + 16);
          v55 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *(__n128 *)v13 = v55;
          *(_QWORD *)(a1 + 40) = v54;
          if (v22 >= *(_QWORD *)(a1 + 24))
            goto LABEL_39;
          v25 = *(_QWORD *)(a1 + 40);
          v26 = *(__n128 *)v13;
          *(__n128 *)v13 = *v21;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
        }
        else
        {
          v25 = *(_QWORD *)(a1 + 16);
          v26 = *(__n128 *)a1;
          *(__n128 *)a1 = *v21;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        }
        *v21 = v26;
        *(_QWORD *)(a1 + 64) = v25;
      }
LABEL_39:
      if (v23->n128_u64[0] < v21->n128_u64[0])
      {
        v56 = *(_QWORD *)(a1 + 64);
        v57 = *v21;
        v58 = *((_QWORD *)a2 - 1);
        *v21 = *v23;
        *(_QWORD *)(a1 + 64) = v58;
        *v23 = v57;
        *((_QWORD *)a2 - 1) = v56;
        if (v21->n128_u64[0] < *(_QWORD *)v13)
        {
          v59 = *(_QWORD *)(a1 + 40);
          v60 = *(__n128 *)v13;
          *(__n128 *)v13 = *v21;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v21 = v60;
          *(_QWORD *)(a1 + 64) = v59;
LABEL_42:
          if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
          {
            v61 = *(_QWORD *)(a1 + 16);
            v62 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v13 + 16);
            *(__n128 *)v13 = v62;
            *(_QWORD *)(v13 + 16) = v61;
          }
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::CopyRange*>((__n128 *)a1, (__n128 *)(a1 + 24), (unint64_t *)(a1 + 48), a1 + 72, (uint64_t)a2 - 24, a3);
      return 1;
    default:
      v6 = (__n128 *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 48);
      v8 = (__n128 *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
      {
        if (v7 < v9)
        {
          v27 = *(_QWORD *)(a1 + 40);
          v28 = *v8;
          *v8 = *v6;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v6 = v28;
          *(_QWORD *)(a1 + 64) = v27;
          if (v8->n128_u64[0] < v10)
          {
            v29 = *(_QWORD *)(a1 + 16);
            v30 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v8 = v30;
            *(_QWORD *)(a1 + 40) = v29;
          }
        }
      }
      else if (v7 >= v9)
      {
        v38 = *(_QWORD *)(a1 + 16);
        v39 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v8 = v39;
        *(_QWORD *)(a1 + 40) = v38;
        if (v7 < *(_QWORD *)(a1 + 24))
        {
          v40 = *(_QWORD *)(a1 + 40);
          v41 = *v8;
          *v8 = *v6;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v6 = v41;
          *(_QWORD *)(a1 + 64) = v40;
        }
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *(__n128 *)a1;
        *(__n128 *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v6 = v12;
        *(_QWORD *)(a1 + 64) = v11;
      }
      v42 = (_OWORD *)(a1 + 72);
      if ((_OWORD *)(a1 + 72) == a2)
        return 1;
      v43 = 0;
      v44 = 0;
      break;
  }
  while (1)
  {
    v46 = *(_QWORD *)v42;
    if (*(_QWORD *)v42 < v6->n128_u64[0])
    {
      v64 = *(_OWORD *)((char *)v42 + 8);
      v47 = v43;
      do
      {
        v48 = a1 + v47;
        *(_OWORD *)(v48 + 72) = *(_OWORD *)(a1 + v47 + 48);
        *(_QWORD *)(v48 + 88) = *(_QWORD *)(a1 + v47 + 64);
        if (v47 == -48)
        {
          v45 = a1;
          goto LABEL_27;
        }
        v47 -= 24;
      }
      while (v46 < *(_QWORD *)(v48 + 24));
      v45 = a1 + v47 + 72;
LABEL_27:
      *(_QWORD *)v45 = v46;
      *(_OWORD *)(v45 + 8) = v64;
      if (++v44 == 8)
        return (_OWORD *)((char *)v42 + 24) == a2;
    }
    v6 = (__n128 *)v42;
    v43 += 24;
    v42 = (_OWORD *)((char *)v42 + 24);
    if (v42 == a2)
      return 1;
  }
}

void AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTextureImpl(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int64x2_t *a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int64x2_t *a11, int64x2_t *a12)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t GPUVirtualAddress;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  AGX::G9::TextureFormatTable *v69;
  char *v70;
  uint64_t *v71;
  _BYTE v72[448];
  _BYTE v73[448];
  int8x16_t v74;
  unsigned int v75;
  int v76;
  __int32 v77;
  int64x2_t v78;
  uint64_t v79;
  int64x2_t v80;
  uint64_t v81;
  int64x2_t v82;
  uint64_t v83;
  int64x2_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _QWORD v88[3];

  v88[1] = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a7 + 536);
  v14 = *(_QWORD *)(a2 + 536);
  v86 = 0;
  v15 = *(unsigned int *)(v14 + 112) * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 + 208) + a3 + 88);
  v16 = 1;
  v17 = 13;
  v18 = 2;
  switch(v15)
  {
    case 2uLL:
      v17 = 23;
      v18 = 2;
      break;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
      break;
    case 4uLL:
      v17 = 53;
      v18 = 2;
      break;
    case 8uLL:
      v17 = 103;
      v18 = 2;
      break;
    case 0x10uLL:
      v17 = 123;
      v18 = 2;
      break;
    case 0x20uLL:
      v18 = 4;
      v17 = 113;
      goto LABEL_15;
    default:
      if (v15 == 64)
      {
        v18 = 4;
        v17 = 123;
LABEL_15:
        v16 = 4;
      }
      else
      {
        if (v15 == 128)
        {
          v18 = 4;
          v16 = 8;
        }
        else
        {
          v16 = 1;
        }
        if (v15 == 128)
          v17 = 123;
      }
      break;
  }
  v87 = a7;
  v88[0] = a2;
  v19 = *(_QWORD *)(v13 + 24);
  if (v19 <= 9)
  {
    if (((1 << v19) & 0x17C) != 0)
    {
LABEL_20:
      a12[1].i64[0] = 1;
      goto LABEL_21;
    }
    if (((1 << v19) & 3) != 0)
    {
      a12->i64[1] = 1;
      goto LABEL_20;
    }
    if (v19 == 9)
    {
      v52 = *(unsigned int *)(v13 + 112) * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v13 + 208) + a8 + 88);
      v53 = v52 * a11->i64[0];
      v54 = a12->i64[0] * v52;
      v84 = *a6;
      v85 = a6[1].i64[0];
      v82 = *a12;
      v83 = a12[1].i64[0];
      AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToTexture(a1, a2, a4, a5, &v84, &v82, (char *)a7, v53, v54, v54, 0);
      return;
    }
  }
LABEL_21:
  v20 = *(_QWORD *)(v14 + 24);
  if (v20 > 9)
    goto LABEL_26;
  if (((1 << v20) & 0x17C) != 0)
    goto LABEL_25;
  if (((1 << v20) & 3) != 0)
  {
    a12->i64[1] = 1;
LABEL_25:
    a12[1].i64[0] = 1;
    goto LABEL_26;
  }
  if (v20 == 9)
  {
    v55 = v15 * a6->i64[0];
    v56 = a12->i64[0] * v15;
    v80 = *a11;
    v81 = a11[1].i64[0];
    v78 = *a12;
    v79 = a12[1].i64[0];
    AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToBuffer(a1, (char *)a2, v55, v56, v56, a7, a9, a10, &v80, &v78, 0);
    return;
  }
LABEL_26:
  v69 = (AGX::G9::TextureFormatTable *)v17;
  v71 = a1;
  v67 = v16;
  if (v19 == 7)
    v24 = 7;
  else
    v24 = v18;
  v63 = v24;
  if (v20 == 7)
    v25 = 7;
  else
    v25 = v18;
  v65 = v25;
  v26 = vmovn_s64(*a6);
  v27 = vmovn_s64(*a12);
  v28 = vmovn_s64(*a11);
  v29 = *(_DWORD *)(v14 + 216);
  v30 = *(_DWORD *)(v14 + 220);
  v74.i32[0] = (v29 + v27.i32[0] - 1) / v29;
  v74.i32[1] = (v30 + v27.i32[1] - 1) / v30;
  v74.i32[2] = v26.i32[0] / v29;
  v74.i32[3] = v26.i32[1] / v30;
  v31 = a11[1].u32[0];
  v77 = a11[1].i32[0];
  v32 = a6[1].u32[0];
  v75 = v28.i32[0] / v29;
  v76 = v28.i32[1] / v30;
  v33 = v13;
  if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::blitTextureViewAllowed(v13, a10)
    && AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::blitTextureViewAllowed(v14, a5))
  {
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::createTextureViewForBlit((uint64_t)v73, v33, v63, v69, *(_QWORD *)(v33 + 40), *(_DWORD *)(v33 + 308), a9, a10, a8, v67, *(_OWORD *)(v33 + 152), *(_QWORD *)(v33 + 160), *(_QWORD *)(v33 + 168), HIDWORD(*(_QWORD *)(v33 + 168)), *(_QWORD *)(v33 + 176), *(_QWORD *)(v33 + 184), HIDWORD(*(_QWORD *)(v33 + 184)), *(_DWORD *)(v33 + 236) != 0);
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::createTextureViewForBlit((uint64_t)v72, v14, v65, v69, *(_QWORD *)(v14 + 40), *(_DWORD *)(v33 + 308), a4, a5, a3, v67, *(_OWORD *)(v14 + 152), *(_QWORD *)(v14 + 160), *(_QWORD *)(v14 + 168), HIDWORD(*(_QWORD *)(v14 + 168)), *(_QWORD *)(v14 + 176), *(_QWORD *)(v14 + 184), HIDWORD(*(_QWORD *)(v14 + 184)), *(_DWORD *)(v14 + 236) != 0);
    if (a12[1].i64[0])
    {
      v34 = 1;
      do
      {
        AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::renderTexture((uint64_t)v71, (uint64_t)v88, (uint64_t)v72, 0, (uint64_t)&v87, (uint64_t)v73, (uint64_t)&v86, v32 + v34 - 1, &v74, 0);
        ++v77;
      }
      while (a12[1].i64[0] > (unint64_t)v34++);
    }
  }
  else
  {
    v68 = v33;
    v70 = (char *)a7;
    v36 = a5;
    v37 = v32;
    v38 = a4;
    v66 = (char *)a2;
    v64 = a8;
    if (!*(_DWORD *)(v33 + 236) && !*(_DWORD *)(v14 + 236))
    {
      v39 = a12;
      if (a12[1].i64[0])
      {
        LODWORD(v40) = 0;
        v61 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 208) + a8 + 88);
        v60 = a2 + 72;
        v59 = a7 + 72;
        do
        {
          v41 = v31 + v40;
          v42 = *(_DWORD *)(v14 + 144) + v36;
          v43 = v14;
          v44 = v38;
          v45 = v36;
          v46 = v39;
          v47 = v31;
          v48 = v14;
          v49 = v37;
          GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v43, v38, v42, (int)v37 + (int)v40, a3);
          v51 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v68, a9, *(_DWORD *)(v68 + 144) + a10, v41, v64);
          AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToBuffer(v71, v66, GPUVirtualAddress - *(_QWORD *)(v60 + (int)*MEMORY[0x24BE51650]), v70, v51 - *(_QWORD *)(v59 + (int)*MEMORY[0x24BE51650]), v61);
          v37 = v49;
          v14 = v48;
          v31 = v47;
          v38 = v44;
          v39 = v46;
          v36 = v45;
          v40 = (v40 + 1);
        }
        while (v46[1].i64[0] > v40);
      }
    }
  }
}

void AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToTexture(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, int64x2_t *a5, int64x2_t *a6, char *a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int32x2_t v26;
  uint32x2_t v27;
  __int32 v28;
  unsigned __int32 v29;
  unsigned int v30;
  unsigned int v31;
  __int32 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint32x2_t v36;
  int8x8_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  __int32 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  int64_t GPUVirtualAddress;
  __int32 v63;
  BOOL v65;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int32x2_t v70;
  unsigned int v71;
  unsigned __int32 v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  AGX::G9::TextureFormatTable *v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  int v85;
  _BYTE v86[32];
  AGX::G9::TextureFormatTable *v87;
  unsigned int v88;
  uint64_t v89;
  _QWORD v90[9];
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  uint64_t v94;
  int v95;
  void (**v96)(AGX::G9::Texture *__hidden);
  uint64_t v97;
  int v98;
  __int32 v99;
  __int32 v100;
  int v101;
  __int32 v102;
  __int32 v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  _BYTE v109[12];
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  __int32 v116;
  unsigned int v117;
  unsigned int v118;
  __int32 v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  char *v125;
  _QWORD v126[4];

  v126[1] = *MEMORY[0x24BDAC8D0];
  v13 = &a7[*MEMORY[0x24BE51650]];
  v14 = *(_QWORD *)(a2 + 536);
  v15 = *(_QWORD *)(v14 + 208);
  if (*(_DWORD *)(v15 + 24) < 2u)
  {
    v16 = 0;
  }
  else
  {
    v16 = (a11 >> 1) & 1;
    if (!*(_DWORD *)(v15 + 80))
      v16 = 0;
  }
  v17 = *((_QWORD *)v13 + 9);
  v18 = *((_QWORD *)v13 + 18);
  v19 = *((_QWORD *)v13 + 19);
  v79 = v16;
  v77 = *(unsigned int *)(v14 + 112) * (unint64_t)*(unsigned __int8 *)(v15 + v16 + 88);
  v20 = 1;
  v21 = 13;
  v22 = 2;
  v23 = 1;
  v24 = 1;
  switch(v77)
  {
    case 1uLL:
      break;
    case 2uLL:
      v22 = 2;
      v21 = 23;
      v24 = 2;
      break;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      goto LABEL_10;
    case 4uLL:
      v24 = 3;
      v21 = 53;
      v22 = 2;
      break;
    case 8uLL:
      v24 = 8;
      v21 = 103;
      v22 = 2;
      break;
    case 0x10uLL:
      v24 = 15;
      v21 = 123;
      v22 = 2;
      break;
    case 0x20uLL:
      v20 = 0;
      v24 = 12;
      v22 = 4;
      v21 = 113;
      goto LABEL_16;
    case 0x40uLL:
      v20 = 0;
      v24 = 15;
      v22 = 4;
      v21 = 123;
LABEL_16:
      v23 = 4;
      break;
    default:
      if (v77 == 128)
      {
        v20 = 0;
        v24 = 15;
        v23 = 8;
        v21 = 123;
        v22 = 4;
      }
      else
      {
LABEL_10:
        v24 = 0;
        v20 = 1;
        v21 = 13;
        v22 = 2;
        v23 = 1;
      }
      break;
  }
  v25 = *(_QWORD *)(v14 + 24);
  if (v25 <= 9)
  {
    if (((1 << v25) & 0x17C) != 0)
    {
LABEL_21:
      a6[1].i64[0] = 1;
      goto LABEL_22;
    }
    if (((1 << v25) & 3) != 0)
    {
      a6->i64[1] = 1;
      goto LABEL_21;
    }
    if (v25 == 9)
    {
      AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToBuffer(a1, (char *)a2, a5->i64[0] * v77, a7, a8, a6->i64[0] * v77);
      return;
    }
  }
LABEL_22:
  v74 = v20;
  v78 = v24;
  v26 = vmovn_s64(*a5);
  v27 = (uint32x2_t)vmovn_s64(*a6);
  v95 = 0;
  v28 = a5[1].i32[0];
  v30 = *(_DWORD *)(v14 + 216);
  v29 = *(_DWORD *)(v14 + 220);
  v31 = (v30 + v27.i32[0] - 1) / v30;
  v32 = (v29 + v27.i32[1] - 1) / v29;
  v93.i64[0] = __PAIR64__(v32, v31);
  v71 = v30;
  v72 = v29;
  v70 = v26;
  LODWORD(v73) = v26.i32[0] / v30;
  HIDWORD(v73) = v26.i32[1] / v29;
  v93.i32[2] = v26.i32[0] / v30;
  v93.i32[3] = v26.i32[1] / v29;
  v94 = 0;
  v126[0] = a2;
  v125 = a7;
  LODWORD(v68) = 0;
  v75 = v23;
  v33 = v22;
  v76 = (AGX::G9::TextureFormatTable *)v21;
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v90, *(MTLPixelFormat *)(a1[808] + 808), v22, (AGX::G9::TextureFormatTable *)v21, 0, v18, 2, 0, 0, 84148994, v27, v31, v32, 1u, 1, v23 | 0x100000000, a9, v68, v19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v34 = v17 + a8;
  v90[0] = off_250402690;
  if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::blitTextureViewAllowed(v14, a4))
  {
    if (v25 == 7)
      v35 = 7;
    else
      v35 = v33;
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::createTextureViewForBlit((uint64_t)v86, v14, v35, v76, *(_QWORD *)(v14 + 40), *(_DWORD *)(v14 + 308), a3, a4, v79, v75, *(_OWORD *)(v14 + 152), *(_QWORD *)(v14 + 160), *(_QWORD *)(v14 + 168), HIDWORD(*(_QWORD *)(v14 + 168)), *(_QWORD *)(v14 + 176), *(_QWORD *)(v14 + 184), HIDWORD(*(_QWORD *)(v14 + 184)), *(_DWORD *)(v14 + 236) != 0);
    v38 = *(unsigned __int8 *)(v89 + 88);
    v85 = 0;
    if (v74)
    {
      if (a6[1].i64[0])
      {
        v39 = 0;
        v40 = a9 / v38;
        v41 = 1;
        do
        {
          v44 = v39 * a10 + v34;
          if ((v93.i32[1] | v93.i32[0]) >> 14
            || (((a9 / v77 * v77) | v44) & 0xF) != 0)
          {
            *(_QWORD *)v109 = 0;
            LODWORD(v96) = 1;
            HIDWORD(v96) = v88;
            v98 = v78;
            v99 = v93.i32[0];
            v42 = 32 - __clz(v88 - 1);
            if (v88 >= 2)
              v43 = v42;
            else
              v43 = 0;
            v100 = v93.i32[1];
            v101 = v40 / v88;
            v102 = v93.i32[0] << v43;
            v103 = v93.i32[1];
            v105 = a9;
            v104 = v40;
            v97 = v93.i64[1];
            v106 = v93.i64[1];
            v107 = v28 + v41 - 1;
            v108 = v93.i64[0];
            v109[7] = v93.i64[1] != 0;
            AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::render3D((uint64_t)a1, (uint64_t)v126, (uint64_t)v86, (uint64_t)&v125, 0, v44, 0, 0, (uint64_t)&v96, &v85);
          }
          else
          {
            v92 = 0;
            v91 = v39 * a10 + v34;
            (*(void (**)(_QWORD *))(v90[0] + 16))(v90);
            AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::renderTexture((uint64_t)a1, (uint64_t)v126, (uint64_t)v86, 0, (uint64_t)&v125, (uint64_t)v90, (uint64_t)&v85, v28 + v41 - 1, &v93, 0);
          }
          v39 = v41++;
        }
        while (a6[1].i64[0] > v39);
      }
      return;
    }
    v45 = a9;
    v46 = a9 / v38;
    v47 = 32 - __clz(v88 - 1);
    v48 = a9 / v38 / v88;
    v123 = 0uLL;
    v124 = 0;
    v111 = 4;
    v112 = v88;
    if (v88 >= 2)
      v49 = v47;
    else
      v49 = 0;
    v114 = v78;
    v115 = v31;
    v50 = v31 << v49;
    v116 = v32;
    v117 = a9 / v38 / v88;
    v118 = v31 << v49;
    v119 = v32;
    v120 = a9 / v38;
    v121 = a9;
    if (((v31 << v49) | v32) >> 14 || (((v46 * v38) | v34) & 0xF) != 0)
    {
      if (v49)
      {
        v36 = *(uint32x2_t *)v93.i8;
        v51 = v49 - 1;
        v52 = 1;
        do
        {
          v124 = 1;
          v50 = v48 << v51;
          v53 = v32 << v52;
          v54 = (v48 << v51) * v38;
          v122 = 0;
          v123 = 0uLL;
          v113 = 0;
          v114 = v78;
          v115 = v31;
          v116 = v32;
          v117 = a9 / v38 / v88;
          v118 = v48 << v51;
          v119 = v32 << v52;
          v120 = v48 << v51;
          v121 = v54;
          if (((v48 << v51) | (v32 << v52)) >> 14 || (((v50 * v38) | v34) & 0xF) != 0)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
          }
          else
          {
            v113 = v73;
            v122 = v73;
            *(_QWORD *)((char *)&v123 + 4) = v93.i64[0];
            v37.i32[0] = v48 << v51;
            v37 = vcnt_s8(v37);
            v37.i16[0] = vaddlv_u8((uint8x8_t)v37);
            v58 = v48 << v51;
            BYTE1(v124) = v37.i32[0] == 1;
            if (v37.i32[0] == 1)
            {
              v58 = 32 - __clz(v50 - 1);
              if (v50 < 2)
                v58 = 0;
            }
            HIDWORD(v123) = v58;
            v57 = 1;
            v55 = HIDWORD(v73);
            v56 = v73;
          }
          HIBYTE(v124) = (v56 | v55) != 0;
          if (v52 >= v49)
            break;
          ++v52;
          --v51;
        }
        while (!v57);
        v111 = 4;
        v112 = v88;
        if (v57)
        {
          v45 = v54;
          v32 = v53;
LABEL_80:
          LODWORD(v69) = 0;
          AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)&v96, *(MTLPixelFormat *)(a1[183] + 808), 2, v87, 0, *(_QWORD *)(a2 + (int)*MEMORY[0x24BE51650] + 144), 2, 0, 0, 84148994, v36, v50, v32, 1u, 1, 0x100000001, v45, v69, *(_QWORD *)(a2 + (int)*MEMORY[0x24BE51650] + 152),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0);
          v96 = off_250402690;
          v110 = 0;
          *(_QWORD *)&v109[4] = v34;
          AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated((uint64_t)&v96);
          AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::render3D((uint64_t)a1, (uint64_t)v126, (uint64_t)v86, (uint64_t)&v125, (uint64_t)&v96, v34, 0, 0, (uint64_t)&v111, &v85);
          return;
        }
        v63 = v93.i32[0];
        v32 = v93.i32[1];
      }
      else
      {
        v63 = v93.i32[0];
      }
      *(_QWORD *)v109 = 0;
      LODWORD(v96) = 1;
      HIDWORD(v96) = v88;
      v98 = v78;
      v99 = v63;
      v100 = v32;
      v101 = v48;
      v102 = v63 << v49;
      v103 = v32;
      v105 = a9;
      v104 = v46;
      v97 = v73;
      v106 = v73;
      v107 = 0;
      v108 = __PAIR64__(v32, v63);
      v65 = v71 <= v70.i32[0] || v72 <= v70.i32[1];
      v109[7] = v65;
      AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::render3D((uint64_t)a1, (uint64_t)v126, (uint64_t)v86, (uint64_t)&v125, 0, v34, 0, 0, (uint64_t)&v96, &v85);
      return;
    }
    v113 = v73;
    v122 = v73;
    *(_QWORD *)((char *)&v123 + 4) = __PAIR64__(v32, v31);
    v67 = v71 <= v70.i32[0] || v72 <= v70.i32[1];
    HIBYTE(v124) = v67;
    goto LABEL_80;
  }
  if (*(_DWORD *)(v14 + 236))
  {
    v92 = 0;
    v91 = v34;
    AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated((uint64_t)v90);
  }
  else if (a6[1].i64[0])
  {
    v59 = 0;
    v60 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 208) + v79 + 88);
    v61 = 1;
    do
    {
      GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v14, a3, *(_DWORD *)(v14 + 144) + a4, v28 + v61 - 1, v79);
      AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToBuffer(a1, (char *)a2, GPUVirtualAddress - *(_QWORD *)(a2 + 72 + (int)*MEMORY[0x24BE51650]), a7, a8 + v59 * a10, v60);
      v59 = v61++;
    }
    while (a6[1].i64[0] > v59);
  }
}

void AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToBuffer(uint64_t *a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, int64x2_t *a9, int64x2_t *a10, uint64_t a11)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  __int32 v27;
  uint32x2_t v28;
  int32x2_t v29;
  unsigned int v30;
  unsigned __int32 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v43;
  unsigned int v44;
  __int128 v45;
  unsigned int v46;
  BOOL v47;
  BOOL v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  int64_t GPUVirtualAddress;
  unsigned int v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  char v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int32x2_t v67;
  unsigned __int32 v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  __int32 v72;
  __int32 v73;
  int v74;
  unsigned int v75;
  AGX::G9::TextureFormatTable *v76;
  uint64_t v78;
  int v79;
  _BYTE v84[32];
  AGX::G9::TextureFormatTable *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  _QWORD v89[9];
  uint64_t v90;
  uint64_t v91;
  int8x16_t v92;
  unsigned int v93;
  int v94;
  __int32 v95;
  int v96;
  _QWORD v97[56];
  int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  __int32 v102;
  __int32 v103;
  unsigned int v104;
  __int32 v105;
  __int32 v106;
  unsigned int v107;
  int v108;
  _DWORD v109[7];
  void *v110;
  void *v111[3];

  v111[1] = *(void **)MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a6 + 536);
  v14 = &a2[*MEMORY[0x24BE51650]];
  v15 = *(_QWORD *)(v13 + 208);
  if (*(_DWORD *)(v15 + 24) < 2u)
  {
    v16 = 0;
  }
  else
  {
    v16 = (a11 >> 1) & 1;
    if (!*(_DWORD *)(v15 + 80))
      v16 = 0;
  }
  v17 = *((_QWORD *)v14 + 9);
  v18 = *((_QWORD *)v14 + 18);
  v19 = *((_QWORD *)v14 + 19);
  v78 = v16;
  v20 = *(unsigned int *)(v13 + 112) * (unint64_t)*(unsigned __int8 *)(v15 + v16 + 88);
  v21 = 1;
  v22 = 13;
  v23 = 2;
  v24 = 1;
  v79 = 1;
  switch(v20)
  {
    case 1uLL:
      break;
    case 2uLL:
      v23 = 2;
      v22 = 23;
      v79 = 2;
      break;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      goto LABEL_10;
    case 4uLL:
      v79 = 3;
      v22 = 53;
      v23 = 2;
      break;
    case 8uLL:
      v79 = 8;
      v22 = 103;
      v23 = 2;
      break;
    case 0x10uLL:
      v79 = 15;
      v22 = 123;
      v23 = 2;
      break;
    case 0x20uLL:
      v21 = 0;
      v79 = 12;
      v23 = 4;
      v22 = 113;
      goto LABEL_16;
    case 0x40uLL:
      v21 = 0;
      v79 = 15;
      v23 = 4;
      v22 = 123;
LABEL_16:
      v24 = 4;
      break;
    default:
      if (v20 == 128)
      {
        v21 = 0;
        v79 = 15;
        v24 = 8;
        v22 = 123;
        v23 = 4;
      }
      else
      {
LABEL_10:
        v79 = 0;
        v21 = 1;
        v22 = 13;
        v23 = 2;
        v24 = 1;
      }
      break;
  }
  v25 = *(_QWORD *)(v13 + 24);
  if (v25 <= 9)
  {
    if (((1 << v25) & 0x17C) != 0)
    {
LABEL_21:
      a10[1].i64[0] = 1;
      goto LABEL_22;
    }
    if (((1 << v25) & 3) != 0)
    {
      a10->i64[1] = 1;
      goto LABEL_21;
    }
    if (v25 == 9)
    {
      AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToBuffer(a1, a2, a3, (char *)a6, a9->i64[0] * v20, a10->i64[0] * v20);
      return;
    }
  }
LABEL_22:
  v74 = v21;
  v70 = v20;
  v27 = a9[1].i32[0];
  v28 = (uint32x2_t)vmovn_s64(*a10);
  v29 = vmovn_s64(*a9);
  v95 = v27;
  v30 = *(_DWORD *)(v13 + 216);
  v31 = *(_DWORD *)(v13 + 220);
  v92.i32[0] = (v30 + v28.i32[0] - 1) / v30;
  v92.i32[1] = (v31 + v28.i32[1] - 1) / v31;
  v92.i64[1] = 0;
  v68 = v31;
  v69 = v30;
  v67 = v29;
  LODWORD(v71) = v29.i32[0] / v30;
  HIDWORD(v71) = v29.i32[1] / v31;
  v93 = v29.i32[0] / v30;
  v94 = v29.i32[1] / v31;
  v110 = (void *)a6;
  v111[0] = a2;
  LODWORD(v65) = 0;
  v75 = v24;
  v72 = v92.i32[1];
  v73 = v92.i32[0];
  v32 = v23;
  v76 = (AGX::G9::TextureFormatTable *)v22;
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v89, *(MTLPixelFormat *)(a1[808] + 808), v23, (AGX::G9::TextureFormatTable *)v22, 0, v18, 2, 0, 0, 84148994, v28, v92.u32[0], v92.u32[1], 1u, 1, v24 | 0x100000000, a4, v65, v19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v33 = v17 + a3;
  v89[0] = off_250402690;
  if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::blitTextureViewAllowed(v13, a8))
  {
    if (v25 == 7)
      v34 = 7;
    else
      v34 = v32;
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::createTextureViewForBlit((uint64_t)v84, v13, v34, v76, *(_QWORD *)(v13 + 40), *(_DWORD *)(v13 + 308), a7, a8, v78, v75, *(_OWORD *)(v13 + 152), *(_QWORD *)(v13 + 160), *(_QWORD *)(v13 + 168), HIDWORD(*(_QWORD *)(v13 + 168)), *(_QWORD *)(v13 + 176), *(_QWORD *)(v13 + 184), HIDWORD(*(_QWORD *)(v13 + 184)), *(_DWORD *)(v13 + 236) != 0);
    v36 = *(unsigned __int8 *)(v88 + 88);
    if (!v74)
    {
      v43 = a4 / v36 / v87;
      v44 = 32 - __clz(v87 - 1);
      if (v87 < 2)
        v44 = 0;
      v35.i32[0] = a4 / v36 / v87;
      memset(&v109[1], 0, 24);
      *(int8x8_t *)&v45 = vcnt_s8(v35);
      v98 = 3;
      v99 = v87;
      v101 = v79;
      v102 = v73;
      LOWORD(v45) = vaddlv_u8(*(uint8x8_t *)&v45);
      v103 = v72;
      v104 = a4 / v36 / v87;
      v46 = v73 << v44;
      v105 = v73 << v44;
      v106 = v72;
      v47 = (_DWORD)v45 == 1;
      v107 = a4 / v36;
      v108 = a4;
      if ((v33 & 0xF) != 0 || ((a4 / v36) & 0xF) != 0 || (v46 | v72) >> 14)
      {
        if (!v44)
          goto LABEL_81;
        v56 = 32 - __clz(v43 - 1);
        if (v43 < 2)
          v56 = 0;
        v57 = (_DWORD)v45 == 1 ? v56 : a4 / v36 / v87;
        if ((v33 & 0xF) != 0)
          goto LABEL_81;
        v58 = v44 - 1;
        v45 = 0uLL;
        v59 = 1;
        do
        {
          v61 = 0;
          v62 = 0;
          v46 = v43 << v58;
          v51 = v72 << v59;
          v50 = (v43 << v58) * v36;
          memset(v109, 0, sizeof(v109));
          v100 = 0;
          v101 = v79;
          v102 = v73;
          v103 = v72;
          v104 = a4 / v36 / v87;
          v105 = v43 << v58;
          v106 = v72 << v59;
          v107 = v43 << v58;
          v108 = v50;
          v63 = ((v43 << v58) & 0xF) != 0 || ((v43 << v58) | (v72 << v59)) >= 0x4000;
          v64 = !v63;
          LOBYTE(v109[6]) = 1;
          if (v64 == 1)
          {
            v100 = v71;
            BYTE2(v109[6]) = v43 != v73;
            v109[3] = v43 << v58;
            v109[4] = v72 << v59;
            BYTE1(v109[6]) = v47;
            v61 = HIDWORD(v71);
            v62 = v71;
            v109[5] = v57;
          }
          HIBYTE(v109[6]) = (v62 | v61) != 0;
          v63 = v59++ >= v44;
          if (v63)
            v60 = 1;
          else
            v60 = v64;
          --v58;
        }
        while ((v60 & 1) == 0);
        v98 = 3;
        v99 = v87;
        if ((v64 & 1) == 0)
        {
LABEL_81:
          AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitTextureToBufferWithTA(a1, v111, v33, &v110, (uint64_t)v84, (uint64_t)&v92, v36, a4, v79);
          return;
        }
      }
      else
      {
        v100 = v71;
        v109[0] = 0;
        v109[3] = v73 << v44;
        v109[4] = v72;
        v49 = v69 <= v67.i32[0] || v68 <= v67.i32[1];
        HIBYTE(v109[6]) = v49;
        v50 = a4;
        v51 = v72;
      }
      LODWORD(v66) = 0;
      AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v97, *(MTLPixelFormat *)(a1[183] + 808), 2, v85, 0, *(_QWORD *)&a2[*MEMORY[0x24BE51650] + 144], 2, 0, 0, 84148994, *(uint32x2_t *)&v45, v46, v51, 1u, 1, 0x100000001, v50, v66, *(_QWORD *)&a2[*MEMORY[0x24BE51650] + 152],
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0);
      v97[37] = 0;
      v97[0] = off_250402690;
      v97[9] = v33;
      AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated((uint64_t)v97);
      v96 = 0;
      AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::render3D((uint64_t)a1, (uint64_t)v111, (uint64_t)v97, (uint64_t)&v110, (uint64_t)v84, v86, 0, 0, (uint64_t)&v98, &v96);
      return;
    }
    if (a10[1].i64[0])
    {
      v37 = a5;
      v38 = 0;
      v39 = 1;
      do
      {
        v40 = v38 * v37 + v33;
        if ((v92.i32[1] | v92.i32[0]) >> 14)
          v41 = 0;
        else
          v41 = ((a4 / v70) & 0xF) == 0;
        if (v41 && (v40 & 0xF) == 0)
        {
          v91 = 0;
          v90 = v38 * v37 + v33;
          (*(void (**)(uint64_t))(v89[0] + 16))((uint64_t)v89);
          LODWORD(v97[0]) = 0;
          AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::renderTexture((uint64_t)a1, (uint64_t)v111, (uint64_t)v89, 0, (uint64_t)&v110, (uint64_t)v84, (uint64_t)v97, 0, &v92, 0);
        }
        else
        {
          AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitTextureToBufferWithTA(a1, v111, v40, &v110, (uint64_t)v84, (uint64_t)&v92, v36, a4, v79);
        }
        ++v95;
        v38 = v39++;
      }
      while (a10[1].i64[0] > v38);
    }
  }
  else if (*(_DWORD *)(v13 + 236))
  {
    v91 = 0;
    v90 = v33;
    AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated((uint64_t)v89);
  }
  else if (a10[1].i64[0])
  {
    v52 = 0;
    v53 = 0;
    v54 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 208) + v78 + 88);
    do
    {
      GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v13, a7, *(_DWORD *)(v13 + 144) + a8, v27 + v53, v78);
      AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyBufferToBuffer(a1, a2, a3 + v52 * a5, (char *)a6, GPUVirtualAddress - *(_QWORD *)(a6 + 72 + (int)*MEMORY[0x24BE51650]), v54);
      v52 = ++v53;
    }
    while (a10[1].i64[0] > (unint64_t)v53);
  }
}

BOOL ___ZN3AGX11BlitContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXA10FamilyTexturejjS7_jjjj_block_invoke_187(uint64_t a1, unint64_t **a2, unint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;

  v4 = *a2;
  v5 = a2[1];
  if (v5 != *a2)
  {
    v6 = ((char *)v5 - (char *)*a2) >> 4;
    do
    {
      v7 = v6 >> 1;
      v8 = &v4[2 * (v6 >> 1)];
      v9 = v8[1];
      v10 = v8 + 2;
      v6 += ~(v6 >> 1);
      if (v9 <= a3)
        v4 = v10;
      else
        v6 = v7;
    }
    while (v6);
  }
  return v4 != v5 && *v4 < a4;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int v31;
  __n128 *v32;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  __int128 v42;
  __int128 v43;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v5 = a2[-1].n128_u64[0];
      v4 = a2 - 1;
      if (v5 < a1->n128_u64[0])
        goto LABEL_9;
      return 1;
    case 3:
      v12 = (__int128 *)&a1[1];
      v13 = a1[1].n128_u64[0];
      v15 = a2[-1].n128_u64[0];
      v4 = a2 - 1;
      v14 = v15;
      if (v13 < a1->n128_u64[0])
      {
        if (v14 >= v13)
        {
          v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v38;
          if (v4->n128_u64[0] < a1[1].n128_u64[0])
          {
            v39 = *v12;
            *v12 = (__int128)*v4;
            *v4 = (__n128)v39;
          }
        }
        else
        {
LABEL_9:
          v16 = *a1;
          *a1 = *v4;
          *v4 = v16;
        }
        return 1;
      }
      if (v14 >= v13)
        return 1;
      v25 = *v12;
      *v12 = (__int128)*v4;
      *v4 = (__n128)v25;
      goto LABEL_43;
    case 4:
      v12 = (__int128 *)&a1[1];
      v17 = a1[1].n128_u64[0];
      v18 = (__int128 *)&a1[2];
      v19 = a1[2].n128_u64[0];
      v20 = a2 - 1;
      v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          v26 = *v12;
          *v12 = *v18;
          *v18 = v26;
          if (*(_QWORD *)v12 < v21)
          {
            v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          v40 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v40;
          if (v19 >= a1[1].n128_u64[0])
            goto LABEL_40;
          v22 = *v12;
          *v12 = *v18;
        }
        else
        {
          v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *v18 = v22;
      }
LABEL_40:
      if (v20->n128_u64[0] < *(_QWORD *)v18)
      {
        v41 = (__n128)*v18;
        *v18 = (__int128)*v20;
        *v20 = v41;
        if (*(_QWORD *)v18 < *(_QWORD *)v12)
        {
          v42 = *v12;
          *v12 = *v18;
          *v18 = v42;
LABEL_43:
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
            v43 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v43;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::{lambda(AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange)#1} &,AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyTextureToTexture(AGXA10FamilyTexture *,unsigned int,unsigned int,AGXA10FamilyTexture *,unsigned int,unsigned int,unsigned int,unsigned int)::MemRange*>(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      v6 = a1 + 2;
      v7 = a1[2].n128_u64[0];
      v8 = a1 + 1;
      v9 = a1[1].n128_u64[0];
      v10 = a1->n128_u64[0];
      if (v9 >= a1->n128_u64[0])
      {
        if (v7 < v9)
        {
          v23 = *v8;
          *v8 = *v6;
          *v6 = v23;
          if (v8->n128_u64[0] < v10)
          {
            v24 = *a1;
            *a1 = *v8;
            *v8 = v24;
          }
        }
      }
      else
      {
        if (v7 >= v9)
        {
          v28 = *a1;
          *a1 = *v8;
          *v8 = v28;
          if (v7 >= a1[1].n128_u64[0])
            goto LABEL_25;
          v11 = *v8;
          *v8 = *v6;
        }
        else
        {
          v11 = *a1;
          *a1 = *v6;
        }
        *v6 = v11;
      }
LABEL_25:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 0;
      break;
  }
  while (1)
  {
    v33 = *v29;
    v34 = v6->n128_u64[0];
    v35 = v29->n128_u64[0];
    if (v29->n128_u64[0] < v34)
    {
      v36 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v36 + 48) = *(__n128 *)((char *)a1 + v36 + 32);
        if (v36 == -32)
        {
          v32 = a1;
          goto LABEL_28;
        }
        v37 = *(unint64_t *)((char *)a1[1].n128_u64 + v36);
        v36 -= 16;
      }
      while (v35 < v37);
      v32 = (__n128 *)((char *)a1 + v36 + 48);
LABEL_28:
      *v32 = v33;
      if (++v31 == 8)
        return &v29[1] == a2;
    }
    v6 = v29;
    v30 += 16;
    if (++v29 == a2)
      return 1;
  }
}

uint64_t ___ZN3AGX11BlitContextINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20copyTextureToTextureEP19AGXA10FamilyTexturejjS7_jjjj_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillTexture(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, _QWORD *a5, unsigned __int8 *a6, unint64_t a7)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v21;
  int64_t TextureViewForBlit;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  char *v32;
  int64x2_t v33;
  int64x2_t v34;
  uint64_t v35;
  __int32 v36;
  __int32 v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  _QWORD v43[2];
  int64x2_t v44;
  int64x2_t v45;
  uint64_t *v46;
  int v47;
  _QWORD *v48;
  int v49;
  _BYTE v50[112];
  unsigned int v51;
  uint64_t v52;
  _DWORD v53[2];
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int32 v58;
  __int32 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];

  v48 = a5;
  v46 = a1;
  v65[1] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a2 + 536);
  v65[0] = a2;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 208) + 88);
  v13 = *(_DWORD *)(v11 + 112);
  v14 = v13 * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 + 208) + 88);
  v15 = 1;
  v16 = 13;
  v17 = 2;
  v47 = 1;
  switch(v14)
  {
    case 1uLL:
      goto LABEL_18;
    case 2uLL:
      v17 = 2;
      v16 = 23;
      v47 = 2;
      goto LABEL_18;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      goto LABEL_5;
    case 4uLL:
      v47 = 3;
      v15 = 1;
      v16 = 53;
      goto LABEL_9;
    case 8uLL:
      v47 = 8;
      v15 = 1;
      v16 = 103;
      goto LABEL_9;
    case 0x10uLL:
      v47 = 15;
      v15 = 1;
      v16 = 123;
      goto LABEL_9;
    case 0x20uLL:
      if (v12 != 16 || v13 != 2)
      {
        v47 = 12;
        v17 = 4;
        v16 = 113;
        v15 = 4;
        goto LABEL_18;
      }
      v47 = 15;
      v15 = 2;
      goto LABEL_17;
    case 0x40uLL:
      v47 = 15;
      v17 = 4;
      v16 = 123;
      v15 = 4;
      goto LABEL_18;
    default:
      if (v14 == 128)
      {
        v47 = 15;
        v15 = 8;
LABEL_17:
        v16 = 123;
        v17 = 4;
      }
      else
      {
LABEL_5:
        v47 = 0;
        v15 = 1;
        v16 = 13;
LABEL_9:
        v17 = 2;
      }
LABEL_18:
      v19 = *(_QWORD *)(v11 + 24);
      if (v19 > 9)
        goto LABEL_23;
      if (((1 << v19) & 0x17C) != 0)
        goto LABEL_22;
      if (((1 << v19) & 3) != 0)
      {
        v48[4] = 1;
LABEL_22:
        v48[5] = 1;
      }
      else if (v19 == 9)
      {
        return AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillBuffer(v46, (char *)a2, v14 * *v48, v48[3] * v14, a6, a7);
      }
LABEL_23:
      if (v19 == 7)
        v21 = 7;
      else
        v21 = v17;
      TextureViewForBlit = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::createTextureViewForBlit((uint64_t)v50, v11, v21, (AGX::G9::TextureFormatTable *)v16, *(_QWORD *)(v11 + 40), *(_DWORD *)(v11 + 308), a4, a3, 0, v15, *(_OWORD *)(v11 + 152), *(_QWORD *)(v11 + 160), *(_QWORD *)(v11 + 168), HIDWORD(*(_QWORD *)(v11 + 168)), *(_QWORD *)(v11 + 176), *(_QWORD *)(v11 + 184), HIDWORD(*(_QWORD *)(v11 + 184)), *(_DWORD *)(v11 + 236) != 0);
      v23 = *(unsigned __int8 *)(v52 + 88);
      result = MEMORY[0x24BDAC7A8](TextureViewForBlit);
      v26 = (char *)v43 - v25;
      v43[1] = v27;
      if (v23 <= a7)
      {
        v29 = (uint64_t)a6;
        goto LABEL_35;
      }
      if (v23 < 2)
      {
        v28 = 0;
        do
        {
LABEL_33:
          v26[v28] = a6[v28 % a7];
          ++v28;
        }
        while (v23 != v28);
        goto LABEL_34;
      }
      v30 = 0;
      v28 = v23 & 0xFE;
      do
      {
        v31 = a6[(v30 + 1) % a7];
        v32 = &v26[v30];
        *v32 = a6[v30 % a7];
        v32[1] = v31;
        v30 += 2;
      }
      while (v28 != v30);
      if (v28 != v23)
        goto LABEL_33;
LABEL_34:
      v29 = (uint64_t)v26;
LABEL_35:
      v33 = *(int64x2_t *)(v48 + 3);
      v34 = *(int64x2_t *)v48;
      v35 = v48[2];
      v49 = 0;
      if (v48[5])
      {
        *(int32x2_t *)v34.i8 = vmovn_s64(v34);
        *(int32x2_t *)v33.i8 = vmovn_s64(v33);
        v36 = v33.i32[1];
        v44 = v33;
        v45 = v34;
        v37 = v33.i32[0];
        v38 = v34.i64[0] != 0;
        v39 = 1;
        do
        {
          v64 = 0;
          v40 = 32 - __clz(v51 - 1);
          if (v51 < 2)
            LOBYTE(v40) = 0;
          v53[0] = 2;
          v53[1] = v51;
          v56 = v44.i64[0];
          v55 = v47;
          v57 = 0;
          v58 = v37 << v40;
          v59 = v36;
          v60 = 0;
          v54 = v45.i64[0];
          v61 = v45.i64[0];
          v62 = v35 + v39 - 1;
          v63 = v44.i64[0];
          HIBYTE(v64) = v38;
          v41 = v29;
          result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::render3D((uint64_t)v46, (uint64_t)v65, (uint64_t)v50, 0, 0, 0, v29, v23, (uint64_t)v53, &v49);
          v42 = v48[5] > (unint64_t)v39++;
          v29 = v41;
        }
        while (v42);
      }
      return result;
  }
}

uint64_t AGX::BlitContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::fillBuffer(uint64_t *a1, char *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6)
{
  int *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  unsigned int v19;
  uint32x2_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54[56];
  _QWORD v55[2];
  __int128 v56;
  _QWORD v57[13];
  void *v58[3];

  v58[1] = *(void **)MEMORY[0x24BDAC8D0];
  v12 = (int *)MEMORY[0x24BE51650];
  v13 = *(_QWORD *)&a2[*MEMORY[0x24BE51650] + 72];
  v58[0] = a2;
  v54[0] = 0;
  v55[0] = 0;
  result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitBuffer(a1, v58, v13 + a3, 0, 0, a4, a5, a6, v54, v55);
  if (!(_DWORD)result)
  {
    v15 = v54[0];
    v16 = a4 - v54[0] - v55[0];
    if (v16)
    {
      v17 = &a2[*v12];
      if (a6 == 4)
      {
        v19 = *(_DWORD *)a5;
      }
      else if (a6 == 1)
      {
        v18 = *a5 | (*a5 << 8);
        v19 = v18 | (v18 << 16);
      }
      else
      {
        v19 = 0;
      }
      v51 = *((_QWORD *)v17 + 19);
      v52 = *((_QWORD *)v17 + 18);
      v20 = 0;
      v56 = xmmword_232D73420;
      v57[0] = 0;
      v57[1] = 0;
      v57[2] = 0x100000000;
      v57[3] = 0;
      v57[4] = 0;
      v57[5] = 0x100000000;
      v57[6] = 0;
      v57[7] = 0;
      v57[8] = 0x100000000;
      v57[9] = 0;
      v57[10] = 0;
      v57[11] = 0x100000000;
      v57[12] = 0;
      if ((v16 >> 30))
      {
        v20 = (uint32x2_t)0x200000002000;
        *(_QWORD *)&v56 = 0x200000002000;
        DWORD2(v56) = 16;
        HIDWORD(v56) = v16 >> 30;
        v21 = v16 & 0x3FFFFFFFC0000000;
        v16 &= 0xC00000003FFFFFFFLL;
        v22 = 1;
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
      v23 = v16 >> 17;
      if ((v16 >> 17) <= 1)
        LODWORD(v23) = 1;
      v24 = ((_DWORD)v23 + 31) & 0xFFFFFFE0;
      v25 = v16 / (16 * v24);
      if ((_DWORD)v25)
        v26 = (_DWORD)v24 == 0;
      else
        v26 = 1;
      if (!v26)
      {
        v27 = &v55[3 * v22++];
        *((_DWORD *)v27 + 2) = v24;
        *((_DWORD *)v27 + 3) = v25;
        v20 = (uint32x2_t)0x100000010;
        v27[2] = 0x100000010;
        v27[3] = v21;
        v28 = 16 * (v16 / (16 * v24)) * v24;
        v21 += v28;
        v16 -= v28;
      }
      v29 = v16 >> 4;
      if ((_DWORD)v29)
      {
        v30 = &v55[3 * v22++];
        *((_DWORD *)v30 + 2) = v29;
        v20 = (uint32x2_t)0x1000000001;
        *(_QWORD *)((char *)v30 + 12) = 0x1000000001;
        *((_DWORD *)v30 + 5) = 1;
        v30[3] = v21;
      }
      else if (!v22)
      {
        return result;
      }
      v31 = 0;
      v32 = v22;
      v49 = v13 + v15 + a3;
      v50 = v22;
      do
      {
        v33 = &v55[3 * v31];
        v34 = v33[2];
        v35 = v33[3];
        v36 = v33[5];
        if (v34)
          v37 = 0;
        else
          v37 = (_DWORD)v35 == 0;
        if (!v37 || v36 != 0)
        {
          v39 = v57[3 * v31 - 1];
          v40 = 1;
          v41 = 2;
          v42 = 13;
          v43 = 4;
          v44 = 113;
          switch(v39)
          {
            case 2u:
              v42 = 23;
              v41 = 2;
              goto LABEL_42;
            case 3u:
            case 5u:
            case 6u:
            case 7u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
              goto LABEL_42;
            case 4u:
              v42 = 53;
              v41 = 2;
              goto LABEL_42;
            case 8u:
              v42 = 103;
              v41 = 2;
              goto LABEL_42;
            case 0x10u:
              v42 = 123;
              v41 = 2;
              goto LABEL_42;
            case 0x20u:
              goto LABEL_41;
            default:
              if (v39 == 64)
              {
                v43 = 4;
              }
              else
              {
                if (v39 != 128)
                  goto LABEL_42;
                v43 = 8;
              }
              v44 = 123;
LABEL_41:
              v42 = v44;
              v40 = v43;
              v41 = 4;
LABEL_42:
              v45 = v39 * (unint64_t)v34;
              LODWORD(v48) = 0;
              result = AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v54, *(MTLPixelFormat *)(a1[808] + 808), v41, (AGX::G9::TextureFormatTable *)v42, 0, v52, 2, 0, 0, 84148994, v20, v34, v35, 1u, 1, v40 | 0x100000000, v39 * v34, v48, v51,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0,
                         0);
              v54[0] = (unint64_t)off_250402690;
              if (v36)
              {
                v46 = v45 * v35;
                v47 = v49 + v57[3 * v31];
                do
                {
                  v54[37] = 0;
                  v54[9] = v47;
                  (*(void (**)(uint64_t))(v54[0] + 16))((uint64_t)v54);
                  v53 = 0;
                  result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::renderTexture((uint64_t)a1, (uint64_t)v58, (uint64_t)v54, 0, 0, 0, (uint64_t)&v53, 0, 0, v19);
                  v47 += v46;
                  --v36;
                }
                while (v36);
              }
              v32 = v50;
              break;
          }
        }
        ++v31;
      }
      while (v31 != v32);
    }
  }
  return result;
}

void AGX::G9::BlitDispatchContext::~BlitDispatchContext(AGX::G9::BlitDispatchContext *this)
{
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~BlitDispatchContext(this);
  JUMPOUT(0x234927ECCLL);
}

void AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~BlitDispatchContext(_QWORD *a1)
{
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~BlitDispatchContext(a1);
  JUMPOUT(0x234927ECCLL);
}

uint64_t *AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginComputePassIfNeeded(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;

  if (!result[216])
  {
    v3 = (uint64_t)result;
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand(result, 0);
    return (uint64_t *)AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginComputePass(v3, a2);
  }
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endComputePass(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v3 = result;
  *(_WORD *)(result + 4144) = 0;
  *(_WORD *)(result + 6456) = 0;
  if (*(_BYTE *)(result + 1760))
  {
    result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindComputeUSCSpillBuffer(result);
    if (*(_DWORD *)(a2 + 4))
      goto LABEL_11;
  }
  else if (*(_DWORD *)(a2 + 4))
  {
    goto LABEL_11;
  }
  v4 = *(_DWORD **)(v3 + 776);
  v5 = (char *)v4 + *(_QWORD *)(v3 + 792);
  *(_QWORD *)(v3 + 776) = v4 + 1;
  *v4 = 0x80000000;
  v6 = *(_QWORD *)(v3 + 1728);
  *(_QWORD *)(v6 + 96) = v5;
  *(_BYTE *)(v6 + 180) = *(_BYTE *)(v3 + 1520);
  *(_DWORD *)(v6 + 176) = *(_DWORD *)(v3 + 1516);
  *(_QWORD *)(v6 + 184) = *(_QWORD *)(v3 + 1524);
  if (!*(_QWORD *)(v3 + 1800))
    goto LABEL_9;
  if (*(_QWORD *)(v3 + 1488))
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  v6 = *(_QWORD *)(v3 + 1728);
  result = *(_QWORD *)(v3 + 1800);
  if (result && (v7 = *(_DWORD *)(v3 + 1812), v8 = *(_DWORD *)(v3 + 1808), (v8 & v7) != 0xFFFFFFFF))
  {
    result = objc_msgSend((id)result, "resourceID");
    *(_DWORD *)(v6 + 468) = result;
    *(_DWORD *)(v6 + 472) = v8;
    *(_DWORD *)(v6 + 476) = v7;
  }
  else
  {
LABEL_9:
    *(_DWORD *)(v6 + 476) = -1;
    *(_QWORD *)(v6 + 468) = -1;
  }
  *(_DWORD *)(v3 + 1808) = -1;
  v9 = *(_QWORD *)(v3 + 1728);
  *(_QWORD *)(v9 + 104) = 0;
  *(_BYTE *)(v9 + 462) = 0;
  *(_BYTE *)(v9 + 463) = *(_BYTE *)(v3 + 1553);
LABEL_11:
  *(_QWORD *)(v3 + 1728) = 0;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindComputeUSCSpillBuffer(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];

  result = AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(a1 + 1736, (_QWORD *)(*(_QWORD *)(a1 + 1728) + 200), *(_QWORD *)(a1 + 1496), (uint64_t)v2);
  if ((_DWORD)result)
    return IOGPUResourceListAddResource();
  return result;
}

uint64_t *AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand(uint64_t *result, int a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  int32x4_t *v17;
  unsigned __int16 *v18;
  __int32 v19;
  __int32 v20;
  uint64_t v21;
  unint64_t i;
  __int32 v23;
  __int32 v24;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;

  v3 = result;
  if (result[216])
  {
    v4 = result[195];
    if (v4 > result[196])
    {
      *(_QWORD *)(result[2] + 48) = v4;
      IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
      v5 = v3[2];
      v4 = *(_QWORD *)(v5 + 48);
      v3[195] = v4;
      v3[196] = *(_QWORD *)(v5 + 56);
    }
    v6 = v4 - v3[197];
    v3[195] = v4;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, unint64_t))(*v3 + 24))(v3, v6 + 8);
  }
  if (*((_BYTE *)v3 + 1512))
  {
    v7 = v3[224];
    if (v7)
      v8 = *(_DWORD *)(v7 + 528);
    else
      v8 = 0;
    v9 = 0;
    v10 = v3[223];
    if (v10 && a2)
      v9 = *(_DWORD *)(v10 + 528);
    if (v9 + v8)
    {
      v11 = v3[195];
      if (v11 > v3[196])
      {
        *(_QWORD *)(v3[2] + 48) = v11;
        IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
        v12 = v3[2];
        v11 = *(_QWORD *)(v12 + 48);
        v3[195] = v11;
        v3[196] = *(_QWORD *)(v12 + 56);
      }
      v13 = (_DWORD *)(v11 - v3[197]);
      v3[195] = v11;
      v14 = (2 * (v9 + v8) + 7) & 0xFFFFFFF8;
      if (v13[4])
      {
        v34 = 0;
        AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(v3 + 184), v14, 1u, &v34);
      }
      else
      {
        v34 = 0;
        v15 = (_QWORD *)AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(v3 + 184), v14 + 16, 1u, &v34);
        v13[5] = v34;
        *v15 = 0;
        v15[1] = 0;
      }
      v16 = v13[8];
      v17 = (int32x4_t *)(*(_QWORD *)(v3[185] + 8) + v13[5]);
      v18 = (unsigned __int16 *)&v17[1];
      if (v8)
      {
        if ((v16 & 0xFFFFFFFD) == 1)
          v19 = v8;
        else
          v19 = 0;
        if (v16 == 2)
          v20 = v8;
        else
          v20 = 0;
        v17->i32[0] = v19;
        v17->i32[1] = v20;
        AGX::FenceList::copyFences(v3[224], v18);
        v21 = v3[224];
        for (i = *(_QWORD *)(v21 + 512); i; i &= i - 1)
          bzero(*(void **)(v21 + 8 * __clz(__rbit64(i))), 0x88uLL);
        *(_DWORD *)(v21 + 528) = 0;
      }
      if (v9)
      {
        if (v16 == 3)
          v23 = v9;
        else
          v23 = 0;
        if ((v16 - 1) >= 2)
          v24 = 0;
        else
          v24 = v9;
        v17->i32[2] = v23;
        v17->i32[3] = v24;
        AGX::FenceList::copyFences(v3[223], &v18[v17->u32[0] + v17->u32[1]]);
        v25 = v3[223];
        for (j = *(_QWORD *)(v25 + 512); j; j &= j - 1)
          bzero(*(void **)(v25 + 8 * __clz(__rbit64(j))), 0x88uLL);
        *(_DWORD *)(v25 + 528) = 0;
      }
      v13[4] = ((2 * vaddvq_s32(*v17) + 7) & 0xFFFFFFF8) + 16;
      v3[229] |= 0x100uLL;
    }
    v27 = 0;
    v28 = 0;
    *(_DWORD *)(v3[195] - v3[197] + 24) = 0;
    v29 = v3 + 3;
    v30 = v3 + 8;
    do
    {
      v31 = *v29;
      if (*(_DWORD *)(*v29 + v28 * 8 + 24))
      {
        v32 = &v30[v28];
        if (v30[v28 + 1])
        {
          v33 = v3[6];
          if (*((_DWORD *)v3 + 362))
            AGX::DataBufferAllocator<34ul>::doBufferRandomization((uint64_t)(v3 + 3), (_QWORD *)(v33 + v27));
          if (*v32 == *(_QWORD *)(v33 + v27 + 16) - (*(_QWORD *)(v31 + v28 * 8 + 16) + *(_QWORD *)(v31 + v28 * 8 + 8)))
            *(_QWORD *)(v33 + v27 + 24) = v32[1];
        }
      }
      v28 += 4;
      v27 += 64;
    }
    while (v28 != 136);
    *(_QWORD *)(v3[2] + 48) = v3[195];
    result = (uint64_t *)IOGPUMetalCommandBufferStorageEndSegment();
    *((_BYTE *)v3 + 1512) = 0;
  }
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginComputePass(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  int v13;

  *(_DWORD *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1760) = 0;
  v4 = a1 + 8;
  v5 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(a1 + 8, 528);
  if (objc_msgSend(*(id *)(a1 + 8), "skipRender"))
  {
    v12 = *(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1576);
    *(_DWORD *)(v12 + 12) = 1;
    if ((*(_BYTE *)(v12 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)v4 + 688) = 1;
  }
  v5[1] = 0;
  *(_QWORD *)((char *)v5 + 20) = 0x3000001E8;
  *(_QWORD *)(a1 + 1728) = v5 + 4;
  bzero(v5 + 4, 0x1E8uLL);
  v6 = *(_QWORD *)(a1 + 1728);
  *(_BYTE *)(v6 + 461) = 1;
  *(_QWORD *)v6 = *(_QWORD *)(a1 + 792) + *(_QWORD *)(a1 + 776);
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_WORD *)(v6 + 456) = 0;
  *(_BYTE *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  v7 = *(_QWORD *)(a1 + 424);
  v8 = v7 + 19;
  if ((unint64_t)(v7 + 19) > *(_QWORD *)(a1 + 416))
  {
    v13 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 11, 0);
    v7 = *(_QWORD *)(a1 + 424);
    if (!v13)
      goto LABEL_4;
    v8 = v7 + 19;
    if ((unint64_t)(v7 + 19) > *(_QWORD *)(a1 + 416))
      abort();
  }
  *(_QWORD *)(a1 + 432) = v8;
LABEL_4:
  *(_QWORD *)(a1 + 424) = (v7 + 15) & 0xFFFFFFFFFFFFFFF0 | 4;
  AGX::G9::ContextSwitcher::setupComputeCommand(*(_QWORD *)(a1 + 1648), *(_QWORD *)(a1 + 1656), *(_QWORD *)(a1 + 1728), *(_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 24));
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1688) + 56) + 32);
  do
  {
    v9 &= ~(1 << __clz(__rbit32(v9)));
    IOGPUResourceListAddResource();
  }
  while (v9);
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1688) + 48) + 24);
  do
  {
    v10 &= ~(1 << __clz(__rbit32(v10)));
    IOGPUResourceListAddResource();
  }
  while (v10);
  IOGPUResourceListAddResource();
  IOGPUResourceListAddResource();
  result = IOGPUResourceListAddResource();
  if (a2)
    *a2 = v5;
  return result;
}

uint64_t AGX::SidebandBufferAllocator::allocate(AGX::SidebandBufferAllocator *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = a2 + a3 - 1;
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v9[1])
  {
    IOGPUMetalCommandBufferStorageAllocSidebandBuffer();
    v9 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v10 = v9[2];
  if ((unint64_t)(v10 + v8) > v9[3])
  {
    IOGPUMetalCommandBufferStorageGrowSidebandBuffer();
    v9 = (_QWORD *)*((_QWORD *)this + 1);
    v10 = v9[2];
    if ((unint64_t)(v10 + v8) > v9[3])
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Unable to allocate space required in sideband buffer\n", "agxa_sideband_buffer.h", 69, "allocate");
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v13 = "agxa_sideband_buffer.h";
        v14 = 1024;
        v15 = 69;
        v16 = 2080;
        v17 = "allocate";
        _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Unable to allocate space required in sideband buffer\n", buf, 0x1Cu);
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v13 = "agxa_sideband_buffer.h";
        v14 = 1024;
        v15 = 69;
        v16 = 2080;
        v17 = "allocate";
        _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Unable to allocate space required in sideband buffer\n", buf, 0x1Cu);
      }
      abort();
    }
  }
  result = (a3 + v10 - 1) & -(uint64_t)a3;
  if (a4)
    *a4 = result - *((_DWORD *)v9 + 2);
  v9[2] = result + a2;
  return result;
}

_QWORD *AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~BlitDispatchContext(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void **v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = &off_250400168;
  v2 = a1[223];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 512);
    if (v3)
    {
      v4 = MEMORY[0x24BDAC760];
      do
      {
        v5 = *(_QWORD *)(v2 + 520);
        v6 = *(_QWORD *)(v2 + 8 * __clz(__rbit64(v3)));
        v7 = *(NSObject **)(v5 + 16);
        v18 = v4;
        v19 = 3221225472;
        v20 = ___ZN3AGX14FenceGroupPool17releaseFenceGroupEPNS_10FenceGroupE_block_invoke;
        v21 = &__block_descriptor_48_e5_v8__0l;
        v22 = v5;
        v23 = v6;
        dispatch_sync(v7, &v18);
        v3 = (*(_QWORD *)(v2 + 512) - 1) & *(_QWORD *)(v2 + 512);
        *(_QWORD *)(v2 + 512) = v3;
      }
      while (v3);
    }
    MEMORY[0x234927ECC](v2, 0x1020C40C758419CLL);
  }
  v8 = a1[224];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 512);
    if (v9)
    {
      v10 = MEMORY[0x24BDAC760];
      do
      {
        v11 = *(_QWORD *)(v8 + 520);
        v12 = *(_QWORD *)(v8 + 8 * __clz(__rbit64(v9)));
        v13 = *(NSObject **)(v11 + 16);
        v18 = v10;
        v19 = 3221225472;
        v20 = ___ZN3AGX14FenceGroupPool17releaseFenceGroupEPNS_10FenceGroupE_block_invoke;
        v21 = &__block_descriptor_48_e5_v8__0l;
        v22 = v11;
        v23 = v12;
        dispatch_sync(v13, &v18);
        v9 = (*(_QWORD *)(v8 + 512) - 1) & *(_QWORD *)(v8 + 512);
        *(_QWORD *)(v8 + 512) = v9;
      }
      while (v9);
    }
    MEMORY[0x234927ECC](v8, 0x1020C40C758419CLL);
  }
  v14 = (void **)a1[178];
  v15 = (void **)a1[179];
  if (v14 != v15)
  {
    do
    {
      v16 = *v14++;
      free(v16);
    }
    while (v14 != v15);
    v14 = (void **)a1[178];
  }
  if (v14)
  {
    a1[179] = v14;
    operator delete(v14);
  }
  return a1;
}

void AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endFast2DHardwareCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  void *v7;
  _DWORD *v8;
  int v9;
  int v10;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 1504) + 520))
  {
    v5 = *(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1576);
    *(_DWORD *)(v5 + 12) = 1;
    if ((*(_BYTE *)(v5 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)(a1 + 8) + 688) = 1;
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    if ((v6 & 1) == 0
    {
    }
    *(_BYTE *)(a3 + 812) = *(_BYTE *)(a1 + 1520);
    *(_DWORD *)(a3 + 808) = *(_DWORD *)(a1 + 1516);
    *(_QWORD *)(a3 + 816) = *(_QWORD *)(a1 + 1524);
    if (*(_QWORD *)(a1 + 1800))
    {
      if (*(_QWORD *)(a1 + 1488))
        MTLResourceListAddResource();
      IOGPUResourceListAddResource();
      v7 = *(void **)(a1 + 1800);
      v8 = (_DWORD *)(a1 + 1808);
      if (v7)
      {
        v9 = *(_DWORD *)(a1 + 1812);
        v10 = *(_DWORD *)(a1 + 1808);
        if ((v10 & v9) != 0xFFFFFFFF)
        {
          *(_DWORD *)(a3 + 784) = objc_msgSend(v7, "resourceID");
          *(_DWORD *)(a3 + 788) = v10;
          *(_DWORD *)(a3 + 792) = v9;
LABEL_14:
          *v8 = -1;
          *(_QWORD *)(a3 + 832) = 0;
          return;
        }
      }
    }
    else
    {
      v8 = (_DWORD *)(a1 + 1808);
    }
    *(_QWORD *)(a3 + 784) = -1;
    *(_DWORD *)(a3 + 792) = -1;
    goto LABEL_14;
  }
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFast2DResources(uint64_t a1, void *a2, void **a3, uint64_t a4)
{
  void *v7;
  uint64_t v9;
  uint64_t result;

  if (a3)
  {
    v7 = *a3;
    if (*a3 && v7 != a2)
    {
      if (*(_QWORD *)(a1 + 1488))
        MTLResourceListAddResource();
      if (*(_BYTE *)(a1 + 1816))
      {
        IOGPUResourceListAddResource();
      }
      else
      {
        IOGPUResourceListAddResource();
        if ((objc_msgSend(v7, "resourceOptions") & 0x100) != 0)
          AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 1488);
  if (*(_DWORD *)(a4 + 2980))
  {
    AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addAPIResources(a4, v9, *(_QWORD *)(a1 + 1496));
    result = AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addGPUResources(a4, *(_QWORD *)(a1 + 1504), 63);
    if (!*(_QWORD *)(a1 + 1800) && !*(_BYTE *)(a4 + 2990))
      return result;
    return AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
  }
  if (v9)
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  if (*(_QWORD *)(a1 + 1800))
    return AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
  result = objc_msgSend(a2, "resourceOptions");
  if ((result & 0x100) != 0)
    return AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v2 = a1[6];
  if (!*(_QWORD *)(v2 + 1240) || !*(_QWORD *)(v2 + 1248))
  {
    v3 = a1[85];
    if (!v3)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 19, 0))
        goto LABEL_12;
      v3 = a1[85];
    }
    v4 = v3 + 16;
    if ((unint64_t)(v3 + 16) <= a1[84])
      goto LABEL_5;
    v6 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 19, 0);
    v3 = a1[85];
    if (!v6)
      goto LABEL_6;
    v4 = v3 + 16;
    if ((unint64_t)(v3 + 16) <= a1[84])
    {
LABEL_5:
      a1[86] = v4;
LABEL_6:
      a1[85] = v3 + 16;
      return IOGPUResourceListAddResource();
    }
LABEL_12:
    abort();
  }
  return IOGPUResourceListAddResource();
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitFast2DControlStream(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 520);
  v7 = v6 + 255;
  if ((unint64_t)(v6 + 255) > *(_QWORD *)(result + 512))
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(result + 24, 14, 0);
    v6 = v5[65];
    if (!(_DWORD)result)
      goto LABEL_3;
    v7 = v6 + 255;
    if ((unint64_t)(v6 + 255) > v5[64])
      abort();
  }
  v5[66] = v7;
LABEL_3:
  v8 = v5[67];
  v9 = (v6 + 127) & 0xFFFFFFFFFFFFFF80;
  v5[65] = v9 + 128;
  *(_QWORD *)v9 = a3;
  *(_DWORD *)(v9 + 8) = -1073741824;
  *(_QWORD *)(a2 + 800) = v9 + v8;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::renderTexture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t *a9, unsigned int a10)
{
  uint64_t *v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  id *v21;
  id *v22;
  uint64_t v23;
  _DWORD **v24;
  unsigned int v25;
  unsigned int v26;
  uint32x2_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  _BOOL4 v33;
  _DWORD *v34;
  uint64_t v35;
  BOOL v36;
  int v38;
  uint64_t v39;
  int8x16_t *v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t BlitProgramVariant;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int64_t GPUVirtualAddress;
  int8x16_t v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  __int32 v65;
  __int32 v66;
  __int32 v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int *v82;
  int v83;
  int v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int8x16_t v97;
  _DWORD *v98;
  unsigned int v99;
  uint32x2_t v100;
  _QWORD *v101;
  void **v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  _DWORD *v106;
  int8x8_t v107;
  unint64_t v108;
  _DWORD *v109;
  int8x8_t *v110;
  int *v111;
  _BYTE v112[28];
  _QWORD v113[10];
  int v114;
  _QWORD v115[8];
  int8x16_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _QWORD v125[272];
  int v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138[166];
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v10 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v12 = v11;
  v106 = v13;
  v15 = v14;
  v102 = v16;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = (uint64_t)v10;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand(v10, 0);
  v24 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (v15)
  {
    v25 = *(_DWORD *)(v15 + 144);
    v26 = *(_DWORD *)(v15 + 128) >> v25;
    if (v26 <= 1)
      v26 = 1;
    v99 = v26;
    v27 = vmax_u32(vshl_u32(*(uint32x2_t *)(v15 + 132), (uint32x2_t)vneg_s32(vdup_n_s32(v25))), (uint32x2_t)0x100000001);
  }
  else
  {
    v99 = 0;
    v27 = (uint32x2_t)0x100000000;
  }
  v100 = v27;
  v28 = v20[36];
  v29 = v20[33];
  if (v20[32] >> v28 <= 1u)
    v30 = 1;
  else
    v30 = v20[32] >> v28;
  if (v29 >> v28 <= 1)
    v31 = 1;
  else
    v31 = v29 >> v28;
  v32 = v20[34] >> v28;
  if (v32 <= 1)
    v32 = 1;
  v104 = v32;
  v105 = v12;
  if (a9)
    v33 = v15 == 0;
  else
    v33 = 1;
  AGX::FramebufferDriverConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferDriverConfigGen2((uint64_t)v138, v22, (uint64_t)v20, v22, v18, v12, a10, v33, a9 != 0);
  v95 = v31;
  v96 = v30;
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferGen2((uint64_t)v125, *(unint64_t **)(v23 + 1464), *(_QWORD *)(*(_QWORD *)(v23 + 8) + 688), v138, v30, v31, 1);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeStoreActions((uint64_t)v125);
  v34 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(v23 + 8, 1064);
  if (objc_msgSend(*(id *)(v23 + 8), "skipRender"))
  {
    v93 = *(_QWORD *)(v23 + 1560) - *(_QWORD *)(v23 + 1576);
    *(_DWORD *)(v93 + 12) = 1;
    if ((*(_BYTE *)(v93 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)(v23 + 8) + 688) = 1;
  }
  *((_QWORD *)v34 + 1) = 0;
  *(_QWORD *)(v34 + 5) = 0x200000400;
  v35 = (uint64_t)(v34 + 8);
  bzero(v34 + 8, 0x400uLL);
  *((_QWORD *)v34 + 60) = 0;
  *((_QWORD *)v34 + 62) = 0;
  *((_BYTE *)v34 + 1052) = 1;
  v101 = (_QWORD *)(v23 + 24);
  AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::setupBlitCommand((_DWORD *)(v23 + 1664), (uint64_t)(v34 + 8), *(_QWORD *)(v23 + 1504), (_QWORD *)(v23 + 24), v125);
  v34[198] = v133;
  if (v136)
    v36 = 0;
  else
    v36 = v137 == 0;
  if (v36 && *(unsigned __int16 *)(*(_QWORD *)(v125[42] + 808) + 6686) > 0xAu)
    v38 = 256;
  else
    v38 = 768;
  v34[197] = v38;
  *((_BYTE *)v34 + 806) = v134 != 0;
  v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808) + 5496);
  v122 = *(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808);
  v123 = v39;
  v121 = 0;
  v124 = 0;
  v40 = a9;
  if (*(_DWORD *)(v23 + 1696))
  {
    v121 = *(_DWORD *)(v23 + 1696);
    v124 = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v121, (_QWORD *)v34 + 67, *(_QWORD *)(v23 + 1496), (uint64_t)&v116))
    {
      IOGPUResourceListAddResource();
    }
    v40 = a9;
  }
  v41 = v126;
  *(_QWORD *)&v42 = v127;
  v43 = v135;
  *((_QWORD *)&v42 + 1) = v128;
  v44 = v129;
  v45 = v130;
  v46 = v131;
  v47 = v132;
  *((_QWORD *)v34 + 119) = 0;
  v34[240] = v41;
  *(_OWORD *)(v34 + 241) = v42;
  *(_OWORD *)(v34 + 245) = v44;
  *(_OWORD *)(v34 + 249) = v45;
  *(_OWORD *)(v34 + 253) = v46;
  *(_QWORD *)(v34 + 257) = v47;
  v34[259] = v43;
  *((_QWORD *)v34 + 130) = 0;
  if (v15 && v40)
    *(int8x16_t *)(v34 + 238) = vextq_s8(*v40, *v40, 8uLL);
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFast2DResources(v23, *v22, v102, (uint64_t)v125);
  v48 = v106;
  if (v15)
  {
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    memset(v115, 0, 24);
    LODWORD(v113[1]) = 14;
    memset(&v113[2], 0, 24);
    v113[0] = off_250400578;
    v113[9] = v141;
    *(_OWORD *)&v113[7] = v140;
    *(_OWORD *)&v113[5] = v139;
    v114 = (16 * (BYTE4(v127) & 0xF)) | (((unint64_t)*(unsigned __int8 *)(v15 + 381) << 8 == 768) << 8);
    BlitProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(*(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808), (uint64_t)v113);
    v98 = v34;
    v113[0] = off_2504005B8;
    if (v113[2])
    {
      v113[3] = v113[2];
      operator delete((void *)v113[2]);
    }
    v103 = BlitProgramVariant;
    v50 = *(_DWORD *)(BlitProgramVariant + 2216);
    do
    {
      IOGPUResourceListAddResource();
      v50 &= ~(1 << __clz(__rbit32(v50)));
    }
    while (v50);
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808) + 5496);
    v113[1] = *(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808);
    v113[2] = v51;
    LODWORD(v113[0]) = 0;
    LOBYTE(v113[3]) = 0;
    if (*(_DWORD *)(BlitProgramVariant + 2936))
    {
      LODWORD(v113[0]) = *(_DWORD *)(BlitProgramVariant + 2936);
      LOBYTE(v113[3]) = 1;
      if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)v113, (_QWORD *)v34 + 67, *(_QWORD *)(v23 + 1496), (uint64_t)&v108))
      {
        IOGPUResourceListAddResource();
      }
    }
    v52 = v12;
    if (a9)
      v52 = a9[1].u32[2];
    v53 = *v106;
    v97 = *(int8x16_t *)(v15 + 400);
    v54 = *(_QWORD *)(v15 + 416);
    v55 = *(unsigned int *)(v15 + 144);
    v56 = *(_DWORD *)(v15 + 64);
    GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v15, 0, 0, 0, 0);
    v58.i64[0] = v55 << 57;
    v58.i64[1] = v55 & 0xFFFFFFFFFFFFFFEFLL | (16 * (v56 > 1));
    v59 = vorrq_s8(vandq_s8(v97, (int8x16_t)xmmword_232D73430), v58);
    v60 = GPUVirtualAddress + *(_QWORD *)(v15 + 328) * v52;
    v61 = v59.i64[1];
    v59.i64[1] = v59.i64[1] & 0xFFFFFF800000001FLL | (32 * (v60 >> 6));
    v116 = v59;
    v62 = v53 & 1;
    v63 = v60 >> 4;
    if (v61 >= 0)
      v64 = v54;
    else
      v64 = v54 & 0xF3FFFFFFFFFFFFFFLL | ((v63 & 3) << 58);
    *(_QWORD *)&v117 = v64;
    LOWORD(v113[0]) = ((_WORD)v62 << 7) | ((_WORD)v62 << 8) | 0x20;
    v113[1] = 0x7F7FFFFF00000000;
    memset(&v113[2], 0, 20);
    HIDWORD(v113[0]) = (v62 << 16) | (v62 << 18) | 0x4001;
    memset(&v113[5], 0, 32);
    AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields::SamplerStateFields(&v108, (float *)v113);
    *(_QWORD *)&v119 = v108;
    if (a9)
    {
      v66 = a9->i32[2];
      v65 = a9->i32[3];
      v67 = a9->i32[1];
      v68 = a9->i32[0] + v66;
      v69 = v67 + v65;
      v70 = a9[1].u32[0];
      v71 = a9[1].u32[1];
      v104 = v100.u32[1];
      v105 = a9[1].u32[2];
      v72 = (unsigned __int16)(v65 + 4096);
      v73 = (float)v70 / (float)v99;
      v74 = (float)v71 / (float)v100.u32[0];
      v75 = (float)(v71 + v67) / (float)v100.u32[0];
      v76 = (float)(v70 + a9->i32[0]) / (float)v99;
    }
    else
    {
      v66 = 0;
      v74 = 0.0;
      v73 = 0.0;
      v75 = 1.0;
      v72 = 4096;
      v76 = 1.0;
      v69 = v95;
      v68 = v96;
    }
    v107 = *(int8x8_t *)(v103 + 2940);
    AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitFragmentProgramVariantArguments((uint64_t)v112, v101, v103, (uint64_t)&v116, (uint64_t)v115);
    *(_OWORD *)v113 = *(_OWORD *)v112;
    *(_OWORD *)((char *)&v113[1] + 4) = *(_OWORD *)&v112[12];
    *(int8x8_t *)((char *)&v113[3] + 4) = vorr_s8(vand_s8(v107, (int8x8_t)0xF700000003E00000), (int8x8_t)0x2E0F0000040000);
    HIDWORD(v113[4]) = 234881024;
    LODWORD(v113[5]) = v107.i32[1] & 0xF7000000 | 0xF00;
    if (HIDWORD(v127) <= 1)
      v77 = 17288;
    else
      v77 = 82824;
    HIDWORD(v113[7]) = v77;
    LODWORD(v113[8]) = 2;
    *(_OWORD *)((char *)&v113[5] + 4) = xmmword_232D73440;
    v78 = *(_QWORD *)(v23 + 520);
    v79 = v78 + 192;
    if ((unint64_t)(v78 + 192) > *(_QWORD *)(v23 + 512))
    {
      v94 = AGX::DataBufferAllocator<34ul>::growNoInline(v101, 14, 0);
      v78 = *(_QWORD *)(v23 + 520);
      if (!v94)
        goto LABEL_52;
      v79 = v78 + 192;
      if ((unint64_t)(v78 + 192) > *(_QWORD *)(v23 + 512))
        abort();
    }
    *(_QWORD *)(v23 + 528) = v79;
LABEL_52:
    v80 = *(_QWORD *)(v23 + 536) + v78;
    *(_QWORD *)(v23 + 520) = v78 + 192;
    v81 = AGX::ISPPFEncoderGen1<AGX::G9::Encoders>::PrimitiveBlock::emit((__int128 *)v113, v78, v80, (uint64_t)&v108);
    v82 = v111;
    v83 = (v66 << 8) + 0x100000;
    *v111 = v83 & 0xFFFF00;
    v82[1] = v72;
    v82[2] = v66 << 24;
    v82[3] = ((v69 << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v83);
    v84 = (v68 << 8) + 0x100000;
    v82[4] = 0;
    v82[5] = v84 & 0xFFFF00;
    v82[6] = v72;
    v82[7] = v68 << 24;
    v82[8] = ((v69 << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v84);
    v82[9] = 0;
    v85 = v109;
    *v109 = 2130706432;
    v85[v108] = 2130706432;
    v85[(2 * v108)] = 2130706432;
    v85[(3 * v108)] = 2130706432;
    *((float *)&v87 + 1) = v73;
    *(float *)&v87 = v73;
    v86 = v87 >> 31;
    *((float *)&v87 + 1) = v74;
    *(float *)&v87 = v74;
    v88 = v87 >> 31;
    v85[1] = v86;
    v85[2] = v88;
    *((float *)&v87 + 1) = (float)((float)v105 + 0.5) / (float)v104;
    *(float *)&v87 = *((float *)&v87 + 1);
    v89 = v87 >> 31;
    v85[3] = v89;
    v85[4] = 2130706432;
    v85[(v108 + 1)] = v86;
    *((float *)&v87 + 1) = v75;
    *(float *)&v87 = v75;
    v90 = v87 >> 31;
    v85[(v108 + 2)] = v90;
    v85[(v108 + 3)] = v89;
    v85[(v108 + 4)] = 2130706432;
    *((float *)&v87 + 1) = v76;
    *(float *)&v87 = v76;
    v91 = v87 >> 31;
    v85[(2 * (_DWORD)v108) | 1] = v91;
    v85[(2 * v108 + 2)] = v88;
    v85[(2 * v108 + 3)] = v89;
    v85[(2 * v108 + 4)] = 2130706432;
    v85[(3 * v108 + 1)] = v91;
    v85[(3 * v108 + 2)] = v90;
    v85[(3 * v108 + 3)] = v89;
    v85[(3 * v108 + 4)] = 2130706432;
    *v110 = vorr_s8(vand_s8(*v110, (int8x8_t)0xFFFF808080808080), (int8x8_t)0x414243424140);
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitFast2DControlStream(v23, v35, v81);
    v24 = (_DWORD **)MEMORY[0x24BE516B0];
    v48 = v106;
    v34 = v98;
  }
  if ((*v48 & 2) != 0)
    *(_BYTE *)(v35 + 773) = 1;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endFast2DHardwareCommand(v23, (uint64_t)v34, v35);
  if (**v24)
    IOGPUDeviceTraceEvent();
  return AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer((uint64_t)v125);
}

void sub_232C50B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer((uint64_t)&a72);
  _Unwind_Resume(a1);
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)14,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::BlitFragmentProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *begin;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = (char *)v10 - (char *)value;
  v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFCFLL)
  {
    begin = &value[v18 + 12];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v20 = &value[v18];
  *v20 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x42;
  v21 = *(_OWORD *)&this[1].__end_cap_.__value_;
  v22 = *(_OWORD *)&this[2].__end_;
  *(_QWORD *)(v20 + 9) = this[3].__begin_;
  *(_OWORD *)(v20 + 5) = v22;
  *(_OWORD *)(v20 + 1) = v21;
  v23 = this->__end_cap_.__value_;
  v24 = (char *)this[1].__begin_ - (char *)v23;
  v25 = v24 >> 2;
  if ((unint64_t)v24 > 0xFFFFFFFFFFFFFFF7)
  {
    v26 = &v23[v25 + 2];
    this[1].__begin_ = v26;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    v23 = this->__end_cap_.__value_;
    v26 = this[1].__begin_;
  }
  v27 = &v23[v25];
  *v27 = (((_DWORD)v26 - (_DWORD)v23) >> 2 << 8) | 0x46;
  v27[1] = this[3].__end_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::render3D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  uint64_t *v10;
  size_t v11;
  size_t v12;
  const void *v13;
  const void *v14;
  char *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  id *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  int v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t BlitProgramVariant;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t GPUVirtualAddress;
  int8x16_t v48;
  uint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  _DWORD *v66;
  _DWORD **v67;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int8x16_t v77;
  int8x8_t v78;
  int v79;
  _DWORD *v80;
  int8x8_t *v81;
  int *v82;
  _BYTE v83[28];
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  _BYTE v89[28];
  int8x8_t v90;
  int v91;
  _QWORD v92[3];
  uint64_t v93;
  int8x16_t v94;
  __int128 __p;
  _QWORD v96[3];
  _BYTE v97[24];
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _QWORD v103[272];
  int v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116[166];
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  v10 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v12 = v11;
  v14 = v13;
  v76 = v15;
  v74 = v16;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = (uint64_t)v10;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand(v10, 0);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  AGX::FramebufferDriverConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferDriverConfigGen2((uint64_t)v116, v22, v20, 0, 0, *(_DWORD *)(a9 + 56), 0, 0, 1u);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferGen2((uint64_t)v103, *(unint64_t **)(v23 + 1464), *(_QWORD *)(*(_QWORD *)(v23 + 8) + 688), v116, *(_DWORD *)(a9 + 32), *(_DWORD *)(a9 + 36), 1);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeStoreActions((uint64_t)v103);
  v24 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(v23 + 8, 1064);
  if (objc_msgSend(*(id *)(v23 + 8), "skipRender"))
  {
    v69 = *(_QWORD *)(v23 + 1560) - *(_QWORD *)(v23 + 1576);
    *(_DWORD *)(v69 + 12) = 1;
    if ((*(_BYTE *)(v69 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)(v23 + 8) + 688) = 1;
  }
  *((_QWORD *)v24 + 1) = 0;
  *(_QWORD *)(v24 + 5) = 0x200000400;
  bzero(v24 + 8, 0x400uLL);
  *((_QWORD *)v24 + 60) = 0;
  *((_QWORD *)v24 + 62) = 0;
  *((_BYTE *)v24 + 1052) = 1;
  if (v12)
  {
    v25 = 2 * v12 - 1;
    v26 = *(_QWORD *)(v23 + 200);
    v27 = v26 + v25;
    if ((unint64_t)(v26 + v25) > *(_QWORD *)(v23 + 192))
    {
      v71 = AGX::DataBufferAllocator<34ul>::growNoInline(v23 + 24, 4, 0);
      v26 = *(_QWORD *)(v23 + 200);
      if (!v71)
        goto LABEL_7;
      v27 = v26 + v25;
      if ((unint64_t)(v26 + v25) > *(_QWORD *)(v23 + 192))
        abort();
    }
    *(_QWORD *)(v23 + 208) = v27;
LABEL_7:
    v28 = (char *)((v12 + v26 - 1) & -(uint64_t)v12);
    v76 = &v28[*(_QWORD *)(v23 + 216)];
    *(_QWORD *)(v23 + 200) = &v28[v12];
    memcpy(v28, v14, v12);
  }
  AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::setupBlitCommand((_DWORD *)(v23 + 1664), (uint64_t)(v24 + 8), *(_QWORD *)(v23 + 1504), (_QWORD *)(v23 + 24), v103);
  v24[198] = v111;
  if (v114)
    v29 = 0;
  else
    v29 = v115 == 0;
  if (v29 && *(unsigned __int16 *)(*(_QWORD *)(v103[42] + 808) + 6686) > 0xAu)
    v31 = 256;
  else
    v31 = 768;
  v24[197] = v31;
  *((_BYTE *)v24 + 806) = v112 != 0;
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808) + 5496);
  v100 = *(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808);
  v101 = v32;
  v99 = 0;
  v102 = 0;
  if (*(_DWORD *)(v23 + 1696))
  {
    v99 = *(_DWORD *)(v23 + 1696);
    v102 = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v99, (_QWORD *)v24 + 67, *(_QWORD *)(v23 + 1496), (uint64_t)&v94))
    {
      IOGPUResourceListAddResource();
    }
  }
  v33 = v104;
  *(_QWORD *)&v34 = v105;
  v35 = v113;
  *((_QWORD *)&v34 + 1) = v106;
  v36 = v107;
  v37 = v108;
  v38 = v109;
  v39 = v110;
  *((_QWORD *)v24 + 119) = 0;
  v24[240] = v33;
  *(_OWORD *)(v24 + 241) = v34;
  *(_OWORD *)(v24 + 245) = v36;
  *(_OWORD *)(v24 + 249) = v37;
  *(_OWORD *)(v24 + 253) = v38;
  *(_QWORD *)(v24 + 257) = v39;
  v24[259] = v35;
  *((_QWORD *)v24 + 130) = 0;
  v40 = *(_OWORD *)(a9 + 48);
  *((_QWORD *)&v40 + 1) = *(_QWORD *)(a9 + 60);
  *(_OWORD *)(v24 + 238) = v40;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindFast2DResources(v23, *v22, v18, (uint64_t)v103);
  v94.i32[2] = 14;
  __p = 0uLL;
  v94.i64[0] = (uint64_t)off_250400578;
  *(_OWORD *)&v96[1] = v117;
  *(_OWORD *)v97 = v118;
  v96[0] = 0;
  *(_QWORD *)&v97[16] = v119;
  v98 = *(_DWORD *)a9 & 0xF | (16 * (*(_DWORD *)(a9 + 4) & 0xF)) | (*(unsigned __int8 *)(a9 + 75) << 9) | (*(unsigned __int8 *)(a9 + 72) << 10) | (*(unsigned __int8 *)(a9 + 73) << 11) | (*(unsigned __int8 *)(a9 + 74) << 12) | ((*(_DWORD *)(a9 + 16) & 0x1F) << 13);
  BlitProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(*(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808), (uint64_t)&v94);
  v72 = (uint64_t)v24;
  v73 = (_QWORD *)(v23 + 24);
  v75 = (uint64_t)(v24 + 8);
  v94.i64[0] = (uint64_t)off_2504005B8;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v42 = *(_DWORD *)(BlitProgramVariant + 2216);
  do
  {
    IOGPUResourceListAddResource();
    v42 &= ~(1 << __clz(__rbit32(v42)));
  }
  while (v42);
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808) + 5496);
  v94.i64[1] = *(_QWORD *)(*(_QWORD *)(v23 + 1464) + 808);
  *(_QWORD *)&__p = v43;
  v94.i32[0] = 0;
  BYTE8(__p) = 0;
  if (*(_DWORD *)(BlitProgramVariant + 2936))
  {
    v94.i32[0] = *(_DWORD *)(BlitProgramVariant + 2936);
    BYTE8(__p) = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v94, (_QWORD *)v24 + 67, *(_QWORD *)(v23 + 1496), (uint64_t)v89))
    {
      IOGPUResourceListAddResource();
    }
  }
  *(_OWORD *)&v97[8] = 0u;
  __p = 0u;
  memset(v96, 0, sizeof(v96));
  v94 = 0u;
  *(_QWORD *)v97 = v76;
  if (v74)
  {
    v93 = 0;
    strcpy(v89, " ");
    *(_QWORD *)&v89[8] = 0x7F7FFFFF00000000;
    *(_DWORD *)&v89[16] = 0;
    *(_DWORD *)&v89[4] = 16385;
    memset(v92, 0, sizeof(v92));
    v90 = 0;
    *(_QWORD *)&v89[20] = 0;
    v77 = *(int8x16_t *)(v74 + 400);
    v44 = *(_QWORD *)(v74 + 416);
    v45 = *(unsigned int *)(v74 + 144);
    v46 = *(_DWORD *)(v74 + 64);
    GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v74, 0, 0, 0, 0);
    v48.i64[0] = v45 << 57;
    v48.i64[1] = v45 & 0xFFFFFFFFFFFFFFEFLL | (16 * (v46 > 1));
    v50 = vorrq_s8(vandq_s8(v77, (int8x16_t)xmmword_232D73430), v48);
    v49 = v50.i64[1];
    v50.i64[1] = v50.i64[1] & 0xFFFFFF800000001FLL | (32 * (GPUVirtualAddress >> 6));
    if (v49 >= 0)
      v51 = v44;
    else
      v51 = v44 & 0xF3FFFFFFFFFFFFFFLL | (((GPUVirtualAddress >> 4) & 3) << 58);
    v94 = v50;
    *(_QWORD *)&__p = v51;
    AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields::SamplerStateFields(&v96[2], (float *)v89);
  }
  v84 = *(unsigned __int16 *)(a9 + 8) | (*(_DWORD *)(a9 + 12) << 16);
  v85 = *(_QWORD *)(a9 + 20);
  v52 = *(_DWORD *)(a9 + 40);
  v86 = *(_DWORD *)(a9 + 28);
  v87 = v52;
  v88 = *(_DWORD *)(a9 + 68);
  v53 = *(_DWORD *)(a9 + 48);
  v54 = *(_DWORD *)(a9 + 52);
  v55 = *(_DWORD *)(a9 + 60);
  v56 = *(_DWORD *)(a9 + 64);
  v78 = *(int8x8_t *)(BlitProgramVariant + 2940);
  AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitFragmentProgramVariantArguments((uint64_t)v83, v73, BlitProgramVariant, (uint64_t)&v94, (uint64_t)&v84);
  *(_OWORD *)v89 = *(_OWORD *)v83;
  *(_OWORD *)&v89[12] = *(_OWORD *)&v83[12];
  v90 = vorr_s8(vand_s8(v78, (int8x8_t)0xF700000003E00000), (int8x8_t)0x2E0F0000040000);
  v91 = 234881024;
  LODWORD(v92[0]) = v78.i32[1] & 0xF7000000 | 0xF00;
  if (HIDWORD(v105) <= 1)
    v57 = 17288;
  else
    v57 = 82824;
  LODWORD(v93) = 2;
  HIDWORD(v92[2]) = v57;
  *(_OWORD *)((char *)v92 + 4) = xmmword_232D73450;
  v58 = *(_QWORD *)(v23 + 520);
  v59 = v58 + 120;
  if ((unint64_t)(v58 + 120) <= *(_QWORD *)(v23 + 512))
    goto LABEL_32;
  v70 = AGX::DataBufferAllocator<34ul>::growNoInline(v73, 14, 0);
  v58 = *(_QWORD *)(v23 + 520);
  if (v70)
  {
    v59 = v58 + 120;
    if ((unint64_t)(v58 + 120) > *(_QWORD *)(v23 + 512))
      abort();
LABEL_32:
    *(_QWORD *)(v23 + 528) = v59;
  }
  v60 = *(_QWORD *)(v23 + 536) + v58;
  *(_QWORD *)(v23 + 520) = v58 + 120;
  v61 = AGX::ISPPFEncoderGen1<AGX::G9::Encoders>::PrimitiveBlock::emit((__int128 *)v89, v58, v60, (uint64_t)&v79);
  v62 = v82;
  v63 = (v53 << 8) + 0x100000;
  v64 = (unsigned __int16)(v54 + 4096);
  *v82 = v63 & 0xFFFF00;
  v62[1] = v64;
  v62[2] = v53 << 24;
  v62[3] = (((v56 + v54) << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v63);
  v65 = ((v55 + v53) << 8) + 0x100000;
  v62[4] = 0;
  v62[5] = v65 & 0xFFFF00;
  v62[6] = v64;
  v62[7] = (v55 + v53) << 24;
  *((_QWORD *)v62 + 4) = (((v56 + v54) << 16) + 0x10000000) & 0xFFFFFF00 | BYTE2(v65);
  v66 = v80;
  *v80 = 2130706432;
  v66[v79] = 2130706432;
  v66[2 * v79] = 2130706432;
  v66[3 * v79] = 2130706432;
  *v81 = vorr_s8(vand_s8(*v81, (int8x8_t)0xFFFF808080808080), (int8x8_t)0x414243424140);
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitFast2DControlStream(v23, v75, v61);
  v67 = (_DWORD **)MEMORY[0x24BE516B0];
  if ((*a10 & 2) != 0)
    *(_BYTE *)(v75 + 773) = 1;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endFast2DHardwareCommand(v23, v72, v75);
  if (**v67)
    IOGPUDeviceTraceEvent();
  return AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer((uint64_t)v103);
}

void sub_232C51668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitTextureToBufferWithTA(_QWORD *a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, char a9)
{
  _DWORD **v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t BlitProgramVariant;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  unint64_t v33;
  void *v34;
  int v35;
  uint64_t result;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int8x16_t v44;
  void *__p;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  uint64_t v50;
  uint64_t v51;

  v17 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v50 = 0;
  v51 = 0;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::startTAHardwareCommand();
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTAResources((uint64_t)a1, *a2, a4);
  v18 = *(_DWORD *)(a5 + 112);
  v19 = v18 * a7;
  v44.i32[2] = 15;
  v46 = 0;
  v47 = 0;
  __p = 0;
  v44.i64[0] = (uint64_t)off_2504005F8;
  v20 = *(_QWORD *)(a5 + 24) - 2;
  if (v20 >= 6)
    v21 = 0;
  else
    v21 = dword_232D76148[v20];
  v22 = (-256 * __clz(v19 - 1)) & 0x700;
  if (v19 >= 2)
    v23 = v22;
  else
    v23 = 0;
  v24 = ((3 * __clz(v18 - 1)) & 3) << 23;
  if (v18 >= 2)
    v25 = v24;
  else
    v25 = 0;
  LODWORD(v48) = ((*(_QWORD *)(a6 + 16) != 0) << 25) | (8 * (a9 & 0x1F)) | v21 | v25 | v23;
  BlitProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(*(_QWORD *)(a1[183] + 808), (uint64_t)&v44);
  v27 = *(_QWORD *)(*(_QWORD *)(a1[183] + 808) + 5488);
  v39 = *(_QWORD *)(a1[183] + 808);
  v40 = v27;
  LODWORD(v38) = 0;
  LOBYTE(v41) = 0;
  if (*(_DWORD *)(BlitProgramVariant + 3424))
  {
    LODWORD(v38) = *(_DWORD *)(BlitProgramVariant + 3424);
    LOBYTE(v41) = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v38, (_QWORD *)(v50 + 184), a1[187], (uint64_t)v49))
    {
      IOGPUResourceListAddResource();
    }
  }
  v44.i64[0] = (uint64_t)off_250400638;
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v28 = a8 / a7;
  v29 = *(void **)(*(_QWORD *)(a1[183] + 808) + 5488);
  v44.i64[1] = *(_QWORD *)(a1[183] + 808);
  __p = v29;
  v44.i32[0] = 0;
  LOBYTE(v46) = 0;
  if (*(_DWORD *)(BlitProgramVariant + 3424))
  {
    v44.i32[0] = *(_DWORD *)(BlitProgramVariant + 3424);
    LOBYTE(v46) = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v44, (_QWORD *)(v50 + 184), a1[187], (uint64_t)&v38))
    {
      IOGPUResourceListAddResource();
    }
  }
  v30 = *(unsigned int *)(a6 + 24);
  v44 = *(int8x16_t *)(a5 + 400);
  __p = *(void **)(a5 + 416);
  v31 = *(unsigned int *)(a5 + 144);
  v32.i64[0] = v31 << 57;
  v32.i64[1] = v31 & 0xFFFFFFFFFFFFFFEFLL | (16 * (*(_DWORD *)(a5 + 64) > 1u));
  v37 = vorrq_s8(vandq_s8(v44, (int8x16_t)xmmword_232D73430), v32);
  v44 = v37;
  v33 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a5, 0, 0, 0, 0)
      + *(_QWORD *)(a5 + 328) * v30;
  v44.i64[1] = v37.i64[1] & 0xFFFFFF800000001FLL | (32 * (v33 >> 6));
  if (v37.i64[1] < 0)
    __p = (void *)((unint64_t)__p & 0xF3FFFFFFFFFFFFFFLL | (((v33 >> 4) & 3) << 58));
  v34 = *(void **)(*(_QWORD *)(a1[183] + 808) + 6216);
  v47 = 0;
  v48 = 0;
  v46 = v34;
  v38 = 0;
  v39 = a3;
  v35 = *(_DWORD *)(a6 + 24);
  v41 = *(unsigned __int16 *)(a6 + 16) | (*(_DWORD *)(a6 + 20) << 16);
  v42 = v28;
  v43 = v35;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTACommonDrawState((uint64_t)a1);
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTADraw(a1, BlitProgramVariant, (uint64_t)&v44, (uint64_t)&v38, *(_DWORD *)a6, *(_DWORD *)(a6 + 4));
  result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endTAHardwareCommand((uint64_t)a1, v51, v50);
  if (**v17)
    return IOGPUDeviceTraceEvent();
  return result;
}

void sub_232C51A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::startTAHardwareCommand()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t result;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  char v43[24];
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[272];
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69[202];
  _QWORD v70[56];
  id v71[3];

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v71[1] = *(id *)MEMORY[0x24BDAC8D0];
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand(v0, 0);
  v6 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand((uint64_t)(v5 + 1), 2176);
  if (objc_msgSend((id)v5[1], "skipRender"))
  {
    v38 = v5[195] - v5[197];
    *(_DWORD *)(v38 + 12) = 1;
    if ((*(_BYTE *)(v38 + 8) & 4) != 0)
      **(_BYTE **)(v5[1] + 688) = 1;
  }
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)(v6 + 5) = 0x100000858;
  bzero(v6 + 8, 0x858uLL);
  *((_QWORD *)v6 + 4) = v5[11] + v5[9];
  v7 = v5[49];
  if (!v7)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v5 + 3, 10, 0))
      goto LABEL_33;
    v7 = v5[49];
  }
  v8 = v7 + 63;
  if (v7 + 63 > (unint64_t)v5[48])
  {
    v39 = AGX::DataBufferAllocator<34ul>::growNoInline(v5 + 3, 10, 0);
    v7 = v5[49];
    if (!v39)
      goto LABEL_5;
    v8 = v7 + 63;
    if (v7 + 63 > (unint64_t)v5[48])
      goto LABEL_33;
  }
  v5[50] = v8;
LABEL_5:
  v9 = (v7 + 31) & 0xFFFFFFFFFFFFFFE0;
  v10 = v9 + v5[51];
  v5[49] = v9 + 32;
  *((_QWORD *)v6 + 59) = v10;
  v6[120] = 4;
  v11 = v5[53];
  v12 = v11 + 19;
  if (v11 + 19 > (unint64_t)v5[52])
  {
    v40 = AGX::DataBufferAllocator<34ul>::growNoInline(v5 + 3, 11, 0);
    v11 = v5[53];
    if (!v40)
      goto LABEL_7;
    v12 = v11 + 19;
    if (v11 + 19 > (unint64_t)v5[52])
LABEL_33:
      abort();
  }
  v5[54] = v12;
LABEL_7:
  v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = v5[55];
  v5[53] = v13 | 4;
  LODWORD(v42) = 0;
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)v70, *(MTLPixelFormat *)(v5[183] + 808), 2, (AGX::G9::TextureFormatTable *)0xD, 0, 0, 2, 0, 0, 84148994, 0, 1u, 1u, 1u, 1, 0x100000001, 16, v42, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v70[37] = 0;
  v70[0] = off_250402690;
  v70[9] = v13 + v14;
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated((uint64_t)v70);
  v71[0] = 0;
  AGX::FramebufferDriverConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferDriverConfigGen2((uint64_t)v69, v71, (uint64_t)v70, v71, 0, 0, 0, 0, 1u);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferGen2((uint64_t)v48, (unint64_t *)v5[183], *(_QWORD *)(v5[1] + 688), v69, 1, 1, 1);
  AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeStoreActions((uint64_t)v48);
  AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::setupBlitCommand((_DWORD *)v5 + 416, (uint64_t)(v6 + 132), v5[188], v5 + 3, v48);
  v15 = *(_QWORD *)(*(_QWORD *)(v5[183] + 808) + 5496);
  v45 = *(_QWORD *)(v5[183] + 808);
  v46 = v15;
  v44 = 0;
  v47 = 0;
  if (*((_DWORD *)v5 + 424))
  {
    v44 = *((_DWORD *)v5 + 424);
    v47 = 1;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v44, (_QWORD *)v6 + 129, v5[187], (uint64_t)v43))
    {
      IOGPUResourceListAddResource();
    }
  }
  v6[322] = v56;
  v16 = v63;
  v17 = v64;
  v18 = v65;
  v19 = v66;
  *((_QWORD *)v6 + 97) = v62;
  *((_OWORD *)v6 + 50) = v16;
  *((_QWORD *)v6 + 106) = v17;
  *((_QWORD *)v6 + 111) = v18;
  *((_QWORD *)v6 + 116) = v19;
  *((_QWORD *)v6 + 195) = *((_QWORD *)&v16 + 1);
  *((_QWORD *)v6 + 196) = *((_QWORD *)v6 + 104);
  *((_QWORD *)v6 + 199) = *((_QWORD *)v6 + 102);
  *((_QWORD *)v6 + 197) = v18;
  *((_QWORD *)v6 + 198) = *((_QWORD *)v6 + 114);
  *((_QWORD *)v6 + 200) = *((_QWORD *)v6 + 112);
  v6[320] = v58;
  if (v67)
    v20 = 0;
  else
    v20 = v68 == 0;
  if (v20 && *(unsigned __int16 *)(*(_QWORD *)(v48[42] + 808) + 6686) > 0xAu)
    v22 = 256;
  else
    v22 = 768;
  v6[321] = v22 | v60;
  *((_BYTE *)v6 + 1302) = v59 != 0;
  v23 = *((_OWORD *)v6 + 42);
  *(_OWORD *)(v6 + 334) = *((_OWORD *)v6 + 41);
  *(_OWORD *)(v6 + 338) = v23;
  *(_OWORD *)(v6 + 342) = *((_OWORD *)v6 + 43);
  *(_QWORD *)&v24 = v50;
  v25 = v61;
  v26 = v57;
  *((_QWORD *)&v24 + 1) = v51;
  v27 = v52;
  v28 = v53;
  v29 = v54;
  v30 = v55;
  v6[442] = v49;
  *(_OWORD *)(v6 + 443) = v24;
  *(_OWORD *)(v6 + 447) = v27;
  *(_OWORD *)(v6 + 451) = v28;
  *(_OWORD *)(v6 + 455) = v29;
  *(_QWORD *)(v6 + 459) = v30;
  v6[461] = v25;
  *((_QWORD *)v6 + 231) = 0;
  v6[464] = v26;
  *(_QWORD *)(v6 + 465) = 0;
  *((_BYTE *)v6 + 1868) = 0;
  AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer((uint64_t)v48);
  *((_BYTE *)v6 + 1294) = 1;
  if (objc_msgSend((id)v5[1], "skipRender", *(double *)AGX::G9::ContextSwitcher::setupRenderCommand(v5[204], v5[205], (uint64_t)(v6 + 8), v5[188], v5 + 3).i64))
  {
    *((_BYTE *)v6 + 492) = 1;
    *((_BYTE *)v6 + 1294) = 1;
  }
  v31 = v5[29];
  v32 = v31 + 32;
  if (v31 + 32 > (unint64_t)v5[28])
  {
    v41 = AGX::DataBufferAllocator<34ul>::growNoInline(v5 + 3, 5, 0);
    v31 = v5[29];
    if (!v41)
      goto LABEL_21;
    v32 = v31 + 32;
    if (v31 + 32 > (unint64_t)v5[28])
      abort();
  }
  v5[30] = v32;
LABEL_21:
  v33 = *((_DWORD *)v5 + 62) + v31;
  v5[29] = v31 + 32;
  *(_DWORD *)(v31 + 16) = -754974720;
  v34.i32[0] = 34;
  v34.i32[1] = v33 & 0xFFFFFFF0;
  v5[209] = (uint64_t)vorr_s8(vand_s8((int8x8_t)v5[209], (int8x8_t)0xFFFFFF800), v34);
  v35 = v5[210];
  *((_QWORD *)v6 + 5) = *(_QWORD *)(v35 + 24);
  v36 = *(_DWORD *)(v35 + 16);
  do
  {
    result = IOGPUResourceListAddResource();
    v36 &= ~(1 << __clz(__rbit32(v36)));
  }
  while (v36);
  *v4 = v6;
  *v2 = v6 + 8;
  return result;
}

void sub_232C5201C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTAResources(uint64_t a1, void *a2, void **a3)
{
  void *v5;
  uint64_t result;

  if (a3)
  {
    v5 = *a3;
    if (*a3 != a2 && v5 != 0)
    {
      if (*(_QWORD *)(a1 + 1488))
        MTLResourceListAddResource();
      if (*(_BYTE *)(a1 + 1816))
      {
        IOGPUResourceListAddResource();
      }
      else
      {
        IOGPUResourceListAddResource();
        if ((objc_msgSend(v5, "resourceOptions") & 0x100) != 0)
          AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
      }
    }
  }
  if (*(_QWORD *)(a1 + 1488))
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  if (*(_QWORD *)(a1 + 1800))
    return AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
  result = objc_msgSend(a2, "resourceOptions");
  if ((result & 0x100) != 0)
    return AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource((_QWORD *)a1);
  return result;
}

double AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTACommonDrawState(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  _OWORD *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int v24;

  v2 = a1 + 24;
  v3 = *(unint64_t **)(a1 + 72);
  if ((unint64_t)(v3 + 6) > *(_QWORD *)(a1 + 64))
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 0, 0))
    {
      v23 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)(v23 + 48) > *(_QWORD *)(a1 + 64))
        goto LABEL_11;
      *(_QWORD *)(a1 + 80) = v23 + 48;
      *v3 = __ROR8__(*(_QWORD *)(a1 + 88) + v23, 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v3 + 6;
  }
  v4 = *(_OWORD **)(a1 + 1032);
  v5 = (char *)v4 + 124;
  if ((unint64_t)v4 + 124 > *(_QWORD *)(a1 + 1024))
  {
    v24 = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 30, 0);
    v4 = *(_OWORD **)(a1 + 1032);
    if (!v24)
      goto LABEL_5;
    v5 = (char *)v4 + 124;
    if ((unint64_t)v4 + 124 > *(_QWORD *)(a1 + 1024))
LABEL_11:
      abort();
  }
  *(_QWORD *)(a1 + 1040) = v5;
LABEL_5:
  v6 = (char *)v4 + *(_QWORD *)(a1 + 1048);
  v7 = *(_OWORD *)(a1 + 1664);
  *(_QWORD *)(a1 + 1032) = v4 + 1;
  *v4 = v7;
  v8 = __ROR8__(v6, 32);
  v9 = *(unint64_t **)(a1 + 72);
  *v9 = v8 & 0xFFFFFFFC000000FFLL | 0x400;
  *(_QWORD *)(a1 + 72) = v9 + 1;
  v10 = *(_QWORD *)(a1 + 1032);
  v11 = *(_QWORD *)(a1 + 1048) + v10;
  *(_QWORD *)(a1 + 1032) = v10 + 24;
  *(_OWORD *)v10 = xmmword_232D73460;
  v12 = __ROR8__(v11, 32);
  *(_QWORD *)(v10 + 16) = 1073745664;
  v13 = *(unint64_t **)(a1 + 72);
  *v13 = v12 & 0xFFFFFFFC000000FFLL | 0x600;
  *(_QWORD *)(a1 + 72) = v13 + 1;
  v14 = *(_QWORD *)(a1 + 1032);
  v15 = *(_QWORD *)(a1 + 1048) + v14;
  *(_QWORD *)(a1 + 1032) = v14 + 36;
  *(_QWORD *)v14 = 3072;
  *(_DWORD *)(v14 + 8) = 0;
  *(_OWORD *)(v14 + 12) = xmmword_232D73470;
  *(_QWORD *)(v14 + 28) = 0x3F80000000000000;
  v16 = __ROR8__(v15, 32);
  v17 = *(unint64_t **)(a1 + 72);
  *v17 = v16 & 0xFFFFFFFC000000FFLL | 0x900;
  *(_QWORD *)(a1 + 72) = v17 + 1;
  v18 = *(_QWORD *)(a1 + 1032);
  v19 = *(_QWORD *)(a1 + 1048) + v18;
  *(_QWORD *)(a1 + 1032) = v18 + 12;
  result = 5.01764402e-163;
  *(_QWORD *)v18 = 0x1E3CE50800210000;
  *(_DWORD *)(v18 + 8) = 1184;
  v21 = __ROR8__(v19, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  v22 = *(unint64_t **)(a1 + 72);
  *v22 = v21;
  *(_QWORD *)(a1 + 72) = v22 + 1;
  return result;
}

double AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTADraw(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unsigned int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  _DWORD *v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  double result;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v69;
  char *v70;

  v10 = *(_DWORD *)(a2 + 2208);
  do
  {
    v10 &= ~(1 << __clz(__rbit32(v10)));
    IOGPUResourceListAddResource();
  }
  while (v10);
  v66 = a1 + 3;
  v11 = (unint64_t *)a1[9];
  if ((unint64_t)(v11 + 9) > a1[8])
  {
    v51 = AGX::DataBufferAllocator<34ul>::growNoInline(v66, 0, 0);
    v12 = (unint64_t *)a1[9];
    if (v51)
    {
      if ((unint64_t)(v12 + 9) > a1[8])
        goto LABEL_31;
      a1[10] = v12 + 9;
      *v11 = __ROR8__((char *)v12 + a1[11], 32) & 0xFFFFFFFC7FFFFFFFLL | 0x80000000;
      v12 = (unint64_t *)a1[9];
    }
  }
  else
  {
    a1[10] = v11 + 9;
    v12 = v11;
  }
  *(_OWORD *)v12 = *(_OWORD *)(a2 + 3392);
  a1[9] = v12 + 2;
  v12[2] = *(_QWORD *)(a2 + 3432);
  a1[9] = v12 + 3;
  v13 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
  v15 = *(_DWORD *)(a2 + 1392);
  v16 = *(_DWORD *)(a2 + 1396);
  v17 = *(_DWORD *)(a2 + 1400);
  v18 = *(_DWORD *)(a2 + 1404);
  v19 = *(_DWORD *)(a2 + 2816);
  v20 = *(_DWORD *)(a2 + 2820);
  v21 = *(_DWORD *)(a2 + 2824);
  v22 = *(_DWORD *)(a2 + 2828);
  v23 = (2 * v13) & 0x7FFFFFFF8;
  v24 = v14 & 0x3FFFFFFFCLL;
  v25 = (v14 & 0x3FFFFFFFCLL) + v23 + 7;
  v26 = a1[21] + v25;
  if (v26 <= a1[20])
  {
LABEL_6:
    a1[22] = v26;
    goto LABEL_7;
  }
  v64 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48);
  v65 = v14 & 0x3FFFFFFFCLL;
  v62 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
  v63 = (2 * v13) & 0x7FFFFFFF8;
  v60 = *(_DWORD *)(a2 + 1396);
  v61 = *(_DWORD *)(a2 + 1392);
  v59 = *(_DWORD *)(a2 + 2816);
  v52 = AGX::DataBufferAllocator<34ul>::growNoInline(v66, 3, 0);
  v19 = v59;
  v16 = v60;
  v15 = v61;
  v14 = v62;
  v23 = v63;
  v13 = v64;
  v24 = v65;
  if (v52)
  {
    v26 = a1[21] + v25;
    if (v26 > a1[20])
      goto LABEL_31;
    goto LABEL_6;
  }
LABEL_7:
  v27 = v16 + v15 + v17 + v18 + v19 + v20 + v21 + v22;
  v28 = (8 * v27) | 7;
  v29 = a1[29] + v28;
  if (v29 > a1[28])
  {
    v53 = v24;
    v54 = v13;
    v55 = v23;
    v56 = v14;
    v57 = AGX::DataBufferAllocator<34ul>::growNoInline(v66, 5, 0);
    v14 = v56;
    v23 = v55;
    v13 = v54;
    v24 = v53;
    if (!v57)
      goto LABEL_9;
    v29 = a1[29] + v28;
    if (v29 > a1[28])
      goto LABEL_31;
  }
  a1[30] = v29;
LABEL_9:
  v30 = v13 >> 2;
  v31 = v14 >> 2;
  if ((v13 >> 2))
  {
    v32 = (_QWORD *)((a1[21] + 7) & 0xFFFFFFFFFFFFFFF8);
    v33 = (char *)v32 + a1[23];
    a1[21] = (char *)v32 + v23;
    *(_QWORD *)(a3 + 32) = v33;
    v34 = *(unsigned int **)(a2 + 48);
    do
    {
      v35 = *v34++;
      *v32++ = *(_QWORD *)(a3 + 8 * v35);
      LODWORD(v30) = v30 - 1;
    }
    while ((_DWORD)v30);
  }
  if ((_DWORD)v31)
  {
    v36 = (_DWORD *)((a1[21] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (char *)v36 + a1[23];
    a1[21] = (char *)v36 + v24;
    *(_QWORD *)(a3 + 40) = v37;
    v38 = *(unsigned int **)(a2 + 72);
    do
    {
      v39 = *v38++;
      *v36++ = *(_DWORD *)(a4 + 4 * v39);
      LODWORD(v31) = v31 - 1;
    }
    while ((_DWORD)v31);
  }
  if (v27)
  {
    v40 = (char *)((a1[29] + 7) & 0xFFFFFFFFFFFFFFF8);
    v41 = &v40[a1[31]];
    v69 = v40;
    v70 = v41;
    a1[29] = &v40[8 * v27];
    LODWORD(v40) = *(_DWORD *)(a2 + 3416);
    v42 = a1[9];
    *(_QWORD *)v42 = (((_QWORD)v41 << 32) + 0xF00000000) & 0xFFFFFFF000000000 | *(_QWORD *)(a2 + 3408) & 0xFFFFFFFFFLL;
    *(_DWORD *)(v42 + 8) = (_DWORD)v40;
    a1[9] = v42 + 12;
    agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v69, &v70, a3, (_DWORD *)(a2 + 1392), 0, 0);
    v43 = (uint64_t *)a1[9];
    *v43 = *(_DWORD *)(a2 + 3392) & 0xE23FFFFF | ((_QWORD)v70 << 32) | 0x8000000;
    a1[9] = v43 + 1;
    agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v69, &v70, a3, (_DWORD *)(a2 + 2816), 0, 0);
  }
  v44 = (_QWORD *)a1[129];
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) > a1[128])
  {
    v58 = AGX::DataBufferAllocator<34ul>::growNoInline(v66, 30, 0);
    v44 = (_QWORD *)a1[129];
    if (!v58)
      goto LABEL_19;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) > a1[128])
LABEL_31:
      abort();
  }
  a1[130] = v45;
LABEL_19:
  LODWORD(v46) = 0x20000;
  HIDWORD(v46) = *(_DWORD *)(a2 + 3428) & 0xFF0400FF;
  v47 = (char *)v44 + a1[131];
  a1[129] = v44 + 1;
  *v44 = v46;
  v48 = __ROR8__(v47, 32);
  v49 = a1[9];
  *(_QWORD *)v49 = v48 & 0xFFFFFFFC000000FFLL | 0x200;
  *(_DWORD *)(v49 + 8) = 1849950208;
  *(_DWORD *)(v49 + 12) = a5;
  *(_DWORD *)(v49 + 16) = a6 - 1;
  *(_QWORD *)&result = 0x20000000000;
  *(_QWORD *)(v49 + 20) = 0x20000000000;
  a1[9] = v49 + 28;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endTAHardwareCommand(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;

  v4 = result;
  v5 = *(_QWORD *)(result + 1032);
  v6 = *(_QWORD *)(result + 1048) + v5;
  *(_QWORD *)(result + 1032) = v5 + 12;
  v7 = *(_QWORD *)(result + 1712);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(result + 1720);
  *(_QWORD *)v5 = v7;
  v8 = *(unint64_t **)(result + 72);
  *(_QWORD *)(result + 72) = v8 + 1;
  *v8 = __ROR8__(v6, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  v9 = *(_DWORD **)(result + 72);
  *(_QWORD *)(result + 72) = v9 + 1;
  *v9 = *(_DWORD *)(result + 1724);
  *(_BYTE *)(a3 + 471) = 0;
  if (!*(_QWORD *)(*(_QWORD *)(result + 1504) + 520))
  {
    v10 = *(_QWORD *)(result + 1560) - *(_QWORD *)(result + 1576);
    *(_DWORD *)(v10 + 12) = 1;
    if ((*(_BYTE *)(v10 + 8) & 4) != 0)
      **(_BYTE **)(*(_QWORD *)(result + 8) + 688) = 1;
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    *(_BYTE *)(a3 + 1628) = *(_BYTE *)(result + 1520);
    *(_DWORD *)(a3 + 1624) = *(_DWORD *)(result + 1516);
    *(_QWORD *)(a3 + 1632) = *(_QWORD *)(result + 1524);
    if (*(_QWORD *)(result + 1800))
    {
      if (*(_QWORD *)(result + 1488))
        MTLResourceListAddResource();
      IOGPUResourceListAddResource();
      result = *(_QWORD *)(v4 + 1800);
      v11 = (_DWORD *)(v4 + 1808);
      if (result)
      {
        v12 = *(_DWORD *)(v4 + 1812);
        v13 = *(_DWORD *)(v4 + 1808);
        if ((v13 & v12) != 0xFFFFFFFF)
        {
          result = objc_msgSend((id)result, "resourceID");
          *(_DWORD *)(a3 + 476) = result;
          *(_DWORD *)(a3 + 480) = v13;
          *(_DWORD *)(a3 + 484) = v12;
LABEL_13:
          *v11 = -1;
          *(_DWORD *)(a3 + 1288) = -1;
          *(_QWORD *)(a3 + 1280) = -1;
          *(_QWORD *)(a3 + 1648) = 0;
          return result;
        }
      }
    }
    else
    {
      v11 = (_DWORD *)(result + 1808);
    }
    *(_DWORD *)(a3 + 484) = -1;
    *(_QWORD *)(a3 + 476) = -1;
    goto LABEL_13;
  }
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)15,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::BlitVertexProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x47;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)16,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::BlitComputeProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *begin;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = (char *)v10 - (char *)value;
  v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFCFLL)
  {
    begin = &value[v18 + 12];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v20 = &value[v18];
  *v20 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x42;
  v21 = *(_OWORD *)&this[1].__end_cap_.__value_;
  v22 = *(_OWORD *)&this[2].__end_;
  *(_QWORD *)(v20 + 9) = this[3].__begin_;
  *(_OWORD *)(v20 + 5) = v22;
  *(_OWORD *)(v20 + 1) = v21;
  v23 = this->__end_cap_.__value_;
  v24 = (char *)this[1].__begin_ - (char *)v23;
  v25 = v24 >> 2;
  if ((unint64_t)v24 > 0xFFFFFFFFFFFFFFF7)
  {
    v26 = &v23[v25 + 2];
    this[1].__begin_ = v26;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    v23 = this->__end_cap_.__value_;
    v26 = this[1].__begin_;
  }
  v27 = &v23[v25];
  *v27 = (((_DWORD)v26 - (_DWORD)v23) >> 2 << 8) | 0x48;
  v27[1] = this[3].__end_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitBuffer(uint64_t *a1, void **a2, uint64_t a3, void **a4, char *a5, unint64_t a6, unsigned __int8 *a7, unint64_t a8, unint64_t *a9, _QWORD *a10)
{
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  int v38;
  uint64_t BlitProgramVariant;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  unint64_t v52;
  char *v53;
  _DWORD **v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  size_t v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unsigned __int8 *__pattern4;
  void **v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  _BYTE v72[24];
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand(a1, 0);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v67 = a2;
  v68 = a5;
  __pattern4 = a7;
  if (!a4 || !*a4)
  {
    v18 = 1;
    v19 = 4;
    v22 = 16;
    v23 = 1;
    goto LABEL_12;
  }
  v18 = 1;
  v19 = 4;
  if ((_DWORD)a3 == (_DWORD)a5)
  {
    v23 = 0;
    v22 = 16;
LABEL_12:
    v24 = 1;
LABEL_13:
    v25 = 1;
    goto LABEL_14;
  }
  v20 = __clz(__rbit32(a3 - (_DWORD)a5));
  if (v20 >= 4)
    v21 = 4;
  else
    v21 = v20;
  v22 = 1 << v21;
  if (v21 > 3)
  {
LABEL_10:
    v23 = 0;
    goto LABEL_12;
  }
  v19 = v21;
  v18 = 0;
  v23 = 0;
  v25 = 2;
  v24 = 64;
  switch(v21)
  {
    case 0u:
    case 1u:
      break;
    case 2u:
      v18 = 0;
      v23 = 0;
      goto LABEL_13;
    case 3u:
      v18 = 0;
      v23 = 0;
      v24 = 32;
      break;
    case 4u:
      v18 = 0;
      v23 = 0;
      v24 = 16;
      break;
    default:
      v18 = 0;
      goto LABEL_10;
  }
LABEL_14:
  v26 = (v25 * v24);
  v27 = v22;
  v71 = a3;
  v28 = ((a3 + v22 - 1) & -(uint64_t)v22) - a3;
  if (v28 >= a6)
    v29 = a6;
  else
    v29 = v28;
  v30 = a6 - v29;
  v31 = ((_DWORD)v26 << v19);
  v32 = ((v30 / v31) << v19) * v26;
  v33 = a8 - 1;
  if (a8 > 1)
    v34 = v23;
  else
    v34 = 0;
  if (a9)
    *a9 = v29;
  if (a10)
    *a10 = v30 - v32;
  if (v29)
    v35 = 0;
  else
    v35 = v30 == v32;
  v36 = v35;
  if (v30 < v31)
    v37 = 1;
  else
    v37 = v18;
  if (v36 != 1 || (v37 & 1) == 0)
  {
    v64 = v34;
    v38 = v24;
    v62 = v33;
    v65 = v32;
    v63 = v30 - v32;
    v69 = v18;
    v70 = v23;
    v73 = 0;
    v74 = 0;
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::startTAHardwareCommand();
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTAResources((uint64_t)a1, *v67, a4);
    BlitProgramVariant = 0;
    if ((v36 & 1) == 0)
    {
      DWORD2(v80) = 15;
      *(_QWORD *)&v82 = 0;
      v81 = 0uLL;
      *(_QWORD *)&v80 = off_2504005F8;
      if (v64)
        v40 = 0x4000000;
      else
        v40 = 0;
      DWORD2(v82) = v40 | v70 | 0x80800;
      BlitProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(*(_QWORD *)(a1[183] + 808), (uint64_t)&v80);
      v41 = *(_QWORD *)(*(_QWORD *)(a1[183] + 808) + 5488);
      v76 = *(_QWORD *)(a1[183] + 808);
      v77 = v41;
      LODWORD(v75) = 0;
      LOBYTE(v78) = 0;
      if (*(_DWORD *)(BlitProgramVariant + 3424))
      {
        LODWORD(v75) = *(_DWORD *)(BlitProgramVariant + 3424);
        LOBYTE(v78) = 1;
        if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v75, (_QWORD *)(v73 + 184), a1[187], (uint64_t)v72))
        {
          IOGPUResourceListAddResource();
        }
      }
      *(_QWORD *)&v80 = off_250400638;
      if ((_QWORD)v81)
      {
        *((_QWORD *)&v81 + 1) = v81;
        operator delete((void *)v81);
      }
    }
    v42 = v69;
    if (v30 < v31)
      v42 = 1;
    if ((v42 & 1) != 0)
    {
      v43 = 0;
    }
    else
    {
      DWORD2(v80) = 15;
      *(_QWORD *)&v82 = 0;
      v81 = 0uLL;
      *(_QWORD *)&v80 = off_2504005F8;
      DWORD2(v82) = v70 | (v19 << 8) | (v38 << 11) | (v25 << 19);
      v43 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(*(_QWORD *)(a1[183] + 808), (uint64_t)&v80);
      v44 = *(_QWORD *)(*(_QWORD *)(a1[183] + 808) + 5488);
      v76 = *(_QWORD *)(a1[183] + 808);
      v77 = v44;
      LODWORD(v75) = 0;
      LOBYTE(v78) = 0;
      if (*(_DWORD *)(v43 + 3424))
      {
        LODWORD(v75) = *(_DWORD *)(v43 + 3424);
        LOBYTE(v78) = 1;
        if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v75, (_QWORD *)(v73 + 184), a1[187], (uint64_t)v72))
        {
          IOGPUResourceListAddResource();
        }
      }
      *(_QWORD *)&v80 = off_250400638;
      if ((_QWORD)v81)
      {
        *((_QWORD *)&v81 + 1) = v81;
        operator delete((void *)v81);
      }
    }
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTACommonDrawState((uint64_t)a1);
    if (v70)
    {
      v45 = 3;
      if (v64)
        v45 = 15;
      v46 = (v45 + v27) & ~v45;
      v47 = 2 * v46 - 1;
      v48 = a1[21];
      v49 = v48 + v47;
      if (v48 + v47 > (unint64_t)a1[20])
      {
        v60 = v46;
        v61 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 3, 0);
        v48 = a1[21];
        if (!v61)
        {
          v46 = v60;
          goto LABEL_54;
        }
        v49 = v48 + v47;
        v46 = v60;
        if (v48 + v47 > (unint64_t)a1[20])
          abort();
      }
      a1[22] = v49;
LABEL_54:
      v50 = (char *)((v46 + v48 - 1) & -(uint64_t)v46);
      v68 = &v50[a1[23]];
      a1[21] = (uint64_t)&v50[v46];
      switch(v62)
      {
        case 0uLL:
          memset(v50, *__pattern4, v46);
          if (!v29)
            goto LABEL_70;
          goto LABEL_65;
        case 1uLL:
          LODWORD(v80) = *(unsigned __int16 *)__pattern4 | (*(unsigned __int16 *)__pattern4 << 16);
          memset_pattern4(v50, &v80, v46);
          if (!v29)
            goto LABEL_70;
          goto LABEL_65;
        case 3uLL:
          memset_pattern4(v50, __pattern4, v46);
          if (!v29)
            goto LABEL_70;
          goto LABEL_65;
        case 7uLL:
          memset_pattern8(v50, __pattern4, v46);
          break;
        case 0xFuLL:
          memset_pattern16(v50, __pattern4, v46);
          if (!v29)
            goto LABEL_70;
          goto LABEL_65;
        default:
          break;
      }
    }
    if (v29)
    {
LABEL_65:
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      v78 = 0;
      v79 = 0;
      v75 = v68;
      v76 = v71;
      AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTADraw(a1, BlitProgramVariant, (uint64_t)&v80, (uint64_t)&v75, v29, 1);
      v71 += v29;
      v51 = v70;
      if (v70)
        v52 = 0;
      else
        v52 = v29;
      v53 = &v68[v52];
      v54 = (_DWORD **)MEMORY[0x24BE516B0];
      v55 = v69;
    }
    else
    {
LABEL_70:
      v54 = (_DWORD **)MEMORY[0x24BE516B0];
      v55 = v69;
      v51 = v70;
      v53 = v68;
    }
    v56 = v65;
    if (v30 >= v31)
    {
      if ((v55 & 1) == 0)
      {
        v81 = 0u;
        v82 = 0u;
        v80 = 0u;
        v78 = 0;
        v79 = 0;
        v75 = v53;
        v76 = v71;
        AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTADraw(a1, v43, (uint64_t)&v80, (uint64_t)&v75, v30 / v31, 1);
        v56 = v65;
        v51 = v70;
      }
      v57 = v71 + v56;
      if (v51)
        v58 = 0;
      else
        v58 = v56;
      v53 += v58;
      if (v30 == v56)
        goto LABEL_81;
    }
    else
    {
      v57 = v71;
      if (v30 == v65)
        goto LABEL_81;
    }
    v81 = 0u;
    v82 = 0u;
    v80 = 0u;
    v78 = 0;
    v79 = 0;
    v75 = v53;
    v76 = v57;
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTADraw(a1, BlitProgramVariant, (uint64_t)&v80, (uint64_t)&v75, v63, 1);
LABEL_81:
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endTAHardwareCommand((uint64_t)a1, v74, v73);
    if (**v54)
      IOGPUDeviceTraceEvent();
    v18 = v69;
  }
  return v18 ^ 1u;
}

void sub_232C533D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  *(_QWORD *)(v1 - 160) = off_250400638;
  v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(_QWORD *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::blitProcessICBWithTA(_QWORD *a1, char *a2, char a3, int a4, int a5, int a6)
{
  uint64_t v12;
  _DWORD **v13;
  int v14;
  uint64_t BlitProgramVariant;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE v21[24];
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[4];
  int v27;
  int v28;
  __int128 v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v12 = *(_QWORD *)&a2[*MEMORY[0x24BE51650] + 8];
  v13 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v32 = 0;
  v33 = 0;
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::startTAHardwareCommand();
  if (a1[186])
    MTLResourceListAddResource();
  IOGPUResourceListAddResource();
  if (a1[225] || (objc_msgSend(a2, "resourceOptions") & 0x100) != 0)
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::bindTrackedProxyResource(a1);
  DWORD2(v29) = 15;
  __p[1] = 0;
  *(_QWORD *)&v31 = 0;
  __p[0] = 0;
  *(_QWORD *)&v29 = off_2504005F8;
  if (a6)
    v14 = 0x8000000;
  else
    v14 = 0;
  DWORD2(v31) = v14 & 0xFFFFFFF8 | a3 & 7;
  BlitProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(*(_QWORD *)(a1[183] + 808), (uint64_t)&v29);
  *(_QWORD *)&v29 = off_250400638;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v16 = *(_QWORD *)(a1[183] + 808);
  v17 = *(_QWORD **)(v16 + 5016);
  if (v17)
  {
    do
    {
      IOGPUResourceListAddResource();
      v17 = (_QWORD *)*v17;
    }
    while (v17);
    v16 = *(_QWORD *)(a1[183] + 808);
  }
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  v29 = 0u;
  v26[3] = 0;
  v26[0] = 0;
  v26[1] = v12;
  v27 = 0;
  v28 = a4;
  v18 = *(_QWORD *)(v16 + 5488);
  v23 = v16;
  v24 = v18;
  v22 = 0;
  v25 = 0;
  if (*(_DWORD *)(BlitProgramVariant + 3424))
  {
    v22 = *(_DWORD *)(BlitProgramVariant + 3424);
    v25 = 1;
    v19 = v32;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)&v22, (_QWORD *)(v32 + 184), a1[187], (uint64_t)v21))
    {
      IOGPUResourceListAddResource();
    }
  }
  else
  {
    v19 = v32;
  }
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTACommonDrawState((uint64_t)a1);
  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::encodeTADraw(a1, BlitProgramVariant, (uint64_t)&v29, (uint64_t)v26, a5, 1);
  result = AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endTAHardwareCommand((uint64_t)a1, v33, v19);
  if (**v13)
    return IOGPUDeviceTraceEvent();
  return result;
}

void sub_232C5368C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~ContextCommon(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 1416);
  v3 = *(void ***)(a1 + 1424);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      free(v4);
    }
    while (v2 != v3);
    v2 = *(void ***)(a1 + 1416);
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 1424) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::BlitDispatchContext(uint64_t a1, uint64_t *a2, MTLBlitPassDescriptor *a3, MTLResourceStatePassDescriptor *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v11 = a2[4];
  v10 = a2[5];
  if (AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::dataBufferConfigs(AGXGPUCoreConfig const&)::once != -1)
    dispatch_once(&AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::dataBufferConfigs(AGXGPUCoreConfig const&)::once, &__block_literal_global);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = &AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::databuffer_configs;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v9;
  v12 = *(_QWORD *)(v9 + 768);
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v9 + 144;
  *(_QWORD *)(a1 + 1456) = *(_QWORD *)(v9 + 784);
  *(_QWORD *)(a1 + 1472) = v9;
  *(_QWORD *)(a1 + 1480) = v9 + 64;
  *(_BYTE *)(a1 + 1512) = 0;
  *(_BYTE *)(a1 + 1553) = 0;
  *(_QWORD *)(a1 + 1584) = v11;
  *(_QWORD *)(a1 + 1592) = v10;
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(v8 + 688) + 21;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_QWORD *)(a1 + 1464) = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 1488) = *(_OWORD *)(v9 + 728);
  *(_QWORD *)(a1 + 1504) = v9 + 144;
  *(_QWORD *)(a1 + 1560) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(a1 + 1568) = *(_QWORD *)(v9 + 56);
  *(_DWORD *)(a1 + 1516) = v10;
  *(_QWORD *)(a1 + 1524) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 1548) = 0;
  *(_BYTE *)(a1 + 1552) = 0;
  v13 = *(_OWORD **)(v7 + 808);
  *(_QWORD *)a1 = &off_250400168;
  v13 = (_OWORD *)((char *)v13 + 5336);
  *(_OWORD *)(a1 + 1632) = *v13;
  *(_OWORD *)(a1 + 1648) = v13[1];
  v14 = *(_QWORD *)(v7 + 808);
  *(_OWORD *)(a1 + 1664) = xmmword_232D73480;
  *(_QWORD *)(a1 + 1680) = *(_QWORD *)(v14 + 5328);
  *(_QWORD *)(a1 + 1688) = v14 + 5328;
  *(_OWORD *)(a1 + 1712) = xmmword_232D73490;
  v15 = *(_QWORD *)(v7 + 808);
  v16 = *(_QWORD *)(v15 + 5504);
  *(_QWORD *)(a1 + 1744) = v15;
  *(_QWORD *)(a1 + 1752) = v16;
  *(_DWORD *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  AGX::BlitCounterSamplingContextGen1::BlitCounterSamplingContextGen1((AGX::BlitCounterSamplingContextGen1 *)(a1 + 1800), a3, a4);
  *(_BYTE *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1824) = xmmword_232D734A0;
  *(_WORD *)(a1 + 4144) = 0;
  *(_WORD *)(a1 + 6456) = 0;
  return a1;
}

void sub_232C538E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~ContextCommon(v1);
  _Unwind_Resume(a1);
}

double AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::commit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  double result;
  int v18;

  AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand((uint64_t *)a1, 1);
  v2 = *(_QWORD *)(a1 + 1792);
  if (v2)
    LODWORD(v2) = *(_DWORD *)(v2 + 528);
  v3 = *(_QWORD *)(a1 + 1784);
  if (v3)
    LODWORD(v3) = *(_DWORD *)(v3 + 528);
  if ((_DWORD)v2 + (_DWORD)v3)
  {
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::beginComputePass(a1, 0);
    v4 = *(unint64_t **)(a1 + 776);
    if ((unint64_t)(v4 + 20) > *(_QWORD *)(a1 + 768))
    {
      v18 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 24, 22, 0);
      v5 = *(unint64_t **)(a1 + 776);
      if (v18)
      {
        if ((unint64_t)(v5 + 20) > *(_QWORD *)(a1 + 768))
          abort();
        *(_QWORD *)(a1 + 784) = v5 + 20;
        *v4 = __ROR8__((char *)v5 + *(_QWORD *)(a1 + 792), 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
        v5 = *(unint64_t **)(a1 + 776);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 784) = v4 + 20;
      v5 = v4;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 1688) + 56);
    v7 = *(_OWORD *)(v6 + 52);
    *(_OWORD *)v5 = *(_OWORD *)(v6 + 36);
    *((_OWORD *)v5 + 1) = v7;
    *(_QWORD *)(a1 + 776) = v5 + 4;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1688) + 48);
    v9 = *(_OWORD *)(v8 + 44);
    *((_OWORD *)v5 + 2) = *(_OWORD *)(v8 + 28);
    *((_OWORD *)v5 + 3) = v9;
    *(_QWORD *)(a1 + 776) = v5 + 8;
    v10 = *(_QWORD *)(a1 + 1688);
    v11 = *(_QWORD *)(v10 + 40);
    v12 = *(_OWORD *)(v11 + 24);
    *((_OWORD *)v5 + 4) = *(_OWORD *)(v11 + 8);
    *((_OWORD *)v5 + 5) = v12;
    *(_QWORD *)(a1 + 776) = v5 + 12;
    v13 = *(_QWORD *)(v10 + 72);
    v14 = *(_OWORD *)(v13 + 24);
    *((_OWORD *)v5 + 6) = *(_OWORD *)(v13 + 8);
    *((_OWORD *)v5 + 7) = v14;
    *(_QWORD *)(a1 + 776) = v5 + 16;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 1688) + 40);
    v16 = *(_OWORD *)(v15 + 24);
    *((_OWORD *)v5 + 8) = *(_OWORD *)(v15 + 8);
    *((_OWORD *)v5 + 9) = v16;
    *(_QWORD *)(a1 + 776) = v5 + 20;
    AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::endPreviousBlitCommand((uint64_t *)a1, 1);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 1488) = 0u;
  return result;
}

uint64_t AGX::BlitDispatchContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBlitBounceBuffer(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v2 = a1 + 3;
  v3 = a1[81];
  if (!v3)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 3, 18, 0))
      goto LABEL_9;
    v3 = a1[81];
  }
  v4 = v3 + 0x8000;
  if ((unint64_t)(v3 + 0x8000) > a1[80])
  {
    v6 = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 18, 0);
    v3 = a1[81];
    if (!v6)
      goto LABEL_4;
    v4 = v3 + 0x8000;
    if ((unint64_t)(v3 + 0x8000) > a1[80])
LABEL_9:
      abort();
  }
  a1[82] = v4;
LABEL_4:
  a1[81] = v3 + 0x8000;
  return *(_QWORD *)(a1[6] + 1184);
}

char **agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(char **result, _QWORD *a2, uint64_t a3, _DWORD *a4, char a5, _QWORD *a6)
{
  unsigned int *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;

  v6 = a4 + 4;
  v8 = *a4;
  v7 = a4[1];
  v10 = a4[2];
  v9 = a4[3];
  v11 = *result;
  v12 = *result;
  if (*a4)
  {
    do
    {
      v13 = v6 + 2;
      *v12++ = *(_QWORD *)(a3 + 8 * *v6) + v6[1];
      v6 += 2;
      --v8;
    }
    while (v8);
    v6 = v13;
  }
  if (v7)
  {
    do
    {
      v14 = v6 + 2;
      *v12++ = *(_QWORD *)(a3 + 8 * *v6) + v6[1];
      v6 += 2;
      --v7;
    }
    while (v7);
    v6 = v14;
  }
  if ((a5 & 1) != 0)
  {
    *a6 = (char *)v12 - v11 + *a2 + 0x300000000;
    v15 = 8 * v10;
    v6 = (unsigned int *)((char *)v6 + v15);
    v12 = (_QWORD *)((char *)v12 + v15);
  }
  else if ((_DWORD)v10)
  {
    do
    {
      v16 = v6 + 2;
      *v12++ = *(_QWORD *)(*(_QWORD *)(a3 + 8 * *(unsigned __int16 *)v6) + 8 * *((unsigned __int16 *)v6 + 1))
             + v6[1];
      v6 += 2;
      LODWORD(v10) = v10 - 1;
    }
    while ((_DWORD)v10);
    v6 = v16;
  }
  if ((v9 & 1) != 0)
  {
    v17 = *(_QWORD *)v6;
    v6 += 2;
    *v12++ = v17;
  }
  if (v9 >= 2)
  {
    v18 = v9 >> 1;
    v19 = v18 - 1;
    if (v19 <= 4
      || ((v20 = 16 * v19 + 16, v12 < (_QWORD *)((char *)v6 + v20))
        ? (v21 = v6 >= (unsigned int *)((char *)v12 + v20))
        : (v21 = 1),
          !v21))
    {
      LODWORD(v23) = 0;
LABEL_26:
      v32 = v18 - v23;
      do
      {
        v33 = *(_OWORD *)v6;
        v6 += 4;
        *(_OWORD *)v12 = v33;
        v12 += 2;
        --v32;
      }
      while (v32);
      goto LABEL_28;
    }
    v22 = v19 + 1;
    v23 = (v19 + 1) & 0x1FFFFFFFCLL;
    v24 = 16 * v23;
    v25 = v12 + 4;
    v26 = (__int128 *)(v6 + 8);
    v27 = v23;
    do
    {
      v29 = *(v26 - 2);
      v28 = *(v26 - 1);
      v31 = *v26;
      v30 = v26[1];
      v26 += 4;
      *(v25 - 2) = v29;
      *(v25 - 1) = v28;
      *v25 = v31;
      v25[1] = v30;
      v25 += 4;
      v27 -= 4;
    }
    while (v27);
    v12 = (_QWORD *)((char *)v12 + v24);
    if (v22 != v23)
    {
      v6 = (unsigned int *)((char *)v6 + v24);
      goto LABEL_26;
    }
  }
LABEL_28:
  *result = (char *)v12;
  *a2 += (char *)v12 - v11;
  return result;
}

double ___ZN3AGX18BlitPDSStateLoaderINS_2G98EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke()
{
  double result;

  AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::databuffer_configs = xmmword_232D734B0;
  qword_2542346C0 = 12;
  dword_2542346C8 = 1;
  xmmword_254234970 = xmmword_232D734B0;
  qword_254234980 = 12;
  dword_254234988 = 1;
  *(_QWORD *)&result = 0x2000;
  xmmword_254234710 = xmmword_232D734C0;
  qword_254234720 = 12;
  dword_254234728 = 1;
  xmmword_254234A70 = xmmword_232D734C0;
  qword_254234A80 = 12;
  dword_254234A88 = 1;
  qword_254234758 = 0;
  unk_254234760 = 0;
  qword_254234750 = 0x2000;
  dword_254234768 = 1;
  qword_2542347F8 = 0;
  unk_254234800 = 0;
  qword_2542347F0 = 0x2000;
  dword_254234808 = 1;
  qword_254234738 = 0;
  unk_254234740 = 0;
  qword_254234730 = 0x2000;
  dword_254234748 = 4;
  qword_254234770 = 0x2000;
  unk_254234778 = 0;
  qword_254234780 = 0;
  dword_254234788 = 4;
  qword_254234810 = 0x2000;
  unk_254234818 = 0;
  qword_254234820 = 0;
  dword_254234828 = 4;
  xmmword_254234850 = xmmword_232D734C0;
  qword_254234860 = 12;
  dword_254234868 = 1;
  qword_254234870 = 0x2000;
  unk_254234878 = 0;
  qword_254234880 = 0;
  dword_254234888 = 4;
  qword_2542348F0 = 0x2000;
  qword_254234900 = 0;
  qword_2542348F8 = 0;
  dword_254234908 = 1;
  qword_254234910 = 0x2000;
  qword_254234920 = 0;
  qword_254234918 = 0;
  dword_254234928 = 1;
  return result;
}

char **AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::setupBlitCommand(_DWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  _DWORD *v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int32x4_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  char *v48;
  unsigned int *v49;
  unsigned int v50;
  char *v51;
  char *v52;
  char **result;
  unsigned __int32 v54;
  unsigned __int32 v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v67;
  char *v68;
  _QWORD v69[2];

  v69[1] = *MEMORY[0x24BDAC8D0];
  v6 = a5[390];
  v7 = (uint64_t)(a5 + 282);
  v8 = *(_DWORD *)(v6 + 2200);
  do
  {
    v8 &= ~(1 << __clz(__rbit32(v8)));
    IOGPUResourceListAddResource();
  }
  while (v8);
  v9 = *(_DWORD *)(v6 + 1392);
  v10 = *(_DWORD *)(v6 + 1396);
  v11 = *(_DWORD *)(v6 + 1400);
  v12 = *(_DWORD *)(v6 + 1404);
  v13 = *(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48);
  v14 = *(_QWORD *)(v6 + 80) - *(_QWORD *)(v6 + 72);
  v15 = (2 * v13) & 0x7FFFFFFF8;
  v16 = v14 & 0x3FFFFFFFCLL;
  v17 = (v14 & 0x3FFFFFFFCLL) + v15 + 7;
  v18 = a4[22] + v17;
  if (v18 <= a4[21])
  {
LABEL_4:
    a4[23] = v18;
    goto LABEL_5;
  }
  v61 = (2 * v13) & 0x7FFFFFFF8;
  v59 = *(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48);
  v58 = *(_DWORD *)(v6 + 1392);
  v56 = AGX::DataBufferAllocator<34ul>::growNoInline(a4, 4, 0);
  v9 = v58;
  v13 = v59;
  v15 = v61;
  v16 = v14 & 0x3FFFFFFFCLL;
  if (v56)
  {
    v18 = a4[22] + v17;
    if (v18 > a4[21])
      goto LABEL_50;
    goto LABEL_4;
  }
LABEL_5:
  v19 = v10 + v9 + v11 + v12;
  v20 = (8 * v19) | 7;
  v21 = a4[30] + v20;
  if (v21 <= a4[29])
  {
LABEL_6:
    a4[31] = v21;
    goto LABEL_7;
  }
  v62 = v15;
  v63 = v16;
  v60 = v13;
  v57 = AGX::DataBufferAllocator<34ul>::growNoInline(a4, 6, 0);
  v13 = v60;
  v15 = v62;
  v16 = v63;
  if (v57)
  {
    v21 = a4[30] + v20;
    if (v21 > a4[29])
      goto LABEL_50;
    goto LABEL_6;
  }
LABEL_7:
  v22 = v13 >> 2;
  v23 = v14 >> 2;
  if ((v13 >> 2))
  {
    v24 = (_QWORD *)((a4[22] + 7) & 0xFFFFFFFFFFFFFFF8);
    v25 = (char *)v24 + a4[24];
    a4[22] = (char *)v24 + v15;
    a5[307] = v25;
    v26 = *(unsigned int **)(v6 + 48);
    do
    {
      v27 = *v26++;
      *v24++ = *(_QWORD *)(v7 + 8 * v27);
      LODWORD(v22) = v22 - 1;
    }
    while ((_DWORD)v22);
  }
  if ((_DWORD)v23)
  {
    v28 = (_DWORD *)a4[22];
    v29 = (char *)v28 + a4[24];
    a4[22] = (char *)v28 + v16;
    a5[308] = v29;
    v30 = *(unsigned int **)(v6 + 72);
    do
    {
      v31 = *v30++;
      *v28++ = *((_DWORD *)a5 + v31 + 622);
      LODWORD(v23) = v23 - 1;
    }
    while ((_DWORD)v23);
  }
  v32 = (char *)a4[30];
  v33 = &v32[a4[32]];
  v68 = v32;
  v69[0] = v33;
  a4[30] = &v32[8 * v19];
  agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v68, v69, v7, (_DWORD *)(v6 + 1392), 0, 0);
  v34 = *(_QWORD *)(v6 + 2824);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v6 + 2808);
  *(_QWORD *)(a2 + 144) = v33;
  *(_QWORD *)(a2 + 152) = v34;
  v35 = *(_DWORD *)(v6 + 296);
  if (a1[8] > v35)
    v35 = a1[8];
  if (v35 <= *(_DWORD *)(v6 + 308))
    v35 = *(_DWORD *)(v6 + 308);
  a1[8] = v35;
  v36 = *(_DWORD *)(v6 + 328);
  if (a1[10] > v36)
    v36 = a1[10];
  if (v36 <= *(_DWORD *)(v6 + 340))
    v36 = *(_DWORD *)(v6 + 340);
  a1[10] = v36;
  a1[9] = *(_DWORD *)(v6 + 292);
  v37 = (int32x4_t *)a5[449];
  v38 = v37[72].u32[2];
  do
  {
    v38 &= ~(1 << __clz(__rbit32(v38)));
    IOGPUResourceListAddResource();
  }
  while (v38);
  v40 = v37->i64[1];
  v39 = v37[1].i64[0];
  v41 = 8 * vaddvq_s32(v37[32]);
  v42 = a4[30] + v41;
  if (v42 <= a4[29])
  {
LABEL_24:
    a4[31] = v42;
    goto LABEL_25;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a4, 6, 0))
  {
    v42 = a4[30] + v41;
    if (v42 > a4[29])
      goto LABEL_50;
    goto LABEL_24;
  }
LABEL_25:
  v43 = v39 - v40;
  v44 = v43 & 0x3FFFFFFFCLL;
  v45 = a4[22] + (v43 & 0x3FFFFFFFCLL);
  if (v45 <= a4[21])
  {
LABEL_26:
    a4[23] = v45;
    goto LABEL_27;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a4, 4, 0))
  {
    v45 = a4[22] + v44;
    if (v45 <= a4[21])
      goto LABEL_26;
LABEL_50:
    abort();
  }
LABEL_27:
  v46 = v43 >> 2;
  if ((v43 >> 2))
  {
    v47 = (_DWORD *)a4[22];
    v48 = (char *)v47 + a4[24];
    a4[22] = (char *)v47 + v44;
    v69[0] = v48;
    v49 = (unsigned int *)v37->i64[1];
    do
    {
      v50 = *v49++;
      *v47++ = *((_DWORD *)a5 + v50 + 96);
      LODWORD(v46) = v46 - 1;
    }
    while ((_DWORD)v46);
  }
  v51 = (char *)a4[30];
  v52 = &v51[a4[32]];
  v67 = v51;
  v68 = v52;
  a4[30] = &v51[v41];
  result = agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v67, &v68, (uint64_t)v69, (int32x4_t *)v37[32].i32, 0, 0);
  *(_DWORD *)(a2 + 176) = (_DWORD)v52;
  *(_DWORD *)(a2 + 180) = v37[69].i64[1];
  *(_DWORD *)(a2 + 184) = v37[70].i32[2];
  v54 = v37[4].u32[1];
  if (a1[8] > v54)
    v54 = a1[8];
  if (v54 <= v37[4].i32[3])
    v54 = v37[4].u32[3];
  a1[8] = v54;
  v55 = v37[5].u32[0];
  if (a1[10] > v55)
    v55 = a1[10];
  if (v55 <= v37[5].i32[2])
    v55 = v37[5].u32[2];
  a1[10] = v55;
  a1[9] = v37[5].i32[3];
  return result;
}

double AGX::BlitPDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitFragmentProgramVariantArguments(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  _DWORD *v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  double result;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;

  v10 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
  v11 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
  v12 = *(_DWORD *)(a3 + 1392);
  v13 = *(_DWORD *)(a3 + 1396);
  v14 = *(_DWORD *)(a3 + 1400);
  v15 = *(_DWORD *)(a3 + 1404);
  v16 = (2 * v10) & 0x7FFFFFFF8;
  v17 = v11 & 0x3FFFFFFFCLL;
  v18 = (v11 & 0x3FFFFFFFCLL) + v16 + 7;
  v19 = a2[22] + v18;
  if (v19 <= a2[21])
  {
LABEL_2:
    a2[23] = v19;
    goto LABEL_3;
  }
  v46 = (2 * v10) & 0x7FFFFFFF8;
  v47 = v11 & 0x3FFFFFFFCLL;
  v44 = *(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72);
  v45 = *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48);
  v39 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 4, 0);
  v11 = v44;
  v10 = v45;
  v16 = v46;
  v17 = v47;
  if (v39)
  {
    v19 = a2[22] + v18;
    if (v19 > a2[21])
      goto LABEL_20;
    goto LABEL_2;
  }
LABEL_3:
  v20 = v13 + v12 + v14 + v15;
  v21 = (8 * v20) | 7;
  v22 = a2[30] + v21;
  if (v22 <= a2[29])
  {
LABEL_4:
    a2[31] = v22;
    goto LABEL_5;
  }
  v48 = v17;
  v40 = v16;
  v41 = v10;
  v42 = v11;
  v43 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 6, 0);
  v11 = v42;
  v10 = v41;
  v16 = v40;
  v17 = v48;
  if (v43)
  {
    v22 = a2[30] + v21;
    if (v22 <= a2[29])
      goto LABEL_4;
LABEL_20:
    abort();
  }
LABEL_5:
  v23 = v10 >> 2;
  v24 = v11 >> 2;
  if ((v10 >> 2))
  {
    v25 = (_QWORD *)((a2[22] + 7) & 0xFFFFFFFFFFFFFFF8);
    v26 = (char *)v25 + a2[24];
    a2[22] = (char *)v25 + v16;
    *(_QWORD *)(a4 + 64) = v26;
    v27 = *(unsigned int **)(a3 + 48);
    do
    {
      v28 = *v27++;
      *v25++ = *(_QWORD *)(a4 + 8 * v28);
      LODWORD(v23) = v23 - 1;
    }
    while ((_DWORD)v23);
  }
  if ((_DWORD)v24)
  {
    v29 = (_DWORD *)a2[22];
    v30 = (char *)v29 + a2[24];
    a2[22] = (char *)v29 + v17;
    *(_QWORD *)(a4 + 72) = v30;
    v31 = *(unsigned int **)(a3 + 72);
    do
    {
      v32 = *v31++;
      *v29++ = *(_DWORD *)(a5 + 4 * v32);
      LODWORD(v24) = v24 - 1;
    }
    while ((_DWORD)v24);
  }
  if (v20)
  {
    v33 = (char *)((a2[30] + 7) & 0xFFFFFFFFFFFFFFF8);
    v34 = &v33[a2[32]];
    v49 = v33;
    v50 = v34;
    a2[30] = &v33[8 * v20];
    agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v49, &v50, a4, (_DWORD *)(a3 + 1392), 0, 0);
  }
  else
  {
    LODWORD(v34) = 0;
  }
  v35 = *(_QWORD *)(a3 + 2832);
  result = *(double *)(v35 + 4);
  v37 = *(_DWORD *)(v35 + 12);
  v38 = *(_DWORD *)(v35 + 16);
  LODWORD(v35) = *(_DWORD *)(v35 + 20);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 20) = (_DWORD)v34;
  *(_DWORD *)(a1 + 24) = v38;
  *(_DWORD *)(a1 + 8) = v37;
  *(_QWORD *)(a1 + 12) = v35;
  return result;
}

float AGX::ClipRectContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setViewports(uint64_t a1, double *a2, int a3)
{
  unint64_t v3;
  float64x2_t *v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int32x2_t v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float *v16;
  double v17;
  float v18;
  double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  float v29;
  double v30;
  double v31;
  float v32;
  float v33;
  double v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float result;

  *(_DWORD *)(a1 + 76) = a3;
  if (a3)
  {
    v3 = 0;
    v4 = (float64x2_t *)(a2 + 2);
    v5 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    do
    {
      v6 = v4[-1];
      v7 = vaddq_f64(v6, *v4);
      v8 = vmovn_s64((int64x2_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f64(v6, v7), (int8x16_t)vcgeq_f64(v7, v6))));
      if ((vorr_s8((int8x8_t)v8, (int8x8_t)vdup_lane_s32(v8, 1)).u8[0] & 1) != 0)
        v9 = -1;
      else
        v9 = 0;
      v10 = (int8x16_t)vdupq_n_s64(v9);
      v11 = vbicq_s8((int8x16_t)v6, v10);
      v12 = vbicq_s8((int8x16_t)v7, v10);
      v13 = (int8x16_t)vcltzq_f64(*v4);
      v14 = (float64x2_t)vbslq_s8(v13, v11, v12);
      v15 = (float64x2_t)vbslq_s8(v13, v12, v11);
      *(int64x2_t *)(a1 + 16 * v3++ + 8) = vsliq_n_s64((int64x2_t)vcvtq_u64_f64((float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64(v15, v5), (int8x16_t)v5, (int8x16_t)v15), (int8x16_t)vcltzq_f64(v15))), (int64x2_t)vcvtq_u64_f64(vrndpq_f64((float64x2_t)vbicq_s8(vbslq_s8((int8x16_t)vcgtq_f64(v14, v5), (int8x16_t)v5, (int8x16_t)v14), (int8x16_t)vcltzq_f64(v14)))), 0x20uLL);
      v4 += 3;
    }
    while (v3 < *(unsigned int *)(a1 + 76));
    v16 = *(float **)a1;
    v17 = a2[2];
    if (v17 >= -3.40282347e38)
    {
      if (v17 <= 3.40282347e38)
      {
        v27 = v17;
        v18 = v27 * 0.5;
      }
      else
      {
        v18 = 1.7014e38;
      }
    }
    else
    {
      v18 = -1.7014e38;
    }
    v28 = a2[3];
    if (v28 >= -3.40282347e38)
    {
      if (v28 <= 3.40282347e38)
      {
        v29 = v28;
        v23 = v29 * 0.5;
      }
      else
      {
        v23 = 1.7014e38;
      }
    }
    else
    {
      v23 = -1.7014e38;
    }
  }
  else
  {
    v16 = *(float **)a1;
    v18 = 1.7014e38;
    v19 = a2[2];
    v20 = a2[3];
    v21 = v19;
    v22 = v21 * 0.5;
    if (v19 <= 3.40282347e38)
      v18 = v22;
    if (v19 < -3.40282347e38)
      v18 = -1.7014e38;
    v23 = -1.7014e38;
    v24 = 1.7014e38;
    v25 = v20;
    v26 = v25 * 0.5;
    if (v20 <= 3.40282347e38)
      v24 = v26;
    if (v20 >= -3.40282347e38)
      v23 = v24;
  }
  v30 = a2[4];
  v31 = a2[5];
  v32 = -3.4028e38;
  v33 = 3.4028e38;
  v34 = a2[1];
  if (*a2 <= 3.40282347e38)
  {
    v35 = *a2;
    v33 = v35;
  }
  if (*a2 >= -3.40282347e38)
    v32 = v33;
  v16[3] = v18 + v32;
  v16[4] = v18;
  v36 = 3.4028e38;
  if (v34 <= 3.40282347e38)
  {
    v37 = v34;
    v36 = v37;
  }
  if (v34 >= -3.40282347e38)
    v38 = v36;
  else
    v38 = -3.4028e38;
  v39 = v31 - v30;
  v16[5] = v23 + v38;
  v16[6] = -v23;
  result = v30;
  v16[7] = result;
  v16[8] = v39;
  return result;
}

uint64_t AGX::ClipRectContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::updateClipRegions(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  int64x2_t v9;
  int64x2_t v10;
  uint32x2_t v11;
  int8x8_t v12;
  int8x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int v16;
  int v17;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v23;
  BOOL v24;
  BOOL v25;
  __int128 v26;
  unint64_t v27;

  *((_BYTE *)a1 + 74) = 1;
  *((_WORD *)a1 + 36) = 1;
  v3 = *((_DWORD *)a1 + 19);
  v2 = *((unsigned int *)a1 + 20);
  if (v3 > v2)
  {
    v26 = 0uLL;
    if ((_DWORD)v2 == 1)
      v26 = *(_OWORD *)(a1 + 3);
    do
    {
      *(_OWORD *)&a1[2 * v2++ + 3] = v26;
      v27 = *((unsigned int *)a1 + 19);
    }
    while (v2 < v27);
    *((_DWORD *)a1 + 20) = v27;
    if ((_DWORD)v27)
      goto LABEL_3;
  }
  else if (v3)
  {
LABEL_3:
    v4 = 0;
    v5 = 0;
    v6 = a1 + 5;
    v7 = *a1;
    while (1)
    {
      v10 = *((int64x2_t *)v6 - 2);
      v9 = *((int64x2_t *)v6 - 1);
      v11 = (uint32x2_t)vmovn_s64(v9);
      v12 = (int8x8_t)vmovn_s64(v10);
      *(int32x2_t *)v10.i8 = vshrn_n_s64(v10, 0x20uLL);
      v13 = vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v12, v11), v12, (int8x8_t)vmin_u32(v11, *(uint32x2_t *)v10.i8));
      *(int32x2_t *)v9.i8 = vshrn_n_s64(v9, 0x20uLL);
      v14.i64[0] = v13.u32[0];
      v14.i64[1] = v13.u32[1];
      v15 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v13, *(uint32x2_t *)v9.i8), v13, (int8x8_t)vmin_u32(*(uint32x2_t *)v9.i8, *(uint32x2_t *)v10.i8)), 0x20uLL), v14);
      v16 = *(_DWORD *)(v7 + 4);
      v17 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v7 + 4) = 0x80000000;
      if (v15.i32[0] == v15.i32[1] || v15.i32[2] == v15.i32[3])
      {
        v19 = 0;
        v20 = 0;
        v21 = 0x80000000;
      }
      else
      {
        v21 = (v15.i32[0] << 11) & 0x7FFF0000 | ((v15.i32[1] - 1) >> 5) | 0x80000000;
        v19 = ((v15.i32[3] - 1) >> 5) | ((unsigned __int32)v15.i32[2] >> 5 << 16);
        *(_DWORD *)(v7 + 4) = v21;
        *(_DWORD *)(v7 + 8) = v19;
        v20 = (((v15.i8[0] | v15.i8[4]) | v15.i8[8]) & 0x1F) == 0 && (v15.i8[12] & 0x1F) == 0;
      }
      if (v16 != v21 || v17 != v19)
        *a2 |= 0x1000000000000uLL;
      *((_BYTE *)a1 + 74) &= v20;
      v23 = *((_DWORD *)a1 + 14);
      v24 = v15.i32[0] == v23
         && *(uint64_t *)((char *)v15.i64 + 4) == *(uint64_t *)((char *)a1 + 60)
         && v15.i32[3] == *((_DWORD *)a1 + 17);
      if (!*((_BYTE *)a1 + 72))
        v24 = 0;
      *((_BYTE *)a1 + 72) = v24;
      if (*(_DWORD *)v6 == v15.i32[0] && *(uint64_t *)((char *)v6 + 4) == *(uint64_t *)((char *)v15.i64 + 4))
      {
        v25 = *((_DWORD *)v6 + 3) != v15.i32[3];
        if (v15.i32[0] > v23)
          goto LABEL_4;
      }
      else
      {
        v25 = 1;
        if (v15.i32[0] > v23)
          goto LABEL_4;
      }
      if (v15.i32[2] <= *((_DWORD *)a1 + 16) && v15.i32[1] >= *((_DWORD *)a1 + 15))
      {
        v8 = v15.i32[3] < *((_DWORD *)a1 + 17);
        goto LABEL_5;
      }
LABEL_4:
      v8 = 1;
LABEL_5:
      v5 |= v25;
      *((_BYTE *)a1 + 73) |= v8;
      *(int8x16_t *)v6 = v15;
      v6 += 2;
      if (++v4 >= (unint64_t)*((unsigned int *)a1 + 19))
        return v5 & 1;
    }
  }
  v5 = 0;
  return v5 & 1;
}

void sub_232C55904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,_QWORD *__p)
{
  _QWORD *v32;
  _QWORD *v33;
  void *v34;

  _Block_object_dispose(&a23, 8);
  v32 = __p;
  if (__p)
  {
    do
    {
      v33 = (_QWORD *)*v32;
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
  v34 = a29;
  a29 = 0;
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_232C55D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232C56620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<AGXA10FamilyTexture *>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(_BYTE **)a1;
    v9 = (uint64_t)v5 - *(_QWORD *)a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      abort();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 == (_QWORD *)v8)
    {
      v8 = v5;
    }
    else
    {
      v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58)
        goto LABEL_29;
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20)
        goto LABEL_29;
      v18 = (v17 >> 3) + 1;
      v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v23 = *--v6;
          *--v15 = v23;
        }
        while (v6 != (_QWORD *)v8);
        v8 = *(_BYTE **)a1;
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t __Block_byref_object_copy__493(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__494(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t ___ZNK3AGX13CommandBufferINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE39processDebugBufferAndUpdateEncoderInfosEP7NSArrayIPU38objcproto27MTLCommandBufferEncoderInfo11objc_objectE_block_invoke(uint64_t result, unsigned int *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];
  void (*v9)(uint64_t, unint64_t, unsigned int);
  void *v10;
  uint64_t v11;

  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v9 = ___ZNK3AGX13CommandBufferINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE39processDebugBufferAndUpdateEncoderInfosEP7NSArrayIPU38objcproto27MTLCommandBufferEncoderInfo11objc_objectE_block_invoke_2;
  v10 = &unk_2504001B8;
  v11 = *(_QWORD *)(result + 32);
  if (a3 >= 8)
  {
    v3 = *a2;
    v4 = 8 * v3;
    if (8 * v3 + 8 <= a3 && (_DWORD)v3 != 0)
    {
      v6 = (unint64_t *)(a2 + 2);
      do
      {
        v7 = *v6++;
        result = ((uint64_t (*)(_QWORD *, unint64_t, unint64_t, unint64_t))v9)(v8, v7 & 0x1FFFFFFFFFFFFFFLL, (v7 >> 57) & 3, v7 >> 59);
        v4 -= 8;
      }
      while (v4);
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,AGXSDebugBuffer::KickStatus>>(float *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
      goto LABEL_59;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_64:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v5] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_232C57E3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3AGX13CommandBufferINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE39processDebugBufferAndUpdateEncoderInfosEP7NSArrayIPU38objcproto27MTLCommandBufferEncoderInfo11objc_objectE_block_invoke_2(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  float *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (float *)(v3 + 48);
  v5 = *(int8x8_t *)(v3 + 56);
  if (!*(_QWORD *)&v5)
    goto LABEL_21;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (*(_QWORD *)&v5 <= a2)
      v7 = a2 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)v4 + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_21:
    *(_QWORD *)&v14 = a2;
    BYTE8(v14) = a3;
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXSDebugBuffer::KickStatus>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,AGXSDebugBuffer::KickStatus>>(v4, a2, &v14);
    return;
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a2)
      {
        if (v9[2] == a2)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_21;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a2)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_21;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_21;
  }
  if (v9[2] != a2)
    goto LABEL_11;
LABEL_22:
  v13 = *((unsigned __int8 *)v9 + 24);
  if (v13 <= a3)
    LOBYTE(v13) = a3;
  *((_BYTE *)v9 + 24) = v13;
}

void AGX::CommandBuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::prepareDebugBufferForSubmission(void)::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion _debugBufferStart __ nullptr && debugBufferEnd __ nullptr && ptrDelta(debugBufferStart_ debugBufferEnd) __ static_cast_intptr_t_(requiredDebugBufferSize)_]()
{
  _os_crash();
  __break(1u);
}

void sub_232C583A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232C58610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AGX::ComputeControlFlowEmitterGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::emitPredicate(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  char v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  char **v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  _QWORD *v90;
  char *v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  std::vector<unsigned int> v109;
  char *value;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _DWORD v122[552];
  uint64_t v123;
  _QWORD v124[168];
  __int128 v125;
  int64x2_t v126;
  _QWORD v127[8];
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[5];
  size_t size;
  void *buffer;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX v137;
  __int128 md;
  __int128 v139;
  CC_SHA256_CTX *v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v5 = v2;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = (_QWORD *)v1;
  v144 = *MEMORY[0x24BDAC8D0];
  v15 = v2[46];
  if (!v15)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v2, 10, 0))
      goto LABEL_111;
    v15 = v5[46];
  }
  v16 = v15 + 11;
  v102 = v14;
  v106 = v13;
  if ((unint64_t)(v15 + 11) <= v5[45])
  {
LABEL_3:
    v5[47] = v16;
    goto LABEL_4;
  }
  v92 = AGX::DataBufferAllocator<34ul>::growNoInline(v5, 10, 0);
  v15 = v5[46];
  if (v92)
  {
    v16 = v15 + 11;
    if ((unint64_t)(v15 + 11) > v5[45])
      goto LABEL_111;
    goto LABEL_3;
  }
LABEL_4:
  v17 = (_QWORD *)((v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = v5[48];
  v5[46] = v17 + 1;
  *v17 = 0xADE17D00400000DELL;
  v107 = v5[94];
  v104 = v5[96];
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier(v4, v5);
  v19 = *v11;
  v20 = *((_DWORD *)v11 + 4);
  v21 = (int *)MEMORY[0x24BE51650];
  v103 = v4;
  v105 = v7;
  if (v20 == 2)
  {
    v26 = v11[1];
    v27 = v19 + (int)*MEMORY[0x24BE51650];
    v24 = (_DWORD *)(v26 + *(_QWORD *)(v27 + 24));
    v25 = (char *)(*(_QWORD *)(v27 + 8) + v26);
  }
  else
  {
    if (v20 == 1)
    {
      v22 = v5[18];
      v23 = v22 + 7;
      if ((unint64_t)(v22 + 7) > v5[17])
      {
        v97 = AGX::DataBufferAllocator<34ul>::growNoInline(v5, 3, 0);
        v22 = v5[18];
        if (!v97)
          goto LABEL_8;
        v23 = v22 + 7;
        if ((unint64_t)(v22 + 7) > v5[17])
          goto LABEL_111;
      }
      v5[19] = v23;
LABEL_8:
      v24 = (_DWORD *)((v22 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v25 = (char *)v24 + v5[20];
      v5[18] = v24 + 1;
      *v24 = v19;
      goto LABEL_11;
    }
    v25 = 0;
    v24 = 0;
  }
LABEL_11:
  v28 = *v9;
  v29 = *((_DWORD *)v9 + 4);
  if (v29 == 2)
  {
    v34 = v9[1];
    v35 = v28 + *v21;
    v32 = (_DWORD *)(v34 + *(_QWORD *)(v35 + 24));
    v33 = (char *)(*(_QWORD *)(v35 + 8) + v34);
  }
  else
  {
    if (v29 == 1)
    {
      v30 = v5[18];
      v31 = v30 + 7;
      if ((unint64_t)(v30 + 7) > v5[17])
      {
        v98 = AGX::DataBufferAllocator<34ul>::growNoInline(v5, 3, 0);
        v30 = v5[18];
        if (!v98)
          goto LABEL_15;
        v31 = v30 + 7;
        if ((unint64_t)(v30 + 7) > v5[17])
          goto LABEL_111;
      }
      v5[19] = v31;
LABEL_15:
      v32 = (_DWORD *)((v30 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v33 = (char *)v32 + v5[20];
      v5[18] = v32 + 1;
      *v32 = v28;
      goto LABEL_18;
    }
    v33 = 0;
    v32 = 0;
  }
LABEL_18:
  v36 = v5[18];
  v37 = v36 + 15;
  if ((unint64_t)(v36 + 15) <= v5[17])
  {
LABEL_19:
    v5[19] = v37;
    goto LABEL_20;
  }
  v93 = AGX::DataBufferAllocator<34ul>::growNoInline(v5, 3, 0);
  v36 = v5[18];
  if (v93)
  {
    v37 = v36 + 15;
    if ((unint64_t)(v36 + 15) > v5[17])
      goto LABEL_111;
    goto LABEL_19;
  }
LABEL_20:
  v38 = (_QWORD *)((v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  v39 = v5[20];
  v5[18] = v38 + 1;
  v108 = v38;
  *v38 = 0;
  v40 = v5[18];
  v41 = v40 + 15;
  if ((unint64_t)(v40 + 15) <= v5[17])
  {
LABEL_21:
    v5[19] = v41;
    goto LABEL_22;
  }
  v94 = AGX::DataBufferAllocator<34ul>::growNoInline(v5, 3, 0);
  v40 = v5[18];
  if (v94)
  {
    v41 = v40 + 15;
    if ((unint64_t)(v40 + 15) <= v5[17])
      goto LABEL_21;
LABEL_111:
    abort();
  }
LABEL_22:
  v42 = v5[20];
  v43 = (_QWORD *)((v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  v5[18] = v43 + 1;
  *v43 = 0;
  v124[167] = 4;
  v124[103] = v33;
  v124[35] = v24;
  v124[36] = v32;
  v125 = xmmword_232D734D0;
  v124[104] = (char *)v108 + v39;
  v100 = (char *)v43 + v42;
  v101 = v43;
  v124[105] = (char *)v43 + v42;
  v124[37] = v108;
  v124[38] = v43;
  v126 = vdupq_n_s64(8uLL);
  v99 = (char *)v17 + v18;
  v124[106] = (char *)v17 + v18;
  v124[102] = v25;
  v124[39] = v17;
  v113 = 0;
  v114 = -1;
  v115 = 0;
  bzero(v122, 0x898uLL);
  v122[551] = 1;
  bzero(&v123, 0x424uLL);
  v117 = 0x100000001;
  v118 = 65537;
  v120 = 0x100000001;
  v121 = 1;
  v119 = 0;
  *(_QWORD *)&v44 = 0x100000001;
  *((_QWORD *)&v44 + 1) = 0x100000001;
  v116 = v44;
  LODWORD(v109.__end_) = 42;
  value = 0;
  v111 = 0;
  v109.__end_cap_.__value_ = 0;
  v109.__begin_ = (std::vector<unsigned int>::pointer)off_250400978;
  v112 = 0;
  v45 = (0x3010205000400uLL >> (8 * v106)) | 0x10;
  if (v106 >= 7)
    v45 = 16;
  LOBYTE(v112) = v45;
  v128 = 0;
  v129 = &v128;
  v130 = 0x2020000000;
  v46 = (os_unfair_lock_s *)(v105 + 6664);
  v131 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v105 + 6664));
  v47 = *(_QWORD *)(v105 + 4432);
  v48 = (os_unfair_lock_s *)(v47 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v47 + 728));
  v49 = *(unsigned int *)(v47 + 400);
  v50 = *(_QWORD *)(v47 + 392);
  if ((_DWORD)v49)
  {
    v51 = 0;
    v52 = (unsigned __int8 *)(v50 + 40);
    while (1)
    {
      v53 = *v52;
      v52 += 48;
      if (((v53 ^ v112) & 0x1F) == 0)
        break;
      if (v49 == ++v51)
        goto LABEL_28;
    }
    v59 = v50 + 48 * v51;
  }
  else
  {
LABEL_28:
    v54 = *(_QWORD *)(v50 + 384);
    if (v54)
    {
      v55 = 1;
      while (1)
      {
        if (((*(_BYTE *)(v54 + 40) ^ v112) & 0x1F) == 0)
        {
          v55 = 0;
          goto LABEL_44;
        }
        if (((*(_BYTE *)(v54 + 88) ^ v112) & 0x1F) == 0)
          goto LABEL_44;
        if (((*(_BYTE *)(v54 + 136) ^ v112) & 0x1F) == 0)
        {
          v55 = 2;
          goto LABEL_44;
        }
        if (((*(_BYTE *)(v54 + 184) ^ v112) & 0x1F) == 0)
          break;
        v54 = *(_QWORD *)(v54 + 384);
        if (!v54)
          goto LABEL_35;
      }
      v55 = 3;
LABEL_44:
      v59 = v54 + 48 * v55;
    }
    else
    {
LABEL_35:
      if ((_DWORD)v49 == 4)
      {
        v50 = operator new();
        LODWORD(v49) = 0;
        *(_DWORD *)(v50 + 8) = 42;
        *(_DWORD *)(v50 + 56) = 42;
        *(_DWORD *)(v50 + 104) = 42;
        *(_DWORD *)(v50 + 152) = 42;
        *(_QWORD *)(v50 + 24) = 0;
        *(_QWORD *)(v50 + 32) = 0;
        *(_QWORD *)(v50 + 16) = 0;
        *(_QWORD *)v50 = off_250400978;
        *(_DWORD *)(v50 + 40) = 0;
        *(_QWORD *)(v50 + 72) = 0;
        *(_QWORD *)(v50 + 80) = 0;
        *(_QWORD *)(v50 + 64) = 0;
        *(_QWORD *)(v50 + 48) = off_250400978;
        *(_DWORD *)(v50 + 88) = 0;
        *(_QWORD *)(v50 + 120) = 0;
        *(_QWORD *)(v50 + 128) = 0;
        *(_QWORD *)(v50 + 112) = 0;
        *(_QWORD *)(v50 + 96) = off_250400978;
        *(_DWORD *)(v50 + 136) = 0;
        *(_QWORD *)(v50 + 160) = 0;
        *(_QWORD *)(v50 + 168) = 0;
        *(_QWORD *)(v50 + 176) = 0;
        *(_QWORD *)(v50 + 144) = off_250400978;
        *(_DWORD *)(v50 + 184) = 0;
        *(_OWORD *)(v50 + 218) = 0u;
        *(_OWORD *)(v50 + 208) = 0u;
        *(_OWORD *)(v50 + 192) = 0u;
        *(_OWORD *)(v50 + 240) = 0u;
        *(_OWORD *)(v50 + 256) = 0u;
        *(_OWORD *)(v50 + 266) = 0u;
        *(_OWORD *)(v50 + 288) = 0u;
        *(_OWORD *)(v50 + 304) = 0u;
        *(_OWORD *)(v50 + 314) = 0u;
        *(_OWORD *)(v50 + 336) = 0u;
        *(_OWORD *)(v50 + 352) = 0u;
        *(_OWORD *)(v50 + 362) = 0u;
        *(_QWORD *)(v50 + 384) = *(_QWORD *)(v47 + 392);
        *(_QWORD *)(v47 + 392) = v50;
        *(_DWORD *)(v47 + 400) = 0;
      }
      v56 = v50 + 48 * v49;
      *(_DWORD *)(v56 + 8) = v109.__end_;
      if ((std::vector<unsigned int> *)v56 != &v109)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v56 + 16), (char *)v109.__end_cap_.__value_, value, (value - (char *)v109.__end_cap_.__value_) >> 2);
      *(_DWORD *)(v50 + 48 * v49 + 40) = v112;
      v57 = *(_QWORD *)(v47 + 392);
      v58 = *(_DWORD *)(v47 + 400);
      *(_DWORD *)(v47 + 400) = v58 + 1;
      v59 = v57 + 48 * v58;
    }
  }
  v60 = v59 + 192;
  if (*(_QWORD *)(v59 + 192))
  {
    if (!*(_BYTE *)(v59 + 232))
    {
      os_unfair_lock_unlock(v48);
      v129[3] = *(_QWORD *)(v60 + 8);
      goto LABEL_66;
    }
    v61 = *(_QWORD *)(v59 + 200);
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    *(_QWORD *)(v60 + 8) = 0;
    *(_QWORD *)(v60 + 16) = 0;

    *(_QWORD *)(v60 + 24) = 0;
    *(_QWORD *)(v60 + 32) = 0;
    *(_BYTE *)(v60 + 40) = 0;
    v62 = *(NSObject **)v60;
  }
  else
  {
    v62 = dispatch_group_create();
    *(_QWORD *)v60 = v62;
  }
  dispatch_group_enter(v62);
  os_unfair_lock_unlock(v48);
  v63 = *(_QWORD *)(v105 + 5464);
  v64 = MEMORY[0x24BDAC760];
  v127[0] = MEMORY[0x24BDAC760];
  v127[1] = 3221225472;
  v127[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE46findOrCreateComputeControlFlowPredicateProgramERKNS_37ComputeControlFlowPredicateProgramKeyE_block_invoke;
  v127[3] = &unk_250400288;
  v127[5] = v105;
  v127[4] = &v128;
  v127[6] = &v109;
  v127[7] = v60;
  v65 = *(_QWORD *)(v63 + 8);
  if (!(*((unsigned int (__cdecl **)())v109.__begin_ + 3))())
    v65 = 0;
  v66 = (void *)objc_opt_new();
  objc_msgSend(v66, "setSync:", 1);
  objc_msgSend(v66, "setPipelineCache:", v65);
  objc_msgSend(v66, "setBinaryArchives:", 0);
  v132[0] = v64;
  v132[1] = 3221225472;
  v132[2] = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v132[3] = &unk_2504023B8;
  v132[4] = v127;
  buffer = 0;
  size = 0;
  (*((void (**)(std::vector<unsigned int> *, unsigned int **, unint64_t *))v109.__begin_ + 2))(&v109, (unsigned int **)&buffer, &size);
  v67 = dispatch_data_create(buffer, size, 0, 0);
  objc_msgSend(v66, "setDriverKeyData:", v67);
  if (objc_msgSend(v66, "airScript"))
  {
    v68 = objc_msgSend(v66, "airScript");
    v142 = 0uLL;
    *(_QWORD *)&v143 = 0;
    *(_QWORD *)&v142 = dispatch_data_create_map(v68, (const void **)&v142 + 1, (size_t *)&v143);
    v69 = *((_QWORD *)&v142 + 1);
    v70 = **((_DWORD **)&v142 + 1);
    CC_SHA256_Init(&v137);
    (*(void (**)(std::vector<unsigned int> *, CC_SHA256_CTX *))v109.__begin_)(&v109, &v137);
    data = 0;
    *(_QWORD *)len = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v69 + v70), &data, (size_t *)len, v71, v72))
    {
      v73 = data;
      CC_SHA256_Update(&v137, data, len[0]);
      free(v73);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &v137);
    dispatch_release((dispatch_object_t)v142);
    v142 = md;
    v143 = v139;
    v46 = (os_unfair_lock_s *)(v105 + 6664);
    objc_msgSend(v66, "setVendorPluginFunctionId:", &v142);
  }
  *(_QWORD *)v137.count = v64;
  *(_QWORD *)v137.hash = 3221225472;
  *(_QWORD *)&v137.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&v137.hash[4] = &unk_250402408;
  *(_QWORD *)v137.wbuf = v132;
  *(_QWORD *)&v137.hash[6] = v66;
  if (objc_msgSend(v66, "function"))
  {
    v74 = mach_absolute_time();
    v75 = *(void **)v63;
    *(_QWORD *)&md = v64;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v139 = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v139 + 1) = &unk_250402458;
    v140 = &v137;
    v141 = v74;
    objc_msgSend(v75, "compileFunctionRequest:completionHandler:", v66, &md);
  }
  else
  {
    if (objc_msgSend(v66, "frameworkData") || objc_msgSend(v66, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v64;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v139 = ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v139 + 1) = &unk_250402430;
    v140 = &v137;
    v76 = objc_msgSend((id)objc_msgSend(v66, "binaryArchives"), "count");
    v77 = *(void **)v63;
    v78 = objc_msgSend(v66, "driverKeyData");
    if (v76)
      objc_msgSend(v77, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v78, objc_msgSend(v66, "binaryArchives"), 0, objc_msgSend(v66, "pipelineCache"), objc_msgSend(v66, "sync"), &md);
    else
      objc_msgSend(v77, "compileRequest:pipelineCache:sync:completionHandler:", v78, objc_msgSend(v66, "pipelineCache"), objc_msgSend(v66, "sync"), &md);
  }
  dispatch_release(v67);

LABEL_66:
  os_unfair_lock_unlock(v46);
  v79 = (unsigned int *)v129[3];
  _Block_object_dispose(&v128, 8);
  v80 = v79[558];
  do
  {
    IOGPUResourceListAddResource();
    v80 &= ~(1 << __clz(__rbit32(v80)));
  }
  while (v80);
  v81 = v79[10];
  v82 = v5[46];
  if (!v82)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v5, 10, 0))
      goto LABEL_98;
    v82 = v5[46];
  }
  v83 = v81 + 7;
  v84 = v82 + v83;
  if (v84 <= v5[45])
  {
LABEL_70:
    v5[47] = v84;
    goto LABEL_71;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v5, 10, 0))
  {
    v84 = v5[46] + v83;
    if (v84 > v5[45])
      goto LABEL_98;
    goto LABEL_70;
  }
LABEL_71:
  v85 = v79[766];
  v86 = v5[26] + v85;
  if (v86 <= v5[25])
  {
LABEL_72:
    v5[27] = v86;
    goto LABEL_73;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v5, 5, 0))
  {
    v86 = v5[26] + v85;
    if (v86 <= v5[25])
      goto LABEL_72;
LABEL_98:
    abort();
  }
LABEL_73:
  v87 = (unint64_t *)v5[94];
  if ((unint64_t)(v87 + 8) > v5[93])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(v5, 22, 0))
    {
      v95 = v5[94];
      if ((unint64_t)(v95 + 64) > v5[93])
        abort();
      v5[95] = v95 + 64;
      *v87 = __ROR8__(v5[96] + v95, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
    }
  }
  else
  {
    v5[95] = v87 + 8;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitComputeProgramVariantAndArguments((uint64_t)v103, v5, (uint64_t)v79, v124, (uint64_t)&v113, 4 * v79[774], 0, 0);
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier(v103, v5);
  v88 = (unint64_t *)v5[94];
  if ((unint64_t)(v88 + 1) > v5[93])
  {
    v96 = AGX::DataBufferAllocator<34ul>::growNoInline(v5, 22, 0);
    v89 = (unint64_t *)v5[94];
    if (v96)
    {
      if ((unint64_t)(v89 + 1) > v5[93])
        abort();
      v5[95] = v89 + 1;
      *v88 = __ROR8__((char *)v89 + v5[96], 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
      v89 = (unint64_t *)v5[94];
    }
  }
  else
  {
    v5[95] = v88 + 1;
    v89 = v88;
  }
  *v89 = __ROR8__(v99, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
  v90 = v89 + 1;
  v5[94] = v90;
  v91 = (char *)v90 + v5[96];
  *v108 = v91;
  *v101 = v91;
  *v102 = v107;
  v102[1] = v104 + v107;
  v102[2] = v90;
  v102[3] = v91;
  v102[4] = v101;
  v102[5] = v100;
  v109.__begin_ = (std::vector<unsigned int>::pointer)off_2504009B8;
  if (v109.__end_cap_.__value_)
  {
    value = (char *)v109.__end_cap_.__value_;
    operator delete(v109.__end_cap_.__value_);
  }
}

void sub_232C593D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)42,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::ComputeControlFlowPredicateProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x56;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

double ___ZN3AGX21ComputePDSStateLoaderINS_2G98EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke()
{
  double result;

  xmmword_254234DC8 = xmmword_232D734E0;
  qword_254234DD8 = 8;
  dword_254234DE0 = 1;
  qword_254234B70 = 0;
  unk_254234B78 = 0;
  qword_254234B68 = 0x2000;
  dword_254234B80 = 1;
  qword_254234BB0 = 0;
  unk_254234BB8 = 0;
  qword_254234BA8 = 0x2000;
  dword_254234BC0 = 1;
  xmmword_254234C48 = xmmword_232D734E0;
  qword_254234C58 = 0;
  dword_254234C60 = 1;
  *(_QWORD *)&result = 0x2000;
  xmmword_254234CA8 = xmmword_232D734C0;
  qword_254234CB8 = 12;
  dword_254234CC0 = 1;
  qword_254234D88 = 64;
  qword_254234D98 = 0;
  qword_254234D90 = 0;
  dword_254234DA0 = 1;
  return result;
}

char **AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitComputeProgramVariantAndArguments(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, unsigned int a6, uint64_t a7, _QWORD *a8)
{
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t k;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  char **result;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t i;
  int v74;
  unint64_t j;
  unsigned int v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v14 = *(_DWORD *)(a5 + 32) * *(_DWORD *)(a5 + 28) * *(_DWORD *)(a5 + 36);
  if (v14 <= 0x1F)
  {
    if (*(_BYTE *)(a3 + 3259))
    {
      v15 = 1;
LABEL_4:
      v16 = v15 * v14;
      v17 = v15 != 1;
      goto LABEL_6;
    }
    if (v14 < 5)
    {
      v15 = 8;
      if (!a6)
        goto LABEL_4;
    }
    else
    {
      v15 = 0x20u / (*(_BYTE *)(a5 + 32) * *(_BYTE *)(a5 + 28) * *(_BYTE *)(a5 + 36));
      if (!a6)
        goto LABEL_4;
    }
    v70 = v15;
    while (1)
    {
      v71 = v70;
      if (v70-- < 1)
        goto LABEL_4;
      if (word_232D73DB0[v70] >= a6)
      {
        v15 = v71;
        goto LABEL_4;
      }
    }
  }
  v17 = 0;
  v16 = 32;
LABEL_6:
  *(_BYTE *)(a5 + 12) = v17;
  if (*(_BYTE *)(a3 + 3258))
    *(_DWORD *)(a5 + 2256) = (v14 + v16 - 1) / v16 - 1;
  if (*(_BYTE *)(a3 + 3256))
    *(_QWORD *)(a5 + 64) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + (int)*MEMORY[0x24BE51650] + 72);
  v18 = *(int **)(a3 + 72);
  v19 = *(_QWORD *)(a3 + 80) - (_QWORD)v18;
  v20 = v19 >> 2;
  v21 = (2 * v19);
  v22 = *(unsigned __int16 **)(a3 + 120);
  v23 = *(_QWORD *)(a3 + 128) - (_QWORD)v22;
  v24 = *(unsigned __int16 **)(a3 + 144);
  v25 = *(_QWORD *)(a3 + 152);
  v26 = *(unsigned int **)(a3 + 96);
  v27 = *(_QWORD *)(a3 + 104) - (_QWORD)v26;
  v28 = v27 >> 2;
  v29 = *(unsigned __int16 **)(a3 + 168);
  v30 = *(_QWORD *)(a3 + 176);
  v31 = *(unsigned __int16 **)(a3 + 192);
  v32 = *(_QWORD *)(a3 + 200);
  v33 = (_QWORD *)((a2[46] + 7) & 0xFFFFFFFFFFFFFFF8);
  v34 = (char *)v33 + a2[48];
  a2[46] = (char *)v33 + *(unsigned int *)(a3 + 40);
  a4[403] = v34;
  v35 = &v34[v21];
  a4[197] = v35;
  v36 = &v35[(2 * v23)];
  a4[404] = v36;
  for (a4[198] = &v36[v27]; (_DWORD)v20; LODWORD(v20) = v20 - 1)
  {
    v37 = *v18++;
    *v33++ = a4[v37];
  }
  v38 = v23 >> 2;
  v39 = *(unsigned __int8 *)(a3 + 216);
  if (*(_BYTE *)(a3 + 216))
  {
    for (i = (unint64_t)(v25 - (_QWORD)v24) >> 1; (_DWORD)i; LODWORD(i) = i - 1)
    {
      v74 = *v24++;
      v33[v74] = *(_QWORD *)(a4[v22[2 * v74]] + 8 * v22[2 * v74 + 1]);
    }
    v33 += v38;
    if ((_DWORD)v28)
      goto LABEL_16;
  }
  else
  {
    for (; (_DWORD)v38; LODWORD(v38) = v38 - 1)
    {
      *v33++ = *(_QWORD *)(a4[*v22] + 8 * v22[1]);
      v22 += 2;
    }
    for (; (_DWORD)v28; LODWORD(v28) = v28 - 1)
    {
LABEL_16:
      v40 = *v26++;
      *(_DWORD *)v33 = *(_DWORD *)(a5 + 4 * v40);
      v33 = (_QWORD *)((char *)v33 + 4);
    }
  }
  if (v39)
  {
    for (j = (unint64_t)(v32 - (_QWORD)v31) >> 1; (_DWORD)j; LODWORD(j) = j - 1)
    {
      v76 = *v31++;
      *((_DWORD *)v33 + v76) = *(_DWORD *)(a4[v29[2 * v76]] + 4 * v29[2 * v76 + 1]);
    }
  }
  else
  {
    for (k = (unint64_t)(v30 - (_QWORD)v29) >> 2; (_DWORD)k; LODWORD(k) = k - 1)
    {
      *(_DWORD *)v33 = *(_DWORD *)(a4[*v29] + 4 * v29[1]);
      v33 = (_QWORD *)((char *)v33 + 4);
      v29 += 2;
    }
  }
  v42 = *(_DWORD *)(a3 + 2840);
  v43 = *(_DWORD *)(a3 + 2844);
  v79 = *(_OWORD *)(a3 + 2848);
  v80 = *(_QWORD *)(a3 + 2864);
  v44 = *(_DWORD *)(a3 + 1420) + *(_DWORD *)(a3 + 1416) + *(_DWORD *)(a3 + 1424) + *(_DWORD *)(a3 + 1428);
  v46 = a2[28];
  v77 = (char *)a2[26];
  v45 = (int)v77;
  v78 = &v77[v46];
  a2[26] = &v77[8 * v44];
  v47 = (v46 + v45) & 0xFFFFFFF0 | v43 & 0xF;
  result = agxaEmitPDSDataSegment<AGX::G9::PDSEncoder,AGX::PDSDataSegmentInfo>(&v77, &v78, (uint64_t)a4, (_DWORD *)(a3 + 1416), *(_BYTE *)(a3 + 1992), a8);
  v49 = a2[94];
  *(_DWORD *)v49 = v42;
  *(_DWORD *)(v49 + 4) = v47;
  *(_OWORD *)(v49 + 8) = v79;
  *(_QWORD *)(v49 + 24) = v80;
  v50 = (_QWORD *)(v49 + 32);
  a2[94] = v49 + 32;
  v51 = a6 & 0xFFFFFFFC;
  if (a7)
  {
    v52 = *(_QWORD *)(a5 + 28);
    v53 = *(_DWORD *)(a5 + 36);
    v54 = BYTE4(a7);
    v55 = a7 & 0xFFFFFFFC;
    if (*(_BYTE *)(a3 + 3264))
    {
      v56 = (v53 * v52 * HIDWORD(v52));
      if (v56 >= 0x21)
        v56 = ((_DWORD)v56 + 31) & 0xFFFFFFE0;
      v52 = v56 | 0x100000000;
      v53 = 1;
    }
    v57 = ((unint64_t)(v51 + 63) >> 6) | (v16 << 27);
    v58 = (((_DWORD)v52 << 20) - 0x100000) | (v53 - 1) | (((v52 >> 22) & 0xFFFFFC00) - 1024);
    v59 = *(_QWORD *)(a3 + 2936);
    *(_DWORD *)(v49 + 40) = *(_DWORD *)(a3 + 2944);
    *v50 = v59;
    v60 = 60;
    v61 = 56;
    v62 = 52;
    v63 = 48;
    v64 = 44;
  }
  else
  {
    v65 = *(_QWORD *)(a5 + 28);
    v66 = *(_DWORD *)(a5 + 36);
    result = (char **)*(unsigned __int8 *)(a3 + 3264);
    v67 = *(_DWORD *)(a5 + 16) - 1;
    v54 = *(_DWORD *)(a5 + 20) - 1;
    v55 = *(_DWORD *)(a5 + 24) - 1;
    if (*(_BYTE *)(a3 + 3264))
    {
      v68 = (v66 * v65 * HIDWORD(v65));
      if (v68 >= 0x21)
        v68 = ((_DWORD)v68 + 31) & 0xFFFFFFE0;
      v65 = v68 | 0x100000000;
      v66 = 1;
    }
    v57 = ((v51 + 63) >> 6) | (v16 << 27);
    v58 = (((_DWORD)v65 << 20) - 0x100000) | (v66 - 1) | (((v65 >> 22) & 0xFFFFFC00) - 1024);
    v69 = *(_QWORD *)(a3 + 2904);
    *(_DWORD *)(v49 + 40) = *(_DWORD *)(a3 + 2912);
    *v50 = v69;
    *(_DWORD *)(v49 + 44) = v67;
    v60 = 64;
    v61 = 60;
    v62 = 56;
    v63 = 52;
    v64 = 48;
  }
  *(_DWORD *)(v49 + v64) = v54;
  *(_DWORD *)(v49 + v63) = v55;
  *(_DWORD *)(v49 + v62) = v57;
  *(_DWORD *)(v49 + v61) = v58;
  a2[94] = v49 + v60;
  return result;
}

uint64_t agxaReserveCDMTokenSpace<AGX::G9::Encoders,AGX::G9::DataBufferAllocator>(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, _BYTE *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t **v14;
  unint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t **v18;
  int64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v11 = result;
  v12 = result;
  v13 = a2 + 32 * result;
  v14 = (unint64_t **)(v13 + 48);
  v15 = *(unint64_t **)(v13 + 48);
  v16 = (1 << result) & 0x3B39E0480;
  if (!v16)
    goto LABEL_4;
  if (v15)
  {
    v13 = a2 + 32 * result;
LABEL_4:
    v17 = (_QWORD *)(v13 + 40);
    v18 = (unint64_t **)(v13 + 56);
    if ((*a7 & 1) == 0)
    {
      v19 = 0;
      v20 = v15;
      goto LABEL_8;
    }
    v21 = v15;
    goto LABEL_7;
  }
  v27 = a5;
  v29 = a6;
  result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a2);
  v15 = *v14;
  if (!*v14)
  {
    v25 = *(_DWORD *)a7;
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, v11, 0);
    if (!(_DWORD)result)
      goto LABEL_28;
    v15 = 0;
    v19 = 0;
    v21 = *v14;
    v22 = a2 + 32 * v12;
    v17 = (_QWORD *)(v22 + 40);
    v18 = (unint64_t **)(v22 + 56);
    v20 = *v14;
    a5 = v27;
    a6 = v29;
    if ((v25 & 1) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v24 = a2 + 32 * v12;
  v17 = (_QWORD *)(v24 + 40);
  v18 = (unint64_t **)(v24 + 56);
  if ((*(_DWORD *)a7 & 1) != 0)
  {
    v21 = *v14;
    a5 = v27;
    a6 = v29;
LABEL_7:
    v20 = *v18;
    v19 = (char *)*v18 - (char *)v21;
    goto LABEL_8;
  }
  v19 = 0;
  v20 = *v14;
  a5 = v27;
  a6 = v29;
LABEL_8:
  if ((unint64_t)v20 + a3 <= *v17)
  {
    *v18 = (unint64_t *)((char *)v20 + a3);
    return result;
  }
  v26 = a5;
  v28 = a6;
  if ((_DWORD)v11 == 33)
  {
    result = AGX::DataBufferAllocator<34ul>::resize(a2);
    if ((result & 1) == 0)
      return result;
  }
  else
  {
    result = AGX::DataBufferAllocator<34ul>::growNoInline(a2, v11, 0);
    if (!(_DWORD)result)
      return result;
  }
  v23 = (char *)*v14 + v19 + a3;
  if ((unint64_t)v23 > *v17)
LABEL_28:
    abort();
  *v18 = (unint64_t *)v23;
  result = AGX::DataBufferAllocator<34ul>::getGPUAddress(a2, v11);
  if (a4)
  {
    if (v16)
    {
      if (!*v14)
        return AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a2);
    }
  }
  else if (v28 == -1 || !v26)
  {
    *v15 = __ROR8__(result, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
  }
  else
  {
    *(unint64_t *)((char *)v15 + 1) = __ROR8__(result, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
    result = agxaReserveCDMTokenSpace<AGX::G9::Encoders,AGX::G9::DataBufferAllocator>(v11, a2, 1, 0, 1);
    *v14 = (unint64_t *)((char *)*v14 + 1);
  }
  return result;
}

__n128 AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier(uint64_t *a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __n128 result;
  __int128 v17;
  int v18;

  v4 = (unint64_t *)a2[94];
  if ((unint64_t)(v4 + 20) > a2[93])
  {
    v18 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 22, 0);
    v5 = (unint64_t *)a2[94];
    if (v18)
    {
      if ((unint64_t)(v5 + 20) > a2[93])
        abort();
      a2[95] = v5 + 20;
      *v4 = __ROR8__((char *)v5 + a2[96], 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
      v5 = (unint64_t *)a2[94];
    }
  }
  else
  {
    a2[95] = v4 + 20;
    v5 = v4;
  }
  v6 = *(_QWORD *)(*a1 + 56);
  v7 = *(_OWORD *)(v6 + 52);
  *(_OWORD *)v5 = *(_OWORD *)(v6 + 36);
  *((_OWORD *)v5 + 1) = v7;
  a2[94] = v5 + 4;
  v8 = *(_QWORD *)(*a1 + 48);
  v9 = *(_OWORD *)(v8 + 44);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(v8 + 28);
  *((_OWORD *)v5 + 3) = v9;
  a2[94] = v5 + 8;
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 40);
  v12 = *(_OWORD *)(v11 + 24);
  *((_OWORD *)v5 + 4) = *(_OWORD *)(v11 + 8);
  *((_OWORD *)v5 + 5) = v12;
  a2[94] = v5 + 12;
  v13 = *(_QWORD *)(v10 + 72);
  v14 = *(_OWORD *)(v13 + 24);
  *((_OWORD *)v5 + 6) = *(_OWORD *)(v13 + 8);
  *((_OWORD *)v5 + 7) = v14;
  a2[94] = v5 + 16;
  v15 = *(_QWORD *)(*a1 + 40);
  result = *(__n128 *)(v15 + 8);
  v17 = *(_OWORD *)(v15 + 24);
  *((__n128 *)v5 + 8) = result;
  *((_OWORD *)v5 + 9) = v17;
  a2[94] = v5 + 20;
  return result;
}

void *AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::patchPDSPatchUpKernel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  void *result;
  int v18;
  int v19;

  v10 = *(_QWORD *)(a1 + 144);
  v11 = v10 + 31;
  if ((unint64_t)(v10 + 31) > *(_QWORD *)(a1 + 136))
  {
    v18 = AGX::DataBufferAllocator<34ul>::growNoInline(a1, 3, 0);
    v10 = *(_QWORD *)(a1 + 144);
    if (!v18)
      goto LABEL_3;
    v11 = v10 + 31;
    if ((unint64_t)(v10 + 31) > *(_QWORD *)(a1 + 136))
      goto LABEL_11;
  }
  *(_QWORD *)(a1 + 152) = v11;
LABEL_3:
  v12 = (_QWORD *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_DWORD)v12 + *(_DWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 144) = v12 + 3;
  *v12 = a2;
  v12[1] = a3;
  *a5 = v13;
  v14 = *(char **)(a1 + 144);
  v15 = v14 + 280;
  if ((unint64_t)(v14 + 280) > *(_QWORD *)(a1 + 136))
  {
    v19 = AGX::DataBufferAllocator<34ul>::growNoInline(a1, 3, 0);
    v14 = *(char **)(a1 + 144);
    if (!v19)
      goto LABEL_5;
    v15 = v14 + 280;
    if ((unint64_t)(v14 + 280) > *(_QWORD *)(a1 + 136))
LABEL_11:
      abort();
  }
  *(_QWORD *)(a1 + 152) = v15;
LABEL_5:
  v16 = &v14[*(_QWORD *)(a1 + 160)];
  *(_QWORD *)(a1 + 144) = v14 + 280;
  result = memcpy(v14, (const void *)(a4 + 536), 0x118uLL);
  v12[2] = v16;
  return result;
}

uint64_t *AGX::ComputePipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~ComputePipeline(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t **i;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  id *v21;
  id *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t *v48;

  if (!*((_BYTE *)a1 + 26) && a1[9])
  {
    v2 = a1[10];
    v3 = *(NSObject **)(v2 + 16);
    v43 = MEMORY[0x24BDAC760];
    v44 = 3221225472;
    v45 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v46 = &__block_descriptor_48_e5_v8__0l;
    v47 = v2;
    v48 = a1 + 6;
    dispatch_sync(v3, &v43);
    *(_OWORD *)((char *)a1 + 73) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
  }
  if (a1[39])
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 7);
    for (i = (uint64_t **)(a1 + 36); ; i[3])
    {
      i = (uint64_t **)*i;
      if (!i)
        break;
    }
    v5 = a1[39];
    if (v5)
      MEMORY[0x234927ECC](v5, 0xC400A2AC0F1);
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 7);
  }
  v6 = (std::__shared_weak_count *)a1[50];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)a1[48];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)a1[46];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (_QWORD *)a1[42];
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)*v15;
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = (void *)a1[40];
  a1[40] = 0;
  if (v17)
    operator delete(v17);
  v18 = (_QWORD *)a1[36];
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)a1[34];
  a1[34] = 0;
  if (v20)
    operator delete(v20);
  v21 = (id *)a1[31];
  if (v21)
  {
    do
    {
      v22 = (id *)*v21;

      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  v23 = (void *)a1[29];
  a1[29] = 0;
  if (v23)
    operator delete(v23);
  v24 = a1[25];
  if (v24)
  {
    v25 = a1[26];
    v26 = (void *)a1[25];
    if (v25 != v24)
    {
      do
      {
        v27 = *(std::__shared_weak_count **)(v25 - 8);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 16;
      }
      while (v25 != v24);
      v26 = (void *)a1[25];
    }
    a1[26] = v24;
    operator delete(v26);
  }
  v30 = (std::__shared_weak_count *)a1[19];
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)a1[17];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)a1[15];
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *a1;
  *a1 = 0;
  if (v39)
  {
    if (*(_QWORD *)(v39 + 64) && *(_QWORD *)(v39 + 24))
    {
      v40 = *(_QWORD *)(v39 + 32);
      v41 = *(NSObject **)(v40 + 16);
      v43 = MEMORY[0x24BDAC760];
      v44 = 3221225472;
      v45 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v46 = &__block_descriptor_48_e5_v8__0l;
      v47 = v40;
      v48 = (uint64_t *)v39;
      dispatch_sync(v41, &v43);
      *(_OWORD *)(v39 + 25) = 0u;
      *(_OWORD *)v39 = 0u;
      *(_OWORD *)(v39 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v39, 0x1070C4082A93E96);
  }
  return a1;
}

void sub_232C5AB68(_Unwind_Exception *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 392);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 376);
  std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](v1 + 360);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v1 + 320);
  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v1 + 272);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 232);
  AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources((void **)(v1 + 200));
  AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState((_QWORD *)(v1 + 112));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<AGX::G9::SpillInfo>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void **AGX::PipelineDylibResources<AGX::G9::ObjClasses,AGX::G9::Classes,(AGX::ICBType)0>::~PipelineDylibResources(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *AGX::DynamicLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,void>::RuntimeState::~RuntimeState(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[6];

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_QWORD *)(v2 + 64) && *(_QWORD *)(v2 + 24))
    {
      v3 = *(_QWORD *)(v2 + 32);
      v4 = *(NSObject **)(v3 + 16);
      v6[0] = MEMORY[0x24BDAC760];
      v6[1] = 3221225472;
      v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v6[3] = &__block_descriptor_48_e5_v8__0l;
      v6[4] = v3;
      v6[5] = v2;
      dispatch_sync(v4, v6);
      *(_OWORD *)(v2 + 25) = 0u;
      *(_OWORD *)v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    MEMORY[0x234927ECC](v2, 0x1070C4082A93E96);
  }
  return a1;
}

void std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void std::vector<std::shared_ptr<AGX::G9::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::G9::DynamicLibrary> const*>>(void **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  _OWORD *v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = *a1;
  v8 = (unint64_t)a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = (unint64_t)*a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[2];
  if (a5 > (uint64_t)&v12[-v8] >> 4)
  {
    v13 = a5 + ((uint64_t)(v8 - (_QWORD)v9) >> 4);
    if (v13 >> 60)
      abort();
    v14 = v12 - (_BYTE *)v9;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v24 = &v16[16 * (v10 >> 4)];
    v25 = &v24[16 * a5];
    v26 = v24;
    do
    {
      v27 = v6[1];
      *(_QWORD *)v26 = *v6;
      *((_QWORD *)v26 + 1) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v26 += 16;
      v6 += 2;
    }
    while (v26 != v25);
    v30 = *a1;
    if (*a1 != (void *)v11)
    {
      v31 = (_QWORD *)v11;
      do
      {
        v32 = *((_OWORD *)v31 - 1);
        v31 -= 2;
        *((_OWORD *)v24 - 1) = v32;
        v24 -= 16;
        *v31 = 0;
        v31[1] = 0;
      }
      while (v31 != v30);
    }
    v33 = a1[1];
    if (v33 != (void *)v11)
    {
      do
      {
        *(_OWORD *)v25 = *(_OWORD *)v11;
        v25 += 16;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v11 += 16;
      }
      while ((void *)v11 != v33);
      v11 = (unint64_t)a1[1];
    }
    v34 = *a1;
    *a1 = v24;
    a1[1] = v25;
    a1[2] = &v16[16 * v15];
    while ((void *)v11 != v34)
    {
      v35 = *(std::__shared_weak_count **)(v11 - 8);
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v11 -= 16;
    }
    if (v34)
      operator delete(v34);
    return;
  }
  v17 = (uint64_t)(v8 - v11) >> 4;
  if (v17 >= a5)
  {
    v18 = &a3[2 * a5];
    v20 = a1[1];
LABEL_46:
    v38 = &v20[-2 * a5];
    v39 = v20;
    if ((unint64_t)v38 < v8)
    {
      v40 = &v20[-2 * a5];
      v39 = v20;
      do
      {
        *v39++ = *(_OWORD *)v40;
        *v40 = 0;
        v40[1] = 0;
        v40 += 2;
      }
      while ((unint64_t)v40 < v8);
    }
    a1[1] = v39;
    if (v20 != (_QWORD *)(v11 + 16 * a5))
    {
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 2;
        *v38 = 0;
        v38[1] = 0;
        v42 = (std::__shared_weak_count *)*(v20 - 1);
        *((_OWORD *)v20 - 1) = v41;
        v20 -= 2;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      while (v38 != (_QWORD *)v11);
    }
    for (; v6 != v18; v11 += 16)
    {
      v46 = *v6;
      v45 = v6[1];
      if (v45)
      {
        v47 = (unint64_t *)(v45 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = *(std::__shared_weak_count **)(v11 + 8);
      *(_QWORD *)v11 = v46;
      *(_QWORD *)(v11 + 8) = v45;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v6 += 2;
    }
    return;
  }
  v18 = &a3[2 * v17];
  if (v18 == a4)
  {
    v20 = a1[1];
  }
  else
  {
    v19 = &a3[2 * v17];
    v20 = a1[1];
    do
    {
      v21 = v19[1];
      *v20 = *v19;
      v20[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v19 += 2;
      v20 += 2;
    }
    while (v19 != a4);
  }
  a1[1] = v20;
  if ((uint64_t)(v8 - v11) >= 1)
    goto LABEL_46;
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,void *> *>>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  v4 = a1[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (uint64_t **)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      if (v6 != a2)
      {
        v13 = a2[3];
        v14 = v6[3];
        if (v14 != v13)
        {
          v15 = (uint64_t)v13;

          v6[3] = (uint64_t *)v15;
        }
      }
      v12 = *v6;
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__node_insert_multi((uint64_t)a1, v6);
      a2 = (uint64_t **)*a2;
      v6 = (uint64_t **)v12;
      if (!v12)
        goto LABEL_5;
    }
    do
    {
      v16 = *v6;

      operator delete(v6);
      v6 = (uint64_t **)v16;
    }
    while (v16);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      v7 = operator new(0x20uLL);
      *v7 = 0;
      v7[1] = 0;
      v8 = a2[3];
      v7[2] = a2[2];
      v7[3] = v8;
      v9 = v7[2];
      v10 = HIDWORD(v9);
      v11 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      v7[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ (v11 >> 47) ^ v11)) >> 47));
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__node_insert_multi((uint64_t)a1, v7);
      a2 = (uint64_t **)*a2;
    }
  }
}

void sub_232C5B43C(_Unwind_Exception *a1)
{
  id *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  _QWORD *j;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *i;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BOOL4 v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  _BOOL4 v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;

  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      prime = v13;
    else
      prime = v12;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_105;
    if (prime >= v8)
      goto LABEL_40;
    v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (prime <= v28)
      prime = v28;
    if (prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * prime);
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;
      if (v16)
        operator delete(v16);
      v17 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17++) = 0;
      while (prime != v17);
      v19 = a1 + 16;
      v18 = *(_QWORD **)(a1 + 16);
      if (v18)
      {
        v20 = v18[1];
        v21 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v20 >= prime)
            v20 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v19;
          for (i = (_QWORD *)*v18; *v18; i = (_QWORD *)*v18)
          {
            v40 = i[1];
            if (v40 >= prime)
              v40 %= prime;
            if (v40 == v20)
            {
              v18 = i;
            }
            else
            {
              v41 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
              {
                do
                {
                  v42 = v41;
                  v41 = (_QWORD *)*v41;
                }
                while (v41 && i[2] == v41[2]);
                *v18 = v41;
                v43 = 8 * v40;
                *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
                **(_QWORD **)(*(_QWORD *)a1 + v43) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v18;
                v18 = i;
                v20 = v40;
              }
            }
          }
        }
        else
        {
          v22 = v20 & v21;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v19;
          for (j = (_QWORD *)*v18; *v18; j = (_QWORD *)*v18)
          {
            v24 = j[1] & v21;
            if (v24 == v22)
            {
              v18 = j;
            }
            else
            {
              v25 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v24))
              {
                do
                {
                  v26 = v25;
                  v25 = (_QWORD *)*v25;
                }
                while (v25 && j[2] == v25[2]);
                *v18 = v25;
                v27 = 8 * v24;
                *v26 = **(_QWORD **)(*(_QWORD *)a1 + v27);
                **(_QWORD **)(*(_QWORD *)a1 + v27) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v18;
                v18 = j;
                v22 = v24;
              }
            }
          }
        }
      }
      v8 = prime;
    }
    else
    {
      v53 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v53)
        operator delete(v53);
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] >= 2uLL)
  {
    v44 = v7;
    if (v8 <= v7)
      v44 = v7 % v8;
    v45 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v44);
    if (!v45)
    {
      v38 = 0;
      v51 = a2[1];
      if (v51 < v8)
        goto LABEL_78;
      goto LABEL_77;
    }
    v46 = 0;
    do
    {
      v38 = v45;
      v45 = (_QWORD *)*v45;
      if (!v45)
        break;
      v49 = v45[1];
      v50 = v49;
      if (v49 >= v8)
        v50 = v49 % v8;
      if (v50 != v44)
        break;
      v47 = v49 == v7 && v45[2] == a2[2];
      v48 = v46 & !v47;
      v46 |= v47;
    }
    while (v48 != 1);
  }
  else
  {
    v33 = (v8 - 1) & v7;
    v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
    if (!v34)
    {
      v38 = 0;
      v51 = a2[1];
      goto LABEL_75;
    }
    v35 = 0;
    do
    {
      v38 = v34;
      v34 = (_QWORD *)*v34;
      if (!v34)
        break;
      v39 = v34[1];
      if ((v39 & (v8 - 1)) != v33)
        break;
      v36 = v39 == v7 && v34[2] == a2[2];
      v37 = v35 & !v36;
      v35 |= v36;
    }
    while ((v37 & 1) == 0);
  }
  v51 = a2[1];
  if (v32.u32[0] <= 1uLL)
  {
LABEL_75:
    v51 &= v8 - 1;
    goto LABEL_78;
  }
  if (v51 >= v8)
LABEL_77:
    v51 %= v8;
LABEL_78:
  if (!v38)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = a1 + 16;
    if (!*a2)
      goto LABEL_92;
    v52 = *(_QWORD *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8)
        v52 %= v8;
    }
    else
    {
      v52 &= v8 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v52) = a2;
    goto LABEL_92;
  }
  *a2 = *v38;
  *v38 = a2;
  if (*a2)
  {
    v52 = *(_QWORD *)(*a2 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v52 >= v8)
        v52 %= v8;
    }
    else
    {
      v52 &= v8 - 1;
    }
    if (v52 != v51)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXA10FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXA10FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v5 == v12)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v5 == v11)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_232C5BD60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXA10FamilyFunctionHandle *>(float *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;

  v7 = a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = a3;
  v15[3] = a4;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
    goto LABEL_72;
  }
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *((_QWORD *)a1 + 1);
  }
  if (prime > v9)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_59;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
LABEL_59:
      v9 = prime;
      goto LABEL_60;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_59;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
          goto LABEL_64;
        }
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
      }
      v38 = v27;
LABEL_64:
      v25 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_59;
    }
  }
  if (prime >= v9)
    goto LABEL_60;
  v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
  {
    v33 = std::__next_prime(v33);
  }
  else
  {
    v35 = 1 << -(char)__clz(v33 - 1);
    if (v33 >= 2)
      v33 = v35;
  }
  if (prime <= v33)
    prime = v33;
  if (prime < v9)
  {
    if (!prime)
    {
      v42 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v42)
        operator delete(v42);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v9 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v7)
      v7 %= v9;
  }
  else
  {
    v7 &= v9 - 1;
  }
LABEL_72:
  v39 = *(_QWORD **)a1;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v40)
  {
    *v15 = *v40;
LABEL_80:
    *v40 = v15;
    goto LABEL_81;
  }
  *v15 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v15;
  v39[v7] = a1 + 4;
  if (*v15)
  {
    v41 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9)
        v41 %= v9;
    }
    else
    {
      v41 &= v9 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_232C5C1C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_232C5C49C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

uint64_t AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::useResourcesCommon(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t a4, __int16 a5)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(result + 1480))
  {
    if (a3)
    {
      v6 = a3;
      if ((a5 & 0x82A) != 0)
      {
        do
        {
          if (*a2)
          {
            MTLResourceListAddResource();
            result = IOGPUResourceListAddResource();
          }
          ++a2;
          --v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          if (*a2)
          {
            MTLResourceListAddResource();
            result = IOGPUResourceListAddResource();
          }
          ++a2;
          --v6;
        }
        while (v6);
      }
    }
  }
  else if (a3)
  {
    v7 = a3;
    if ((a5 & 0x82A) != 0)
    {
      do
      {
        if (*a2)
          result = IOGPUResourceListAddResource();
        ++a2;
        --v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        if (*a2)
          result = IOGPUResourceListAddResource();
        ++a2;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::useHeaps(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  if (*(_QWORD *)(result + 1480))
  {
    if (a3)
    {
      v4 = 0;
      v5 = a3;
      do
      {
        v6 = *(_QWORD **)(a2 + 8 * v4);
        result = objc_msgSend(v6, "type");
        if (result == 2)
        {
          for (i = v6[7]; i != v6[8]; i += 8)
          {
            MTLResourceListAddResource();
            result = IOGPUResourceListAddResource();
          }
        }
        else if (v6)
        {
          MTLResourceListAddResource();
          result = IOGPUResourceListAddResource();
        }
        ++v4;
      }
      while (v4 != v5);
    }
  }
  else if (a3)
  {
    v8 = 0;
    v9 = a3;
    do
    {
      v10 = *(_QWORD **)(a2 + 8 * v8);
      result = objc_msgSend(v10, "type");
      if (result == 2)
      {
        v11 = v10[7];
        v12 = v10 + 1;
        while (v11 != v12[7])
        {
          v11 += 8;
          result = IOGPUResourceListAddResource();
        }
      }
      else if (v10)
      {
        result = IOGPUResourceListAddResource();
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

_DWORD *AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  id *v10;
  int v11;
  _DWORD *v12;

  v4 = *(_DWORD **)(a1 + 1552);
  v5 = (char *)v4 + a2;
  if ((unint64_t)v4 + a2 > *(_QWORD *)(a1 + 1560))
  {
    IOGPUMetalCommandBufferStorageGrowKernelCommandBuffer();
    v6 = *(_QWORD *)(a1 + 8);
    v4 = *(_DWORD **)(v6 + 48);
    *(_QWORD *)(a1 + 1552) = v4;
    *(_QWORD *)(a1 + 1560) = *(_QWORD *)(v6 + 56);
    v5 = (char *)v4 + a2;
  }
  *(_QWORD *)(a1 + 1552) = v5;
  *(_QWORD *)(a1 + 1568) = a2;
  *v4 = 0x10000;
  v4[1] = a2;
  IOGPUMetalCommandBufferStorageBeginSegment();
  v7 = 0;
  v8 = 0;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + v7 + 24))
    {
      if (((1 << v8) & 0x3B39E0480) == 0 || *(_QWORD *)(a1 + v7 + 64) != 0)
        AGX::DataBufferAllocator<34ul>::initializeDataBuffer(a1 + 16, v8);
    }
    ++v8;
    v7 += 32;
  }
  while (v7 != 1088);
  *(_BYTE *)(a1 + 1504) = 1;
  v10 = *(id **)(*(_QWORD *)a1 + 688);
  v11 = *(unsigned __int8 *)v10;
  if (*(_BYTE *)v10)
  {
    if ((objc_msgSend(v10[1], "ownedByParallelEncoder") & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      *(_BYTE *)v10 = 0;
      v11 = 4;
    }
  }
  v4[2] = v11;
  v12 = v4 + 2;
  v12[4] = 0;
  v12[1] = 0;
  v12[2] = 0;
  return v12;
}

BOOL AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::userDrawTokenIndex(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  _BOOL8 result;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;
  __int16 v15;
  _DWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2 && a3)
  {
    v5 = *(_DWORD *)(a1 + 1528);
    if (v5 == *(_DWORD *)(a1 + 1532))
    {
      return 0;
    }
    else
    {
      *a2 = v5;
      *a3 = *(_DWORD *)(a1 + 1532) - 1;
      *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a1 + 1532);
      return 1;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Invalid parameters! (tokenIndexMin = 0x%p, tokenIndexMax = 0x%p)\n", "agxa_context_template.hpp", 146, "userDrawTokenIndex", a2, a3);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v8 = "agxa_context_template.hpp";
      v9 = 1024;
      v10 = 146;
      v11 = 2080;
      v12 = "userDrawTokenIndex";
      v13 = 2048;
      v14 = a2;
      v15 = 2048;
      v16 = a3;
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Invalid parameters! (tokenIndexMin = 0x%p, tokenIndexMax = 0x%p)\n", buf, 0x30u);
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)buf = 136316162;
      v8 = "agxa_context_template.hpp";
      v9 = 1024;
      v10 = 146;
      v11 = 2080;
      v12 = "userDrawTokenIndex";
      v13 = 2048;
      v14 = a2;
      v15 = 2048;
      v16 = a3;
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Invalid parameters! (tokenIndexMin = 0x%p, tokenIndexMax = 0x%p)\n", buf, 0x30u);
      return 0;
    }
  }
  return result;
}

BOOL FenceEncoder::encode(AGX::SidebandBufferAllocator *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unint64_t i;
  unint64_t j;
  unint64_t k;
  unint64_t m;
  int v27;
  int v28;
  unsigned int v30;

  if (a4)
  {
    v12 = *(_DWORD *)(a4 + 528);
    if (a6)
      goto LABEL_3;
  }
  else
  {
    v12 = 0;
    if (a6)
    {
LABEL_3:
      v13 = *(_DWORD *)(a6 + 528);
      if (a5)
        goto LABEL_4;
LABEL_8:
      v14 = 0;
      if (a7)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  v13 = 0;
  if (!a5)
    goto LABEL_8;
LABEL_4:
  v14 = *(_DWORD *)(a5 + 528);
  if (a7)
  {
LABEL_5:
    v15 = *(_DWORD *)(a7 + 528);
    goto LABEL_10;
  }
LABEL_9:
  v15 = 0;
LABEL_10:
  v16 = v14 + v13 + v12;
  v17 = v15 + v16;
  if (!(v15 + v16))
  {
    *(_QWORD *)(a3 + 8) = 0;
    return v17 != 0;
  }
  v27 = v14 + v13 + v12;
  v28 = v15 + v16;
  v18 = ((2 * v17 + 7) & 0xFFFFFFF8) + 16;
  v30 = 0;
  v19 = (_DWORD *)AGX::SidebandBufferAllocator::allocate(a1, v18, 1u, &v30);
  *v19 = v12;
  v19[1] = v13;
  v19[2] = v14;
  v19[3] = v15;
  v20 = v30;
  *(_DWORD *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 12) = v20;
  v21 = (unsigned __int16 *)(v19 + 4);
  if (!v12)
  {
    v17 = v28;
    if (!v13)
      goto LABEL_25;
    AGX::FenceList::copyFences(a6, v21);
    if (!a2)
      goto LABEL_25;
    goto LABEL_20;
  }
  AGX::FenceList::copyFences(a4, v21);
  if ((a2 & 1) != 0)
  {
    for (i = *(_QWORD *)(a4 + 512); i; i &= i - 1)
      bzero(*(void **)(a4 + 8 * __clz(__rbit64(i))), 0x88uLL);
    *(_DWORD *)(a4 + 528) = 0;
    v17 = v28;
    if (v13)
    {
      AGX::FenceList::copyFences(a6, &v21[v12]);
LABEL_20:
      for (j = *(_QWORD *)(a6 + 512); j; j &= j - 1)
        bzero(*(void **)(a6 + 8 * __clz(__rbit64(j))), 0x88uLL);
      *(_DWORD *)(a6 + 528) = 0;
    }
  }
  else
  {
    v17 = v28;
    if (v13)
      AGX::FenceList::copyFences(a6, &v21[v12]);
  }
LABEL_25:
  if (!v14)
  {
    if (!v15)
      return v17 != 0;
    AGX::FenceList::copyFences(a7, &v21[v27]);
    if (!a2)
      return v17 != 0;
    goto LABEL_33;
  }
  AGX::FenceList::copyFences(a5, &v21[v13 + v12]);
  if ((a2 & 1) != 0)
  {
    for (k = *(_QWORD *)(a5 + 512); k; k &= k - 1)
      bzero(*(void **)(a5 + 8 * __clz(__rbit64(k))), 0x88uLL);
    *(_DWORD *)(a5 + 528) = 0;
    if (v15)
    {
      AGX::FenceList::copyFences(a7, &v21[v27]);
LABEL_33:
      for (m = *(_QWORD *)(a7 + 512); m; m &= m - 1)
        bzero(*(void **)(a7 + 8 * __clz(__rbit64(m))), 0x88uLL);
      *(_DWORD *)(a7 + 528) = 0;
    }
  }
  else if (v15)
  {
    AGX::FenceList::copyFences(a7, &v21[v27]);
  }
  return v17 != 0;
}

int64x2_t AGX::G9::ContextSwitcher::setupComputeCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int64x2_t result;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];

  v9 = a5[46];
  if (!v9)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a5, 10, 0))
      goto LABEL_39;
    v9 = a5[46];
  }
  v10 = v9 + 24711;
  if ((unint64_t)(v9 + 24711) <= a5[45])
  {
LABEL_3:
    a5[47] = v10;
    goto LABEL_4;
  }
  v37 = AGX::DataBufferAllocator<34ul>::growNoInline(a5, 10, 0);
  v9 = a5[46];
  if (v37)
  {
    v10 = v9 + 24711;
    if ((unint64_t)(v9 + 24711) > a5[45])
      goto LABEL_39;
    goto LABEL_3;
  }
LABEL_4:
  v11 = (char *)((v9 + 31) & 0xFFFFFFFFFFFFFFE0);
  v12 = &v11[a5[48]];
  a5[46] = v11 + 24680;
  bzero(v11, 0x20uLL);
  v48[0] = v12 + 32;
  v48[1] = v12;
  v43 = *(_QWORD *)(a1 + 352);
  v44 = *(_OWORD *)(a1 + 360);
  v45 = *(_QWORD *)(a2 + 352);
  v46 = *(_QWORD *)(a1 + 376);
  v47 = *(_QWORD *)(a2 + 360);
  v13 = *(_DWORD *)(a1 + 308);
  v14 = *(_DWORD *)(a1 + 312);
  v15 = *(unsigned int *)(a1 + 304);
  v16 = a5[26];
  v17 = v16 + v15;
  if ((unint64_t)(v16 + v15) <= a5[25])
  {
LABEL_5:
    a5[27] = v17;
    goto LABEL_6;
  }
  v38 = AGX::DataBufferAllocator<34ul>::growNoInline(a5, 5, 0);
  v16 = a5[26];
  if (v38)
  {
    v17 = v16 + v15;
    if ((unint64_t)(v16 + v15) > a5[25])
      goto LABEL_39;
    goto LABEL_5;
  }
LABEL_6:
  v40 = a5[28];
  v18 = v16 + 4 * (v14 + v13);
  a5[26] = v18;
  v19 = (unsigned int *)(a1 + 176);
  if (*(_DWORD *)(a1 + 308))
  {
    v20 = 0;
    do
    {
      v21 = v19 + 2;
      *(_DWORD *)(v16 + (v19[1] & 0xFFFFFFFC)) = *((_DWORD *)v48 + *v19);
      ++v20;
      v22 = *(unsigned int *)(a1 + 308);
      v19 += 2;
    }
    while (v20 < v22);
    v19 = v21;
  }
  else
  {
    v22 = 0;
  }
  v41 = (unint64_t)v12;
  if (*(_DWORD *)(a1 + 312))
  {
    v23 = 0;
    do
    {
      *(_DWORD *)(v16 + 4 * v22 + 4 * v23) = v19[v23];
      ++v23;
    }
    while (v23 < *(_DWORD *)(a1 + 312));
  }
  v24 = *(_DWORD *)(a2 + 308);
  v25 = *(_DWORD *)(a2 + 312);
  v26 = *(unsigned int *)(a2 + 304);
  v27 = v18 + v26;
  if ((unint64_t)(v18 + v26) <= a5[25])
    goto LABEL_15;
  v39 = AGX::DataBufferAllocator<34ul>::growNoInline(a5, 5, 0);
  v18 = a5[26];
  if (v39)
  {
    v27 = v18 + v26;
    if ((unint64_t)(v18 + v26) <= a5[25])
    {
LABEL_15:
      a5[27] = v27;
      goto LABEL_16;
    }
LABEL_39:
    abort();
  }
LABEL_16:
  v28 = v41;
  v42 = a5[28];
  a5[26] = v18 + 4 * (v25 + v24);
  v29 = (unsigned int *)(a2 + 176);
  if (!*(_DWORD *)(a2 + 308))
  {
    v32 = 0;
    if (!*(_DWORD *)(a2 + 312))
      goto LABEL_24;
    goto LABEL_22;
  }
  v30 = 0;
  do
  {
    v31 = v29 + 2;
    *(_DWORD *)(v18 + (v29[1] & 0xFFFFFFFC)) = *((_DWORD *)v48 + *v29);
    ++v30;
    v32 = *(unsigned int *)(a2 + 308);
    v29 += 2;
  }
  while (v30 < v32);
  v29 = v31;
  if (*(_DWORD *)(a2 + 312))
  {
LABEL_22:
    v33 = 0;
    do
    {
      *(_DWORD *)(v18 + 4 * v32 + 4 * v33) = v29[v33];
      ++v33;
    }
    while (v33 < *(_DWORD *)(a2 + 312));
  }
LABEL_24:
  v34 = *(_DWORD *)(a1 + 28);
  do
  {
    v34 &= ~(1 << __clz(__rbit32(v34)));
    IOGPUResourceListAddResource();
  }
  while (v34);
  v35 = *(_DWORD *)(a2 + 28);
  do
  {
    v35 &= ~(1 << __clz(__rbit32(v35)));
    IOGPUResourceListAddResource();
  }
  while (v35);
  *(_QWORD *)(a3 + 8) = v28;
  *(_OWORD *)(a3 + 48) = v44;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v45 | (((unint64_t)(v42 + v18) << 32) + 0xF00000000) & 0xFFFFFFF000000000;
  *(_QWORD *)(a3 + 80) = v47;
  *(_QWORD *)(a3 + 88) = (v28 + 24623) & 0xFFFFFFFFFFFFFFF0;
  result = vaddq_s64(vdupq_n_s64(v28), (int64x2_t)xmmword_232D734D0);
  *(int64x2_t *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 32) = v28 + 12;
  *(_QWORD *)(a3 + 40) = v43 | (((unint64_t)(v40 + v16) << 32) + 0xF00000000) & 0xFFFFFFF000000000;
  return result;
}

int64x2_t AGX::G9::ContextSwitcher::setupRenderCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int64x2_t v33;
  int64x2_t result;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v9 = a5[46];
  if (!v9)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a5, 10, 0))
      goto LABEL_39;
    v9 = a5[46];
  }
  v10 = v9 + 25515;
  if ((unint64_t)(v9 + 25515) <= a5[45])
  {
LABEL_3:
    a5[47] = v10;
    goto LABEL_4;
  }
  v35 = AGX::DataBufferAllocator<34ul>::growNoInline(a5, 10, 0);
  v9 = a5[46];
  if (v35)
  {
    v10 = v9 + 25515;
    if ((unint64_t)(v9 + 25515) > a5[45])
      goto LABEL_39;
    goto LABEL_3;
  }
LABEL_4:
  v11 = (char *)((v9 + 31) & 0xFFFFFFFFFFFFFFE0);
  v12 = (unint64_t)&v11[a5[48]];
  a5[46] = v11 + 25484;
  bzero(v11, 0x20uLL);
  v50[0] = v12 + 32;
  v50[1] = v12;
  v47 = *(unsigned int *)(a1 + 328);
  v43 = *(_QWORD *)(a1 + 320);
  v44 = *(_QWORD *)(a1 + 340);
  v45 = *(_QWORD *)(a1 + 332);
  v46 = *(unsigned int *)(a1 + 348);
  v13 = *(unsigned int *)(a2 + 328);
  v14 = *(_QWORD *)(a2 + 332);
  v48 = *(_QWORD *)(a2 + 320);
  v49 = *(_QWORD *)(a2 + 340);
  v15 = *(unsigned int *)(a1 + 160);
  v16 = a5[26];
  v17 = v16 + v15;
  v42 = *(unsigned int *)(a2 + 348);
  if ((unint64_t)(v16 + v15) <= a5[25])
  {
LABEL_5:
    a5[27] = v17;
    goto LABEL_6;
  }
  v36 = AGX::DataBufferAllocator<34ul>::growNoInline(a5, 5, 0);
  v16 = a5[26];
  if (v36)
  {
    v17 = v16 + v15;
    if ((unint64_t)(v16 + v15) > a5[25])
      goto LABEL_39;
    goto LABEL_5;
  }
LABEL_6:
  v40 = a5[28];
  v18 = v16 + (*(_DWORD *)(a1 + 160) & 0xFFFFFFFC);
  a5[26] = v18;
  v19 = (unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 164))
  {
    v20 = 0;
    do
    {
      v21 = v19 + 2;
      *(_DWORD *)(v16 + (v19[1] & 0xFFFFFFFC)) = *((_DWORD *)v50 + *v19);
      ++v20;
      v22 = *(unsigned int *)(a1 + 164);
      v19 += 2;
    }
    while (v20 < v22);
    v19 = v21;
  }
  else
  {
    v22 = 0;
  }
  v41 = v14;
  if (*(_DWORD *)(a1 + 168))
  {
    v23 = 0;
    do
    {
      *(_DWORD *)(v16 + 4 * v22 + 4 * v23) = v19[v23];
      ++v23;
    }
    while (v23 < *(_DWORD *)(a1 + 168));
  }
  v24 = *(unsigned int *)(a2 + 160);
  v25 = v18 + v24;
  if ((unint64_t)(v18 + v24) <= a5[25])
    goto LABEL_15;
  v37 = AGX::DataBufferAllocator<34ul>::growNoInline(a5, 5, 0);
  v18 = a5[26];
  if (v37)
  {
    v25 = v18 + v24;
    if ((unint64_t)(v18 + v24) <= a5[25])
    {
LABEL_15:
      a5[27] = v25;
      goto LABEL_16;
    }
LABEL_39:
    abort();
  }
LABEL_16:
  v38 = a5[28];
  a5[26] = v18 + (*(_DWORD *)(a2 + 160) & 0xFFFFFFFC);
  v26 = (unsigned int *)(a2 + 32);
  if (*(_DWORD *)(a2 + 164))
  {
    v27 = 0;
    do
    {
      v28 = v26 + 2;
      *(_DWORD *)(v18 + (v26[1] & 0xFFFFFFFC)) = *((_DWORD *)v50 + *v26);
      ++v27;
      v29 = *(unsigned int *)(a2 + 164);
      v26 += 2;
    }
    while (v27 < v29);
    v26 = v28;
  }
  else
  {
    v29 = 0;
  }
  v39 = v13;
  if (*(_DWORD *)(a2 + 168))
  {
    v30 = 0;
    do
    {
      *(_DWORD *)(v18 + 4 * v29 + 4 * v30) = v26[v30];
      ++v30;
    }
    while (v30 < *(_DWORD *)(a2 + 168));
  }
  v31 = *(_DWORD *)(a1 + 24);
  do
  {
    v31 &= ~(1 << __clz(__rbit32(v31)));
    IOGPUResourceListAddResource();
  }
  while (v31);
  v32 = *(_DWORD *)(a2 + 24);
  do
  {
    v32 &= ~(1 << __clz(__rbit32(v32)));
    IOGPUResourceListAddResource();
  }
  while (v32);
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 56) = v47;
  *(_QWORD *)(a3 + 64) = v45;
  *(_QWORD *)(a3 + 112) = v44;
  *(_QWORD *)(a3 + 120) = v46;
  *(_QWORD *)(a3 + 72) = (((unint64_t)(v38 + v18) << 32) + 0xF00000000) & 0xFFFFFFF000000000 | v48 & 0xFFFFFFFFFLL;
  *(_QWORD *)(a3 + 80) = v39;
  *(_QWORD *)(a3 + 88) = v41;
  *(_QWORD *)(a3 + 136) = v49;
  *(_QWORD *)(a3 + 144) = v42;
  v33 = vdupq_n_s64(v12);
  *(int8x16_t *)(a3 + 96) = vandq_s8((int8x16_t)vaddq_s64(v33, (int64x2_t)xmmword_232D734F0), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0));
  result = vaddq_s64(v33, (int64x2_t)xmmword_232D734D0);
  *(int64x2_t *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 40) = v12 + 12;
  *(_QWORD *)(a3 + 48) = (((unint64_t)(v40 + v16) << 32) + 0xF00000000) & 0xFFFFFFF000000000 | v43 & 0xFFFFFFFFFLL;
  return result;
}

uint64_t AGX::DataBufferAllocator<34ul>::doBufferRandomization(uint64_t result, _QWORD *a2)
{
  int v2;
  _DWORD *v3;
  unint64_t i;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2[4])
  {
    v2 = *(_DWORD *)(result + 1424);
    if (v2 == 2)
    {
      v5 = a2[1];
      v6 = a2[3];
      if (v6 <= v5)
      {
        v8 = 0;
      }
      else
      {
        v7 = random();
        do
        {
          v8 = v7;
          v9 = v5 + 4 * v7;
          v7 >>= 1;
        }
        while (v9 >= v6);
      }
      result = random();
      *(_DWORD *)(v5 + 4 * v8) = result;
    }
    else if (v2 == 1)
    {
      v3 = (_DWORD *)a2[1];
      for (i = a2[2]; (unint64_t)v3 < i; ++v3)
      {
        result = random();
        *v3 = result;
      }
    }
  }
  return result;
}

uint64_t AGX::DataBufferAllocator<34ul>::grow(uint64_t a1, unsigned int a2, int a3)
{
  int v3;
  uint64_t v5;
  size_t v6;
  const void *v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const void *v20;
  void **v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  uint64_t v43;
  size_t v44;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (a2 == 32)
  {
    v6 = *(_QWORD *)(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1432) + 256), "resourceArgs") + 72);
    v7 = *(const void **)(a1 + 1384);
    v8 = malloc_type_malloc(v6, 0xC3DFA88EuLL);
    v9 = v8;
    *(_QWORD *)(a1 + 1384) = v8;
    v10 = *(char **)(a1 + 1408);
    v11 = *(_QWORD *)(a1 + 1416);
    if ((unint64_t)v10 < v11)
    {
      *(_QWORD *)v10 = v8;
      v12 = v10 + 8;
LABEL_33:
      *(_QWORD *)(a1 + 1408) = v12;
      v41 = *(char **)(a1 + 1384);
      if (v3)
      {
        v42 = *(_QWORD *)(a1 + 1072) - (_QWORD)v7;
        memcpy(v41, v7, v42);
        v41 = *(char **)(a1 + 1384);
      }
      else
      {
        v42 = 0;
      }
      *(_QWORD *)(a1 + 1072) = &v41[v42];
      *(_QWORD *)(a1 + 1064) = &v41[v6 - *(_QWORD *)(v5 + 1040) - *(_QWORD *)(v5 + 1032)];
      *(_QWORD *)(a1 + 1080) = &v41[v42];
      *(_QWORD *)(a1 + 1088) = -(uint64_t)((unint64_t)&v41[v42] & 0xFFFFFFFF00000000);
      return 1;
    }
    v44 = v6;
    v24 = *(char **)(a1 + 1400);
    v25 = (v10 - v24) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      abort();
    v27 = v3;
    v28 = v11 - (_QWORD)v24;
    if (v28 >> 2 > v26)
      v26 = v28 >> 2;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v26;
    if (v29)
    {
      if (v29 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v30 = operator new(8 * v29);
    }
    else
    {
      v30 = 0;
    }
    v32 = &v30[8 * v25];
    v33 = &v30[8 * v29];
    *v32 = v9;
    v12 = v32 + 1;
    if (v10 == v24)
    {
      v24 = v10;
      v3 = v27;
      v6 = v44;
      goto LABEL_31;
    }
    v34 = v10 - v24 - 8;
    v3 = v27;
    if (v34 >= 0x58)
    {
      v6 = v44;
      if ((unint64_t)(v24 - v30) >= 0x20)
      {
        v35 = (v34 >> 3) + 1;
        v36 = &v30[8 * v25 - 16];
        v37 = v10 - 16;
        v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v39 = *(_OWORD *)v37;
          *(v36 - 1) = *((_OWORD *)v37 - 1);
          *v36 = v39;
          v36 -= 2;
          v37 -= 32;
          v38 -= 4;
        }
        while (v38);
        v32 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
        v10 -= 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
      }
    }
    else
    {
      v6 = v44;
    }
    do
    {
      v40 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *--v32 = v40;
    }
    while (v10 != v24);
    v24 = *(char **)(a1 + 1400);
LABEL_31:
    *(_QWORD *)(a1 + 1400) = v32;
    *(_QWORD *)(a1 + 1408) = v12;
    *(_QWORD *)(a1 + 1416) = v33;
    if (v24)
      operator delete(v24);
    goto LABEL_33;
  }
  v14 = a2;
  v15 = a1 + 32 * a2;
  v17 = *(_QWORD *)(v15 + 48);
  v16 = (void **)(v15 + 48);
  v43 = v17;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(v18 + ((unint64_t)a2 << 6));
  v21 = (void **)(v19 + 3);
  v20 = (const void *)v19[3];
  if (*(_DWORD *)(a1 + 1424))
    AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1, (_QWORD *)(v18 + ((unint64_t)a2 << 6)));
  IOGPUMetalCommandBufferStorageAllocResourceAtIndex();
  if (IOGPUResourceListAddResource() == -1)
    return 0;
  v22 = (char *)*v21;
  *v16 = *v21;
  v23 = *(_QWORD *)(v18 + (v14 << 6) + 8);
  *(v16 - 1) = (void *)(*(_QWORD *)(v18 + (v14 << 6) + 16)
                      - (*(_QWORD *)(v5 + 32 * v14 + 16)
                       + *(_QWORD *)(v5 + 32 * v14 + 8)));
  *(_QWORD *)(a1 + 32 * v14 + 64) = *v19 - v23;
  if (a3)
  {
    memcpy(v22, v20, v43 - (_QWORD)v20);
    v22 = (char *)*v16 + v43 - (_QWORD)v20;
    *v16 = v22;
  }
  *(_QWORD *)(a1 + 32 * v14 + 56) = v22;
  return 1;
}

uint64_t AGX::DataBufferAllocator<34ul>::resize(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(void **)(*(_QWORD *)(a1 + 1432) + 264);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 2144);
  if (v3)
    v4 = 2 * (*(_QWORD *)(v3 + (int)*MEMORY[0x24BE51650] + 40) & 0xFFFFFFFFFFFFFFLL);
  else
    v4 = 0;
  os_unfair_lock_lock(&stru_255FF8B64);
  if (v4 > *(_QWORD *)(objc_msgSend(v2, "resourceArgs") + 72))
  {
    v5 = objc_msgSend(v2, "resourceArgsSize");
    v6 = malloc_type_malloc(v5, 0x5CC47251uLL);
    memcpy(v6, (const void *)objc_msgSend(v2, "resourceArgs"), v5);
    *((_WORD *)v6 + 4) = v4;
    *((_QWORD *)v6 + 9) = v4;
    objc_msgSend(v2, "setResourceArgs:resourceArgsSize:", v6, v5);
    free(v6);
  }
  os_unfair_lock_unlock(&stru_255FF8B64);
  return AGX::DataBufferAllocator<34ul>::grow(a1, 0x21u, 0);
}

void sub_232C5DB80(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&stru_255FF8B64);
  _Unwind_Resume(a1);
}

void AGX::DataBufferAllocator<34ul>::initializeDataBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  _QWORD *v18;
  uint64_t v19;

  if (a2 == 32)
  {
    AGX::DataBufferAllocator<34ul>::initializeDataBufferCPUOnly((_QWORD *)a1);
  }
  else
  {
    v3 = a2;
    v4 = 32 * a2;
    v5 = (_QWORD *)(a1 + v4 + 40);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = (_QWORD *)(v6 + ((unint64_t)a2 << 6));
    v8 = *(_QWORD *)a1 + v4;
    v9 = (_QWORD *)(v8 + 16);
    v10 = (_QWORD *)(v8 + 8);
    v11 = v7 + 2;
    v12 = v7 + 3;
    v13 = 32 * a2;
    if (!v7[4]
      || (v14 = *v11, v15 = *v12, v16 = *v10 + *v9, v16 + *(_QWORD *)(*(_QWORD *)a1 + 32 * a2) > *v11 - *v12))
    {
      v18 = v5;
      v19 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(a1 + 1424))
        AGX::DataBufferAllocator<34ul>::doBufferRandomization(a1, (_QWORD *)(v6 + ((unint64_t)a2 << 6)));
      IOGPUMetalCommandBufferStorageAllocResourceAtIndex();
      v15 = *v12;
      v14 = *v11;
      v16 = *v9 + *v10;
      v6 = v19;
      v5 = v18;
    }
    v17 = (int64x2_t *)(a1 + v13);
    *v5 = v14 - v16;
    v17[4].i64[0] = *v7 - *(_QWORD *)(v6 + (v3 << 6) + 8);
    v17[3] = vdupq_n_s64(v15);
    IOGPUResourceListAddResource();
  }
}

void AGX::DataBufferAllocator<34ul>::initializeDataBufferCPUOnly(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v2 = (_QWORD *)*a1;
  v3 = a1[173];
  if (!v3)
  {
    v4 = malloc_type_malloc(v2[129] + v2[130] + v2[128], 0x7FD813A7uLL);
    v5 = v4;
    a1[173] = v4;
    v6 = (char *)a1[176];
    v7 = a1[177];
    if ((unint64_t)v6 >= v7)
    {
      v9 = (char *)a1[175];
      v10 = (v6 - v9) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v12 = v7 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v14 = operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v5;
      v8 = v15 + 1;
      if (v6 == v9)
      {
        v9 = v6;
      }
      else
      {
        v17 = v6 - v9 - 8;
        if (v17 < 0x58)
          goto LABEL_31;
        if ((unint64_t)(v9 - v14) < 0x20)
          goto LABEL_31;
        v18 = (v17 >> 3) + 1;
        v19 = &v14[8 * v10 - 16];
        v20 = v6 - 16;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            v23 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v15 = v23;
          }
          while (v6 != v9);
          v9 = (char *)a1[175];
        }
      }
      a1[175] = v15;
      a1[176] = v8;
      a1[177] = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v6 = v4;
      v8 = v6 + 8;
    }
    a1[176] = v8;
    v3 = a1[173];
  }
  a1[134] = v3;
  a1[133] = v3 + v2[128];
  a1[135] = v3;
  a1[136] = -(uint64_t)(v3 & 0xFFFFFFFF00000000);
}

uint64_t AGX::DataBufferAllocator<34ul>::getGPUAddress(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  v3 = a2;
  if (((1 << a2) & 0x3B39E0480) != 0 && !*(_QWORD *)(a1 + 32 * a2 + 48))
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1);
  return *(_QWORD *)(a1 + 32 * v3 + 64) + *(_QWORD *)(a1 + 32 * v3 + 48);
}

void sub_232C6129C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD **a24,char **a25,char **a26,void **a27,AGX::G9::HeapSet *a28,uint64_t a29,uint64_t a30,AGX::G9::DevicePDSStateLoader *a31)
{
  uint64_t v31;
  _QWORD **v32;
  char **v33;
  void *v35;
  void *v36;

  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v31 + 6880);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a24);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*v32);
  std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>>>::destroy(*v33);
  v35 = *(void **)(v31 + 6480);
  if (v35)
  {
    *(_QWORD *)(v31 + 6488) = v35;
    operator delete(v35);
  }
  std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>>>::destroy(*a25);
  std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen1,std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen1>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>>>::destroy(*a26);
  AGX::FenceGroupPool::~FenceGroupPool((AGX::FenceGroupPool *)(v31 + 6192));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v31 + 6104));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v31 + 6024));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v31 + 5936));
  AGX::PooledAllocator<16u>::~PooledAllocator((os_unfair_lock_s *)(v31 + 5792));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v31 + 5712));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v31 + 5632));
  v36 = *a27;
  if (*a27)
  {
    *(_QWORD *)(v31 + 5616) = v36;
    operator delete(v36);
  }

  AGX::G9::DevicePDSStateLoader::~DevicePDSStateLoader((AGX::G9::DevicePDSStateLoader *)(v31 + 5328));
  AGX::G9::HeapSet::~HeapSet(a28);
  MEMORY[0x234927ECC](v31, 0x10F0C4083933968);
  _Unwind_Resume(a1);
}

void sub_232C62728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_232C6408C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_232C6442C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_232C651D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  os_unfair_lock_s *v21;

  os_unfair_lock_unlock(v21);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_232C65B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_232C67CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;

  a61 = *v61;
  *(uint64_t *)((char *)&a61 + *(_QWORD *)(a61 - 24)) = v61[3];
  MEMORY[0x234927D70](v62);
  std::istream::~istream();
  MEMORY[0x234927E9C](a15);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_254235CB4);
  MEMORY[0x234927EB4](a24, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_232C67E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if ((a44 & 0x80000000) == 0)
    JUMPOUT(0x232C67E3CLL);
  JUMPOUT(0x232C67DF0);
}

void sub_232C6927C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  char *__srca;

  if (a5 < 1)
    return;
  v10 = *a1;
  v9 = (char *)a1[1];
  v11 = (uint64_t)a2 - *a1;
  v12 = v11 >> 3;
  v13 = (_BYTE *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFF8));
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - (_QWORD)v9) >> 3)
  {
    __srca = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFF8));
    v15 = a5 + ((uint64_t)&v9[-v10] >> 3);
    if (v15 >> 61)
      abort();
    v16 = v14 - v10;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v41 = 8 * a5;
    v56 = v11 >> 3;
    v42 = &v18[8 * v12];
    memcpy(v42, __src, v41);
    if ((void *)v10 == a2)
    {
      v43 = v42;
    }
    else
    {
      v44 = v11 - 8;
      if ((unint64_t)(v11 - 8) >= 0x68)
      {
        v46 = (v11 & 0xFFFFFFFFFFFFFFF8) + v10 - (_QWORD)&v18[v11 & 0xFFFFFFFFFFFFFFF8];
        v45 = __srca;
        v43 = v42;
        if (v46 >= 0x20)
        {
          v47 = (v44 >> 3) + 1;
          v45 = &__srca[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          v48 = 8 * v56 - 16;
          v49 = (__int128 *)(v10 + v48);
          v50 = &v18[v48];
          v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v52 = *v49;
            *(v50 - 1) = *(v49 - 1);
            *v50 = v52;
            v49 -= 2;
            v50 -= 2;
            v51 -= 4;
          }
          while (v51);
          v43 = &v42[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_44;
        }
      }
      else
      {
        v45 = __srca;
        v43 = v42;
      }
      do
      {
        v53 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *((_QWORD *)v43 - 1) = v53;
        v43 -= 8;
      }
      while (v45 != (char *)v10);
    }
LABEL_44:
    v54 = &v18[8 * v17];
    v55 = v9 - __srca;
    if (v55)
      memmove(&v42[v41], __srca, v55);
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v42[v41 + v55];
    a1[2] = (unint64_t)v54;
    if (v10)
      operator delete((void *)v10);
    return;
  }
  v19 = (v9 - v13) >> 3;
  if (v19 >= a5)
  {
    v20 = &__src[8 * a5];
    v22 = (char *)a1[1];
    goto LABEL_18;
  }
  v20 = &__src[8 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(v9, &__src[8 * v19], a4 - v20);
  v22 = &v9[v21];
  a1[1] = (unint64_t)&v9[v21];
  if (v9 - v13 >= 1)
  {
    v12 = v11 >> 3;
LABEL_18:
    v23 = &v13[8 * a5];
    v24 = v22 - v23;
    v25 = (v22 - v23) >> 3;
    v26 = &v22[-8 * a5];
    v27 = v22;
    if (v26 < v9)
    {
      v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + v24;
      v29 = (char *)(v28 + v10);
      v30 = v28 + v10 + 8;
      if ((unint64_t)v9 > v30)
        v30 = (unint64_t)v9;
      v31 = v30 + ~v10 - v28;
      v32 = v22 - v29;
      v33 = v31 >= 0x58 && v32 > 0x1F;
      v27 = v22;
      if (!v33)
        goto LABEL_53;
      v34 = (v31 >> 3) + 1;
      v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      v26 += v35;
      v36 = v22 + 16;
      v37 = (__int128 *)(8 * v25 + 8 * v12 + v10 + 16);
      v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 4;
      }
      while (v38);
      v27 = &v22[v35];
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_53:
        do
        {
          v40 = *(_QWORD *)v26;
          v26 += 8;
          *(_QWORD *)v27 = v40;
          v27 += 8;
        }
        while (v26 < v9);
      }
    }
    a1[1] = (unint64_t)v27;
    if (v22 != v23)
      memmove(&v22[-8 * v25], v13, v24);
    if (v20 != __src)
      memmove(v13, __src, v20 - __src);
  }
}

dispatch_queue_t ___ZL20resource_group_queuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.Metal.ResourceGroupQueue", 0);
  resource_group_queue(void)::_resourceGroupQueue = (uint64_t)result;
  return result;
}

uint64_t AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~DeviceSWTessellationState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t k;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(v2 + 688);
    if (v3)
    {
      v4 = (unint64_t)*(unsigned int *)(v2 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v5 = *(NSObject **)(v3 + 24 * v4 + 144);
          if (v5)
            dispatch_release(v5);
          v6 = (v4 + 1);
          if (v6 < HIDWORD(v4))
            break;
          v3 = *(_QWORD *)(v3 + 224);
          v4 = 0x400000000;
          if (!v3)
            goto LABEL_10;
        }
        v4 = v4 & 0xFFFFFFFF00000000 | v6;
        if (!v3)
        {
LABEL_10:
          if (!(_DWORD)v4)
            break;
        }
      }
    }
    v7 = v2 + 456;
    for (i = 736; i != 984; i += 8)
    {
      v9 = *(_QWORD *)(v2 + i);
      if (v9)
      {
        if (*(char *)(v9 + 199) < 0)
          operator delete(*(void **)(v9 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 24));
        MEMORY[0x234927ECC](v9, 0x1032C40E5532501);
      }
    }
    v10 = *(_QWORD *)(v2 + 688);
    if (v10 != v7)
    {
      do
      {
        v11 = *(_QWORD *)(v10 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v2 + 688) = v11;
        v10 = v11;
      }
      while (v11 != v7);
    }
    v12 = *(_QWORD *)(v2 + 392);
    if (v12 != v2)
    {
      do
      {
        v13 = *(_QWORD *)(v12 + 384);
        v14 = VectorMap<AGX::TessellatorNonBucketedEmitDrawCommandsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(v12);
        MEMORY[0x234927ECC](v14, 0x10B0C407B6AF669);
        *(_QWORD *)(v2 + 392) = v13;
        v12 = v13;
      }
      while (v13 != v2);
    }
    v15 = *(NSObject **)(v2 + 408);
    if (v15)
      dispatch_release(v15);
    v16 = *(_QWORD *)(v2 + 416);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);

    v17 = VectorMap<AGX::TessellatorNonBucketedEmitDrawCommandsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(v2);
    MEMORY[0x234927ECC](v17, 0x10F0C4034BAE5F3);
  }
  v18 = *(_QWORD *)(a1 + 8);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 688);
    if (v19)
    {
      v20 = (unint64_t)*(unsigned int *)(v18 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v21 = *(NSObject **)(v19 + 24 * v20 + 144);
          if (v21)
            dispatch_release(v21);
          v22 = (v20 + 1);
          if (v22 < HIDWORD(v20))
            break;
          v19 = *(_QWORD *)(v19 + 224);
          v20 = 0x400000000;
          if (!v19)
            goto LABEL_35;
        }
        v20 = v20 & 0xFFFFFFFF00000000 | v22;
        if (!v19)
        {
LABEL_35:
          if (!(_DWORD)v20)
            break;
        }
      }
    }
    v23 = v18 + 456;
    for (j = 736; j != 984; j += 8)
    {
      v25 = *(_QWORD *)(v18 + j);
      if (v25)
      {
        if (*(char *)(v25 + 199) < 0)
          operator delete(*(void **)(v25 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 24));
        MEMORY[0x234927ECC](v25, 0x1032C40E5532501);
      }
    }
    v26 = *(_QWORD *)(v18 + 688);
    if (v26 != v23)
    {
      do
      {
        v27 = *(_QWORD *)(v26 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v18 + 688) = v27;
        v26 = v27;
      }
      while (v27 != v23);
    }
    v28 = *(_QWORD *)(v18 + 392);
    if (v28 != v18)
    {
      do
      {
        v29 = *(_QWORD *)(v28 + 384);
        v30 = VectorMap<AGX::TessellatorBucketedComputeInstanceCountsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(v28);
        MEMORY[0x234927ECC](v30, 0x10B0C407B6AF669);
        *(_QWORD *)(v18 + 392) = v29;
        v28 = v29;
      }
      while (v29 != v18);
    }
    v31 = *(NSObject **)(v18 + 408);
    if (v31)
      dispatch_release(v31);
    v32 = *(_QWORD *)(v18 + 416);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);

    v33 = VectorMap<AGX::TessellatorBucketedComputeInstanceCountsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(v18);
    MEMORY[0x234927ECC](v33, 0x10F0C4034BAE5F3);
  }
  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 688);
    if (v35)
    {
      v36 = (unint64_t)*(unsigned int *)(v34 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v37 = *(NSObject **)(v35 + 24 * v36 + 144);
          if (v37)
            dispatch_release(v37);
          v38 = (v36 + 1);
          if (v38 < HIDWORD(v36))
            break;
          v35 = *(_QWORD *)(v35 + 224);
          v36 = 0x400000000;
          if (!v35)
            goto LABEL_60;
        }
        v36 = v36 & 0xFFFFFFFF00000000 | v38;
        if (!v35)
        {
LABEL_60:
          if (!(_DWORD)v36)
            break;
        }
      }
    }
    v39 = v34 + 456;
    for (k = 736; k != 984; k += 8)
    {
      v41 = *(_QWORD *)(v34 + k);
      if (v41)
      {
        if (*(char *)(v41 + 199) < 0)
          operator delete(*(void **)(v41 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v41 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v41 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v41 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v41 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v41 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v41 + 24));
        MEMORY[0x234927ECC](v41, 0x1032C40E5532501);
      }
    }
    v42 = *(_QWORD *)(v34 + 688);
    if (v42 != v39)
    {
      do
      {
        v43 = *(_QWORD *)(v42 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v34 + 688) = v43;
        v42 = v43;
      }
      while (v43 != v39);
    }
    v44 = *(_QWORD *)(v34 + 392);
    if (v44 != v34)
    {
      do
      {
        v45 = *(_QWORD *)(v44 + 384);
        v46 = VectorMap<AGX::TessellatorBucketedEmitDrawCommandsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(v44);
        MEMORY[0x234927ECC](v46, 0x10B0C407B6AF669);
        *(_QWORD *)(v34 + 392) = v45;
        v44 = v45;
      }
      while (v45 != v34);
    }
    v47 = *(NSObject **)(v34 + 408);
    if (v47)
      dispatch_release(v47);
    v48 = *(_QWORD *)(v34 + 416);
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);

    v49 = VectorMap<AGX::TessellatorBucketedEmitDrawCommandsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(v34);
    MEMORY[0x234927ECC](v49, 0x10F0C4034BAE5F3);
  }
  v50 = *(uint64_t **)(a1 + 24);
  v51 = v50[1];
  if (!v51 || ((*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v50[1]), (v50 = *(uint64_t **)(a1 + 24)) != 0))
  {
    v52 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline(v50);
    MEMORY[0x234927ECC](v52, 0x10F0C40BAA3AEAALL);
  }
  v53 = *(uint64_t **)(a1 + 32);
  v54 = v53[1];
  if (!v54 || ((*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v53[1]), (v53 = *(uint64_t **)(a1 + 32)) != 0))
  {
    v55 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline(v53);
    MEMORY[0x234927ECC](v55, 0x10F0C40BAA3AEAALL);
  }

  v56 = *(_QWORD *)(a1 + 424);
  if (v56)
  {

    *(_QWORD *)(v56 + 8) = 0;
    MEMORY[0x234927ECC](v56, 0x10A0C4023802154);
  }
  v57 = *(_QWORD *)(a1 + 432);
  if (v57)
  {

    *(_QWORD *)(v57 + 8) = 0;
    MEMORY[0x234927ECC](v57, 0x10A0C4023802154);
  }
  return a1;
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t VectorMap<AGX::TessellatorBucketedEmitDrawCommandsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 336);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 288);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 240);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 192);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 144) = off_250400AF8;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 96) = off_250400AF8;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 48) = off_250400AF8;
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_250400AF8;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)46,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)46,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)46,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)46,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)46,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t VectorMap<AGX::TessellatorBucketedComputeInstanceCountsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 336);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 288);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 240);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 192);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 144) = off_250400AB8;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 96) = off_250400AB8;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 48) = off_250400AB8;
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_250400AB8;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)44,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)44,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)44,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)44,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)44,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t VectorMap<AGX::TessellatorNonBucketedEmitDrawCommandsProgramKey,AGX::ProgramVariantEntry<AGX::G9::VertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 336);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 288);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 240);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 192);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 144) = off_250400A78;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 96) = off_250400A78;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 48) = off_250400A78;
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_250400A78;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)43,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)43,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)43,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)43,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)43,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::TessellatorSharedKey<(_AGCStreamToken)44>::serialize(std::vector<unsigned int> *this, unsigned int **a2, _QWORD *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x51;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void AGX::TessellatorSharedKey<(_AGCStreamToken)46>::serialize(std::vector<unsigned int> *this, unsigned int **a2, _QWORD *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x51;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void AGX::TessellatorSharedKey<(_AGCStreamToken)43>::serialize(std::vector<unsigned int> *this, unsigned int **a2, _QWORD *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x51;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE9getBundleEv_block_invoke()
{
  void *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "allBundles");
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)v7;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v0);
        v5 = *(void **)(*((_QWORD *)&v6 + 1) + 8 * v4);
        result = objc_msgSend((id)objc_msgSend(v5, "bundleIdentifier"), "containsString:", CFSTR("AGXMetal"));
        if ((_DWORD)result)
        {
          AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::bundle = (uint64_t)v5;
          return result;
        }
        ++v4;
      }
      while (v2 != v4);
      result = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      v2 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::compileVisibleFunction(id **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  void *v14;
  int v15;
  unsigned int v16;
  int v17;
  void *v18;
  id *v19;
  NSObject *v20;
  _QWORD v21[7];
  std::vector<unsigned int> v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  void *v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  LODWORD(v22.__end_) = 8;
  v23 = 0;
  v24 = 0;
  v22.__end_cap_.__value_ = 0;
  v22.__begin_ = (std::vector<unsigned int>::pointer)off_250401290;
  v14 = (void *)objc_msgSend(0, "driverCompilerOptions");
  if (objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v15 = 4;
  else
    v15 = 0;
  v16 = v15 & 0xFC0003FF | ((unsigned __int16)objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue") << 10);
  if (objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v17 = 134218240;
  else
    v17 = 512;
  v25 = v16 | v17 | (*(unsigned __int8 *)(*(_QWORD *)(a4 + 808) + 6360) << 26) | 0x100;
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v18 = (void *)objc_msgSend(MEMORY[0x24BDDD520], "newVisibleRequestWithFunction:descriptor:", a3, a2);
  objc_msgSend(v18, "setSync:", a6 ^ 1u);
  objc_msgSend(v18, "setDestinationBinaryArchive:", a5);
  v19 = *a1;
  v21[0] = MEMORY[0x24BDAC760];
  v21[1] = 3221225472;
  v21[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE22compileVisibleFunctionEP21MTLFunctionDescriptorP12_MTLFunctionP18AGXA10FamilyDeviceP25AGXA10FamilyBinaryArchivebU13block_pointerFvPK21MTLBinaryRequestReply16MTLCompilerErrorP8NSStringE_block_invoke;
  v21[3] = &unk_250401260;
  v21[5] = a7;
  v21[6] = a1;
  v21[4] = a3;
  v26 = 0;
  v27 = 0;
  AGX::DynamicLibraryKey::serialize(&v22, (unsigned int **)&v27, &v26);
  v20 = dispatch_data_create(v27, v26, 0, 0);
  objc_msgSend(v18, "setDriverKeyData:", v20);
  memset(v28, 0, sizeof(v28));
  objc_msgSend(v18, "setVendorPluginFunctionId:", v28);
  objc_msgSend(*v19, "compileFunctionRequest:completionHandler:", v18, v21);
  dispatch_release(v20);

  if (v22.__end_cap_.__value_)
    operator delete(v22.__end_cap_.__value_);
}

void sub_232C6B0A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_232C6B0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE22compileVisibleFunctionEP21MTLFunctionDescriptorP12_MTLFunctionP18AGXA10FamilyDeviceP25AGXA10FamilyBinaryArchivebU13block_pointerFvPK21MTLBinaryRequestReply16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  if (*(_QWORD *)(a2 + 104))
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD588]), "initWithData:", *(_QWORD *)(a2 + 104));
    objc_msgSend(*(id *)(a1 + 32), "setDebugInstrumentationData:", v4);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::DynamicLibraryKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x4F;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXA10FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  AGXA10FamilyDynamicLibrary *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = -[AGXA10FamilyDynamicLibrary initWithBinaryData:name:device:]([AGXA10FamilyDynamicLibrary alloc], "initWithBinaryData:name:device:", v5, objc_msgSend(*(id *)(a1 + 32), "name"), *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "setVendorPrivate:", v6);

    objc_msgSend(*(id *)(a1 + 48), "setPrecompiledOutput:", MEMORY[0x24BDAC990]);
    v7 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 816);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 | 0x4000000000, v7));
    v9 = v7 + 1;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10, v9));
    result = *(_QWORD *)(a1 + 56);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  }
  else
  {
    v15 = MEMORY[0x24BDAC760];
    v16 = 3221225472;
    v17 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXA10FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke_2;
    v18 = &unk_250401210;
    v12 = *(_QWORD *)(a1 + 72);
    v19 = *(_QWORD *)(a1 + 56);
    v20 = v12;
    if (a3 > 3)
      v13 = 5;
    else
      v13 = qword_232D76128[a3];
    v14 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a4, *MEMORY[0x24BDD0FC8], v15, v16, v17, v18, v19, v20);
    return ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXA10FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke_2((uint64_t)&v15, 0, 0, (uint64_t)(id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v13, v14));
  }
  return result;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXA10FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v6;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  v6 = *(_QWORD **)(a1 + 40);
  if (v6)
    *v6 = a4;
  return result;
}

id AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createComputePipeline(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, _QWORD *a6, id a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[12];
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  id v40;
  id *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  uint64_t v45;
  _QWORD block[6];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;

  v14 = mach_absolute_time();
  if (_MTLCompilePerformanceStatisticsEnabled())
    v15 = a4 | 0x400000;
  else
    v15 = a4;
  if (!a6)
  {
    if (a2)
    {
      v40 = 0;
      if (objc_msgSend(a2, "validateWithDevice:error:", a3, &v40))
      {
LABEL_11:
        v32 = a5;
        if (a7)
          a2 = (void *)objc_msgSend(a2, "copy");
        AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDynamicLibrariesForFunctions(&v51, a3, objc_msgSend(a2, "computeFunction"), (void *)objc_msgSend(a2, "linkedFunctions"), (void *)objc_msgSend(a2, "preloadedLibraries"), (uint64_t)a6);
        v20 = v51;
        if (v51)
        {
          v21 = objc_msgSend(a2, "newSerializedComputeData");
          v22 = objc_msgSend(a2, "computeFunction");
          v47 = 0;
          v48 = &v47;
          v49 = 0x2020000000;
          v50 = 0;
          v23 = *(NSObject **)(a1 + 16);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 3221225472;
          block[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke;
          block[3] = &unk_250401140;
          block[4] = v22;
          block[5] = &v47;
          dispatch_sync(v23, block);
          v40 = 0;
          v41 = &v40;
          v42 = 0x3052000000;
          v43 = __Block_byref_object_copy__1259;
          v44 = __Block_byref_object_dispose__1260;
          v45 = 0;
          v31 = v48[3];
          v33[0] = MEMORY[0x24BDAC760];
          v33[1] = 3321888768;
          v33[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_2;
          v33[3] = &unk_250401168;
          v33[11] = a1;
          v33[4] = a3;
          v33[5] = a2;
          v33[9] = &v40;
          v33[6] = v22;
          v39 = a7 != 0;
          v35 = v15;
          v36 = v14;
          v34 = v20;
          v33[10] = &v47;
          v33[7] = v21;
          v33[8] = a7;
          v37 = v32;
          v38 = a6;
          AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createComputeProgramVariant((id **)a1, a2, (uint64_t)a3, v15, 0, v20, v31, v21, a7 != 0, (uint64_t)v33);
          if (v21)
            dispatch_release(v21);
          if (a7)

          a7 = v41[5];
          _Block_object_dispose(&v40, 8);
          _Block_object_dispose(&v47, 8);

        }
        else
        {
          a7 = 0;

        }
        return a7;
      }
      v28 = objc_msgSend(v40, "localizedDescription");
      v29 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v28, *MEMORY[0x24BDD0FC8]);
      v27 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v29);
      if (!a7)
        return 0;
    }
    else
    {
      v26 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("pipeline descriptor is nil"), *MEMORY[0x24BDD0FC8]);
      v27 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v26);
      if (!a7)
        return a7;
    }
    v19 = v27;
    goto LABEL_25;
  }
  *a6 = 0;
  if (a2)
  {
    v40 = 0;
    if (!objc_msgSend(a2, "validateWithDevice:error:", a3, &v40))
    {
      v16 = objc_msgSend(v40, "localizedDescription");
      v17 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v16, *MEMORY[0x24BDD0FC8]);
      v18 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v17);
      v19 = v18;
      if (!a7)
      {
        *a6 = v18;
        return 0;
      }
LABEL_25:
      (*((void (**)(id, _QWORD, _QWORD, id))a7 + 2))(a7, 0, 0, v19);
      return 0;
    }
    goto LABEL_11;
  }
  v24 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("pipeline descriptor is nil"), *MEMORY[0x24BDD0FC8]);
  v25 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v24);
  v19 = v25;
  if (a7)
    goto LABEL_25;
  *a6 = v25;
  return a7;
}

void sub_232C6B92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v34 - 128), 8);

  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1259(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__1260(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXA10FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, const __CFString *a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  unint64_t v36;
  const __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id ComputePipelinePerformanceStatistics;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  id v74;
  _OWORD *v75;
  __int128 v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  void *v102;
  uint64_t v103;
  uint64_t v105;
  id v107;
  _BYTE buf[41];
  uint64_t v109;

  v8 = a2;
  v109 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) = -[AGXA10FamilyComputePipeline initWithDevice:pipelineStateDescriptor:]([AGXA10FamilyComputePipeline alloc], "initWithDevice:pipelineStateDescriptor:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 40), "maxCallStackDepth");
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) + 64;
    *(_QWORD *)(v10 + 16) = v8;
    *(_DWORD *)(v10 + 224) = *(_DWORD *)(v8 + 3248);
    *(_QWORD *)(v10 + 160) = *(_QWORD *)(v8 + 316);
    v11 = v8;
    *(_QWORD *)(v10 + 176) = *(unsigned int *)(v8 + 352);
    *(_DWORD *)(v10 + 184) = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    *(_BYTE *)(v12 + 88) = objc_msgSend(*(id *)(a1 + 40), "supportIndirectCommandBuffers");
    v13 = (void *)objc_msgSend(*(id *)(a1 + 40), "linkedFunctions");
    objc_msgSend(v13, "functions");
    objc_msgSend(v13, "privateFunctions");
    objc_msgSend(v13, "binaryFunctions");
    if (objc_msgSend(*(id *)(a1 + 48), "relocations"))
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "relocations"), "count");
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(void **)(a1 + 40);
    if (objc_msgSend(v17, "maxAccelerationStructureTraversalDepth"))
      objc_msgSend(v17, "maxAccelerationStructureTraversalDepth");
    AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(*(_QWORD *)(v14 + 80));
    v15 = v14 + 64;
    if (((*(_QWORD *)(*(_QWORD *)(v15 + 16) + 1264) | *(_QWORD *)(*(_QWORD *)(v15 + 16) + 1288) | *(_QWORD *)(*(_QWORD *)(v15 + 16) + 1312) | *(_QWORD *)(*(_QWORD *)(v15 + 16) + 1344) | *(_QWORD *)(*(_QWORD *)(v15 + 16) + 1368)) & 0x500000000000000) != 0)
      *(_BYTE *)(v14 + 89) = 1;
    *(_QWORD *)(v14 + 168) = v16;
    if (*(_BYTE *)(v14 + 88))
    {
      v18 = *(_QWORD *)(v16 + 808);
      AGX::Heap<true>::allocateImpl(buf, v18 + 5016, 232, 0);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)buf;
      *(_OWORD *)(v14 + 128) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v14 + 137) = *(_OWORD *)&buf[25];
      v19 = *(_QWORD *)(v14 + 120);
      *(_QWORD *)(v14 + 104) = *(_QWORD *)(v14 + 112) + 0x300000000;
      v20 = *(_QWORD *)(v14 + 80);
      v21 = *(_OWORD *)(v20 + 2888);
      *(_OWORD *)v19 = *(_OWORD *)(v20 + 2872);
      *(_OWORD *)(v19 + 16) = v21;
      v22 = *(_OWORD *)(v20 + 2920);
      *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 2904);
      *(_OWORD *)(v19 + 48) = v22;
      v23 = *(_BYTE *)(v20 + 3259);
      *(_BYTE *)(v19 + 64) = v23;
      if (!*(_BYTE *)(v20 + 3264))
      {
        v23 |= 2u;
        *(_BYTE *)(v19 + 64) = v23;
      }
      if (*(_BYTE *)(v20 + 3258))
      {
        v23 |= 4u;
        *(_BYTE *)(v19 + 64) = v23;
      }
      if (*(_BYTE *)(v20 + 3256))
        *(_BYTE *)(v19 + 64) = v23 | 8;
      *(_DWORD *)(v19 + 68) = 4 * *(_DWORD *)(v20 + 3096);
      *(_DWORD *)(v19 + 212) = *(_DWORD *)(v20 + 3100);
      *(_OWORD *)(v19 + 72) = *(_OWORD *)(v20 + 3104);
      v24 = *(_OWORD *)(v20 + 3120);
      v25 = *(_OWORD *)(v20 + 3136);
      v26 = *(_OWORD *)(v20 + 3152);
      *(_OWORD *)(v19 + 136) = *(_OWORD *)(v20 + 3168);
      *(_OWORD *)(v19 + 120) = v26;
      *(_OWORD *)(v19 + 104) = v25;
      *(_OWORD *)(v19 + 88) = v24;
      v27 = *(_OWORD *)(v20 + 3184);
      v28 = *(_OWORD *)(v20 + 3200);
      v29 = *(_OWORD *)(v20 + 3216);
      *(_OWORD *)(v19 + 196) = *(_OWORD *)(v20 + 3228);
      *(_OWORD *)(v19 + 184) = v29;
      *(_OWORD *)(v19 + 168) = v28;
      *(_OWORD *)(v19 + 152) = v27;
      *(_QWORD *)(v19 + 216) = *(_QWORD *)(v20 + 3072);
      *(_QWORD *)(v19 + 224) = *(_QWORD *)(v20 + 2040);
      v30 = *(_QWORD *)(v18 + 6328);
      v31 = *(_DWORD *)(*(_QWORD *)(v14 + 80) + 332) + *(_DWORD *)(v14 + 228);
      if (v31 > *(_DWORD *)v30)
      {
        *(_DWORD *)v30 = v31;
        *(_BYTE *)(v30 + 24) = 1;
      }
      objc_msgSend(v17, "resourceIndex");
    }
    v8 = v11;
    if (objc_msgSend((id)v14, "label"))
    {
      {
        {
          v33 = objc_msgSend((id)objc_msgSend((id)v14, "label"), "UTF8String");
          v34 = *(_DWORD *)(*(_QWORD *)(v14 + 80) + 2768);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v33;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v34;
          _os_signpost_emit_with_name_impl(&dword_232C19000, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ComputePipelineLabel", "Label=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u", buf, 0x12u);
        }
      }
    }
  }
  v35 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  if (!v35)
    goto LABEL_28;
  v36 = 0x10000;
  if (!*(_BYTE *)(v8 + 379))
    v36 = 4096;
  if (v36 < v35[57])
  {
    a6 = CFSTR("Compute pipeline exceeds available stack space");
LABEL_28:

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) = 0;
    if (a6)
      v37 = a6;
    else
      v37 = CFSTR("Internal error during compute pipeline creation");
    v38 = *(_QWORD *)(a1 + 64);
    if (a5 > 3)
      v39 = 5;
    else
      v39 = qword_232D76128[a5];
    v40 = *(_QWORD **)(a1 + 128);
    v41 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v37, *MEMORY[0x24BDD0FC8]);
    v42 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v39, v41);
    if (v38)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v38 + 16))(v38, 0, 0, v42);
    }
    else if (v40)
    {
      *v40 = v42;
    }
    return;
  }
  v43 = *(_QWORD *)(a1 + 104);
  if (v43)
  {
    if (a4 && (v43 & 0x400000) != 0)
    {
      if (!*(_BYTE *)(a1 + 136))
      {
        v44 = v8;
        v45 = mach_absolute_time() - *(_QWORD *)(a1 + 112);
        if (getTimebaseInfo(void)::once[0] != -1)
          dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
        v46 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", v45 * getTimebaseInfo(void)::sTimebaseInfo / unk_254235750);
        objc_msgSend(a4, "setObject:forKey:", v46, *MEMORY[0x24BDDD1A0]);
        v8 = v44;
      }
      ComputePipelinePerformanceStatistics = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getComputePipelinePerformanceStatistics(v8);
      v48 = v8;
      v49 = (uint64_t *)MEMORY[0x24BDDD300];
      v50 = objc_msgSend(ComputePipelinePerformanceStatistics, "objectForKey:", *MEMORY[0x24BDDD300]);
      v51 = (_QWORD *)MEMORY[0x24BDDD310];
      v52 = objc_msgSend(ComputePipelinePerformanceStatistics, "objectForKey:", *MEMORY[0x24BDDD310]);
      v53 = *v49;
      v8 = v48;
      objc_msgSend(a4, "setObject:forKey:", v50, v53);
      objc_msgSend(a4, "setObject:forKey:", v52, *v51);

      _MTLAddCompilePipelinePerformanceStatistics();
    }
    if (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 120))
    {
      v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
      os_unfair_lock_lock((os_unfair_lock_t)(v54 + 1144));
      v55 = *(_QWORD *)(v54 + 1104);
      v56 = *(unsigned int *)(v54 + 1112);
      v57 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v55, *(_DWORD *)(v54 + 1112), (_QWORD *)a3);
      if (v57)
      {
        v58 = *(NSObject **)(v57 + 16);
        if (v58)
          goto LABEL_48;
      }
      else
      {
        if ((_DWORD)v56 == 4)
        {
          v55 = operator new();
          v56 = 0;
          *(_OWORD *)(v55 + 192) = 0u;
          *(_OWORD *)(v55 + 208) = 0u;
          *(_OWORD *)(v55 + 160) = 0u;
          *(_OWORD *)(v55 + 176) = 0u;
          *(_OWORD *)(v55 + 128) = 0u;
          *(_OWORD *)(v55 + 144) = 0u;
          *(_OWORD *)(v55 + 96) = 0u;
          *(_OWORD *)(v55 + 112) = 0u;
          *(_OWORD *)(v55 + 64) = 0u;
          *(_OWORD *)(v55 + 80) = 0u;
          *(_OWORD *)(v55 + 32) = 0u;
          *(_OWORD *)(v55 + 48) = 0u;
          *(_OWORD *)v55 = 0u;
          *(_OWORD *)(v55 + 16) = 0u;
          *(_QWORD *)(v55 + 224) = *(_QWORD *)(v54 + 1104);
          *(_QWORD *)(v54 + 1104) = v55;
          *(_DWORD *)(v54 + 1112) = 0;
        }
        v75 = (_OWORD *)(v55 + 32 * v56);
        v76 = *(_OWORD *)(a3 + 16);
        *v75 = *(_OWORD *)a3;
        v75[1] = v76;
        v77 = *(_QWORD *)(v54 + 1104);
        v78 = *(_DWORD *)(v54 + 1112);
        *(_DWORD *)(v54 + 1112) = v78 + 1;
        v58 = *(NSObject **)(v77 + 24 * v78 + 144);
        if (v58)
        {
LABEL_48:
          dispatch_retain(v58);
          os_unfair_lock_unlock((os_unfair_lock_t)(v54 + 1144));
          v59 = objc_alloc(MEMORY[0x24BDDD558]);
          v60 = *(_QWORD *)(a1 + 56);
          v61 = objc_msgSend(*(id *)(a1 + 48), "device");
          v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) + 80);
          v63 = (void *)objc_msgSend(v59, "initWithSerializedData:dynamicLibraries:serializedStageInputDescriptor:device:options:flags:", v58, 0, v60, v61, *(_QWORD *)(a1 + 104) | 3, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) + 228) != 0) | (16 * (*(_DWORD *)(v62 + 332) != 0)) | (2 * *(unsigned __int8 *)(v62 + 3257)) | (4 * *(unsigned __int8 *)(v62 + 3260)) | (8 * *(unsigned __int8 *)(v62 + 3261)));
          v64 = *(_QWORD *)(a1 + 104);
          if ((v64 & 0x40000) != 0)
          {
            v65 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getComputePipelinePerformanceStatistics(v8);
            v66 = v65;
            if (a4 && v65)
              objc_msgSend(v65, "setObject:forKey:", a4, *MEMORY[0x24BDDD2B8]);
            objc_msgSend(v63, "setPerformanceStatistics:", v66);

            v64 = *(_QWORD *)(a1 + 104);
          }
          if (v8)
          {
            if ((v64 & 0x200000) != 0)
            {
              v67 = *(_QWORD *)(v8 + 968);
              if (v67)
              {
                v99 = v8;
                v105 = *(_QWORD *)(v8 + 968);
                v68 = *(_QWORD *)(v8 + 976) - v67;
                v69 = (v68 >> 4);
                v70 = v68 & 0xFFFFFFFF0;
                if ((v68 & 0xFFFFFFFF0) != 0)
                {
                  v71 = (char *)operator new(8 * v69);
                  v72 = &v71[8 * v69];
                }
                else
                {
                  v71 = 0;
                  v72 = 0;
                }
                v107 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
                v101 = v58;
                v102 = v63;
                v79 = v105;
                if (v70)
                {
                  v80 = 0;
                  v81 = v71;
                  v103 = v69;
                  while (1)
                  {
                    v82 = (_QWORD *)(v79 + 16 * v80);
                    if (v81 >= v72)
                      break;
                    *(_QWORD *)v81 = *v82;
                    v81 += 8;
LABEL_91:
                    objc_msgSend(v107, "addObject:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *v82, v99));
                    if (++v80 == v69)
                      goto LABEL_103;
                  }
                  v83 = (v81 - v71) >> 3;
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 61)
                    abort();
                  if ((v72 - v71) >> 2 > v84)
                    v84 = (v72 - v71) >> 2;
                  if ((unint64_t)(v72 - v71) >= 0x7FFFFFFFFFFFFFF8)
                    v85 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v85 = v84;
                  if (v85)
                  {
                    if (v85 >> 61)
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v86 = operator new(8 * v85);
                  }
                  else
                  {
                    v86 = 0;
                  }
                  v87 = &v86[8 * v83];
                  *(_QWORD *)v87 = *v82;
                  v88 = v87 + 8;
                  if (v81 != v71)
                  {
                    v89 = v81 - 8 - v71;
                    if (v89 >= 0x168)
                    {
                      if (&v86[v81 - v71 - 8 - (v89 & 0xFFFFFFFFFFFFFFF8)] > &v86[v81 - v71 - 8])
                      {
                        v90 = v81;
                      }
                      else if (&v81[-(v89 & 0xFFFFFFFFFFFFFFF8) - 8] > v81 - 8)
                      {
                        v90 = v81;
                      }
                      else if ((unint64_t)(v71 - v86) >= 0x20)
                      {
                        v92 = (v89 >> 3) + 1;
                        v90 = &v81[-8 * (v92 & 0x3FFFFFFFFFFFFFFCLL)];
                        v93 = &v86[8 * v83 - 16];
                        v94 = v81 - 16;
                        v95 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v96 = *(_OWORD *)v94;
                          *(v93 - 1) = *((_OWORD *)v94 - 1);
                          *v93 = v96;
                          v93 -= 2;
                          v94 -= 32;
                          v95 -= 4;
                        }
                        while (v95);
                        v87 -= 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_88;
                      }
                      else
                      {
                        v90 = v81;
                      }
                    }
                    else
                    {
                      v90 = v81;
                    }
                    do
                    {
                      v91 = *((_QWORD *)v90 - 1);
                      v90 -= 8;
                      *((_QWORD *)v87 - 1) = v91;
                      v87 -= 8;
                    }
                    while (v90 != v71);
                  }
LABEL_88:
                  v72 = &v86[8 * v85];
                  if (v71)
                    operator delete(v71);
                  v71 = v87;
                  v81 = v88;
                  v69 = v103;
                  v79 = v105;
                  goto LABEL_91;
                }
LABEL_103:
                v63 = v102;
                objc_msgSend(v102, "setConstantSamplerDescriptorsFromBitmasks:count:", v71, v69, v99);
                v58 = v101;
                objc_msgSend(v102, "setConstantSamplerUniqueIdentifiers:", v107);

                v8 = v100;
                if (v71)
                  operator delete(v71);
              }
            }
          }
          dispatch_release(v58);
          if ((*(_BYTE *)(a1 + 107) & 1) == 0)
          {
LABEL_110:
            v73 = *(_QWORD *)(a1 + 64);
            if (v73)
              goto LABEL_111;
            goto LABEL_61;
          }
LABEL_106:
          v97 = *(_QWORD *)(a1 + 72);
          if (*(_QWORD *)(v8 + 3320))
            v98 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD588]), "initWithData:linkedDynamicLibraries:", *(_QWORD *)(v8 + 3320), 0);
          else
            v98 = 0;
          objc_msgSend(*(id *)(*(_QWORD *)(v97 + 8) + 40), "setDebugInstrumentationData:", v98);

          goto LABEL_110;
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v54 + 1144));
    }
    v63 = 0;
    if ((*(_BYTE *)(a1 + 107) & 1) == 0)
      goto LABEL_110;
    goto LABEL_106;
  }
  v63 = 0;
  v73 = *(_QWORD *)(a1 + 64);
  if (v73)
  {
LABEL_111:
    (*(void (**)(uint64_t, _QWORD, void *, _QWORD))(v73 + 16))(v73, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), v63, 0);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) = 0;
    return;
  }
LABEL_61:
  if (*(_QWORD *)(a1 + 120))
  {
    v74 = v63;
    **(_QWORD **)(a1 + 120) = v63;
  }
}

void sub_232C6C4E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_232C6C4F4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

id __copy_helper_block_e8_96c83_ZTS19RetainedObjCPointerIP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectEE(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = result;
  return result;
}

void __destroy_helper_block_e8_96c83_ZTS19RetainedObjCPointerIP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectEE(uint64_t a1)
{

}

id AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getComputePipelinePerformanceStatistics(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;

  v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 35);
  v3 = *(_QWORD *)(a1 + 1264);
  v4 = *(_QWORD *)(a1 + 1344);
  v5 = *(_QWORD *)(a1 + 1368);
  v6 = *(_QWORD *)(a1 + 1312) | *(_QWORD *)(a1 + 1288);
  v7 = v6 | v3 | v4 | v5;
  if (v7)
  {
    v8 = 0;
    v9 = 64 - __clz(v7);
    v10 = *(_QWORD *)(a1 + 952) | (v6 | v4 | v5) & ~v3;
    do
    {
      if (((1 << v8) & v10) != 0)
        v11 = CFSTR("promoted");
      else
        v11 = CFSTR("not promoted");
      if (((1 << v8) & v7) != 0)
        v12 = v11;
      else
        v12 = CFSTR("unused");
      objc_msgSend(v2, "addObject:", v12);
      ++v8;
    }
    while (v9 != v8);
  }
  return AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPerformanceStatisticsDictionary((unsigned int *)(a1 + 1072), (uint64_t)CFSTR("ComputeBufferPrefetch"), (uint64_t)v2);
}

id AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPerformanceStatisticsDictionary(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = a3;
  v4 = a2;
  v46 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12);
  if (v6)
  {
    v44 = a3;
    v45 = a2;
    v43 = (uint64_t)&v43;
    v7 = v6 / 24;
    v8 = MEMORY[0x24BDAC7A8](a1);
    v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x24BDAC7A8](v8);
    v12 = (char *)&v43 - v11;
    v13 = 0;
    v14 = 0;
    if (v7 <= 1)
      v15 = 1;
    else
      v15 = v7;
    do
    {
      *(_QWORD *)&v12[8 * v14] = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:");
      *(_QWORD *)&v10[8 * v14] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *(unsigned int *)(*((_QWORD *)a1 + 15) + 4 * v14));
      ++v14;
      v13 += 24;
    }
    while (v15 != v14);
    v16 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, v12, v7);
    v3 = v44;
    v4 = v45;
  }
  else
  {
    v16 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionary");
  }
  v17 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  LODWORD(v18) = a1[2];
  v19 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v18);
  objc_msgSend(v17, "setObject:forKey:", v19, *MEMORY[0x24BDDD2B0]);
  v20 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *a1);
  objc_msgSend(v17, "setObject:forKey:", v20, *MEMORY[0x24BDDD310]);
  v21 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[1]);
  objc_msgSend(v17, "setObject:forKey:", v21, *MEMORY[0x24BDDD300]);
  v22 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[3]);
  objc_msgSend(v17, "setObject:forKey:", v22, *MEMORY[0x24BDDD350]);
  v23 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[4]);
  objc_msgSend(v17, "setObject:forKey:", v23, *MEMORY[0x24BDDD2A0]);
  v24 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[5]);
  objc_msgSend(v17, "setObject:forKey:", v24, *MEMORY[0x24BDDD330]);
  v25 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[6]);
  objc_msgSend(v17, "setObject:forKey:", v25, *MEMORY[0x24BDDD338]);
  v26 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[7]);
  objc_msgSend(v17, "setObject:forKey:", v26, *MEMORY[0x24BDDD348]);
  v27 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[8]);
  objc_msgSend(v17, "setObject:forKey:", v27, *MEMORY[0x24BDDD2C0]);
  v28 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[9]);
  objc_msgSend(v17, "setObject:forKey:", v28, *MEMORY[0x24BDDD2C8]);
  v29 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[10]);
  objc_msgSend(v17, "setObject:forKey:", v29, *MEMORY[0x24BDDD2D0]);
  v30 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[11]);
  objc_msgSend(v17, "setObject:forKey:", v30, *MEMORY[0x24BDDD2A8]);
  v31 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[12]);
  objc_msgSend(v17, "setObject:forKey:", v31, *MEMORY[0x24BDDD318]);
  v32 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[13]);
  objc_msgSend(v17, "setObject:forKey:", v32, *MEMORY[0x24BDDD320]);
  v33 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[19]);
  objc_msgSend(v17, "setObject:forKey:", v33, *MEMORY[0x24BDDD308]);
  v34 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[20]);
  objc_msgSend(v17, "setObject:forKey:", v34, *MEMORY[0x24BDDD328]);
  v35 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[14]);
  objc_msgSend(v17, "setObject:forKey:", v35, *MEMORY[0x24BDDD360]);
  v36 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[21]);
  objc_msgSend(v17, "setObject:forKey:", v36, *MEMORY[0x24BDDD340]);
  v37 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[15]);
  objc_msgSend(v17, "setObject:forKey:", v37, *MEMORY[0x24BDDD2D8]);
  v38 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[16]);
  objc_msgSend(v17, "setObject:forKey:", v38, *MEMORY[0x24BDDD2E0]);
  v39 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[17]);
  objc_msgSend(v17, "setObject:forKey:", v39, *MEMORY[0x24BDDD2F0]);
  v40 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[18]);
  objc_msgSend(v17, "setObject:forKey:", v40, *MEMORY[0x24BDDD2F8]);
  v41 = a1 + 36;
  if ((*((char *)a1 + 167) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a1 + 167))
      goto LABEL_14;
    goto LABEL_13;
  }
  if (*((_QWORD *)a1 + 19))
  {
    v41 = (_QWORD *)*v41;
LABEL_13:
    objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:", v41), CFSTR("Remarks"));
  }
LABEL_14:
  objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a1[22]), CFSTR("Constant calculation temporary register count"));
  objc_msgSend(v17, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *((unsigned __int8 *)a1 + 92)), CFSTR("Constant calculation phase present"));
  objc_msgSend(v17, "setObject:forKey:", v3, v4);
  objc_msgSend(v17, "setObject:forKey:", v16, CFSTR("Telemetry Statistics"));
  return v17;
}

unint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createRenderPipeline<MTLRenderPipelineDescriptor>(void ***a1, MTLRenderPipelineDescriptor *a2, _QWORD *a3, unint64_t a4, uint64_t a5, _QWORD *a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[12];
  BOOL v30;
  BOOL v31;
  _QWORD v32[11];
  id v33;
  id *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  __int128 v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v14 = mach_absolute_time();
  if (_MTLCompilePerformanceStatisticsEnabled())
    a4 |= 0x400000uLL;
  if (!a6)
  {
    if (a2)
    {
      v33 = 0;
      if (!-[MTLRenderPipelineDescriptor validateWithDevice:error:](a2, "validateWithDevice:error:", a3, &v33))
      {
        v26 = objc_msgSend(v33, "localizedDescription");
        v27 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v26, *MEMORY[0x24BDD0FC8]);
        v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v27);
        if (!a7)
          return 0;
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    v24 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("pipeline descriptor is nil"), *MEMORY[0x24BDD0FC8]);
    v25 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v24);
    if (!a7)
      return a7;
    v22 = v25;
LABEL_25:
    (*(void (**)(unint64_t, _QWORD, _QWORD, id))(a7 + 16))(a7, 0, 0, v22);
    return 0;
  }
  *a6 = 0;
  if (!a2)
  {
    v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("pipeline descriptor is nil"), *MEMORY[0x24BDD0FC8]);
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v20);
    v22 = v21;
    if (!a7)
    {
      *a6 = v21;
      return a7;
    }
    goto LABEL_25;
  }
  v33 = 0;
  if (!-[MTLRenderPipelineDescriptor validateWithDevice:error:](a2, "validateWithDevice:error:", a3, &v33))
  {
    v15 = objc_msgSend(v33, "localizedDescription");
    v16 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v15, *MEMORY[0x24BDD0FC8]);
    v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v16);
    if (!a7)
    {
      *a6 = v17;
      return 0;
    }
LABEL_7:
    (*(void (**)(unint64_t, _QWORD, _QWORD, id))(a7 + 16))(a7, 0, 0, v17);
    return 0;
  }
LABEL_10:
  if (a7)
    a2 = (MTLRenderPipelineDescriptor *)-[MTLRenderPipelineDescriptor copy](a2, "copy");
  v39 = 0;
  v18 = operator new();
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  if ((AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateRenderPipelineDescriptorInfo<MTLRenderPipelineDescriptor>((uint64_t)a1, (uint64_t *)v18, a2, a4, a3, &v39) & 1) != 0)
  {
    v33 = 0;
    v34 = &v33;
    v35 = 0x3052000000;
    v36 = __Block_byref_object_copy__1259;
    v37 = __Block_byref_object_dispose__1260;
    v38 = 0;
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 3221225472;
    v32[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke;
    v32[3] = &unk_250400C30;
    v32[4] = a3;
    v32[5] = a2;
    v32[6] = a7;
    v32[7] = &v33;
    v32[8] = v18;
    v32[9] = a6;
    v32[10] = a5;
    if (*(_QWORD *)(v18 + 32))
    {
      v29[0] = MEMORY[0x24BDAC760];
      v29[1] = 3221225472;
      v29[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2;
      v29[3] = &unk_250400C80;
      v29[4] = a2;
      v29[5] = a3;
      v29[8] = a4;
      v29[9] = v18;
      v30 = a7 != 0;
      v31 = (a5 | a7) != 0;
      v29[6] = v32;
      v29[7] = a1;
      v29[10] = v14;
      v29[11] = a6;
      v19 = *(os_unfair_lock_s **)(v18 + 48);
      if (v19)
      {
        AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramAnalysis<MTLRenderPipelineDescriptor>(a1, a2, (uint64_t)a3, a4, v19, *(NSObject **)(v18 + 80), a7 != 0, (uint64_t)v29);
      }
      else if ((*(_BYTE *)(a3[101] + 6224) & 0x80) != 0)
      {
        AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createVertexProgramAnalysis(a1, a2, (uint64_t)a3, a4, *(os_unfair_lock_s **)(v18 + 40), *(_QWORD *)(v18 + 72), a7 != 0, (uint64_t)v29);
      }
      else
      {
        ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2((uint64_t)v29, 0);
      }
    }
    else
    {
      memset(v40, 0, sizeof(v40));
      AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,false>(a1, (_QWORD *)v18, 0, v40, (uint64_t)a3, a2, a4, a7 != 0, (a5 | a7) != 0, v14, 0, (uint64_t)v32);
    }
    if (a7)

    a7 = (unint64_t)v34[5];
    _Block_object_dispose(&v33, 8);
  }
  else
  {
    if (a6)
      *a6 = v39;
    if (a7)
    {
      (*(void (**)(unint64_t, _QWORD, _QWORD, uint64_t))(a7 + 16))(a7, 0, 0, v39);

    }
    v23 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(v18);
    MEMORY[0x234927ECC](v23, 0xA0C402B819244);
    return 0;
  }
  return a7;
}

void sub_232C6D120(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(v8);
    MEMORY[0x234927ECC](v9, 0xA0C402B819244);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = a2;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    v13 = *(_QWORD *)(v11 + 808);
    *(_QWORD *)(v10 + 1208) = v11;
    if (objc_msgSend(v12, "maxAccelerationStructureTraversalDepth"))
      objc_msgSend(v12, "maxAccelerationStructureTraversalDepth");
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::constructSpillParams((uint64_t *)(v10 + 144), v13);
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::emitLabelUpdateSignpost((uint64_t *)(v10 + 144), (void *)v10);
    if (v12 && objc_msgSend(v12, "explicitVisibilityGroupID") != -1)
    {
      *(_DWORD *)(v10 + 984) = objc_msgSend(v12, "explicitVisibilityGroupID");
      *(_BYTE *)(v10 + 988) = 1;
    }
    if (*(_BYTE *)(v10 + 981))
      objc_msgSend(v12, "resourceIndex");
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    (*(void (**)(uint64_t, void *, void *, uint64_t))(v14 + 16))(v14, a2, a3, a4);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = 0;
  }
  v15 = *(_QWORD **)(a1 + 72);
  if (v15)
    *v15 = a4;
  if (*(_QWORD *)(a1 + 80))
    **(_QWORD **)(a1 + 80) = a3;
}

void AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,false>(void ***a1, _QWORD *a2, uint64_t a3, __int128 *a4, uint64_t a5, MTLRenderPipelineDescriptor *a6, unint64_t a7, unsigned __int8 a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v14;
  os_unfair_lock_s *v15;
  NSObject *v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD v22[13];
  __int128 v23;
  __int128 v24;
  unsigned __int8 v25;
  char v26;
  _QWORD v27[14];
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a2[2])
  {
    v14 = (void *)a2[14];
    v15 = (os_unfair_lock_s *)a2[6];
    v16 = a2[10];
    v27[0] = MEMORY[0x24BDAC760];
    v27[1] = 3221225472;
    v27[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
    v27[3] = &unk_250400CD0;
    v27[4] = a6;
    v27[5] = a5;
    v27[10] = a7;
    v27[11] = a2;
    v28 = a8;
    v17 = *a4;
    v30 = a4[1];
    v29 = v17;
    v31 = a9;
    v27[12] = a3;
    v27[13] = a10;
    v27[6] = 0;
    v27[7] = a11;
    v27[8] = a12;
    v27[9] = a1;
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLRenderPipelineDescriptor>(a1, a6, a5, a7, 0, 0, v14, v15, a3, v16, a8, (uint64_t)v27);
  }
  else
  {
    v22[1] = 3221225472;
    v18 = a4[1];
    v23 = *a4;
    v19 = (void *)a2[13];
    v20 = a2[5];
    v21 = a2[9];
    v22[0] = MEMORY[0x24BDAC760];
    v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3;
    v22[3] = &unk_250400EF0;
    v22[8] = a1;
    v22[9] = a2;
    v24 = v18;
    v22[4] = a5;
    v22[5] = a6;
    v22[10] = a3;
    v22[11] = a7;
    v25 = a8;
    v26 = a9;
    v22[12] = a10;
    v22[6] = a11;
    v22[7] = a12;
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createVertexProgramVariant(a1, a6, a5, a7, 0, v19, v20, a3, v21, 0, a8, (uint64_t)v22);
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  os_unfair_lock_s *v8;
  NSObject *v9;
  unsigned __int8 v10;
  void ***v11;
  uint64_t v12;
  _QWORD v13[12];
  unsigned __int8 v14;
  char v15;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD **)(a1 + 72);
  v7 = (void *)v6[12];
  v8 = (os_unfair_lock_s *)v6[4];
  v9 = v6[8];
  v10 = *(_BYTE *)(a1 + 96);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3;
  v13[3] = &unk_250400C58;
  v13[4] = v4;
  v13[5] = v3;
  v13[8] = v6;
  v13[9] = v5;
  v14 = v10;
  v15 = *(_BYTE *)(a1 + 97);
  v11 = *(void ****)(a1 + 56);
  v13[6] = *(_QWORD *)(a1 + 48);
  v13[7] = v11;
  v12 = *(_QWORD *)(a1 + 88);
  v13[10] = *(_QWORD *)(a1 + 80);
  v13[11] = v12;
  AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createFragmentProgramVariant<MTLRenderPipelineDescriptor>(v11, v3, v4, v5, 0, v7, v8, a2, v9, v10, (uint64_t)v13);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  __int128 v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = a3[1];
    v12[0] = *a3;
    v12[1] = v6;
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,false>(*(void ****)(a1 + 56), *(_QWORD **)(a1 + 64), a2, v12, *(_QWORD *)(a1 + 32), *(MTLRenderPipelineDescriptor **)(a1 + 40), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 96), *(_BYTE *)(a1 + 97), *(_QWORD *)(a1 + 80), a4, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (a5 > 3)
      v8 = 5;
    else
      v8 = qword_232D76128[a5];
    v9 = *(_QWORD **)(a1 + 88);
    v10 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v11 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v8, v10);
    if (v7)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v7 + 16))(v7, 0, 0, v11);
    }
    else if (v9)
    {
      *v9 = v11;
    }
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  NSObject *v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void ***v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v22[7];
  __int128 v23;
  void ***v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v22[1] = 3221225472;
    v25 = *(_OWORD *)(a1 + 88);
    v7 = *(void **)(v25 + 120);
    v8 = *(void **)(v25 + 24);
    v9 = *(NSObject **)(v25 + 88);
    v29 = *(_OWORD *)(a1 + 113);
    v30 = *(_OWORD *)(a1 + 129);
    v10 = a3[1];
    v31 = *a3;
    v12 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v13 = *(void ****)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_WORD *)(a2 + 2994);
    v17 = *(_BYTE *)(a1 + 112);
    v22[0] = MEMORY[0x24BDAC760];
    v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v22[3] = &unk_250400CA8;
    v24 = v13;
    v26 = a2;
    v27 = v14;
    v32 = v10;
    v22[4] = v11;
    v22[5] = v12;
    v33 = v17;
    v34 = *(_BYTE *)(a1 + 145);
    v28 = *(_QWORD *)(a1 + 104);
    v22[6] = a4;
    v23 = *(_OWORD *)(a1 + 56);
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLRenderPipelineDescriptor>(v13, v12, v11, v14, v15, a7, v7, v8, v9, v16, HIBYTE(v16), v17, (uint64_t)v22);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 64);
    if (a5 > 3)
      v19 = 5;
    else
      v19 = qword_232D76128[a5];
    v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v19, v20);
    if (v18)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v18 + 16))(v18, 0, 0, v21);
  }
}

id ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(void **)v8;
    v10 = *(void **)(v8 + 8);
    memset(v17, 0, sizeof(v17));
    memset(v16, 0, sizeof(v16));
    *((_QWORD *)&v15 + 1) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v15 = a4;
    return (id)AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPipeline<MTLRenderPipelineDescriptor>(v7, v9, *(_QWORD *)(a1 + 80), a1 + 104, v10, a2, a3, 0, 0, (uint64_t)v17, 0, 0, (uint64_t)v16, *(_QWORD **)(a1 + 32), *(_QWORD *)(v8 + 72), *(void **)(a1 + 40), *(_QWORD *)(a1 + 88), *(_WORD *)(a1 + 136), HIBYTE(*(_WORD *)(a1 + 136)),
                 *(_QWORD *)(a1 + 96),
                 v15,
                 *(_QWORD *)(a1 + 56));
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 56);
    if (a5 > 3)
      v13 = 5;
    else
      v13 = qword_232D76128[a5];
    v14 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    result = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v13, v14);
    if (v12)
      return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, id))(v12 + 16))(v12, 0, 0, result);
  }
  return result;
}

uint64_t AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPipeline<MTLRenderPipelineDescriptor>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void *a16, uint64_t a17, char a18, char a19, uint64_t a20,__int128 a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v24;
  _QWORD v26[11];
  char v27;
  __int128 v29;

  v22 = a21;
  if (*(_DWORD *)(a6 + 3760))
  {
    v24 = *(_QWORD *)(a14[101] + 6184);
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 3221225472;
    v26[2] = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
    v26[3] = &unk_250400F68;
    v26[8] = v24;
    v26[9] = a3;
    v26[10] = a1;
    v26[4] = a16;
    v26[5] = a14;
    v27 = a18;
    v26[6] = a22;
    v26[7] = a6;
    return AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::constructRenderPipeline<MTLRenderPipelineDescriptor>(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a19, a20, a21,
             (uint64_t)v26);
  }
  else
  {
    *((_QWORD *)&v29 + 1) = *((_QWORD *)&a21 + 1);
    *(_QWORD *)&v29 = v22;
    return AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::constructRenderPipeline<MTLRenderPipelineDescriptor>(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a19, a20, v29,
             a22);
  }
}

uint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::constructRenderPipeline<MTLRenderPipelineDescriptor>(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, __int128 a19, uint64_t a20)
{
  uint64_t v28;
  void *v29;
  AGXA10FamilyRenderPipeline *v30;
  RenderPipeline *p_impl;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  void *v36;
  double v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  unsigned int v47;
  IOGPUResourceInfo *v48;
  int iosurface;
  uint64_t v50;
  __int128 v51;
  unsigned __int8 v52;
  int v53;
  int v54;
  int v55;
  char v56;
  const __CFString *v57;
  int v58;
  BOOL v59;
  BOOL v60;
  uint64_t *v61;
  unsigned __int8 v62;
  BOOL v63;
  BOOL v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  const __CFString *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  void *v73;
  void *v74;
  RenderPipeline *v75;
  void *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  int8x8_t v80;
  unsigned int v81;
  const __CFString *v82;
  uint64_t v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  id RenderPipelinePerformanceStatistics;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  os_unfair_lock_s *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  dispatch_object_t v110;
  _OWORD *v111;
  __int128 v112;
  uint64_t v113;
  unsigned int v114;
  NSObject *v115;
  dispatch_object_t v116;
  os_unfair_lock_s *v117;
  uint64_t isa;
  uint64_t isa_low;
  uint64_t v120;
  NSObject *v121;
  _OWORD *v122;
  __int128 v123;
  Class v124;
  unsigned int v125;
  NSObject *v126;
  os_unfair_lock_s *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 v132;
  Class v133;
  unsigned int v134;
  NSObject *v135;
  os_unfair_lock_s *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  uint64_t v142;
  unsigned int v143;
  NSObject *v144;
  int v145;
  uint64_t v146;
  id v147;
  unint64_t v148;
  uint64_t v149;
  id v150;
  void *v151;
  unint64_t *v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _OWORD *v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  _OWORD *v162;
  uint64_t v163;
  _OWORD *v164;
  unint64_t v165;
  _OWORD *v166;
  unint64_t v167;
  _QWORD *v168;
  _OWORD *v169;
  char *v170;
  char *v171;
  char *v172;
  _QWORD *v173;
  _OWORD *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  char *v188;
  char *v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  _OWORD *v194;
  char *v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  NSObject *v214;
  dispatch_object_t v215;
  NSObject *v216;
  dispatch_object_t object;
  dispatch_object_t objecta;
  id v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  AGXA10FamilyRenderPipeline *v226;
  _QWORD v227[2];
  uint64_t (*v228)(uint64_t, uint64_t);
  void *v229;
  AGXA10FamilyRenderPipeline *v230;
  _QWORD v231[2];
  uint64_t (*v232)(uint64_t, uint64_t);
  void *v233;
  AGXA10FamilyRenderPipeline *v234;
  _QWORD v235[2];
  uint64_t (*v236)(uint64_t, uint64_t);
  void *v237;
  AGXA10FamilyRenderPipeline *v238;
  _QWORD v239[2];
  uint64_t (*v240)(uint64_t, uint64_t);
  void *v241;
  AGXA10FamilyRenderPipeline *v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;

  v254 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v28 = *(_QWORD *)(objc_msgSend(a1, "vendorPrivate") + 16) + 8;
    v208 = a6;
    if (a4)
    {
LABEL_3:
      v213 = objc_msgSend(a4, "vendorPrivate") + 8;
      goto LABEL_6;
    }
  }
  else
  {
    v28 = 0;
    v208 = a6;
    if (a4)
      goto LABEL_3;
  }
  v213 = 0;
LABEL_6:
  v215 = (dispatch_object_t)v28;
  if (a7)
  {
    object = (dispatch_object_t)(objc_msgSend(a7, "vendorPrivate") + 8);
    v29 = a15;
    if (a10)
    {
LABEL_8:
      v211 = objc_msgSend(a10, "vendorPrivate") + 8;
      goto LABEL_11;
    }
  }
  else
  {
    object = 0;
    v29 = a15;
    if (a10)
      goto LABEL_8;
  }
  v211 = 0;
LABEL_11:
  v210 = a3;
  v30 = -[AGXA10FamilyRenderPipeline initWithDevice:pipelineStateDescriptor:]([AGXA10FamilyRenderPipeline alloc], "initWithDevice:pipelineStateDescriptor:", a13, v29);
  objc_msgSend(v29, "_descriptorPrivate");
  v226 = v30;
  p_impl = &v30->_impl;
  if (a5)
  {
    v32 = a5;
    LODWORD(a5) = *(_DWORD *)(a5 + 3752) == 0;
  }
  else
  {
    v32 = 0;
  }
  LODWORD(p_impl[2].resource_info[19].iosurface) = objc_msgSend(v29, "maxVertexAmplificationCount");
  objc_msgSend(v29, "sampleCoverage");
  HIDWORD(p_impl[2].resource_info[19].iosurface) = v33;
  HIDWORD(p_impl[2].resource_info[20].iosurface) = objc_msgSend(v29, "rasterSampleCount");
  LODWORD(p_impl[2].resource_info[20].iosurface) = objc_msgSend(v29, "sampleMask");
  LOBYTE(p_impl[2].resource_info[21].iosurface) = objc_msgSend(v29, "isRasterizationEnabled");
  BYTE5(p_impl[2].resource_info[24].iosurface) = objc_msgSend(v29, "supportIndirectCommandBuffers");
  *((_QWORD *)&v225 + 1) = v32;
  if (v32)
  {
    HIDWORD(p_impl[2].resource_info[21].iosurface) = objc_msgSend(v29, "tessellationOutputWindingOrder") == 1;
    LODWORD(p_impl[2].resource_info[22].iosurface) = objc_msgSend(v29, "tessellationPartitionMode");
    LODWORD(p_impl[2].resource_info[23].iosurface) = objc_msgSend(v29, "tessellationFactorStepFunction");
    LODWORD(p_impl[2].resource_info[24].iosurface) = objc_msgSend(v29, "maxTessellationFactor");
    HIDWORD(p_impl[2].resource_info[23].iosurface) = objc_msgSend(v29, "tessellationFactorFormat");
    BYTE4(p_impl[2].resource_info[24].iosurface) = objc_msgSend(v29, "isTessellationFactorScaleEnabled");
    switch(objc_msgSend(v29, "tessellationPartitionMode"))
    {
      case 0:
        if ((_DWORD)a5)
          v34 = 6;
        else
          v34 = 7;
        goto LABEL_26;
      case 1:
        v34 = a5 == 0;
        goto LABEL_26;
      case 2:
        if ((_DWORD)a5)
          v34 = 4;
        else
          v34 = 5;
        goto LABEL_26;
      case 3:
        if ((_DWORD)a5)
          v34 = 2;
        else
          v34 = 3;
LABEL_26:
        HIDWORD(p_impl[2].resource_info[22].iosurface) = v34;
        break;
      default:
        break;
    }
  }
  *(_QWORD *)&v225 = a2;
  v35 = a8;
  v224 = operator new();
  v223 = operator new();
  v222 = operator new();
  v221 = operator new();
  v220 = operator new();
  if (v32)
  {
    v36 = (void *)objc_msgSend(v29, "vertexLinkedFunctions", AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariant((uint64_t)&v226->_impl, v32));
    objc_msgSend(v36, "functions");
    objc_msgSend(v36, "privateFunctions");
    objc_msgSend(v36, "binaryFunctions");
    if (objc_msgSend(a4, "relocations"))
      objc_msgSend((id)objc_msgSend(a4, "relocations"), "count");
  }
  if (!a11)
  {
    v56 = 1;
    v57 = &stru_2504033A8;
    goto LABEL_89;
  }
  v37 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setMeshVariant((uint64_t)&v226->_impl, a11);
  v226->_impl.object_variant = (ObjectProgramVariant *)a8;
  if (a8)
  {
    v252 = 0u;
    v253 = 0u;
    v250 = 0u;
    v251 = 0u;
    v248 = 0u;
    v249 = 0u;
    v247 = 0u;
    v38 = *(_DWORD *)(a8 + 2224);
    if (v38)
    {
      LODWORD(v39) = 0;
      v40 = (int)*MEMORY[0x24BE51650];
      do
      {
        v41 = __clz(__rbit32(v38));
        *((_QWORD *)&v247 + v39) = *(_QWORD *)(a8 + 2112 + 8 * v41) + v40 + 32;
        v39 = (v39 + 1);
        v38 &= ~(1 << v41);
      }
      while (v38);
      if ((_DWORD)v39)
      {
        v42 = 0;
        v43 = *(unsigned int *)&v226->_anon_1b8[472];
        do
        {
          if ((_DWORD)v43)
          {
            v45 = 0;
            v46 = (__int128 *)*((_QWORD *)&v247 + v42);
            v47 = v43;
            v48 = &v226->_impl.resource_info[2];
            while (1)
            {
              iosurface = (int)v48->iosurface;
              v48 += 3;
              if (*((_DWORD *)v46 + 4) == iosurface)
                break;
              if (v43 == ++v45)
                goto LABEL_47;
            }
          }
          else
          {
            LODWORD(v45) = 0;
          }
          if ((_DWORD)v45 == (_DWORD)v43)
          {
            v46 = (__int128 *)*((_QWORD *)&v247 + v42);
            v47 = v43;
LABEL_47:
            v50 = (uint64_t)&v226->_impl + 24 * v47;
            v51 = *v46;
            *(_QWORD *)(v50 + 64) = *((_QWORD *)v46 + 2);
            *(_OWORD *)(v50 + 48) = v51;
            v44 = (*(_DWORD *)&v226->_anon_1b8[472] + 1);
            *(_DWORD *)&v226->_anon_1b8[472] = v44;
          }
          else
          {
            v44 = v43;
            LOBYTE(v43) = v45;
          }
          *(_DWORD *)&v226->_anon_1b8[484] |= 1 << v43;
          ++v42;
          v43 = v44;
        }
        while (v42 != v39);
      }
    }
    v37 = *(double *)(a8 + 316);
    *(double *)&v226->_anon_1b8[1088] = v37;
    *(_DWORD *)&v226->_anon_1b8[1104] = *(_DWORD *)(a8 + 352);
    *(_QWORD *)&v226->_anon_1b8[1108] = 0;
  }
  objc_msgSend(v29, "supportIndirectCommandBuffers", v37);
  if ((v52 & 1) == 0
  {
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::validateMeshState<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXA10FamilyDevice *,NSString **)::kMaxThreadsPerThreadgroup = objc_msgSend(a13, "maxTotalComputeThreadsPerThreadgroup");
  }
  if (v29)
  {
    objc_msgSend(v29, "maxPipelineChildren");
    v53 = v247;
    LODWORD(v245) = v247;
    objc_msgSend(v29, "maxPipelineChildren");
    v54 = DWORD2(v247);
    HIDWORD(v245) = DWORD2(v247);
    objc_msgSend(v29, "maxPipelineChildren");
    v55 = v248;
  }
  else
  {
    v55 = 0;
    v54 = 0;
    v53 = 0;
    v245 = 0;
  }
  v246 = v55;
  v58 = objc_msgSend(v29, "pipelineMemoryLength");
  *(_QWORD *)&v247 = 0;
  DWORD2(v247) = 0;
  if (v55)
    v59 = v54 == 0;
  else
    v59 = 1;
  v60 = v59 || v53 == 0;
  v61 = &v245;
  if (v60)
    v61 = (uint64_t *)&v247;
  v243 = *v61;
  v244 = *((_DWORD *)v61 + 2);
  if ((v62 & 1) == 0
  {
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::validateMeshState<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXA10FamilyDevice *,NSString **)::kMaxMeshTgsTier1 = 0x100000400;
    dword_255FF8AD0 = 1;
  }
  if (v244)
    v63 = HIDWORD(v243) == 0;
  else
    v63 = 1;
  v64 = v63 || (_DWORD)v243 == 0;
  v65 = &v243;
  if (v64)
    v65 = &AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::validateMeshState<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXA10FamilyDevice *,NSString **)::kMaxMeshTgsTier1;
  v66 = *((_DWORD *)v65 + 2);
  v243 = *v65;
  v244 = v66;
  *(_QWORD *)&v226->_anon_1b8[656] = v243;
  *(_DWORD *)&v226->_anon_1b8[664] = v66;
  if (v58)
  {
    v67 = 0;
    v68 = CFSTR("Payload size > %u");
  }
  else
  {
    *(_DWORD *)&v226->_anon_1b8[668] = 0;
    v69 = objc_msgSend(v29, "maxTotalThreadsPerObjectThreadgroup");
    v70 = objc_msgSend(v29, "maxTotalThreadsPerMeshThreadgroup");
    v67 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::validateMeshState<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXA10FamilyDevice *,NSString **)::kMaxThreadsPerThreadgroup;
    if (v69)
      v71 = v69;
    else
      v71 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::validateMeshState<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor *,AGXA10FamilyDevice *,NSString **)::kMaxThreadsPerThreadgroup;
    *(_DWORD *)&v226->_anon_1b8[672] = v71;
    if (v71 <= v67)
    {
      if (v70)
        v72 = v70;
      else
        v72 = v67;
      *(_DWORD *)&v226->_anon_1b8[676] = v72;
      if (v72 <= v67)
      {
        v56 = 1;
        v57 = &stru_2504033A8;
        a8 = v35;
        if (v35)
          goto LABEL_84;
        goto LABEL_87;
      }
      v68 = CFSTR("maxTotalThreadsPerMeshThreadgroup > %u");
    }
    else
    {
      v68 = CFSTR("maxTotalThreadsPerObjectThreadgroup > %u");
    }
  }
  v57 = (const __CFString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", v68, v67);
  v56 = 0;
  a8 = v35;
  if (v35)
  {
LABEL_84:
    v73 = (void *)objc_msgSend(v29, "objectLinkedFunctions");
    objc_msgSend(v73, "functions");
    objc_msgSend(v73, "privateFunctions");
    objc_msgSend(v73, "binaryFunctions");
    if (object && objc_msgSend(a7, "relocations"))
      objc_msgSend((id)objc_msgSend(a7, "relocations"), "count");
  }
LABEL_87:
  v74 = (void *)objc_msgSend(v29, "meshLinkedFunctions");
  objc_msgSend(v74, "functions");
  objc_msgSend(v74, "privateFunctions");
  objc_msgSend(v74, "binaryFunctions");
  if (objc_msgSend(a10, "relocations"))
    objc_msgSend((id)objc_msgSend(a10, "relocations"), "count");
LABEL_89:
  v75 = &v226->_impl;
  if ((_QWORD)v225)
  {
    if (objc_msgSend(v29, "supportIndirectCommandBuffers", COERCE_DOUBLE(AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setFragmentVariant((uint64_t)v75, v225))))
    {
      if (*(_BYTE *)(v225 + 382))
      {
        atomic_store(1u, (unsigned __int8 *)(a13[101] + 6753));
        if (!*(_BYTE *)(v225 + 3228))
          atomic_store(1u, (unsigned __int8 *)(a13[101] + 6752));
      }
      if (*(_BYTE *)(v225 + 3229))
        atomic_store(1u, (unsigned __int8 *)(a13[101] + 6755));
    }
    v76 = (void *)objc_msgSend(v29, "fragmentLinkedFunctions");
    objc_msgSend(v76, "functions");
    objc_msgSend(v76, "privateFunctions");
    a8 = v35;
    objc_msgSend(v76, "binaryFunctions");
    if (objc_msgSend(a1, "relocations"))
      objc_msgSend((id)objc_msgSend(a1, "relocations"), "count");
    v77 = a20;
    if ((v56 & 1) != 0)
    {
LABEL_99:
      if (!a16)
      {
        v85 = 0;
LABEL_288:
        (*(void (**)(uint64_t, AGXA10FamilyRenderPipeline *, void *, _QWORD))(v77 + 16))(v77, v226, v85, 0);

        goto LABEL_289;
      }
      v207 = v77;
      if ((a16 & 0x400000) != 0)
      {
        if (a19 == 0)
        {
          v79 = a11;
          v78 = 0;
          v204 = 0;
        }
        else
        {
          v86 = objc_alloc_init(MEMORY[0x24BDBCED8]);
          if (v77)
          {
            v204 = 0;
          }
          else
          {
            v87 = (void *)MEMORY[0x24BDD16E0];
            v88 = mach_absolute_time() - a18;
            if (getTimebaseInfo(void)::once[0] != -1)
              dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
            v204 = objc_msgSend(v87, "numberWithUnsignedLongLong:", v88 * getTimebaseInfo(void)::sTimebaseInfo / unk_254235750);
            objc_msgSend(v86, "setObject:forKey:", v204, *MEMORY[0x24BDDD1A0]);
          }
          v89 = (_QWORD *)MEMORY[0x24BDDD358];
          if ((_QWORD)a19)
            objc_msgSend(v86, "setObject:forKey:", (_QWORD)a19, *MEMORY[0x24BDDD358]);
          v90 = (_QWORD *)MEMORY[0x24BDDD2E8];
          if (*((_QWORD *)&a19 + 1))
            objc_msgSend(v86, "setObject:forKey:", *((_QWORD *)&a19 + 1), *MEMORY[0x24BDDD2E8]);
          RenderPipelinePerformanceStatistics = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getRenderPipelinePerformanceStatistics((_QWORD *)v225, *((_QWORD **)&v225 + 1), v86);
          v92 = (void *)objc_msgSend(RenderPipelinePerformanceStatistics, "objectForKey:", *v89);
          v93 = (_QWORD *)MEMORY[0x24BDDD300];
          v94 = objc_msgSend(v92, "objectForKey:", *MEMORY[0x24BDDD300]);
          v95 = (_QWORD *)MEMORY[0x24BDDD310];
          v96 = objc_msgSend(v92, "objectForKey:", *MEMORY[0x24BDDD310]);
          v97 = (void *)objc_msgSend(RenderPipelinePerformanceStatistics, "objectForKey:", *v90);
          v98 = objc_msgSend(v97, "objectForKey:", *v93);
          v99 = objc_msgSend(v97, "objectForKey:", *v95);
          v100 = (void *)objc_msgSend(v86, "objectForKey:", *MEMORY[0x24BDDD358]);
          objc_msgSend(v100, "setObject:forKey:", v94, *v93);
          objc_msgSend(v100, "setObject:forKey:", v96, *v95);
          v78 = v86;
          v101 = (void *)objc_msgSend(v86, "objectForKey:", *MEMORY[0x24BDDD2E8]);
          v79 = a11;
          v102 = v101;
          objc_msgSend(v101, "setObject:forKey:", v98, *v93);
          objc_msgSend(v102, "setObject:forKey:", v99, *v95);

          _MTLAddCompilePipelinePerformanceStatistics();
        }
      }
      else
      {
        v78 = 0;
        v204 = 0;
        v79 = a11;
      }
      v205 = a8;
      v206 = v78;
      if (!a17)
      {
        v121 = 0;
        v126 = 0;
        objecta = 0;
        v216 = 0;
        v103 = *((_QWORD *)&v225 + 1);
        v145 = a16;
        v77 = v207;
        v146 = v79;
        v85 = 0;
        goto LABEL_254;
      }
      v103 = *((_QWORD *)&v225 + 1);
      if (v213)
      {
        v104 = (os_unfair_lock_s *)(v213 + 1368);
        os_unfair_lock_lock((os_unfair_lock_t)(v213 + 1368));
        v105 = *(_QWORD *)(v213 + 1328);
        v106 = *(unsigned int *)(v213 + 1336);
        v107 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v105, *(_DWORD *)(v213 + 1336), (_QWORD *)v208);
        v109 = v210;
        v108 = v211;
        v110 = object;
        if (!v107)
        {
          if ((_DWORD)v106 == 4)
          {
            v105 = operator new();
            v106 = 0;
            *(_OWORD *)(v105 + 192) = 0u;
            *(_OWORD *)(v105 + 208) = 0u;
            *(_OWORD *)(v105 + 160) = 0u;
            *(_OWORD *)(v105 + 176) = 0u;
            *(_OWORD *)(v105 + 128) = 0u;
            *(_OWORD *)(v105 + 144) = 0u;
            *(_OWORD *)(v105 + 96) = 0u;
            *(_OWORD *)(v105 + 112) = 0u;
            *(_OWORD *)(v105 + 64) = 0u;
            *(_OWORD *)(v105 + 80) = 0u;
            *(_OWORD *)(v105 + 32) = 0u;
            *(_OWORD *)(v105 + 48) = 0u;
            *(_OWORD *)v105 = 0u;
            *(_OWORD *)(v105 + 16) = 0u;
            *(_QWORD *)(v105 + 224) = *(_QWORD *)(v213 + 1328);
            *(_QWORD *)(v213 + 1328) = v105;
            *(_DWORD *)(v213 + 1336) = 0;
          }
          v111 = (_OWORD *)(v105 + 32 * v106);
          v112 = *(_OWORD *)(v208 + 16);
          *v111 = *(_OWORD *)v208;
          v111[1] = v112;
          v113 = *(_QWORD *)(v213 + 1328);
          v114 = *(_DWORD *)(v213 + 1336);
          *(_DWORD *)(v213 + 1336) = v114 + 1;
          v107 = v113 + 24 * v114 + 128;
        }
        v115 = *(NSObject **)(v107 + 16);
        if (v115)
          dispatch_retain(*(dispatch_object_t *)(v107 + 16));
        v214 = v115;
        os_unfair_lock_unlock(v104);
        v77 = v207;
        v116 = v215;
        if (v215)
        {
LABEL_132:
          v117 = (os_unfair_lock_s *)&v116[211];
          os_unfair_lock_lock((os_unfair_lock_t)&v116[211]);
          isa = (uint64_t)v116[206].isa;
          isa_low = LODWORD(v116[207].isa);
          v120 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)isa, (int)v116[207].isa, (_QWORD *)v109);
          v121 = v214;
          if (!v120)
          {
            if ((_DWORD)isa_low == 4)
            {
              isa = operator new();
              isa_low = 0;
              *(_OWORD *)(isa + 192) = 0u;
              *(_OWORD *)(isa + 208) = 0u;
              *(_OWORD *)(isa + 160) = 0u;
              *(_OWORD *)(isa + 176) = 0u;
              *(_OWORD *)(isa + 128) = 0u;
              *(_OWORD *)(isa + 144) = 0u;
              *(_OWORD *)(isa + 96) = 0u;
              *(_OWORD *)(isa + 112) = 0u;
              *(_OWORD *)(isa + 64) = 0u;
              *(_OWORD *)(isa + 80) = 0u;
              *(_OWORD *)(isa + 32) = 0u;
              *(_OWORD *)(isa + 48) = 0u;
              *(_OWORD *)isa = 0u;
              *(_OWORD *)(isa + 16) = 0u;
              *(isa + 224) = v215[206];
              v215[206].isa = (Class)isa;
              LODWORD(v215[207].isa) = 0;
            }
            v122 = (_OWORD *)(isa + 32 * isa_low);
            v123 = *(_OWORD *)(v109 + 16);
            *v122 = *(_OWORD *)v109;
            v122[1] = v123;
            v124 = v215[206].isa;
            v125 = v215[207].isa;
            LODWORD(v215[207].isa) = v125 + 1;
            v120 = (uint64_t)v124 + 24 * v125 + 128;
          }
          v126 = *(NSObject **)(v120 + 16);
          v77 = v207;
          if (v126)
            dispatch_retain(*(dispatch_object_t *)(v120 + 16));
          os_unfair_lock_unlock(v117);
          if (v110)
          {
LABEL_139:
            v127 = (os_unfair_lock_s *)&v110[147];
            os_unfair_lock_lock((os_unfair_lock_t)&v110[147]);
            v128 = (uint64_t)v110[142].isa;
            v129 = LODWORD(v110[143].isa);
            v130 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v128, v129, (_QWORD *)a9);
            if (!v130)
            {
              if ((_DWORD)v129 == 4)
              {
                v128 = operator new();
                v129 = 0;
                *(_OWORD *)(v128 + 192) = 0u;
                *(_OWORD *)(v128 + 208) = 0u;
                *(_OWORD *)(v128 + 160) = 0u;
                *(_OWORD *)(v128 + 176) = 0u;
                *(_OWORD *)(v128 + 128) = 0u;
                *(_OWORD *)(v128 + 144) = 0u;
                *(_OWORD *)(v128 + 96) = 0u;
                *(_OWORD *)(v128 + 112) = 0u;
                *(_OWORD *)(v128 + 64) = 0u;
                *(_OWORD *)(v128 + 80) = 0u;
                *(_OWORD *)(v128 + 32) = 0u;
                *(_OWORD *)(v128 + 48) = 0u;
                *(_OWORD *)v128 = 0u;
                *(_OWORD *)(v128 + 16) = 0u;
                *(v128 + 224) = object[142];
                object[142].isa = (Class)v128;
                LODWORD(object[143].isa) = 0;
              }
              v131 = (_OWORD *)(v128 + 32 * v129);
              v132 = *(_OWORD *)(a9 + 16);
              *v131 = *(_OWORD *)a9;
              v131[1] = v132;
              v133 = object[142].isa;
              v134 = object[143].isa;
              LODWORD(object[143].isa) = v134 + 1;
              v130 = (uint64_t)v133 + 24 * v134 + 128;
            }
            v135 = *(NSObject **)(v130 + 16);
            v77 = v207;
            if (v135)
              dispatch_retain(*(dispatch_object_t *)(v130 + 16));
            os_unfair_lock_unlock(v127);
            objecta = v135;
            if (v108)
              goto LABEL_146;
            goto LABEL_157;
          }
LABEL_156:
          objecta = 0;
          if (v108)
          {
LABEL_146:
            v136 = (os_unfair_lock_s *)(v108 + 1400);
            os_unfair_lock_lock((os_unfair_lock_t)(v108 + 1400));
            v137 = *(_QWORD *)(v108 + 1360);
            v138 = *(unsigned int *)(v108 + 1368);
            v139 = VectorMap<ReflectionKey,AGX::Program<AGX::G9::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find((_QWORD *)v137, *(_DWORD *)(v108 + 1368), (_QWORD *)a12);
            if (!v139)
            {
              if ((_DWORD)v138 == 4)
              {
                v137 = operator new();
                v138 = 0;
                *(_OWORD *)(v137 + 192) = 0u;
                *(_OWORD *)(v137 + 208) = 0u;
                *(_OWORD *)(v137 + 160) = 0u;
                *(_OWORD *)(v137 + 176) = 0u;
                *(_OWORD *)(v137 + 128) = 0u;
                *(_OWORD *)(v137 + 144) = 0u;
                *(_OWORD *)(v137 + 96) = 0u;
                *(_OWORD *)(v137 + 112) = 0u;
                *(_OWORD *)(v137 + 64) = 0u;
                *(_OWORD *)(v137 + 80) = 0u;
                *(_OWORD *)(v137 + 32) = 0u;
                *(_OWORD *)(v137 + 48) = 0u;
                *(_OWORD *)v137 = 0u;
                *(_OWORD *)(v137 + 16) = 0u;
                *(_QWORD *)(v137 + 224) = *(_QWORD *)(v108 + 1360);
                *(_QWORD *)(v108 + 1360) = v137;
                *(_DWORD *)(v108 + 1368) = 0;
              }
              v140 = (_OWORD *)(v137 + 32 * v138);
              v141 = *(_OWORD *)(a12 + 16);
              *v140 = *(_OWORD *)a12;
              v140[1] = v141;
              v142 = *(_QWORD *)(v108 + 1360);
              v143 = *(_DWORD *)(v108 + 1368);
              *(_DWORD *)(v108 + 1368) = v143 + 1;
              v139 = v142 + 24 * v143 + 128;
            }
            v144 = *(NSObject **)(v139 + 16);
            v145 = a16;
            v77 = v207;
            v146 = v79;
            if (v144)
              dispatch_retain(*(dispatch_object_t *)(v139 + 16));
            os_unfair_lock_unlock(v136);
LABEL_158:
            if (!((unint64_t)v121 | (unint64_t)v126) && !objecta && !v144)
            {
              v85 = 0;
              v121 = 0;
              v126 = 0;
              objecta = 0;
              v216 = 0;
              goto LABEL_254;
            }
            v216 = v144;
            if ((unint64_t)objecta | (unint64_t)v144)
            {
              v147 = objc_alloc(MEMORY[0x24BDDD6D0]);
              if ((_QWORD)v225)
                v148 = *(unsigned __int8 *)(v225 + 3217) | (2 * *(unsigned __int8 *)(v225 + 3219)) | (4 * *(unsigned __int8 *)(v225 + 3220)) | (16 * (*(_DWORD *)(v225 + 320) != 0)) | ((unint64_t)(*(_DWORD *)(v225 + 332) != 0) << 10) | (32 * *(unsigned __int8 *)(v225 + 3221)) | ((unint64_t)*(unsigned __int8 *)(v225 + 3218) << 6);
              else
                v148 = 0;
              if (v146)
                v148 = v148 & 0xFFFFFFFFFFFFFD77 | (8 * (*(_DWORD *)(v146 + 320) != 0)) | ((unint64_t)(*(_DWORD *)(v146 + 332) != 0) << 9) | ((unint64_t)*(unsigned int *)(v146 + 2832) >> 11) & 0x80;
              v149 = objc_msgSend(v147, "initWithObjectData:objectDynamicLibraries:meshData:meshDynamicLibraries:fragmentData:fragmentDynamicLibraries:device:options:flags:", objecta, 0, v144, 0, v126, 0, a13, a16 | 3, v148);
            }
            else
            {
              if (!((unint64_t)v121 | (unint64_t)v126))
              {
                v85 = 0;
LABEL_173:
                if (v225 != 0 && (v145 & 0x40000) != 0)
                {
                  v150 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getRenderPipelinePerformanceStatistics((_QWORD *)v225, *((_QWORD **)&v225 + 1), v206);
                  v151 = v150;
                  if (v204)
                    objc_msgSend(v150, "setObject:forKey:", v204, *MEMORY[0x24BDDD1A0]);
                  objc_msgSend(v85, "setPerformanceStatistics:", v151);

                }
                if ((v145 & 0x200000) != 0)
                {
                  *((_QWORD *)&v247 + 1) = 0;
                  *(_QWORD *)&v248 = 0;
                  *(_QWORD *)&v247 = (char *)&v247 + 8;
                  if ((_QWORD)v225)
                  {
                    v152 = *(unint64_t **)(v225 + 968);
                    if (((*(_QWORD *)(v225 + 976) - (_QWORD)v152) >> 4))
                    {
                      v153 = 16 * ((*(_QWORD *)(v225 + 976) - (_QWORD)v152) >> 4);
                      do
                      {
                        v154 = std::__tree<std::pair<unsigned long long,unsigned long long>>::__find_equal<std::pair<unsigned long long,unsigned long long>>(&v247, (_QWORD *)&v247 + 1, &v245, &v243, *v152, v152[1]);
                        if (!*v154)
                        {
                          v155 = v154;
                          v156 = operator new(0x30uLL);
                          v156[2] = *(_OWORD *)v152;
                          v157 = v245;
                          *(_QWORD *)v156 = 0;
                          *((_QWORD *)v156 + 1) = 0;
                          *((_QWORD *)v156 + 2) = v157;
                          *v155 = v156;
                          if (*(_QWORD *)v247)
                          {
                            *(_QWORD *)&v247 = *(_QWORD *)v247;
                            v156 = (_OWORD *)*v155;
                          }
                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v247 + 1), (uint64_t *)v156);
                          *(_QWORD *)&v248 = v248 + 1;
                        }
                        v152 += 2;
                        v153 -= 16;
                      }
                      while (v153);
                    }
                  }
                  if (*((_QWORD *)&v225 + 1))
                  {
                    v158 = *(unint64_t **)(*((_QWORD *)&v225 + 1) + 968);
                    if (((*(_QWORD *)(*((_QWORD *)&v225 + 1) + 976) - (_QWORD)v158) >> 4))
                    {
                      v159 = 16 * ((*(_QWORD *)(*((_QWORD *)&v225 + 1) + 976) - (_QWORD)v158) >> 4);
                      do
                      {
                        v160 = std::__tree<std::pair<unsigned long long,unsigned long long>>::__find_equal<std::pair<unsigned long long,unsigned long long>>(&v247, (_QWORD *)&v247 + 1, &v245, &v243, *v158, v158[1]);
                        if (!*v160)
                        {
                          v161 = v160;
                          v162 = operator new(0x30uLL);
                          v162[2] = *(_OWORD *)v158;
                          v163 = v245;
                          *(_QWORD *)v162 = 0;
                          *((_QWORD *)v162 + 1) = 0;
                          *((_QWORD *)v162 + 2) = v163;
                          *v161 = v162;
                          if (*(_QWORD *)v247)
                          {
                            *(_QWORD *)&v247 = *(_QWORD *)v247;
                            v162 = (_OWORD *)*v161;
                          }
                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v247 + 1), (uint64_t *)v162);
                          *(_QWORD *)&v248 = v248 + 1;
                        }
                        v158 += 2;
                        v159 -= 16;
                      }
                      while (v159);
                    }
                  }
                  v77 = v207;
                  if ((_QWORD)v248)
                  {
                    v164 = (_OWORD *)v247;
                    if ((__int128 *)v247 != (__int128 *)((char *)&v247 + 8))
                    {
                      v165 = 0;
                      v166 = (_OWORD *)v247;
                      do
                      {
                        v167 = v165;
                        v168 = (_QWORD *)*((_QWORD *)v166 + 1);
                        if (v168)
                        {
                          do
                          {
                            v169 = v168;
                            v168 = (_QWORD *)*v168;
                          }
                          while (v168);
                        }
                        else
                        {
                          do
                          {
                            v169 = (_OWORD *)*((_QWORD *)v166 + 2);
                            v59 = *(_QWORD *)v169 == (_QWORD)v166;
                            v166 = v169;
                          }
                          while (!v59);
                        }
                        v165 = v167 + 1;
                        v166 = v169;
                      }
                      while (v169 != (__int128 *)((char *)&v247 + 8));
                      if (v167 >= 0xFFFFFFFFFFFFFFFLL)
                        abort();
                      v170 = (char *)operator new(16 * v165);
                      v171 = v170;
                      v172 = v170;
                      do
                      {
                        *(_OWORD *)v172 = v164[2];
                        v173 = (_QWORD *)*((_QWORD *)v164 + 1);
                        if (v173)
                        {
                          do
                          {
                            v174 = v173;
                            v173 = (_QWORD *)*v173;
                          }
                          while (v173);
                        }
                        else
                        {
                          do
                          {
                            v174 = (_OWORD *)*((_QWORD *)v164 + 2);
                            v59 = *(_QWORD *)v174 == (_QWORD)v164;
                            v164 = v174;
                          }
                          while (!v59);
                        }
                        v172 += 16;
                        v164 = v174;
                      }
                      while (v174 != (__int128 *)((char *)&v247 + 8));
                      v175 = v172 - v170;
                      v176 = (v175 >> 4);
                      v177 = v175 & 0xFFFFFFFF0;
                      v212 = v170;
                      if ((v175 & 0xFFFFFFFF0) != 0)
                      {
                        v178 = (char *)operator new(8 * v176);
                        v179 = &v178[8 * v176];
                      }
                      else
                      {
                        v178 = 0;
                        v179 = 0;
                      }
                      v219 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
                      v209 = v85;
                      if (v177)
                      {
                        v180 = 0;
                        v181 = v178;
                        v182 = v176;
                        while (1)
                        {
                          v183 = &v171[16 * v180];
                          if (v181 >= v179)
                            break;
                          *(_QWORD *)v181 = *(_QWORD *)v183;
                          v181 += 8;
LABEL_238:
                          objc_msgSend(v219, "addObject:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)v183));
                          if (++v180 == v176)
                            goto LABEL_250;
                        }
                        v184 = (v181 - v178) >> 3;
                        v185 = v184 + 1;
                        if ((unint64_t)(v184 + 1) >> 61)
                          abort();
                        if ((v179 - v178) >> 2 > v185)
                          v185 = (v179 - v178) >> 2;
                        if ((unint64_t)(v179 - v178) >= 0x7FFFFFFFFFFFFFF8)
                          v186 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v186 = v185;
                        if (v186)
                        {
                          if (v186 >> 61)
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          v187 = operator new(8 * v186);
                        }
                        else
                        {
                          v187 = 0;
                        }
                        v188 = &v187[8 * v184];
                        *(_QWORD *)v188 = *(_QWORD *)v183;
                        v189 = v188 + 8;
                        if (v181 != v178)
                        {
                          v190 = v181 - 8 - v178;
                          if (v190 >= 0x168)
                          {
                            if (&v187[v181 - v178 - 8 - (v190 & 0xFFFFFFFFFFFFFFF8)] > &v187[v181 - v178 - 8])
                            {
                              v191 = v181;
                            }
                            else if (&v181[-(v190 & 0xFFFFFFFFFFFFFFF8) - 8] > v181 - 8)
                            {
                              v191 = v181;
                            }
                            else if ((unint64_t)(v178 - v187) >= 0x20)
                            {
                              v193 = (v190 >> 3) + 1;
                              v191 = &v181[-8 * (v193 & 0x3FFFFFFFFFFFFFFCLL)];
                              v194 = &v187[8 * v184 - 16];
                              v195 = v181 - 16;
                              v196 = v193 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v197 = *(_OWORD *)v195;
                                *(v194 - 1) = *((_OWORD *)v195 - 1);
                                *v194 = v197;
                                v194 -= 2;
                                v195 -= 32;
                                v196 -= 4;
                              }
                              while (v196);
                              v188 -= 8 * (v193 & 0x3FFFFFFFFFFFFFFCLL);
                              if (v193 == (v193 & 0x3FFFFFFFFFFFFFFCLL))
                                goto LABEL_235;
                            }
                            else
                            {
                              v191 = v181;
                            }
                          }
                          else
                          {
                            v191 = v181;
                          }
                          do
                          {
                            v192 = *((_QWORD *)v191 - 1);
                            v191 -= 8;
                            *((_QWORD *)v188 - 1) = v192;
                            v188 -= 8;
                          }
                          while (v191 != v178);
                        }
LABEL_235:
                        v179 = &v187[8 * v186];
                        if (v178)
                          operator delete(v178);
                        v178 = v188;
                        v181 = v189;
                        v171 = v212;
                        v176 = v182;
                        goto LABEL_238;
                      }
LABEL_250:
                      v85 = v209;
                      objc_msgSend(v209, "setConstantSamplerDescriptorsFromBitmasks:count:", v178, v176);
                      v146 = a11;
                      v121 = v214;
                      objc_msgSend(v209, "setConstantSamplerUniqueIdentifiers:", v219);

                      if (v178)
                        operator delete(v178);
                      operator delete(v171);
                      v103 = *((_QWORD *)&v225 + 1);
                      v77 = v207;
                    }
                  }
                  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)&v247 + 1));
                  v145 = a16;
                }
LABEL_254:
                if ((v145 & 0x1000000) == 0)
                {
LABEL_280:

                  if (v121)
                    dispatch_release(v121);
                  if (v126)
                    dispatch_release(v126);
                  if (objecta)
                    dispatch_release(objecta);
                  if (v216)
                    dispatch_release(v216);
                  goto LABEL_288;
                }
                v198 = MEMORY[0x24BDAC760];
                v239[0] = MEMORY[0x24BDAC760];
                v239[1] = 3221225472;
                v240 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
                v241 = &unk_250400F90;
                v242 = v226;
                if (v103)
                {
                  if (*(_QWORD *)(v103 + 3808))
                  {
                    v199 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD588]), "initWithData:linkedDynamicLibraries:", *(_QWORD *)(v103 + 3808), 0);
                    v240((uint64_t)v239, (uint64_t)v199);
                    goto LABEL_261;
                  }
                  v199 = 0;
                }
                else
                {
                  v199 = 0;
                }
                ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke((uint64_t)v239, 0);
LABEL_261:

                v235[0] = v198;
                v235[1] = 3221225472;
                v236 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
                v237 = &unk_250400F90;
                v238 = v226;
                if ((_QWORD)v225)
                {
                  if (*(_QWORD *)(v225 + 3288))
                  {
                    v200 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD588]), "initWithData:linkedDynamicLibraries:", *(_QWORD *)(v225 + 3288), 0);
                    v236((uint64_t)v235, (uint64_t)v200);
                    goto LABEL_267;
                  }
                  v200 = 0;
                }
                else
                {
                  v200 = 0;
                }
                ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2((uint64_t)v235, 0);
LABEL_267:

                v231[0] = v198;
                v231[1] = 3221225472;
                v232 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3;
                v233 = &unk_250400F90;
                v234 = v226;
                if (v146)
                {
                  if (*(_QWORD *)(v146 + 3048))
                  {
                    v201 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD588]), "initWithData:linkedDynamicLibraries:", *(_QWORD *)(v146 + 3048), 0);
                    v232((uint64_t)v231, (uint64_t)v201);
                    goto LABEL_273;
                  }
                  v201 = 0;
                }
                else
                {
                  v201 = 0;
                }
                ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3((uint64_t)v231, 0);
LABEL_273:

                v227[0] = v198;
                v227[1] = 3221225472;
                v228 = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4;
                v229 = &unk_250400F90;
                v230 = v226;
                if (v205)
                {
                  if (*(_QWORD *)(v205 + 3040))
                  {
                    v202 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD588]), "initWithData:linkedDynamicLibraries:", *(_QWORD *)(v205 + 3040), 0);
                    v228((uint64_t)v227, (uint64_t)v202);
LABEL_279:

                    goto LABEL_280;
                  }
                  v202 = 0;
                }
                else
                {
                  v202 = 0;
                }
                ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4((uint64_t)v227, 0);
                goto LABEL_279;
              }
              v146 = v79;
              v149 = objc_msgSend(objc_alloc(MEMORY[0x24BDDD6D0]), "initWithVertexData:vertexDynamicLibraries:fragmentData:fragmentDynamicLibraries:serializedVertexDescriptor:device:options:flags:", v121, 0, v126, 0, a14, a13, a16 | 3, AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getRenderPipelineFlags(v225, *((_DWORD **)&v225 + 1)));
            }
            v85 = (void *)v149;
            v145 = a16;
            goto LABEL_173;
          }
LABEL_157:
          v144 = 0;
          v145 = a16;
          v146 = v79;
          goto LABEL_158;
        }
      }
      else
      {
        v214 = 0;
        v77 = v207;
        v109 = v210;
        v108 = v211;
        v110 = object;
        v116 = v215;
        if (v215)
          goto LABEL_132;
      }
      v126 = 0;
      v121 = v214;
      if (v110)
        goto LABEL_139;
      goto LABEL_156;
    }
  }
  else
  {
    v75->fragment_variant = 0;
    v80 = vand_s8(*(int8x8_t *)&v226->_anon_1b8[564], (int8x8_t)0xF8FFFFFFFC1FFFFFLL);
    *(int8x8_t *)&v226->_anon_1b8[564] = vorr_s8(v80, (int8x8_t)0x200000);
    v81 = *(_DWORD *)&v226->_anon_1b8[576] & 0xF8FFFFFF;
    *(_DWORD *)&v226->_anon_1b8[568] = v80.i32[1] | 0x100000;
    *(_DWORD *)&v226->_anon_1b8[576] = v81 | 0x100000;
    v77 = a20;
    if ((v56 & 1) != 0)
      goto LABEL_99;
  }

  if (v57)
    v82 = v57;
  else
    v82 = CFSTR("Internal error during render pipeline creation");
  v83 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v82, *MEMORY[0x24BDD0FC8]);
  v84 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v83);
  if (v77)
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v77 + 16))(v77, 0, 0, v84);
LABEL_289:
  MEMORY[0x234927ECC](v220, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](v221, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](v222, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](v223, 0xC400A2AC0F1);
  return MEMORY[0x234927ECC](v224, 0xC400A2AC0F1);
}

void sub_232C6F29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  MEMORY[0x234927ECC](a25, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](a26, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](a27, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](a28, 0xC400A2AC0F1);
  MEMORY[0x234927ECC](a29, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *global_queue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  char **v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  char **v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t *v82;
  uint64_t v83;
  os_unfair_lock_s *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  NSObject *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  char **v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  NSObject *queue;
  int8x16_t v126;
  NSObject *group;
  BOOL v129;
  int8x16_t v130;
  int8x16_t v131;
  uint64_t v132;
  _QWORD v133[8];
  _QWORD v134[2];
  uint64_t (*v135)(uint64_t, uint64_t, uint64_t);
  void *v136;
  uint64_t v137;
  uint64_t *v138;
  std::vector<unsigned int> v139;
  char *v140;
  uint64_t *v141;
  unsigned int v142;
  _QWORD v143[2];
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  void *v145;
  uint64_t v146;
  uint64_t *v147;
  _QWORD v148[2];
  uint64_t (*v149)(uint64_t, uint64_t, uint64_t);
  void *v150;
  uint64_t v151;
  uint64_t *v152;
  std::vector<unsigned int> v153;
  char *value;
  uint64_t v155;
  int v156;
  _QWORD block[7];
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  __n128 (*v161)(uint64_t, uint64_t);
  uint64_t (*v162)();
  void *v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t, uint64_t, __CFString *);
  void *v169;
  int8x16_t v170;
  uint64_t v171;
  size_t v172;
  size_t size;
  void *buffer;
  CC_LONG len[2];
  CC_SHA256_CTX c;
  __int128 object;
  __int128 v178;
  uint64_t *v179;
  __int128 md;
  __int128 v181;
  CC_SHA256_CTX *p_c;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  v158 = 0;
  v159 = &v158;
  v160 = 0x5012000000;
  v161 = __Block_byref_object_copy__1681;
  v162 = __Block_byref_object_dispose__1682;
  v163 = &unk_232D8A46F;
  v164 = 0u;
  v165 = 0u;
  v5 = dispatch_group_create();
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_1684;
  block[3] = &unk_250400398;
  v7 = a1[4].i64[0];
  block[5] = &v158;
  block[6] = v7;
  v132 = a2;
  block[4] = a2;
  group = v5;
  queue = global_queue;
  dispatch_group_async(v5, global_queue, block);
  v8 = a1[4].i64[1];
  if (v8)
    v129 = *(_BYTE *)(v8 + 3223) != 0;
  else
    v129 = 0;
  v9 = *(_QWORD *)(a2 + 152);
  v10 = *(_DWORD *)(v9 + 3752) & 3 | (4 * (*(_DWORD *)(a2 + 960) & 7));
  v124 = *(_DWORD *)(v9 + 3756);
  LODWORD(v153.__end_) = 43;
  value = 0;
  v155 = 0;
  v153.__end_cap_.__value_ = 0;
  v156 = v10 | 0x60;
  v153.__begin_ = (std::vector<unsigned int>::pointer)off_250400B38;
  v11 = (uint64_t *)a1[5].i64[0];
  v12 = *(_QWORD *)a1[4].i64[0];
  v126 = a1[2];
  v148[0] = MEMORY[0x24BDAC760];
  v148[1] = 3221225472;
  v149 = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
  v150 = &unk_250400F18;
  v151 = v132;
  v152 = &v158;
  os_unfair_lock_lock((os_unfair_lock_t)&AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::sw_tessellation_lock);
  v13 = (os_unfair_lock_s *)(v12 + 728);
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 728));
  v14 = *(unsigned int *)(v12 + 400);
  v15 = *(_QWORD *)(v12 + 392);
  if ((_DWORD)v14)
  {
    v16 = 0;
    v17 = (int *)(v15 + 40);
    while (1)
    {
      v18 = *v17;
      v17 += 12;
      if (v156 == v18)
        break;
      if (v14 == ++v16)
        goto LABEL_8;
    }
    v24 = v15 + 48 * v16;
  }
  else
  {
LABEL_8:
    v19 = *(_QWORD *)(v15 + 384);
    if (v19)
    {
      v20 = 1;
      while (1)
      {
        if (v156 == *(_DWORD *)(v19 + 40))
        {
          v20 = 0;
          goto LABEL_24;
        }
        if (v156 == *(_DWORD *)(v19 + 88))
          goto LABEL_24;
        if (v156 == *(_DWORD *)(v19 + 136))
        {
          v20 = 2;
          goto LABEL_24;
        }
        if (v156 == *(_DWORD *)(v19 + 184))
          break;
        v19 = *(_QWORD *)(v19 + 384);
        if (!v19)
          goto LABEL_15;
      }
      v20 = 3;
LABEL_24:
      v24 = v19 + 48 * v20;
    }
    else
    {
LABEL_15:
      if ((_DWORD)v14 == 4)
      {
        v15 = operator new();
        LODWORD(v14) = 0;
        *(_DWORD *)(v15 + 8) = 43;
        *(_DWORD *)(v15 + 56) = 43;
        *(_DWORD *)(v15 + 104) = 43;
        *(_DWORD *)(v15 + 152) = 43;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)v15 = off_250400B38;
        *(_QWORD *)(v15 + 72) = 0;
        *(_QWORD *)(v15 + 80) = 0;
        *(_QWORD *)(v15 + 64) = 0;
        *(_DWORD *)(v15 + 88) = 0;
        *(_QWORD *)(v15 + 48) = off_250400B38;
        *(_QWORD *)(v15 + 120) = 0;
        *(_QWORD *)(v15 + 128) = 0;
        *(_QWORD *)(v15 + 112) = 0;
        *(_DWORD *)(v15 + 136) = 0;
        *(_QWORD *)(v15 + 96) = off_250400B38;
        *(_QWORD *)(v15 + 160) = 0;
        *(_QWORD *)(v15 + 168) = 0;
        *(_DWORD *)(v15 + 184) = 0;
        *(_QWORD *)(v15 + 176) = 0;
        *(_QWORD *)(v15 + 144) = off_250400B38;
        *(_OWORD *)(v15 + 218) = 0u;
        *(_OWORD *)(v15 + 208) = 0u;
        *(_OWORD *)(v15 + 192) = 0u;
        *(_OWORD *)(v15 + 240) = 0u;
        *(_OWORD *)(v15 + 256) = 0u;
        *(_OWORD *)(v15 + 266) = 0u;
        *(_OWORD *)(v15 + 288) = 0u;
        *(_OWORD *)(v15 + 304) = 0u;
        *(_OWORD *)(v15 + 314) = 0u;
        *(_OWORD *)(v15 + 336) = 0u;
        *(_OWORD *)(v15 + 352) = 0u;
        *(_OWORD *)(v15 + 362) = 0u;
        *(_QWORD *)(v15 + 384) = *(_QWORD *)(v12 + 392);
        *(_QWORD *)(v12 + 392) = v15;
        *(_DWORD *)(v12 + 400) = 0;
      }
      v21 = v15 + 48 * v14;
      *(_DWORD *)(v21 + 8) = v153.__end_;
      if ((std::vector<unsigned int> *)v21 != &v153)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v21 + 16), (char *)v153.__end_cap_.__value_, value, (value - (char *)v153.__end_cap_.__value_) >> 2);
      *(_DWORD *)(v21 + 40) = v156;
      v22 = *(_QWORD *)(v12 + 392);
      v23 = *(_DWORD *)(v12 + 400);
      *(_DWORD *)(v12 + 400) = v23 + 1;
      v24 = v22 + 48 * v23;
    }
  }
  v25 = v24 + 192;
  if (*(_QWORD *)(v24 + 192))
  {
    if (!*(_BYTE *)(v24 + 232))
    {
      os_unfair_lock_unlock(v13);
      goto LABEL_46;
    }
    v26 = *(_QWORD *)(v24 + 200);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;

    *(_QWORD *)(v25 + 24) = 0;
    *(_QWORD *)(v25 + 32) = 0;
    *(_BYTE *)(v25 + 40) = 0;
    v27 = *(NSObject **)v25;
  }
  else
  {
    v27 = dispatch_group_create();
    *(_QWORD *)v25 = v27;
  }
  dispatch_group_enter(v27);
  os_unfair_lock_unlock(v13);
  v28 = *v11;
  v166 = MEMORY[0x24BDAC760];
  v167 = 3221225472;
  v168 = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createSWTessellationPipelineINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyENS1_45TessellatorNonBucketedEmitDrawCommandsProgramEEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EER15AGXA_UnfairLockRT_PT0_P18AGXA10FamilyDeviceP27MTLRenderPipelineDescriptorU13block_pointerFvPNS1_14RenderPipelineE16MTLCompilerErrorE_block_invoke;
  v169 = &unk_2504010B8;
  v170 = vextq_s8(v126, v126, 8uLL);
  v171 = v25;
  v29 = *(_QWORD *)(v28 + 8);
  if (!(*((unsigned int (__cdecl **)())v153.__begin_ + 3))())
    v29 = 0;
  v30 = (void *)objc_opt_new();
  objc_msgSend(v30, "setSync:", 1);
  objc_msgSend(v30, "setPipelineCache:", v29);
  objc_msgSend(v30, "setBinaryArchives:", 0);
  v139.__begin_ = (std::vector<unsigned int>::pointer)MEMORY[0x24BDAC760];
  v139.__end_ = (std::vector<unsigned int>::pointer)3221225472;
  v139.__end_cap_.__value_ = (unsigned int *)___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v140 = (char *)&unk_2504023B8;
  v141 = &v166;
  buffer = 0;
  size = 0;
  (*((void (**)(std::vector<unsigned int> *, unsigned int **, _QWORD *))v153.__begin_ + 2))(&v153, (unsigned int **)&buffer, &size);
  v31 = dispatch_data_create(buffer, size, 0, 0);
  objc_msgSend(v30, "setDriverKeyData:", v31);
  if (objc_msgSend(v30, "airScript"))
  {
    v32 = objc_msgSend(v30, "airScript");
    object = 0uLL;
    *(_QWORD *)&v178 = 0;
    *(_QWORD *)&object = dispatch_data_create_map(v32, (const void **)&object + 1, (size_t *)&v178);
    v33 = *((_QWORD *)&object + 1);
    v34 = **((_DWORD **)&object + 1);
    CC_SHA256_Init(&c);
    (*(void (**)(std::vector<unsigned int> *, CC_SHA256_CTX *))v153.__begin_)(&v153, &c);
    *(_QWORD *)&v184 = 0;
    *(_QWORD *)len = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v33 + v34), &v184, (size_t *)len, v35, v36))
    {
      v37 = (void *)v184;
      CC_SHA256_Update(&c, (const void *)v184, len[0]);
      free(v37);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)object);
    object = md;
    v178 = v181;
    objc_msgSend(v30, "setVendorPluginFunctionId:", &object);
  }
  *(_QWORD *)c.count = MEMORY[0x24BDAC760];
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v139;
  *(_QWORD *)&c.hash[6] = v30;
  if (objc_msgSend(v30, "function"))
  {
    v38 = mach_absolute_time();
    v39 = *(void **)v28;
    *(_QWORD *)&md = MEMORY[0x24BDAC760];
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v181 = ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v181 + 1) = &unk_250402458;
    p_c = &c;
    v183 = v38;
    objc_msgSend(v39, "compileFunctionRequest:completionHandler:", v30, &md);
  }
  else
  {
    if (objc_msgSend(v30, "frameworkData") || objc_msgSend(v30, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = MEMORY[0x24BDAC760];
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v181 = ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v181 + 1) = &unk_250402430;
    p_c = &c;
    v40 = objc_msgSend((id)objc_msgSend(v30, "binaryArchives"), "count");
    v41 = *(void **)v28;
    v42 = objc_msgSend(v30, "driverKeyData");
    if (v40)
      objc_msgSend(v41, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v42, objc_msgSend(v30, "binaryArchives"), 0, objc_msgSend(v30, "pipelineCache"), objc_msgSend(v30, "sync"), &md);
    else
      objc_msgSend(v41, "compileRequest:pipelineCache:sync:completionHandler:", v42, objc_msgSend(v30, "pipelineCache"), objc_msgSend(v30, "sync"), &md);
  }
  dispatch_release(v31);

LABEL_46:
  os_unfair_lock_unlock((os_unfair_lock_t)&AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::sw_tessellation_lock);
  v43 = *(_QWORD *)(v25 + 8);
  v44 = operator new();
  bzero((void *)v44, 0x8B0uLL);
  *(_QWORD *)(v44 + 792) = 0x3F80000000000001;
  *(_QWORD *)(v44 + 800) = 0x1FFFFFFFFLL;
  *(_BYTE *)(v44 + 808) = 1;
  *(_OWORD *)(v44 + 812) = xmmword_232D73520;
  *(_DWORD *)(v44 + 852) = 0;
  *(_QWORD *)(v44 + 828) = 0;
  *(_DWORD *)(v44 + 835) = 0;
  *(_OWORD *)(v44 + 856) = xmmword_232D73530;
  *(_QWORD *)(v44 + 872) = 3840;
  *(_QWORD *)(v44 + 880) = 0x1E3CE50800210000;
  *(_DWORD *)(v44 + 888) = 1184;
  *(_OWORD *)(v44 + 1000) = 0u;
  *(_OWORD *)(v44 + 1016) = 0u;
  *(_OWORD *)(v44 + 1032) = 0u;
  *(_QWORD *)(v44 + 1144) = 0;
  *(_QWORD *)(v44 + 1136) = 0;
  *(_BYTE *)(v44 + 1152) = 0;
  *(_OWORD *)(v44 + 1160) = 0u;
  *(_OWORD *)(v44 + 1176) = 0u;
  *(_OWORD *)(v44 + 1192) = 0u;
  *(_OWORD *)(v44 + 1205) = 0u;
  *(_QWORD *)(v44 + 1232) = 0;
  *(_QWORD *)(v44 + 1224) = 0;
  *(_BYTE *)(v44 + 1240) = 0;
  *(_OWORD *)(v44 + 1248) = 0u;
  *(_OWORD *)(v44 + 1264) = 0u;
  *(_OWORD *)(v44 + 1280) = 0u;
  *(_OWORD *)(v44 + 1293) = 0u;
  *(_QWORD *)(v44 + 1312) = 0;
  *(_QWORD *)(v44 + 1320) = 0;
  *(_BYTE *)(v44 + 1328) = 0;
  *(_OWORD *)(v44 + 1336) = 0u;
  *(_OWORD *)(v44 + 1352) = 0u;
  *(_OWORD *)(v44 + 1368) = 0u;
  *(_OWORD *)(v44 + 1381) = 0u;
  *(_QWORD *)(v44 + 1400) = 0;
  *(_QWORD *)(v44 + 1408) = 0;
  *(_BYTE *)(v44 + 1416) = 0;
  *(_OWORD *)(v44 + 1424) = 0u;
  *(_OWORD *)(v44 + 1440) = 0u;
  *(_OWORD *)(v44 + 1456) = 0u;
  *(_OWORD *)(v44 + 1469) = 0u;
  *(_QWORD *)(v44 + 1496) = 0;
  *(_QWORD *)(v44 + 1488) = 0;
  *(_BYTE *)(v44 + 1504) = 0;
  *(_DWORD *)(v44 + 992) = 0;
  *(_OWORD *)(v44 + 960) = 0u;
  *(_OWORD *)(v44 + 976) = 0u;
  *(_OWORD *)(v44 + 928) = 0u;
  *(_OWORD *)(v44 + 944) = 0u;
  *(_OWORD *)(v44 + 896) = 0u;
  *(_OWORD *)(v44 + 912) = 0u;
  *(_QWORD *)(v44 + 1125) = 0;
  *(_OWORD *)(v44 + 1096) = 0u;
  *(_OWORD *)(v44 + 1112) = 0u;
  *(_OWORD *)(v44 + 1064) = 0u;
  *(_OWORD *)(v44 + 1080) = 0u;
  *(_QWORD *)(v44 + 1656) = 0;
  *(_OWORD *)(v44 + 1624) = 0u;
  *(_OWORD *)(v44 + 1640) = 0u;
  *(_OWORD *)(v44 + 1592) = 0u;
  *(_OWORD *)(v44 + 1608) = 0u;
  *(_OWORD *)(v44 + 1560) = 0u;
  *(_OWORD *)(v44 + 1576) = 0u;
  *(_OWORD *)(v44 + 1528) = 0u;
  *(_OWORD *)(v44 + 1544) = 0u;
  *(_OWORD *)(v44 + 1512) = 0u;
  *(_DWORD *)(v44 + 1664) = 1065353216;
  *(_OWORD *)(v44 + 1688) = 0u;
  *(_OWORD *)(v44 + 1672) = 0u;
  *(_DWORD *)(v44 + 1704) = 1065353216;
  *(_OWORD *)(v44 + 1728) = 0u;
  *(_OWORD *)(v44 + 1712) = 0u;
  *(_DWORD *)(v44 + 1744) = 1065353216;
  *(_OWORD *)(v44 + 1768) = 0u;
  *(_OWORD *)(v44 + 1752) = 0u;
  *(_DWORD *)(v44 + 1784) = 1065353216;
  *(_OWORD *)(v44 + 1808) = 0u;
  *(_OWORD *)(v44 + 1792) = 0u;
  *(_DWORD *)(v44 + 1824) = 1065353216;
  *(_OWORD *)(v44 + 1832) = 0u;
  *(_OWORD *)(v44 + 1848) = 0u;
  *(_DWORD *)(v44 + 1864) = 1065353216;
  *(_QWORD *)(v44 + 1904) = 0;
  *(_OWORD *)(v44 + 1888) = 0u;
  *(_OWORD *)(v44 + 1872) = 0u;
  *(_DWORD *)(v44 + 1912) = 1065353216;
  *(_OWORD *)(v44 + 2184) = 0u;
  *(_OWORD *)(v44 + 2200) = 0u;
  *(_OWORD *)(v44 + 2152) = 0u;
  *(_OWORD *)(v44 + 2168) = 0u;
  *(_OWORD *)(v44 + 2120) = 0u;
  *(_OWORD *)(v44 + 2136) = 0u;
  *(_OWORD *)(v44 + 2088) = 0u;
  *(_OWORD *)(v44 + 2104) = 0u;
  *(_OWORD *)(v44 + 2056) = 0u;
  *(_OWORD *)(v44 + 2072) = 0u;
  *(_OWORD *)(v44 + 2024) = 0u;
  *(_OWORD *)(v44 + 2040) = 0u;
  *(_OWORD *)(v44 + 1992) = 0u;
  *(_OWORD *)(v44 + 2008) = 0u;
  *(_OWORD *)(v44 + 1960) = 0u;
  *(_OWORD *)(v44 + 1976) = 0u;
  *(_OWORD *)(v44 + 1928) = 0u;
  *(_OWORD *)(v44 + 1944) = 0u;
  v45 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariant(v44, v43);
  *(_BYTE *)(v44 + 808) = 0;
  ((void (*)(_QWORD *, uint64_t, _QWORD, double))v149)(v148, v44, *(_QWORD *)(v25 + 16), v45);
  v153.__begin_ = (std::vector<unsigned int>::pointer)off_250400A78;
  if (v153.__end_cap_.__value_)
  {
    value = (char *)v153.__end_cap_.__value_;
    operator delete(v153.__end_cap_.__value_);
  }
  if (!v129)
  {
    v46 = v10 & 0xFFFFFF1F | (32 * (v124 & 7));
    LODWORD(v153.__end_) = 44;
    value = 0;
    v155 = 0;
    v153.__end_cap_.__value_ = 0;
    v156 = v46;
    v153.__begin_ = (std::vector<unsigned int>::pointer)off_250400BB8;
    v47 = (uint64_t *)a1[5].i64[0];
    v48 = *(_QWORD *)(a1[4].i64[0] + 8);
    v130 = a1[2];
    v143[0] = MEMORY[0x24BDAC760];
    v143[1] = 3221225472;
    v144 = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3;
    v145 = &unk_250400F18;
    v147 = &v158;
    v146 = v132;
    os_unfair_lock_lock((os_unfair_lock_t)&AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::sw_tessellation_lock);
    v49 = (os_unfair_lock_s *)(v48 + 728);
    os_unfair_lock_lock((os_unfair_lock_t)(v48 + 728));
    v50 = *(unsigned int *)(v48 + 400);
    v51 = *(_QWORD *)(v48 + 392);
    if ((_DWORD)v50)
    {
      v52 = 0;
      v53 = (int *)(v51 + 40);
      while (1)
      {
        v54 = *v53;
        v53 += 12;
        if (v156 == v54)
          break;
        if (v50 == ++v52)
          goto LABEL_53;
      }
      v60 = v51 + 48 * v52;
    }
    else
    {
LABEL_53:
      v55 = *(_QWORD *)(v51 + 384);
      if (v55)
      {
        v56 = 1;
        while (1)
        {
          if (v156 == *(_DWORD *)(v55 + 40))
          {
            v56 = 0;
            goto LABEL_69;
          }
          if (v156 == *(_DWORD *)(v55 + 88))
            goto LABEL_69;
          if (v156 == *(_DWORD *)(v55 + 136))
          {
            v56 = 2;
            goto LABEL_69;
          }
          if (v156 == *(_DWORD *)(v55 + 184))
            break;
          v55 = *(_QWORD *)(v55 + 384);
          if (!v55)
            goto LABEL_60;
        }
        v56 = 3;
LABEL_69:
        v60 = v55 + 48 * v56;
      }
      else
      {
LABEL_60:
        if ((_DWORD)v50 == 4)
        {
          v51 = operator new();
          LODWORD(v50) = 0;
          *(_DWORD *)(v51 + 8) = 44;
          *(_DWORD *)(v51 + 56) = 44;
          *(_DWORD *)(v51 + 104) = 44;
          *(_DWORD *)(v51 + 152) = 44;
          *(_QWORD *)(v51 + 24) = 0;
          *(_QWORD *)(v51 + 32) = 0;
          *(_QWORD *)(v51 + 16) = 0;
          *(_DWORD *)(v51 + 40) = 0;
          *(_QWORD *)v51 = off_250400BB8;
          *(_QWORD *)(v51 + 72) = 0;
          *(_QWORD *)(v51 + 80) = 0;
          *(_QWORD *)(v51 + 64) = 0;
          *(_DWORD *)(v51 + 88) = 0;
          *(_QWORD *)(v51 + 48) = off_250400BB8;
          *(_QWORD *)(v51 + 120) = 0;
          *(_QWORD *)(v51 + 128) = 0;
          *(_QWORD *)(v51 + 112) = 0;
          *(_DWORD *)(v51 + 136) = 0;
          *(_QWORD *)(v51 + 96) = off_250400BB8;
          *(_QWORD *)(v51 + 160) = 0;
          *(_QWORD *)(v51 + 168) = 0;
          *(_DWORD *)(v51 + 184) = 0;
          *(_QWORD *)(v51 + 176) = 0;
          *(_QWORD *)(v51 + 144) = off_250400BB8;
          *(_OWORD *)(v51 + 218) = 0u;
          *(_OWORD *)(v51 + 208) = 0u;
          *(_OWORD *)(v51 + 192) = 0u;
          *(_OWORD *)(v51 + 240) = 0u;
          *(_OWORD *)(v51 + 256) = 0u;
          *(_OWORD *)(v51 + 266) = 0u;
          *(_OWORD *)(v51 + 288) = 0u;
          *(_OWORD *)(v51 + 304) = 0u;
          *(_OWORD *)(v51 + 314) = 0u;
          *(_OWORD *)(v51 + 336) = 0u;
          *(_OWORD *)(v51 + 352) = 0u;
          *(_OWORD *)(v51 + 362) = 0u;
          *(_QWORD *)(v51 + 384) = *(_QWORD *)(v48 + 392);
          *(_QWORD *)(v48 + 392) = v51;
          *(_DWORD *)(v48 + 400) = 0;
        }
        v57 = v51 + 48 * v50;
        *(_DWORD *)(v57 + 8) = v153.__end_;
        if ((std::vector<unsigned int> *)v57 != &v153)
          std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v57 + 16), (char *)v153.__end_cap_.__value_, value, (value - (char *)v153.__end_cap_.__value_) >> 2);
        *(_DWORD *)(v57 + 40) = v156;
        v58 = *(_QWORD *)(v48 + 392);
        v59 = *(_DWORD *)(v48 + 400);
        *(_DWORD *)(v48 + 400) = v59 + 1;
        v60 = v58 + 48 * v59;
      }
    }
    v61 = v60 + 192;
    if (*(_QWORD *)(v60 + 192))
    {
      if (!*(_BYTE *)(v60 + 232))
      {
        os_unfair_lock_unlock(v49);
        goto LABEL_91;
      }
      v62 = *(_QWORD *)(v60 + 200);
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      *(_QWORD *)(v61 + 8) = 0;
      *(_QWORD *)(v61 + 16) = 0;

      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0;
      *(_BYTE *)(v61 + 40) = 0;
      v63 = *(NSObject **)v61;
    }
    else
    {
      v63 = dispatch_group_create();
      *(_QWORD *)v61 = v63;
    }
    dispatch_group_enter(v63);
    os_unfair_lock_unlock(v49);
    v64 = *v47;
    v166 = MEMORY[0x24BDAC760];
    v167 = 3221225472;
    v168 = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createSWTessellationPipelineINS_50TessellatorBucketedComputeInstanceCountsProgramKeyENS1_47TessellatorBucketedComputeInstanceCountsProgramEEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EER15AGXA_UnfairLockRT_PT0_P18AGXA10FamilyDeviceP27MTLRenderPipelineDescriptorU13block_pointerFvPNS1_14RenderPipelineE16MTLCompilerErrorE_block_invoke;
    v169 = &unk_2504010B8;
    v170 = vextq_s8(v130, v130, 8uLL);
    v171 = v61;
    v65 = *(_QWORD *)(v64 + 8);
    if (!(*((unsigned int (__cdecl **)())v153.__begin_ + 3))())
      v65 = 0;
    v66 = (void *)objc_opt_new();
    objc_msgSend(v66, "setSync:", 1);
    objc_msgSend(v66, "setPipelineCache:", v65);
    objc_msgSend(v66, "setBinaryArchives:", 0);
    v139.__begin_ = (std::vector<unsigned int>::pointer)MEMORY[0x24BDAC760];
    v139.__end_ = (std::vector<unsigned int>::pointer)3221225472;
    v139.__end_cap_.__value_ = (unsigned int *)___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    v140 = (char *)&unk_2504023B8;
    v141 = &v166;
    buffer = 0;
    size = 0;
    (*((void (**)(std::vector<unsigned int> *, unsigned int **, _QWORD *))v153.__begin_ + 2))(&v153, (unsigned int **)&buffer, &size);
    v67 = dispatch_data_create(buffer, size, 0, 0);
    objc_msgSend(v66, "setDriverKeyData:", v67);
    if (objc_msgSend(v66, "airScript"))
    {
      v68 = objc_msgSend(v66, "airScript");
      object = 0uLL;
      *(_QWORD *)&v178 = 0;
      *(_QWORD *)&object = dispatch_data_create_map(v68, (const void **)&object + 1, (size_t *)&v178);
      v69 = *((_QWORD *)&object + 1);
      v70 = **((_DWORD **)&object + 1);
      CC_SHA256_Init(&c);
      (*(void (**)(std::vector<unsigned int> *, CC_SHA256_CTX *))v153.__begin_)(&v153, &c);
      *(_QWORD *)&v184 = 0;
      *(_QWORD *)len = 0;
      if (AGX::GetSerializedVertexFormat((AGX *)(v69 + v70), &v184, (size_t *)len, v71, v72))
      {
        v73 = (void *)v184;
        CC_SHA256_Update(&c, (const void *)v184, len[0]);
        free(v73);
      }
      CC_SHA256_Final((unsigned __int8 *)&md, &c);
      dispatch_release((dispatch_object_t)object);
      object = md;
      v178 = v181;
      objc_msgSend(v66, "setVendorPluginFunctionId:", &object);
    }
    *(_QWORD *)c.count = MEMORY[0x24BDAC760];
    *(_QWORD *)c.hash = 3221225472;
    *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
    *(_QWORD *)&c.hash[4] = &unk_250402408;
    *(_QWORD *)c.wbuf = &v139;
    *(_QWORD *)&c.hash[6] = v66;
    if (objc_msgSend(v66, "function"))
    {
      v74 = mach_absolute_time();
      v75 = *(void **)v64;
      *(_QWORD *)&md = MEMORY[0x24BDAC760];
      *((_QWORD *)&md + 1) = 3221225472;
      *(_QWORD *)&v181 = ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
      *((_QWORD *)&v181 + 1) = &unk_250402458;
      p_c = &c;
      v183 = v74;
      objc_msgSend(v75, "compileFunctionRequest:completionHandler:", v66, &md);
    }
    else
    {
      if (objc_msgSend(v66, "frameworkData") || objc_msgSend(v66, "pipelineOptions"))
        AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
      *(_QWORD *)&md = MEMORY[0x24BDAC760];
      *((_QWORD *)&md + 1) = 3221225472;
      *(_QWORD *)&v181 = ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
      *((_QWORD *)&v181 + 1) = &unk_250402430;
      p_c = &c;
      v76 = objc_msgSend((id)objc_msgSend(v66, "binaryArchives"), "count");
      v77 = *(void **)v64;
      v78 = objc_msgSend(v66, "driverKeyData");
      if (v76)
        objc_msgSend(v77, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v78, objc_msgSend(v66, "binaryArchives"), 0, objc_msgSend(v66, "pipelineCache"), objc_msgSend(v66, "sync"), &md);
      else
        objc_msgSend(v77, "compileRequest:pipelineCache:sync:completionHandler:", v78, objc_msgSend(v66, "pipelineCache"), objc_msgSend(v66, "sync"), &md);
    }
    dispatch_release(v67);

LABEL_91:
    os_unfair_lock_unlock((os_unfair_lock_t)&AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::sw_tessellation_lock);
    v79 = *(_QWORD *)(v61 + 8);
    v80 = operator new();
    bzero((void *)v80, 0x8B0uLL);
    *(_QWORD *)(v80 + 792) = 0x3F80000000000001;
    *(_QWORD *)(v80 + 800) = 0x1FFFFFFFFLL;
    *(_BYTE *)(v80 + 808) = 1;
    *(_OWORD *)(v80 + 812) = xmmword_232D73520;
    *(_DWORD *)(v80 + 852) = 0;
    *(_QWORD *)(v80 + 828) = 0;
    *(_DWORD *)(v80 + 835) = 0;
    *(_OWORD *)(v80 + 856) = xmmword_232D73530;
    *(_QWORD *)(v80 + 872) = 3840;
    *(_QWORD *)(v80 + 880) = 0x1E3CE50800210000;
    *(_DWORD *)(v80 + 888) = 1184;
    *(_OWORD *)(v80 + 1000) = 0u;
    *(_OWORD *)(v80 + 1016) = 0u;
    *(_OWORD *)(v80 + 1032) = 0u;
    *(_QWORD *)(v80 + 1144) = 0;
    *(_QWORD *)(v80 + 1136) = 0;
    *(_BYTE *)(v80 + 1152) = 0;
    *(_OWORD *)(v80 + 1160) = 0u;
    *(_OWORD *)(v80 + 1176) = 0u;
    *(_OWORD *)(v80 + 1192) = 0u;
    *(_OWORD *)(v80 + 1205) = 0u;
    *(_QWORD *)(v80 + 1232) = 0;
    *(_QWORD *)(v80 + 1224) = 0;
    *(_BYTE *)(v80 + 1240) = 0;
    *(_OWORD *)(v80 + 1248) = 0u;
    *(_OWORD *)(v80 + 1264) = 0u;
    *(_OWORD *)(v80 + 1280) = 0u;
    *(_OWORD *)(v80 + 1293) = 0u;
    *(_QWORD *)(v80 + 1312) = 0;
    *(_QWORD *)(v80 + 1320) = 0;
    *(_BYTE *)(v80 + 1328) = 0;
    *(_OWORD *)(v80 + 1336) = 0u;
    *(_OWORD *)(v80 + 1352) = 0u;
    *(_OWORD *)(v80 + 1368) = 0u;
    *(_OWORD *)(v80 + 1381) = 0u;
    *(_QWORD *)(v80 + 1400) = 0;
    *(_QWORD *)(v80 + 1408) = 0;
    *(_BYTE *)(v80 + 1416) = 0;
    *(_OWORD *)(v80 + 1424) = 0u;
    *(_OWORD *)(v80 + 1440) = 0u;
    *(_OWORD *)(v80 + 1456) = 0u;
    *(_OWORD *)(v80 + 1469) = 0u;
    *(_QWORD *)(v80 + 1496) = 0;
    *(_QWORD *)(v80 + 1488) = 0;
    *(_BYTE *)(v80 + 1504) = 0;
    *(_DWORD *)(v80 + 992) = 0;
    *(_OWORD *)(v80 + 960) = 0u;
    *(_OWORD *)(v80 + 976) = 0u;
    *(_OWORD *)(v80 + 928) = 0u;
    *(_OWORD *)(v80 + 944) = 0u;
    *(_OWORD *)(v80 + 896) = 0u;
    *(_OWORD *)(v80 + 912) = 0u;
    *(_QWORD *)(v80 + 1125) = 0;
    *(_OWORD *)(v80 + 1096) = 0u;
    *(_OWORD *)(v80 + 1112) = 0u;
    *(_OWORD *)(v80 + 1064) = 0u;
    *(_OWORD *)(v80 + 1080) = 0u;
    *(_QWORD *)(v80 + 1656) = 0;
    *(_OWORD *)(v80 + 1624) = 0u;
    *(_OWORD *)(v80 + 1640) = 0u;
    *(_OWORD *)(v80 + 1592) = 0u;
    *(_OWORD *)(v80 + 1608) = 0u;
    *(_OWORD *)(v80 + 1560) = 0u;
    *(_OWORD *)(v80 + 1576) = 0u;
    *(_OWORD *)(v80 + 1528) = 0u;
    *(_OWORD *)(v80 + 1544) = 0u;
    *(_OWORD *)(v80 + 1512) = 0u;
    *(_DWORD *)(v80 + 1664) = 1065353216;
    *(_OWORD *)(v80 + 1688) = 0u;
    *(_OWORD *)(v80 + 1672) = 0u;
    *(_DWORD *)(v80 + 1704) = 1065353216;
    *(_OWORD *)(v80 + 1728) = 0u;
    *(_OWORD *)(v80 + 1712) = 0u;
    *(_DWORD *)(v80 + 1744) = 1065353216;
    *(_OWORD *)(v80 + 1768) = 0u;
    *(_OWORD *)(v80 + 1752) = 0u;
    *(_DWORD *)(v80 + 1784) = 1065353216;
    *(_OWORD *)(v80 + 1808) = 0u;
    *(_OWORD *)(v80 + 1792) = 0u;
    *(_DWORD *)(v80 + 1824) = 1065353216;
    *(_OWORD *)(v80 + 1832) = 0u;
    *(_OWORD *)(v80 + 1848) = 0u;
    *(_DWORD *)(v80 + 1864) = 1065353216;
    *(_QWORD *)(v80 + 1904) = 0;
    *(_OWORD *)(v80 + 1888) = 0u;
    *(_OWORD *)(v80 + 1872) = 0u;
    *(_DWORD *)(v80 + 1912) = 1065353216;
    *(_OWORD *)(v80 + 2184) = 0u;
    *(_OWORD *)(v80 + 2200) = 0u;
    *(_OWORD *)(v80 + 2152) = 0u;
    *(_OWORD *)(v80 + 2168) = 0u;
    *(_OWORD *)(v80 + 2120) = 0u;
    *(_OWORD *)(v80 + 2136) = 0u;
    *(_OWORD *)(v80 + 2088) = 0u;
    *(_OWORD *)(v80 + 2104) = 0u;
    *(_OWORD *)(v80 + 2056) = 0u;
    *(_OWORD *)(v80 + 2072) = 0u;
    *(_OWORD *)(v80 + 2024) = 0u;
    *(_OWORD *)(v80 + 2040) = 0u;
    *(_OWORD *)(v80 + 1992) = 0u;
    *(_OWORD *)(v80 + 2008) = 0u;
    *(_OWORD *)(v80 + 1960) = 0u;
    *(_OWORD *)(v80 + 1976) = 0u;
    *(_OWORD *)(v80 + 1928) = 0u;
    *(_OWORD *)(v80 + 1944) = 0u;
    v81 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariant(v80, v79);
    *(_BYTE *)(v80 + 808) = 0;
    ((void (*)(_QWORD *, uint64_t, _QWORD, double))v144)(v143, v80, *(_QWORD *)(v61 + 16), v81);
    LODWORD(v139.__end_) = 46;
    v140 = 0;
    v141 = 0;
    v139.__end_cap_.__value_ = 0;
    v142 = v46;
    v139.__begin_ = (std::vector<unsigned int>::pointer)off_250400B78;
    v82 = (uint64_t *)a1[5].i64[0];
    v83 = *(_QWORD *)(a1[4].i64[0] + 16);
    v131 = a1[2];
    v134[0] = MEMORY[0x24BDAC760];
    v134[1] = 3221225472;
    v135 = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4;
    v136 = &unk_250400F18;
    v138 = &v158;
    v137 = v132;
    os_unfair_lock_lock((os_unfair_lock_t)&AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::sw_tessellation_lock);
    v84 = (os_unfair_lock_s *)(v83 + 728);
    os_unfair_lock_lock((os_unfair_lock_t)(v83 + 728));
    v85 = *(unsigned int *)(v83 + 400);
    v86 = *(_QWORD *)(v83 + 392);
    if ((_DWORD)v85)
    {
      v87 = 0;
      v88 = (int *)(v86 + 40);
      while (1)
      {
        v89 = *v88;
        v88 += 12;
        if (v142 == v89)
          break;
        if (v85 == ++v87)
          goto LABEL_95;
      }
      v95 = v86 + 48 * v87;
    }
    else
    {
LABEL_95:
      v90 = *(_QWORD *)(v86 + 384);
      if (v90)
      {
        v91 = 1;
        while (1)
        {
          if (v142 == *(_DWORD *)(v90 + 40))
          {
            v91 = 0;
            goto LABEL_111;
          }
          if (v142 == *(_DWORD *)(v90 + 88))
            goto LABEL_111;
          if (v142 == *(_DWORD *)(v90 + 136))
          {
            v91 = 2;
            goto LABEL_111;
          }
          if (v142 == *(_DWORD *)(v90 + 184))
            break;
          v90 = *(_QWORD *)(v90 + 384);
          if (!v90)
            goto LABEL_102;
        }
        v91 = 3;
LABEL_111:
        v95 = v90 + 48 * v91;
      }
      else
      {
LABEL_102:
        if ((_DWORD)v85 == 4)
        {
          v86 = operator new();
          LODWORD(v85) = 0;
          *(_DWORD *)(v86 + 8) = 46;
          *(_DWORD *)(v86 + 56) = 46;
          *(_DWORD *)(v86 + 104) = 46;
          *(_DWORD *)(v86 + 152) = 46;
          *(_QWORD *)(v86 + 24) = 0;
          *(_QWORD *)(v86 + 32) = 0;
          *(_QWORD *)(v86 + 16) = 0;
          *(_DWORD *)(v86 + 40) = 0;
          *(_QWORD *)v86 = off_250400B78;
          *(_QWORD *)(v86 + 72) = 0;
          *(_QWORD *)(v86 + 80) = 0;
          *(_QWORD *)(v86 + 64) = 0;
          *(_DWORD *)(v86 + 88) = 0;
          *(_QWORD *)(v86 + 48) = off_250400B78;
          *(_QWORD *)(v86 + 120) = 0;
          *(_QWORD *)(v86 + 128) = 0;
          *(_QWORD *)(v86 + 112) = 0;
          *(_DWORD *)(v86 + 136) = 0;
          *(_QWORD *)(v86 + 96) = off_250400B78;
          *(_QWORD *)(v86 + 160) = 0;
          *(_QWORD *)(v86 + 168) = 0;
          *(_DWORD *)(v86 + 184) = 0;
          *(_QWORD *)(v86 + 176) = 0;
          *(_QWORD *)(v86 + 144) = off_250400B78;
          *(_OWORD *)(v86 + 218) = 0u;
          *(_OWORD *)(v86 + 208) = 0u;
          *(_OWORD *)(v86 + 192) = 0u;
          *(_OWORD *)(v86 + 240) = 0u;
          *(_OWORD *)(v86 + 256) = 0u;
          *(_OWORD *)(v86 + 266) = 0u;
          *(_OWORD *)(v86 + 288) = 0u;
          *(_OWORD *)(v86 + 304) = 0u;
          *(_OWORD *)(v86 + 314) = 0u;
          *(_OWORD *)(v86 + 336) = 0u;
          *(_OWORD *)(v86 + 352) = 0u;
          *(_OWORD *)(v86 + 362) = 0u;
          *(_QWORD *)(v86 + 384) = *(_QWORD *)(v83 + 392);
          *(_QWORD *)(v83 + 392) = v86;
          *(_DWORD *)(v83 + 400) = 0;
        }
        v92 = v86 + 48 * v85;
        *(_DWORD *)(v92 + 8) = v139.__end_;
        if ((std::vector<unsigned int> *)v92 != &v139)
          std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v92 + 16), (char *)v139.__end_cap_.__value_, v140, (v140 - (char *)v139.__end_cap_.__value_) >> 2);
        *(_DWORD *)(v92 + 40) = v142;
        v93 = *(_QWORD *)(v83 + 392);
        v94 = *(_DWORD *)(v83 + 400);
        *(_DWORD *)(v83 + 400) = v94 + 1;
        v95 = v93 + 48 * v94;
      }
    }
    v96 = v95 + 192;
    if (*(_QWORD *)(v95 + 192))
    {
      if (!*(_BYTE *)(v95 + 232))
      {
        os_unfair_lock_unlock(v84);
LABEL_133:
        os_unfair_lock_unlock((os_unfair_lock_t)&AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::sw_tessellation_lock);
        v114 = *(_QWORD *)(v96 + 8);
        v115 = operator new();
        bzero((void *)v115, 0x8B0uLL);
        *(_QWORD *)(v115 + 792) = 0x3F80000000000001;
        *(_QWORD *)(v115 + 800) = 0x1FFFFFFFFLL;
        *(_BYTE *)(v115 + 808) = 1;
        *(_OWORD *)(v115 + 812) = xmmword_232D73520;
        *(_DWORD *)(v115 + 852) = 0;
        *(_QWORD *)(v115 + 828) = 0;
        *(_DWORD *)(v115 + 835) = 0;
        *(_OWORD *)(v115 + 856) = xmmword_232D73530;
        *(_QWORD *)(v115 + 872) = 3840;
        *(_QWORD *)(v115 + 880) = 0x1E3CE50800210000;
        *(_DWORD *)(v115 + 888) = 1184;
        *(_OWORD *)(v115 + 1000) = 0u;
        *(_OWORD *)(v115 + 1016) = 0u;
        *(_OWORD *)(v115 + 1032) = 0u;
        *(_QWORD *)(v115 + 1144) = 0;
        *(_QWORD *)(v115 + 1136) = 0;
        *(_BYTE *)(v115 + 1152) = 0;
        *(_OWORD *)(v115 + 1160) = 0u;
        *(_OWORD *)(v115 + 1176) = 0u;
        *(_OWORD *)(v115 + 1192) = 0u;
        *(_OWORD *)(v115 + 1205) = 0u;
        *(_QWORD *)(v115 + 1232) = 0;
        *(_QWORD *)(v115 + 1224) = 0;
        *(_BYTE *)(v115 + 1240) = 0;
        *(_OWORD *)(v115 + 1248) = 0u;
        *(_OWORD *)(v115 + 1264) = 0u;
        *(_OWORD *)(v115 + 1280) = 0u;
        *(_OWORD *)(v115 + 1293) = 0u;
        *(_QWORD *)(v115 + 1312) = 0;
        *(_QWORD *)(v115 + 1320) = 0;
        *(_BYTE *)(v115 + 1328) = 0;
        *(_OWORD *)(v115 + 1336) = 0u;
        *(_OWORD *)(v115 + 1352) = 0u;
        *(_OWORD *)(v115 + 1368) = 0u;
        *(_OWORD *)(v115 + 1381) = 0u;
        *(_QWORD *)(v115 + 1400) = 0;
        *(_QWORD *)(v115 + 1408) = 0;
        *(_BYTE *)(v115 + 1416) = 0;
        *(_OWORD *)(v115 + 1424) = 0u;
        *(_OWORD *)(v115 + 1440) = 0u;
        *(_OWORD *)(v115 + 1456) = 0u;
        *(_OWORD *)(v115 + 1469) = 0u;
        *(_QWORD *)(v115 + 1496) = 0;
        *(_QWORD *)(v115 + 1488) = 0;
        *(_BYTE *)(v115 + 1504) = 0;
        *(_DWORD *)(v115 + 992) = 0;
        *(_OWORD *)(v115 + 960) = 0u;
        *(_OWORD *)(v115 + 976) = 0u;
        *(_OWORD *)(v115 + 928) = 0u;
        *(_OWORD *)(v115 + 944) = 0u;
        *(_OWORD *)(v115 + 896) = 0u;
        *(_OWORD *)(v115 + 912) = 0u;
        *(_QWORD *)(v115 + 1125) = 0;
        *(_OWORD *)(v115 + 1096) = 0u;
        *(_OWORD *)(v115 + 1112) = 0u;
        *(_OWORD *)(v115 + 1064) = 0u;
        *(_OWORD *)(v115 + 1080) = 0u;
        *(_QWORD *)(v115 + 1656) = 0;
        *(_OWORD *)(v115 + 1624) = 0u;
        *(_OWORD *)(v115 + 1640) = 0u;
        *(_OWORD *)(v115 + 1592) = 0u;
        *(_OWORD *)(v115 + 1608) = 0u;
        *(_OWORD *)(v115 + 1560) = 0u;
        *(_OWORD *)(v115 + 1576) = 0u;
        *(_OWORD *)(v115 + 1528) = 0u;
        *(_OWORD *)(v115 + 1544) = 0u;
        *(_OWORD *)(v115 + 1512) = 0u;
        *(_DWORD *)(v115 + 1664) = 1065353216;
        *(_OWORD *)(v115 + 1688) = 0u;
        *(_OWORD *)(v115 + 1672) = 0u;
        *(_DWORD *)(v115 + 1704) = 1065353216;
        *(_OWORD *)(v115 + 1728) = 0u;
        *(_OWORD *)(v115 + 1712) = 0u;
        *(_DWORD *)(v115 + 1744) = 1065353216;
        *(_OWORD *)(v115 + 1768) = 0u;
        *(_OWORD *)(v115 + 1752) = 0u;
        *(_DWORD *)(v115 + 1784) = 1065353216;
        *(_OWORD *)(v115 + 1808) = 0u;
        *(_OWORD *)(v115 + 1792) = 0u;
        *(_DWORD *)(v115 + 1824) = 1065353216;
        *(_OWORD *)(v115 + 1832) = 0u;
        *(_OWORD *)(v115 + 1848) = 0u;
        *(_DWORD *)(v115 + 1864) = 1065353216;
        *(_QWORD *)(v115 + 1904) = 0;
        *(_OWORD *)(v115 + 1888) = 0u;
        *(_OWORD *)(v115 + 1872) = 0u;
        *(_DWORD *)(v115 + 1912) = 1065353216;
        *(_OWORD *)(v115 + 2184) = 0u;
        *(_OWORD *)(v115 + 2200) = 0u;
        *(_OWORD *)(v115 + 2152) = 0u;
        *(_OWORD *)(v115 + 2168) = 0u;
        *(_OWORD *)(v115 + 2120) = 0u;
        *(_OWORD *)(v115 + 2136) = 0u;
        *(_OWORD *)(v115 + 2088) = 0u;
        *(_OWORD *)(v115 + 2104) = 0u;
        *(_OWORD *)(v115 + 2056) = 0u;
        *(_OWORD *)(v115 + 2072) = 0u;
        *(_OWORD *)(v115 + 2024) = 0u;
        *(_OWORD *)(v115 + 2040) = 0u;
        *(_OWORD *)(v115 + 1992) = 0u;
        *(_OWORD *)(v115 + 2008) = 0u;
        *(_OWORD *)(v115 + 1960) = 0u;
        *(_OWORD *)(v115 + 1976) = 0u;
        *(_OWORD *)(v115 + 1928) = 0u;
        *(_OWORD *)(v115 + 1944) = 0u;
        v116 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariant(v115, v114);
        *(_BYTE *)(v115 + 808) = 0;
        ((void (*)(_QWORD *, uint64_t, _QWORD, double))v135)(v134, v115, *(_QWORD *)(v96 + 16), v116);
        v139.__begin_ = (std::vector<unsigned int>::pointer)off_250400AF8;
        if (v139.__end_cap_.__value_)
        {
          v140 = (char *)v139.__end_cap_.__value_;
          operator delete(v139.__end_cap_.__value_);
        }
        v153.__begin_ = (std::vector<unsigned int>::pointer)off_250400AB8;
        if (v153.__end_cap_.__value_)
        {
          value = (char *)v153.__end_cap_.__value_;
          operator delete(v153.__end_cap_.__value_);
        }
        goto LABEL_137;
      }
      v97 = *(_QWORD *)(v95 + 200);
      if (v97)
        (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
      *(_QWORD *)(v96 + 8) = 0;
      *(_QWORD *)(v96 + 16) = 0;

      *(_QWORD *)(v96 + 24) = 0;
      *(_QWORD *)(v96 + 32) = 0;
      *(_BYTE *)(v96 + 40) = 0;
      v98 = *(NSObject **)v96;
    }
    else
    {
      v98 = dispatch_group_create();
      *(_QWORD *)v96 = v98;
    }
    dispatch_group_enter(v98);
    os_unfair_lock_unlock(v84);
    v99 = *v82;
    v166 = MEMORY[0x24BDAC760];
    v167 = 3221225472;
    v168 = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createSWTessellationPipelineINS_45TessellatorBucketedEmitDrawCommandsProgramKeyENS1_42TessellatorBucketedEmitDrawCommandsProgramEEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EER15AGXA_UnfairLockRT_PT0_P18AGXA10FamilyDeviceP27MTLRenderPipelineDescriptorU13block_pointerFvPNS1_14RenderPipelineE16MTLCompilerErrorE_block_invoke;
    v169 = &unk_2504010B8;
    v170 = vextq_s8(v131, v131, 8uLL);
    v171 = v96;
    v100 = *(_QWORD *)(v99 + 8);
    if (!(*((unsigned int (__cdecl **)())v139.__begin_ + 3))())
      v100 = 0;
    v101 = (void *)objc_opt_new();
    objc_msgSend(v101, "setSync:", 1);
    objc_msgSend(v101, "setPipelineCache:", v100);
    objc_msgSend(v101, "setBinaryArchives:", 0);
    *(_QWORD *)&object = MEMORY[0x24BDAC760];
    *((_QWORD *)&object + 1) = 3221225472;
    *(_QWORD *)&v178 = ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    *((_QWORD *)&v178 + 1) = &unk_2504023B8;
    v179 = &v166;
    size = 0;
    v172 = 0;
    (*((void (**)(std::vector<unsigned int> *, unsigned int **, _QWORD *))v139.__begin_ + 2))(&v139, (unsigned int **)&size, &v172);
    v102 = dispatch_data_create((const void *)size, v172, 0, 0);
    objc_msgSend(v101, "setDriverKeyData:", v102);
    if (objc_msgSend(v101, "airScript"))
    {
      v103 = objc_msgSend(v101, "airScript");
      v184 = 0uLL;
      *(_QWORD *)&v185 = 0;
      *(_QWORD *)&v184 = dispatch_data_create_map(v103, (const void **)&v184 + 1, (size_t *)&v185);
      v104 = *((_QWORD *)&v184 + 1);
      v105 = **((_DWORD **)&v184 + 1);
      CC_SHA256_Init(&c);
      (*(void (**)(std::vector<unsigned int> *, CC_SHA256_CTX *))v139.__begin_)(&v139, &c);
      *(_QWORD *)len = 0;
      buffer = 0;
      if (AGX::GetSerializedVertexFormat((AGX *)(v104 + v105), len, (size_t *)&buffer, v106, v107))
      {
        v108 = *(void **)len;
        CC_SHA256_Update(&c, *(const void **)len, (CC_LONG)buffer);
        free(v108);
      }
      CC_SHA256_Final((unsigned __int8 *)&md, &c);
      dispatch_release((dispatch_object_t)v184);
      v184 = md;
      v185 = v181;
      objc_msgSend(v101, "setVendorPluginFunctionId:", &v184);
    }
    *(_QWORD *)c.count = MEMORY[0x24BDAC760];
    *(_QWORD *)c.hash = 3221225472;
    *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
    *(_QWORD *)&c.hash[4] = &unk_250402408;
    *(_QWORD *)c.wbuf = &object;
    *(_QWORD *)&c.hash[6] = v101;
    if (objc_msgSend(v101, "function"))
    {
      v109 = mach_absolute_time();
      v110 = *(void **)v99;
      *(_QWORD *)&md = MEMORY[0x24BDAC760];
      *((_QWORD *)&md + 1) = 3221225472;
      *(_QWORD *)&v181 = ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
      *((_QWORD *)&v181 + 1) = &unk_250402458;
      p_c = &c;
      v183 = v109;
      objc_msgSend(v110, "compileFunctionRequest:completionHandler:", v101, &md);
    }
    else
    {
      if (objc_msgSend(v101, "frameworkData") || objc_msgSend(v101, "pipelineOptions"))
        AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
      *(_QWORD *)&md = MEMORY[0x24BDAC760];
      *((_QWORD *)&md + 1) = 3221225472;
      *(_QWORD *)&v181 = ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
      *((_QWORD *)&v181 + 1) = &unk_250402430;
      p_c = &c;
      v111 = objc_msgSend((id)objc_msgSend(v101, "binaryArchives"), "count");
      v112 = *(void **)v99;
      v113 = objc_msgSend(v101, "driverKeyData");
      if (v111)
        objc_msgSend(v112, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v113, objc_msgSend(v101, "binaryArchives"), 0, objc_msgSend(v101, "pipelineCache"), objc_msgSend(v101, "sync"), &md);
      else
        objc_msgSend(v112, "compileRequest:pipelineCache:sync:completionHandler:", v113, objc_msgSend(v101, "pipelineCache"), objc_msgSend(v101, "sync"), &md);
    }
    dispatch_release(v102);

    goto LABEL_133;
  }
LABEL_137:
  if (a1[5].i8[8])
  {
    v133[0] = MEMORY[0x24BDAC760];
    v133[1] = 3221225472;
    v133[2] = ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_5;
    v133[3] = &unk_250400F40;
    v133[6] = a1[3].i64[0];
    v133[7] = &v158;
    v117 = group;
    v133[4] = v132;
    v133[5] = a3;
    dispatch_group_notify(group, queue, v133);
  }
  else
  {
    v117 = group;
    dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
    v118 = v159[6];
    if (v118 || (v118 = v159[7]) != 0 || (v118 = v159[8]) != 0 || (v118 = v159[9]) != 0)
    {
      v119 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Internal render pipeline creation failure with code %lu"), v118);
      v120 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v119, *MEMORY[0x24BDD0FC8]);
      v121 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 1, v120);
    }
    else
    {
      v121 = 0;
    }
    if (v121)
      v122 = 0;
    else
      v122 = v132;
    if (v121)
      v123 = 0;
    else
      v123 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a1[3].i64[0] + 16))(a1[3].i64[0], v122, v123);
  }
  dispatch_release(v117);
  _Block_object_dispose(&v158, 8);
}

void sub_232C70E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  os_unfair_lock_s *v67;

  os_unfair_lock_unlock(v67);
  if (__p)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1681(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_1684(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  dispatch_once_t *v7;
  dispatch_once_t *v8;
  _QWORD v9[5];
  _QWORD v10[5];
  int v11;
  int v12;
  _QWORD v13[5];
  int v14;
  _QWORD block[5];

  v2 = a1[6];
  v3 = *(unsigned int *)(a1[4] + 964);
  v4 = *(unsigned int *)(a1[4] + 956);
  if ((v5 & 1) == 0
  {
    AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::isSuballocDisabled = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 448) + 808) + 6725);
  }
  v6 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  if (AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::internal_instance_counts_pred != -1)
    dispatch_once(&AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::internal_instance_counts_pred, block);
  v7 = (dispatch_once_t *)((char *)&AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_pred
                         + 8 * v3);
  v13[0] = v6;
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_2;
  v13[3] = &__block_descriptor_44_e5_v8__0l;
  v13[4] = v2;
  v14 = v3;
  if (*v7 != -1)
    dispatch_once(v7, v13);
  v8 = (dispatch_once_t *)((char *)&AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_per_winding_pred
                         + 16 * v3
                         + 8 * v4);
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_3;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = v2;
  v11 = v3;
  v12 = v4;
  if (*v8 != -1)
    dispatch_once(v8, v10);
  v9[0] = v6;
  v9[1] = 3221225472;
  v9[2] = ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_4;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = v2;
  if (AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::tess_stateless_shaders_pred != -1)
    dispatch_once(&AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::tess_stateless_shaders_pred, v9);
  if (!AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_per_winding_status[2 * v3 + v4]
    || !AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_status[v3]
    || !AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::internal_instance_counts_status
    || !*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8))
  {
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 72) = 2;
  }
}

uint64_t ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 48) = a3;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 1048) = a2;
  return result;
}

uint64_t ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 56) = a3;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 1056) = a2;
  return result;
}

uint64_t ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 64) = a3;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 1064) = a2;
  return result;
}

uint64_t ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE14createPipelineI27MTLRenderPipelineDescriptorEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EEP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeySC_PNS1_20VertexProgramVariantESH_SC_PNS1_20ObjectProgramVariantESH_SC_PNS1_18MeshProgramVariantESH_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESS_SS_SS_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSX_SX_PT_mbbyP19NSMutableDictionaryS11_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_5(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)(a1[7] + 8);
  v3 = v2[6];
  if (!v3)
  {
    v3 = v2[7];
    if (!v3)
    {
      v3 = v2[8];
      if (!v3)
      {
        v3 = v2[9];
        if (!v3)
        {
          v7 = a1[6];
          goto LABEL_8;
        }
      }
    }
  }
  v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Internal render pipeline creation failure with code %lu"), v3);
  v5 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v4, *MEMORY[0x24BDD0FC8]);
  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 1, v5);
  v7 = a1[6];
  if (!v6)
  {
LABEL_8:
    v6 = 0;
    v8 = a1[4];
    v9 = a1[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, id))(v7 + 16))(v7, v8, v9, v6);
  }
  v8 = 0;
  v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, id))(v7 + 16))(v7, v8, v9, v6);
}

void ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createSWTessellationPipelineINS_45TessellatorBucketedEmitDrawCommandsProgramKeyENS1_42TessellatorBucketedEmitDrawCommandsProgramEEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EER15AGXA_UnfairLockRT_PT0_P18AGXA10FamilyDeviceP27MTLRenderPipelineDescriptorU13block_pointerFvPNS1_14RenderPipelineE16MTLCompilerErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, __CFString *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  double v20;
  double v21;
  int8x16_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD v29[6];
  uint64_t v30[54];
  std::string __dst;

  if (a3)
  {
LABEL_30:
    v25 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = a3;

    *(_QWORD *)(v25 + 24) = -[__CFString copy](a4, "copy");
    if (*(_QWORD *)(v25 + 8))
    {

      *(_QWORD *)(v25 + 32) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 40) = 0;
    }
    dispatch_group_leave(*(dispatch_group_t *)v25);
    return;
  }
  if (*(_QWORD *)(a2 + 264))
  {
    v7 = (uint64_t *)(a2 + 264);
    if (!*(_QWORD *)(a2 + 272))
      v7 = (uint64_t *)(a2 + 824);
  }
  else
  {
    v7 = (uint64_t *)(a2 + 824);
  }
  v9 = *v7;
  v8 = v7[1];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
    goto LABEL_29;
  if (*(_QWORD *)(a2 + 504))
  {
    v11 = (uint64_t *)(a2 + 504);
    if (!*(_QWORD *)(a2 + 512))
      v11 = (uint64_t *)(a2 + 1064);
  }
  else
  {
    v11 = (uint64_t *)(a2 + 1064);
  }
  v13 = *v11;
  v12 = v11[1];
  if (v13 && v12 != 0)
  {
LABEL_29:
    a4 = CFSTR("Internal error during function compilation");
    a3 = 2;
    goto LABEL_30;
  }
  v15 = (_QWORD *)operator new();
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "vertexFunction"), "label"), "UTF8String");
  if (v17)
    v18 = (const char *)v17;
  else
    v18 = "";
  v19 = strlen(v18);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v23 = v19;
  if (v19 >= 0x17)
  {
    v26 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v26 = v19 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
    p_dst = &__dst;
    if (!v19)
      goto LABEL_38;
  }
  memmove(p_dst, v18, v23);
LABEL_38:
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v30, (unsigned int **)a2, 0, 1, 0, 0, 0, 0, v20, v21, v22, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v29, (_QWORD *)a2);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v15, v16, a2, &__dst, (uint64_t)v30, 0, v29, 0, 0);
  *v15 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v30);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v28 + 8) = v15;
  *(_QWORD *)(v28 + 16) = 0;

  *(_QWORD *)(v28 + 24) = -[__CFString copy](a4, "copy");
  if (*(_QWORD *)(v28 + 8))
  {

    *(_QWORD *)(v28 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v28 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v28);
}

void sub_232C71580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v7 - 81) < 0)
    operator delete(*(void **)(v7 - 104));
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_45TessellatorBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C71844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createSWTessellationPipelineINS_50TessellatorBucketedComputeInstanceCountsProgramKeyENS1_47TessellatorBucketedComputeInstanceCountsProgramEEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EER15AGXA_UnfairLockRT_PT0_P18AGXA10FamilyDeviceP27MTLRenderPipelineDescriptorU13block_pointerFvPNS1_14RenderPipelineE16MTLCompilerErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, __CFString *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  double v20;
  double v21;
  int8x16_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD v29[6];
  uint64_t v30[54];
  std::string __dst;

  if (a3)
  {
LABEL_30:
    v25 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = a3;

    *(_QWORD *)(v25 + 24) = -[__CFString copy](a4, "copy");
    if (*(_QWORD *)(v25 + 8))
    {

      *(_QWORD *)(v25 + 32) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 40) = 0;
    }
    dispatch_group_leave(*(dispatch_group_t *)v25);
    return;
  }
  if (*(_QWORD *)(a2 + 264))
  {
    v7 = (uint64_t *)(a2 + 264);
    if (!*(_QWORD *)(a2 + 272))
      v7 = (uint64_t *)(a2 + 824);
  }
  else
  {
    v7 = (uint64_t *)(a2 + 824);
  }
  v9 = *v7;
  v8 = v7[1];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
    goto LABEL_29;
  if (*(_QWORD *)(a2 + 504))
  {
    v11 = (uint64_t *)(a2 + 504);
    if (!*(_QWORD *)(a2 + 512))
      v11 = (uint64_t *)(a2 + 1064);
  }
  else
  {
    v11 = (uint64_t *)(a2 + 1064);
  }
  v13 = *v11;
  v12 = v11[1];
  if (v13 && v12 != 0)
  {
LABEL_29:
    a4 = CFSTR("Internal error during function compilation");
    a3 = 2;
    goto LABEL_30;
  }
  v15 = (_QWORD *)operator new();
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "vertexFunction"), "label"), "UTF8String");
  if (v17)
    v18 = (const char *)v17;
  else
    v18 = "";
  v19 = strlen(v18);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v23 = v19;
  if (v19 >= 0x17)
  {
    v26 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v26 = v19 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
    p_dst = &__dst;
    if (!v19)
      goto LABEL_38;
  }
  memmove(p_dst, v18, v23);
LABEL_38:
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v30, (unsigned int **)a2, 0, 1, 0, 0, 0, 0, v20, v21, v22, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v29, (_QWORD *)a2);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v15, v16, a2, &__dst, (uint64_t)v30, 0, v29, 0, 0);
  *v15 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v30);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v28 + 8) = v15;
  *(_QWORD *)(v28 + 16) = 0;

  *(_QWORD *)(v28 + 24) = -[__CFString copy](a4, "copy");
  if (*(_QWORD *)(v28 + 8))
  {

    *(_QWORD *)(v28 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v28 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v28);
}

void sub_232C71B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v7 - 81) < 0)
    operator delete(*(void **)(v7 - 104));
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_50TessellatorBucketedComputeInstanceCountsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C71DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void ___ZN3AGX39RenderPipelineWithSWTessellationFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE28createSWTessellationPipelineINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyENS1_45TessellatorNonBucketedEmitDrawCommandsProgramEEEvPNS_23UserCommonShaderFactoryIS2_S3_S4_EER15AGXA_UnfairLockRT_PT0_P18AGXA10FamilyDeviceP27MTLRenderPipelineDescriptorU13block_pointerFvPNS1_14RenderPipelineE16MTLCompilerErrorE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, __CFString *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  double v20;
  double v21;
  int8x16_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD v29[6];
  uint64_t v30[54];
  std::string __dst;

  if (a3)
  {
LABEL_30:
    v25 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = a3;

    *(_QWORD *)(v25 + 24) = -[__CFString copy](a4, "copy");
    if (*(_QWORD *)(v25 + 8))
    {

      *(_QWORD *)(v25 + 32) = 0;
    }
    else
    {
      *(_BYTE *)(v25 + 40) = 0;
    }
    dispatch_group_leave(*(dispatch_group_t *)v25);
    return;
  }
  if (*(_QWORD *)(a2 + 264))
  {
    v7 = (uint64_t *)(a2 + 264);
    if (!*(_QWORD *)(a2 + 272))
      v7 = (uint64_t *)(a2 + 824);
  }
  else
  {
    v7 = (uint64_t *)(a2 + 824);
  }
  v9 = *v7;
  v8 = v7[1];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
    goto LABEL_29;
  if (*(_QWORD *)(a2 + 504))
  {
    v11 = (uint64_t *)(a2 + 504);
    if (!*(_QWORD *)(a2 + 512))
      v11 = (uint64_t *)(a2 + 1064);
  }
  else
  {
    v11 = (uint64_t *)(a2 + 1064);
  }
  v13 = *v11;
  v12 = v11[1];
  if (v13 && v12 != 0)
  {
LABEL_29:
    a4 = CFSTR("Internal error during function compilation");
    a3 = 2;
    goto LABEL_30;
  }
  v15 = (_QWORD *)operator new();
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "vertexFunction"), "label"), "UTF8String");
  if (v17)
    v18 = (const char *)v17;
  else
    v18 = "";
  v19 = strlen(v18);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v23 = v19;
  if (v19 >= 0x17)
  {
    v26 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v26 = v19 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
    p_dst = &__dst;
    if (!v19)
      goto LABEL_38;
  }
  memmove(p_dst, v18, v23);
LABEL_38:
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v30, (unsigned int **)a2, 0, 1, 0, 0, 0, 0, v20, v21, v22, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v29, (_QWORD *)a2);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v15, v16, a2, &__dst, (uint64_t)v30, 0, v29, 0, 0);
  *v15 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v30);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v28 + 8) = v15;
  *(_QWORD *)(v28 + 16) = 0;

  *(_QWORD *)(v28 + 24) = -[__CFString copy](a4, "copy");
  if (*(_QWORD *)(v28 + 8))
  {

    *(_QWORD *)(v28 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v28 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v28);
}

void sub_232C72088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v7 - 81) < 0)
    operator delete(*(void **)(v7 - 104));
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_48TessellatorNonBucketedEmitDrawCommandsProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C7234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke(uint64_t a1)
{
  uint64_t v1;
  AGXA10FamilyBuffer *v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = [AGXA10FamilyBuffer alloc];
  result = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v2, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", *(_QWORD *)(v1 + 448), 3200, 0, AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::isSuballocDisabled, 0);
  *(_QWORD *)(v1 + 440) = result;
  AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::internal_instance_counts_status = result != 0;
  return result;
}

void ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char DataFromFile;
  uint64_t v8;
  char v9;
  AGXA10FamilyBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  id v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)MEMORY[0x234928298]();
  if (AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::pred != -1)
    dispatch_once(&AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::pred, &__block_literal_global_87);
  v4 = (void *)AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::bundle;
  v5 = *(unsigned int *)(a1 + 40);
  AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_status[v5] = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::bundle != 0;
  v6 = v2 + 40;
  DataFromFile = AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDataFromFile(v2, (AGXA10FamilyBuffer **)(v2 + 40 + 16 * v5), objc_msgSend(v4, "pathForResource:ofType:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d_2"), v5), CFSTR("bin")));
  v8 = *(unsigned int *)(a1 + 40);
  if (AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_status[v8])
    v9 = DataFromFile;
  else
    v9 = 0;
  AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_status[v8] = v9;
  v10 = [AGXA10FamilyBuffer alloc];
  v11 = *(_QWORD *)(v2 + 448);
  v12 = objc_msgSend(*(id *)(v6 + 16 * *(unsigned int *)(a1 + 40)), "length");
  *(_QWORD *)(v6 + 16 * *(unsigned int *)(a1 + 40) + 8) = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v10, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", v11, v12, 0, AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::isSuballocDisabled, 0);
  memcpy((void *)objc_msgSend(*(id *)(v6 + 16 * *(unsigned int *)(a1 + 40) + 8), "contents"), (const void *)objc_msgSend(*(id *)(v6 + 16 * *(unsigned int *)(a1 + 40)), "contents"), objc_msgSend(*(id *)(v6 + 16 * *(unsigned int *)(a1 + 40)), "length"));
  v13 = AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDataFromFile(v2, (AGXA10FamilyBuffer **)(v2 + 8 * *(unsigned int *)(a1 + 40) + 168), objc_msgSend(v4, "pathForResource:ofType:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d_0"), *(unsigned int *)(a1 + 40)), CFSTR("bin")));
  v14 = *(unsigned int *)(a1 + 40);
  if (AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_status[v14])
    v15 = v13;
  else
    v15 = 0;
  AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_status[v14] = v15;
  v16 = objc_alloc(MEMORY[0x24BDBCE50]);
  *(_QWORD *)(v2 + 8 * *(unsigned int *)(a1 + 40) + 360) = objc_msgSend(v16, "initWithContentsOfFile:", objc_msgSend(v4, "pathForResource:ofType:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d_3"), *(unsigned int *)(a1 + 40)), CFSTR("bin")));
  objc_autoreleasePoolPop(v3);
}

void ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char DataFromFile;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  AGXA10FamilyBuffer **v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  AGXA10FamilyBuffer *v24;
  uint64_t v25;
  uint64_t v26;
  AGXA10FamilyBuffer *v27;
  AGXA10FamilyBuffer *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v38;
  const __int16 *v39;
  __int16 *v40;
  uint64_t v41;
  const __int16 *v42;
  int16x8_t v43;
  int16x8_t v44;
  __int16 *v45;
  __int16 *v46;
  uint64_t v47;
  __int16 *v48;
  _WORD *v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;
  char *v54;
  BOOL v55;
  char v56;
  int16x8x3_t v57;
  int16x8x3_t v58;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)MEMORY[0x234928298]();
  if (AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::pred != -1)
    dispatch_once(&AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::pred, &__block_literal_global_87);
  v4 = (void *)AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBundle(void)::bundle;
  v6 = *(unsigned int *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 44);
  AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_per_winding_status[2 * v6 + v5] = 1;
  LOBYTE(v6) = atomic_load(&AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::winding_order_loaded_from_file[v6]);
  if ((v6 & 1) == 0)
  {
    DataFromFile = AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDataFromFile(v2, (AGXA10FamilyBuffer **)(v2+ 16 * *(unsigned int *)(a1 + 40)+ 8 * *(unsigned int *)(a1 + 44)+ 232), objc_msgSend(v4, "pathForResource:ofType:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d_1"), *(unsigned int *)(a1 + 40)), CFSTR("bin")));
    v8 = *(unsigned int *)(a1 + 40);
    v9 = *(unsigned int *)(a1 + 44);
    v10 = &AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_per_winding_status[2 * v8];
    if (v10[v9])
      v11 = DataFromFile;
    else
      v11 = 0;
    v10[v9] = v11;
    if ((_DWORD)v9)
    {
      v12 = v2 + 232;
      v13 = objc_msgSend(*(id *)(v12 + 16 * v8 + 8 * v9), "contents");
      v14 = objc_msgSend(*(id *)(v12 + 16 * *(unsigned int *)(a1 + 40) + 8 * *(unsigned int *)(a1 + 44)), "length");
      if (v14 >= 2)
      {
        v15 = 0;
        do
        {
          v16 = v13 + 2 * v15;
          HIDWORD(v17) = *(_DWORD *)(v16 + 2);
          LODWORD(v17) = HIDWORD(v17);
          *(_DWORD *)(v16 + 2) = v17 >> 16;
          v15 += 3;
        }
        while (v15 < v14 >> 1);
      }
    }
    atomic_store(1u, &AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::winding_order_loaded_from_file[*(unsigned int *)(a1 + 40)]);
    goto LABEL_37;
  }
  v18 = v2 + 16 * *(unsigned int *)(a1 + 40) + 232;
  v19 = *(void **)(v18 + 8 * ((_DWORD)v5 == 0));
  v20 = (AGXA10FamilyBuffer **)(v18 + 8 * *(unsigned int *)(a1 + 44));
  v21 = objc_msgSend(v19, "contents");
  v22 = objc_msgSend(v19, "length");
  if ((v23 & 1) == 0
  {
    AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyAndSwizzleTessellationCoordsBuffer(AGXA10FamilyBuffer const*,AGXA10FamilyBuffer*&)::isSuballocDisabled = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 448) + 808) + 6725);
  }
  v24 = [AGXA10FamilyBuffer alloc];
  v25 = *(_QWORD *)(v2 + 448);
  v26 = objc_msgSend(v19, "length");
  v27 = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v24, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", v25, v26, 0, AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::copyAndSwizzleTessellationCoordsBuffer(AGXA10FamilyBuffer const*,AGXA10FamilyBuffer*&)::isSuballocDisabled, 0);
  v28 = v27;
  *v20 = v27;
  if (v27)
  {
    v29 = -[IOGPUMetalBuffer contents](v27, "contents");
    if (v22 >= 2)
    {
      v30 = 0;
      v31 = 3;
      if (v22 >> 1 > 3)
        v31 = v22 >> 1;
      if (v31 < 0x46)
        goto LABEL_28;
      v32 = (v31 - 1) / 3;
      v33 = 6 * v32;
      if (v29 + 4 + 6 * v32 < v29 + 4)
        goto LABEL_28;
      v34 = v33 + 6;
      v35 = v29 + v33 + 6;
      if (v29 < v21 + v34 && v21 < v35)
      {
        v30 = 0;
        goto LABEL_28;
      }
      v37 = v32 + 1;
      v38 = v37 & 0x7FFFFFFFFFFFFFF0;
      v39 = (const __int16 *)v21;
      v40 = (__int16 *)v29;
      v41 = v37 & 0x7FFFFFFFFFFFFFF0;
      do
      {
        v42 = v39;
        v57 = vld3q_s16(v42);
        v42 += 24;
        v43 = v57.val[0];
        v57.val[0] = v57.val[2];
        v58 = vld3q_s16(v42);
        v44 = v58.val[0];
        v58.val[0] = v58.val[2];
        v45 = v40 + 48;
        vst3q_s16(v40, v57);
        v46 = v40 + 24;
        vst3q_s16(v46, v58);
        v39 += 48;
        v40 = v45;
        v41 -= 16;
      }
      while (v41);
      if (v37 != v38)
      {
        v30 = 3 * v38;
LABEL_28:
        v47 = 2 * v30 + 4;
        v48 = (__int16 *)(v21 + v47);
        v49 = (_WORD *)(v29 + v47);
        do
        {
          v50 = *(v48 - 2);
          v51 = *(v48 - 1);
          v52 = *v48;
          v48 += 3;
          *(v49 - 2) = v50;
          *(v49 - 1) = v52;
          *v49 = v51;
          v49 += 3;
          v30 += 3;
        }
        while (v30 < v22 >> 1);
      }
    }
  }
  v53 = *(unsigned int *)(a1 + 44);
  v54 = &AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPreCannedTessellationResources(eAGXTessResourceType,eAGXTessWinding)::per_resource_per_winding_status[2 * *(unsigned int *)(a1 + 40)];
  if (v28)
    v55 = v54[v53] == 0;
  else
    v55 = 1;
  v56 = !v55;
  v54[v53] = v56;
LABEL_37:
  objc_autoreleasePoolPop(v3);
}

void ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  char **v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t (**v34)();
  int v35;
  void *__p;
  void *v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t (**v40)();
  int v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t (**v45)();
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v53;
  _QWORD *v54;
  size_t v55;
  const void *v56;
  CC_LONG v57[2];
  CC_LONG len[2];
  CC_SHA256_CTX c;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 md;
  __int128 v64;
  CC_SHA256_CTX *p_c;
  uint64_t v66;
  __int128 v67;
  size_t v68[3];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v45 = off_250401040;
  v46 = 48;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 448) + 808) + 5464);
  v3 = MEMORY[0x24BDAC760];
  v39[0] = MEMORY[0x24BDAC760];
  v39[1] = 3321888768;
  v39[2] = ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_5;
  v39[3] = &__block_descriptor_80_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken48ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v39[4] = v1;
  v40 = off_250401040;
  v41 = 48;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setSync:", 1);
  objc_msgSend(v5, "setPipelineCache:", v4);
  objc_msgSend(v5, "setBinaryArchives:", 0);
  v50 = v3;
  v51 = 3221225472;
  v52 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v53 = &unk_2504023B8;
  v54 = v39;
  v56 = 0;
  *(_QWORD *)v57 = 0;
  ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)&v45, v57, &v56);
  v6 = dispatch_data_create(*(const void **)v57, (size_t)v56, 0, 0);
  objc_msgSend(v5, "setDriverKeyData:", v6);
  if (objc_msgSend(v5, "airScript"))
  {
    v7 = objc_msgSend(v5, "airScript");
    v60 = 0uLL;
    *(_QWORD *)&v61 = 0;
    *(_QWORD *)&v60 = dispatch_data_create_map(v7, (const void **)&v60 + 1, (size_t *)&v61);
    v8 = *((_QWORD *)&v60 + 1);
    v9 = **((_DWORD **)&v60 + 1);
    CC_SHA256_Init(&c);
    ((void (*)(uint64_t (***)(), CC_SHA256_CTX *))*v45)(&v45, &c);
    *(_QWORD *)&v67 = 0;
    *(_QWORD *)len = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v8 + v9), &v67, (size_t *)len, v10, v11))
    {
      v12 = (void *)v67;
      CC_SHA256_Update(&c, (const void *)v67, len[0]);
      free(v12);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v60);
    v60 = md;
    v61 = v64;
    objc_msgSend(v5, "setVendorPluginFunctionId:", &v60);
  }
  *(_QWORD *)c.count = v3;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v5;
  *(_QWORD *)c.wbuf = &v50;
  if (objc_msgSend(v5, "function"))
  {
    v13 = mach_absolute_time();
    v14 = *(void **)v2;
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v64 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v64 + 1) = &unk_250402458;
    p_c = &c;
    v66 = v13;
    objc_msgSend(v14, "compileFunctionRequest:completionHandler:", v5, &md);
  }
  else
  {
    if (objc_msgSend(v5, "frameworkData") || objc_msgSend(v5, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v64 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v64 + 1) = &unk_250402430;
    p_c = &c;
    v15 = objc_msgSend((id)objc_msgSend(v5, "binaryArchives"), "count");
    v16 = *(void **)v2;
    v17 = objc_msgSend(v5, "driverKeyData");
    if (v15)
      objc_msgSend(v16, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "binaryArchives"), 0, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
    else
      objc_msgSend(v16, "compileRequest:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
  }
  dispatch_release(v6);

  *(_QWORD *)&v60 = off_250401080;
  DWORD2(v60) = 45;
  v62 = 0;
  v61 = 0uLL;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 448) + 808) + 5464);
  v33[0] = v3;
  v33[1] = 3321888768;
  v33[2] = ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_1723;
  v33[3] = &__block_descriptor_80_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken45ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v33[4] = v1;
  v34 = off_250401080;
  v35 = 45;
  __p = 0;
  v37 = 0;
  v38 = 0;
  v19 = *(_QWORD *)(v18 + 8);
  v20 = (void *)objc_opt_new();
  objc_msgSend(v20, "setSync:", 1);
  objc_msgSend(v20, "setPipelineCache:", v19);
  objc_msgSend(v20, "setBinaryArchives:", 0);
  v50 = v3;
  v51 = 3221225472;
  v52 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v53 = &unk_2504023B8;
  v54 = v33;
  v55 = 0;
  v56 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(v60 + 16))((uint64_t)&v60, &v56, &v55);
  v21 = dispatch_data_create(v56, v55, 0, 0);
  objc_msgSend(v20, "setDriverKeyData:", v21);
  if (objc_msgSend(v20, "airScript"))
  {
    v22 = objc_msgSend(v20, "airScript");
    v67 = 0uLL;
    v68[0] = 0;
    *(_QWORD *)&v67 = dispatch_data_create_map(v22, (const void **)&v67 + 1, v68);
    v23 = *((_QWORD *)&v67 + 1);
    v24 = **((_DWORD **)&v67 + 1);
    CC_SHA256_Init(&c);
    (*(void (**)(__int128 *, CC_SHA256_CTX *))v60)(&v60, &c);
    *(_QWORD *)v57 = 0;
    *(_QWORD *)len = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v23 + v24), len, (size_t *)v57, v25, v26))
    {
      v27 = *(void **)len;
      CC_SHA256_Update(&c, *(const void **)len, v57[0]);
      free(v27);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v67);
    v67 = md;
    *(_OWORD *)v68 = v64;
    objc_msgSend(v20, "setVendorPluginFunctionId:", &v67);
  }
  *(_QWORD *)c.count = v3;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v20;
  *(_QWORD *)c.wbuf = &v50;
  if (objc_msgSend(v20, "function"))
  {
    v28 = mach_absolute_time();
    v29 = *(void **)v18;
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v64 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v64 + 1) = &unk_250402458;
    p_c = &c;
    v66 = v28;
    objc_msgSend(v29, "compileFunctionRequest:completionHandler:", v20, &md);
  }
  else
  {
    if (objc_msgSend(v20, "frameworkData") || objc_msgSend(v20, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v64 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v64 + 1) = &unk_250402430;
    p_c = &c;
    v30 = objc_msgSend((id)objc_msgSend(v20, "binaryArchives"), "count");
    v31 = *(void **)v18;
    v32 = objc_msgSend(v20, "driverKeyData");
    if (v30)
      objc_msgSend(v31, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v32, objc_msgSend(v20, "binaryArchives"), 0, objc_msgSend(v20, "pipelineCache"), objc_msgSend(v20, "sync"), &md);
    else
      objc_msgSend(v31, "compileRequest:pipelineCache:sync:completionHandler:", v32, objc_msgSend(v20, "pipelineCache"), objc_msgSend(v20, "sync"), &md);
  }
  dispatch_release(v21);

  v34 = off_250401080;
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  *(_QWORD *)&v60 = off_250401080;
  if ((_QWORD)v61)
  {
    *((_QWORD *)&v61 + 1) = v61;
    operator delete((void *)v61);
  }
  v40 = off_250401040;
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v45 = off_250401040;
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_232C73028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;

  dispatch_release(*(dispatch_object_t *)(v34 - 160));
  if (__p)
    operator delete(__p);
  *(_QWORD *)(v34 - 256) = v33;
  v36 = *(void **)(v34 - 240);
  if (v36)
  {
    *(_QWORD *)(v34 - 232) = v36;
    operator delete(v36);
  }
  if (a27)
    operator delete(a27);
  if (a32)
    operator delete(a32);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_5(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  const char *v13;
  const char *v14;
  const char *v15;
  _QWORD v16[3];
  uint64_t v17[54];
  std::string v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v18.__r_.__value_.__r.__words[0] = 0;
    v16[0] = 0;
    ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v18, v16);
    v17[0] = a4;
    v17[1] = (uint64_t)v15;
    v17[2] = v16[0];
    v17[3] = v18.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 448) + 808);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v17, a2, 0, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v16, a2);
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v6, v7, (uint64_t)a2, &v18, (uint64_t)v17, 0, v16, 0, 0);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *v6 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v17);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize((uint64_t)v6);
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(*(_QWORD *)(v5 + 24), *(_QWORD *)(*(_QWORD *)(v5 + 448) + 808), (uint64_t)v6);
}

void sub_232C73230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 49) < 0)
    operator delete(*(void **)(v7 - 72));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWinding_block_invoke_1723(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  const char *v13;
  const char *v14;
  const char *v15;
  _QWORD v16[3];
  uint64_t v17[54];
  std::string v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v18.__r_.__value_.__r.__words[0] = 0;
    v16[0] = 0;
    ProgramKey<(_AGCStreamToken)45,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v18, v16);
    v17[0] = a4;
    v17[1] = (uint64_t)v15;
    v17[2] = v16[0];
    v17[3] = v18.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 448) + 808);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v17, a2, 0, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v16, a2);
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v6, v7, (uint64_t)a2, &v18, (uint64_t)v17, 0, v16, 0, 0);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *v6 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v17);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize((uint64_t)v6);
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(*(_QWORD *)(v5 + 32), *(_QWORD *)(*(_QWORD *)(v5 + 448) + 808), (uint64_t)v6);
}

void sub_232C73418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 49) < 0)
    operator delete(*(void **)(v7 - 72));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken45ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C736D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken45ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401080;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken45ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401080;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)45,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

void _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev()
{
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

uint64_t ProgramKey<(_AGCStreamToken)45,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)45,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)45,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)45,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken48ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C73CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken48ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401040;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken48ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401040;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)48,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDataFromFile(uint64_t a1, AGXA10FamilyBuffer **a2, uint64_t a3)
{
  void *v5;
  unsigned __int8 v6;
  AGXA10FamilyBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  AGXA10FamilyBuffer *v10;
  uint64_t v11;

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithContentsOfFile:", a3);
  if (!v5)
    goto LABEL_5;
  if ((v6 & 1) == 0
  {
    AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDataFromFile(AGXA10FamilyBuffer *&,NSString *)::isSuballocDisabled = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 448) + 808) + 6725);
  }
  v7 = [AGXA10FamilyBuffer alloc];
  v8 = *(_QWORD *)(a1 + 448);
  v9 = objc_msgSend(v5, "length");
  v10 = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v7, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", v8, v9, 0, AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::loadDataFromFile(AGXA10FamilyBuffer *&,NSString *)::isSuballocDisabled, 0);
  *a2 = v10;
  if (v10)
  {
    objc_msgSend(v5, "getBytes:", -[IOGPUMetalBuffer contents](v10, "contents"));
    v11 = 1;
  }
  else
  {
LABEL_5:
    v11 = 0;
  }

  return v11;
}

id AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getRenderPipelinePerformanceStatistics(_QWORD *a1, _QWORD *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  id PerformanceStatisticsDictionary;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  const __CFString *v32;
  id v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v38;

  v5 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  if (a2)
  {
    v38 = (unsigned int *)(a2 + 134);
    v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 35);
    v7 = a2[158];
    v8 = a2[168];
    v9 = a2[171];
    v10 = a2[164] | a2[161] | a2[354] & 0xFFFFBFFFFFFFFFFFLL;
    v11 = v10 | v7 | v8 | v9;
    if (v11)
    {
      v12 = 0;
      v13 = 64 - __clz(v11);
      v14 = a2[119] | (v10 | v8 | v9) & ~v7;
      do
      {
        if (((1 << v12) & v14) != 0)
          v15 = CFSTR("promoted");
        else
          v15 = CFSTR("not promoted");
        if (((1 << v12) & v11) != 0)
          v16 = v15;
        else
          v16 = CFSTR("unused");
        objc_msgSend(v6, "addObject:", v16);
        ++v12;
      }
      while (v13 != v12);
    }
    PerformanceStatisticsDictionary = AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPerformanceStatisticsDictionary(v38, (uint64_t)CFSTR("VertexBufferPrefetch"), (uint64_t)v6);
    if (PerformanceStatisticsDictionary)
    {
      v18 = PerformanceStatisticsDictionary;
      v19 = (_QWORD *)MEMORY[0x24BDDD358];
      v20 = objc_msgSend(a3, "objectForKey:", *MEMORY[0x24BDDD358]);
      if (v20)
        objc_msgSend(v18, "setObject:forKey:", v20, *MEMORY[0x24BDDD2B8]);
      objc_msgSend(v5, "setObject:forKey:", v18, *v19);

    }
  }
  if (a1)
  {
    v21 = (unsigned int *)(a1 + 134);
    v22 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 35);
    v23 = a1[158];
    v24 = a1[168];
    v25 = a1[171];
    v26 = a1[164] | a1[161];
    v27 = v26 | v23 | v24 | v25;
    if (v27)
    {
      v28 = 0;
      v29 = 64 - __clz(v27);
      v30 = a1[119] | (v26 | v24 | v25) & ~v23;
      do
      {
        if (((1 << v28) & v30) != 0)
          v31 = CFSTR("promoted");
        else
          v31 = CFSTR("not promoted");
        if (((1 << v28) & v27) != 0)
          v32 = v31;
        else
          v32 = CFSTR("unused");
        objc_msgSend(v22, "addObject:", v32);
        ++v28;
      }
      while (v29 != v28);
    }
    v33 = AGX::UserShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPerformanceStatisticsDictionary(v21, (uint64_t)CFSTR("FragmentBufferPrefetch"), (uint64_t)v22);
    if (v33)
    {
      v34 = v33;
      v35 = (_QWORD *)MEMORY[0x24BDDD2E8];
      v36 = objc_msgSend(a3, "objectForKey:", *MEMORY[0x24BDDD2E8]);
      if (v36)
        objc_msgSend(v34, "setObject:forKey:", v36, *MEMORY[0x24BDDD2B8]);
      objc_msgSend(v5, "setObject:forKey:", v34, *v35);

    }
  }
  return v5;
}

unint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getRenderPipelineFlags(unint64_t result, _DWORD *a2)
{
  if (result)
    result = *(unsigned __int8 *)(result + 3217) | (2 * *(unsigned __int8 *)(result + 3219)) | (4
                                                                                                * *(unsigned __int8 *)(result + 3220)) | (16 * (*(_DWORD *)(result + 320) != 0)) | ((unint64_t)(*(_DWORD *)(result + 332) != 0) << 10) | (32 * *(unsigned __int8 *)(result + 3221)) | ((unint64_t)*(unsigned __int8 *)(result + 3218) << 6);
  if (a2)
    return result & 0xFFFFFFFFFFFFFD77 | (8 * (a2[80] != 0)) | ((unint64_t)(a2[83] != 0) << 9) | ((unint64_t)a2[900] >> 11) & 0x80;
  return result;
}

_QWORD *std::__tree<std::pair<unsigned long long,unsigned long long>>::__find_equal<std::pair<unsigned long long,unsigned long long>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;

  v6 = a1 + 1;
  if (a1 + 1 == a2 || (v7 = a2[4], v7 > a5))
  {
LABEL_3:
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
    }
    else
    {
      if (v8)
      {
        v9 = (_QWORD *)*a2;
        do
        {
          v10 = v9;
          v9 = (_QWORD *)v9[1];
        }
        while (v9);
      }
      else
      {
        v15 = a2;
        do
        {
          v10 = (_QWORD *)v15[2];
          v16 = *v10 == (_QWORD)v15;
          v15 = v10;
        }
        while (v16);
      }
      v17 = v10[4];
      if (v17 >= a5 && (v17 > a5 || v10[5] >= a6))
      {
        v19 = (_QWORD *)*v6;
        if (!*v6)
          goto LABEL_24;
        while (1)
        {
          v20 = v19;
          v21 = v19[4];
          if (v21 > a5)
            goto LABEL_25;
          if (v21 < a5)
          {
LABEL_30:
            v6 = v20 + 1;
            v19 = (_QWORD *)v20[1];
            if (!v19)
              goto LABEL_51;
          }
          else
          {
            v22 = v20[5];
            if (v22 <= a6)
            {
              if (v22 >= a6)
                goto LABEL_51;
              goto LABEL_30;
            }
LABEL_25:
            v19 = (_QWORD *)*v20;
            v6 = v20;
            if (!*v20)
              goto LABEL_51;
          }
        }
      }
    }
    if (v8)
    {
      *a3 = v10;
      return v10 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v7 >= a5)
  {
    v11 = a2[5];
    if (v11 > a6)
      goto LABEL_3;
    if (v11 >= a6)
    {
      *a3 = a2;
      *a4 = a2;
      return a4;
    }
  }
  v12 = a2[1];
  if (v12)
  {
    v13 = (_QWORD *)a2[1];
    do
    {
      v14 = v13;
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  else
  {
    v23 = a2;
    do
    {
      v14 = (_QWORD *)v23[2];
      v16 = *v14 == (_QWORD)v23;
      v23 = v14;
    }
    while (!v16);
  }
  if (v14 == v6 || (v24 = v14[4], v24 > a5) || v24 >= a5 && v14[5] > a6)
  {
    if (v12)
    {
      *a3 = v14;
      return v14;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
  v25 = (_QWORD *)*v6;
  if (*v6)
  {
    while (1)
    {
      v20 = v25;
      v26 = v25[4];
      if (v26 > a5)
        goto LABEL_45;
      if (v26 < a5)
      {
LABEL_50:
        v6 = v20 + 1;
        v25 = (_QWORD *)v20[1];
        if (!v25)
          goto LABEL_51;
      }
      else
      {
        v27 = v20[5];
        if (v27 <= a6)
        {
          if (v27 >= a6)
            goto LABEL_51;
          goto LABEL_50;
        }
LABEL_45:
        v25 = (_QWORD *)*v20;
        v6 = v20;
        if (!*v20)
          goto LABEL_51;
      }
    }
  }
LABEL_24:
  v20 = a1 + 1;
LABEL_51:
  *a3 = v20;
  return v6;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setVertexDebugInstrumentationData:", a2);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFragmentDebugInstrumentationData:", a2);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setMeshDebugInstrumentationData:", a2);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE23constructRenderPipelineI27MTLRenderPipelineDescriptorEEvP12_MTLFunctionPNS1_22FragmentProgramVariantERK13ReflectionKeyS9_PNS1_20VertexProgramVariantESE_S9_PNS1_20ObjectProgramVariantESE_S9_PNS1_18MeshProgramVariantESE_P7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectESP_SP_SP_P18AGXA10FamilyDevicePU27objcproto16OS_dispatch_data8NSObjectSU_SU_PT_mbbyP19NSMutableDictionarySY_U13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setObjectDebugInstrumentationData:", a2);
}

id ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id result;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (a4 > 3)
      v6 = 5;
    else
      v6 = qword_232D76128[a4];
    v11 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a5, *MEMORY[0x24BDD0FC8]);
    result = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v6, v11);
    if (v5)
      return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, id))(v5 + 16))(v5, 0, 0, result);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a1 + 88);
    v9 = *(void **)v8;
    memset(v12, 0, sizeof(v12));
    return (id)AGX::RenderPipelineWithSWTessellationFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createPipeline<MTLRenderPipelineDescriptor>(*(_QWORD *)(a1 + 72), v9, v7, a1 + 120, 0, 0, (uint64_t)v12, *(void **)(v8 + 24), a2, a3, *(void **)(v8 + 16), *(_QWORD *)(a1 + 96), a1 + 152, *(_QWORD **)(a1 + 32), *(_QWORD *)(v8 + 72), *(void **)(a1 + 40), *(_QWORD *)(a1 + 104), *(_WORD *)(a1 + 184), HIBYTE(*(_WORD *)(a1 + 184)),
                 *(_QWORD *)(a1 + 112),
                 *(_OWORD *)(a1 + 48),
                 *(_QWORD *)(a1 + 64));
  }
  return result;
}

uint64_t AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createRenderPipeline<MTLMeshRenderPipelineDescriptor>(void ***a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  os_unfair_lock_s *v29;
  NSObject *v30;
  _QWORD v32[12];
  BOOL v33;
  BOOL v34;
  _QWORD v35[11];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  id v43[14];
  BOOL v44;
  __int128 v45;
  __int128 v46;
  BOOL v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v14 = (void *)mach_absolute_time();
  if (_MTLCompilePerformanceStatisticsEnabled())
    a4 |= 0x400000uLL;
  if (!a6)
  {
    if (a2)
    {
      v43[0] = 0;
      if (!objc_msgSend(a2, "validateWithDevice:error:", a3, v43))
      {
        v26 = objc_msgSend(v43[0], "localizedDescription");
        v27 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v26, *MEMORY[0x24BDD0FC8]);
        v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v27);
        if (!a7)
          return 0;
        goto LABEL_7;
      }
      goto LABEL_10;
    }
    v24 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("pipeline descriptor is nil"), *MEMORY[0x24BDD0FC8]);
    v25 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v24);
    if (!a7)
      return a7;
    v22 = v25;
LABEL_25:
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(a7 + 16))(a7, 0, 0, v22);
    return 0;
  }
  *a6 = 0;
  if (!a2)
  {
    v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", CFSTR("pipeline descriptor is nil"), *MEMORY[0x24BDD0FC8]);
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v20);
    v22 = v21;
    if (!a7)
    {
      *a6 = v21;
      return a7;
    }
    goto LABEL_25;
  }
  v43[0] = 0;
  if (!objc_msgSend(a2, "validateWithDevice:error:", a3, v43))
  {
    v15 = objc_msgSend(v43[0], "localizedDescription");
    v16 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", v15, *MEMORY[0x24BDD0FC8]);
    v17 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), 2, v16);
    if (!a7)
    {
      *a6 = v17;
      return 0;
    }
LABEL_7:
    (*(void (**)(uint64_t, _QWORD, _QWORD, id))(a7 + 16))(a7, 0, 0, v17);
    return 0;
  }
LABEL_10:
  if (a7)
    a2 = (void *)objc_msgSend(a2, "copy");
  v42 = 0;
  v18 = (_QWORD *)operator new();
  *((_OWORD *)v18 + 6) = 0u;
  *((_OWORD *)v18 + 7) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  *((_OWORD *)v18 + 5) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  if ((AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateRenderPipelineDescriptorInfo<MTLMeshRenderPipelineDescriptor>((uint64_t)a1, v18, a2, a4, a3, &v42) & 1) != 0)
  {
    v36 = 0;
    v37 = &v36;
    v38 = 0x3052000000;
    v39 = __Block_byref_object_copy__1259;
    v40 = __Block_byref_object_dispose__1260;
    v41 = 0;
    v35[0] = MEMORY[0x24BDAC760];
    v35[1] = 3221225472;
    v35[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke;
    v35[3] = &unk_250400C30;
    v35[4] = a3;
    v35[5] = a2;
    v35[6] = a7;
    v35[7] = &v36;
    v35[8] = v18;
    v35[9] = a6;
    v35[10] = a5;
    if (v18[4])
    {
      v32[0] = MEMORY[0x24BDAC760];
      v32[1] = 3221225472;
      v32[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2;
      v32[3] = &unk_250400C80;
      v32[4] = a2;
      v32[5] = a3;
      v32[8] = a4;
      v32[9] = v18;
      v33 = a7 != 0;
      v34 = (a5 | a7) != 0;
      v32[6] = v35;
      v32[7] = a1;
      v32[10] = v14;
      v32[11] = a6;
      v19 = (os_unfair_lock_s *)v18[6];
      if (v19)
      {
        AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramAnalysis<MTLMeshRenderPipelineDescriptor>(a1, a2, (uint64_t)a3, a4, v19, v18[10], a7 != 0, (uint64_t)v32);
      }
      else if ((*(_BYTE *)(a3[101] + 6224) & 0x80) == 0)
      {
        ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2((uint64_t)v32, 0);
      }
    }
    else if (v18[2])
    {
      v28 = (void *)v18[14];
      v29 = (os_unfair_lock_s *)v18[6];
      v30 = v18[10];
      v43[0] = (id)MEMORY[0x24BDAC760];
      v43[1] = (id)3221225472;
      v43[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
      v43[3] = &unk_250400CD0;
      v43[4] = a2;
      v43[5] = a3;
      v43[10] = (id)a4;
      v43[11] = v18;
      v44 = a7 != 0;
      v45 = 0u;
      v46 = 0u;
      v47 = (a5 | a7) != 0;
      v43[12] = 0;
      v43[13] = v14;
      v43[6] = 0;
      v43[7] = 0;
      v43[8] = v35;
      v43[9] = a1;
      AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(a1, a2, (uint64_t)a3, a4, 0, 0, v28, v29, 0, v30, a7 != 0, (uint64_t)v43);
    }
    if (a7)

    a7 = v37[5];
    _Block_object_dispose(&v36, 8);
  }
  else
  {
    if (a6)
      *a6 = v42;
    if (a7)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(a7 + 16))(a7, 0, 0, v42);

    }
    v23 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo((uint64_t)v18);
    MEMORY[0x234927ECC](v23, 0xA0C402B819244);
    return 0;
  }
  return a7;
}

void sub_232C74D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(v8);
    MEMORY[0x234927ECC](v9, 0xA0C402B819244);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = a2;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    v13 = *(_QWORD *)(v11 + 808);
    *(_QWORD *)(v10 + 1208) = v11;
    if (objc_msgSend(v12, "maxAccelerationStructureTraversalDepth"))
      objc_msgSend(v12, "maxAccelerationStructureTraversalDepth");
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::constructSpillParams((uint64_t *)(v10 + 144), v13);
    AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::emitLabelUpdateSignpost((uint64_t *)(v10 + 144), (void *)v10);
    if (v12 && objc_msgSend(v12, "explicitVisibilityGroupID") != -1)
    {
      *(_DWORD *)(v10 + 984) = objc_msgSend(v12, "explicitVisibilityGroupID");
      *(_BYTE *)(v10 + 988) = 1;
    }
    if (*(_BYTE *)(v10 + 981))
      objc_msgSend(v12, "resourceIndex");
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    (*(void (**)(uint64_t, void *, void *, uint64_t))(v14 + 16))(v14, a2, a3, a4);

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = 0;
  }
  v15 = *(_QWORD **)(a1 + 72);
  if (v15)
    *v15 = a4;
  if (*(_QWORD *)(a1 + 80))
    **(_QWORD **)(a1 + 80) = a3;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  NSObject *v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void ***v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v22[7];
  __int128 v23;
  void ***v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v22[1] = 3221225472;
    v25 = *(_OWORD *)(a1 + 88);
    v7 = *(void **)(v25 + 120);
    v8 = *(void **)(v25 + 24);
    v9 = *(NSObject **)(v25 + 88);
    v29 = *(_OWORD *)(a1 + 113);
    v30 = *(_OWORD *)(a1 + 129);
    v10 = a3[1];
    v31 = *a3;
    v12 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v13 = *(void ****)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_WORD *)(a2 + 2994);
    v17 = *(_BYTE *)(a1 + 112);
    v22[0] = MEMORY[0x24BDAC760];
    v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_2;
    v22[3] = &unk_250400CA8;
    v24 = v13;
    v26 = a2;
    v27 = v14;
    v32 = v10;
    v22[4] = v11;
    v22[5] = v12;
    v33 = v17;
    v34 = *(_BYTE *)(a1 + 145);
    v28 = *(_QWORD *)(a1 + 104);
    v22[6] = a4;
    v23 = *(_OWORD *)(a1 + 56);
    AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createUserOrPassthroughObjectProgramVariant<MTLMeshRenderPipelineDescriptor>(v13, v12, v11, v14, v15, a7, v7, v8, v9, v16, HIBYTE(v16), v17, (uint64_t)v22);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 64);
    if (a5 > 3)
      v19 = 5;
    else
      v19 = qword_232D76128[a5];
    v20 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v19, v20);
    if (v18)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v18 + 16))(v18, 0, 0, v21);
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  os_unfair_lock_s *v8;
  NSObject *v9;
  unsigned __int8 v10;
  void ***v11;
  uint64_t v12;
  _QWORD v13[12];
  unsigned __int8 v14;
  char v15;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD **)(a1 + 72);
  v7 = (void *)v6[12];
  v8 = (os_unfair_lock_s *)v6[4];
  v9 = v6[8];
  v10 = *(_BYTE *)(a1 + 96);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3;
  v13[3] = &unk_250400C58;
  v13[4] = v4;
  v13[5] = v3;
  v13[8] = v6;
  v13[9] = v5;
  v14 = v10;
  v15 = *(_BYTE *)(a1 + 97);
  v11 = *(void ****)(a1 + 56);
  v13[6] = *(_QWORD *)(a1 + 48);
  v13[7] = v11;
  v12 = *(_QWORD *)(a1 + 88);
  v13[10] = *(_QWORD *)(a1 + 80);
  v13[11] = v12;
  AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createFragmentProgramVariant<MTLMeshRenderPipelineDescriptor>(v11, v3, v4, v5, 0, v7, v8, a2, v9, v10, (uint64_t)v13);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI31MTLMeshRenderPipelineDescriptorEEP26AGXA10FamilyRenderPipelinePT_P18AGXA10FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  void *v7;
  os_unfair_lock_s *v8;
  NSObject *v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  _QWORD v24[14];
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 64);
    if (v6[2])
    {
      v7 = (void *)v6[14];
      v8 = (os_unfair_lock_s *)v6[6];
      v9 = v6[10];
      v24[1] = 3221225472;
      v10 = a3[1];
      v26 = *a3;
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(void **)(a1 + 40);
      v13 = *(_BYTE *)(a1 + 96);
      v14 = *(_BYTE *)(a1 + 97);
      v15 = *(_QWORD *)(a1 + 72);
      v16 = *(_QWORD *)(a1 + 80);
      v18 = *(_QWORD *)(a1 + 48);
      v17 = *(void ****)(a1 + 56);
      v24[2] = ___ZN3AGX23UserCommonShaderFactoryINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI31MTLMeshRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXA10FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXA10FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
      v24[3] = &unk_250400CD0;
      v24[4] = v12;
      v24[5] = v11;
      v24[10] = v15;
      v24[11] = v6;
      v25 = v13;
      v27 = v10;
      v28 = v14;
      v24[12] = a2;
      v24[13] = v16;
      v24[6] = 0;
      v24[7] = a4;
      v24[8] = v18;
      v24[9] = v17;
      v24[0] = MEMORY[0x24BDAC760];
      AGX::UserCommonShaderFactory<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createMeshProgramVariant<MTLMeshRenderPipelineDescriptor>(v17, v12, v11, v15, 0, 0, v7, v8, a2, v9, v13 != 0, (uint64_t)v24);
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 48);
    if (a5 > 3)
      v20 = 5;
    else
      v20 = qword_232D76128[a5];
    v21 = *(_QWORD **)(a1 + 88);
    v22 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObject:forKey:", a6, *MEMORY[0x24BDD0FC8]);
    v23 = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD1540]), "initWithDomain:code:userInfo:", CFSTR("AGXMetalA10"), v20, v22);
    if (v19)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v19 + 16))(v19, 0, 0, v23);
    }
    else if (v21)
    {
      *v21 = v23;
    }
  }
}

void sub_232C758D4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::compileDriverShaders(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_object_t v9;
  uint64_t isa;
  unint64_t *v11;
  char **v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  unint64_t *v39;
  char **v40;
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 v47;
  AGXA10FamilyBuffer *v48;
  uint64_t v49;
  void *v50;
  NSObject *v51;
  NSObject *v52;
  char *v53;
  uint64_t v54;
  unint64_t *v55;
  char **v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  NSObject *v69;
  NSObject *v70;
  char *v71;
  uint64_t v72;
  unint64_t *v73;
  char **v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  NSObject *v85;
  NSObject *v86;
  dispatch_object_t v87;
  uint64_t v88;
  unint64_t *v89;
  char **v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  NSObject *v99;
  NSObject *v100;
  char *v101;
  uint64_t v102;
  unint64_t *v103;
  char **v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  NSObject *v113;
  NSObject *v114;
  char *v115;
  uint64_t v116;
  unint64_t *v117;
  char **v118;
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  NSObject *v128;
  NSObject *v129;
  dispatch_object_t v130;
  uint64_t v131;
  unint64_t *v132;
  char **v133;
  dispatch_object_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  NSObject *v143;
  NSObject *v144;
  dispatch_object_t v145;
  uint64_t v146;
  unint64_t *v147;
  char **v148;
  dispatch_object_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  NSObject *v158;
  NSObject *v159;
  dispatch_object_t v160;
  uint64_t v161;
  unint64_t *v162;
  char **v163;
  dispatch_object_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  NSObject *v173;
  NSObject *v174;
  dispatch_object_t v175;
  uint64_t v176;
  unint64_t *v177;
  char **v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  CC_SHA256_CTX *v187;
  _QWORD v188[6];
  uint64_t (**v189)();
  int v190;
  void *v191;
  void *v192;
  uint64_t v193;
  _QWORD v194[6];
  uint64_t (**v195)();
  int v196;
  void *v197;
  void *v198;
  uint64_t v199;
  _QWORD v200[6];
  uint64_t (**v201)();
  int v202;
  void *v203;
  void *v204;
  uint64_t v205;
  _QWORD v206[5];
  uint64_t (**v207)();
  int v208;
  void *v209;
  void *v210;
  uint64_t v211;
  size_t size;
  int v213;
  void *v214;
  void *v215;
  uint64_t v216;
  CC_SHA256_CTX c;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  CC_SHA256_CTX v221;
  size_t v222;
  void *buffer;
  size_t v224;
  size_t v225;
  unsigned __int8 md[16];
  _BYTE v227[32];
  void *v228[2];
  __int128 v229;
  _BYTE v230[24];
  uint64_t v231;
  uint64_t v232;
  void *data[2];
  void *v234[2];
  dispatch_object_t *v235;
  uint64_t (**v236)();
  int v237;
  void *v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  dispatch_object_t object[2];
  void *v243[2];
  CC_SHA256_CTX *v244;
  uint64_t (**v245)();
  int v246;
  void *v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  dispatch_object_t v251[2];
  void *v252[2];
  CC_SHA256_CTX *v253;
  uint64_t (**v254)();
  int v255;
  void *v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  CC_SHA256_CTX *p_c;
  uint64_t (**v263)();
  int v264;
  void *__p;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269[2];
  __int128 v270;
  unsigned __int8 *v271;
  char *v272[2];
  __int128 v273;
  CC_SHA256_CTX *v274;
  uint64_t v275;
  char *v276[2];
  size_t v277[3];
  uint64_t v278;

  v278 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 5464);
  v251[0] = (dispatch_object_t)off_250401558;
  LODWORD(v251[1]) = 32;
  v253 = 0;
  v252[0] = 0;
  v252[1] = 0;
  v4 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v260 = MEMORY[0x24BDAC760];
  *((_QWORD *)&v260 + 1) = 3321888768;
  *(_QWORD *)&v261 = ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke;
  *((_QWORD *)&v261 + 1) = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken32ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v187 = (CC_SHA256_CTX *)(a1 + 5328);
  p_c = (CC_SHA256_CTX *)(a1 + 5328);
  v263 = off_250401558;
  v264 = 32;
  __p = 0;
  v266 = 0;
  v267 = 0;
  v268 = a1;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setSync:", 1);
  objc_msgSend(v6, "setPipelineCache:", v5);
  objc_msgSend(v6, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = &v260;
  v269[0] = 0;
  size = 0;
  ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)v251, v269, &size);
  v7 = dispatch_data_create(v269[0], size, 0, 0);
  objc_msgSend(v6, "setDriverKeyData:", v7);
  if (objc_msgSend(v6, "airScript"))
  {
    v8 = objc_msgSend(v6, "airScript");
    object[1] = 0;
    object[0] = 0;
    v243[0] = 0;
    object[0] = dispatch_data_create_map(v8, (const void **)&object[1], (size_t *)v243);
    v9 = object[1];
    isa = object[1]->isa;
    CC_SHA256_Init(&c);
    ((void (*)(dispatch_object_t *, CC_SHA256_CTX *))v251[0]->isa)(v251, &c);
    data[0] = 0;
    v272[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + isa), data, (size_t *)v272, v11, v12))
    {
      v13 = data[0];
      CC_SHA256_Update(&c, data[0], (CC_LONG)v272[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object[0]);
    *(_OWORD *)object = *(_OWORD *)md;
    *(_OWORD *)v243 = *(_OWORD *)v227;
    objc_msgSend(v6, "setVendorPluginFunctionId:", object);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v6;
  if (objc_msgSend(v6, "function"))
  {
    v14 = mach_absolute_time();
    v15 = *(void **)v3;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v14;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v15, "compileFunctionRequest:completionHandler:", v6, md);
  }
  else
  {
    if (objc_msgSend(v6, "frameworkData") || objc_msgSend(v6, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v16 = objc_msgSend((id)objc_msgSend(v6, "binaryArchives"), "count");
    v17 = *(void **)v3;
    v18 = objc_msgSend(v6, "driverKeyData");
    if (v16)
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(v6, "binaryArchives"), 0, objc_msgSend(v6, "pipelineCache"), objc_msgSend(v6, "sync"), md);
    else
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(v6, "pipelineCache"), objc_msgSend(v6, "sync"), md);
  }
  dispatch_release(v7);

  v263 = off_250401558;
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  v251[0] = (dispatch_object_t)off_250401558;
  if (v252[0])
  {
    v252[1] = v252[0];
    operator delete(v252[0]);
  }
  object[0] = (dispatch_object_t)off_250401598;
  LODWORD(object[1]) = 35;
  v244 = 0;
  v243[0] = 0;
  v243[1] = 0;
  v251[0] = v4;
  v251[1] = (dispatch_object_t)3321888768;
  v252[0] = ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_17;
  v252[1] = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken35ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v253 = v187;
  v254 = off_250401598;
  v255 = 35;
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v259 = a1;
  v19 = *(_QWORD *)(v3 + 8);
  v20 = (void *)objc_opt_new();
  objc_msgSend(v20, "setSync:", 1);
  objc_msgSend(v20, "setPipelineCache:", v19);
  objc_msgSend(v20, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = v251;
  size = 0;
  v276[0] = 0;
  ((void (*)(uint64_t, _QWORD *, _QWORD *))object[0][2].isa)((uint64_t)object, &size, v276);
  v21 = dispatch_data_create((const void *)size, (size_t)v276[0], 0, 0);
  objc_msgSend(v20, "setDriverKeyData:", v21);
  if (objc_msgSend(v20, "airScript"))
  {
    v22 = objc_msgSend(v20, "airScript");
    data[1] = 0;
    data[0] = 0;
    v234[0] = 0;
    data[0] = dispatch_data_create_map(v22, (const void **)&data[1], (size_t *)v234);
    v23 = (char *)data[1];
    v24 = *(unsigned int *)data[1];
    CC_SHA256_Init(&c);
    ((void (*)(dispatch_object_t *, CC_SHA256_CTX *))object[0]->isa)(object, &c);
    v272[0] = 0;
    v269[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)&v23[v24], v272, (size_t *)v269, v25, v26))
    {
      v27 = v272[0];
      CC_SHA256_Update(&c, v272[0], (CC_LONG)v269[0]);
      free(v27);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)data[0]);
    *(_OWORD *)data = *(_OWORD *)md;
    *(_OWORD *)v234 = *(_OWORD *)v227;
    objc_msgSend(v20, "setVendorPluginFunctionId:", data);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v20;
  if (objc_msgSend(v20, "function"))
  {
    v28 = mach_absolute_time();
    v29 = *(void **)v3;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v28;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v29, "compileFunctionRequest:completionHandler:", v20, md);
  }
  else
  {
    if (objc_msgSend(v20, "frameworkData") || objc_msgSend(v20, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v30 = objc_msgSend((id)objc_msgSend(v20, "binaryArchives"), "count");
    v31 = *(void **)v3;
    v32 = objc_msgSend(v20, "driverKeyData");
    if (v30)
      objc_msgSend(v31, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v32, objc_msgSend(v20, "binaryArchives"), 0, objc_msgSend(v20, "pipelineCache"), objc_msgSend(v20, "sync"), md);
    else
      objc_msgSend(v31, "compileRequest:pipelineCache:sync:completionHandler:", v32, objc_msgSend(v20, "pipelineCache"), objc_msgSend(v20, "sync"), md);
  }
  dispatch_release(v21);

  v254 = off_250401598;
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  object[0] = (dispatch_object_t)off_250401598;
  if (v243[0])
  {
    v243[1] = v243[0];
    operator delete(v243[0]);
  }
  data[0] = off_2504015D8;
  LODWORD(data[1]) = 36;
  v235 = 0;
  v234[0] = 0;
  v234[1] = 0;
  object[0] = v4;
  object[1] = (dispatch_object_t)3321888768;
  v243[0] = ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_19;
  v243[1] = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken36ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v244 = v187;
  v245 = off_2504015D8;
  v246 = 36;
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v250 = a1;
  v33 = *(_QWORD *)(v3 + 8);
  v34 = (void *)objc_opt_new();
  objc_msgSend(v34, "setSync:", 1);
  objc_msgSend(v34, "setPipelineCache:", v33);
  objc_msgSend(v34, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = object;
  v276[0] = 0;
  v225 = 0;
  (*((void (**)(uint64_t, _QWORD *, _QWORD *))data[0] + 2))((uint64_t)data, v276, &v225);
  v35 = dispatch_data_create(v276[0], v225, 0, 0);
  objc_msgSend(v34, "setDriverKeyData:", v35);
  if (objc_msgSend(v34, "airScript"))
  {
    v36 = objc_msgSend(v34, "airScript");
    v272[0] = 0;
    v272[1] = 0;
    *(_QWORD *)&v273 = 0;
    v272[0] = (char *)dispatch_data_create_map(v36, (const void **)&v272[1], (size_t *)&v273);
    v37 = v272[1];
    v38 = *(unsigned int *)v272[1];
    CC_SHA256_Init(&c);
    (*(void (**)(void **, CC_SHA256_CTX *))data[0])(data, &c);
    v269[0] = 0;
    size = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)&v37[v38], v269, &size, v39, v40))
    {
      v41 = v269[0];
      CC_SHA256_Update(&c, v269[0], size);
      free(v41);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v272[0]);
    *(_OWORD *)v272 = *(_OWORD *)md;
    v273 = *(_OWORD *)v227;
    objc_msgSend(v34, "setVendorPluginFunctionId:", v272);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v34;
  if (objc_msgSend(v34, "function"))
  {
    v42 = mach_absolute_time();
    v43 = *(void **)v3;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v42;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v43, "compileFunctionRequest:completionHandler:", v34, md);
  }
  else
  {
    if (objc_msgSend(v34, "frameworkData") || objc_msgSend(v34, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v44 = objc_msgSend((id)objc_msgSend(v34, "binaryArchives"), "count");
    v45 = *(void **)v3;
    v46 = objc_msgSend(v34, "driverKeyData");
    if (v44)
      objc_msgSend(v45, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v46, objc_msgSend(v34, "binaryArchives"), 0, objc_msgSend(v34, "pipelineCache"), objc_msgSend(v34, "sync"), md);
    else
      objc_msgSend(v45, "compileRequest:pipelineCache:sync:completionHandler:", v46, objc_msgSend(v34, "pipelineCache"), objc_msgSend(v34, "sync"), md);
  }
  dispatch_release(v35);

  v245 = off_2504015D8;
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  data[0] = off_2504015D8;
  if (v234[0])
  {
    v234[1] = v234[0];
    operator delete(v234[0]);
  }
  if ((v47 & 1) == 0
  {
    AGX::DevicePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setup(AGXA10FamilyDevice *,AGX::Compiler &,AGX::G9::Device &,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields &)::isSuballocDisabled = *(_BYTE *)(a2[101] + 6725);
  }
  v48 = [AGXA10FamilyBuffer alloc];
  *(_QWORD *)(a1 + 5392) = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v48, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", a2, 256, 0, AGX::DevicePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setup(AGXA10FamilyDevice *,AGX::Compiler &,AGX::G9::Device &,AGX::SamplerStateEncoderGen2<kAGXRevG9>::SamplerStateFields &)::isSuballocDisabled, 0);
  v272[0] = (char *)off_250401618;
  LODWORD(v272[1]) = 37;
  v274 = 0;
  v273 = 0uLL;
  data[0] = v4;
  data[1] = (void *)3321888768;
  v234[0] = ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_21;
  v234[1] = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken37ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v235 = (dispatch_object_t *)v187;
  v236 = off_250401618;
  v237 = 37;
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v241 = a1;
  v49 = *(_QWORD *)(v3 + 8);
  v50 = (void *)objc_opt_new();
  objc_msgSend(v50, "setSync:", 1);
  objc_msgSend(v50, "setPipelineCache:", v49);
  objc_msgSend(v50, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = data;
  v225 = 0;
  v224 = 0;
  (*((void (**)(uint64_t, _QWORD *, _QWORD *))v272[0] + 2))((uint64_t)v272, &v225, &v224);
  v51 = dispatch_data_create((const void *)v225, v224, 0, 0);
  objc_msgSend(v50, "setDriverKeyData:", v51);
  if (objc_msgSend(v50, "airScript"))
  {
    v52 = objc_msgSend(v50, "airScript");
    v269[0] = 0;
    v269[1] = 0;
    *(_QWORD *)&v270 = 0;
    v269[0] = (char *)dispatch_data_create_map(v52, (const void **)&v269[1], (size_t *)&v270);
    v53 = v269[1];
    v54 = *(unsigned int *)v269[1];
    CC_SHA256_Init(&c);
    (*(void (**)(char **, CC_SHA256_CTX *))v272[0])(v272, &c);
    size = 0;
    v276[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)&v53[v54], &size, (size_t *)v276, v55, v56))
    {
      v57 = (void *)size;
      CC_SHA256_Update(&c, (const void *)size, (CC_LONG)v276[0]);
      free(v57);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v269[0]);
    *(_OWORD *)v269 = *(_OWORD *)md;
    v270 = *(_OWORD *)v227;
    objc_msgSend(v50, "setVendorPluginFunctionId:", v269);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v50;
  if (objc_msgSend(v50, "function"))
  {
    v58 = mach_absolute_time();
    v59 = *(void **)v3;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v58;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v59, "compileFunctionRequest:completionHandler:", v50, md);
  }
  else
  {
    if (objc_msgSend(v50, "frameworkData") || objc_msgSend(v50, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v60 = objc_msgSend((id)objc_msgSend(v50, "binaryArchives"), "count");
    v61 = *(void **)v3;
    v62 = objc_msgSend(v50, "driverKeyData");
    if (v60)
      objc_msgSend(v61, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v62, objc_msgSend(v50, "binaryArchives"), 0, objc_msgSend(v50, "pipelineCache"), objc_msgSend(v50, "sync"), md);
    else
      objc_msgSend(v61, "compileRequest:pipelineCache:sync:completionHandler:", v62, objc_msgSend(v50, "pipelineCache"), objc_msgSend(v50, "sync"), md);
  }
  dispatch_release(v51);

  v63 = operator new();
  *(_QWORD *)(v63 + 72) = 0;
  *(_OWORD *)(v63 + 56) = 0u;
  *(_OWORD *)(v63 + 40) = 0u;
  memset(&c, 0, 64);
  LOBYTE(c.count[0]) = 1;
  c.wbuf[2] = 0;
  *(int64x2_t *)&c.wbuf[6] = vdupq_n_s64(4uLL);
  *(_QWORD *)&c.wbuf[10] = 0x400000000;
  AGX::Heap<true>::allocateImpl(md, a1 + 5016, 32, (_QWORD *)v63);
  v64 = *(_DWORD *)md;
  *(_QWORD *)&c.wbuf[4] = *(_QWORD *)&md[8];
  *(_QWORD *)c.wbuf = *(_QWORD *)&md[8] + 16;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeComputePDSProgram((uint64_t)&c, 0, 1);
  *(_OWORD *)(v63 + 20) = xmmword_232D73540;
  v65 = *(_OWORD *)v227;
  *(_OWORD *)(v63 + 40) = *(_OWORD *)md;
  *(_DWORD *)(v63 + 8) = ((unint64_t)(4 * *(_QWORD *)&c.wbuf[6] + 15) >> 3) | 0xC0000001;
  *(_DWORD *)(v63 + 12) = (v64 & 0xFFFFFFF0) + 20;
  *(_DWORD *)(v63 + 16) = v64 & 0xFFFFFFF0;
  *(_DWORD *)(v63 + 36) = 0;
  *(_OWORD *)(v63 + 56) = v65;
  *(_OWORD *)(v63 + 65) = *(_OWORD *)&v227[9];
  *(_QWORD *)(a1 + 5368) = v63;
  v236 = off_250401618;
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  v272[0] = (char *)off_250401618;
  if ((_QWORD)v273)
  {
    *((_QWORD *)&v273 + 1) = v273;
    operator delete((void *)v273);
  }
  LODWORD(v185) = 0;
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2((uint64_t)&c, MTLPixelFormatInvalid, 2, (AGX::G9::TextureFormatTable *)0x7D, 0, 0, 0, 0, 0, 84148994, 0, 4u, 2u, 1u, 1, 0x100000001, 64, v185, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  *(_QWORD *)c.count = off_250402690;
  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 5392) + (int)*MEMORY[0x24BE51650] + 72);
  v218 = 0;
  *(_QWORD *)&c.wbuf[8] = v66;
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::texBaseAddressesUpdated((uint64_t)&c);
  *(_OWORD *)&v230[8] = v219;
  size = (size_t)off_250401658;
  *(_QWORD *)v227 = ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_23;
  *(_QWORD *)&v227[8] = &__block_descriptor_120_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken39ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v213 = 39;
  v215 = 0;
  v216 = 0;
  v214 = 0;
  *(_QWORD *)md = v4;
  *(_QWORD *)&md[8] = 3321888768;
  *(_QWORD *)&v227[16] = v187;
  *(_QWORD *)&v227[24] = off_250401658;
  LODWORD(v228[0]) = 39;
  v229 = 0uLL;
  v228[1] = 0;
  *(_QWORD *)v230 = a1;
  v231 = v220;
  v232 = a1 + 6216;
  v67 = *(_QWORD *)(v3 + 8);
  v68 = (void *)objc_opt_new();
  objc_msgSend(v68, "setSync:", 1);
  objc_msgSend(v68, "setPipelineCache:", v67);
  objc_msgSend(v68, "setBinaryArchives:", 0);
  v269[0] = (char *)v4;
  v269[1] = (char *)3221225472;
  *(_QWORD *)&v270 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *((_QWORD *)&v270 + 1) = &unk_2504023B8;
  v271 = md;
  buffer = 0;
  v222 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(size + 16))((uint64_t)&size, &buffer, &v222);
  v69 = dispatch_data_create(buffer, v222, 0, 0);
  objc_msgSend(v68, "setDriverKeyData:", v69);
  if (objc_msgSend(v68, "airScript"))
  {
    v70 = objc_msgSend(v68, "airScript");
    v276[0] = 0;
    v276[1] = 0;
    v277[0] = 0;
    v276[0] = (char *)dispatch_data_create_map(v70, (const void **)&v276[1], v277);
    v71 = v276[1];
    v72 = *(unsigned int *)v276[1];
    CC_SHA256_Init(&v221);
    (*(void (**)(size_t *, CC_SHA256_CTX *))size)(&size, &v221);
    v225 = 0;
    v224 = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)&v71[v72], &v225, &v224, v73, v74))
    {
      v75 = (void *)v225;
      CC_SHA256_Update(&v221, (const void *)v225, v224);
      free(v75);
    }
    CC_SHA256_Final((unsigned __int8 *)v272, &v221);
    dispatch_release((dispatch_object_t)v276[0]);
    *(_OWORD *)v276 = *(_OWORD *)v272;
    *(_OWORD *)v277 = v273;
    objc_msgSend(v68, "setVendorPluginFunctionId:", v276);
  }
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_250402408;
  *(_QWORD *)v221.wbuf = v269;
  *(_QWORD *)&v221.hash[6] = v68;
  if (objc_msgSend(v68, "function"))
  {
    v76 = mach_absolute_time();
    v77 = *(void **)v3;
    v272[0] = (char *)v4;
    v272[1] = (char *)3221225472;
    *(_QWORD *)&v273 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v273 + 1) = &unk_250402458;
    v274 = &v221;
    v275 = v76;
    objc_msgSend(v77, "compileFunctionRequest:completionHandler:", v68, v272);
  }
  else
  {
    if (objc_msgSend(v68, "frameworkData") || objc_msgSend(v68, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    v272[0] = (char *)v4;
    v272[1] = (char *)3221225472;
    *(_QWORD *)&v273 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v273 + 1) = &unk_250402430;
    v274 = &v221;
    v78 = objc_msgSend((id)objc_msgSend(v68, "binaryArchives"), "count");
    v79 = *(void **)v3;
    v80 = objc_msgSend(v68, "driverKeyData");
    if (v78)
      objc_msgSend(v79, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v80, objc_msgSend(v68, "binaryArchives"), 0, objc_msgSend(v68, "pipelineCache"), objc_msgSend(v68, "sync"), v272);
    else
      objc_msgSend(v79, "compileRequest:pipelineCache:sync:completionHandler:", v80, objc_msgSend(v68, "pipelineCache"), objc_msgSend(v68, "sync"), v272);
  }
  dispatch_release(v69);

  *(_QWORD *)&v227[24] = off_250401658;
  if (v228[1])
  {
    *(void **)&v229 = v228[1];
    operator delete(v228[1]);
  }
  size = (size_t)off_250401658;
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  objc_msgSend(a2, "deviceRef");
  if (AGX::DevicePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::heapTextureData::once != -1)
    dispatch_once(&AGX::DevicePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::heapTextureData::once, &__block_literal_global_1467);
  v229 = xmmword_254235610;
  *(_OWORD *)v230 = unk_254235620;
  *(_QWORD *)&v230[16] = qword_254235630;
  *(_OWORD *)md = xmmword_2542355D0;
  *(_OWORD *)v227 = unk_2542355E0;
  *(_OWORD *)v228 = unk_254235600;
  *(_OWORD *)&v227[16] = xmmword_2542355F0;
  if ((v81 & 1) == 0
  {
    AGX::NopDbgBRN<AGX::G9::Encoders,AGX::G9::Classes>::setup(__IOGPUDevice *,AGXNewTextureDataStruc)::gart_page_size = MEMORY[0x234927AE8](*MEMORY[0x24BDD8EE8], 1);
  }
  *((_QWORD *)&v229 + 1) = AGX::NopDbgBRN<AGX::G9::Encoders,AGX::G9::Classes>::setup(__IOGPUDevice *,AGXNewTextureDataStruc)::gart_page_size;
  v82 = IOGPUResourceCreate();
  *(_QWORD *)(a1 + 5408) = v82;
  *(_DWORD *)(a1 + 5432) = *(_DWORD *)(v82 + 48);
  *(_QWORD *)(a1 + 5424) = *(_QWORD *)(v82 + 32) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 5431) << 56);
  *(_QWORD *)(a1 + 5416) = 0;
  IOGPUResourceGetGPUVirtualAddress();
  v272[0] = (char *)off_250401498;
  LODWORD(v272[1]) = 38;
  v274 = 0;
  v273 = 0uLL;
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3321888768;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX2G920DevicePDSStateLoader5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS0_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke;
  *(_QWORD *)&v221.hash[4] = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken38ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  *(_QWORD *)&v221.hash[6] = v187;
  *(_QWORD *)v221.wbuf = off_250401498;
  v221.wbuf[2] = 38;
  memset(&v221.wbuf[4], 0, 24);
  *(_QWORD *)&v221.wbuf[10] = a1;
  v83 = *(_QWORD *)(v3 + 8);
  v84 = (void *)objc_opt_new();
  objc_msgSend(v84, "setSync:", 1);
  objc_msgSend(v84, "setPipelineCache:", v83);
  objc_msgSend(v84, "setBinaryArchives:", 0);
  v251[0] = v4;
  v251[1] = (dispatch_object_t)3221225472;
  v252[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v252[1] = &unk_2504023B8;
  v253 = &v221;
  size = 0;
  v276[0] = 0;
  (*((void (**)(uint64_t, _QWORD *, _QWORD *))v272[0] + 2))((uint64_t)v272, &size, v276);
  v85 = dispatch_data_create((const void *)size, (size_t)v276[0], 0, 0);
  objc_msgSend(v84, "setDriverKeyData:", v85);
  if (objc_msgSend(v84, "airScript"))
  {
    v86 = objc_msgSend(v84, "airScript");
    object[1] = 0;
    object[0] = 0;
    v243[0] = 0;
    object[0] = dispatch_data_create_map(v86, (const void **)&object[1], (size_t *)v243);
    v87 = object[1];
    v88 = object[1]->isa;
    CC_SHA256_Init(&c);
    (*(void (**)(char **, CC_SHA256_CTX *))v272[0])(v272, &c);
    data[0] = 0;
    v269[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v87 + v88), data, (size_t *)v269, v89, v90))
    {
      v91 = data[0];
      CC_SHA256_Update(&c, data[0], (CC_LONG)v269[0]);
      free(v91);
    }
    CC_SHA256_Final((unsigned __int8 *)&v260, &c);
    dispatch_release(object[0]);
    *(_OWORD *)object = v260;
    *(_OWORD *)v243 = v261;
    objc_msgSend(v84, "setVendorPluginFunctionId:", object);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = v251;
  *(_QWORD *)&c.hash[6] = v84;
  if (objc_msgSend(v84, "function"))
  {
    v92 = mach_absolute_time();
    v93 = *(void **)v3;
    *(_QWORD *)&v260 = v4;
    *((_QWORD *)&v260 + 1) = 3221225472;
    *(_QWORD *)&v261 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v261 + 1) = &unk_250402458;
    v263 = (uint64_t (**)())v92;
    p_c = &c;
    objc_msgSend(v93, "compileFunctionRequest:completionHandler:", v84, &v260);
  }
  else
  {
    if (objc_msgSend(v84, "frameworkData") || objc_msgSend(v84, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&v260 = v4;
    *((_QWORD *)&v260 + 1) = 3221225472;
    *(_QWORD *)&v261 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v261 + 1) = &unk_250402430;
    p_c = &c;
    v94 = objc_msgSend((id)objc_msgSend(v84, "binaryArchives"), "count");
    v95 = *(void **)v3;
    v96 = objc_msgSend(v84, "driverKeyData");
    if (v94)
      objc_msgSend(v95, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v96, objc_msgSend(v84, "binaryArchives"), 0, objc_msgSend(v84, "pipelineCache"), objc_msgSend(v84, "sync"), &v260);
    else
      objc_msgSend(v95, "compileRequest:pipelineCache:sync:completionHandler:", v96, objc_msgSend(v84, "pipelineCache"), objc_msgSend(v84, "sync"), &v260);
  }
  dispatch_release(v85);

  v269[0] = (char *)off_2504014D8;
  LODWORD(v269[1]) = 92;
  v271 = 0;
  v270 = 0uLL;
  *(_QWORD *)&v260 = v4;
  *((_QWORD *)&v260 + 1) = 3321888768;
  *(_QWORD *)&v261 = ___ZN3AGX2G920DevicePDSStateLoader5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS0_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_6;
  *((_QWORD *)&v261 + 1) = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken92ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  p_c = v187;
  v263 = off_2504014D8;
  v264 = 92;
  __p = 0;
  v266 = 0;
  v267 = 0;
  v268 = a1;
  v97 = *(_QWORD *)(v3 + 8);
  v98 = (void *)objc_opt_new();
  objc_msgSend(v98, "setSync:", 1);
  objc_msgSend(v98, "setPipelineCache:", v97);
  objc_msgSend(v98, "setBinaryArchives:", 0);
  object[0] = v4;
  object[1] = (dispatch_object_t)3221225472;
  v243[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v243[1] = &unk_2504023B8;
  v244 = (CC_SHA256_CTX *)&v260;
  v225 = 0;
  v224 = 0;
  (*((void (**)(uint64_t, _QWORD *, _QWORD *))v269[0] + 2))((uint64_t)v269, &v225, &v224);
  v99 = dispatch_data_create((const void *)v225, v224, 0, 0);
  objc_msgSend(v98, "setDriverKeyData:", v99);
  if (objc_msgSend(v98, "airScript"))
  {
    v100 = objc_msgSend(v98, "airScript");
    data[1] = 0;
    data[0] = 0;
    v234[0] = 0;
    data[0] = dispatch_data_create_map(v100, (const void **)&data[1], (size_t *)v234);
    v101 = (char *)data[1];
    v102 = *(unsigned int *)data[1];
    CC_SHA256_Init(&c);
    (*(void (**)(char **, CC_SHA256_CTX *))v269[0])(v269, &c);
    size = 0;
    v276[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)&v101[v102], &size, (size_t *)v276, v103, v104))
    {
      v105 = (void *)size;
      CC_SHA256_Update(&c, (const void *)size, (CC_LONG)v276[0]);
      free(v105);
    }
    CC_SHA256_Final((unsigned __int8 *)v251, &c);
    dispatch_release((dispatch_object_t)data[0]);
    *(_OWORD *)data = *(_OWORD *)v251;
    *(_OWORD *)v234 = *(_OWORD *)v252;
    objc_msgSend(v98, "setVendorPluginFunctionId:", data);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = object;
  *(_QWORD *)&c.hash[6] = v98;
  if (objc_msgSend(v98, "function"))
  {
    v106 = mach_absolute_time();
    v107 = *(void **)v3;
    v251[0] = v4;
    v251[1] = (dispatch_object_t)3221225472;
    v252[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v252[1] = &unk_250402458;
    v254 = (uint64_t (**)())v106;
    v253 = &c;
    objc_msgSend(v107, "compileFunctionRequest:completionHandler:", v98, v251);
  }
  else
  {
    if (objc_msgSend(v98, "frameworkData") || objc_msgSend(v98, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    v251[0] = v4;
    v251[1] = (dispatch_object_t)3221225472;
    v252[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v252[1] = &unk_250402430;
    v253 = &c;
    v108 = objc_msgSend((id)objc_msgSend(v98, "binaryArchives"), "count");
    v109 = *(void **)v3;
    v110 = objc_msgSend(v98, "driverKeyData");
    if (v108)
      objc_msgSend(v109, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v110, objc_msgSend(v98, "binaryArchives"), 0, objc_msgSend(v98, "pipelineCache"), objc_msgSend(v98, "sync"), v251);
    else
      objc_msgSend(v109, "compileRequest:pipelineCache:sync:completionHandler:", v110, objc_msgSend(v98, "pipelineCache"), objc_msgSend(v98, "sync"), v251);
  }
  dispatch_release(v99);

  size = (size_t)off_250401518;
  v213 = 93;
  v215 = 0;
  v216 = 0;
  v214 = 0;
  v251[0] = v4;
  v251[1] = (dispatch_object_t)3321888768;
  v252[0] = ___ZN3AGX2G920DevicePDSStateLoader5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS0_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_8;
  v252[1] = &__block_descriptor_88_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken93ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v253 = v187;
  v254 = off_250401518;
  v255 = 93;
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v259 = a1;
  v111 = *(_QWORD *)(v3 + 8);
  v112 = (void *)objc_opt_new();
  objc_msgSend(v112, "setSync:", 1);
  objc_msgSend(v112, "setPipelineCache:", v111);
  objc_msgSend(v112, "setBinaryArchives:", 0);
  data[0] = v4;
  data[1] = (void *)3221225472;
  v234[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v234[1] = &unk_2504023B8;
  v235 = v251;
  buffer = 0;
  v222 = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(size + 16))((uint64_t)&size, &buffer, &v222);
  v113 = dispatch_data_create(buffer, v222, 0, 0);
  objc_msgSend(v112, "setDriverKeyData:", v113);
  if (objc_msgSend(v112, "airScript"))
  {
    v114 = objc_msgSend(v112, "airScript");
    v276[0] = 0;
    v276[1] = 0;
    v277[0] = 0;
    v276[0] = (char *)dispatch_data_create_map(v114, (const void **)&v276[1], v277);
    v115 = v276[1];
    v116 = *(unsigned int *)v276[1];
    CC_SHA256_Init(&c);
    (*(void (**)(size_t *, CC_SHA256_CTX *))size)(&size, &c);
    v225 = 0;
    v224 = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)&v115[v116], &v225, &v224, v117, v118))
    {
      v119 = (void *)v225;
      CC_SHA256_Update(&c, (const void *)v225, v224);
      free(v119);
    }
    CC_SHA256_Final((unsigned __int8 *)object, &c);
    dispatch_release((dispatch_object_t)v276[0]);
    *(_OWORD *)v276 = *(_OWORD *)object;
    *(_OWORD *)v277 = *(_OWORD *)v243;
    objc_msgSend(v112, "setVendorPluginFunctionId:", v276);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = data;
  *(_QWORD *)&c.hash[6] = v112;
  if (objc_msgSend(v112, "function"))
  {
    v120 = mach_absolute_time();
    v121 = *(void **)v3;
    object[0] = v4;
    object[1] = (dispatch_object_t)3221225472;
    v243[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v243[1] = &unk_250402458;
    v245 = (uint64_t (**)())v120;
    v244 = &c;
    objc_msgSend(v121, "compileFunctionRequest:completionHandler:", v112, object);
  }
  else
  {
    if (objc_msgSend(v112, "frameworkData") || objc_msgSend(v112, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    object[0] = v4;
    object[1] = (dispatch_object_t)3221225472;
    v243[0] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v243[1] = &unk_250402430;
    v244 = &c;
    v122 = objc_msgSend((id)objc_msgSend(v112, "binaryArchives"), "count");
    v123 = *(void **)v3;
    v124 = objc_msgSend(v112, "driverKeyData");
    if (v122)
      objc_msgSend(v123, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v124, objc_msgSend(v112, "binaryArchives"), 0, objc_msgSend(v112, "pipelineCache"), objc_msgSend(v112, "sync"), object);
    else
      objc_msgSend(v123, "compileRequest:pipelineCache:sync:completionHandler:", v124, objc_msgSend(v112, "pipelineCache"), objc_msgSend(v112, "sync"), object);
  }
  dispatch_release(v113);

  v254 = off_250401518;
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  size = (size_t)off_250401518;
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  v263 = off_2504014D8;
  if (__p)
  {
    v266 = __p;
    operator delete(__p);
  }
  v269[0] = (char *)off_2504014D8;
  if ((_QWORD)v270)
  {
    *((_QWORD *)&v270 + 1) = v270;
    operator delete((void *)v270);
  }
  *(_QWORD *)v221.wbuf = off_250401498;
  if (*(_QWORD *)&v221.wbuf[4])
  {
    *(_QWORD *)&v221.wbuf[6] = *(_QWORD *)&v221.wbuf[4];
    operator delete(*(void **)&v221.wbuf[4]);
  }
  v272[0] = (char *)off_250401498;
  if ((_QWORD)v273)
  {
    *((_QWORD *)&v273 + 1) = v273;
    operator delete((void *)v273);
  }
  *(_QWORD *)&v260 = off_250400838;
  DWORD2(v260) = 28;
  p_c = 0;
  v261 = 0uLL;
  v125 = *(_QWORD *)(a1 + 5464);
  v206[0] = v4;
  v206[1] = 3321888768;
  v206[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke;
  v206[3] = &__block_descriptor_80_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken28ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v206[4] = a1;
  v207 = off_250400838;
  v208 = 28;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v126 = *(_QWORD *)(v125 + 8);
  v127 = (void *)objc_opt_new();
  objc_msgSend(v127, "setSync:", 1);
  objc_msgSend(v127, "setPipelineCache:", v126);
  objc_msgSend(v127, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = v206;
  v272[0] = 0;
  v269[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(v260 + 16))((uint64_t)&v260, v272, v269);
  v128 = dispatch_data_create(v272[0], (size_t)v269[0], 0, 0);
  objc_msgSend(v127, "setDriverKeyData:", v128);
  if (objc_msgSend(v127, "airScript"))
  {
    v129 = objc_msgSend(v127, "airScript");
    v251[1] = 0;
    v251[0] = 0;
    v252[0] = 0;
    v251[0] = dispatch_data_create_map(v129, (const void **)&v251[1], (size_t *)v252);
    v130 = v251[1];
    v131 = v251[1]->isa;
    CC_SHA256_Init(&c);
    (*(void (**)(__int128 *, CC_SHA256_CTX *))v260)(&v260, &c);
    object[0] = 0;
    data[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v130 + v131), object, (size_t *)data, v132, v133))
    {
      v134 = object[0];
      CC_SHA256_Update(&c, object[0], (CC_LONG)data[0]);
      free(v134);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(v251[0]);
    *(_OWORD *)v251 = *(_OWORD *)md;
    *(_OWORD *)v252 = *(_OWORD *)v227;
    objc_msgSend(v127, "setVendorPluginFunctionId:", v251);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v127;
  if (objc_msgSend(v127, "function"))
  {
    v135 = mach_absolute_time();
    v136 = *(void **)v125;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v135;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v136, "compileFunctionRequest:completionHandler:", v127, md);
  }
  else
  {
    if (objc_msgSend(v127, "frameworkData") || objc_msgSend(v127, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v137 = objc_msgSend((id)objc_msgSend(v127, "binaryArchives"), "count");
    v138 = *(void **)v125;
    v139 = objc_msgSend(v127, "driverKeyData");
    if (v137)
      objc_msgSend(v138, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v139, objc_msgSend(v127, "binaryArchives"), 0, objc_msgSend(v127, "pipelineCache"), objc_msgSend(v127, "sync"), md);
    else
      objc_msgSend(v138, "compileRequest:pipelineCache:sync:completionHandler:", v139, objc_msgSend(v127, "pipelineCache"), objc_msgSend(v127, "sync"), md);
  }
  dispatch_release(v128);

  v207 = off_250400838;
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
  *(_QWORD *)&v260 = off_250400838;
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  *(_QWORD *)&v260 = off_250400878;
  DWORD2(v260) = 47;
  p_c = 0;
  v261 = 0uLL;
  v140 = *(_QWORD *)(a1 + 5464);
  v200[0] = v4;
  v200[1] = 3321888768;
  v200[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke_106;
  v200[3] = &unk_2504003F0;
  v200[5] = a1;
  v201 = off_250400878;
  v202 = 47;
  v204 = 0;
  v205 = 0;
  v203 = 0;
  v200[4] = a2;
  v141 = *(_QWORD *)(v140 + 8);
  v142 = (void *)objc_opt_new();
  objc_msgSend(v142, "setSync:", 1);
  objc_msgSend(v142, "setPipelineCache:", v141);
  objc_msgSend(v142, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = v200;
  v272[0] = 0;
  v269[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(v260 + 16))((uint64_t)&v260, v272, v269);
  v143 = dispatch_data_create(v272[0], (size_t)v269[0], 0, 0);
  objc_msgSend(v142, "setDriverKeyData:", v143);
  if (objc_msgSend(v142, "airScript"))
  {
    v144 = objc_msgSend(v142, "airScript");
    v251[1] = 0;
    v251[0] = 0;
    v252[0] = 0;
    v251[0] = dispatch_data_create_map(v144, (const void **)&v251[1], (size_t *)v252);
    v145 = v251[1];
    v146 = v251[1]->isa;
    CC_SHA256_Init(&c);
    (*(void (**)(__int128 *, CC_SHA256_CTX *))v260)(&v260, &c);
    object[0] = 0;
    data[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v145 + v146), object, (size_t *)data, v147, v148))
    {
      v149 = object[0];
      CC_SHA256_Update(&c, object[0], (CC_LONG)data[0]);
      free(v149);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(v251[0]);
    *(_OWORD *)v251 = *(_OWORD *)md;
    *(_OWORD *)v252 = *(_OWORD *)v227;
    objc_msgSend(v142, "setVendorPluginFunctionId:", v251);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v142;
  if (objc_msgSend(v142, "function"))
  {
    v150 = mach_absolute_time();
    v151 = *(void **)v140;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v150;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v151, "compileFunctionRequest:completionHandler:", v142, md);
  }
  else
  {
    if (objc_msgSend(v142, "frameworkData") || objc_msgSend(v142, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v152 = objc_msgSend((id)objc_msgSend(v142, "binaryArchives"), "count");
    v153 = *(void **)v140;
    v154 = objc_msgSend(v142, "driverKeyData");
    if (v152)
      objc_msgSend(v153, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v154, objc_msgSend(v142, "binaryArchives"), 0, objc_msgSend(v142, "pipelineCache"), objc_msgSend(v142, "sync"), md);
    else
      objc_msgSend(v153, "compileRequest:pipelineCache:sync:completionHandler:", v154, objc_msgSend(v142, "pipelineCache"), objc_msgSend(v142, "sync"), md);
  }
  dispatch_release(v143);

  v201 = off_250400878;
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  *(_QWORD *)&v260 = off_250400878;
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
  *(_QWORD *)&v260 = off_2504008B8;
  DWORD2(v260) = 90;
  p_c = 0;
  v261 = 0uLL;
  v155 = *(_QWORD *)(a1 + 5464);
  v194[0] = v4;
  v194[1] = 3321888768;
  v194[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke_107;
  v194[3] = &unk_250400428;
  v194[5] = a1;
  v195 = off_2504008B8;
  v196 = 90;
  v198 = 0;
  v199 = 0;
  v197 = 0;
  v194[4] = a2;
  v156 = *(_QWORD *)(v155 + 8);
  v157 = (void *)objc_opt_new();
  objc_msgSend(v157, "setSync:", 1);
  objc_msgSend(v157, "setPipelineCache:", v156);
  objc_msgSend(v157, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = v194;
  v272[0] = 0;
  v269[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(v260 + 16))((uint64_t)&v260, v272, v269);
  v158 = dispatch_data_create(v272[0], (size_t)v269[0], 0, 0);
  objc_msgSend(v157, "setDriverKeyData:", v158);
  if (objc_msgSend(v157, "airScript"))
  {
    v159 = objc_msgSend(v157, "airScript");
    v251[1] = 0;
    v251[0] = 0;
    v252[0] = 0;
    v251[0] = dispatch_data_create_map(v159, (const void **)&v251[1], (size_t *)v252);
    v160 = v251[1];
    v161 = v251[1]->isa;
    CC_SHA256_Init(&c);
    (*(void (**)(__int128 *, CC_SHA256_CTX *))v260)(&v260, &c);
    object[0] = 0;
    data[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v160 + v161), object, (size_t *)data, v162, v163))
    {
      v164 = object[0];
      CC_SHA256_Update(&c, object[0], (CC_LONG)data[0]);
      free(v164);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(v251[0]);
    *(_OWORD *)v251 = *(_OWORD *)md;
    *(_OWORD *)v252 = *(_OWORD *)v227;
    objc_msgSend(v157, "setVendorPluginFunctionId:", v251);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v157;
  if (objc_msgSend(v157, "function"))
  {
    v165 = mach_absolute_time();
    v166 = *(void **)v155;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v165;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v166, "compileFunctionRequest:completionHandler:", v157, md);
  }
  else
  {
    if (objc_msgSend(v157, "frameworkData") || objc_msgSend(v157, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v167 = objc_msgSend((id)objc_msgSend(v157, "binaryArchives"), "count");
    v168 = *(void **)v155;
    v169 = objc_msgSend(v157, "driverKeyData");
    if (v167)
      objc_msgSend(v168, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v169, objc_msgSend(v157, "binaryArchives"), 0, objc_msgSend(v157, "pipelineCache"), objc_msgSend(v157, "sync"), md);
    else
      objc_msgSend(v168, "compileRequest:pipelineCache:sync:completionHandler:", v169, objc_msgSend(v157, "pipelineCache"), objc_msgSend(v157, "sync"), md);
  }
  dispatch_release(v158);

  v251[0] = (dispatch_object_t)off_2504008F8;
  LODWORD(v251[1]) = 91;
  v253 = 0;
  v252[0] = 0;
  v252[1] = 0;
  v170 = *(_QWORD *)(a1 + 5464);
  v188[0] = v4;
  v188[1] = 3321888768;
  v188[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke_108;
  v188[3] = &unk_250400460;
  v188[5] = a1;
  v189 = off_2504008F8;
  v190 = 91;
  v192 = 0;
  v193 = 0;
  v191 = 0;
  v188[4] = a2;
  v171 = *(_QWORD *)(v170 + 8);
  v172 = (void *)objc_opt_new();
  objc_msgSend(v172, "setSync:", 1);
  objc_msgSend(v172, "setPipelineCache:", v171);
  objc_msgSend(v172, "setBinaryArchives:", 0);
  *(_QWORD *)v221.count = v4;
  *(_QWORD *)v221.hash = 3221225472;
  *(_QWORD *)&v221.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  *(_QWORD *)&v221.hash[4] = &unk_2504023B8;
  *(_QWORD *)&v221.hash[6] = v188;
  v269[0] = 0;
  size = 0;
  ((void (*)(uint64_t, _QWORD *, _QWORD *))v251[0][2].isa)((uint64_t)v251, v269, &size);
  v173 = dispatch_data_create(v269[0], size, 0, 0);
  objc_msgSend(v172, "setDriverKeyData:", v173);
  if (objc_msgSend(v172, "airScript"))
  {
    v174 = objc_msgSend(v172, "airScript");
    object[1] = 0;
    object[0] = 0;
    v243[0] = 0;
    object[0] = dispatch_data_create_map(v174, (const void **)&object[1], (size_t *)v243);
    v175 = object[1];
    v176 = object[1]->isa;
    CC_SHA256_Init(&c);
    ((void (*)(dispatch_object_t *, CC_SHA256_CTX *))v251[0]->isa)(v251, &c);
    data[0] = 0;
    v272[0] = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v175 + v176), data, (size_t *)v272, v177, v178))
    {
      v179 = data[0];
      CC_SHA256_Update(&c, data[0], (CC_LONG)v272[0]);
      free(v179);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object[0]);
    *(_OWORD *)object = *(_OWORD *)md;
    *(_OWORD *)v243 = *(_OWORD *)v227;
    objc_msgSend(v172, "setVendorPluginFunctionId:", object);
  }
  *(_QWORD *)c.count = v4;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)c.wbuf = &v221;
  *(_QWORD *)&c.hash[6] = v172;
  if (objc_msgSend(v172, "function"))
  {
    v180 = mach_absolute_time();
    v181 = *(void **)v170;
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *(_QWORD *)&v227[8] = &unk_250402458;
    *(_QWORD *)&v227[24] = v180;
    *(_QWORD *)&v227[16] = &c;
    objc_msgSend(v181, "compileFunctionRequest:completionHandler:", v172, md);
  }
  else
  {
    if (objc_msgSend(v172, "frameworkData") || objc_msgSend(v172, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v4;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)v227 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *(_QWORD *)&v227[8] = &unk_250402430;
    *(_QWORD *)&v227[16] = &c;
    v182 = objc_msgSend((id)objc_msgSend(v172, "binaryArchives"), "count");
    v183 = *(void **)v170;
    v184 = objc_msgSend(v172, "driverKeyData");
    if (v182)
      objc_msgSend(v183, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v184, objc_msgSend(v172, "binaryArchives"), 0, objc_msgSend(v172, "pipelineCache"), objc_msgSend(v172, "sync"), md);
    else
      objc_msgSend(v183, "compileRequest:pipelineCache:sync:completionHandler:", v184, objc_msgSend(v172, "pipelineCache"), objc_msgSend(v172, "sync"), md);
  }
  dispatch_release(v173);

  v189 = off_2504008F8;
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  v251[0] = (dispatch_object_t)off_2504008F8;
  if (v252[0])
  {
    v252[1] = v252[0];
    operator delete(v252[0]);
  }
  v195 = off_2504008B8;
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  *(_QWORD *)&v260 = off_2504008B8;
  if ((_QWORD)v261)
  {
    *((_QWORD *)&v261 + 1) = v261;
    operator delete((void *)v261);
  }
}

void sub_232C783EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_232C78404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXA10FamilyDevice_block_invoke_42(uint64_t a1)
{
  uint64_t v1;
  std::chrono::system_clock::time_point v2;
  float v3;
  float v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (os_unfair_lock_trylock((os_unfair_lock_t)(v1 + 6948)))
  {
    if (*(int *)(v1 + 6944) <= 0)
    {
      v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!*(_BYTE *)(v1 + 6352))
      {
        v3 = (float)((float)(v2.__d_.__rep_ - *(_QWORD *)(v1 + 6344)) + -3000000.0) / 1000000.0;
        if (v3 > 0.0)
        {
          if (v3 < 10.0)
          {
            v4 = 1.0 / fmaxf(10.0 - v3, 1.0);
          }
          else
          {
            *(_BYTE *)(v1 + 6352) = 1;
            v4 = 1.0;
          }
          AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::purgeDevice(v1, v4);
        }
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 6948));
  }
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXA10FamilyDevice_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uintptr_t data;

  v1 = *(_QWORD *)(a1 + 32);
  data = dispatch_source_get_data(*(dispatch_source_t *)(v1 + 6968));
  if (data == 2)
  {
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 5632), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 5712), 0.1);
    AGX::PooledAllocator<16u>::shrink((os_unfair_lock_s *)(v1 + 5792), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 5936), 0.1);
    AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(v1 + 6024), 0.1);
  }
  else if (data == 4)
  {
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::purgeDevice(v1, 1.0);
  }
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXA10FamilyDevice_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  unsigned __int8 v5;
  int v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  int64_t v23;
  char *v24;
  void *v25;
  int64_t v26;
  char *v27;
  os_unfair_lock_s *v28;
  uint64_t (**v29)();
  int v30;
  void *__p;
  void *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t (**v37)();
  int v38;
  void *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t (**v45)();
  int v46;
  void *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t (**v53)();
  int v54;
  void *v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(os_unfair_lock_s **)v1;
  v3 = (os_unfair_lock_s *)(v1 + 6632);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 6632));
  if (atomic_load(&AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::liveUberVariantUses))
    goto LABEL_34;
  if ((v5 & 1) == 0
  {
    AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::enumerateUberKeys(void)::uberKeys = (uint64_t)off_2504019E0;
    dword_255FF82C8 = 13;
    xmmword_255FF82D0 = 0u;
    unk_255FF82E0 = 0u;
    *(__int128 *)((char *)&xmmword_255FF82E8 + 8) = 0u;
    qword_255FF8300 = 0;
    *(_QWORD *)&xmmword_255FF8308 = 4096;
    *((_QWORD *)&xmmword_255FF8308 + 1) = 0x10000000000;
    unk_255FF8318 = off_2504019E0;
    dword_255FF8320 = 13;
    *(_OWORD *)&qword_255FF8328 = 0u;
    unk_255FF8338 = 0u;
    *(__int128 *)((char *)&xmmword_255FF8340 + 8) = 0u;
    qword_255FF8358 = 0;
    *(_QWORD *)&xmmword_255FF8360 = 0x2000;
    *((_QWORD *)&xmmword_255FF8360 + 1) = 0x10000000000;
    unk_255FF8370 = off_2504019E0;
    dword_255FF8378 = 13;
    qword_255FF83B0 = 0;
    xmmword_255FF8390 = 0u;
    unk_255FF83A0 = 0u;
    xmmword_255FF8380 = 0u;
    *(_QWORD *)&xmmword_255FF83B8 = 0x4000;
    *((_QWORD *)&xmmword_255FF83B8 + 1) = 0x10000000000;
    __cxa_atexit((void (*)(void *))std::array<AGX::BackgroundObjectProgramKey,3ul>::~array, &AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::enumerateUberKeys(void)::uberKeys, &dword_232C19000);
  }
  v37 = off_250401A20;
  v6 = dword_255FF82C8;
  v38 = dword_255FF82C8;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v7 = (const void *)xmmword_255FF82D0;
  v8 = *((_QWORD *)&xmmword_255FF82D0 + 1) - xmmword_255FF82D0;
  v28 = v3;
  if (*((_QWORD *)&xmmword_255FF82D0 + 1) == (_QWORD)xmmword_255FF82D0)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_38;
    v9 = (char *)operator new(*((_QWORD *)&xmmword_255FF82D0 + 1) - xmmword_255FF82D0);
    v10 = &v9[4 * (v8 >> 2)];
    v39 = v9;
    v41 = v10;
    memcpy(v9, v7, v8);
    v40 = v10;
  }
  v42 = xmmword_255FF82E8;
  v43 = *(_OWORD *)algn_255FF82F8;
  v44 = xmmword_255FF8308;
  v37 = off_2504019E0;
  v45 = off_250401A20;
  v46 = dword_255FF8320;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v11 = (const void *)qword_255FF8328;
  v12 = unk_255FF8330 - qword_255FF8328;
  if (unk_255FF8330 != qword_255FF8328)
  {
    if (v12 < 0)
      goto LABEL_38;
    v13 = (char *)operator new(unk_255FF8330 - qword_255FF8328);
    v14 = &v13[4 * (v12 >> 2)];
    v47 = v13;
    v49 = v14;
    memcpy(v13, v11, v12);
    v48 = v14;
  }
  v50 = xmmword_255FF8340;
  v51 = unk_255FF8350;
  v52 = xmmword_255FF8360;
  v45 = off_2504019E0;
  v53 = off_250401A20;
  v54 = dword_255FF8378;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v15 = (const void *)xmmword_255FF8380;
  v16 = *((_QWORD *)&xmmword_255FF8380 + 1) - xmmword_255FF8380;
  if (*((_QWORD *)&xmmword_255FF8380 + 1) == (_QWORD)xmmword_255FF8380)
    goto LABEL_13;
  if (v16 < 0)
LABEL_38:
    abort();
  v17 = (char *)operator new(*((_QWORD *)&xmmword_255FF8380 + 1) - xmmword_255FF8380);
  v18 = &v17[4 * (v16 >> 2)];
  v55 = v17;
  v57 = v18;
  memcpy(v17, v15, v16);
  v56 = v18;
LABEL_13:
  v53 = off_2504019E0;
  v58 = *(__int128 *)((char *)&xmmword_255FF8390 + 8);
  v59 = unk_255FF83A8;
  v60 = xmmword_255FF83B8;
  v29 = off_250401A20;
  v30 = v6;
  v32 = 0;
  v33 = 0;
  __p = 0;
  v19 = v10 - v9;
  if (v10 != v9)
  {
    if (v19 < 0)
      goto LABEL_35;
    v20 = (char *)operator new(v10 - v9);
    v21 = &v20[4 * (v19 >> 2)];
    __p = v20;
    v33 = v21;
    memcpy(v20, v9, v10 - v9);
    v32 = v21;
  }
  v29 = off_2504019E0;
  v34 = xmmword_255FF82E8;
  v35 = *(_OWORD *)algn_255FF82F8;
  v36 = xmmword_255FF8308;
  AGX::Program<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::pruneVariant(v2, (uint64_t)&v29);
  v29 = off_250401A20;
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  v29 = off_250401A20;
  v30 = v46;
  v32 = 0;
  v33 = 0;
  __p = 0;
  v22 = v47;
  v23 = v48 - (_BYTE *)v47;
  if (v48 != v47)
  {
    if (v23 < 0)
      goto LABEL_35;
    __p = operator new(v48 - (_BYTE *)v47);
    v32 = __p;
    v24 = (char *)__p + 4 * (v23 >> 2);
    v33 = v24;
    memcpy(__p, v22, v23);
    v32 = v24;
  }
  v29 = off_2504019E0;
  v34 = v50;
  v35 = v51;
  v36 = v52;
  AGX::Program<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::pruneVariant(v2, (uint64_t)&v29);
  v29 = off_250401A20;
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  v29 = off_250401A20;
  v30 = v54;
  v32 = 0;
  v33 = 0;
  __p = 0;
  v25 = v55;
  v26 = v56 - (_BYTE *)v55;
  if (v56 == v55)
    goto LABEL_26;
  if (v26 < 0)
LABEL_35:
    abort();
  __p = operator new(v56 - (_BYTE *)v55);
  v32 = __p;
  v27 = (char *)__p + 4 * (v26 >> 2);
  v33 = v27;
  memcpy(__p, v25, v26);
  v32 = v27;
LABEL_26:
  v29 = off_2504019E0;
  v34 = v58;
  v35 = v59;
  v36 = v60;
  AGX::Program<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::pruneVariant(v2, (uint64_t)&v29);
  v29 = off_250401A20;
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  v3 = v28;
  if (v55)
    operator delete(v55);
  if (v47)
    operator delete(v47);
  if (v39)
    operator delete(v39);
LABEL_34:
  os_unfair_lock_unlock(v3);
}

void sub_232C78D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  void *v47;
  void *v48;

  if (a45)
  {
    operator delete(a45);
    v47 = a34;
    if (!a34)
    {
LABEL_3:
      v48 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v47 = a34;
    if (!a34)
      goto LABEL_3;
  }
  operator delete(v47);
  v48 = __p;
  if (!__p)
  {
LABEL_5:
    os_unfair_lock_unlock(lock);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v48);
  goto LABEL_5;
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE13setupDeferredEP18AGXA10FamilyDevice_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  unsigned __int8 v5;
  int v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  const void *v19;
  int64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  os_unfair_lock_s *v40;
  uint64_t (**v41)();
  int v42;
  void *__p;
  void *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];
  uint64_t (**v51)();
  int v52;
  void *v53;
  void *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[22];
  uint64_t (**v61)();
  int v62;
  void *v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[22];
  uint64_t (**v71)();
  int v72;
  void *v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[22];
  uint64_t (**v81)();
  int v82;
  void *v83;
  char *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[2];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(os_unfair_lock_s **)(v1 + 8);
  v3 = (os_unfair_lock_s *)(v1 + 6636);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 6636));
  if (atomic_load(&AGX::EndOfTileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::liveUberVariantUses))
    goto LABEL_44;
  if ((v5 & 1) == 0
  {
    AGX::EndOfTileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::enumerateUberKeys(void)::uberKeys = (uint64_t)off_250401A60;
    qword_255FF8458 = (uint64_t)off_250401A60;
    qword_255FF84D8 = (uint64_t)off_250401A60;
    qword_255FF8558 = (uint64_t)off_250401A60;
    dword_255FF83E0 = 19;
    xmmword_255FF83E8 = 0u;
    unk_255FF83F8 = 0u;
    *(__int128 *)((char *)&xmmword_255FF8400 + 8) = 0u;
    unk_255FF8418 = 0u;
    *(__int128 *)((char *)&xmmword_255FF8420 + 8) = 0u;
    unk_255FF8438 = 0u;
    *((_QWORD *)&xmmword_255FF8440 + 1) = 0x200000000000000;
    dword_255FF8450 = 0;
    word_255FF8454 = 0;
    dword_255FF84E0 = 19;
    qword_255FF84F0 = 0;
    unk_255FF84F8 = 0;
    qword_255FF84E8 = 0;
    LODWORD(xmmword_255FF8500) = 0x2000000;
    *(__int128 *)((char *)&xmmword_255FF8500 + 4) = 0u;
    *(_OWORD *)&algn_255FF8510[4] = 0u;
    *(__int128 *)((char *)&xmmword_255FF8520 + 4) = 0u;
    unk_255FF8534 = 0u;
    DWORD1(xmmword_255FF8540) = 0;
    *((_QWORD *)&xmmword_255FF8540 + 1) = 0x200000000000000;
    dword_255FF8550 = 0;
    word_255FF8554 = 0;
    dword_255FF8460 = 19;
    qword_255FF8470 = 0;
    unk_255FF8478 = 0;
    qword_255FF8468 = 0;
    LODWORD(xmmword_255FF8480) = 1;
    *(__int128 *)((char *)&xmmword_255FF8480 + 4) = 0u;
    *(_OWORD *)&algn_255FF8490[4] = 0u;
    *(__int128 *)((char *)&xmmword_255FF84A0 + 4) = 0u;
    unk_255FF84B4 = 0u;
    DWORD1(xmmword_255FF84C0) = 0;
    *((_QWORD *)&xmmword_255FF84C0 + 1) = 0x200000000000000;
    word_255FF84D4 = 0;
    dword_255FF84D0 = 0;
    dword_255FF8560 = 19;
    qword_255FF8568 = 0;
    unk_255FF8570 = 0;
    qword_255FF8578 = 0;
    LODWORD(xmmword_255FF8580) = 33554433;
    DWORD1(xmmword_255FF85C0) = 0;
    unk_255FF85B4 = 0u;
    *(__int128 *)((char *)&xmmword_255FF85A0 + 4) = 0u;
    *(_OWORD *)&algn_255FF8590[4] = 0u;
    *(__int128 *)((char *)&xmmword_255FF8580 + 4) = 0u;
    *((_QWORD *)&xmmword_255FF85C0 + 1) = 0x200000000000000;
    word_255FF85D4 = 0;
    dword_255FF85D0 = 0;
    __cxa_atexit((void (*)(void *))std::array<AGX::EndOfTileProgramKey,4ul>::~array, &AGX::EndOfTileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::enumerateUberKeys(void)::uberKeys, &dword_232C19000);
  }
  v51 = off_250401AA0;
  v6 = dword_255FF83E0;
  v52 = dword_255FF83E0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v7 = (const void *)xmmword_255FF83E8;
  v8 = *((_QWORD *)&xmmword_255FF83E8 + 1) - xmmword_255FF83E8;
  v39 = v2;
  v40 = v3;
  if (*((_QWORD *)&xmmword_255FF83E8 + 1) == (_QWORD)xmmword_255FF83E8)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_48;
    v9 = (char *)operator new(*((_QWORD *)&xmmword_255FF83E8 + 1) - xmmword_255FF83E8);
    v10 = &v9[4 * (v8 >> 2)];
    v53 = v9;
    v55 = v10;
    memcpy(v9, v7, v8);
    v54 = v10;
  }
  v58 = xmmword_255FF8420;
  v59 = unk_255FF8430;
  *(_OWORD *)v60 = xmmword_255FF8440;
  v56 = xmmword_255FF8400;
  *(_QWORD *)&v60[14] = *(_QWORD *)((char *)&xmmword_255FF8440 + 14);
  v57 = unk_255FF8410;
  v51 = off_250401A60;
  v61 = off_250401AA0;
  v62 = dword_255FF8460;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  v11 = (const void *)qword_255FF8468;
  v12 = qword_255FF8470 - qword_255FF8468;
  if (qword_255FF8470 != qword_255FF8468)
  {
    if (v12 < 0)
      goto LABEL_48;
    v13 = (char *)operator new(qword_255FF8470 - qword_255FF8468);
    v14 = &v13[4 * (v12 >> 2)];
    v63 = v13;
    v65 = v14;
    memcpy(v13, v11, v12);
    v64 = v14;
  }
  v68 = xmmword_255FF84A0;
  v69 = unk_255FF84B0;
  *(_OWORD *)v70 = xmmword_255FF84C0;
  v66 = xmmword_255FF8480;
  *(_QWORD *)&v70[14] = *(_QWORD *)((char *)&xmmword_255FF84C0 + 14);
  v67 = *(_OWORD *)algn_255FF8490;
  v61 = off_250401A60;
  v71 = off_250401AA0;
  v72 = dword_255FF84E0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v15 = (const void *)qword_255FF84E8;
  v16 = qword_255FF84F0 - qword_255FF84E8;
  if (qword_255FF84F0 != qword_255FF84E8)
  {
    if (v16 < 0)
      goto LABEL_48;
    v17 = (char *)operator new(qword_255FF84F0 - qword_255FF84E8);
    v18 = &v17[4 * (v16 >> 2)];
    v73 = v17;
    v75 = v18;
    memcpy(v17, v15, v16);
    v74 = v18;
  }
  v78 = xmmword_255FF8520;
  v79 = unk_255FF8530;
  *(_OWORD *)v80 = xmmword_255FF8540;
  v76 = xmmword_255FF8500;
  *(_QWORD *)&v80[14] = *(_QWORD *)((char *)&xmmword_255FF8540 + 14);
  v77 = *(_OWORD *)algn_255FF8510;
  v71 = off_250401A60;
  v81 = off_250401AA0;
  v82 = dword_255FF8560;
  v85 = 0;
  v83 = 0;
  v84 = 0;
  v19 = (const void *)qword_255FF8568;
  v20 = unk_255FF8570 - qword_255FF8568;
  if (unk_255FF8570 == qword_255FF8568)
    goto LABEL_16;
  if (v20 < 0)
LABEL_48:
    abort();
  v21 = (char *)operator new(unk_255FF8570 - qword_255FF8568);
  v22 = &v21[4 * (v20 >> 2)];
  v83 = v21;
  v85 = v22;
  memcpy(v21, v19, v20);
  v84 = v22;
LABEL_16:
  v88 = xmmword_255FF85A0;
  v89 = unk_255FF85B0;
  v90[0] = xmmword_255FF85C0;
  v86 = xmmword_255FF8580;
  v81 = off_250401A60;
  *(_QWORD *)((char *)v90 + 14) = *(_QWORD *)((char *)&xmmword_255FF85C0 + 14);
  v87 = *(_OWORD *)algn_255FF8590;
  v41 = off_250401AA0;
  v42 = v6;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v23 = v10 - v9;
  if (v10 != v9)
  {
    if (v23 < 0)
      goto LABEL_45;
    v24 = (char *)operator new(v23);
    v25 = &v24[4 * (v23 >> 2)];
    __p = v24;
    v45 = v25;
    memcpy(v24, v9, v23);
    v44 = v25;
  }
  v41 = off_250401A60;
  v48 = xmmword_255FF8420;
  v49 = unk_255FF8430;
  *(_OWORD *)v50 = xmmword_255FF8440;
  *(_QWORD *)&v50[14] = *(_QWORD *)((char *)&xmmword_255FF8440 + 14);
  v46 = xmmword_255FF8400;
  v47 = unk_255FF8410;
  os_unfair_lock_lock(v39 + 262);
  v26 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v39, (uint64_t)&v41);
  AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>::invalidateAndErase(v26);
  os_unfair_lock_unlock(v39 + 262);
  v41 = off_250401AA0;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v41 = off_250401AA0;
  v42 = v62;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v27 = v63;
  v28 = v64 - (_BYTE *)v63;
  if (v64 != v63)
  {
    if (v28 < 0)
      goto LABEL_45;
    __p = operator new(v64 - (_BYTE *)v63);
    v44 = __p;
    v29 = (char *)__p + 4 * (v28 >> 2);
    v45 = v29;
    memcpy(__p, v27, v28);
    v44 = v29;
  }
  v41 = off_250401A60;
  v48 = v68;
  v49 = v69;
  *(_OWORD *)v50 = *(_OWORD *)v70;
  *(_QWORD *)&v50[14] = *(_QWORD *)&v70[14];
  v46 = v66;
  v47 = v67;
  os_unfair_lock_lock(v39 + 262);
  v30 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v39, (uint64_t)&v41);
  AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>::invalidateAndErase(v30);
  os_unfair_lock_unlock(v39 + 262);
  v41 = off_250401AA0;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v41 = off_250401AA0;
  v42 = v72;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v31 = v73;
  v32 = v74 - (_BYTE *)v73;
  if (v74 != v73)
  {
    if (v32 < 0)
      goto LABEL_45;
    __p = operator new(v74 - (_BYTE *)v73);
    v44 = __p;
    v33 = (char *)__p + 4 * (v32 >> 2);
    v45 = v33;
    memcpy(__p, v31, v32);
    v44 = v33;
  }
  v41 = off_250401A60;
  v48 = v78;
  v49 = v79;
  *(_OWORD *)v50 = *(_OWORD *)v80;
  *(_QWORD *)&v50[14] = *(_QWORD *)&v80[14];
  v46 = v76;
  v47 = v77;
  os_unfair_lock_lock(v39 + 262);
  v34 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v39, (uint64_t)&v41);
  AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>::invalidateAndErase(v34);
  os_unfair_lock_unlock(v39 + 262);
  v41 = off_250401AA0;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v41 = off_250401AA0;
  v42 = v82;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v35 = v83;
  v36 = v84 - (_BYTE *)v83;
  if (v84 == v83)
    goto LABEL_34;
  if (v36 < 0)
LABEL_45:
    abort();
  __p = operator new(v84 - (_BYTE *)v83);
  v44 = __p;
  v37 = (char *)__p + 4 * (v36 >> 2);
  v45 = v37;
  memcpy(__p, v35, v36);
  v44 = v37;
LABEL_34:
  v41 = off_250401A60;
  v48 = v88;
  v49 = v89;
  *(_OWORD *)v50 = v90[0];
  *(_QWORD *)&v50[14] = *(_QWORD *)((char *)v90 + 14);
  v46 = v86;
  v47 = v87;
  os_unfair_lock_lock(v39 + 262);
  v38 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)v39, (uint64_t)&v41);
  AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>::invalidateAndErase(v38);
  os_unfair_lock_unlock(v39 + 262);
  v41 = off_250401AA0;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  v81 = off_250401AA0;
  v3 = v40;
  if (v83)
  {
    v84 = (char *)v83;
    operator delete(v83);
  }
  v71 = off_250401AA0;
  if (v73)
  {
    v74 = (char *)v73;
    operator delete(v73);
  }
  v61 = off_250401AA0;
  if (v63)
  {
    v64 = (char *)v63;
    operator delete(v63);
  }
  v51 = off_250401AA0;
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
LABEL_44:
  os_unfair_lock_unlock(v3);
}

void sub_232C79568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, os_unfair_lock_s *lock, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  unint64_t v62;
  void *v64;

  STACK[0x218] = v62;
  v64 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v64;
    operator delete(v64);
  }
  if (a62)
    operator delete(a62);
  if (a46)
    operator delete(a46);
  if (a30)
    operator delete(a30);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setupDeferred(AGXA10FamilyDevice *)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

_QWORD *std::array<AGX::EndOfTileProgramKey,4ul>::~array(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  a1[48] = off_250401AA0;
  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  a1[32] = off_250401AA0;
  v3 = (void *)a1[34];
  if (v3)
  {
    a1[35] = v3;
    operator delete(v3);
  }
  a1[16] = off_250401AA0;
  v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  *a1 = off_250401AA0;
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;

  v4 = *(unsigned int *)(a1 + 720);
  v5 = *(_QWORD *)(a1 + 712);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (_WORD *)(v5 + 124);
    while (1)
    {
      v8 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v7 - 42), *(int8x16_t *)(a2 + 40)), veorq_s8(*(int8x16_t *)(v7 - 26), *(int8x16_t *)(a2 + 72))), vorrq_s8(veorq_s8(*(int8x16_t *)(v7 - 34), *(int8x16_t *)(a2 + 56)), veorq_s8(*(int8x16_t *)(v7 - 18), *(int8x16_t *)(a2 + 88))));
      *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
      if (!(*(_QWORD *)(v7 - 6) ^ *(_QWORD *)(a2 + 112) | (unsigned __int16)(*(v7 - 2) ^ *(_WORD *)(a2 + 120)) | (unsigned __int16)(*(v7 - 1) ^ *(_WORD *)(a2 + 122)) | (unint64_t)(unsigned __int16)(*v7 ^ *(_WORD *)(a2 + 124)) | v8.i32[0] | (*((_DWORD *)v7 - 5) ^ *(_DWORD *)(a2 + 104)) | v8.i32[1]))
        break;
      v7 += 64;
      if (v4 == ++v6)
        goto LABEL_5;
    }
    v31 = v5 + 48 * v6;
  }
  else
  {
LABEL_5:
    v9 = *(_QWORD *)(v5 + 704);
    if (v9)
    {
      v10 = *(int8x16_t *)(a2 + 88);
      v11 = *(int8x16_t *)(a2 + 72);
      v12 = *(int8x16_t *)(a2 + 56);
      v13 = *(int8x16_t *)(a2 + 40);
      v14 = *(_DWORD *)(a2 + 104);
      v15 = *(_QWORD *)(a2 + 112);
      v16 = *(_WORD *)(a2 + 120);
      v17 = *(_WORD *)(a2 + 122);
      v18 = 1;
      v19 = *(_WORD *)(a2 + 124);
      while (1)
      {
        v20 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 40), v13), veorq_s8(*(int8x16_t *)(v9 + 72), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 56), v12), veorq_s8(*(int8x16_t *)(v9 + 88), v10)));
        *(int8x8_t *)v20.i8 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
        if (!(*(_QWORD *)(v9 + 112) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 120) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 122) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 124) ^ v19) | v20.i32[0] | *(_DWORD *)(v9 + 104) ^ v14 | v20.i32[1]))
        {
          v18 = 0;
          goto LABEL_21;
        }
        v21 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 168), v13), veorq_s8(*(int8x16_t *)(v9 + 200), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 184), v12), veorq_s8(*(int8x16_t *)(v9 + 216), v10)));
        *(int8x8_t *)v21.i8 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        if (!(*(_QWORD *)(v9 + 240) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 248) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 250) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 252) ^ v19) | v21.i32[0] | *(_DWORD *)(v9 + 232) ^ v14 | v21.i32[1]))
          goto LABEL_21;
        v22 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 296), v13), veorq_s8(*(int8x16_t *)(v9 + 328), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 312), v12), veorq_s8(*(int8x16_t *)(v9 + 344), v10)));
        *(int8x8_t *)v22.i8 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
        if (!(*(_QWORD *)(v9 + 368) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 376) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 378) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 380) ^ v19) | v22.i32[0] | *(_DWORD *)(v9 + 360) ^ v14 | v22.i32[1]))
        {
          v18 = 2;
          goto LABEL_21;
        }
        v23 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 424), v13), veorq_s8(*(int8x16_t *)(v9 + 456), v11)), vorrq_s8(veorq_s8(*(int8x16_t *)(v9 + 440), v12), veorq_s8(*(int8x16_t *)(v9 + 472), v10)));
        *(int8x8_t *)v23.i8 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        if (!(*(_QWORD *)(v9 + 496) ^ v15 | (unsigned __int16)(*(_WORD *)(v9 + 504) ^ v16) | (unsigned __int16)(*(_WORD *)(v9 + 506) ^ v17) | (unsigned __int16)(*(_WORD *)(v9 + 508) ^ v19) | v23.i32[0] | *(_DWORD *)(v9 + 488) ^ v14 | v23.i32[1]))
          break;
        v9 = *(_QWORD *)(v9 + 704);
        if (!v9)
          goto LABEL_12;
      }
      v18 = 3;
LABEL_21:
      v31 = v9 + 48 * v18;
    }
    else
    {
LABEL_12:
      if ((_DWORD)v4 == 4)
      {
        v5 = operator new();
        v4 = 0;
        *(_DWORD *)(v5 + 8) = 19;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 374) = 0;
        *(_OWORD *)(v5 + 360) = 0u;
        *(_OWORD *)(v5 + 344) = 0u;
        *(_OWORD *)(v5 + 328) = 0u;
        *(_OWORD *)(v5 + 312) = 0u;
        *(_OWORD *)(v5 + 296) = 0u;
        *(_QWORD *)v5 = off_250401A60;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_OWORD *)(v5 + 72) = 0u;
        *(_OWORD *)(v5 + 88) = 0u;
        *(_OWORD *)(v5 + 104) = 0u;
        *(_QWORD *)(v5 + 118) = 0;
        *(_DWORD *)(v5 + 136) = 19;
        *(_QWORD *)(v5 + 152) = 0;
        *(_QWORD *)(v5 + 160) = 0;
        *(_QWORD *)(v5 + 144) = 0;
        *(_QWORD *)(v5 + 128) = off_250401A60;
        *(_OWORD *)(v5 + 168) = 0u;
        *(_OWORD *)(v5 + 184) = 0u;
        *(_OWORD *)(v5 + 200) = 0u;
        *(_OWORD *)(v5 + 216) = 0u;
        *(_OWORD *)(v5 + 232) = 0u;
        *(_QWORD *)(v5 + 246) = 0;
        *(_DWORD *)(v5 + 264) = 19;
        *(_QWORD *)(v5 + 272) = 0;
        *(_QWORD *)(v5 + 280) = 0;
        *(_QWORD *)(v5 + 288) = 0;
        *(_QWORD *)(v5 + 256) = off_250401A60;
        *(_DWORD *)(v5 + 392) = 19;
        *(_QWORD *)(v5 + 400) = 0;
        *(_QWORD *)(v5 + 408) = 0;
        *(_QWORD *)(v5 + 416) = 0;
        *(_QWORD *)(v5 + 384) = off_250401A60;
        *(_QWORD *)(v5 + 502) = 0;
        *(_OWORD *)(v5 + 488) = 0u;
        *(_OWORD *)(v5 + 472) = 0u;
        *(_OWORD *)(v5 + 456) = 0u;
        *(_OWORD *)(v5 + 440) = 0u;
        *(_OWORD *)(v5 + 424) = 0u;
        *(_OWORD *)(v5 + 538) = 0u;
        *(_OWORD *)(v5 + 512) = 0u;
        *(_OWORD *)(v5 + 528) = 0u;
        *(_OWORD *)(v5 + 586) = 0u;
        *(_OWORD *)(v5 + 560) = 0u;
        *(_OWORD *)(v5 + 576) = 0u;
        *(_OWORD *)(v5 + 634) = 0u;
        *(_OWORD *)(v5 + 608) = 0u;
        *(_OWORD *)(v5 + 624) = 0u;
        *(_OWORD *)(v5 + 682) = 0u;
        *(_OWORD *)(v5 + 656) = 0u;
        *(_OWORD *)(v5 + 672) = 0u;
        *(_QWORD *)(v5 + 704) = *(_QWORD *)(a1 + 712);
        *(_QWORD *)(a1 + 712) = v5;
        *(_DWORD *)(a1 + 720) = 0;
      }
      v24 = v5 + (v4 << 7);
      *(_DWORD *)(v24 + 8) = *(_DWORD *)(a2 + 8);
      if (v24 != a2)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v24 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      v25 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v24 + 40) = v25;
      v26 = *(_OWORD *)(a2 + 72);
      v27 = *(_OWORD *)(a2 + 88);
      v28 = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(v24 + 118) = *(_QWORD *)(a2 + 118);
      *(_OWORD *)(v24 + 104) = v28;
      *(_OWORD *)(v24 + 88) = v27;
      *(_OWORD *)(v24 + 72) = v26;
      v29 = *(_QWORD *)(a1 + 712);
      v30 = *(_DWORD *)(a1 + 720);
      *(_DWORD *)(a1 + 720) = v30 + 1;
      v31 = v29 + 48 * v30;
    }
  }
  return v31 + 512;
}

void AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>::invalidateAndErase(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(NSObject **)a1;
  if (v2)
  {
    dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);

    *(_QWORD *)a1 = 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v3 + 512);
    v4 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v3);
    MEMORY[0x234927ECC](v4, 0x10F2C40DEF1E504);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
}

_QWORD *std::array<AGX::BackgroundObjectProgramKey,3ul>::~array(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  a1[22] = off_250401A20;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  a1[11] = off_250401A20;
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  *a1 = off_250401A20;
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void AGX::Program<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::IndirectArgumentLayout,AGXA10FamilyIndirectArgumentBufferLayout>::pruneVariant(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 222;
  os_unfair_lock_lock(a1 + 222);
  v5 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::BackgroundObjectProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (*(_QWORD *)v5)
  {
    dispatch_group_wait(*(dispatch_group_t *)v5, 0xFFFFFFFFFFFFFFFFLL);

    *(_QWORD *)v5 = 0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;

  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 0;
  os_unfair_lock_unlock(v4);
}

void sub_232C79D58(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::BackgroundObjectProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v4 = *(unsigned int *)(a1 + 560);
  v5 = *(_QWORD *)(a1 + 552);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (_QWORD *)(v5 + 80);
    while ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*(int32x4_t *)(a2 + 40), *(int32x4_t *)(v7 - 5)), (int16x8_t)vceqq_s32(*(int32x4_t *)(a2 + 56), *(int32x4_t *)(v7 - 3)))))) & 1) != 0|| *(_DWORD *)(a2 + 72) != *((_DWORD *)v7 - 2)|| *(_QWORD *)(a2 + 80) != *v7)
    {
      v7 += 11;
      if (v4 == ++v6)
        goto LABEL_11;
    }
    v9 = v5 + 48 * v6;
  }
  else
  {
LABEL_11:
    v10 = *(_QWORD *)(v5 + 544);
    if (v10)
    {
      v11 = *(int32x4_t *)(a2 + 56);
      v12 = *(int32x4_t *)(a2 + 40);
      v13 = *(_DWORD *)(a2 + 72);
      v14 = 1;
      v15 = *(_QWORD *)(a2 + 80);
      while (1)
      {
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 40)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 56)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 72)&& v15 == *(_QWORD *)(v10 + 80))
        {
          v14 = 0;
          goto LABEL_38;
        }
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 128)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 144)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 160)&& v15 == *(_QWORD *)(v10 + 168))
        {
          goto LABEL_38;
        }
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 216)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 232)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 248)&& v15 == *(_QWORD *)(v10 + 256))
        {
          break;
        }
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v12, *(int32x4_t *)(v10 + 304)), (int16x8_t)vceqq_s32(v11, *(int32x4_t *)(v10 + 320)))))) & 1) == 0&& v13 == *(_DWORD *)(v10 + 336)&& v15 == *(_QWORD *)(v10 + 344))
        {
          v14 = 3;
          goto LABEL_38;
        }
        v10 = *(_QWORD *)(v10 + 544);
        if (!v10)
          goto LABEL_31;
      }
      v14 = 2;
    }
    else
    {
LABEL_31:
      if ((_DWORD)v4 == 4)
      {
        v5 = operator new();
        LODWORD(v4) = 0;
        *(_DWORD *)(v5 + 8) = 13;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)v5 = off_2504019E0;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_OWORD *)(v5 + 72) = 0u;
        *(_DWORD *)(v5 + 96) = 13;
        *(_QWORD *)(v5 + 112) = 0;
        *(_QWORD *)(v5 + 120) = 0;
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)(v5 + 88) = off_2504019E0;
        *(_OWORD *)(v5 + 128) = 0u;
        *(_OWORD *)(v5 + 144) = 0u;
        *(_OWORD *)(v5 + 160) = 0u;
        *(_DWORD *)(v5 + 184) = 13;
        *(_QWORD *)(v5 + 200) = 0;
        *(_QWORD *)(v5 + 208) = 0;
        *(_QWORD *)(v5 + 192) = 0;
        *(_QWORD *)(v5 + 176) = off_2504019E0;
        *(_OWORD *)(v5 + 248) = 0u;
        *(_OWORD *)(v5 + 232) = 0u;
        *(_OWORD *)(v5 + 216) = 0u;
        *(_DWORD *)(v5 + 272) = 13;
        *(_QWORD *)(v5 + 280) = 0;
        *(_QWORD *)(v5 + 288) = 0;
        *(_QWORD *)(v5 + 296) = 0;
        *(_QWORD *)(v5 + 264) = off_2504019E0;
        *(_OWORD *)(v5 + 426) = 0u;
        *(_OWORD *)(v5 + 400) = 0u;
        *(_OWORD *)(v5 + 416) = 0u;
        *(_OWORD *)(v5 + 448) = 0u;
        *(_OWORD *)(v5 + 464) = 0u;
        *(_OWORD *)(v5 + 474) = 0u;
        *(_OWORD *)(v5 + 496) = 0u;
        *(_OWORD *)(v5 + 512) = 0u;
        *(_OWORD *)(v5 + 522) = 0u;
        *(_OWORD *)(v5 + 378) = 0u;
        *(_OWORD *)(v5 + 352) = 0u;
        *(_OWORD *)(v5 + 368) = 0u;
        *(_OWORD *)(v5 + 320) = 0u;
        *(_OWORD *)(v5 + 336) = 0u;
        *(_OWORD *)(v5 + 304) = 0u;
        *(_QWORD *)(v5 + 544) = *(_QWORD *)(a1 + 552);
        *(_QWORD *)(a1 + 552) = v5;
        *(_DWORD *)(a1 + 560) = 0;
      }
      v18 = v5 + 88 * v4;
      *(_DWORD *)(v18 + 8) = *(_DWORD *)(a2 + 8);
      if (v18 != a2)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v18 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      v19 = v5 + 88 * v4;
      v20 = *(_OWORD *)(a2 + 40);
      v21 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v19 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(v19 + 56) = v21;
      *(_OWORD *)(v19 + 40) = v20;
      v10 = *(_QWORD *)(a1 + 552);
      v14 = *(_DWORD *)(a1 + 560);
      *(_DWORD *)(a1 + 560) = v14 + 1;
    }
LABEL_38:
    v9 = v10 + 48 * v14;
  }
  return v9 + 352;
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::purgeDevice(uint64_t a1, float a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t block;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;

  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 5632), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 5712), a2);
  AGX::PooledAllocator<16u>::shrink((os_unfair_lock_s *)(a1 + 5792), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 5936), a2);
  AGX::PooledAllocator<8u>::shrink((os_unfair_lock_s *)(a1 + 6024), a2);
  if (a2 >= 0.99)
  {
    v4 = MEMORY[0x24BDAC760];
    v5 = *(NSObject **)(a1 + 4528);
    block = MEMORY[0x24BDAC760];
    v21 = 3221225472;
    v22 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    v23 = &__block_descriptor_40_e5_v8__0l;
    v24 = a1 + 4512;
    dispatch_sync(v5, &block);
    v6 = *(NSObject **)(a1 + 4696);
    block = v4;
    v21 = 3221225472;
    v22 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    v23 = &__block_descriptor_40_e5_v8__0l;
    v24 = a1 + 4680;
    dispatch_sync(v6, &block);
    v7 = *(NSObject **)(a1 + 4864);
    block = v4;
    v21 = 3221225472;
    v22 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    v23 = &__block_descriptor_40_e5_v8__0l;
    v24 = a1 + 4848;
    dispatch_sync(v7, &block);
    v8 = *(NSObject **)(a1 + 5032);
    block = v4;
    v21 = 3221225472;
    v22 = ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke;
    v23 = &__block_descriptor_40_e5_v8__0l;
    v24 = a1 + 5016;
    dispatch_sync(v8, &block);
    v9 = *(_QWORD *)(a1 + 5488);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 72));
    *(_OWORD *)(v9 + 52) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    v10 = *(void **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 72));

    v11 = *(_QWORD *)(a1 + 5496);
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 72));
    *(_OWORD *)(v11 + 52) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    v12 = *(void **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 72));

    v13 = *(_QWORD *)(a1 + 5504);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 72));
    *(_OWORD *)(v13 + 52) = 0u;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    v14 = *(void **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 72));

    v15 = *(_QWORD *)(a1 + 6184);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 424);
      os_unfair_lock_lock((os_unfair_lock_t)(v16 + 40));
      *(_DWORD *)(v16 + 32) = 0;
      v17 = *(void **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 40));

      v18 = *(_QWORD *)(v15 + 432);
      os_unfair_lock_lock((os_unfair_lock_t)(v18 + 40));
      *(_DWORD *)(v18 + 32) = 0;
      v19 = *(id *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 40));

    }
  }
}

uint64_t ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  double v7;
  double v8;
  int8x16_t v9;
  const char *v12;
  const char *v13;
  const char *v14;
  _QWORD v15[3];
  uint64_t v16[54];
  uint64_t v17;

  if (a3)
  {
    v12 = "MTLCompilerErrorTimeout";
    v13 = "UnknownErrorCode";
    if (a3 == 2)
      v13 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v12 = v13;
    if (a3 == 1)
      v14 = "MTLCompilerErrorFatalError";
    else
      v14 = v12;
    v15[0] = 0;
    v17 = 0;
    ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, v15, &v17);
    v16[0] = a4;
    v16[1] = (uint64_t)v14;
    v16[2] = v17;
    v16[3] = v15[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v16, a2, 0, 1, 0, 0, 0, 0, v7, v8, v9, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v15, a2);
  AGX::ClearVisibilityVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ClearVisibilityVertexProgramVariant((unint64_t)v6, v5, a2, (uint64_t)v16, v15);
  *v6 = &off_250400818;
  *(_QWORD *)(v5 + 5184) = v6;
  return AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v16);
}

void sub_232C7A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C4036CDE9F4);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke_106(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  const char *v15;
  const char *v16;
  const char *v17;
  _QWORD v18[3];
  uint64_t v19[54];
  std::string v20;

  if (a3)
  {
    v15 = "MTLCompilerErrorTimeout";
    v16 = "UnknownErrorCode";
    if (a3 == 2)
      v16 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v15 = v16;
    if (a3 == 1)
      v17 = "MTLCompilerErrorFatalError";
    else
      v17 = v15;
    v20.__r_.__value_.__r.__words[0] = 0;
    v18[0] = 0;
    ProgramKey<(_AGCStreamToken)47,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 48, &v20, v18);
    v19[0] = a4;
    v19[1] = (uint64_t)v17;
    v19[2] = v18[0];
    v19[3] = v20.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)operator new();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v19, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v18, a2);
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v7, v8, (uint64_t)a2, &v20, (uint64_t)v19, 0, v18, 0, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  *v7 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v19);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize((uint64_t)v7);
  v12 = operator new();
  bzero((void *)v12, 0x8B0uLL);
  *(_QWORD *)(v12 + 792) = 0x3F80000000000001;
  *(_QWORD *)(v12 + 800) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v12 + 812) = xmmword_232D73520;
  *(_DWORD *)(v12 + 852) = 0;
  *(_QWORD *)(v12 + 828) = 0;
  *(_DWORD *)(v12 + 835) = 0;
  *(_OWORD *)(v12 + 856) = xmmword_232D73530;
  *(_QWORD *)(v12 + 872) = 3840;
  *(_QWORD *)(v12 + 880) = 0x1E3CE50800210000;
  *(_DWORD *)(v12 + 888) = 1184;
  *(_OWORD *)(v12 + 1000) = 0u;
  *(_OWORD *)(v12 + 1016) = 0u;
  *(_OWORD *)(v12 + 1032) = 0u;
  *(_QWORD *)(v12 + 1144) = 0;
  *(_QWORD *)(v12 + 1136) = 0;
  *(_BYTE *)(v12 + 1152) = 0;
  *(_OWORD *)(v12 + 1160) = 0u;
  *(_OWORD *)(v12 + 1176) = 0u;
  *(_OWORD *)(v12 + 1192) = 0u;
  *(_OWORD *)(v12 + 1205) = 0u;
  *(_QWORD *)(v12 + 1232) = 0;
  *(_QWORD *)(v12 + 1224) = 0;
  *(_BYTE *)(v12 + 1240) = 0;
  *(_OWORD *)(v12 + 1248) = 0u;
  *(_OWORD *)(v12 + 1264) = 0u;
  *(_OWORD *)(v12 + 1280) = 0u;
  *(_OWORD *)(v12 + 1293) = 0u;
  *(_QWORD *)(v12 + 1312) = 0;
  *(_QWORD *)(v12 + 1320) = 0;
  *(_BYTE *)(v12 + 1328) = 0;
  *(_OWORD *)(v12 + 1336) = 0u;
  *(_OWORD *)(v12 + 1352) = 0u;
  *(_OWORD *)(v12 + 1368) = 0u;
  *(_OWORD *)(v12 + 1381) = 0u;
  *(_QWORD *)(v12 + 1400) = 0;
  *(_QWORD *)(v12 + 1408) = 0;
  *(_BYTE *)(v12 + 1416) = 0;
  *(_OWORD *)(v12 + 1424) = 0u;
  *(_OWORD *)(v12 + 1440) = 0u;
  *(_OWORD *)(v12 + 1456) = 0u;
  *(_OWORD *)(v12 + 1469) = 0u;
  *(_QWORD *)(v12 + 1496) = 0;
  *(_QWORD *)(v12 + 1488) = 0;
  *(_BYTE *)(v12 + 1504) = 0;
  *(_DWORD *)(v12 + 992) = 0;
  *(_OWORD *)(v12 + 960) = 0u;
  *(_OWORD *)(v12 + 976) = 0u;
  *(_OWORD *)(v12 + 928) = 0u;
  *(_OWORD *)(v12 + 944) = 0u;
  *(_OWORD *)(v12 + 896) = 0u;
  *(_OWORD *)(v12 + 912) = 0u;
  *(_QWORD *)(v12 + 1125) = 0;
  *(_OWORD *)(v12 + 1096) = 0u;
  *(_OWORD *)(v12 + 1112) = 0u;
  *(_OWORD *)(v12 + 1064) = 0u;
  *(_OWORD *)(v12 + 1080) = 0u;
  *(_QWORD *)(v12 + 1656) = 0;
  *(_OWORD *)(v12 + 1624) = 0u;
  *(_OWORD *)(v12 + 1640) = 0u;
  *(_OWORD *)(v12 + 1592) = 0u;
  *(_OWORD *)(v12 + 1608) = 0u;
  *(_OWORD *)(v12 + 1560) = 0u;
  *(_OWORD *)(v12 + 1576) = 0u;
  *(_OWORD *)(v12 + 1528) = 0u;
  *(_OWORD *)(v12 + 1544) = 0u;
  *(_OWORD *)(v12 + 1512) = 0u;
  *(_DWORD *)(v12 + 1664) = 1065353216;
  *(_OWORD *)(v12 + 1688) = 0u;
  *(_OWORD *)(v12 + 1672) = 0u;
  *(_DWORD *)(v12 + 1704) = 1065353216;
  *(_OWORD *)(v12 + 1728) = 0u;
  *(_OWORD *)(v12 + 1712) = 0u;
  *(_DWORD *)(v12 + 1744) = 1065353216;
  *(_OWORD *)(v12 + 1768) = 0u;
  *(_OWORD *)(v12 + 1752) = 0u;
  *(_DWORD *)(v12 + 1784) = 1065353216;
  *(_OWORD *)(v12 + 1808) = 0u;
  *(_OWORD *)(v12 + 1792) = 0u;
  *(_DWORD *)(v12 + 1824) = 1065353216;
  *(_OWORD *)(v12 + 1832) = 0u;
  *(_OWORD *)(v12 + 1848) = 0u;
  *(_DWORD *)(v12 + 1864) = 1065353216;
  *(_QWORD *)(v12 + 1904) = 0;
  *(_OWORD *)(v12 + 1888) = 0u;
  *(_OWORD *)(v12 + 1872) = 0u;
  *(_DWORD *)(v12 + 1912) = 1065353216;
  *(_OWORD *)(v12 + 2184) = 0u;
  *(_OWORD *)(v12 + 2200) = 0u;
  *(_OWORD *)(v12 + 2152) = 0u;
  *(_OWORD *)(v12 + 2168) = 0u;
  *(_OWORD *)(v12 + 2120) = 0u;
  *(_OWORD *)(v12 + 2136) = 0u;
  *(_OWORD *)(v12 + 2088) = 0u;
  *(_OWORD *)(v12 + 2104) = 0u;
  *(_OWORD *)(v12 + 2056) = 0u;
  *(_OWORD *)(v12 + 2072) = 0u;
  *(_OWORD *)(v12 + 2024) = 0u;
  *(_OWORD *)(v12 + 2040) = 0u;
  *(_OWORD *)(v12 + 1992) = 0u;
  *(_OWORD *)(v12 + 2008) = 0u;
  *(_OWORD *)(v12 + 1960) = 0u;
  *(_OWORD *)(v12 + 1976) = 0u;
  *(_OWORD *)(v12 + 1928) = 0u;
  *(_OWORD *)(v12 + 1944) = 0u;
  *(_QWORD *)(v6 + 6840) = v12;
  *(_BYTE *)(v12 + 808) = 0;
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808), (uint64_t)v7);
}

void sub_232C7A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 65) < 0)
    operator delete(*(void **)(v7 - 88));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke_107(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  const char *v15;
  const char *v16;
  const char *v17;
  _QWORD v18[3];
  uint64_t v19[54];
  std::string v20;

  if (a3)
  {
    v15 = "MTLCompilerErrorTimeout";
    v16 = "UnknownErrorCode";
    if (a3 == 2)
      v16 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v15 = v16;
    if (a3 == 1)
      v17 = "MTLCompilerErrorFatalError";
    else
      v17 = v15;
    v20.__r_.__value_.__r.__words[0] = 0;
    v18[0] = 0;
    ProgramKey<(_AGCStreamToken)90,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 48, &v20, v18);
    v19[0] = a4;
    v19[1] = (uint64_t)v17;
    v19[2] = v18[0];
    v19[3] = v20.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)operator new();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v19, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v18, a2);
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v7, v8, (uint64_t)a2, &v20, (uint64_t)v19, 0, v18, 0, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  *v7 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v19);
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize((uint64_t)v7);
  v12 = operator new();
  bzero((void *)v12, 0x8B0uLL);
  *(_QWORD *)(v12 + 792) = 0x3F80000000000001;
  *(_QWORD *)(v12 + 800) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v12 + 812) = xmmword_232D73520;
  *(_DWORD *)(v12 + 852) = 0;
  *(_QWORD *)(v12 + 828) = 0;
  *(_DWORD *)(v12 + 835) = 0;
  *(_OWORD *)(v12 + 856) = xmmword_232D73530;
  *(_QWORD *)(v12 + 872) = 3840;
  *(_QWORD *)(v12 + 880) = 0x1E3CE50800210000;
  *(_DWORD *)(v12 + 888) = 1184;
  *(_OWORD *)(v12 + 1000) = 0u;
  *(_OWORD *)(v12 + 1016) = 0u;
  *(_OWORD *)(v12 + 1032) = 0u;
  *(_QWORD *)(v12 + 1144) = 0;
  *(_QWORD *)(v12 + 1136) = 0;
  *(_BYTE *)(v12 + 1152) = 0;
  *(_OWORD *)(v12 + 1160) = 0u;
  *(_OWORD *)(v12 + 1176) = 0u;
  *(_OWORD *)(v12 + 1192) = 0u;
  *(_OWORD *)(v12 + 1205) = 0u;
  *(_QWORD *)(v12 + 1232) = 0;
  *(_QWORD *)(v12 + 1224) = 0;
  *(_BYTE *)(v12 + 1240) = 0;
  *(_OWORD *)(v12 + 1248) = 0u;
  *(_OWORD *)(v12 + 1264) = 0u;
  *(_OWORD *)(v12 + 1280) = 0u;
  *(_OWORD *)(v12 + 1293) = 0u;
  *(_QWORD *)(v12 + 1312) = 0;
  *(_QWORD *)(v12 + 1320) = 0;
  *(_BYTE *)(v12 + 1328) = 0;
  *(_OWORD *)(v12 + 1336) = 0u;
  *(_OWORD *)(v12 + 1352) = 0u;
  *(_OWORD *)(v12 + 1368) = 0u;
  *(_OWORD *)(v12 + 1381) = 0u;
  *(_QWORD *)(v12 + 1400) = 0;
  *(_QWORD *)(v12 + 1408) = 0;
  *(_BYTE *)(v12 + 1416) = 0;
  *(_OWORD *)(v12 + 1424) = 0u;
  *(_OWORD *)(v12 + 1440) = 0u;
  *(_OWORD *)(v12 + 1456) = 0u;
  *(_OWORD *)(v12 + 1469) = 0u;
  *(_QWORD *)(v12 + 1496) = 0;
  *(_QWORD *)(v12 + 1488) = 0;
  *(_BYTE *)(v12 + 1504) = 0;
  *(_DWORD *)(v12 + 992) = 0;
  *(_OWORD *)(v12 + 960) = 0u;
  *(_OWORD *)(v12 + 976) = 0u;
  *(_OWORD *)(v12 + 928) = 0u;
  *(_OWORD *)(v12 + 944) = 0u;
  *(_OWORD *)(v12 + 896) = 0u;
  *(_OWORD *)(v12 + 912) = 0u;
  *(_QWORD *)(v12 + 1125) = 0;
  *(_OWORD *)(v12 + 1096) = 0u;
  *(_OWORD *)(v12 + 1112) = 0u;
  *(_OWORD *)(v12 + 1064) = 0u;
  *(_OWORD *)(v12 + 1080) = 0u;
  *(_QWORD *)(v12 + 1656) = 0;
  *(_OWORD *)(v12 + 1624) = 0u;
  *(_OWORD *)(v12 + 1640) = 0u;
  *(_OWORD *)(v12 + 1592) = 0u;
  *(_OWORD *)(v12 + 1608) = 0u;
  *(_OWORD *)(v12 + 1560) = 0u;
  *(_OWORD *)(v12 + 1576) = 0u;
  *(_OWORD *)(v12 + 1528) = 0u;
  *(_OWORD *)(v12 + 1544) = 0u;
  *(_OWORD *)(v12 + 1512) = 0u;
  *(_DWORD *)(v12 + 1664) = 1065353216;
  *(_OWORD *)(v12 + 1688) = 0u;
  *(_OWORD *)(v12 + 1672) = 0u;
  *(_DWORD *)(v12 + 1704) = 1065353216;
  *(_OWORD *)(v12 + 1728) = 0u;
  *(_OWORD *)(v12 + 1712) = 0u;
  *(_DWORD *)(v12 + 1744) = 1065353216;
  *(_OWORD *)(v12 + 1768) = 0u;
  *(_OWORD *)(v12 + 1752) = 0u;
  *(_DWORD *)(v12 + 1784) = 1065353216;
  *(_OWORD *)(v12 + 1808) = 0u;
  *(_OWORD *)(v12 + 1792) = 0u;
  *(_DWORD *)(v12 + 1824) = 1065353216;
  *(_OWORD *)(v12 + 1832) = 0u;
  *(_OWORD *)(v12 + 1848) = 0u;
  *(_DWORD *)(v12 + 1864) = 1065353216;
  *(_QWORD *)(v12 + 1904) = 0;
  *(_OWORD *)(v12 + 1888) = 0u;
  *(_OWORD *)(v12 + 1872) = 0u;
  *(_DWORD *)(v12 + 1912) = 1065353216;
  *(_OWORD *)(v12 + 2184) = 0u;
  *(_OWORD *)(v12 + 2200) = 0u;
  *(_OWORD *)(v12 + 2152) = 0u;
  *(_OWORD *)(v12 + 2168) = 0u;
  *(_OWORD *)(v12 + 2120) = 0u;
  *(_OWORD *)(v12 + 2136) = 0u;
  *(_OWORD *)(v12 + 2088) = 0u;
  *(_OWORD *)(v12 + 2104) = 0u;
  *(_OWORD *)(v12 + 2056) = 0u;
  *(_OWORD *)(v12 + 2072) = 0u;
  *(_OWORD *)(v12 + 2024) = 0u;
  *(_OWORD *)(v12 + 2040) = 0u;
  *(_OWORD *)(v12 + 1992) = 0u;
  *(_OWORD *)(v12 + 2008) = 0u;
  *(_OWORD *)(v12 + 1960) = 0u;
  *(_OWORD *)(v12 + 1976) = 0u;
  *(_OWORD *)(v12 + 1928) = 0u;
  *(_OWORD *)(v12 + 1944) = 0u;
  *(_QWORD *)(v6 + 6856) = v12;
  *(_BYTE *)(v12 + 808) = 0;
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(v12, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808), (uint64_t)v7);
}

void sub_232C7AB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 65) < 0)
    operator delete(*(void **)(v7 - 88));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

double ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE20compileDriverShadersEP18AGXA10FamilyDevice_block_invoke_108(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  double result;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18[54];
  uint64_t v19;
  uint64_t v20;

  if (a3)
  {
    v15 = "MTLCompilerErrorTimeout";
    v16 = "UnknownErrorCode";
    if (a3 == 2)
      v16 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v15 = v16;
    if (a3 == 1)
      v17 = "MTLCompilerErrorFatalError";
    else
      v17 = v15;
    v19 = 0;
    v20 = 0;
    ProgramKey<(_AGCStreamToken)91,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 48, &v20, &v19);
    v18[0] = a4;
    v18[1] = (uint64_t)v17;
    v18[2] = v19;
    v18[3] = v20;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = operator new();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v18, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v7, v8, (uint64_t)a2, (uint64_t)v18, 0, 0, 0);
  *(_QWORD *)v7 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v18);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v7);
  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_QWORD *)(v12 + 344) = 0;
  *(_QWORD *)(v12 + 352) = 0;
  *(_DWORD *)(v12 + 264) = 1065353216;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_DWORD *)(v12 + 304) = 1065353216;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_DWORD *)(v12 + 352) = 1065353216;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_OWORD *)(v12 + 376) = 0u;
  *(_OWORD *)(v12 + 392) = 0u;
  *(_QWORD *)(v6 + 6848) = v12;
  *(_QWORD *)(v12 + 16) = v7;
  *(_DWORD *)(v12 + 224) = *(_DWORD *)(v7 + 3248);
  result = *(double *)(v7 + 316);
  *(double *)(v12 + 160) = result;
  *(_DWORD *)(v12 + 176) = *(_DWORD *)(v7 + 352);
  return result;
}

void sub_232C7ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken91ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C7B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken91ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[6] = off_2504008F8;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  v3 = *(_BYTE **)(a2 + 64);
  v2 = *(_BYTE **)(a2 + 72);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[8] = v6;
    v5[9] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[10] = v7;
    result = memcpy(v6, v3, v4);
    v5[9] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken91ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[6] = off_2504008F8;
  v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)91,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)91,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)91,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)91,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)91,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken90ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C7B5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken90ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[6] = off_2504008B8;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  v3 = *(_BYTE **)(a2 + 64);
  v2 = *(_BYTE **)(a2 + 72);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[8] = v6;
    v5[9] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[10] = v7;
    result = memcpy(v6, v3, v4);
    v5[9] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken90ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[6] = off_2504008B8;
  v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)90,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)90,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)90,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)90,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)90,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken47ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C7BAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken47ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[6] = off_250400878;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  v3 = *(_BYTE **)(a2 + 64);
  v2 = *(_BYTE **)(a2 + 72);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[8] = v6;
    v5[9] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[10] = v7;
    result = memcpy(v6, v3, v4);
    v5[9] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken47ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[6] = off_250400878;
  v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)47,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)47,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)47,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)47,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)47,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken28ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C7C004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken28ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250400838;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken28ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250400838;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

void AGX::G9::ClearVisibilityVertexProgramVariant::~ClearVisibilityVertexProgramVariant(AGX::G9::ClearVisibilityVertexProgramVariant *this)
{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  *(_QWORD *)this = &off_250401980;
  if (*((_QWORD *)this + 436))
  {
    v2 = (_OWORD *)((char *)this + 3464);
    v3 = *((_QWORD *)this + 437);
    v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 3464;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 3489) = 0u;
    *v2 = 0u;
    *(_OWORD *)((char *)this + 3480) = 0u;
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState((uint64_t)this + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

{
  _OWORD *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  *(_QWORD *)this = &off_250401980;
  if (*((_QWORD *)this + 436))
  {
    v2 = (_OWORD *)((char *)this + 3464);
    v3 = *((_QWORD *)this + 437);
    v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = (char *)this + 3464;
    dispatch_sync(v4, v5);
    *(_OWORD *)((char *)this + 3489) = 0u;
    *v2 = 0u;
    *(_OWORD *)((char *)this + 3480) = 0u;
  }
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::~ProgramVariantPDSState((uint64_t)this + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ClearVisibilityArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)28,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Device(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t n;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ii;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t jj;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t kk;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t mm;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  IONotificationPort *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  BOOL v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  void *v174;
  NSObject *v175;
  void **v176;
  uint64_t v177;
  size_t v178;
  void *v179;
  uint64_t v180;
  size_t v181;
  void **v182;
  void *v183;
  uint64_t v184;
  size_t v185;
  void **v186;
  void *v187;
  uint64_t v188;
  size_t v189;
  void **v190;
  void *v191;
  uint64_t v192;
  size_t v193;
  void **v194;
  void *v195;
  uint64_t v196;
  size_t v197;
  void **v198;
  void *v199;
  void *v200;
  NSObject *v201;
  NSObject *v202;
  NSObject *v203;
  NSObject *v204;
  uint64_t v206;
  std::string __p;
  uint64_t v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 6952))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6948));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 6960));
    dispatch_release(*(dispatch_object_t *)(a1 + 6960));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 6968));
    dispatch_release(*(dispatch_object_t *)(a1 + 6968));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 6984));
    dispatch_release(*(dispatch_object_t *)(a1 + 6984));
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 6992));
    dispatch_release(*(dispatch_object_t *)(a1 + 6992));
    dispatch_sync(*(dispatch_queue_t *)(a1 + 6952), &__block_literal_global_23);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6948));
    dispatch_release(*(dispatch_object_t *)(a1 + 6952));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6632));
  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(v2 + 848);
    if (v3)
    {
      v4 = (unint64_t)*(unsigned int *)(v2 + 856) << 32;
      while (1)
      {
        while (1)
        {
          v5 = *(NSObject **)(v3 + 24 * v4 + 144);
          if (v5)
            dispatch_release(v5);
          v6 = (v4 + 1);
          if (v6 < HIDWORD(v4))
            break;
          v3 = *(_QWORD *)(v3 + 224);
          v4 = 0x400000000;
          if (!v3)
            goto LABEL_12;
        }
        v4 = v4 & 0xFFFFFFFF00000000 | v6;
        if (!v3)
        {
LABEL_12:
          if (!(_DWORD)v4)
            break;
        }
      }
    }
    v7 = v2 + 616;
    for (i = 896; i != 1144; i += 8)
    {
      v9 = *(_QWORD *)(v2 + i);
      if (v9)
      {
        if (*(char *)(v9 + 199) < 0)
          operator delete(*(void **)(v9 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v9 + 24));
        MEMORY[0x234927ECC](v9, 0x1032C40E5532501);
      }
    }
    v10 = *(_QWORD *)(v2 + 848);
    if (v10 != v7)
    {
      do
      {
        v11 = *(_QWORD *)(v10 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v2 + 848) = v11;
        v10 = v11;
      }
      while (v11 != v7);
    }
    v12 = *(_QWORD *)(v2 + 552);
    if (v12 != v2)
    {
      do
      {
        v13 = *(_QWORD *)(v12 + 544);
        v14 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::BackgroundObjectProgramVariant>,4u>::Chunk::~Chunk(v12);
        MEMORY[0x234927ECC](v14, 0x10B0C40C7763737);
        *(_QWORD *)(v2 + 552) = v13;
        v12 = v13;
      }
      while (v13 != v2);
    }
    v15 = *(NSObject **)(v2 + 568);
    if (v15)
      dispatch_release(v15);
    v16 = *(_QWORD *)(v2 + 576);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);

    v17 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::BackgroundObjectProgramVariant>,4u>::Chunk::~Chunk(v2);
    MEMORY[0x234927ECC](v17, 0x10F0C4056FB48F9);
  }
  *(_QWORD *)a1 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6632));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6636));
  v18 = *(_QWORD *)(a1 + 8);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 1008);
    if (v19)
    {
      v20 = (unint64_t)*(unsigned int *)(v18 + 1016) << 32;
      while (1)
      {
        while (1)
        {
          v21 = *(NSObject **)(v19 + 24 * v20 + 144);
          if (v21)
            dispatch_release(v21);
          v22 = (v20 + 1);
          if (v22 < HIDWORD(v20))
            break;
          v19 = *(_QWORD *)(v19 + 224);
          v20 = 0x400000000;
          if (!v19)
            goto LABEL_37;
        }
        v20 = v20 & 0xFFFFFFFF00000000 | v22;
        if (!v19)
        {
LABEL_37:
          if (!(_DWORD)v20)
            break;
        }
      }
    }
    v23 = v18 + 776;
    for (j = 1056; j != 1304; j += 8)
    {
      v25 = *(_QWORD *)(v18 + j);
      if (v25)
      {
        if (*(char *)(v25 + 199) < 0)
          operator delete(*(void **)(v25 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v25 + 24));
        MEMORY[0x234927ECC](v25, 0x1032C40E5532501);
      }
    }
    v26 = *(_QWORD *)(v18 + 1008);
    if (v26 != v23)
    {
      do
      {
        v27 = *(_QWORD *)(v26 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v18 + 1008) = v27;
        v26 = v27;
      }
      while (v27 != v23);
    }
    v28 = *(_QWORD *)(v18 + 712);
    if (v28 != v18)
    {
      do
      {
        v29 = *(_QWORD *)(v28 + 704);
        v30 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::Chunk::~Chunk(v28);
        MEMORY[0x234927ECC](v30, 0x10B0C40830DFB6ALL);
        *(_QWORD *)(v18 + 712) = v29;
        v28 = v29;
      }
      while (v29 != v18);
    }
    v31 = *(NSObject **)(v18 + 728);
    if (v31)
      dispatch_release(v31);
    v32 = *(_QWORD *)(v18 + 736);
    if (v32)
    {
      AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v32 + 512);
      v33 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v32);
      MEMORY[0x234927ECC](v33, 0x10F2C40DEF1E504);
    }

    v34 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::Chunk::~Chunk(v18);
    MEMORY[0x234927ECC](v34, 0x10F0C401B8EDA7ALL);
  }
  *(_QWORD *)(a1 + 8) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6636));
  v35 = *(_QWORD *)(a1 + 64);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 1008);
    if (v36)
    {
      v37 = (unint64_t)*(unsigned int *)(v35 + 1016) << 32;
      while (1)
      {
        while (1)
        {
          v38 = *(NSObject **)(v36 + 24 * v37 + 144);
          if (v38)
            dispatch_release(v38);
          v39 = (v37 + 1);
          if (v39 < HIDWORD(v37))
            break;
          v36 = *(_QWORD *)(v36 + 224);
          v37 = 0x400000000;
          if (!v36)
            goto LABEL_62;
        }
        v37 = v37 & 0xFFFFFFFF00000000 | v39;
        if (!v36)
        {
LABEL_62:
          if (!(_DWORD)v37)
            break;
        }
      }
    }
    v40 = v35 + 776;
    for (k = 1056; k != 1304; k += 8)
    {
      v42 = *(_QWORD *)(v35 + k);
      if (v42)
      {
        if (*(char *)(v42 + 199) < 0)
          operator delete(*(void **)(v42 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v42 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v42 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v42 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v42 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v42 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v42 + 24));
        MEMORY[0x234927ECC](v42, 0x1032C40E5532501);
      }
    }
    v43 = *(_QWORD *)(v35 + 1008);
    if (v43 != v40)
    {
      do
      {
        v44 = *(_QWORD *)(v43 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v35 + 1008) = v44;
        v43 = v44;
      }
      while (v44 != v40);
    }
    v45 = *(_QWORD *)(v35 + 712);
    if (v45 != v35)
    {
      do
      {
        v46 = *(_QWORD *)(v45 + 704);
        v47 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::SWEndOfTileProgramVariant>,4u>::Chunk::~Chunk(v45);
        MEMORY[0x234927ECC](v47, 0x10B0C40830DFB6ALL);
        *(_QWORD *)(v35 + 712) = v46;
        v45 = v46;
      }
      while (v46 != v35);
    }
    v48 = *(NSObject **)(v35 + 728);
    if (v48)
      dispatch_release(v48);
    v49 = *(_QWORD *)(v35 + 736);
    if (v49)
    {
      AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(v49 + 512);
      v50 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v49);
      MEMORY[0x234927ECC](v50, 0x10F2C4086E28A44);
    }

    v51 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::SWEndOfTileProgramVariant>,4u>::Chunk::~Chunk(v35);
    MEMORY[0x234927ECC](v51, 0x10F0C401B8EDA7ALL);
  }
  *(_QWORD *)(a1 + 64) = 0;
  v52 = *(_QWORD *)(a1 + 16);
  if (v52)
  {
    v53 = *(_QWORD *)(v52 + 848);
    if (v53)
    {
      v54 = (unint64_t)*(unsigned int *)(v52 + 856) << 32;
      while (1)
      {
        while (1)
        {
          v55 = *(NSObject **)(v53 + 24 * v54 + 144);
          if (v55)
            dispatch_release(v55);
          v56 = (v54 + 1);
          if (v56 < HIDWORD(v54))
            break;
          v53 = *(_QWORD *)(v53 + 224);
          v54 = 0x400000000;
          if (!v53)
            goto LABEL_87;
        }
        v54 = v54 & 0xFFFFFFFF00000000 | v56;
        if (!v53)
        {
LABEL_87:
          if (!(_DWORD)v54)
            break;
        }
      }
    }
    v57 = v52 + 616;
    for (m = 896; m != 1144; m += 8)
    {
      v59 = *(_QWORD *)(v52 + m);
      if (v59)
      {
        if (*(char *)(v59 + 199) < 0)
          operator delete(*(void **)(v59 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v59 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v59 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v59 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v59 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v59 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v59 + 24));
        MEMORY[0x234927ECC](v59, 0x1032C40E5532501);
      }
    }
    v60 = *(_QWORD *)(v52 + 848);
    if (v60 != v57)
    {
      do
      {
        v61 = *(_QWORD *)(v60 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v52 + 848) = v61;
        v60 = v61;
      }
      while (v61 != v57);
    }
    v62 = *(_QWORD *)(v52 + 552);
    if (v62 != v52)
    {
      do
      {
        v63 = *(_QWORD *)(v62 + 544);
        v64 = VectorMap<AGX::BlitFragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitFragmentProgramVariant>,4u>::Chunk::~Chunk(v62);
        MEMORY[0x234927ECC](v64, 0x10B0C40CE4C6A1ELL);
        *(_QWORD *)(v52 + 552) = v63;
        v62 = v63;
      }
      while (v63 != v52);
    }
    v65 = *(NSObject **)(v52 + 568);
    if (v65)
      dispatch_release(v65);
    v66 = *(_QWORD *)(v52 + 576);
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);

    v67 = VectorMap<AGX::BlitFragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitFragmentProgramVariant>,4u>::Chunk::~Chunk(v52);
    MEMORY[0x234927ECC](v67, 0x10F0C4070EA1FA1);
  }
  *(_QWORD *)(a1 + 16) = 0;
  v68 = *(_QWORD *)(a1 + 24);
  if (v68)
  {
    v69 = *(_QWORD *)(v68 + 688);
    if (v69)
    {
      v70 = (unint64_t)*(unsigned int *)(v68 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v71 = *(NSObject **)(v69 + 24 * v70 + 144);
          if (v71)
            dispatch_release(v71);
          v72 = (v70 + 1);
          if (v72 < HIDWORD(v70))
            break;
          v69 = *(_QWORD *)(v69 + 224);
          v70 = 0x400000000;
          if (!v69)
            goto LABEL_112;
        }
        v70 = v70 & 0xFFFFFFFF00000000 | v72;
        if (!v69)
        {
LABEL_112:
          if (!(_DWORD)v70)
            break;
        }
      }
    }
    v73 = v68 + 456;
    for (n = 736; n != 984; n += 8)
    {
      v75 = *(_QWORD *)(v68 + n);
      if (v75)
      {
        if (*(char *)(v75 + 199) < 0)
          operator delete(*(void **)(v75 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v75 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v75 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v75 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v75 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v75 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v75 + 24));
        MEMORY[0x234927ECC](v75, 0x1032C40E5532501);
      }
    }
    v76 = *(_QWORD *)(v68 + 688);
    if (v76 != v73)
    {
      do
      {
        v77 = *(_QWORD *)(v76 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v68 + 688) = v77;
        v76 = v77;
      }
      while (v77 != v73);
    }
    v78 = *(_QWORD *)(v68 + 392);
    if (v78 != v68)
    {
      do
      {
        v79 = *(_QWORD *)(v78 + 384);
        v80 = VectorMap<AGX::BlitVertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitVertexProgramVariant>,4u>::Chunk::~Chunk(v78);
        MEMORY[0x234927ECC](v80, 0x10B0C407B6AF669);
        *(_QWORD *)(v68 + 392) = v79;
        v78 = v79;
      }
      while (v79 != v68);
    }
    v81 = *(NSObject **)(v68 + 408);
    if (v81)
      dispatch_release(v81);
    v82 = *(_QWORD *)(v68 + 416);
    if (v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);

    v83 = VectorMap<AGX::BlitVertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitVertexProgramVariant>,4u>::Chunk::~Chunk(v68);
    MEMORY[0x234927ECC](v83, 0x10F0C4034BAE5F3);
  }
  *(_QWORD *)(a1 + 24) = 0;
  v84 = *(_QWORD *)(a1 + 32);
  if (v84)
  {
    v85 = *(_QWORD *)(v84 + 848);
    if (v85)
    {
      v86 = (unint64_t)*(unsigned int *)(v84 + 856) << 32;
      while (1)
      {
        while (1)
        {
          v87 = *(NSObject **)(v85 + 24 * v86 + 144);
          if (v87)
            dispatch_release(v87);
          v88 = (v86 + 1);
          if (v88 < HIDWORD(v86))
            break;
          v85 = *(_QWORD *)(v85 + 224);
          v86 = 0x400000000;
          if (!v85)
            goto LABEL_137;
        }
        v86 = v86 & 0xFFFFFFFF00000000 | v88;
        if (!v85)
        {
LABEL_137:
          if (!(_DWORD)v86)
            break;
        }
      }
    }
    v89 = v84 + 616;
    for (ii = 896; ii != 1144; ii += 8)
    {
      v91 = *(_QWORD *)(v84 + ii);
      if (v91)
      {
        if (*(char *)(v91 + 199) < 0)
          operator delete(*(void **)(v91 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v91 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v91 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v91 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v91 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v91 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v91 + 24));
        MEMORY[0x234927ECC](v91, 0x1032C40E5532501);
      }
    }
    v92 = *(_QWORD *)(v84 + 848);
    if (v92 != v89)
    {
      do
      {
        v93 = *(_QWORD *)(v92 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v84 + 848) = v93;
        v92 = v93;
      }
      while (v93 != v89);
    }
    v94 = *(_QWORD *)(v84 + 552);
    if (v94 != v84)
    {
      do
      {
        v95 = *(_QWORD *)(v94 + 544);
        v96 = VectorMap<AGX::BlitComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitComputeProgramVariant>,4u>::Chunk::~Chunk(v94);
        MEMORY[0x234927ECC](v96, 0x10B0C40CE4C6A1ELL);
        *(_QWORD *)(v84 + 552) = v95;
        v94 = v95;
      }
      while (v95 != v84);
    }
    v97 = *(NSObject **)(v84 + 568);
    if (v97)
      dispatch_release(v97);
    v98 = *(_QWORD *)(v84 + 576);
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);

    v99 = VectorMap<AGX::BlitComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitComputeProgramVariant>,4u>::Chunk::~Chunk(v84);
    MEMORY[0x234927ECC](v99, 0x10F0C4070EA1FA1);
  }
  *(_QWORD *)(a1 + 32) = 0;
  v100 = *(_QWORD *)(a1 + 4432);
  if (v100)
  {
    v101 = *(_QWORD *)(v100 + 688);
    if (v101)
    {
      v102 = (unint64_t)*(unsigned int *)(v100 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v103 = *(NSObject **)(v101 + 24 * v102 + 144);
          if (v103)
            dispatch_release(v103);
          v104 = (v102 + 1);
          if (v104 < HIDWORD(v102))
            break;
          v101 = *(_QWORD *)(v101 + 224);
          v102 = 0x400000000;
          if (!v101)
            goto LABEL_162;
        }
        v102 = v102 & 0xFFFFFFFF00000000 | v104;
        if (!v101)
        {
LABEL_162:
          if (!(_DWORD)v102)
            break;
        }
      }
    }
    v105 = v100 + 456;
    for (jj = 736; jj != 984; jj += 8)
    {
      v107 = *(_QWORD *)(v100 + jj);
      if (v107)
      {
        if (*(char *)(v107 + 199) < 0)
          operator delete(*(void **)(v107 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v107 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v107 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v107 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v107 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v107 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v107 + 24));
        MEMORY[0x234927ECC](v107, 0x1032C40E5532501);
      }
    }
    v108 = *(_QWORD *)(v100 + 688);
    if (v108 != v105)
    {
      do
      {
        v109 = *(_QWORD *)(v108 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v100 + 688) = v109;
        v108 = v109;
      }
      while (v109 != v105);
    }
    v110 = *(_QWORD *)(v100 + 392);
    if (v110 != v100)
    {
      do
      {
        v111 = *(_QWORD *)(v110 + 384);
        v112 = VectorMap<AGX::ComputeControlFlowPredicateProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::Chunk::~Chunk(v110);
        MEMORY[0x234927ECC](v112, 0x10B0C407B6AF669);
        *(_QWORD *)(v100 + 392) = v111;
        v110 = v111;
      }
      while (v111 != v100);
    }
    v113 = *(NSObject **)(v100 + 408);
    if (v113)
      dispatch_release(v113);
    v114 = *(_QWORD *)(v100 + 416);
    if (v114)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);

    v115 = VectorMap<AGX::ComputeControlFlowPredicateProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::Chunk::~Chunk(v100);
    MEMORY[0x234927ECC](v115, 0x10F0C4034BAE5F3);
  }
  *(_QWORD *)(a1 + 4432) = 0;
  v116 = *(_QWORD *)(a1 + 5184);
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  *(_QWORD *)(a1 + 5184) = 0;
  v117 = *(_QWORD *)(a1 + 4440);
  if (v117)
  {
    v118 = *(_QWORD *)(v117 + 688);
    if (v118)
    {
      v119 = (unint64_t)*(unsigned int *)(v117 + 696) << 32;
      while (1)
      {
        while (1)
        {
          v120 = *(NSObject **)(v118 + 24 * v119 + 144);
          if (v120)
            dispatch_release(v120);
          v121 = (v119 + 1);
          if (v121 < HIDWORD(v119))
            break;
          v118 = *(_QWORD *)(v118 + 224);
          v119 = 0x400000000;
          if (!v118)
            goto LABEL_189;
        }
        v119 = v119 & 0xFFFFFFFF00000000 | v121;
        if (!v118)
        {
LABEL_189:
          if (!(_DWORD)v119)
            break;
        }
      }
    }
    v122 = v117 + 456;
    for (kk = 736; kk != 984; kk += 8)
    {
      v124 = *(_QWORD *)(v117 + kk);
      if (v124)
      {
        if (*(char *)(v124 + 199) < 0)
          operator delete(*(void **)(v124 + 176));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v124 + 144));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v124 + 120));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v124 + 96));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v124 + 72));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v124 + 48));
        std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v124 + 24));
        MEMORY[0x234927ECC](v124, 0x1032C40E5532501);
      }
    }
    v125 = *(_QWORD *)(v117 + 688);
    if (v125 != v122)
    {
      do
      {
        v126 = *(_QWORD *)(v125 + 224);
        MEMORY[0x234927ECC]();
        *(_QWORD *)(v117 + 688) = v126;
        v125 = v126;
      }
      while (v126 != v122);
    }
    v127 = *(_QWORD *)(v117 + 392);
    if (v127 != v117)
    {
      do
      {
        v128 = *(_QWORD *)(v127 + 384);
        v129 = VectorMap<AGX::TileDispatchVertexProgramKey,AGX::ProgramVariantEntry<AGX::DummyTileDispatchVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>>,4u>::Chunk::~Chunk(v127);
        MEMORY[0x234927ECC](v129, 0x10B0C407B6AF669);
        *(_QWORD *)(v117 + 392) = v128;
        v127 = v128;
      }
      while (v128 != v117);
    }
    v130 = *(NSObject **)(v117 + 408);
    if (v130)
      dispatch_release(v130);
    v131 = *(_QWORD *)(v117 + 416);
    if (v131)
      MEMORY[0x234927ECC](v131, 0xC400A2AC0F1);

    v132 = VectorMap<AGX::TileDispatchVertexProgramKey,AGX::ProgramVariantEntry<AGX::DummyTileDispatchVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>>,4u>::Chunk::~Chunk(v117);
    MEMORY[0x234927ECC](v132, 0x10F0C4034BAE5F3);
  }
  *(_QWORD *)(a1 + 4440) = 0;
  for (mm = 80; mm != 2256; mm += 8)
  {
    v134 = (uint64_t *)atomic_load((unint64_t *)(a1 + mm));
    if (v134)
    {
      v135 = AGX::ComputePipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~ComputePipeline(v134);
      MEMORY[0x234927ECC](v135, 0x10B0C4013733171);
    }
    atomic_store(0, (unint64_t *)(a1 + mm));
  }
  v136 = *(_QWORD *)(a1 + 4448);
  if (v136)
    MEMORY[0x234927ECC](v136, 0xC400A2AC0F1);
  *(_QWORD *)(a1 + 4448) = 0;
  v137 = *(_QWORD *)(a1 + 5472);
  if (v137)
  {
    dispatch_release(*(dispatch_object_t *)(v137 + 16));
    MEMORY[0x234927ECC](v137, 0x10A0C4025E0BC92);
  }
  *(_QWORD *)(a1 + 5472) = 0;
  v138 = *(_QWORD *)(a1 + 5480);
  if (v138)
    MEMORY[0x234927ECC](v138, 0xC400A2AC0F1);
  *(_QWORD *)(a1 + 5480) = 0;
  v139 = *(id **)(a1 + 5464);
  if (v139)
  {

    *v139 = 0;
    v139[1] = 0;

    v139[2] = 0;
    MEMORY[0x234927ECC](v139, 0x80C40D6874129);
  }
  *(_QWORD *)(a1 + 5464) = 0;
  v140 = *(_QWORD *)(a1 + 5488);
  if (v140)
  {

    *(_QWORD *)(v140 + 8) = 0;
    MEMORY[0x234927ECC](v140, 0x10A0C40EB7D2DA3);
  }
  *(_QWORD *)(a1 + 5488) = 0;
  v141 = *(_QWORD *)(a1 + 5496);
  if (v141)
  {

    *(_QWORD *)(v141 + 8) = 0;
    MEMORY[0x234927ECC](v141, 0x10A0C40EB7D2DA3);
  }
  *(_QWORD *)(a1 + 5496) = 0;
  v142 = *(_QWORD *)(a1 + 5504);
  if (v142)
  {

    *(_QWORD *)(v142 + 8) = 0;
    MEMORY[0x234927ECC](v142, 0x10A0C40EB7D2DA3);
  }
  *(_QWORD *)(a1 + 5504) = 0;
  v143 = *(_QWORD *)(a1 + 5512);
  if (v143)
  {

    *(_QWORD *)(v143 + 8) = 0;
    MEMORY[0x234927ECC](v143, 0x10A0C4023802154);
  }
  *(_QWORD *)(a1 + 5512) = 0;
  if (*(_BYTE *)(a1 + 4465))
  {
    v144 = *(_QWORD *)(a1 + 6568);
    if (v144)
    {

      *(_QWORD *)(v144 + 8) = 0;
      MEMORY[0x234927ECC](v144, 0x10A0C40DDEE28D5);
    }
    *(_QWORD *)(a1 + 6568) = 0;
  }
  if (*(_BYTE *)(a1 + 4466))
  {
    v145 = *(_QWORD *)(a1 + 6608);
    if (v145)
    {

      *(_QWORD *)(v145 + 8) = 0;
      MEMORY[0x234927ECC](v145, 0x10A0C40DDEE28D5);
    }
    *(_QWORD *)(a1 + 6608) = 0;
  }
  v146 = *(_QWORD *)(a1 + 6312);
  if (v146)
    MEMORY[0x234927ECC](v146, 0x1020C40A8BAD216);
  *(_QWORD *)(a1 + 6312) = 0;
  v147 = *(_QWORD *)(a1 + 6320);
  if (v147)
    MEMORY[0x234927ECC](v147, 0x1020C40A8BAD216);
  *(_QWORD *)(a1 + 6320) = 0;
  v148 = *(_QWORD *)(a1 + 6328);
  if (v148)
    MEMORY[0x234927ECC](v148, 0x1020C40A8BAD216);
  *(_QWORD *)(a1 + 6328) = 0;
  v149 = *(uint64_t **)(a1 + 6840);
  if (v149)
  {
    v150 = v149[1];
    if (!v150
      || ((*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v149[1]), (v149 = *(uint64_t **)(a1 + 6840)) != 0))
    {
      v151 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline(v149);
      MEMORY[0x234927ECC](v151, 0x10F0C40BAA3AEAALL);
    }
  }
  *(_QWORD *)(a1 + 6840) = 0;
  v152 = *(uint64_t **)(a1 + 6856);
  if (v152)
  {
    v153 = v152[1];
    if (!v153
      || ((*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v152[1]), (v152 = *(uint64_t **)(a1 + 6856)) != 0))
    {
      v154 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline(v152);
      MEMORY[0x234927ECC](v154, 0x10F0C40BAA3AEAALL);
    }
  }
  *(_QWORD *)(a1 + 6856) = 0;
  v155 = *(uint64_t **)(a1 + 6848);
  if (v155)
  {
    v156 = v155[2];
    if (!v156
      || ((*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v155[2]), (v155 = *(uint64_t **)(a1 + 6848)) != 0))
    {
      v157 = AGX::ComputePipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~ComputePipeline(v155);
      MEMORY[0x234927ECC](v157, 0x10B0C4013733171);
    }
  }
  *(_QWORD *)(a1 + 6848) = 0;
  v158 = *(_QWORD *)(a1 + 6184);
  if (v158)
  {
    v159 = AGX::DeviceSWTessellationState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~DeviceSWTessellationState(v158);
    MEMORY[0x234927ECC](v159, 0xA0C40088E2AA8);
  }
  v160 = *(IONotificationPort **)(a1 + 6624);
  if (v160)
    IONotificationPortDestroy(v160);
  v161 = *(_QWORD **)(a1 + 6424);
  if (v161 != (_QWORD *)(a1 + 6432))
  {
    do
    {
      v206 = v161[4];
      if (*((char *)v161 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v161[5], v161[6]);
      else
        __p = *(std::string *)(v161 + 5);

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v162 = (_QWORD *)v161[1];
        if (v162)
        {
          do
          {
LABEL_265:
            v163 = v162;
            v162 = (_QWORD *)*v162;
          }
          while (v162);
          goto LABEL_257;
        }
      }
      else
      {
        v162 = (_QWORD *)v161[1];
        if (v162)
          goto LABEL_265;
      }
      do
      {
        v163 = (_QWORD *)v161[2];
        v164 = *v163 == (_QWORD)v161;
        v161 = v163;
      }
      while (!v164);
LABEL_257:
      v161 = v163;
    }
    while (v163 != (_QWORD *)(a1 + 6432));
  }

  v165 = (void *)atomic_load((unint64_t *)(a1 + 6808));
  v166 = (void *)atomic_load((unint64_t *)(a1 + 6816));

  v167 = MEMORY[0x24BDAC760];
  {
    v168 = *(_QWORD *)(a1 + 6920);
    v206 = MEMORY[0x24BDAC760];
    __p.__r_.__value_.__r.__words[0] = 0x40000000;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX35agxaSignpostDeregisterForEnablementEU13block_pointerFvbE_block_invoke;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_250403208;
    v208 = v168;
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    LOWORD(v206) = 0;
    _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: signpost enablement notifications queue is uninitialized", (uint8_t *)&v206, 2u);
  }
  _Block_release(*(const void **)(a1 + 6920));
  v169 = *(uint64_t **)(a1 + 6928);
  if (v169)
  {
    v170 = AGX::ComputePipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~ComputePipeline(v169);
    MEMORY[0x234927ECC](v170, 0x10B0C4013733171);
  }
  *(_QWORD *)(a1 + 6928) = 0;

  *(_QWORD *)(a1 + 6240) = 0;
  v171 = *(_QWORD **)(a1 + 6896);
  if (v171)
  {
    do
    {
      v172 = (_QWORD *)*v171;
      operator delete(v171);
      v171 = v172;
    }
    while (v172);
  }
  v173 = *(void **)(a1 + 6880);
  *(_QWORD *)(a1 + 6880) = 0;
  if (v173)
    operator delete(v173);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 6592));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 6552));
  std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>>>::destroy(*(char **)(a1 + 6520));
  v174 = *(void **)(a1 + 6480);
  if (v174)
  {
    *(_QWORD *)(a1 + 6488) = v174;
    operator delete(v174);
  }
  std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>>>::destroy(*(char **)(a1 + 6464));
  std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen1,std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen1>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>>>::destroy(*(char **)(a1 + 6432));
  v175 = *(NSObject **)(a1 + 6208);
  v206 = v167;
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX14FenceGroupPoolD2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  v208 = a1 + 6192;
  v176 = (void **)&v206;
  dispatch_sync(v175, &v206);
  dispatch_release(*(dispatch_object_t *)(a1 + 6208));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6116));
  v177 = *(unsigned int *)(a1 + 6112);
  if ((_DWORD)v177)
  {
    if (v177 <= 7)
      v178 = 64 - 8 * v177;
    else
      v178 = 0;
    bzero(&v206 + v177, v178);
    memcpy(&v206, (const void *)(a1 + 6120), 8 * v177);
    *(_DWORD *)(a1 + 6112) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6116));
    do
    {
      v179 = *v176++;
      free(v179);
      --v177;
    }
    while (v177);
  }
  else
  {
    *(_DWORD *)(a1 + 6112) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6116));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6036));
  v180 = *(unsigned int *)(a1 + 6032);
  if ((_DWORD)v180)
  {
    if (v180 <= 7)
      v181 = 64 - 8 * v180;
    else
      v181 = 0;
    v182 = (void **)&v206;
    bzero(&v206 + v180, v181);
    memcpy(&v206, (const void *)(a1 + 6040), 8 * v180);
    *(_DWORD *)(a1 + 6032) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6036));
    do
    {
      v183 = *v182++;
      free(v183);
      --v180;
    }
    while (v180);
  }
  else
  {
    *(_DWORD *)(a1 + 6032) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6036));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 5948));
  v184 = *(unsigned int *)(a1 + 5944);
  if ((_DWORD)v184)
  {
    if (v184 <= 7)
      v185 = 64 - 8 * v184;
    else
      v185 = 0;
    v186 = (void **)&v206;
    bzero(&v206 + v184, v185);
    memcpy(&v206, (const void *)(a1 + 5952), 8 * v184);
    *(_DWORD *)(a1 + 5944) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5948));
    do
    {
      v187 = *v186++;
      free(v187);
      --v184;
    }
    while (v184);
  }
  else
  {
    *(_DWORD *)(a1 + 5944) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5948));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 5804));
  v188 = *(unsigned int *)(a1 + 5800);
  if ((_DWORD)v188)
  {
    if (v188 <= 0xF)
      v189 = 128 - 8 * v188;
    else
      v189 = 0;
    v190 = (void **)&v206;
    bzero(&v206 + v188, v189);
    memcpy(&v206, (const void *)(a1 + 5808), 8 * v188);
    *(_DWORD *)(a1 + 5800) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5804));
    do
    {
      v191 = *v190++;
      free(v191);
      --v188;
    }
    while (v188);
  }
  else
  {
    *(_DWORD *)(a1 + 5800) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5804));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 5724));
  v192 = *(unsigned int *)(a1 + 5720);
  if ((_DWORD)v192)
  {
    if (v192 <= 7)
      v193 = 64 - 8 * v192;
    else
      v193 = 0;
    v194 = (void **)&v206;
    bzero(&v206 + v192, v193);
    memcpy(&v206, (const void *)(a1 + 5728), 8 * v192);
    *(_DWORD *)(a1 + 5720) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5724));
    do
    {
      v195 = *v194++;
      free(v195);
      --v192;
    }
    while (v192);
  }
  else
  {
    *(_DWORD *)(a1 + 5720) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5724));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 5644));
  v196 = *(unsigned int *)(a1 + 5640);
  if (!(_DWORD)v196)
  {
    *(_DWORD *)(a1 + 5640) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5644));
    v200 = *(void **)(a1 + 5608);
    if (!v200)
      goto LABEL_330;
    goto LABEL_329;
  }
  if (v196 <= 7)
    v197 = 64 - 8 * v196;
  else
    v197 = 0;
  v198 = (void **)&v206;
  bzero(&v206 + v196, v197);
  memcpy(&v206, (const void *)(a1 + 5648), 8 * v196);
  *(_DWORD *)(a1 + 5640) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 5644));
  do
  {
    v199 = *v198++;
    free(v199);
    --v196;
  }
  while (v196);
  v200 = *(void **)(a1 + 5608);
  if (v200)
  {
LABEL_329:
    *(_QWORD *)(a1 + 5616) = v200;
    operator delete(v200);
  }
LABEL_330:

  AGX::G9::DevicePDSStateLoader::~DevicePDSStateLoader((AGX::G9::DevicePDSStateLoader *)(a1 + 5328));
  v201 = *(NSObject **)(a1 + 5032);
  v206 = v167;
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  v208 = a1 + 5016;
  dispatch_sync(v201, &v206);
  dispatch_release(*(dispatch_object_t *)(a1 + 5032));
  v202 = *(NSObject **)(a1 + 4864);
  v206 = v167;
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  v208 = a1 + 4848;
  dispatch_sync(v202, &v206);
  dispatch_release(*(dispatch_object_t *)(a1 + 4864));
  v203 = *(NSObject **)(a1 + 4696);
  v206 = v167;
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  v208 = a1 + 4680;
  dispatch_sync(v203, &v206);
  dispatch_release(*(dispatch_object_t *)(a1 + 4696));
  v204 = *(NSObject **)(a1 + 4528);
  v206 = v167;
  __p.__r_.__value_.__r.__words[0] = 3221225472;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&__block_descriptor_40_e5_v8__0l;
  v208 = a1 + 4512;
  dispatch_sync(v204, &v206);
  dispatch_release(*(dispatch_object_t *)(a1 + 4528));
  return a1;
}

void sub_232C7DBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;
  void *v18;

  std::unordered_map<unsigned long long,AGXA10FamilyUserIntersectionFunctionTable *>::~unordered_map[abi:nn180100](v15 + 6880);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v15 + 6592));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v15 + 6552));
  std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>>>::destroy(*(char **)(v15 + 6520));
  v17 = *(void **)(v15 + 6480);
  if (v17)
  {
    *(_QWORD *)(v15 + 6488) = v17;
    operator delete(v17);
  }
  std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>>>::destroy(*(char **)(v15 + 6464));
  std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen1,std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen1>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>>>::destroy(*(char **)(v15 + 6432));
  AGX::FenceGroupPool::~FenceGroupPool((AGX::FenceGroupPool *)(v15 + 6192));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 6104));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 6024));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 5936));
  AGX::PooledAllocator<16u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 5792));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 5712));
  AGX::PooledAllocator<8u>::~PooledAllocator((os_unfair_lock_s *)(v15 + 5632));
  v18 = *(void **)(v15 + 5608);
  if (v18)
  {
    *(_QWORD *)(v15 + 5616) = v18;
    operator delete(v18);
  }

  AGX::G9::DevicePDSStateLoader::~DevicePDSStateLoader((AGX::G9::DevicePDSStateLoader *)(v15 + 5328));
  AGX::G9::HeapSet::~HeapSet((AGX::G9::HeapSet *)(v15 + 4512));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>>>::destroy(char *a1)
{
  std::__shared_weak_count *v2;

  if (a1)
  {
    std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,std::weak_ptr<AGX::G9::Sampler>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 14);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    if (a1[103] < 0)
      operator delete(*((void **)a1 + 10));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::__map_value_compare<AGX::SamplerDescriptor,std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>,std::less<AGX::SamplerDescriptor>,true>,std::allocator<std::__value_type<AGX::SamplerDescriptor,AGX::WeakObjCPtr<AGXA10FamilySampler>>>>::destroy(*((_QWORD *)a1 + 1));
    objc_destroyWeak((id *)a1 + 13);
    if (a1[103] < 0)
      operator delete(*((void **)a1 + 10));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen1,std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen1>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen1,std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen1>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::__map_value_compare<AGX::DepthStencilStateDescriptorGen1,std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>,std::less<AGX::DepthStencilStateDescriptorGen1>,true>,std::allocator<std::__value_type<AGX::DepthStencilStateDescriptorGen1,AGXA10FamilyDepthStencilState *>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void AGX::G9::HeapSet::~HeapSet(AGX::G9::HeapSet *this)
{
  AGX::G9::HeapSet *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t block;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  AGX::G9::HeapSet *v12;

  v2 = (AGX::G9::HeapSet *)((char *)this + 504);
  v3 = MEMORY[0x24BDAC760];
  v4 = *((_QWORD *)this + 65);
  block = MEMORY[0x24BDAC760];
  v9 = 3221225472;
  v10 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  v11 = &__block_descriptor_40_e5_v8__0l;
  v12 = v2;
  dispatch_sync(v4, &block);
  dispatch_release(*((dispatch_object_t *)this + 65));
  v5 = *((_QWORD *)this + 44);
  block = v3;
  v9 = 3221225472;
  v10 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  v11 = &__block_descriptor_40_e5_v8__0l;
  v12 = (AGX::G9::HeapSet *)((char *)this + 336);
  dispatch_sync(v5, &block);
  dispatch_release(*((dispatch_object_t *)this + 44));
  v6 = *((_QWORD *)this + 23);
  block = v3;
  v9 = 3221225472;
  v10 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  v11 = &__block_descriptor_40_e5_v8__0l;
  v12 = (AGX::G9::HeapSet *)((char *)this + 168);
  dispatch_sync(v6, &block);
  dispatch_release(*((dispatch_object_t *)this + 23));
  v7 = *((_QWORD *)this + 2);
  block = v3;
  v9 = 3221225472;
  v10 = ___ZN3AGX4HeapILb1EED2Ev_block_invoke;
  v11 = &__block_descriptor_40_e5_v8__0l;
  v12 = this;
  dispatch_sync(v7, &block);
  dispatch_release(*((dispatch_object_t *)this + 2));
}

uint64_t VectorMap<AGX::TileDispatchVertexProgramKey,AGX::ProgramVariantEntry<AGX::DummyTileDispatchVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 336);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    MEMORY[0x234927ECC](v3, 0xC400A2AC0F1);

  v4 = *(NSObject **)(a1 + 288);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
    MEMORY[0x234927ECC](v5, 0xC400A2AC0F1);

  v6 = *(NSObject **)(a1 + 240);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    MEMORY[0x234927ECC](v7, 0xC400A2AC0F1);

  v8 = *(NSObject **)(a1 + 192);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    MEMORY[0x234927ECC](v9, 0xC400A2AC0F1);

  *(_QWORD *)(a1 + 144) = off_250400A38;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 96) = off_250400A38;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 48) = off_250400A38;
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_250400A38;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    v10 = v8 - (_QWORD)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = v7;
    v9 = v15 + 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = v16;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v7;
    v9 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream((_QWORD *)a1);
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)25,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t VectorMap<AGX::ComputeControlFlowPredicateProgramKey,AGX::ProgramVariantEntry<AGX::G9::ComputeProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 336);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 288);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 240);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 192);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 144) = off_2504009B8;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 96) = off_2504009B8;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 48) = off_2504009B8;
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_2504009B8;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t VectorMap<AGX::BlitComputeProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitComputeProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 496);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 504);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 448);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 456);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 400);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 408);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 352);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 360);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 264) = off_2504006B8;
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 176) = off_2504006B8;
  v11 = *(void **)(a1 + 192);
  if (v11)
  {
    *(_QWORD *)(a1 + 200) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 88) = off_2504006B8;
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_2504006B8;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t VectorMap<AGX::BlitVertexProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitVertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 336);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 344);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 288);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 296);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 240);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 192);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 144) = off_250400638;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    *(_QWORD *)(a1 + 168) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 96) = off_250400638;
  v11 = *(void **)(a1 + 112);
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 48) = off_250400638;
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_250400638;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t VectorMap<AGX::BlitFragmentProgramKey,AGX::ProgramVariantEntry<AGX::G9::BlitFragmentProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 496);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 504);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 448);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 456);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 400);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 408);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 352);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 360);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 264) = off_2504005B8;
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 176) = off_2504005B8;
  v11 = *(void **)(a1 + 192);
  if (v11)
  {
    *(_QWORD *)(a1 + 200) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 88) = off_2504005B8;
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_2504005B8;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::SWEndOfTileProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v2 = *(NSObject **)(a1 + 656);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 664);
  if (v3)
  {
    AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(v3 + 512);
    v4 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v3);
    MEMORY[0x234927ECC](v4, 0x10F2C4086E28A44);
  }

  v5 = *(NSObject **)(a1 + 608);
  if (v5)
    dispatch_release(v5);
  v6 = *(_QWORD *)(a1 + 616);
  if (v6)
  {
    AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(v6 + 512);
    v7 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v6);
    MEMORY[0x234927ECC](v7, 0x10F2C4086E28A44);
  }

  v8 = *(NSObject **)(a1 + 560);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 568);
  if (v9)
  {
    AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(v9 + 512);
    v10 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v9);
    MEMORY[0x234927ECC](v10, 0x10F2C4086E28A44);
  }

  v11 = *(NSObject **)(a1 + 512);
  if (v11)
    dispatch_release(v11);
  v12 = *(_QWORD *)(a1 + 520);
  if (v12)
  {
    AGX::FragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~FragmentProgramVariantPDSState(v12 + 512);
    v13 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v12);
    MEMORY[0x234927ECC](v13, 0x10F2C4086E28A44);
  }

  *(_QWORD *)(a1 + 384) = off_250401AA0;
  v14 = *(void **)(a1 + 400);
  if (v14)
  {
    *(_QWORD *)(a1 + 408) = v14;
    operator delete(v14);
  }
  *(_QWORD *)(a1 + 256) = off_250401AA0;
  v15 = *(void **)(a1 + 272);
  if (v15)
  {
    *(_QWORD *)(a1 + 280) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 128) = off_250401AA0;
  v16 = *(void **)(a1 + 144);
  if (v16)
  {
    *(_QWORD *)(a1 + 152) = v16;
    operator delete(v16);
  }
  *(_QWORD *)a1 = off_250401AA0;
  v17 = *(void **)(a1 + 16);
  if (v17)
  {
    *(_QWORD *)(a1 + 24) = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v2 = *(NSObject **)(a1 + 656);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 664);
  if (v3)
  {
    AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v3 + 512);
    v4 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v3);
    MEMORY[0x234927ECC](v4, 0x10F2C40DEF1E504);
  }

  v5 = *(NSObject **)(a1 + 608);
  if (v5)
    dispatch_release(v5);
  v6 = *(_QWORD *)(a1 + 616);
  if (v6)
  {
    AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v6 + 512);
    v7 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v6);
    MEMORY[0x234927ECC](v7, 0x10F2C40DEF1E504);
  }

  v8 = *(NSObject **)(a1 + 560);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 568);
  if (v9)
  {
    AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v9 + 512);
    v10 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v9);
    MEMORY[0x234927ECC](v10, 0x10F2C40DEF1E504);
  }

  v11 = *(NSObject **)(a1 + 512);
  if (v11)
    dispatch_release(v11);
  v12 = *(_QWORD *)(a1 + 520);
  if (v12)
  {
    AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v12 + 512);
    v13 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v12);
    MEMORY[0x234927ECC](v13, 0x10F2C40DEF1E504);
  }

  *(_QWORD *)(a1 + 384) = off_250401AA0;
  v14 = *(void **)(a1 + 400);
  if (v14)
  {
    *(_QWORD *)(a1 + 408) = v14;
    operator delete(v14);
  }
  *(_QWORD *)(a1 + 256) = off_250401AA0;
  v15 = *(void **)(a1 + 272);
  if (v15)
  {
    *(_QWORD *)(a1 + 280) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a1 + 128) = off_250401AA0;
  v16 = *(void **)(a1 + 144);
  if (v16)
  {
    *(_QWORD *)(a1 + 152) = v16;
    operator delete(v16);
  }
  *(_QWORD *)a1 = off_250401AA0;
  v17 = *(void **)(a1 + 16);
  if (v17)
  {
    *(_QWORD *)(a1 + 24) = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::BackgroundObjectProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(NSObject **)(a1 + 496);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD *)(a1 + 504);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  v4 = *(NSObject **)(a1 + 448);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD *)(a1 + 456);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  v6 = *(NSObject **)(a1 + 400);
  if (v6)
    dispatch_release(v6);
  v7 = *(_QWORD *)(a1 + 408);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  v8 = *(NSObject **)(a1 + 352);
  if (v8)
    dispatch_release(v8);
  v9 = *(_QWORD *)(a1 + 360);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  *(_QWORD *)(a1 + 264) = off_250401A20;
  v10 = *(void **)(a1 + 280);
  if (v10)
  {
    *(_QWORD *)(a1 + 288) = v10;
    operator delete(v10);
  }
  *(_QWORD *)(a1 + 176) = off_250401A20;
  v11 = *(void **)(a1 + 192);
  if (v11)
  {
    *(_QWORD *)(a1 + 200) = v11;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 88) = off_250401A20;
  v12 = *(void **)(a1 + 104);
  if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    operator delete(v12);
  }
  *(_QWORD *)a1 = off_250401A20;
  v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::deviceNotificationCallback(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v6;
  os_unfair_lock_s *v7;
  id *v8;
  uint64_t v9;
  _QWORD *WeakRetained;
  id *v11;
  id **v12;
  BOOL v13;
  unint64_t ****v14;
  unint64_t ****v15;
  uint64_t v16;
  unint64_t **v17;
  unint64_t **i;
  unint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  const char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!a2 && a3 != 1)
  {
    if (a3)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Invalid AGX device notification\n", "agxa_device_template.hpp", 3491, "deviceNotificationCallback");
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v31 = "agxa_device_template.hpp";
        v32 = 1024;
        v33 = 3491;
        v34 = 2080;
        v35 = "deviceNotificationCallback";
        _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Invalid AGX device notification\n", buf, 0x1Cu);
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v31 = "agxa_device_template.hpp";
        v32 = 1024;
        v33 = 3491;
        v34 = 2080;
        v35 = "deviceNotificationCallback";
        _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Invalid AGX device notification\n", buf, 0x1Cu);
      }
    }
    else
    {
      v6 = 0xFE780000000000;
      v7 = (os_unfair_lock_s *)(a1 + 6448);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6448));
      *(_DWORD *)(a1 + 6504) = a4;
      v8 = *(id **)(a1 + 6456);
      if (v8 != (id *)(a1 + 6464))
      {
        if (a4)
          v9 = 0xFE780000000000;
        else
          v9 = 0xC0000000000000;
        do
        {
          WeakRetained = objc_loadWeakRetained(v8 + 13);
          if (WeakRetained)
            WeakRetained[15] = WeakRetained[15] & 0xFF0007FFFFFFFFFFLL | v9;

          v11 = (id *)v8[1];
          if (v11)
          {
            do
            {
              v12 = (id **)v11;
              v11 = (id *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (id **)v8[2];
              v13 = *v12 == v8;
              v8 = (id *)v12;
            }
            while (!v13);
          }
          v8 = (id *)v12;
        }
        while (v12 != (id **)(a1 + 6464));
      }
      v14 = *(unint64_t *****)(a1 + 6480);
      v15 = *(unint64_t *****)(a1 + 6488);
      if (v14 != v15)
      {
        v16 = 0xC0000000000000;
        if (a4)
          v16 = 0xFE780000000000;
        do
        {
          v17 = **v14;
          for (i = (*v14)[1]; v17 != i; *v19 = *v19 & 0xFF0007FFFFFFFFFFLL | v16)
            v19 = *v17++;
          ++v14;
        }
        while (v14 != v15);
      }
      v20 = *(_QWORD **)(a1 + 6512);
      v21 = (_QWORD *)(a1 + 6520);
      if (v20 != v21)
      {
        if (!a4)
          v6 = 0xC0000000000000;
        do
        {
          v22 = (std::__shared_weak_count *)v20[14];
          if (!v22)
            goto LABEL_42;
          v23 = std::__shared_weak_count::lock(v22);
          if (!v23)
            goto LABEL_42;
          v24 = v23;
          v25 = v20[13];
          if (v25)
            *(_QWORD *)(v25 + 72) = *(_QWORD *)(v25 + 72) & 0xFF0007FFFFFFFFFFLL | v6;
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v24);
            v28 = (_QWORD *)v20[1];
            if (!v28)
            {
              do
              {
LABEL_46:
                v29 = (_QWORD *)v20[2];
                v13 = *v29 == (_QWORD)v20;
                v20 = v29;
              }
              while (!v13);
              goto LABEL_34;
            }
          }
          else
          {
LABEL_42:
            v28 = (_QWORD *)v20[1];
            if (!v28)
              goto LABEL_46;
          }
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
LABEL_34:
          v20 = v29;
        }
        while (v29 != v21);
      }
      os_unfair_lock_unlock(v7);
    }
  }
}

void sub_232C7F110(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE21setupDataBufferParamsERK16AGXGPUCoreConfig_block_invoke()
{
  qword_254235A50 = 0x8000;
  dword_254235A58 = 1;
  qword_254235A60 = 0x8000;
  dword_254235A68 = 1;
  AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::databuffer_params = 0x8000;
  dword_254235A28 = 1;
  qword_254235A70 = 0x8000;
  dword_254235A78 = 1;
  qword_254235A80 = 0x8000;
  dword_254235A88 = 1;
  qword_254235A90 = 786432;
  dword_254235A98 = 1;
  qword_254235AA0 = 0x80000;
  dword_254235AA8 = 1;
  qword_254235AB0 = 0x8000;
  dword_254235AB8 = 1;
  qword_254235AC0 = 0x8000;
  dword_254235AC8 = 1;
  qword_254235AD0 = 0x8000;
  dword_254235AD8 = 1;
  qword_254235AE0 = 0x8000;
  dword_254235AE8 = 1;
  qword_254235AF0 = 0x8000;
  dword_254235AF8 = 1;
  qword_254235B10 = 0x8000;
  dword_254235B18 = 1;
  qword_254235B20 = 0x8000;
  dword_254235B28 = 1;
  qword_254235B00 = 0x8000;
  dword_254235B08 = 1;
  qword_254235A30 = 0x8000;
  dword_254235A38 = 1;
  qword_254235A40 = 0x8000;
  dword_254235A48 = 1;
  qword_254235B30 = 0x8000;
  dword_254235B38 = 1;
  qword_254235B40 = 0x8000;
  dword_254235B48 = 1;
  qword_254235B50 = 1024;
  dword_254235B58 = 1;
  qword_254235B60 = 64;
  dword_254235B68 = 1;
  qword_254235B70 = 0x8000;
  dword_254235B78 = 1;
  qword_254235B80 = 0x8000;
  dword_254235B88 = 1;
  qword_254235B90 = 0x8000;
  dword_254235B98 = 1;
  qword_254235BA0 = 0x8000;
  dword_254235BA8 = 1;
  qword_254235BB0 = 0x8000;
  dword_254235BB8 = 1;
  qword_254235BC0 = 0x8000;
  dword_254235BC8 = 1;
  qword_254235BD0 = 0x8000;
  dword_254235BD8 = 1;
  qword_254235BE0 = 0x8000;
  dword_254235BE8 = 1;
  qword_254235BF0 = 0x8000;
  dword_254235BF8 = 1;
  qword_254235C00 = 0x8000;
  dword_254235C08 = 1;
  qword_254235C10 = 0x8000;
  dword_254235C18 = 1;
  qword_254235C20 = 15360;
  dword_254235C28 = 1;
  qword_254235C30 = 0x8000;
  dword_254235C38 = 1;
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEEC2EPU23objcproto12MTLDeviceSPI16IOGPUMetalDevicePNS5_13DeviceOptionsE_block_invoke(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 6872));
    v3 = *(uint64_t **)(v2 + 6896);
    if (v3)
    {
      v4 = MEMORY[0x24BDACB78];
      while (*((_BYTE *)v3 + 72))
      {
          goto LABEL_12;
LABEL_4:
        v3 = (uint64_t *)*v3;
        if (!v3)
          goto LABEL_15;
      }
      if (*(_BYTE *)(v2 + 6681))
      else
        v5 = 1;
      if (v5)
        goto LABEL_4;
LABEL_12:
      {
        v7 = v3[3];
        v8 = v3[4];
        v9 = v3[5];
        v10 = *((_DWORD *)v3 + 12);
        v11 = v3[7];
        v12 = v3[8];
        *(_DWORD *)buf = 136447490;
        v14 = v7;
        v15 = 2082;
        v16 = v8;
        v17 = 2082;
        v18 = v9;
        v19 = 1026;
        v20 = v10;
        v21 = 2050;
        v22 = v11;
        v23 = 2050;
        v24 = v12;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}llu", buf, 0x3Au);
      }
      goto LABEL_4;
    }
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 6872));
  }
}

void AGX::TileDispatchVertexProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  unsigned int *value;
  std::vector<unsigned int> *p_end_cap;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x57;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::BlitVertexFastClearProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  std::vector<unsigned int>::pointer v20;
  std::vector<unsigned int>::pointer v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      goto LABEL_36;
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x4A;
  v19[1] = this[1].__end_cap_.__value_;
  v21 = this[1].__begin_;
  v20 = this[1].__end_;
  if (v21 < v20)
  {
    *v21 = 96;
    v22 = v21 + 1;
    goto LABEL_35;
  }
  v23 = p_end_cap->__begin_;
  v24 = v21 - v23;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 62)
    abort();
  v26 = (char *)v20 - (char *)v23;
  if (v26 >> 1 > v25)
    v25 = v26 >> 1;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
    v27 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    if (!(v27 >> 62))
    {
      v28 = operator new(4 * v27);
      goto LABEL_26;
    }
LABEL_36:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v28 = 0;
LABEL_26:
  v29 = (unsigned int *)&v28[4 * v24];
  v30 = (unsigned int *)&v28[4 * v27];
  *v29 = 96;
  v22 = v29 + 1;
  if (v21 != v23)
  {
    v31 = (char *)v21 - (char *)v23 - 4;
    if (v31 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)((char *)v23 - v28) < 0x20)
      goto LABEL_40;
    v32 = (v31 >> 2) + 1;
    v33 = &v28[4 * v24 - 16];
    v34 = (__int128 *)(v21 - 4);
    v35 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 2;
      v35 -= 8;
    }
    while (v35);
    v29 -= v32 & 0x7FFFFFFFFFFFFFF8;
    v21 -= v32 & 0x7FFFFFFFFFFFFFF8;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        v37 = *--v21;
        *--v29 = v37;
      }
      while (v21 != v23);
    }
  }
  this->__end_cap_.__value_ = v29;
  this[1].__begin_ = v22;
  this[1].__end_ = v30;
  if (v23)
    operator delete(v23);
LABEL_35:
  this[1].__begin_ = v22;
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::BlitFastClearProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  std::vector<unsigned int>::pointer v20;
  std::vector<unsigned int>::pointer v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      goto LABEL_36;
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x4A;
  v19[1] = this[1].__end_cap_.__value_;
  v21 = this[1].__begin_;
  v20 = this[1].__end_;
  if (v21 < v20)
  {
    *v21 = 96;
    v22 = v21 + 1;
    goto LABEL_35;
  }
  v23 = p_end_cap->__begin_;
  v24 = v21 - v23;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 62)
    abort();
  v26 = (char *)v20 - (char *)v23;
  if (v26 >> 1 > v25)
    v25 = v26 >> 1;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
    v27 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    if (!(v27 >> 62))
    {
      v28 = operator new(4 * v27);
      goto LABEL_26;
    }
LABEL_36:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v28 = 0;
LABEL_26:
  v29 = (unsigned int *)&v28[4 * v24];
  v30 = (unsigned int *)&v28[4 * v27];
  *v29 = 96;
  v22 = v29 + 1;
  if (v21 != v23)
  {
    v31 = (char *)v21 - (char *)v23 - 4;
    if (v31 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)((char *)v23 - v28) < 0x20)
      goto LABEL_40;
    v32 = (v31 >> 2) + 1;
    v33 = &v28[4 * v24 - 16];
    v34 = (__int128 *)(v21 - 4);
    v35 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 2;
      v35 -= 8;
    }
    while (v35);
    v29 -= v32 & 0x7FFFFFFFFFFFFFF8;
    v21 -= v32 & 0x7FFFFFFFFFFFFFF8;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        v37 = *--v21;
        *--v29 = v37;
      }
      while (v21 != v23);
    }
  }
  this->__end_cap_.__value_ = v29;
  this[1].__begin_ = v22;
  this[1].__end_ = v30;
  if (v23)
    operator delete(v23);
LABEL_35:
  this[1].__begin_ = v22;
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)18,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::BlitSparseProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  std::vector<unsigned int> *p_end_cap;
  unsigned int *value;
  int v8;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *begin;
  unsigned int *v19;
  std::vector<unsigned int>::pointer v20;
  std::vector<unsigned int>::pointer v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;

  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  v8 = LOBYTE(this->__end_) | 0x100;
  end = this[1].__end_;
  if (value >= end)
  {
    v11 = (char *)end - (char *)value;
    v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1)
      v12 = 1;
    v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 62)
      goto LABEL_36;
    v15 = v14;
    v16 = (unsigned int *)operator new(4 * v14);
    *v16 = v8;
    v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    *value = v8;
    v10 = value + 1;
  }
  this[1].__begin_ = v10;
  v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  v19 = &value[v17];
  *v19 = (((_DWORD)begin - (_DWORD)value) >> 2 << 8) | 0x49;
  v19[1] = this[1].__end_cap_.__value_;
  v21 = this[1].__begin_;
  v20 = this[1].__end_;
  if (v21 < v20)
  {
    *v21 = 96;
    v22 = v21 + 1;
    goto LABEL_35;
  }
  v23 = p_end_cap->__begin_;
  v24 = v21 - v23;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 62)
    abort();
  v26 = (char *)v20 - (char *)v23;
  if (v26 >> 1 > v25)
    v25 = v26 >> 1;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
    v27 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    if (!(v27 >> 62))
    {
      v28 = operator new(4 * v27);
      goto LABEL_26;
    }
LABEL_36:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v28 = 0;
LABEL_26:
  v29 = (unsigned int *)&v28[4 * v24];
  v30 = (unsigned int *)&v28[4 * v27];
  *v29 = 96;
  v22 = v29 + 1;
  if (v21 != v23)
  {
    v31 = (char *)v21 - (char *)v23 - 4;
    if (v31 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)((char *)v23 - v28) < 0x20)
      goto LABEL_40;
    v32 = (v31 >> 2) + 1;
    v33 = &v28[4 * v24 - 16];
    v34 = (__int128 *)(v21 - 4);
    v35 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 2;
      v35 -= 8;
    }
    while (v35);
    v29 -= v32 & 0x7FFFFFFFFFFFFFF8;
    v21 -= v32 & 0x7FFFFFFFFFFFFFF8;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_40:
      do
      {
        v37 = *--v21;
        *--v29 = v37;
      }
      while (v21 != v23);
    }
  }
  this->__end_cap_.__value_ = v29;
  this[1].__begin_ = v22;
  this[1].__end_ = v30;
  if (v23)
    operator delete(v23);
LABEL_35:
  this[1].__begin_ = v22;
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)17,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ___ZL19gatherDeviceOptionsPN3AGX2G96DeviceEPP8NSStringS5__block_invoke()
{
  uint64_t result;
  unsigned int v1;
  _QWORD block[4];
  int v3;

  gatherDeviceOptions(AGX::G9::Device *,NSString **,NSString **)::deviceOptions &= 0xFFFFFFFFFE000000;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE18ShaderBufferBounds18setDefaultSettingsEj_block_invoke;
  block[3] = &__block_descriptor_36_e5_v8__0l;
  v3 = 0;
  if (AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::ShaderBufferBounds::setDefaultSettings::buffer_bounds_once != -1)
    dispatch_once(&AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::ShaderBufferBounds::setDefaultSettings::buffer_bounds_once, block);
  result = MTLGetOverridenDeviceCreationFlags();
  if ((result & 1) != 0)
  {
    v1 = block[0];
    gatherDeviceOptions(AGX::G9::Device *,NSString **,NSString **)::deviceOptions = block[0];
  }
  else
  {
    v1 = gatherDeviceOptions(AGX::G9::Device *,NSString **,NSString **)::deviceOptions;
  }
  gatherDeviceOptions(AGX::G9::Device *,NSString **,NSString **)::kernelOptions |= (v1 >> 19) & 0x20 | (8 * (v1 & 3));
  return result;
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::meshNeedsPassThroughObjectShader()
{
  AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::needsPassThroughObjectShader(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]();
}

void AGX::NopGeometryPipelineContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::needsPassThroughObjectShader(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
  _os_crash();
  __break(1u);
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerConstantSamplerList(uint64_t a1, unint64_t ***a2)
{
  unint64_t **v4;
  unint64_t **v5;
  uint64_t v6;
  unint64_t *v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t ****v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t ***v25;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = 0xFE780000000000;
    if (!*(_DWORD *)(a1 + 6504))
      v6 = 0xC0000000000000;
    do
    {
      v7 = *v4++;
      *v7 = *v7 & 0xFF0007FFFFFFFFFFLL | v6;
    }
    while (v4 != v5);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6448));
  v8 = *(char **)(a1 + 6488);
  v9 = *(_QWORD *)(a1 + 6496);
  if ((unint64_t)v8 >= v9)
  {
    v11 = *(char **)(a1 + 6480);
    v12 = (v8 - v11) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (unint64_t ****)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = a2;
    v10 = v17 + 1;
    if (v8 == v11)
    {
      v11 = v8;
    }
    else
    {
      v19 = v8 - v11 - 8;
      if (v19 < 0x58)
        goto LABEL_33;
      if ((unint64_t)(v11 - v16) < 0x20)
        goto LABEL_33;
      v20 = (v19 >> 3) + 1;
      v21 = &v16[8 * v12 - 16];
      v22 = v8 - 16;
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      v8 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          v25 = (unint64_t ***)*((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v17 = v25;
        }
        while (v8 != v11);
        v11 = *(char **)(a1 + 6480);
      }
    }
    *(_QWORD *)(a1 + 6480) = v17;
    *(_QWORD *)(a1 + 6488) = v10;
    *(_QWORD *)(a1 + 6496) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v8 = a2;
    v10 = v8 + 8;
  }
  *(_QWORD *)(a1 + 6488) = v10;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6448));
}

void sub_232C8003C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::BackgroundObjectProgram>(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  char **v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, unsigned int **, uint64_t, void *);
  void *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[5];
  unint64_t v56;
  void *v57;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v62;
  CC_SHA256_CTX *p_c;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v51 = 0;
  v52 = &v51;
  v53 = 0x2020000000;
  v54 = 0;
  v8 = a2 + 222;
  os_unfair_lock_lock(a2 + 222);
  v9 = VectorMap<AGX::BackgroundObjectProgramKey,AGX::ProgramVariantEntry<AGX::G9::BackgroundObjectProgramVariant>,4u>::operator[]((uint64_t)a2, a3);
  v10 = v9;
  if (*(_QWORD *)v9)
  {
    if (!*(_BYTE *)(v9 + 40))
    {
      os_unfair_lock_unlock(v8);
      dispatch_group_wait(*(dispatch_group_t *)v10, 0xFFFFFFFFFFFFFFFFLL);
      v41 = *(_QWORD *)(v10 + 8);
      v52[3] = v41;
      goto LABEL_29;
    }
    v12 = (_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *v12 = 0;
    *(_QWORD *)(v10 + 16) = 0;

    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_BYTE *)(v10 + 40) = 0;
    v13 = *(NSObject **)v10;
  }
  else
  {
    v13 = dispatch_group_create();
    *(_QWORD *)v10 = v13;
  }
  dispatch_group_enter(v13);
  os_unfair_lock_unlock(v8);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v14 = *(_QWORD *)(a1 + 5464);
  v15 = MEMORY[0x24BDAC760];
  v43 = MEMORY[0x24BDAC760];
  v44 = 3221225472;
  v45 = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_30BackgroundObjectProgramVariantENS_26BackgroundObjectProgramKeyENS1_23BackgroundObjectProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v46 = &unk_250400288;
  v47 = &v51;
  v48 = a1;
  v49 = a3;
  v50 = v10;
  v16 = *(_QWORD *)(v14 + 8);
  v18 = *(_DWORD *)(a3 + 68);
  v17 = *(_DWORD *)(a3 + 72);
  v19 = *(_DWORD *)(a3 + 40);
  v20 = *(_DWORD *)(a3 + 44);
  v22 = *(_DWORD *)(a3 + 48);
  v21 = *(_DWORD *)(a3 + 52);
  v23 = *(_DWORD *)(a3 + 56);
  v24 = *(_DWORD *)(a3 + 60);
  v25 = *(_DWORD *)(a3 + 64);
  v26 = *(_QWORD *)(a3 + 80);
  if ((v26 != 0x10000000000 || v19 | v20 | v17 & 0xFFFF0FFF | v22 | v21 | v23 | v24 | v25 | v18)
    && (v20 | v19 | v17 | v22 | v21 | v23 | v24 | v25 | v18 || v26 != 0))
  {
    v16 = 0;
  }
  v28 = (void *)objc_opt_new();
  objc_msgSend(v28, "setSync:", 1, v43, v44, v45, v46, v47, v48, v49, v50);
  objc_msgSend(v28, "setPipelineCache:", v16);
  objc_msgSend(v28, "setBinaryArchives:", a4);
  v55[0] = v15;
  v55[1] = 3221225472;
  v55[2] = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v55[3] = &unk_2504023B8;
  v55[4] = &v43;
  v56 = 0;
  v57 = 0;
  AGX::BackgroundObjectProgramKey::serialize((std::vector<unsigned int> *)a3, (unsigned int **)&v57, &v56);
  v29 = dispatch_data_create(v57, v56, 0, 0);
  objc_msgSend(v28, "setDriverKeyData:", v29);
  if (objc_msgSend(v28, "airScript"))
  {
    v30 = objc_msgSend(v28, "airScript");
    v65 = 0uLL;
    *(_QWORD *)&v66 = 0;
    *(_QWORD *)&v65 = dispatch_data_create_map(v30, (const void **)&v65 + 1, (size_t *)&v66);
    v31 = *((_QWORD *)&v65 + 1);
    v32 = **((_DWORD **)&v65 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a3)(a3, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v31 + v32), &data, (size_t *)len, v33, v34))
    {
      v35 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v35);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v65);
    v65 = *(_OWORD *)md;
    v66 = v62;
    objc_msgSend(v28, "setVendorPluginFunctionId:", &v65);
  }
  *(_QWORD *)c.count = v15;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v28;
  *(_QWORD *)c.wbuf = v55;
  if (objc_msgSend(v28, "function"))
  {
    v36 = mach_absolute_time();
    v37 = *(void **)v14;
    *(_QWORD *)md = v15;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v62 = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v62 + 1) = &unk_250402458;
    p_c = &c;
    v64 = v36;
    objc_msgSend(v37, "compileFunctionRequest:completionHandler:", v28, md);
  }
  else
  {
    if (objc_msgSend(v28, "frameworkData") || objc_msgSend(v28, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v15;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v62 = ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v62 + 1) = &unk_250402430;
    p_c = &c;
    v38 = objc_msgSend((id)objc_msgSend(v28, "binaryArchives"), "count");
    v39 = *(void **)v14;
    v40 = objc_msgSend(v28, "driverKeyData");
    if (v38)
      objc_msgSend(v39, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v40, objc_msgSend(v28, "binaryArchives"), 0, objc_msgSend(v28, "pipelineCache"), objc_msgSend(v28, "sync"), md);
    else
      objc_msgSend(v39, "compileRequest:pipelineCache:sync:completionHandler:", v40, objc_msgSend(v28, "pipelineCache"), objc_msgSend(v28, "sync"), md);
  }
  dispatch_release(v29);

  v41 = v52[3];
LABEL_29:
  if (!v41)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v51, 8);
  return v41;
}

void sub_232C80540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  dispatch_release(*(dispatch_object_t *)(v9 - 128));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_30BackgroundObjectProgramVariantENS_26BackgroundObjectProgramKeyENS1_23BackgroundObjectProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, unsigned int **a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16[54];
  unint64_t v17;
  void *v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v17 = 0;
    v18 = 0;
    AGX::BackgroundObjectProgramKey::serialize(*(std::vector<unsigned int> **)(a1 + 48), (unsigned int **)&v18, &v17);
    v16[0] = (uint64_t)a4;
    v16[1] = (uint64_t)v15;
    v16[2] = v17;
    v16[3] = (uint64_t)v18;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (_QWORD *)operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v16, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::BackgroundObjectProgramVariant((unint64_t)v8, v7, (uint64_t)a2, (uint64_t)v16, *(_QWORD *)(a1 + 48));
  *v8 = &off_250400BF8;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v16);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v12 + 16) = 0;

  *(_QWORD *)(v12 + 24) = objc_msgSend(a4, "copy");
  if (*(_QWORD *)(v12 + 8))
  {

    *(_QWORD *)(v12 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v12);
}

void sub_232C80744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40648F5B82);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_26BackgroundObjectProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C809F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::G9::BackgroundObjectProgramVariant::~BackgroundObjectProgramVariant(AGX::G9::BackgroundObjectProgramVariant *this)
{
  *(_QWORD *)this = &off_250401900;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState((uint64_t)this + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

{
  *(_QWORD *)this = &off_250401900;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState((uint64_t)this + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  uint64_t v35;
  unint64_t v36;

  *(_QWORD *)a1 = &off_250401E50;
  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 552))
  {
    v3 = *(_QWORD *)(a1 + 560);
    v4 = *(NSObject **)(v3 + 16);
    v31 = MEMORY[0x24BDAC760];
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v3;
    v36 = a1 + 528;
    dispatch_sync(v4, &v31);
    *(_OWORD *)(a1 + 553) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
  }
  if (*(_QWORD *)(a1 + 600))
  {
    v5 = *(_QWORD *)(a1 + 608);
    v6 = *(NSObject **)(v5 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v5;
    v36 = a1 + 576;
    dispatch_sync(v6, &v31);
    *(_OWORD *)(a1 + 601) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
  }
  if (*(_QWORD *)(a1 + 648))
  {
    v7 = *(_QWORD *)(a1 + 656);
    v8 = *(NSObject **)(v7 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v7;
    v36 = a1 + 624;
    dispatch_sync(v8, &v31);
    *(_OWORD *)(a1 + 649) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v9 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 6872));
  }
  if ((*(char *)(a1 + 1215) & 0x80000000) == 0)
  {
    v10 = *(void **)(a1 + 1168);
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1192));
  v10 = *(void **)(a1 + 1168);
  if (v10)
  {
LABEL_11:
    *(_QWORD *)(a1 + 1176) = v10;
    operator delete(v10);
  }
LABEL_12:
  v11 = *(_QWORD *)(a1 + 1144);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 1152);
    v13 = *(void **)(a1 + 1144);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 1144);
    }
    *(_QWORD *)(a1 + 1152) = v11;
    operator delete(v13);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 1032));
  v14 = *(_QWORD *)(a1 + 992);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1000);
    v16 = *(void **)(a1 + 992);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 992);
    }
    *(_QWORD *)(a1 + 1000) = v14;
    operator delete(v16);
  }
  v20 = *(void **)(a1 + 968);
  if (v20)
  {
    *(_QWORD *)(a1 + 976) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 944);
  if (v21)
  {
    *(_QWORD *)(a1 + 952) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 871) < 0)
  {
    operator delete(*(void **)(a1 + 848));
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
    {
LABEL_39:
      if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        goto LABEL_40;
LABEL_60:
      operator delete(*(void **)(a1 + 432));
      if ((*(char *)(a1 + 431) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_61;
    }
  }
  else if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 455) < 0)
    goto LABEL_60;
LABEL_40:
  if ((*(char *)(a1 + 431) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_61:
  operator delete(*(void **)(a1 + 408));
LABEL_41:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 272));
  v22 = *(void **)(a1 + 240);
  if (v22)
  {
    *(_QWORD *)(a1 + 248) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 216);
  if (v23)
  {
    *(_QWORD *)(a1 + 224) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 168);
  if (v24)
  {
    *(_QWORD *)(a1 + 176) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 144);
  if (v25)
  {
    *(_QWORD *)(a1 + 152) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 120);
  if (v26)
  {
    *(_QWORD *)(a1 + 128) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 96);
  if (v27)
  {
    *(_QWORD *)(a1 + 104) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 72);
  if (v28)
  {
    *(_QWORD *)(a1 + 80) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 48);
  if (v29)
  {
    *(_QWORD *)(a1 + 56) = v29;
    operator delete(v29);
  }
  return a1;
}

void CompileStatistics::~CompileStatistics(CompileStatistics *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 15);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 18));
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    v4 = *((_QWORD *)this + 13);
    v5 = (void *)*((_QWORD *)this + 12);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v3;
    operator delete(v5);
  }
}

_QWORD *AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BackgroundObjectProgramVariant(_QWORD *a1)
{
  *a1 = &off_250401900;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState((uint64_t)(a1 + 152));
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);
}

void AGX::BackgroundObjectProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BackgroundObjectProgramVariant(_QWORD *a1)
{
  *a1 = &off_250401900;
  AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ArgumentTable,14ul>::~ProgramVariantPDSState((uint64_t)(a1 + 152));
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BackgroundObjectArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);
  JUMPOUT(0x234927ECCLL);
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBackgroundObjectProgramVariant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD **v6;
  uint64_t v7;

  v6 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6632));
  v7 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::BackgroundObjectProgram>(a1, *(os_unfair_lock_s **)a1, a2, a3);
  if (**v6)
    IOGPUDeviceTraceEvent();
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6632));
  return v7;
}

void sub_232C8100C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateEndOfTileProgramVariants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  os_unfair_lock_s *v9;
  _DWORD **v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  _BYTE *__src;
  void *__srca[2];
  int v37;
  char *v38;
  void *v39;
  uint64_t (**v41)();
  int v42;
  void *v43;
  void *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  __int16 v52;
  int v53;
  uint64_t (**v54)();
  int v55;
  void *__p;
  void *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[22];

  v9 = *(os_unfair_lock_s **)(a1 + 8);
  v10 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v55 = *(_DWORD *)(a2 + 8);
  v57 = 0;
  v58 = 0;
  __p = 0;
  v12 = *(_BYTE **)(a2 + 16);
  v11 = *(_BYTE **)(a2 + 24);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      abort();
    v14 = (char *)operator new(v11 - v12);
    v15 = &v14[4 * (v13 >> 2)];
    __p = v14;
    v58 = v15;
    memcpy(v14, v12, v13);
    v57 = v15;
  }
  v54 = off_250401A60;
  v61 = *(_OWORD *)(a2 + 72);
  v62 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)v63 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)&v63[14] = *(_QWORD *)(a2 + 118);
  v59 = *(_OWORD *)(a2 + 40);
  v60 = *(_OWORD *)(a2 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6636));
  if ((*(_QWORD *)&v63[8] | *(unsigned __int16 *)&v63[16] | *(unsigned __int16 *)&v63[18] | (unint64_t)*(unsigned __int16 *)&v63[20] | DWORD1(v59) | DWORD2(v59) | HIDWORD(v59) | v60 | DWORD1(v60) | DWORD2(v60) | HIDWORD(v60) | v61 | DWORD1(v61) | DWORD2(v61) | HIDWORD(v61) | ((DWORD1(v59) | v59 | DWORD2(v59) | HIDWORD(v59) | v60 | DWORD1(v60) | DWORD2(v60) | HIDWORD(v60) | v61 | DWORD1(v61) | DWORD2(v61) | HIDWORD(v61) | v62 | DWORD1(v62) | DWORD2(v62) | HIDWORD(v62) | *(_DWORD *)v63) & 0x2000000 | (((BYTE4(v59) | v59 | BYTE8(v59) | BYTE12(v59) | v60 | BYTE4(v60) | BYTE8(v60) | BYTE12(v60) | v61 | BYTE4(v61) | BYTE8(v61) | BYTE12(v61) | v62 | BYTE4(v62) | BYTE8(v62) | BYTE12(v62)) | v63[0]) != 0)) ^ v59 | v62 | DWORD1(v62) | DWORD2(v62) | HIDWORD(v62) | *(_DWORD *)v63) == 0x200000000000000)
  {
    do
      v16 = __ldaxr(&AGX::EndOfTileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::liveUberVariantUses);
    while (__stlxr(v16 + 1, &AGX::EndOfTileProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::liveUberVariantUses));
  }
  v17 = *a4;
  if (*a4)
  {
    if (*a5)
      goto LABEL_22;
  }
  else
  {
    v17 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::G9::EndOfTileProgram>(a1, v9, (AGX::EndOfTileProgramKey *)&v54, a3);
    *a4 = v17;
    if (*a5)
      goto LABEL_22;
  }
  v18 = *(unsigned __int16 *)(a2 + 120);
  if (v18 <= 0xFF && *(_WORD *)(a2 + 122) == 0 && *(_WORD *)(a2 + 124) == 0)
  {
    *a5 = v17;
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 1896);
    if (v21)
    {
      *a5 = v21;
    }
    else
    {
      v37 = *(_DWORD *)(a2 + 8);
      v22 = *(_BYTE **)(a2 + 24);
      __src = *(_BYTE **)(a2 + 16);
      v23 = v22 - __src;
      if (v22 == __src)
      {
        v25 = 0;
      }
      else
      {
        if (v23 < 0)
          abort();
        v24 = (char *)operator new(v22 - __src);
        v33 = &v24[4 * (v23 >> 2)];
        v39 = v24;
        memcpy(v24, __src, v23);
        v25 = v33;
        v23 = (int64_t)v39;
      }
      v34 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)__srca = *(_OWORD *)(a2 + 40);
      v31 = *(_OWORD *)(a2 + 88);
      v32 = *(_OWORD *)(a2 + 72);
      v26 = *(_QWORD *)(a2 + 104);
      v30 = *(unsigned int *)(a2 + 116);
      v42 = v37;
      v44 = 0;
      v45 = 0;
      v43 = 0;
      v27 = (int64_t)&v25[-v23];
      if (v25 != (char *)v23)
      {
        if (v27 < 0)
          abort();
        v28 = (char *)operator new((size_t)&v25[-v23]);
        v38 = &v28[4 * (v27 >> 2)];
        v43 = v28;
        v45 = v38;
        memcpy(v28, (const void *)v23, v27);
        v44 = v38;
      }
      v41 = off_250401A60;
      v46 = *(_OWORD *)__srca;
      v47 = v34;
      v48 = v32;
      v49 = v31;
      v50 = v26;
      v51 = v18 | (unint64_t)(v30 << 32);
      v52 = v18;
      v53 = 0;
      v29 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::G9::EndOfTileProgram>(a1, v9, (AGX::EndOfTileProgramKey *)&v41, a3);
      *a5 = v29;
      if ((*(_BYTE *)(*a4 + 1888) != 0) == (*(_BYTE *)(v29 + 1888) != 0))
        *(_QWORD *)(*a4 + 1896) = v29;
      v41 = off_250401AA0;
      if (v43)
      {
        v44 = v43;
        operator delete(v43);
      }
      if (v23)
        operator delete((void *)v23);
    }
  }
LABEL_22:
  if (**v10)
    IOGPUDeviceTraceEvent();
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6636));
  v54 = off_250401AA0;
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
}

void sub_232C814A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  os_unfair_lock_s *v41;
  void *v42;

  if (__p)
    operator delete(__p);
  if (v42)
    operator delete(v42);
  os_unfair_lock_unlock(v41);
  if (a40)
    operator delete(a40);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::G9::EndOfTileProgram>(uint64_t a1, os_unfair_lock_s *a2, AGX::EndOfTileProgramKey *a3, uint64_t a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  char **v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, void *);
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  AGX::EndOfTileProgramKey *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  unint64_t v46;
  void *v47;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v52;
  CC_SHA256_CTX *p_c;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 0;
  v8 = a2 + 262;
  os_unfair_lock_lock(a2 + 262);
  v9 = VectorMap<AGX::EndOfTileProgramKey,AGX::ProgramVariantEntry<AGX::G9::EndOfTileProgramVariant>,4u>::operator[]((uint64_t)a2, (uint64_t)a3);
  v10 = v9;
  if (*(_QWORD *)v9)
  {
    if (!*(_BYTE *)(v9 + 40))
    {
      os_unfair_lock_unlock(v8);
      dispatch_group_wait(*(dispatch_group_t *)v10, 0xFFFFFFFFFFFFFFFFLL);
      v31 = *(_QWORD *)(v10 + 8);
      v42[3] = v31;
      goto LABEL_25;
    }
    v12 = (_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      AGX::EndOfTileProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantPDSState(v11 + 512);
      v13 = AGX::EndOfTileProgramVariantBase<AGX::G9::Encoders,AGX::G9::Classes>::~EndOfTileProgramVariantBase(v11);
      MEMORY[0x234927ECC](v13, 0x10F2C40DEF1E504);
    }
    *v12 = 0;
    *(_QWORD *)(v10 + 16) = 0;

    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_BYTE *)(v10 + 40) = 0;
    v14 = *(NSObject **)v10;
  }
  else
  {
    v14 = dispatch_group_create();
    *(_QWORD *)v10 = v14;
  }
  dispatch_group_enter(v14);
  os_unfair_lock_unlock(v8);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v15 = *(_QWORD *)(a1 + 5464);
  v16 = MEMORY[0x24BDAC760];
  v33 = MEMORY[0x24BDAC760];
  v34 = 3221225472;
  v35 = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_23EndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_16EndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v36 = &unk_250400288;
  v37 = &v41;
  v38 = a1;
  v39 = a3;
  v40 = v10;
  if (AGX::EndOfTileProgramKey::isPrecompiledToPipelineCache(a3))
    v17 = *(_QWORD *)(v15 + 8);
  else
    v17 = 0;
  v18 = (void *)objc_opt_new();
  objc_msgSend(v18, "setSync:", 1, v33, v34, v35, v36, v37, v38, v39, v40);
  objc_msgSend(v18, "setPipelineCache:", v17);
  objc_msgSend(v18, "setBinaryArchives:", a4);
  v45[0] = v16;
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_2504023B8;
  v45[4] = &v33;
  v46 = 0;
  v47 = 0;
  AGX::EndOfTileProgramKey::serialize((std::vector<unsigned int> *)a3, (unsigned int **)&v47, &v46);
  v19 = dispatch_data_create(v47, v46, 0, 0);
  objc_msgSend(v18, "setDriverKeyData:", v19);
  if (objc_msgSend(v18, "airScript"))
  {
    v20 = objc_msgSend(v18, "airScript");
    v55 = 0uLL;
    *(_QWORD *)&v56 = 0;
    *(_QWORD *)&v55 = dispatch_data_create_map(v20, (const void **)&v55 + 1, (size_t *)&v56);
    v21 = *((_QWORD *)&v55 + 1);
    v22 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(AGX::EndOfTileProgramKey *, CC_SHA256_CTX *))a3)(a3, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v21 + v22), &data, (size_t *)len, v23, v24))
    {
      v25 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v25);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v55);
    v55 = *(_OWORD *)md;
    v56 = v52;
    objc_msgSend(v18, "setVendorPluginFunctionId:", &v55);
  }
  *(_QWORD *)c.count = v16;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v18;
  *(_QWORD *)c.wbuf = v45;
  if (objc_msgSend(v18, "function"))
  {
    v26 = mach_absolute_time();
    v27 = *(void **)v15;
    *(_QWORD *)md = v16;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v52 = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v52 + 1) = &unk_250402458;
    p_c = &c;
    v54 = v26;
    objc_msgSend(v27, "compileFunctionRequest:completionHandler:", v18, md);
  }
  else
  {
    if (objc_msgSend(v18, "frameworkData") || objc_msgSend(v18, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v16;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v52 = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v52 + 1) = &unk_250402430;
    p_c = &c;
    v28 = objc_msgSend((id)objc_msgSend(v18, "binaryArchives"), "count");
    v29 = *(void **)v15;
    v30 = objc_msgSend(v18, "driverKeyData");
    if (v28)
      objc_msgSend(v29, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v30, objc_msgSend(v18, "binaryArchives"), 0, objc_msgSend(v18, "pipelineCache"), objc_msgSend(v18, "sync"), md);
    else
      objc_msgSend(v29, "compileRequest:pipelineCache:sync:completionHandler:", v30, objc_msgSend(v18, "pipelineCache"), objc_msgSend(v18, "sync"), md);
  }
  dispatch_release(v19);

  v31 = v42[3];
LABEL_25:
  if (!v31)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v41, 8);
  return v31;
}

void sub_232C819B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  dispatch_release(*(dispatch_object_t *)(v9 - 128));
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_23EndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_16EndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v4;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  _OWORD *v18;
  uint64_t v19;
  unsigned int **v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int *v24;
  unsigned int **v25;
  int *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  const char *v34;
  unsigned __int16 *v35;
  const char *v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41;
  _QWORD *v42;
  unsigned int **v43;
  uint64_t v44;
  _QWORD *v45;
  const void **v46;
  const void **v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  const void **v51;
  uint64_t v52;
  const void *v53;
  const void **v54;
  uint64_t v55;
  uint64_t v56;
  const void **v57;
  unsigned int **v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  const void *v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  std::vector<unsigned int>::pointer begin;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  int32x4_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  std::vector<unsigned int>::pointer v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned __int16 *v177;
  uint64_t v178;
  int v179;
  unsigned __int8 v180;
  unsigned __int16 *v181;
  uint64_t v182;
  const void **v183;
  unsigned __int16 *v184;
  uint64_t v185;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned __int16 *v188;
  uint64_t v189;
  unsigned __int16 *v190;
  uint64_t v191;
  unsigned __int16 *v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  unsigned int **v204;
  int *v205;
  unsigned __int16 *v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int **v209;
  int *v210;
  unsigned __int16 *v211;
  uint64_t v212;
  int *v213;
  unsigned __int16 *v214;
  uint64_t v215;
  unsigned __int16 *v216;
  uint64_t v217;
  const char *v218;
  const void **v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  unsigned __int16 *v228;
  uint64_t v229;
  unsigned int *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  _QWORD *v237;
  _BYTE *v238;
  uint64_t v239;
  unsigned __int16 *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  BOOL v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unsigned __int16 *v273;
  __int128 v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  uint64_t v293;
  const char *v294;
  const char *v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  unsigned int **v301;
  std::vector<unsigned int> *v302;
  uint64_t v303;
  unint64_t *v304;
  void *v305[15];
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  unint64_t v315;
  uint64_t v316;
  char v317;
  unint64_t v318[2];
  _OWORD v319[2];
  _BYTE buf[48];
  __int16 v321;
  uint64_t v322;
  int v323;
  char v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  unsigned int v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  _BYTE v333[25];
  uint64_t v334;

  v334 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v294 = "MTLCompilerErrorTimeout";
    v295 = "UnknownErrorCode";
    if (a3 == 2)
      v295 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v294 = v295;
    if (a3 == 1)
      v296 = "MTLCompilerErrorFatalError";
    else
      v296 = v294;
    v305[0] = 0;
    v318[0] = 0;
    AGX::EndOfTileProgramKey::serialize(*(std::vector<unsigned int> **)(a1 + 48), (unsigned int **)v305, v318);
    *(_QWORD *)buf = a4;
    *(_QWORD *)&buf[8] = v296;
    *(_QWORD *)&buf[16] = v318[0];
    *(void **)&buf[24] = v305[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v8 = *(_QWORD *)(a1 + 40);
  v9 = operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap((uint64_t *)v305, (unsigned int **)a2, 0, 1, 0, 0, 0, 0, v10, v11, v12, 0);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)v9 = v8;
  *(_OWORD *)(v9 + 8) = 0u;
  v14 = (uint64_t *)(v9 + 8);
  v302 = (std::vector<unsigned int> *)(v9 + 32);
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 60) = 0x380000010ELL;
  v15 = (unint64_t *)(v8 + 6744);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_OWORD *)(v9 + 120) = 0u;
  v17 = (unint64_t *)(v9 + 120);
  *(_QWORD *)(v9 + 112) = v16;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_QWORD *)(v9 + 216) = 0;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  v18 = (_OWORD *)(v9 + 328);
  *(_QWORD *)(v9 + 264) = 0;
  *(_BYTE *)(v9 + 432) = 0;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_QWORD *)(v9 + 168) = 0;
  *(_OWORD *)(v9 + 296) = 0u;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 344) = 0u;
  *(_OWORD *)(v9 + 360) = 0u;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *(_OWORD *)(v9 + 408) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  *(_QWORD *)(v9 + 421) = 0;
  v19 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v9 + 500) = 0;
  *(_OWORD *)(v9 + 471) = 0u;
  *(_OWORD *)(v9 + 487) = 0u;
  *(_OWORD *)(v9 + 455) = 0u;
  if (v19)
  {
    v20 = (unsigned int **)(a2 + 784);
    if (*(_QWORD *)(a2 + 232))
      v20 = (unsigned int **)(a2 + 224);
  }
  else
  {
    v20 = (unsigned int **)(a2 + 784);
  }
  v21 = 0;
  if (*v20 && v20[1])
    v21 = (int *)((char *)*v20 + **v20);
  v22 = (unsigned __int16 *)((char *)v21 - *v21);
  v298 = a1;
  v299 = a4;
  if (*v22 >= 5u && (v23 = v22[2]) != 0)
    v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  else
    v24 = 0;
  if (*(_QWORD *)(a2 + 464))
  {
    v25 = (unsigned int **)(a2 + 1024);
    if (*(_QWORD *)(a2 + 472))
      v25 = (unsigned int **)(a2 + 464);
  }
  else
  {
    v25 = (unsigned int **)(a2 + 1024);
  }
  v26 = 0;
  if (*v25 && v25[1])
    v26 = (int *)((char *)*v25 + **v25);
  v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 >= 5u && (v28 = v27[2]) != 0)
    v29 = (int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
  else
    v29 = 0;
  v30 = (unsigned __int16 *)((char *)v29 - *v29);
  if (*v30 < 7u)
  {
    LODWORD(v31) = 0;
  }
  else
  {
    v31 = v30[3];
    if (v31)
      LODWORD(v31) = *(int *)((char *)v29 + v31);
  }
  *(_DWORD *)(v9 + 108) = v31;
  v32 = (unsigned __int16 *)((char *)v29 - *v29);
  v300 = v13;
  v301 = (unsigned int **)(a2 + 464);
  if (*v32 >= 0x13u && (v33 = v32[9]) != 0)
    v34 = (char *)v29 + v33 + *(unsigned int *)((char *)v29 + v33) + 4;
  else
    v34 = "";
  v304 = (unint64_t *)(v9 + 144);
  MEMORY[0x234927D28](v9 + 120, v34);
  v35 = (unsigned __int16 *)((char *)v29 - *v29);
  v36 = "";
  if (*v35 >= 9u)
  {
    v37 = v35[4];
    if (v37)
      v36 = (char *)v29 + v37 + *(unsigned int *)((char *)v29 + v37) + 4;
  }
  MEMORY[0x234927D28](v304, v36);
  v38 = (unsigned __int16 *)((char *)v29 - *v29);
  if (*v38 < 0x11u)
  {
    LODWORD(v39) = 0;
  }
  else
  {
    v39 = v38[8];
    if (v39)
      LODWORD(v39) = *(int *)((char *)v29 + v39);
  }
  *(_DWORD *)(v9 + 424) = v39;
  v41 = (const void **)(a2 + 24);
  v40 = *(_QWORD *)(a2 + 24);
  v42 = (_QWORD *)a2;
  v43 = (unsigned int **)(a2 + 224);
  if (v40)
  {
    v44 = v42[4];
    v45 = v42;
    v46 = (const void **)(v42 + 73);
    if (v44)
      v47 = v41;
    else
      v47 = v46;
  }
  else
  {
    v45 = v42;
    v47 = (const void **)(v42 + 73);
  }
  v303 = v8 + 4512;
  AGX::Heap<true>::allocateImpl(buf, v8 + 4680, (uint64_t)v47[1], (_QWORD *)(v9 + 480));
  *(_DWORD *)(v9 + 504) += *(_DWORD *)&buf[16];
  v48 = *(_OWORD *)&buf[16];
  *v18 = *(_OWORD *)buf;
  *(_OWORD *)(v9 + 344) = v48;
  *(_OWORD *)(v9 + 353) = *(_OWORD *)&buf[25];
  v49 = *(void **)(v9 + 336);
  *(_QWORD *)(v9 + 168) = *(_QWORD *)(v9 + 328);
  *(_QWORD *)(v9 + 176) = v8 + 4680;
  v297 = v8 + 4680;
  v50 = *(_OWORD *)(v9 + 344);
  *(_OWORD *)(v9 + 184) = *v18;
  *(_OWORD *)(v9 + 200) = v50;
  *(_OWORD *)(v9 + 209) = *(_OWORD *)(v9 + 353);
  v51 = v41;
  if (*v41)
  {
    v52 = v45[4];
    if (v52)
      v53 = *v41;
    else
      v53 = (const void *)v45[73];
    if (v52)
      v54 = v41;
    else
      v54 = (const void **)(v45 + 73);
  }
  else
  {
    v54 = (const void **)(v45 + 73);
    v53 = (const void *)v45[73];
  }
  memcpy(v49, v53, (size_t)v54[1]);
  v55 = *(_QWORD *)(v9 + 336);
  v56 = *(_QWORD *)(v9 + 344);
  *(_QWORD *)(v9 + 280) = *(_QWORD *)(v9 + 168);
  *(_QWORD *)(v9 + 288) = v55;
  *(_QWORD *)(v9 + 296) = v56;
  v57 = (const void **)(v45 + 8);
  v58 = v43;
  if (v45[8])
  {
    if (v45[9])
      v59 = v45 + 8;
    else
      v59 = v45 + 78;
    v60 = v59[1];
    v61 = v45;
    if (!v60)
      goto LABEL_72;
LABEL_63:
    AGX::Heap<true>::allocateImpl(buf, v303, v60, (_QWORD *)(v9 + 488));
    *(_DWORD *)(v9 + 504) += *(_DWORD *)&buf[16];
    v62 = *(_OWORD *)&buf[16];
    *(_OWORD *)(v9 + 376) = *(_OWORD *)buf;
    *(_OWORD *)(v9 + 392) = v62;
    *(_OWORD *)(v9 + 401) = *(_OWORD *)&buf[25];
    v63 = *(_OWORD *)(v9 + 392);
    *(_OWORD *)(v9 + 232) = *(_OWORD *)(v9 + 376);
    *(_OWORD *)(v9 + 248) = v63;
    *(_OWORD *)(v9 + 257) = *(_OWORD *)(v9 + 401);
    if (*v57)
    {
      v64 = v61[9];
      if (v64)
        v65 = *v57;
      else
        v65 = (const void *)v61[78];
      if (v64)
        v66 = v45 + 8;
      else
        v66 = v61 + 78;
    }
    else
    {
      v66 = v61 + 78;
      v65 = (const void *)v61[78];
    }
    memcpy(*(void **)(v9 + 384), v65, v66[1]);
    goto LABEL_72;
  }
  v60 = v45[79];
  v61 = v45;
  if (v60)
    goto LABEL_63;
LABEL_72:
  v67 = *(_QWORD *)v9;
  if (*(_BYTE *)(*(_QWORD *)v9 + 6681))
  {
    {
      {
        v69 = v9 + 120;
        if (*(char *)(v9 + 143) < 0)
          v69 = *v17;
        v70 = v9 + 144;
        if (*(char *)(v9 + 167) < 0)
          v70 = *v304;
        v71 = *(_DWORD *)(v9 + 108);
        v72 = *(_QWORD *)(v9 + 168);
        v73 = *(_QWORD *)(v9 + 344);
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = v69;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "";
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v70;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v71;
        *(_WORD *)&buf[38] = 2050;
        *(_QWORD *)&buf[40] = v72;
        v321 = 2050;
        v322 = v73;
        _os_signpost_emit_with_name_impl(&dword_232C19000, v68, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", buf, 0x3Au);
        v67 = *(_QWORD *)v9;
      }
    }
    v74 = v9 + 120;
    if (*(char *)(v9 + 143) < 0)
      v74 = *v17;
    v75 = v9 + 144;
    if (*(char *)(v9 + 167) < 0)
      v75 = *v304;
    v76 = *(_DWORD *)(v9 + 108);
    v77 = *(_QWORD *)(v9 + 168);
    v78 = *(_QWORD *)(v9 + 344);
    *(_QWORD *)buf = v74;
    *(_QWORD *)&buf[8] = "";
    *(_QWORD *)&buf[16] = v75;
    *(_DWORD *)&buf[24] = v76;
    *(_QWORD *)&buf[32] = v77;
    *(_QWORD *)&buf[40] = v78;
    LOBYTE(v321) = 0;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(v67, v9, (__int128 *)buf);
  }
  v79 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v79 < 0x17u)
  {
    LODWORD(v80) = 0;
  }
  else
  {
    v80 = v79[11];
    if (v80)
      LODWORD(v80) = *(int *)((char *)v24 + v80);
  }
  v81 = ((unint64_t)v80 + 3) >> 2;
  v82 = *(_QWORD *)(v9 + 8);
  v83 = (*(_QWORD *)(v9 + 16) - v82) >> 2;
  if (v81 <= v83)
  {
    if (v81 < v83)
      *(_QWORD *)(v9 + 16) = v82 + 4 * v81;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v9 + 8), v81 - v83);
  }
  v84 = v312;
  if (v317)
    v85 = v312;
  else
    v85 = 0;
  if (!v316)
    v84 = 0;
  v86 = v85 + v313 + v84 + v314 + ((v307 + v309 + v311 - (v306 + v308 + v310) + 1) & 0xFFFFFFFE);
  v87 = *(_QWORD *)(v9 + 32);
  v88 = (*(_QWORD *)(v9 + 40) - v87) >> 2;
  if (v86 <= v88)
  {
    if (v86 < v88)
      *(_QWORD *)(v9 + 40) = v87 + 4 * v86;
  }
  else
  {
    std::vector<unsigned int>::__append(v302, v86 - v88);
  }
  v89 = *(unsigned __int16 *)((char *)v24 - *v24 + 12);
  v90 = *(unsigned int *)((char *)v24 + v89);
  v91 = (unsigned int *)((char *)v24 + v89 + v90);
  v92 = *v91;
  if ((_DWORD)v92)
  {
    v93 = 0;
    v94 = 4 * v92;
    v95 = (char *)v24 + v89 + v90;
    do
    {
      v97 = v91[v93 / 4 + 1];
      v98 = v97 - *(int *)((char *)&v91[v93 / 4 + 1] + v97);
      v99 = &v95[v93 + v98];
      v100 = *((unsigned __int16 *)v99 + 2);
      if (v100 < 7)
        goto LABEL_105;
      v101 = *((unsigned __int16 *)v99 + 5);
      if (v101 && (*(_DWORD *)&v95[v93 + 4 + v97 + v101] & 0x80000000) != 0)
        goto LABEL_107;
      if (v100 >= 9 && (v102 = *(unsigned __int16 *)&v95[v93 + 12 + v98]) != 0)
        v96 = *(_DWORD *)&v95[v93 + 4 + v97 + v102];
      else
LABEL_105:
        v96 = 0;
      *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4 * (((v96 >> 1) & 0x1FFFFFFF) + v307 + v309 - (v306 + v308 + v310))) = *(_DWORD *)(v9 + 64);
LABEL_107:
      v93 += 4;
    }
    while (v94 != v93);
  }
  if (v316)
  {
    v103 = v312;
    if (v312)
    {
      v104 = v315;
      if (v315)
      {
        if (!v317)
          v103 = 0;
        v105 = v103 + ((v307 + v309 + v311 - (v306 + v308 + v310) + 1) & 0xFFFFFFFE);
        begin = v302->__begin_;
        do
        {
          v107 = __clz(__rbit64(v104));
          v108 = 1 << v107;
          v109 = (24 * v107 + 1088) >> 3;
          begin[v105] = v109;
          begin[v105 + 1] = v109 + 1;
          begin[v105 + 2] = v109 + 2;
          v105 += 4;
          v104 &= ~v108;
        }
        while (v104);
      }
    }
  }
  v110 = *v24;
  v111 = *(unsigned __int16 *)((char *)v24 - v110 + 24);
  v112 = *(unsigned int *)((char *)v24 + v111);
  if (!*(int *)((char *)v24 + v111 + v112))
  {
    v115 = -v110;
    goto LABEL_200;
  }
  v113 = 0;
  v114 = 0;
  do
  {
    v120 = v111;
    v121 = v111 + v112;
    v122 = *(unsigned int *)((char *)&v24[v113 + 1] + v121);
    v123 = v121 + v122;
    v124 = *(int *)((char *)&v24[v113 + 1] + v123);
    v125 = (char *)&v24[v113] + v123 - v124;
    v126 = *((unsigned __int16 *)v125 + 2);
    if (v126 < 9)
    {
      if (v126 < 5)
        goto LABEL_127;
      v128 = *v14;
    }
    else
    {
      v127 = *((unsigned __int16 *)v125 + 6);
      if (v127)
        v127 = *(unsigned int *)((char *)v24 + v120 + v112 + v122 + v113 * 4 + v127 + 4);
      v128 = *v14 + 4 * v127;
    }
    v129 = v120 + v112 + v122;
    if (*(_WORD *)((char *)&v24[v113 + 2] + v129 - v124))
    {
      switch(*((_BYTE *)v24 + v129 + v113 * 4 + *(unsigned __int16 *)((char *)&v24[v113 + 2] + v129 - v124) + 4))
      {
        case 1:
          if (v126 >= 7
            && (v130 = v120 + v112 + v122, (v131 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v130 - v124 + 2)) != 0))
          {
            v132 = *(int *)((char *)v24 + v130 + v113 * 4 + v131 + 4);
          }
          else
          {
            v132 = 0;
          }
          v135 = v132 + 131;
          goto LABEL_195;
        case 3:
          if (v126 >= 7
            && (v144 = v120 + v112 + v122, (v145 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v144 - v124 + 2)) != 0))
          {
            v146 = *(int *)((char *)v24 + v144 + v113 * 4 + v145 + 4);
          }
          else
          {
            v146 = 0;
          }
          v160 = (24 * v146 + 1088) >> 2;
          *(_DWORD *)v128 = v160;
          DWORD1(v4) |= 1u;
          DWORD2(v4) |= 1u;
          HIDWORD(v4) |= 1u;
          v161 = vaddq_s32(vdupq_n_s32(v160), (int32x4_t)xmmword_232D736A0);
          v161.i32[0] = v160 | 1;
          *(int32x4_t *)(v128 + 4) = v161;
          *(_DWORD *)(v128 + 20) = v160 + 5;
          break;
        case 5:
          if (v126 >= 7
            && (v140 = v120 + v112 + v122, (v141 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v140 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v140 + v113 * 4 + v141 + 4) + 114;
          }
          else
          {
            v135 = 114;
          }
          goto LABEL_195;
        case 0x3F:
          v152 = *(_DWORD *)(v9 + 60);
          goto LABEL_196;
        case 0x40:
          *(_QWORD *)v128 = 0x300000002;
          break;
        case 0x63:
          if (v126 >= 7
            && (v142 = v120 + v112 + v122, (v143 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v142 - v124 + 2)) != 0))
          {
            v116 = *(int *)((char *)v24 + v142 + v113 * 4 + v143 + 4);
          }
          else
          {
            v116 = 0;
          }
          v117 = 8 * v116 + 160;
          goto LABEL_126;
        case 0x64:
          if (v126 >= 7
            && (v147 = v120 + v112 + v122, (v148 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v147 - v124 + 2)) != 0))
          {
            v149 = *(int *)((char *)v24 + v147 + v113 * 4 + v148 + 4);
          }
          else
          {
            v149 = 0;
          }
          v117 = 8 * v149 + 296;
          goto LABEL_126;
        case 0x69:
          *(_QWORD *)v128 = 0x6D0000006CLL;
          break;
        case 0x6A:
          *(_DWORD *)v128 = 110;
          break;
        case 0x6B:
          *(_DWORD *)v128 = 111;
          break;
        case 0x7A:
          *(_OWORD *)v128 = xmmword_232D735A0;
          *(_OWORD *)(v128 + 16) = xmmword_232D735B0;
          *(_OWORD *)(v128 + 32) = xmmword_232D735C0;
          *(_OWORD *)(v128 + 48) = xmmword_232D735D0;
          *(_DWORD *)(v128 + 64) = 147;
          break;
        case 0x7E:
          *(_OWORD *)v128 = xmmword_232D73660;
          *(_OWORD *)(v128 + 16) = xmmword_232D73670;
          *(_OWORD *)(v128 + 32) = xmmword_232D73680;
          *(_OWORD *)(v128 + 48) = xmmword_232D73690;
          *(_DWORD *)(v128 + 64) = 130;
          break;
        case 0x7F:
          *(_OWORD *)v128 = xmmword_232D735E0;
          *(_OWORD *)(v128 + 16) = xmmword_232D735F0;
          *(_OWORD *)(v128 + 32) = xmmword_232D73600;
          *(_OWORD *)(v128 + 48) = xmmword_232D73610;
          *(_DWORD *)(v128 + 64) = 106;
          break;
        case 0x80:
          *(_OWORD *)v128 = xmmword_232D73620;
          *(_OWORD *)(v128 + 16) = xmmword_232D73630;
          *(_OWORD *)(v128 + 32) = xmmword_232D73640;
          *(_OWORD *)(v128 + 48) = xmmword_232D73650;
          *(_DWORD *)(v128 + 64) = 72;
          break;
        case 0x81:
          *(_OWORD *)v128 = xmmword_232D73550;
          *(_OWORD *)(v128 + 16) = xmmword_232D73560;
          *(_OWORD *)(v128 + 32) = xmmword_232D73570;
          *(_OWORD *)(v128 + 48) = xmmword_232D73580;
          *(_OWORD *)(v128 + 64) = xmmword_232D73590;
          break;
        case 0x84:
          if (v126 >= 7
            && (v150 = v120 + v112 + v122, (v151 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v150 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v150 + v113 * 4 + v151 + 4) + 199;
          }
          else
          {
            v135 = 199;
          }
          goto LABEL_195;
        case 0x85:
          if (v126 >= 7
            && (v155 = v120 + v112 + v122, (v156 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v155 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v155 + v113 * 4 + v156 + 4) + 148;
          }
          else
          {
            v135 = 148;
          }
          goto LABEL_195;
        case 0x86:
          if (v126 >= 7
            && (v153 = v120 + v112 + v122, (v154 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v153 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v153 + v113 * 4 + v154 + 4) + 165;
          }
          else
          {
            v135 = 165;
          }
          goto LABEL_195;
        case 0x87:
          if (v126 >= 7
            && (v133 = v120 + v112 + v122, (v134 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v133 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v133 + v113 * 4 + v134 + 4) + 216;
          }
          else
          {
            v135 = 216;
          }
          goto LABEL_195;
        case 0x88:
          if (v126 >= 7
            && (v138 = v120 + v112 + v122, (v139 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v138 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v138 + v113 * 4 + v139 + 4) + 233;
          }
          else
          {
            v135 = 233;
          }
          goto LABEL_195;
        case 0x89:
          if (v126 >= 7
            && (v157 = v120 + v112 + v122, (v158 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v157 - v124 + 2)) != 0))
          {
            v159 = *(int *)((char *)v24 + v157 + v113 * 4 + v158 + 4);
          }
          else
          {
            v159 = 0;
          }
          v117 = 8 * v159 + 24;
LABEL_126:
          v118 = v117 >> 2;
          *(_DWORD *)v128 = v118;
          *(_DWORD *)(v128 + 4) = v118 | 1;
          break;
        case 0x8A:
          if (v126 >= 7
            && (v136 = v120 + v112 + v122, (v137 = *(unsigned __int16 *)((char *)&v24[v113 + 2] + v136 - v124 + 2)) != 0))
          {
            v135 = *(int *)((char *)v24 + v136 + v113 * 4 + v137 + 4) + 182;
          }
          else
          {
            v135 = 182;
          }
LABEL_195:
          v152 = v135 & 0x3FFFFFFF;
LABEL_196:
          *(_DWORD *)v128 = v152;
          break;
        default:
          break;
      }
    }
LABEL_127:
    ++v114;
    v119 = *v24;
    v111 = *(unsigned __int16 *)((char *)v24 - v119 + 24);
    v112 = *(unsigned int *)((char *)v24 + v111);
    ++v113;
  }
  while (v114 < *(unsigned int *)((char *)v24 + v111 + v112));
  v115 = -v119;
  LODWORD(v110) = *v24;
LABEL_200:
  v162 = *(unsigned __int16 *)((char *)v24 + v115 + 16);
  v163 = *(unsigned int *)((char *)v24 + v162);
  v164 = *(unsigned int *)((char *)v24 + v162 + v163);
  if ((_DWORD)v164)
  {
    v165 = 4 * v164;
    v166 = v302->__begin_;
    v167 = v162 + v163;
    while (1)
    {
      v170 = *(unsigned int *)((char *)v24 + v167 + 4);
      v171 = v170 - *(int *)((char *)v24 + v167 + v170 + 4);
      v172 = (char *)v24 + v167 + v171;
      v173 = *((unsigned __int16 *)v172 + 2);
      if (v173 >= 9)
        break;
      v168 = 0;
      v175 = -v306;
      if (v173 >= 7)
        goto LABEL_209;
LABEL_203:
      v169 = (24 * v168 + 1088) >> 3;
      v166[v175] = v169;
      v166[v175 + 1] = v169 + 1;
      v166[v175 + 2] = v169 + 2;
      v167 += 4;
      v165 -= 4;
      if (!v165)
      {
        LODWORD(v110) = *v24;
        goto LABEL_212;
      }
    }
    v174 = *((unsigned __int16 *)v172 + 6);
    if (v174)
      LODWORD(v174) = *(int *)((char *)v24 + v167 + v170 + v174 + 4);
    v175 = ((v174 >> 1) & 0x1FFFFFFF) - v306;
LABEL_209:
    v176 = *(unsigned __int16 *)((char *)v24 + v167 + v171 + 10);
    if (v176)
      v168 = *(int *)((char *)v24 + v167 + v170 + v176 + 4);
    else
      v168 = 0;
    goto LABEL_203;
  }
LABEL_212:
  v177 = (unsigned __int16 *)((char *)v24 - (int)v110);
  if (*v177 >= 0x21u && (v178 = v177[16]) != 0)
    v179 = *(int *)((char *)v24 + v178);
  else
    v179 = 0;
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(v9 + 68) = getAdditionalSpillBufferBytes(void)::extra + v179;
  v181 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v181 < 0x57u)
  {
    LODWORD(v182) = 0;
    v183 = v51;
  }
  else
  {
    v182 = v181[43];
    v183 = v51;
    if (v182)
      LODWORD(v182) = *(int *)((char *)v24 + v182);
  }
  *(_DWORD *)(v9 + 72) = v182;
  v184 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v184 < 0x43u)
  {
    LODWORD(v185) = 0;
  }
  else
  {
    v185 = v184[33];
    if (v185)
      LODWORD(v185) = *(int *)((char *)v24 + v185);
  }
  *(_DWORD *)(v9 + 76) = v185;
  v186 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v186 < 0x51u)
  {
    LODWORD(v187) = 0;
  }
  else
  {
    v187 = v186[40];
    if (v187)
      LODWORD(v187) = *(int *)((char *)v24 + v187);
  }
  *(_DWORD *)(v9 + 80) = v187;
  v188 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v188 < 0x4Fu)
  {
    LODWORD(v189) = 0;
  }
  else
  {
    v189 = v188[39];
    if (v189)
      LODWORD(v189) = *(int *)((char *)v24 + v189);
  }
  *(_DWORD *)(v9 + 88) = v189;
  v190 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v190 < 0x59u)
  {
    LODWORD(v191) = 0;
  }
  else
  {
    v191 = v190[44];
    if (v191)
      LODWORD(v191) = *(int *)((char *)v24 + v191);
  }
  *(_DWORD *)(v9 + 84) = v191;
  v192 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v192 < 5u)
  {
    LODWORD(v193) = 0;
  }
  else
  {
    v193 = v192[2];
    if (v193)
      LODWORD(v193) = *(int *)((char *)v24 + v193);
  }
  *(_BYTE *)(v9 + 56) = v315 != 0;
  v194 = 2 * (*(_DWORD *)(v9 + 40) - *(_DWORD *)(v9 + 32));
  v195 = *(_DWORD *)(v9 + 16) - *(_DWORD *)(v9 + 8) + v194;
  v196 = v306;
  v197 = v308;
  v199 = v310;
  v198 = v311;
  v200 = v307 + v309;
  v201 = v312;
  if (!v317)
    v201 = 0;
  *(_DWORD *)(v9 + 92) = v193;
  *(_DWORD *)(v9 + 96) = 8 * (v201 + ((v200 + v198 - (v196 + v197 + v199) + 1) & 0x1FFFFFFE));
  *(_DWORD *)(v9 + 100) = v195;
  *(_DWORD *)(v9 + 104) = v194 & 0xFFFFFFF8;
  v202 = v9 + 512;
  bzero((void *)(v9 + 512), 0x240uLL);
  v203 = *(_QWORD *)(v9 + 296);
  *(_OWORD *)(v9 + 1088) = *(_OWORD *)(v9 + 280);
  *(_QWORD *)(v9 + 1104) = v203;
  *(_OWORD *)(v9 + 1168) = 0u;
  *(_OWORD *)(v9 + 1184) = 0u;
  *(_QWORD *)(v9 + 1200) = 0;
  *(_OWORD *)(v9 + 1216) = 0u;
  *(_OWORD *)(v9 + 1232) = 0u;
  *(_QWORD *)(v9 + 1248) = 0;
  *(_QWORD *)(v9 + 1272) = 0;
  *(_OWORD *)(v9 + 1280) = 0u;
  *(_QWORD *)(v9 + 1304) = 0;
  *(_OWORD *)(v9 + 1136) = 0u;
  *(_DWORD *)(v9 + 1160) = 0;
  *(_QWORD *)(v9 + 1152) = 0;
  if (*v58)
  {
    v204 = (unsigned int **)(v61 + 98);
    if (v61[29])
      v204 = v58;
  }
  else
  {
    v204 = (unsigned int **)(v61 + 98);
  }
  v205 = 0;
  if (*v204 && v204[1])
    v205 = (int *)((char *)*v204 + **v204);
  v206 = (unsigned __int16 *)((char *)v205 - *v205);
  if (*v206 >= 5u && (v207 = v206[2]) != 0)
  {
    v208 = (unsigned int *)((char *)v205 + v207 + *(unsigned int *)((char *)v205 + v207));
    if (!*v301)
      goto LABEL_254;
LABEL_256:
    v209 = (unsigned int **)(v61 + 128);
    if (v61[59])
      v209 = v301;
  }
  else
  {
    v208 = 0;
    if (*v301)
      goto LABEL_256;
LABEL_254:
    v209 = (unsigned int **)(v61 + 128);
  }
  v210 = 0;
  if (*v209 && v209[1])
    v210 = (int *)((char *)*v209 + **v209);
  v211 = (unsigned __int16 *)((char *)v210 - *v210);
  if (*v211 >= 5u && (v212 = v211[2]) != 0)
    v213 = (int *)((char *)v210 + v212 + *(unsigned int *)((char *)v210 + v212));
  else
    v213 = 0;
  v214 = (unsigned __int16 *)((char *)v213 - *v213);
  if (*v214 < 7u)
  {
    LODWORD(v215) = 0;
  }
  else
  {
    v215 = v214[3];
    if (v215)
      LODWORD(v215) = *(int *)((char *)v213 + v215);
  }
  *(_DWORD *)(v9 + 1264) = v215;
  v216 = (unsigned __int16 *)((char *)v213 - *v213);
  if (*v216 >= 0x13u && (v217 = v216[9]) != 0)
    v218 = (char *)v213 + v217 + *(unsigned int *)((char *)v213 + v217) + 4;
  else
    v218 = "";
  MEMORY[0x234927D28](v9 + 1272, v218);
  if (*v183)
  {
    if (v61[4])
      v219 = v183;
    else
      v219 = (const void **)(v61 + 73);
  }
  else
  {
    v219 = (const void **)(v61 + 73);
  }
  *(_QWORD *)(v9 + 1296) = v219[1];
  memset(v333, 0, 24);
  v220 = (unsigned int *)((char *)v208 + *(unsigned __int16 *)((char *)v208 - (int)*v208 + 30));
  v221 = *(unsigned int *)((char *)v220 + *v220);
  if ((_DWORD)v221)
  {
    AGX::Heap<true>::allocateImpl(buf, v303, v221, (_QWORD *)(v9 + 1152));
    v222 = *(_QWORD *)buf;
    v223 = *(_QWORD *)&buf[8];
    *(_OWORD *)v333 = *(_OWORD *)&buf[16];
    *(_OWORD *)&v333[9] = *(_OWORD *)&buf[25];
    v224 = (int)*v208;
    v225 = *(unsigned __int16 *)((char *)v208 - v224 + 30);
    if (*(_WORD *)((char *)v208 - v224 + 30))
    {
      v226 = *(unsigned int *)((char *)v208 + v225);
      v227 = (char *)v208 + v225 + v226;
    }
    else
    {
      v225 = 0;
      v227 = 0;
      v226 = *v208;
    }
    memcpy(*(void **)&buf[8], v227 + 4, *(unsigned int *)((char *)v208 + v225 + v226));
    *(_DWORD *)(v9 + 1160) |= 4u;
  }
  else
  {
    v222 = 0;
    v223 = 0;
  }
  bzero(buf, 0x248uLL);
  v324 = 1;
  v325 = *(_QWORD *)(v9 + 1088);
  v228 = (unsigned __int16 *)((char *)v208 - (int)*v208);
  if (*v228 < 5u)
  {
    LODWORD(v229) = 0;
  }
  else
  {
    v229 = v228[2];
    if (v228[2])
      LODWORD(v229) = *(unsigned int *)((char *)v208 + v229);
  }
  v326 = v229;
  v230 = (unsigned int *)((char *)v208 + v228[4]);
  v231 = *(unsigned int *)((char *)v230 + *v230);
  v323 = v231;
  v232 = 0;
  if ((_DWORD)v231)
  {
    v233 = 0;
    v234 = 0;
    v235 = 0;
    v236 = *(unsigned int *)((char *)v230 + *v230) - 1;
    v237 = (_QWORD *)(v202 + 8 * v236 + 16);
    v238 = &buf[16 * v236];
    while (1)
    {
      v240 = (unsigned __int16 *)((char *)v208 - (int)*v208);
      if (*v240 < 9u)
      {
        v241 = 0;
      }
      else
      {
        v241 = v240[4];
        if (v241)
          v241 += (uint64_t)v208 + *(unsigned int *)((char *)v208 + v241);
      }
      v242 = *(unsigned int *)(v241 + v232 + 4);
      v243 = v241 + v232 + v242;
      v244 = v242 - *(int *)(v243 + 4);
      v245 = v241 + v232 + v244;
      v246 = *(unsigned __int16 *)(v245 + 4);
      if (v246 < 5)
        break;
      v247 = *(unsigned __int16 *)(v245 + 8);
      if (!v247)
        break;
      v248 = *(char *)(v241 + v232 + v247 + v242 + 4);
      if (!v248)
        break;
      if (v248 == 6)
      {
        *v237 = v222;
        v249 = v241 + v232 + v242 - *(int *)(v243 + 4);
        if (*(unsigned __int16 *)(v249 + 4) < 0xBu)
        {
          LODWORD(v250) = 0;
        }
        else
        {
          v250 = *(unsigned __int16 *)(v249 + 14);
          if (v250)
            LODWORD(v250) = *(_DWORD *)(v241 + v232 + v250 + v242 + 4);
        }
        v260 = 0;
        *((_DWORD *)v238 + 2) = v250;
        v261 = *(int *)(v243 + 4);
        v246 = *(unsigned __int16 *)(v241 + v232 + v242 - v261 + 4);
        if (v246 >= 9)
        {
          if (*(_WORD *)(v241 + v232 + v242 - v261 + 12))
            v260 = *(unsigned int *)(v241 + v232 + *(unsigned __int16 *)(v241 + v232 + v242 - v261 + 12) + v242 + 4);
          else
            v260 = 0;
        }
        ++v235;
        v256 = -v261;
        *(_QWORD *)v238 = v260;
        if (v246 < 5)
          goto LABEL_321;
LABEL_308:
        v257 = v241 + 4 * v233 + v242 + 4 + v256;
        v258 = *(unsigned __int16 *)(v257 + 4);
        if (!*(_WORD *)(v257 + 4))
          goto LABEL_310;
        goto LABEL_309;
      }
      v257 = v241 + v232 + v244 + 4;
      v258 = *(unsigned __int16 *)(v241 + v232 + v244 + 8);
      if (!v258)
      {
LABEL_310:
        if (v246 < 0xB)
        {
LABEL_321:
          LODWORD(v259) = 0;
        }
        else
        {
          v259 = *(unsigned __int16 *)(v257 + 10);
          if (*(_WORD *)(v257 + 10))
            LODWORD(v259) = *(_DWORD *)(v241 + v232 + v259 + v242 + 4);
        }
        *(_DWORD *)&buf[16 * v234 + 8] = v259;
        v262 = v241 + v232 + v242 - *(int *)(v243 + 4);
        if (*(unsigned __int16 *)(v262 + 4) >= 9u && (v263 = *(unsigned __int16 *)(v262 + 12)) != 0)
          v239 = *(unsigned int *)(v241 + v232 + v263 + v242 + 4);
        else
          v239 = 0;
        *(_QWORD *)&buf[16 * v234++] = v239;
        goto LABEL_292;
      }
LABEL_309:
      if (*(_BYTE *)(v241 + v232 + v258 + v242 + 4) != 6)
        goto LABEL_310;
LABEL_292:
      ++v233;
      v232 += 4;
      if (4 * v231 == v232)
      {
        v232 = v231;
        goto LABEL_327;
      }
    }
    LODWORD(v251) = 0;
    v252 = v202 + 8 * v234;
    *(_DWORD *)(v252 + 16) = 0;
    v253 = v252 + 16;
    v254 = v242 - *(int *)(v243 + 4);
    if (*(unsigned __int16 *)(v241 + v232 + v254 + 4) >= 0xDu)
    {
      v251 = *(unsigned __int16 *)(v241 + v232 + v254 + 16);
      if (*(_WORD *)(v241 + v232 + v254 + 16))
        LODWORD(v251) = *(_DWORD *)(v241 + v232 + v251 + v242 + 4);
    }
    *(_DWORD *)(v253 + 4) = 4 * v251;
    v255 = *(int *)(v243 + 4);
    v256 = -v255;
    v246 = *(unsigned __int16 *)(v241 + v232 + v242 - v255 + 4);
    if (v246 < 5)
      goto LABEL_321;
    goto LABEL_308;
  }
  v235 = 0;
  v234 = 0;
LABEL_327:
  v327 = v9 + 512 + 8 * v232 + 16;
  v264 = (2 * v231);
  v328 = 2 * v231;
  v265 = 2 * (v231 - 1) + 7;
  v266 = v231 + 1;
  v267 = (_DWORD)v231 == 0;
  v268 = 4;
  if (!v267)
    v268 = v265;
  v269 = ((v268 + v264) & 0x7FFFFFFFCLL) - v264;
  v330 = v269;
  v331 = (v266 & 0x1FFFFFFFCLL) + 4;
  v332 = 0;
  *(_DWORD *)(v9 + 512) = v234;
  *(_DWORD *)(v9 + 524) = v235 + (v269 >> 1);
  AGX::Heap<true>::allocateImpl(v318, v297, 4 * ((v266 & 0x1FFFFFFFCLL) + 4), (_QWORD *)(v9 + 1144));
  v270 = v318[1];
  *(_QWORD *)(v9 + 1112) = v318[0];
  v329 = v270;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)buf, 0);
  LODWORD(v271) = 0;
  v272 = 4 * (v330 + v328) + 12;
  *(_QWORD *)(v9 + 1120) = v272 & 0xFFFFFFFFFFFFFFF0;
  *(_DWORD *)(v9 + 1128) = 0;
  v273 = (unsigned __int16 *)((char *)v208 - (int)*v208);
  if (*v273 > 6u)
  {
    v271 = v273[3];
    if (v273[3])
      LODWORD(v271) = ((*(unsigned int *)((char *)v208 + v271) << 6) + 960) & 0xFFFFFC00;
  }
  *(_DWORD *)(v9 + 1128) = (8 * v332 + 24) & 0xFFFFFFE0 | v271 | (v272 >> 4);
  v274 = v319[0];
  *(_OWORD *)(v9 + 1168) = *(_OWORD *)v318;
  *(_OWORD *)(v9 + 1184) = v274;
  *(_OWORD *)(v9 + 1193) = *(_OWORD *)((char *)v319 + 9);
  *(_QWORD *)(v9 + 1216) = v222;
  *(_QWORD *)(v9 + 1224) = v223;
  *(_OWORD *)(v9 + 1232) = *(_OWORD *)v333;
  *(_OWORD *)(v9 + 1241) = *(_OWORD *)&v333[9];
  v275 = *(_DWORD *)(v300 + 40);
  v276 = *(_DWORD *)(v300 + 44);
  v277 = *(_DWORD *)(v300 + 48);
  v278 = *(_DWORD *)(v300 + 52);
  v279 = *(_DWORD *)(v300 + 56);
  v280 = *(_DWORD *)(v300 + 60);
  v281 = *(_DWORD *)(v300 + 64);
  v282 = *(_DWORD *)(v300 + 68);
  v284 = *(_DWORD *)(v300 + 72);
  v283 = *(_DWORD *)(v300 + 76);
  v285 = *(_DWORD *)(v300 + 80);
  v286 = *(_DWORD *)(v300 + 84);
  v287 = *(_DWORD *)(v300 + 88);
  v288 = *(_DWORD *)(v300 + 92);
  v289 = *(_DWORD *)(v300 + 96);
  v290 = *(_DWORD *)(v300 + 100);
  v291 = *(_DWORD *)(v300 + 104);
  *(_BYTE *)(v9 + 1888) = (*(_QWORD *)(v300 + 112) | *(unsigned __int16 *)(v300 + 120) | *(unsigned __int16 *)(v300 + 122) | (unint64_t)*(unsigned __int16 *)(v300 + 124) | v276 | v277 | v278 | v279 | v280 | v281 | v282 | v284 | v283 | v285 | v286 | ((v276 | v275 | v277 | v278 | v279 | v280 | v281 | v282 | v284 | v283 | v285 | v286 | v287 | v288 | v289 | v290 | v291) & 0x2000000 | (((v276 | v275 | v277 | v278 | v279 | v280 | v281 | v282 | v284 | v283 | v285 | v286 | v287 | v288 | v289 | v290) | v291) != 0)) ^ v275 | v287 | v288 | v289 | v290 | v291) == 0x200000000000000;
  *(_QWORD *)(v9 + 1896) = 0;
  *(_QWORD *)(v9 + 1136) = *(_QWORD *)(v9 + 480);
  *(_DWORD *)(v9 + 1160) |= 1u;
  v292 = objc_msgSend(*(id *)(v9 + 1144), "resourceID");
  if (v292 != objc_msgSend(*(id *)(v9 + 1136), "resourceID"))
    *(_DWORD *)(v9 + 1160) |= 2u;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v298 + 32) + 8) + 24) = v9;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v305);
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v293 = *(_QWORD *)(v298 + 56);
  *(_QWORD *)(v293 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v298 + 32) + 8) + 24);
  *(_QWORD *)(v293 + 16) = 0;

  *(_QWORD *)(v293 + 24) = objc_msgSend(v299, "copy");
  if (*(_QWORD *)(v293 + 8))
  {

    *(_QWORD *)(v293 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v293 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v293);
}

void sub_232C834B4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13, ...)
{
  uint64_t v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a13);
  if (*a3 < 0)
  {
    operator delete(*(void **)(v13 + 432));
    if ((*(char *)(v13 + 167) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(v13 + 167) & 0x80000000) == 0)
  {
LABEL_3:
    if ((*(char *)(v13 + 143) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(*a13);
  if ((*(char *)(v13 + 143) & 0x80000000) == 0)
  {
LABEL_5:
    v17 = *a10;
    if (*a10)
    {
      *(_QWORD *)(v13 + 40) = v17;
      operator delete(v17);
    }
    v18 = *v14;
    if (*v14)
    {
      *(_QWORD *)(v13 + 16) = v18;
      operator delete(v18);
    }
    AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
    MEMORY[0x234927ECC](v13, 0x10F2C40DEF1E504);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v15);
  goto LABEL_5;
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C83810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateEndOfTileProgramVariant(uint64_t a1, AGX::EndOfTileProgramKey *a2, uint64_t a3)
{
  _DWORD **v6;
  uint64_t v7;

  v6 = (_DWORD **)MEMORY[0x24BE516B0];
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6636));
  v7 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::G9::EndOfTileProgram>(a1, *(os_unfair_lock_s **)(a1 + 8), a2, a3);
  if (**v6)
    IOGPUDeviceTraceEvent();
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 6636));
  return v7;
}

void sub_232C838F0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBlitProgramVariant(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;
  __int32 *v10;
  int32x4_t v11;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  int v16;
  int32x4_t v17;
  int v18;
  int32x4_t v19;
  unsigned int v20;
  int32x4_t v21;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  char **v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[8];
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[5];
  size_t v58;
  const void *v59;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v64;
  CC_SHA256_CTX *p_c;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = (os_unfair_lock_s *)(a1 + 6644);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6644));
  v5 = *(_QWORD *)(a1 + 16);
  v53 = 0;
  v54 = &v53;
  v55 = 0x2020000000;
  v56 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 888));
  v6 = *(unsigned int *)(v5 + 560);
  v7 = *(_QWORD *)(v5 + 552);
  if ((_DWORD)v6)
  {
    v8 = 0;
    v10 = (__int32 *)(v7 + 80);
    while (1)
    {
      v11.i32[0] = *v10;
      v11.i32[1] = *(v10 - 2);
      v11.i64[1] = *((_QWORD *)v10 - 5);
      v9.i64[1] = *(_QWORD *)(a2 + 40);
      v9.i32[1] = *(_DWORD *)(a2 + 72);
      v9.i32[0] = *(_DWORD *)(a2 + 80);
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v11, v9), (int16x8_t)vceqq_s32(*((int32x4_t *)v10 - 2), *(int32x4_t *)(a2 + 48)))))) & 1) == 0&& *(v10 - 4) == *(_DWORD *)(a2 + 64)&& *(v10 - 3) == *(_DWORD *)(a2 + 68))
      {
        break;
      }
      v10 += 22;
      if (v6 == ++v8)
        goto LABEL_11;
    }
    v13 = v7 + 48 * v8;
  }
  else
  {
LABEL_11:
    v14 = *(_QWORD *)(v7 + 544);
    if (v14)
    {
      v15 = *(int32x4_t *)(a2 + 48);
      v16 = *(_DWORD *)(a2 + 68);
      v19.i32[0] = *(_DWORD *)(a2 + 80);
      v18 = *(_DWORD *)(a2 + 64);
      v19.i32[1] = *(_DWORD *)(a2 + 72);
      v19.i64[1] = *(_QWORD *)(a2 + 40);
      v20 = 1;
      while (1)
      {
        v21.i32[0] = *(_DWORD *)(v14 + 80);
        v21.i32[1] = *(_DWORD *)(v14 + 72);
        v21.i64[1] = *(_QWORD *)(v14 + 40);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v21, v19), (int16x8_t)vceqq_s32(*(int32x4_t *)(v14 + 48), v15))))) & 1) == 0&& *(_DWORD *)(v14 + 64) == v18&& *(_DWORD *)(v14 + 68) == v16)
        {
          v20 = 0;
          goto LABEL_36;
        }
        v23.i32[0] = *(_DWORD *)(v14 + 168);
        v23.i32[1] = *(_DWORD *)(v14 + 160);
        v23.i64[1] = *(_QWORD *)(v14 + 128);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v23, v19), (int16x8_t)vceqq_s32(*(int32x4_t *)(v14 + 136), v15))))) & 1) == 0&& *(_DWORD *)(v14 + 152) == v18&& *(_DWORD *)(v14 + 156) == v16)
        {
          goto LABEL_36;
        }
        v24.i32[0] = *(_DWORD *)(v14 + 256);
        v24.i32[1] = *(_DWORD *)(v14 + 248);
        v24.i64[1] = *(_QWORD *)(v14 + 216);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v24, v19), (int16x8_t)vceqq_s32(*(int32x4_t *)(v14 + 224), v15))))) & 1) == 0&& *(_DWORD *)(v14 + 240) == v18&& *(_DWORD *)(v14 + 244) == v16)
        {
          break;
        }
        v25.i32[0] = *(_DWORD *)(v14 + 344);
        v25.i32[1] = *(_DWORD *)(v14 + 336);
        v25.i64[1] = *(_QWORD *)(v14 + 304);
        v17.i64[1] = *(_QWORD *)(a2 + 40);
        v17.i32[1] = *(_DWORD *)(a2 + 72);
        v17.i32[0] = *(_DWORD *)(a2 + 80);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v25, v17), (int16x8_t)vceqq_s32(*(int32x4_t *)(v14 + 312), v15))))) & 1) == 0&& *(_DWORD *)(v14 + 328) == v18&& *(_DWORD *)(v14 + 332) == v16)
        {
          v20 = 3;
          goto LABEL_36;
        }
        v14 = *(_QWORD *)(v14 + 544);
        if (!v14)
          goto LABEL_29;
      }
      v20 = 2;
    }
    else
    {
LABEL_29:
      if ((_DWORD)v6 == 4)
      {
        v7 = operator new();
        LODWORD(v6) = 0;
        *(_DWORD *)(v7 + 8) = 14;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = off_250400578;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *(_OWORD *)(v7 + 68) = 0u;
        *(_DWORD *)(v7 + 96) = 14;
        *(_QWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 120) = 0;
        *(_QWORD *)(v7 + 104) = 0;
        *(_QWORD *)(v7 + 88) = off_250400578;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 156) = 0u;
        *(_DWORD *)(v7 + 184) = 14;
        *(_QWORD *)(v7 + 200) = 0;
        *(_QWORD *)(v7 + 208) = 0;
        *(_QWORD *)(v7 + 192) = 0;
        *(_QWORD *)(v7 + 176) = off_250400578;
        *(_OWORD *)(v7 + 244) = 0u;
        *(_OWORD *)(v7 + 232) = 0u;
        *(_OWORD *)(v7 + 216) = 0u;
        *(_DWORD *)(v7 + 272) = 14;
        *(_QWORD *)(v7 + 280) = 0;
        *(_QWORD *)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
        *(_QWORD *)(v7 + 264) = off_250400578;
        *(_OWORD *)(v7 + 332) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 378) = 0u;
        *(_OWORD *)(v7 + 400) = 0u;
        *(_OWORD *)(v7 + 416) = 0u;
        *(_OWORD *)(v7 + 426) = 0u;
        *(_OWORD *)(v7 + 474) = 0u;
        *(_OWORD *)(v7 + 448) = 0u;
        *(_OWORD *)(v7 + 464) = 0u;
        *(_OWORD *)(v7 + 522) = 0u;
        *(_OWORD *)(v7 + 496) = 0u;
        *(_OWORD *)(v7 + 512) = 0u;
        *(_QWORD *)(v7 + 544) = *(_QWORD *)(v5 + 552);
        *(_QWORD *)(v5 + 552) = v7;
        *(_DWORD *)(v5 + 560) = 0;
      }
      v26 = v7 + 88 * v6;
      *(_DWORD *)(v26 + 8) = *(_DWORD *)(a2 + 8);
      if (v26 != a2)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v26 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      v27 = v7 + 88 * v6;
      v28 = *(_OWORD *)(a2 + 40);
      v29 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(v27 + 68) = *(_OWORD *)(a2 + 68);
      *(_OWORD *)(v27 + 56) = v29;
      *(_OWORD *)(v27 + 40) = v28;
      v14 = *(_QWORD *)(v5 + 552);
      v20 = *(_DWORD *)(v5 + 560);
      *(_DWORD *)(v5 + 560) = v20 + 1;
    }
LABEL_36:
    v13 = v14 + 48 * v20;
  }
  v30 = v13 + 352;
  if (*(_QWORD *)(v13 + 352))
  {
    if (!*(_BYTE *)(v13 + 392))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 888));
      dispatch_group_wait(*(dispatch_group_t *)v30, 0xFFFFFFFFFFFFFFFFLL);
      v50 = *(_QWORD *)(v30 + 8);
      v54[3] = v50;
      goto LABEL_59;
    }
    v31 = *(_QWORD *)(v13 + 360);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 16) = 0;

    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_BYTE *)(v30 + 40) = 0;
    v32 = *(NSObject **)v30;
  }
  else
  {
    v32 = dispatch_group_create();
    *(_QWORD *)v30 = v32;
  }
  dispatch_group_enter(v32);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 888));
  v33 = *(_QWORD *)(a1 + 5464);
  v34 = MEMORY[0x24BDAC760];
  v52[0] = MEMORY[0x24BDAC760];
  v52[1] = 3221225472;
  v52[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_26BlitFragmentProgramVariantENS_22BlitFragmentProgramKeyENS1_19BlitFragmentProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
  v52[3] = &unk_250400288;
  v52[4] = &v53;
  v52[5] = a1;
  v52[6] = a2;
  v52[7] = v30;
  v35 = *(_QWORD *)(v33 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    v36 = v35;
  else
    v36 = 0;
  v37 = (void *)objc_opt_new();
  objc_msgSend(v37, "setSync:", 1);
  objc_msgSend(v37, "setPipelineCache:", v36);
  objc_msgSend(v37, "setBinaryArchives:", 0);
  v57[0] = v34;
  v57[1] = 3221225472;
  v57[2] = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v57[3] = &unk_2504023B8;
  v57[4] = v52;
  v58 = 0;
  v59 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(_QWORD *)a2 + 16))(a2, &v59, &v58);
  v38 = dispatch_data_create(v59, v58, 0, 0);
  objc_msgSend(v37, "setDriverKeyData:", v38);
  if (objc_msgSend(v37, "airScript"))
  {
    v39 = objc_msgSend(v37, "airScript");
    v67 = 0uLL;
    *(_QWORD *)&v68 = 0;
    *(_QWORD *)&v67 = dispatch_data_create_map(v39, (const void **)&v67 + 1, (size_t *)&v68);
    v40 = *((_QWORD *)&v67 + 1);
    v41 = **((_DWORD **)&v67 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v40 + v41), &data, (size_t *)len, v42, v43))
    {
      v44 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v44);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v67);
    v67 = *(_OWORD *)md;
    v68 = v64;
    objc_msgSend(v37, "setVendorPluginFunctionId:", &v67);
  }
  *(_QWORD *)c.count = v34;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v37;
  *(_QWORD *)c.wbuf = v57;
  if (objc_msgSend(v37, "function"))
  {
    v45 = mach_absolute_time();
    v46 = *(void **)v33;
    *(_QWORD *)md = v34;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v64 = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v64 + 1) = &unk_250402458;
    p_c = &c;
    v66 = v45;
    objc_msgSend(v46, "compileFunctionRequest:completionHandler:", v37, md);
  }
  else
  {
    if (objc_msgSend(v37, "frameworkData") || objc_msgSend(v37, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v34;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v64 = ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v64 + 1) = &unk_250402430;
    p_c = &c;
    v47 = objc_msgSend((id)objc_msgSend(v37, "binaryArchives"), "count");
    v48 = *(void **)v33;
    v49 = objc_msgSend(v37, "driverKeyData");
    if (v47)
      objc_msgSend(v48, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v49, objc_msgSend(v37, "binaryArchives"), 0, objc_msgSend(v37, "pipelineCache"), objc_msgSend(v37, "sync"), md);
    else
      objc_msgSend(v48, "compileRequest:pipelineCache:sync:completionHandler:", v49, objc_msgSend(v37, "pipelineCache"), objc_msgSend(v37, "sync"), md);
  }
  dispatch_release(v38);

  v50 = v54[3];
LABEL_59:
  if (!v50)
  {
    MTLReleaseAssertionFailure();
    __break(1u);
  }
  _Block_object_dispose(&v53, 8);
  os_unfair_lock_unlock(v4);
  return v50;
}

{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  char **v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[8];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];
  size_t v46;
  const void *v47;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v52;
  CC_SHA256_CTX *p_c;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 0;
  v4 = (os_unfair_lock_s *)(a1 + 6640);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6640));
  v5 = *(_QWORD *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 728));
  v6 = *(unsigned int *)(v5 + 400);
  v7 = *(_QWORD *)(v5 + 392);
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = (int *)(v7 + 40);
    while (1)
    {
      v10 = *v9;
      v9 += 12;
      if (*(_DWORD *)(a2 + 40) == v10)
        break;
      if (v6 == ++v8)
        goto LABEL_5;
    }
    v17 = v7 + 48 * v8;
  }
  else
  {
LABEL_5:
    v11 = *(_QWORD *)(v7 + 384);
    if (v11)
    {
      v12 = *(_DWORD *)(a2 + 40);
      v13 = 1;
      while (1)
      {
        if (v12 == *(_DWORD *)(v11 + 40))
        {
          v13 = 0;
          goto LABEL_21;
        }
        if (v12 == *(_DWORD *)(v11 + 88))
          goto LABEL_21;
        if (v12 == *(_DWORD *)(v11 + 136))
        {
          v13 = 2;
          goto LABEL_21;
        }
        if (v12 == *(_DWORD *)(v11 + 184))
          break;
        v11 = *(_QWORD *)(v11 + 384);
        if (!v11)
          goto LABEL_12;
      }
      v13 = 3;
LABEL_21:
      v17 = v11 + 48 * v13;
    }
    else
    {
LABEL_12:
      if ((_DWORD)v6 == 4)
      {
        v7 = operator new();
        LODWORD(v6) = 0;
        *(_DWORD *)(v7 + 8) = 15;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 56) = 15;
        *(_DWORD *)(v7 + 104) = 15;
        *(_DWORD *)(v7 + 152) = 15;
        *(_QWORD *)v7 = off_2504005F8;
        *(_DWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 48) = off_2504005F8;
        *(_DWORD *)(v7 + 88) = 0;
        *(_QWORD *)(v7 + 120) = 0;
        *(_QWORD *)(v7 + 128) = 0;
        *(_QWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 96) = off_2504005F8;
        *(_DWORD *)(v7 + 136) = 0;
        *(_QWORD *)(v7 + 160) = 0;
        *(_QWORD *)(v7 + 168) = 0;
        *(_QWORD *)(v7 + 176) = 0;
        *(_QWORD *)(v7 + 144) = off_2504005F8;
        *(_DWORD *)(v7 + 184) = 0;
        *(_OWORD *)(v7 + 218) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 266) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 314) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 362) = 0u;
        *(_QWORD *)(v7 + 384) = *(_QWORD *)(v5 + 392);
        *(_QWORD *)(v5 + 392) = v7;
        *(_DWORD *)(v5 + 400) = 0;
      }
      v14 = v7 + 48 * v6;
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 8);
      if (v14 != a2)
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((_QWORD *)(v14 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
      *(_DWORD *)(v7 + 48 * v6 + 40) = *(_DWORD *)(a2 + 40);
      v15 = *(_QWORD *)(v5 + 392);
      v16 = *(_DWORD *)(v5 + 400);
      *(_DWORD *)(v5 + 400) = v16 + 1;
      v17 = v15 + 48 * v16;
    }
  }
  v18 = v17 + 192;
  if (*(_QWORD *)(v17 + 192))
  {
    if (!*(_BYTE *)(v17 + 232))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 728));
      v42[3] = *(_QWORD *)(v18 + 8);
      goto LABEL_44;
    }
    v19 = *(_QWORD *)(v17 + 200);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;

    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_BYTE *)(v18 + 40) = 0;
    v20 = *(NSObject **)v18;
  }
  else
  {
    v20 = dispatch_group_create();
    *(_QWORD *)v18 = v20;
  }
  dispatch_group_enter(v20);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 728));
  v21 = *(_QWORD *)(a1 + 5464);
  v22 = MEMORY[0x24BDAC760];
  v40[0] = MEMORY[0x24BDAC760];
  v40[1] = 3221225472;
  v40[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBlitProgramVariantERNS_20BlitVertexProgramKeyE_block_invoke;
  v40[3] = &unk_250400288;
  v40[4] = &v41;
  v40[5] = a1;
  v40[6] = a2;
  v40[7] = v18;
  v23 = *(_QWORD *)(v21 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    v24 = v23;
  else
    v24 = 0;
  v25 = (void *)objc_opt_new();
  objc_msgSend(v25, "setSync:", 1);
  objc_msgSend(v25, "setPipelineCache:", v24);
  objc_msgSend(v25, "setBinaryArchives:", 0);
  v45[0] = v22;
  v45[1] = 3221225472;
  v45[2] = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v45[3] = &unk_2504023B8;
  v45[4] = v40;
  v46 = 0;
  v47 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(_QWORD *)a2 + 16))(a2, &v47, &v46);
  v26 = dispatch_data_create(v47, v46, 0, 0);
  objc_msgSend(v25, "setDriverKeyData:", v26);
  if (objc_msgSend(v25, "airScript"))
  {
    v27 = objc_msgSend(v25, "airScript");
    v55 = 0uLL;
    *(_QWORD *)&v56 = 0;
    *(_QWORD *)&v55 = dispatch_data_create_map(v27, (const void **)&v55 + 1, (size_t *)&v56);
    v28 = *((_QWORD *)&v55 + 1);
    v29 = **((_DWORD **)&v55 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v28 + v29), &data, (size_t *)len, v30, v31))
    {
      v32 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v32);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v55);
    v55 = *(_OWORD *)md;
    v56 = v52;
    objc_msgSend(v25, "setVendorPluginFunctionId:", &v55);
  }
  *(_QWORD *)c.count = v22;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v25;
  *(_QWORD *)c.wbuf = v45;
  if (objc_msgSend(v25, "function"))
  {
    v33 = mach_absolute_time();
    v34 = *(void **)v21;
    *(_QWORD *)md = v22;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v52 = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v52 + 1) = &unk_250402458;
    p_c = &c;
    v54 = v33;
    objc_msgSend(v34, "compileFunctionRequest:completionHandler:", v25, md);
  }
  else
  {
    if (objc_msgSend(v25, "frameworkData") || objc_msgSend(v25, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v22;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v52 = ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v52 + 1) = &unk_250402430;
    p_c = &c;
    v35 = objc_msgSend((id)objc_msgSend(v25, "binaryArchives"), "count");
    v36 = *(void **)v21;
    v37 = objc_msgSend(v25, "driverKeyData");
    if (v35)
      objc_msgSend(v36, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "binaryArchives"), 0, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
    else
      objc_msgSend(v36, "compileRequest:pipelineCache:sync:completionHandler:", v37, objc_msgSend(v25, "pipelineCache"), objc_msgSend(v25, "sync"), md);
  }
  dispatch_release(v26);

LABEL_44:
  os_unfair_lock_unlock(v4);
  v38 = v42[3];
  _Block_object_dispose(&v41, 8);
  return v38;
}

void sub_232C840E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;

  os_unfair_lock_unlock(v18);
  _Block_object_dispose(&a17, 8);
  os_unfair_lock_unlock(v17);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_26BlitFragmentProgramVariantENS_22BlitFragmentProgramKeyENS1_19BlitFragmentProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke(_QWORD *a1, unsigned int **a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16[54];
  uint64_t v17;
  uint64_t v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v17 = 0;
    v18 = 0;
    (*(void (**)(_QWORD, uint64_t *, uint64_t *))(*(_QWORD *)a1[6] + 16))(a1[6], &v18, &v17);
    v16[0] = (uint64_t)a4;
    v16[1] = (uint64_t)v15;
    v16[2] = v17;
    v16[3] = v18;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v7 = a1[5];
  v8 = (_QWORD *)operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v16, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::BlitFragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::BlitFragmentProgramVariant((unint64_t)v8, v7, a2, (uint64_t)v16, a1[6]);
  *v8 = &off_250400C18;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v8;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v16);
  v12 = a1[7];
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  *(_QWORD *)(v12 + 16) = 0;

  *(_QWORD *)(v12 + 24) = objc_msgSend(a4, "copy");
  if (*(_QWORD *)(v12 + 8))
  {

    *(_QWORD *)(v12 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v12);
}

void sub_232C842A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C4099AFD461);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_22BlitFragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C8454C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::G9::BlitFragmentProgramVariant::~BlitFragmentProgramVariant(AGX::G9::BlitFragmentProgramVariant *this)
{
  *(_QWORD *)this = &off_250401920;
  AGX::BlitFragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariantPDSState((uint64_t)this + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

{
  *(_QWORD *)this = &off_250401920;
  AGX::BlitFragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariantPDSState((uint64_t)this + 1216);
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  void *v34;
  uint64_t v35;
  unint64_t v36;

  *(_QWORD *)a1 = &off_250401E70;
  v2 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(a1 + 552))
  {
    v3 = *(_QWORD *)(a1 + 560);
    v4 = *(NSObject **)(v3 + 16);
    v31 = MEMORY[0x24BDAC760];
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v3;
    v36 = a1 + 528;
    dispatch_sync(v4, &v31);
    *(_OWORD *)(a1 + 553) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
  }
  if (*(_QWORD *)(a1 + 600))
  {
    v5 = *(_QWORD *)(a1 + 608);
    v6 = *(NSObject **)(v5 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v5;
    v36 = a1 + 576;
    dispatch_sync(v6, &v31);
    *(_OWORD *)(a1 + 601) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
  }
  if (*(_QWORD *)(a1 + 648))
  {
    v7 = *(_QWORD *)(a1 + 656);
    v8 = *(NSObject **)(v7 + 16);
    v31 = v2;
    v32 = 3221225472;
    v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v34 = &__block_descriptor_48_e5_v8__0l;
    v35 = v7;
    v36 = a1 + 624;
    dispatch_sync(v8, &v31);
    *(_OWORD *)(a1 + 649) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 6872));
    std::__hash_table<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXA10FamilyVisibleFunctionTable *>>>::__erase_unique<unsigned long long>((uint64_t *)(v9 + 6880), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 6872));
  }
  if ((*(char *)(a1 + 1215) & 0x80000000) == 0)
  {
    v10 = *(void **)(a1 + 1168);
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1192));
  v10 = *(void **)(a1 + 1168);
  if (v10)
  {
LABEL_11:
    *(_QWORD *)(a1 + 1176) = v10;
    operator delete(v10);
  }
LABEL_12:
  v11 = *(_QWORD *)(a1 + 1144);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 1152);
    v13 = *(void **)(a1 + 1144);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 1144);
    }
    *(_QWORD *)(a1 + 1152) = v11;
    operator delete(v13);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 1032));
  v14 = *(_QWORD *)(a1 + 992);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 1000);
    v16 = *(void **)(a1 + 992);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 992);
    }
    *(_QWORD *)(a1 + 1000) = v14;
    operator delete(v16);
  }
  v20 = *(void **)(a1 + 968);
  if (v20)
  {
    *(_QWORD *)(a1 + 976) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 944);
  if (v21)
  {
    *(_QWORD *)(a1 + 952) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 871) < 0)
  {
    operator delete(*(void **)(a1 + 848));
    if ((*(char *)(a1 + 479) & 0x80000000) == 0)
    {
LABEL_39:
      if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        goto LABEL_40;
LABEL_60:
      operator delete(*(void **)(a1 + 432));
      if ((*(char *)(a1 + 431) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_61;
    }
  }
  else if ((*(char *)(a1 + 479) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(a1 + 456));
  if (*(char *)(a1 + 455) < 0)
    goto LABEL_60;
LABEL_40:
  if ((*(char *)(a1 + 431) & 0x80000000) == 0)
    goto LABEL_41;
LABEL_61:
  operator delete(*(void **)(a1 + 408));
LABEL_41:
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 272));
  v22 = *(void **)(a1 + 240);
  if (v22)
  {
    *(_QWORD *)(a1 + 248) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 216);
  if (v23)
  {
    *(_QWORD *)(a1 + 224) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 168);
  if (v24)
  {
    *(_QWORD *)(a1 + 176) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 144);
  if (v25)
  {
    *(_QWORD *)(a1 + 152) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 120);
  if (v26)
  {
    *(_QWORD *)(a1 + 128) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 96);
  if (v27)
  {
    *(_QWORD *)(a1 + 104) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 72);
  if (v28)
  {
    *(_QWORD *)(a1 + 80) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 48);
  if (v29)
  {
    *(_QWORD *)(a1 + 56) = v29;
    operator delete(v29);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant(a1);
  JUMPOUT(0x234927ECCLL);
}

unint64_t AGX::BlitFragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariant(_QWORD *a1)
{
  *a1 = &off_250401920;
  AGX::BlitFragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariantPDSState((uint64_t)(a1 + 152));
  return AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);
}

void AGX::BlitFragmentProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariant(_QWORD *a1)
{
  *a1 = &off_250401920;
  AGX::BlitFragmentProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes>::~BlitFragmentProgramVariantPDSState((uint64_t)(a1 + 152));
  AGX::ProgramVariant<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::BlitFragmentArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);
  JUMPOUT(0x234927ECCLL);
}

void sub_232C84FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  os_unfair_lock_s *v17;
  os_unfair_lock_s *v18;

  os_unfair_lock_unlock(v18);
  os_unfair_lock_unlock(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBlitProgramVariantERNS_20BlitVertexProgramKeyE_block_invoke(uint64_t a1, unsigned int **a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  _QWORD v16[3];
  uint64_t v17[54];
  uint64_t v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v16[0] = 0;
    v18 = 0;
    (*(void (**)(_QWORD, _QWORD *, uint64_t *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v16, &v18);
    v17[0] = (uint64_t)a4;
    v17[1] = (uint64_t)v15;
    v17[2] = v18;
    v17[3] = v16[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (_QWORD *)operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v17, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v16, a2);
  AGX::BlitVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::BlitVertexProgramVariant((unint64_t)v8, v7, (uint64_t)a2, (uint64_t)v17, v16);
  *v8 = &off_2504007B8;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v17);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v12 + 16) = 0;

  *(_QWORD *)(v12 + 24) = objc_msgSend(a4, "copy");
  if (*(_QWORD *)(v12 + 8))
  {

    *(_QWORD *)(v12 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v12 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v12);
}

void sub_232C85184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C40E7327D69);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_20BlitVertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C85430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::G9::BlitVertexProgramVariant::~BlitVertexProgramVariant(AGX::G9::BlitVertexProgramVariant *this)
{
  AGX::BlitVertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::~BlitVertexProgramVariant((unint64_t)this);
  JUMPOUT(0x234927ECCLL);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE46findOrCreateComputeControlFlowPredicateProgramERKNS_37ComputeControlFlowPredicateProgramKeyE_block_invoke(uint64_t a1, unsigned int **a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17[54];
  uint64_t v18;
  uint64_t v19;

  if (a3)
  {
    v14 = "MTLCompilerErrorTimeout";
    v15 = "UnknownErrorCode";
    if (a3 == 2)
      v15 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v14 = v15;
    if (a3 == 1)
      v16 = "MTLCompilerErrorFatalError";
    else
      v16 = v14;
    v18 = 0;
    v19 = 0;
    (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v19, &v18);
    v17[0] = (uint64_t)a4;
    v17[1] = (uint64_t)v16;
    v17[2] = v18;
    v17[3] = v19;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (_QWORD *)operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v17, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant((unint64_t)v8, v7, (uint64_t)a2, (uint64_t)v17, 0, 0, 0);
  v12 = *(_QWORD *)(a1 + 32);
  *v8 = &off_250401740;
  *(_QWORD *)(*(_QWORD *)(v12 + 8) + 24) = v8;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v17);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                 + 8)
                                                                                     + 24));
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v13 + 16) = 0;

  *(_QWORD *)(v13 + 24) = objc_msgSend(a4, "copy");
  if (*(_QWORD *)(v13 + 8))
  {

    *(_QWORD *)(v13 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v13);
}

void sub_232C855FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_37ComputeControlFlowPredicateProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C858A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBVHBuilderPipelineERNS_20BVHBuilderProgramKeyE_block_invoke(_QWORD *a1, unsigned int **a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14[54];

  if (a3)
    _ZZZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBVHBuilderPipelineERNS_20BVHBuilderProgramKeyEEUb_ENKUlvE_clB57_AGX__Failed_assertion__error____MTLCompilerErrorNoError_Ev(a4);
  v6 = a1[5];
  v7 = operator new();
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v14, a2, (const std::vector<unsigned int>::value_type *)3, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v7, v6, (uint64_t)a2, (uint64_t)v14, 0, 0, 0);
  *(_QWORD *)v7 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v14);
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_QWORD *)(v11 + 344) = 0;
  *(_QWORD *)(v11 + 352) = 0;
  *(_DWORD *)(v11 + 264) = 1065353216;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_DWORD *)(v11 + 304) = 1065353216;
  *(_OWORD *)(v11 + 312) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_DWORD *)(v11 + 352) = 1065353216;
  *(_OWORD *)(v11 + 360) = 0u;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_OWORD *)(v11 + 392) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  *(_QWORD *)(v12 + 16) = v7;
  *(_DWORD *)(v12 + 224) = *(_DWORD *)(v7 + 3248);
  *(_QWORD *)(v12 + 160) = *(_QWORD *)(v7 + 316);
  v13 = *(_DWORD *)(v7 + 352);
  *(_DWORD *)(v12 + 180) = 0;
  *(_DWORD *)(v12 + 184) = 0;
  *(_DWORD *)(v12 + 176) = v13;
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v7);
  atomic_store(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), (unint64_t *)(v6 + 8 * a1[6] + 80));
}

void sub_232C85A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C85CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void _ZZZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBVHBuilderPipelineERNS_20BVHBuilderProgramKeyEEUb_ENKUlvE_clB57_AGX__Failed_assertion__error____MTLCompilerErrorNoError_Ev(void *a1)
{
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  objc_msgSend(a1, "UTF8String");
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

uint64_t AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::isAfterFragmentMemoryBarrierSupported()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::isAfterFragmentMemoryBarrierSupported(void)const::isAfterFragmentMemoryBarrierSupported = dyld_program_sdk_at_least() ^ 1;
  }
  return AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::isAfterFragmentMemoryBarrierSupported(void)const::isAfterFragmentMemoryBarrierSupported;
}

void sub_232C85E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  os_unfair_lock_s *v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *v46;

  v7 = (os_unfair_lock_s *)(a1 + 6872);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6872));
  v8 = *(_QWORD *)(a1 + 6904);
  if ((v8 & 0x3FFFFFFFFFFC000) != 0)
  {
    if (AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(unsigned long,AGX::FunctionCompiledEventInfo const&)::once != -1)
      dispatch_once(&AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::registerVariantEventInfo(unsigned long,AGX::FunctionCompiledEventInfo const&)::once, &__block_literal_global_91);
    goto LABEL_86;
  }
  v9 = *(_QWORD *)(a1 + 6888);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v9 <= a2)
        v3 = a2 % v9;
    }
    else
    {
      v3 = (v9 - 1) & a2;
    }
    v11 = *(void ***)(*(_QWORD *)(a1 + 6880) + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == a2)
            {
              if (*((_QWORD *)v12 + 2) == a2)
                goto LABEL_85;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_25;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == a2)
          {
            if (*((_QWORD *)v12 + 2) == a2)
              goto LABEL_85;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_25:
  v12 = (char *)operator new(0x50uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = a2;
  *((_QWORD *)v12 + 2) = a2;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((_QWORD *)v12 + 9) = 0;
  v15 = (float)(unint64_t)(v8 + 1);
  v16 = *(float *)(a1 + 6912);
  if (v9 && (float)(v16 * (float)v9) >= v15)
  {
    a2 = v3;
    goto LABEL_75;
  }
  v17 = 1;
  if (v9 >= 3)
    v17 = (v9 & (v9 - 1)) != 0;
  v18 = v17 | (2 * v9);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *(_QWORD *)(a1 + 6888);
  }
  if (prime > v9)
  {
LABEL_38:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(void **)(a1 + 6880);
    *(_QWORD *)(a1 + 6880) = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *(_QWORD *)(a1 + 6888) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 6880) + 8 * v23++) = 0;
    while (prime != v23);
    v24 = *(_QWORD **)(a1 + 6896);
    if (!v24)
      goto LABEL_62;
    v25 = a1 + 6896;
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)(a1 + 6880) + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else
        {
          v31 = *(_QWORD *)(a1 + 6880);
          if (*(_QWORD *)(v31 + 8 * v30))
          {
            *v24 = *i;
            v32 = 8 * v30;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 6880) + v32);
            **(_QWORD **)(*(_QWORD *)(a1 + 6880) + v32) = i;
          }
          else
          {
            *(_QWORD *)(v31 + 8 * v30) = v24;
            v24 = i;
            v28 = v30;
          }
        }
      }
LABEL_62:
      v9 = prime;
      goto LABEL_63;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 6880) + 8 * v26) = v25;
    v36 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_62;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v26)
      {
        v39 = *(_QWORD *)(a1 + 6880);
        if (!*(_QWORD *)(v39 + 8 * v38))
        {
          *(_QWORD *)(v39 + 8 * v38) = v24;
          goto LABEL_67;
        }
        *v24 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)(a1 + 6880) + v37);
        **(_QWORD **)(*(_QWORD *)(a1 + 6880) + v37) = v36;
        v36 = v24;
      }
      v38 = v26;
LABEL_67:
      v24 = v36;
      v36 = (_QWORD *)*v36;
      v26 = v38;
      if (!v36)
        goto LABEL_62;
    }
  }
  if (prime >= v9)
    goto LABEL_63;
  v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 6904) / *(float *)(a1 + 6912));
  if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
  {
    v33 = std::__next_prime(v33);
  }
  else
  {
    v35 = 1 << -(char)__clz(v33 - 1);
    if (v33 >= 2)
      v33 = v35;
  }
  if (prime <= v33)
    prime = v33;
  if (prime < v9)
  {
    if (!prime)
    {
      v46 = *(void **)(a1 + 6880);
      *(_QWORD *)(a1 + 6880) = 0;
      if (v46)
        operator delete(v46);
      v9 = 0;
      *(_QWORD *)(a1 + 6888) = 0;
      goto LABEL_63;
    }
    goto LABEL_38;
  }
  v9 = *(_QWORD *)(a1 + 6888);
LABEL_63:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= a2)
      a2 %= v9;
  }
  else
  {
    a2 &= v9 - 1;
  }
LABEL_75:
  v40 = *(_QWORD *)(a1 + 6880);
  v41 = *(_QWORD **)(v40 + 8 * a2);
  if (v41)
  {
    *(_QWORD *)v12 = *v41;
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)(a1 + 6896);
    *(_QWORD *)(a1 + 6896) = v12;
    *(_QWORD *)(v40 + 8 * a2) = a1 + 6896;
    if (!*(_QWORD *)v12)
      goto LABEL_84;
    v42 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9)
        v42 %= v9;
    }
    else
    {
      v42 &= v9 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)(a1 + 6880) + 8 * v42);
  }
  *v41 = v12;
LABEL_84:
  ++*(_QWORD *)(a1 + 6904);
LABEL_85:
  v43 = *a3;
  v44 = a3[1];
  v45 = a3[2];
  *((_QWORD *)v12 + 9) = *((_QWORD *)a3 + 6);
  *(_OWORD *)(v12 + 56) = v45;
  *(_OWORD *)(v12 + 40) = v44;
  *(_OWORD *)(v12 + 24) = v43;
LABEL_86:
  os_unfair_lock_unlock(v7);
}

void sub_232C86308(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  operator delete(v2);
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

size_t ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE24registerVariantEventInfoEmRKNS_25FunctionCompiledEventInfoE_block_invoke()
{
  return fwrite("AGX: exceeded compiled variants footprint limit\n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
}

void ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXA10FamilyDevice_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  char **v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  uint64_t (**v28)();
  int v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];
  size_t v34;
  const void *v35;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v40;
  CC_SHA256_CTX *p_c;
  uint64_t v42;
  __int128 v43;
  size_t v44[3];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_QWORD *)(v3 + 344) = 0;
  *(_QWORD *)(v3 + 352) = 0;
  *(_DWORD *)(v3 + 264) = 1065353216;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_DWORD *)(v3 + 304) = 1065353216;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *(_DWORD *)(v3 + 352) = 1065353216;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 392) = 0u;
  *(_QWORD *)(v2 + 6928) = v3;
  v28 = off_2504007D8;
  v29 = 41;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v4 = *(_QWORD *)(v2 + 5464);
  v5 = MEMORY[0x24BDAC760];
  v20[0] = MEMORY[0x24BDAC760];
  v20[1] = 3321888768;
  v20[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXA10FamilyDevice_block_invoke_2;
  v20[3] = &unk_250400360;
  v22 = v2;
  v23 = off_2504007D8;
  LODWORD(v24) = 41;
  __p = 0;
  v26 = 0;
  v27 = 0;
  v21 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setSync:", 1, v20[0], 3321888768, ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXA10FamilyDevice_block_invoke_2, &unk_250400360, v21, v22, off_2504007D8, v24);
  objc_msgSend(v7, "setPipelineCache:", v6);
  objc_msgSend(v7, "setBinaryArchives:", 0);
  v33[0] = v5;
  v33[1] = 3221225472;
  v33[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v33[3] = &unk_2504023B8;
  v33[4] = v20;
  v34 = 0;
  v35 = 0;
  ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)&v28, &v35, &v34);
  v8 = dispatch_data_create(v35, v34, 0, 0);
  objc_msgSend(v7, "setDriverKeyData:", v8);
  if (objc_msgSend(v7, "airScript"))
  {
    v9 = objc_msgSend(v7, "airScript");
    v43 = 0uLL;
    v44[0] = 0;
    *(_QWORD *)&v43 = dispatch_data_create_map(v9, (const void **)&v43 + 1, v44);
    v10 = *((_QWORD *)&v43 + 1);
    v11 = **((_DWORD **)&v43 + 1);
    CC_SHA256_Init(&c);
    ((void (*)(uint64_t (***)(), CC_SHA256_CTX *))*v28)(&v28, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v10 + v11), &data, (size_t *)len, v12, v13))
    {
      v14 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v14);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v43);
    v43 = *(_OWORD *)md;
    *(_OWORD *)v44 = v40;
    objc_msgSend(v7, "setVendorPluginFunctionId:", &v43);
  }
  *(_QWORD *)c.count = v5;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v7;
  *(_QWORD *)c.wbuf = v33;
  if (objc_msgSend(v7, "function"))
  {
    v15 = mach_absolute_time();
    v16 = *(void **)v4;
    *(_QWORD *)md = v5;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v40 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v40 + 1) = &unk_250402458;
    p_c = &c;
    v42 = v15;
    objc_msgSend(v16, "compileFunctionRequest:completionHandler:", v7, md);
  }
  else
  {
    if (objc_msgSend(v7, "frameworkData") || objc_msgSend(v7, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)md = v5;
    *(_QWORD *)&md[8] = 3221225472;
    *(_QWORD *)&v40 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v40 + 1) = &unk_250402430;
    p_c = &c;
    v17 = objc_msgSend((id)objc_msgSend(v7, "binaryArchives"), "count");
    v18 = *(void **)v4;
    v19 = objc_msgSend(v7, "driverKeyData");
    if (v17)
      objc_msgSend(v18, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v19, objc_msgSend(v7, "binaryArchives"), 0, objc_msgSend(v7, "pipelineCache"), objc_msgSend(v7, "sync"), md);
    else
      objc_msgSend(v18, "compileRequest:pipelineCache:sync:completionHandler:", v19, objc_msgSend(v7, "pipelineCache"), objc_msgSend(v7, "sync"), md);
  }
  dispatch_release(v8);

  v23 = off_2504007D8;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v28 = off_2504007D8;
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_232C86764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  dispatch_release(*(dispatch_object_t *)(v23 - 128));
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

double ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXA10FamilyDevice_block_invoke_2(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  double result;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18[54];
  uint64_t v19;
  uint64_t v20;

  if (a3)
  {
    v15 = "MTLCompilerErrorTimeout";
    v16 = "UnknownErrorCode";
    if (a3 == 2)
      v16 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v15 = v16;
    if (a3 == 1)
      v17 = "MTLCompilerErrorFatalError";
    else
      v17 = v15;
    v19 = 0;
    v20 = 0;
    ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 48, &v20, &v19);
    v18[0] = a4;
    v18[1] = (uint64_t)v17;
    v18[2] = v19;
    v18[3] = v20;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = operator new();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 808);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v18, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v7, v8, (uint64_t)a2, (uint64_t)v18, 0, 0, 0);
  *(_QWORD *)v7 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v18);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v7);
  v12 = *(_QWORD *)(v6 + 6928);
  *(_QWORD *)(v12 + 16) = v7;
  *(_DWORD *)(v12 + 224) = *(_DWORD *)(v7 + 3248);
  result = *(double *)(v7 + 316);
  *(double *)(v12 + 160) = result;
  *(_QWORD *)(v12 + 176) = *(unsigned int *)(v7 + 352);
  *(_DWORD *)(v12 + 184) = 0;
  return result;
}

void sub_232C86904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken41ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C86BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken41ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[6] = off_2504007D8;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  v3 = *(_BYTE **)(a2 + 64);
  v2 = *(_BYTE **)(a2 + 72);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[8] = v6;
    v5[9] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[10] = v7;
    result = memcpy(v6, v3, v4);
    v5[9] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_48c77_ZTS10ProgramKeyIL15_AGCStreamToken41ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[6] = off_2504007D8;
  v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)41,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

double ___ZN3AGX2G920DevicePDSStateLoader5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS0_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  BOOL v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int *v16;
  void *DataBytes;
  uint64_t GPUVirtualAddress;
  _QWORD *v19;
  uint64_t v20;
  const void *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  double result;
  const char *v28;
  const char *v29;
  const char *v30;
  unint64_t v31;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  unsigned __int128 v35;
  __int128 v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;

  if (a3)
  {
    v28 = "MTLCompilerErrorTimeout";
    v29 = "UnknownErrorCode";
    if (a3 == 2)
      v29 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v28 = v29;
    if (a3 == 1)
      v30 = "MTLCompilerErrorFatalError";
    else
      v30 = v28;
    v31 = 0;
    *(_QWORD *)&v32 = 0;
    ProgramKey<(_AGCStreamToken)38,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v32, &v31);
    *(_QWORD *)&v34 = a4;
    *((_QWORD *)&v34 + 1) = v30;
    v35 = __PAIR128__(v32, v31);
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v7 + 72) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_QWORD *)(v7 + 120) = 0;
  *(_OWORD *)(v7 + 104) = 0u;
  v9 = (unsigned int **)(a2 + 28);
  if (a2[28])
  {
    if (!a2[29])
      v9 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v9 = (unsigned int **)(a2 + 98);
  }
  v11 = *v9;
  v10 = v9[1];
  if (v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (int *)((char *)v11 + *v11);
  v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (v15 = v14[2]) != 0)
    v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  else
    v16 = 0;
  DataBytes = (void *)IOGPUResourceGetDataBytes();
  GPUVirtualAddress = IOGPUResourceGetGPUVirtualAddress();
  v19 = a2 + 3;
  if (a2[3])
  {
    v20 = a2[4];
    if (v20)
      v21 = (const void *)a2[3];
    else
      v21 = (const void *)a2[73];
    if (!v20)
      v19 = a2 + 73;
  }
  else
  {
    v19 = a2 + 73;
    v21 = (const void *)a2[73];
  }
  memcpy(DataBytes, v21, v19[1]);
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  *(_QWORD *)&v35 = 0;
  v36 = 0u;
  v34 = 0u;
  *((_QWORD *)&v35 + 1) = GPUVirtualAddress;
  v22 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v22 < 5u)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    v23 = v22[2];
    if (v23)
      LODWORD(v23) = *(int *)((char *)v16 + v23);
  }
  LODWORD(v36) = v23;
  LODWORD(v37) = 0;
  v38 = vdupq_n_s64(4uLL);
  v39 = 0x400000000;
  AGX::Heap<true>::allocateImpl(&v32, v8 + 5016, 32, (_QWORD *)v7);
  v24 = v32;
  *((_QWORD *)&v37 + 1) = *((_QWORD *)&v32 + 1);
  *((_QWORD *)&v36 + 1) = *((_QWORD *)&v32 + 1) + 16;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeComputePDSProgram((uint64_t)&v34, 0, 0);
  *(_DWORD *)(v7 + 8) = ((unint64_t)(4 * v38.i64[0] + 15) >> 3) | 1;
  *(_DWORD *)(v7 + 12) = (v24 & 0xFFFFFFF0) + 20;
  *(_DWORD *)(v7 + 16) = v24 & 0xFFFFFFF0;
  *(_OWORD *)(v7 + 20) = xmmword_232D73540;
  *(_DWORD *)(v7 + 36) = 0;
  v25 = v33[0];
  *(_OWORD *)(v7 + 88) = v32;
  *(_OWORD *)(v7 + 104) = v25;
  result = *(double *)((char *)v33 + 9);
  *(_OWORD *)(v7 + 113) = *(_OWORD *)((char *)v33 + 9);
  *(_QWORD *)(v6 + 112) = v7;
  *(_QWORD *)(v6 + 72) = v7;
  return result;
}

void sub_232C8712C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10F0C40438A24F2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN3AGX2G920DevicePDSStateLoader5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS0_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_6(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  const char *v15;
  const char *v16;
  const char *v17;
  _QWORD v18[3];
  uint64_t v19[54];
  std::string v20;

  if (a3)
  {
    v15 = "MTLCompilerErrorTimeout";
    v16 = "UnknownErrorCode";
    if (a3 == 2)
      v16 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v15 = v16;
    if (a3 == 1)
      v17 = "MTLCompilerErrorFatalError";
    else
      v17 = v15;
    v20.__r_.__value_.__r.__words[0] = 0;
    v18[0] = 0;
    ProgramKey<(_AGCStreamToken)92,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v20, v18);
    v19[0] = a4;
    v19[1] = (uint64_t)v17;
    v19[2] = v18[0];
    v19[3] = v20.__r_.__value_.__r.__words[0];
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (_QWORD *)operator new();
  v8 = *(_QWORD *)(a1 + 80);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v19, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1((uint64_t)v18, a2);
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  AGX::VertexProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::VertexProgramVariant((unint64_t)v7, v8, (uint64_t)a2, &v20, (uint64_t)v19, 0, v18, 0, 0);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  *v7 = &off_250402580;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v19);
  v12 = operator new();
  bzero((void *)v12, 0x8B0uLL);
  *(_QWORD *)(v12 + 792) = 0x3F80000000000001;
  *(_QWORD *)(v12 + 800) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v12 + 812) = xmmword_232D73520;
  *(_DWORD *)(v12 + 852) = 0;
  *(_QWORD *)(v12 + 828) = 0;
  *(_DWORD *)(v12 + 835) = 0;
  *(_OWORD *)(v12 + 856) = xmmword_232D73530;
  *(_QWORD *)(v12 + 872) = 3840;
  *(_QWORD *)(v12 + 880) = 0x1E3CE50800210000;
  *(_DWORD *)(v12 + 888) = 1184;
  *(_OWORD *)(v12 + 1000) = 0u;
  *(_OWORD *)(v12 + 1016) = 0u;
  *(_OWORD *)(v12 + 1032) = 0u;
  *(_QWORD *)(v12 + 1144) = 0;
  *(_QWORD *)(v12 + 1136) = 0;
  *(_BYTE *)(v12 + 1152) = 0;
  *(_OWORD *)(v12 + 1160) = 0u;
  *(_OWORD *)(v12 + 1176) = 0u;
  *(_OWORD *)(v12 + 1192) = 0u;
  *(_OWORD *)(v12 + 1205) = 0u;
  *(_QWORD *)(v12 + 1232) = 0;
  *(_QWORD *)(v12 + 1224) = 0;
  *(_BYTE *)(v12 + 1240) = 0;
  *(_OWORD *)(v12 + 1248) = 0u;
  *(_OWORD *)(v12 + 1264) = 0u;
  *(_OWORD *)(v12 + 1280) = 0u;
  *(_OWORD *)(v12 + 1293) = 0u;
  *(_QWORD *)(v12 + 1312) = 0;
  *(_QWORD *)(v12 + 1320) = 0;
  *(_BYTE *)(v12 + 1328) = 0;
  *(_OWORD *)(v12 + 1336) = 0u;
  *(_OWORD *)(v12 + 1352) = 0u;
  *(_OWORD *)(v12 + 1368) = 0u;
  *(_OWORD *)(v12 + 1381) = 0u;
  *(_QWORD *)(v12 + 1400) = 0;
  *(_QWORD *)(v12 + 1408) = 0;
  *(_BYTE *)(v12 + 1416) = 0;
  *(_OWORD *)(v12 + 1424) = 0u;
  *(_OWORD *)(v12 + 1440) = 0u;
  *(_OWORD *)(v12 + 1456) = 0u;
  *(_OWORD *)(v12 + 1469) = 0u;
  *(_QWORD *)(v12 + 1496) = 0;
  *(_QWORD *)(v12 + 1488) = 0;
  *(_BYTE *)(v12 + 1504) = 0;
  *(_DWORD *)(v12 + 992) = 0;
  *(_OWORD *)(v12 + 960) = 0u;
  *(_OWORD *)(v12 + 976) = 0u;
  *(_OWORD *)(v12 + 928) = 0u;
  *(_OWORD *)(v12 + 944) = 0u;
  *(_OWORD *)(v12 + 896) = 0u;
  *(_OWORD *)(v12 + 912) = 0u;
  *(_QWORD *)(v12 + 1125) = 0;
  *(_OWORD *)(v12 + 1096) = 0u;
  *(_OWORD *)(v12 + 1112) = 0u;
  *(_OWORD *)(v12 + 1064) = 0u;
  *(_OWORD *)(v12 + 1080) = 0u;
  *(_QWORD *)(v12 + 1656) = 0;
  *(_OWORD *)(v12 + 1624) = 0u;
  *(_OWORD *)(v12 + 1640) = 0u;
  *(_OWORD *)(v12 + 1592) = 0u;
  *(_OWORD *)(v12 + 1608) = 0u;
  *(_OWORD *)(v12 + 1560) = 0u;
  *(_OWORD *)(v12 + 1576) = 0u;
  *(_OWORD *)(v12 + 1528) = 0u;
  *(_OWORD *)(v12 + 1544) = 0u;
  *(_OWORD *)(v12 + 1512) = 0u;
  *(_DWORD *)(v12 + 1664) = 1065353216;
  *(_OWORD *)(v12 + 1688) = 0u;
  *(_OWORD *)(v12 + 1672) = 0u;
  *(_DWORD *)(v12 + 1704) = 1065353216;
  *(_OWORD *)(v12 + 1728) = 0u;
  *(_OWORD *)(v12 + 1712) = 0u;
  *(_DWORD *)(v12 + 1744) = 1065353216;
  *(_OWORD *)(v12 + 1768) = 0u;
  *(_OWORD *)(v12 + 1752) = 0u;
  *(_DWORD *)(v12 + 1784) = 1065353216;
  *(_OWORD *)(v12 + 1808) = 0u;
  *(_OWORD *)(v12 + 1792) = 0u;
  *(_DWORD *)(v12 + 1824) = 1065353216;
  *(_OWORD *)(v12 + 1832) = 0u;
  *(_OWORD *)(v12 + 1848) = 0u;
  *(_DWORD *)(v12 + 1864) = 1065353216;
  *(_QWORD *)(v12 + 1904) = 0;
  *(_OWORD *)(v12 + 1888) = 0u;
  *(_OWORD *)(v12 + 1872) = 0u;
  *(_DWORD *)(v12 + 1912) = 1065353216;
  *(_OWORD *)(v12 + 2184) = 0u;
  *(_OWORD *)(v12 + 2200) = 0u;
  *(_OWORD *)(v12 + 2152) = 0u;
  *(_OWORD *)(v12 + 2168) = 0u;
  *(_OWORD *)(v12 + 2120) = 0u;
  *(_OWORD *)(v12 + 2136) = 0u;
  *(_OWORD *)(v12 + 2088) = 0u;
  *(_OWORD *)(v12 + 2104) = 0u;
  *(_OWORD *)(v12 + 2056) = 0u;
  *(_OWORD *)(v12 + 2072) = 0u;
  *(_OWORD *)(v12 + 2024) = 0u;
  *(_OWORD *)(v12 + 2040) = 0u;
  *(_OWORD *)(v12 + 1992) = 0u;
  *(_OWORD *)(v12 + 2008) = 0u;
  *(_OWORD *)(v12 + 1960) = 0u;
  *(_OWORD *)(v12 + 1976) = 0u;
  *(_OWORD *)(v12 + 1928) = 0u;
  *(_OWORD *)(v12 + 1944) = 0u;
  *(_QWORD *)(v6 + 120) = v12;
  *(_BYTE *)(v12 + 808) = 0;
  return AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::setVertexVariantDriverShader(v12, *(_QWORD *)(a1 + 80), (uint64_t)v7);
}

void sub_232C874C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  if (*(char *)(v7 - 49) < 0)
    operator delete(*(void **)(v7 - 72));
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v6, 0x10F3C407D6B0260);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

double ___ZN3AGX2G920DevicePDSStateLoader5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS0_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_8(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t v12;
  double result;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18[54];
  uint64_t v19;
  uint64_t v20;

  if (a3)
  {
    v15 = "MTLCompilerErrorTimeout";
    v16 = "UnknownErrorCode";
    if (a3 == 2)
      v16 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v15 = v16;
    if (a3 == 1)
      v17 = "MTLCompilerErrorFatalError";
    else
      v17 = v15;
    v19 = 0;
    v20 = 0;
    ProgramKey<(_AGCStreamToken)93,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v20, &v19);
    v18[0] = a4;
    v18[1] = (uint64_t)v17;
    v18[2] = v19;
    v18[3] = v20;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 80);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v18, a2, 0, 1, 0, 0, 0, 0, v9, v10, v11, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v7, v8, (uint64_t)a2, (uint64_t)v18, 0, 0, 0);
  *(_QWORD *)v7 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v18);
  v12 = operator new();
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_QWORD *)(v12 + 344) = 0;
  *(_QWORD *)(v12 + 352) = 0;
  *(_DWORD *)(v12 + 264) = 1065353216;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_DWORD *)(v12 + 304) = 1065353216;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_DWORD *)(v12 + 352) = 1065353216;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_OWORD *)(v12 + 376) = 0u;
  *(_OWORD *)(v12 + 392) = 0u;
  *(_QWORD *)(v6 + 128) = v12;
  *(_QWORD *)(v12 + 16) = v7;
  *(_DWORD *)(v12 + 224) = *(_DWORD *)(v7 + 3248);
  result = *(double *)(v7 + 316);
  *(double *)(v12 + 160) = result;
  *(_DWORD *)(v12 + 176) = *(_DWORD *)(v7 + 352);
  return result;
}

void sub_232C876E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken93ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C87990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken93ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401518;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken93ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401518;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)93,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)93,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)93,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)93,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)93,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken92ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C87EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken92ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_2504014D8;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken92ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_2504014D8;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)92,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)92,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)92,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)92,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)92,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken38ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C883E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken38ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401498;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken38ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401498;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)38,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)38,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)38,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)38,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)38,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

double ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE15heapTextureDataEj_block_invoke()
{
  double result;

  qword_2542355C8 = 0;
  xmmword_254235588 = xmmword_232D76278;
  unk_254235598 = unk_232D76288;
  xmmword_2542355A8 = xmmword_232D76298;
  unk_2542355B8 = unk_232D762A8;
  AGX::DevicePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::heap_texture_data = agx_generic_heap_args;
  unk_254235578 = unk_232D76268;
  qword_254235630 = 0;
  unk_2542355E0 = unk_232D762D0;
  xmmword_2542355D0 = agx_aperture_heap_args;
  result = 0.0;
  unk_254235620 = unk_232D76310;
  xmmword_254235610 = xmmword_232D76300;
  unk_254235600 = unk_232D762F0;
  xmmword_2542355F0 = xmmword_232D762E0;
  return result;
}

double ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int *v17;
  const void **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  _QWORD *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  double result;
  const char *v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  _OWORD v36[2];
  _QWORD v37[64];
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int64x2_t v45;
  int v46;
  __int128 v47;
  _OWORD v48[2];

  if (a3)
  {
    v32 = "MTLCompilerErrorTimeout";
    v33 = "UnknownErrorCode";
    if (a3 == 2)
      v33 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v32 = v33;
    if (a3 == 1)
      v34 = "MTLCompilerErrorFatalError";
    else
      v34 = v32;
    *(_QWORD *)&v47 = 0;
    *(_QWORD *)&v35 = 0;
    ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v47, &v35);
    v37[0] = a4;
    v37[1] = v34;
    v37[2] = v35;
    v37[3] = v47;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(uint64_t **)(a1 + 32);
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v7 + 8) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_QWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_QWORD *)(v7 + 112) = 0;
  v9 = (unsigned int **)(a2 + 28);
  v10 = a2[28];
  *(_QWORD *)v7 = 0;
  *(_DWORD *)(v7 + 16) = 0;
  if (v10)
  {
    if (!a2[29])
      v9 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v9 = (unsigned int **)(a2 + 98);
  }
  v12 = *v9;
  v11 = v9[1];
  if (v12)
    v13 = v11 == 0;
  else
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (int *)((char *)v12 + *v12);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (v16 = v15[2]) != 0)
    v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  else
    v17 = 0;
  v18 = (const void **)(a2 + 3);
  if (a2[3])
  {
    if (a2[4])
      v19 = a2 + 3;
    else
      v19 = a2 + 73;
  }
  else
  {
    v19 = a2 + 73;
  }
  v20 = v8 + 4680;
  AGX::Heap<true>::allocateImpl(&v47, v8 + 4680, v19[1], (_QWORD *)v7);
  v21 = v47;
  if (*v18)
  {
    v22 = a2[4];
    if (v22)
      v23 = *v18;
    else
      v23 = (const void *)a2[73];
    if (v22)
      v24 = a2 + 3;
    else
      v24 = a2 + 73;
  }
  else
  {
    v24 = a2 + 73;
    v23 = (const void *)a2[73];
  }
  memcpy(*((void **)&v47 + 1), v23, v24[1]);
  *(_DWORD *)(v7 + 16) |= 1u;
  bzero(v37, 0x248uLL);
  v39 = 1;
  v40 = v21;
  v25 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v25 < 5u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    v26 = v25[2];
    if (v26)
      LODWORD(v26) = *(int *)((char *)v17 + v26);
  }
  v41 = v26;
  v38 = 0;
  v43 = 0;
  v45 = vdupq_n_s64(4uLL);
  v46 = 0;
  AGX::Heap<true>::allocateImpl(&v35, v20, 48, (_QWORD *)(v7 + 8));
  v27 = *((_QWORD *)&v35 + 1);
  *(_QWORD *)(v7 + 24) = v35;
  v44 = v27 + 32;
  v42 = v27;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)v37, 0);
  if (*(_DWORD *)(*(_QWORD *)(v7 + 8) + (int)*MEMORY[0x24BE51650] + 48) != *(_DWORD *)(*(_QWORD *)v7
                                                                                        + (int)*MEMORY[0x24BE51650]
                                                                                        + 48))
    *(_DWORD *)(v7 + 16) |= 2u;
  v28 = v48[0];
  *(_OWORD *)(v7 + 32) = v47;
  *(_OWORD *)(v7 + 48) = v28;
  *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)v48 + 9);
  v29 = v36[0];
  *(_OWORD *)(v7 + 80) = v35;
  *(_OWORD *)(v7 + 96) = v29;
  result = *(double *)((char *)v36 + 9);
  *(_OWORD *)(v7 + 105) = *(_OWORD *)((char *)v36 + 9);
  *v6 = v7;
  return result;
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

double ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_17(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int *v17;
  unsigned int **v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int *v22;
  unsigned int **v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  char *v27;
  const void **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  _QWORD *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 *v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  unsigned __int16 *v89;
  unint64_t v90;
  __int128 v91;
  double result;
  const char *v94;
  const char *v95;
  const char *v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  _OWORD v117[2];
  double v118[4];
  _OWORD v119[2];
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v94 = "MTLCompilerErrorTimeout";
    v95 = "UnknownErrorCode";
    if (a3 == 2)
      v95 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v94 = v95;
    if (a3 == 1)
      v96 = "MTLCompilerErrorFatalError";
    else
      v96 = v94;
    *(_QWORD *)&v116 = 0;
    v99 = 0;
    ProgramKey<(_AGCStreamToken)35,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v116, &v99);
    *(_QWORD *)&v102 = a4;
    *((_QWORD *)&v102 + 1) = v96;
    *(_QWORD *)&v103 = v99;
    *((_QWORD *)&v103 + 1) = v116;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_QWORD *)(v7 + 416) = 0;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_QWORD *)(v7 + 464) = 0;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 496) = 0u;
  *(_QWORD *)(v7 + 512) = 0;
  v9 = a2[28];
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  if (v9)
  {
    if (a2[29])
      v10 = (unsigned int **)(a2 + 28);
    else
      v10 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v10 = (unsigned int **)(a2 + 98);
  }
  v12 = *v10;
  v11 = v10[1];
  if (v12)
    v13 = v11 == 0;
  else
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (int *)((char *)v12 + *v12);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (v16 = v15[2]) != 0)
  {
    v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
    if (!v9)
    {
LABEL_16:
      v18 = (unsigned int **)(a2 + 98);
      goto LABEL_21;
    }
  }
  else
  {
    v17 = 0;
    if (!v9)
      goto LABEL_16;
  }
  if (a2[29])
    v18 = (unsigned int **)(a2 + 28);
  else
    v18 = (unsigned int **)(a2 + 98);
LABEL_21:
  v19 = 0;
  if (*v18 && v18[1])
    v19 = (int *)((char *)*v18 + **v18);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xBu && (v21 = v20[5]) != 0)
  {
    v22 = (int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    if (!a2[58])
    {
LABEL_27:
      v23 = (unsigned int **)(a2 + 128);
      goto LABEL_32;
    }
  }
  else
  {
    v22 = 0;
    if (!a2[58])
      goto LABEL_27;
  }
  if (a2[59])
    v23 = (unsigned int **)(a2 + 58);
  else
    v23 = (unsigned int **)(a2 + 128);
LABEL_32:
  v24 = 0;
  if (*v23 && v23[1])
    v24 = (int *)((char *)*v23 + **v23);
  v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 0xBu && (v26 = v25[5]) != 0)
    v27 = (char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26);
  else
    v27 = 0;
  v28 = (const void **)(a2 + 3);
  v97 = v22;
  v98 = v6;
  if (a2[3])
  {
    if (a2[4])
      v29 = a2 + 3;
    else
      v29 = a2 + 73;
  }
  else
  {
    v29 = a2 + 73;
  }
  v30 = v8 + 4680;
  AGX::Heap<true>::allocateImpl(&v116, v8 + 4680, v29[1], (_QWORD *)v7);
  v31 = v116;
  if (*v28)
  {
    v32 = a2[4];
    if (v32)
      v33 = *v28;
    else
      v33 = (const void *)a2[73];
    if (v32)
      v34 = a2 + 3;
    else
      v34 = a2 + 73;
  }
  else
  {
    v34 = a2 + 73;
    v33 = (const void *)a2[73];
  }
  memcpy(*((void **)&v116 + 1), v33, v34[1]);
  *(_QWORD *)(v7 + 24) |= 0x100000001uLL;
  v115 = 0;
  v113 = 0u;
  v114 = 0u;
  v110 = 0;
  v112 = 0u;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  v111 = v31;
  v35 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v35 < 5u)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    v36 = v35[2];
    if (v36)
      LODWORD(v36) = *(int *)((char *)v17 + v36);
  }
  LODWORD(v112) = v36;
  v37 = *(int *)v27;
  v38 = *(unsigned __int16 *)&v27[-v37 + 4];
  v39 = *(unsigned int *)&v27[v38];
  v40 = *(_DWORD *)&v27[v38 + v39];
  if (v40)
  {
    v41 = 0;
    v40 = 0;
    v42 = 0;
    v43 = 0;
    v44 = v7 + 32;
    do
    {
      v46 = v38 + v39;
      v47 = *(unsigned int *)&v27[v41 + 4 + v46];
      v48 = v46 + v47;
      v49 = &v27[v41 + v46 + v47];
      v50 = *((int *)v49 + 1);
      v51 = &v27[v41 + v48 - v50];
      if (*((unsigned __int16 *)v51 + 2) >= 7u)
      {
        v52 = *((unsigned __int16 *)v51 + 5);
        if (v52)
        {
          v37 = -v50;
          switch(v27[v38 + 4 + v39 + v47 + v41 + v52])
          {
            case 4:
            case 6:
              goto LABEL_72;
            case 5:
            case 7:
              v53 = v38 + v39 + v47;
              v54 = *(unsigned __int16 *)&v27[v41 + 8 + v53 - v50];
              if (*(_WORD *)&v27[v41 + 8 + v53 - v50])
                LODWORD(v54) = *(_DWORD *)&v27[v53 + 4 + v41 + v54];
              *((_DWORD *)&v102 + 2 * v40 + 1) = v54;
              v55 = *((int *)v49 + 1);
              if (*(unsigned __int16 *)&v27[v41 + 4 + v53 - v55] >= 5u
                && (v56 = v38 + v39 + v47, *(_WORD *)&v27[v41 + 8 + v56 - v55]))
              {
                v57 = *(_DWORD *)&v27[v56 + 4 + v41 + *(unsigned __int16 *)&v27[v41 + 8 + v56 - v55]];
              }
              else
              {
                v57 = 0;
              }
              *((_DWORD *)&v102 + 2 * v40++ + 2) = v57;
              HIDWORD(v110) = v40;
              v58 = *((int *)v49 + 1);
              if (*(unsigned __int16 *)&v27[v41 + 4 + v38 + v39 + v47 - v58] < 7u)
              {
                LODWORD(v60) = 0;
              }
              else
              {
                v37 = -v58;
LABEL_72:
                v59 = &v27[v38 + v39 + v47];
                v60 = *(unsigned __int16 *)&v59[v37 + 10 + v41];
                if (v60)
                  LODWORD(v60) = v59[v41 + 4 + v60];
              }
              v61 = v60 - 4;
              v62 = v61 & 0x3FFFFFFF;
              v63 = 8 * v61;
              v64 = v44 + v63;
              *(_DWORD *)(v44 + v63) = v62;
              v37 = v7 + 176 + v63;
              *(_DWORD *)v37 = v62;
              v65 = v38 + v39 + v47;
              v66 = &v27[v41 + v65 - *((int *)v49 + 1)];
              if (*((unsigned __int16 *)v66 + 2) < 5u)
              {
                LODWORD(v67) = 0;
              }
              else
              {
                v67 = *((unsigned __int16 *)v66 + 4);
                if (v67)
                  LODWORD(v67) = *(_DWORD *)&v27[v38 + 4 + v39 + v47 + v41 + v67];
              }
              *(_DWORD *)(v64 + 4) = 4 * v67;
              v68 = *((int *)v49 + 1);
              if (*(unsigned __int16 *)&v27[v41 + 4 + v65 - v68] >= 5u
                && (v69 = v38 + v39 + v47, *(_WORD *)&v27[v41 + 8 + v69 - v68]))
              {
                v45 = *(_DWORD *)&v27[v69 + 4 + v41 + *(unsigned __int16 *)&v27[v41 + 8 + v69 - v68]];
              }
              else
              {
                v45 = 0;
              }
              *(_DWORD *)(v37 + 4) = 4 * v45;
              ++v43;
              LODWORD(v37) = *(_DWORD *)v27;
              break;
            default:
              break;
          }
        }
      }
      ++v42;
      v38 = *(unsigned __int16 *)&v27[-(int)v37 + 4];
      v39 = *(unsigned int *)&v27[v38];
      v41 += 4;
    }
    while (v42 < *(unsigned int *)&v27[v38 + v39]);
  }
  else
  {
    v43 = 0;
  }
  *((_QWORD *)&v112 + 1) = v7 + 8 * v43 + 32;
  v70 = 2 * v40;
  LODWORD(v113) = 2 * v40;
  v71 = v70 + v40;
  v72 = (v40 - 1 + 6) & 0x1FFFFFFFCLL;
  v13 = v40 == 0;
  v73 = 4;
  if (!v13)
    v73 = v72;
  v74 = ((v71 + 5) & 0x3FFFFFFFCLL) - v70;
  *(_QWORD *)&v114 = v74;
  *((_QWORD *)&v114 + 1) = v73;
  LODWORD(v115) = 0;
  *(_DWORD *)(v7 + 164) = v43;
  *(_DWORD *)(v7 + 168) = v74;
  *(_DWORD *)(v7 + 160) = 4 * (v43 + v74);
  v75 = 4 * v73;
  AGX::Heap<true>::allocateImpl(&v99, v30, 4 * v73 + 32, (_QWORD *)(v7 + 8));
  v76 = v99;
  v77 = v100;
  v119[0] = v101[0];
  *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)((char *)v101 + 9);
  *((_QWORD *)&v113 + 1) = v100;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeContextSwitchPDSProgram((uint64_t)&v102, 0);
  *(_DWORD *)(v77 + v75 + 16) = -754974720;
  v78 = (int *)MEMORY[0x24BE51650];
  if (*(_DWORD *)(*(_QWORD *)v7 + (int)*MEMORY[0x24BE51650] + 48) != *(_DWORD *)(*(_QWORD *)(v7 + 8)
                                                                                  + (int)*MEMORY[0x24BE51650]
                                                                                  + 48))
    *(_DWORD *)(v7 + 24) |= 2u;
  LOBYTE(v102) = 1;
  *((_QWORD *)&v112 + 1) = v7 + 8 * v43 + 176;
  LODWORD(v113) = 2 * HIDWORD(v110);
  v79 = 8;
  if (HIDWORD(v110))
    v79 = ((HIDWORD(v110) - 1) + 9) & 0x1FFFFFFFCLL;
  v80 = ((3 * HIDWORD(v110) + 5) & 0xFFFFFFFC) - 2 * HIDWORD(v110);
  *(_QWORD *)&v114 = ((HIDWORD(v110) + (unint64_t)(2 * HIDWORD(v110)) + 5) & 0x3FFFFFFFCLL)
                   - (2 * HIDWORD(v110));
  *((_QWORD *)&v114 + 1) = v79;
  LODWORD(v115) = 0;
  *(_DWORD *)(v7 + 308) = v43;
  *(_DWORD *)(v7 + 312) = v80;
  *(_DWORD *)(v7 + 304) = 4 * (v43 + v80);
  v81 = 4 * v79;
  AGX::Heap<true>::allocateImpl(&v99, v30, 4 * v79 + 48, (_QWORD *)(v7 + 16));
  v82 = v99;
  v83 = v100;
  *(_OWORD *)v118 = v101[0];
  *(_OWORD *)((char *)&v118[1] + 1) = *(_OWORD *)((char *)v101 + 9);
  *((_QWORD *)&v113 + 1) = v100;
  v84 = v100 + v81;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeContextSwitchPDSProgram((uint64_t)&v102, 0);
  *(_OWORD *)v84 = xmmword_232D736B0;
  *(_DWORD *)(v84 + 16) = -754974720;
  if (*(_DWORD *)(*(_QWORD *)v7 + *v78 + 48) != *(_DWORD *)(*(_QWORD *)(v7 + 16) + *v78 + 48))
    *(_DWORD *)(v7 + 28) |= 4u;
  v85 = (unsigned __int16 *)((char *)v97 - *v97);
  if (*v85 >= 5u && (v86 = v85[2]) != 0)
    v87 = ((*(int *)((char *)v97 + v86) << 9) + 1920) & 0xDBFFF800;
  else
    v87 = 0;
  *(_DWORD *)(v7 + 320) = v87 | 0x24000000 | (((unint64_t)*(unsigned int *)(v7 + 160) + 15) >> 4);
  *(_DWORD *)(v7 + 324) = 5;
  *(_DWORD *)(v7 + 328) = (v76 + 15) & 0xFFFFFFF0;
  *(_QWORD *)(v7 + 332) = ((unint64_t)((((_DWORD)v76 + 15 + (_DWORD)v75) & 0xFFFFFFF0) >> 4) << 36) | 0x4820;
  *(_DWORD *)(v7 + 340) = 536870913;
  *(_DWORD *)(v7 + 344) = (v76 + 15 + v75) & 0xFFFFFFF0 | 5;
  *(_DWORD *)(v7 + 348) = (v76 + 15 + v75 + 16) & 0xFFFFFFF0;
  v88 = *(unsigned int *)(v7 + 304);
  v89 = (unsigned __int16 *)((char *)v97 - *v97);
  if (*v89 < 5u)
  {
    v90 = 0;
  }
  else
  {
    v90 = v89[2];
    if (v90)
      v90 = (((unint64_t)*(unsigned int *)((char *)v97 + v90) << 20) + 3932160) & 0x1FFFFFAFC00000;
  }
  *(_QWORD *)(v7 + 352) = (v82 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 360) = v90 | (v88 >> 3) | 0x50000001;
  *(_QWORD *)(v7 + 368) = (((v81 + v82) << 32) + 0x1700000000) & 0xFFFFFFF000000000 | (v81 + v82 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 376) = 1075838979;
  v91 = v117[0];
  *(_OWORD *)(v7 + 384) = v116;
  *(_OWORD *)(v7 + 400) = v91;
  *(_OWORD *)(v7 + 409) = *(_OWORD *)((char *)v117 + 9);
  *(_QWORD *)(v7 + 432) = v76;
  *(_QWORD *)(v7 + 440) = v77;
  *(_OWORD *)(v7 + 448) = v119[0];
  *(_OWORD *)(v7 + 457) = *(_OWORD *)((char *)v119 + 9);
  *(_QWORD *)(v7 + 480) = v82;
  *(_QWORD *)(v7 + 488) = v83;
  *(_OWORD *)(v7 + 505) = *(_OWORD *)((char *)&v118[1] + 1);
  result = v118[0];
  *(_OWORD *)(v7 + 496) = *(_OWORD *)v118;
  *(_QWORD *)(v98 + 8) = v7;
  *(_QWORD *)(v98 + 24) = v7;
  return result;
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

__n128 ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_19(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int *v17;
  unsigned int **v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int *v22;
  unsigned int **v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  char *v27;
  const void **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  _QWORD *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned __int16 *v87;
  unint64_t v88;
  __int128 v89;
  __n128 result;
  const char *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  _OWORD v114[2];
  __n128 v115[2];
  __n128 v116[2];
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v92 = "MTLCompilerErrorTimeout";
    v93 = "UnknownErrorCode";
    if (a3 == 2)
      v93 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v92 = v93;
    if (a3 == 1)
      v94 = "MTLCompilerErrorFatalError";
    else
      v94 = v92;
    *(_QWORD *)&v113 = 0;
    v96 = 0;
    ProgramKey<(_AGCStreamToken)36,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v113, &v96);
    *(_QWORD *)&v99 = a4;
    *((_QWORD *)&v99 + 1) = v94;
    *(_QWORD *)&v100 = v96;
    *((_QWORD *)&v100 + 1) = v113;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v7 + 368) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_QWORD *)(v7 + 400) = 0;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_QWORD *)(v7 + 448) = 0;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_QWORD *)(v7 + 496) = 0;
  v9 = a2[28];
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  if (v9)
  {
    if (a2[29])
      v10 = (unsigned int **)(a2 + 28);
    else
      v10 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v10 = (unsigned int **)(a2 + 98);
  }
  v12 = *v10;
  v11 = v10[1];
  if (v12)
    v13 = v11 == 0;
  else
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (int *)((char *)v12 + *v12);
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (v16 = v15[2]) != 0)
  {
    v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
    if (!v9)
    {
LABEL_16:
      v18 = (unsigned int **)(a2 + 98);
      goto LABEL_21;
    }
  }
  else
  {
    v17 = 0;
    if (!v9)
      goto LABEL_16;
  }
  if (a2[29])
    v18 = (unsigned int **)(a2 + 28);
  else
    v18 = (unsigned int **)(a2 + 98);
LABEL_21:
  v19 = 0;
  if (*v18 && v18[1])
    v19 = (int *)((char *)*v18 + **v18);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xBu && (v21 = v20[5]) != 0)
  {
    v22 = (int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    if (!a2[58])
    {
LABEL_27:
      v23 = (unsigned int **)(a2 + 128);
      goto LABEL_32;
    }
  }
  else
  {
    v22 = 0;
    if (!a2[58])
      goto LABEL_27;
  }
  if (a2[59])
    v23 = (unsigned int **)(a2 + 58);
  else
    v23 = (unsigned int **)(a2 + 128);
LABEL_32:
  v24 = 0;
  if (*v23 && v23[1])
    v24 = (int *)((char *)*v23 + **v23);
  v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 0xBu && (v26 = v25[5]) != 0)
    v27 = (char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26);
  else
    v27 = 0;
  v28 = (const void **)(a2 + 3);
  v95 = v6;
  if (a2[3])
  {
    if (a2[4])
      v29 = a2 + 3;
    else
      v29 = a2 + 73;
  }
  else
  {
    v29 = a2 + 73;
  }
  v30 = v8 + 4680;
  AGX::Heap<true>::allocateImpl(&v113, v8 + 4680, v29[1], (_QWORD *)v7);
  v31 = v113;
  if (*v28)
  {
    v32 = a2[4];
    if (v32)
      v33 = *v28;
    else
      v33 = (const void *)a2[73];
    if (v32)
      v34 = a2 + 3;
    else
      v34 = a2 + 73;
  }
  else
  {
    v34 = a2 + 73;
    v33 = (const void *)a2[73];
  }
  memcpy(*((void **)&v113 + 1), v33, v34[1]);
  *(_QWORD *)(v7 + 24) |= 0x100000001uLL;
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  v107 = 0;
  v109 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v108 = v31;
  v35 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v35 < 5u)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    v36 = v35[2];
    if (v36)
      LODWORD(v36) = *(int *)((char *)v17 + v36);
  }
  LODWORD(v109) = v36;
  v37 = *(int *)v27;
  v38 = *(unsigned __int16 *)&v27[-v37 + 4];
  v39 = *(unsigned int *)&v27[v38];
  v40 = *(_DWORD *)&v27[v38 + v39];
  if (v40)
  {
    v41 = 0;
    v40 = 0;
    v42 = 0;
    v43 = 0;
    v44 = v7 + 32;
    do
    {
      v46 = v38 + v39;
      v47 = *(unsigned int *)&v27[v41 + 4 + v46];
      v48 = v46 + v47;
      v49 = &v27[v41 + v46 + v47];
      v50 = *((int *)v49 + 1);
      v51 = &v27[v41 + v48 - v50];
      if (*((unsigned __int16 *)v51 + 2) >= 7u)
      {
        v52 = *((unsigned __int16 *)v51 + 5);
        if (v52)
        {
          v37 = -v50;
          switch(v27[v38 + 4 + v39 + v47 + v41 + v52])
          {
            case 4:
            case 6:
              goto LABEL_72;
            case 5:
            case 7:
              v53 = v38 + v39 + v47;
              v54 = *(unsigned __int16 *)&v27[v41 + 8 + v53 - v50];
              if (*(_WORD *)&v27[v41 + 8 + v53 - v50])
                LODWORD(v54) = *(_DWORD *)&v27[v53 + 4 + v41 + v54];
              *((_DWORD *)&v99 + 2 * v40 + 1) = v54;
              v55 = *((int *)v49 + 1);
              if (*(unsigned __int16 *)&v27[v41 + 4 + v53 - v55] >= 5u
                && (v56 = v38 + v39 + v47, *(_WORD *)&v27[v41 + 8 + v56 - v55]))
              {
                v57 = *(_DWORD *)&v27[v56 + 4 + v41 + *(unsigned __int16 *)&v27[v41 + 8 + v56 - v55]];
              }
              else
              {
                v57 = 0;
              }
              *((_DWORD *)&v99 + 2 * v40++ + 2) = v57;
              HIDWORD(v107) = v40;
              v58 = *((int *)v49 + 1);
              if (*(unsigned __int16 *)&v27[v41 + 4 + v38 + v39 + v47 - v58] < 7u)
              {
                LODWORD(v60) = 0;
              }
              else
              {
                v37 = -v58;
LABEL_72:
                v59 = &v27[v38 + v39 + v47];
                v60 = *(unsigned __int16 *)&v59[v37 + 10 + v41];
                if (v60)
                  LODWORD(v60) = v59[v41 + 4 + v60];
              }
              v61 = v60 - 4;
              v62 = v61 & 0x3FFFFFFF;
              v63 = 8 * v61;
              v64 = v44 + v63;
              *(_DWORD *)(v44 + v63) = v62;
              v37 = v7 + 176 + v63;
              *(_DWORD *)v37 = v62;
              v65 = v38 + v39 + v47;
              v66 = &v27[v41 + v65 - *((int *)v49 + 1)];
              if (*((unsigned __int16 *)v66 + 2) < 5u)
              {
                LODWORD(v67) = 0;
              }
              else
              {
                v67 = *((unsigned __int16 *)v66 + 4);
                if (v67)
                  LODWORD(v67) = *(_DWORD *)&v27[v38 + 4 + v39 + v47 + v41 + v67];
              }
              *(_DWORD *)(v64 + 4) = 4 * v67;
              v68 = *((int *)v49 + 1);
              if (*(unsigned __int16 *)&v27[v41 + 4 + v65 - v68] >= 5u
                && (v69 = v38 + v39 + v47, *(_WORD *)&v27[v41 + 8 + v69 - v68]))
              {
                v45 = *(_DWORD *)&v27[v69 + 4 + v41 + *(unsigned __int16 *)&v27[v41 + 8 + v69 - v68]];
              }
              else
              {
                v45 = 0;
              }
              *(_DWORD *)(v37 + 4) = 4 * v45;
              ++v43;
              LODWORD(v37) = *(_DWORD *)v27;
              break;
            default:
              break;
          }
        }
      }
      ++v42;
      v38 = *(unsigned __int16 *)&v27[-(int)v37 + 4];
      v39 = *(unsigned int *)&v27[v38];
      v41 += 4;
    }
    while (v42 < *(unsigned int *)&v27[v38 + v39]);
  }
  else
  {
    v43 = 0;
  }
  *((_QWORD *)&v109 + 1) = v7 + 8 * v43 + 32;
  v70 = 2 * v40;
  LODWORD(v110) = 2 * v40;
  v71 = v70 + v40;
  v72 = (v40 - 1 + 6) & 0x1FFFFFFFCLL;
  v13 = v40 == 0;
  v73 = 4;
  if (!v13)
    v73 = v72;
  v74 = ((v71 + 5) & 0x3FFFFFFFCLL) - v70;
  *(_QWORD *)&v111 = v74;
  *((_QWORD *)&v111 + 1) = v73;
  LODWORD(v112) = 0;
  *(_DWORD *)(v7 + 164) = v43;
  *(_DWORD *)(v7 + 168) = v74;
  *(_DWORD *)(v7 + 160) = 4 * (v43 + v74);
  v75 = 4 * v73;
  AGX::Heap<true>::allocateImpl(&v96, v30, 4 * v73 + 32, (_QWORD *)(v7 + 8));
  v76 = v96;
  v77 = v97;
  v116[0] = v98[0];
  *(__n128 *)((char *)v116 + 9) = *(__n128 *)((char *)v98 + 9);
  *((_QWORD *)&v110 + 1) = v97;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeContextSwitchPDSProgram((uint64_t)&v99, 0);
  *(_DWORD *)(v77 + v75 + 16) = -754974720;
  v78 = (int *)MEMORY[0x24BE51650];
  if (*(_DWORD *)(*(_QWORD *)v7 + (int)*MEMORY[0x24BE51650] + 48) != *(_DWORD *)(*(_QWORD *)(v7 + 8)
                                                                                  + (int)*MEMORY[0x24BE51650]
                                                                                  + 48))
    *(_DWORD *)(v7 + 24) |= 2u;
  LOBYTE(v99) = 1;
  *((_QWORD *)&v109 + 1) = v7 + 8 * v43 + 176;
  LODWORD(v110) = 2 * HIDWORD(v107);
  v79 = 8;
  if (HIDWORD(v107))
    v79 = ((HIDWORD(v107) - 1) + 9) & 0x1FFFFFFFCLL;
  v80 = ((3 * HIDWORD(v107) + 5) & 0xFFFFFFFC) - 2 * HIDWORD(v107);
  *(_QWORD *)&v111 = ((HIDWORD(v107) + (unint64_t)(2 * HIDWORD(v107)) + 5) & 0x3FFFFFFFCLL)
                   - (2 * HIDWORD(v107));
  *((_QWORD *)&v111 + 1) = v79;
  LODWORD(v112) = 0;
  *(_DWORD *)(v7 + 308) = v43;
  *(_DWORD *)(v7 + 312) = v80;
  *(_DWORD *)(v7 + 304) = 4 * (v43 + v80);
  AGX::Heap<true>::allocateImpl(&v96, v30, 4 * v79, (_QWORD *)(v7 + 16));
  v81 = v96;
  v82 = v97;
  v115[0] = v98[0];
  *(__n128 *)((char *)v115 + 9) = *(__n128 *)((char *)v98 + 9);
  *((_QWORD *)&v110 + 1) = v97;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeContextSwitchPDSProgram((uint64_t)&v99, 0);
  if (*(_DWORD *)(*(_QWORD *)v7 + *v78 + 48) != *(_DWORD *)(*(_QWORD *)(v7 + 16) + *v78 + 48))
    *(_DWORD *)(v7 + 28) |= 4u;
  v83 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v83 >= 5u && (v84 = v83[2]) != 0)
    v85 = ((*(int *)((char *)v22 + v84) << 9) + 1920) & 0xDEFFF800;
  else
    v85 = 0;
  *(_DWORD *)(v7 + 320) = v85 | 0x21000000 | (((unint64_t)*(unsigned int *)(v7 + 160) + 15) >> 4);
  *(_DWORD *)(v7 + 324) = 1;
  *(_DWORD *)(v7 + 328) = (v76 + 15) & 0xFFFFFFF0;
  *(_QWORD *)(v7 + 332) = ((unint64_t)((((_DWORD)v76 + 15 + (_DWORD)v75) & 0xFFFFFFF0) >> 4) << 36) | 0x4820;
  *(_DWORD *)(v7 + 340) = 536870913;
  *(_DWORD *)(v7 + 344) = (v76 + 15 + v75) & 0xFFFFFFF0 | 1;
  *(_DWORD *)(v7 + 348) = (v76 + 15 + v75 + 16) & 0xFFFFFFF0;
  v86 = *(unsigned int *)(v7 + 304);
  v87 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v87 < 5u)
  {
    v88 = 0;
  }
  else
  {
    v88 = v87[2];
    if (v88)
      v88 = (((unint64_t)*(unsigned int *)((char *)v22 + v88) << 20) + 3932160) & 0x1FFFFFFFC00000;
  }
  *(_QWORD *)(v7 + 352) = (v81 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 360) = v88 | (v86 >> 3) & 0xFFFFFFFFFFFFFFFELL | 0x200000;
  v89 = v114[0];
  *(_OWORD *)(v7 + 368) = v113;
  *(_OWORD *)(v7 + 384) = v89;
  *(_OWORD *)(v7 + 393) = *(_OWORD *)((char *)v114 + 9);
  *(_QWORD *)(v7 + 416) = v76;
  *(_QWORD *)(v7 + 424) = v77;
  *(__n128 *)(v7 + 432) = v116[0];
  *(__n128 *)(v7 + 441) = *(__n128 *)((char *)v116 + 9);
  *(_QWORD *)(v7 + 464) = v81;
  *(_QWORD *)(v7 + 472) = v82;
  result = v115[0];
  *(__n128 *)(v7 + 489) = *(__n128 *)((char *)v115 + 9);
  *(__n128 *)(v7 + 480) = result;
  *(_QWORD *)(v95 + 16) = v7;
  *(_QWORD *)(v95 + 32) = v7;
  return result;
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

__n128 ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_21(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  BOOL v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int *v16;
  const void **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  _QWORD *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __n128 result;
  const char *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  __int128 v40;
  _BYTE v41[25];
  __int128 v42;
  _OWORD v43[2];
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  int64x2_t v49;
  uint64_t v50;
  __int128 v51;
  _OWORD v52[2];

  if (a3)
  {
    v36 = "MTLCompilerErrorTimeout";
    v37 = "UnknownErrorCode";
    if (a3 == 2)
      v37 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v36 = v37;
    if (a3 == 1)
      v38 = "MTLCompilerErrorFatalError";
    else
      v38 = v36;
    *(_QWORD *)&v51 = 0;
    *(_QWORD *)&v42 = 0;
    ProgramKey<(_AGCStreamToken)37,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v51, &v42);
    *(_QWORD *)&v44 = a4;
    *((_QWORD *)&v44 + 1) = v38;
    v45 = v42;
    v46 = v51;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v39 = *(_QWORD *)(a1 + 32);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_QWORD *)(v6 + 144) = 0;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  v8 = (unsigned int **)(a2 + 28);
  v9 = a2[28];
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 24) = 0;
  if (v9)
  {
    if (!a2[29])
      v8 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v8 = (unsigned int **)(a2 + 98);
  }
  v11 = *v8;
  v10 = v8[1];
  if (v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (int *)((char *)v11 + *v11);
  v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (v15 = v14[2]) != 0)
    v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  else
    v16 = 0;
  v17 = (const void **)(a2 + 3);
  if (a2[3])
  {
    if (a2[4])
      v18 = a2 + 3;
    else
      v18 = a2 + 73;
  }
  else
  {
    v18 = a2 + 73;
  }
  v19 = v7 + 5016;
  AGX::Heap<true>::allocateImpl(&v51, v7 + 5016, v18[1], (_QWORD *)v6);
  v20 = v51;
  if (*v17)
  {
    v21 = a2[4];
    if (v21)
      v22 = *v17;
    else
      v22 = (const void *)a2[73];
    if (v21)
      v23 = a2 + 3;
    else
      v23 = a2 + 73;
  }
  else
  {
    v23 = a2 + 73;
    v22 = (const void *)a2[73];
  }
  memcpy(*((void **)&v51 + 1), v22, v23[1]);
  *(_DWORD *)(v6 + 24) |= 1u;
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v45 = 0;
  v47 = 0u;
  v44 = 0u;
  v46 = v20;
  v24 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v24 < 5u)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    v25 = v24[2];
    if (v25)
      LODWORD(v25) = *(int *)((char *)v16 + v25);
  }
  LODWORD(v47) = v25;
  LODWORD(v48) = 0;
  v49 = vdupq_n_s64(4uLL);
  v50 = 0x400000000;
  AGX::Heap<true>::allocateImpl(&v42, v19, 16, (_QWORD *)(v6 + 8));
  AGX::Heap<true>::allocateImpl(&v40, v19, 16, (_QWORD *)(v6 + 16));
  v26 = v42;
  v27 = v40;
  *((_QWORD *)&v48 + 1) = *((_QWORD *)&v42 + 1);
  *((_QWORD *)&v47 + 1) = *((_QWORD *)&v40 + 1);
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeComputePDSProgram((uint64_t)&v44, 0, 0);
  v28 = (int)*MEMORY[0x24BE51650];
  v29 = *(_DWORD *)(*(_QWORD *)(v6 + 8) + v28 + 48);
  v30 = *(_DWORD *)(*(_QWORD *)v6 + v28 + 48);
  if (v29 != v30)
    *(_DWORD *)(v6 + 24) |= 2u;
  v31 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + v28 + 48);
  if (v31 != v30 && v31 != v29)
    *(_DWORD *)(v6 + 24) |= 4u;
  *(_DWORD *)(v6 + 28) = ((unint64_t)(4 * v49.i64[0] + 15) >> 3) & 0xFFFFFFFE;
  *(_DWORD *)(v6 + 32) = v27 & 0xFFFFFFF0 | 0xA;
  *(_DWORD *)(v6 + 36) = v26 & 0xFFFFFFF0;
  *(_OWORD *)(v6 + 40) = xmmword_232D73540;
  *(_DWORD *)(v6 + 56) = 0;
  v32 = v52[0];
  *(_OWORD *)(v6 + 64) = v51;
  *(_OWORD *)(v6 + 80) = v32;
  *(_OWORD *)(v6 + 89) = *(_OWORD *)((char *)v52 + 9);
  v33 = v43[0];
  *(_OWORD *)(v6 + 112) = v42;
  *(_OWORD *)(v6 + 128) = v33;
  *(_OWORD *)(v6 + 137) = *(_OWORD *)((char *)v43 + 9);
  *(_OWORD *)(v6 + 185) = *(_OWORD *)&v41[9];
  result = *(__n128 *)v41;
  *(_OWORD *)(v6 + 160) = v40;
  *(__n128 *)(v6 + 176) = result;
  *(_QWORD *)(v39 + 48) = v6;
  return result;
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

__n128 ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE5setupEP18AGXA10FamilyDeviceRNS_8CompilerERNS1_6DeviceERNS_23SamplerStateEncoderGen2I9kAGXRevG9E18SamplerStateFieldsE_block_invoke_23(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  BOOL v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int *v18;
  const void **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int16 *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  __n128 result;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  _BYTE v70[25];
  __int128 v71;
  _OWORD v72[2];
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  __int128 v86;
  _OWORD v87[2];

  if (a3)
  {
    v64 = "MTLCompilerErrorTimeout";
    v65 = "UnknownErrorCode";
    if (a3 == 2)
      v65 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v64 = v65;
    if (a3 == 1)
      v66 = "MTLCompilerErrorFatalError";
    else
      v66 = v64;
    *(_QWORD *)&v86 = 0;
    *(_QWORD *)&v71 = 0;
    ProgramKey<(_AGCStreamToken)39,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 40, &v86, &v71);
    v73 = a4;
    v74 = v66;
    v75 = v71;
    v76 = v86;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = operator new();
  v8 = *(_QWORD *)(a1 + 80);
  v68 = *(char **)(v6 + 64);
  v9 = *(uint64_t **)(a1 + 112);
  *(_OWORD *)(v7 + 72) = 0u;
  *(_QWORD *)(v7 + 104) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_QWORD *)(v7 + 152) = 0;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_QWORD *)(v7 + 200) = 0;
  *(_OWORD *)(v7 + 184) = 0u;
  v10 = (unsigned int **)(a2 + 28);
  v11 = a2[28];
  *(_DWORD *)(v7 + 32) = 0;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  if (v11)
  {
    if (!a2[29])
      v10 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v10 = (unsigned int **)(a2 + 98);
  }
  v13 = *v10;
  v12 = v10[1];
  if (v13)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    v15 = 0;
  else
    v15 = (int *)((char *)v13 + *v13);
  v16 = (unsigned __int16 *)((char *)v15 - *v15);
  v67 = v6;
  if (*v16 >= 5u && (v17 = v16[2]) != 0)
    v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  else
    v18 = 0;
  v19 = (const void **)(a2 + 3);
  if (a2[3])
  {
    if (a2[4])
      v20 = a2 + 3;
    else
      v20 = a2 + 73;
  }
  else
  {
    v20 = a2 + 73;
  }
  v21 = v8 + 5016;
  AGX::Heap<true>::allocateImpl(&v86, v8 + 5016, v20[1], (_QWORD *)v7);
  if (*v19)
  {
    v22 = a2[4];
    if (v22)
      v23 = *v19;
    else
      v23 = (const void *)a2[73];
    if (v22)
      v24 = a2 + 3;
    else
      v24 = a2 + 73;
  }
  else
  {
    v24 = a2 + 73;
    v23 = (const void *)a2[73];
  }
  v25 = v86;
  memcpy(*((void **)&v86 + 1), v23, v24[1]);
  v26 = *(_DWORD *)(v7 + 32);
  *(_QWORD *)(v7 + 24) = v68;
  *(_DWORD *)(v7 + 32) = v26 | 9;
  v27 = objc_msgSend(v68, "contents");
  v28 = (char *)v18 - *v18;
  v29 = *((unsigned __int16 *)v28 + 3);
  v30 = v9;
  if (*((_WORD *)v28 + 3))
    v29 = (4 * *(int *)((char *)v18 + v29));
  v31 = *(unsigned int *)((char *)v18
                        + *((unsigned __int16 *)v28 + 4)
                        + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v28 + 4)));
  v32 = (int *)MEMORY[0x24BE51650];
  if ((_DWORD)v31)
  {
    v33 = 0;
    v34 = 4 * v31;
    while (1)
    {
      v36 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v36 < 9u)
      {
        v37 = 0;
      }
      else
      {
        v37 = v36[4];
        if (v37)
          v37 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v37);
      }
      v38 = *(unsigned int *)(v37 + v33 + 4);
      v39 = v38 - *(int *)(v37 + v33 + v38 + 4);
      v40 = v37 + v33 + v39;
      v41 = *(unsigned __int16 *)(v40 + 4);
      if (v41 >= 0xB)
        break;
      v43 = v27;
      if (v41 >= 5)
        goto LABEL_46;
LABEL_36:
      v33 += 4;
      if (v34 == v33)
        goto LABEL_51;
    }
    v42 = *(unsigned __int16 *)(v40 + 14);
    if (v42)
      v42 = *(unsigned int *)(v37 + v33 + v42 + v38 + 4);
    v43 = v27 + 4 * v42;
LABEL_46:
    v44 = v37 + v33;
    v45 = *(unsigned __int16 *)(v44 + v39 + 8);
    if (v45)
    {
      switch(*(_BYTE *)(v44 + v45 + v38 + 4))
      {
        case 1:
          v46 = *(_OWORD *)(a1 + 88);
          *(_QWORD *)(v43 + 16) = *(_QWORD *)(a1 + 104);
          *(_OWORD *)v43 = v46;
          break;
        case 2:
          v35 = *v30;
          goto LABEL_35;
        case 3:
          v35 = *(_QWORD *)&v68[*v32 + 8] + v29;
LABEL_35:
          *(_QWORD *)v43 = v35;
          break;
        case 6:
          *(_DWORD *)v43 = 0;
          break;
        default:
          goto LABEL_36;
      }
    }
    goto LABEL_36;
  }
LABEL_51:
  bzero(&v73, 0x248uLL);
  v78 = 1;
  v79 = v25;
  v47 = (unsigned __int16 *)((char *)v18 - *v18);
  v48 = *v47;
  if (v48 <= 4)
  {
    v50 = 0;
    v80 = 0;
    v77 = 1;
    LODWORD(v74) = 0;
  }
  else
  {
    v49 = v47[2];
    if (v47[2])
      LODWORD(v49) = *(int *)((char *)v18 + v49);
    v80 = v49;
    v77 = 1;
    LODWORD(v74) = 0;
    if (v48 < 7)
    {
      v50 = 0;
    }
    else
    {
      v50 = v47[3];
      if (v50)
        v50 = *(unsigned int *)((char *)v18 + v50);
    }
  }
  v73 = v50;
  v82 = 2;
  v84 = xmmword_232D736C0;
  v85 = 0;
  AGX::Heap<true>::allocateImpl(&v71, v21, 16, (_QWORD *)(v7 + 8));
  AGX::Heap<true>::allocateImpl(&v69, v21, 32, (_QWORD *)(v7 + 16));
  v83 = *((_QWORD *)&v71 + 1);
  v51 = v71;
  v52 = v69;
  v81 = *((_QWORD *)&v69 + 1) + 8;
  AGX::PDSEncoderGen1<kAGXRevG9>::EncodeShaderConstantsPDSProgram((uint64_t)&v73, 0);
  v53 = *v32;
  v54 = *(_DWORD *)(*(_QWORD *)(v7 + 8) + v53 + 48);
  v55 = *(_DWORD *)(*(_QWORD *)v7 + v53 + 48);
  if (v54 != v55)
    *(_DWORD *)(v7 + 32) |= 2u;
  v56 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + v53 + 48);
  if (v56 != v55 && v56 != v54)
    *(_DWORD *)(v7 + 32) |= 4u;
  **((_QWORD **)&v52 + 1) = *(_QWORD *)&v68[v53 + 72];
  v57 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v57 < 7u)
  {
    v59 = 0x40000000;
  }
  else
  {
    v58 = v57[3];
    v59 = 0x40000000;
    if (v58)
      v59 = ((4 * *(int *)((char *)v18 + v58) + 63) >> 6) | 0x40000000;
  }
  *(_DWORD *)(v7 + 36) = 4;
  *(_DWORD *)(v7 + 40) = v52 & 0xFFFFFFF0 | 0xA;
  *(_DWORD *)(v7 + 44) = v51 & 0xFFFFFFF0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 60) = v59;
  *(_DWORD *)(v7 + 64) = 0;
  v60 = v87[0];
  *(_OWORD *)(v7 + 72) = v86;
  *(_OWORD *)(v7 + 88) = v60;
  *(_OWORD *)(v7 + 97) = *(_OWORD *)((char *)v87 + 9);
  v61 = v72[0];
  *(_OWORD *)(v7 + 120) = v71;
  *(_OWORD *)(v7 + 136) = v61;
  *(_OWORD *)(v7 + 145) = *(_OWORD *)((char *)v72 + 9);
  *(_OWORD *)(v7 + 193) = *(_OWORD *)&v70[9];
  result = *(__n128 *)v70;
  *(_OWORD *)(v7 + 168) = v69;
  *(__n128 *)(v7 + 184) = result;
  *(_QWORD *)(v67 + 56) = v7;
  return result;
}

void sub_232C8A5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x234927ECC](v1, 0x10F0C4074758B3BLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken39ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C8A870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken39ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401658;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken39ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401658;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)39,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)39,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)39,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)39,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)39,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken37ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C8AD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken37ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401618;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken37ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401618;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)37,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)37,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)37,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)37,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)37,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken36ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C8B2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken36ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_2504015D8;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken36ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_2504015D8;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)36,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)36,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)36,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)36,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)36,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken35ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C8B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken35ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401598;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken35ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401598;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)35,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)35,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)35,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)35,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)35,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken32ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C8BD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken32ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = off_250401558;
  *((_DWORD *)result + 12) = *(_DWORD *)(a2 + 48);
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 56);
  v2 = *(_BYTE **)(a2 + 64);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[7] = v6;
    v5[8] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[9] = v7;
    result = memcpy(v6, v3, v4);
    v5[8] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_40c77_ZTS10ProgramKeyIL15_AGCStreamToken32ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[5] = off_250401558;
  v1 = (void *)a1[7];
  if (v1)
  {
    a1[8] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)32,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::G9::DevicePDSStateLoader::~DevicePDSStateLoader(AGX::G9::DevicePDSStateLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 112))
    {
      v3 = *(_QWORD *)(v2 + 120);
      v4 = *(NSObject **)(v3 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v3;
      v52 = v2 + 88;
      dispatch_sync(v4, &v47);
      *(_OWORD *)(v2 + 113) = 0u;
      *(_OWORD *)(v2 + 104) = 0u;
      *(_OWORD *)(v2 + 88) = 0u;
    }
    MEMORY[0x234927ECC](v2, 0x10F0C40438A24F2);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 15);
  v6 = v5[1];
  if (!v6
    || ((*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v5[1]), (v5 = (uint64_t *)*((_QWORD *)this + 15)) != 0))
  {
    v7 = AGX::RenderPipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~RenderPipeline(v5);
    MEMORY[0x234927ECC](v7, 0x10F0C40BAA3AEAALL);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 16);
  v9 = v8[2];
  if (!v9
    || ((*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v8[2]), (v8 = (uint64_t *)*((_QWORD *)this + 16)) != 0))
  {
    v10 = AGX::ComputePipeline<AGX::G9::ObjClasses,AGX::G9::Classes,AGX::G9::Encoders>::~ComputePipeline(v8);
    MEMORY[0x234927ECC](v10, 0x10B0C4013733171);
  }
  IOGPUResourceRelease();
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(_QWORD *)(v11 + 56))
    {
      v12 = *(_QWORD *)(v11 + 64);
      v13 = *(NSObject **)(v12 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v12;
      v52 = v11 + 32;
      dispatch_sync(v13, &v47);
      *(_OWORD *)(v11 + 57) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
    }
    if (*(_QWORD *)(v11 + 104))
    {
      v14 = *(_QWORD *)(v11 + 112);
      v15 = *(NSObject **)(v14 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v14;
      v52 = v11 + 80;
      dispatch_sync(v15, &v47);
      *(_OWORD *)(v11 + 105) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
    }
    MEMORY[0x234927ECC](v11, 0x10F0C40E96A6E11);
  }
  v16 = *((_QWORD *)this + 5);
  if (v16)
  {
    if (*(_QWORD *)(v16 + 64))
    {
      v17 = *(_QWORD *)(v16 + 72);
      v18 = *(NSObject **)(v17 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v17;
      v52 = v16 + 40;
      dispatch_sync(v18, &v47);
      *(_OWORD *)(v16 + 65) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
    }
    MEMORY[0x234927ECC](v16, 0x10F0C40CE3FDA58);
  }
  v19 = *((_QWORD *)this + 6);
  if (v19)
  {
    if (*(_QWORD *)(v19 + 88))
    {
      v20 = *(_QWORD *)(v19 + 96);
      v21 = *(NSObject **)(v20 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v20;
      v52 = v19 + 64;
      dispatch_sync(v21, &v47);
      *(_OWORD *)(v19 + 89) = 0u;
      *(_OWORD *)(v19 + 64) = 0u;
      *(_OWORD *)(v19 + 80) = 0u;
    }
    if (*(_QWORD *)(v19 + 136))
    {
      v22 = *(_QWORD *)(v19 + 144);
      v23 = *(NSObject **)(v22 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v22;
      v52 = v19 + 112;
      dispatch_sync(v23, &v47);
      *(_OWORD *)(v19 + 137) = 0u;
      *(_OWORD *)(v19 + 112) = 0u;
      *(_OWORD *)(v19 + 128) = 0u;
    }
    if (*(_QWORD *)(v19 + 184))
    {
      v24 = *(_QWORD *)(v19 + 192);
      v25 = *(NSObject **)(v24 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v24;
      v52 = v19 + 160;
      dispatch_sync(v25, &v47);
      *(_OWORD *)(v19 + 185) = 0u;
      *(_OWORD *)(v19 + 160) = 0u;
      *(_OWORD *)(v19 + 176) = 0u;
    }
    MEMORY[0x234927ECC](v19, 0x10F0C4011D1E6F8);
  }
  v26 = *((_QWORD *)this + 7);
  if (v26)
  {
    if (*(_QWORD *)(v26 + 96))
    {
      v27 = *(_QWORD *)(v26 + 104);
      v28 = *(NSObject **)(v27 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v27;
      v52 = v26 + 72;
      dispatch_sync(v28, &v47);
      *(_OWORD *)(v26 + 97) = 0u;
      *(_OWORD *)(v26 + 88) = 0u;
      *(_OWORD *)(v26 + 72) = 0u;
    }
    if (*(_QWORD *)(v26 + 144))
    {
      v29 = *(_QWORD *)(v26 + 152);
      v30 = *(NSObject **)(v29 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v29;
      v52 = v26 + 120;
      dispatch_sync(v30, &v47);
      *(_OWORD *)(v26 + 145) = 0u;
      *(_OWORD *)(v26 + 136) = 0u;
      *(_OWORD *)(v26 + 120) = 0u;
    }
    if (*(_QWORD *)(v26 + 192))
    {
      v31 = *(_QWORD *)(v26 + 200);
      v32 = *(NSObject **)(v31 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v31;
      v52 = v26 + 168;
      dispatch_sync(v32, &v47);
      *(_OWORD *)(v26 + 193) = 0u;
      *(_OWORD *)(v26 + 184) = 0u;
      *(_OWORD *)(v26 + 168) = 0u;
    }
    MEMORY[0x234927ECC](v26, 0x10F0C4074758B3BLL);
  }
  v33 = *((_QWORD *)this + 1);
  if (v33)
  {
    if (*(_QWORD *)(v33 + 408))
    {
      v34 = *(_QWORD *)(v33 + 416);
      v35 = *(NSObject **)(v34 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v34;
      v52 = v33 + 384;
      dispatch_sync(v35, &v47);
      *(_OWORD *)(v33 + 409) = 0u;
      *(_OWORD *)(v33 + 384) = 0u;
      *(_OWORD *)(v33 + 400) = 0u;
    }
    if (*(_QWORD *)(v33 + 456))
    {
      v36 = *(_QWORD *)(v33 + 464);
      v37 = *(NSObject **)(v36 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v36;
      v52 = v33 + 432;
      dispatch_sync(v37, &v47);
      *(_OWORD *)(v33 + 457) = 0u;
      *(_OWORD *)(v33 + 432) = 0u;
      *(_OWORD *)(v33 + 448) = 0u;
    }
    if (*(_QWORD *)(v33 + 504))
    {
      v38 = *(_QWORD *)(v33 + 512);
      v39 = *(NSObject **)(v38 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v38;
      v52 = v33 + 480;
      dispatch_sync(v39, &v47);
      *(_OWORD *)(v33 + 505) = 0u;
      *(_OWORD *)(v33 + 480) = 0u;
      *(_OWORD *)(v33 + 496) = 0u;
    }
    MEMORY[0x234927ECC](v33, 0x10F0C4059B4553FLL);
  }
  v40 = *((_QWORD *)this + 2);
  if (v40)
  {
    if (*(_QWORD *)(v40 + 392))
    {
      v41 = *(_QWORD *)(v40 + 400);
      v42 = *(NSObject **)(v41 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v41;
      v52 = v40 + 368;
      dispatch_sync(v42, &v47);
      *(_OWORD *)(v40 + 393) = 0u;
      *(_OWORD *)(v40 + 368) = 0u;
      *(_OWORD *)(v40 + 384) = 0u;
    }
    if (*(_QWORD *)(v40 + 440))
    {
      v43 = *(_QWORD *)(v40 + 448);
      v44 = *(NSObject **)(v43 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v43;
      v52 = v40 + 416;
      dispatch_sync(v44, &v47);
      *(_OWORD *)(v40 + 441) = 0u;
      *(_OWORD *)(v40 + 416) = 0u;
      *(_OWORD *)(v40 + 432) = 0u;
    }
    if (*(_QWORD *)(v40 + 488))
    {
      v45 = *(_QWORD *)(v40 + 496);
      v46 = *(NSObject **)(v45 + 16);
      v47 = MEMORY[0x24BDAC760];
      v48 = 3221225472;
      v49 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      v50 = &__block_descriptor_48_e5_v8__0l;
      v51 = v45;
      v52 = v40 + 464;
      dispatch_sync(v46, &v47);
      *(_OWORD *)(v40 + 489) = 0u;
      *(_OWORD *)(v40 + 464) = 0u;
      *(_OWORD *)(v40 + 480) = 0u;
    }
    MEMORY[0x234927ECC](v40, 0x10F0C402D1A27A5);
  }

}

double ___ZN3AGX20DevicePDSStateLoaderINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE11heapConfigsEP13AtomicVersion_block_invoke(uint64_t a1)
{
  double result;
  uint64_t v2;

  AGX::DevicePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::heap_configs = (uint64_t)"com.apple.AGXMetal.GenericHeap";
  qword_254235860 = 0;
  unk_254235868 = 0;
  result = 0.0;
  unk_254235820 = xmmword_232D76278;
  unk_254235830 = unk_232D76288;
  unk_254235840 = xmmword_232D76298;
  unk_254235850 = unk_232D762A8;
  unk_254235800 = agx_generic_heap_args;
  unk_254235810 = unk_232D76268;
  qword_254235870 = 0;
  unk_254235878 = 0;
  qword_254235880 = (uint64_t)"com.apple.AGXMetal.CodeHeap";
  qword_2542358E8 = 0;
  xmmword_254235888 = agx_aperture_heap_args;
  unk_254235898 = unk_232D762D0;
  xmmword_2542358C8 = xmmword_232D76300;
  unk_2542358D8 = unk_232D76310;
  xmmword_2542358A8 = xmmword_232D762E0;
  unk_2542358B8 = unk_232D762F0;
  unk_2542358F0 = vdupq_n_s64(0x40uLL);
  qword_254235900 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  qword_254235908 = (uint64_t)"com.apple.AGXMetal.ICBGenericHeap";
  unk_254235960 = unk_232D762A8;
  unk_254235950 = xmmword_232D76298;
  unk_254235940 = unk_232D76288;
  unk_254235930 = xmmword_232D76278;
  unk_254235920 = unk_232D76268;
  unk_254235910 = agx_generic_heap_args;
  qword_254235970 = 0;
  unk_254235978 = 0;
  qword_254235980 = 0;
  unk_254235988 = v2;
  qword_254235990 = (uint64_t)"com.apple.AGXMetal.ICBCodeHeap";
  qword_2542359F8 = 0;
  xmmword_254235998 = agx_aperture_heap_args;
  unk_2542359A8 = unk_232D762D0;
  xmmword_2542359D8 = xmmword_232D76300;
  unk_2542359E8 = unk_232D76310;
  xmmword_2542359B8 = xmmword_232D762E0;
  unk_2542359C8 = unk_232D762F0;
  xmmword_254235A00 = unk_2542358F0;
  qword_254235A10 = v2;
  return result;
}

void std::__shared_ptr_emplace<AGX::G9::DynamicLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250401698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AGX::G9::DynamicLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250401698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x234927ECCLL);
}

void sub_232C8D29C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  void **v11;
  void ***v12;
  void *v13;

  v5 = *(_QWORD *)(v1 + 7704);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 7712);
    v7 = *(void **)(v1 + 7704);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v8);
        }
        v6 -= 64;
      }
      while (v6 != v5);
      v7 = *(void **)(v1 + 7704);
    }
    *(_QWORD *)(v1 + 7712) = v5;
    operator delete(v7);
  }
  v9 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 7688) = v9;
    operator delete(v9);
  }
  std::deque<AGX::ControlFlowContext<AGX::G9::ComputeControlFlowEmitter,AGX::G9::ComputePDSStateLoader,AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::G9::ComputeControlFlowEmitter,AGX::G9::ComputePDSStateLoader,AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::~deque[abi:nn180100](v2);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 7208));
  v10 = *(void ***)(v1 + 1416);
  v11 = *(void ***)(v1 + 1424);
  if (v10 == v11)
  {
    if (!v10)
      goto LABEL_13;
  }
  else
  {
    v12 = (void ***)(v1 + 1416);
    do
    {
      v13 = *v10++;
      free(v13);
    }
    while (v10 != v11);
    v10 = *v12;
    if (!*v12)
LABEL_13:
      _Unwind_Resume(a1);
  }
  *(_QWORD *)(v1 + 1424) = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeCommandsInBufferCommon(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  AGXBuffer *v87;
  AGXBuffer *v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int *v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  AGXBuffer *BufferInfo;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  char *v141;
  unint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  _BYTE *v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  char v155;
  _BYTE v156[24];
  _BYTE v157[12];
  _BYTE v158[12];
  _BYTE v159[2204];
  int v160;
  _BYTE v161[1064];
  _QWORD v162[2];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char *v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;

  v1 = MEMORY[0x24BDAC7A8](a1);
  if (!*(_BYTE *)(*(_QWORD *)(v2 + 384) + 19))
    return;
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = (_BYTE *)(v1 + 7172);
  if (!*(_BYTE *)(v1 + 7172))
  {
    *v7 = 1;
    *(_QWORD *)(v1 + 7160) = 0;
  }
  if (*(_QWORD *)(v1 + 1480))
    MTLResourceListAddResource();
  v8 = (int *)MEMORY[0x24BE51650];
  if (!*(_BYTE *)(*(_QWORD *)(v5 + 384) + 16))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 1456) + 808) + 6328);
    if (*(_DWORD *)v13 <= *(_DWORD *)(v6 + 7248))
    {
      if (!v7[100])
      {
        v127 = *(unsigned __int8 *)(v13 + 24);
        v7[100] = v127;
        if (!v127)
          goto LABEL_20;
        v11 = 0;
        goto LABEL_17;
      }
      v11 = 0;
    }
    else
    {
      v11 = 0;
      *(_DWORD *)(v6 + 7248) = *(_DWORD *)v13;
    }
    goto LABEL_16;
  }
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 1776) + 16) + 2232);
  do
  {
    v9 &= ~(1 << __clz(__rbit32(v9)));
    IOGPUResourceListAddResource();
  }
  while (v9);
  v10 = *(_QWORD *)(v6 + 1776);
  v11 = *(_DWORD *)(v10 + 164);
  v12 = *(_DWORD *)(*(_QWORD *)(v10 + 16) + 332) + v11;
  if (v12 > *(_DWORD *)(v6 + 7248))
  {
    *(_DWORD *)(v6 + 7248) = v12;
LABEL_16:
    v7[100] = 1;
LABEL_17:
    *(_QWORD *)(v6 + 7656) |= 0x200000000000uLL;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(v6 + 7248, (_QWORD *)(*(_QWORD *)(v6 + 1768) + 200), *(_QWORD *)(v6 + 1488), (uint64_t)&v153))
    {
      IOGPUResourceListAddResource();
    }
    goto LABEL_19;
  }
  if (v7[100])
    goto LABEL_17;
LABEL_19:
  if (v11 && *(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
LABEL_20:
  if (*(_BYTE *)(*(_QWORD *)(v5 + 384) + 17))
  {
    for (i = 0; i != 280; i += 8)
    {
      if (*(_QWORD *)(v6 + 5280 + i))
        IOGPUResourceListAddResource();
    }
  }
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::prepareForEnqueue(v6);
  v15 = *(_QWORD *)(v6 + 1776);
  v151 = *(_QWORD *)(v5 + 384);
  v152 = v5;
  v16 = *(_QWORD *)(*(_QWORD *)(v6 + 1696) + 16);
  v148 = v7;
  v140 = *(_QWORD *)(v6 + 1792);
  if (*(_DWORD *)v4)
  {
    v141 = 0;
    v142 = 0;
    v17 = 0;
    goto LABEL_41;
  }
  v145 = *(_QWORD *)(*(_QWORD *)(v6 + 1696) + 16);
  v18 = *(_QWORD **)(v6 + 1672);
  v19 = v18[46];
  if (!v19)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 10, 0))
      goto LABEL_171;
    v19 = v18[46];
  }
  v20 = v19 + 8;
  if (v20 <= v18[45])
    goto LABEL_29;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v18, 10, 0))
  {
    v20 = v18[46] + 8;
    if (v20 > v18[45])
      goto LABEL_171;
LABEL_29:
    v18[47] = v20;
  }
  v149 = v15;
  v21 = *(_QWORD **)(v6 + 1672);
  v22 = v21[48];
  v23 = v21[45];
  v24 = (unint64_t *)v21[46];
  v21[46] = v24 + 1;
  v25 = (unint64_t)v24 + 47;
  if ((unint64_t)v24 + 47 <= v23)
  {
LABEL_31:
    v21[47] = v25;
    goto LABEL_32;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v21, 10, 0))
  {
    v25 = v21[46] + 39;
    if (v25 > v21[45])
      goto LABEL_171;
    goto LABEL_31;
  }
LABEL_32:
  v142 = v24;
  v143 = v4;
  v26 = (char *)v24 + v22;
  v27 = *(_QWORD **)(v6 + 1672);
  v28 = v5;
  v17 = (_QWORD *)((v27[46] + 7) & 0xFFFFFFFFFFFFFFF8);
  v29 = (char *)v17 + v27[48];
  v27[46] = v17 + 4;
  v30 = *(_QWORD *)(v28 + *v8 + 8);
  v31 = v4[1];
  *v17 = v30;
  v17[1] = v31;
  v17[2] = 0;
  v17[3] = v26;
  v141 = v26;
  v32 = *(unsigned int **)(*(_QWORD *)(v6 + 1704) + 16);
  v197 = 32;
  v194 = v29;
  v162[0] = v17;
  v153 = 0;
  v154 = -1;
  v155 = 0;
  bzero(v159, 0x898uLL);
  v160 = 1;
  bzero(v161, 0x424uLL);
  *(_QWORD *)&v156[16] = 0x100000001;
  *(_DWORD *)v157 = 65537;
  *(_QWORD *)&v157[4] = 0;
  *(_QWORD *)&v33 = 0x100000001;
  *((_QWORD *)&v33 + 1) = 0x100000001;
  *(_OWORD *)v156 = v33;
  *(_QWORD *)v158 = 0x100000001;
  *(_DWORD *)&v158[8] = 1;
  v34 = v32[774];
  v35 = v32[10] + 7;
  v36 = (char *)v17 + v35 + 32;
  v15 = v149;
  if ((unint64_t)v36 <= v27[45])
  {
LABEL_33:
    v27[47] = v36;
    goto LABEL_34;
  }
  v132 = v32[774];
  v133 = AGX::DataBufferAllocator<34ul>::growNoInline(v27, 10, 0);
  v34 = v132;
  if (v133)
  {
    v36 = (char *)(v27[46] + v35);
    if ((unint64_t)v36 > v27[45])
      goto LABEL_171;
    goto LABEL_33;
  }
LABEL_34:
  v37 = v32[766];
  v38 = v27[26] + v37;
  v4 = v143;
  if (v38 <= v27[25])
  {
LABEL_35:
    v27[27] = v38;
    goto LABEL_36;
  }
  v139 = v34;
  v134 = AGX::DataBufferAllocator<34ul>::growNoInline(v27, 5, 0);
  v34 = v139;
  if (v134)
  {
    v38 = v27[26] + v37;
    if (v38 > v27[25])
      goto LABEL_171;
    goto LABEL_35;
  }
LABEL_36:
  v39 = *(_QWORD **)(v6 + 1672);
  v40 = v39[94] + 64;
  if (v40 > v39[93])
  {
    v135 = v34;
    v136 = AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 22, 0);
    v34 = v135;
    if (!v136)
      goto LABEL_38;
    v40 = v39[94] + 64;
    if (v40 > v39[93])
      goto LABEL_171;
  }
  v39[95] = v40;
LABEL_38:
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitComputeProgramVariantAndArguments(*(_QWORD *)(v6 + 1664), *(_QWORD **)(v6 + 1672), (uint64_t)v32, v162, (uint64_t)&v153, 4 * v34, 0, 0);
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier(*(uint64_t **)(v6 + 1664), *(_QWORD **)(v6 + 1672));
  v41 = *(_DWORD *)(v6 + 7316) + 1;
  if (*(_DWORD *)(v6 + 7312) < v41)
    *(_DWORD *)(v6 + 7312) = v41;
  *(_DWORD *)(v6 + 7316) = 0;
  v16 = v145;
LABEL_41:
  v42 = *(_DWORD *)(v16 + 2232);
  do
  {
    v42 &= ~(1 << __clz(__rbit32(v42)));
    IOGPUResourceListAddResource();
  }
  while (v42);
  IOGPUResourceListAddResource();
  v43 = v4;
  v44 = *v4;
  v45 = v4[1];
  v46 = HIDWORD(v45);
  if (v15)
    v15 = *(_QWORD *)(v15 + 16);
  v47 = v151;
  v150 = *(unsigned int **)(*(_QWORD *)(v6 + 1696) + 16);
  if ((_DWORD)v44 != 1)
  {
    v51 = *(_QWORD **)(v6 + 1672);
    v52 = v51[46];
    if (!v52)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v51, 10, 0))
        goto LABEL_171;
      v52 = v51[46];
      v46 = HIDWORD(v45);
    }
    v53 = v52 + 15;
    if (v53 > v51[45])
    {
      v147 = v46;
      v131 = AGX::DataBufferAllocator<34ul>::growNoInline(v51, 10, 0);
      LODWORD(v46) = v147;
      if (!v131)
        goto LABEL_53;
      v53 = v51[46] + 15;
      if (v53 > v51[45])
        goto LABEL_171;
    }
    v51[47] = v53;
LABEL_53:
    v146 = 0;
    v54 = *(_QWORD *)(v6 + 1672);
    v55 = (*(_QWORD *)(v54 + 368) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v17[2] = v55 + *(_QWORD *)(v54 + 384);
    *(_QWORD *)(v54 + 368) = v55 + 12;
    *(_QWORD *)v55 = 0;
    *(_DWORD *)(v55 + 8) = 0;
    v48 = v17[2];
    goto LABEL_54;
  }
  v48 = 0;
  v49 = HIDWORD(v45) - v45 + 1;
  if ((v49 & 0x1F) != 0)
    v50 = (v49 >> 5) + 1;
  else
    v50 = v49 >> 5;
  v146 = v50;
LABEL_54:
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  v188 = 0u;
  v189 = 0u;
  v186 = 0u;
  v187 = 0u;
  v184 = 0u;
  v185 = 0u;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  v178 = 0u;
  v179 = 0u;
  v176 = 0u;
  v177 = 0u;
  v174 = 0u;
  v175 = 0u;
  v172 = 0u;
  v173 = 0u;
  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  v163 = 0u;
  v56 = (_QWORD *)(v152 + *v8);
  v57 = (char *)v56[1];
  v58 = v56[3];
  v197 = v56[2] & 0xFFFFFFFFFFFFFFLL;
  v194 = v57;
  v162[0] = v58;
  v59 = *(_QWORD **)(v6 + 1672);
  v60 = v59[18] + 439;
  if (v60 <= v59[17])
  {
LABEL_55:
    v59[19] = v60;
    goto LABEL_56;
  }
  v128 = v46;
  v129 = AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 3, 0);
  LODWORD(v46) = v128;
  if (v129)
  {
    v60 = v59[18] + 439;
    if (v60 > v59[17])
      goto LABEL_171;
    goto LABEL_55;
  }
LABEL_56:
  v144 = v48;
  v61 = *(_QWORD *)(v6 + 1672);
  v62 = (*(_QWORD *)(v61 + 144) + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = v62 + *(_QWORD *)(v61 + 160);
  *(_QWORD *)(v61 + 144) = v62 + 432;
  *(_QWORD *)(v6 + 1712) = v62;
  v198 = 432;
  v195 = v63;
  v162[1] = v62;
  if (*(_BYTE *)(v151 + 16))
  {
    *(_BYTE *)(v62 + 25) = 1;
    *(_QWORD *)(v62 + 392) = *(_QWORD *)(v15 + 3072);
    *(_QWORD *)(v62 + 400) = *(_QWORD *)(v15 + 2040);
    v64 = *(_DWORD *)(v15 + 2832);
    v65 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::ei_max_indirect_gather_size_watermark;
    v66 = *(_OWORD *)(v15 + 2888);
    *(_OWORD *)(v62 + 176) = *(_OWORD *)(v15 + 2872);
    *(_OWORD *)(v62 + 192) = v66;
    v67 = *(_QWORD *)(v6 + 1712);
    v68 = *(_OWORD *)(v15 + 2920);
    *(_OWORD *)(v67 + 208) = *(_OWORD *)(v15 + 2904);
    *(_OWORD *)(v67 + 224) = v68;
    v69 = *(_QWORD *)(v6 + 1712);
    *(_DWORD *)(v69 + 244) = 4 * *(_DWORD *)(v15 + 3096);
    *(_DWORD *)(v69 + 388) = *(_DWORD *)(v15 + 3100);
    v70 = *(_OWORD *)(v15 + 3184);
    v71 = *(_OWORD *)(v15 + 3200);
    v72 = *(_OWORD *)(v15 + 3216);
    *(_OWORD *)(v69 + 372) = *(_OWORD *)(v15 + 3228);
    *(_OWORD *)(v69 + 360) = v72;
    *(_OWORD *)(v69 + 344) = v71;
    *(_OWORD *)(v69 + 328) = v70;
    v73 = *(_OWORD *)(v15 + 3120);
    v74 = *(_OWORD *)(v15 + 3136);
    v75 = *(_OWORD *)(v15 + 3152);
    *(_OWORD *)(v69 + 312) = *(_OWORD *)(v15 + 3168);
    *(_OWORD *)(v69 + 296) = v75;
    *(_OWORD *)(v69 + 280) = v74;
    *(_OWORD *)(v69 + 264) = v73;
    *(_OWORD *)(v69 + 248) = *(_OWORD *)(v15 + 3104);
    v76 = *(_QWORD *)(v6 + 1712);
    v77 = *(_BYTE *)(v15 + 3259);
    *(_BYTE *)(v76 + 240) = v77;
    if (!*(_BYTE *)(v15 + 3264))
    {
      v77 |= 2u;
      *(_BYTE *)(v76 + 240) = v77;
    }
    if (*(_BYTE *)(v15 + 3258))
    {
      v77 |= 4u;
      *(_BYTE *)(v76 + 240) = v77;
    }
    if (*(_BYTE *)(v15 + 3256))
      *(_BYTE *)(v76 + 240) = v77 | 8;
  }
  else
  {
    *(_BYTE *)(v62 + 25) = 0;
    v65 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::ei_max_indirect_gather_size_watermark;
    v64 = AGX::ProgramVariantPDSState<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ComputeArgumentTable,15ul>::ei_max_indirect_gather_size_watermark;
  }
  v78 = *(_QWORD *)(v6 + 1712);
  *(_WORD *)(v78 + 424) = 0;
  *(_QWORD *)(v78 + 416) = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v6 + 1664) + 64) + *v8 + 72);
  *(_QWORD *)v78 = v44;
  *(_QWORD *)(v78 + 8) = v45;
  if (v64)
  {
    if ((_DWORD)v44 == 1)
    {
      v79 = v46 - v45;
      v80 = (v64 + v64 * (v46 - v45));
      v81 = *(_QWORD **)(v6 + 1672);
      if (*(_QWORD *)(*v81 + 320) >= v80)
      {
        v82 = v81[46];
        v47 = v151;
        if (!v82)
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 10, 0))
            goto LABEL_171;
          v82 = v81[46];
        }
        v83 = v82 + v80;
        if (v83 > v81[45])
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v81, 10, 0))
            goto LABEL_70;
          v83 = v81[46] + v80;
          if (v83 > v81[45])
            goto LABEL_171;
        }
        v81[47] = v83;
LABEL_70:
        v84 = *(_QWORD *)(v6 + 1672);
        v85 = *(_QWORD *)(v84 + 368);
        v86 = (char *)(*(_QWORD *)(v84 + 384) + v85);
        *(_QWORD *)(v84 + 368) = v85 + v80;
        LOWORD(v65) = v64;
LABEL_75:
        *(_WORD *)(*(_QWORD *)(v6 + 1712) + 424) = v65;
        v199 = v80;
        v196 = v86;
        *(_QWORD *)&v163 = v85;
        goto LABEL_76;
      }
      BufferInfo = AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(v151 + 232, *(_DWORD *)v151 * v65);
      v138 = (v65 * v45);
      v85 = (uint64_t)(-[IOGPUMetalBuffer contents](BufferInfo, "contents") + v138);
      v86 = *(char **)((char *)&BufferInfo->super.super.super.super.super._label + *v8) + v138;
      v80 = (v65 + v65 * v79);
      v47 = v151;
    }
    else
    {
      v87 = AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(v151 + 232, *(_DWORD *)v151 * v65);
      v88 = v87;
      if ((_DWORD)v44)
      {
        v85 = 0;
        v86 = 0;
        v80 = 0;
      }
      else
      {
        v85 = -[IOGPUMetalBuffer contents](v87, "contents");
        v86 = *(char **)((char *)&v88->super.super.super.super.super._label + *v8);
        v80 = -[IOGPUMetalBuffer length](v88, "length");
      }
    }
    IOGPUResourceListAddResource();
    goto LABEL_75;
  }
LABEL_76:
  if (!*(_BYTE *)(v47 + 17))
  {
    v92 = 0;
    v93 = *(_QWORD *)(v6 + 1712);
    v94 = *(_QWORD **)(v6 + 1672);
    v89 = v43;
    v90 = v152;
LABEL_93:
    v103 = v150;
    v104 = v146;
    goto LABEL_94;
  }
  v89 = v43;
  v90 = v152;
  if (v15)
    v91 = (*(_QWORD *)(v15 + 1264) | *(_QWORD *)(v15 + 1288) | *(_QWORD *)(v15 + 1312) | *(_QWORD *)(v15 + 1344) | *(_QWORD *)(v15 + 1368)) & 0x7FFFFFFFFLL;
  else
    v91 = 0x7FFFFFFFFLL;
  v95 = 64 - __clz(v91);
  if (*(_BYTE *)(v47 + 16))
    v96 = v95;
  else
    v96 = 35;
  v97 = *(_QWORD **)(v6 + 1672);
  v98 = (8 * (v96 + 6)) | 7;
  v99 = v97[18] + v98;
  if (v99 <= v97[17])
    goto LABEL_85;
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 3, 0))
  {
    v99 = v97[18] + v98;
    if (v99 > v97[17])
      goto LABEL_171;
LABEL_85:
    v97[19] = v99;
  }
  v94 = *(_QWORD **)(v6 + 1672);
  v93 = *(_QWORD *)(v6 + 1712);
  v100 = (v94[18] + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = v100 + v94[20];
  *(_QWORD *)(v93 + 408) = v101;
  v94[18] = v100 + 8 * (v96 + 6);
  *(_QWORD *)(v100 + 40) = v101 + 48;
  if (!(_DWORD)v96)
  {
    v92 = 1;
    goto LABEL_93;
  }
  v102 = 0;
  v103 = v150;
  v104 = v146;
  do
  {
    v105 = v102 == 40;
    if (v102 < 0x23)
      v105 = v102 + 6;
    *(_QWORD *)(v100 + 8 * v105) = *(_QWORD *)(v140 + 536 + 8 * v102++);
  }
  while (v102 != v96);
  v92 = 1;
LABEL_94:
  *(_BYTE *)(v93 + 24) = v92;
  v153 = 0;
  v154 = -1;
  v155 = 0;
  bzero(v159, 0x898uLL);
  v160 = 1;
  bzero(v161, 0x424uLL);
  *(_DWORD *)&v156[20] = 1;
  *(_QWORD *)v157 = 0x7FFF000400200020;
  *(_DWORD *)v156 = v104;
  *(_OWORD *)&v156[4] = xmmword_232D736E0;
  *(_DWORD *)&v157[8] = 2147418116;
  *(_DWORD *)v158 = 32 * v104;
  *(_QWORD *)&v158[4] = 0x100000001;
  v106 = v103[774];
  v107 = v103[10];
  v108 = v94[46];
  if (!v108)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v94, 10, 0))
      goto LABEL_171;
    v108 = v94[46];
  }
  v109 = v107 + 7;
  v110 = v108 + v109;
  if (v110 <= v94[45])
  {
LABEL_96:
    v94[47] = v110;
    goto LABEL_97;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v94, 10, 0))
  {
    v110 = v94[46] + v109;
    if (v110 > v94[45])
      goto LABEL_171;
    goto LABEL_96;
  }
LABEL_97:
  v111 = v103[766];
  v112 = v94[26] + v111;
  if (v112 <= v94[25])
  {
LABEL_98:
    v94[27] = v112;
    goto LABEL_99;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v94, 5, 0))
  {
    v112 = v94[26] + v111;
    if (v112 > v94[25])
      goto LABEL_171;
    goto LABEL_98;
  }
LABEL_99:
  v113 = *(_QWORD **)(v6 + 1672);
  v114 = v113[94] + 64;
  if (v114 <= v113[93])
  {
LABEL_100:
    v113[95] = v114;
    goto LABEL_101;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 22, 0))
  {
    v114 = v113[94] + 64;
    if (v114 > v113[93])
      goto LABEL_171;
    goto LABEL_100;
  }
LABEL_101:
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitComputeProgramVariantAndArguments(*(_QWORD *)(v6 + 1664), *(_QWORD **)(v6 + 1672), (uint64_t)v103, v162, (uint64_t)&v153, 4 * v106, v144, 0);
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier(*(uint64_t **)(v6 + 1664), *(_QWORD **)(v6 + 1672));
  v115 = *(_DWORD *)(v6 + 7316) + 1;
  if (*(_DWORD *)(v6 + 7312) < v115)
    *(_DWORD *)(v6 + 7312) = v115;
  *(_DWORD *)(v6 + 7316) = 0;
  v116 = *(_QWORD *)(v90 + 384);
  v117 = *(_QWORD **)(v6 + 1672);
  v118 = (unint64_t *)v117[94];
  if ((unint64_t)(v118 + 1) <= v117[93])
  {
    v117[95] = v118 + 1;
    goto LABEL_105;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(_QWORD *)(v6 + 1672), 22, 0))
  {
    v130 = v117[94];
    if ((unint64_t)(v130 + 8) <= v117[93])
    {
      v117[95] = v130 + 8;
      *v118 = __ROR8__(v117[96] + v130, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
      goto LABEL_105;
    }
LABEL_171:
    abort();
  }
LABEL_105:
  if (*v89 != 1)
  {
    v123 = *(_QWORD *)(v6 + 1672);
    v124 = *(unint64_t **)(v123 + 752);
    *v124 = __ROR8__(v141, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
    *(_QWORD *)(v123 + 752) = v124 + 1;
    v121 = *(_QWORD *)(*(_QWORD *)(v6 + 1672) + 768) + *(_QWORD *)(*(_QWORD *)(v6 + 1672) + 752);
    *v142 = __ROR8__(v121, 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
    v122 = *(_QWORD *)(v6 + 1712);
    if (!v122)
      goto LABEL_110;
    goto LABEL_109;
  }
  v119 = *(_QWORD *)(v6 + 1672);
  v120 = *(unint64_t **)(v119 + 752);
  *v120 = __ROR8__(*(_QWORD *)(v90 + *v8 + 8) + (*(_DWORD *)(v116 + 48) + *(_DWORD *)(v116 + 52) * v89[2]), 32) & 0xFFFFFFFCBFFFFFFFLL | 0x40000000;
  *(_QWORD *)(v119 + 752) = v120 + 1;
  v121 = *(_QWORD *)(*(_QWORD *)(v6 + 1672) + 768) + *(_QWORD *)(*(_QWORD *)(v6 + 1672) + 752);
  v122 = *(_QWORD *)(v6 + 1712);
  if (v122)
LABEL_109:
    *(_QWORD *)(v122 + 16) = v121;
LABEL_110:
  *(_QWORD *)(v6 + 1712) = 0;
  if (!*(_DWORD *)(v6 + 1736))
  {
    if (v148[500])
    {
      v125 = *(_QWORD *)(v6 + 7688);
      if (*(_QWORD *)(v6 + 7680) != v125)
      {
        *(_BYTE *)(v125 - 8) = 1;
        *(_BYTE *)(v125 - 7) = *(_BYTE *)(*(_QWORD *)(v6 + 1768) + 458);
      }
    }
    else
    {
      AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(v6 + 1624), (_QWORD *)(v6 + 16));
      v126 = *(_DWORD *)(v6 + 7316);
      if (*(_DWORD *)(v6 + 7312) < v126)
        *(_DWORD *)(v6 + 7312) = v126;
      *(_DWORD *)(v6 + 7316) = 0;
    }
    *(_BYTE *)(*(_QWORD *)(v6 + 1768) + 458) = 0;
  }
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::prepareForEnqueue(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *i;

  v1 = result;
  *(_BYTE *)(result + 7562) &= ~1u;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 1456) + 808);
  v3 = *(_DWORD *)(v2 + 5520);
  if (*(_DWORD *)(result + 7160) != v3)
    *(_DWORD *)(result + 7160) = v3;
  v4 = *(_DWORD *)(v2 + 4504);
  if (*(_DWORD *)(result + 7168) != v4)
  {
    *(_DWORD *)(result + 7168) = v4;
    v5 = *(_QWORD **)(v2 + 5016);
    if (v5)
    {
      do
      {
        result = IOGPUResourceListAddResource();
        v5 = (_QWORD *)*v5;
      }
      while (v5);
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 1456) + 808);
    }
    for (i = *(_QWORD **)(v2 + 4848); i; i = (_QWORD *)*i)
      result = IOGPUResourceListAddResource();
  }
  return result;
}

void std::deque<AGX::ControlFlowContext<AGX::G9::ComputeControlFlowEmitter,AGX::G9::ComputePDSStateLoader,AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::G9::ComputeControlFlowEmitter,AGX::G9::ComputePDSStateLoader,AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFF8uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_85;
    }
    v68 = (v17 - v19) >> 2;
    if (v18 == v19)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_104;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v18 != v19)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v19 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFF8uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_232C920F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelWithIndirectBufferCommon(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  char v17;
  __int16 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  char *v29;
  char *v30;
  int v31;
  __int128 v32;
  uint64_t v33;

  v6 = 0;
  v33 = 0;
  if (*(_BYTE *)(a1 + 1745))
  {
    v6 = (_DWORD *)AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 6848));
    if (!*(_BYTE *)(a1 + 1746))
      goto LABEL_3;
  }
  else if (!*(_BYTE *)(a1 + 1746))
  {
LABEL_3:
    v7 = 0;
    goto LABEL_4;
  }
  v7 = (int *)AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5456));
LABEL_4:
  v8 = *a3;
  v9 = a3[1];
  v10 = *((_DWORD *)a3 + 4);
  *(_DWORD *)(a1 + 1828) = *a3;
  *(_DWORD *)(a1 + 1832) = v9;
  *(_DWORD *)(a1 + 1836) = v10;
  v11 = v9 * v8;
  *(_WORD *)(a1 + 1840) = v10 * v11;
  *(_WORD *)(a1 + 1842) = v11;
  if (v11 == 1)
  {
    v12 = 0;
    LOWORD(v13) = -1;
  }
  else
  {
    v14 = v11;
    v15 = v11 - 1;
    v16 = __clz((unsigned __int16)(v11 - 1)) - 16;
    if ((_WORD)v14 == 1)
      LOWORD(v16) = 16;
    v17 = 16 - v16;
    v12 = 15 - v16;
    v13 = ((0x8000 << v17) + v15) / v14 - 1;
  }
  *(_WORD *)(a1 + 1844) = v12;
  *(_WORD *)(a1 + 1846) = v13;
  if ((unsigned __int16)v8 == 1)
  {
    v18 = 0;
    LOWORD(v19) = -1;
  }
  else
  {
    v20 = (unsigned __int16)v8;
    v21 = (unsigned __int16)v8 - 1;
    v22 = __clz((unsigned __int16)(v8 - 1)) - 16;
    if ((_WORD)v20 == 1)
      LOWORD(v22) = 16;
    v23 = 16 - v22;
    v18 = 15 - v22;
    v19 = ((0x8000 << v23) + v21) / v20 - 1;
  }
  *(_WORD *)(a1 + 1848) = v18;
  *(_WORD *)(a1 + 1850) = v19;
  *(_DWORD *)(a1 + 1852) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1816) = 0;
  *(_DWORD *)(a1 + 1824) = 0;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(a1, a2, *(_QWORD *)(a1 + 1776), &v33);
  if (!*(_BYTE *)(a1 + 1745))
  {
    if (!*(_BYTE *)(a1 + 1746))
      return;
LABEL_22:
    AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::patchPDSPatchUpKernel(a1 + 16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16) + 3080), v33, *(_QWORD *)(a1 + 1792), v7);
    return;
  }
  v24 = *(_OWORD *)(*(_QWORD *)(a1 + 1792) + 1576);
  v25 = *(_QWORD *)(a1 + 224);
  v26 = v25 + 39;
  if ((unint64_t)(v25 + 39) <= *(_QWORD *)(a1 + 216))
    goto LABEL_20;
  v32 = *(_OWORD *)(*(_QWORD *)(a1 + 1792) + 1576);
  v31 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
  v25 = *(_QWORD *)(a1 + 224);
  if (v31)
  {
    v26 = v25 + 39;
    v24 = v32;
    if ((unint64_t)(v25 + 39) > *(_QWORD *)(a1 + 216))
      abort();
LABEL_20:
    *(_QWORD *)(a1 + 232) = v26;
    goto LABEL_21;
  }
  v24 = v32;
LABEL_21:
  v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 + *(_DWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v27 + 32;
  *(_QWORD *)v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16) + 2032);
  *(_OWORD *)(v27 + 8) = v24;
  *v6 = v28;
  v29 = (char *)((*(_QWORD *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
  v30 = &v29[*(_QWORD *)(a1 + 176)];
  *(_QWORD *)(a1 + 160) = v29 + 280;
  memcpy(v29, (const void *)(*(_QWORD *)(a1 + 1792) + 536), 0x118uLL);
  *(_QWORD *)(v27 + 24) = v30;
  if (*(_BYTE *)(a1 + 1746))
    goto LABEL_22;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 160);
  v5 = v4 + 4;
  if ((unint64_t)(v4 + 4) > *(_QWORD *)(a1 + 152))
  {
    v9 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
    v4 = *(_QWORD *)(a1 + 160);
    if (!v9)
      goto LABEL_3;
    v5 = v4 + 4;
    if ((unint64_t)(v4 + 4) > *(_QWORD *)(a1 + 152))
      abort();
  }
  *(_QWORD *)(a1 + 168) = v5;
LABEL_3:
  v6 = *(_QWORD *)(a1 + 176) + v4;
  *(_QWORD *)(a1 + 160) = v4 + 4;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 224) + (int)*MEMORY[0x24BE51650];
  *(_QWORD *)(a1 + 6384) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 864) = v6;
  *(_QWORD *)(a1 + 5608) = v7;
  *(_QWORD *)(a1 + 7136) |= 0x20000000000uLL;
  *(_DWORD *)(a1 + 7152) |= 1u;
  v12 = vdupq_n_s64(1uLL);
  v13 = 1;
  v10 = v12;
  v11 = 1;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(a1, a2, (__int128 *)v12.i8, (__int128 *)v10.i8);
  return v4;
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v74;
  char v75[24];

  v7 = (_BYTE *)(a1 + 7272);
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::prepareForEnqueue(a1);
  v74 = v7;
  if (v7[400])
    v8 = 32;
  else
    v8 = 22;
  v9 = *(_QWORD *)(a3 + 16);
  if ((v10 & 1) == 0
  {
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::G9::ComputePipeline const*,unsigned int,unsigned long long *)::brk_handler_end_of_shader_alloc = 0;
  }
  if (AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::G9::ComputePipeline const*,unsigned int,unsigned long long *)::brk_handler_end_of_shader_alloc)
  {
    if ((v11 & 1) == 0
    {
      AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::G9::ComputePipeline const*,unsigned int,unsigned long long *)::per_shader_brk_space = 0;
    }
    if (AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::G9::ComputePipeline const*,unsigned int,unsigned long long *)::per_shader_brk_space)
      *(_QWORD *)(*(_QWORD *)(a1 + 1768) + 168) = (*(_QWORD *)(v9 + 512)
                                                   - AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::G9::ComputePipeline const*,unsigned int,unsigned long long *)::per_shader_brk_space
                                                   + *(_QWORD *)(v9 + 736)
                                                   + 4095) & 0xFFFFFFFFFFFFF000;
  }
  v12 = 4 * *(_DWORD *)(v9 + 3096);
  *(_DWORD *)(a1 + 7280) = v12;
  if (*(_DWORD *)(v9 + 3100))
  {
    v13 = 0;
    v14 = v9 + 3104;
    do
    {
      *(_DWORD *)(a1 + 4 * *(unsigned int *)(v14 + 4 * v13) + 4072) = v12 | 0x80000000;
      v12 = *(_DWORD *)(a1 + 7280) + *(_DWORD *)(a1 + 4 * *(unsigned int *)(v14 + 4 * v13) + 5136);
      *(_DWORD *)(a1 + 7280) = v12;
      ++v13;
    }
    while (v13 < *(unsigned int *)(v9 + 3100));
  }
  if (*(_QWORD *)(a3 + 180))
    *(_DWORD *)(a1 + 7280) = v12
                           + *(_DWORD *)(a1 + 1828)
                           * *(_DWORD *)(a3 + 180)
                           * *(_DWORD *)(a1 + 1832)
                           * *(_DWORD *)(a1 + 1836)
                           + ((unsigned __int16)*(_DWORD *)(*(_QWORD *)(a3 + 16) + 3252) >> 5) * *(_DWORD *)(a3 + 184);
  v15 = *(_QWORD *)(a1 + 1784);
  if (v9 != v15)
  {
    if (v15)
    {
      v16 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v15 + 1264), *(int8x16_t *)(v15 + 1312)), *(int8x16_t *)(v15 + 1368)), vorrq_s8(*(int8x16_t *)(v15 + 1288), *(int8x16_t *)(v15 + 1344)));
      v17 = *(_QWORD *)(v15 + 392);
      v15 = *(_QWORD *)(v15 + 400);
    }
    else
    {
      v17 = 0;
      v16 = 0uLL;
    }
    *(_QWORD *)(a1 + 1784) = v9;
    v18 = (*(_QWORD *)(v9 + 1264) | *(_QWORD *)(v9 + 1288) | *(_QWORD *)(v9 + 1312) | *(_QWORD *)(v9 + 1344) | *(_QWORD *)(v9 + 1368)) & ~v16.i64[0] | *(_QWORD *)(v9 + 392) & ~v17;
    if (v18)
    {
      *(_QWORD *)(a1 + 7136) |= v18;
      *(_DWORD *)(a1 + 7152) |= 1u;
    }
    v19 = (*(_QWORD *)(v9 + 1272) | *(_QWORD *)(v9 + 1296) | *(_QWORD *)(v9 + 1320) | *(_QWORD *)(v9 + 1352) | *(_QWORD *)(v9 + 1376)) & ~v16.i64[1] | *(_QWORD *)(v9 + 400) & ~v15;
    if (v19)
    {
      *(_QWORD *)(a1 + 7144) |= v19;
      *(_DWORD *)(a1 + 7152) |= 2u;
    }
    v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16) + 2232);
    do
    {
      v20 &= ~(1 << __clz(__rbit32(v20)));
      IOGPUResourceListAddResource();
    }
    while (v20);
    v21 = *(_QWORD *)(a1 + 1776);
    v22 = *(_DWORD *)(v21 + 164);
    v23 = *(_DWORD *)(*(_QWORD *)(v21 + 16) + 332) + v22;
    if (v23 > *(_DWORD *)(a1 + 7248))
    {
      *(_DWORD *)(a1 + 7248) = v23;
      *v7 = 1;
    }
    else if (!*v7)
    {
LABEL_25:
      if (v22 && *(_DWORD *)*MEMORY[0x24BE516B0])
        IOGPUDeviceTraceEvent();
      goto LABEL_26;
    }
    *(_QWORD *)(a1 + 7656) |= 0x200000000000uLL;
    if (AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(a1 + 7248, (_QWORD *)(*(_QWORD *)(a1 + 1768) + 200), *(_QWORD *)(a1 + 1488), (uint64_t)v75))
    {
      IOGPUResourceListAddResource();
    }
    goto LABEL_25;
  }
LABEL_26:
  v24 = *(_DWORD *)(a1 + 7152);
  if ((v24 & 1) == 0)
    goto LABEL_41;
  v25 = *(_QWORD *)(a1 + 7136) & (*(_QWORD *)(v9 + 1264) | *(_QWORD *)(v9 + 1288) | *(_QWORD *)(v9 + 1312) | *(_QWORD *)(v9 + 1344) | *(_QWORD *)(v9 + 1368));
  v26 = *(_QWORD *)(a1 + 1776);
  if (*(_BYTE *)(v26 + 24))
  {
    if (*(_QWORD *)(v26 + 128))
      v27 = ((unint64_t)(*(_QWORD *)(v26 + 112) != 0) << 56) | 0x400000000000000;
    else
      v27 = (unint64_t)(*(_QWORD *)(v26 + 112) != 0) << 56;
    if (*(_QWORD *)v26)
      v28 = v27 | 0x4000000000000000;
    else
      v28 = v27;
    v29 = v25 & ~v28;
    if (!v29)
      goto LABEL_41;
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 7136) & (*(_QWORD *)(v9 + 1264) | *(_QWORD *)(v9 + 1288) | *(_QWORD *)(v9 + 1312) | *(_QWORD *)(v9 + 1344) | *(_QWORD *)(v9 + 1368));
    if (!v25)
      goto LABEL_41;
  }
  do
  {
    v30 = __clz(__rbit64(v29));
    v31 = 1 << v30;
    if (*(_QWORD *)(a1 + 8 * v30 + 5280))
      IOGPUResourceListAddResource();
    v29 &= ~v31;
  }
  while (v29);
  v24 = *(_DWORD *)(a1 + 7152);
LABEL_41:
  if ((v24 & 2) != 0)
  {
    v32 = (*(_QWORD *)(v9 + 1272) | *(_QWORD *)(v9 + 1296) | *(_QWORD *)(v9 + 1320) | *(_QWORD *)(v9 + 1352) | *(_QWORD *)(v9 + 1376)) & *(_QWORD *)(a1 + 3608) & *(_QWORD *)(a1 + 7144);
    while (v32)
    {
      v32 &= ~(1 << __clz(__rbit64(v32)));
      IOGPUResourceListAddResource();
    }
  }
  *(_QWORD *)(a1 + 7136) = 0;
  *(_QWORD *)(a1 + 7144) = 0;
  *(_DWORD *)(a1 + 7152) = 0;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::reserveEnqueueDatabufferSpace(a1, v8, a2 != 0);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520))
  {
    if (*(_QWORD *)(a1 + 7552)
      || (AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::restartComputePass((_QWORD *)a1),
          v74[290] &= ~1u,
          AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::reserveEnqueueDatabufferSpace(a1, v8, a2 != 0), !*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520)))
    {
      v74[290] |= 2u;
    }
  }
  if (!*(_BYTE *)(v9 + 3264)
    && ((*(_DWORD *)(a1 + 1832)
       * *(_DWORD *)(a1 + 1828)
       * *(_DWORD *)(a1 + 1836)) & 0x1F) != 0)
  {
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  v33 = a1 + 16;
  v34 = (1 << v8) & 0x100140000;
  if (!v34)
  {
    v41 = v33 + 32 * v8;
    v42 = *(_QWORD *)(v41 + 48);
    v36 = (uint64_t *)(v41 + 48);
    v37 = v42;
    v39 = v36 + 2;
    v38 = v36[2];
    goto LABEL_51;
  }
  v35 = v33 + 32 * v8;
  v36 = (uint64_t *)(v35 + 48);
  v37 = *(_QWORD *)(v35 + 48);
  if (v37)
  {
    v40 = *(_QWORD *)(v35 + 64);
    v39 = (_QWORD *)(v35 + 64);
    v38 = v40;
LABEL_51:
    v43 = v38 + v37;
    goto LABEL_52;
  }
  AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
  v37 = *v36;
  v72 = *(_QWORD *)(v35 + 64);
  v39 = (_QWORD *)(v35 + 64);
  v43 = v72 + *v36;
  if (!*v36)
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
    v37 = *v36;
  }
LABEL_52:
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::emitComputeProgramVariantAndArguments(a1 + 1624, (_QWORD *)(a1 + 16), v9, *(_QWORD **)(a1 + 1792), a1 + 1800, *(_DWORD *)(a1 + 7280), a2, a4);
  if (*(_DWORD *)*MEMORY[0x24BE516B0] && *(_BYTE *)(v9 + 376) && *(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  ++*(_DWORD *)(a1 + 7316);
  if (v74[400])
  {
    v44 = *v36;
    if (v34 && !v44)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
      v44 = *v36;
    }
    v45 = *v39 - v43 + v44;
    v46 = *(char **)(a1 + 7688);
    v47 = *(_QWORD *)(a1 + 7696);
    if ((unint64_t)v46 >= v47)
    {
      v49 = *(char **)(a1 + 7680);
      v50 = (v46 - v49) >> 5;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 59)
        abort();
      v52 = v47 - (_QWORD)v49;
      if (v52 >> 4 > v51)
        v51 = v52 >> 4;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
        v53 = 0x7FFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v54 = (char *)operator new(32 * v53);
      }
      else
      {
        v54 = 0;
      }
      v55 = &v54[32 * v50];
      *(_QWORD *)v55 = v37;
      *((_QWORD *)v55 + 1) = v43;
      *((_QWORD *)v55 + 2) = v45;
      *((_WORD *)v55 + 12) = 0;
      v48 = v55 + 32;
      if (v46 != v49)
      {
        do
        {
          v56 = *((_OWORD *)v46 - 2);
          *(_OWORD *)(v55 - 22) = *(_OWORD *)(v46 - 22);
          *((_OWORD *)v55 - 2) = v56;
          v55 -= 32;
          v46 -= 32;
        }
        while (v46 != v49);
        v46 = *(char **)(a1 + 7680);
      }
      *(_QWORD *)(a1 + 7680) = v55;
      *(_QWORD *)(a1 + 7688) = v48;
      *(_QWORD *)(a1 + 7696) = &v54[32 * v53];
      if (v46)
        operator delete(v46);
    }
    else
    {
      *(_QWORD *)v46 = v37;
      *((_QWORD *)v46 + 1) = v43;
      *((_QWORD *)v46 + 2) = v45;
      v48 = v46 + 32;
      *((_WORD *)v46 + 12) = 0;
    }
    *(_QWORD *)(a1 + 7688) = v48;
    v57 = *(_QWORD *)(a1 + 7712);
    if (*(_DWORD *)(v57 - 64) == -1)
      *(_DWORD *)(v57 - 64) = (((unint64_t)v48 - *(_QWORD *)(a1 + 7680)) >> 5) - 1;
    ++*(_DWORD *)(v57 - 60);
  }
  if (!*(_DWORD *)(a1 + 1736))
  {
    if (v74[400])
    {
      v58 = *(_QWORD *)(a1 + 7688);
      if (*(_QWORD *)(a1 + 7680) != v58)
      {
        *(_BYTE *)(v58 - 8) = 1;
        *(_BYTE *)(v58 - 7) = *(_BYTE *)(*(_QWORD *)(a1 + 1768) + 458);
      }
    }
    else
    {
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 1624) + 56);
      v60 = *(_OWORD **)(a1 + 768);
      v61 = *(_OWORD *)(v59 + 52);
      *v60 = *(_OWORD *)(v59 + 36);
      v60[1] = v61;
      *(_QWORD *)(a1 + 768) = v60 + 2;
      v62 = *(_QWORD *)(*(_QWORD *)(a1 + 1624) + 48);
      v63 = *(_OWORD *)(v62 + 44);
      v60[2] = *(_OWORD *)(v62 + 28);
      v60[3] = v63;
      *(_QWORD *)(a1 + 768) = v60 + 4;
      v64 = *(_QWORD *)(a1 + 1624);
      v65 = *(_QWORD *)(v64 + 40);
      v66 = *(_OWORD *)(v65 + 24);
      v60[4] = *(_OWORD *)(v65 + 8);
      v60[5] = v66;
      *(_QWORD *)(a1 + 768) = v60 + 6;
      v67 = *(_QWORD *)(v64 + 72);
      v68 = *(_OWORD *)(v67 + 24);
      v60[6] = *(_OWORD *)(v67 + 8);
      v60[7] = v68;
      *(_QWORD *)(a1 + 768) = v60 + 8;
      v69 = *(_QWORD *)(*(_QWORD *)(a1 + 1624) + 40);
      v70 = *(_OWORD *)(v69 + 24);
      v60[8] = *(_OWORD *)(v69 + 8);
      v60[9] = v70;
      *(_QWORD *)(a1 + 768) = v60 + 10;
      v71 = *(_DWORD *)(a1 + 7316);
      if (*(_DWORD *)(a1 + 7312) < v71)
        *(_DWORD *)(a1 + 7312) = v71;
      *(_DWORD *)(a1 + 7316) = 0;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 1768) + 458) = 0;
  }
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::reserveEnqueueDatabufferSpace(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;

  v6 = a1 + 16;
  v7 = *(_DWORD *)(a1 + 7184);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16);
  v9 = *(unsigned int *)(v8 + 40);
  v10 = *(_QWORD *)(a1 + 384);
  if (!v10)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0))
      goto LABEL_23;
    v10 = *(_QWORD *)(a1 + 384);
  }
  v11 = v9 + 7;
  v12 = v10 + v11;
  if (v12 <= *(_QWORD *)(a1 + 376))
  {
LABEL_3:
    *(_QWORD *)(a1 + 392) = v12;
    goto LABEL_4;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v6, 10, 0))
  {
    v12 = *(_QWORD *)(a1 + 384) + v11;
    if (v12 > *(_QWORD *)(a1 + 376))
      goto LABEL_23;
    goto LABEL_3;
  }
LABEL_4:
  v13 = *(unsigned int *)(v8 + 3064);
  v14 = *(_QWORD *)(a1 + 224) + v13;
  if (v14 <= *(_QWORD *)(a1 + 216))
  {
LABEL_5:
    *(_QWORD *)(a1 + 232) = v14;
    goto LABEL_6;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v6, 5, 0))
  {
    v14 = *(_QWORD *)(a1 + 224) + v13;
    if (v14 > *(_QWORD *)(a1 + 216))
      goto LABEL_23;
    goto LABEL_5;
  }
LABEL_6:
  if (a3)
    v15 = 60;
  else
    v15 = 64;
  v16 = *(unsigned __int8 *)(a1 + 7173);
  v17 = *(_DWORD *)(a1 + 7188);
  v30 = 0;
  result = agxaReserveCDMTokenSpace<AGX::G9::Encoders,AGX::G9::DataBufferAllocator>(a2, v6, v15, v16, v7 != 0, v17, &v30);
  if (*(_BYTE *)(a1 + 7672))
  {
    v19 = v15 | 1;
    v20 = *(_DWORD *)(a1 + 7184) != 0;
    v21 = *(_DWORD *)(a1 + 7188);
    v28 = 1;
    v22 = &v28;
    v23 = 33;
    v24 = v6;
LABEL_11:
    result = agxaReserveCDMTokenSpace<AGX::G9::Encoders,AGX::G9::DataBufferAllocator>(v23, v24, v19, 0, v20, v21, v22);
    goto LABEL_13;
  }
  if (!*(_DWORD *)(a1 + 1736))
  {
    v29 = 1;
    v22 = &v29;
    v23 = a2;
    v24 = v6;
    v19 = 160;
    v20 = 0;
    v21 = 0;
    goto LABEL_11;
  }
LABEL_13:
  if (!*(_BYTE *)(a1 + 1745))
    return result;
  v25 = *(_QWORD *)(a1 + 168);
  v26 = v25 + 287;
  if ((unint64_t)(v25 + 287) <= *(_QWORD *)(a1 + 152))
  {
LABEL_25:
    *(_QWORD *)(a1 + 168) = v26;
    return result;
  }
  v27 = *(_QWORD *)(a1 + 160);
  result = AGX::DataBufferAllocator<34ul>::growNoInline(v6, 3, 0);
  if ((_DWORD)result)
  {
    v26 = *(_QWORD *)(a1 + 160) + v25 - v27 + 287;
    if (v26 <= *(_QWORD *)(a1 + 152))
      goto LABEL_25;
LABEL_23:
    abort();
  }
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::restartComputePass(_QWORD *a1)
{
  IOGPUResourceListAddResource();
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::endComputePass(a1, 1);
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::beginComputePass((uint64_t)a1, 1);
  return IOGPUResourceListAddResource();
}

double AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::endComputePass(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  double result;
  _BYTE v28[24];

  if (a2 && *(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v3 = a1[890];
  if (v3)
    LODWORD(v3) = *(_DWORD *)(v3 + 528);
  v4 = a1[889];
  if (v4)
    LODWORD(v4) = *(_DWORD *)(v4 + 528);
  v5 = v4 + v3;
  v6 = (void *)*a1;
  if ((objc_msgSend((id)*a1, "skipRender") & 1) != 0
    || (*((_BYTE *)a1 + 7562) & 2) != 0
    || (*((_BYTE *)a1 + 7562) & 1) != 0 && !v5)
  {
    v7 = a1[194] - a1[196];
    *(_DWORD *)(v7 + 12) = 1;
    if ((*(_BYTE *)(v7 + 8) & 4) != 0)
      **(_BYTE **)(*a1 + 688) = 1;
  }
  if ((objc_msgSend(v6, "skipRender") & 1) == 0 && (*((_BYTE *)a1 + 7562) & 3) == 1 && v5)
  {
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::encodeBarrier((uint64_t)a1);
    *(_BYTE *)(a1[221] + 458) = 0;
  }
  if (!*(_DWORD *)(a1[220] + 4))
  {
    v8 = (_DWORD *)a1[96];
    v9 = (char *)v8 + a1[98];
    a1[96] = v8 + 1;
    *v8 = 0x80000000;
    v10 = a1[221];
    *(_QWORD *)(v10 + 96) = v9;
    if (v5)
    {
      FenceEncoder::encode((AGX::SidebandBufferAllocator *)(a1 + 183), 1, a1[220], a1[890], a1[889], 0, 0);
      a1[958] |= 0x100uLL;
      v10 = a1[221];
    }
    *(_BYTE *)(v10 + 180) = *((_BYTE *)a1 + 1512);
    *(_DWORD *)(v10 + 176) = *((_DWORD *)a1 + 377);
    *(_QWORD *)(v10 + 184) = *(_QWORD *)((char *)a1 + 1516);
    if (!a1[911])
      goto LABEL_27;
    if (a1[185])
      MTLResourceListAddResource();
    IOGPUResourceListAddResource();
    v10 = a1[221];
    v11 = (void *)a1[911];
    if (v11 && (v12 = *((_DWORD *)a1 + 1825), v13 = *((_DWORD *)a1 + 1824), (v13 & v12) != 0xFFFFFFFF))
    {
      *(_DWORD *)(v10 + 468) = objc_msgSend(v11, "resourceID");
      *(_DWORD *)(v10 + 472) = v13;
      *(_DWORD *)(v10 + 476) = v12;
    }
    else
    {
LABEL_27:
      *(_DWORD *)(v10 + 476) = -1;
      *(_QWORD *)(v10 + 468) = -1;
    }
    *((_DWORD *)a1 + 1824) = -1;
    v14 = a1[221];
    *(_QWORD *)(v14 + 104) = 0;
    *(_BYTE *)(v14 + 462) = 0;
    *(_BYTE *)(v14 + 463) = *((_BYTE *)a1 + 1545);
  }
  if (*((_BYTE *)a1 + 7272)
    && AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer((uint64_t)(a1 + 906), (_QWORD *)(a1[221] + 200), a1[186], (uint64_t)v28))
  {
    IOGPUResourceListAddResource();
  }
  v15 = 0;
  v16 = 0;
  a1[220] = 0;
  a1[221] = 0;
  *(_DWORD *)(a1[194] - a1[196] + 24) = 0;
  v17 = a1 + 2;
  v18 = a1 + 7;
  do
  {
    v19 = *v17;
    if (*(_DWORD *)(*v17 + v16 * 8 + 24))
    {
      v20 = &v18[v16];
      if (v18[v16 + 1])
      {
        v21 = a1[5];
        if (*((_DWORD *)a1 + 360))
          AGX::DataBufferAllocator<34ul>::doBufferRandomization((uint64_t)(a1 + 2), (_QWORD *)(v21 + v15));
        if (*v20 == *(_QWORD *)(v21 + v15 + 16) - (*(_QWORD *)(v19 + v16 * 8 + 16) + *(_QWORD *)(v19 + v16 * 8 + 8)))
          *(_QWORD *)(v21 + v15 + 24) = v20[1];
      }
    }
    v16 += 4;
    v15 += 64;
  }
  while (v16 != 136);
  *(_QWORD *)(a1[1] + 48) = a1[194];
  IOGPUMetalCommandBufferStorageEndSegment();
  *((_BYTE *)a1 + 1504) = 0;
  LODWORD(v22) = *((_DWORD *)a1 + 1828);
  v23 = *((_DWORD *)a1 + 1829);
  if (v22 <= v23)
    v22 = v23;
  else
    v22 = v22;
  v24 = *(_QWORD *)(a1[182] + 1072);
  if (v24 < v22)
  {
    v25 = (unint64_t *)(a1[182] + 1072);
    do
    {
      v26 = __ldxr(v25);
      if (v26 == v24)
      {
        if (!__stxr(v22, v25))
          break;
      }
      else
      {
        __clrex();
      }
      v24 = v26;
    }
    while (v26 < v22);
  }
  result = 0.0;
  a1[914] = 0;
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::beginComputePass(uint64_t a1, int a2)
{
  _BYTE *v4;
  _DWORD **v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t j;
  int v44;
  int v45;

  v4 = (_BYTE *)(a1 + 7172);
  if (a2)
  {
    v5 = (_DWORD **)MEMORY[0x24BE516B0];
    v6 = (_DWORD *)*MEMORY[0x24BE516B0];
    if (*(_DWORD *)*MEMORY[0x24BE516B0])
    {
      IOGPUDeviceTraceEvent();
      v6 = *v5;
    }
    if (*v6)
      IOGPUDeviceTraceEvent();
  }
  v4[390] = v4[390] & 0xFC | 1;
  if (v4[404])
    v4[404] = 0;
  v7 = AGX::ContextCommon<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::newCommand(a1, 528);
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)(v7 + 5) = 0x3000001E8;
  v7[1] = 0;
  *(_QWORD *)(a1 + 1760) = v7;
  v7 += 8;
  *(_QWORD *)(a1 + 1768) = v7;
  bzero(v7, 0x1E8uLL);
  if ((v8 & 1) == 0
  {
  }
  v9 = *(_QWORD *)(a1 + 1768);
  *(_QWORD *)v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1408)
                + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1432)
                - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1416);
  *(_QWORD *)(v9 + 200) = 0;
  *(_QWORD *)(v9 + 224) = 0;
  *(_BYTE *)(v9 + 317) = 0;
  *(_WORD *)(v9 + 456) = 0;
  *(_BYTE *)(v9 + 192) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_WORD *)(v9 + 384) = 0;
  *(_DWORD *)(v9 + 164) = 0;
  *(_DWORD *)(v9 + 480) = 0;
  if (*(_DWORD *)(a1 + 7184))
  {
    *(_BYTE *)(v9 + 384) = 1;
    *(_QWORD *)(a1 + 7188) = 0;
  }
  *(_DWORD *)(a1 + 7248) = 0;
  v4[100] = 0;
  AGX::G9::ContextSwitcher::setupComputeCommand(*(_QWORD *)(a1 + 1648), *(_QWORD *)(a1 + 1656), v9, *(_QWORD *)(a1 + 1496), (_QWORD *)(a1 + 16));
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1624) + 56) + 32);
  v11 = (int *)MEMORY[0x24BE51650];
  do
  {
    v10 &= ~(1 << __clz(__rbit32(v10)));
    IOGPUResourceListAddResource();
  }
  while (v10);
  v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1624) + 48) + 24);
  do
  {
    v12 &= ~(1 << __clz(__rbit32(v12)));
    IOGPUResourceListAddResource();
  }
  while (v12);
  IOGPUResourceListAddResource();
  IOGPUResourceListAddResource();
  IOGPUResourceListAddResource();
  v13 = *(_QWORD *)(a1 + 1768);
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  *(_DWORD *)(a1 + 7168) = *(_DWORD *)(v14 + 4504);
  v15 = *(_QWORD **)(v14 + 5016);
  if (v15)
  {
    do
    {
      IOGPUResourceListAddResource();
      v15 = (_QWORD *)*v15;
    }
    while (v15);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808);
  }
  for (i = *(_QWORD **)(v14 + 4848); i; i = (_QWORD *)*i)
    IOGPUResourceListAddResource();
  if ((a2 & 1) == 0)
  {
    *(_QWORD *)(a1 + 7600) = 0;
    *(_OWORD *)(a1 + 7584) = 0u;
    v17 = *(_QWORD *)(a1 + 160);
    v18 = v17 + 47;
    if ((unint64_t)(v17 + 47) > *(_QWORD *)(a1 + 152))
    {
      v45 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
      v17 = *(_QWORD *)(a1 + 160);
      if (!v45)
        goto LABEL_23;
      v18 = v17 + 47;
      if ((unint64_t)(v17 + 47) > *(_QWORD *)(a1 + 152))
        goto LABEL_56;
    }
    *(_QWORD *)(a1 + 168) = v18;
LABEL_23:
    v19 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    v20 = v19 + *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 160) = v19 + 32;
    *(_QWORD *)(a1 + 7136) |= 0x10000000000uLL;
    *(_DWORD *)(a1 + 7152) |= 1u;
    *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 856) = v20;
    *(_QWORD *)(a1 + 5600) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 224) + *v11;
    *(_DWORD *)(a1 + 4512) = 24;
    *(_DWORD *)(a1 + 4772) = 24;
    *(_DWORD *)(a1 + 5032) = v20 >> 8;
    v21 = *(_OWORD *)(a1 + 7584);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + 7600);
    *(_OWORD *)v19 = v21;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 1496) + 520))
    v4[390] |= 2u;
  *(_QWORD *)(a1 + 7160) = 0;
  *v4 = 0;
  v22 = *(_QWORD *)(a1 + 160);
  v23 = v22 + 103;
  if ((unint64_t)(v22 + 103) <= *(_QWORD *)(a1 + 152))
    goto LABEL_27;
  v44 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  v22 = *(_QWORD *)(a1 + 160);
  if (v44)
  {
    v23 = v22 + 103;
    if ((unint64_t)(v22 + 103) <= *(_QWORD *)(a1 + 152))
    {
LABEL_27:
      *(_QWORD *)(a1 + 168) = v23;
      goto LABEL_28;
    }
LABEL_56:
    abort();
  }
LABEL_28:
  v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v25 = v24 + *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 7608) = v25;
  *(_QWORD *)(a1 + 160) = v24 + 88;
  *(_QWORD *)(a1 + 7616) = v24;
  *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 928) = v25;
  v26 = objc_msgSend(*(id *)a1, "privateData");
  result = objc_msgSend(*(id *)a1, "privateDataOffset");
  if (v26)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 7616) + 80) = *(_QWORD *)(v26 + *v11 + 8) + result;
    result = IOGPUResourceListAddResource();
  }
  if (a2)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16);
    v29 = *(_DWORD *)(v28 + 2232);
    do
    {
      v29 &= ~(1 << __clz(__rbit32(v29)));
      result = IOGPUResourceListAddResource();
    }
    while (v29);
    v30 = *(_QWORD *)(a1 + 1776);
    v31 = *(_DWORD *)(v28 + 332) + *(_DWORD *)(v30 + 164);
    if (v31 > *(_DWORD *)(a1 + 7248))
    {
      *(_DWORD *)(a1 + 7248) = v31;
      v4[100] = 1;
    }
    else if (!v4[100])
    {
LABEL_35:
      v32 = *(_QWORD *)(v28 + 1264) | *(_QWORD *)(v28 + 1288) | *(_QWORD *)(v28 + 1312) | *(_QWORD *)(v28 + 1344) | *(_QWORD *)(v28 + 1368);
      if (!*(_BYTE *)(v30 + 24))
      {
        v35 = *(_QWORD *)(v28 + 1264) | *(_QWORD *)(v28 + 1288) | *(_QWORD *)(v28 + 1312) | *(_QWORD *)(v28 + 1344) | *(_QWORD *)(v28 + 1368);
        if (v32)
          goto LABEL_45;
        goto LABEL_57;
      }
      if (*(_QWORD *)(v30 + 128))
        v33 = ((unint64_t)(*(_QWORD *)(v30 + 112) != 0) << 56) | 0x400000000000000;
      else
        v33 = (unint64_t)(*(_QWORD *)(v30 + 112) != 0) << 56;
      if (*(_QWORD *)v30)
        v34 = v33 | 0x4000000000000000;
      else
        v34 = v33;
      v35 = v32 & ~v34;
      if (!v35)
      {
LABEL_57:
        for (j = (*(_QWORD *)(v28 + 1272) | *(_QWORD *)(v28 + 1296) | *(_QWORD *)(v28 + 1320) | *(_QWORD *)(v28 + 1352) | *(_QWORD *)(v28 + 1376)) & *(_QWORD *)(a1 + 3608);
              j;
              result = IOGPUResourceListAddResource())
        {
          j &= ~(1 << __clz(__rbit64(j)));
        }
        return result;
      }
LABEL_45:
      while (1)
      {
        v36 = __clz(__rbit64(v35));
        v37 = 1 << v36;
        if ((_DWORD)v36 == 40)
          break;
        if (*(_QWORD *)(a1 + 8 * v36 + 5280))
LABEL_51:
          result = IOGPUResourceListAddResource();
LABEL_52:
        v35 &= ~v37;
        if (!v35)
          goto LABEL_57;
      }
      v38 = *(_QWORD *)(a1 + 160);
      v39 = v38 + 47;
      if ((unint64_t)(v38 + 47) > *(_QWORD *)(a1 + 152))
      {
        result = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
        v38 = *(_QWORD *)(a1 + 160);
        if (!(_DWORD)result)
        {
LABEL_48:
          v40 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
          v41 = v40 + *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 160) = v40 + 32;
          *(_QWORD *)(a1 + 7136) |= 0x10000000000uLL;
          *(_DWORD *)(a1 + 7152) |= 1u;
          *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 856) = v41;
          *(_QWORD *)(a1 + 5600) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 224) + *v11;
          *(_DWORD *)(a1 + 4512) = 24;
          *(_DWORD *)(a1 + 4772) = 24;
          *(_DWORD *)(a1 + 5032) = v41 >> 8;
          v42 = *(_OWORD *)(a1 + 7584);
          *(_QWORD *)(v40 + 16) = *(_QWORD *)(a1 + 7600);
          *(_OWORD *)v40 = v42;
          if (*(_QWORD *)(a1 + 5600))
            goto LABEL_51;
          goto LABEL_52;
        }
        v39 = v38 + 47;
        if ((unint64_t)(v38 + 47) > *(_QWORD *)(a1 + 152))
          goto LABEL_56;
      }
      *(_QWORD *)(a1 + 168) = v39;
      goto LABEL_48;
    }
    result = AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::bindComputeUSCSpillBuffer(a1);
    v30 = *(_QWORD *)(a1 + 1776);
    goto LABEL_35;
  }
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::bindComputeUSCSpillBuffer(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];

  result = AGX::SpillInfoGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::allocateUSCSpillBuffer(a1 + 7248, (_QWORD *)(*(_QWORD *)(a1 + 1768) + 200), *(_QWORD *)(a1 + 1488), (uint64_t)v2);
  if ((_DWORD)result)
    return IOGPUResourceListAddResource();
  return result;
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::encodeBarrier(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  if (*(_BYTE *)(a1 + 7672))
  {
    v2 = *(_QWORD *)(a1 + 7688);
    if (*(_QWORD *)(a1 + 7680) != v2)
    {
      *(_BYTE *)(v2 - 8) = 1;
      *(_BYTE *)(v2 - 7) = *(_BYTE *)(*(_QWORD *)(a1 + 1768) + 458);
    }
  }
  else
  {
    AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(a1 + 1624), (_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 7316);
    if (*(_DWORD *)(a1 + 7312) < v3)
      *(_DWORD *)(a1 + 7312) = v3;
    *(_DWORD *)(a1 + 7316) = 0;
  }
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelInternal(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 1776);
  *(_QWORD *)(a1 + 1776) = a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 1745) = *(_BYTE *)(v6 + 216);
  *(_BYTE *)(a1 + 1746) = *(_BYTE *)(v6 + 1992);
  v12 = *a4;
  v13 = *((_QWORD *)a4 + 2);
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  AGX::ComputeService<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelCommonImpl(a1, (uint64_t *)&v12, (int *)&v10, 0);
  if (*(_DWORD *)(a1 + 1736) != 1)
  {
LABEL_5:
    if (!v5)
      return;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 7672))
  {
    v7 = *(_QWORD *)(a1 + 7688);
    if (*(_QWORD *)(a1 + 7680) != v7)
    {
      *(_BYTE *)(v7 - 8) = 1;
      *(_BYTE *)(v7 - 7) = *(_BYTE *)(*(_QWORD *)(a1 + 1768) + 458);
    }
    goto LABEL_5;
  }
  AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(a1 + 1624), (_QWORD *)(a1 + 16));
  v9 = *(_DWORD *)(a1 + 7316);
  if (*(_DWORD *)(a1 + 7312) < v9)
    *(_DWORD *)(a1 + 7312) = v9;
  *(_DWORD *)(a1 + 7316) = 0;
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 1776) = v5;
    v8 = *(_QWORD *)(v5 + 16);
    *(_BYTE *)(a1 + 1745) = *(_BYTE *)(v8 + 216);
    *(_BYTE *)(a1 + 1746) = *(_BYTE *)(v8 + 1992);
  }
}

void AGX::ComputeService<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelCommonImpl(uint64_t a1, uint64_t *a2, int *a3, _QWORD *a4)
{
  int *v8;
  _DWORD *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  __int16 v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int v26;

  v8 = *(int **)(a1 + 160);
  v9 = v8 + 3;
  if ((unint64_t)(v8 + 3) <= *(_QWORD *)(a1 + 152))
  {
LABEL_2:
    *(_QWORD *)(a1 + 168) = v9;
    goto LABEL_3;
  }
  v26 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  v8 = *(int **)(a1 + 160);
  if (v26)
  {
    v9 = v8 + 3;
    if ((unint64_t)(v8 + 3) > *(_QWORD *)(a1 + 152))
      abort();
    goto LABEL_2;
  }
LABEL_3:
  v10 = (char *)v8 + *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v8 + 3;
  v11 = *a3;
  v12 = a3[2];
  v13 = a3[4];
  *v8 = *a3;
  v8[1] = v12;
  v8[2] = v13;
  *(_QWORD *)(a1 + 6336) = v10;
  *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 816) = v10;
  *(_QWORD *)(a1 + 5560) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 224) + (int)*MEMORY[0x24BE51650];
  *(_QWORD *)(a1 + 7136) |= 0x800000000uLL;
  *(_DWORD *)(a1 + 7152) |= 1u;
  v14 = *a2;
  v15 = a2[1];
  v16 = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 1828) = *a2;
  *(_DWORD *)(a1 + 1832) = v15;
  *(_DWORD *)(a1 + 1836) = v16;
  *(_WORD *)(a1 + 1840) = v16 * v15 * v14;
  *(_WORD *)(a1 + 1842) = v15 * v14;
  if ((unsigned __int16)(v15 * v14) == 1)
  {
    v17 = 0;
    LOWORD(v18) = -1;
  }
  else
  {
    v19 = (unsigned __int16)(v15 * v14);
    v20 = __clz((unsigned __int16)(v15 * v14 - 1)) - 16;
    if ((_WORD)v19 == 1)
      LOWORD(v20) = 16;
    v21 = 16 - v20;
    v17 = 15 - v20;
    v18 = ((0x8000 << v21) + (unsigned __int16)(v15 * v14) - 1) / v19 - 1;
  }
  *(_WORD *)(a1 + 1844) = v17;
  *(_WORD *)(a1 + 1846) = v18;
  if ((unsigned __int16)v14 == 1)
  {
    v22 = 0;
    LOWORD(v23) = -1;
  }
  else
  {
    v24 = __clz((unsigned __int16)(v14 - 1)) - 16;
    if ((_WORD)v14 == 1)
      LOWORD(v24) = 16;
    v25 = 16 - v24;
    v22 = 15 - v24;
    v23 = ((0x8000 << v25) + (unsigned __int16)v14 - 1) / (unsigned __int16)v14 - 1;
  }
  *(_WORD *)(a1 + 1848) = v22;
  *(_WORD *)(a1 + 1850) = v23;
  *(_DWORD *)(a1 + 1852) = v14 * v11;
  *(_DWORD *)(a1 + 1856) = v15 * v12;
  *(_DWORD *)(a1 + 1860) = v16 * v13;
  *(_DWORD *)(a1 + 1816) = v11;
  *(_DWORD *)(a1 + 1820) = v12;
  *(_DWORD *)(a1 + 1824) = v13;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::performEnqueueKernel(a1, 0, *(_QWORD *)(a1 + 1776), a4);
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernel(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _DWORD *v6;
  int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v6 = 0;
  v17 = 0;
  if (*(_BYTE *)(a1 + 1745))
  {
    v6 = (_DWORD *)AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 6848));
    if (!*(_BYTE *)(a1 + 1746))
      goto LABEL_3;
  }
  else if (!*(_BYTE *)(a1 + 1746))
  {
LABEL_3:
    v7 = 0;
    goto LABEL_4;
  }
  v7 = (int *)AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 5456));
LABEL_4:
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v18 = *a3;
  v19 = *((_QWORD *)a3 + 2);
  AGX::ComputeService<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernelCommonImpl(a1, (uint64_t *)&v20, (int *)&v18, &v17);
  if (!*(_BYTE *)(a1 + 1745))
  {
    if (!*(_BYTE *)(a1 + 1746))
      return;
LABEL_12:
    AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::patchPDSPatchUpKernel(a1 + 16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16) + 3080), v17, *(_QWORD *)(a1 + 1792), v7);
    return;
  }
  v8 = *(_OWORD *)(*(_QWORD *)(a1 + 1792) + 1576);
  v9 = *(_QWORD *)(a1 + 224);
  v10 = v9 + 39;
  if ((unint64_t)(v9 + 39) <= *(_QWORD *)(a1 + 216))
    goto LABEL_10;
  v16 = *(_OWORD *)(*(_QWORD *)(a1 + 1792) + 1576);
  v15 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
  v9 = *(_QWORD *)(a1 + 224);
  if (v15)
  {
    v10 = v9 + 39;
    v8 = v16;
    if ((unint64_t)(v9 + 39) > *(_QWORD *)(a1 + 216))
      abort();
LABEL_10:
    *(_QWORD *)(a1 + 232) = v10;
    goto LABEL_11;
  }
  v8 = v16;
LABEL_11:
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + *(_DWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v11 + 32;
  *(_QWORD *)v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1776) + 16) + 2032);
  *(_OWORD *)(v11 + 8) = v8;
  *v6 = v12;
  v13 = (char *)((*(_QWORD *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
  v14 = &v13[*(_QWORD *)(a1 + 176)];
  *(_QWORD *)(a1 + 160) = v13 + 280;
  memcpy(v13, (const void *)(*(_QWORD *)(a1 + 1792) + 536), 0x118uLL);
  *(_QWORD *)(v11 + 24) = v14;
  if (*(_BYTE *)(a1 + 1746))
    goto LABEL_12;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::setBuffers_impl<AGXBuffer>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v10 = a2;
  v11 = result;
  if (a5 && *(_QWORD *)(result + 1480))
  {
    v12 = a5;
    v13 = a2;
    do
    {
      if (*v13)
        result = MTLResourceListAddResource();
      ++v13;
      --v12;
    }
    while (v12);
  }
  if (a5)
  {
    v14 = a5;
    v15 = (int *)MEMORY[0x24BE51650];
    v16 = a6;
    v17 = a5;
    v18 = a4;
    while (1)
    {
      v19 = *v10;
      v20 = (_DWORD *)(v11 + 4 * v18);
      if (*v10)
      {
        v21 = v19 + *v15;
        v22 = *(_QWORD *)(v21 + 8);
        v23 = *(_QWORD *)(v21 + 24);
        LODWORD(v21) = *(_DWORD *)(v21 + 16);
        v24 = 8 * v18;
        v25 = v11 + v24;
        *(_QWORD *)(v25 + 6056) = v22;
        *(_QWORD *)(v25 + 6576) = v23;
        v26 = *a3;
        v27 = (uint64_t *)(*(_QWORD *)(v11 + 1792) + v24);
        v27[67] = *a3 + v22;
        result = v23 + v26;
        *v27 = result;
        v20[1088] = v21;
        v20[1153] = v21;
        v20[1218] = v22 >> 8;
        v19 += *v15;
      }
      else
      {
        v28 = *(_QWORD *)(v11 + 1752);
        v29 = 8 * v18;
        v30 = v11 + v29;
        *(_QWORD *)(v30 + 6056) = v28;
        *(_QWORD *)(v30 + 6576) = 0;
        result = *(_QWORD *)(v11 + 1792);
        v31 = (_QWORD *)(result + v29);
        v31[67] = v28;
        *v31 = 0;
        v20[1088] = 0;
        v20[1153] = 0;
        v20[1218] = *(_QWORD *)(v11 + 1752) >> 8;
      }
      *(_QWORD *)(v11 + 8 * v18 + 5280) = v19;
      if (a6)
      {
        v32 = *v16;
        if (v18 <= 0x22)
          goto LABEL_17;
      }
      else
      {
        LODWORD(v32) = 0;
        if (v18 <= 0x22)
LABEL_17:
          v20[1053] = v32;
      }
      ++v18;
      ++v16;
      ++a3;
      ++v10;
      if (!--v17)
        goto LABEL_19;
    }
  }
  v14 = 0;
LABEL_19:
  *(_QWORD *)(v11 + 7136) |= ~(-1 << v14) << a4;
  *(_DWORD *)(v11 + 7152) |= 1u;
  return result;
}

void AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::issueProgressMarkerDispatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int64x2_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  _QWORD block[6];

  v6 = *(_QWORD *)(a1 + 1456);
  v7 = *(_QWORD *)(v6 + 808);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX6DeviceINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXA10FamilyDevice_block_invoke;
  block[3] = &unk_250400338;
  block[4] = v6;
  block[5] = v7;
  if (AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createComputeProgressMarkerDriverShaderIfNeeded(AGXA10FamilyDevice *)::dispatch_once_pred == -1)
  {
    if (!*(_QWORD *)(v7 + 6928))
      return;
  }
  else
  {
    dispatch_once(&AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::createComputeProgressMarkerDriverShaderIfNeeded(AGXA10FamilyDevice *)::dispatch_once_pred, block);
    if (!*(_QWORD *)(v7 + 6928))
      return;
  }
  v8 = (_QWORD *)(a1 + 16);
  v9 = *(_BYTE **)(a1 + 704);
  if (!v9)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 20, 0))
      goto LABEL_48;
    v9 = *(_BYTE **)(a1 + 704);
  }
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) <= *(_QWORD *)(a1 + 696))
  {
LABEL_5:
    *(_QWORD *)(a1 + 712) = v10;
    goto LABEL_6;
  }
  v32 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 20, 0);
  v9 = *(_BYTE **)(a1 + 704);
  if (v32)
  {
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) > *(_QWORD *)(a1 + 696))
      goto LABEL_48;
    goto LABEL_5;
  }
LABEL_6:
  v11 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 704) = v9 + 1;
  *v9 = 0;
  v12 = *(_QWORD **)(*(_QWORD *)a1 + 688);
  v14 = (_QWORD *)v12[10];
  v13 = v12[11];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (_QWORD *)v12[9];
    v17 = 0xAAAAAAAAAAAAAAABLL * (v14 - v16) + 1;
    if (v17 <= 0xAAAAAAAAAAAAAAALL)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v16) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = (char *)operator new(24 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * (v14 - v16)];
      v22 = &v20[24 * v19];
      *(_QWORD *)v21 = v9;
      *((_QWORD *)v21 + 1) = a3;
      *((_QWORD *)v21 + 2) = a2;
      v15 = v21 + 24;
      if (v14 == v16)
      {
        v8 = (_QWORD *)(a1 + 16);
      }
      else
      {
        v8 = (_QWORD *)(a1 + 16);
        do
        {
          v23 = *(_OWORD *)(v14 - 3);
          *((_QWORD *)v21 - 1) = *(v14 - 1);
          *(_OWORD *)(v21 - 24) = v23;
          v21 -= 24;
          v14 -= 3;
        }
        while (v14 != v16);
        v14 = (_QWORD *)v12[9];
      }
      v12[9] = v21;
      v12[10] = v15;
      v12[11] = v22;
      if (v14)
        operator delete(v14);
      goto LABEL_25;
    }
LABEL_48:
    abort();
  }
  *v14 = v9;
  v14[1] = a3;
  v15 = v14 + 3;
  v14[2] = a2;
LABEL_25:
  v24 = &v9[v11];
  v12[10] = v15;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1456) + 808) + 6928);
  *(_QWORD *)(a1 + 1776) = v25;
  v26 = *(_QWORD *)(v25 + 16);
  *(_BYTE *)(a1 + 1745) = *(_BYTE *)(v26 + 216);
  *(_BYTE *)(a1 + 1746) = *(_BYTE *)(v26 + 1992);
  if (!*(_QWORD *)(a1 + 704))
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v8);
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 1312) + (int)*MEMORY[0x24BE51650];
  *(_QWORD *)(a1 + 6512) = v24;
  *(_QWORD *)(*(_QWORD *)(a1 + 1792) + 992) = v24;
  *(_QWORD *)(a1 + 5736) = v27;
  *(_QWORD *)(a1 + 7136) |= 0x200000000000000uLL;
  *(_DWORD *)(a1 + 7152) |= 1u;
  if (*(_DWORD *)(a1 + 1736) == 1)
  {
    if (*(_BYTE *)(a1 + 7672))
    {
      v28 = *(_QWORD *)(a1 + 7688);
      if (*(_QWORD *)(a1 + 7680) != v28)
      {
        *(_BYTE *)(v28 - 8) = 1;
        *(_BYTE *)(v28 - 7) = *(_BYTE *)(*(_QWORD *)(a1 + 1768) + 458);
      }
    }
    else
    {
      AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(a1 + 1624), v8);
      v29 = *(_DWORD *)(a1 + 7316);
      if (*(_DWORD *)(a1 + 7312) < v29)
        *(_DWORD *)(a1 + 7312) = v29;
      *(_DWORD *)(a1 + 7316) = 0;
    }
  }
  v35 = vdupq_n_s64(1uLL);
  v36 = 1;
  v33 = v35;
  v34 = 1;
  AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::executeKernel(a1, (__int128 *)v35.i8, (__int128 *)v33.i8);
  if (*(_DWORD *)(a1 + 1736) == 1)
  {
    if (*(_BYTE *)(a1 + 7672))
    {
      v30 = *(_QWORD *)(a1 + 7688);
      if (*(_QWORD *)(a1 + 7680) != v30)
      {
        *(_BYTE *)(v30 - 8) = 1;
        *(_BYTE *)(v30 - 7) = *(_BYTE *)(*(_QWORD *)(a1 + 1768) + 458);
      }
    }
    else
    {
      AGX::ComputePDSStateLoader<AGX::G9::Encoders,AGX::G9::Classes>::barrier((uint64_t *)(a1 + 1624), v8);
      v31 = *(_DWORD *)(a1 + 7316);
      if (*(_DWORD *)(a1 + 7312) < v31)
        *(_DWORD *)(a1 + 7312) = v31;
      *(_DWORD *)(a1 + 7316) = 0;
    }
  }
}

uint64_t std::deque<AGX::ControlFlowContext<AGX::G9::ComputeControlFlowEmitter,AGX::G9::ComputePDSStateLoader,AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::G9::ComputeControlFlowEmitter,AGX::G9::ComputePDSStateLoader,AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 36;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 73;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE20getCDMPatchUpVariantEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t (**v19)();
  int v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];
  size_t v31;
  const void *v32;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  __int128 md;
  __int128 v37;
  CC_SHA256_CTX *p_c;
  uint64_t v39;
  __int128 v40;
  size_t v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v25 = off_250401700;
  v26 = 23;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 5464);
  v3 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3321888768;
  v18[2] = ___ZN3AGX35ComputeIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE20getCDMPatchUpVariantEPNS1_6DeviceE_block_invoke_2;
  v18[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken23ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v19 = off_250401700;
  v20 = 23;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v24 = v1;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setSync:", 1);
  objc_msgSend(v5, "setPipelineCache:", v4);
  objc_msgSend(v5, "setBinaryArchives:", 0);
  v30[0] = v3;
  v30[1] = 3221225472;
  v30[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v30[3] = &unk_2504023B8;
  v30[4] = v18;
  v31 = 0;
  v32 = 0;
  ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)&v25, &v32, &v31);
  v6 = dispatch_data_create(v32, v31, 0, 0);
  objc_msgSend(v5, "setDriverKeyData:", v6);
  if (objc_msgSend(v5, "airScript"))
  {
    v7 = objc_msgSend(v5, "airScript");
    v40 = 0uLL;
    v41[0] = 0;
    *(_QWORD *)&v40 = dispatch_data_create_map(v7, (const void **)&v40 + 1, v41);
    v8 = *((_QWORD *)&v40 + 1);
    v9 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    ((void (*)(uint64_t (***)(), CC_SHA256_CTX *))*v25)(&v25, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v8 + v9), &data, (size_t *)len, v10, v11))
    {
      v12 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v12);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v40);
    v40 = md;
    *(_OWORD *)v41 = v37;
    objc_msgSend(v5, "setVendorPluginFunctionId:", &v40);
  }
  *(_QWORD *)c.count = v3;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v5;
  *(_QWORD *)c.wbuf = v30;
  if (objc_msgSend(v5, "function"))
  {
    v13 = mach_absolute_time();
    v14 = *(void **)v2;
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v37 + 1) = &unk_250402458;
    p_c = &c;
    v39 = v13;
    objc_msgSend(v14, "compileFunctionRequest:completionHandler:", v5, &md);
  }
  else
  {
    if (objc_msgSend(v5, "frameworkData") || objc_msgSend(v5, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v37 + 1) = &unk_250402430;
    p_c = &c;
    v15 = objc_msgSend((id)objc_msgSend(v5, "binaryArchives"), "count");
    v16 = *(void **)v2;
    v17 = objc_msgSend(v5, "driverKeyData");
    if (v15)
      objc_msgSend(v16, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "binaryArchives"), 0, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
    else
      objc_msgSend(v16, "compileRequest:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
  }
  dispatch_release(v6);

  v19 = off_250401700;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v25 = off_250401700;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_232C94B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  dispatch_release(*(dispatch_object_t *)(v23 - 128));
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE27getCDMRangeExecutionVariantEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  char **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t (**v19)();
  int v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];
  size_t v31;
  const void *v32;
  CC_LONG len[2];
  void *data;
  CC_SHA256_CTX c;
  __int128 md;
  __int128 v37;
  CC_SHA256_CTX *p_c;
  uint64_t v39;
  __int128 v40;
  size_t v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v25 = off_250401790;
  v26 = 22;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 5464);
  v3 = MEMORY[0x24BDAC760];
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 3321888768;
  v18[2] = ___ZN3AGX35ComputeIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE27getCDMRangeExecutionVariantEPNS1_6DeviceE_block_invoke_2;
  v18[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken22ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  v19 = off_250401790;
  v20 = 22;
  __p = 0;
  v22 = 0;
  v23 = 0;
  v24 = v1;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "setSync:", 1);
  objc_msgSend(v5, "setPipelineCache:", v4);
  objc_msgSend(v5, "setBinaryArchives:", 0);
  v30[0] = v3;
  v30[1] = 3221225472;
  v30[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v30[3] = &unk_2504023B8;
  v30[4] = v18;
  v31 = 0;
  v32 = 0;
  ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::serialize((uint64_t)&v25, &v32, &v31);
  v6 = dispatch_data_create(v32, v31, 0, 0);
  objc_msgSend(v5, "setDriverKeyData:", v6);
  if (objc_msgSend(v5, "airScript"))
  {
    v7 = objc_msgSend(v5, "airScript");
    v40 = 0uLL;
    v41[0] = 0;
    *(_QWORD *)&v40 = dispatch_data_create_map(v7, (const void **)&v40 + 1, v41);
    v8 = *((_QWORD *)&v40 + 1);
    v9 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    ((void (*)(uint64_t (***)(), CC_SHA256_CTX *))*v25)(&v25, &c);
    *(_QWORD *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v8 + v9), &data, (size_t *)len, v10, v11))
    {
      v12 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v12);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v40);
    v40 = md;
    *(_OWORD *)v41 = v37;
    objc_msgSend(v5, "setVendorPluginFunctionId:", &v40);
  }
  *(_QWORD *)c.count = v3;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(_QWORD *)&c.hash[4] = &unk_250402408;
  *(_QWORD *)&c.hash[6] = v5;
  *(_QWORD *)c.wbuf = v30;
  if (objc_msgSend(v5, "function"))
  {
    v13 = mach_absolute_time();
    v14 = *(void **)v2;
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((_QWORD *)&v37 + 1) = &unk_250402458;
    p_c = &c;
    v39 = v13;
    objc_msgSend(v14, "compileFunctionRequest:completionHandler:", v5, &md);
  }
  else
  {
    if (objc_msgSend(v5, "frameworkData") || objc_msgSend(v5, "pipelineOptions"))
      AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    *(_QWORD *)&md = v3;
    *((_QWORD *)&md + 1) = 3221225472;
    *(_QWORD *)&v37 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((_QWORD *)&v37 + 1) = &unk_250402430;
    p_c = &c;
    v15 = objc_msgSend((id)objc_msgSend(v5, "binaryArchives"), "count");
    v16 = *(void **)v2;
    v17 = objc_msgSend(v5, "driverKeyData");
    if (v15)
      objc_msgSend(v16, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "binaryArchives"), 0, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
    else
      objc_msgSend(v16, "compileRequest:pipelineCache:sync:completionHandler:", v17, objc_msgSend(v5, "pipelineCache"), objc_msgSend(v5, "sync"), &md);
  }
  dispatch_release(v6);

  v19 = off_250401790;
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v25 = off_250401790;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_232C94EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  dispatch_release(*(dispatch_object_t *)(v23 - 128));
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::handleControlFlowFailure(uint64_t result)
{
  *(_BYTE *)(result + 7562) |= 2u;
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::handleFirstControlFlowPrologue(uint64_t result)
{
  char *v1;
  char v2;
  _QWORD *v3;

  v1 = (char *)(result + 7562);
  v2 = *(_BYTE *)(result + 7562);
  if ((v2 & 1) != 0
    || (v3 = (_QWORD *)result,
        IOGPUResourceListAddResource(),
        AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::endComputePass(v3, 1), AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::beginComputePass((uint64_t)v3, 1), result = IOGPUResourceListAddResource(), v2 = *v1, (*v1 & 1) != 0))
  {
    *v1 = v2 | 1;
  }
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::handleLastControlFlowEpilogue(uint64_t result)
{
  _QWORD *v1;

  if ((*(_BYTE *)(result + 7562) & 2) != 0)
  {
    v1 = (_QWORD *)result;
    IOGPUResourceListAddResource();
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::endComputePass(v1, 1);
    AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::beginComputePass((uint64_t)v1, 1);
    return IOGPUResourceListAddResource();
  }
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::handleControlFlowPrologue(uint64_t result)
{
  *(_QWORD *)(result + 1784) = 0;
  return result;
}

uint64_t AGX::ComputeContext<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::handleControlFlowEpilogue(uint64_t result)
{
  if (!*(_QWORD *)(*(_QWORD *)(result + 1496) + 520))
    *(_BYTE *)(result + 7562) |= 2u;
  *(_QWORD *)(result + 1784) = 0;
  return result;
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE27getCDMRangeExecutionVariantEPNS1_6DeviceE_block_invoke_2(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  uint64_t v11;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16[54];
  uint64_t v17;
  uint64_t v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v17 = 0;
    v18 = 0;
    ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v18, &v17);
    v16[0] = a4;
    v16[1] = (uint64_t)v15;
    v16[2] = v17;
    v16[3] = v18;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 72);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v16, a2, 0, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v6, v7, (uint64_t)a2, (uint64_t)v16, 0, 0, 0);
  *(_QWORD *)v6 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v16);
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_QWORD *)(v11 + 344) = 0;
  *(_QWORD *)(v11 + 352) = 0;
  *(_DWORD *)(v11 + 264) = 1065353216;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_DWORD *)(v11 + 304) = 1065353216;
  *(_OWORD *)(v11 + 312) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_DWORD *)(v11 + 352) = 1065353216;
  *(_OWORD *)(v11 + 360) = 0u;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_OWORD *)(v11 + 392) = 0u;
  AGX::ComputeIndirectExecutionContextGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::getCDMRangeExecutionVariant(AGX::G9::Device *)::range_execution_pipeline = v11;
  *(_QWORD *)(v11 + 16) = v6;
  *(_DWORD *)(v11 + 224) = *(_DWORD *)(v6 + 3248);
  *(_QWORD *)(v11 + 160) = *(_QWORD *)(v6 + 316);
  *(_DWORD *)(v11 + 176) = *(_DWORD *)(v6 + 352);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v6);
}

void sub_232C95234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken22ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C954E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken22ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[4] = off_250401790;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  v3 = *(_BYTE **)(a2 + 48);
  v2 = *(_BYTE **)(a2 + 56);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[6] = v6;
    v5[7] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken22ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[4] = off_250401790;
  v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)22,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ___ZN3AGX35ComputeIndirectExecutionContextGen1INS_2G98EncodersENS1_7ClassesENS1_10ObjClassesENS1_28EncoderComputeServiceClassesEE20getCDMPatchUpVariantEPNS1_6DeviceE_block_invoke_2(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int8x16_t v10;
  uint64_t v11;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16[54];
  uint64_t v17;
  uint64_t v18;

  if (a3)
  {
    v13 = "MTLCompilerErrorTimeout";
    v14 = "UnknownErrorCode";
    if (a3 == 2)
      v14 = "MTLCompilerErrorCompilationError";
    if (a3 != 3)
      v13 = v14;
    if (a3 == 1)
      v15 = "MTLCompilerErrorFatalError";
    else
      v15 = v13;
    v17 = 0;
    v18 = 0;
    ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v18, &v17);
    v16[0] = a4;
    v16[1] = (uint64_t)v15;
    v16[2] = v17;
    v16[3] = v18;
    _ZZZZN3AGX25DeviceSWTessellationStateINS_2G98EncodersENS1_7ClassesENS1_10ObjClassesEE36createPreCannedTessellationResourcesE20eAGXTessResourceType15eAGXTessWindingEUb2_EUb0_ENKUlvE_clB14_AGX__Crashed_Ev();
  }
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 72);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::ProgramBindingRemap(v16, a2, 0, 1, 0, 0, 0, 0, v8, v9, v10, 0);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::ComputeProgramVariant(v6, v7, (uint64_t)a2, (uint64_t)v16, 0, 0, 0);
  *(_QWORD *)v6 = &off_250401740;
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)v16);
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(_QWORD *)(v11 + 344) = 0;
  *(_QWORD *)(v11 + 352) = 0;
  *(_DWORD *)(v11 + 264) = 1065353216;
  *(_OWORD *)(v11 + 272) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 288) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_DWORD *)(v11 + 304) = 1065353216;
  *(_OWORD *)(v11 + 312) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_DWORD *)(v11 + 352) = 1065353216;
  *(_OWORD *)(v11 + 360) = 0u;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_OWORD *)(v11 + 392) = 0u;
  AGX::ComputeIndirectExecutionContextGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses,AGX::G9::EncoderComputeServiceClasses>::getCDMPatchUpVariant(AGX::G9::Device *)::execute_indirect_pipeline = v11;
  *(_QWORD *)(v11 + 16) = v6;
  *(_DWORD *)(v11 + 224) = *(_DWORD *)(v6 + 3248);
  *(_QWORD *)(v11 + 160) = *(_QWORD *)(v6 + 316);
  *(_DWORD *)(v11 + 176) = *(_DWORD *)(v6 + 352);
  AGX::ComputeProgramVariant<AGX::G9::Encoders,AGX::G9::Classes>::finalize(v6);
}

void sub_232C95974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  AGX::ProgramBindingRemap<AGX::G9::Encoders,AGX::G9::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x234927ECC](v3, 0x10F3C40D6CD94FCLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
    AGX::Compiler::compileProgram<AGX::ComputeProgramKey,AGCDeserializedReply>(AGX::ComputeProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCDeserializedReply const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *global_queue;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 32), "sync", MEMORY[0x24BDAC760], 3221225472, ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2, &unk_2504023E0, a9, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 40), a2, a10))
  {
    ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(&v11);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &v11);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, _QWORD *a2)
{
  mach_absolute_time();
  if (getTimebaseInfo(void)::once[0] != -1)
    dispatch_once(getTimebaseInfo(void)::once, &__block_literal_global_5974);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken23ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BYTE v5[2000];
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (v4 = a1[5]) == 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(_QWORD, _BYTE *))(a1[11] + 16))(a1[11], v5);
  if (v3)
    dispatch_release(v3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_232C95C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken23ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[4] = off_250401700;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  v3 = *(_BYTE **)(a2 + 48);
  v2 = *(_BYTE **)(a2 + 56);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v5 = result;
    v6 = (char *)operator new(v2 - v3);
    v5[6] = v6;
    v5[7] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken23ELN3AGX27DriverShaderCompilationModeE1EE(_QWORD *a1)
{
  void *v1;

  a1[4] = off_250401700;
  v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int *v6;
  int v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _DWORD *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int v32;

  v6 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    v10 = (char *)v8 - (char *)v6;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
      goto LABEL_34;
    v14 = v13;
    v15 = operator new(4 * v13);
    v8 = &v15[v14];
    *v15 = v7;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15 + 1;
    *(_QWORD *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *v6 = v7;
    v9 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)v9 = 96;
    v16 = v9 + 4;
    goto LABEL_33;
  }
  v17 = *(char **)(a1 + 16);
  v18 = (v9 - v17) >> 2;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62)
    abort();
  v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (!(v21 >> 62))
    {
      v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v22 = 0;
LABEL_22:
  v23 = &v22[4 * v18];
  v24 = &v22[4 * v21];
  *v23 = 96;
  v16 = v23 + 1;
  if (v9 == v17)
    goto LABEL_31;
  v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    v26 = v9;
    do
    {
LABEL_30:
      v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  v27 = (v25 >> 2) + 1;
  v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  v28 = &v22[4 * v18 - 16];
  v29 = v9 - 16;
  v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_31:
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v24;
  if (v17)
    operator delete(v17);
LABEL_33:
  *(_QWORD *)(a1 + 24) = v16;
  *a2 = *(_QWORD *)(a1 + 16);
  *a3 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)23,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

double AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::configurePBE(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8, char a9, char a10, char a11, char a12)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t *v37;
  double result;
  unsigned int v39;
  unint64_t v40;
  unint64_t GPUVirtualAddress;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int8x16_t v57;
  uint64_t v58;

  v14 = *(_QWORD *)(a2 + 208);
  if ((*(_BYTE *)(a7 + 1) & 1) != 0)
    v51 = 0;
  else
    v51 = *(_DWORD *)(v14 + 84);
  v15 = 181888;
  if ((a12 & 1) != 0)
  {
    v16 = 35;
    v17 = 3;
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 40);
    v17 = *(_QWORD *)(v14 + 16);
    if (v17 <= 1 && v16 <= 0x32 && ((1 << v16) & 0x4000800000200) != 0)
      v17 = 2;
    v19 = *(_DWORD *)(v14 + 68);
    if (*(_DWORD *)(v14 + 64) == 0x10000)
      v19 = 74880;
    if ((*(_BYTE *)(a6 + 33) & 0xE) != 0)
    {
      v20 = v17 == 4;
      v21 = v16 == 33;
      if (v21 && v20)
      {
        v17 = 2;
        v15 = 181888;
      }
      else
      {
        v15 = v19;
      }
      if (v21 && v20)
        v16 = 35;
    }
    else
    {
      v15 = v19;
    }
  }
  v50 = v15;
  v48 = v16;
  v49 = v17;
  v22 = *(_DWORD *)(v14 + 24) >= 2u && *(_DWORD *)(v14 + 80) == 0;
  v47 = *(_DWORD *)(a2 + 192);
  v45 = *(unsigned int *)(a2 + 388);
  v46 = *(_QWORD *)(a2 + 380);
  v43 = *(_DWORD *)(a2 + 312);
  v44 = *(_DWORD *)(a2 + 308);
  v42 = *(_DWORD *)(v14 + 72);
  GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a2, a5, 0, a3, 0);
  if (v22)
  {
    v40 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a2, a5, 0, 0, 1u);
    v39 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a2, 0);
    v23 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a2, 1u);
  }
  else
  {
    v39 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a2, 0);
    v40 = 0;
    v23 = 0;
  }
  v24 = *(_QWORD *)(a2 + 24);
  v25 = *(_DWORD *)(a2 + 128);
  if (v24 == 9)
  {
    v26 = (v25 + 0x3FFF) >> 14;
    v27 = *(_DWORD *)(a2 + 140);
    v28 = *(_DWORD *)(a2 + 376);
    v29 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a2, 0);
    v30 = 1;
    v31 = v26;
  }
  else
  {
    v26 = *(_DWORD *)(a2 + 132);
    v30 = *(_DWORD *)(a2 + 136);
    v27 = *(_DWORD *)(a2 + 140);
    v28 = *(_DWORD *)(a2 + 376);
    v29 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a2, 0);
    v31 = *(_DWORD *)(a2 + 132);
  }
  if (a10)
    v32 = *(_BYTE *)(a2 + 304) != 0;
  else
    v32 = 0;
  if (a9)
    v33 = 8;
  else
    v33 = 0;
  if (v25 >= 0x4000)
    v34 = 0x4000;
  else
    v34 = v25;
  if (v24 != 9)
    v34 = v25;
  AGX::PBEStateEncoderGen3<kAGXRevG9>::StateFields::StateFields((unint64_t *)&v57, 0, v48, v49, v47, v50, v46, v45, v51, v44, v43, v42, GPUVirtualAddress, v40, v39, v23, v34, v26, v30,
    v27,
    v28,
    v29,
    0,
    0,
    v34,
    v31,
    a9,
    v32,
    a11);
  v35 = (*(_DWORD *)(a2 + 144) + a4);
  v36.i64[0] = v35 << 57;
  v36.i64[1] = v35 & 0xFFFFFFFFFFFFFFEFLL | (16 * ((_DWORD)v35 != 0));
  v57 = vorrq_s8(vandq_s8(v57, (int8x16_t)xmmword_232D73430), v36);
  v37 = (int8x16_t *)(a1 + 384 + 24 * (v33 + a8));
  v37[69].i64[0] = v58;
  result = *(double *)v57.i64;
  v37[68] = v57;
  *(_DWORD *)(a1 + 384 + 4 * (v33 + a8) + 456) = 2
                                                               * ((*(_DWORD *)a7 >> 12)
                                                                % (*(_WORD *)(a6 + 34) & 0x1FFu));
  return result;
}

size_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(uint64_t a1, unsigned int a2)
{
  __IOSurface *v4;
  size_t result;
  uint64_t WidthInCompressedTilesOfPlane;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  MTLPixelFormat v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  _OWORD v19[4];
  uint64_t v20;

  if (*(_BYTE *)(a1 + 380) == 3)
  {
    if (*(_QWORD *)(a1 + 168))
    {
      WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      return IOSurfaceGetBytesPerTileDataOfPlane() * WidthInCompressedTilesOfPlane;
    }
    else
    {
      v9 = *(_DWORD *)(a1 + 128);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 208);
      v12 = *(unsigned __int8 *)(a1 + a2 + 57);
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      v13 = *(unsigned __int8 *)(v11 + 49);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v17, a2, v10, v13);
      if (a2 == 1 && (*(_DWORD *)(v11 + 72) & 0xFFFFFFFE) == 2)
        v9 = (v9 + 1) >> 1;
      v14 = LOBYTE(v17[0]);
      v20 = 0;
      memset(v19, 0, sizeof(v19));
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v19, a2, v10, v13);
      if ((v12 - 1) > 2)
        v15 = (BYTE1(v19[0]) * LOBYTE(v19[0]) * (unint64_t)BYTE2(v19[0])) >> 3;
      else
        v15 = *((_QWORD *)&v19[2] + v12 + 1);
      return v15 * ((v9 + v14 - 1) / v14);
    }
  }
  else if (*(_BYTE *)(a1 + 380))
  {
    return 0;
  }
  else
  {
    v4 = *(__IOSurface **)(a1 + 168);
    if (v4)
    {
      return IOSurfaceGetBytesPerRowOfPlane(v4, *(_DWORD *)(a1 + 176) + a2);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 208);
      v8 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v8 - 624) >= 4 && (unint64_t)(v8 - 550) > 1)
      {
        result = *(_QWORD *)(a1 + 152);
        if (*(_QWORD *)(a1 + 24) == 9)
        {
          v16 = (unint64_t)*(unsigned __int8 *)(v7 + 49) << 14;
          if (v16 < result)
            return v16;
        }
      }
      else
      {
        return (*(unsigned int *)(a1 + 128) * (unint64_t)*(unsigned __int8 *)(v7 + a2 + 88) + 15) & 0x1FFFFFFFFF0;
      }
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v10;
  int v11;
  _BOOL4 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 380);
  if ((_BYTE)v2)
    v3 = v2 == 3;
  else
    v3 = 1;
  if (v3)
    return 0;
  result = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, *(_DWORD *)(a1 + 64), a2);
  if (*(_BYTE *)(a1 + 232))
    result = (result + *(_QWORD *)(a1 + 320) - 1) & -*(_QWORD *)(a1 + 320);
  if ((_BYTE)v2)
  {
    if ((v2 & 0xFFFF00) == 0x300
      || ((v6 = v2 & 0x1FF00, (v2 & 0xFFFF00) != 0x400) ? (v7 = v6 == 65792) : (v7 = 1),
          !v7 ? (v8 = v6 == 66560) : (v8 = 1),
          !v8 ? (v9 = v6 == 66048) : (v9 = 1),
          v9))
    {
      if (!*(_BYTE *)(a1 + 16))
      {
        if (BYTE1(v2) == 1)
          v10 = BYTE2(v2) & 1;
        else
          v10 = 0;
        if (BYTE1(v2) == 2)
          v11 = (v2 >> 16) & 1;
        else
          v11 = 0;
        if ((v10 & 1) != 0)
          v11 = 1;
        if (BYTE1(v2) - 3 < 2)
          v11 = 1;
        v13 = (result & 0xFFFFFFFFFFFFC000) != 0 && v2 == 1;
        v3 = (v13 & v11) == 0;
        v14 = 64;
        if (!v3)
          v14 = 0x4000;
        if (!(_BYTE)v2)
          v14 = 16;
        return (result + v14 - 1) & -v14;
      }
      return 0;
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v5;
  unint64_t v6;
  unsigned int v8;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  int v24;

  v5 = *(_DWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 32) - 250;
  if (v6 > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
  {
    v8 = *(_DWORD *)(a1 + 128);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 128);
    if ((v8 < 0x20 || *(_DWORD *)(a1 + 132) <= 0x1Fu) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v5 <= 1)
    {
      v12 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
      v13 = (v8 + ~v12) & v12;
      goto LABEL_18;
    }
  }
  v13 = v8;
LABEL_18:
  if (v13 <= 1)
    v13 = 1;
  v14 = (*(_DWORD *)(a1 + 216) + v13 - 1) / *(_DWORD *)(a1 + 216);
  if (v6 <= 0xB && ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) != 0)
  {
    v15 = *(_DWORD *)(a1 + 132);
    if ((v8 < 0x20 || v15 <= 0x1F) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v5 < 2)
    {
      v16 = *(_QWORD *)(a1 + 208);
      v17 = (v15 + ~(-1 << *(_BYTE *)(v16 + 48))) & (-1 << *(_BYTE *)(v16 + 48));
      goto LABEL_29;
    }
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 132);
  }
  v16 = *(_QWORD *)(a1 + 208);
  v17 = v15;
LABEL_29:
  if (v17 <= 1)
    v17 = 1;
  v18 = (*(_DWORD *)(a1 + 220) + v17 - 1) / *(_DWORD *)(a1 + 220);
  if (*(_BYTE *)(a1 + 380))
  {
    v19 = *(unsigned __int8 *)(a1 + 381);
    if (v19 != 1
      && *(_BYTE *)(a1 + 380) != 3
      && (v19 == 4 || v19 == 2 && (!*(_BYTE *)(a1 + 382) || (*(_BYTE *)(a1 + 382) & 3) != 0)))
    {
      v20 = *(unsigned __int8 *)(v16 + 48);
      if (v20)
      {
        if (v6 <= 0xB && ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) != 0 && (v8 < 0x20 || v15 <= 0x1F))
        {
          v21 = v5 > 1;
          v22 = ~(-1 << v20);
          v23 = (v18 + v22) & (-1 << v20);
          if (v21)
            v24 = v14;
          else
            v24 = (v14 + v22) & (-1 << v20);
          if (v21)
            v23 = (*(_DWORD *)(a1 + 220) + v17 - 1) / *(_DWORD *)(a1 + 220);
          if ((*(_QWORD *)(a1 + 40) & 5) == 4)
          {
            v14 = v24;
            v18 = v23;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 380) == 2)
    return AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTiled(a1, v14, v18, a3, a2);
  else
    return AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTwiddled(a1, v14, v18, a3, 0, a2);
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v11;
  int v12;
  _BOOL4 v14;

  v2 = *(_QWORD *)(a1 + 380);
  if ((_BYTE)v2)
    v3 = v2 == 3;
  else
    v3 = 1;
  if (v3)
    return 0;
  result = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, *(unsigned int *)(a1 + 64), a2);
  if (*(_BYTE *)(a1 + 232))
  {
    v6 = *(_QWORD *)(a1 + 320);
    return (result + v6 - 1) & -v6;
  }
  if ((_BYTE)v2)
  {
    if ((v2 & 0xFFFF00) == 0x300
      || ((v7 = v2 & 0x1FF00, (v2 & 0xFFFF00) != 0x400) ? (v8 = v7 == 65792) : (v8 = 1),
          !v8 ? (v9 = v7 == 66560) : (v9 = 1),
          !v9 ? (v10 = v7 == 66048) : (v10 = 1),
          v10))
    {
      if (!*(_BYTE *)(a1 + 16))
      {
        if (BYTE1(v2) == 1)
          v11 = BYTE2(v2) & 1;
        else
          v11 = 0;
        if (BYTE1(v2) == 2)
          v12 = (v2 >> 16) & 1;
        else
          v12 = 0;
        if ((v11 & 1) != 0)
          v12 = 1;
        if (BYTE1(v2) - 3 < 2)
          v12 = 1;
        v14 = (result & 0xFFFFFFFFFFFFC000) != 0 && v2 == 1;
        v3 = (v14 & v12) == 0;
        v6 = 64;
        if (!v3)
          v6 = 0x4000;
        if (!(_BYTE)v2)
          v6 = 16;
        return (result + v6 - 1) & -v6;
      }
      return 0;
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  char *v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  char v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  char v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v67;
  unsigned int v69;
  unint64_t v70;
  unsigned int v72;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  _BYTE *v84;
  unsigned int v85;
  int v86;
  char v87;
  uint64_t v88;
  int isDepthStencilAllocTypePadded;
  int v90;
  uint64_t v92;
  char *v93;
  unsigned int v94;

  v4 = a2;
  if (!*(_BYTE *)(a1 + 232) && !*(_BYTE *)(a1 + 240))
  {
    v69 = *(_DWORD *)(a1 + 64);
    v70 = *(_QWORD *)(a1 + 32) - 250;
    if (v70 > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
    {
      v72 = *(_DWORD *)(a1 + 128);
    }
    else
    {
      v72 = *(_DWORD *)(a1 + 128);
      if ((v72 < 0x20 || *(_DWORD *)(a1 + 132) <= 0x1Fu) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v69 <= 1)
      {
        v76 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
        v77 = (v72 + ~v76) & v76;
        goto LABEL_154;
      }
    }
    v77 = v72;
LABEL_154:
    if (v77 <= 1)
      v77 = 1;
    v80 = (*(_DWORD *)(a1 + 216) + v77 - 1) / *(_DWORD *)(a1 + 216);
    if (v70 <= 0xB && ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) != 0)
    {
      v81 = *(_DWORD *)(a1 + 132);
      if ((v72 < 0x20 || v81 <= 0x1F) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v69 < 2)
      {
        v82 = *(_QWORD *)(a1 + 208);
        v81 = (v81 + ~(-1 << *(_BYTE *)(v82 + 48))) & (-1 << *(_BYTE *)(v82 + 48));
LABEL_165:
        if (v81 <= 1)
          v83 = 1;
        else
          v83 = v81;
        v84 = (_BYTE *)(a1 + 380);
        v85 = (*(_DWORD *)(a1 + 220) + v83 - 1) / *(_DWORD *)(a1 + 220);
        if (*(_BYTE *)(a1 + 380))
        {
          v86 = *(unsigned __int8 *)(a1 + 381);
          if (v86 != 1
            && *(_BYTE *)(a1 + 380) != 3
            && (v86 == 4 || v86 == 2 && (!*(_BYTE *)(a1 + 382) || (*(_BYTE *)(a1 + 382) & 3) != 0)))
          {
            v87 = *(_BYTE *)(v82 + 48);
            if (v87)
            {
              v88 = a1;
              isDepthStencilAllocTypePadded = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isDepthStencilAllocTypePadded(a1);
              v90 = ~(-1 << v87);
              v19 = isDepthStencilAllocTypePadded == 0;
              a1 = v88;
              if (!v19)
              {
                v80 = (v80 + v90) & (-1 << v87);
                v85 = (v85 + v90) & (-1 << v87);
              }
            }
          }
        }
        if (*v84 == 2)
          return AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTiled(a1, v80, v85, a3, v4);
        else
          return AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTwiddled(a1, v80, v85, a3, 0, v4);
      }
    }
    else
    {
      v81 = *(_DWORD *)(a1 + 132);
    }
    v82 = *(_QWORD *)(a1 + 208);
    goto LABEL_165;
  }
  v5 = a3;
  if (!(_DWORD)a2)
  {
    v7 = 0;
    v6 = 0;
    v58 = a1 + 24 * a3;
    v9 = *(unsigned __int8 *)(v58 + 252);
    v10 = *(unsigned __int8 *)(v58 + 253);
    goto LABEL_83;
  }
  v92 = a1;
  v6 = 0;
  v7 = 0;
  v8 = a1 + 24 * a3;
  v9 = *(unsigned __int8 *)(v8 + 252);
  v10 = *(unsigned __int8 *)(v8 + 253);
  v11 = *(unsigned __int8 *)(v8 + 258);
  v94 = v11 - 1;
  v19 = v11 == 2;
  v12 = *(unsigned __int16 *)(v8 + 242);
  v13 = *(unsigned __int16 *)(v8 + 244);
  v14 = (unsigned __int8 *)(v8 + 260);
  v15 = (unsigned __int8 *)(v8 + 261);
  v93 = (char *)(v8 + 257);
  v16 = (_BYTE *)(v8 + 255);
  v17 = (char *)(v8 + 254);
  v18 = *(unsigned __int8 *)(v8 + 259);
  v19 = v19 && v18 == 0;
  v20 = v19;
  v21 = (unsigned __int8 *)(v8 + 256);
  v22 = *(unsigned __int8 *)(v8 + 251);
  v23 = *(unsigned __int16 *)(v8 + 248);
  while (1)
  {
    v24 = v9 >= v7 ? v9 - v7 : 0;
    v25 = v10 >= v7 ? v10 - v7 : 0;
    v26 = v12 >> v7;
    v27 = v13 >> v7;
    if (v94 > 1)
    {
      if (v26 <= 1)
        v39 = 1;
      else
        v39 = v12 >> v7;
      v30 = (*v14 + v39 - 1) / *v14;
      if (v27 <= 1)
        v40 = 1;
      else
        v40 = v13 >> v7;
      v41 = *v93;
      v32 = (*v15 + v40 - 1) / *v15;
      if (*v93)
      {
        v42 = 1 << v41;
        v43 = -1 << v41;
        v44 = (v30 + ~v43) & v43;
        v45 = (v32 + ~v43) & v43;
        if (v42 <= v32)
          v46 = v44;
        else
          v46 = v30;
        if (v42 > v32)
          v45 = v32;
        if (v42 <= v30)
        {
          v30 = v46;
          v32 = v45;
        }
      }
      LOBYTE(v35) = *v16;
      v38 = *v17;
      if (1 << *v16 >= v32 || v30 >> v38)
      {
        if (!(v32 >> v35) && 1 << v38 < v30)
        {
          if (v32 < 2)
            v54 = 0;
          else
            v54 = __clz(~(-1 << -(char)__clz(v32 - 1))) - 32;
          v38 += v35 + v54;
          v35 = -v54;
        }
      }
      else
      {
        if (v30 < 2)
          LOBYTE(v47) = 0;
        else
          v47 = 32 - __clz(~(-1 << -(char)__clz(v30 - 1)));
        LOBYTE(v35) = v38 + v35 - v47;
        v38 = v47;
      }
    }
    else
    {
      v28 = v4;
      v29 = (*v14 + v26 - 1) / *v14;
      v30 = v29 <= 1 ? 1 : v29;
      v31 = (*v15 + v27 - 1) / *v15;
      v32 = v31 <= 1 ? 1 : v31;
      v33 = 1 << v24;
      v34 = 1 << v25;
      LOBYTE(v35) = *v16;
      v36 = *v17;
      if (1 << *v16 >= (1 << v25) || v33 >> v36)
      {
        v48 = v34 >> v35;
        v49 = 1 << v36;
        v50 = __clz(~(-1 << -(char)__clz(v34 - 1))) - 32;
        if (v7 >= v10)
          v50 = 0;
        v51 = v49 >= v33;
        if (v49 < v33)
          v52 = v36 + v35 + v50;
        else
          v52 = *v17;
        if (v51)
          LOBYTE(v53) = *v16;
        else
          v53 = -v50;
        if (v48)
          v38 = *v17;
        else
          v38 = v52;
        if (!v48)
          LOBYTE(v35) = v53;
        v4 = v28;
      }
      else
      {
        v37 = 32 - __clz(~(-1 << -(char)__clz(v33 - 1)));
        v38 = v7 < v9 ? v37 : 0;
        LOBYTE(v35) = v36 + v35 - v38;
      }
    }
    if (v20)
    {
      v55 = 1 << v25;
    }
    else
    {
      if (v18 == 4 || v18 == 3 || v18 == 2)
      {
        v56 = ((1 << v24 << v25) * *v21 + 127) & 0xFFFFFFFFFFFFFF80;
        goto LABEL_76;
      }
      v55 = 1 << v24;
    }
    v56 = (v55 << v25) * *v21;
LABEL_76:
    v57 = ((v32 + ~(-1 << v35)) >> v35) * ((v30 + ~(-1 << v38)) >> v38) * v22 * v23;
    if (v57 >= 4 * v56 / 3)
      break;
    v6 += v57;
    if ((_DWORD)v4 == ++v7)
      goto LABEL_90;
  }
  a1 = v92;
  v5 = a3;
LABEL_83:
  if (v9 >= v7)
    v59 = v9 - v7;
  else
    v59 = 0;
  if (v10 >= v7)
    v60 = v10 - v7;
  else
    v60 = 0;
  v61 = v4 - v7;
  if (v61)
  {
    v63 = (unsigned __int8 *)(a1 + 24 * v5);
    v64 = v63[259];
    v65 = v63 + 256;
    if (v63[258] == 2 && v64 == 0)
    {
      v62 = 0;
      do
      {
        v62 += (1 << v60 << v60) * *v65;
        v51 = v60-- != 0;
        if (!v51)
          v60 = 0;
        --v61;
      }
      while (v61);
    }
    else
    {
      switch(v64)
      {
        case 4:
          v62 = 0;
          v78 = *v65;
          do
          {
            v62 += ((1 << v59 << v60) * v78 + 127) & 0xFFFFFFFFFFFFFF80;
            if (v59)
              --v59;
            else
              v59 = 0;
            if (v60)
              --v60;
            else
              v60 = 0;
            --v61;
          }
          while (v61);
          break;
        case 3:
          v62 = 0;
          v79 = *v65;
          do
          {
            v62 += ((1 << v59 << v60) * v79 + 127) & 0xFFFFFFFFFFFFFF80;
            if (v59)
              --v59;
            else
              v59 = 0;
            if (v60)
              --v60;
            else
              v60 = 0;
            --v61;
          }
          while (v61);
          break;
        case 2:
          v62 = 0;
          v67 = *v65;
          do
          {
            v62 += ((1 << v59 << v60) * v67 + 127) & 0xFFFFFFFFFFFFFF80;
            if (v59)
              --v59;
            else
              v59 = 0;
            if (v60)
              --v60;
            else
              v60 = 0;
            --v61;
          }
          while (v61);
          break;
        default:
          v62 = 0;
          do
          {
            v62 += (1 << v59 << v60) * *v65;
            v51 = v59-- != 0;
            if (!v51)
              v59 = 0;
            v51 = v60-- != 0;
            if (!v51)
              v60 = 0;
            --v61;
          }
          while (v61);
          break;
      }
    }
  }
  else
  {
LABEL_90:
    v62 = 0;
  }
  return v62 + v6;
}

double AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::configureDummyPBEInternal(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  char v11;
  unsigned __int8 v12;

  v4 = 4;
  if (((2 * (a4 > 1)) & 2) == 0)
    v4 = 2;
  if (v12 != 2)
    v4 = -1;
  if (v12 - 3 < 2 || v12 == 1)
    v4 = 2;
  v6 = v4;
  v7 = 17448;
  if (v11 != 1)
    v7 = -8;
  v8 = 17440;
  if (v11)
    v8 = v7;
  v9 = a1 + 384 + 24 * a3 + 1088;
  *(_QWORD *)v9 = v8 | v6;
  result = -0.0;
  *(_OWORD *)(v9 + 8) = xmmword_232D736F0;
  *(_DWORD *)(a1 + 384 + 4 * a3 + 456) = 2 * ((*(_DWORD *)a2 >> 12) % (*(_WORD *)(a2 + 34) & 0x1FFu));
  return result;
}

uint64_t AGX::FramebufferDriverConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferDriverConfigGen2(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  int8x16_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  MTLPixelFormat v17;
  _QWORD *v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  int32x2_t v22;
  __int8 v23;
  int64x2_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t *v29;
  uint64_t v30;
  __int8 v31;
  int32x2_t *v32;
  int32x2_t v33;
  unint64_t v34;
  int v35;
  int64x2_t v36;
  int64x2_t v37;
  int32x4_t v38;
  int16x4_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  _DWORD *v44;
  _DWORD *v45;
  float v46;
  float v47;
  float *v48;
  float v49;
  float v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v61;
  BOOL v63;
  char v64;
  BOOL v65;
  _QWORD *v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  char v72;
  BOOL v73;
  BOOL v74;
  char v75;
  BOOL v76;
  BOOL v77;
  char v78;
  BOOL v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  double v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  char *v124;
  char v125;
  _DWORD *v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  __int32 v146;
  int v147;
  void *v149;
  void *v150;
  char *v152;
  char *v153;
  void *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  _DWORD *v158;
  int8x16_t *v160;
  uint64_t v161;

  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v6 = (int8x16_t *)(a1 + 1380);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v156 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = 0u;
  v157 = (_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 92) = 3;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0x300000000;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 3;
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 0x300000000;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0x300000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0x300000000;
  *(_BYTE *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 476) = 3;
  *(_BYTE *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 536) = 0x300000000;
  *(_BYTE *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0x300000000;
  *(_BYTE *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = 0x300000000;
  *(_BYTE *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 732) = 3;
  *(_BYTE *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 796) = 3;
  *(_BYTE *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 860) = 3;
  *(_BYTE *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 924) = 3;
  *(_BYTE *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 988) = 3;
  *(_BYTE *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1052) = 3;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_DWORD *)(a1 + 1116) = 3;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_DWORD *)(a1 + 1180) = 3;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_DWORD *)(a1 + 1244) = 3;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_DWORD *)(a1 + 1308) = 3;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1399) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1408) = 1;
  *(_WORD *)(a1 + 1412) = 0;
  v152 = (char *)(a1 + 1413);
  v153 = (char *)(a1 + 1412);
  *(_DWORD *)(a1 + 1416) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  v155 = a1 + 1328;
  bzero((void *)(a1 + 1328), 0x28uLL);
  v158 = (_DWORD *)(a1 + 1520);
  *(_DWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  v160 = v6;
  v6[9].i64[1] = 0x300000003;
  *(_BYTE *)(a1 + 1540) = 0;
  *(_QWORD *)(a1 + 1608) = 0;
  v154 = a2;
  v7 = objc_msgSend(a2, "_descriptorPrivate");
  v8 = *(id *)v7;
  v150 = (void *)objc_msgSend(*(id *)v7, "_descriptorAtIndex:", 8);
  v9 = objc_msgSend(v8, "_descriptorAtIndex:", 9);
  v10 = 0;
  v11 = 0;
  *(_BYTE *)(a1 + 1528) = *(_BYTE *)(v7 + 43);
  *(_WORD *)(a1 + 1529) = *(_WORD *)(v7 + 40);
  v12 = *(_DWORD *)(v7 + 48);
  if (v12 <= 1)
    v12 = 1;
  if (v12 >= 0x800)
    v12 = 2048;
  *(_DWORD *)(a1 + 1408) = v12;
  v161 = v7;
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(v7 + 160);
  v149 = (void *)v9;
  v13 = 178;
  do
  {
    v15 = (void *)objc_msgSend(v8, "_descriptorAtIndex:", v13 - 178);
    if (!v15)
      goto LABEL_11;
    v16 = objc_msgSend(v15, "_descriptorPrivate");
    v18 = *(_QWORD **)v16;
    if (!*(_QWORD *)v16)
      goto LABEL_11;
    v19 = v16;
    v20 = (int32x2_t *)(a1 + v10);
    v21 = *(_QWORD *)(v16 + 24);
    v22 = (int32x2_t)v18[67];
    v23 = *(_BYTE *)(v161 + 42);
    v24 = *(int64x2_t *)(v16 + 8);
    v20[7] = (int32x2_t)v18;
    v20[8] = v22;
    v20[9] = vrev64_s32(vmovn_s64(v24));
    v20[10].i32[1] = 0;
    v20[11].i32[0] = 0;
    v20[10].i32[0] = v21;
    v20[12].i8[0] = v23;
    if (*(_BYTE *)(a1 + 1531))
    {
      LOBYTE(v25) = 1;
    }
    else
    {
      v25 = ((unint64_t)objc_msgSend(*(id *)v16, "resourceOptions") >> 8) & 1;
      v22 = v20[8];
    }
    *(_BYTE *)(a1 + 1531) = v25;
    v26 = 1 << (v13 + 78);
    *(_DWORD *)(a1 + 1368) |= v26;
    if (*(_QWORD *)(*(_QWORD *)&v22 + 48) == 3)
      *v158 |= v26;
    if (!*(_QWORD *)v19)
    {
      v27 = 0;
      v28 = 0;
      v29 = *(int32x2_t **)(v19 + 112);
      if (!v29)
        goto LABEL_33;
LABEL_26:
      v30 = *(_QWORD *)(v19 + 136);
      v31 = *(_BYTE *)(v161 + 42);
      v32 = (int32x2_t *)(a1 + v10);
      v32[72] = v29[67];
      v33 = vmovn_s64(*(int64x2_t *)(v19 + 120));
      v32[71] = (int32x2_t)v29;
      v32[73] = vrev64_s32(v33);
      v32[74].i32[0] = v30;
      *(_QWORD *)(a1 + v10 + 596) = 0;
      v32[76].i8[0] = v31;
      if (*(_BYTE *)(a1 + 1531))
      {
        LOBYTE(v34) = 1;
      }
      else
      {
        v34 = ((unint64_t)objc_msgSend(*(id *)(v19 + 112), "resourceOptions") >> 8) & 1;
        v22 = v20[8];
      }
      *(_BYTE *)(a1 + 1531) = v34;
      *(_DWORD *)(a1 + 1376) |= v26;
      if ((v28 & 0xFFFFFFFFFFFFFFFELL) == 2)
        v35 = 1 << (v13 + 78);
      else
        v35 = 0;
      *(_DWORD *)(a1 + 1396) |= v35;
      goto LABEL_33;
    }
    v27 = *(_QWORD *)(v19 + 32);
    if (((*(_QWORD *)(v19 + 40) == 2) & (a4 >> 4)) != 0)
      v28 = 3;
    else
      v28 = *(_QWORD *)(v19 + 40);
    v29 = *(int32x2_t **)(v19 + 112);
    if (v29)
      goto LABEL_26;
LABEL_33:
    v36.i64[0] = v28;
    v36.i64[1] = v27;
    v37.i64[0] = v27;
    v37.i64[1] = v28 & 0xFFFFFFFFFFFFFFFDLL;
    v38 = vuzp1q_s32((int32x4_t)vceqq_s64(v36, (int64x2_t)xmmword_232D73700), (int32x4_t)vceqq_s64(v37, vdupq_n_s64(1uLL)));
    v39 = vmovn_s32(v38);
    *v160 = vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)v38), *v160);
    if (v28 == 4)
      v40 = 1 << (v13 + 78);
    else
      v40 = 0;
    *(_DWORD *)(a1 + 1400) |= v40;
    v41 = *(_QWORD *)(*(_QWORD *)&v22 + 208);
    *(_QWORD *)(a1 + 8 * v13) = v41;
    if ((v39.i8[2] & 1) != 0)
    {
      v42 = *(_DWORD *)(v41 + 32);
      if (v42 <= 0x12)
      {
        v43 = 1 << v42;
        if ((v43 & 0x40A20) != 0)
        {
          v20[5].i32[0] = *(double *)(v19 + 56);
          v44 = (_DWORD *)(a1 + v10);
          v44[11] = *(double *)(v19 + 64);
          v44[12] = *(double *)(v19 + 72);
          v44[13] = *(double *)(v19 + 80);
LABEL_43:
          v52 = *(double *)(v19 + 56);
          v51 = *(double *)(v19 + 64);
          v53 = *(double *)(v19 + 72);
          v54 = *(double *)(v19 + 80);
          v11 = v20[8];
          v55 = *((_DWORD *)AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(*(AGX::G9::TextureFormatTable **)(*(_QWORD *)&v11 + 32), v17)+ 16);
          v56 = ((v55 >> 6) & 6) - 2;
          v57 = ((v55 >> 9) & 6) - 2;
          v58 = ((v55 >> 12) & 6) - 6;
          v59 = ((v55 >> 15) & 6) - 6;
          v61 = fabs(v52) >= 0.000001 && v56 < 4;
          if (fabs(v51) >= 0.000001 && v57 < 4)
            v61 = 1;
          if (v61
            || (fabs(v54) >= 0.000001 ? (v63 = v59 >= 0xFFFFFFFC) : (v63 = 0),
                v63 ? (v64 = 0) : (v64 = 1),
                fabs(v53) >= 0.000001 ? (v65 = v58 >= 0xFFFFFFFC) : (v65 = 0),
                v65 || (v66 = v157, (v64 & 1) == 0)))
          {
            v67 = fabs(v52 + -1.0) < 0.000001 || v56 >= 4;
            v68 = !v67;
            v69 = fabs(v51 + -1.0) < 0.000001 || v57 >= 4;
            v70 = !v69 || v68;
            if (v70
              || (fabs(v54) >= 0.000001 ? (v71 = v59 >= 0xFFFFFFFC) : (v71 = 0),
                  v71 ? (v72 = 0) : (v72 = 1),
                  fabs(v53 + -1.0) >= 0.000001 ? (v73 = v58 >= 0xFFFFFFFC) : (v73 = 0),
                  v73 || (v66 = (_QWORD *)(a1 + 24), (v72 & 1) == 0)))
            {
              if (v61
                || (fabs(v54 + -1.0) >= 0.000001 ? (v74 = v59 >= 0xFFFFFFFC) : (v74 = 0),
                    v74 ? (v75 = 0) : (v75 = 1),
                    fabs(v53) >= 0.000001 ? (v76 = v58 >= 0xFFFFFFFC) : (v76 = 0),
                    v76 || (v66 = (_QWORD *)a1, (v75 & 1) == 0)))
              {
                if (v70
                  || (fabs(v54 + -1.0) >= 0.000001 ? (v77 = v59 >= 0xFFFFFFFC) : (v77 = 0),
                      v77 ? (v78 = 0) : (v78 = 1),
                      fabs(v53 + -1.0) >= 0.000001 ? (v79 = v58 >= 0xFFFFFFFC) : (v79 = 0),
                      v79 || (v66 = (_QWORD *)(a1 + 8), (v78 & 1) == 0)))
                {
                  v66 = v156;
                }
              }
            }
          }
          ++*v66;
          goto LABEL_7;
        }
        if ((v43 & 0x510) != 0)
        {
          v20[5].i32[0] = (int)*(double *)(v19 + 56);
          v45 = (_DWORD *)(a1 + v10);
          v45[11] = (int)*(double *)(v19 + 64);
          v45[12] = (int)*(double *)(v19 + 72);
          v45[13] = (int)*(double *)(v19 + 80);
          goto LABEL_43;
        }
      }
      v46 = *(double *)(v19 + 56);
      *(float *)v20[5].i32 = v46;
      v47 = *(double *)(v19 + 64);
      v48 = (float *)(a1 + v10);
      v48[11] = v47;
      v49 = *(double *)(v19 + 72);
      v48[12] = v49;
      v50 = *(double *)(v19 + 80);
      v48[13] = v50;
      goto LABEL_43;
    }
    v11 = v20[8];
LABEL_7:
    if (*(_BYTE *)(v19 + 168))
      v14 = 1 << (v13 + 78);
    else
      v14 = 0;
    *(_DWORD *)(a1 + 1524) |= v14;
LABEL_11:
    v10 += 64;
    ++v13;
  }
  while (v10 != 512);
  if (a3 < 0xA0000)
  {
    v80 = *(_DWORD *)(a1 + 1380);
    if (v80 == *(unsigned __int8 *)(a1 + 1368))
    {
      v81 = v80 & -v80;
      *(_DWORD *)(a1 + 1380) ^= v81;
      *(_DWORD *)(a1 + 1392) |= v81;
    }
  }
  if (v150)
  {
    v82 = objc_msgSend(v150, "_descriptorPrivate");
    v83 = v82;
    v84 = *(_QWORD **)v82;
    if (*(_QWORD *)v82)
    {
      v85 = *(_QWORD *)(v82 + 32);
      if (((*(_QWORD *)(v82 + 40) == 2) & (a4 >> 4)) != 0)
        v86 = 3;
      else
        v86 = *(_QWORD *)(v82 + 40);
      v87 = v84[67];
    }
    else
    {
      v86 = 0;
      v85 = 0;
      v87 = 0;
    }
    v91 = *(_QWORD *)(v82 + 8);
    v90 = *(_QWORD *)(v82 + 16);
    v92 = *(_QWORD *)(v82 + 24);
    *(_QWORD *)(a1 + 1080) = v84;
    *(_QWORD *)(a1 + 1088) = v87;
    *(_DWORD *)(a1 + 1096) = v90;
    *(_DWORD *)(a1 + 1100) = v91;
    *(_DWORD *)(a1 + 1104) = v92;
    *(_QWORD *)(a1 + 1108) = 0;
    *(_BYTE *)(a1 + 1120) = 0;
    if (*(_BYTE *)(a1 + 1531))
      LOBYTE(v93) = 1;
    else
      v93 = ((unint64_t)objc_msgSend(*(id *)v82, "resourceOptions") >> 8) & 1;
    *(_BYTE *)(a1 + 1531) = v93;
    v88 = *(_DWORD *)(v83 + 144) + 1;
    v94 = *(double *)(v83 + 88);
    if (a3 >= 0xD0000)
    {
      v95 = 0.0;
      v89 = v149;
      if (v94 < 0.0)
        goto LABEL_138;
      v95 = 1.0;
      if (v94 > 1.0)
        goto LABEL_138;
LABEL_137:
      v95 = *(double *)(v83 + 88);
      goto LABEL_138;
    }
    v95 = -3.40282347e38;
    v89 = v149;
    if (v94 >= -3.40282347e38)
    {
      v95 = 3.40282347e38;
      if (v94 <= 3.40282347e38)
        goto LABEL_137;
    }
LABEL_138:
    v96 = v95;
    *(float *)(a1 + 1064) = v96;
    *(_DWORD *)(a1 + 1368) |= 0x100u;
    v97 = *(_QWORD *)(v83 + 112);
    if (v97)
    {
      *(_DWORD *)(a1 + 1376) |= 0x100u;
      v99 = *(_QWORD *)(v83 + 120);
      v98 = *(_QWORD *)(v83 + 128);
      v100 = *(_QWORD *)(v83 + 136);
      v101 = *(_QWORD *)(v97 + 536);
      *(_QWORD *)(a1 + 1144) = v97;
      *(_QWORD *)(a1 + 1152) = v101;
      *(_DWORD *)(a1 + 1160) = v98;
      *(_DWORD *)(a1 + 1164) = v99;
      *(_DWORD *)(a1 + 1168) = v100;
      *(_DWORD *)(a1 + 1172) = v88;
      *(_DWORD *)(a1 + 1176) = 0;
      *(_BYTE *)(a1 + 1184) = 0;
      if ((v93 & 1) != 0)
        LOBYTE(v102) = 1;
      else
        v102 = ((unint64_t)objc_msgSend(*(id *)(v83 + 112), "resourceOptions") >> 8) & 1;
      *(_BYTE *)(a1 + 1531) = v102;
    }
    *(_DWORD *)(a1 + 1380) |= (v86 == 0) << 8;
    *(int8x8_t *)(a1 + 1384) = vorr_s8(*(int8x8_t *)(a1 + 1384), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(vdupq_n_s64(v85), (int64x2_t)xmmword_232D73710)), (int8x8_t)0x10000000100));
    v103.i64[0] = v86 & 0xFFFFFFFFFFFFFFFBLL;
    v103.i64[1] = v86;
    *(int8x8_t *)(a1 + 1392) = vorr_s8(vorr_s8(*(int8x8_t *)(a1 + 1392), (int8x8_t)vdup_n_s32((v86 == 3) << 8)), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(v103, (int64x2_t)xmmword_232D73720)), (int8x8_t)0x10000000100));
    *(_DWORD *)(a1 + 1400) |= (v86 == 4) << 8;
    if (v89)
    {
LABEL_144:
      v104 = objc_msgSend(v89, "_descriptorPrivate");
      v105 = v104;
      v106 = *(_QWORD **)v104;
      if (*(_QWORD *)v104)
      {
        v107 = *(_QWORD *)(v104 + 32);
        if (((*(_QWORD *)(v104 + 40) == 2) & (a4 >> 4)) != 0)
          v108 = 3;
        else
          v108 = *(_QWORD *)(v104 + 40);
        v109 = v106[67];
      }
      else
      {
        v108 = 0;
        v107 = 0;
        v109 = 0;
      }
      v111 = *(_QWORD *)(v104 + 8);
      v110 = *(_QWORD *)(v104 + 16);
      v112 = *(_QWORD *)(v104 + 24);
      *(_QWORD *)(a1 + 1208) = v106;
      *(_QWORD *)(a1 + 1216) = v109;
      *(_DWORD *)(a1 + 1224) = v110;
      *(_DWORD *)(a1 + 1228) = v111;
      *(_DWORD *)(a1 + 1232) = v112;
      *(_QWORD *)(a1 + 1236) = 0;
      *(_BYTE *)(a1 + 1248) = 0;
      if (*(_BYTE *)(a1 + 1531))
        LOBYTE(v113) = 1;
      else
        v113 = ((unint64_t)objc_msgSend(*(id *)v104, "resourceOptions") >> 8) & 1;
      *(_BYTE *)(a1 + 1531) = v113;
      *(_DWORD *)(a1 + 1192) = *(_DWORD *)(v105 + 96);
      *(_DWORD *)(a1 + 1368) |= 0x200u;
      v114 = *(_QWORD *)(v105 + 112);
      if (v114)
      {
        *(_DWORD *)(a1 + 1376) |= 0x200u;
        if (v88)
          v115 = *(_DWORD *)(v105 + 104) + 1;
        else
          v115 = 1;
        v117 = *(_QWORD *)(v105 + 128);
        v116 = *(_QWORD *)(v105 + 136);
        v118 = *(_QWORD *)(v105 + 120);
        v119 = *(_QWORD *)(v114 + 536);
        *(_QWORD *)(a1 + 1272) = v114;
        *(_QWORD *)(a1 + 1280) = v119;
        *(_DWORD *)(a1 + 1288) = v117;
        *(_DWORD *)(a1 + 1292) = v118;
        *(_DWORD *)(a1 + 1296) = v116;
        *(_DWORD *)(a1 + 1300) = v88;
        *(_DWORD *)(a1 + 1304) = v115;
        *(_BYTE *)(a1 + 1312) = 0;
        if ((v113 & 1) != 0)
          LOBYTE(v120) = 1;
        else
          v120 = ((unint64_t)objc_msgSend(*(id *)(v105 + 112), "resourceOptions") >> 8) & 1;
        *(_BYTE *)(a1 + 1531) = v120;
      }
      *(_DWORD *)(a1 + 1380) |= (v108 == 0) << 9;
      *(int8x8_t *)(a1 + 1384) = vorr_s8(*(int8x8_t *)(a1 + 1384), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(vdupq_n_s64(v107), (int64x2_t)xmmword_232D73710)), (int8x8_t)0x20000000200));
      *(int8x8_t *)(a1 + 1392) = vorr_s8(vorr_s8(*(int8x8_t *)(a1 + 1392), (int8x8_t)vdup_n_s32((v108 == 3) << 9)), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(vdupq_n_s64(v108), (int64x2_t)xmmword_232D73720)), (int8x8_t)0x20000000200));
      *(_DWORD *)(a1 + 1400) |= (v108 == 4) << 9;
    }
  }
  else
  {
    v88 = 0;
    v89 = v149;
    if (v149)
      goto LABEL_144;
  }
  v121 = *(_QWORD *)(a1 + 1088);
  if (!v121)
    v121 = *(_QWORD *)(a1 + 1216);
  v122 = *(unsigned __int8 *)(v161 + 72);
  if (v11)
  {
    v123 = *(unsigned __int8 *)(*(_QWORD *)&v11 + 112);
  }
  else
  {
    v123 = *(unsigned __int8 *)(v161 + 32);
    if (!*(_BYTE *)(v161 + 32))
      v123 = *(unsigned __int8 *)(v161 + 72);
  }
  *v152 = v123;
  if (v121)
    v122 = *(unsigned __int8 *)(v121 + 112);
  *v153 = v122;
  if (!v122 || !v123)
  {
    if (v122 >= v123)
      v124 = v153;
    else
      v124 = v152;
    v125 = *v124;
    *v153 = v125;
    *v152 = v125;
  }
  if (*(_QWORD *)(objc_msgSend(v154, "_descriptorPrivate") + 128))
  {
    *(_BYTE *)(a1 + 1540) = 1;
    memcpy((void *)(a1 + 1544), (const void *)(objc_msgSend(v154, "_descriptorPrivate") + 96), 8 * *(unsigned __int8 *)(a1 + 1412));
  }
  v126 = *(_DWORD **)(a1 + 1088);
  if (v126)
  {
    v127 = *(_DWORD *)(a1 + 1100);
    v128 = v126[36];
    v130 = v126[32];
    v129 = v126[33];
    if (v126[59])
      v131 = 0;
    else
      v131 = *(_DWORD *)(a1 + 1100);
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress((uint64_t)v126, *(_DWORD *)(a1 + 1096), v131, 0, 0);
    v132 = *(_QWORD *)(a1 + 1088);
    v133 = *(_QWORD *)(v132 + 32);
    v134 = 3;
    if ((unint64_t)(v133 - 250) <= 0xB && ((1 << (v133 + 6)) & 0xC0D) != 0)
    {
      if (v130 >> (v128 + v127) >= 0x20 && v129 >> (v128 + v127) > 0x1F)
        goto LABEL_186;
      if ((*(_QWORD *)(v132 + 40) & 5) == 4 && *(_DWORD *)(v132 + 64) < 2u)
      {
        v134 = 1;
      }
      else if ((v133 == 252 || v133 == 250) && *(_BYTE *)(a1 + 1412) == 1)
      {
LABEL_186:
        v134 = 0;
      }
      else
      {
        v134 = 2;
      }
    }
    v160[9].i32[2] = v134;
    if (*(_QWORD *)(v132 + 48) == 3)
      *v158 |= 0x100u;
  }
  v135 = *(_QWORD *)(a1 + 1216);
  if (v135)
  {
    v136 = *(_DWORD *)(a1 + 1228);
    v137 = *(_DWORD *)(v135 + 144);
    v139 = *(_DWORD *)(v135 + 128);
    v138 = *(_DWORD *)(v135 + 132);
    if (*(_DWORD *)(v135 + 236))
      v140 = 0;
    else
      v140 = *(_DWORD *)(a1 + 1228);
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v135, *(_DWORD *)(a1 + 1224), v140, *(_DWORD *)(a1 + 1232), *(_DWORD *)(*(_QWORD *)(v135 + 208) + 24) - 1);
    v141 = *(_QWORD *)(a1 + 1216);
    v142 = *(_QWORD *)(v141 + 32);
    v143 = 3;
    if ((unint64_t)(v142 - 250) <= 0xB && ((1 << (v142 + 6)) & 0xC0D) != 0)
    {
      if (v139 >> (v137 + v136) >= 0x20 && v138 >> (v137 + v136) > 0x1F)
        goto LABEL_204;
      if ((*(_QWORD *)(v141 + 40) & 5) == 4 && *(_DWORD *)(v141 + 64) < 2u)
      {
        v143 = 1;
      }
      else if ((v142 == 252 || v142 == 250) && *(_BYTE *)(a1 + 1412) == 1)
      {
LABEL_204:
        v143 = 0;
      }
      else
      {
        v143 = 2;
      }
    }
    *(_DWORD *)(a1 + 1536) = v143;
    if (*(_QWORD *)(v141 + 48) == 3)
      *v158 |= 0x200u;
  }
  if (a4 && !*(_BYTE *)(a1 + 1528))
  {
    v144 = *(_DWORD *)(a1 + 1380);
    v145 = *(_DWORD *)(a1 + 1520);
    *(_DWORD *)(a1 + 1400) |= v144 & ~v145;
    *(_DWORD *)(a1 + 1380) = v145 & v144;
  }
  v146 = v160[9].i32[2];
  if (v146 != 3)
  {
    v147 = *(_DWORD *)(a1 + 1536);
    if (v147)
    {
      if (v147 != 3 && !v146)
        v160[9].i32[2] = 2;
    }
  }
  *(_QWORD *)(a1 + 1320) = *(_QWORD *)(v161 + 8);
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState(v155);
  return a1;
}

uint64_t AGX::FramebufferDriverConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferDriverConfigGen2(uint64_t a1, id *a2, uint64_t a3, id *a4, uint64_t a5, int a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  uint64_t v16;
  char v17;
  __int16 v18;
  unint64_t v19;
  int8x8_t v20;

  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 92) = 3;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0x300000000;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 3;
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 0x300000000;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0x300000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0x300000000;
  *(_BYTE *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 476) = 3;
  *(_BYTE *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 536) = 0x300000000;
  *(_BYTE *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 600) = 0x300000000;
  *(_BYTE *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 664) = 0x300000000;
  *(_BYTE *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 732) = 3;
  *(_BYTE *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 796) = 3;
  *(_BYTE *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 860) = 3;
  *(_BYTE *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 924) = 3;
  *(_BYTE *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 988) = 3;
  *(_BYTE *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1052) = 3;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_DWORD *)(a1 + 1116) = 3;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_DWORD *)(a1 + 1180) = 3;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_DWORD *)(a1 + 1244) = 3;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_DWORD *)(a1 + 1308) = 3;
  *(_BYTE *)(a1 + 1312) = 0;
  v16 = a1 + 1328;
  *(_QWORD *)(a1 + 1399) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1408) = 1;
  *(_DWORD *)(a1 + 1416) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  bzero((void *)(a1 + 1328), 0x28uLL);
  *(_QWORD *)(a1 + 1528) = 0x300000000;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_DWORD *)(a1 + 1536) = 3;
  *(_BYTE *)(a1 + 1540) = 0;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a3 + 208);
  v17 = *(_BYTE *)(a3 + 112);
  *(_BYTE *)(a1 + 1412) = v17;
  *(_BYTE *)(a1 + 1413) = v17;
  *(_QWORD *)(a1 + 56) = *a2;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = a6;
  *(_QWORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  v18 = objc_msgSend(*a2, "resourceOptions");
  *(_BYTE *)(a1 + 1531) = HIBYTE(v18) & 1;
  if (a8)
    *(int32x4_t *)(a1 + 40) = vdupq_n_s32(a7);
  *(_DWORD *)(a1 + 1368) |= 1u;
  if (a5)
  {
    *(_DWORD *)(a1 + 1376) |= 1u;
    *(_DWORD *)(a1 + 1396) |= 1u;
    *(_QWORD *)(a1 + 568) = *a4;
    *(_QWORD *)(a1 + 576) = a5;
    *(_QWORD *)(a1 + 584) = 0;
    *(_DWORD *)(a1 + 592) = a6;
    *(_QWORD *)(a1 + 596) = 0;
    *(_BYTE *)(a1 + 608) = 0;
    if ((v18 & 0x100) != 0)
      LOBYTE(v19) = 1;
    else
      v19 = ((unint64_t)objc_msgSend(*a4, "resourceOptions") >> 8) & 1;
    *(_BYTE *)(a1 + 1531) = v19;
  }
  *(_DWORD *)(a1 + 1384) |= a8;
  v20.i32[1] = 1;
  v20.i32[0] = a9 & ~a8;
  *(int8x8_t *)(a1 + 1388) = vorr_s8(*(int8x8_t *)(a1 + 1388), v20);
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState(v16);
  return a1;
}

uint64_t AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::~Framebuffer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)(a1 + 3456) = off_250401AA0;
  v2 = *(void **)(a1 + 3472);
  if (v2)
  {
    *(_QWORD *)(a1 + 3480) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(a1 + 3328) = off_250401AA0;
  v3 = *(void **)(a1 + 3344);
  if (v3)
  {
    *(_QWORD *)(a1 + 3352) = v3;
    operator delete(v3);
  }
  *(_QWORD *)(a1 + 3240) = off_250401A20;
  v4 = *(void **)(a1 + 3256);
  if (v4)
  {
    *(_QWORD *)(a1 + 3264) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(a1 + 3152) = off_250401A20;
  v5 = *(void **)(a1 + 3168);
  if (v5)
  {
    *(_QWORD *)(a1 + 3176) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_232C982C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1[432] = off_250401AA0;
  v3 = (void *)v1[434];
  if (v3)
  {
    v1[435] = v3;
    operator delete(v3);
  }
  v1[416] = off_250401AA0;
  v4 = (void *)v1[418];
  if (v4)
  {
    v1[419] = v4;
    operator delete(v4);
  }
  v1[405] = off_250401A20;
  v5 = (void *)v1[407];
  if (v5)
  {
    v1[408] = v5;
    operator delete(v5);
  }
  v1[394] = off_250401A20;
  v6 = (void *)v1[396];
  if (v6)
  {
    v1[397] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getBGOProgramVariant(_QWORD *a1, int a2)
{
  uint64_t BackgroundObjectProgramVariant;
  uint64_t v3;
  uint64_t (**v5)();
  int v6;
  void *__p;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  switch(a2)
  {
    case 0:
      goto LABEL_3;
    case 1:
      BackgroundObjectProgramVariant = a1[391];
      if (!BackgroundObjectProgramVariant)
LABEL_3:
        BackgroundObjectProgramVariant = a1[390];
      break;
    case 2:
      v3 = *(_QWORD *)(a1[42] + 808);
      v6 = 13;
      v8 = 0;
      v9 = 0;
      __p = 0;
      v5 = off_2504019E0;
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      BackgroundObjectProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBackgroundObjectProgramVariant(v3, (uint64_t)&v5, 0);
      v5 = off_250401A20;
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      break;
    case 3:
      BackgroundObjectProgramVariant = a1[392];
      break;
    case 4:
      BackgroundObjectProgramVariant = a1[393];
      break;
    default:
      BackgroundObjectProgramVariant = 0;
      break;
  }
  return BackgroundObjectProgramVariant;
}

void sub_232C98408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::getEOTProgramVariant(uint64_t a1, int a2)
{
  uint64_t EndOfTileProgramVariant;
  unsigned int v3;
  unint64_t v4;
  int v5;
  uint64_t (**v7)();
  int v8;
  void *__p;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[22];

  switch(a2)
  {
    case 0:
      EndOfTileProgramVariant = *(_QWORD *)(a1 + 3592);
      break;
    case 1:
      EndOfTileProgramVariant = *(_QWORD *)(a1 + 3584);
      break;
    case 2:
      v8 = 19;
      v10 = 0;
      v11 = 0;
      __p = 0;
      v7 = off_250401A60;
      *(_QWORD *)&v16[14] = 0;
      *(_OWORD *)v16 = 0u;
      v12 = 0u;
      v15 = 0u;
      v14 = 0u;
      v13 = 0u;
      v3 = *(_DWORD *)(a1 + 2188);
      v4 = ((unint64_t)(v3 & 0xF) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 2972) << 36);
      *(_WORD *)&v16[16] = 1;
      *(_QWORD *)&v16[8] = v4 | 1;
      if (v3 >= 2)
        v5 = 0x40000;
      else
        v5 = 0x20000;
      LODWORD(v12) = v5;
      EndOfTileProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateEndOfTileProgramVariant(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 808), (AGX::EndOfTileProgramKey *)&v7, 0);
      v7 = off_250401AA0;
      if (__p)
      {
        v10 = __p;
        operator delete(__p);
      }
      break;
    case 3:
      EndOfTileProgramVariant = *(_QWORD *)(a1 + 3600);
      break;
    case 4:
      EndOfTileProgramVariant = *(_QWORD *)(a1 + 3608);
      break;
    default:
      EndOfTileProgramVariant = 0;
      break;
  }
  return EndOfTileProgramVariant;
}

void sub_232C98550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __IOSurface *v16;
  size_t HeightOfPlane;
  uint64_t HeightInCompressedTilesOfPlane;
  uint64_t v19;
  uint64_t PlaneSize;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(unsigned int *)(a1 + 236);
  if ((_DWORD)v4)
  {
    v5 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, 0);
    v6 = *(_QWORD *)(a1 + 380);
    v7 = (unsigned __int16)v6 & 0xFF00;
    if (v7 == 768)
    {
      v8 = *(_DWORD *)(a1 + 136);
    }
    else if ((v6 & 0x10000) != 0 || v7 == 1024)
    {
      if (v7 == 1024)
        v8 = 6 * *(_DWORD *)(a1 + 376);
      else
        v8 = *(_DWORD *)(a1 + 376);
    }
    else
    {
      v8 = 1;
    }
    v13 = v4 - 1;
    v10 = ((8
          * ((v4 - 1 + ((v5 + ((_DWORD)v4 << 8) - 1) & -(uint64_t)((_DWORD)v4 << 8)))
           / v4)
          + 2047) & 0xFFFFFFFFFFFFF800)
        * v8;
    if (*(_BYTE *)(a1 + 240))
    {
      v25 = 0;
      v26 = 0;
      AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::calcSparseParams(a1, (uint64_t)&v24, &v26, &v25);
      v14 = ((unint64_t)(-(int)v4 & (v13 + v26)) + v13) / v4;
      v10 = ((v10 + v14 + v25 + v13 + ((4 << -(char)__clz(v14)) + 12)) & -(uint64_t)v4) + v26;
    }
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(a1 + 380) & 0xFF00;
  if ((*(_QWORD *)(a1 + 380) & 0x10000) == 0)
  {
    if (v9 == 1024)
    {
      v10 = 6
          * AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a2);
      goto LABEL_18;
    }
    if (*(_QWORD *)(a1 + 380) == 3)
    {
      if (*(_QWORD *)(a1 + 168))
      {
        HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
        v19 = IOSurfaceGetWidthInCompressedTilesOfPlane() * HeightInCompressedTilesOfPlane;
        v10 = v19 * IOSurfaceGetBytesPerTileDataOfPlane();
        goto LABEL_18;
      }
      v21 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, a2);
      PlaneSize = InterchangeTiledMemory::getPlaneSize(v21, *(_DWORD *)(a1 + 132), a2, *(MTLPixelFormat *)(a1 + 32), *(_QWORD *)(a1 + 208));
    }
    else
    {
      if (!*(_QWORD *)(a1 + 380))
      {
        v16 = *(__IOSurface **)(a1 + 168);
        if (v16)
        {
          HeightOfPlane = IOSurfaceGetHeightOfPlane(v16, a2);
        }
        else if (a2 == 1 && *(_DWORD *)(*(_QWORD *)(a1 + 208) + 72) == 3)
        {
          HeightOfPlane = (unint64_t)*(unsigned int *)(a1 + 132) >> 1;
        }
        else
        {
          HeightOfPlane = *(unsigned int *)(a1 + 132);
        }
        v22 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, a2);
        v10 = v22 * HeightOfPlane;
        v23 = *(_QWORD *)(a1 + 208);
        if (*(_DWORD *)(v23 + 24) - 1 == a2)
          v10 = v10 - v22 + *(unsigned __int8 *)(v23 + a2 + 88) * (unint64_t)*(unsigned int *)(a1 + 128);
        goto LABEL_18;
      }
      if ((_DWORD)v9 != 256 && (_DWORD)v9 != 512)
      {
        if ((_DWORD)v9 == 768)
          v10 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a2)* *(unsigned int *)(a1 + 136);
        else
          v10 = 0;
        goto LABEL_18;
      }
      PlaneSize = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a2);
    }
    v10 = PlaneSize;
    goto LABEL_18;
  }
  v11 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, a2);
  v12 = 6 * v11;
  if (v9 != 1024)
    v12 = v11;
  v10 = v12 * *(unsigned int *)(a1 + 376);
LABEL_18:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 208) + 24) - 1 != a2)
    return (v10 + *(_QWORD *)(a1 + 320) - 1) & -*(_QWORD *)(a1 + 320);
  return v10;
}

uint64_t AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::setColorStoreAction(uint64_t result, uint64_t a2, char a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v3 = 1 << a3;
  if ((*(_DWORD *)(result + 3652) & (1 << a3)) != 0)
  {
    switch(a2)
    {
      case 0:
        *(int8x8_t *)(result + 1464) = vand_s8(*(int8x8_t *)(result + 1464), (int8x8_t)vdup_n_s32(~(257 << a3)));
        *(_DWORD *)(result + 3640) &= ~v3;
        *(_DWORD *)(result + 3648) &= ~v3;
        v4 = *(_DWORD *)(result + 3644) | v3;
        goto LABEL_16;
      case 1:
        *(int8x8_t *)(result + 1464) = vand_s8(vorr_s8(*(int8x8_t *)(result + 1464), (int8x8_t)vdup_n_s32(v3)), (int8x8_t)vdup_n_s32(~(1 << (a3 + 8))));
        *(_DWORD *)(result + 3640) |= v3;
        *(int8x8_t *)(result + 3644) = vand_s8(*(int8x8_t *)(result + 3644), (int8x8_t)vdup_n_s32(~v3));
        break;
      case 2:
        v5 = *(_DWORD *)(result + 1464) & ~v3;
        v6 = *(_DWORD *)(result + 1468) & ~v3;
        v7 = 1 << (a3 + 8);
        v8 = v5 | v7;
        v9 = v6 & ~v7;
        v10 = v5 & ~v7;
        v11 = v6 | v7;
        if (((unsigned __int16)v3 & *(_WORD *)(result + 1880)) != 0)
          v12 = v10;
        else
          v12 = v8;
        if (((unsigned __int16)v3 & *(_WORD *)(result + 1880)) != 0)
          v13 = v11;
        else
          v13 = v9;
        *(_DWORD *)(result + 1464) = v12;
        *(_DWORD *)(result + 1468) = v13;
        *(_DWORD *)(result + 3648) |= v3;
        *(int8x8_t *)(result + 3640) = vand_s8(*(int8x8_t *)(result + 3640), (int8x8_t)vdup_n_s32(~v3));
        break;
      case 3:
        v14 = *(_DWORD *)(result + 1464);
        v15 = 257 << a3;
        if (((unsigned __int16)v3 & *(_WORD *)(result + 1880)) != 0)
        {
          *(_DWORD *)(result + 1464) = v14 & ~v15;
          v16 = v15 | *(_DWORD *)(result + 1468);
        }
        else
        {
          *(_DWORD *)(result + 1464) = v15 | v14;
          v16 = *(_DWORD *)(result + 1468) & ~v15;
        }
        *(_DWORD *)(result + 1468) = v16;
        *(_DWORD *)(result + 3640) |= v3;
        *(_DWORD *)(result + 3648) |= v3;
        v4 = *(_DWORD *)(result + 3644) & ~v3;
LABEL_16:
        *(_DWORD *)(result + 3644) = v4;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferGen2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t *a4, int a5, int a6, int a7)
{
  uint64_t *v9;
  int8x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  _UNKNOWN **v23;
  uint64_t v24;
  float *v25;
  const float *v26;
  uint64_t v30;
  const float *v31;
  float32x4_t v32;
  float32x4_t v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint32x2_t *v38;
  float32x2_t *v39;
  float32x2_t v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _BOOL4 v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  int v72;
  uint64_t v73;
  __int32 v74;
  int8x8_t *v75;
  int v76;
  uint64_t *v77;
  uint64_t *v78;
  unsigned int v79;
  _WORD *v80;
  uint64_t *v81;
  char v82;
  _WORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  unint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  unint64_t v93;
  BOOL v95;
  unsigned int v96;
  BOOL v97;
  unsigned int v98;
  __int128 v99;
  unint64_t GPUVirtualAddress;
  int8x16_t v101;
  unint64_t v102;
  uint64_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t *v106;
  uint64_t v107;
  float *v108;
  float v109;
  float v110;
  float v111;
  float v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int *v115;
  float v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  _BOOL4 v123;
  unsigned int v124;
  uint32x2_t *v125;
  uint64_t v126;
  uint32x2_t v127;
  int64_t v128;
  __int16 v129;
  _BOOL4 v130;
  unsigned int v131;
  int32x2_t v132;
  int8x8_t v133;
  uint32x2_t v134;
  int8x8_t v135;
  int v136;
  AGXA10FamilyBuffer *v137;
  char v138;
  uint64_t v139;
  int v140;
  __int16 v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  int64_t v150;
  int64_t v151;
  int32x2_t v152;
  int v153;
  int8x8_t *v154;
  int v155;
  AGXA10FamilyBuffer *v156;
  char v157;
  int v158;
  char v159;
  uint64_t v160;
  int v161;
  __int16 v162;
  uint64_t v163;
  BOOL v164;
  char v165;
  int8x8_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  _BOOL4 v170;
  uint64_t v171;
  BOOL v172;
  int v173;
  BOOL v174;
  unsigned int v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t v178;
  _BOOL4 v179;
  int32x4_t *v180;
  BOOL v182;
  unsigned __int32 v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  BOOL v187;
  unint64_t v189;
  uint64_t v190;
  int32x4_t v191;
  unint64_t v192;
  unint64_t v193;
  __int32 v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  os_unfair_lock_s *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int32x4_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  __int32 v210;
  void *v211;
  int32x4_t v212;
  _DWORD *v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint8x8_t v220;
  int v221;
  int v222;
  BOOL v223;
  int32x4_t *v224;
  int32x4_t v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  int v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  char v258;
  int v259;
  int v260;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int *v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  int v269;
  int v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  void *v279;
  size_t v280;
  size_t v281;
  BOOL *v282;
  __int128 v283;
  int32x4_t v284;
  char *v285;
  char *v286;
  unsigned int v287;
  unsigned int v288;
  int v289;
  int *v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  int32x4_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  int32x4_t v298;
  int32x4_t v299;
  void *v300;
  __int16 v301;
  __int16 v302;
  int8x16_t *v303;
  __int128 v304;
  __int128 v305;
  void *v306;
  __int128 v307;
  __int128 v308;
  int8x16_t v309;
  int v310;
  int8x16_t *v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  _DWORD *v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t *v321;
  int8x8_t *v322;
  uint64_t v323;
  char v324;
  char v325;
  __int16 v326;
  _BOOL4 v327;
  _BOOL4 v328;
  unsigned int *v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  int v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  int32x4_t v338;
  uint64_t BackgroundObjectProgramVariant;
  unsigned int v340;
  unsigned int v341;
  unint64_t v342;
  unsigned int v343;
  int v344;
  int v345;
  unsigned int v346;
  __int16 v347;
  int v348;
  int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  __int16 v353;
  int v354;
  int v355;
  uint64_t EndOfTileProgramVariant;
  unsigned int v357;
  BOOL v358;
  int v359;
  uint64_t v360;
  unsigned int v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  __int16 v371;
  __int16 v372;
  uint64_t v373;
  unsigned int v374;
  unint64_t v375;
  unsigned int v376;
  char v377;
  int v378;
  int v379;
  unsigned int v380;
  uint64_t v381;
  int v382;
  _QWORD *v384;
  uint64_t v386;
  _QWORD *v387;
  _QWORD *v388;
  int32x4_t *v389;
  _QWORD *v390;
  int32x4_t *v391;
  uint64_t v392;
  int32x4_t *v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int *v401;
  int8x8_t *v402;
  uint64_t v403;
  __int128 v404;
  int v405;
  int v406;
  unsigned int v407;
  uint32x2_t v408;
  uint64_t v409;
  unint64_t v410;
  char v411;
  int v412;
  __int32 v413;
  uint32x2_t v414;
  __int32 v415;
  __int32 v416;
  uint64_t v417;
  int8x8_t v418;
  int8x8_t *v419;
  __int8 v420;
  uint64_t *v421;
  unsigned int v422[4];
  void *__p[2];
  _BYTE v424[40];
  __int32 v425;
  __int32 v426;
  int v427;
  __int16 v428;
  __int16 v429;
  int32x4_t v430;
  void *v431[2];
  uint64_t v432;
  int32x4_t v433;
  int32x4_t v434;
  __int128 v435;
  __int128 v436;
  _BYTE v437[22];
  uint64_t v438;
  int32x4_t v439;
  int32x4_t v440;
  uint64_t v441;
  float32x4x2_t v442;
  float32x4x2_t v443;
  float32x4x2_t v444;

  v9 = a4;
  v11 = (int8x8_t *)a1;
  v441 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  v12 = a1 + 344;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  v13 = (uint64_t)a4 + 1380;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v14 = a1 + 3496;
  v15 = a1 + 3232;
  *(_QWORD *)(a1 + 336) = a2;
  v16 = a1 + 2964;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = xmmword_232D73730;
  *(_QWORD *)(a1 + 400) = 0xDEADBEEFBAADC0DELL;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  bzero((void *)(a1 + 840), 0x412uLL);
  *(_BYTE *)(v12 + 1538) = (v9[172] & 0x3FF) != 0;
  v400 = v12 + 1544;
  *(_OWORD *)(v12 + 1544) = 0u;
  *(_OWORD *)(v12 + 1560) = 0u;
  *(_OWORD *)(v12 + 1576) = 0u;
  *(_OWORD *)(v12 + 1592) = 0u;
  *(_OWORD *)(v12 + 1608) = 0u;
  v395 = v12 + 1624;
  *(_OWORD *)(v12 + 1624) = 0u;
  *(_OWORD *)(v12 + 1640) = 0u;
  *(_OWORD *)(v12 + 1656) = 0u;
  *(_OWORD *)(v12 + 1672) = 0u;
  *(_OWORD *)(v12 + 1688) = 0u;
  *(_OWORD *)(v12 + 1704) = 0u;
  *(_OWORD *)(v12 + 1720) = 0u;
  *(_OWORD *)(v12 + 1736) = 0u;
  *(_OWORD *)(v12 + 1752) = 0u;
  *(_OWORD *)(v12 + 1768) = 0u;
  *(_OWORD *)(v12 + 1784) = 0u;
  *(_OWORD *)(v12 + 1800) = 0u;
  *(_OWORD *)(v12 + 1816) = 0u;
  *(_DWORD *)(v12 + 1832) = a5;
  *(_DWORD *)(v12 + 1836) = a6;
  v17 = *((unsigned __int8 *)v9 + 1412);
  *(_DWORD *)(v12 + 1840) = v17;
  v396 = *((unsigned __int8 *)v9 + 1413);
  *(_DWORD *)(v12 + 1844) = v396;
  *(_QWORD *)(v12 + 2136) = 0;
  *(_OWORD *)(v12 + 2120) = 0u;
  *(_OWORD *)(v12 + 2104) = 0u;
  *(_OWORD *)(v12 + 2088) = 0u;
  *(_OWORD *)(v12 + 2072) = 0u;
  *(_OWORD *)(v12 + 2056) = 0u;
  *(_OWORD *)(v12 + 2040) = 0u;
  *(_OWORD *)(v12 + 2024) = 0u;
  *(_OWORD *)(v12 + 2008) = 0u;
  *(_OWORD *)(v12 + 1992) = 0u;
  *(_OWORD *)(v12 + 1976) = 0u;
  *(_OWORD *)(v12 + 1960) = 0u;
  *(_OWORD *)(v12 + 1944) = 0u;
  *(_OWORD *)(v12 + 1928) = 0u;
  v399 = v12 + 1912;
  *(_OWORD *)(v12 + 1912) = 0u;
  *(_QWORD *)(v12 + 2144) = -1;
  *(_QWORD *)(v12 + 2568) = 0;
  *(_OWORD *)(v12 + 2552) = 0u;
  *(_OWORD *)(v12 + 2536) = 0u;
  *(_OWORD *)(v12 + 2520) = 0u;
  *(_OWORD *)(v12 + 2504) = 0u;
  *(_OWORD *)(v12 + 2488) = 0u;
  *(_OWORD *)(v12 + 2472) = 0u;
  *(_OWORD *)(v12 + 2456) = 0u;
  *(_OWORD *)(v12 + 2440) = 0u;
  *(_OWORD *)(v12 + 2424) = 0u;
  *(_OWORD *)(v12 + 2408) = 0u;
  *(_OWORD *)(v12 + 2392) = 0u;
  *(_OWORD *)(v12 + 2376) = 0u;
  *(_OWORD *)(v12 + 2360) = 0u;
  *(_OWORD *)(v12 + 2344) = 0u;
  *(_OWORD *)(v12 + 2328) = 0u;
  *(_OWORD *)(v12 + 2312) = 0u;
  *(_OWORD *)(v12 + 2296) = 0u;
  *(_OWORD *)(v12 + 2280) = 0u;
  *(_OWORD *)(v12 + 2264) = 0u;
  *(_OWORD *)(v12 + 2248) = 0u;
  *(_OWORD *)(v12 + 2232) = 0u;
  *(_OWORD *)(v12 + 2216) = 0u;
  *(_OWORD *)(v12 + 2200) = 0u;
  *(_OWORD *)(v12 + 2184) = 0u;
  *(_OWORD *)(v12 + 2168) = 0u;
  *(_OWORD *)(v12 + 2152) = 0u;
  *(_BYTE *)(v12 + 2584) = 0;
  *(_BYTE *)(v12 + 2586) = *((_BYTE *)v9 + 1530);
  *(_DWORD *)(v12 + 2592) = *((_DWORD *)v9 + 352);
  *(_QWORD *)(v12 + 2600) = v9[165];
  *(_QWORD *)(v12 + 2608) = 1065353216;
  *(_BYTE *)(v12 + 2616) = 0;
  *(_QWORD *)v16 = 0;
  *(_DWORD *)(v12 + 2636) = *((unsigned __int8 *)v9 + 1368);
  *(_DWORD *)(v12 + 2640) = *((unsigned __int8 *)v9 + 1376);
  *(_BYTE *)(v12 + 2644) = 0;
  *(_BYTE *)(v12 + 2646) = *((_BYTE *)v9 + 1531);
  *(_BYTE *)(v12 + 2648) = 0;
  *(_DWORD *)(v12 + 2656) = 0;
  *(_DWORD *)(v12 + 2760) = 0;
  *(_WORD *)(v12 + 2764) = 0;
  *(_DWORD *)(v12 + 2768) = 0;
  *(_WORD *)(v12 + 2772) = 0;
  *(_DWORD *)(v12 + 2816) = 13;
  *(_QWORD *)(v12 + 2824) = 0;
  *(_OWORD *)(v12 + 2832) = 0u;
  *(_QWORD *)(v12 + 2808) = off_2504019E0;
  *(_OWORD *)(v16 + 228) = 0u;
  v16 += 228;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  v394 = (int32x4_t *)v16;
  *(_DWORD *)(v12 + 2904) = 13;
  *(_OWORD *)(v12 + 2912) = 0u;
  *(_QWORD *)(v12 + 2928) = 0;
  *(_QWORD *)(v12 + 2896) = off_2504019E0;
  *(_OWORD *)(v12 + 2968) = 0u;
  *(_OWORD *)(v12 + 2952) = 0u;
  v388 = (_QWORD *)(v12 + 2912);
  v389 = (int32x4_t *)(v12 + 2936);
  *(_OWORD *)(v12 + 2936) = 0u;
  *(_DWORD *)(v12 + 2992) = 19;
  *(_QWORD *)(v12 + 3016) = 0;
  v384 = (_QWORD *)(v12 + 3000);
  *(_OWORD *)(v12 + 3000) = 0u;
  *(_QWORD *)(v12 + 2984) = off_250401A60;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  v391 = (int32x4_t *)v15;
  v392 = v14;
  *(_QWORD *)(v15 + 214) = 0;
  *(_DWORD *)(v12 + 3120) = 19;
  *(_QWORD *)(v12 + 3144) = 0;
  v386 = v15 + 136;
  v387 = (_QWORD *)(v12 + 3128);
  *(_OWORD *)(v12 + 3128) = 0u;
  *(_QWORD *)(v12 + 3112) = off_250401A60;
  *(_QWORD *)(v14 + 78) = 0;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v12 + 3152) = 0u;
  *(_QWORD *)(v12 + 3272) = 0;
  v18.i64[0] = 0x300000003;
  v18.i64[1] = 0x300000003;
  v19 = vandq_s8(*(int8x16_t *)v13, v18);
  *(int8x16_t *)(v12 + 3288) = vextq_s8(v19, v19, 4uLL);
  *(int8x8_t *)(v12 + 3304) = vand_s8(*(int8x8_t *)(v13 + 16), (int8x8_t)0x300000003);
  *(_DWORD *)(v12 + 3312) = *((unsigned __int8 *)v9 + 1372);
  v20 = v9[190] & 0x3FF;
  *(_DWORD *)(v12 + 3316) = v20;
  *(_OWORD *)(v12 + 3448) = 0u;
  *(_OWORD *)(v12 + 3320) = 0u;
  *(_OWORD *)(v12 + 3336) = 0u;
  *(_OWORD *)(v12 + 3352) = 0u;
  *(_OWORD *)(v12 + 3368) = 0u;
  *(_OWORD *)(v12 + 3384) = 0u;
  *(_OWORD *)(v12 + 3400) = 0u;
  v398 = v12;
  *(_OWORD *)(v12 + 3416) = 0u;
  *(_OWORD *)(v12 + 3428) = 0u;
  if (*((_BYTE *)v9 + 1540))
  {
    v21 = v9 + 193;
    if (!(_DWORD)v17)
      goto LABEL_21;
    goto LABEL_14;
  }
  if (*((_BYTE *)v9 + 1528))
  {
    if ((*((_BYTE *)v9 + 1412) - 2) >= 7u)
    {
      v21 = &msaa_agx_offsets_1;
      if (!(_DWORD)v17)
        goto LABEL_21;
      goto LABEL_14;
    }
    v22 = (*((_BYTE *)v9 + 1412) - 2);
    v23 = &off_2504017F8;
    goto LABEL_9;
  }
  if ((*((_BYTE *)v9 + 1412) - 2) < 7u)
  {
    v22 = (*((_BYTE *)v9 + 1412) - 2);
    v23 = &off_2504017C0;
LABEL_9:
    v21 = (uint64_t *)v23[v22];
    if (!(_DWORD)v17)
      goto LABEL_21;
    goto LABEL_14;
  }
  v21 = &msaa_metal_offsets_1;
  if (!(_DWORD)v17)
    goto LABEL_21;
LABEL_14:
  if (v17 > 7)
  {
    v24 = v17 & 0xF8;
    v25 = (float *)&v11[274];
    v26 = (const float *)(v21 + 4);
    __asm { FMOV            V0.4S, #16.0 }
    v30 = v24;
    do
    {
      v31 = v26 - 8;
      v442 = vld2q_f32(v31);
      v443 = vld2q_f32(v26);
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0x3F0000003F000000;
      v33.i64[1] = 0x3F0000003F000000;
      v444.val[0] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v32, _Q0, v442.val[0]));
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v444.val[1] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v32, _Q0, v442.val[1]));
      v442.val[0] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v33, _Q0, v443.val[0]));
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v34 = v25 + 16;
      vst2q_f32(v25, v444);
      v35 = v25 + 8;
      v442.val[1] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v32, _Q0, v443.val[1]));
      vst2q_f32(v35, v442);
      v26 += 16;
      v25 = v34;
      v30 -= 8;
    }
    while (v30);
    if (v24 == v17)
      goto LABEL_21;
  }
  else
  {
    v24 = 0;
  }
  v36 = v17 - v24;
  v37 = v24;
  v38 = (uint32x2_t *)&v11[v24 + 274];
  v39 = (float32x2_t *)&v21[v37];
  __asm { FMOV            V0.2S, #16.0 }
  do
  {
    v41 = *v39++;
    *v38++ = vcvt_u32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, _D0, v41));
    --v36;
  }
  while (v36);
LABEL_21:
  v11[365].i8[0] = *((_BYTE *)v9 + 1384) != 0;
  v42 = *((_OWORD *)v9 + 83);
  v43 = *((_OWORD *)v9 + 84);
  *(_QWORD *)(v12 + 32) = v9[170];
  *(_OWORD *)v12 = v42;
  *(_OWORD *)(v12 + 16) = v43;
  v11[373].i8[5] = v20 != 0;
  v11[374].i32[1] = *((_DWORD *)v9 + 381) & 0x3FF;
  v44 = *((unsigned __int8 *)v9 + 1528);
  v11[366].i8[3] = v44;
  if (v44)
  {
    LOBYTE(v45) = 0;
  }
  else
  {
    v45 = *(_DWORD *)(a2[101] + 6684) >> 18 > 2u;
    v20 = v11[457].i32[1];
  }
  v401 = (unsigned int *)(v12 + 1836);
  v390 = (_QWORD *)(v12 + 2824);
  v403 = (uint64_t)(v9 + 166);
  v11[366].i8[4] = v45;
  v46 = 74;
  if (!*((_BYTE *)v9 + 1540))
    v46 = 0;
  *(_QWORD *)(v12 + 3448 + ((v46 >> 3) & 8)) |= 1 << (v46 & 0x3E);
  v47 = 0x80000000000000;
  if ((v20 & 0x300) == 0)
    v47 = 1;
  _ZF = v20 == 0;
  v48 = 0x40000000000000;
  if (_ZF)
    v48 = 1;
  *(_QWORD *)&v11[474] |= v47 | v48;
  if ((v49 & 1) == 0
  {
    AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::Framebuffer(AGXA10FamilyDevice *,AGX::G9::CommandBuffer *,AGX::G9::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::isSuballocDisabled = *(_BYTE *)(a2[101] + 6725);
  }
  v11[306] = *(int8x8_t *)(*(_QWORD *)(*(_QWORD *)&v11[42] + 808) + 6216);
  v50 = a2 + 118;
  v51 = *v9;
  do
    v52 = __ldaxr(v50);
  while (__stlxr(v52 + v51, v50));
  v53 = v9[1];
  v54 = a2 + 119;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 + v53, v54));
  v56 = v9[2];
  v57 = a2 + 120;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 + v56, v57));
  v59 = v9[3];
  v60 = a2 + 121;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 + v59, v60));
  v62 = v9[4];
  v63 = a2 + 122;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 + v62, v63));
  v65 = v11[372].u32[1];
  v402 = v11;
  v421 = v9;
  if (v65)
  {
    v66 = 0;
    v397 = 0;
    v67 = 0;
    while (1)
    {
      v407 = v65;
      v69 = __clz(__rbit32(v65));
      v70 = &v9[8 * v69];
      *(_QWORD *)(v400 + 8 * v69) = v70[7];
      v71 = *((unsigned __int8 *)v70 + 96);
      v72 = 1 << v69;
      if (*((_BYTE *)v70 + 96))
        v11[375].i32[0] |= v72;
      v405 = v67;
      v412 = v66;
      v73 = v70[8];
      v74 = v11[374].i32[1];
      v11[v69 + 254] = (int8x8_t)v73;
      v417 = v73;
      switch(*(_QWORD *)(v73 + 32))
      {
        case 0xF0:
        case 0xF1:
        case 0x1F4:
        case 0x1F5:
        case 0x1F6:
        case 0x1F9:
        case 0x1FALL:
        case 0x1FCLL:
        case 0x1FDLL:
        case 0x208:
        case 0x209:
        case 0x20ALL:
        case 0x20DLL:
        case 0x20ELL:
        case 0x210:
        case 0x211:
        case 0x21CLL:
        case 0x21DLL:
        case 0x21FLL:
        case 0x220:
        case 0x222:
        case 0x223:
        case 0x232:
        case 0x234:
        case 0x235:
        case 0x23ALL:
        case 0x23BLL:
        case 0x23DLL:
        case 0x23ELL:
        case 0x24CLL:
        case 0x24DLL:
        case 0x24FLL:
        case 0x250:
        case 0x252:
        case 0x253:
        case 0x255:
        case 0x256:
        case 0x258:
        case 0x259:
        case 0x283:
        case 0x285:
          v11[373].i8[5] = 1;
          break;
        default:
          break;
      }
      v75 = v11;
      v76 = v74 & v72;
      v77 = &v421[8 * v69];
      v79 = *((_DWORD *)v77 + 18);
      v78 = v77 + 9;
      v68 = (unsigned int *)(v78 + 1);
      AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::configurePBE((uint64_t)v75, v70[8], *((_DWORD *)v78 + 2), *((_DWORD *)v78 + 1), v79, v403, v403 + 4 * v69, v69, 0, v71 != 0, (v74 & v72) != 0, (v75[457].i32[0] & v72) != 0);
      v80 = (_WORD *)v75 + 3 * v69;
      v80[1841] = *(_DWORD *)v78;
      v80[1840] = *((_DWORD *)v78 + 1);
      v80[1842] = *((_DWORD *)v78 + 2);
      if ((v75[373].i32[0] & v72) != 0)
      {
        _ZF = v76 == 0;
        v81 = &v421[8 * v69];
        *(_QWORD *)(v395 + 8 * v69) = v81[71];
        v82 = !_ZF;
        v75[v69 + 264] = (int8x8_t)v81[72];
        AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::configurePBE((uint64_t)v75, v81[72], *((_DWORD *)v81 + 148), *((_DWORD *)v81 + 147), *((_DWORD *)v81 + 146), v403, v403 + 4 * v69, v69, 1, *((_BYTE *)v81 + 608), v82, (v75[457].i32[0] & v72) != 0);
        v83 = (_WORD *)v75 + 3 * v69;
        v83[1865] = *((_DWORD *)v81 + 146);
        v83[1864] = *((_DWORD *)v81 + 147);
        v83[1866] = *((_DWORD *)v81 + 148);
      }
      *(_OWORD *)v75[2 * v69 + 312].i8 = *(_OWORD *)(v70 + 5);
      v84 = *((_DWORD *)v78 + 1);
      v85 = v417;
      v86 = *(_QWORD *)(v417 + 380);
      v87 = *(_OWORD *)(v417 + 400);
      v88 = *(_QWORD *)(v417 + 416);
      v89 = *(_DWORD *)(v417 + 128);
      v11 = v75;
      if (*(_QWORD *)(v417 + 24) == 9)
      {
        if (v89 >= 0x4000)
          v90 = 0x4000;
        else
          v90 = *(_DWORD *)(v417 + 128);
        v91 = (v89 + 0x3FFF) >> 14;
        v92 = 1;
      }
      else
      {
        v91 = *(_DWORD *)(v417 + 132);
        v92 = *(_DWORD *)(v417 + 136);
        v90 = *(_DWORD *)(v417 + 128);
      }
      if ((*(_QWORD *)(v417 + 380) & 0xFF00) == 0x400)
        LODWORD(v86) = v86 & 0xFF0000FF | 0x200;
      if ((_BYTE)v86)
      {
        switch(BYTE1(v86))
        {
          case 1:
            if (BYTE2(v86))
            {
              if ((v86 & 0x10000) == 0)
                goto LABEL_79;
              v93 = 1;
            }
            else
            {
              v93 = 0;
            }
            break;
          case 2:
            if (BYTE2(v86))
              v95 = (v86 & 0x40000) == 0;
            else
              v95 = 0;
            if (!v95)
              goto LABEL_84;
            if ((v86 & 0x10000) != 0)
            {
              v93 = 3;
            }
            else
            {
              if ((v86 & 0x20000) == 0)
                goto LABEL_79;
              v93 = 4;
            }
            break;
          case 3:
            v93 = 5;
            if (BYTE2(v86))
              v93 = 0xFF80000007FFFFFFLL;
            break;
          case 4:
            if (BYTE2(v86))
              goto LABEL_79;
            v93 = 6;
            break;
          default:
            goto LABEL_79;
        }
      }
      else if (BYTE1(v86) != 2 || (BYTE2(v86) ? (_ZF = (v86 & 0x40000) == 0) : (_ZF = 0), _ZF))
      {
LABEL_79:
        v93 = 0xFF80000007FFFFFFLL;
      }
      else
      {
LABEL_84:
        v93 = 2;
      }
      v96 = *(_DWORD *)(v417 + 192) & 0xFFFFFFFD;
      v97 = v96 == 1;
      if (v96 == 1)
        v98 = v91;
      else
        v98 = v90;
      if (v97)
        v91 = v90;
      *((_QWORD *)&v99 + 1) = *(_QWORD *)(v417 + 408);
      if ((_BYTE)v86)
        *((_QWORD *)&v99 + 1) = *((_QWORD *)&v87 + 1) & 0xE0007FFFFFFFFFE0 | ((unint64_t)(v92 - 1) << 47);
      *(_QWORD *)&v99 = ((unint64_t)(v98 - 1) << 27) & 0x78001FFF8000000 | ((unint64_t)(v91 - 1) << 41) | v93 | v87 & 0xFF80000007FFFFF8;
      v404 = v99;
      GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v417, *(_DWORD *)v78, 0, 0, 0);
      v101.i64[0] = v404;
      if (v404 >= 0)
        v102 = v88;
      else
        v102 = v88 & 0xF3FFFFFFFFFFFFFFLL | (((GPUVirtualAddress >> 4) & 3) << 58);
      v103 = (*(_DWORD *)(v417 + 144) + v84);
      v101.i64[1] = *((_QWORD *)&v404 + 1) & 0xFFFFFF800000001FLL | (32 * (GPUVirtualAddress >> 6));
      v104 = vandq_s8(v101, (int8x16_t)xmmword_232D73430);
      v105.i64[0] = v103 << 57;
      v105.i64[1] = v103 & 0xFFFFFFFFFFFFFFEFLL | (16 * (*(_DWORD *)(v417 + 64) > 1u));
      v106 = (int8x16_t *)(v399 + 24 * v69);
      *v106 = vorrq_s8(v104, v105);
      v106[1].i64[0] = v102;
      v107 = *(unsigned int *)(v417 + 192);
      v108 = (float *)&v75[3 * v69 + 328];
      if ((_DWORD)v107 == 4)
      {
        *(_OWORD *)v108 = xmmword_232D73740;
        v75[3 * v69 + 330].i32[0] = 0;
        v109 = 1.0;
        v110 = 0.0;
        v111 = 0.0;
        v112 = 0.0;
        v9 = v421;
        v67 = v405;
        v113 = v407;
      }
      else
      {
        v111 = AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::Framebuffer(AGXA10FamilyDevice *,AGX::G9::CommandBuffer *,AGX::G9::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::rotation_elements[v107];
        *v108 = v111;
        *(float *)&v75[3 * v69 + 328].i32[1] = AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::Framebuffer(AGXA10FamilyDevice *,AGX::G9::CommandBuffer *,AGX::G9::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::rotation_elements[((_DWORD)v107 - 1) & 3];
        v109 = AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::Framebuffer(AGXA10FamilyDevice *,AGX::G9::CommandBuffer *,AGX::G9::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::rotation_elements[((_BYTE)v107 + 1) & 3];
        *(float *)v75[3 * v69 + 329].i32 = v109;
        *(float *)&v75[3 * v69 + 329].i32[1] = v111;
        v110 = 0.0;
        v112 = 0.0;
        v9 = v421;
        v67 = v405;
        if ((v107 - 1) <= 1)
        {
          v114 = v401;
          if ((_DWORD)v107 != 1)
            v114 = (unsigned int *)(v398 + 1832);
          v112 = (float)*v114;
        }
        *(float *)v75[3 * v69 + 330].i32 = v112;
        v113 = v407;
        if ((v107 & 0xFFFFFFFE) == 2)
        {
          _ZF = (_DWORD)v107 == 3;
          v115 = v401;
          if (_ZF)
            v115 = (unsigned int *)(v398 + 1832);
          v110 = (float)*v115;
        }
      }
      *(float *)&v75[3 * v69 + 330].i32[1] = v110;
      if ((v75[374].i32[1] & v72) != 0)
      {
        v116 = (float)*v401;
        *(float *)v75[3 * v69 + 330].i32 = v112 + (float)(v109 * v116);
        *(float *)&v75[3 * v69 + 330].i32[1] = v110 + (float)(v111 * v116);
        *(float *)v75[3 * v69 + 329].i32 = -v109;
        *(float *)&v75[3 * v69 + 329].i32[1] = -v111;
      }
      v117 = *(_QWORD *)(v417 + 24);
      switch(v117)
      {
        case 0uLL:
          goto LABEL_115;
        case 1uLL:
          v397 = v397 | (1 << v69);
          v67 |= (1 << v69);
LABEL_115:
          v118 = 1 << (2 * v69);
          if ((v72 & v67) == 0)
            goto LABEL_46;
          goto LABEL_121;
        case 3uLL:
          v397 = v397 | (1 << v69);
          v67 |= (1 << v69);
          goto LABEL_118;
        case 7uLL:
          v118 = 3 << (2 * v69);
          v67 |= (1 << v69);
          if ((v72 & v67) != 0)
            goto LABEL_121;
          goto LABEL_46;
        default:
LABEL_118:
          v118 = 2 << (2 * v69);
          if ((v72 & v67) == 0)
            goto LABEL_46;
LABEL_121:
          if (v117 > 8)
            goto LABEL_46;
          if (((1 << v117) & 0x16A) != 0)
          {
            v68 = (unsigned int *)v78;
LABEL_45:
            *(float *)&v75[361].i32[v69] = (float)*v68;
            goto LABEL_46;
          }
          if (v117 == 7)
            goto LABEL_45;
LABEL_46:
          v66 = v412 | v118;
          v65 = v72 ^ v113;
          if (!v65)
            goto LABEL_126;
          break;
      }
    }
  }
  v397 = 0;
  LOWORD(v66) = 0;
  v85 = 0;
LABEL_126:
  v11[244] = (int8x8_t)v9[135];
  v11[262] = (int8x8_t)v9[136];
  v11[245] = (int8x8_t)v9[151];
  v11[263] = (int8x8_t)v9[152];
  bzero(v11, 0x150uLL);
  v119 = (uint64_t)v11[262];
  if (v119)
  {
    v120 = *((_DWORD *)v9 + 274);
    v11[472].i16[1] = v120;
    v121 = *((_DWORD *)v9 + 275);
    v11[472].i16[0] = v121;
    v11[472].i16[2] = *((_DWORD *)v9 + 276);
    v122 = *(_QWORD *)(v119 + 32);
    v123 = v122 == 250;
    if (*(_DWORD *)(v119 + 236))
      v124 = 0;
    else
      v124 = *(_DWORD *)(v119 + 144) + v121;
    v128 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v119, v120, v124, 0, 0);
    v126 = v128;
    v129 = (*((_DWORD *)v9 + 347) & 0x100) == 0;
    _ZF = v122 == 250;
    v130 = v122 == 250;
    v11 = v402;
    v125 = (uint32x2_t *)v402[262];
    v402[388].i16[0] |= 3u;
    v402[389].i16[0] |= (*((_WORD *)v9 + 692) >> 7) & 2;
    v402[389].i16[1] |= v129;
    v402[389].i16[2] |= (*((_WORD *)v9 + 690) >> 7) & 2;
    v131 = (*((float *)v9 + 266) * 65535.0);
    if (!_ZF)
      v131 = *((_DWORD *)v9 + 266);
    v402[369].i32[0] = v131;
    v402[369].i32[1] = v130;
    if (*((_DWORD *)v9 + 383) == 2)
    {
      if (v128 == 4008574976)
      {
        v126 = 4008574976;
      }
      else
      {
        v132 = (int32x2_t)v402[272];
        v133 = (int8x8_t)vcgt_u32((uint32x2_t)0x1100000011, (uint32x2_t)v132);
        v134 = (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32(v132, (int32x2_t)-1)));
        v420 = v133.i8[4];
        v135 = vbsl_s8(v133, (int8x8_t)0x2000000020, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, v134));
        v411 = v134.i8[4];
        v413 = v135.i32[0];
        *v402 = v135;
        v136 = v402[273].i32[0] * *(unsigned __int8 *)(*(_QWORD *)&v125[26] + 88);
        v402[3].i32[0] = v136;
        v137 = [AGXA10FamilyBuffer alloc];
        if ((v420 & 1) != 0)
          v138 = 5;
        else
          v138 = v411;
        v139 = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v137, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", *(_QWORD *)&v402[42], ((v413 << v138) * v136), 0, AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::Framebuffer(AGXA10FamilyDevice *,AGX::G9::CommandBuffer *,AGX::G9::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::isSuballocDisabled, 0);
        v402[1] = (int8x8_t)v139;
        v402[2] = (int8x8_t)v126;
        v140 = HIBYTE(*((unsigned __int16 *)v9 + 694)) & 1 | v402[41].u16[0];
        v402[41].i16[0] |= HIBYTE(*((_WORD *)v9 + 694)) & 1;
        v11 = v402;
        if ((*((_BYTE *)v9 + 1393) & 1) != 0 || (v9[175] & 0x100) != 0)
          v141 = 2;
        else
          v141 = 0;
        v402[41].i16[0] = v141 | v140;
        v126 = *(_QWORD *)(v139 + (int)*MEMORY[0x24BE51650] + 72);
        v125 = (uint32x2_t *)v402[262];
      }
    }
    v127 = vmax_u32(vshl_u32(v125[16], (uint32x2_t)vneg_s32(vdup_n_s32(v125[18].i32[0] + *((_DWORD *)v9 + 275)))), (uint32x2_t)0x100000001);
  }
  else
  {
    v125 = 0;
    v123 = 0;
    v126 = 0;
    v127 = 0;
  }
  v414 = v127;
  v142 = (uint64_t)v11[263];
  if (v142)
  {
    v143 = *((_DWORD *)v9 + 306);
    v11[473].i16[0] = v143;
    v144 = *((_DWORD *)v9 + 307);
    v11[472].i16[3] = v144;
    v145 = *((_DWORD *)v9 + 308);
    v11[473].i16[1] = v145;
    v146 = *(_QWORD *)(v142 + 208);
    v147 = *(_DWORD *)(v146 + 24) - 1;
    if (*(_DWORD *)(v142 + 236))
      v148 = 0;
    else
      v148 = *(_DWORD *)(v142 + 144) + v144;
    v150 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v142, v143, v148, v145, *(_DWORD *)(v146 + 24) - 1);
    v151 = v150;
    v11[388].i16[0] |= 0xCu;
    v11[389].i16[0] |= (*((_WORD *)v9 + 692) >> 6) & 8;
    v11[389].i16[1] |= ~(*((_WORD *)v9 + 694) >> 7) & 4;
    v11[389].i16[2] |= (*((_WORD *)v9 + 690) >> 6) & 8;
    v11[370].i8[0] = *((_DWORD *)v9 + 298);
    if (*((_DWORD *)v9 + 384) == 2)
    {
      v149 = 4008574976;
      if (v150 != 4008574976)
      {
        v152 = (int32x2_t)v11[272];
        v408 = (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32(v152, (int32x2_t)-1)));
        v418 = (int8x8_t)vcgt_u32((uint32x2_t)0x1100000011, (uint32x2_t)v152);
        *v11 = vbsl_s8(v418, (int8x8_t)0x2000000020, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, v408));
        v153 = *(unsigned __int8 *)(v146 + v147 + 88);
        v154 = v11;
        v155 = v11[273].i32[0] * v153;
        v154[18].i32[0] = v155;
        v156 = [AGXA10FamilyBuffer alloc];
        v157 = v408.i8[0];
        if ((v418.i8[0] & 1) != 0)
          v157 = 5;
        v158 = v155 << v157;
        if ((v418.i8[4] & 1) != 0)
          v159 = 5;
        else
          v159 = v408.i8[4];
        v160 = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v156, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", *(_QWORD *)&v154[42], (v158 << v159), 0, AGX::Framebuffer<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::Framebuffer(AGXA10FamilyDevice *,AGX::G9::CommandBuffer *,AGX::G9::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::isSuballocDisabled, 0);
        v154[16] = (int8x8_t)v160;
        v154[17] = (int8x8_t)v151;
        v161 = (*((unsigned __int16 *)v9 + 694) >> 7) & 4 | v154[41].u16[0];
        v154[41].i16[0] |= (*((_WORD *)v9 + 694) >> 7) & 4;
        v11 = v154;
        if ((*((_BYTE *)v9 + 1393) & 2) != 0 || (v9[175] & 0x200) != 0)
          v162 = 8;
        else
          v162 = 0;
        v154[41].i16[0] = v162 | v161;
        v149 = *(_QWORD *)(v160 + (int)*MEMORY[0x24BE51650] + 72);
        v125 = (uint32x2_t *)v154[262];
        if (v125)
          goto LABEL_163;
        goto LABEL_162;
      }
    }
    else
    {
      v149 = v150;
    }
    v125 = (uint32x2_t *)v11[262];
    if (!v125)
LABEL_162:
      v414 = vmax_u32(vshl_u32(*(uint32x2_t *)(*(_QWORD *)&v11[263] + 128), (uint32x2_t)vneg_s32(vdup_n_s32(*(_DWORD *)(*(_QWORD *)&v11[263] + 144) + *((_DWORD *)v9 + 307)))), (uint32x2_t)0x100000001);
  }
  else
  {
    v149 = 0;
  }
LABEL_163:
  v163 = 84025344;
  if (v85)
    v164 = 1;
  else
    v164 = v125 == 0;
  v165 = !v164;
  v166 = v11[1];
  v419 = v11 + 1;
  v11[373].i8[7] = v165;
  if (*(_QWORD *)&v166 && (v11[41].i16[0] & 3) != 0 || *(_QWORD *)&v11[16] && (v11[41].i16[0] & 0xC) != 0)
  {
    v167 = v11->i32[0];
    v168 = v11->u32[1];
    v169 = v11[273].u32[0];
    v170 = v149 != 0;
    v171 = v149 | v126;
    if (v149 | v126)
    {
      if (v149)
        v172 = 1;
      else
        v172 = v169 > 1;
      v173 = v172;
      v174 = v173 == 0;
      if (v173)
        v175 = (v167 + 31) & 0xFFFFFFE0;
      else
        v175 = v11->i32[0];
      if (v174)
        v176 = v11->u32[1];
      else
        v176 = (v168 + 31) & 0xFFFFFFE0;
      v177 = (v175 - 1) | ((unint64_t)(v176 - 1) << 15);
      if (v123)
        v178 = 84025344;
      else
        v178 = 139264;
    }
    else
    {
      v177 = 0;
      v178 = 0;
    }
    v180 = (int32x4_t *)v398;
  }
  else
  {
    v179 = 0;
    if (v125 && (unint64_t)(*(_QWORD *)&v125[4] - 250) <= 0xB)
    {
      v180 = (int32x4_t *)v398;
      if (((1 << (v125[4].i8[0] + 6)) & 0xC0D) != 0)
        v179 = (v125[16].i32[0] < 0x20u || v125[16].i32[1] <= 0x1Fu)
            && (*(_QWORD *)&v125[5] & 5) == 4
            && v125[8].i32[0] < 2u;
    }
    else
    {
      v180 = (int32x4_t *)v398;
    }
    v169 = v11[273].u32[0];
    v167 = v414.i32[0];
    v168 = v414.u32[1];
    v170 = v149 != 0;
    v171 = v149 | v126;
    if (v149 | v126)
    {
      if (v169 > 1)
        v179 = 1;
      if (v149)
        v179 = 1;
      v182 = !v179;
      if (v179)
        v183 = (v414.i32[0] + 31) & 0xFFFFFFE0;
      else
        v183 = v414.i32[0];
      if (v182)
        v184 = v414.u32[1];
      else
        v184 = (v414.i32[1] + 31) & 0xFFFFFFE0;
      v177 = (v183 - 1) | ((unint64_t)(v184 - 1) << 15);
      if (v123)
        v178 = 84025344;
      else
        v178 = 139264;
    }
    else
    {
      v178 = 0;
      v177 = 0;
    }
  }
  v185 = v126 & 0xFFFFFFFFFFFFFFFELL;
  v11[376] = (int8x8_t)v178;
  v11[377] = (int8x8_t)v177;
  if (v149)
    v186 = v149 & 0xFFFFFFFFFFFFFFF0 | 1;
  else
    v186 = 0;
  v11[378] = (int8x8_t)v185;
  v11[379] = (int8x8_t)v185;
  v11[380] = (int8x8_t)v186;
  v11[381] = (int8x8_t)v186;
  if (v171)
  {
    if (v149)
      v187 = 1;
    else
      v187 = v169 > 1;
    if (v187)
    {
      v167 = (v167 + 31) & 0xFFFFFFE0;
      v168 = (v168 + 31) & 0xFFFFFFE0;
    }
    v189 = (v167 - 1) | ((unint64_t)(v168 - 1) << 15);
    if (!v123)
      v163 = 139264;
    v190 = v163 | 1;
  }
  else
  {
    v163 = 0;
    v189 = 0;
    v190 = 1;
  }
  if (v126)
    v163 = v190;
  v191 = v180[1];
  v439 = *v180;
  v192 = v126 & 0xFFFFFFFFFFFFFFFELL;
  v193 = v149 & 0xFFFFFFFFFFFFFFF0 | 1;
  if (!v170)
    v193 = 0;
  v11[382] = (int8x8_t)v163;
  v11[383] = (int8x8_t)v189;
  v11[384] = (int8x8_t)v192;
  v11[385] = (int8x8_t)v192;
  v11[386] = (int8x8_t)v193;
  v11[387] = (int8x8_t)v193;
  v438 = 0;
  v440 = v191;
  v194 = v11[47].i32[0];
  v415 = v11[47].i32[1];
  v195 = *((unsigned __int8 *)v9 + 1388);
  v196 = *((_DWORD *)v9 + 346);
  v197 = *(_QWORD *)(*(_QWORD *)&v11[42] + 808);
  v409 = v9[201];
  v198 = *(os_unfair_lock_s **)v197;
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  v433 = v439;
  v199 = (unsigned __int16)v66 | (unint64_t)(v397 << 16);
  v430.i32[2] = 13;
  v200 = ((v196 << 24) | (unint64_t)(v195 << 32) | v199) & 0xFFFFFFFFFFFFLL;
  v431[1] = 0;
  v432 = 0;
  v431[0] = 0;
  v430.i64[0] = (uint64_t)off_2504019E0;
  v434 = v440;
  *(_QWORD *)&v435 = __PAIR64__(v415, v194);
  *((_QWORD *)&v435 + 1) = v200;
  os_unfair_lock_lock((os_unfair_lock_t)(v197 + 6632));
  v201 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::BackgroundObjectProgram>(v197, v198, (uint64_t)&v430, v409);
  v202 = v201;
  v203 = v195 ^ 0xFF;
  v204 = v201;
  v406 = v203 & v194;
  if ((v203 & v194) != 0)
  {
    v204 = *(_QWORD *)(v201 + 2856);
    if (!v204)
    {
      *(int32x4_t *)&v424[8] = v439;
      v422[2] = 13;
      __p[1] = 0;
      *(_QWORD *)v424 = 0;
      __p[0] = 0;
      *(_QWORD *)v422 = off_2504019E0;
      *(int32x4_t *)&v424[24] = v440;
      v425 = v194;
      v426 = v415;
      v427 = v199;
      v428 = (v199 | ((unint64_t)v194 << 32)) >> 32;
      v429 = 0;
      v205 = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateDriverProgramVariant<AGX::G9::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::G9::BackgroundObjectProgram>(v197, v198, (uint64_t)v422, v409);
      v204 = v205;
      if ((*(_BYTE *)(v202 + 2848) != 0) == (*(_BYTE *)(v205 + 2848) != 0))
        *(_QWORD *)(v202 + 2856) = v205;
      *(_QWORD *)v422 = off_250401A20;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  if (*(_DWORD *)*MEMORY[0x24BE516B0])
    IOGPUDeviceTraceEvent();
  os_unfair_lock_unlock((os_unfair_lock_t)(v197 + 6632));
  v430.i64[0] = (uint64_t)off_250401A20;
  if (v431[0])
  {
    v431[1] = v431[0];
    operator delete(v431[0]);
  }
  v11[390] = (int8x8_t)v202;
  v11[391] = (int8x8_t)v204;
  v11[395].i32[0] = 13;
  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v390, 0, 0, 0);
  v206 = v440;
  *v394 = v439;
  v394[1] = v206;
  v11[403].i32[0] = v194;
  v11[403].i32[1] = v415;
  v11[404] = (int8x8_t)v200;
  v430 = v439;
  *(int32x4_t *)v431 = v440;
  v207 = v199 | ((unint64_t)v194 << 32);
  v208 = (uint64_t)v11;
  if (v406)
    v209 = v207;
  else
    v209 = v200;
  *(_DWORD *)(v208 + 3248) = 13;
  v210 = v194;
  v211 = *(void **)(v208 + 3256);
  if (v211)
  {
    *(_QWORD *)(v208 + 3264) = v211;
    operator delete(v211);
    *v388 = 0;
    v388[1] = 0;
    v388[2] = 0;
    v210 = *(_DWORD *)(v208 + 3224);
    v200 = *(_QWORD *)(v208 + 3232);
  }
  *v388 = 0;
  v388[1] = 0;
  v388[2] = 0;
  v212 = *(int32x4_t *)v431;
  *v389 = v430;
  v389[1] = v212;
  *(_DWORD *)(v208 + 3312) = v194;
  *(_DWORD *)(v208 + 3316) = v415;
  v391[5].i32[2] = v209;
  v391[5].i16[6] = WORD2(v209);
  *(_WORD *)(v208 + 3326) = 0;
  v213 = *(_DWORD **)(v208 + 3120);
  v214 = v213[74];
  v215 = *(_QWORD *)(v208 + 3128);
  if (v214 <= *(_DWORD *)(v215 + 296))
    v214 = *(_DWORD *)(v215 + 296);
  v216 = *(_DWORD *)(v208 + 3672);
  if (v216 <= v213[82])
    v216 = v213[82];
  v217 = *(_DWORD *)(v215 + 328);
  if (v216 > v217)
    v217 = v216;
  *(_DWORD *)(v208 + 3672) = v217;
  if (*(_DWORD *)(v208 + 3664) > v214)
    v214 = *(_DWORD *)(v208 + 3664);
  *(_DWORD *)(v208 + 3664) = v214;
  v218 = v213[73];
  if (v218 <= *(_DWORD *)(v208 + 3668))
    v218 = *(_DWORD *)(v208 + 3668);
  *(_DWORD *)(v208 + 3668) = v218;
  v219 = *(_QWORD *)(v208 + 3320);
  v220 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*v394, v391[3]), (int16x8_t)vceqq_s32(v394[1], v391[4]))));
  v220.i8[0] = vmaxv_u8(v220);
  v221 = (v210 == v194) & ~v220.i32[0];
  if (v200 != v219)
    v221 = 0;
  v222 = v221 | a7;
  v223 = v222 == 0;
  if (v222)
    v224 = v394;
  else
    v224 = v389;
  if (!v223)
    v219 = v200;
  v225 = v224[1];
  *(int32x4_t *)(v208 + 2840) = *v224;
  *(int32x4_t *)(v208 + 2856) = v225;
  *(_QWORD *)(v208 + 2872) = v224[2].i64[0];
  *(_QWORD *)(v208 + 2880) = v219;
  v226 = *(_DWORD *)(v208 + 376);
  v227 = *((_DWORD *)v421 + 354);
  v228 = *(_DWORD *)(v208 + 2980);
  *(_DWORD *)(v208 + 2972) = HIWORD(v226) & 0x1FF;
  *(_DWORD *)(v208 + 2976) = v227;
  v229 = v398;
  if (!v228)
  {
    v430.i32[2] = 19;
    v431[1] = 0;
    v432 = 0;
    v431[0] = 0;
    v430.i64[0] = (uint64_t)off_250401A60;
    v433 = 0u;
    v434 = 0u;
    v435 = 0u;
    v436 = 0u;
    memset(v437, 0, sizeof(v437));
    v287 = *(_DWORD *)(v208 + 2188);
    *(_DWORD *)(v208 + 344) = *(_DWORD *)(v208 + 344) & 0xFFF00000 | 0x2C;
    *(_DWORD *)(v208 + 376) = v226 & 0xFE000000 | ((v287 & 0xF) << 8) & 0xFFF | ((v287 & 0xF) << 12) | 0x20001;
    AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::configureDummyPBEInternal(v208, v398, 0, v287);
    v288 = *(_DWORD *)(v208 + 2188);
    v275 = ((unint64_t)(v288 & 0xF) << 32) | ((unint64_t)*(unsigned __int8 *)(v208 + 378) << 36);
    *(_QWORD *)&v437[8] = v275;
    if ((*(_DWORD *)(v208 + 344) & 0x1Fu) - 10 >= 2)
    {
      v289 = 0;
      v290 = &OBJC_IVAR___BVHTopDownBuilder__library;
      if ((*(_DWORD *)(v208 + 344) & 0x1F) == 0x11)
        v289 = (v288 < 2) << 8;
    }
    else
    {
      v289 = 256;
      v290 = &OBJC_IVAR___BVHTopDownBuilder__library;
    }
    if (v288 >= 2)
      v291 = 0x40000;
    else
      v291 = 0x20000;
    v433.i32[0] = v289 | v291;
    v292 = v421[201];
    *(_QWORD *)v422 = 0;
    v438 = 0;
    AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateEndOfTileProgramVariants(*(_QWORD *)(*(_QWORD *)(v208 + 336) + v290[66]), (uint64_t)&v430, v292, (uint64_t *)v422, &v438);
    v293 = v438;
    *(_QWORD *)(v208 + 3592) = *(_QWORD *)v422;
    *(_QWORD *)(v208 + 3584) = v293;
    *(_DWORD *)(v208 + 3464) = 19;
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v387, 0, 0, 0);
    v294 = v434;
    v296 = v435;
    v295 = v436;
    *(_OWORD *)(v392 + 32) = v435;
    *(_OWORD *)(v392 + 48) = v295;
    v297 = v436;
    *(_OWORD *)(v392 + 64) = *(_OWORD *)v437;
    v298 = v434;
    v299 = v433;
    *(int32x4_t *)v392 = v433;
    *(int32x4_t *)(v392 + 16) = v298;
    *(_OWORD *)v424 = v296;
    *(_OWORD *)&v424[16] = v297;
    *(_QWORD *)(v392 + 78) = *(_QWORD *)&v437[14];
    *(_QWORD *)&v424[32] = *(_QWORD *)v437;
    *(int32x4_t *)v422 = v299;
    *(int32x4_t *)__p = v294;
    *(_DWORD *)(v208 + 3336) = 19;
    v300 = *(void **)(v208 + 3344);
    v242 = v208;
    if (v300)
    {
      *(_QWORD *)(v208 + 3352) = v300;
      operator delete(v300);
      *v384 = 0;
      v384[1] = 0;
      v384[2] = 0;
    }
    v301 = 0;
    v302 = 0;
    v273 = 0;
    *v384 = 0;
    v384[1] = 0;
    v384[2] = 0;
    v303 = (int8x16_t *)v386;
    *(_QWORD *)(v386 + 64) = *(_QWORD *)&v424[32];
    v304 = *(_OWORD *)&v424[16];
    *(_OWORD *)(v386 + 32) = *(_OWORD *)v424;
    *(_OWORD *)(v386 + 48) = v304;
    v305 = *(_OWORD *)__p;
    *(_OWORD *)v386 = *(_OWORD *)v422;
    *(_OWORD *)(v386 + 16) = v305;
    *(_QWORD *)(v208 + 3440) = v275;
    *(_DWORD *)(v208 + 3448) = 0;
    *(_WORD *)(v208 + 3452) = 0;
    goto LABEL_359;
  }
  v430.i32[2] = 19;
  v431[0] = 0;
  v431[1] = 0;
  v430.i64[0] = (uint64_t)off_250401A60;
  memset(v437, 0, sizeof(v437));
  v433 = 0u;
  v434 = 0u;
  v435 = 0u;
  v436 = 0u;
  v230 = *(_DWORD *)(v208 + 2188);
  v231 = ((unint64_t)BYTE2(v226) << 36) | ((unint64_t)(v230 & 0xF) << 32) | 0x40000000000000;
  v432 = 0;
  *(_QWORD *)&v437[8] = v231;
  v232 = *((unsigned __int8 *)v421 + 1392);
  v233 = *((unsigned __int8 *)v421 + 1380);
  v234 = *((unsigned __int8 *)v421 + 1400);
  v235 = *((unsigned __int8 *)v421 + 1396);
  if (v228 == (v234 | v233))
  {
    *(_OWORD *)v422 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    v422[0] = 44;
    *(_QWORD *)v424 = ((v230 & 0xF) << 12) | ((v230 & 0xF) << 8) | 0x20001;
    AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::configureDummyPBEInternal(v208, (uint64_t)v422, 0x10u, v230);
    v236 = *(_DWORD *)(v208 + 2188) >= 2u ? 0x40000 : 0x20000;
    *(_DWORD *)v437 = v236;
    v228 = *(_DWORD *)(v208 + 2980);
    if (!v228)
    {
      LOWORD(v237) = 0;
      LOWORD(v239) = 0;
      LOWORD(v238) = 0;
      v242 = (uint64_t)v402;
      goto LABEL_330;
    }
  }
  v237 = 0;
  v238 = 0;
  v239 = 0;
  v240 = v235 & ~v232 | v233;
  v241 = v232 & ~v235 | v233;
  v242 = (uint64_t)v402;
  do
  {
    v244 = __clz(__rbit32(v228));
    v245 = 1 << v244;
    v246 = v244;
    v247 = *(_DWORD *)(v229 + v246 * 4);
    v248 = (v247 >> 12) / (*(_WORD *)(v242 + 378) & 0x1FFu);
    v249 = v433.i32[v246] & 0xE3FF0000;
    v250 = (v247 & 0x1F) == 0x11 && v396 < 2;
    if ((v247 & 0x1F) - 10 < 2)
      v250 = 1;
    v251 = v249 | (v250 << 8) | (v247 << 21) & 0x1C000000 | v248;
    v252 = &v421[8 * v244];
    v255 = v252[8];
    v254 = v252 + 8;
    v253 = v255;
    if (*(_BYTE *)(v255 + 240))
      v251 |= 0x2000000u;
    v256 = *(_QWORD *)(v253 + 380);
    v257 = BYTE2(v256);
    v258 = BYTE2(v256);
    v259 = BYTE1(v256);
    if ((v257 & 2) != 0)
      v260 = 0x40000;
    else
      v260 = 0x20000;
    if (v259 != 2)
      v260 = 16711680;
    if ((v259 - 3) < 2 || v259 == 1)
      v262 = 0x20000;
    else
      v262 = v260;
    _ZF = (v258 & 1) == 0;
    v242 = (uint64_t)v402;
    if (!_ZF)
      v262 = 0x20000;
    v433.i32[v244] = v251 & 0xFF00FFFF | v262;
    v237 |= v245;
    v238 |= v245 & v240;
    v239 |= v245 & v234;
    v263 = v244 + 8;
    v264 = v402[373].i32[0] & v245;
    if (!v264)
    {
      if (!v402[366].i8[3] || v396 < 2)
        goto LABEL_285;
      v265 = (unsigned int *)&v433 + v263;
      v266 = *v265 & 0xFFFFFF00 | v248;
      *v265 = v266;
LABEL_312:
      v267 = (v247 << 16) & 0x1000000;
      goto LABEL_313;
    }
    v265 = (unsigned int *)&v433 + v263;
    v266 = *v265 & 0xFFFFFF00 | v248;
    *v265 = v266;
    if (v396 >= 2)
      goto LABEL_312;
    v267 = 0;
LABEL_313:
    v268 = v266 & 0xFEFFFFFF | v267;
    *v265 = v268;
    v269 = *(_DWORD *)(v229 + 4 * v244);
    if ((v269 & 0x1Fu) - 10 >= 2)
      v270 = (v269 & 0x1F) == 0x11 && v396 < 2;
    else
      v270 = 1;
    v271 = v268 & 0xE3FF00FF | (v270 << 8) | (v269 << 21) & 0x1C000000;
    *v265 = v271;
    if (*(_BYTE *)(*v254 + 240))
    {
      v271 |= 0x2000000u;
      *v265 = v271;
    }
    v229 = v398;
    if (!v264 || (v272 = *(_QWORD *)(v421[8 * v244 + 72] + 380), (v272 & 0x10000) != 0))
    {
      v243 = 0x20000;
    }
    else
    {
      v243 = 0x20000;
      if (BYTE1(v272) - 3 >= 2 && BYTE1(v272) != 1)
      {
        if (BYTE1(v272) == 2)
        {
          if ((v272 & 0x20000) != 0)
            v243 = 0x40000;
          else
            v243 = 0x20000;
        }
        else
        {
          v243 = 16711680;
        }
      }
    }
    *v265 = v271 & 0xFF00FFFF | v243;
    v237 |= 256 << v244;
    v238 |= ((v241 >> v244) & 1) << v263;
    v239 |= ((v245 & v234) != 0) << v263;
    v242 = (uint64_t)v402;
LABEL_285:
    v228 ^= v245;
  }
  while (v228);
  v231 = *(_QWORD *)&v437[8];
LABEL_330:
  v273 = (unsigned __int16)v237;
  *(_WORD *)&v437[16] = v237;
  *(_WORD *)&v437[18] = v238;
  v274 = (unsigned __int16)v239;
  *(_WORD *)&v437[20] = v239;
  v410 = v231 & 0xFFFFFFFF00000000;
  v275 = (unsigned __int16)(v237 & ~(_WORD)v238) | ((unint64_t)(unsigned __int16)(v239 & v237) << 16) | v231 & 0xFFFFFFFF00000000;
  *(_QWORD *)&v437[8] = v275;
  v276 = v421[201];
  *(_QWORD *)v422 = 0;
  v438 = 0;
  AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::populateEndOfTileProgramVariants(*(_QWORD *)(*(_QWORD *)(v242 + 336) + 808), (uint64_t)&v430, v276, (uint64_t *)v422, &v438);
  v277 = v438;
  *(_QWORD *)(v242 + 3592) = *(_QWORD *)v422;
  *(_QWORD *)(v242 + 3584) = v277;
  v416 = v430.i32[2];
  *(_DWORD *)(v242 + 3464) = v430.i32[2];
  v279 = v431[0];
  v278 = v431[1];
  v280 = (char *)v431[1] - (char *)v431[0];
  v281 = ((char *)v431[1] - (char *)v431[0]) >> 2;
  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v387, (char *)v431[0], (char *)v431[1], v281);
  v283 = v436;
  *(_OWORD *)(v392 + 32) = v435;
  *(_OWORD *)(v392 + 48) = v283;
  *(_OWORD *)(v392 + 64) = *(_OWORD *)v437;
  *(_QWORD *)(v392 + 78) = *(_QWORD *)&v437[14];
  v284 = v434;
  *(int32x4_t *)v392 = v433;
  *(int32x4_t *)(v392 + 16) = v284;
  if (v273 > 0xFF || (_WORD)v238 || v274)
  {
    if (v278 == v279)
    {
      v285 = 0;
      v286 = 0;
    }
    else
    {
      if ((v280 & 0x8000000000000000) != 0)
        goto LABEL_490;
      v285 = (char *)operator new(v280);
      v286 = &v285[4 * v281];
      memcpy(v285, v279, v280);
    }
    *(_OWORD *)v424 = v435;
    *(_OWORD *)&v424[16] = v436;
    *(_QWORD *)&v424[32] = *(_QWORD *)v437;
    *(int32x4_t *)v422 = v433;
    *(int32x4_t *)__p = v434;
    v273 = v273;
    v275 = v410 | v273;
  }
  else
  {
    if (v278 != v279)
    {
      if ((v280 & 0x8000000000000000) == 0)
      {
        v285 = (char *)operator new(v280);
        v286 = &v285[4 * v281];
        memcpy(v285, v279, v280);
        goto LABEL_353;
      }
LABEL_490:
      abort();
    }
    v285 = 0;
    v286 = 0;
LABEL_353:
    *(_OWORD *)v424 = v435;
    *(_OWORD *)&v424[16] = v436;
    *(_QWORD *)&v424[32] = *(_QWORD *)v437;
    *(int32x4_t *)v422 = v433;
    *(int32x4_t *)__p = v434;
  }
  v303 = (int8x16_t *)v386;
  *(_DWORD *)(v242 + 3336) = v416;
  v306 = *(void **)(v242 + 3344);
  if (v306)
  {
    *(_QWORD *)(v242 + 3352) = v306;
    operator delete(v306);
    *v384 = 0;
    v384[1] = 0;
    v384[2] = 0;
  }
  *(_QWORD *)(v242 + 3344) = v285;
  *(_QWORD *)(v242 + 3352) = v286;
  *(_QWORD *)(v242 + 3360) = v286;
  v307 = *(_OWORD *)&v424[16];
  *(_OWORD *)(v386 + 32) = *(_OWORD *)v424;
  *(_OWORD *)(v386 + 48) = v307;
  *(_QWORD *)(v386 + 64) = *(_QWORD *)&v424[32];
  v308 = *(_OWORD *)__p;
  *(_OWORD *)v386 = *(_OWORD *)v422;
  *(_OWORD *)(v386 + 16) = v308;
  *(_QWORD *)(v242 + 3440) = v275;
  *(_WORD *)(v242 + 3448) = v273;
  *(_DWORD *)(v242 + 3450) = 0;
  if (v279)
  {
    operator delete(v279);
    v275 = *(_QWORD *)(v242 + 3440);
    v273 = *(unsigned __int16 *)(v242 + 3448);
    v302 = *(_WORD *)(v242 + 3450);
    v301 = *(_WORD *)(v242 + 3452);
  }
  else
  {
    v301 = 0;
    v302 = 0;
  }
LABEL_359:
  v309 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)v392, *v303), veorq_s8(*(int8x16_t *)(v392 + 32), v303[2])), vorrq_s8(veorq_s8(*(int8x16_t *)(v392 + 16), v303[1]), veorq_s8(*(int8x16_t *)(v392 + 48), v303[3])));
  *(int8x8_t *)v309.i8 = vorr_s8(*(int8x8_t *)v309.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v309, v309, 8uLL));
  _ZF = (*(_QWORD *)(v242 + 3568) ^ v275 | *(unsigned __int16 *)(v242 + 3576) ^ v273 | (unint64_t)(unsigned __int16)(*(_WORD *)(v242 + 3578) ^ v302) | (unsigned __int16)(*(_WORD *)(v242 + 3580) ^ v301) | v309.i32[0] | (*(_DWORD *)(v242 + 3560) ^ *(_DWORD *)(v242 + 3432)) | v309.i32[1]) == 0;
  v310 = a7;
  if (_ZF)
    v310 = 1;
  if (v310)
    v311 = (int8x16_t *)v392;
  else
    v311 = v303;
  v312 = v311[4];
  v313 = v311[2];
  *(int8x16_t *)(v242 + 1432) = v311[3];
  *(int8x16_t *)(v242 + 1448) = v312;
  v314 = v311[1];
  *(int8x16_t *)(v242 + 1384) = *v311;
  *(int8x16_t *)(v242 + 1400) = v314;
  *(int8x16_t *)(v242 + 1416) = v313;
  v315 = *(_DWORD **)(v242 + 3592);
  v316 = v315[17];
  v317 = *(_QWORD *)(v242 + 3584);
  if (v316 <= *(_DWORD *)(v317 + 68))
    v316 = *(_DWORD *)(v317 + 68);
  v318 = *(_DWORD *)(v242 + 3672);
  if (v318 <= v315[20])
    v318 = v315[20];
  v319 = *(_DWORD *)(v317 + 80);
  if (v318 > v319)
    v319 = v318;
  *(_DWORD *)(v242 + 3672) = v319;
  if (*(_DWORD *)(v242 + 3664) > v316)
    v316 = *(_DWORD *)(v242 + 3664);
  *(_DWORD *)(v242 + 3664) = v316;
  v320 = v315[23];
  if (v320 >= *(_DWORD *)(v242 + 3668))
    v320 = *(_DWORD *)(v242 + 3668);
  *(_DWORD *)(v242 + 3668) = v320;
  v321 = v421;
  v322 = v419;
  if (*(_QWORD *)(v242 + 8) && (*(_WORD *)(v242 + 328) & 3) != 0
    || *(_QWORD *)(v242 + 128) && (*(_WORD *)(v242 + 328) & 0xC) != 0)
  {
    v323 = 0;
    v324 = 1;
    do
    {
      v325 = v324;
      if ((v324 & 1) != 0)
        v326 = 5;
      else
        v326 = 10;
      if (*v322)
      {
        v327 = ((unsigned __int16)v326 & *(_WORD *)(v242 + 328) & 3) != 0;
        if (!*(_QWORD *)(v242 + 128))
          goto LABEL_388;
      }
      else
      {
        v327 = 0;
        if (!*(_QWORD *)(v242 + 128))
        {
LABEL_388:
          v328 = 0;
          goto LABEL_389;
        }
      }
      v328 = ((unsigned __int16)v326 & *(_WORD *)(v242 + 328) & 0xC) != 0;
LABEL_389:
      if (v327 || v328)
      {
        v329 = (unsigned int *)(v242 + 40 * v323 + 248);
        bzero(v329, 0x28uLL);
        if (v327)
        {
          v330 = 0;
          v331 = *(_QWORD *)(v242 + 2096);
          if (*(_QWORD *)(v331 + 32) == 250)
            v332 = 39;
          else
            v332 = 49;
          *v329 = v332 | *v329 & 0xFFF00000;
          v333 = *(_QWORD *)(v331 + 24);
          v334 = 1;
          v335 = 1;
          switch(v333)
          {
            case 0:
              goto LABEL_401;
            case 1:
              v334 = 1;
              v330 = 1;
              v335 = 1;
              if (v328)
                goto LABEL_402;
              goto LABEL_410;
            case 3:
              v330 = 1;
              goto LABEL_400;
            case 7:
              v330 = 0;
              v335 = 1;
              v334 = 3;
              if (v328)
                goto LABEL_402;
              goto LABEL_410;
            default:
LABEL_400:
              v335 = 1;
              v334 = 2;
LABEL_401:
              if (v328)
                goto LABEL_402;
              goto LABEL_410;
          }
        }
        v334 = 0;
        v330 = 0;
        v335 = 0;
        if (v328)
        {
LABEL_402:
          *(_DWORD *)(v242 + 40 * v323 + 252) = *(_DWORD *)(v242 + 40 * v323 + 252) & 0xFFF00000 | (v335 << 12) | 0x25;
          v336 = 4;
          switch(*(_QWORD *)(*(_QWORD *)(v242 + 2104) + 24))
          {
            case 0:
              break;
            case 1:
              v330 |= 2u;
              v336 = 4;
              break;
            case 3:
              v330 |= 2u;
              goto LABEL_405;
            case 7:
              v336 = 12;
              break;
            default:
LABEL_405:
              v336 = 8;
              break;
          }
          v334 |= v336;
          v335 |= 2u;
        }
LABEL_410:
        v337 = v242 + 40 * v323;
        *(_DWORD *)(v337 + 280) = *(_DWORD *)(v337 + 280) & 0xFE000000 | ((*(_WORD *)(v242 + 2184) & 0xF) << 8) & 0xFFF | ((*(_DWORD *)(v242 + 2188) & 0xF) << 12) | v335 | 0x20000;
        v430.i32[2] = 13;
        v431[1] = 0;
        v432 = 0;
        v431[0] = 0;
        v430.i64[0] = (uint64_t)off_2504019E0;
        v338 = *(int32x4_t *)(v337 + 264);
        v433 = *(int32x4_t *)v329;
        v434 = v338;
        *(_QWORD *)&v435 = *(_QWORD *)(v337 + 280);
        HIDWORD(v435) = (unsigned __int16)v335;
        DWORD2(v435) = v334 | (v330 << 16);
        BackgroundObjectProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateBackgroundObjectProgramVariant(*(_QWORD *)(*(_QWORD *)(v242 + 336) + 808), (uint64_t)&v430, v421[201]);
        *(_QWORD *)(v242 + 8 * v323 + 3136) = BackgroundObjectProgramVariant;
        v340 = *(_DWORD *)(v242 + 3676);
        if (v340 <= *(_DWORD *)(BackgroundObjectProgramVariant + 296))
          v340 = *(_DWORD *)(BackgroundObjectProgramVariant + 296);
        *(_DWORD *)(v242 + 3676) = v340;
        v430.i64[0] = (uint64_t)off_250401A20;
        if (v431[0])
        {
          v431[1] = v431[0];
          operator delete(v431[0]);
        }
        v430.i32[2] = 19;
        v431[1] = 0;
        v432 = 0;
        v431[0] = 0;
        v430.i64[0] = (uint64_t)off_250401A60;
        v433 = 0u;
        v434 = 0u;
        v435 = 0u;
        v436 = 0u;
        *(_QWORD *)v437 = 0;
        v341 = *(_DWORD *)(v337 + 280);
        v342 = ((unint64_t)BYTE2(v341) << 36) | ((unint64_t)(*(_DWORD *)(v242 + 2188) & 0xF) << 32) | v335;
        *(_WORD *)&v437[16] = v335;
        *(_DWORD *)&v437[18] = 0;
        *(_QWORD *)&v437[8] = v342 | 0x40000000000000;
        v343 = HIWORD(v341) & 0x1FF;
        v321 = v421;
        v322 = v419;
        if (v327)
        {
          v344 = *v329 & 0x1F;
          if ((v344 - 10) >= 2)
            v345 = v344 == 17 && v396 < 2;
          else
            v345 = 1;
          v346 = ((*v329 >> 12) / v343) | (v345 << 8);
          v347 = WORD1(*(_QWORD *)(*(_QWORD *)(v242 + 2096) + 380));
          if ((v347 & 2) != 0)
            v348 = 0x40000;
          else
            v348 = 0x20000;
          if ((v347 & 1) != 0)
            v349 = 0x20000;
          else
            v349 = v348;
          v433.i32[0] = v346 | v349;
        }
        if (v328)
        {
          v350 = *(_DWORD *)(v242 + 40 * v323 + 252);
          if ((v350 & 0x1F) - 10 >= 2)
            v351 = (v350 & 0x1F) == 0x11 && v396 < 2;
          else
            v351 = 1;
          v352 = ((v350 >> 12) / v343) | (v351 << 8);
          v353 = WORD1(*(_QWORD *)(*(_QWORD *)(v242 + 2104) + 380));
          if ((v353 & 2) != 0)
            v354 = 0x40000;
          else
            v354 = 0x20000;
          if ((v353 & 1) != 0)
            v355 = 0x20000;
          else
            v355 = v354;
          v433.i32[1] = v352 | v355;
        }
        EndOfTileProgramVariant = AGX::Device<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::findOrCreateEndOfTileProgramVariant(*(_QWORD *)(*(_QWORD *)(v242 + 336) + 808), (AGX::EndOfTileProgramKey *)&v430, v421[201]);
        *(_QWORD *)(v242 + 8 * v323 + 3600) = EndOfTileProgramVariant;
        v357 = *(_DWORD *)(v242 + 3676);
        if (v357 <= *(_DWORD *)(EndOfTileProgramVariant + 68))
          v357 = *(_DWORD *)(EndOfTileProgramVariant + 68);
        *(_DWORD *)(v242 + 3676) = v357;
        v430.i64[0] = (uint64_t)off_250401AA0;
        if (v431[0])
        {
          v431[1] = v431[0];
          operator delete(v431[0]);
        }
      }
      v324 = 0;
      v323 = 1;
    }
    while ((v325 & 1) != 0);
  }
  v358 = !*(_BYTE *)(*(_QWORD *)(v242 + 3120) + 2848) && !*(_BYTE *)(*(_QWORD *)(v242 + 3128) + 2848);
  if (*(_BYTE *)(*(_QWORD *)(v242 + 3592) + 1888) || *(_BYTE *)(*(_QWORD *)(v242 + 3584) + 1888))
  {
    if (!v358)
      ++*(_QWORD *)(a3 + 40);
    ++*(_QWORD *)(a3 + 48);
  }
  else if (!v358)
  {
    ++*(_QWORD *)(a3 + 40);
  }
  *(_OWORD *)(v242 + 3824) = 0u;
  *(_OWORD *)(v242 + 3808) = 0u;
  *(_OWORD *)(v242 + 3836) = 0u;
  *(_QWORD *)(v242 + 3856) = 0;
  *(_QWORD *)(v242 + 3872) = 0;
  *(_QWORD *)(v242 + 3864) = 0;
  v359 = *((_DWORD *)v321 + 344);
  if ((v359 & 0x100) != 0)
  {
    *(_QWORD *)(v242 + 3808) = v321[143];
    v360 = v321[144];
    *(_QWORD *)(v242 + 3824) = v360;
    v361 = *((_DWORD *)v321 + 290);
    *(_WORD *)(v242 + 3842) = v361;
    v362 = *((_DWORD *)v321 + 291);
    *(_WORD *)(v242 + 3840) = v362;
    v363 = *((_DWORD *)v321 + 292);
    *(_WORD *)(v242 + 3844) = v363;
    *(_QWORD *)(v242 + 3856) = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v360, v361, *(_DWORD *)(v360 + 144) + v362, v363, 0);
    *(_DWORD *)(v242 + 3872) = *((_DWORD *)v321 + 293);
    v359 = *((_DWORD *)v321 + 344);
  }
  if ((v359 & 0x200) != 0)
  {
    *(_QWORD *)(v242 + 3816) = v321[159];
    v364 = v321[160];
    *(_QWORD *)(v242 + 3832) = v364;
    v365 = *((_DWORD *)v321 + 322);
    *(_WORD *)(v242 + 3848) = v365;
    v366 = *((_DWORD *)v321 + 323);
    *(_WORD *)(v242 + 3846) = v366;
    v367 = *((_DWORD *)v321 + 324);
    *(_WORD *)(v242 + 3850) = v367;
    v368 = *(_DWORD *)(v364 + 144) + v366;
    v369 = *(_QWORD *)(v364 + 208);
    v370 = *(_DWORD *)(v369 + 24) >= 2u && *(_DWORD *)(v369 + 80) != 0;
    *(_QWORD *)(v242 + 3864) = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(v364, v365, v368, v367, v370);
    *(_DWORD *)(v242 + 3876) = *((_DWORD *)v321 + 326);
  }
  if (*v322)
  {
    v371 = *(_WORD *)(v242 + 328);
    if ((v371 & 3) != 0)
      AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildScratchEncodedState((int *)v242, (MTLPixelFormat)v322, 0, v321[136], *((_DWORD *)v321 + 274), *((unsigned int *)v321 + 275), *((_DWORD *)v321 + 276), 0, v371 & 1, (v371 & 2) != 0);
  }
  if (*(_QWORD *)(v242 + 128))
  {
    v372 = *(_WORD *)(v242 + 328);
    if ((v372 & 0xC) != 0)
      AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildScratchEncodedState((int *)v242, (MTLPixelFormat)(v242 + 128), 1, v321[152], *((_DWORD *)v321 + 306), *((unsigned int *)v321 + 307), *((_DWORD *)v321 + 308), *(_DWORD *)(*(_QWORD *)(v321[152] + 208) + 24) - 1, (v372 & 4) != 0, (v372 & 8) != 0);
  }
  if (*((_BYTE *)v321 + 1529))
  {
    v373 = *(_QWORD *)(v242 + 3120);
    if (*(_BYTE *)(v373 + 2848))
    {
      v374 = *(unsigned __int8 *)(v242 + 3224);
      if (*(_BYTE *)(v242 + 3224))
      {
        v375 = 0;
        do
        {
          v376 = __clz(__rbit32(v374));
          if (((1 << v376) & (v391->u8[4] | HIBYTE(v391->i32[0]))) != 0)
          {
            v377 = v394->i32[v376] >> 5;
            if ((((-1 << v377) >> (v377 - 1)) & 1) != 0)
              v378 = ~(-1 << v377);
            else
              v378 = ~(-1 << v377) | 0xF;
            v375 |= (v378 << (4 * v376));
          }
          v374 ^= 1 << v376;
        }
        while (v374);
      }
      else
      {
        v375 = 0;
      }
      LOBYTE(v422[0]) = 0;
      v430.i32[0] = 0;
      agxsGetShaderPassInfo((unint64_t)v394, 0, v375, &v430, v422, v282);
      v379 = v430.i32[0];
    }
    else
    {
      v379 = *(_DWORD *)(v373 + 2832);
    }
  }
  else if (*(_DWORD *)(v242 + 2188) <= 1u)
  {
    v379 = 15;
  }
  else
  {
    v379 = 7;
  }
  *(_DWORD *)(v242 + 2924) = v379;
  v380 = *(_DWORD *)(v242 + 2184) - 1;
  if (v380 <= 7 && ((0x8Bu >> v380) & 1) != 0)
  {
    v381 = 4 * (*(_DWORD *)(v242 + 2184) - 1);
    v382 = *(_DWORD *)((char *)&unk_232D7643C + v381);
    LODWORD(v381) = *(_DWORD *)((char *)&unk_232D7645C + v381);
    *(_DWORD *)(v242 + 2964) = v382;
    *(_DWORD *)(v242 + 2968) = v381;
  }
  return v242;
}

void sub_232C9B2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  os_unfair_lock_s *v63;
  void *v65;
  void *v66;
  void *v67;
  void *v68;

  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v63);
  if (a63)
    operator delete(a63);
  a35[432] = off_250401AA0;
  v65 = (void *)a35[434];
  if (v65)
  {
    a35[435] = v65;
    operator delete(v65);
  }
  a35[416] = off_250401AA0;
  v66 = (void *)a35[418];
  if (v66)
  {
    a35[419] = v66;
    operator delete(v66);
  }
  a35[405] = off_250401A20;
  v67 = (void *)a35[407];
  if (v67)
  {
    a35[408] = v67;
    operator delete(v67);
  }
  a35[394] = off_250401A20;
  v68 = (void *)a35[396];
  if (v68)
  {
    a35[397] = v68;
    operator delete(v68);
  }
  _Unwind_Resume(a1);
}

int8x16_t AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildScratchEncodedState(int *a1, MTLPixelFormat a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, char a9, unsigned __int8 a10)
{
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int8x16_t result;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t GPUVirtualAddress;
  int v37;
  uint64_t v38;
  unint64_t *v39;
  int8x16_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int8x16_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unsigned int v67;
  uint64_t v71;
  unsigned int v72;
  __int128 v73;
  uint64_t v74;
  int v75[3];

  v13 = 181888;
  v14 = *(_QWORD *)(a4 + 32);
  v15 = 55;
  if (v14 == 250)
    v15 = 20;
  if (a3)
    v16 = 13;
  else
    v16 = v15;
  v17 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC((AGX::G9::TextureFormatTable *)v16, a2);
  v19 = (uint64_t *)v17;
  v20 = *(_QWORD *)(a4 + 380) >> 16;
  v21 = *(_QWORD *)(a4 + 56);
  LOWORD(v75[0]) = 513;
  BYTE2(v75[0]) = v20;
  *(_QWORD *)&v75[1] = v21;
  v22 = *(_DWORD *)(a4 + 112);
  v23 = HIDWORD(v21);
  v72 = *((_DWORD *)v17 + 10);
  v24 = *((_QWORD *)v17 + 2);
  if (v22 >= 2)
  {
    if (v14 == 250)
    {
      v25 = v72 > 0x32 || ((1 << v72) & 0x4000800000200) == 0;
      v26 = 2;
      if (v25)
        v26 = *((_QWORD *)v17 + 2);
      if (v24 <= 1)
        v24 = v26;
    }
    else
    {
      v27 = v24 == 4;
      v28 = v72 == 33;
      if (v28 && v27)
      {
        v24 = 2;
        v13 = 181888;
      }
      else
      {
        v13 = *((_DWORD *)v17 + 17);
      }
      if (v28 && v27)
        v29 = 35;
      else
        v29 = *((_DWORD *)v17 + 10);
      v72 = v29;
    }
  }
  v30 = a10;
  v31 = (int *)MEMORY[0x24BE51650];
  if (a9)
  {
    v62 = v24;
    v64 = a6;
    v59 = *(_QWORD *)v17;
    v58 = *((_QWORD *)v17 + 1);
    v32 = *(_QWORD *)(a4 + 128);
    v33 = v13;
    v34 = *(_DWORD *)(a4 + 136);
    a6 = v23;
    v35 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a4, a8);
    GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a4, a5, 0, a7, a8);
    v57 = v35;
    v23 = a6;
    v56 = v34;
    v13 = v33;
    v55 = v32;
    v37 = v75[0];
    v38 = a6;
    v24 = v62;
    LODWORD(a6) = v64;
    v39 = AGX::ImageStateEncoderGen2<kAGXRevG9>::ImageStateFields::ImageStateFields((unint64_t *)&v73, v75[0], v38, v59, v58, 0, v33, 0, v55, SHIDWORD(v55), v56, 1u, v22, 0, 0, v57, 0, GPUVirtualAddress, 0,
            0,
            0,
            0);
    *(_OWORD *)(a2 + 24) = v73;
    *(_QWORD *)(a2 + 40) = v74;
    v40.i64[0] = v64 << 57;
    v40.i64[1] = v64 & 0xFFFFFFEF | (16 * (*(_DWORD *)(a4 + 64) > 1u));
    *(int8x16_t *)(a2 + 24) = vorrq_s8(vandq_s8(*(int8x16_t *)(a2 + 24), (int8x16_t)xmmword_232D73430), v40);
    v41 = *(_DWORD *)(a4 + 128) >> (*(_BYTE *)(a4 + 144) + v64);
    if (v41 <= 1)
      v41 = 1;
    v42 = *(_DWORD *)(a4 + 132) >> (*(_BYTE *)(a4 + 144) + v64);
    if (v42 <= 1)
      v42 = 1;
    AGX::PBEStateEncoderGen3<kAGXRevG9>::StateFields::StateFields(v39, 0, v72, v62, 0, v33, v37, v23, 0, 0, 0, 0, *(_QWORD *)(*(_QWORD *)a2 + (int)*MEMORY[0x24BE51650] + 72), 0, 0, 0, *a1, a1[1], 1u,
      1u,
      0,
      0,
      0,
      0,
      v41,
      v42,
      0,
      0,
      0);
    v31 = (int *)MEMORY[0x24BE51650];
    result.i64[0] = v73;
    *(_OWORD *)(a2 + 48) = v73;
    *(_QWORD *)(a2 + 64) = v74;
    v30 = a10;
  }
  if (v30)
  {
    v65 = v75[0];
    AGX::ImageStateEncoderGen2<kAGXRevG9>::ImageStateFields::ImageStateFields((unint64_t *)&v73, v75[0], v23, *v19, v19[1], 0, v13, 0, *a1, a1[1], 1u, 1u, *(_DWORD *)(a4 + 112), 0, 0, 0, 0, *(_QWORD *)(*(_QWORD *)a2 + *v31 + 72), 0,
      0,
      0,
      0);
    *(_OWORD *)(a2 + 72) = v73;
    *(_QWORD *)(a2 + 88) = v74;
    v67 = *(_DWORD *)(a4 + 192);
    v61 = *(_DWORD *)(a4 + 308);
    v63 = v13;
    v60 = *(_DWORD *)(a4 + 312);
    v43 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a4, a5, 0, a7, a8);
    v44 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a4, a8);
    v71 = v23;
    v45 = *(_DWORD *)(a4 + 128);
    v46 = *(_DWORD *)(a4 + 132);
    v47 = *(_QWORD *)(a4 + 136);
    v48 = v24;
    v49 = *(_DWORD *)(a4 + 376);
    v50 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a4, 0);
    v51 = v45 >> (*(_BYTE *)(a4 + 144) + a6);
    if (v51 <= 1)
      v51 = 1;
    v52 = v46 >> (*(_BYTE *)(a4 + 144) + a6);
    if (v52 <= 1)
      v52 = 1;
    AGX::PBEStateEncoderGen3<kAGXRevG9>::StateFields::StateFields((unint64_t *)&v73, 0, v72, v48, v67, v63, v65, v71, 0, v61, v60, 0, v43, 0, v44, 0, v45, v46, v47,
      HIDWORD(v47),
      v49,
      v50,
      0,
      0,
      v51,
      v52,
      0,
      0,
      0);
    *(_OWORD *)(a2 + 96) = v73;
    *(_QWORD *)(a2 + 112) = v74;
    v53 = (*(_DWORD *)(a4 + 144) + a6);
    v54.i64[0] = v53 << 57;
    v54.i64[1] = v53 & 0xFFFFFFFFFFFFFFEFLL | (16 * ((_DWORD)v53 != 0));
    result = vorrq_s8(vandq_s8(*(int8x16_t *)(a2 + 96), (int8x16_t)xmmword_232D73430), v54);
    *(int8x16_t *)(a2 + 96) = result;
  }
  return result;
}

uint64_t AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addAPIResources(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 2980);
  if (v6)
  {
    if (!a2)
      goto LABEL_9;
    do
    {
      result = MTLResourceListAddResource();
      v6 ^= 1 << __clz(__rbit32(v6));
    }
    while (v6);
  }
  v7 = *(_DWORD *)(v5 + 2984);
  if (v7)
    v8 = a2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      result = MTLResourceListAddResource();
      v7 ^= 1 << __clz(__rbit32(v7));
    }
    while (v7);
  }
LABEL_9:
  if (*(_QWORD *)(v5 + 1952))
  {
    if (a2)
      result = MTLResourceListAddResource();
    if (a3 && *(_QWORD *)(v5 + 8))
      result = MTLResourceListAddResource();
  }
  if (*(_QWORD *)(v5 + 1960))
  {
    if (a2)
      result = MTLResourceListAddResource();
    if (a3 && *(_QWORD *)(v5 + 128))
      result = MTLResourceListAddResource();
  }
  if (a2 && *(_QWORD *)(v5 + 2944))
    result = MTLResourceListAddResource();
  if (*(_QWORD *)(v5 + 3808))
  {
    if (!a2)
      return result;
    result = MTLResourceListAddResource();
  }
  if (a2)
  {
    if (*(_QWORD *)(v5 + 3816))
      return MTLResourceListAddResource();
  }
  return result;
}

uint64_t AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::addGPUResources(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4;
  unsigned int i;
  unsigned int j;

  v4 = result;
  if ((a3 & 1) != 0)
  {
    for (i = *(_DWORD *)(result + 2980) & ~*(_DWORD *)(result + 3660); i; i ^= 1 << __clz(__rbit32(i)))
      result = IOGPUResourceListAddResource();
  }
  if ((a3 & 2) != 0)
  {
    for (j = *(_DWORD *)(v4 + 2984); j; j ^= 1 << __clz(__rbit32(j)))
      result = IOGPUResourceListAddResource();
  }
  if (*(_QWORD *)(v4 + 1952))
  {
    if ((a3 & 4) != 0 && (*(_DWORD *)(v4 + 3660) & 0x100) == 0)
    {
      result = IOGPUResourceListAddResource();
      if (*(_QWORD *)(v4 + 8))
        result = IOGPUResourceListAddResource();
    }
  }
  if (*(_QWORD *)(v4 + 1960))
  {
    if ((a3 & 0x10) != 0 && (*(_DWORD *)(v4 + 3660) & 0x200) == 0)
    {
      result = IOGPUResourceListAddResource();
      if (*(_QWORD *)(v4 + 128))
        result = IOGPUResourceListAddResource();
    }
  }
  if ((a3 & 0x40) != 0 && *(_QWORD *)(v4 + 2944))
    result = IOGPUResourceListAddResource();
  if ((a3 & 8) != 0 && *(_QWORD *)(v4 + 3808))
    result = IOGPUResourceListAddResource();
  if ((a3 & 0x20) != 0)
  {
    if (*(_QWORD *)(v4 + 3816))
      return IOGPUResourceListAddResource();
  }
  return result;
}

uint64_t AGX::FramebufferGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::finalizeStoreActions(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;

  v1 = *(_DWORD *)(result + 3640);
  v2 = *(_DWORD *)(result + 3648);
  v3 = *(_DWORD *)(result + 3644);
  v4 = *(_DWORD *)(result + 3652) & ~(v2 | v1 | v3);
  *(_DWORD *)(result + 3652) = v4;
  v5 = *(_DWORD *)(result + 3636);
  *(_BYTE *)(result + 2921) = ((v4 | v1) & v5) != 0;
  *(_BYTE *)(result + 2929) = ((v4 | v1) & ~v5) != 0;
  v6 = *(_DWORD *)(result + 2984) & v4;
  *(_BYTE *)(result + 1882) = (v6 | v2) != 0;
  if (*(_BYTE *)(result + 2930))
    v7 = 0;
  else
    v7 = *(_DWORD *)(result + 3632);
  v8 = (v7 | v5) & v2 | v6;
  v9 = (*(_DWORD *)(result + 3632) & (v4 | v1)) != 0 && *(_BYTE *)(result + 2930) == 0;
  if (v8)
    v10 = 1;
  else
    v10 = v9;
  *(_BYTE *)(result + 2928) = v10;
  if ((v4 & 0x200) != 0)
  {
    v1 |= 0x200u;
    *(_DWORD *)(result + 3640) = v1;
    v2 |= 0x200u;
    *(_DWORD *)(result + 3648) = v2;
    v3 &= ~0x200u;
    *(_DWORD *)(result + 3644) = v3;
    *(_WORD *)(result + 3116) &= ~8u;
    v4 &= ~0x200u;
    *(_DWORD *)(result + 3652) = v4;
    if ((v4 & 0x100) == 0)
    {
LABEL_12:
      v11 = *(_QWORD *)(result + 3856);
      if (!v11)
        goto LABEL_20;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v1 |= 0x100u;
  *(_DWORD *)(result + 3640) = v1;
  v2 |= 0x100u;
  *(_DWORD *)(result + 3648) = v2;
  *(_DWORD *)(result + 3644) = v3 & 0xFFFFFEFF;
  *(_WORD *)(result + 3116) &= ~2u;
  *(_DWORD *)(result + 3652) = v4 & 0xFFFFFEFF;
  v11 = *(_QWORD *)(result + 3856);
  if (!v11)
    goto LABEL_20;
LABEL_16:
  if ((v2 & 0x100) != 0)
  {
    v12 = *(unsigned int *)(result + 3872);
    if ((_DWORD)v12)
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      v14 = v12 << 58;
      if ((v1 & 0x100) != 0)
      {
        *(_QWORD *)(result + 3080) = *(_QWORD *)(result + 3080) & 0xFFFFFF0000000001 | v13;
        *(_QWORD *)(result + 3056) = *(_QWORD *)(result + 3056) & 0xF3FFFFFFFFFFFFFFLL | v14;
        *(_WORD *)(result + 3110) |= 3u;
        *(_BYTE *)(result + 2988) = 1;
        v15 = *(_QWORD *)(result + 3864);
        if (!v15)
          return result;
        goto LABEL_21;
      }
      *(_QWORD *)(result + 3032) = *(_QWORD *)(result + 3032) & 0xFFFFFF0000000001 | v13;
      *(_QWORD *)(result + 3008) = *(_QWORD *)(result + 3008) & 0xF3FFFFFFFFFFFFFFLL | v14;
      *(_WORD *)(result + 3108) |= 2u;
      *(_WORD *)(result + 3106) |= (*(_WORD *)(result + 3114) & 1) == 0;
    }
  }
LABEL_20:
  v15 = *(_QWORD *)(result + 3864);
  if (!v15)
    return result;
LABEL_21:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(v16) = *(_DWORD *)(result + 3876);
    if ((_DWORD)v16)
    {
      v17 = *(_DWORD *)(result + 3872);
      v18 = v15 & 0xFFFFFFFFFFFFFFF0 | 1;
      if (v17)
        v16 = v17;
      else
        v16 = v16;
      v19 = v16 << 58;
      if ((v1 & 0x200) != 0)
      {
        *(_QWORD *)(result + 3096) = v18;
        *(_QWORD *)(result + 3056) = *(_QWORD *)(result + 3056) & 0xF3FFFFFFFFFFFFFFLL | v19;
        *(_WORD *)(result + 3110) |= 0xCu;
        *(_BYTE *)(result + 2988) = 1;
      }
      else
      {
        *(_QWORD *)(result + 3048) = v18;
        *(_QWORD *)(result + 3008) = *(_QWORD *)(result + 3008) & 0xF3FFFFFFFFFFFFFFLL | v19;
        *(_WORD *)(result + 3108) |= 8u;
        *(_WORD *)(result + 3106) |= ~*(_WORD *)(result + 3114) & 4;
      }
    }
  }
  return result;
}

uint64_t AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v25;
  int v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  __int16 v32;

  v1 = 0;
  v2 = *(unsigned __int8 *)(result + 40);
  v3 = v2;
  do
  {
    v4 = v3;
    if (!v3)
      break;
    v5 = __clz(__rbit32(v3));
    v6 = *(_QWORD *)(result + 8 * v5 + 96);
    v7 = *(_DWORD *)(v6 + 32);
    v8 = *(unsigned __int8 *)(result + 84) >= 2u && v7 == 3;
    if (v8 || ((v9 = 1 << v7, v7 <= 0x15) ? (v10 = ((1 << v7) & 0x3C000C) == 0) : (v10 = 1), !v10))
    {
      v11 = *(_DWORD *)(v6 + 28);
LABEL_12:
      v11 *= 2;
      goto LABEL_13;
    }
    if (v7 > 0x16)
      goto LABEL_20;
    v11 = *(_DWORD *)(v6 + 28);
    if ((v9 & 0x41F3C0) != 0)
      goto LABEL_12;
    if ((v9 & 0x20C00) != 0)
    {
      v11 *= 4;
    }
    else if ((v9 & 0x30) == 0)
    {
LABEL_20:
      v11 = 0;
    }
LABEL_13:
    v1 += ((unint64_t)v11 + 3) >> 2;
    v3 = (1 << v5) ^ v4;
  }
  while (v1 < 9);
  v12 = 1;
  if (*(_BYTE *)(result + 40))
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = __clz(__rbit32(v2));
      v16 = *(_DWORD **)(result + 8 * v15 + 96);
      v17 = *(unsigned __int8 *)(result + 84);
      v18 = v16[7];
      v19 = v16[8];
      v20 = v17 > 1 && v19 == 2;
      v21 = v20;
      if (v17 < 2)
        break;
      v22 = v16[21] != 0;
      if (v19 != 3)
        goto LABEL_34;
LABEL_42:
      v25 = 0;
      LOBYTE(v26) = 14;
LABEL_54:
      v18 *= 2;
      LOBYTE(v19) = v26;
LABEL_55:
      v28 = 4 * v15;
      v29 = v25 & 0xFFF00FFF | (v13 << 12) | v19 & 0x1F | *(_DWORD *)(result + 4 * v15) & 0xFFF00EE0;
      *(_DWORD *)(result + v28) = v29;
      v30 = v29 & 0xFFFFF1FF | ((v16[19] & 7) << 9);
      *(_DWORD *)(result + v28) = v30;
      v31 = v30 & 0xFFFFFF1F | (32 * (v16[7] & 7));
      *(_DWORD *)(result + v28) = v31;
      if ((v14 & (1 << v15)) != 0)
        *(_DWORD *)(result + 4 * v15) = v31 & 0xFFFFF1FF | ((v16[17] == 173824) << 9);
      v13 += ((unint64_t)v18 + 3) >> 2;
      v2 ^= 1 << v15;
      if (!v2)
      {
        if (v13 < 2)
        {
          v12 = 1;
        }
        else if (v13 >= 5)
        {
          v12 = 8;
        }
        else
        {
          v12 = 1 << -__clz(v13 - 1);
        }
        goto LABEL_63;
      }
    }
    v22 = 0;
LABEL_34:
    if (v21 || v22 || v4 == 0 || v18 <= 2)
    {
      v25 = 0;
      LOBYTE(v26) = 13;
      switch(v19)
      {
        case 2u:
          goto LABEL_54;
        case 3u:
        case 0x13u:
          goto LABEL_42;
        case 0x12u:
          v25 = 0;
          LOBYTE(v26) = 9;
          goto LABEL_54;
        case 0x14u:
        case 0x15u:
          v25 = 0;
          LOBYTE(v26) = 12;
          goto LABEL_54;
        default:
          goto LABEL_50;
      }
    }
    if (v19 > 0x12 || ((1 << v19) & 0x4000C) == 0)
    {
      v25 = 0;
    }
    else
    {
      v14 |= 1 << v15;
      v25 = (v16[21] != 0) << 8;
    }
LABEL_50:
    v26 = v16[8];
    switch(v19)
    {
      case 2u:
      case 3u:
      case 4u:
      case 5u:
        goto LABEL_55;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x16u:
        goto LABEL_54;
      case 0xAu:
      case 0xBu:
      case 0x11u:
        v18 *= 4;
        break;
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
        v18 = 4;
        break;
      default:
        v18 = 0;
        break;
    }
    goto LABEL_55;
  }
  v14 = 0;
LABEL_63:
  if (v12 <= 2)
    v32 = 2;
  else
    v32 = v12;
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFE000000 | ((v32 & 0x1FF) << 16) | ((*(_BYTE *)(result + 84) & 0xF) << 8) & 0xFFF | ((*(_BYTE *)(result + 85) & 0xF) << 12) | *(unsigned __int8 *)(result + 40);
  *(_DWORD *)(result + 44) = v14;
  return result;
}

unint64_t *AGX::ImageStateEncoderGen2<kAGXRevG9>::ImageStateFields::ImageStateFields(unint64_t *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, int a8, int a9, int a10, unsigned int a11, unsigned int a12, int a13, unsigned int a14, uint64_t a15, unint64_t a16, unint64_t a17, unint64_t a18, unint64_t a19, unsigned int a20,int a21,int a22)
{
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  result[1] = 0;
  result[2] = 0;
  v22 = result + 1;
  if ((_BYTE)a2)
  {
    switch(BYTE1(a2))
    {
      case 1:
        if (BYTE2(a2))
        {
          if ((a2 & 0x10000) == 0)
            goto LABEL_19;
          v23 = 1;
        }
        else
        {
          v23 = 0;
        }
        break;
      case 2:
        v23 = 2;
        if (!BYTE2(a2) || (a2 & 0x40000) != 0)
          break;
        if ((a2 & 0x10000) != 0)
        {
          v23 = 3;
        }
        else
        {
          if ((a2 & 0x20000) == 0)
            goto LABEL_19;
          v23 = 4;
        }
        break;
      case 3:
        if (BYTE2(a2))
          v23 = -1;
        else
          v23 = 5;
        break;
      case 4:
        if (BYTE2(a2))
          goto LABEL_19;
        v23 = 6;
        break;
      default:
        goto LABEL_19;
    }
  }
  else if (BYTE1(a2) != 2 || (v23 = 2, BYTE2(a2)) && (a2 & 0x40000) == 0)
  {
LABEL_19:
    v23 = -1;
  }
  if (a2 == 1)
    v24 = 8;
  else
    v24 = -8;
  if ((_BYTE)a2)
    v25 = v24;
  else
    v25 = 0;
  v26 = (a7 >> 6) & 7;
  if (v26 > 5)
    v27 = -32768;
  else
    v27 = qword_232D76480[v26];
  v28 = (a7 >> 9) & 7;
  if (v28 > 5)
    v29 = -262144;
  else
    v29 = qword_232D764B0[v28];
  v30 = (a5 << 12) | (32 * a4) | v23;
  v31 = (a7 >> 12) & 7;
  if (v31 > 5)
    v32 = -2097152;
  else
    v32 = qword_232D764E0[v31];
  v33 = v30 | v25;
  v34 = (a7 >> 15) & 7;
  v35 = a10;
  if (v34 > 5)
    v36 = -16777216;
  else
    v36 = qword_232D76510[v34];
  v37 = a6 & 0xFFFFFFFD;
  v38 = v37 == 1;
  if (v37 == 1)
    v39 = a10;
  else
    v39 = a9;
  if (v38)
    v35 = a9;
  v40 = (v39 - 1);
  v41 = (unint64_t)(v35 - 1) << 41;
  v42 = 0x100000000000000;
  if (a13 != 8)
    v42 = (unint64_t)(a13 == 4) << 55;
  *result = v41 | (v40 << 27) | v42 | v27 | v29 | v32 | v36 | v33;
  v43 = (a18 >> 1) & 0x7FFFFFFFFFFFFFE0;
  v44 = (a18 >> 4) & 3;
  if (a16 <= 0xF)
    v45 = 0;
  else
    v45 = (a16 >> 4) - 1;
  if (v44 || !(_BYTE)a2 && (a19 || (v45 & 3) != 3))
  {
    v46 = v44 << 58;
    result[2] = v44 << 58;
    v47 = 1;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  if (BYTE1(a2) == 2)
  {
    if ((a2 & 0x40000) != 0 && a22 != 1)
    {
      switch(a21)
      {
        case 1:
          v48 = a22 == 2;
          v49 = 0xC0000000000;
          goto LABEL_67;
        case 2:
          v48 = a22 == 2;
          v49 = 0x100000000000;
          goto LABEL_69;
        case 3:
          v49 = 0x40000000000;
          goto LABEL_72;
        case 4:
          v49 = 0x80000000000;
          goto LABEL_72;
        case 5:
          v48 = a22 == 2;
          v49 = 0x140000000000;
LABEL_67:
          v50 = 0x40000000000;
          goto LABEL_70;
        case 6:
          v48 = a22 == 2;
          v49 = 0x180000000000;
LABEL_69:
          v50 = 0x80000000000;
LABEL_70:
          if (v48)
            v49 = v50;
LABEL_72:
          v43 |= v49;
          break;
        default:
          goto LABEL_73;
      }
      goto LABEL_73;
    }
    if ((a2 & 0x40000) != 0)
LABEL_73:
      v43 |= (unint64_t)a20 << 39;
  }
  if ((a8 - 1) > 3)
  {
    if ((_BYTE)a2)
      goto LABEL_76;
  }
  else
  {
    v43 |= qword_232D76540[a8 - 1];
    if ((_BYTE)a2)
    {
LABEL_76:
      v51 = a14;
      if (a14 < 2)
        v51 = a11;
      v52 = v43 | ((unint64_t)(v51 - 1) << 47);
      *v22 = v52;
      goto LABEL_85;
    }
  }
  v52 = v43 | (v45 >> 2 << 47);
  *v22 = v52;
  if (v47)
  {
    if (a17 <= 0xF)
      v53 = 0;
    else
      v53 = (a17 >> 4 << 34) - 0x400000000;
    result[2] = (a19 >> 6) | ((unint64_t)v45 << 62) | v53 | (a19 << 56) & 0x3000000000000000 | v46;
  }
LABEL_85:
  if (a2 == 1)
  {
    v54 = (BYTE1(a2) - 1 < 2) & BYTE2(a2);
    if (BYTE1(a2) - 3 < 2)
      v54 = 1;
    v38 = (v54 & ((a15 & 0xFFFFFFFFFFFFC000) != 0)) == 0;
    v55 = 0x2000000000000000;
    if (v38)
      v55 = 0;
    v52 |= (a12 - 1) | (16 * (a12 > 1)) | v55;
    *v22 = v52;
  }
  if (v47)
    *v22 = v52 | 0x8000000000000000;
  else
    result[2] = 0;
  return result;
}

void sub_232C9D834(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 199) < 0)
    operator delete(*v2);
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 144));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 120));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 96));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 72));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 48));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(v1 + 24));
  MEMORY[0x234927ECC](v1, 0x1032C40E5532501);
  _Unwind_Resume(a1);
}

void std::default_delete<AGX::G9::IndirectArgumentLayout>::operator()[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 144));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 120));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 96));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 72));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 48));
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 24));
  JUMPOUT(0x234927ECCLL);
}

_QWORD *AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::parseStruct(uint64_t a1, uint64_t a2, void *a3, int *a4, _DWORD *a5, int a6)
{
  std::string *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void **v24;
  std::string::size_type v25;
  uint64_t v26;
  int v27;
  void *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  _QWORD *result;
  uint64_t v35;
  std::string *v36;
  unsigned __int16 v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v47;
  std::string *v48;
  _BYTE v49[16];
  void *__p[2];
  unsigned __int8 v51;
  unsigned int v52;
  unsigned int v53;

  v53 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = (std::string *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v48 = (std::string *)(a1 + 16);
  *(_DWORD *)(a1 + 4) = AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::structAlignment(a3);
  std::string::push_back(v10, 123);
  v11 = objc_msgSend((id)objc_msgSend(a3, "members"), "count");
  v44 = v11;
  if (v11)
  {
    v12 = 0;
    v47 = 0;
    v13 = v11;
    while (1)
    {
      v14 = (void *)objc_msgSend((id)objc_msgSend(a3, "members"), "objectAtIndex:", v12);
      v15 = objc_msgSend(v14, "dataType");
      v16 = v15;
      switch(v15)
      {
        case 1:
          v22 = objc_msgSend(v14, "structType");
          v18 = 1;
LABEL_17:
          AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::assignOffsets((_QWORD *)a2, a3, a4, &v53, a6, v47, v12, *(_DWORD *)(a1 + 4));
          v23 = objc_msgSend(v14, "indirectArgumentIndex");
          v52 = 0;
          if (!v18)
          {
            LODWORD(v26) = 0;
            goto LABEL_41;
          }
          AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::parseStruct(v49, a2, v22, a4, &v52, (v23 + a6));
          *(_BYTE *)(a1 + 8) |= v49[8];
          if ((v51 & 0x80u) == 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          if ((v51 & 0x80u) == 0)
            v25 = v51;
          else
            v25 = (std::string::size_type)__p[1];
          std::string::append(v48, (const std::string::value_type *)v24, v25);
          v26 = v52;
          if ((char)v51 < 0)
          {
            operator delete(__p[0]);
            v27 = v18 - 1;
            if (!v27)
              goto LABEL_41;
          }
          else
          {
            v27 = v18 - 1;
            if (!v27)
              goto LABEL_41;
          }
          do
          {
            AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::parseStruct(v49, a2, v22, a4, &v52, v26);
            v26 = v52;
            if ((char)v51 < 0)
              operator delete(__p[0]);
            --v27;
          }
          while (v27);
LABEL_41:
          v33 = v53;
          if (v53 <= v26)
            v33 = v26;
          v53 = v33;
          v47 = v12 + 1;
          goto LABEL_4;
        case 2:
          v28 = (void *)objc_msgSend(v14, "arrayType");
          v16 = objc_msgSend(v28, "elementType");
          v18 = objc_msgSend(v28, "arrayLength");
          std::string::push_back(v48, v18);
          switch(v16)
          {
            case 1:
              v22 = objc_msgSend(v28, "elementStructType");
              goto LABEL_17;
            case 2:
              goto LABEL_4;
            case 58:
            case 59:
            case 60:
            case 78:
            case 79:
            case 80:
              *(_BYTE *)(a1 + 8) = 1;
              std::string::push_back(v48, v16);
              v17 = 0;
              goto LABEL_7;
            default:
              v17 = (void *)objc_msgSend(v28, "elementIndirectArgumentType");
              std::string::push_back(v48, objc_msgSend(v17, "indirectConstantDataType"));
              goto LABEL_7;
          }
        case 58:
        case 59:
        case 60:
        case 78:
        case 79:
        case 80:
          std::string::push_back(v48, v15);
          v17 = 0;
          v18 = 1;
          *(_BYTE *)(a1 + 8) = 1;
          break;
        default:
          v17 = (void *)objc_msgSend(v14, "indirectArgumentType");
          std::string::push_back(v48, objc_msgSend(v17, "indirectConstantDataType"));
          v18 = 1;
          break;
      }
LABEL_7:
      switch(v16)
      {
        case ':':
          v19 = a4 + 1;
          goto LABEL_10;
        case ';':
          v19 = a4 + 2;
LABEL_10:
          v20 = *v19;
          goto LABEL_11;
        case '<':
        case 'N':
        case 'O':
        case 'P':
          *a4 += v18;
          goto LABEL_4;
        default:
          v21 = objc_msgSend(v17, "type");
          switch(v21)
          {
            case 3:
              v29 = objc_msgSend(v17, "arrayLength");
              if (v29 <= 1)
                v30 = 1;
              else
                v30 = v29;
              v20 = v30 * v18;
              v19 = a4 + 2;
              goto LABEL_39;
            case 2:
              v31 = objc_msgSend(v17, "arrayLength");
              if (v31 <= 1)
                v32 = 1;
              else
                v32 = v31;
              v20 = v32 * v18;
              v19 = a4 + 1;
LABEL_39:
              v18 = *v19;
              goto LABEL_11;
            case 0:
              v20 = *a4;
              v19 = a4;
LABEL_11:
              *v19 = v20 + v18;
              break;
          }
LABEL_4:
          if (++v12 == v13)
            goto LABEL_50;
          break;
      }
    }
  }
  v47 = 0;
LABEL_50:
  std::string::push_back(v48, 125);
  result = AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::assignOffsets((_QWORD *)a2, a3, a4, &v53, a6, v47, v44, *(_DWORD *)(a1 + 4));
  *a5 = v53;
  if (*(_BYTE *)(a1 + 8))
  {
    v35 = *(unsigned __int8 *)(a1 + 39);
    v36 = v48;
    if ((v35 & 0x80u) != 0)
    {
      v36 = *(std::string **)(a1 + 16);
      v35 = *(_QWORD *)(a1 + 24);
    }
    if (v35)
    {
      v37 = -1;
      do
      {
        v38 = v36->__r_.__value_.__s.__data_[0];
        v36 = (std::string *)((char *)v36 + 1);
        v37 = crc_table[v38 ^ ((unsigned __int16)(v37 & 0xFF00) >> 8)] ^ (v37 << 8);
        --v35;
      }
      while (v35);
      v39 = v37 | 0x7FE00000;
    }
    else
    {
      v39 = 2145452031;
    }
    *(_DWORD *)a2 = v39;
    v42 = (a4[3] + 3) & 0xFFFFFFFC;
    *(_DWORD *)(a2 + 4) = v42;
    v41 = *(_DWORD *)(a1 + 4);
    if (v41 <= 4)
      v41 = 4;
    *(_DWORD *)(a1 + 4) = v41;
    v40 = v42 + 4;
    a4[3] = v40;
  }
  else
  {
    v40 = a4[3];
    v41 = *(_DWORD *)(a1 + 4);
  }
  v43 = (v40 + v41 - 1) & -v41;
  a4[3] = v43;
  *(_DWORD *)a1 = v43;
  return result;
}

void sub_232C9E350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
  {
    operator delete(__p);
    if (*(char *)(v24 + 39) < 0)
    {
LABEL_5:
      operator delete(*a16);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v24 + 39) < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::structAlignment(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v1 = (void *)objc_msgSend(a1, "members", 0);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v17;
    LODWORD(v5) = 1;
LABEL_4:
    v6 = 0;
    while (2)
    {
      if (*(_QWORD *)v17 != v4)
        objc_enumerationMutation(v1);
      v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v6);
      v9 = objc_msgSend(v8, "dataType") - 1;
      v7 = 8;
      switch(v9)
      {
        case 0:
          v10 = objc_msgSend(v8, "structType");
          goto LABEL_16;
        case 1:
          for (i = (void *)objc_msgSend(v8, "arrayType"); ; i = (void *)objc_msgSend(v12, "elementArrayType"))
          {
            v12 = i;
            v13 = objc_msgSend(i, "elementType");
            if (v13 != 2)
              break;
          }
          if ((unint64_t)(v13 - 58) <= 0x16 && ((1 << (v13 - 58)) & 0x700007) != 0)
            goto LABEL_7;
          if (v13 == 1)
          {
            v10 = objc_msgSend(v12, "elementStructType");
LABEL_16:
            v7 = AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::structAlignment(v10);
          }
          else
          {
            v14 = (void *)objc_msgSend(v12, "elementIndirectArgumentType");
            if (objc_msgSend(v14, "type") == 4)
LABEL_21:
              v7 = objc_msgSend(v14, "indirectConstantAlignment");
            else
LABEL_7:
              v7 = 8;
          }
LABEL_8:
          if (v5 <= v7)
            v5 = v7;
          else
            v5 = v5;
          if (++v6 != v3)
            continue;
          v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          if (v3)
            goto LABEL_4;
          return v5;
        case 57:
        case 58:
        case 59:
        case 77:
        case 78:
        case 79:
          goto LABEL_8;
        default:
          v14 = (void *)objc_msgSend(v8, "indirectArgumentType");
          if (objc_msgSend(v14, "type") == 4)
            goto LABEL_21;
          goto LABEL_7;
      }
    }
  }
  return 1;
}

_QWORD *AGX::IndirectArgumentLayoutGen1<AGX::G9::Encoders>::assignOffsets(_QWORD *result, void *a2, _DWORD *a3, unsigned int *a4, int a5, unsigned int a6, unsigned int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  int v21;
  void *v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t **v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t **v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t **v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t **v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t **v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t **v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t *v93;
  uint64_t **v94;
  unsigned int v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t **v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t **v107;
  uint64_t **v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t **v117;
  unsigned int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _BYTE *v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  void *v135;
  BOOL v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  BOOL v143;
  void *v144;
  unsigned int v145;
  int v146;
  void *v147;
  unsigned int v148;
  uint64_t *v149;
  uint64_t **v150;
  uint64_t **v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t **v158;
  unsigned int v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t **v164;
  uint64_t **v165;
  unsigned int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  unsigned int v170;
  int v171;
  int v172;
  uint64_t *v173;
  uint64_t **v174;
  uint64_t **v175;
  unsigned int v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t **v182;
  unsigned int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t **v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t **v194;
  uint64_t *v195;
  uint64_t **v196;
  unsigned int v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t **v202;
  uint64_t **v203;
  unsigned int v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *v207;
  unsigned int v208;
  int v209;
  int v210;
  uint64_t *v211;
  uint64_t **v212;
  uint64_t **v213;
  unsigned int v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t **v218;
  uint64_t *v219;
  uint64_t **v220;
  unsigned int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t **v227;
  unsigned int v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t **v233;
  uint64_t **v234;
  unsigned int v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t *v238;
  int v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t **v242;
  uint64_t **v243;
  unsigned int v244;
  int v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t **v249;
  uint64_t *v250;
  uint64_t **v251;
  unsigned int v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t *v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v261;
  unsigned int v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  int v268;
  uint64_t v269;
  uint64_t **v271;
  int v272;
  int v273;
  int v274;
  void *v275;
  uint64_t **v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  uint64_t **v289;

  v8 = a3[1];
  v9 = 8 * *a3;
  v10 = a3[2];
  v11 = 8 * v10;
  v12 = 8 * v8;
  if (*a3 | v8 | v10)
    v13 = 7;
  else
    v13 = 0;
  if (!a6)
    v13 = a8 - 1;
  v14 = (a3[3] + v13) & ~v13;
  v15 = v14 + v9;
  v288 = v14 + v9 + (v8 << 6);
  v287 = v288 + v11;
  v16 = v288 + v11 + 56 * v8;
  v273 = 8 * v10;
  v264 = v16 + v12 + v11;
  *(_QWORD *)a3 = 0;
  a3[2] = 0;
  if (a6 < a7)
  {
    v17 = result;
    v277 = v16 + v12;
    v278 = v288 + v11 + 56 * v8;
    v272 = 32 * v8;
    v18 = (uint64_t **)(result + 3);
    v289 = (uint64_t **)(result + 6);
    v276 = (uint64_t **)(result + 9);
    v19 = (uint64_t **)(result + 18);
    v271 = (uint64_t **)(result + 12);
    v20 = a6;
    v266 = a7;
    v261 = (uint64_t **)(result + 15);
    v262 = 1;
    v21 = 1;
    while (1)
    {
      v269 = v20;
      v22 = (void *)objc_msgSend((id)objc_msgSend(a2, "members"), "objectAtIndex:", v20);
      v279 = objc_msgSend(v22, "dataType");
      v286 = 1;
      v282 = a5;
      v23 = 1;
      switch(v279)
      {
        case 1:
          goto LABEL_11;
        case 2:
          v135 = (void *)objc_msgSend(v22, "arrayType");
          v279 = objc_msgSend(v135, "elementType");
          v136 = (unint64_t)(v279 - 58) > 0x16 || ((1 << (v279 - 58)) & 0x700007) == 0;
          if (!v136)
          {
            v282 = objc_msgSend(v22, "indirectArgumentIndex") + a5;
LABEL_233:
            result = (_QWORD *)objc_msgSend(v135, "arrayLength");
            goto LABEL_234;
          }
          v282 = a5;
          if ((unint64_t)(v279 - 1) < 2)
            goto LABEL_233;
          v258 = objc_msgSend(v135, "elementIndirectArgumentType");
          result = (_QWORD *)objc_msgSend(v135, "arrayLength");
          v138 = v258 == 0;
          v275 = (void *)v258;
          if (v258)
          {
            v286 = (int)result;
            goto LABEL_208;
          }
          v282 = a5;
LABEL_234:
          v23 = 1;
          v286 = (int)result;
          if ((_DWORD)result)
            goto LABEL_11;
          v139 = v269;
          goto LABEL_394;
        case 58:
        case 59:
        case 60:
        case 78:
        case 79:
        case 80:
          v282 = objc_msgSend(v22, "indirectArgumentIndex") + a5;
          v286 = 1;
          goto LABEL_10;
        default:
          v137 = objc_msgSend(v22, "indirectArgumentType");
          v138 = v137 == 0;
          v275 = (void *)v137;
          if (!v137)
          {
            v286 = 1;
            v282 = a5;
LABEL_10:
            v23 = 1;
LABEL_11:
            v268 = v23;
            v24 = 0;
            do
            {
              v26 = v24 + v282;
              v27 = *v18;
              v28 = v18;
              result = v18;
              if (*v18)
              {
                while (1)
                {
                  while (1)
                  {
                    result = v27;
                    v29 = *((_DWORD *)v27 + 8);
                    if (v26 >= v29)
                      break;
                    v27 = (uint64_t *)*result;
                    v28 = (uint64_t **)result;
                    if (!*result)
                      goto LABEL_27;
                  }
                  if (v29 >= v26)
                    break;
                  v27 = (uint64_t *)result[1];
                  if (!v27)
                  {
                    v28 = (uint64_t **)(result + 1);
                    goto LABEL_27;
                  }
                }
              }
              else
              {
LABEL_27:
                v30 = result;
                result = operator new(0x30uLL);
                *((_DWORD *)result + 8) = v26;
                result[5] = 0;
                *result = 0;
                result[1] = 0;
                result[2] = v30;
                *v28 = result;
                v31 = *(_QWORD *)v17[2];
                v32 = result;
                if (v31)
                {
                  v17[2] = v31;
                  v32 = *v28;
                }
                v33 = *v18;
                v136 = v32 == *v18;
                *((_BYTE *)v32 + 24) = v136;
                if (!v136)
                {
                  do
                  {
                    v34 = v32[2];
                    if (*(_BYTE *)(v34 + 24))
                      break;
                    v35 = *(uint64_t **)(v34 + 16);
                    v36 = *v35;
                    if (*v35 == v34)
                    {
                      v39 = v35[1];
                      if (!v39 || (v40 = *(unsigned __int8 *)(v39 + 24), v37 = (_BYTE *)(v39 + 24), v40))
                      {
                        if (*(uint64_t **)v34 == v32)
                        {
                          v41 = (uint64_t *)v32[2];
                        }
                        else
                        {
                          v41 = *(uint64_t **)(v34 + 8);
                          v42 = *v41;
                          *(_QWORD *)(v34 + 8) = *v41;
                          if (v42)
                          {
                            *(_QWORD *)(v42 + 16) = v34;
                            v35 = *(uint64_t **)(v34 + 16);
                          }
                          v41[2] = (uint64_t)v35;
                          *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v41;
                          *v41 = v34;
                          *(_QWORD *)(v34 + 16) = v41;
                          v35 = (uint64_t *)v41[2];
                          v34 = *v35;
                        }
                        *((_BYTE *)v41 + 24) = 1;
                        *((_BYTE *)v35 + 24) = 0;
                        v45 = *(_QWORD *)(v34 + 8);
                        *v35 = v45;
                        if (v45)
                          *(_QWORD *)(v45 + 16) = v35;
                        *(_QWORD *)(v34 + 16) = v35[2];
                        *(_QWORD *)(v35[2] + 8 * (*(_QWORD *)v35[2] != (_QWORD)v35)) = v34;
                        *(_QWORD *)(v34 + 8) = v35;
                        goto LABEL_56;
                      }
                    }
                    else if (!v36 || (v38 = *(unsigned __int8 *)(v36 + 24), v37 = (_BYTE *)(v36 + 24), v38))
                    {
                      if (*(uint64_t **)v34 == v32)
                      {
                        v43 = v32[1];
                        *(_QWORD *)v34 = v43;
                        if (v43)
                        {
                          *(_QWORD *)(v43 + 16) = v34;
                          v35 = *(uint64_t **)(v34 + 16);
                        }
                        v32[2] = (uint64_t)v35;
                        *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8 * (**(_QWORD **)(v34 + 16) != v34)) = v32;
                        v32[1] = v34;
                        *(_QWORD *)(v34 + 16) = v32;
                        v35 = (uint64_t *)v32[2];
                      }
                      else
                      {
                        v32 = (uint64_t *)v32[2];
                      }
                      *((_BYTE *)v32 + 24) = 1;
                      *((_BYTE *)v35 + 24) = 0;
                      v34 = v35[1];
                      v44 = *(uint64_t **)v34;
                      v35[1] = *(_QWORD *)v34;
                      if (v44)
                        v44[2] = (uint64_t)v35;
                      *(_QWORD *)(v34 + 16) = v35[2];
                      *(_QWORD *)(v35[2] + 8 * (*(_QWORD *)v35[2] != (_QWORD)v35)) = v34;
                      *(_QWORD *)v34 = v35;
LABEL_56:
                      v35[2] = v34;
                      break;
                    }
                    *(_BYTE *)(v34 + 24) = 1;
                    v32 = v35;
                    *((_BYTE *)v35 + 24) = v35 == v33;
                    *v37 = 1;
                  }
                  while (v35 != v33);
                }
                ++v17[4];
              }
              result[5] = v279;
              if ((unint64_t)(v279 - 58) <= 0x39)
              {
                if (((1 << (v279 - 58)) & 0x200000000700004) != 0)
                {
                  v46 = v289;
                  while (1)
                  {
                    v47 = *v46;
                    v48 = v46;
                    if (!*v46)
                      break;
                    while (1)
                    {
                      v46 = (uint64_t **)v47;
                      v49 = *((_DWORD *)v47 + 7);
                      if (v26 < v49)
                        break;
                      if (v49 >= v26)
                        goto LABEL_166;
                      v47 = v46[1];
                      if (!v47)
                      {
                        v48 = v46 + 1;
                        goto LABEL_66;
                      }
                    }
                  }
LABEL_66:
                  v50 = (uint64_t *)v46;
                  v46 = (uint64_t **)operator new(0x28uLL);
                  *((_DWORD *)v46 + 7) = v26;
                  *((_DWORD *)v46 + 8) = 0;
                  *v46 = 0;
                  v46[1] = 0;
                  v46[2] = v50;
                  *v48 = (uint64_t *)v46;
                  v51 = *(_QWORD *)v17[5];
                  v52 = (uint64_t *)v46;
                  if (v51)
                  {
                    v17[5] = v51;
                    v52 = *v48;
                  }
                  v53 = *v289;
                  *((_BYTE *)v52 + 24) = v52 == *v289;
                  if (v52 != v53)
                  {
                    do
                    {
                      v54 = v52[2];
                      if (*(_BYTE *)(v54 + 24))
                        break;
                      v55 = *(uint64_t **)(v54 + 16);
                      v56 = *v55;
                      if (*v55 == v54)
                      {
                        v59 = v55[1];
                        if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), v57 = (_BYTE *)(v59 + 24), v60))
                        {
                          if (*(uint64_t **)v54 == v52)
                          {
                            v61 = (uint64_t *)v52[2];
                          }
                          else
                          {
                            v61 = *(uint64_t **)(v54 + 8);
                            v62 = *v61;
                            *(_QWORD *)(v54 + 8) = *v61;
                            if (v62)
                            {
                              *(_QWORD *)(v62 + 16) = v54;
                              v55 = *(uint64_t **)(v54 + 16);
                            }
                            v61[2] = (uint64_t)v55;
                            *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v61;
                            *v61 = v54;
                            *(_QWORD *)(v54 + 16) = v61;
                            v55 = (uint64_t *)v61[2];
                            v54 = *v55;
                          }
                          *((_BYTE *)v61 + 24) = 1;
                          *((_BYTE *)v55 + 24) = 0;
                          v115 = *(_QWORD *)(v54 + 8);
                          *v55 = v115;
                          if (v115)
                            *(_QWORD *)(v115 + 16) = v55;
                          *(_QWORD *)(v54 + 16) = v55[2];
                          *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
                          *(_QWORD *)(v54 + 8) = v55;
                          goto LABEL_164;
                        }
                      }
                      else if (!v56 || (v58 = *(unsigned __int8 *)(v56 + 24), v57 = (_BYTE *)(v56 + 24), v58))
                      {
                        if (*(uint64_t **)v54 == v52)
                        {
                          v113 = v52[1];
                          *(_QWORD *)v54 = v113;
                          if (v113)
                          {
                            *(_QWORD *)(v113 + 16) = v54;
                            v55 = *(uint64_t **)(v54 + 16);
                          }
                          v52[2] = (uint64_t)v55;
                          *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v52;
                          v52[1] = v54;
                          *(_QWORD *)(v54 + 16) = v52;
                          v55 = (uint64_t *)v52[2];
                        }
                        else
                        {
                          v52 = (uint64_t *)v52[2];
                        }
                        *((_BYTE *)v52 + 24) = 1;
                        *((_BYTE *)v55 + 24) = 0;
                        v54 = v55[1];
                        v114 = *(uint64_t **)v54;
                        v55[1] = *(_QWORD *)v54;
                        if (v114)
                          v114[2] = (uint64_t)v55;
                        *(_QWORD *)(v54 + 16) = v55[2];
                        *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
                        *(_QWORD *)v54 = v55;
LABEL_164:
                        v55[2] = v54;
                        break;
                      }
                      *(_BYTE *)(v54 + 24) = 1;
                      v52 = v55;
                      *((_BYTE *)v55 + 24) = v55 == v53;
                      *v57 = 1;
                    }
                    while (v55 != v53);
                  }
                  ++v17[7];
LABEL_166:
                  *((_DWORD *)v46 + 8) = v14;
                  v116 = *v19;
                  v117 = v19;
                  result = v19;
                  if (*v19)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        result = v116;
                        v118 = *((_DWORD *)v116 + 7);
                        if (v26 >= v118)
                          break;
                        v116 = (uint64_t *)*result;
                        v117 = (uint64_t **)result;
                        if (!*result)
                          goto LABEL_173;
                      }
                      if (v118 >= v26)
                        break;
                      v116 = (uint64_t *)result[1];
                      if (!v116)
                      {
                        v117 = (uint64_t **)(result + 1);
                        goto LABEL_173;
                      }
                    }
                  }
                  else
                  {
LABEL_173:
                    v119 = result;
                    result = operator new(0x28uLL);
                    *((_DWORD *)result + 7) = v26;
                    *((_DWORD *)result + 8) = 0;
                    *result = 0;
                    result[1] = 0;
                    result[2] = v119;
                    *v117 = result;
                    v120 = *(_QWORD *)v17[17];
                    v121 = result;
                    if (v120)
                    {
                      v17[17] = v120;
                      v121 = *v117;
                    }
                    v122 = *v19;
                    v136 = v121 == *v19;
                    *((_BYTE *)v121 + 24) = v136;
                    if (!v136)
                    {
                      do
                      {
                        v123 = v121[2];
                        if (*(_BYTE *)(v123 + 24))
                          break;
                        v124 = *(uint64_t **)(v123 + 16);
                        v125 = *v124;
                        if (*v124 == v123)
                        {
                          v128 = v124[1];
                          if (!v128 || (v129 = *(unsigned __int8 *)(v128 + 24), v126 = (_BYTE *)(v128 + 24), v129))
                          {
                            if (*(uint64_t **)v123 == v121)
                            {
                              v130 = (uint64_t *)v121[2];
                            }
                            else
                            {
                              v130 = *(uint64_t **)(v123 + 8);
                              v131 = *v130;
                              *(_QWORD *)(v123 + 8) = *v130;
                              if (v131)
                              {
                                *(_QWORD *)(v131 + 16) = v123;
                                v124 = *(uint64_t **)(v123 + 16);
                              }
                              v130[2] = (uint64_t)v124;
                              *(_QWORD *)(*(_QWORD *)(v123 + 16) + 8 * (**(_QWORD **)(v123 + 16) != v123)) = v130;
                              *v130 = v123;
                              *(_QWORD *)(v123 + 16) = v130;
                              v124 = (uint64_t *)v130[2];
                              v123 = *v124;
                            }
                            *((_BYTE *)v130 + 24) = 1;
                            *((_BYTE *)v124 + 24) = 0;
                            v134 = *(_QWORD *)(v123 + 8);
                            *v124 = v134;
                            if (v134)
                              *(_QWORD *)(v134 + 16) = v124;
                            *(_QWORD *)(v123 + 16) = v124[2];
                            *(_QWORD *)(v124[2] + 8 * (*(_QWORD *)v124[2] != (_QWORD)v124)) = v123;
                            *(_QWORD *)(v123 + 8) = v124;
                            goto LABEL_13;
                          }
                        }
                        else if (!v125 || (v127 = *(unsigned __int8 *)(v125 + 24), v126 = (_BYTE *)(v125 + 24), v127))
                        {
                          if (*(uint64_t **)v123 == v121)
                          {
                            v132 = v121[1];
                            *(_QWORD *)v123 = v132;
                            if (v132)
                            {
                              *(_QWORD *)(v132 + 16) = v123;
                              v124 = *(uint64_t **)(v123 + 16);
                            }
                            v121[2] = (uint64_t)v124;
                            *(_QWORD *)(*(_QWORD *)(v123 + 16) + 8 * (**(_QWORD **)(v123 + 16) != v123)) = v121;
                            v121[1] = v123;
                            *(_QWORD *)(v123 + 16) = v121;
                            v124 = (uint64_t *)v121[2];
                          }
                          else
                          {
                            v121 = (uint64_t *)v121[2];
                          }
                          *((_BYTE *)v121 + 24) = 1;
                          *((_BYTE *)v124 + 24) = 0;
                          v123 = v124[1];
                          v133 = *(uint64_t **)v123;
                          v124[1] = *(_QWORD *)v123;
                          if (v133)
                            v133[2] = (uint64_t)v124;
                          *(_QWORD *)(v123 + 16) = v124[2];
                          *(_QWORD *)(v124[2] + 8 * (*(_QWORD *)v124[2] != (_QWORD)v124)) = v123;
                          *(_QWORD *)v123 = v124;
LABEL_13:
                          v124[2] = v123;
                          break;
                        }
                        *(_BYTE *)(v123 + 24) = 1;
                        v121 = v124;
                        *((_BYTE *)v124 + 24) = v124 == v122;
                        *v126 = 1;
                      }
                      while (v124 != v122);
                    }
                    ++v17[19];
                  }
                  *((_DWORD *)result + 8) = v14;
                  v14 = (v14 + 8);
                }
                else
                {
                  v274 = v15;
                  v63 = v14;
                  if (v279 == 58)
                  {
                    v85 = v289;
                    while (1)
                    {
                      v86 = *v85;
                      v87 = v85;
                      if (!*v85)
                        break;
                      while (1)
                      {
                        v85 = (uint64_t **)v86;
                        v88 = *((_DWORD *)v86 + 7);
                        if (v26 < v88)
                          break;
                        if (v88 >= v26)
                          goto LABEL_122;
                        v86 = v85[1];
                        if (!v86)
                        {
                          v87 = v85 + 1;
                          goto LABEL_119;
                        }
                      }
                    }
LABEL_119:
                    v89 = (uint64_t *)v85;
                    v85 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v85 + 7) = v26;
                    *((_DWORD *)v85 + 8) = 0;
                    *v85 = 0;
                    v85[1] = 0;
                    v85[2] = v89;
                    *v87 = (uint64_t *)v85;
                    v90 = *(_QWORD *)v17[5];
                    v91 = (uint64_t *)v85;
                    if (v90)
                    {
                      v17[5] = v90;
                      v91 = *v87;
                    }
                    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[6], v91);
                    ++v17[7];
                    v14 = v63;
LABEL_122:
                    *((_DWORD *)v85 + 8) = v274;
                    v92 = v276;
                    while (1)
                    {
                      v93 = *v92;
                      v94 = v92;
                      if (!*v92)
                        break;
                      while (1)
                      {
                        v92 = (uint64_t **)v93;
                        v95 = *((_DWORD *)v93 + 7);
                        if (v26 < v95)
                          break;
                        if (v95 >= v26)
                          goto LABEL_131;
                        v93 = v92[1];
                        if (!v93)
                        {
                          v94 = v92 + 1;
                          goto LABEL_128;
                        }
                      }
                    }
LABEL_128:
                    v96 = (uint64_t *)v92;
                    v92 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v92 + 7) = v26;
                    *((_DWORD *)v92 + 8) = 0;
                    *v92 = 0;
                    v92[1] = 0;
                    v92[2] = v96;
                    *v94 = (uint64_t *)v92;
                    v97 = *(_QWORD *)v17[8];
                    v98 = (uint64_t *)v92;
                    if (v97)
                    {
                      v17[8] = v97;
                      v98 = *v94;
                    }
                    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[9], v98);
                    ++v17[10];
                    v14 = v63;
LABEL_131:
                    *((_DWORD *)v92 + 8) = v272;
                    v99 = v271;
                    while (1)
                    {
                      v100 = *v99;
                      v101 = v99;
                      if (!*v99)
                        break;
                      while (1)
                      {
                        v99 = (uint64_t **)v100;
                        v102 = *((_DWORD *)v100 + 7);
                        if (v26 < v102)
                          break;
                        if (v102 >= v26)
                          goto LABEL_140;
                        v100 = v99[1];
                        if (!v100)
                        {
                          v101 = v99 + 1;
                          goto LABEL_137;
                        }
                      }
                    }
LABEL_137:
                    v103 = (uint64_t *)v99;
                    v99 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v99 + 7) = v26;
                    *((_DWORD *)v99 + 8) = 0;
                    *v99 = 0;
                    v99[1] = 0;
                    v99[2] = v103;
                    *v101 = (uint64_t *)v99;
                    v104 = *(_QWORD *)v17[11];
                    v105 = (uint64_t *)v99;
                    if (v104)
                    {
                      v17[11] = v104;
                      v105 = *v101;
                    }
                    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[12], v105);
                    ++v17[13];
                    v14 = v63;
LABEL_140:
                    *((_DWORD *)v99 + 8) = v287;
                    v106 = *v19;
                    v107 = v19;
                    v108 = v19;
                    if (*v19)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v108 = (uint64_t **)v106;
                          v109 = *((_DWORD *)v106 + 7);
                          if (v26 >= v109)
                            break;
                          v106 = *v108;
                          v107 = v108;
                          if (!*v108)
                            goto LABEL_147;
                        }
                        if (v109 >= v26)
                          break;
                        v106 = v108[1];
                        if (!v106)
                        {
                          v107 = v108 + 1;
                          goto LABEL_147;
                        }
                      }
                    }
                    else
                    {
LABEL_147:
                      v110 = (uint64_t *)v108;
                      v108 = (uint64_t **)operator new(0x28uLL);
                      *((_DWORD *)v108 + 7) = v26;
                      *((_DWORD *)v108 + 8) = 0;
                      *v108 = 0;
                      v108[1] = 0;
                      v108[2] = v110;
                      *v107 = (uint64_t *)v108;
                      v111 = *(_QWORD *)v17[17];
                      v112 = (uint64_t *)v108;
                      if (v111)
                      {
                        v17[17] = v111;
                        v112 = *v107;
                      }
                      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[18], v112);
                      ++v17[19];
                      v14 = v63;
                    }
                    v15 = v274 + 32;
                    v287 += 56;
                    *((_DWORD *)v108 + 8) = v278;
                    v278 += 8;
                  }
                  else if (v279 == 59)
                  {
                    v64 = v289;
                    while (1)
                    {
                      v65 = *v64;
                      v66 = v64;
                      if (!*v64)
                        break;
                      while (1)
                      {
                        v64 = (uint64_t **)v65;
                        v67 = *((_DWORD *)v65 + 7);
                        if (v26 < v67)
                          break;
                        if (v67 >= v26)
                          goto LABEL_93;
                        v65 = v64[1];
                        if (!v65)
                        {
                          v66 = v64 + 1;
                          goto LABEL_90;
                        }
                      }
                    }
LABEL_90:
                    v68 = (uint64_t *)v64;
                    v64 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v64 + 7) = v26;
                    *((_DWORD *)v64 + 8) = 0;
                    *v64 = 0;
                    v64[1] = 0;
                    v64[2] = v68;
                    *v66 = (uint64_t *)v64;
                    v69 = *(_QWORD *)v17[5];
                    v70 = (uint64_t *)v64;
                    if (v69)
                    {
                      v17[5] = v69;
                      v70 = *v66;
                    }
                    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[6], v70);
                    ++v17[7];
                    v14 = v63;
LABEL_93:
                    *((_DWORD *)v64 + 8) = v288;
                    v71 = v276;
                    while (1)
                    {
                      v72 = *v71;
                      v73 = v71;
                      if (!*v71)
                        break;
                      while (1)
                      {
                        v71 = (uint64_t **)v72;
                        v74 = *((_DWORD *)v72 + 7);
                        if (v26 < v74)
                          break;
                        if (v74 >= v26)
                          goto LABEL_102;
                        v72 = v71[1];
                        if (!v72)
                        {
                          v73 = v71 + 1;
                          goto LABEL_99;
                        }
                      }
                    }
LABEL_99:
                    v75 = (uint64_t *)v71;
                    v71 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v71 + 7) = v26;
                    *((_DWORD *)v71 + 8) = 0;
                    *v71 = 0;
                    v71[1] = 0;
                    v71[2] = v75;
                    *v73 = (uint64_t *)v71;
                    v76 = *(_QWORD *)v17[8];
                    v77 = (uint64_t *)v71;
                    if (v76)
                    {
                      v17[8] = v76;
                      v77 = *v73;
                    }
                    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[9], v77);
                    ++v17[10];
                    v14 = v63;
LABEL_102:
                    *((_DWORD *)v71 + 8) = v273;
                    v78 = *v19;
                    v79 = v19;
                    v80 = v19;
                    if (*v19)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v80 = (uint64_t **)v78;
                          v81 = *((_DWORD *)v78 + 7);
                          if (v26 >= v81)
                            break;
                          v78 = *v80;
                          v79 = v80;
                          if (!*v80)
                            goto LABEL_109;
                        }
                        if (v81 >= v26)
                          break;
                        v78 = v80[1];
                        if (!v78)
                        {
                          v79 = v80 + 1;
                          goto LABEL_109;
                        }
                      }
                    }
                    else
                    {
LABEL_109:
                      v82 = (uint64_t *)v80;
                      v80 = (uint64_t **)operator new(0x28uLL);
                      *((_DWORD *)v80 + 7) = v26;
                      *((_DWORD *)v80 + 8) = 0;
                      *v80 = 0;
                      v80[1] = 0;
                      v80[2] = v82;
                      *v79 = (uint64_t *)v80;
                      v83 = *(_QWORD *)v17[17];
                      v84 = (uint64_t *)v80;
                      if (v83)
                      {
                        v17[17] = v83;
                        v84 = *v79;
                      }
                      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[18], v84);
                      ++v17[19];
                      v14 = v63;
                    }
                    v15 = v274;
                    v288 += 8;
                    *((_DWORD *)v80 + 8) = v277;
                    v277 += 8;
                  }
                  else
                  {
                    v15 = v274;
                  }
                }
              }
              if (*a4 <= v26 + 1)
                v25 = v26 + 1;
              else
                v25 = *a4;
              *a4 = v25;
              *((_BYTE *)v17 + 8) = 0;
              ++v24;
            }
            while (v24 != v286);
            goto LABEL_392;
          }
          v286 = 1;
LABEL_208:
          result = (_QWORD *)objc_msgSend(v275, "type");
          v139 = v269;
          if (result != (_QWORD *)4 || ((v21 ^ 1) & 1) != 0)
          {
            v268 = (result != (_QWORD *)4) | v21;
            if (!v286)
              goto LABEL_393;
LABEL_237:
            v265 = v14;
            v146 = 0;
            v147 = v275;
            do
            {
              v280 = v146;
              v148 = v146 + a5 + objc_msgSend(v147, "index");
              switch(objc_msgSend(v147, "type"))
              {
                case 0:
                  v149 = *v18;
                  v150 = v18;
                  v151 = v18;
                  if (!*v18)
                    goto LABEL_247;
                  do
                  {
                    while (1)
                    {
                      v151 = (uint64_t **)v149;
                      v152 = *((_DWORD *)v149 + 8);
                      if (v148 >= v152)
                        break;
                      v149 = *v151;
                      v150 = v151;
                      if (!*v151)
                        goto LABEL_247;
                    }
                    if (v152 >= v148)
                      goto LABEL_250;
                    v149 = v151[1];
                  }
                  while (v149);
                  v150 = v151 + 1;
LABEL_247:
                  v153 = (uint64_t *)v151;
                  v151 = (uint64_t **)operator new(0x30uLL);
                  *((_DWORD *)v151 + 8) = v148;
                  v151[5] = 0;
                  *v151 = 0;
                  v151[1] = 0;
                  v151[2] = v153;
                  *v150 = (uint64_t *)v151;
                  v154 = *(_QWORD *)v17[2];
                  v155 = (uint64_t *)v151;
                  if (v154)
                  {
                    v17[2] = v154;
                    v155 = *v150;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[3], v155);
                  ++v17[4];
                  v147 = v275;
LABEL_250:
                  v151[5] = (uint64_t *)60;
                  v156 = v289;
                  while (1)
                  {
                    v157 = *v156;
                    v158 = v156;
                    if (!*v156)
                      break;
                    while (1)
                    {
                      v156 = (uint64_t **)v157;
                      v159 = *((_DWORD *)v157 + 7);
                      if (v148 < v159)
                        break;
                      if (v159 >= v148)
                        goto LABEL_259;
                      v157 = v156[1];
                      if (!v157)
                      {
                        v158 = v156 + 1;
                        goto LABEL_256;
                      }
                    }
                  }
LABEL_256:
                  v160 = (uint64_t *)v156;
                  v156 = (uint64_t **)operator new(0x28uLL);
                  *((_DWORD *)v156 + 7) = v148;
                  *((_DWORD *)v156 + 8) = 0;
                  *v156 = 0;
                  v156[1] = 0;
                  v156[2] = v160;
                  *v158 = (uint64_t *)v156;
                  v161 = *(_QWORD *)v17[5];
                  v162 = (uint64_t *)v156;
                  if (v161)
                  {
                    v17[5] = v161;
                    v162 = *v158;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[6], v162);
                  ++v17[7];
                  v147 = v275;
LABEL_259:
                  *((_DWORD *)v156 + 8) = v265;
                  v163 = *v19;
                  v164 = v19;
                  v165 = v19;
                  if (*v19)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v165 = (uint64_t **)v163;
                        v166 = *((_DWORD *)v163 + 7);
                        if (v148 >= v166)
                          break;
                        v163 = *v165;
                        v164 = v165;
                        if (!*v165)
                          goto LABEL_266;
                      }
                      if (v166 >= v148)
                        break;
                      v163 = v165[1];
                      if (!v163)
                      {
                        v164 = v165 + 1;
                        goto LABEL_266;
                      }
                    }
                  }
                  else
                  {
LABEL_266:
                    v167 = (uint64_t *)v165;
                    v165 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v165 + 7) = v148;
                    *((_DWORD *)v165 + 8) = 0;
                    *v165 = 0;
                    v165[1] = 0;
                    v165[2] = v167;
                    *v164 = (uint64_t *)v165;
                    v168 = *(_QWORD *)v17[17];
                    v169 = (uint64_t *)v165;
                    if (v168)
                    {
                      v17[17] = v168;
                      v169 = *v164;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[18], v169);
                    ++v17[19];
                    v147 = v275;
                  }
                  *((_DWORD *)v165 + 8) = v265;
                  v265 += 8;
                  ++v148;
                  goto LABEL_387;
                case 2:
                  v170 = objc_msgSend(v147, "arrayLength");
                  v171 = 0;
                  if (v170 <= 1)
                    v172 = 1;
                  else
                    v172 = v170;
                  v283 = v172;
                  while (1)
                  {
                    v173 = *v18;
                    v174 = v18;
                    v175 = v18;
                    if (*v18)
                    {
                      do
                      {
                        while (1)
                        {
                          v175 = (uint64_t **)v173;
                          v176 = *((_DWORD *)v173 + 8);
                          if (v148 >= v176)
                            break;
                          v173 = *v175;
                          v174 = v175;
                          if (!*v175)
                            goto LABEL_283;
                        }
                        if (v176 >= v148)
                          goto LABEL_286;
                        v173 = v175[1];
                      }
                      while (v173);
                      v174 = v175 + 1;
                    }
LABEL_283:
                    v177 = (uint64_t *)v175;
                    v175 = (uint64_t **)operator new(0x30uLL);
                    *((_DWORD *)v175 + 8) = v148;
                    v175[5] = 0;
                    *v175 = 0;
                    v175[1] = 0;
                    v175[2] = v177;
                    *v174 = (uint64_t *)v175;
                    v178 = *(_QWORD *)v17[2];
                    v179 = (uint64_t *)v175;
                    if (v178)
                    {
                      v17[2] = v178;
                      v179 = *v174;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[3], v179);
                    ++v17[4];
LABEL_286:
                    v175[5] = (uint64_t *)58;
                    v180 = v289;
LABEL_287:
                    v181 = *v180;
                    v182 = v180;
                    if (*v180)
                    {
                      do
                      {
                        v180 = (uint64_t **)v181;
                        v183 = *((_DWORD *)v181 + 7);
                        if (v148 < v183)
                          goto LABEL_287;
                        if (v183 >= v148)
                          goto LABEL_295;
                        v181 = v180[1];
                      }
                      while (v181);
                      v182 = v180 + 1;
                    }
                    v184 = (uint64_t *)v180;
                    v180 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v180 + 7) = v148;
                    *((_DWORD *)v180 + 8) = 0;
                    *v180 = 0;
                    v180[1] = 0;
                    v180[2] = v184;
                    *v182 = (uint64_t *)v180;
                    v185 = *(_QWORD *)v17[5];
                    v186 = (uint64_t *)v180;
                    if (v185)
                    {
                      v17[5] = v185;
                      v186 = *v182;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[6], v186);
                    ++v17[7];
LABEL_295:
                    *((_DWORD *)v180 + 8) = v15;
                    v187 = v276;
LABEL_296:
                    v188 = *v187;
                    v189 = v187;
                    if (*v187)
                    {
                      do
                      {
                        v187 = (uint64_t **)v188;
                        v190 = *((_DWORD *)v188 + 7);
                        if (v148 < v190)
                          goto LABEL_296;
                        if (v190 >= v148)
                          goto LABEL_304;
                        v188 = v187[1];
                      }
                      while (v188);
                      v189 = v187 + 1;
                    }
                    v191 = (uint64_t *)v187;
                    v187 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v187 + 7) = v148;
                    *((_DWORD *)v187 + 8) = 0;
                    *v187 = 0;
                    v187[1] = 0;
                    v187[2] = v191;
                    *v189 = (uint64_t *)v187;
                    v192 = *(_QWORD *)v17[8];
                    v193 = (uint64_t *)v187;
                    if (v192)
                    {
                      v17[8] = v192;
                      v193 = *v189;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[9], v193);
                    ++v17[10];
LABEL_304:
                    *((_DWORD *)v187 + 8) = v272;
                    v194 = v271;
LABEL_305:
                    v195 = *v194;
                    v196 = v194;
                    if (*v194)
                    {
                      do
                      {
                        v194 = (uint64_t **)v195;
                        v197 = *((_DWORD *)v195 + 7);
                        if (v148 < v197)
                          goto LABEL_305;
                        if (v197 >= v148)
                          goto LABEL_313;
                        v195 = v194[1];
                      }
                      while (v195);
                      v196 = v194 + 1;
                    }
                    v198 = (uint64_t *)v194;
                    v194 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v194 + 7) = v148;
                    *((_DWORD *)v194 + 8) = 0;
                    *v194 = 0;
                    v194[1] = 0;
                    v194[2] = v198;
                    *v196 = (uint64_t *)v194;
                    v199 = *(_QWORD *)v17[11];
                    v200 = (uint64_t *)v194;
                    if (v199)
                    {
                      v17[11] = v199;
                      v200 = *v196;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[12], v200);
                    ++v17[13];
LABEL_313:
                    *((_DWORD *)v194 + 8) = v287;
                    v201 = *v19;
                    v202 = v19;
                    v203 = v19;
                    if (*v19)
                    {
                      do
                      {
                        while (1)
                        {
                          v203 = (uint64_t **)v201;
                          v204 = *((_DWORD *)v201 + 7);
                          if (v148 >= v204)
                            break;
                          v201 = *v203;
                          v202 = v203;
                          if (!*v203)
                            goto LABEL_320;
                        }
                        if (v204 >= v148)
                          goto LABEL_275;
                        v201 = v203[1];
                      }
                      while (v201);
                      v202 = v203 + 1;
                    }
LABEL_320:
                    v205 = (uint64_t *)v203;
                    v203 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v203 + 7) = v148;
                    *((_DWORD *)v203 + 8) = 0;
                    *v203 = 0;
                    v203[1] = 0;
                    v203[2] = v205;
                    *v202 = (uint64_t *)v203;
                    v206 = *(_QWORD *)v17[17];
                    v207 = (uint64_t *)v203;
                    if (v206)
                    {
                      v17[17] = v206;
                      v207 = *v202;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[18], v207);
                    ++v17[19];
LABEL_275:
                    v15 += 32;
                    v287 += 56;
                    *((_DWORD *)v203 + 8) = v278;
                    v278 += 8;
                    ++v171;
                    ++v148;
                    if (v171 == v283)
                      goto LABEL_365;
                  }
                case 3:
                  v208 = objc_msgSend(v147, "arrayLength");
                  v209 = 0;
                  if (v208 <= 1)
                    v210 = 1;
                  else
                    v210 = v208;
                  v284 = v210;
                  do
                  {
                    v211 = *v18;
                    v212 = v18;
                    v213 = v18;
                    if (*v18)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v213 = (uint64_t **)v211;
                          v214 = *((_DWORD *)v211 + 8);
                          if (v148 >= v214)
                            break;
                          v211 = *v213;
                          v212 = v213;
                          if (!*v213)
                            goto LABEL_335;
                        }
                        if (v214 >= v148)
                          break;
                        v211 = v213[1];
                        if (!v211)
                        {
                          v212 = v213 + 1;
                          goto LABEL_335;
                        }
                      }
                    }
                    else
                    {
LABEL_335:
                      v215 = (uint64_t *)v213;
                      v213 = (uint64_t **)operator new(0x30uLL);
                      *((_DWORD *)v213 + 8) = v148;
                      v213[5] = 0;
                      *v213 = 0;
                      v213[1] = 0;
                      v213[2] = v215;
                      *v212 = (uint64_t *)v213;
                      v216 = *(_QWORD *)v17[2];
                      v217 = (uint64_t *)v213;
                      if (v216)
                      {
                        v17[2] = v216;
                        v217 = *v212;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[3], v217);
                      ++v17[4];
                    }
                    v213[5] = (uint64_t *)59;
                    v218 = v289;
                    while (1)
                    {
                      v219 = *v218;
                      v220 = v218;
                      if (!*v218)
                        break;
                      while (1)
                      {
                        v218 = (uint64_t **)v219;
                        v221 = *((_DWORD *)v219 + 7);
                        if (v148 < v221)
                          break;
                        if (v221 >= v148)
                          goto LABEL_347;
                        v219 = v218[1];
                        if (!v219)
                        {
                          v220 = v218 + 1;
                          goto LABEL_344;
                        }
                      }
                    }
LABEL_344:
                    v222 = (uint64_t *)v218;
                    v218 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v218 + 7) = v148;
                    *((_DWORD *)v218 + 8) = 0;
                    *v218 = 0;
                    v218[1] = 0;
                    v218[2] = v222;
                    *v220 = (uint64_t *)v218;
                    v223 = *(_QWORD *)v17[5];
                    v224 = (uint64_t *)v218;
                    if (v223)
                    {
                      v17[5] = v223;
                      v224 = *v220;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[6], v224);
                    ++v17[7];
LABEL_347:
                    *((_DWORD *)v218 + 8) = v288;
                    v225 = v276;
                    while (1)
                    {
                      v226 = *v225;
                      v227 = v225;
                      if (!*v225)
                        break;
                      while (1)
                      {
                        v225 = (uint64_t **)v226;
                        v228 = *((_DWORD *)v226 + 7);
                        if (v148 < v228)
                          break;
                        if (v228 >= v148)
                          goto LABEL_356;
                        v226 = v225[1];
                        if (!v226)
                        {
                          v227 = v225 + 1;
                          goto LABEL_353;
                        }
                      }
                    }
LABEL_353:
                    v229 = (uint64_t *)v225;
                    v225 = (uint64_t **)operator new(0x28uLL);
                    *((_DWORD *)v225 + 7) = v148;
                    *((_DWORD *)v225 + 8) = 0;
                    *v225 = 0;
                    v225[1] = 0;
                    v225[2] = v229;
                    *v227 = (uint64_t *)v225;
                    v230 = *(_QWORD *)v17[8];
                    v231 = (uint64_t *)v225;
                    if (v230)
                    {
                      v17[8] = v230;
                      v231 = *v227;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[9], v231);
                    ++v17[10];
LABEL_356:
                    *((_DWORD *)v225 + 8) = v273;
                    v232 = *v19;
                    v233 = v19;
                    v234 = v19;
                    if (*v19)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v234 = (uint64_t **)v232;
                          v235 = *((_DWORD *)v232 + 7);
                          if (v148 >= v235)
                            break;
                          v232 = *v234;
                          v233 = v234;
                          if (!*v234)
                            goto LABEL_363;
                        }
                        if (v235 >= v148)
                          break;
                        v232 = v234[1];
                        if (!v232)
                        {
                          v233 = v234 + 1;
                          goto LABEL_363;
                        }
                      }
                    }
                    else
                    {
LABEL_363:
                      v236 = (uint64_t *)v234;
                      v234 = (uint64_t **)operator new(0x28uLL);
                      *((_DWORD *)v234 + 7) = v148;
                      *((_DWORD *)v234 + 8) = 0;
                      *v234 = 0;
                      v234[1] = 0;
                      v234[2] = v236;
                      *v233 = (uint64_t *)v234;
                      v237 = *(_QWORD *)v17[17];
                      v238 = (uint64_t *)v234;
                      if (v237)
                      {
                        v17[17] = v237;
                        v238 = *v233;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[18], v238);
                      ++v17[19];
                    }
                    v288 += 8;
                    *((_DWORD *)v234 + 8) = v277;
                    v277 += 8;
                    ++v209;
                    ++v148;
                  }
                  while (v209 != v284);
LABEL_365:
                  v147 = v275;
                  goto LABEL_387;
                case 4:
                  v239 = objc_msgSend(v147, "indirectConstantDataSize");
                  v285 = objc_msgSend(v147, "indirectConstantAlignment");
                  v240 = objc_msgSend(v147, "indirectConstantDataType");
                  v241 = *v18;
                  v242 = v18;
                  v243 = v18;
                  if (!*v18)
                    goto LABEL_373;
                  break;
                default:
                  goto LABEL_387;
              }
              do
              {
                while (1)
                {
                  v243 = (uint64_t **)v241;
                  v244 = *((_DWORD *)v241 + 8);
                  if (v148 >= v244)
                    break;
                  v241 = *v243;
                  v242 = v243;
                  if (!*v243)
                    goto LABEL_373;
                }
                if (v244 >= v148)
                  goto LABEL_376;
                v241 = v243[1];
              }
              while (v241);
              v242 = v243 + 1;
LABEL_373:
              v263 = v240;
              v245 = v239;
              v246 = (uint64_t *)v243;
              v243 = (uint64_t **)operator new(0x30uLL);
              *((_DWORD *)v243 + 8) = v148;
              v243[5] = 0;
              *v243 = 0;
              v243[1] = 0;
              v243[2] = v246;
              *v242 = (uint64_t *)v243;
              v247 = *(_QWORD *)v17[2];
              v248 = (uint64_t *)v243;
              if (v247)
              {
                v17[2] = v247;
                v248 = *v242;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[3], v248);
              ++v17[4];
              v239 = v245;
              v240 = v263;
LABEL_376:
              v243[5] = (uint64_t *)v240;
              v249 = v261;
              v250 = *v261;
              v251 = v261;
              v147 = v275;
              if (*v261)
              {
                do
                {
                  while (1)
                  {
                    v249 = (uint64_t **)v250;
                    v252 = *((_DWORD *)v250 + 7);
                    if (v148 >= v252)
                      break;
                    v250 = *v249;
                    v251 = v249;
                    if (!*v249)
                      goto LABEL_383;
                  }
                  if (v252 >= v148)
                    goto LABEL_386;
                  v250 = v249[1];
                }
                while (v250);
                v251 = v249 + 1;
              }
LABEL_383:
              v253 = (uint64_t *)v249;
              v249 = (uint64_t **)operator new(0x28uLL);
              *((_DWORD *)v249 + 7) = v148;
              *((_DWORD *)v249 + 8) = 0;
              *v249 = 0;
              v249[1] = 0;
              v249[2] = v253;
              *v251 = (uint64_t *)v249;
              v254 = *(_QWORD *)v17[14];
              v255 = (uint64_t *)v249;
              if (v254)
              {
                v17[14] = v254;
                v255 = *v251;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v17[15], v255);
              ++v17[16];
              v147 = v275;
LABEL_386:
              v256 = (v285 + v264 - 1) & -v285;
              ++v148;
              *((_DWORD *)v249 + 8) = v256;
              v264 = v256 + v239;
LABEL_387:
              v257 = *a4;
              if (*a4 <= v148)
                v257 = v148;
              *a4 = v257;
              result = (_QWORD *)objc_msgSend(v147, "type");
              if (result != (_QWORD *)4)
                *((_BYTE *)v17 + 8) = 0;
              v146 = v280 + 1;
            }
            while (v280 + 1 != v286);
            v14 = v265;
LABEL_392:
            v139 = v269;
LABEL_393:
            v23 = v268;
            goto LABEL_394;
          }
          v264 = (v262 + v264 - 1) & -v262;
          if (v269 >= a7)
          {
            v268 = 0;
            v262 = 1;
            if (v286)
              goto LABEL_237;
            goto LABEL_393;
          }
          v140 = v269;
          v262 = 1;
          while (2)
          {
            v141 = (void *)objc_msgSend((id)objc_msgSend(a2, "members"), "objectAtIndex:", v140);
            result = (_QWORD *)objc_msgSend(v141, "dataType");
            switch((unint64_t)result)
            {
              case 1uLL:
              case 0x3AuLL:
              case 0x3BuLL:
              case 0x3CuLL:
              case 0x4EuLL:
              case 0x4FuLL:
              case 0x50uLL:
                break;
              case 2uLL:
                v142 = (void *)objc_msgSend(v141, "arrayType");
                result = (_QWORD *)objc_msgSend(v142, "elementType");
                v143 = (unint64_t)result - 58 > 0x16 || ((1 << (result - 58)) & 0x700007) == 0;
                if (v143 && (unint64_t)result - 1 >= 2)
                {
                  result = (_QWORD *)objc_msgSend(v142, "elementIndirectArgumentType");
                  goto LABEL_221;
                }
                break;
              default:
                result = (_QWORD *)objc_msgSend(v141, "indirectArgumentType");
LABEL_221:
                v144 = result;
                if (result)
                {
                  result = (_QWORD *)objc_msgSend(result, "type");
                  if (result == (_QWORD *)4)
                  {
                    result = (_QWORD *)objc_msgSend(v144, "indirectConstantAlignment");
                    v145 = v262;
                    if (v262 <= result)
                      v145 = result;
                    v262 = v145;
                    if (v266 != ++v140)
                      continue;
                  }
                }
                break;
            }
            break;
          }
          v264 = (v262 + v264 - 1) & -v262;
          if (v286)
          {
            v268 = 0;
            if (!v138)
              goto LABEL_237;
            v282 = a5;
            v23 = 0;
            goto LABEL_11;
          }
          v23 = 0;
          v139 = v269;
LABEL_394:
          v20 = v139 + 1;
          v21 = v23;
          if (v20 == v266)
            goto LABEL_401;
          break;
      }
    }
  }
  v262 = 1;
LABEL_401:
  a3[3] = (v262 + v264 - 1) & -v262;
  return result;
}

