uint64_t H9ISPFirmwareWork::RPCFileInfo(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _BOOL4 v9;
  NSObject *v11;
  const char *v12;
  uint32_t v13;
  int v15;
  const char *v16;
  __int16 v17;
  char *v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a3 != 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v19.st_dev = 136315394;
      *(_QWORD *)&v19.st_mode = "RPCFileInfo";
      WORD2(v19.st_ino) = 1024;
      *(_DWORD *)((char *)&v19.st_ino + 6) = a3;
      v11 = MEMORY[0x24BDACB70];
      v12 = "%s: Number of buffers is not 1 (%d)";
      v13 = 18;
LABEL_11:
      _os_log_impl(&dword_2357C5000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v19, v13);
    }
    return 3;
  }
  v3 = a2[1];
  if (v3 != 140)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v19.st_dev = 136315650;
      *(_QWORD *)&v19.st_mode = "RPCFileInfo";
      WORD2(v19.st_ino) = 2048;
      *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = 140;
      HIWORD(v19.st_gid) = 2048;
      *(_QWORD *)&v19.st_rdev = v3;
      v11 = MEMORY[0x24BDACB70];
      v12 = "%s: Buffer size does not match expected value (expected %ld, recv %lld)";
      v13 = 32;
      goto LABEL_11;
    }
    return 3;
  }
  v4 = *a2;
  v5 = (char *)operator new[]();
  v6 = v5;
  strcpy(v5, "/var/mobile/Media/DCIM");
  if (*(_BYTE *)v4 != 47)
    *(_WORD *)&v5[strlen(v5)] = 47;
  v7 = strncat(v6, (const char *)v4, *(unsigned int *)(v4 + 128));
  if (stat(v7, &v19) == -1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v15 = 136315394;
      v16 = "RPCFileInfo";
      v17 = 2080;
      v18 = v6;
      _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Failed to stat file: %s", (uint8_t *)&v15, 0x16u);
    }
    v8 = 4;
  }
  else
  {
    v8 = 0;
    v9 = (v19.st_mode & 0x80) == 0;
    *(_DWORD *)(v4 + 132) = v19.st_size;
    *(_DWORD *)(v4 + 136) = v9;
  }
  MEMORY[0x23B7D8AF0](v6, 0x1000C8077774924);
  return v8;
}

uint64_t H9ISPFirmwareWork::RPCFileRead(uint64_t a1, uint64_t *a2, int a3)
{
  size_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  FILE *v9;
  FILE *v10;
  int v11;
  NSObject *v12;
  const char *v13;
  uint32_t v14;
  NSObject *v16;
  const char *v17;
  uint32_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  int v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  size_t v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a3 == 2)
  {
    v4 = a2[1];
    if (v4 == 140)
    {
      v5 = *a2;
      v6 = (char *)operator new[]();
      v7 = v6;
      strcpy(v6, "/var/mobile/Media/DCIM");
      if (*(_BYTE *)v5 != 47)
        *(_WORD *)&v6[strlen(v6)] = 47;
      v8 = strncat(v7, (const char *)v5, *(unsigned int *)(v5 + 128));
      v9 = fopen(v8, "rb");
      if (!v9)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v24 = 136315394;
          v25 = "RPCFileRead";
          v26 = 2080;
          v27 = (uint64_t)v7;
          _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Failed to open file: %s", (uint8_t *)&v24, 0x16u);
        }
        v19 = 4;
        goto LABEL_25;
      }
      v10 = v9;
      if (fseek(v9, *(unsigned int *)(v5 + 132), 0))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(_DWORD *)(v5 + 132);
          v24 = 136315650;
          v25 = "RPCFileRead";
          v26 = 2080;
          v27 = (uint64_t)v7;
          v28 = 1024;
          LODWORD(v29) = v11;
          v12 = MEMORY[0x24BDACB70];
          v13 = "%s: Failed to seek file %s: offset %d";
          v14 = 28;
LABEL_22:
          _os_log_impl(&dword_2357C5000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v24, v14);
        }
      }
      else
      {
        v20 = fread((void *)a2[3], 1uLL, *(unsigned int *)(v5 + 136), v10);
        v21 = *(unsigned int *)(v5 + 136);
        if (v20 == v21)
        {
          v19 = 0;
LABEL_24:
          fclose(v10);
LABEL_25:
          MEMORY[0x23B7D8AF0](v7, 0x1000C8077774924);
          return v19;
        }
        v22 = v20;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v24 = 136315906;
          v25 = "RPCFileRead";
          v26 = 2080;
          v27 = (uint64_t)v7;
          v28 = 2048;
          v29 = v22;
          v30 = 1024;
          v31 = v21;
          v12 = MEMORY[0x24BDACB70];
          v13 = "%s: Failed to read file %s: (Count %ld, expected count %d)";
          v14 = 38;
          goto LABEL_22;
        }
      }
      v19 = 4;
      goto LABEL_24;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v24 = 136315650;
      v25 = "RPCFileRead";
      v26 = 2048;
      v27 = 140;
      v28 = 2048;
      v29 = v4;
      v16 = MEMORY[0x24BDACB70];
      v17 = "%s: Buffer size does not match expected value (expected %ld, recv %lld)";
      v18 = 32;
      goto LABEL_13;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v24 = 136315394;
    v25 = "RPCFileRead";
    v26 = 1024;
    LODWORD(v27) = a3;
    v16 = MEMORY[0x24BDACB70];
    v17 = "%s: Number of buffers is not 2 (%d)";
    v18 = 18;
LABEL_13:
    _os_log_impl(&dword_2357C5000, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v24, v18);
  }
  return 3;
}

uint64_t H9ISPFirmwareWork::RPCFileWrite(uint64_t a1, uint64_t *a2, int a3)
{
  size_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  const char *v11;
  FILE *v12;
  FILE *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  NSObject *v21;
  const char *v22;
  size_t v23;
  int v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  size_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (a3 == 2)
  {
    v4 = a2[1];
    if (v4 == 140)
    {
      v5 = *a2;
      v6 = (char *)operator new[]();
      v7 = v6;
      strcpy(v6, "/var/mobile/Media/DCIM");
      if (*(_BYTE *)v5 != 47)
        *(_WORD *)&v6[strlen(v6)] = 47;
      v8 = strncat(v7, (const char *)v5, *(unsigned int *)(v5 + 128));
      v9 = dirname(v8);
      v10 = mkpath_np(v9, 0x1EDu);
      if (v10 && v10 != 17)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v25 = 136315394;
          v26 = "RPCFileWrite";
          v27 = 2080;
          v28 = (uint64_t)dirname(v7);
          v21 = MEMORY[0x24BDACB70];
          v22 = "%s: Failed to create directory: %s";
LABEL_23:
          _os_log_impl(&dword_2357C5000, v21, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&v25, 0x16u);
        }
      }
      else
      {
        if (*(_DWORD *)(v5 + 136))
          v11 = "ab";
        else
          v11 = "wb";
        v12 = fopen(v7, v11);
        if (v12)
        {
          v13 = v12;
          v14 = fwrite((const void *)a2[3], 1uLL, *(unsigned int *)(v5 + 132), v12);
          v15 = *(unsigned int *)(v5 + 132);
          if (v14 == v15)
          {
            v16 = 0;
          }
          else
          {
            v23 = v14;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              v25 = 136315906;
              v26 = "RPCFileWrite";
              v27 = 2080;
              v28 = (uint64_t)v7;
              v29 = 2048;
              v30 = v23;
              v31 = 1024;
              v32 = v15;
              _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%s: Failed to write file %s: (Count %ld, expected count %d)", (uint8_t *)&v25, 0x26u);
            }
            v16 = 4;
          }
          fclose(v13);
          goto LABEL_29;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v25 = 136315394;
          v26 = "RPCFileWrite";
          v27 = 2080;
          v28 = (uint64_t)v7;
          v21 = MEMORY[0x24BDACB70];
          v22 = "%s: Failed to open file: %s";
          goto LABEL_23;
        }
      }
      v16 = 4;
LABEL_29:
      MEMORY[0x23B7D8AF0](v7, 0x1000C8077774924);
      return v16;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v25 = 136315650;
      v26 = "RPCFileWrite";
      v27 = 2048;
      v28 = 140;
      v29 = 2048;
      v30 = v4;
      v18 = MEMORY[0x24BDACB70];
      v19 = "%s: Buffer size does not match expected value (expected %ld, recv %lld)\n";
      v20 = 32;
      goto LABEL_17;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v25 = 136315394;
    v26 = "RPCFileWrite";
    v27 = 1024;
    LODWORD(v28) = a3;
    v18 = MEMORY[0x24BDACB70];
    v19 = "%s: Number of buffers is not 2 (%d)\n";
    v20 = 18;
LABEL_17:
    _os_log_impl(&dword_2357C5000, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v25, v20);
  }
  return 3;
}

uint64_t H9ISPFirmwareWork::RPCAutoFocusProcessPart1Wrapper(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  int v4;
  NSObject *v7;
  const char *v8;
  uint32_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3 == 2)
  {
    v3 = a2[1];
    v4 = *(_DWORD *)(*a2 + 132300) + 132304;
    if (v3 == v4)
    {
      PDAF::PixelEngine::ProcessPart1(*a2, a2[3]);
      return 0;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315650;
      v11 = "RPCAutoFocusProcessPart1Wrapper";
      v12 = 1024;
      v13 = v4;
      v14 = 2048;
      v15 = v3;
      v7 = MEMORY[0x24BDACB70];
      v8 = "%s: Buffer size does not match expected value (expected %d, recv %lld)\n";
      v9 = 28;
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136315394;
    v11 = "RPCAutoFocusProcessPart1Wrapper";
    v12 = 1024;
    v13 = a3;
    v7 = MEMORY[0x24BDACB70];
    v8 = "%s: Number of buffers is not 2 (%d)\n";
    v9 = 18;
LABEL_8:
    _os_log_impl(&dword_2357C5000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v10, v9);
  }
  return 5;
}

uint64_t H9ISPFirmwareWork::RPCAutoFocusProcessPart2Wrapper(double a1, double a2, int16x4_t a3, int16x4_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v7;
  int v8;
  NSObject *v11;
  const char *v12;
  uint32_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a7 == 1)
  {
    v7 = a6[1];
    v8 = *(_DWORD *)(*a6 + 132300) + 132304;
    if (v7 == v8)
    {
      PDAF::PixelEngine::ProcessPart2(*a6, (uint64_t)a6, a1, a2, a3, a4);
      return 0;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v14 = 136315650;
      v15 = "RPCAutoFocusProcessPart2Wrapper";
      v16 = 1024;
      v17 = v8;
      v18 = 2048;
      v19 = v7;
      v11 = MEMORY[0x24BDACB70];
      v12 = "%s: Buffer size does not match expected value (expected %d, recv %lld)\n";
      v13 = 28;
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v14 = 136315394;
    v15 = "RPCAutoFocusProcessPart2Wrapper";
    v16 = 1024;
    v17 = a7;
    v11 = MEMORY[0x24BDACB70];
    v12 = "%s: Number of buffers is not 1 (%d)\n";
    v13 = 18;
LABEL_8:
    _os_log_impl(&dword_2357C5000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, v13);
  }
  return 5;
}

uint64_t H9ISPFirmwareWork::FirmwareRPC(uint64_t started, uint64_t a2, double a3, double a4, int16x4_t a5, int16x4_t a6)
{
  uint64_t v6;
  int v7;
  unint64_t v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  NSObject *v13;
  H9ISPMetrics *v14;
  double v15;
  uint8_t buf[4];
  int v18;
  uint64_t v19;

  v6 = started;
  v19 = *MEMORY[0x24BDAC8D0];
  v7 = gFirmwareWorkCFPrefs;
  if (*(_DWORD *)(a2 + 20))
  {
    v9 = 0;
    v10 = (int *)(a2 + 76);
    v11 = (uint64_t *)(a2 + 472);
    do
    {
      if (v7)
      {
        started = *(_QWORD *)(v6 + 8 * *(v10 - 13));
        if (started)
          started = (uint64_t)H9ISPMetrics::StartTimer((_QWORD *)started);
      }
      switch(*(v10 - 13))
      {
        case 2:
          started = H9ISPFirmwareWork::RPCAutoFocusProcessPart1Wrapper(started, v11, *v10);
          break;
        case 3:
          started = H9ISPFirmwareWork::RPCAutoFocusProcessPart2Wrapper(a3, a4, a5, a6, started, v11, *v10);
          break;
        case 4:
          started = H9ISPFirmwareWork::RPCFileInfo(started, v11, *v10);
          break;
        case 5:
          started = H9ISPFirmwareWork::RPCFileRead(started, v11, *v10);
          break;
        case 6:
          started = H9ISPFirmwareWork::RPCFileWrite(started, v11, *v10);
          break;
        default:
          started = 5;
          break;
      }
      *(v10 - 10) = started;
      v7 = gFirmwareWorkCFPrefs;
      if (gFirmwareWorkCFPrefs)
      {
        started = *(_QWORD *)(v6 + 8 * *(v10 - 13));
        if (started)
        {
          a3 = H9ISPMetrics::StopTimer((H9ISPMetrics *)started);
          v7 = gFirmwareWorkCFPrefs;
        }
        else
        {
          v7 = 1;
        }
      }
      ++*(_DWORD *)(v6 + 56);
      ++v9;
      v10 += 14;
      v11 += 24;
    }
    while (v9 < *(unsigned int *)(a2 + 20));
  }
  if (v7 && *(_DWORD *)(v6 + 56) >= 0x400u)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Metrics report for firmware work processor ***", buf, 2u);
    }
    v12 = 0;
    v13 = MEMORY[0x24BDACB70];
    do
    {
      v14 = *(H9ISPMetrics **)(v6 + 8 * v12);
      if (v14)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v18 = v12;
          _os_log_impl(&dword_2357C5000, v13, OS_LOG_TYPE_DEFAULT, "*** Metrics for command %d ***", buf, 8u);
          v14 = *(H9ISPMetrics **)(v6 + 8 * v12);
        }
        H9ISPMetrics::PrintMetricsSummary(v14, v15);
      }
      ++v12;
    }
    while (v12 != 7);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** End report ***", buf, 2u);
    }
    *(_DWORD *)(v6 + 56) = 0;
  }
  return 0;
}

void H9ISPFirmwareWork::H9ISPFirmwareWork(H9ISPFirmwareWork *this)
{
  unsigned int v2;
  uint64_t i;
  H9ISPMetrics *v4;

  *((_DWORD *)this + 14) = 0;
  v2 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("FirmwareWorkMetrics"), CFSTR("com.apple.coremedia"), 0);
  gFirmwareWorkCFPrefs = v2 != 0;
  if (v2)
  {
    for (i = 0; i != 56; i += 8)
    {
      v4 = (H9ISPMetrics *)operator new();
      H9ISPMetrics::H9ISPMetrics(v4, 128);
      *(_QWORD *)((char *)this + i) = v4;
    }
  }
}

void sub_2357C72E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1010C40C6958149);
  _Unwind_Resume(a1);
}

void H9ISPFirmwareWork::~H9ISPFirmwareWork(H9ISPFirmwareWork *this)
{
  uint64_t i;
  H9ISPMetrics *v3;

  if (gFirmwareWorkCFPrefs)
  {
    for (i = 0; i != 56; i += 8)
    {
      v3 = *(H9ISPMetrics **)((char *)this + i);
      if (v3)
      {
        H9ISPMetrics::~H9ISPMetrics(v3);
        MEMORY[0x23B7D8B08]();
      }
    }
  }
}

double H9ISPMetrics::AddSample(H9ISPMetrics *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  double result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(_QWORD *)this;
  result = 0.0;
  if (a2 - 1 < a3 && v3 != 0)
  {
    v6 = *((unsigned int *)this + 4);
    *(_QWORD *)(v3 + 8 * v6) = a3 - a2;
    v8 = *((_DWORD *)this + 2);
    v7 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 4) = ((int)v6 + 1) % v8;
    if (v7 < v8)
      *((_DWORD *)this + 3) = v7 + 1;
    return (double)((a3 - a2) * *((unsigned int *)this + 8) / *((unsigned int *)this + 9)) / 1000000.0;
  }
  return result;
}

_QWORD *H9ISPMetrics::StartTimer(_QWORD *this)
{
  _QWORD *v1;

  if (*this)
  {
    v1 = this;
    if (!this[3])
    {
      this = (_QWORD *)mach_absolute_time();
      v1[3] = this;
    }
  }
  return this;
}

double H9ISPMetrics::StopTimer(H9ISPMetrics *this)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0.0;
  v3 = mach_absolute_time();
  result = H9ISPMetrics::AddSample(this, v1, v3);
  *((_QWORD *)this + 3) = 0;
  return result;
}

double H9ISPMetrics::GetMetricsSummary(uint64_t *a1, uint64_t a2, double result)
{
  int v5;
  int v6;
  uint64_t *v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  if (a2)
  {
    *(_QWORD *)(a2 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    v6 = *((_DWORD *)a1 + 2);
    v5 = *((_DWORD *)a1 + 3);
    *(_DWORD *)a2 = v5;
    *(_DWORD *)(a2 + 4) = v6;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a1 + 4);
    if (v5)
    {
      v7 = (uint64_t *)operator new[]();
      v9 = *((unsigned int *)a1 + 3);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = 0;
        v12 = *a1;
        do
        {
          v13 = *(_QWORD *)(v12 + 8 * v10);
          if (v10)
          {
            v14 = v10;
            while (1)
            {
              v15 = (v14 - 1);
              v16 = v7[v15];
              if (v13 >= v16)
                break;
              v7[v14--] = v16;
              if (!v15)
                goto LABEL_9;
            }
          }
          else
          {
LABEL_9:
            LODWORD(v14) = 0;
          }
          v11 += v13;
          v7[v14] = v13;
          ++v10;
        }
        while (v10 != v9);
        v17 = 0;
        v18 = *v7;
        v19 = v7[(v9 - 1)];
        v20 = *(uint64_t *)((char *)v7 + ((4 * v9) & 0x3FFFFFFF8));
        v21 = v9;
        v22 = v7;
        v23 = v11 / v9;
        do
        {
          v24 = *v22++;
          v17 += (v24 - v23) * (v24 - v23);
          --v21;
        }
        while (v21);
        v8 = (double)(v17 / v9);
      }
      else
      {
        v23 = 0;
        v18 = *v7;
        v19 = v7[0xFFFFFFFFLL];
        v20 = *(uint64_t *)((char *)v7 + ((4 * v9) & 0x3FFFFFFF8));
      }
      v25 = *((unsigned int *)a1 + 8);
      v26 = *((unsigned int *)a1 + 9);
      *(double *)(a2 + 16) = (double)(v18 * v25 / v26) / 1000000.0;
      *(double *)(a2 + 24) = (double)(v19 * v25 / v26) / 1000000.0;
      *(double *)(a2 + 32) = (double)(v23 * v25 / v26) / 1000000.0;
      *(double *)(a2 + 40) = (double)(v20 * v25 / v26) / 1000000.0;
      *(double *)(a2 + 48) = sqrt(v8) * (double)v25 / (double)v26 / 1000000.0;
      JUMPOUT(0x23B7D8AF0);
    }
  }
  return result;
}

void H9ISPMetrics::PrintMetricsSummary(H9ISPMetrics *this, double a2)
{
  _DWORD v2[4];
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  H9ISPMetrics::GetMetricsSummary((uint64_t *)this, (uint64_t)v2, a2);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v9) = v2[0];
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Number of samples: %d", buf, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v9) = v2[1];
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Maximum samples:   %d", buf, 8u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v3;
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Minimum time (ms): %.3f", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v4;
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Maximum time (ms): %.3f", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v5;
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Average time (ms): %.3f", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v6;
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Median time (ms): %.3f", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v7;
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, " Standard deviation (ms): %.3f", buf, 0xCu);
  }
}

uint64_t H9ISPMetrics::ClearSamples(uint64_t this)
{
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void H9ISPMetrics::H9ISPMetrics(H9ISPMetrics *this, int a2)
{
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = operator new[]();
  mach_timebase_info((mach_timebase_info_t)this + 4);
}

{
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = operator new[]();
  mach_timebase_info((mach_timebase_info_t)this + 4);
}

void H9ISPMetrics::~H9ISPMetrics(H9ISPMetrics *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    MEMORY[0x23B7D8AF0](v1, 0x1000C8000313F17);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    MEMORY[0x23B7D8AF0](v1, 0x1000C8000313F17);
}

uint64_t PDAF::PixelEngine::ProcessPart1(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int8x16x3_t *v6;
  uint64_t v7;
  int16x8_t *v8;
  uint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  int *v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int8x16x3_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  __n128 v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  int8x16x3_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t *v55;
  int8x16x3_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int *v103;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;

  if (!a2)
    PDAF::PixelEngine::ProcessPart1();
  if (!a1)
    PDAF::PixelEngine::ProcessPart1();
  v3 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v3)
    PDAF::PixelEngine::ProcessPart1();
  v110 = *(unsigned int *)(a1 + 132260);
  if (v110 <= 1)
    PDAF::PixelEngine::ProcessPart1();
  v4 = *(unsigned int *)(a1 + 132272);
  if (v4 <= 1)
    PDAF::PixelEngine::ProcessPart1();
  v5 = *(unsigned int *)(a1 + 132284);
  if (!(_DWORD)v5)
    PDAF::PixelEngine::ProcessPart1();
  v6 = (int8x16x3_t *)*(unsigned int *)(a1 + 12);
  if (v6 >= 2)
    PDAF::PixelEngine::ProcessPart1();
  v7 = a1 + 132304;
  v8 = (int16x8_t *)(a1 + 132304 + *(unsigned int *)(a1 + 132264));
  if ((((_BYTE)a1 - 48 + *(_DWORD *)(a1 + 132264)) & 0xF) != 0)
    PDAF::PixelEngine::ProcessPart1();
  v9 = a2;
  v10 = (int8x8_t *)(v7 + *(unsigned int *)(a1 + 132276));
  v11 = v4 >> 1;
  v12 = (int *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 20);
  v108 = *(unsigned int *)(a1 + 132252);
  v109 = a1 + 132304;
  v106 = *(unsigned __int16 *)(a1 + 36);
  v107 = *(unsigned __int16 *)(a1 + 44);
  v105 = *(unsigned __int16 *)(a1 + 38);
  if (v13 != 1)
  {
    if (v13)
      PDAF::PixelEngine::ProcessPart1();
    if ((v3 & 1) != 0)
      PDAF::PixelEngine::ProcessPart1();
    v14 = v3 >> 1;
    v15 = *v12;
    v103 = (int *)(a1 + 28);
    if (*v12 < 2)
    {
      if (*(_DWORD *)(a1 + 32))
        PDAF::PixelEngine::ProcessPart1();
      v57 = *(unsigned __int16 *)(a1 + 48);
      v16 = a2 + 2 * (v14 + v14 * (unint64_t)*(unsigned __int16 *)(a1 + 50)) + 2 * v57 - 18;
      v17 = a2
          + 2 * v14 * (unint64_t)(*(unsigned __int16 *)(a1 + 50) + 4)
          + 2 * v57
          - 16;
      if ((_DWORD)v6 != 1)
      {
        v99 = *(_DWORD *)(a1 + 12);
        v58 = 8 * v14;
LABEL_51:
        v96 = v58;
        v74 = 2 * v11;
        v75 = 2 * v5;
        v6 = (int8x16x3_t *)*(unsigned int *)(a1 + 132284);
        v76 = v4 >> 1;
        v77 = v17 - 2 * v14;
        v78 = v17 + 2 * v14;
        v31 = (uint64_t)v103;
        LOWORD(v6) = v99;
      }
      v79 = 8 * v14;
    }
    else
    {
      if (v15 == 2)
      {
        v71 = *(unsigned __int16 *)(a1 + 48);
        if ((*(_DWORD *)(a1 + 32) & 1) != 0)
          v72 = -7;
        else
          v72 = -9;
        if ((*(_DWORD *)(a1 + 32) & 1) != 0)
          v73 = -9;
        else
          v73 = -7;
        v16 = a2 + 2 * (v14 + v14 * (unint64_t)*(unsigned __int16 *)(a1 + 50)) + 2 * (v72 + v71);
        v17 = a2
            + 2 * v14 * (unint64_t)(*(unsigned __int16 *)(a1 + 50) + 9)
            + 2 * (v73 + v71);
        if ((_DWORD)v6 == 1)
        {
          v97 = 2 * v11;
          v80 = 2 * v5;
          v81 = *(unsigned int *)(a1 + 132284);
          v82 = v4 >> 1;
          v83 = v17 - 2 * v14;
          v84 = v17 + 2 * v14;
          v85 = 16 * v14;
          v31 = (uint64_t)v103;
        }
        v99 = *(_DWORD *)(a1 + 12);
        goto LABEL_50;
      }
      if (v15 != 3)
        PDAF::PixelEngine::ProcessPart1();
      if (*(_DWORD *)(a1 + 32))
        PDAF::PixelEngine::ProcessPart1();
      v16 = a2
          + 2 * (v14 + v14 * (unint64_t)*(unsigned __int16 *)(a1 + 50))
          + 2 * *(unsigned __int16 *)(a1 + 48)
          - 18;
      v17 = v16 + 16 * v14;
      if ((_DWORD)v6 != 1)
      {
        v99 = *(_DWORD *)(a1 + 12);
LABEL_50:
        v58 = 16 * v14;
        goto LABEL_51;
      }
      v79 = 16 * v14;
    }
    v98 = v79;
    v102 = 2 * v11;
    v86 = 2 * v5;
    v87 = *(unsigned int *)(a1 + 132284);
    v88 = v4 >> 1;
    v89 = v17 - 2 * v14;
    v90 = v17 + 2 * v14;
    v31 = (uint64_t)v103;
  }
  v18 = *v12;
  if (*v12 < 2)
  {
    v40 = *(unsigned __int16 *)(a1 + 48);
    v41 = v40 - 9;
    v42 = v40 - 6;
    if (v40 - 9 >= 0)
      v42 = v40 - 9;
    v43 = v42 & 0xFFFFFFFC;
    v44 = a2
        + v3
        + v3 * (unint64_t)*(unsigned __int16 *)(a1 + 50)
        + (int)((v42 & 0xFFFFFFFC) + (v42 >> 2));
    v45 = v40 - 8;
    v46 = v40 - 5;
    if (v45 >= 0)
      v46 = v45;
    v47 = a2
        + (*(unsigned __int16 *)(a1 + 50) + 4) * (unint64_t)v3
        + (int)((v46 & 0xFFFFFFFC) + (v46 >> 2));
    v101 = v45 - (v46 & 0xFFFFFFFC);
    v93 = 2 * v11;
    v95 = 8 * v3;
    v48 = 2 * v5;
    v49 = (int *)(a1 + 28);
    v50 = (int8x16x3_t *)(a1 + 132304 + *(unsigned int *)(a1 + 132264));
    v51 = *(unsigned int *)(a1 + 132284);
    v52 = v11;
    v53 = v47 - v3;
    v54 = v47 + v3;
    v31 = a1 + 28;
    v9 = a2;
    v55 = (int8x8_t *)((char *)v10 + v51);
    v56 = (int8x16x3_t *)((char *)v50 + 2 * v52);
    goto LABEL_41;
  }
  if (v18 == 2)
  {
    v59 = *(unsigned __int16 *)(a1 + 48);
    if ((*(_DWORD *)(a1 + 32) & 1) != 0)
      v60 = -9;
    else
      v60 = -7;
    v61 = v60 + v59;
    if ((*(_DWORD *)(a1 + 32) & 1) != 0)
      v62 = -7;
    else
      v62 = -9;
    v63 = __OFADD__(v62, v59);
    v64 = v62 + v59;
    v65 = v64 + 3;
    if (v64 < 0 == v63)
      v65 = v64;
    v66 = v65 & 0xFFFFFFFC;
    v68 = a2
        + (*(unsigned __int16 *)(a1 + 50) + 9) * (unint64_t)v3
        + (int)((v7 & 0xFFFFFFFC) + v61 / 4);
    v101 = v61 - (v7 & 0xFFFFFFFC);
    v93 = 2 * v11;
    v95 = 16 * v3;
    v48 = 2 * v5;
    v49 = (int *)(a1 + 28);
    v69 = *(unsigned int *)(a1 + 132284);
    v70 = v11;
    v67 = a2
        + v3
        + v3 * (unint64_t)*(unsigned __int16 *)(a1 + 50)
        + (int)((v65 & 0xFFFFFFFC) + (v65 >> 2));
    v53 = v68 - v3;
    v54 = v68 + v3;
    v31 = a1 + 28;
    v9 = a2;
    v55 = (int8x8_t *)((char *)v10 + v69);
    v56 = (int8x16x3_t *)((char *)v8 + 2 * v70);
LABEL_41:
  }
  if (v18 != 3)
    PDAF::PixelEngine::ProcessPart1();
  v19 = *(unsigned __int16 *)(a1 + 48);
  v20 = v19 - 9;
  v21 = v19 - 6;
  if (v20 >= 0)
    v21 = v20;
  v22 = v21 & 0xFFFFFFFC;
  v23 = a2
      + v3
      + v3 * (unint64_t)*(unsigned __int16 *)(a1 + 50)
      + (int)((v21 & 0xFFFFFFFC) + (v21 >> 2));
  v24 = v23 + 8 * v3;
  v25 = v20 - v22;
  v94 = 2 * v11;
  v100 = 16 * v3;
  v92 = 2 * v5;
  v26 = (int8x16x3_t *)(a1 + 132304 + *(unsigned int *)(a1 + 132264));
  v27 = *(unsigned int *)(a1 + 132284);
  v28 = v11;
  v29 = v24 - v3;
  v30 = v24 + v3;
  v31 = a1 + 28;
  v9 = a2;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::ExtractFocus(uint64_t result, uint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, int16x8_t a13, int16x8_t a14, int16x8_t a15, __n128 a16, __n128 *a17)
{
  uint64_t v18;
  __n128 *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  __n128 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __n128 *v39;
  uint64_t v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  char *v51;
  char v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  __int16 v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  int16x8_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  __n128 *v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  __n128 *v116;
  uint64_t v117;
  unsigned int v118;
  __int16 v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  int v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  __int16 v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _WORD *v153;
  uint64_t v154;
  _WORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  int16x8_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  int16x8_t v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  int8x16_t *v193;
  __int16 *v194;
  int16x8_t v195;
  int16x8_t v196;
  uint16x8_t v197;
  int16x8_t v198;
  __n128 *v199;
  int v200;
  BOOL v201;
  int v202;
  uint64_t v203;
  _BOOL4 v204;
  _BOOL4 v205;
  BOOL v206;
  int v207;
  int v208;
  int v209;
  __int16 *v210;
  __int16 *v211;
  __n128 *v212;
  int8x16_t *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int16x8_t v219;
  int16x8_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  __n128 *v224;
  int v225;
  _BOOL8 v226;
  int8x16_t *v227;
  __int16 *v228;
  int v229;
  int16x8_t v230;
  int16x8_t v231;
  uint16x8_t v232;
  int16x8_t v233;
  int v234;
  BOOL v235;
  int v236;
  uint64_t v237;
  _BOOL4 v238;
  _BOOL4 v239;
  BOOL v240;
  int v241;
  int v242;
  __int16 *v243;
  __int16 *v244;
  __n128 *v245;
  int8x16_t *v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  int16x8_t v253;
  int16x8_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BOOL8 v260;
  uint64_t v261;
  _BOOL8 v262;
  _BOOL8 v263;
  uint64_t v264;
  int v265;
  uint64_t v266;

  v18 = a4;
  v20 = a17;
  if (a3 == 1)
  {
    switch(*(_DWORD *)a2)
    {
      case 0:
        if (!*(_DWORD *)(a2 + 4))
          __asm { BR              X13 }
      case 1:
        if (!*(_DWORD *)(a2 + 4))
          __asm { BR              X14 }
      case 2:
        v75 = *(unsigned __int16 *)(a2 + 20);
        if ((*(_BYTE *)(a2 + 4) & 1) != 0)
        {
          v171 = *(unsigned __int16 *)(a2 + 22);
          v77 = (unsigned __int8 *)(a8 + a5 + a5 * v171 + 5 * ((v75 + 1) >> 2));
          v78 = ((_DWORD)v75 + 1) & 3;
          v79 = a8 + (v171 + 9) * a5;
          v80 = 5 * (v75 >> 2);
        }
        else
        {
          v76 = *(unsigned __int16 *)(a2 + 22);
          v77 = (unsigned __int8 *)(a8 + a5 + a5 * v76 + 5 * (v75 >> 2));
          v78 = v75++ & 3;
          v79 = a8 + (v76 + 9) * a5;
          v80 = 5 * (v75 >> 2);
        }
        v172 = (unsigned __int8 *)(v79 + v80);
        v173 = v75 & 3;
        v174 = 16 * a5;
        v175 = 2 * a6;
        v176 = result;
        v177 = a6;
        break;
      case 3:
        if (*(_DWORD *)(a2 + 4))
        v81 = *(unsigned __int16 *)(a2 + 20);
        v82 = (unsigned __int8 *)(a8 + a5 + a5 * *(unsigned __int16 *)(a2 + 22) + 5 * (v81 >> 2) + 8 * a5);
        v83 = v81 & 3;
        v84 = 16 * a5;
        v85 = 2 * a6;
        v86 = result;
        v87 = a6;
        break;
      default:
    }
  }
  else
  {
    if (a3)
    if ((a5 & 1) != 0)
    v21 = a5 >> 1;
    switch(*(_DWORD *)a2)
    {
      case 0:
        if (*(_DWORD *)(a2 + 4))
        if ((_DWORD)result)
        {
          if ((_DWORD)result == 1)
        }
        v22 = a6;
        v261 = *(unsigned __int16 *)(a2 + 22);
        v264 = *(unsigned __int16 *)(a2 + 20);
        v23 = *(_DWORD *)(a2 + 24);
        v24 = v23 - 1;
        if (v23 >= 1)
        {
          v25 = a8 + 2 * (v21 + v21 * v261) + 2 * v264;
          v26 = *(_DWORD *)(a2 + 40) != 0;
          v27 = a7 - 32;
          v28 = *(_DWORD *)(a2 + 28);
          v29 = *(_DWORD *)(a2 + 32);
          result = (v29 + 1);
          v30 = v28;
          v31 = a17;
          do
          {
            if (v29 >= 1)
            {
              v32 = 0;
              v33 = 0;
              v34 = 0;
              v35 = 0;
              v36 = v26 & 1;
              v37 = *(_DWORD *)(a2 + 36);
              v38 = v29 + 1;
              v39 = v31;
              v40 = v27;
              do
              {
                if (!v35)
                {
                  v41 = *(unsigned __int16 *)(v40 + 32);
                  v40 += 32;
                  v34 = v41;
                  v33 = *(unsigned __int16 *)(v40 + 16);
                  v35 = v37;
                }
                v42 = *(_WORD *)(v25 + v32);
                if ((unsigned __int16)(v42 - 1040) > 0x3BD0u)
                {
                  LOWORD(v44) = 0;
                }
                else
                {
                  if (v36)
                    v43 = v33;
                  else
                    v43 = v34;
                  v44 = ((unsigned __int16)(v43 >> 1) * (unsigned __int16)(v42 - 1024)) >> 15;
                }
                v39->n128_u16[0] = v44;
                v39 = (__n128 *)((char *)v39 + 2);
                v36 = 1 - v36;
                --v35;
                --v38;
                v32 += 16;
              }
              while (v38 > 1);
              v28 = *(_DWORD *)(a2 + 28);
              v18 = a4;
            }
            v31 = (__n128 *)((char *)v31 + 4 * v22);
            v45 = v30 < 3;
            if (v30 >= 3)
              v46 = 0;
            else
              v46 = v28;
            v47 = v30 + v46;
            if (v45)
              v48 = v18;
            else
              v48 = 0;
            v30 = v47 - 2;
            v27 += 16 * v48;
            v26 ^= 1u;
            v25 += 16 * v21;
            v49 = __OFSUB__(v23, 2);
            v23 -= 2;
          }
          while (!((v23 < 0) ^ v49 | (v23 == 0)));
        }
        if (v24 >= 1)
        {
          v50 = a8 + 2 * v21 * (v261 + 4) + 2 * v264 + 2;
          v51 = (char *)a17 + 2 * v22;
          v52 = *(_DWORD *)(a2 + 40) == 0;
          v53 = *(_DWORD *)(a2 + 28);
          v54 = *(_DWORD *)(a2 + 32);
          v55 = v53 - 1;
          v56 = a7 - 32;
          v57 = 16 * v21;
          result = 15312;
          do
          {
            if (v54 >= 1)
            {
              v58 = 0;
              v59 = 0;
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v63 = v52 & 1;
              v64 = *(_DWORD *)(a2 + 36);
              v65 = v54 + 1;
              v66 = v56;
              do
              {
                if (!v62)
                {
                  v67 = *(unsigned __int16 *)(v66 + 32);
                  v66 += 32;
                  v61 = v67;
                  v60 = *(unsigned __int16 *)(v66 + 16);
                  v62 = v64;
                }
                v68 = *(_WORD *)(v50 + v58);
                if ((unsigned __int16)(v68 - 1040) > 0x3BD0u)
                {
                  LOWORD(v70) = 0;
                }
                else
                {
                  if (v63)
                    v69 = v60;
                  else
                    v69 = v61;
                  v70 = ((unsigned __int16)(v69 >> 1) * (unsigned __int16)(v68 - 1024)) >> 15;
                }
                *(_WORD *)&v51[v59] = v70;
                v63 = 1 - v63;
                --v62;
                --v65;
                v59 += 2;
                v58 += 16;
              }
              while (v65 > 1);
              v53 = *(_DWORD *)(a2 + 28);
            }
            v71 = v55 < 3;
            if (v55 >= 3)
              v72 = 0;
            else
              v72 = v53;
            v73 = v55 + v72;
            if (v71)
              v74 = v18;
            else
              v74 = 0;
            v55 = v73 - 2;
            v56 += 16 * v74;
            v52 ^= 1u;
            v51 += 4 * v22;
            v50 += v57;
            v49 = __OFSUB__(v24, 2);
            v24 -= 2;
          }
          while (!((v24 < 0) ^ v49 | (v24 == 0)));
        }
        return result;
      case 1:
        if (*(_DWORD *)(a2 + 4))
        v97 = *(unsigned __int16 *)(a2 + 22);
        v98 = *(unsigned __int16 *)(a2 + 20);
        v99 = a8 + 2 * (v21 + v21 * v97) + 2 * v98;
        v100 = a8 + 2 * v21 * (v97 + 4) + 2 * v98 + 2;
        if ((_DWORD)result == 1)
        {
          v187 = 8 * v21;
          v188 = 2 * a6;
          v189 = (*(_DWORD *)(a2 + 32) + 7) & 0xFFFFFFF8;
          v190 = *(_DWORD *)(a2 + 24);
          v266 = 8 * v21;
          if (v190 >= 1)
          {
            v257 = a6;
            v191 = 0;
            v192 = *(_DWORD *)(a2 + 40);
            v262 = v192 == 0;
            v260 = v192 != 0;
            v193 = (int8x16_t *)((char *)a17 + 4 * a6);
            v194 = (__int16 *)(v99 + 16 * v21);
            result = a7 - 16 * a4 - 32;
            v195 = 0uLL;
            v196 = vdupq_n_s16(0xFBF0u);
            v197 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
            v198.i64[0] = 0xFC00FC00FC00FC00;
            v198.i64[1] = 0xFC00FC00FC00FC00;
            v199 = a17;
            do
            {
              v200 = *(_DWORD *)(a2 + 28);
              v201 = v191 < 1;
              if (v191 >= 1)
                v200 = 0;
              v202 = v200 + v191;
              if (v201)
                v203 = v18;
              else
                v203 = 0;
              result += 16 * v203;
              v204 = v202 > 2;
              v205 = v190 > 2;
              v206 = v205 && v204;
              if (v205 && v204)
                v207 = 4;
              else
                v207 = 2;
              if (v189)
              {
                v208 = 0;
                v209 = -v189;
                v210 = (__int16 *)v99;
                v211 = v194;
                v212 = v199;
                v213 = v193;
                v214 = result + 16 * v262;
                v215 = result + 16 * v260;
                do
                {
                  if (v208 <= 0)
                  {
                    v208 += *(_DWORD *)(a2 + 36);
                    v217 = *(unsigned __int16 *)(v215 + 32);
                    v215 += 32;
                    v216 = v217;
                    v218 = *(unsigned __int16 *)(v214 + 32);
                    v214 += 32;
                    *(int16x4_t *)v195.i8 = vdup_n_s16(v216 >> 1);
                    *(int16x4_t *)a13.i8 = vdup_n_s16(v218 >> 1);
                    v195 = vzip1q_s16(v195, a13);
                  }
                  if (v208 <= 7)
                  {
                    switch(v208)
                    {
                      case 1:
                        v195.i16[1] = *(_WORD *)(v214 + 32) >> 1;
                        goto LABEL_143;
                      case 2:
LABEL_143:
                        v195.i16[2] = *(_WORD *)(v215 + 32) >> 1;
                        goto LABEL_144;
                      case 3:
LABEL_144:
                        v195.i16[3] = *(_WORD *)(v214 + 32) >> 1;
                        goto LABEL_145;
                      case 4:
LABEL_145:
                        v195.i16[4] = *(_WORD *)(v215 + 32) >> 1;
                        goto LABEL_146;
                      case 5:
LABEL_146:
                        v195.i16[5] = *(_WORD *)(v214 + 32) >> 1;
                        goto LABEL_147;
                      case 6:
LABEL_147:
                        v195.i16[6] = *(_WORD *)(v215 + 32) >> 1;
                        goto LABEL_148;
                      case 7:
LABEL_148:
                        v195.i16[7] = *(_WORD *)(v214 + 32) >> 1;
                        break;
                      default:
                        break;
                    }
                  }
                  if (v206)
                  {
                    v219.i16[0] = *v211;
                    v219.i16[1] = v211[8];
                    v219.i16[2] = v211[16];
                    v219.i16[3] = v211[24];
                    v219.i16[4] = v211[32];
                    v219.i16[5] = v211[40];
                    v219.i16[6] = v211[48];
                    v219.i16[7] = v211[56];
                    *v213++ = vandq_s8((int8x16_t)vqdmulhq_s16(vaddq_s16(v219, v198), v195), (int8x16_t)vcgtq_u16(v197, (uint16x8_t)vaddq_s16(v219, v196)));
                    v211 += 64;
                  }
                  v220.i16[0] = *v210;
                  v220.i16[1] = v210[8];
                  v220.i16[2] = v210[16];
                  v220.i16[3] = v210[24];
                  v220.i16[4] = v210[32];
                  v220.i16[5] = v210[40];
                  v220.i16[6] = v210[48];
                  v220.i16[7] = v210[56];
                  a13 = (int16x8_t)vandq_s8((int8x16_t)vqdmulhq_s16(vaddq_s16(v220, v198), v195), (int8x16_t)vcgtq_u16(v197, (uint16x8_t)vaddq_s16(v220, v196)));
                  *v212++ = (__n128)a13;
                  v208 -= 8;
                  v210 += 64;
                  v209 += 8;
                }
                while (v209);
              }
              v187 = v266;
              v18 = a4;
              v221 = v266 << v206;
              v99 += 2 * v221;
              v194 += v221;
              v222 = v188 << v206;
              v199 = (__n128 *)((char *)v199 + 2 * v222);
              v191 = v202 - v207;
              v193 = (int8x16_t *)((char *)v193 + 2 * v222);
              v49 = __OFSUB__(v190, v207);
              v190 -= v207;
            }
            while (!((v190 < 0) ^ v49 | (v190 == 0)));
            v190 = *(_DWORD *)(a2 + 24);
            v189 = (*(_DWORD *)(a2 + 32) + 7) & 0xFFFFFFF8;
            a6 = v257;
            v20 = a17;
          }
          v223 = v190 - 1;
          if (v190 - 1 >= 1)
          {
            v224 = (__n128 *)((char *)v20 + 2 * a6);
            v225 = *(_DWORD *)(a2 + 40);
            v263 = v225 != 0;
            v226 = v225 == 0;
            v227 = (int8x16_t *)((char *)v224 + 2 * v188);
            v228 = (__int16 *)(v100 + 2 * v187);
            result = a7 - 16 * v18 - 32;
            v229 = -1;
            v230 = 0uLL;
            v231 = vdupq_n_s16(0xFBF0u);
            v232 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
            v233.i64[0] = 0xFC00FC00FC00FC00;
            v233.i64[1] = 0xFC00FC00FC00FC00;
            do
            {
              v234 = *(_DWORD *)(a2 + 28);
              v235 = v229 < 1;
              if (v229 >= 1)
                v234 = 0;
              v236 = v234 + v229;
              if (v235)
                v237 = v18;
              else
                v237 = 0;
              result += 16 * v237;
              v238 = v236 > 2;
              v239 = v223 > 2;
              v240 = v239 && v238;
              if (v239 && v238)
                v241 = 4;
              else
                v241 = 2;
              if (v189)
              {
                v242 = 0;
                v243 = (__int16 *)v100;
                v244 = v228;
                v245 = v224;
                v246 = v227;
                v247 = v189;
                v248 = result + 16 * v263;
                v249 = result + 16 * v226;
                do
                {
                  if (v242 <= 0)
                  {
                    v242 += *(_DWORD *)(a2 + 36);
                    v251 = *(unsigned __int16 *)(v249 + 32);
                    v249 += 32;
                    v250 = v251;
                    v252 = *(unsigned __int16 *)(v248 + 32);
                    v248 += 32;
                    *(int16x4_t *)v230.i8 = vdup_n_s16(v250 >> 1);
                    *(int16x4_t *)a13.i8 = vdup_n_s16(v252 >> 1);
                    v230 = vzip1q_s16(v230, a13);
                  }
                  if (v242 <= 7)
                  {
                    switch(v242)
                    {
                      case 1:
                        v230.i16[1] = *(_WORD *)(v248 + 32) >> 1;
                        goto LABEL_172;
                      case 2:
LABEL_172:
                        v230.i16[2] = *(_WORD *)(v249 + 32) >> 1;
                        goto LABEL_173;
                      case 3:
LABEL_173:
                        v230.i16[3] = *(_WORD *)(v248 + 32) >> 1;
                        goto LABEL_174;
                      case 4:
LABEL_174:
                        v230.i16[4] = *(_WORD *)(v249 + 32) >> 1;
                        goto LABEL_175;
                      case 5:
LABEL_175:
                        v230.i16[5] = *(_WORD *)(v248 + 32) >> 1;
                        goto LABEL_176;
                      case 6:
LABEL_176:
                        v230.i16[6] = *(_WORD *)(v249 + 32) >> 1;
                        goto LABEL_177;
                      case 7:
LABEL_177:
                        v230.i16[7] = *(_WORD *)(v248 + 32) >> 1;
                        break;
                      default:
                        break;
                    }
                  }
                  if (v240)
                  {
                    v253.i16[0] = *v244;
                    v253.i16[1] = v244[8];
                    v253.i16[2] = v244[16];
                    v253.i16[3] = v244[24];
                    v253.i16[4] = v244[32];
                    v253.i16[5] = v244[40];
                    v253.i16[6] = v244[48];
                    v253.i16[7] = v244[56];
                    *v246++ = vandq_s8((int8x16_t)vqdmulhq_s16(vaddq_s16(v253, v233), v230), (int8x16_t)vcgtq_u16(v232, (uint16x8_t)vaddq_s16(v253, v231)));
                    v244 += 64;
                  }
                  v254.i16[0] = *v243;
                  v254.i16[1] = v243[8];
                  v254.i16[2] = v243[16];
                  v254.i16[3] = v243[24];
                  v254.i16[4] = v243[32];
                  v254.i16[5] = v243[40];
                  v254.i16[6] = v243[48];
                  v254.i16[7] = v243[56];
                  a13 = (int16x8_t)vandq_s8((int8x16_t)vqdmulhq_s16(vaddq_s16(v254, v233), v230), (int8x16_t)vcgtq_u16(v232, (uint16x8_t)vaddq_s16(v254, v231)));
                  *v245++ = (__n128)a13;
                  v242 -= 8;
                  v243 += 64;
                  v247 -= 8;
                }
                while (v247);
              }
              v18 = a4;
              v255 = v266 << v240;
              v100 += 2 * v255;
              v228 += v255;
              v256 = v188 << v240;
              v224 = (__n128 *)((char *)v224 + 2 * v256);
              v229 = v236 - v241;
              v227 = (int8x16_t *)((char *)v227 + 2 * v256);
              v49 = __OFSUB__(v223, v241);
              v223 -= v241;
            }
            while (!((v223 < 0) ^ v49 | (v223 == 0)));
          }
        }
        else
        {
          if ((_DWORD)result)
          v101 = a6;
          v265 = *(_DWORD *)(a2 + 40);
          v102 = *(_DWORD *)(a2 + 24);
          v103 = v102 - 1;
          if (v102 >= 1)
          {
            v104 = a7 - 32;
            v105 = *(_DWORD *)(a2 + 28);
            v106 = *(_DWORD *)(a2 + 32);
            result = (v106 + 1);
            v107 = v105;
            v108 = a17;
            do
            {
              if (v106 >= 1)
              {
                v109 = 0;
                v110 = 0;
                v111 = 0;
                v112 = 0;
                v113 = *(_DWORD *)(a2 + 36);
                v114 = v106 + 1;
                v115 = v265 != 0;
                v116 = v108;
                v117 = v104;
                do
                {
                  if (!v112)
                  {
                    v118 = *(unsigned __int16 *)(v117 + 32);
                    v117 += 32;
                    v111 = v118;
                    v110 = *(unsigned __int16 *)(v117 + 16);
                    v112 = v113;
                  }
                  v119 = *(_WORD *)(v99 + v109);
                  if ((unsigned __int16)(v119 - 1040) > 0x3BD0u)
                  {
                    LOWORD(v121) = 0;
                  }
                  else
                  {
                    if (v115)
                      v120 = v110;
                    else
                      v120 = v111;
                    v121 = ((unsigned __int16)(v120 >> 1) * (unsigned __int16)(v119 - 1024)) >> 15;
                  }
                  v116->n128_u16[0] = v121;
                  v116 = (__n128 *)((char *)v116 + 2);
                  v115 = 1 - v115;
                  --v112;
                  --v114;
                  v109 += 16;
                }
                while (v114 > 1);
                v105 = *(_DWORD *)(a2 + 28);
                v18 = a4;
              }
              v108 = (__n128 *)((char *)v108 + 4 * v101);
              v122 = v107 < 3;
              if (v107 >= 3)
                v123 = 0;
              else
                v123 = v105;
              v124 = v107 + v123;
              if (v122)
                v125 = v18;
              else
                v125 = 0;
              v107 = v124 - 2;
              v104 += 16 * v125;
              v99 += 16 * v21;
              v49 = __OFSUB__(v102, 2);
              v102 -= 2;
            }
            while (!((v102 < 0) ^ v49 | (v102 == 0)));
          }
          if (v103 >= 1)
          {
            v126 = (char *)a17 + 2 * v101;
            v127 = *(_DWORD *)(a2 + 28);
            v128 = *(_DWORD *)(a2 + 32);
            v129 = v127 - 1;
            v130 = a7 - 32;
            v131 = 16 * v21;
            result = 15312;
            do
            {
              if (v128 >= 1)
              {
                v132 = 0;
                v133 = 0;
                v134 = 0;
                v135 = 0;
                v136 = 0;
                v137 = *(_DWORD *)(a2 + 36);
                v138 = v128 + 1;
                v139 = v265 == 0;
                v140 = v130;
                do
                {
                  if (!v136)
                  {
                    v141 = *(unsigned __int16 *)(v140 + 32);
                    v140 += 32;
                    v135 = v141;
                    v134 = *(unsigned __int16 *)(v140 + 16);
                    v136 = v137;
                  }
                  v142 = *(_WORD *)(v100 + v132);
                  if ((unsigned __int16)(v142 - 1040) > 0x3BD0u)
                  {
                    LOWORD(v144) = 0;
                  }
                  else
                  {
                    if (v139)
                      v143 = v134;
                    else
                      v143 = v135;
                    v144 = ((unsigned __int16)(v143 >> 1) * (unsigned __int16)(v142 - 1024)) >> 15;
                  }
                  *(_WORD *)&v126[v133] = v144;
                  v139 = 1 - v139;
                  --v136;
                  --v138;
                  v133 += 2;
                  v132 += 16;
                }
                while (v138 > 1);
                v127 = *(_DWORD *)(a2 + 28);
              }
              v145 = v129 < 3;
              if (v129 >= 3)
                v146 = 0;
              else
                v146 = v127;
              v147 = v129 + v146;
              if (v145)
                v148 = v18;
              else
                v148 = 0;
              v129 = v147 - 2;
              v130 += 16 * v148;
              v126 += 4 * v101;
              v100 += v131;
              v49 = __OFSUB__(v103, 2);
              v103 -= 2;
            }
            while (!((v103 < 0) ^ v49 | (v103 == 0)));
          }
        }
        return result;
      case 2:
        v149 = *(unsigned __int16 *)(a2 + 22);
        v150 = a8 + 2 * (v21 + v21 * v149);
        v151 = *(unsigned __int16 *)(a2 + 20);
        v152 = a8 + 2 * v21 * (v149 + 9) + 2 * v151;
        if ((*(_BYTE *)(a2 + 4) & 1) != 0)
          v153 = (_WORD *)v152;
        else
          v153 = (_WORD *)(v152 + 2);
        if ((*(_BYTE *)(a2 + 4) & 1) != 0)
          v154 = v151 + 1;
        else
          v154 = *(unsigned __int16 *)(a2 + 20);
        v155 = (_WORD *)(v150 + 2 * v154);
        if ((_DWORD)result == 1)
          goto LABEL_122;
        if ((_DWORD)result)
        goto LABEL_121;
      case 3:
        if (*(_DWORD *)(a2 + 4))
        v155 = (_WORD *)(a8 + 2 * (v21 + v21 * *(unsigned __int16 *)(a2 + 22)) + 2 * *(unsigned __int16 *)(a2 + 20));
        v153 = &v155[8 * v21];
        if ((_DWORD)result == 1)
        {
LABEL_122:
          v160 = 16 * v21;
          v162 = 2 * a6;
          v163 = a6;
          v164 = a7;
        }
        else
        {
          if ((_DWORD)result)
LABEL_121:
          v156 = 16 * v21;
          v157 = 2 * a6;
          v158 = a6;
          v159 = a7;
        }
        break;
      default:
    }
  }
  return result;
}

void PDAF::PixelEngine::ProcessPart2(uint64_t a1, uint64_t a2, double a3, double a4, int16x4_t a5, int16x4_t a6)
{
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  __int16 *v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  _DWORD *v90;
  int v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  _BOOL4 v111;
  int v112;
  int v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  BOOL v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  __int16 v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  __int16 *v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  unsigned int v174;
  uint64_t v176;
  _DWORD *v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned int v184;
  _DWORD *v185;
  int v186;
  unsigned int v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  int v215;
  int v216;
  uint64_t v218;
  uint64_t v219;
  _DWORD *v220;
  _BOOL8 v221;
  int v222;
  BOOL v228;
  uint64_t v229;
  int v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int v237;
  __int16 *v238;
  BOOL v239;
  unsigned int v240;
  unsigned int v241;
  __int16 v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  uint64_t v251;
  int v252;
  int v253;
  __int16 *v254;
  unsigned int v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v264;
  _DWORD *v265;
  unsigned int v266;
  _DWORD *v267;
  int v268;
  unsigned int v269;
  int v270;
  _DWORD *v271;
  int v272;
  int v273;
  BOOL v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  _DWORD *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _DWORD *v301;
  _BOOL8 v302;
  int v303;
  BOOL v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  char v314;
  unsigned int v315;
  int v316;
  int v317;
  __int16 v318;
  __int16 *v319;
  int v320;
  int v321;
  int v322;
  int v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  int v327;
  int v328;
  __int16 *v329;
  int v330;
  int v331;
  int v332;
  unsigned int v333;
  int v334;
  unsigned int v335;
  _BOOL4 v337;
  unsigned int v338;
  _DWORD *v339;
  unsigned int v340;
  _DWORD *v341;
  int v342;
  int v343;
  int v344;
  _DWORD *v345;
  unsigned int v346;
  int v347;
  unsigned int v348;
  int v349;
  BOOL v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  int v354;
  const __int16 *v355;
  const __int16 *v356;
  uint64_t v357;
  int8x8_t *v358;
  int16x8_t v359;
  int16x8_t v360;
  uint64_t v361;
  uint16x8_t v362;
  int16x8_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  int16x8_t v370;
  uint64_t v371;
  int v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int v376;
  int v377;
  int v378;
  int16x8_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  int8x8_t *v384;
  const __int16 *v385;
  const __int16 *v386;
  const __int16 *v387;
  uint64_t v388;
  int8x16_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int8x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int8x16_t v396;
  uint8x16_t v397;
  int8x16_t v398;
  int16x8_t v399;
  int16x8_t v400;
  uint8x16_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int16x8_t v412;
  int8x16_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int8x16_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  uint16x8_t v428;
  int8x16_t v429;
  int16x8_t v430;
  int16x8_t v431;
  int8x16_t v432;
  uint64_t v433;
  int v434;
  int v435;
  _DWORD *v436;
  unsigned __int16 *v437;
  int v438;
  int v439;
  _DWORD *v440;
  int v441;
  _DWORD *v442;
  int v443;
  int v444;
  _DWORD *v445;
  int v446;
  uint64_t v447;
  float v448;
  int v449;
  int v450;
  int v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _DWORD *v459;
  uint64_t v460;
  int *v461;
  float v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  char v467;
  uint64_t v468;
  char v469;
  float v470;
  int *v471;
  int *v472;
  int *v473;
  int *v474;
  int *v475;
  unsigned int v476;
  int v477;
  unsigned int v478;
  float v479;
  float v480;
  int v481;
  int v482;
  _DWORD *v483;
  int v484;
  _DWORD *v485;
  int *v486;
  uint64_t v487;
  int v488;
  int v489;
  unsigned int v490;
  int v491;
  int v492;
  const __int16 *v493;
  const __int16 *v494;
  uint64_t v495;
  int8x8_t *v496;
  int16x8_t v497;
  int16x8_t v498;
  int16x8_t v499;
  uint16x8_t v500;
  int16x8_t v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  uint64_t v506;
  uint64_t v507;
  int16x8_t v508;
  int v509;
  int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  int v515;
  int v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  int8x8_t *v520;
  const __int16 *v521;
  const __int16 *v522;
  const __int16 *v523;
  int16x8_t v524;
  int16x8_t v525;
  unsigned __int128 v526;
  int8x8_t v527;
  int16x8_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int16x8_t v531;
  int8x16_t v532;
  uint8x16_t v533;
  int16x8_t v534;
  uint8x16_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int16x8_t v539;
  int16x8_t v540;
  int16x8_t v541;
  int16x8_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int16x8_t v546;
  int8x16_t v547;
  int16x8_t v548;
  int16x8_t v549;
  int8x16_t v550;
  int16x8_t v551;
  int16x8_t v552;
  int16x8_t v553;
  int16x8_t v554;
  int8x16_t v555;
  int8x16_t v556;
  int8x16_t v557;
  int8x16_t v558;
  int8x16_t v559;
  int8x16_t v560;
  int16x8_t v561;
  int16x8_t v562;
  uint64_t v563;
  int v564;
  _DWORD *v565;
  unsigned __int16 *v566;
  int v567;
  int v568;
  _DWORD *v569;
  int v570;
  _DWORD *v571;
  int v572;
  int v573;
  _DWORD *v574;
  int v575;
  float v576;
  uint64_t v577;
  int v578;
  int v579;
  int v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  _DWORD *v588;
  uint64_t v589;
  int *v590;
  float v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char v596;
  uint64_t v597;
  char v598;
  float v599;
  int *v600;
  int *v601;
  int *v602;
  int *v603;
  int *v604;
  unsigned int v605;
  int v606;
  unsigned int v607;
  float v608;
  float v609;
  int v610;
  int v611;
  _DWORD *v612;
  int v613;
  _DWORD *v614;
  int *v615;
  uint64_t v616;
  int v617;
  int v618;
  unsigned int v619;
  int v620;
  int v621;
  int v622;
  int16x8_t *v623;
  int16x8_t *v624;
  uint64_t v625;
  int8x8_t *v626;
  int16x8_t v627;
  int16x8_t v628;
  unsigned int v629;
  uint16x8_t v630;
  int16x8_t v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  int8x16_t v636;
  int16x8_t v637;
  int16x8_t v638;
  uint64_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int16x8_t v644;
  int16x8_t v645;
  int v646;
  int v647;
  uint64_t v648;
  int v649;
  uint64_t v650;
  int8x8_t *v651;
  int16x8_t *v652;
  int16x8_t *v653;
  unsigned int v654;
  int16x8_t v655;
  int16x8_t v656;
  int16x8_t v657;
  int8x16_t v658;
  int16x8_t v659;
  int16x8_t v660;
  int16x8_t v661;
  int16x8_t v662;
  int8x16_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int16x8_t v666;
  uint8x16_t v667;
  int16x8_t v668;
  uint8x16_t v669;
  int16x8_t v670;
  int16x8_t v671;
  int8x16_t v672;
  int16x8_t v673;
  int16x8_t v674;
  int16x8_t v675;
  int16x8_t v676;
  int16x8_t v677;
  int8x16_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int8x8_t v681;
  int16x8_t v682;
  int8x16_t v683;
  int16x8_t v684;
  int8x16_t v685;
  int8x16_t v686;
  uint64_t v687;
  int v688;
  uint64_t v689;
  int v690;
  int v691;
  int v692;
  _DWORD *v693;
  int v694;
  _DWORD *v695;
  _DWORD *v696;
  int v697;
  uint64_t v698;
  float v699;
  int v700;
  int v701;
  int v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  _DWORD *v710;
  uint64_t v711;
  int *v712;
  float v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  char v718;
  uint64_t v719;
  char v720;
  float v721;
  int *v722;
  int *v723;
  int *v724;
  int *v725;
  int *v726;
  unsigned int v727;
  int v728;
  unsigned int v729;
  float v730;
  float v731;
  int v732;
  int v733;
  _DWORD *v734;
  int v735;
  _DWORD *v736;
  int *v737;
  uint64_t v738;
  int v739;
  int v740;
  unsigned int v741;
  int v742;
  int v743;
  int16x8_t *v744;
  int16x8_t *v745;
  uint64_t v746;
  int8x8_t *v747;
  int16x8_t v748;
  int16x8_t v749;
  unsigned int v750;
  uint16x8_t v751;
  int16x8_t v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  int8x16_t v757;
  int16x8_t v758;
  int16x8_t v759;
  uint64_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int16x8_t v765;
  int16x8_t v766;
  int v767;
  int v768;
  uint64_t v769;
  int v770;
  uint64_t v771;
  int8x8_t *v772;
  int16x8_t *v773;
  int16x8_t *v774;
  unsigned int v775;
  int16x8_t v776;
  int16x8_t v777;
  int16x8_t v778;
  int8x16_t v779;
  int16x8_t v780;
  int16x8_t v781;
  int16x8_t v782;
  int16x8_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int16x8_t v787;
  uint8x16_t v788;
  int16x8_t v789;
  uint8x16_t v790;
  int16x8_t v791;
  int16x8_t v792;
  int8x16_t v793;
  int16x8_t v794;
  int16x8_t v795;
  int16x8_t v796;
  int16x8_t v797;
  int16x8_t v798;
  int8x16_t v799;
  int16x8_t v800;
  int16x8_t v801;
  int8x8_t v802;
  int16x8_t v803;
  int8x16_t v804;
  int16x8_t v805;
  int8x16_t v806;
  int8x16_t v807;
  uint64_t v808;
  int v809;
  uint64_t v810;
  int v811;
  int v812;
  int v813;
  _DWORD *v814;
  int v815;
  _DWORD *v816;
  _DWORD *v817;
  int v818;
  uint64_t v819;
  float v820;
  int v821;
  int v822;
  int v823;
  int v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  _DWORD *v831;
  uint64_t v832;
  int *v833;
  float v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  char v839;
  uint64_t v840;
  char v841;
  float v842;
  int *v843;
  int *v844;
  int *v845;
  int *v846;
  int *v847;
  unsigned int v848;
  int v849;
  unsigned int v850;
  float v851;
  float v852;
  int v853;
  int v854;
  _DWORD *v855;
  int v856;
  _DWORD *v857;
  int *v858;
  uint64_t v859;
  int v860;
  int v861;
  unsigned int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unsigned __int16 *v866;
  uint64_t v867;
  unsigned int *v868;
  uint64_t v869;
  int v870;
  uint64_t v871;
  unsigned int *v872;
  uint64_t k;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unsigned __int16 *v878;
  uint64_t v879;
  unsigned int *v880;
  uint64_t v881;
  int v882;
  uint64_t v883;
  unsigned int *v884;
  uint64_t m;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unsigned __int16 *v890;
  uint64_t v891;
  unsigned int *v892;
  uint64_t v893;
  int v894;
  uint64_t v895;
  unsigned int *v896;
  uint64_t i;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unsigned __int16 *v902;
  uint64_t v903;
  unsigned int *v904;
  uint64_t v905;
  int v906;
  uint64_t v907;
  unsigned int *v908;
  uint64_t j;
  uint64_t v910;
  _DWORD *v911;
  _DWORD *v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  int v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  int v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  _DWORD *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  int v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  unint64_t v957;
  char v958;
  _DWORD *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  unint64_t v963;
  int v964;
  unint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  unint64_t v969;
  char v970;
  unint64_t v971;
  unsigned int v972;
  unint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  int v978;
  unint64_t v979;
  unsigned int v980;
  unint64_t v981;
  uint64_t v982;
  int v983;
  unint64_t v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  int v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  unsigned int v992;
  unint64_t v993;
  unsigned int v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  int v1002;
  int v1003;
  uint64_t v1004;
  uint64_t v1005;
  int v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  char v1012;
  uint64_t v1013;
  char v1014;
  int v1015;
  int v1016;
  int v1017;
  int v1018;
  uint64_t v1019;
  int v1020;
  uint64_t v1021;
  int v1022;
  int v1023;
  int v1024;
  int v1025;
  int v1026;
  int v1027;
  int v1028;
  int v1029;
  uint64_t v1030;
  unsigned int v1031;
  uint64_t v1032;
  unsigned int v1033;
  int16x8_t *v1034;
  unsigned int v1035;
  uint64_t v1036;
  unsigned int v1037;
  int16x8_t v1039;
  int8x16_t v1040;
  int8x16_t v1041;
  int8x16_t v1042;
  _QWORD v1043[2];
  int16x8x2_t v1044;
  int16x8x2_t v1045;
  int16x8x2_t v1046;

  v1043[0] = *MEMORY[0x24BDAC8D0];
  if (!a1)
    PDAF::PixelEngine::ProcessPart2();
  v8 = a1;
  v9 = *(unsigned __int16 *)(a1 + 36);
  v10 = *(unsigned __int16 *)(a1 + 40) - v9;
  v11 = *(unsigned __int16 *)(a1 + 38);
  if ((*(unsigned __int16 *)(a1 + 42) - v11) * v10 >= 129)
    PDAF::PixelEngine::ProcessPart2();
  v12 = *(_DWORD *)(a1 + 12);
  if (v12 >= 2)
    PDAF::PixelEngine::ProcessPart2();
  v13 = (unsigned int *)(a1 + 132252);
  v14 = *(_DWORD *)(a1 + 16);
  if (v14 == 1)
  {
    v95 = *(unsigned int *)(a1 + 132260);
    if (v95 <= 1)
      PDAF::PixelEngine::ProcessPart2();
    v96 = *(unsigned int *)(a1 + 132296);
    if (v96 <= 1)
      PDAF::PixelEngine::ProcessPart2();
    v97 = *(_DWORD *)(a1 + 52);
    if (v97 < 1)
    {
      v98 = 0;
    }
    else
    {
      v98 = 0;
      v99 = a1 + 132304 + *(unsigned int *)(a1 + 132288);
      v8 = a1;
      v100 = a1 + 132304 + *v13;
      v1010 = 2 * (v95 >> 1);
      v1013 = 2 * (v96 >> 1);
      do
      {
        v101 = *(_DWORD *)(v8 + 60);
        v1026 = v97;
        if (v101 >= 1)
        {
          v102 = *(_DWORD *)(v8 + 20);
          if (v102 > 1)
            PDAF::PixelEngine::ProcessPart2();
          v103 = 0;
          v104 = *(_DWORD *)(v8 + 52);
          v105 = v104 - v97;
          v106 = v101 + 1;
          do
          {
            v107 = *(unsigned __int16 *)(v99 + 2 * v103);
            v108 = *(unsigned __int16 *)(v100 + 2 * v103);
            v109 = (4408 * v107) >> 16;
            if (v102)
              v108 = v108 & 0xFFC | (v108 >> 10) & 3;
            v110 = v108 - ((4408 * v107) >> 16);
            if (v109 > v108)
              v110 = v109 - v108;
            v111 = v110 > 1;
            if ((unsigned __int16)(v107 + 8563) < 0x21AEu && v111)
              v112 = *(_WORD *)(v100 + 2 * v103) != 0;
            else
              v112 = v111;
            if (v112 == 1 && v98 < 0x15)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "----  #%04d  (%04dx%04d+%04d+%04d) IMAGE/DATA = %5d/%5d/%5d\n", v98, v101, v104, v103, v105, v108, v109, v107);
            v98 += v112;
            ++v103;
            --v106;
          }
          while (v106 > 1);
        }
        v99 += v1013;
        v100 += v1010;
        v97 = v1026 - 1;
        v8 = a1;
      }
      while (v1026 > 1);
    }
    v114 = *(_DWORD *)(v8 + 20);
    if (v114)
    {
      if (v114 != 1)
        PDAF::PixelEngine::ProcessPart2();
      v115 = "PACK10";
    }
    else
    {
      v115 = "RAW14 ";
    }
    v116 = "FAIL";
    if (!v98)
      v116 = "PASS";
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s (%s) [%02dx%02d] [+%04d+%04d, %04dx%04d] %05d PIXELS, %05d ERRORS\n", v116, v115, *(unsigned __int16 *)(v8 + 40) - *(unsigned __int16 *)(v8 + 36), *(unsigned __int16 *)(v8 + 42) - *(unsigned __int16 *)(v8 + 38), *(unsigned __int16 *)(v8 + 48), *(unsigned __int16 *)(v8 + 50), *(_DWORD *)(v8 + 60), *(_DWORD *)(v8 + 52), *(_DWORD *)(v8 + 52) * *(_DWORD *)(v8 + 60), v98);
    return;
  }
  if (v14)
    PDAF::PixelEngine::ProcessPart2();
  v15 = a1 + 28;
  v16 = a1 + 109172;
  v911 = (_DWORD *)(a1 + 44224);
  v912 = (_DWORD *)(a1 + 109172);
  switch(*(_DWORD *)(a1 + 28))
  {
    case 0:
      if (*(unsigned __int8 *)(a1 + 138) != *(unsigned __int8 *)(a1 + 137))
        PDAF::PixelEngine::ProcessPart2(a1, a2, v16);
      v17 = *v13;
      v18 = *(unsigned int *)(a1 + 132264);
      v965 = (unint64_t)*(unsigned int *)(a1 + 132260) >> 1;
      v977 = (unint64_t)*(unsigned int *)(a1 + 132296) >> 1;
      v19 = *(unsigned int *)(a1 + 132276);
      v971 = (unint64_t)*(unsigned int *)(a1 + 132272) >> 1;
      v20 = *(unsigned int *)(a1 + 132288);
      v990 = *(unsigned int *)(a1 + 132284);
      v1000 = 2 * v10;
      if (v12 != 1)
      {
        if (*(_DWORD *)(a1 + 32))
          PDAF::PixelEngine::ProcessPart2();
        v21 = *(_DWORD *)(a1 + 52);
        if (v21 >= 1)
        {
          v22 = 0;
          v23 = *(_DWORD *)(a1 + 56);
          v24 = v17 + 132304;
          v25 = *(_DWORD *)(a1 + 68) != 0;
          v926 = 2 * v965;
          v26 = v19 + 132432;
          v27 = v19 + 132304;
          v28 = v18 + 132304;
          v29 = v20 + 132432;
          v919 = 2 * v977;
          v922 = 2 * v971;
          v30 = v20 + 132304;
          v31 = v24;
          v32 = v18 + 132432;
          v33 = a1 + 3976;
          v34 = v28;
          v35 = *(_DWORD *)(a1 + 56);
          while (1)
          {
            v36 = *(_DWORD *)(a1 + 60);
            if (v36 >= 1)
              break;
LABEL_80:
            if (!v22)
              v25 = 1 - v25;
            v22 = 1 - v22;
            v93 = v35 == 1;
            if (v35 == 1)
              v35 = v23;
            else
              --v35;
            v94 = v1000;
            if (!v93)
              v94 = 0;
            v33 += 156 * v94;
            v31 += v926;
            v27 += v990;
            v26 += v990;
            v34 += v922;
            v29 += v919;
            v30 += v919;
            v32 += v922;
            _VF = __OFSUB__(v21--, 1);
            if ((v21 < 0) ^ _VF | (v21 == 0))
              goto LABEL_517;
          }
          v930 = v35;
          v978 = v22;
          v983 = v21;
          v37 = 0;
          v38 = 4 * *(unsigned __int16 *)(a1 + 140);
          v1025 = *(unsigned __int16 *)(a1 + 72) >> 1;
          v39 = *(unsigned __int8 *)(a1 + 139);
          v40 = v36 + 1;
          v934 = v32;
          v938 = v30;
          v41 = v26;
          v942 = v29;
          v946 = v34;
          v42 = v29;
          v1012 = *(_BYTE *)(a1 + 143);
          v950 = v41;
          v955 = v27;
          v960 = v31;
          v966 = v33;
          v972 = v25;
          while (1)
          {
            if (v37)
              v43 = 0;
            else
              v43 = 312;
            if (!v37)
              v37 = *(_DWORD *)(a1 + 64);
            _X8 = a1 + v32;
            __asm { PRFM            #2, [X8] }
            _X8 = a1 + v41;
            __asm { PRFM            #2, [X8] }
            _X8 = a1 + v42;
            __asm { PRFM            #2, [X8] }
            if (*(_BYTE *)(a1 + v27))
              v52 = 1;
            else
              v52 = *(_BYTE *)(a1 + v27 + 1) != 0;
            v33 += v43;
            v53 = *(unsigned __int16 *)(a1 + v31);
            if (!*(_WORD *)(a1 + v31))
              goto LABEL_78;
            v54 = *(unsigned __int16 *)(a1 + v30);
            if ((unsigned __int16)(v54 + 8563) < 0x21AEu)
              v52 = 1;
            if (v52)
              goto LABEL_78;
            v55 = 4408 * (v54 >> 1);
            v56 = v55 >> 15;
            v57 = (v55 >> 15) - v53;
            v58 = v57;
            if (v55 >> 15 <= v53)
              v59 = v53 - (v55 >> 15);
            else
              v59 = v57;
            v60 = a1 + v34;
            v61 = *(__int16 *)(a1 + v34 + 10);
            v62 = *(__int16 *)(a1 + v34 + 8);
            v63 = v61 - v62;
            if (v58 >= 0)
              v64 = (v55 >> 15) - v53;
            else
              v64 = v53 - (v55 >> 15);
            v65 = (v38 * v64) >> 16;
            v66 = 2 * v63;
            if ((v63 & 0x40000000) != 0)
              v67 = -2 * v63;
            else
              v67 = 2 * v63;
            if (v65 <= v67)
            {
              if (v67 >= 2 * v65)
                v71 = v67 < 4 * v65;
              else
                v71 = 2;
            }
            else
            {
              v68 = *(__int16 *)(v60 + 12);
              v69 = *(__int16 *)(v60 + 6);
              v66 = v61 + v68 - (v62 + v69);
              if (v66 >= 0)
                v67 = v61 + v68 - (v62 + v69);
              else
                v67 = v62 + v69 - (v61 + v68);
              if (v65 <= v67)
              {
                v71 = 3;
              }
              else
              {
                v66 = v68 + *(__int16 *)(a1 + v34 + 14) - (v69 + *(__int16 *)(a1 + v34 + 4));
                if (v66 >= 0)
                  v67 = v68 + *(__int16 *)(a1 + v34 + 14) - (v69 + *(__int16 *)(a1 + v34 + 4));
                else
                  v67 = v69 + *(__int16 *)(a1 + v34 + 4) - (v68 + *(__int16 *)(a1 + v34 + 14));
                if (v65 <= v67)
                {
                  v71 = 4;
                }
                else
                {
                  v70 = (__int16 *)(a1 + v34);
                  v66 = v70[8] + v70[9] - (v70[1] + *v70);
                  if (v66 >= 0)
                    v67 = v70[8] + v70[9] - (v70[1] + *v70);
                  else
                    v67 = v70[1] + *v70 - (v70[8] + v70[9]);
                  v71 = 5;
                }
              }
              if (v65 < v67 >> 1)
              {
                v72 = v25;
                goto LABEL_66;
              }
            }
            v73 = (64 - ((v55 >> 15) & 0x3F)) * *(unsigned __int8 *)(a1 + 74 + (v55 >> 21))
                + ((v55 >> 15) & 0x3F) * *(unsigned __int8 *)(a1 + 74 + (v55 >> 21) + 1);
            v74 = (__int16)(8 * v67);
            v75 = ((2 * v74 * (__int16)(2 * v73)) >> 16) * v1025;
            v76 = (v75 >> 14) & 0xFFFFFFFE;
            if (((v75 >> 14) & 0xFFFFFF00) != 0)
              v77 = 255;
            else
              v77 = (v75 >> 14) & 0xFE;
            v78 = v77 - v39;
            if (v78 >= 0x10)
              v79 = 16;
            else
              v79 = v78;
            v72 = v25;
            if (v76 >= v39 && v79 != 0)
            {
              v86 = (4 * v73 * 4 * v73) >> 16;
              if (v86 >= 0x1FFF)
                v86 = 0x1FFF;
              v87 = (int)((v86 >> 1) * 2 * v74 * (v79 >> 1)) >> 16 << v1012;
              if (v87 <= -32768)
                v87 = -32768;
              if (v87 >= 0x7FFF)
                v87 = 0x7FFF;
              v88 = v87 * v74;
              v83 = (v87 * (__int16)(8 * v59)) >> 15;
              if ((v66 ^ v58) >= 0)
                v89 = v71 + 6;
              else
                v89 = v71;
              v90 = (_DWORD *)(v33 + 156 * v25 + 12 * v89);
              v91 = v90[1] + (v88 >> 15);
              *v90 += v79;
              v90[1] = v91;
              v92 = v90[2];
              v82 = v90 + 2;
              v53 = v92;
              goto LABEL_77;
            }
LABEL_66:
            v81 = v33 + 156 * v72;
            v84 = *(_DWORD *)(v81 + 152);
            v82 = (_DWORD *)(v81 + 152);
            v83 = v84;
            v85 = *(v82 - 1) + v56;
            ++*(v82 - 2);
            *(v82 - 1) = v85;
LABEL_77:
            *v82 = v83 + v53;
LABEL_78:
            --v37;
            v25 = 1 - v25;
            --v40;
            v31 += 2;
            ++v27;
            ++v41;
            v34 += 8;
            v42 += 2;
            v30 += 2;
            v32 += 8;
            if (v40 <= 1)
            {
              v23 = *(_DWORD *)(a1 + 56);
              v21 = v983;
              v22 = v978;
              v25 = v972;
              v31 = v960;
              v33 = v966;
              v26 = v950;
              v27 = v955;
              v29 = v942;
              v34 = v946;
              v32 = v934;
              v30 = v938;
              v35 = v930;
              goto LABEL_80;
            }
          }
        }
LABEL_517:
        v698 = a1;
        v700 = *(unsigned __int16 *)(a1 + 38);
        v701 = *(unsigned __int16 *)(a1 + 42) - v700;
        if (v701)
        {
          v702 = *(unsigned __int16 *)(a1 + 36);
          v703 = *(unsigned __int16 *)(a1 + 40) - v702;
          v704 = *(unsigned __int16 *)(a1 + 44);
          v705 = (v702 + v704 * v700);
          v706 = a1 + 44224 + 24 * v705 + 55732;
          v707 = v705 + 8 * v705;
          v708 = a1 + 44224 + 16 * v707 + 436;
          v709 = a1 + 32 * v705 + 192;
          v710 = (_DWORD *)(a1 + 4288);
          v1008 = 2 * v704;
          v711 = a1 + 16 * v707 + 44756;
          v998 = 144 * v704;
          v1022 = v703;
          v1035 = *(unsigned __int16 *)(a1 + 44);
          do
          {
            if (v703)
            {
              v712 = (int *)v711;
              v713 = *(float *)(a1 + 144);
              v714 = v706;
              v715 = v708;
              v716 = v709;
              do
              {
                v717 = 0;
                v718 = 1;
                do
                {
                  v719 = 0;
                  v720 = v718;
                  LOWORD(v699) = *(_WORD *)v716;
                  v699 = v713 * (float)((float)((float)LODWORD(v699) * 0.000061035) + 1.0);
                  v721 = *(float *)(v716 + 8) * *(float *)(v716 + 12);
                  do
                  {
                    v726 = &v710[v719];
                    v727 = v710[v719 + 1];
                    v728 = *v724++;
                    v729 = (float)((float)(v727 << v728) / v699);
                    if (v729)
                    {
                      v730 = v721
                           * (float)-(float)(*(float *)(v716 + 4)
                                           - (float)((float)((float)(v726[2] << *v725) / (float)v727)
                                                   * (float)*v723));
                      if (v730 < 0.0)
                        v731 = -0.5;
                      else
                        v731 = 0.5;
                      v732 = (int)(float)(v730 + v731);
                      v733 = *v726;
                    }
                    else
                    {
                      v732 = 0;
                      v733 = 0;
                    }
                    v734 = (_DWORD *)(v715 + 4 * *v722);
                    if ((v720 & 1) != 0)
                    {
                      *v734 = v733;
                      v734[12] = v729;
                      v735 = v732 * v729;
                    }
                    else
                    {
                      *v734 += v733;
                      v734[12] += v729;
                      v735 = v734[24] + v732 * v729;
                    }
                    v734[24] = v735;
                    v719 += 3;
                    ++v722;
                    ++v723;
                    ++v725;
                  }
                  while (v719 != 36);
                  v718 = 0;
                  v736 = (_DWORD *)(v714 + 4 * v717);
                  *v736 = v710[36];
                  v736[2] = v710[37];
                  v736[4] = v710[38];
                  v716 += 16;
                  v710 += 39;
                  v717 = 1;
                }
                while ((v720 & 1) != 0);
                v737 = v712;
                v738 = 12;
                do
                {
                  v739 = *(v737 - 12);
                  if (v739)
                  {
                    v740 = v739 >> 1;
                    if (*v737 < 0)
                      v740 = -v740;
                    *v737 = (v740 + *v737) / v739;
                  }
                  ++v737;
                  --v738;
                }
                while (v738);
                v715 += 144;
                v714 += 24;
                v712 += 36;
                --v703;
              }
              while (v703);
            }
            v709 += 16 * v1008;
            v741 = v1035;
            v708 += 144 * v1035;
            v711 += v998;
            v706 += 24 * v1035;
            --v701;
            v703 = v1022;
          }
          while (v701);
          v698 = a1;
        }
        else
        {
          v741 = *(unsigned __int16 *)(a1 + 44);
        }
        if (*(_DWORD *)(a1 + 148))
          PDAF::PixelEngine::ProcessPart2(v887, v888, v889);
        if (*(_DWORD *)(a1 + 160) != 1)
          PDAF::PixelEngine::ProcessPart2(v887, v888, v889);
        bzero((void *)(a1 + 109176), 0x5A24uLL);
        v890 = (unsigned __int16 *)a1;
        v891 = 0;
        v892 = (unsigned int *)(a1 + 109212);
        *v912 = *v911;
        v893 = a1 + 44224;
        do
        {
          v894 = *(_DWORD *)&v890[2 * v891 + 74];
          if ((v894 & 0x80000000) == 0)
          {
            if (v894)
            {
              v890 = (unsigned __int16 *)a1;
            }
            v895 = a1;
            v896 = v892;
            for (i = 160; i != 172; i += 4)
            {
              v898 = *(unsigned int *)(v895 + i);
              if ((int)v898 >= 1)
              {
                v895 = a1;
              }
              v896 += 384;
            }
            v890 = (unsigned __int16 *)a1;
          }
          ++v891;
          v892 += 1152;
        }
        while (v891 != 3);
        return;
      }
      if (*(_DWORD *)(a1 + 32))
        PDAF::PixelEngine::ProcessPart2();
      v620 = *(_DWORD *)(a1 + 52);
      if (v620 < 1)
        goto LABEL_517;
      v621 = 0;
      v622 = 0;
      v623 = (int16x8_t *)(a1 + 132304 + v17);
      v624 = (int16x8_t *)(a1 + 132304 + v20);
      v625 = a1 + 132304 + v18;
      v626 = (int8x8_t *)(a1 + 132304 + v19);
      v627 = vdupq_n_s16(*(char *)(a1 + 143));
      v628 = vdupq_n_s16(*(unsigned __int8 *)(a1 + 139));
      a5.i32[0] = *(unsigned __int16 *)(a1 + 140) >> 2;
      a6.i32[0] = *(unsigned __int16 *)(a1 + 72) >> 1;
      v629 = *(_DWORD *)(a1 + 68) != 0;
      v630 = (uint16x8_t)vdupq_n_s16(0xDE52u);
      v631 = vdupq_n_s16(0x1138u);
      v632 = *(_OWORD *)(a1 + 74);
      v633 = *(_OWORD *)(a1 + 90);
      v634 = *(_OWORD *)(a1 + 106);
      v635 = *(_OWORD *)(a1 + 122);
      v636.i64[0] = 0x3F003F003F003FLL;
      v636.i64[1] = 0x3F003F003F003FLL;
      v637.i64[0] = 0x40004000400040;
      v637.i64[1] = 0x40004000400040;
      v638.i64[0] = 0xF000F000F000F000;
      v638.i64[1] = 0xF000F000F000F000;
      v639 = a1 + 156 * -(int)v1000 + 3976;
      v640.i64[0] = 0x3000300030003;
      v640.i64[1] = 0x3000300030003;
      v641.i64[0] = 0x2000200020002;
      v641.i64[1] = 0x2000200020002;
      v642.i64[0] = 0x4000400040004;
      v642.i64[1] = 0x4000400040004;
      v643.i64[0] = 0x5000500050005;
      v643.i64[1] = 0x5000500050005;
      v644.i64[0] = 0x10001000100010;
      v644.i64[1] = 0x10001000100010;
      v645.i64[0] = -1;
      v645.i64[1] = -1;
      while (1)
      {
        v646 = *(_DWORD *)(a1 + 60);
        if (v622 >= 1)
          v647 = 0;
        else
          v647 = *(_DWORD *)(a1 + 56);
        v648 = v1000;
        if (v622 >= 1)
          v648 = 0;
        v639 += 156 * v648;
        if (v646)
          break;
LABEL_513:
        v625 += 2 * v971;
        v623 = (int16x8_t *)((char *)v623 + 2 * v965);
        v626 = (int8x8_t *)((char *)v626 + v990);
        v622 = v622 + v647 - 1;
        v624 = (int16x8_t *)((char *)v624 + 2 * v977);
        if (!v621)
          v629 = 1 - v629;
        v621 = 1 - v621;
        _VF = __OFSUB__(v620--, 1);
        if ((v620 < 0) ^ _VF | (v620 == 0))
          goto LABEL_517;
      }
      v989 = v647;
      v649 = 0;
      v650 = v625;
      v651 = v626;
      v652 = v623;
      v653 = v624;
      v1021 = v639;
      v654 = v629;
LABEL_497:
      v650 += 64;
      v655 = *(int16x8_t *)(v650 + 16);
      v656 = *(int16x8_t *)(v650 + 32);
      v1034 = v652;
      v657.i64[0] = 0x3A003A003A003ALL;
      v657.i64[1] = 0x3A003A003A003ALL;
      v658 = vandq_s8((int8x16_t)vcgtzq_s16(*v652), (int8x16_t)vcgtq_u16(v630, (uint16x8_t)vaddq_s16(*v653, v657)));
      v659 = vqdmulhq_s16((int16x8_t)vshrq_n_u16(*(uint16x8_t *)v653, 1uLL), v631);
      v660 = vsubq_s16(v659, *v652);
      v661 = vqshlq_n_s16(vabsq_s16(v660), 3uLL);
      v662 = vqdmulhq_lane_s16(v661, a5, 0);
      v663 = (int8x16_t)vcgtq_s16(v662, vabsq_s16(v656));
      v664 = (int8x16_t)vcgtq_s16(v662, vabsq_s16(v655));
      v665 = vbslq_s8(v664, vbslq_s8(v663, *(int8x16_t *)(v650 + 48), (int8x16_t)v656), (int8x16_t)v655);
      v666 = vaddq_s16(*(int16x8_t *)v650, *(int16x8_t *)v650);
      *(uint8x8_t *)v655.i8 = vqmovn_u16(vshrq_n_u16((uint16x8_t)v659, 6uLL));
      v655.u64[1] = (unint64_t)vmin_u8((uint8x8_t)vadd_s8(*(int8x8_t *)v655.i8, (int8x8_t)0x101010101010101), (uint8x8_t)0x3F3F3F3F3F3F3F3FLL);
      v667 = (uint8x16_t)vqtbl4q_s8(*(int8x16x4_t *)&v632, (int8x16_t)v655);
      v668 = (int16x8_t)vandq_s8((int8x16_t)v659, v636);
      v669 = (uint8x16_t)vuzp1q_s8((int8x16_t)vsubq_s16(v637, v668), (int8x16_t)v668);
      v670 = (int16x8_t)vmlal_high_u8(vmull_u8(*(uint8x8_t *)v669.i8, *(uint8x8_t *)v667.i8), v669, v667);
      v671 = vabsq_s16(v666);
      v672 = (int8x16_t)vcgeq_s16(v671, v662);
      v673 = (int16x8_t)vbslq_s8(v672, (int8x16_t)v666, v665);
      v674 = (int16x8_t)vcgeq_u16((uint16x8_t)v671, (uint16x8_t)vaddq_s16(v662, v662));
      v675 = (int16x8_t)vandq_s8((int8x16_t)vsubq_s16((int16x8_t)vbicq_s8(vbslq_s8(v672, v641, vbslq_s8(v664, vbslq_s8(v663, v643, v642), v640)), (int8x16_t)v674), v674), (int8x16_t)vcgtq_u16((uint16x8_t)vshlq_n_s16(v662, 2uLL), (uint16x8_t)v671));
      v676 = vabsq_s16(v673);
      v677 = vaddq_s16(v670, v670);
      v678 = vorrq_s8((int8x16_t)vcgeq_u16((uint16x8_t)v662, vshrq_n_u16((uint16x8_t)v676, 1uLL)), v672);
      v679 = vqshlq_n_s16(v676, 3uLL);
      v680 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16(vqshlq_n_s16(vqdmulhq_lane_s16(vqdmulhq_s16(v679, v677), a6, 0), 1uLL), v628), v644), (int16x8_t)0), v678);
      v681 = v651[1];
      ++v651;
      v672.i64[0] = 0x6000600060006;
      v672.i64[1] = 0x6000600060006;
      v682 = vaddq_s16((int16x8_t)vandq_s8(veorq_s8((int8x16_t)vcltzq_s16(v660), (int8x16_t)vcgtq_s16(v673, v645)), v672), v675);
      v683 = vorrq_s8((int8x16_t)v680, vornq_s8(vandq_s8((int8x16_t)vmovl_s8(vmvn_s8(v681)), v658), v658));
      v684 = vqshlq_s16(vqdmulhq_s16(v679, vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v680, 1uLL), vminq_s16(vqdmulhq_s16(v677, v677), v638))), v627);
      v685 = (int8x16_t)vceqzq_s16(v680);
      v686 = vbslq_s8(v685, *(int8x16_t *)v652, (int8x16_t)vqdmulhq_s16(v684, v661));
      v1039 = v682;
      v1040 = v683;
      v1041 = vbslq_s8(v685, (int8x16_t)v659, (int8x16_t)vqdmulhq_s16(v684, v679));
      v1042 = v686;
      v687 = 0x7FFFFFFFFFFFFFF8;
      while (1)
      {
        if (v649 >= 1)
          v688 = 0;
        else
          v688 = *(_DWORD *)(a1 + 64);
        if (v649 >= 1)
          v689 = 0;
        else
          v689 = 312;
        v639 += v689;
        v690 = v1041.u16[v687];
        v691 = v1042.u16[v687];
        v692 = *(unsigned __int16 *)((char *)v1043 + v687 * 2);
        if (v1041.i16[v687])
        {
          if (v690 == 0xFFFF)
            goto LABEL_509;
          v693 = (_DWORD *)(v639 + 156 * v654 + 12 * *(unsigned __int16 *)((char *)&v1039 + v687 * 2 + 16));
          v694 = v693[1];
          *v693 += v690;
          v693[1] = v694 + v691;
          v695 = v693 + 2;
        }
        else
        {
          v696 = (_DWORD *)(v639 + 156 * v654);
          v697 = v696[37];
          ++v696[36];
          v696[37] = v697 + v691;
          v695 = v696 + 38;
        }
        *v695 += v692;
LABEL_509:
        if (!--v646)
        {
          v639 = v1021;
          v647 = v989;
          goto LABEL_513;
        }
        v654 = 1 - v654;
        v649 = v649 + v688 - 1;
        if (!(++v687 * 2))
        {
          v652 = v1034 + 1;
          ++v653;
          goto LABEL_497;
        }
      }
    case 1:
      if (*(unsigned __int8 *)(a1 + 138) != *(unsigned __int8 *)(a1 + 137))
        PDAF::PixelEngine::ProcessPart2(a1, a2, v16);
      v117 = *v13;
      v118 = *(unsigned int *)(a1 + 132264);
      v973 = (unint64_t)*(unsigned int *)(a1 + 132260) >> 1;
      v984 = (unint64_t)*(unsigned int *)(a1 + 132296) >> 1;
      v119 = *(unsigned int *)(a1 + 132276);
      v979 = (unint64_t)*(unsigned int *)(a1 + 132272) >> 1;
      v120 = *(unsigned int *)(a1 + 132288);
      v991 = *(unsigned int *)(a1 + 132284);
      v1001 = 2 * v10;
      if (v12 == 1)
      {
        if (*(_DWORD *)(a1 + 32))
          PDAF::PixelEngine::ProcessPart2();
        v742 = *(_DWORD *)(a1 + 52);
        if (v742 < 1)
          goto LABEL_571;
        v743 = 0;
        v744 = (int16x8_t *)(a1 + 132304 + v117);
        v745 = (int16x8_t *)(a1 + 132304 + v120);
        v746 = a1 + 132304 + v118;
        v747 = (int8x8_t *)(a1 + 132304 + v119);
        v748 = vdupq_n_s16(*(char *)(a1 + 143));
        v749 = vdupq_n_s16(*(unsigned __int8 *)(a1 + 139));
        a5.i32[0] = *(unsigned __int16 *)(a1 + 140) >> 2;
        a6.i32[0] = *(unsigned __int16 *)(a1 + 72) >> 1;
        v750 = *(_DWORD *)(a1 + 68) != 0;
        v751 = (uint16x8_t)vdupq_n_s16(0xDE52u);
        v752 = vdupq_n_s16(0x1138u);
        v753 = *(_OWORD *)(a1 + 74);
        v754 = *(_OWORD *)(a1 + 90);
        v755 = *(_OWORD *)(a1 + 106);
        v756 = *(_OWORD *)(a1 + 122);
        v757.i64[0] = 0x3F003F003F003FLL;
        v757.i64[1] = 0x3F003F003F003FLL;
        v758.i64[0] = 0x40004000400040;
        v758.i64[1] = 0x40004000400040;
        v759.i64[0] = 0xF000F000F000F000;
        v759.i64[1] = 0xF000F000F000F000;
        v760 = a1 + 156 * -(int)v1001 + 3976;
        v761.i64[0] = 0x3000300030003;
        v761.i64[1] = 0x3000300030003;
        v762.i64[0] = 0x2000200020002;
        v762.i64[1] = 0x2000200020002;
        v763.i64[0] = 0x4000400040004;
        v763.i64[1] = 0x4000400040004;
        v764.i64[0] = 0x5000500050005;
        v764.i64[1] = 0x5000500050005;
        v765.i64[0] = 0x10001000100010;
        v765.i64[1] = 0x10001000100010;
        v766.i64[0] = -1;
        v766.i64[1] = -1;
        while (1)
        {
          v767 = *(_DWORD *)(a1 + 60);
          if (v743 >= 1)
            v768 = 0;
          else
            v768 = *(_DWORD *)(a1 + 56);
          v769 = v1001;
          if (v743 >= 1)
            v769 = 0;
          v760 += 156 * v769;
          if (!v767)
            goto LABEL_569;
          v1023 = v768;
          v770 = 0;
          v771 = v746;
          v772 = v747;
          v773 = v744;
          v774 = v745;
          v1036 = v760;
          v775 = v750;
LABEL_553:
          v771 += 64;
          v776 = *(int16x8_t *)(v771 + 16);
          v777 = *(int16x8_t *)(v771 + 32);
          v778.i64[0] = 0x3A003A003A003ALL;
          v778.i64[1] = 0x3A003A003A003ALL;
          v779 = vandq_s8((int8x16_t)vcgtzq_s16(*v773), (int8x16_t)vcgtq_u16(v751, (uint16x8_t)vaddq_s16(*v774, v778)));
          v780 = vqdmulhq_s16((int16x8_t)vshrq_n_u16(*(uint16x8_t *)v774, 1uLL), v752);
          v781 = vsubq_s16(v780, *v773);
          v782 = vqshlq_n_s16(vabsq_s16(v781), 3uLL);
          v783 = vqdmulhq_lane_s16(v782, a5, 0);
          v784 = (int8x16_t)vcgtq_s16(v783, vabsq_s16(v777));
          v785 = (int8x16_t)vcgtq_s16(v783, vabsq_s16(v776));
          v786 = vbslq_s8(v785, vbslq_s8(v784, *(int8x16_t *)(v771 + 48), (int8x16_t)v777), (int8x16_t)v776);
          v787 = vaddq_s16(*(int16x8_t *)v771, *(int16x8_t *)v771);
          *(uint8x8_t *)v776.i8 = vqmovn_u16(vshrq_n_u16((uint16x8_t)v780, 6uLL));
          v776.u64[1] = (unint64_t)vmin_u8((uint8x8_t)vadd_s8(*(int8x8_t *)v776.i8, (int8x8_t)0x101010101010101), (uint8x8_t)0x3F3F3F3F3F3F3F3FLL);
          v788 = (uint8x16_t)vqtbl4q_s8(*(int8x16x4_t *)&v753, (int8x16_t)v776);
          v789 = (int16x8_t)vandq_s8((int8x16_t)v780, v757);
          v790 = (uint8x16_t)vuzp1q_s8((int8x16_t)vsubq_s16(v758, v789), (int8x16_t)v789);
          v791 = (int16x8_t)vmlal_high_u8(vmull_u8(*(uint8x8_t *)v790.i8, *(uint8x8_t *)v788.i8), v790, v788);
          v792 = vabsq_s16(v787);
          v793 = (int8x16_t)vcgeq_s16(v792, v783);
          v794 = (int16x8_t)vbslq_s8(v793, (int8x16_t)v787, v786);
          v795 = (int16x8_t)vcgeq_u16((uint16x8_t)v792, (uint16x8_t)vaddq_s16(v783, v783));
          v796 = (int16x8_t)vandq_s8((int8x16_t)vsubq_s16((int16x8_t)vbicq_s8(vbslq_s8(v793, v762, vbslq_s8(v785, vbslq_s8(v784, v764, v763), v761)), (int8x16_t)v795), v795), (int8x16_t)vcgtq_u16((uint16x8_t)vshlq_n_s16(v783, 2uLL), (uint16x8_t)v792));
          v797 = vabsq_s16(v794);
          v798 = vaddq_s16(v791, v791);
          v799 = vorrq_s8((int8x16_t)vcgeq_u16((uint16x8_t)v783, vshrq_n_u16((uint16x8_t)v797, 1uLL)), v793);
          v800 = vqshlq_n_s16(v797, 3uLL);
          v801 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16(vqshlq_n_s16(vqdmulhq_lane_s16(vqdmulhq_s16(v800, v798), a6, 0), 1uLL), v749), v765), (int16x8_t)0), v799);
          v802 = v772[1];
          ++v772;
          v793.i64[0] = 0x6000600060006;
          v793.i64[1] = 0x6000600060006;
          v803 = vaddq_s16((int16x8_t)vandq_s8(veorq_s8((int8x16_t)vcltzq_s16(v781), (int8x16_t)vcgtq_s16(v794, v766)), v793), v796);
          v804 = vorrq_s8((int8x16_t)v801, vornq_s8(vandq_s8((int8x16_t)vmovl_s8(vmvn_s8(v802)), v779), v779));
          v805 = vqshlq_s16(vqdmulhq_s16(v800, vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v801, 1uLL), vminq_s16(vqdmulhq_s16(v798, v798), v759))), v748);
          v806 = (int8x16_t)vceqzq_s16(v801);
          v807 = vbslq_s8(v806, *(int8x16_t *)v773, (int8x16_t)vqdmulhq_s16(v805, v782));
          v1039 = v803;
          v1040 = v804;
          v1041 = vbslq_s8(v806, (int8x16_t)v780, (int8x16_t)vqdmulhq_s16(v805, v800));
          v1042 = v807;
          v808 = 0x7FFFFFFFFFFFFFF8;
          while (1)
          {
            v809 = v770 >= 1 ? 0 : *(_DWORD *)(a1 + 64);
            v810 = v770 >= 1 ? 0 : 312;
            v760 += v810;
            v811 = v1041.u16[v808];
            v812 = v1042.u16[v808];
            v813 = *(unsigned __int16 *)((char *)v1043 + v808 * 2);
            if (v1041.i16[v808])
            {
              if (v811 == 0xFFFF)
                goto LABEL_565;
              v814 = (_DWORD *)(v760 + 156 * v775 + 12 * *(unsigned __int16 *)((char *)&v1039 + v808 * 2 + 16));
              v815 = v814[1] + v812;
              *v814 += v811;
              v814[1] = v815;
              v816 = v814 + 2;
            }
            else
            {
              v817 = (_DWORD *)(v760 + 156 * v775);
              v818 = v817[37] + v812;
              ++v817[36];
              v817[37] = v818;
              v816 = v817 + 38;
            }
            *v816 += v813;
LABEL_565:
            if (!--v767)
              break;
            v775 = 1 - v775;
            v770 = v770 + v809 - 1;
            if (!(++v808 * 2))
            {
              ++v773;
              ++v774;
              goto LABEL_553;
            }
          }
          v760 = v1036;
          v768 = v1023;
LABEL_569:
          v746 += 2 * v979;
          v747 = (int8x8_t *)((char *)v747 + v991);
          v744 = (int16x8_t *)((char *)v744 + 2 * v973);
          v743 = v743 + v768 - 1;
          v750 = 1 - v750;
          v745 = (int16x8_t *)((char *)v745 + 2 * v984);
          _VF = __OFSUB__(v742--, 1);
          if ((v742 < 0) ^ _VF | (v742 == 0))
            goto LABEL_571;
        }
      }
      if (*(_DWORD *)(a1 + 32))
        PDAF::PixelEngine::ProcessPart2();
      v121 = *(_DWORD *)(a1 + 52);
      if (v121 < 1)
        goto LABEL_571;
      v122 = *(_DWORD *)(a1 + 68) != 0;
      v123 = *(_DWORD *)(a1 + 56);
      v124 = v117 + 132304;
      v125 = a1 + 3976;
      v931 = 2 * v973;
      v126 = v119 + 132304;
      v127 = v119 + 132432;
      v128 = v118 + 132304;
      v129 = v120 + 132432;
      v923 = 2 * v984;
      v927 = 2 * v979;
      v130 = v120 + 132304;
      v131 = v126;
      v132 = v118 + 132432;
      v133 = v124;
      v134 = v128;
      v135 = v129;
      v136 = v123;
      while (2)
      {
        v137 = *(_DWORD *)(a1 + 60);
        if (v137 < 1)
          goto LABEL_192;
        v935 = v136;
        v985 = v121;
        v138 = 0;
        v139 = 4 * *(unsigned __int16 *)(a1 + 140);
        v1027 = *(unsigned __int16 *)(a1 + 72) >> 1;
        v140 = *(unsigned __int8 *)(a1 + 139);
        v141 = v137 + 1;
        v939 = v132;
        v943 = v130;
        v947 = v135;
        v951 = v134;
        v1014 = *(_BYTE *)(a1 + 143);
        v956 = v127;
        v961 = v131;
        v967 = v133;
        v974 = v125;
        v980 = v122;
        v142 = v122;
        do
        {
          if (v138)
            v143 = 0;
          else
            v143 = 312;
          if (!v138)
            v138 = *(_DWORD *)(a1 + 64);
          _X10 = a1 + v132;
          __asm { PRFM            #2, [X10] }
          _X10 = a1 + v127;
          __asm { PRFM            #2, [X10] }
          _X10 = a1 + v135;
          __asm { PRFM            #2, [X10] }
          if (*(_BYTE *)(a1 + v131))
            v150 = 1;
          else
            v150 = *(_BYTE *)(a1 + v131 + 1) != 0;
          v125 += v143;
          v151 = *(unsigned __int16 *)(a1 + v133);
          if (*(_WORD *)(a1 + v133))
          {
            v152 = *(unsigned __int16 *)(a1 + v130);
            if ((unsigned __int16)(v152 + 8563) < 0x21AEu)
              v150 = 1;
            if (!v150)
            {
              v153 = 4408 * (v152 >> 1);
              v154 = (v153 >> 15) - v151;
              v155 = v154;
              if (v153 >> 15 <= v151)
                v156 = v151 - (v153 >> 15);
              else
                v156 = v154;
              v157 = a1 + v134;
              v158 = *(__int16 *)(a1 + v134 + 10);
              v159 = *(__int16 *)(a1 + v134 + 8);
              if (v155 >= 0)
                v160 = (v153 >> 15) - v151;
              else
                v160 = v151 - (v153 >> 15);
              v161 = (v139 * v160) >> 16;
              v162 = 2 * (v158 - v159);
              if (((v158 - v159) & 0x40000000) != 0)
                v163 = -2 * (v158 - v159);
              else
                v163 = 2 * (v158 - v159);
              if (v161 <= v163)
              {
                if (v163 >= 2 * v161)
                  v167 = v163 < 4 * v161;
                else
                  v167 = 2;
              }
              else
              {
                v164 = *(__int16 *)(v157 + 12);
                v165 = *(__int16 *)(v157 + 6);
                v162 = v158 + v164 - (v159 + v165);
                if (v162 >= 0)
                  v163 = v158 + v164 - (v159 + v165);
                else
                  v163 = v159 + v165 - (v158 + v164);
                if (v161 <= v163)
                {
                  v167 = 3;
                }
                else
                {
                  v162 = v164 + *(__int16 *)(a1 + v134 + 14) - (v165 + *(__int16 *)(a1 + v134 + 4));
                  if (v162 >= 0)
                    v163 = v164 + *(__int16 *)(a1 + v134 + 14) - (v165 + *(__int16 *)(a1 + v134 + 4));
                  else
                    v163 = v165 + *(__int16 *)(a1 + v134 + 4) - (v164 + *(__int16 *)(a1 + v134 + 14));
                  if (v161 <= v163)
                  {
                    v167 = 4;
                  }
                  else
                  {
                    v166 = (__int16 *)(a1 + v134);
                    v162 = v166[8] + v166[9] - (v166[1] + *v166);
                    if (v162 >= 0)
                      v163 = v166[8] + v166[9] - (v166[1] + *v166);
                    else
                      v163 = v166[1] + *v166 - (v166[8] + v166[9]);
                    v167 = 5;
                  }
                }
                if (v161 < v163 >> 1)
                {
                  v168 = v142;
                  goto LABEL_178;
                }
              }
              v170 = (__int16)(8 * v163);
              v171 = ((2
                     * v170
                     * (__int16)(2
                               * ((64 - ((v153 >> 15) & 0x3F))
                                * *(unsigned __int8 *)(a1 + 74 + (v153 >> 21))
                                + ((v153 >> 15) & 0x3F)
                                * *(unsigned __int8 *)(a1 + 74 + (v153 >> 21) + 1)))) >> 16)
                   * v1027;
              v172 = (v171 >> 14) & 0xFFFFFFFE;
              if (((v171 >> 14) & 0xFFFFFF00) != 0)
                v173 = 255;
              else
                v173 = (v171 >> 14) & 0xFE;
              v174 = v173 - v140;
              if (v174 >= 0x10)
                v174 = 16;
              v168 = v142;
              if (v172 >= v140 && v174 != 0)
              {
                v169 = (64 - ((v153 >> 15) & 0x3F)) * *(unsigned __int8 *)(a1 + 74 + (v153 >> 21))
                     + ((v153 >> 15) & 0x3F)
                     * *(unsigned __int8 *)(a1 + 74 + (v153 >> 21) + 1);
                v181 = (4 * v169 * 4 * v169) >> 16;
                if (v181 >= 0x1FFF)
                  v181 = 0x1FFF;
                v182 = (int)((v181 >> 1) * 2 * v170 * (v174 >> 1)) >> 16 << v1014;
                if (v182 <= -32768)
                  v182 = -32768;
                if (v182 >= 0x7FFF)
                  v182 = 0x7FFF;
                v183 = v182 * v170;
                v178 = (v182 * (__int16)(8 * v156)) >> 15;
                if ((v162 ^ v155) >= 0)
                  v184 = v167 + 6;
                else
                  v184 = v167;
                v185 = (_DWORD *)(v125 + 156 * v142 + 12 * v184);
                v186 = v185[1] + (v183 >> 15);
                *v185 += v174;
                v185[1] = v186;
                v187 = v185[2];
                v177 = v185 + 2;
                v151 = v187;
                goto LABEL_189;
              }
LABEL_178:
              v176 = v125 + 156 * v168;
              v179 = *(_DWORD *)(v176 + 152);
              v177 = (_DWORD *)(v176 + 152);
              v178 = v179;
              v180 = *(v177 - 1) + (v153 >> 15);
              ++*(v177 - 2);
              *(v177 - 1) = v180;
LABEL_189:
              *v177 = v178 + v151;
            }
          }
          --v138;
          v142 = 1 - v142;
          --v141;
          v133 += 2;
          ++v131;
          ++v127;
          v134 += 8;
          v135 += 2;
          v130 += 2;
          v132 += 8;
        }
        while (v141 > 1);
        v123 = *(_DWORD *)(a1 + 56);
        v121 = v985;
        v122 = v980;
        v133 = v967;
        v125 = v974;
        v127 = v956;
        v131 = v961;
        v135 = v947;
        v134 = v951;
        v132 = v939;
        v130 = v943;
        v136 = v935;
LABEL_192:
        v188 = v136 == 1;
        v122 = 1 - v122;
        if (v136 == 1)
          v136 = v123;
        else
          --v136;
        v189 = v1001;
        if (!v188)
          v189 = 0;
        v125 += 156 * v189;
        v133 += v931;
        v131 += v991;
        v127 += v991;
        v134 += v927;
        v135 += v923;
        v130 += v923;
        v132 += v927;
        _VF = __OFSUB__(v121--, 1);
        if (!((v121 < 0) ^ _VF | (v121 == 0)))
          continue;
        break;
      }
LABEL_571:
      v819 = a1;
      v821 = *(unsigned __int16 *)(a1 + 38);
      v822 = *(unsigned __int16 *)(a1 + 42) - v821;
      if (v822)
      {
        v823 = *(unsigned __int16 *)(a1 + 36);
        v824 = *(unsigned __int16 *)(a1 + 40) - v823;
        v825 = *(unsigned __int16 *)(a1 + 44);
        v826 = (v823 + v825 * v821);
        v827 = a1 + 44224 + 24 * v826 + 55732;
        v828 = v826 + 8 * v826;
        v829 = a1 + 44224 + 16 * v828 + 436;
        v830 = a1 + 32 * v826 + 192;
        v831 = (_DWORD *)(a1 + 4288);
        v1009 = 2 * v825;
        v832 = a1 + 16 * v828 + 44756;
        v999 = 144 * v825;
        v1024 = v824;
        v1037 = *(unsigned __int16 *)(a1 + 44);
        do
        {
          if (v824)
          {
            v833 = (int *)v832;
            v834 = *(float *)(a1 + 144);
            v835 = v827;
            v836 = v829;
            v837 = v830;
            do
            {
              v838 = 0;
              v839 = 1;
              do
              {
                v840 = 0;
                v841 = v839;
                LOWORD(v820) = *(_WORD *)v837;
                v820 = v834 * (float)((float)((float)LODWORD(v820) * 0.000061035) + 1.0);
                v842 = *(float *)(v837 + 8) * *(float *)(v837 + 12);
                do
                {
                  v847 = &v831[v840];
                  v848 = v831[v840 + 1];
                  v849 = *v845++;
                  v850 = (float)((float)(v848 << v849) / v820);
                  if (v850)
                  {
                    v851 = v842
                         * (float)-(float)(*(float *)(v837 + 4)
                                         - (float)((float)((float)(v847[2] << *v846) / (float)v848)
                                                 * (float)*v844));
                    if (v851 < 0.0)
                      v852 = -0.5;
                    else
                      v852 = 0.5;
                    v853 = (int)(float)(v851 + v852);
                    v854 = *v847;
                  }
                  else
                  {
                    v853 = 0;
                    v854 = 0;
                  }
                  v855 = (_DWORD *)(v836 + 4 * *v843);
                  if ((v841 & 1) != 0)
                  {
                    *v855 = v854;
                    v855[12] = v850;
                    v856 = v853 * v850;
                  }
                  else
                  {
                    *v855 += v854;
                    v855[12] += v850;
                    v856 = v855[24] + v853 * v850;
                  }
                  v855[24] = v856;
                  v840 += 3;
                  ++v843;
                  ++v844;
                  ++v846;
                }
                while (v840 != 36);
                v839 = 0;
                v857 = (_DWORD *)(v835 + 4 * v838);
                *v857 = v831[36];
                v857[2] = v831[37];
                v857[4] = v831[38];
                v837 += 16;
                v831 += 39;
                v838 = 1;
              }
              while ((v841 & 1) != 0);
              v858 = v833;
              v859 = 12;
              do
              {
                v860 = *(v858 - 12);
                if (v860)
                {
                  v861 = v860 >> 1;
                  if (*v858 < 0)
                    v861 = -v861;
                  *v858 = (v861 + *v858) / v860;
                }
                ++v858;
                --v859;
              }
              while (v859);
              v836 += 144;
              v835 += 24;
              v833 += 36;
              --v824;
            }
            while (v824);
          }
          v830 += 16 * v1009;
          v862 = v1037;
          v829 += 144 * v1037;
          v832 += v999;
          v827 += 24 * v1037;
          --v822;
          v824 = v1024;
        }
        while (v822);
        v819 = a1;
      }
      else
      {
        v862 = *(unsigned __int16 *)(a1 + 44);
      }
      if (*(_DWORD *)(a1 + 148))
        PDAF::PixelEngine::ProcessPart2(v899, v900, v901);
      if (*(_DWORD *)(a1 + 160) != 1)
        PDAF::PixelEngine::ProcessPart2(v899, v900, v901);
      bzero((void *)(a1 + 109176), 0x5A24uLL);
      v902 = (unsigned __int16 *)a1;
      v903 = 0;
      v904 = (unsigned int *)(a1 + 109212);
      *v912 = *v911;
      v905 = a1 + 44224;
      do
      {
        v906 = *(_DWORD *)&v902[2 * v903 + 74];
        if ((v906 & 0x80000000) == 0)
        {
          if (v906)
          {
            v902 = (unsigned __int16 *)a1;
          }
          v907 = a1;
          v908 = v904;
          for (j = 160; j != 172; j += 4)
          {
            v910 = *(unsigned int *)(v907 + j);
            if ((int)v910 >= 1)
            {
              v907 = a1;
            }
            v908 += 384;
          }
          v902 = (unsigned __int16 *)a1;
        }
        ++v903;
        v904 += 1152;
      }
      while (v903 != 3);
      return;
    case 2:
      if (*(unsigned __int8 *)(a1 + 138) != *(unsigned __int8 *)(a1 + 137))
        PDAF::PixelEngine::ProcessPart2(a1, a2, v16);
      v190 = *v13;
      v191 = *(unsigned int *)(a1 + 132264);
      v952 = (unint64_t)*(unsigned int *)(a1 + 132260) >> 1;
      v981 = (unint64_t)*(unsigned int *)(a1 + 132296) >> 1;
      v192 = *(unsigned int *)(a1 + 132276);
      v957 = (unint64_t)*(unsigned int *)(a1 + 132272) >> 1;
      v193 = *(unsigned int *)(a1 + 132288);
      v962 = *(unsigned int *)(a1 + 132284);
      v975 = 2 * *(unsigned __int16 *)(a1 + 44);
      v968 = 2 * v10;
      v194 = a1 + 32 * (v9 + *(unsigned __int16 *)(a1 + 44) * v11) + 192;
      if (v12 != 1)
      {
        v195 = *(_DWORD *)(a1 + 52);
        if (v195 < 1)
          goto LABEL_399;
        v196 = 0;
        v197 = *(_DWORD *)(a1 + 32) & 1;
        v198 = *(_DWORD *)(a1 + 56);
        v199 = v190 + 132304;
        v200 = (_DWORD *)(a1 + 3976);
        v201 = v192 + 132432;
        v202 = v192 + 132304;
        v913 = 2 * v957;
        v914 = 2 * v952;
        v203 = v193 + a1;
        v204 = v194 - 32;
        v205 = v201;
        v206 = v203 + 132432;
        v207 = v203 + 132304;
        v208 = v199 + 2;
        v209 = v191 + 132304;
        v210 = v191 + 132432;
        v211 = v198;
        v1011 = v15;
        while (1)
        {
          v212 = a1;
          v213 = *(char *)(a1 + 142);
          if (!v197)
            v213 = -v213;
          v1028 = v213;
          v214 = *(_DWORD *)(a1 + 60);
          if (v214 <= 0)
          {
            v197 = 1 - v197;
            goto LABEL_276;
          }
          v915 = v211;
          v953 = v195;
          v215 = 0;
          v1015 = 4 * *(unsigned __int16 *)(a1 + 140);
          v1002 = *(unsigned __int16 *)(a1 + 72) >> 1;
          v992 = *(unsigned __int8 *)(a1 + 139);
          v986 = 1 - v197;
          v216 = v214 + 2;
          v917 = v210;
          v920 = v206;
          _X5 = v206 + 2 * v197;
          v958 = *(_BYTE *)(a1 + 143);
          v944 = v200;
          v948 = v196;
          v218 = v196 + v197;
          v924 = v209;
          v928 = v205;
          v932 = v202;
          v936 = v208;
          v219 = v208;
          v940 = v204;
          do
          {
            v220 = v200;
            v221 = v215 == 0;
            if (v215)
              v222 = v215;
            else
              v222 = *(_DWORD *)(v212 + 64);
            _X8 = v212 + v210;
            __asm { PRFM            #2, [X8] }
            _X8 = v212 + v205;
            __asm
            {
              PRFM            #2, [X8]
              PRFM            #2, [X5]
            }
            if (*(_BYTE *)(v212 + v202))
              v228 = 1;
            else
              v228 = *(_BYTE *)(v212 + v202 + 1) != 0;
            v229 = v204 + 32 * v221;
            v200 += 78 * v221;
            v230 = *(unsigned __int16 *)(v212 + v219 - 2);
            if (*(_WORD *)(v212 + v219 - 2))
            {
              v231 = *(unsigned __int16 *)(v212 + v219);
              if (*(_WORD *)(v212 + v219))
              {
                v232 = *(unsigned __int16 *)(v207 + 2 * v218);
                if ((unsigned __int16)(v232 + 8563) < 0x21AEu)
                  v228 = 1;
                if (!v228)
                {
                  v233 = 2 * v221;
                  v234 = v230 + v231 + 1;
                  v235 = v234 >> 1;
                  v236 = v197;
                  if (v197)
                    v237 = *(unsigned __int16 *)(v212 + v219 - 2);
                  else
                    v237 = *(unsigned __int16 *)(v212 + v219);
                  if (v197)
                    v238 = (__int16 *)(v204 + 16 * v233 + 2);
                  else
                    v238 = (__int16 *)(v229 + 18);
                  v239 = v235 >= v237;
                  v240 = v235 - v237;
                  if (v240 != 0 && v239)
                    v241 = v240;
                  else
                    v241 = (v234 >> 1) - v237;
                  if (v240 != 0 && v239)
                    v242 = v240;
                  else
                    v242 = v237 - (v234 >> 1);
                  v243 = v212 + v209;
                  v244 = *(__int16 *)(v212 + v209 + 10);
                  v245 = *(__int16 *)(v212 + v209 + 8);
                  v246 = v244 - v245 + ((*v238 * (__int16)v237) >> 15);
                  v247 = v241 + ((v246 * v1028) >> 4);
                  if (v247 < 0)
                    v247 = -v247;
                  v248 = (v1015 * v247) >> 16;
                  v249 = 2 * v246;
                  if ((v246 & 0x40000000) != 0)
                    v250 = -2 * v246;
                  else
                    v250 = 2 * v246;
                  if (v248 <= v250)
                  {
                    if (v250 >= 2 * v248)
                      v255 = v250 < 4 * v248;
                    else
                      v255 = 2;
                    goto LABEL_255;
                  }
                  v251 = v207;
                  v252 = *(__int16 *)(v243 + 12);
                  v253 = *(__int16 *)(v243 + 6);
                  v249 = v244 + v252 - (v245 + v253);
                  if (v249 >= 0)
                    v250 = v244 + v252 - (v245 + v253);
                  else
                    v250 = v245 + v253 - (v244 + v252);
                  if (v248 <= v250)
                  {
                    v255 = 3;
                  }
                  else
                  {
                    v249 = v252 + *(__int16 *)(a1 + v209 + 14) - (v253 + *(__int16 *)(a1 + v209 + 4));
                    if (v249 >= 0)
                      v250 = v252 + *(__int16 *)(a1 + v209 + 14) - (v253 + *(__int16 *)(a1 + v209 + 4));
                    else
                      v250 = v253 + *(__int16 *)(a1 + v209 + 4) - (v252 + *(__int16 *)(a1 + v209 + 14));
                    if (v248 <= v250)
                    {
                      v255 = 4;
                    }
                    else
                    {
                      v254 = (__int16 *)(a1 + v209);
                      v249 = v254[8] + v254[9] - (v254[1] + *v254);
                      if (v249 >= 0)
                        v250 = v254[8] + v254[9] - (v254[1] + *v254);
                      else
                        v250 = v254[1] + *v254 - (v254[8] + v254[9]);
                      v255 = 5;
                    }
                  }
                  v207 = v251;
                  if (v248 >= v250 >> 1)
                  {
LABEL_255:
                    v256 = (64 - ((v234 >> 1) & 0x3F)) * *(unsigned __int8 *)(a1 + 74 + (v234 >> 7))
                         + ((v234 >> 1) & 0x3F) * *(unsigned __int8 *)(a1 + 74 + (v234 >> 7) + 1);
                    v257 = (__int16)(8 * v250);
                    v258 = (__int16)((v257
                                    * (__int16)(2
                                              * ((64 - ((v234 >> 1) & 0x3F))
                                               * *(unsigned __int8 *)(a1 + 74 + (v234 >> 7))
                                               + ((v234 >> 1) & 0x3F) * *(unsigned __int8 *)(a1 + 74 + (v234 >> 7) + 1)))) >> 15)
                         * v1002;
                    v259 = (v258 >> 14) & 0xFFFFFFFE;
                    if (((v258 >> 14) & 0xFFFFFF00) != 0)
                      v260 = 255;
                    else
                      v260 = (v258 >> 14) & 0xFE;
                    v261 = v260 - v992;
                    if (v261 >= 0x10)
                      v262 = 16;
                    else
                      v262 = v261;
                    if (v259 >= v992 && v262 != 0)
                    {
                      v269 = (4 * v256 * 4 * v256) >> 16;
                      if (v269 >= 0x1FFF)
                        v269 = 0x1FFF;
                      v270 = (__int16)(((v269 >> 1) * v257 * (v262 >> 1)) >> 15 << v958);
                      v268 = (v270 * (__int16)(8 * v242)) >> 15;
                      if (((v249 ^ v241) & 0x80000000) == 0)
                        v255 += 6;
                      v271 = &v200[39 * v986 + 3 * v255];
                      v272 = v271[1] + ((v270 * v257) >> 15);
                      *v271 += v262;
                      v271[1] = v272;
                      v273 = v271[2];
                      v267 = v271 + 2;
                      v231 = v273;
                      goto LABEL_272;
                    }
                  }
                  v264 = (4408 * (v232 >> 1)) >> 15;
                  v265 = &v220[39 * v233];
                  v266 = v265[37] + v264;
                  ++v265[36];
                  v265[37] = v266;
                  v265[38] += v230;
                  ++v200[75];
                  v200[76] += v264;
                  v267 = v200 + 77;
                  v268 = v200[77];
LABEL_272:
                  v197 = v236;
                  *v267 = v268 + v231;
                  v212 = a1;
                  v15 = v1011;
                }
              }
            }
            v215 = v222 - 2;
            v216 -= 2;
            v219 += 4;
            ++v202;
            ++v205;
            v209 += 8;
            _X5 += 4;
            v218 += 2;
            v210 += 8;
            v204 = v229;
          }
          while (v216 > 2);
          v198 = *(_DWORD *)(v212 + 56);
          v195 = v953;
          v200 = v944;
          v196 = v948;
          v208 = v936;
          v204 = v940;
          v205 = v928;
          v202 = v932;
          v206 = v920;
          v209 = v924;
          v210 = v917;
          v211 = v915;
          v197 = v986;
LABEL_276:
          v274 = v211 == 1;
          if (v211 == 1)
            v211 = v198;
          else
            --v211;
          v275 = v968;
          v276 = v975;
          if (!v274)
          {
            v275 = 0;
            v276 = 0;
          }
          v200 += 39 * v275;
          v204 += 16 * v276;
          v208 += v914;
          v202 += v962;
          v205 += v962;
          v209 += v913;
          v206 += 2 * v981;
          v196 += v981;
          v210 += v913;
          _VF = __OFSUB__(v195--, 1);
          if ((v195 < 0) ^ _VF | (v195 == 0))
          {
LABEL_399:
            v447 = a1;
            v449 = *(unsigned __int16 *)(a1 + 38);
            v450 = *(unsigned __int16 *)(a1 + 42) - v449;
            if (v450)
            {
              v451 = *(unsigned __int16 *)(a1 + 36);
              v452 = *(unsigned __int16 *)(a1 + 40) - v451;
              v453 = *(unsigned __int16 *)(a1 + 44);
              v454 = (v451 + v453 * v449);
              v455 = a1 + 44224 + 24 * v454 + 55732;
              v456 = v454 + 8 * v454;
              v457 = a1 + 44224 + 16 * v456 + 436;
              v458 = a1 + 32 * v454 + 192;
              v459 = (_DWORD *)(a1 + 4288);
              v1005 = 2 * v453;
              v460 = a1 + 16 * v456 + 44756;
              v996 = 144 * v453;
              v1018 = v452;
              v1031 = *(unsigned __int16 *)(a1 + 44);
              do
              {
                if (v452)
                {
                  v461 = (int *)v460;
                  v462 = *(float *)(a1 + 144);
                  v463 = v455;
                  v464 = v457;
                  v465 = v458;
                  do
                  {
                    v466 = 0;
                    v467 = 1;
                    do
                    {
                      v468 = 0;
                      v469 = v467;
                      LOWORD(v448) = *(_WORD *)v465;
                      v448 = v462 * (float)((float)((float)LODWORD(v448) * 0.000061035) * 0.5);
                      v470 = *(float *)(v465 + 8) * *(float *)(v465 + 12);
                      do
                      {
                        v475 = &v459[v468];
                        v476 = v459[v468 + 1];
                        v477 = *v473++;
                        v478 = (float)((float)(v476 << v477) / v448);
                        if (v478)
                        {
                          v479 = v470
                               * (float)-(float)(*(float *)(v465 + 4)
                                               - (float)((float)((float)(v475[2] << *v474) / (float)v476)
                                                       * (float)*v472));
                          if (v479 < 0.0)
                            v480 = -0.5;
                          else
                            v480 = 0.5;
                          v481 = (int)(float)(v479 + v480);
                          v482 = *v475;
                        }
                        else
                        {
                          v481 = 0;
                          v482 = 0;
                        }
                        v483 = (_DWORD *)(v464 + 4 * *v471);
                        if ((v469 & 1) != 0)
                        {
                          *v483 = v482;
                          v483[12] = v478;
                          v484 = v481 * v478;
                        }
                        else
                        {
                          *v483 += v482;
                          v483[12] += v478;
                          v484 = v483[24] + v481 * v478;
                        }
                        v483[24] = v484;
                        v468 += 3;
                        ++v471;
                        ++v472;
                        ++v474;
                      }
                      while (v468 != 36);
                      v467 = 0;
                      v485 = (_DWORD *)(v463 + 4 * v466);
                      *v485 = v459[36];
                      v485[2] = v459[37];
                      v485[4] = v459[38];
                      v465 += 16;
                      v459 += 39;
                      v466 = 1;
                    }
                    while ((v469 & 1) != 0);
                    v486 = v461;
                    v487 = 12;
                    do
                    {
                      v488 = *(v486 - 12);
                      if (v488)
                      {
                        v489 = v488 >> 1;
                        if (*v486 < 0)
                          v489 = -v489;
                        *v486 = (v489 + *v486) / v488;
                      }
                      ++v486;
                      --v487;
                    }
                    while (v487);
                    v464 += 144;
                    v463 += 24;
                    v461 += 36;
                    --v452;
                  }
                  while (v452);
                }
                v458 += 16 * v1005;
                v490 = v1031;
                v457 += 144 * v1031;
                v460 += v996;
                v455 += 24 * v1031;
                --v450;
                v452 = v1018;
              }
              while (v450);
              v447 = a1;
            }
            else
            {
              v490 = *(unsigned __int16 *)(a1 + 44);
            }
            if (*(_DWORD *)(a1 + 148))
              PDAF::PixelEngine::ProcessPart2(v863, v864, v865);
            if (*(_DWORD *)(a1 + 160) != 1)
              PDAF::PixelEngine::ProcessPart2(v863, v864, v865);
            bzero((void *)(a1 + 109176), 0x5A24uLL);
            v866 = (unsigned __int16 *)a1;
            v867 = 0;
            v868 = (unsigned int *)(a1 + 109212);
            *v912 = *v911;
            v869 = a1 + 44224;
            do
            {
              v870 = *(_DWORD *)&v866[2 * v867 + 74];
              if ((v870 & 0x80000000) == 0)
              {
                if (v870)
                {
                  v866 = (unsigned __int16 *)a1;
                }
                v871 = a1;
                v872 = v868;
                for (k = 160; k != 172; k += 4)
                {
                  v874 = *(unsigned int *)(v871 + k);
                  if ((int)v874 >= 1)
                  {
                    v871 = a1;
                  }
                  v872 += 384;
                }
                v866 = (unsigned __int16 *)a1;
              }
              ++v867;
              v868 += 1152;
            }
            while (v867 != 3);
            return;
          }
        }
      }
      v353 = *(_DWORD *)(a1 + 52);
      if (v353 < 1)
        goto LABEL_399;
      v354 = 0;
      v355 = (const __int16 *)(a1 + 132304 + v190);
      v356 = (const __int16 *)(a1 + 132304 + v193);
      v357 = a1 + 132304 + v191;
      v358 = (int8x8_t *)(a1 + 132304 + v192);
      v359 = vdupq_n_s16(*(char *)(a1 + 143));
      v360 = vdupq_n_s16(*(unsigned __int8 *)(a1 + 139));
      a5.i32[0] = *(unsigned __int16 *)(a1 + 140) >> 1;
      a6.i32[0] = *(unsigned __int16 *)(a1 + 72) >> 1;
      v361 = *(_DWORD *)(a1 + 32) & 1;
      v362 = (uint16x8_t)vdupq_n_s16(0xDE52u);
      v363 = vdupq_n_s16(0x1138u);
      v364 = *(_OWORD *)(a1 + 74);
      v365 = *(_OWORD *)(a1 + 90);
      v366 = *(_OWORD *)(a1 + 106);
      v367 = *(_OWORD *)(a1 + 122);
      v368 = a1 + -312 * v10 + 3976;
      v369 = v194 - 16 * v975 - 32;
      v370 = 0uLL;
LABEL_359:
      v371 = a1;
      v372 = *(_DWORD *)(a1 + 60);
      if (v354 >= 1)
        v373 = 0;
      else
        v373 = *(_DWORD *)(a1 + 56);
      v374 = v968;
      if (v354 >= 1)
        v374 = 0;
      v368 += 156 * v374;
      v375 = v975;
      if (v354 >= 1)
        v375 = 0;
      v369 += 16 * v375;
      v376 = *(char *)(a1 + 142);
      if (!v361)
        v376 = -v376;
      if (!v372)
      {
        v381 = 1 - v361;
        goto LABEL_397;
      }
      v988 = v373;
      v1017 = v354;
      v377 = 0;
      v378 = 0;
      v379 = vdupq_n_s16(v376);
      v995 = v369;
      v1004 = v368;
      v380 = v369 - 16 * v361 + 16;
      v381 = 1 - v361;
      v382 = 2 - v372;
      v383 = v357;
      v384 = v358;
      v385 = v355;
      v386 = v356;
LABEL_370:
      if (v378 <= 0)
      {
        v378 += *(_DWORD *)(v371 + 64);
        v387 = (const __int16 *)(v380 + 34);
        v380 += 32;
        v370 = vld1q_dup_s16(v387);
        v371 = a1;
      }
      v1030 = v380;
      if (v378 <= 15)
      {
        v371 = a1;
        switch(v378)
        {
          case 2:
            v370.i16[1] = *(_WORD *)(v380 + 34);
            goto LABEL_375;
          case 3:
          case 5:
          case 7:
          case 9:
          case 11:
          case 13:
            break;
          case 4:
LABEL_375:
            v370.i16[2] = *(_WORD *)(v380 + 34);
            goto LABEL_376;
          case 6:
LABEL_376:
            v370.i16[3] = *(_WORD *)(v380 + 34);
            goto LABEL_377;
          case 8:
LABEL_377:
            v370.i16[4] = *(_WORD *)(v380 + 34);
            goto LABEL_378;
          case 10:
LABEL_378:
            v370.i16[5] = *(_WORD *)(v380 + 34);
            goto LABEL_379;
          case 12:
LABEL_379:
            v370.i16[6] = *(_WORD *)(v380 + 34);
            goto LABEL_380;
          case 14:
LABEL_380:
            v370.i16[7] = *(_WORD *)(v380 + 34);
            break;
          default:
            v371 = a1;
            break;
        }
      }
      v6.i64[0] = 0;
      v383 += 64;
      v1044 = vld2q_s16(v385);
      v7.i64[0] = v361;
      v388 = vceqq_s64(v7, v6).u64[0];
      v1046 = vld2q_s16(v386);
      v389 = (int8x16_t)vdupq_lane_s64(v388, 0);
      v390 = *(int16x8_t *)(v383 + 16);
      v391 = *(int16x8_t *)(v383 + 32);
      v392 = (int16x8_t)vbslq_s8(v389, (int8x16_t)v1044.val[1], (int8x16_t)v1044.val[0]);
      v1046.val[0] = (int16x8_t)vbslq_s8(v389, (int8x16_t)v1046.val[0], (int8x16_t)v1046.val[1]);
      v393 = v384[1];
      ++v384;
      v394.i64[0] = 0x3A003A003A003ALL;
      v394.i64[1] = 0x3A003A003A003ALL;
      v6 = (int64x2_t)vandq_s8((int8x16_t)vcgtzq_s16(vminq_s16(v1044.val[0], v1044.val[1])), (int8x16_t)vcgtq_u16(v362, (uint16x8_t)vaddq_s16(v1046.val[0], v394)));
      v7 = (int64x2_t)vqdmulhq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v1046.val[0], 1uLL), v363);
      v395 = vrshrq_n_s16(vaddq_s16(v1044.val[0], v1044.val[1]), 1uLL);
      *(uint8x8_t *)v396.i8 = vqmovn_u16(vshrq_n_u16((uint16x8_t)v395, 6uLL));
      v396.u64[1] = (unint64_t)vmin_u8((uint8x8_t)vadd_s8(*(int8x8_t *)v396.i8, (int8x8_t)0x101010101010101), (uint8x8_t)0x3F3F3F3F3F3F3F3FLL);
      v397 = (uint8x16_t)vqtbl4q_s8(*(int8x16x4_t *)&v364, v396);
      v398.i64[0] = 0x3F003F003F003FLL;
      v398.i64[1] = 0x3F003F003F003FLL;
      v399 = (int16x8_t)vandq_s8((int8x16_t)v395, v398);
      v400.i64[0] = 0x40004000400040;
      v400.i64[1] = 0x40004000400040;
      v401 = (uint8x16_t)vuzp1q_s8((int8x16_t)vsubq_s16(v400, v399), (int8x16_t)v399);
      v402 = (int16x8_t)vmlal_high_u8(vmull_u8(*(uint8x8_t *)v401.i8, *(uint8x8_t *)v397.i8), v401, v397);
      v403 = vaddq_s16(v402, v402);
      v402.i64[0] = 0xF000F000F000F000;
      v402.i64[1] = 0xF000F000F000F000;
      v404 = vminq_s16(vqdmulhq_s16(v403, v403), v402);
      v405 = vsubq_s16(v395, v392);
      v406 = vaddq_s16(vqdmulhq_s16(v392, v370), *(int16x8_t *)v383);
      v407 = vqdmulhq_lane_s16(vqshlq_n_s16(vabsq_s16(vsraq_n_s16(v405, vmulq_s16(v406, v379), 4uLL)), 2uLL), a5, 0);
      v408 = vaddq_s16(v406, v406);
      v409 = (int8x16_t)vcgtq_s16(v407, vabsq_s16(v391));
      v410 = (int8x16_t)vcgtq_s16(v407, vabsq_s16(v390));
      v411 = vbslq_s8(v410, vbslq_s8(v409, *(int8x16_t *)(v383 + 48), (int8x16_t)v391), (int8x16_t)v390);
      v412 = vabsq_s16(v408);
      v413 = (int8x16_t)vcgeq_s16(v412, v407);
      v414 = (int16x8_t)vbslq_s8(v413, (int8x16_t)v408, v411);
      v415 = vabsq_s16(v414);
      v416 = vorrq_s8((int8x16_t)vcgeq_u16((uint16x8_t)v407, vshrq_n_u16((uint16x8_t)v415, 1uLL)), v413);
      v417 = vqshlq_n_s16(v415, 3uLL);
      v418.i64[0] = 0x10001000100010;
      v418.i64[1] = 0x10001000100010;
      v419 = vminq_s16(vsubq_s16(vqshlq_n_s16(vqdmulhq_lane_s16(vqdmulhq_s16(v417, v403), a6, 0), 1uLL), v360), v418);
      v418.i8[0] = 0;
      v420 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(v419, (int16x8_t)v418.u16[0]), v416);
      v421 = vqshlq_s16(vqdmulhq_s16(v417, vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v420, 1uLL), v404)), v359);
      v422 = (int8x16_t)vceqzq_s16(v420);
      v423 = vorrq_s8((int8x16_t)v420, vornq_s8(vandq_s8((int8x16_t)vmovl_s8(vmvn_s8(v393)), (int8x16_t)v6), (int8x16_t)v6));
      v424 = vbslq_s8(v422, (int8x16_t)v7, (int8x16_t)vqdmulhq_s16(v421, v417));
      v420.i64[0] = 0x4000400040004;
      v420.i64[1] = 0x4000400040004;
      v417.i64[0] = 0x5000500050005;
      v417.i64[1] = 0x5000500050005;
      v425 = vbslq_s8(v409, (int8x16_t)v417, (int8x16_t)v420);
      v417.i64[0] = 0x3000300030003;
      v417.i64[1] = 0x3000300030003;
      v426 = vbslq_s8(v410, v425, (int8x16_t)v417);
      v417.i64[0] = 0x2000200020002;
      v417.i64[1] = 0x2000200020002;
      v427 = vbslq_s8(v413, (int8x16_t)v417, v426);
      v428 = (uint16x8_t)vaddq_s16(v407, v407);
      v429 = (int8x16_t)vcgtq_u16((uint16x8_t)vshlq_n_s16(v407, 2uLL), (uint16x8_t)v412);
      v430 = (int16x8_t)vcgeq_u16((uint16x8_t)v412, v428);
      v431 = (int16x8_t)vandq_s8((int8x16_t)vsubq_s16((int16x8_t)vbicq_s8(v427, (int8x16_t)v430), v430), v429);
      v430.i64[0] = -1;
      v430.i64[1] = -1;
      v432 = veorq_s8((int8x16_t)vcltzq_s16(v405), (int8x16_t)vcgtq_s16(v414, v430));
      v414.i64[0] = 0x6000600060006;
      v414.i64[1] = 0x6000600060006;
      v1039 = (int16x8_t)v423;
      v1040 = v424;
      v1041 = vbslq_s8(v422, (int8x16_t)v1044.val[0], (int8x16_t)vqdmulhq_s16(v421, vqshlq_n_s16(vabsq_s16(v405), 3uLL)));
      v1042 = vbslq_s8(v422, (int8x16_t)v1044.val[1], (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v432, (int8x16_t)v414), v431));
      v372 -= 16;
      v433 = 8;
      while (1)
      {
        v434 = *(_DWORD *)(v371 + 64);
        v435 = v377 >= 1 ? 0 : v434;
        v436 = (_DWORD *)(v368 + 312 * (v377 < 1));
        v437 = &v1039.u16[v433];
        v438 = v1039.u16[v433 - 8];
        if (!v1039.i16[v433 - 8])
          break;
        if (v438 != 0xFFFF)
        {
          v439 = *(unsigned __int16 *)((char *)&v1039 + v433 * 2 + 16);
          v440 = &v436[39 * v381 + 3 * v1041.u16[v433]];
          v441 = v440[1] + v1039.u16[v433];
          *v440 += v438;
          v440[1] = v441;
          v442 = v440 + 2;
LABEL_389:
          *v442 += v439;
        }
        if (v382 + (_DWORD)(v433 * 2) == 16)
          goto LABEL_395;
        v377 = v377 + v435 - 2;
        ++v433;
        v368 = (uint64_t)v436;
        v371 = a1;
        if (v433 == 16)
        {
          v378 -= 16;
          v385 += 16;
          v386 += 16;
          v382 += 16;
          v368 = (uint64_t)v436;
          v380 = v1030;
          if (!v372)
          {
LABEL_395:
            v354 = v1017;
            v369 = v995;
            v368 = v1004;
            v373 = v988;
LABEL_397:
            v357 += 2 * v957;
            v358 = (int8x8_t *)((char *)v358 + v962);
            v355 += v952;
            v354 = v354 + v373 - 1;
            v361 = v381;
            v356 += v981;
            _VF = __OFSUB__(v353--, 1);
            if ((v353 < 0) ^ _VF | (v353 == 0))
              goto LABEL_399;
            goto LABEL_359;
          }
          goto LABEL_370;
        }
      }
      v443 = *v437;
      v444 = v437[8];
      v439 = v437[16];
      v445 = (_DWORD *)(v368 + 312 * (v377 < 1));
      v446 = v445[37] + v443;
      ++v445[36];
      v445[37] = v446;
      v445[38] += v444;
      ++v436[75];
      v436[76] += v443;
      v442 = v436 + 77;
      goto LABEL_389;
    case 3:
      if (*(unsigned __int8 *)(a1 + 138) != *(unsigned __int8 *)(a1 + 137))
        PDAF::PixelEngine::ProcessPart2(a1, a2, v16);
      v277 = *v13;
      v278 = *(unsigned int *)(a1 + 132264);
      v963 = (unint64_t)*(unsigned int *)(a1 + 132260) >> 1;
      v993 = (unint64_t)*(unsigned int *)(a1 + 132296) >> 1;
      v279 = *(unsigned int *)(a1 + 132276);
      v969 = (unint64_t)*(unsigned int *)(a1 + 132272) >> 1;
      v280 = *(unsigned int *)(a1 + 132288);
      v976 = *(unsigned int *)(a1 + 132284);
      v987 = 2 * *(unsigned __int16 *)(a1 + 44);
      v982 = 2 * v10;
      v281 = a1 + 32 * (v9 + *(unsigned __int16 *)(a1 + 44) * v11);
      if (v12 != 1)
      {
        v282 = *(_DWORD *)(a1 + 52);
        if (v282 < 1)
          goto LABEL_460;
        v283 = (_DWORD *)(a1 + 3976);
        v284 = v281 + 160;
        v285 = *(_DWORD *)(a1 + 56);
        v1016 = *(char *)(a1 + 142);
        v286 = v277 + 132306;
        v921 = 2 * v963;
        v287 = v279 + 132304;
        v288 = v279 + 132432;
        v289 = v278 + 132304;
        v918 = 2 * v969;
        v290 = v280 + 132432;
        v916 = 2 * v993;
        v291 = v280 + 132304;
        v292 = v278 + 132432;
        v293 = *(_DWORD *)(a1 + 56);
        while (1)
        {
          v294 = a1;
          v295 = *(_DWORD *)(a1 + 60);
          if (v295 >= 1)
            break;
LABEL_349:
          v350 = v293 == 1;
          if (v293 == 1)
            v293 = v285;
          else
            --v293;
          v351 = v982;
          v352 = v987;
          if (!v350)
          {
            v351 = 0;
            v352 = 0;
          }
          v283 += 39 * v351;
          v284 += 16 * v352;
          v286 += v921;
          v287 += v976;
          v288 += v976;
          v289 += v918;
          v290 += v916;
          v291 += v916;
          v292 += v918;
          _VF = __OFSUB__(v282--, 1);
          if ((v282 < 0) ^ _VF | (v282 == 0))
          {
LABEL_460:
            if (*(_DWORD *)(a1 + 32))
              PDAF::PixelEngine::ProcessPart2();
            v577 = a1;
            v578 = *(unsigned __int16 *)(a1 + 38);
            v579 = *(unsigned __int16 *)(a1 + 42) - v578;
            if (v579)
            {
              v580 = *(unsigned __int16 *)(a1 + 36);
              v581 = *(unsigned __int16 *)(a1 + 40) - v580;
              v582 = *(unsigned __int16 *)(a1 + 44);
              v583 = (v580 + v582 * v578);
              v584 = a1 + 44224 + 24 * v583 + 55732;
              v585 = v583 + 8 * v583;
              v586 = a1 + 44224 + 16 * v585 + 436;
              v587 = a1 + 32 * v583 + 192;
              v588 = (_DWORD *)(a1 + 4288);
              v1007 = 2 * v582;
              v589 = a1 + 16 * v585 + 44756;
              v997 = 144 * v582;
              v1020 = v581;
              v1033 = *(unsigned __int16 *)(a1 + 44);
              do
              {
                if (v581)
                {
                  v590 = (int *)v589;
                  v591 = *(float *)(a1 + 144);
                  v592 = v584;
                  v593 = v586;
                  v594 = v587;
                  do
                  {
                    v595 = 0;
                    v596 = 1;
                    do
                    {
                      v597 = 0;
                      v598 = v596;
                      LOWORD(v576) = *(_WORD *)v594;
                      v576 = v591 * (float)((float)((float)LODWORD(v576) * 0.000061035) * 0.5);
                      v599 = *(float *)(v594 + 8) * *(float *)(v594 + 12);
                      do
                      {
                        v604 = &v588[v597];
                        v605 = v588[v597 + 1];
                        v606 = *v602++;
                        v607 = (float)((float)(v605 << v606) / v576);
                        if (v607)
                        {
                          v608 = v599
                               * (float)-(float)(*(float *)(v594 + 4)
                                               - (float)((float)((float)(v604[2] << *v603) / (float)v605)
                                                       * (float)*v601));
                          if (v608 < 0.0)
                            v609 = -0.5;
                          else
                            v609 = 0.5;
                          v610 = (int)(float)(v608 + v609);
                          v611 = *v604;
                        }
                        else
                        {
                          v610 = 0;
                          v611 = 0;
                        }
                        v612 = (_DWORD *)(v593 + 4 * *v600);
                        if ((v598 & 1) != 0)
                        {
                          *v612 = v611;
                          v612[12] = v607;
                          v613 = v610 * v607;
                        }
                        else
                        {
                          *v612 += v611;
                          v612[12] += v607;
                          v613 = v612[24] + v610 * v607;
                        }
                        v612[24] = v613;
                        v597 += 3;
                        ++v600;
                        ++v601;
                        ++v603;
                      }
                      while (v597 != 36);
                      v596 = 0;
                      v614 = (_DWORD *)(v592 + 4 * v595);
                      *v614 = v588[36];
                      v614[2] = v588[37];
                      v614[4] = v588[38];
                      v594 += 16;
                      v588 += 39;
                      v595 = 1;
                    }
                    while ((v598 & 1) != 0);
                    v615 = v590;
                    v616 = 12;
                    do
                    {
                      v617 = *(v615 - 12);
                      if (v617)
                      {
                        v618 = v617 >> 1;
                        if (*v615 < 0)
                          v618 = -v618;
                        *v615 = (v618 + *v615) / v617;
                      }
                      ++v615;
                      --v616;
                    }
                    while (v616);
                    v593 += 144;
                    v592 += 24;
                    v590 += 36;
                    --v581;
                  }
                  while (v581);
                }
                v587 += 16 * v1007;
                v619 = v1033;
                v586 += 144 * v1033;
                v589 += v997;
                v584 += 24 * v1033;
                --v579;
                v581 = v1020;
              }
              while (v579);
              v577 = a1;
            }
            else
            {
              v619 = *(unsigned __int16 *)(a1 + 44);
            }
            if (*(_DWORD *)(a1 + 148))
              PDAF::PixelEngine::ProcessPart2(v875, v876, v877);
            if (*(_DWORD *)(a1 + 160) != 1)
              PDAF::PixelEngine::ProcessPart2(v875, v876, v877);
            bzero((void *)(a1 + 109176), 0x5A24uLL);
            v878 = (unsigned __int16 *)a1;
            v879 = 0;
            v880 = (unsigned int *)(a1 + 109212);
            *v912 = *v911;
            v881 = a1 + 44224;
            do
            {
              v882 = *(_DWORD *)&v878[2 * v879 + 74];
              if ((v882 & 0x80000000) == 0)
              {
                if (v882)
                {
                  v878 = (unsigned __int16 *)a1;
                }
                v883 = a1;
                v884 = v880;
                for (m = 160; m != 172; m += 4)
                {
                  v886 = *(unsigned int *)(v883 + m);
                  if ((int)v886 >= 1)
                  {
                    v883 = a1;
                  }
                  v884 += 384;
                }
                v878 = (unsigned __int16 *)a1;
              }
              ++v879;
              v880 += 1152;
            }
            while (v879 != 3);
            return;
          }
        }
        v925 = v293;
        v964 = v282;
        v296 = 0;
        v1029 = 4 * *(unsigned __int16 *)(a1 + 140);
        v1003 = *(unsigned __int16 *)(a1 + 72) >> 1;
        v994 = *(unsigned __int8 *)(a1 + 139);
        v297 = v295 + 2;
        v298 = v292;
        v929 = v291;
        v933 = v290;
        v937 = v289;
        v941 = v288;
        v970 = *(_BYTE *)(a1 + 143);
        v945 = v287;
        v949 = v286;
        v299 = v287;
        v954 = v284;
        v959 = v283;
        v300 = v284;
        while (1)
        {
          v301 = v283;
          v302 = v296 == 0;
          if (v296)
            v303 = v296;
          else
            v303 = *(_DWORD *)(v294 + 64);
          _X8 = v294 + v298;
          __asm { PRFM            #2, [X8] }
          _X8 = v294 + v288;
          __asm { PRFM            #2, [X8] }
          _X8 = v294 + v290;
          __asm { PRFM            #2, [X8] }
          if (*(_BYTE *)(v294 + v299))
            v310 = 1;
          else
            v310 = *(_BYTE *)(v294 + v299 + 1) != 0;
          v300 += 32 * v302;
          v283 += 78 * (v296 == 0);
          v311 = *(unsigned __int16 *)(v294 + v286 - 2);
          if (!*(_WORD *)(v294 + v286 - 2))
            goto LABEL_347;
          v312 = *(unsigned __int16 *)(v294 + v286);
          if (!*(_WORD *)(v294 + v286))
            goto LABEL_347;
          v313 = *(unsigned __int16 *)(v294 + v291);
          v314 = (unsigned __int16)(v313 + 8563) < 0x21AEu || v310;
          if ((v314 & 1) != 0)
            goto LABEL_347;
          v315 = v311 + v312 + 1;
          v316 = (v315 >> 1) - v312;
          v317 = v316;
          if (v315 >> 1 <= v312)
            v318 = v312 - (v315 >> 1);
          else
            v318 = v316;
          v319 = (__int16 *)(v294 + v289);
          v320 = v319[5];
          v321 = v319[4];
          v322 = v320 - v321 + ((*(__int16 *)(v300 + 18) * (__int16)v312) >> 15);
          v323 = v317 + (-(v322 * v1016) >> 4);
          if (v323 < 0)
            v323 = -v323;
          v324 = (v1029 * v323) >> 16;
          v325 = 2 * v322;
          if ((v322 & 0x40000000) != 0)
            v326 = -2 * v322;
          else
            v326 = 2 * v322;
          if (v324 <= v326)
          {
            if (v326 >= 2 * v324)
              v330 = v326 < 4 * v324;
            else
              v330 = 2;
          }
          else
          {
            v327 = v319[6];
            v328 = v319[3];
            v325 = v320 + v327 - (v321 + v328);
            if (v325 >= 0)
              v326 = v320 + v327 - (v321 + v328);
            else
              v326 = v321 + v328 - (v320 + v327);
            if (v324 <= v326)
            {
              v330 = 3;
            }
            else
            {
              v325 = v327 + *(__int16 *)(a1 + v289 + 14) - (v328 + *(__int16 *)(a1 + v289 + 4));
              if (v325 >= 0)
                v326 = v327 + *(__int16 *)(a1 + v289 + 14) - (v328 + *(__int16 *)(a1 + v289 + 4));
              else
                v326 = v328 + *(__int16 *)(a1 + v289 + 4) - (v327 + *(__int16 *)(a1 + v289 + 14));
              if (v324 <= v326)
              {
                v330 = 4;
              }
              else
              {
                v329 = (__int16 *)(a1 + v289);
                v325 = v329[8] + v329[9] - (v329[1] + *v329);
                if (v325 >= 0)
                  v326 = v329[8] + v329[9] - (v329[1] + *v329);
                else
                  v326 = v329[1] + *v329 - (v329[8] + v329[9]);
                v330 = 5;
              }
            }
            if (v324 < v326 >> 1)
              goto LABEL_339;
          }
          v331 = (__int16)(8 * v326);
          v332 = (__int16)((v331
                          * (__int16)(2
                                    * ((64 - ((v315 >> 1) & 0x3F)) * *(unsigned __int8 *)(a1 + 74 + (v315 >> 7))
                                     + ((v315 >> 1) & 0x3F) * *(unsigned __int8 *)(a1 + 74 + (v315 >> 7) + 1)))) >> 15)
               * v1003;
          v333 = (v332 >> 14) & 0xFFFFFFFE;
          if (((v332 >> 14) & 0xFFFFFF00) != 0)
            v334 = 255;
          else
            v334 = (v332 >> 14) & 0xFE;
          v335 = v334 - v994;
          if (v335 >= 0x10)
            v335 = 16;
          if (v333 >= v994 && v335 != 0)
          {
            if ((v325 ^ v317) >= 0)
              v344 = v330 + 6;
            else
              v344 = v330;
            v345 = &v283[3 * v344];
            v343 = 4
                 * ((64 - ((v315 >> 1) & 0x3F)) * *(unsigned __int8 *)(a1 + 74 + (v315 >> 7))
                  + ((v315 >> 1) & 0x3F) * *(unsigned __int8 *)(a1 + 74 + (v315 >> 7) + 1));
            v346 = (v343 * v343) >> 16;
            if (v346 >= 0x1FFF)
              v346 = 0x1FFF;
            v347 = (__int16)(((v346 >> 1) * v331 * (v335 >> 1)) >> 15 << v970);
            v342 = (v347 * (__int16)(8 * v318)) >> 15;
            v348 = v345[41];
            v341 = v345 + 41;
            v312 = v348;
            v349 = *(v341 - 1) + ((v347 * v331) >> 15);
            *(v341 - 2) += v335;
            *(v341 - 1) = v349;
            goto LABEL_346;
          }
LABEL_339:
          v337 = 2 * v302;
          v338 = (4408 * (v313 >> 1)) >> 15;
          v339 = &v301[39 * v337];
          v340 = v339[37] + v338;
          ++v339[36];
          v339[37] = v340;
          v339[38] += v311;
          ++v283[75];
          v283[76] += v338;
          v341 = v283 + 77;
          v342 = v283[77];
LABEL_346:
          *v341 = v342 + v312;
          v294 = a1;
LABEL_347:
          v296 = v303 - 2;
          v297 -= 2;
          v286 += 4;
          ++v299;
          ++v288;
          v289 += 8;
          v290 += 4;
          v291 += 4;
          v298 += 8;
          if (v297 <= 2)
          {
            v285 = *(_DWORD *)(v294 + 56);
            v282 = v964;
            v284 = v954;
            v283 = v959;
            v287 = v945;
            v286 = v949;
            v289 = v937;
            v288 = v941;
            v291 = v929;
            v290 = v933;
            v293 = v925;
            goto LABEL_349;
          }
        }
      }
      v491 = *(_DWORD *)(a1 + 52);
      if (v491 < 1)
        goto LABEL_460;
      v492 = 0;
      v493 = (const __int16 *)(a1 + 132304 + v277);
      v494 = (const __int16 *)(a1 + 132304 + v280);
      v495 = a1 + 132304 + v278;
      v496 = (int8x8_t *)(a1 + 132304 + v279);
      v497 = vdupq_n_s16(*(char *)(a1 + 143));
      v498 = vdupq_n_s16(*(unsigned __int8 *)(a1 + 139));
      a5.i32[0] = *(unsigned __int16 *)(a1 + 140) >> 1;
      a6.i32[0] = *(unsigned __int16 *)(a1 + 72) >> 1;
      v499 = vdupq_n_s16(-*(char *)(a1 + 142));
      v500 = (uint16x8_t)vdupq_n_s16(0xDE52u);
      v501 = vdupq_n_s16(0x1138u);
      v502 = *(_OWORD *)(a1 + 74);
      v503 = *(_OWORD *)(a1 + 90);
      v504 = *(_OWORD *)(a1 + 106);
      v505 = *(_OWORD *)(a1 + 122);
      v506 = a1 + -312 * v10 + 3976;
      v507 = v281 + 192 - 16 * v987 - 32;
      v508 = 0uLL;
      break;
    default:
      PDAF::PixelEngine::ProcessPart2();
  }
LABEL_427:
  v509 = *(_DWORD *)(a1 + 56);
  v510 = *(_DWORD *)(a1 + 60);
  if (v492 >= 1)
    v509 = 0;
  v1006 = v509;
  v511 = v982;
  if (v492 >= 1)
    v511 = 0;
  v512 = v506 + 156 * v511;
  v513 = v987;
  if (v492 >= 1)
    v513 = 0;
  v514 = v507 + 16 * v513;
  v1019 = v514;
  v1032 = v512;
  if (!v510)
    goto LABEL_458;
  v515 = 0;
  v516 = 0;
  v517 = v514 + 16;
  v518 = 2 - v510;
  v519 = v495;
  v520 = v496;
  v521 = v493;
  v522 = v494;
LABEL_435:
  if (v516 <= 0)
  {
    v516 += *(_DWORD *)(a1 + 64);
    v523 = (const __int16 *)(v517 + 34);
    v517 += 32;
    v508 = vld1q_dup_s16(v523);
  }
  if (v516 <= 15)
  {
    switch(v516)
    {
      case 2:
        v508.i16[1] = *(_WORD *)(v517 + 34);
        goto LABEL_440;
      case 4:
LABEL_440:
        v508.i16[2] = *(_WORD *)(v517 + 34);
        goto LABEL_441;
      case 6:
LABEL_441:
        v508.i16[3] = *(_WORD *)(v517 + 34);
        goto LABEL_442;
      case 8:
LABEL_442:
        v508.i16[4] = *(_WORD *)(v517 + 34);
        goto LABEL_443;
      case 10:
LABEL_443:
        v508.i16[5] = *(_WORD *)(v517 + 34);
        goto LABEL_444;
      case 12:
LABEL_444:
        v508.i16[6] = *(_WORD *)(v517 + 34);
        goto LABEL_445;
      case 14:
LABEL_445:
        v508.i16[7] = *(_WORD *)(v517 + 34);
        break;
      default:
        break;
    }
  }
  v519 += 64;
  v524 = *(int16x8_t *)(v519 + 16);
  v525 = *(int16x8_t *)(v519 + 32);
  v1045 = vld2q_s16(v521);
  v526 = (unsigned __int128)vld2q_s16(v522);
  v527 = v520[1];
  ++v520;
  v528.i64[0] = 0x3A003A003A003ALL;
  v528.i64[1] = 0x3A003A003A003ALL;
  v529 = vandq_s8((int8x16_t)vcgtzq_s16(vminq_s16(v1045.val[0], v1045.val[1])), (int8x16_t)vcgtq_u16(v500, (uint16x8_t)vaddq_s16((int16x8_t)v526, v528)));
  v530 = (int8x16_t)vqdmulhq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v526, 1uLL), v501);
  v531 = vrshrq_n_s16(vaddq_s16(v1045.val[0], v1045.val[1]), 1uLL);
  *(uint8x8_t *)v532.i8 = vqmovn_u16(vshrq_n_u16((uint16x8_t)v531, 6uLL));
  v532.u64[1] = (unint64_t)vmin_u8((uint8x8_t)vadd_s8(*(int8x8_t *)v532.i8, (int8x8_t)0x101010101010101), (uint8x8_t)0x3F3F3F3F3F3F3F3FLL);
  v533 = (uint8x16_t)vqtbl4q_s8(*(int8x16x4_t *)&v502, v532);
  v528.i64[0] = 0x3F003F003F003FLL;
  v528.i64[1] = 0x3F003F003F003FLL;
  v534 = (int16x8_t)vandq_s8((int8x16_t)v531, (int8x16_t)v528);
  v528.i64[0] = 0x40004000400040;
  v528.i64[1] = 0x40004000400040;
  v535 = (uint8x16_t)vuzp1q_s8((int8x16_t)vsubq_s16(v528, v534), (int8x16_t)v534);
  v536 = (int16x8_t)vmlal_high_u8(vmull_u8(*(uint8x8_t *)v535.i8, *(uint8x8_t *)v533.i8), v535, v533);
  v537 = vaddq_s16(v536, v536);
  v528.i64[0] = 0xF000F000F000F000;
  v528.i64[1] = 0xF000F000F000F000;
  v538 = vminq_s16(vqdmulhq_s16(v537, v537), v528);
  v539 = vsubq_s16(v531, v1045.val[1]);
  v540 = vaddq_s16(vqdmulhq_s16(v1045.val[1], v508), *(int16x8_t *)v519);
  v541 = vqdmulhq_lane_s16(vqshlq_n_s16(vabsq_s16(vsraq_n_s16(v539, vmulq_s16(v540, v499), 4uLL)), 2uLL), a5, 0);
  v542 = vaddq_s16(v540, v540);
  v543 = (int8x16_t)vcgtq_s16(v541, vabsq_s16(v525));
  v544 = (int8x16_t)vcgtq_s16(v541, vabsq_s16(v524));
  v545 = vbslq_s8(v544, vbslq_s8(v543, *(int8x16_t *)(v519 + 48), (int8x16_t)v525), (int8x16_t)v524);
  v546 = vabsq_s16(v542);
  v547 = (int8x16_t)vcgeq_s16(v546, v541);
  v548 = (int16x8_t)vbslq_s8(v547, (int8x16_t)v542, v545);
  v549 = vabsq_s16(v548);
  v550 = vorrq_s8((int8x16_t)vcgeq_u16((uint16x8_t)v541, vshrq_n_u16((uint16x8_t)v549, 1uLL)), v547);
  v551 = vqshlq_n_s16(v549, 3uLL);
  v528.i64[0] = 0x10001000100010;
  v528.i64[1] = 0x10001000100010;
  v552 = vminq_s16(vsubq_s16(vqshlq_n_s16(vqdmulhq_lane_s16(vqdmulhq_s16(v551, v537), a6, 0), 1uLL), v498), v528);
  v528.i8[0] = 0;
  v553 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(v552, (int16x8_t)v528.u16[0]), v550);
  v554 = vqshlq_s16(vqdmulhq_s16(v551, vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v553, 1uLL), v538)), v497);
  v555 = (int8x16_t)vceqzq_s16(v553);
  v556 = vorrq_s8((int8x16_t)v553, vornq_s8(vandq_s8((int8x16_t)vmovl_s8(vmvn_s8(v527)), v529), v529));
  v557 = vbslq_s8(v555, v530, (int8x16_t)vqdmulhq_s16(v554, v551));
  v553.i64[0] = 0x4000400040004;
  v553.i64[1] = 0x4000400040004;
  v551.i64[0] = 0x5000500050005;
  v551.i64[1] = 0x5000500050005;
  v558 = vbslq_s8(v543, (int8x16_t)v551, (int8x16_t)v553);
  v551.i64[0] = 0x3000300030003;
  v551.i64[1] = 0x3000300030003;
  v559 = vbslq_s8(v544, v558, (int8x16_t)v551);
  v551.i64[0] = 0x2000200020002;
  v551.i64[1] = 0x2000200020002;
  v560 = vbslq_s8(v547, (int8x16_t)v551, v559);
  v561 = (int16x8_t)vcgeq_u16((uint16x8_t)v546, (uint16x8_t)vaddq_s16(v541, v541));
  v562 = (int16x8_t)vandq_s8((int8x16_t)vsubq_s16((int16x8_t)vbicq_s8(v560, (int8x16_t)v561), v561), (int8x16_t)vcgtq_u16((uint16x8_t)vshlq_n_s16(v541, 2uLL), (uint16x8_t)v546));
  v546.i64[0] = -1;
  v546.i64[1] = -1;
  v561.i64[0] = 0x6000600060006;
  v561.i64[1] = 0x6000600060006;
  v1039 = (int16x8_t)v556;
  v1040 = v557;
  v1041 = vbslq_s8(v555, (int8x16_t)v1045.val[0], (int8x16_t)vqdmulhq_s16(v554, vqshlq_n_s16(vabsq_s16(v539), 3uLL)));
  v1042 = vbslq_s8(v555, (int8x16_t)v1045.val[1], (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(veorq_s8((int8x16_t)vcltzq_s16(v539), (int8x16_t)vcgtq_s16(v548, v546)), (int8x16_t)v561), v562));
  v510 -= 16;
  v563 = 8;
  while (1)
  {
    v564 = v515 >= 1 ? 0 : *(_DWORD *)(a1 + 64);
    v565 = (_DWORD *)(v512 + 312 * (v515 < 1));
    v566 = &v1039.u16[v563];
    v567 = v1039.u16[v563 - 8];
    if (!v1039.i16[v563 - 8])
      break;
    if (v567 != 0xFFFF)
    {
      v568 = *(unsigned __int16 *)((char *)&v1039 + v563 * 2 + 16);
      v569 = &v565[3 * v1041.u16[v563]];
      v570 = v569[40] + v1039.u16[v563];
      v569[39] += v567;
      v569[40] = v570;
      v571 = v569 + 41;
LABEL_454:
      *v571 += v568;
    }
    if (v518 + (_DWORD)(v563 * 2) == 16)
      goto LABEL_458;
    v515 = v515 + v564 - 2;
    ++v563;
    v512 = (uint64_t)v565;
    if (v563 == 16)
    {
      v516 -= 16;
      v521 += 16;
      v522 += 16;
      v518 += 16;
      v512 = (uint64_t)v565;
      if (!v510)
      {
LABEL_458:
        v495 += 2 * v969;
        v496 = (int8x8_t *)((char *)v496 + v976);
        v493 += v963;
        v492 = v492 + v1006 - 1;
        v494 += v993;
        _VF = __OFSUB__(v491--, 1);
        v507 = v1019;
        v506 = v1032;
        if ((v491 < 0) ^ _VF | (v491 == 0))
          goto LABEL_460;
        goto LABEL_427;
      }
      goto LABEL_435;
    }
  }
  v572 = *v566;
  v573 = v566[8];
  v568 = v566[16];
  v574 = (_DWORD *)(v512 + 312 * (v515 < 1));
  v575 = v574[37] + v572;
  ++v574[36];
  v574[37] = v575;
  v574[38] += v573;
  ++v565[75];
  v565[76] += v572;
  v571 = v565 + 77;
  goto LABEL_454;
}

int *PDAF::PixelEngine::`anonymous namespace'::ExtractNeighborRaw14Scalar(int *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _WORD *a8, _BYTE *a9)
{
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  _WORD *v19;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v9 = *result;
  if (v9 >= 4)
  v10 = result[6] - a2;
  if (v10 >= 1)
  {
    v11 = result[8] << dword_235829520[v9];
    v13 = v11 + 8;
    v14 = 2 * a3;
    v15 = v11 + 12;
    do
    {
      if (v13 >= 1)
      {
        v16 = 0;
        v17 = v15;
        v18 = a9;
        v19 = a8;
        do
        {
          _X0 = a7 + v16;
          _X1 = a6 + v16;
          __asm
          {
            PRFM            #1, [X1,#0x40]
            PRFM            #1, [X0,#0x40]
          }
          v28 = *(__int16 *)(a6 + v16);
          v29 = *(__int16 *)(a6 + v16 + 4);
          v30 = *(__int16 *)(a6 + v16 + 8);
          LODWORD(_X1) = *(__int16 *)(a6 + v16 + 12);
          v31 = *(__int16 *)(a7 + v16 + 4);
          v32 = *(__int16 *)(a7 + v16 + 8);
          v33 = *(__int16 *)(a7 + v16 + 12);
          *v19 = (*(__int16 *)(a7 + v16) + v28) >> 4;
          v19[1] = (v31 + v29) >> 4;
          v19[2] = (v32 + v30) >> 4;
          v19[3] = (v33 + _X1) >> 4;
          result = (int *)(v28 > 16352 || v31 > 16352 || v30 > 16352 || v33 > 16352);
          *v18++ = (_BYTE)result;
          v16 += 16;
          v17 -= 4;
          v19 += 4;
        }
        while (v17 > 4);
      }
      a8 += a4;
      a9 += a5;
      a6 += v14;
      a7 += v14;
      _VF = __OFSUB__(v10, 2);
      v10 -= 2;
    }
    while (!((v10 < 0) ^ _VF | (v10 == 0)));
  }
  return result;
}

int *PDAF::PixelEngine::`anonymous namespace'::ExtractGradsRaw14Neon64(int *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int16x8_t *a8, int8x8_t *a9)
{
  uint64_t v9;
  int v10;
  signed int v12;
  uint64_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  int16x8_t *v22;
  int8x8_t *v23;
  const __int16 *v24;
  const __int16 *v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x8_t v35;
  BOOL v36;
  int16x8x4_t v37;
  int16x8x4_t v38;
  int16x8x4_t v39;
  int16x8x4_t v40;

  v9 = *result;
  if (v9 >= 4)
  v10 = result[6] - a2;
  if (v10 >= 1)
  {
    v12 = ((result[8] << dword_235829520[v9]) + 63) & 0xFFFFFFE0;
    v13 = 2 * a3;
    v14 = 0uLL;
    v15 = vdupq_n_s16(0x3FE1u);
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0;
    do
    {
      if (v12 < 1)
      {
        v35 = v19;
        v32 = v18;
        v33 = (int8x16_t)v17;
        v34 = (int8x16_t)v16;
        v31 = (int8x16_t)v14;
      }
      else
      {
        v20 = 0;
        v21 = v12 + 32;
        v22 = a8;
        v23 = a9;
        do
        {
          v24 = (const __int16 *)(a6 + v20);
          v37 = vld4q_s16(v24);
          v24 += 32;
          v38 = vld4q_s16(v24);
          v25 = (const __int16 *)(a7 + v20);
          v39 = vld4q_s16(v25);
          v25 += 32;
          v40 = vld4q_s16(v25);
          v26 = vuzp1q_s16(v37.val[0], v38.val[0]);
          v27 = vuzp2q_s16(v37.val[0], v38.val[0]);
          v28 = vuzp1q_s16(v37.val[2], v38.val[2]);
          v29 = vuzp2q_s16(v37.val[2], v38.val[2]);
          v37.val[2] = vuzp1q_s16(v39.val[2], v40.val[2]);
          v37.val[3] = vuzp2q_s16(v39.val[2], v40.val[2]);
          v38.val[0] = vaddq_s16(vuzp1q_s16(v39.val[0], v40.val[0]), v26);
          v30 = vshrq_n_s16(vaddq_s16(v37.val[2], v28), 4uLL);
          v38.val[2] = vaddq_s16(v37.val[3], v29);
          v31 = (int8x16_t)vshrq_n_s16(v38.val[2], 4uLL);
          v32 = (int8x16_t)vsubq_s16(v30, vshrq_n_s16(v38.val[0], 4uLL));
          v33 = (int8x16_t)vsraq_n_s16(v30, v38.val[0], 4uLL);
          v34 = (int8x16_t)vsraq_n_s16(vshrq_n_s16(vaddq_s16(vuzp2q_s16(v39.val[0], v40.val[0]), v27), 4uLL), v38.val[2], 4uLL);
          v38.val[0] = (int16x8_t)vextq_s8((int8x16_t)v16, v34, 2uLL);
          v38.val[1] = (int16x8_t)vextq_s8(v18, v32, 2uLL);
          v35 = vmovn_s16(vcgtq_s16(v15, vmaxq_s16(vmaxq_s16(vmaxq_s16(v27, v26), v37.val[2]), v37.val[3])));
          *v22 = v38.val[1];
          v22[1] = vaddq_s16(vsubq_s16(v38.val[0], vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v14, v31, 2uLL), v14)), v38.val[1]);
          v22[2] = vsubq_s16(v38.val[0], v16);
          v22[3] = vsubq_s16((int16x8_t)vextq_s8((int8x16_t)v17, v33, 4uLL), v17);
          v22 += 4;
          *v23++ = vand_s8(vext_s8(v19, v35, 1uLL), v19);
          v20 += 128;
          v21 -= 32;
          v14 = (int16x8_t)v31;
          v16 = (int16x8_t)v34;
          v17 = (int16x8_t)v33;
          v18 = v32;
          v19 = v35;
        }
        while (v21 > 0x20);
      }
      a8 = (int16x8_t *)((char *)a8 + 2 * a4);
      a9 = (int8x8_t *)((char *)a9 + a5);
      a6 += v13;
      a7 += v13;
      v14 = (int16x8_t)v31;
      v16 = (int16x8_t)v34;
      v17 = (int16x8_t)v33;
      v18 = v32;
      v19 = v35;
      v36 = __OFSUB__(v10, 2);
      v10 -= 2;
    }
    while (!((v10 < 0) ^ v36 | (v10 == 0)));
  }
  return result;
}

int8x16x3_t *PDAF::PixelEngine::`anonymous namespace'::ExtractNeighborPack10(int8x16x3_t *result, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int8x16x3_t *a10, int8x8_t *a11)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL *v21;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  int v38;
  BOOL v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int8x16x3_t *v51;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  __int16 v63;
  unsigned int v64;
  int v65;
  BOOL v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int8x16x3_t *v78;
  int v83;
  unsigned int v84;
  __int16 v85;
  int v86;
  unsigned int v87;
  int v88;
  __int16 v89;
  int v90;
  BOOL v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int8x16x3_t *v103;
  int v108;
  unsigned int v109;
  __int16 v110;
  int v111;
  unsigned int v112;
  int v113;
  __int16 v114;
  int v115;
  BOOL v119;
  uint64_t v120;
  int v121;
  signed int v122;
  int16x8_t v123;
  int8x16_t v124;
  uint16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int8x16_t v128;
  int8x8_t v129;
  uint64_t v130;
  unsigned int v131;
  int16x8_t *v132;
  int8x8_t *v133;
  int32x4_t v134;
  int8x16_t v135;
  uint16x8_t v136;
  int8x16_t v137;
  uint16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int8x8_t v147;
  uint64_t v148;
  int v149;
  signed int v150;
  int16x8_t v151;
  int8x16_t v152;
  uint16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int8x16_t v156;
  int8x8_t v157;
  uint64_t v158;
  unsigned int v159;
  int16x8_t *v160;
  int8x8_t *v161;
  int32x4_t v162;
  int8x16_t v163;
  uint16x8_t v164;
  int8x16_t v165;
  uint16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int8x8_t v175;
  uint64_t v176;
  int v177;
  signed int v178;
  int16x8_t v179;
  int8x16_t v180;
  uint16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int8x16_t v184;
  int8x8_t v185;
  uint64_t v186;
  unsigned int v187;
  int16x8_t *v188;
  int8x8_t *v189;
  int32x4_t v190;
  int8x16_t v191;
  uint16x8_t v192;
  int8x16_t v193;
  uint16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int8x8_t v203;
  uint64_t v204;
  int v205;
  signed int v206;
  int16x8_t v207;
  int8x16_t v208;
  uint16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int8x16_t v212;
  int8x8_t v213;
  uint64_t v214;
  unsigned int v215;
  int16x8_t *v216;
  int8x8_t *v217;
  int32x4_t v218;
  int8x16_t v219;
  uint16x8_t v220;
  int8x16_t v221;
  uint16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int8x8_t v231;
  int8x16x3_t v232;
  int8x16x3_t v233;
  int8x16x3_t v234;
  int8x16x3_t v235;
  int8x16x3_t v236;
  int8x16x3_t v237;
  int8x16x3_t v238;
  int8x16x3_t v239;
  int8x16x3_t v240;
  int8x16x3_t v241;
  int8x16x3_t v242;
  int8x16x3_t v243;

  v13 = a9;
  switch((int)a3)
  {
    case 0:
      if ((_DWORD)result == 1)
      {
        v120 = *a2;
        if (v120 >= 4)
        v121 = a2[6] - a4;
        if (v121 >= 1)
        {
          v122 = ((a2[8] << dword_235829520[v120]) + 63) & 0xFFFFFFE0;
          v123 = 0uLL;
          v124.i64[0] = 0x303030303030303;
          v124.i64[1] = 0x303030303030303;
          v125.i64[0] = 0xFC00FC00FC00FC00;
          v125.i64[1] = 0xFC00FC00FC00FC00;
          v126 = 0uLL;
          v127 = 0uLL;
          v128 = 0uLL;
          v129 = 0;
          do
          {
            if (v122 < 1)
            {
              v147 = v129;
              v141 = v128;
              v142 = (int8x16_t)v127;
              v143 = (int8x16_t)v126;
              v140 = v123;
            }
            else
            {
              v130 = 0;
              v131 = v122 + 32;
              v132 = (int16x8_t *)a10;
              v133 = a11;
              do
              {
                v232 = *(int8x16x3_t *)(a8 + v130);
                v236 = *(int8x16x3_t *)(v13 + v130);
                v240 = *(int8x16x3_t *)(a8 + v130 + 40);
                result = (int8x16x3_t *)(v13 + v130 + 40);
                v134 = (int32x4_t)vqtbl3q_s8(v232, (int8x16_t)xmmword_235829490);
                v232.val[0] = vqtbl3q_s8(v232, (int8x16_t)xmmword_235829470);
                v232.val[1] = vqtbl3q_s8(v240, (int8x16_t)xmmword_235829470);
                v232.val[2] = vqtbl3q_s8(v236, (int8x16_t)xmmword_235829490);
                v236.val[0] = vqtbl3q_s8(v236, (int8x16_t)xmmword_235829470);
                v236.val[1] = vqtbl3q_s8(v240, (int8x16_t)xmmword_235829490);
                v236.val[2] = vqtbl3q_s8(*result, (int8x16_t)xmmword_235829490);
                v240.val[1] = (int8x16_t)vzip1q_s32(v134, (int32x4_t)v236.val[1]);
                v236.val[1] = (int8x16_t)vzip2q_s32(v134, (int32x4_t)v236.val[1]);
                v240.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v232.val[2], (int32x4_t)v236.val[2]);
                v236.val[2] = (int8x16_t)vzip2q_s32((int32x4_t)v232.val[2], (int32x4_t)v236.val[2]);
                v232.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v232.val[0], (uint8x16_t)xmmword_2358294A0), v124);
                v232.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v232.val[1], (uint8x16_t)xmmword_2358294A0), v124);
                v232.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v232.val[0], (int32x4_t)v232.val[1]);
                v232.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v232.val[0], (int32x4_t)v232.val[1]);
                v232.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v236.val[0], (uint8x16_t)xmmword_2358294A0), v124);
                v236.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)vqtbl3q_s8(*result, (int8x16_t)xmmword_235829470), (uint8x16_t)xmmword_2358294A0), v124);
                v240.val[0] = (int8x16_t)vzip1q_s32((int32x4_t)v232.val[1], (int32x4_t)v236.val[0]);
                v236.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v232.val[1], (int32x4_t)v236.val[0]);
                v135 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v232.val[2].i8);
                v136 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v240.val[1].i8, 2uLL), v135);
                v137 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v232.val[0].i8);
                v138 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v236.val[1].i8, 2uLL), v137);
                v232.val[1] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v240.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v232.val[2], v232.val[2], 8uLL)));
                v139 = (int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v240.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v240.val[0], v240.val[0], 8uLL)));
                v240.val[1] = (int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v240.val[2].i8, *(uint8x8_t *)v240.val[1].i8), 2uLL);
                v240.val[2] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v236.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v236.val[0], v236.val[0], 8uLL)));
                v240.val[0] = (int8x16_t)vaddw_u8((uint16x8_t)vorrq_s8(v240.val[1], v135), *(uint8x8_t *)v240.val[0].i8);
                v232.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v232.val[1], v139);
                v140 = vaddq_s16((int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v236.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v232.val[0], v232.val[0], 8uLL))), (int16x8_t)v240.val[2]);
                v141 = (int8x16_t)vsubq_s16((int16x8_t)v232.val[1], (int16x8_t)v240.val[0]);
                v142 = (int8x16_t)vaddq_s16((int16x8_t)v232.val[1], (int16x8_t)v240.val[0]);
                v143 = (int8x16_t)vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vorrq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v236.val[2].i8, *(uint8x8_t *)v236.val[1].i8), 2uLL), v137), *(uint8x8_t *)v236.val[0].i8), v140);
                v236.val[1] = vextq_s8((int8x16_t)v126, v143, 2uLL);
                v144 = (int16x8_t)vextq_s8(v128, v141, 2uLL);
                v145 = vaddq_s16(vsubq_s16((int16x8_t)v236.val[1], vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v123, (int8x16_t)v140, 2uLL), v123)), v144);
                v146 = vsubq_s16((int16x8_t)v236.val[1], v126);
                v147 = vmovn_s16((int16x8_t)vcgtq_u16(v125, vmaxq_u16(vmaxq_u16(vmaxq_u16(v138, v136), (uint16x8_t)v139), (uint16x8_t)v240.val[2])));
                *v132 = v144;
                v132[1] = v145;
                v132[2] = v146;
                v132[3] = vsubq_s16((int16x8_t)vextq_s8((int8x16_t)v127, v142, 4uLL), v127);
                v132 += 4;
                *v133++ = vand_s8(vext_s8(v129, v147, 1uLL), v129);
                v130 += 80;
                v131 -= 32;
                v123 = v140;
                v126 = (int16x8_t)v143;
                v127 = (int16x8_t)v142;
                v128 = v141;
                v129 = v147;
              }
              while (v131 > 0x20);
            }
            a8 += a5;
            v13 += a5;
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v123 = v140;
            v126 = (int16x8_t)v143;
            v127 = (int16x8_t)v142;
            v128 = v141;
            v129 = v147;
            _VF = __OFSUB__(v121, 2);
            v121 -= 2;
          }
          while (!((v121 < 0) ^ _VF | (v121 == 0)));
        }
      }
      else
      {
        if ((_DWORD)result)
        v14 = *a2;
        if (v14 >= 4)
        v15 = a2[6] - a4;
        if (v15 >= 1)
        {
          v16 = a2[8] << dword_235829520[v14];
          v17 = v16 + 8;
          v18 = v16 + 12;
          do
          {
            if (v17 >= 1)
            {
              v19 = 0;
              v20 = v18;
              v21 = (BOOL *)a11;
              result = a10;
              do
              {
                _X1 = v13 + v19;
                _X2 = a8 + v19;
                __asm
                {
                  PRFM            #1, [X2,#0x40]
                  PRFM            #1, [X1,#0x40]
                }
                v29 = *(unsigned __int8 *)(a8 + v19 + 4);
                v30 = v29 & 3 | (4 * *(unsigned __int8 *)(a8 + v19));
                LOWORD(v29) = (v29 >> 4) & 3 | (4 * *(unsigned __int8 *)(a8 + v19 + 2));
                v31 = *(unsigned __int8 *)(a8 + v19 + 9);
                v32 = v31 & 3 | (4 * *(unsigned __int8 *)(a8 + v19 + 5));
                LODWORD(_X2) = (v31 >> 4) & 3 | (4 * *(unsigned __int8 *)(a8 + v19 + 7));
                v33 = *(unsigned __int8 *)(v13 + v19 + 4);
                v34 = v33 & 3;
                v35 = (v33 >> 4) & 3 | (4 * *(unsigned __int8 *)(v13 + v19 + 2));
                v36 = *(unsigned __int8 *)(v13 + v19 + 5);
                v37 = *(unsigned __int8 *)(v13 + v19 + 9);
                v38 = (v37 >> 4) & 3 | (4 * *(unsigned __int8 *)(v13 + v19 + 7));
                result->val[0].i16[0] = v30 + 4 * *(unsigned __int8 *)(v13 + v19) + v34;
                result->val[0].i16[1] = v29 + v35;
                result->val[0].i16[2] = v32 + 4 * v36 + (v37 & 3);
                result->val[0].i16[3] = _X2 + v38;
                v42 = v30 == 1023 || v35 == 1023 || v32 == 1023 || v38 == 1023;
                *v21++ = v42;
                v19 += 10;
                v20 -= 4;
                result = (int8x16x3_t *)((char *)result + 8);
              }
              while (v20 > 4);
            }
            a8 += a5;
            v13 += a5;
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            _VF = __OFSUB__(v15, 2);
            v15 -= 2;
          }
          while (!((v15 < 0) ^ _VF | (v15 == 0)));
        }
      }
      break;
    case 1:
      if ((_DWORD)result == 1)
      {
        v148 = *a2;
        if (v148 >= 4)
        v149 = a2[6] - a4;
        if (v149 >= 1)
        {
          v150 = ((a2[8] << dword_235829520[v148]) + 63) & 0xFFFFFFE0;
          v151 = 0uLL;
          v152.i64[0] = 0x303030303030303;
          v152.i64[1] = 0x303030303030303;
          v153.i64[0] = 0xFC00FC00FC00FC00;
          v153.i64[1] = 0xFC00FC00FC00FC00;
          v154 = 0uLL;
          v155 = 0uLL;
          v156 = 0uLL;
          v157 = 0;
          do
          {
            if (v150 < 1)
            {
              v175 = v157;
              v169 = v156;
              v170 = (int8x16_t)v155;
              v171 = (int8x16_t)v154;
              v168 = v151;
            }
            else
            {
              v158 = 0;
              v159 = v150 + 32;
              v160 = (int16x8_t *)a10;
              v161 = a11;
              do
              {
                v233 = *(int8x16x3_t *)(a8 + v158);
                v237 = *(int8x16x3_t *)(v13 + v158);
                v241 = *(int8x16x3_t *)(a8 + v158 + 40);
                result = (int8x16x3_t *)(v13 + v158 + 40);
                v162 = (int32x4_t)vqtbl3q_s8(v233, (int8x16_t)xmmword_235829460);
                v233.val[0] = vqtbl3q_s8(v233, (int8x16_t)xmmword_235829470);
                v233.val[1] = vqtbl3q_s8(v241, (int8x16_t)xmmword_235829470);
                v233.val[2] = vqtbl3q_s8(v237, (int8x16_t)xmmword_235829460);
                v237.val[0] = vqtbl3q_s8(v237, (int8x16_t)xmmword_235829470);
                v237.val[1] = vqtbl3q_s8(v241, (int8x16_t)xmmword_235829460);
                v237.val[2] = vqtbl3q_s8(*result, (int8x16_t)xmmword_235829460);
                v241.val[1] = (int8x16_t)vzip1q_s32(v162, (int32x4_t)v237.val[1]);
                v237.val[1] = (int8x16_t)vzip2q_s32(v162, (int32x4_t)v237.val[1]);
                v241.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v233.val[2], (int32x4_t)v237.val[2]);
                v237.val[2] = (int8x16_t)vzip2q_s32((int32x4_t)v233.val[2], (int32x4_t)v237.val[2]);
                v233.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v233.val[0], (uint8x16_t)xmmword_235829480), v152);
                v233.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v233.val[1], (uint8x16_t)xmmword_235829480), v152);
                v233.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v233.val[0], (int32x4_t)v233.val[1]);
                v233.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v233.val[0], (int32x4_t)v233.val[1]);
                v233.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v237.val[0], (uint8x16_t)xmmword_235829480), v152);
                v237.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)vqtbl3q_s8(*result, (int8x16_t)xmmword_235829470), (uint8x16_t)xmmword_235829480), v152);
                v241.val[0] = (int8x16_t)vzip1q_s32((int32x4_t)v233.val[1], (int32x4_t)v237.val[0]);
                v237.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v233.val[1], (int32x4_t)v237.val[0]);
                v163 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v233.val[2].i8);
                v164 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v241.val[1].i8, 2uLL), v163);
                v165 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v233.val[0].i8);
                v166 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v237.val[1].i8, 2uLL), v165);
                v233.val[1] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v241.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v233.val[2], v233.val[2], 8uLL)));
                v167 = (int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v241.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v241.val[0], v241.val[0], 8uLL)));
                v241.val[1] = (int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v241.val[2].i8, *(uint8x8_t *)v241.val[1].i8), 2uLL);
                v241.val[2] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v237.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v237.val[0], v237.val[0], 8uLL)));
                v241.val[0] = (int8x16_t)vaddw_u8((uint16x8_t)vorrq_s8(v241.val[1], v163), *(uint8x8_t *)v241.val[0].i8);
                v233.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v233.val[1], v167);
                v168 = vaddq_s16((int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v237.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v233.val[0], v233.val[0], 8uLL))), (int16x8_t)v241.val[2]);
                v169 = (int8x16_t)vsubq_s16((int16x8_t)v233.val[1], (int16x8_t)v241.val[0]);
                v170 = (int8x16_t)vaddq_s16((int16x8_t)v233.val[1], (int16x8_t)v241.val[0]);
                v171 = (int8x16_t)vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vorrq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v237.val[2].i8, *(uint8x8_t *)v237.val[1].i8), 2uLL), v165), *(uint8x8_t *)v237.val[0].i8), v168);
                v237.val[1] = vextq_s8((int8x16_t)v154, v171, 2uLL);
                v172 = (int16x8_t)vextq_s8(v156, v169, 2uLL);
                v173 = vaddq_s16(vsubq_s16((int16x8_t)v237.val[1], vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v151, (int8x16_t)v168, 2uLL), v151)), v172);
                v174 = vsubq_s16((int16x8_t)v237.val[1], v154);
                v175 = vmovn_s16((int16x8_t)vcgtq_u16(v153, vmaxq_u16(vmaxq_u16(vmaxq_u16(v166, v164), (uint16x8_t)v167), (uint16x8_t)v241.val[2])));
                *v160 = v172;
                v160[1] = v173;
                v160[2] = v174;
                v160[3] = vsubq_s16((int16x8_t)vextq_s8((int8x16_t)v155, v170, 4uLL), v155);
                v160 += 4;
                *v161++ = vand_s8(vext_s8(v157, v175, 1uLL), v157);
                v158 += 80;
                v159 -= 32;
                v151 = v168;
                v154 = (int16x8_t)v171;
                v155 = (int16x8_t)v170;
                v156 = v169;
                v157 = v175;
              }
              while (v159 > 0x20);
            }
            a8 += a5;
            v13 += a5;
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v151 = v168;
            v154 = (int16x8_t)v171;
            v155 = (int16x8_t)v170;
            v156 = v169;
            v157 = v175;
            _VF = __OFSUB__(v149, 2);
            v149 -= 2;
          }
          while (!((v149 < 0) ^ _VF | (v149 == 0)));
        }
      }
      else
      {
        if ((_DWORD)result)
        v43 = *a2;
        if (v43 >= 4)
        v44 = a2[6] - a4;
        if (v44 >= 1)
        {
          v45 = 0;
          v46 = a2[8] << dword_235829520[v43];
          v47 = v46 + 8;
          v48 = v46 + 12;
          do
          {
            if (v47 >= 1)
            {
              v49 = v48;
              v50 = v45;
              result = (int8x16x3_t *)a11;
              v51 = a10;
              do
              {
                _X2 = a8 + v50;
                __asm { PRFM            #1, [X2,#0x40] }
                _X3 = a9 + v50;
                __asm { PRFM            #1, [X3,#0x40] }
                v56 = *(unsigned __int8 *)(a8 + v50 + 4);
                v57 = (4 * *(unsigned __int8 *)(a8 + v50 + 1)) | (v56 >> 2) & 3;
                LOWORD(v56) = (v56 >> 6) | (4 * *(unsigned __int8 *)(a8 + v50 + 3));
                v58 = *(unsigned __int8 *)(a8 + v50 + 9);
                v59 = (4 * *(unsigned __int8 *)(a8 + v50 + 6)) | (v58 >> 2) & 3;
                LODWORD(_X2) = (v58 >> 6) | (4 * *(unsigned __int8 *)(a8 + v50 + 8));
                v60 = *(unsigned __int8 *)(a9 + v50 + 4);
                v61 = (v60 >> 2) & 3;
                v62 = (v60 >> 6) | (4 * *(unsigned __int8 *)(a9 + v50 + 3));
                v63 = *(unsigned __int8 *)(a9 + v50 + 6);
                v64 = *(unsigned __int8 *)(a9 + v50 + 9);
                v65 = (v64 >> 6) | (4 * *(unsigned __int8 *)(a9 + v50 + 8));
                v51->val[0].i16[0] = v57 + 4 * *(unsigned __int8 *)(a9 + v50 + 1) + v61;
                v51->val[0].i16[1] = v56 + v62;
                v51->val[0].i16[2] = v59 + 4 * v63 + ((v64 >> 2) & 3);
                v51->val[0].i16[3] = _X2 + v65;
                v69 = v57 == 1023 || v62 == 1023 || v59 == 1023 || v65 == 1023;
                result->val[0].i8[0] = v69;
                result = (int8x16x3_t *)((char *)result + 1);
                v50 += 10;
                v49 -= 4;
                v51 = (int8x16x3_t *)((char *)v51 + 8);
              }
              while (v49 > 4);
            }
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v45 += a5;
            _VF = __OFSUB__(v44, 2);
            v44 -= 2;
          }
          while (!((v44 < 0) ^ _VF | (v44 == 0)));
        }
      }
      break;
    case 2:
      if ((_DWORD)result == 1)
      {
        v176 = *a2;
        if (v176 >= 4)
        v177 = a2[6] - a4;
        if (v177 >= 1)
        {
          v178 = ((a2[8] << dword_235829520[v176]) + 63) & 0xFFFFFFE0;
          v179 = 0uLL;
          v180.i64[0] = 0x303030303030303;
          v180.i64[1] = 0x303030303030303;
          v181.i64[0] = 0xFC00FC00FC00FC00;
          v181.i64[1] = 0xFC00FC00FC00FC00;
          v182 = 0uLL;
          v183 = 0uLL;
          v184 = 0uLL;
          v185 = 0;
          do
          {
            if (v178 < 1)
            {
              v203 = v185;
              v197 = v184;
              v198 = (int8x16_t)v183;
              v199 = (int8x16_t)v182;
              v196 = v179;
            }
            else
            {
              v186 = 0;
              v187 = v178 + 32;
              v188 = (int16x8_t *)a10;
              v189 = a11;
              do
              {
                v234 = *(int8x16x3_t *)(a8 + v186);
                v238 = *(int8x16x3_t *)(v13 + v186);
                v242 = *(int8x16x3_t *)(a8 + v186 + 40);
                result = (int8x16x3_t *)(v13 + v186 + 40);
                v190 = (int32x4_t)vqtbl3q_s8(v234, (int8x16_t)xmmword_235829440);
                v234.val[0] = vqtbl3q_s8(v234, (int8x16_t)xmmword_235829420);
                v234.val[1] = vqtbl3q_s8(v242, (int8x16_t)xmmword_235829420);
                v234.val[2] = vqtbl3q_s8(v238, (int8x16_t)xmmword_235829440);
                v238.val[0] = vqtbl3q_s8(v238, (int8x16_t)xmmword_235829420);
                v238.val[1] = vqtbl3q_s8(v242, (int8x16_t)xmmword_235829440);
                v238.val[2] = vqtbl3q_s8(*result, (int8x16_t)xmmword_235829440);
                v242.val[1] = (int8x16_t)vzip1q_s32(v190, (int32x4_t)v238.val[1]);
                v238.val[1] = (int8x16_t)vzip2q_s32(v190, (int32x4_t)v238.val[1]);
                v242.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v234.val[2], (int32x4_t)v238.val[2]);
                v238.val[2] = (int8x16_t)vzip2q_s32((int32x4_t)v234.val[2], (int32x4_t)v238.val[2]);
                v234.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v234.val[0], (uint8x16_t)xmmword_235829450), v180);
                v234.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v234.val[1], (uint8x16_t)xmmword_235829450), v180);
                v234.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v234.val[0], (int32x4_t)v234.val[1]);
                v234.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v234.val[0], (int32x4_t)v234.val[1]);
                v234.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v238.val[0], (uint8x16_t)xmmword_235829450), v180);
                v238.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)vqtbl3q_s8(*result, (int8x16_t)xmmword_235829420), (uint8x16_t)xmmword_235829450), v180);
                v242.val[0] = (int8x16_t)vzip1q_s32((int32x4_t)v234.val[1], (int32x4_t)v238.val[0]);
                v238.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v234.val[1], (int32x4_t)v238.val[0]);
                v191 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v234.val[2].i8);
                v192 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v242.val[1].i8, 2uLL), v191);
                v193 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v234.val[0].i8);
                v194 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v238.val[1].i8, 2uLL), v193);
                v234.val[1] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v242.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v234.val[2], v234.val[2], 8uLL)));
                v195 = (int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v242.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v242.val[0], v242.val[0], 8uLL)));
                v242.val[1] = (int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v242.val[2].i8, *(uint8x8_t *)v242.val[1].i8), 2uLL);
                v242.val[2] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v238.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v238.val[0], v238.val[0], 8uLL)));
                v242.val[0] = (int8x16_t)vaddw_u8((uint16x8_t)vorrq_s8(v242.val[1], v191), *(uint8x8_t *)v242.val[0].i8);
                v234.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v234.val[1], v195);
                v196 = vaddq_s16((int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v238.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v234.val[0], v234.val[0], 8uLL))), (int16x8_t)v242.val[2]);
                v197 = (int8x16_t)vsubq_s16((int16x8_t)v234.val[1], (int16x8_t)v242.val[0]);
                v198 = (int8x16_t)vaddq_s16((int16x8_t)v234.val[1], (int16x8_t)v242.val[0]);
                v199 = (int8x16_t)vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vorrq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v238.val[2].i8, *(uint8x8_t *)v238.val[1].i8), 2uLL), v193), *(uint8x8_t *)v238.val[0].i8), v196);
                v238.val[1] = vextq_s8((int8x16_t)v182, v199, 2uLL);
                v200 = (int16x8_t)vextq_s8(v184, v197, 2uLL);
                v201 = vaddq_s16(vsubq_s16((int16x8_t)v238.val[1], vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v179, (int8x16_t)v196, 2uLL), v179)), v200);
                v202 = vsubq_s16((int16x8_t)v238.val[1], v182);
                v203 = vmovn_s16((int16x8_t)vcgtq_u16(v181, vmaxq_u16(vmaxq_u16(vmaxq_u16(v194, v192), (uint16x8_t)v195), (uint16x8_t)v242.val[2])));
                *v188 = v200;
                v188[1] = v201;
                v188[2] = v202;
                v188[3] = vsubq_s16((int16x8_t)vextq_s8((int8x16_t)v183, v198, 4uLL), v183);
                v188 += 4;
                *v189++ = vand_s8(vext_s8(v185, v203, 1uLL), v185);
                v186 += 80;
                v187 -= 32;
                v179 = v196;
                v182 = (int16x8_t)v199;
                v183 = (int16x8_t)v198;
                v184 = v197;
                v185 = v203;
              }
              while (v187 > 0x20);
            }
            a8 += a5;
            v13 += a5;
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v179 = v196;
            v182 = (int16x8_t)v199;
            v183 = (int16x8_t)v198;
            v184 = v197;
            v185 = v203;
            _VF = __OFSUB__(v177, 2);
            v177 -= 2;
          }
          while (!((v177 < 0) ^ _VF | (v177 == 0)));
        }
      }
      else
      {
        if ((_DWORD)result)
        v70 = *a2;
        if (v70 >= 4)
        v71 = a2[6] - a4;
        if (v71 >= 1)
        {
          v72 = 0;
          v73 = a2[8] << dword_235829520[v70];
          v74 = v73 + 8;
          v75 = v73 + 12;
          do
          {
            if (v74 >= 1)
            {
              v76 = v75;
              v77 = v72;
              result = (int8x16x3_t *)a11;
              v78 = a10;
              do
              {
                _X2 = a8 + v77;
                __asm { PRFM            #1, [X2,#0x40] }
                _X3 = a9 + v77;
                __asm { PRFM            #1, [X3,#0x40] }
                v83 = (*(unsigned __int8 *)(a8 + v77 + 4) >> 4) & 3 | (4 * *(unsigned __int8 *)(a8 + v77 + 2));
                v84 = *(unsigned __int8 *)(a8 + v77 + 9);
                v85 = v84 & 3 | (4 * *(unsigned __int8 *)(a8 + v77 + 5));
                v86 = (v84 >> 4) & 3 | (4 * *(unsigned __int8 *)(a8 + v77 + 7));
                LOWORD(_X2) = *(_BYTE *)(a8 + v77 + 14) & 3 | (4 * *(unsigned __int8 *)(a8 + v77 + 10));
                v87 = *(unsigned __int8 *)(a9 + v77 + 9);
                v88 = v87 & 3 | (4 * *(unsigned __int8 *)(a9 + v77 + 5));
                v89 = *(unsigned __int8 *)(a9 + v77 + 7);
                v90 = *(_BYTE *)(a9 + v77 + 14) & 3 | (4 * *(unsigned __int8 *)(a9 + v77 + 10));
                v78->val[0].i16[0] = ((*(_BYTE *)(a8 + v77 + 4) >> 4) & 3 | (4 * *(unsigned __int8 *)(a8 + v77 + 2)))
                                   + 4 * *(unsigned __int8 *)(a9 + v77 + 2)
                                   + ((*(_BYTE *)(a9 + v77 + 4) >> 4) & 3);
                v78->val[0].i16[1] = v85 + v88;
                v78->val[0].i16[2] = ((v87 >> 4) & 3) + v86 + 4 * v89;
                v78->val[0].i16[3] = _X2 + v90;
                v94 = v83 == 1023 || v88 == 1023 || v86 == 1023 || v90 == 1023;
                result->val[0].i8[0] = v94;
                result = (int8x16x3_t *)((char *)result + 1);
                v77 += 10;
                v76 -= 4;
                v78 = (int8x16x3_t *)((char *)v78 + 8);
              }
              while (v76 > 4);
            }
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v72 += a5;
            _VF = __OFSUB__(v71, 2);
            v71 -= 2;
          }
          while (!((v71 < 0) ^ _VF | (v71 == 0)));
        }
      }
      break;
    case 3:
      if ((_DWORD)result == 1)
      {
        v204 = *a2;
        if (v204 >= 4)
        v205 = a2[6] - a4;
        if (v205 >= 1)
        {
          v206 = ((a2[8] << dword_235829520[v204]) + 63) & 0xFFFFFFE0;
          v207 = 0uLL;
          v208.i64[0] = 0x303030303030303;
          v208.i64[1] = 0x303030303030303;
          v209.i64[0] = 0xFC00FC00FC00FC00;
          v209.i64[1] = 0xFC00FC00FC00FC00;
          v210 = 0uLL;
          v211 = 0uLL;
          v212 = 0uLL;
          v213 = 0;
          do
          {
            if (v206 < 1)
            {
              v231 = v213;
              v225 = v212;
              v226 = (int8x16_t)v211;
              v227 = (int8x16_t)v210;
              v224 = v207;
            }
            else
            {
              v214 = 0;
              v215 = v206 + 32;
              v216 = (int16x8_t *)a10;
              v217 = a11;
              do
              {
                v235 = *(int8x16x3_t *)(a8 + v214);
                v239 = *(int8x16x3_t *)(v13 + v214);
                v243 = *(int8x16x3_t *)(a8 + v214 + 40);
                result = (int8x16x3_t *)(v13 + v214 + 40);
                v218 = (int32x4_t)vqtbl3q_s8(v235, (int8x16_t)xmmword_235829410);
                v235.val[0] = vqtbl3q_s8(v235, (int8x16_t)xmmword_235829420);
                v235.val[1] = vqtbl3q_s8(v243, (int8x16_t)xmmword_235829420);
                v235.val[2] = vqtbl3q_s8(v239, (int8x16_t)xmmword_235829410);
                v239.val[0] = vqtbl3q_s8(v239, (int8x16_t)xmmword_235829420);
                v239.val[1] = vqtbl3q_s8(v243, (int8x16_t)xmmword_235829410);
                v239.val[2] = vqtbl3q_s8(*result, (int8x16_t)xmmword_235829410);
                v243.val[1] = (int8x16_t)vzip1q_s32(v218, (int32x4_t)v239.val[1]);
                v239.val[1] = (int8x16_t)vzip2q_s32(v218, (int32x4_t)v239.val[1]);
                v243.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v235.val[2], (int32x4_t)v239.val[2]);
                v239.val[2] = (int8x16_t)vzip2q_s32((int32x4_t)v235.val[2], (int32x4_t)v239.val[2]);
                v235.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v235.val[0], (uint8x16_t)xmmword_235829430), v208);
                v235.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v235.val[1], (uint8x16_t)xmmword_235829430), v208);
                v235.val[2] = (int8x16_t)vzip1q_s32((int32x4_t)v235.val[0], (int32x4_t)v235.val[1]);
                v235.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v235.val[0], (int32x4_t)v235.val[1]);
                v235.val[1] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v239.val[0], (uint8x16_t)xmmword_235829430), v208);
                v239.val[0] = vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)vqtbl3q_s8(*result, (int8x16_t)xmmword_235829420), (uint8x16_t)xmmword_235829430), v208);
                v243.val[0] = (int8x16_t)vzip1q_s32((int32x4_t)v235.val[1], (int32x4_t)v239.val[0]);
                v239.val[0] = (int8x16_t)vzip2q_s32((int32x4_t)v235.val[1], (int32x4_t)v239.val[0]);
                v219 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v235.val[2].i8);
                v220 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v243.val[1].i8, 2uLL), v219);
                v221 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v235.val[0].i8);
                v222 = (uint16x8_t)vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v239.val[1].i8, 2uLL), v221);
                v235.val[1] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v243.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v235.val[2], v235.val[2], 8uLL)));
                v223 = (int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v243.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v243.val[0], v243.val[0], 8uLL)));
                v243.val[1] = (int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v243.val[2].i8, *(uint8x8_t *)v243.val[1].i8), 2uLL);
                v243.val[2] = vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v239.val[2], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v239.val[0], v239.val[0], 8uLL)));
                v243.val[0] = (int8x16_t)vaddw_u8((uint16x8_t)vorrq_s8(v243.val[1], v219), *(uint8x8_t *)v243.val[0].i8);
                v235.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v235.val[1], v223);
                v224 = vaddq_s16((int16x8_t)vorrq_s8((int8x16_t)vshll_high_n_u8((uint8x16_t)v239.val[1], 2uLL), (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v235.val[0], v235.val[0], 8uLL))), (int16x8_t)v243.val[2]);
                v225 = (int8x16_t)vsubq_s16((int16x8_t)v235.val[1], (int16x8_t)v243.val[0]);
                v226 = (int8x16_t)vaddq_s16((int16x8_t)v235.val[1], (int16x8_t)v243.val[0]);
                v227 = (int8x16_t)vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vorrq_s8((int8x16_t)vshlq_n_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v239.val[2].i8, *(uint8x8_t *)v239.val[1].i8), 2uLL), v221), *(uint8x8_t *)v239.val[0].i8), v224);
                v239.val[1] = vextq_s8((int8x16_t)v210, v227, 2uLL);
                v228 = (int16x8_t)vextq_s8(v212, v225, 2uLL);
                v229 = vaddq_s16(vsubq_s16((int16x8_t)v239.val[1], vaddq_s16((int16x8_t)vextq_s8((int8x16_t)v207, (int8x16_t)v224, 2uLL), v207)), v228);
                v230 = vsubq_s16((int16x8_t)v239.val[1], v210);
                v231 = vmovn_s16((int16x8_t)vcgtq_u16(v209, vmaxq_u16(vmaxq_u16(vmaxq_u16(v222, v220), (uint16x8_t)v223), (uint16x8_t)v243.val[2])));
                *v216 = v228;
                v216[1] = v229;
                v216[2] = v230;
                v216[3] = vsubq_s16((int16x8_t)vextq_s8((int8x16_t)v211, v226, 4uLL), v211);
                v216 += 4;
                *v217++ = vand_s8(vext_s8(v213, v231, 1uLL), v213);
                v214 += 80;
                v215 -= 32;
                v207 = v224;
                v210 = (int16x8_t)v227;
                v211 = (int16x8_t)v226;
                v212 = v225;
                v213 = v231;
              }
              while (v215 > 0x20);
            }
            a8 += a5;
            v13 += a5;
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v207 = v224;
            v210 = (int16x8_t)v227;
            v211 = (int16x8_t)v226;
            v212 = v225;
            v213 = v231;
            _VF = __OFSUB__(v205, 2);
            v205 -= 2;
          }
          while (!((v205 < 0) ^ _VF | (v205 == 0)));
        }
      }
      else
      {
        if ((_DWORD)result)
        v95 = *a2;
        if (v95 >= 4)
        v96 = a2[6] - a4;
        if (v96 >= 1)
        {
          v97 = 0;
          v98 = a2[8] << dword_235829520[v95];
          v99 = v98 + 8;
          v100 = v98 + 12;
          do
          {
            if (v99 >= 1)
            {
              v101 = v100;
              v102 = v97;
              result = (int8x16x3_t *)a11;
              v103 = a10;
              do
              {
                _X2 = a8 + v102;
                __asm { PRFM            #1, [X2,#0x40] }
                _X3 = a9 + v102;
                __asm { PRFM            #1, [X3,#0x40] }
                v108 = (*(unsigned __int8 *)(a8 + v102 + 4) >> 6) | (4 * *(unsigned __int8 *)(a8 + v102 + 3));
                v109 = *(unsigned __int8 *)(a8 + v102 + 9);
                v110 = (4 * *(unsigned __int8 *)(a8 + v102 + 6)) | (v109 >> 2) & 3;
                v111 = (v109 >> 6) | (4 * *(unsigned __int8 *)(a8 + v102 + 8));
                LODWORD(_X2) = (*(unsigned __int8 *)(a8 + v102 + 14) >> 2) & 3 | (4
                                                                                * *(unsigned __int8 *)(a8 + v102 + 11));
                v112 = *(unsigned __int8 *)(a9 + v102 + 9);
                v113 = (4 * *(unsigned __int8 *)(a9 + v102 + 6)) | (v112 >> 2) & 3;
                v114 = *(unsigned __int8 *)(a9 + v102 + 8);
                v115 = (*(unsigned __int8 *)(a9 + v102 + 14) >> 2) & 3 | (4 * *(unsigned __int8 *)(a9 + v102 + 11));
                v103->val[0].i16[0] = ((*(unsigned __int8 *)(a8 + v102 + 4) >> 6) | (4
                                                                                   * *(unsigned __int8 *)(a8 + v102 + 3)))
                                    + 4 * *(unsigned __int8 *)(a9 + v102 + 3)
                                    + (*(unsigned __int8 *)(a9 + v102 + 4) >> 6);
                v103->val[0].i16[1] = v110 + v113;
                v103->val[0].i16[2] = v111 + (v112 >> 6) + 4 * v114;
                v103->val[0].i16[3] = _X2 + v115;
                v119 = v108 == 1023 || v113 == 1023 || v111 == 1023 || v115 == 1023;
                result->val[0].i8[0] = v119;
                result = (int8x16x3_t *)((char *)result + 1);
                v102 += 10;
                v101 -= 4;
                v103 = (int8x16x3_t *)((char *)v103 + 8);
              }
              while (v101 > 4);
            }
            a10 = (int8x16x3_t *)((char *)a10 + 2 * a6);
            a11 = (int8x8_t *)((char *)a11 + a7);
            v97 += a5;
            _VF = __OFSUB__(v96, 2);
            v96 -= 2;
          }
          while (!((v96 < 0) ^ _VF | (v96 == 0)));
        }
      }
      break;
    default:
  }
  return result;
}

_DWORD *PDAF::PixelEngine::`anonymous namespace'::ExtractFocus2x1Raw14Scalar(_DWORD *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _WORD *a7, _WORD *a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;

  v8 = result[6] - a2;
  if (v8 >= 1)
  {
    v10 = result[7];
    v9 = result[8];
    v11 = v10 - a2;
    v12 = a6 - 32;
    do
    {
      if (v9 >= 1)
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = result[9];
        v17 = v9 + 2;
        v18 = a8;
        v19 = a7;
        v20 = v12;
        do
        {
          if (!v15)
          {
            v21 = *(unsigned __int16 *)(v20 + 32);
            v20 += 32;
            v14 = v21;
            v13 = *(unsigned __int16 *)(v20 + 16);
            v15 = v16;
          }
          LOWORD(v22) = 0;
          if ((unsigned __int16)(*v19 - 1040) > 0x3BD0u)
          {
            LOWORD(v25) = 0;
          }
          else
          {
            v23 = (unsigned __int16)v19[1];
            v24 = v23 < 0x410 || v23 > 0x3FE0;
            LOWORD(v25) = 0;
            if (!v24)
            {
              v22 = ((unsigned __int16)(v14 >> 1) * (unsigned __int16)(*v19 - 1024)) >> 15;
              v25 = ((unsigned __int16)(v13 >> 1) * (unsigned __int16)(v23 - 1024)) >> 15;
            }
          }
          *v18 = v22;
          v18[1] = v25;
          v15 -= 2;
          v17 -= 2;
          v19 += 8;
          v18 += 2;
        }
        while (v17 > 2);
        v10 = result[7];
      }
      a7 += a4;
      a8 += a5;
      v26 = v11 < 3;
      if (v11 >= 3)
        v27 = 0;
      else
        v27 = v10;
      v28 = v11 + v27;
      if (v26)
        v29 = a3;
      else
        v29 = 0;
      v11 = v28 - 2;
      v12 += 16 * v29;
      v30 = __OFSUB__(v8, 2);
      v8 -= 2;
    }
    while (!((v8 < 0) ^ v30 | (v8 == 0)));
  }
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::ExtractFocus2x1Raw14Neon64(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _WORD *a7, __n128 *a8, double a9, double a10, double a11, double a12, double a13, int16x8_t a14)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int8x16_t *v22;
  _WORD *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint16x8_t v27;
  int16x8_t v28;
  BOOL v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _WORD *v39;
  _WORD *v40;
  __n128 *v41;
  int8x16_t *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  char v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  int v54;
  uint64_t v55;

  if ((*(_BYTE *)(result + 36) & 1) != 0)
  v18 = *(_DWORD *)(result + 24) - a2;
  if (v18 >= 1)
  {
    v19 = *(_DWORD *)(result + 28);
    v20 = (*(_DWORD *)(result + 32) + 7) & 0xFFFFFFF8;
    v21 = -a2;
    v22 = (int8x16_t *)((char *)a8 + 2 * a5);
    v23 = &a7[a4];
    v24 = a6 - 16 * a3 - 32;
    v25 = 0uLL;
    v26 = vdupq_n_s16(0xFBF0u);
    v27 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
    v28.i64[0] = 0xFC00FC00FC00FC00;
    v28.i64[1] = 0xFC00FC00FC00FC00;
    while (1)
    {
      v29 = v21 < 1;
      v30 = v21 >= 1 ? 0 : v19;
      v31 = v30 + v21;
      v32 = v29 ? a3 : 0;
      v33 = v24 + 16 * v32;
      v34 = v18 > 2 && v31 > 2 ? 4 : 2;
      if (v20)
        break;
LABEL_28:
      v50 = v18 > 2 && v31 > 2;
      a7 += a4 << v50;
      v23 += a4 << v50;
      v51 = a5 << v50;
      v18 -= v34;
      v52 = v31 - v34;
      a8 = (__n128 *)((char *)a8 + 2 * v51);
      v53 = v52 < 1;
      if (v52 >= 1)
        v54 = 0;
      else
        v54 = v19;
      v22 = (int8x16_t *)((char *)v22 + 2 * v51);
      v21 = v54 + v52;
      if (v53)
        v55 = a3;
      else
        v55 = 0;
      v24 = v33 + 16 * v55;
      if (v18 <= 0)
        return result;
    }
    v35 = 0;
    v36 = v33 + 16;
    v37 = -v20;
    v38 = v33;
    v39 = a7;
    v40 = v23;
    v41 = a8;
    v42 = v22;
    while (1)
    {
      if (v35 <= 0)
      {
        v35 += *(_DWORD *)(result + 36);
        v44 = *(unsigned __int16 *)(v38 + 32);
        v38 += 32;
        v43 = v44;
        v45 = *(unsigned __int16 *)(v36 + 32);
        v36 += 32;
        *(int16x4_t *)v25.i8 = vdup_n_s16(v43 >> 1);
        *(int16x4_t *)a14.i8 = vdup_n_s16(v45 >> 1);
        v25 = vzip1q_s16(v25, a14);
      }
      if (v35 > 7)
        goto LABEL_24;
      if (v35 == 6)
        goto LABEL_23;
      if (v35 == 4)
        goto LABEL_22;
      if (v35 == 2)
        break;
LABEL_24:
      if (v18 > 2 && v31 > 2)
      {
        LOWORD(v14) = *v40;
        WORD2(v14) = v40[1];
        LOWORD(v15) = v40[8];
        WORD2(v15) = v40[9];
        LOWORD(v16) = v40[16];
        WORD2(v16) = v40[17];
        LOWORD(v17) = v40[24];
        WORD2(v17) = v40[25];
        v46 = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)&v14, (int8x16_t)xmmword_2358294B0);
        v47 = (int16x8_t)vcgtq_u16(v27, (uint16x8_t)vaddq_s16(v46, v26));
        *v42++ = vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v47, v47), (int8x16_t)vqdmulhq_s16(vaddq_s16(v46, v28), v25)), (int8x16_t)vtrn1q_s16(v47, v47));
        v40 += 32;
      }
      LOWORD(v14) = *v39;
      WORD2(v14) = v39[1];
      LOWORD(v15) = v39[8];
      WORD2(v15) = v39[9];
      LOWORD(v16) = v39[16];
      WORD2(v16) = v39[17];
      LOWORD(v17) = v39[24];
      WORD2(v17) = v39[25];
      v48 = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)&v14, (int8x16_t)xmmword_2358294B0);
      v49 = (int16x8_t)vcgtq_u16(v27, (uint16x8_t)vaddq_s16(v48, v26));
      a14 = (int16x8_t)vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v49, v49), (int8x16_t)vqdmulhq_s16(vaddq_s16(v48, v28), v25)), (int8x16_t)vtrn1q_s16(v49, v49));
      *v41++ = (__n128)a14;
      v35 -= 8;
      v39 += 32;
      v37 += 8;
      if (!v37)
      {
        v19 = *(_DWORD *)(result + 28);
        goto LABEL_28;
      }
    }
    v25.i16[2] = *(_WORD *)(v38 + 32) >> 1;
    v25.i16[3] = *(_WORD *)(v36 + 32) >> 1;
LABEL_22:
    v25.i16[4] = *(_WORD *)(v38 + 32) >> 1;
    v25.i16[5] = *(_WORD *)(v36 + 32) >> 1;
LABEL_23:
    v25.i16[6] = *(_WORD *)(v38 + 32) >> 1;
    v25.i16[7] = *(_WORD *)(v36 + 32) >> 1;
    goto LABEL_24;
  }
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::ExtractFocus2x1Pack10(uint64_t result, _DWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, int16x8_t a15, __n128 a16, unsigned __int8 *a17, __n128 *a18)
{
  int16x8_t v18;
  uint64_t v19;
  int16x4_t v20;
  int8x16_t v21;
  int8x8_t v22;
  __n128 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  __n128 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  __n128 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  unsigned int v68;
  BOOL v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned __int8 *v82;
  int v83;
  __n128 *v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  BOOL v91;
  unsigned int v92;
  BOOL v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  __n128 *v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  BOOL v114;
  unsigned int v115;
  BOOL v116;
  int v117;
  int v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int8x16_t *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  int16x8_t v126;
  int16x8_t v127;
  uint16x8_t v128;
  int16x8_t v129;
  BOOL v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  int v139;
  uint64_t v140;
  unsigned __int8 *v141;
  __n128 *v142;
  int8x16_t *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int16x8_t v147;
  int16x8_t v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int8x16_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  int8x16_t *v167;
  unsigned __int8 *v168;
  uint64_t v169;
  int16x8_t v170;
  uint16x8_t v171;
  int16x8_t v172;
  uint16x8_t v173;
  int16x8_t v174;
  BOOL v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  unsigned __int8 *v183;
  int v184;
  uint64_t v185;
  unsigned __int8 *v186;
  __n128 *v187;
  int8x16_t *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int16x8_t v192;
  int16x8_t v193;
  __int16 v194;
  __int16 v195;
  __int16 v196;
  __int16 v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int8x16_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  int8x16_t *v212;
  unsigned __int8 *v213;
  uint64_t v214;
  int16x8_t v215;
  uint16x8_t v216;
  int16x8_t v217;
  uint16x8_t v218;
  int16x8_t v219;
  BOOL v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  int v229;
  uint64_t v230;
  unsigned __int8 *v231;
  __n128 *v232;
  int8x16_t *v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  int16x8_t v237;
  int16x8_t v238;
  __int16 v239;
  __int16 v240;
  __int16 v241;
  __int16 v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int8x16_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  int v255;
  int8x16_t *v256;
  unsigned __int8 *v257;
  uint64_t v258;
  int16x8_t v259;
  int16x8_t v260;
  uint16x8_t v261;
  int16x8_t v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  __int8 *v270;
  unsigned int v271;
  uint64_t v272;
  unsigned __int8 *v273;
  __n128 *v274;
  int8x16_t *v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  int16x8_t v279;
  int8x16_t v280;
  int8x8_t v281;
  uint64_t v282;
  __int16 v283;
  __int16 v284;
  __int16 v285;
  __int16 v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int8x8_t v290;
  int16x8_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;

  v24 = a17;
  v23 = a18;
  v299 = a5;
  switch((int)a3)
  {
    case 0:
      if ((_DWORD)result != 1)
      {
        if ((_DWORD)result)
        v25 = a2[6] - a4;
        if (v25 >= 1)
        {
          result = a2[7];
          v26 = a2[8];
          v27 = result - a4;
          v28 = a8 - 32;
          do
          {
            if (v26 >= 1)
            {
              v29 = 0;
              v30 = 0;
              v31 = 0;
              v32 = a2[9];
              v33 = v26 + 2;
              v34 = v23;
              v35 = v24;
              v36 = v28;
              do
              {
                if (!v31)
                {
                  v37 = *(unsigned __int16 *)(v36 + 32);
                  v36 += 32;
                  v30 = v37;
                  v29 = *(unsigned __int16 *)(v36 + 16);
                  v31 = v32;
                }
                LOWORD(v38) = 0;
                v39 = v35[4];
                v40 = (*v35 << 6) | (16 * (v39 & 3));
                if ((v40 - 1040) > 0x3BD0)
                {
                  LOWORD(v43) = 0;
                }
                else
                {
                  v41 = (4 * v39) & 0x30 | (v35[1] << 6);
                  v42 = v41 < 0x410 || v41 > 0x3FE0;
                  LOWORD(v43) = 0;
                  if (!v42)
                  {
                    v38 = ((((_WORD)v40 - 1024) & 0xFFF0) * (unsigned __int16)(v30 >> 1)) >> 15;
                    v43 = ((((_WORD)v41 - 1024) & 0xFFF0) * (unsigned __int16)(v29 >> 1)) >> 15;
                  }
                }
                v34->n128_u16[0] = v38;
                v34->n128_u16[1] = v43;
                v35 += 10;
                v31 -= 2;
                v33 -= 2;
                v34 = (__n128 *)((char *)v34 + 4);
              }
              while (v33 > 2);
              result = a2[7];
              a5 = v299;
            }
            v24 += a6;
            v23 = (__n128 *)((char *)v23 + 2 * a7);
            v44 = v27 < 3;
            if (v27 >= 3)
              v45 = 0;
            else
              v45 = result;
            v46 = v27 + v45;
            if (v44)
              v47 = a5;
            else
              v47 = 0;
            v27 = v46 - 2;
            v28 += 16 * v47;
            v48 = __OFSUB__(v25, 2);
            v25 -= 2;
          }
          while (!((v25 < 0) ^ v48 | (v25 == 0)));
        }
        return result;
      }
      if ((a2[9] & 1) != 0)
      v120 = a2[6] - a4;
      if ((int)v120 < 1)
        return result;
      v121 = a2[7];
      v122 = (a2[8] + 7) & 0xFFFFFFF8;
      LODWORD(result) = -a4;
      v123 = (int8x16_t *)((char *)a18 + 2 * a7);
      v124 = &a17[a6];
      v125 = a8 - 16 * a5 - 32;
      v126 = 0uLL;
      v127 = vdupq_n_s16(0xFBF0u);
      v128 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
      v129.i64[0] = 0xFC00FC00FC00FC00;
      v129.i64[1] = 0xFC00FC00FC00FC00;
LABEL_109:
      v130 = (int)result < 1;
      if ((int)result >= 1)
        v131 = 0;
      else
        v131 = v121;
      v132 = v131 + result;
      if (v130)
        v133 = a5;
      else
        v133 = 0;
      v134 = v125 + 16 * v133;
      if (v120 > 2 && v132 > 2)
        v135 = 4;
      else
        v135 = 2;
      if (!v122)
        goto LABEL_135;
      v136 = 0;
      v137 = v134 + 16;
      v138 = v24 + 20;
      v139 = -v122;
      v140 = v134;
      v141 = v124;
      v142 = v23;
      v143 = v123;
      while (1)
      {
        if (v136 <= 0)
        {
          v136 += a2[9];
          v145 = *(unsigned __int16 *)(v140 + 32);
          v140 += 32;
          v144 = v145;
          v146 = *(unsigned __int16 *)(v137 + 32);
          v137 += 32;
          *(int16x4_t *)v126.i8 = vdup_n_s16(v144 >> 1);
          *(int16x4_t *)a15.i8 = vdup_n_s16(v146 >> 1);
          v126 = vzip1q_s16(v126, a15);
        }
        if (v136 > 7)
          goto LABEL_129;
        if (v136 == 6)
          goto LABEL_128;
        if (v136 == 4)
          goto LABEL_127;
        if (v136 == 2)
          break;
LABEL_129:
        v147 = 0uLL;
        v148 = 0uLL;
        if (v120 > 2 && v132 > 2)
        {
          a16.n128_u8[0] = v141[20];
          a16.n128_u8[4] = v141[21];
          v148.i16[0] = v141[4];
          v148.i16[1] = v141[14];
          v148.i16[2] = v141[24];
          v148.i16[3] = v141[34];
          v147.i8[0] = v141[30];
          v147.i8[4] = v141[31];
          v148 = vzip1q_s16(v148, v148);
          a16.n128_u64[0] = *(_QWORD *)&vuzp1_s16((int16x4_t)a16.n128_u64[0], *(int16x4_t *)v147.i8) & 0xFF00FF00FF00FFLL;
          v147.i16[0] = *v141;
          v147.i16[1] = v141[1];
          v147.i16[2] = v141[10];
          v147.i16[3] = v141[11];
          v147.i64[1] = a16.n128_u64[0];
        }
        v149 = *(v138 - 20);
        v150 = *(v138 - 19);
        v151 = *(v138 - 10);
        v152 = *(v138 - 9);
        a16.n128_u8[0] = *v138;
        a16.n128_u8[4] = v138[1];
        a15.i8[0] = *(v138 - 16);
        a15.i8[2] = *(v138 - 6);
        a15.i8[4] = v138[4];
        a15.i8[6] = v138[14];
        v20.i8[0] = v138[10];
        v20.i8[4] = v138[11];
        if (v120 > 2 && v132 > 2)
        {
          v153 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8((int8x16_t)v148, (int8x16_t)xmmword_235829500), (uint16x8_t)xmmword_235829510), (int8x16_t)vshlq_n_s16(v147, 6uLL));
          v154 = (int16x8_t)vcgtq_u16(v128, (uint16x8_t)vaddq_s16(v153, v127));
          *v143++ = vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v154, v154), (int8x16_t)vqdmulhq_s16(vaddq_s16(v153, v129), v126)), (int8x16_t)vtrn1q_s16(v154, v154));
          v141 += 40;
        }
        a15.i32[0] &= 0xFF00FFu;
        a15.i16[2] = a15.u8[4];
        a15.i16[3] = a15.u8[6];
        v155.i16[0] = v149;
        v155.i16[1] = v150;
        v155.i16[2] = v151;
        v155.i16[3] = v152;
        v155.i64[1] = *(_QWORD *)&vuzp1_s16((int16x4_t)a16.n128_u64[0], v20) & 0xFF00FF00FF00FFLL;
        v156 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8((int8x16_t)vzip1q_s16(a15, a15), (int8x16_t)xmmword_235829500), (uint16x8_t)xmmword_235829510), (int8x16_t)vshlq_n_s16(v155, 6uLL));
        v157 = (int16x8_t)vcgtq_u16(v128, (uint16x8_t)vaddq_s16(v156, v127));
        v158 = (int8x16_t)vtrn1q_s16(v157, v157);
        a16 = (__n128)vtrn2q_s16(v157, v157);
        a15 = (int16x8_t)vandq_s8(vandq_s8((int8x16_t)a16, (int8x16_t)vqdmulhq_s16(vaddq_s16(v156, v129), v126)), v158);
        *v142++ = (__n128)a15;
        v136 -= 8;
        v138 += 40;
        v139 += 8;
        if (!v139)
        {
          v121 = a2[7];
          a5 = v299;
LABEL_135:
          v159 = a6 << ((v120 > 2) & (v132 > 2));
          v24 += v159;
          v124 += v159;
          v160 = a7 << ((v120 > 2) & (v132 > 2));
          v23 = (__n128 *)((char *)v23 + 2 * v160);
          v123 = (int8x16_t *)((char *)v123 + 2 * v160);
          v120 -= v135;
          v161 = v132 - v135;
          if (v132 - v135 >= 1)
            v162 = 0;
          else
            v162 = v121;
          result = (v162 + v161);
          if (v161 >= 1)
            v163 = 0;
          else
            v163 = a5;
          v125 = v134 + 16 * v163;
          if ((int)v120 <= 0)
            return result;
          goto LABEL_109;
        }
      }
      v126.i16[2] = *(_WORD *)(v140 + 32) >> 1;
      v126.i16[3] = *(_WORD *)(v137 + 32) >> 1;
LABEL_127:
      v126.i16[4] = *(_WORD *)(v140 + 32) >> 1;
      v126.i16[5] = *(_WORD *)(v137 + 32) >> 1;
LABEL_128:
      v126.i16[6] = *(_WORD *)(v140 + 32) >> 1;
      v126.i16[7] = *(_WORD *)(v137 + 32) >> 1;
      goto LABEL_129;
    case 1:
      if ((_DWORD)result != 1)
      {
        if ((_DWORD)result)
        v49 = a2[6] - a4;
        if (v49 >= 1)
        {
          result = a2[7];
          v50 = a2[8];
          v51 = result - a4;
          v52 = a8 - 32;
          v53 = a17 + 2;
          do
          {
            if (v50 >= 1)
            {
              v54 = 0;
              v55 = 0;
              v56 = 0;
              v57 = a2[9];
              v58 = v53;
              v59 = v50 + 2;
              v60 = v23;
              v61 = v52;
              do
              {
                if (!v56)
                {
                  v62 = *(unsigned __int16 *)(v61 + 32);
                  v61 += 32;
                  v55 = v62;
                  v54 = *(unsigned __int16 *)(v61 + 16);
                  v56 = v57;
                }
                LOWORD(v63) = 0;
                v64 = v58[2];
                v65 = (4 * v64) & 0x30 | (*(v58 - 1) << 6);
                if ((v65 - 1040) > 0x3BD0)
                {
                  LOWORD(v68) = 0;
                }
                else
                {
                  v66 = v64 & 0x30 | (*v58 << 6);
                  v67 = v66 < 0x410 || v66 > 0x3FE0;
                  LOWORD(v68) = 0;
                  if (!v67)
                  {
                    v63 = ((((_WORD)v65 - 1024) & 0xFFF0) * (unsigned __int16)(v55 >> 1)) >> 15;
                    v68 = ((((_WORD)v66 - 1024) & 0xFFF0) * (unsigned __int16)(v54 >> 1)) >> 15;
                  }
                }
                v60->n128_u16[0] = v63;
                v60->n128_u16[1] = v68;
                v56 -= 2;
                v59 -= 2;
                v58 += 10;
                v60 = (__n128 *)((char *)v60 + 4);
              }
              while (v59 > 2);
              result = a2[7];
              a5 = v299;
            }
            v23 = (__n128 *)((char *)v23 + 2 * a7);
            v69 = v51 < 3;
            if (v51 >= 3)
              v70 = 0;
            else
              v70 = result;
            v71 = v51 + v70;
            if (v69)
              v72 = a5;
            else
              v72 = 0;
            v51 = v71 - 2;
            v52 += 16 * v72;
            v53 += a6;
            v48 = __OFSUB__(v49, 2);
            v49 -= 2;
          }
          while (!((v49 < 0) ^ v48 | (v49 == 0)));
        }
        return result;
      }
      if ((a2[9] & 1) != 0)
      v164 = a2[6] - a4;
      if ((int)v164 < 1)
        return result;
      v165 = a2[7];
      v166 = (a2[8] + 7) & 0xFFFFFFF8;
      LODWORD(result) = -a4;
      v167 = (int8x16_t *)((char *)a18 + 2 * a7);
      v168 = &a17[a6];
      v169 = a8 - 16 * a5 - 32;
      v170 = 0uLL;
      v171.i64[0] = 0x200000002;
      v171.i64[1] = 0x200000002;
      v172 = vdupq_n_s16(0xFBF0u);
      v173 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
      v174.i64[0] = 0xFC00FC00FC00FC00;
      v174.i64[1] = 0xFC00FC00FC00FC00;
LABEL_146:
      v175 = (int)result < 1;
      if ((int)result >= 1)
        v176 = 0;
      else
        v176 = v165;
      v177 = v176 + result;
      if (v175)
        v178 = a5;
      else
        v178 = 0;
      v179 = v169 + 16 * v178;
      if (v164 > 2 && v177 > 2)
        v180 = 4;
      else
        v180 = 2;
      if (!v166)
        goto LABEL_172;
      v181 = 0;
      v182 = v179 + 16;
      v183 = v24 + 21;
      v184 = -v166;
      v185 = v179;
      v186 = v168;
      v187 = v23;
      v188 = v167;
      while (1)
      {
        if (v181 <= 0)
        {
          v181 += a2[9];
          v190 = *(unsigned __int16 *)(v185 + 32);
          v185 += 32;
          v189 = v190;
          v191 = *(unsigned __int16 *)(v182 + 32);
          v182 += 32;
          *(int16x4_t *)v170.i8 = vdup_n_s16(v189 >> 1);
          *(int16x4_t *)a15.i8 = vdup_n_s16(v191 >> 1);
          v170 = vzip1q_s16(v170, a15);
        }
        if (v181 > 7)
          goto LABEL_166;
        if (v181 == 6)
          goto LABEL_165;
        if (v181 == 4)
          goto LABEL_164;
        if (v181 == 2)
          break;
LABEL_166:
        v192 = 0uLL;
        v193 = 0uLL;
        if (v164 > 2 && v177 > 2)
        {
          a16.n128_u8[0] = v186[21];
          a16.n128_u8[4] = v186[22];
          v193.i16[0] = v186[4];
          v193.i16[1] = v186[14];
          v193.i16[2] = v186[24];
          v193.i16[3] = v186[34];
          v192.i8[0] = v186[31];
          v192.i8[4] = v186[32];
          v193 = vzip1q_s16(v193, v193);
          a16.n128_u64[0] = *(_QWORD *)&vuzp1_s16((int16x4_t)a16.n128_u64[0], *(int16x4_t *)v192.i8) & 0xFF00FF00FF00FFLL;
          v192.i16[0] = v186[1];
          v192.i16[1] = v186[2];
          v192.i16[2] = v186[11];
          v192.i16[3] = v186[12];
          v192.i64[1] = a16.n128_u64[0];
        }
        v194 = *(v183 - 20);
        v195 = *(v183 - 19);
        v196 = *(v183 - 10);
        v197 = *(v183 - 9);
        a16.n128_u8[0] = *v183;
        a16.n128_u8[4] = v183[1];
        a15.i8[0] = *(v183 - 17);
        a15.i8[2] = *(v183 - 7);
        a15.i8[4] = v183[3];
        a15.i8[6] = v183[13];
        v20.i8[0] = v183[10];
        v20.i8[4] = v183[11];
        if (v164 > 2 && v177 > 2)
        {
          v198 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8((int8x16_t)v193, (int8x16_t)xmmword_2358294F0), v171), (int8x16_t)vshlq_n_s16(v192, 6uLL));
          v199 = (int16x8_t)vcgtq_u16(v173, (uint16x8_t)vaddq_s16(v198, v172));
          *v188++ = vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v199, v199), (int8x16_t)vqdmulhq_s16(vaddq_s16(v198, v174), v170)), (int8x16_t)vtrn1q_s16(v199, v199));
          v186 += 40;
        }
        a15.i32[0] &= 0xFF00FFu;
        a15.i16[2] = a15.u8[4];
        a15.i16[3] = a15.u8[6];
        v200.i16[0] = v194;
        v200.i16[1] = v195;
        v200.i16[2] = v196;
        v200.i16[3] = v197;
        v200.i64[1] = *(_QWORD *)&vuzp1_s16((int16x4_t)a16.n128_u64[0], v20) & 0xFF00FF00FF00FFLL;
        v201 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8((int8x16_t)vzip1q_s16(a15, a15), (int8x16_t)xmmword_2358294F0), v171), (int8x16_t)vshlq_n_s16(v200, 6uLL));
        v202 = (int16x8_t)vcgtq_u16(v173, (uint16x8_t)vaddq_s16(v201, v172));
        v203 = (int8x16_t)vtrn1q_s16(v202, v202);
        a16 = (__n128)vtrn2q_s16(v202, v202);
        a15 = (int16x8_t)vandq_s8(vandq_s8((int8x16_t)a16, (int8x16_t)vqdmulhq_s16(vaddq_s16(v201, v174), v170)), v203);
        *v187++ = (__n128)a15;
        v181 -= 8;
        v183 += 40;
        v184 += 8;
        if (!v184)
        {
          v165 = a2[7];
          a5 = v299;
LABEL_172:
          v204 = a6 << ((v164 > 2) & (v177 > 2));
          v24 += v204;
          v168 += v204;
          v205 = a7 << ((v164 > 2) & (v177 > 2));
          v23 = (__n128 *)((char *)v23 + 2 * v205);
          v167 = (int8x16_t *)((char *)v167 + 2 * v205);
          v164 -= v180;
          v206 = v177 - v180;
          if (v177 - v180 >= 1)
            v207 = 0;
          else
            v207 = v165;
          result = (v207 + v206);
          if (v206 >= 1)
            v208 = 0;
          else
            v208 = a5;
          v169 = v179 + 16 * v208;
          if ((int)v164 <= 0)
            return result;
          goto LABEL_146;
        }
      }
      v170.i16[2] = *(_WORD *)(v185 + 32) >> 1;
      v170.i16[3] = *(_WORD *)(v182 + 32) >> 1;
LABEL_164:
      v170.i16[4] = *(_WORD *)(v185 + 32) >> 1;
      v170.i16[5] = *(_WORD *)(v182 + 32) >> 1;
LABEL_165:
      v170.i16[6] = *(_WORD *)(v185 + 32) >> 1;
      v170.i16[7] = *(_WORD *)(v182 + 32) >> 1;
      goto LABEL_166;
    case 2:
      if ((_DWORD)result != 1)
      {
        if ((_DWORD)result)
        v73 = a2[6] - a4;
        if (v73 >= 1)
        {
          result = a2[7];
          v74 = a2[8];
          v75 = result - a4;
          v76 = a8 - 32;
          v77 = a17 + 4;
          do
          {
            if (v74 >= 1)
            {
              v78 = 0;
              v79 = 0;
              v80 = 0;
              v81 = a2[9];
              v82 = v77;
              v83 = v74 + 2;
              v84 = v23;
              v85 = v76;
              do
              {
                if (!v80)
                {
                  v86 = *(unsigned __int16 *)(v85 + 32);
                  v85 += 32;
                  v79 = v86;
                  v78 = *(unsigned __int16 *)(v85 + 16);
                  v80 = v81;
                }
                LOWORD(v87) = 0;
                v88 = *v82;
                v89 = v88 & 0x30 | (*(v82 - 2) << 6);
                if ((v89 - 1040) > 0x3BD0)
                {
                  LOWORD(v92) = 0;
                }
                else
                {
                  v90 = (v88 >> 2) & 0x30 | (*(v82 - 1) << 6);
                  v91 = v90 < 0x410 || v90 > 0x3FE0;
                  LOWORD(v92) = 0;
                  if (!v91)
                  {
                    v87 = ((((_WORD)v89 - 1024) & 0xFFF0) * (unsigned __int16)(v79 >> 1)) >> 15;
                    v92 = ((((_WORD)v90 - 1024) & 0xFFF0) * (unsigned __int16)(v78 >> 1)) >> 15;
                  }
                }
                v84->n128_u16[0] = v87;
                v84->n128_u16[1] = v92;
                v80 -= 2;
                v83 -= 2;
                v82 += 10;
                v84 = (__n128 *)((char *)v84 + 4);
              }
              while (v83 > 2);
              result = a2[7];
              a5 = v299;
            }
            v23 = (__n128 *)((char *)v23 + 2 * a7);
            v93 = v75 < 3;
            if (v75 >= 3)
              v94 = 0;
            else
              v94 = result;
            v95 = v75 + v94;
            if (v93)
              v96 = a5;
            else
              v96 = 0;
            v75 = v95 - 2;
            v76 += 16 * v96;
            v77 += a6;
            v48 = __OFSUB__(v73, 2);
            v73 -= 2;
          }
          while (!((v73 < 0) ^ v48 | (v73 == 0)));
        }
        return result;
      }
      if ((a2[9] & 1) != 0)
      v209 = a2[6] - a4;
      if ((int)v209 < 1)
        return result;
      v210 = a2[7];
      v211 = (a2[8] + 7) & 0xFFFFFFF8;
      LODWORD(result) = -a4;
      v212 = (int8x16_t *)((char *)a18 + 2 * a7);
      v213 = &a17[a6];
      v214 = a8 - 16 * a5 - 32;
      v215 = 0uLL;
      v216.i64[0] = 0x100000001;
      v216.i64[1] = 0x100000001;
      v217 = vdupq_n_s16(0xFBF0u);
      v218 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
      v219.i64[0] = 0xFC00FC00FC00FC00;
      v219.i64[1] = 0xFC00FC00FC00FC00;
LABEL_183:
      v220 = (int)result < 1;
      if ((int)result >= 1)
        v221 = 0;
      else
        v221 = v210;
      v222 = v221 + result;
      if (v220)
        v223 = a5;
      else
        v223 = 0;
      v224 = v214 + 16 * v223;
      if (v209 > 2 && v222 > 2)
        v225 = 4;
      else
        v225 = 2;
      if (!v211)
        goto LABEL_209;
      v226 = 0;
      v227 = v224 + 16;
      v228 = v24 + 22;
      v229 = -v211;
      v230 = v224;
      v231 = v213;
      v232 = v23;
      v233 = v212;
      while (1)
      {
        if (v226 <= 0)
        {
          v226 += a2[9];
          v235 = *(unsigned __int16 *)(v230 + 32);
          v230 += 32;
          v234 = v235;
          v236 = *(unsigned __int16 *)(v227 + 32);
          v227 += 32;
          *(int16x4_t *)v215.i8 = vdup_n_s16(v234 >> 1);
          *(int16x4_t *)a15.i8 = vdup_n_s16(v236 >> 1);
          v215 = vzip1q_s16(v215, a15);
        }
        if (v226 > 7)
          goto LABEL_203;
        if (v226 == 6)
          goto LABEL_202;
        if (v226 == 4)
          goto LABEL_201;
        if (v226 == 2)
          break;
LABEL_203:
        v237 = 0uLL;
        v238 = 0uLL;
        if (v209 > 2 && v222 > 2)
        {
          a16.n128_u8[0] = v231[22];
          a16.n128_u8[4] = v231[23];
          v238.i16[0] = v231[4];
          v238.i16[1] = v231[14];
          v238.i16[2] = v231[24];
          v238.i16[3] = v231[34];
          v237.i8[0] = v231[32];
          v237.i8[4] = v231[33];
          v238 = vzip1q_s16(v238, v238);
          a16.n128_u64[0] = *(_QWORD *)&vuzp1_s16((int16x4_t)a16.n128_u64[0], *(int16x4_t *)v237.i8) & 0xFF00FF00FF00FFLL;
          v237.i16[0] = v231[2];
          v237.i16[1] = v231[3];
          v237.i16[2] = v231[12];
          v237.i16[3] = v231[13];
          v237.i64[1] = a16.n128_u64[0];
        }
        v239 = *(v228 - 20);
        v240 = *(v228 - 19);
        v241 = *(v228 - 10);
        v242 = *(v228 - 9);
        a16.n128_u8[0] = *v228;
        a16.n128_u8[4] = v228[1];
        a15.i8[0] = *(v228 - 18);
        a15.i8[2] = *(v228 - 8);
        a15.i8[4] = v228[2];
        a15.i8[6] = v228[12];
        v20.i8[0] = v228[10];
        v20.i8[4] = v228[11];
        if (v209 > 2 && v222 > 2)
        {
          v243 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8((int8x16_t)v238, (int8x16_t)xmmword_2358294E0), v216), (int8x16_t)vshlq_n_s16(v237, 6uLL));
          v244 = (int16x8_t)vcgtq_u16(v218, (uint16x8_t)vaddq_s16(v243, v217));
          *v233++ = vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v244, v244), (int8x16_t)vqdmulhq_s16(vaddq_s16(v243, v219), v215)), (int8x16_t)vtrn1q_s16(v244, v244));
          v231 += 40;
        }
        a15.i32[0] &= 0xFF00FFu;
        a15.i16[2] = a15.u8[4];
        a15.i16[3] = a15.u8[6];
        v245.i16[0] = v239;
        v245.i16[1] = v240;
        v245.i16[2] = v241;
        v245.i16[3] = v242;
        v245.i64[1] = *(_QWORD *)&vuzp1_s16((int16x4_t)a16.n128_u64[0], v20) & 0xFF00FF00FF00FFLL;
        v246 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8((int8x16_t)vzip1q_s16(a15, a15), (int8x16_t)xmmword_2358294E0), v216), (int8x16_t)vshlq_n_s16(v245, 6uLL));
        v247 = (int16x8_t)vcgtq_u16(v218, (uint16x8_t)vaddq_s16(v246, v217));
        v248 = (int8x16_t)vtrn1q_s16(v247, v247);
        a16 = (__n128)vtrn2q_s16(v247, v247);
        a15 = (int16x8_t)vandq_s8(vandq_s8((int8x16_t)a16, (int8x16_t)vqdmulhq_s16(vaddq_s16(v246, v219), v215)), v248);
        *v232++ = (__n128)a15;
        v226 -= 8;
        v228 += 40;
        v229 += 8;
        if (!v229)
        {
          v210 = a2[7];
          a5 = v299;
LABEL_209:
          v249 = a6 << ((v209 > 2) & (v222 > 2));
          v24 += v249;
          v213 += v249;
          v250 = a7 << ((v209 > 2) & (v222 > 2));
          v23 = (__n128 *)((char *)v23 + 2 * v250);
          v212 = (int8x16_t *)((char *)v212 + 2 * v250);
          v209 -= v225;
          v251 = v222 - v225;
          if (v222 - v225 >= 1)
            v252 = 0;
          else
            v252 = v210;
          result = (v252 + v251);
          if (v251 >= 1)
            v253 = 0;
          else
            v253 = a5;
          v214 = v224 + 16 * v253;
          if ((int)v209 <= 0)
            return result;
          goto LABEL_183;
        }
      }
      v215.i16[2] = *(_WORD *)(v230 + 32) >> 1;
      v215.i16[3] = *(_WORD *)(v227 + 32) >> 1;
LABEL_201:
      v215.i16[4] = *(_WORD *)(v230 + 32) >> 1;
      v215.i16[5] = *(_WORD *)(v227 + 32) >> 1;
LABEL_202:
      v215.i16[6] = *(_WORD *)(v230 + 32) >> 1;
      v215.i16[7] = *(_WORD *)(v227 + 32) >> 1;
      goto LABEL_203;
    case 3:
      if ((_DWORD)result != 1)
      {
        if ((_DWORD)result)
        v97 = a2[6] - a4;
        if (v97 >= 1)
        {
          result = a2[7];
          v98 = a2[8];
          v99 = result - a4;
          v100 = a8 - 32;
          v101 = a17 + 4;
          do
          {
            if (v98 >= 1)
            {
              v102 = 0;
              v103 = 0;
              v104 = 0;
              v105 = a2[9];
              v106 = v101;
              v107 = v98 + 2;
              v108 = v23;
              v109 = v100;
              do
              {
                if (!v104)
                {
                  v110 = *(unsigned __int16 *)(v109 + 32);
                  v109 += 32;
                  v103 = v110;
                  v102 = *(unsigned __int16 *)(v109 + 16);
                  v104 = v105;
                }
                LOWORD(v111) = 0;
                v112 = (*v106 >> 2) & 0x30 | (*(v106 - 1) << 6);
                if ((v112 - 1040) > 0x3BD0)
                {
                  LOWORD(v115) = 0;
                }
                else
                {
                  v113 = (16 * (v106[5] & 3)) | (v106[1] << 6);
                  v114 = v113 < 0x410 || v113 > 0x3FE0;
                  LOWORD(v115) = 0;
                  if (!v114)
                  {
                    v111 = ((((_WORD)v112 - 1024) & 0xFFF0) * (unsigned __int16)(v103 >> 1)) >> 15;
                    v115 = ((((_WORD)v113 - 1024) & 0xFFF0) * (unsigned __int16)(v102 >> 1)) >> 15;
                  }
                }
                v108->n128_u16[0] = v111;
                v108->n128_u16[1] = v115;
                v104 -= 2;
                v107 -= 2;
                v106 += 10;
                v108 = (__n128 *)((char *)v108 + 4);
              }
              while (v107 > 2);
              result = a2[7];
              a5 = v299;
            }
            v23 = (__n128 *)((char *)v23 + 2 * a7);
            v116 = v99 < 3;
            if (v99 >= 3)
              v117 = 0;
            else
              v117 = result;
            v118 = v99 + v117;
            if (v116)
              v119 = a5;
            else
              v119 = 0;
            v99 = v118 - 2;
            v100 += 16 * v119;
            v101 += a6;
            v48 = __OFSUB__(v97, 2);
            v97 -= 2;
          }
          while (!((v97 < 0) ^ v48 | (v97 == 0)));
        }
        return result;
      }
      if ((a2[9] & 1) != 0)
      v254 = a2[6] - a4;
      if ((int)v254 >= 1)
      {
        v255 = a2[7];
        LODWORD(result) = -a4;
        v256 = (int8x16_t *)((char *)a18 + 2 * a7);
        v257 = &a17[a6];
        v258 = a8 - 16 * a5 - 32;
        v297 = -((a2[8] + 7) & 0xFFFFFFF8);
        v298 = (a2[8] + 7) & 0xFFFFFFF8;
        v259 = 0uLL;
        v260 = vdupq_n_s16(0xFBF0u);
        v261 = (uint16x8_t)vdupq_n_s16(0x3BD1u);
        v262.i64[0] = 0xFC00FC00FC00FC00;
        v262.i64[1] = 0xFC00FC00FC00FC00;
LABEL_220:
        if ((int)result >= 1)
          v263 = 0;
        else
          v263 = v255;
        v264 = v263 + result;
        if ((int)result >= 1)
          v265 = 0;
        else
          v265 = a5;
        v266 = v258 + 16 * v265;
        if (v254 > 2 && v264 > 2)
          v267 = 4;
        else
          v267 = 2;
        if (!v298)
          goto LABEL_246;
        v268 = 0;
        v269 = v266 + 16;
        v270 = (__int8 *)(v24 + 19);
        v271 = v297;
        v272 = v266;
        v273 = v257;
        v274 = v23;
        v275 = v256;
        while (1)
        {
          if (v268 <= 0)
          {
            v268 += a2[9];
            v277 = *(unsigned __int16 *)(v272 + 32);
            v272 += 32;
            v276 = v277;
            v278 = *(unsigned __int16 *)(v269 + 32);
            v269 += 32;
            *(int16x4_t *)v259.i8 = vdup_n_s16(v276 >> 1);
            a16.n128_u64[0] = (unint64_t)vdup_n_s16(v278 >> 1);
            v259 = vzip1q_s16(v259, (int16x8_t)a16);
          }
          if (v268 > 7)
            goto LABEL_240;
          if (v268 == 6)
            goto LABEL_239;
          if (v268 == 4)
            goto LABEL_238;
          if (v268 == 2)
            break;
LABEL_240:
          v279 = 0uLL;
          v280 = 0uLL;
          if (v254 > 2 && v264 > 2)
          {
            v280.i8[0] = v273[14];
            v280.i8[4] = v273[19];
            v281 = vand_s8(*(int8x8_t *)v280.i8, (int8x8_t)0xFF000000FFLL);
            v280.i8[0] = v273[13];
            v280.i8[4] = v273[15];
            *(int8x8_t *)v18.i8 = vand_s8(*(int8x8_t *)v280.i8, (int8x8_t)0xFF000000FFLL);
            v280.i16[0] = v273[4];
            v280.i16[1] = v273[9];
            v280.i16[2] = v281.i16[0];
            LOWORD(v282) = v273[24];
            WORD1(v282) = v273[29];
            WORD2(v282) = v273[34];
            HIWORD(v282) = v273[39];
            v280.i16[3] = v281.i16[2];
            v280.i64[1] = v282;
            LOWORD(v19) = v273[23];
            WORD1(v19) = v273[25];
            WORD2(v19) = v273[33];
            HIWORD(v19) = v273[35];
            v279.i16[0] = v273[3];
            v279.i16[1] = v273[5];
            v279.i16[2] = v18.i16[0];
            v279.i16[3] = v18.i16[2];
            v279.i64[1] = v19;
          }
          v283 = *(v270 - 15);
          v284 = *(v270 - 16);
          v285 = *(v270 - 10);
          v286 = *(v270 - 14);
          v21.i8[0] = *(v270 - 5);
          v21.i8[4] = *v270;
          v22.i8[0] = *(v270 - 6);
          v22.i8[4] = *(v270 - 4);
          LOBYTE(v19) = v270[5];
          BYTE2(v19) = v270[10];
          BYTE4(v19) = v270[15];
          BYTE6(v19) = v270[20];
          v18.i8[0] = v270[4];
          v18.i8[2] = v270[6];
          v18.i8[4] = v270[14];
          v18.i8[6] = v270[16];
          if (v254 > 2 && v264 > 2)
          {
            v287 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8(v280, (int8x16_t)xmmword_2358294C0), (uint16x8_t)xmmword_2358294D0), (int8x16_t)vshlq_n_s16(v279, 6uLL));
            v288 = (int16x8_t)vcgtq_u16(v261, (uint16x8_t)vaddq_s16(v287, v260));
            *v275++ = vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v288, v288), (int8x16_t)vqdmulhq_s16(vaddq_s16(v287, v262), v259)), (int8x16_t)vtrn1q_s16(v288, v288));
            v273 += 40;
          }
          *(int8x8_t *)v289.i8 = vand_s8(*(int8x8_t *)v21.i8, (int8x8_t)0xFF000000FFLL);
          v290 = vand_s8(v22, (int8x8_t)0xFF000000FFLL);
          LODWORD(v19) = v19 & 0xFF00FF;
          WORD2(v19) = BYTE4(v19);
          HIWORD(v19) = BYTE6(v19);
          v21.i16[0] = v283;
          v21.i16[1] = v285;
          v21.i16[2] = v289.i16[0];
          v21.i16[3] = v289.i16[2];
          v21.i64[1] = v19;
          v18.i32[0] &= 0xFF00FFu;
          v18.i16[2] = v18.u8[4];
          v18.i16[3] = v18.u8[6];
          v289.i16[0] = v284;
          v289.i16[1] = v286;
          v289.i16[2] = v290.i16[0];
          v289.i16[3] = v290.i16[2];
          v289.i64[1] = v18.i64[0];
          v291 = (int16x8_t)vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)vandq_s8(v21, (int8x16_t)xmmword_2358294C0), (uint16x8_t)xmmword_2358294D0), (int8x16_t)vshlq_n_s16(v289, 6uLL));
          v18 = (int16x8_t)vcgtq_u16(v261, (uint16x8_t)vaddq_s16(v291, v260));
          a16 = (__n128)vandq_s8(vandq_s8((int8x16_t)vtrn2q_s16(v18, v18), (int8x16_t)vqdmulhq_s16(vaddq_s16(v291, v262), v259)), (int8x16_t)vtrn1q_s16(v18, v18));
          *v274++ = a16;
          v268 -= 8;
          v270 += 40;
          v271 += 8;
          if (!v271)
          {
            v255 = a2[7];
            a5 = v299;
LABEL_246:
            v292 = a6 << ((v254 > 2) & (v264 > 2));
            v24 += v292;
            v257 += v292;
            v293 = a7 << ((v254 > 2) & (v264 > 2));
            v23 = (__n128 *)((char *)v23 + 2 * v293);
            v256 = (int8x16_t *)((char *)v256 + 2 * v293);
            v254 -= v267;
            v294 = v264 - v267;
            if (v264 - v267 >= 1)
              v295 = 0;
            else
              v295 = v255;
            result = (v295 + v294);
            if (v294 >= 1)
              v296 = 0;
            else
              v296 = a5;
            v258 = v266 + 16 * v296;
            if ((int)v254 <= 0)
              return result;
            goto LABEL_220;
          }
        }
        v259.i16[2] = *(_WORD *)(v272 + 32) >> 1;
        v259.i16[3] = *(_WORD *)(v269 + 32) >> 1;
LABEL_238:
        v259.i16[4] = *(_WORD *)(v272 + 32) >> 1;
        v259.i16[5] = *(_WORD *)(v269 + 32) >> 1;
LABEL_239:
        v259.i16[6] = *(_WORD *)(v272 + 32) >> 1;
        v259.i16[7] = *(_WORD *)(v269 + 32) >> 1;
        goto LABEL_240;
      }
      return result;
    default:
  }
}

void PDAF::PixelEngine::`anonymous namespace'::StatsResetUnused(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;

  v1 = *(unsigned __int16 *)(a1 + 44);
  v2 = *(unsigned __int16 *)(a1 + 46);
  v3 = v2 * v1;
  if ((v2 * v1) > 0x80)
  v5 = 99956;
  v6 = 24 * (128 - v3);
  v7 = v1 * v2;
  v8 = 44660;
  v9 = 144 * v7 + 44660;
  v10 = 24 * v7 + 99956;
  v11 = 148;
  v12 = 44228;
  do
  {
    if (v11 != 148 && (*(_DWORD *)(a1 + v11) & 0x80000000) != 0)
    {
      bzero((void *)(a1 + v8), 0x4800uLL);
      v6 = 24 * (128 - v3);
      bzero((void *)(a1 + v5), 0xC00uLL);
      v13 = (_OWORD *)(a1 + v12);
      v13[7] = 0u;
      v13[8] = 0u;
      v13[5] = 0u;
      v13[6] = 0u;
      v13[3] = 0u;
      v13[4] = 0u;
      v13[1] = 0u;
      v13[2] = 0u;
      *v13 = 0u;
    }
    else if (v3 != 128)
    {
      bzero((void *)(a1 + v9), 144 * (128 - v3));
      bzero((void *)(a1 + v10), v6);
    }
    v8 += 18432;
    v9 += 18432;
    v5 += 3072;
    v10 += 3072;
    v11 += 4;
    v12 += 144;
  }
  while (v11 != 160);
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::StatsRebase(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;

  v1 = *(_DWORD *)(result + 44224);
  v2 = *(_DWORD *)(result + 188);
  v3 = v1 - v2;
  if ((v1 & 0x80000000) == 0 && v1 != v2)
  {
    v4 = 0;
    v5 = *(unsigned __int16 *)(result + 46) * *(unsigned __int16 *)(result + 44);
    do
    {
      if (v5)
      {
        v6 = result + 18432 * v4 + 44660;
        v7 = v5;
        do
        {
          v8 = (_DWORD *)(v6 + 96);
          v9 = -12;
          do
          {
            if (*(v8 - 12))
              *v8 += v3;
            ++v8;
            v10 = __CFADD__(v9++, 1);
          }
          while (!v10);
          v6 += 144;
          --v7;
        }
        while (v7);
      }
      ++v4;
    }
    while (v4 != 3);
    v11 = 0;
    v12 = result + 44228;
    do
    {
      v13 = (_DWORD *)(v12 + 96);
      v14 = -12;
      do
      {
        if (*(v13 - 12))
          *v13 += v3;
        ++v13;
        v10 = __CFADD__(v14++, 1);
      }
      while (!v10);
      v12 += 144;
      ++v11;
    }
    while (v11 != 3);
    v2 = *(_DWORD *)(result + 188);
  }
  *(_DWORD *)(result + 44224) = v2;
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::StatsEdgeWeightedSumMask(uint64_t result, unint64_t *a2, uint64_t a3, _OWORD *a4)
{
  int v4;
  unint64_t v5;
  uint64_t i;
  _DWORD *v7;
  uint64_t j;
  char *v9;
  int v10;
  int v11;
  int v12;

  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  if ((int)result > 0)
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      if (v4 == 64)
        v5 = a2[1];
      if ((v5 & 1) != 0)
      {
        for (i = 48; i != 96; i += 4)
        {
          v7 = (_DWORD *)((char *)a4 + i);
          *(v7 - 12) = *(_DWORD *)((char *)a4 + i - 48) + *(_DWORD *)(a3 + i - 48);
          *v7 = *(_DWORD *)((char *)a4 + i) + *(_DWORD *)(a3 + i);
          v7[12] = *(_DWORD *)((char *)a4 + i + 48) + *(_DWORD *)(a3 + i) * *(_DWORD *)(a3 + i + 48);
        }
      }
      v5 >>= 1;
      ++v4;
      a3 += 144;
    }
    while (v4 != (_DWORD)result);
  }
  for (j = 0; j != 48; j += 4)
  {
    v9 = (char *)a4 + j;
    v10 = *(_DWORD *)((char *)a4 + j + 48);
    if (v10)
    {
      v11 = *((_DWORD *)v9 + 24);
      v12 = v10 >> 1;
      if (v11 < 0)
        v12 = -v12;
      *((_DWORD *)v9 + 24) = (v12 + v11) / v10;
    }
  }
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::StatsIIR(uint64_t result, int a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  _DWORD *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;

  v3 = 0;
  v4 = (int)result;
  v5 = a2 + 1;
  v6 = a3 + 22138;
  v7 = (uint64_t)&a3[72 * (int)result + 22138];
  do
  {
    v8 = *(_DWORD *)(v7 + v3 * 2);
    if (v8)
    {
      v9 = v7 + v3 * 2;
      v10 = (*(_DWORD *)&v6[v3 - 24] + *(_DWORD *)(v7 + v3 * 2 - 48) * a2) / v5;
      *(_DWORD *)(v7 + v3 * 2) = (*(_DWORD *)&v6[v3] + v8 * a2) / v5;
      *(_DWORD *)(v9 - 48) = v10;
      *(_DWORD *)(v9 + 48) = (*(_DWORD *)&v6[v3 + 24] + *(_DWORD *)(v7 + v3 * 2 + 48) * a2) / (int)v5;
    }
    else
    {
      v11 = v7 + v3 * 2;
      *(_DWORD *)(v11 - 48) = *(_DWORD *)&v6[v3 - 24];
      *(_DWORD *)(v7 + v3 * 2) = *(_DWORD *)&v6[v3];
      *(_DWORD *)(v11 + 48) = *(_DWORD *)&v6[v3 + 24];
    }
    v3 += 2;
  }
  while (v3 != 24);
  v12 = a3[19];
  v13 = a3[21] - v12;
  if (v13)
  {
    v14 = a3[18];
    v15 = a3[22];
    v16 = v14 + v15 * v12;
    v17 = a3[20] - v14;
    v18 = (uint64_t)&a3[72 * v16 + 22354];
    v19 = v13;
    do
    {
      result = v18;
      for (i = v17; i; --i)
      {
        v21 = 0;
        v22 = result + 18432 * v4;
        do
        {
          v23 = *(_DWORD *)(v22 + v21);
          if (v23)
          {
            v24 = v22 + v21;
            v25 = (*(_DWORD *)(result + v21 - 48) + *(_DWORD *)(v22 + v21 - 48) * a2) / v5;
            *(_DWORD *)(v22 + v21) = (*(_DWORD *)(result + v21) + v23 * a2) / v5;
            *(_DWORD *)(v24 - 48) = v25;
            *(_DWORD *)(v24 + 48) = (*(_DWORD *)(result + v21 + 48) + *(_DWORD *)(v22 + v21 + 48) * a2) / (int)v5;
          }
          else
          {
            v26 = v22 + v21;
            *(_DWORD *)(v26 - 48) = *(_DWORD *)(result + v21 - 48);
            *(_DWORD *)(v22 + v21) = *(_DWORD *)(result + v21);
            *(_DWORD *)(v26 + 48) = *(_DWORD *)(result + v21 + 48);
          }
          v21 += 4;
        }
        while (v21 != 48);
        result += 144;
      }
      v18 += 144 * v15;
      --v19;
    }
    while (v19);
    v27 = (uint64_t)&a3[12 * v16 + 49978];
    v28 = v27 + 3072 * (int)v4;
    do
    {
      if (v17 >= 1)
      {
        v29 = 0;
        v30 = v28;
        v31 = v27;
        do
        {
          result = 0;
          v32 = 1;
          do
          {
            v33 = v32;
            v34 = *(_DWORD *)(v30 + 4 * result);
            if (v34)
            {
              v35 = (_DWORD *)(v31 + 4 * result);
              v36 = (unsigned int *)(v30 + 4 * result);
              *v36 = (*v35 + v34 * a2) / v5;
              v36[2] = (v35[2] + v36[2] * a2) / v5;
              v37 = (v35[4] + v36[4] * a2) / v5;
            }
            else
            {
              v38 = (unsigned int *)(v31 + 4 * result);
              v36 = (unsigned int *)(v30 + 4 * result);
              *v36 = *v38;
              v36[2] = v38[2];
              v37 = v38[4];
            }
            v36[4] = v37;
            v32 = 0;
            result = 1;
          }
          while ((v33 & 1) != 0);
          v31 += 24;
          v30 += 24;
          ++v29;
        }
        while (v29 != v17);
      }
      v27 += 24 * v15;
      v28 += 24 * v15;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::StatsEdgeToOutput(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  unsigned int v12;
  int v13;

  v2 = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  do
  {
    v6 = result + v2 * 4;
    v7 = *(_DWORD *)(result + v2 * 4);
    v8 = (float)v7 * 0.00097656;
    v9 = fabsf(sqrtf(v8));
    v10 = v8 == -INFINITY;
    v11 = INFINITY;
    if (!v10)
      v11 = v9;
    if (v11 > 1.0)
      v11 = 1.0;
    v12 = (float)((float)((float)*(unsigned int *)(v6 + 48)
                              * v11);
    v3 += v7;
    v4 += v12;
    *a2 = v3;
    a2[1] = v4;
    v5 += *(_DWORD *)(v6 + 96) * v12;
    a2[2] = v5;
    ++v2;
  }
  while (v2 != 12);
  if (v4)
  {
    v13 = v4 >> 1;
    if (v5 < 0)
      v13 = -v13;
    a2[2] = (v13 + v5) / (int)v4;
    *a2 = (v3 + 8) >> 4;
  }
  else
  {
    *a2 = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::StatsEdgeLocalToOutput(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int v6;
  int v7;
  int i;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t j;
  uint64_t k;
  int32x4_t *v20;
  int32x4_t v21;
  uint64_t v22;
  unsigned int *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  _OWORD v29[9];

  v6 = *(unsigned __int16 *)(a2 + 16);
  v7 = *(unsigned __int16 *)(a2 + 18);
  if ((_DWORD)result == 1)
  {
    for (i = v7 * v6; i; --i)
    {
      a3 += 144;
      a4 += 3;
    }
  }
  else
  {
    v10 = 0;
    if (v6 >= (int)result)
      v11 = result;
    else
      v11 = *(unsigned __int16 *)(a2 + 16);
    if (v7 >= (int)result)
      v12 = result;
    else
      v12 = *(unsigned __int16 *)(a2 + 18);
    do
    {
      if (v11 <= v6)
      {
        v13 = 0;
        do
        {
          v14 = v13 + v6 * v10;
          memset(v29, 0, sizeof(v29));
          if (v12)
          {
            v15 = a3 + 144 * v14;
            v16 = v12;
            do
            {
              v17 = v11;
              for (j = v15; v17; --v17)
              {
                for (k = 3; k != 6; ++k)
                {
                  v20 = (int32x4_t *)&v29[k];
                  v20[-3] = vaddq_s32((int32x4_t)v29[k - 3], *(int32x4_t *)(j + k * 16 - 48));
                  v21 = *(int32x4_t *)(j + k * 16);
                  *v20 = vaddq_s32((int32x4_t)v29[k], v21);
                  v20[3] = vmlaq_s32((int32x4_t)v29[k + 3], *(int32x4_t *)(j + k * 16 + 48), v21);
                }
                j += 144;
              }
              v15 += 144 * v6;
              --v16;
            }
            while (v16);
          }
          v22 = 0;
          v23 = &a4[3 * v14];
          do
          {
            v24 = (char *)v29 + v22;
            v25 = *(_DWORD *)((char *)&v29[3] + v22);
            if (v25)
            {
              v26 = *((_DWORD *)v24 + 24);
              v27 = v25 >> 1;
              if (v26 < 0)
                v27 = -v27;
              *((_DWORD *)v24 + 24) = (v27 + v26) / v25;
            }
            v22 += 4;
          }
          while (v22 != 48);
          v6 = *(unsigned __int16 *)(a2 + 16);
          v28 = v13++ < v6 - v11;
        }
        while (v28);
        v7 = *(unsigned __int16 *)(a2 + 18);
      }
      v28 = v10++ < v7 - v12;
    }
    while (v28);
  }
  return result;
}

uint64_t PDAF::PixelEngine::`anonymous namespace'::StatsFlatLocalToOutput(uint64_t result, uint64_t a2, uint64_t a3)
{
  int i;
  uint64_t v4;
  char v5;
  char v6;
  _DWORD *v7;
  _DWORD *v8;

  for (i = *(unsigned __int16 *)(result + 46) * *(unsigned __int16 *)(result + 44); i; --i)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = v5;
      v7 = (_DWORD *)(a2 + 4 * v4);
      v8 = (_DWORD *)(a3 + 4 * v4);
      *v8 = *v7;
      v8[2] = v7[2];
      v8[4] = v7[4];
      v4 = 1;
      v5 = 0;
    }
    while ((v6 & 1) != 0);
    a2 += 24;
    a3 += 24;
  }
  return result;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2001, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 737, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2377, a4);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 507, a4);
}

void OUTLINED_FUNCTION_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 4803, a4);
}

void OUTLINED_FUNCTION_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2338, a4);
}

void OUTLINED_FUNCTION_6(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2299, a4);
}

void OUTLINED_FUNCTION_7(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5510, a4);
}

void OUTLINED_FUNCTION_8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2260, a4);
}

void OUTLINED_FUNCTION_9(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5511, a4);
}

void OUTLINED_FUNCTION_10(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2756, a4);
}

uint64_t CopyBufferQueue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (*(_BYTE *)(a3 + 523))
  {
    *a2 = 0;
    return 4294954509;
  }
  else
  {
    *a2 = *(_QWORD *)(a3 + 16);
    result = *(_QWORD *)(a3 + 16);
    if (result)
    {
      CFRetain((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

uint64_t CopyStillImageBufferQueue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (*(_BYTE *)(a3 + 523))
  {
    *a2 = 0;
    return 4294954509;
  }
  else
  {
    *a2 = *(_QWORD *)(a3 + 24);
    result = *(_QWORD *)(a3 + 24);
    if (result)
    {
      CFRetain((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

uint64_t CopySupportedFormatsArray(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFAllocator *v8;
  unint64_t v9;
  const void *v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  int v13;
  const void *ValueAtIndex;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  CFNumberRef v25;
  int v26;
  CFNumberRef v27;
  float v28;
  CFNumberRef v29;
  const void *v30;
  int v31;
  CFNumberRef v32;
  int v33;
  CFNumberRef v34;
  const void *v35;
  int v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  const void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _DWORD *v49;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  double v57;
  unint64_t v58;
  double v59;
  long double v60;
  CFNumberRef v61;
  CFNumberRef v62;
  int *v63;
  int *v64;
  int *v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  CFMutableArrayRef v71;
  __CFArray *v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  uint64_t v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFMutableDictionaryRef v83;
  __CFDictionary *v84;
  CFMutableDictionaryRef v85;
  __CFDictionary *v86;
  CFMutableArrayRef v87;
  __CFArray *v88;
  CFNumberRef v89;
  CFNumberRef v90;
  CFNumberRef v91;
  CFNumberRef v92;
  uint64_t v93;
  int v94;
  CFNumberRef v95;
  uint64_t v96;
  int v97;
  CFNumberRef v98;
  float v99;
  CFNumberRef v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  CFDictionaryRef v109;
  CFDictionaryRef v110;
  CFMutableDictionaryRef v111;
  __CFDictionary *v112;
  CFMutableArrayRef v113;
  __CFArray *v114;
  CFNumberRef v115;
  CFNumberRef v116;
  CFNumberRef v117;
  CFNumberRef v118;
  uint64_t v119;
  int v120;
  CFNumberRef v121;
  uint64_t v122;
  int v123;
  CFNumberRef v124;
  float v125;
  CFNumberRef v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  CFDictionaryRef v135;
  CFDictionaryRef v136;
  CFMutableDictionaryRef v137;
  __CFDictionary *v138;
  CFMutableArrayRef v139;
  __CFArray *v140;
  CFNumberRef v141;
  CFNumberRef v142;
  uint64_t v143;
  int v144;
  CFNumberRef v145;
  uint64_t v146;
  int v147;
  CFNumberRef v148;
  CFNumberRef v149;
  CFDictionaryRef v150;
  CFDictionaryRef v151;
  CFMutableDictionaryRef v152;
  __CFDictionary *v153;
  CFMutableArrayRef v154;
  __CFArray *v155;
  CFNumberRef v156;
  CFNumberRef v157;
  CFNumberRef v158;
  CFNumberRef v159;
  CFNumberRef v160;
  CFNumberRef v161;
  float v162;
  CFNumberRef v163;
  unint64_t v164;
  CFDictionaryRef v165;
  CFDictionaryRef v166;
  CFNumberRef v167;
  CFNumberRef v168;
  CFMutableDictionaryRef v169;
  __CFDictionary *v170;
  CFMutableArrayRef v171;
  __CFArray *v172;
  CFNumberRef v173;
  CFNumberRef v174;
  CFNumberRef v175;
  CFNumberRef v176;
  CFNumberRef v177;
  unint64_t v178;
  CFDictionaryRef v179;
  CFDictionaryRef v180;
  CFNumberRef v181;
  CFNumberRef v182;
  CFMutableDictionaryRef v183;
  __CFDictionary *v184;
  CFMutableArrayRef v185;
  __CFArray *v186;
  CFNumberRef v187;
  CFNumberRef v188;
  CFNumberRef v189;
  CFNumberRef v190;
  unint64_t v191;
  CFDictionaryRef v192;
  CFDictionaryRef v193;
  int v194;
  CFNumberRef v195;
  unsigned int *v197;
  __CFArray **v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *key;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  const __CFAllocator *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  const void *v235;
  __CFArray *theArray;
  void *v237;
  void *v238;
  void *v239;
  uint64_t v240;
  unsigned int v241;
  const void *v243;
  int v244;
  int v245;
  int v246;
  int v247;
  double v248;
  double valuePtr[9];
  _BOOL4 v250;
  unsigned int v251[2];
  unsigned int v252[2];
  int v253;
  int v254;
  int v255;
  float v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  unsigned __int16 __dst;
  unsigned __int16 v263;
  __int16 v264;
  unsigned __int16 v265;
  unsigned __int16 v266;
  unsigned __int16 v267;
  unsigned __int16 v268;
  unsigned int v269;
  int v270;
  char v271;
  int v272;
  int v273;
  unsigned int v274;
  unsigned __int16 v275;
  char v276[200];
  uint64_t v277;
  CGRect v278;
  CGRect v279;
  CGRect v280;
  CGRect v281;

  v277 = *MEMORY[0x24BDAC8D0];
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!theArray)
    return 4294954516;
  v198 = a2;
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 64)))
  {
    v9 = 0;
    v241 = 0;
    key = (void *)*MEMORY[0x24BE118B0];
    v211 = (void *)*MEMORY[0x24BE11908];
    v212 = (void *)*MEMORY[0x24BE118E8];
    v218 = (void *)*MEMORY[0x24BE118A8];
    v10 = (const void *)*MEMORY[0x24BDBD270];
    v210 = (void *)*MEMORY[0x24BE11928];
    v234 = (void *)*MEMORY[0x24BE118D8];
    v243 = (const void *)*MEMORY[0x24BDBD268];
    v233 = (void *)*MEMORY[0x24BE118B8];
    v231 = (void *)*MEMORY[0x24BE118E0];
    v232 = (void *)*MEMORY[0x24BE118C0];
    v229 = (void *)*MEMORY[0x24BE118F8];
    v230 = (void *)*MEMORY[0x24BE11920];
    v227 = (void *)*MEMORY[0x24BE116C0];
    v228 = (void *)*MEMORY[0x24BE11910];
    v226 = (void *)*MEMORY[0x24BE116A8];
    v209 = (void *)*MEMORY[0x24BE11900];
    v222 = (void *)*MEMORY[0x24BE116D8];
    v208 = (void *)*MEMORY[0x24BE118F0];
    v221 = (void *)*MEMORY[0x24BE116D0];
    v225 = (void *)*MEMORY[0x24BE116E0];
    v207 = (void *)*MEMORY[0x24BE118C8];
    v217 = (void *)*MEMORY[0x24BE118D0];
    v197 = (unsigned int *)*MEMORY[0x24BE11918];
    v224 = (void *)*MEMORY[0x24BE116C8];
    v200 = (void *)*MEMORY[0x24BE116F0];
    v216 = (void *)*MEMORY[0x24BE116B8];
    v215 = (void *)*MEMORY[0x24BE116B0];
    v220 = (void *)*MEMORY[0x24BE117C8];
    v239 = (void *)*MEMORY[0x24BE117C0];
    v238 = (void *)*MEMORY[0x24BE117B8];
    v237 = (void *)*MEMORY[0x24BE117B0];
    v219 = (void *)*MEMORY[0x24BE117A8];
    v205 = (void *)*MEMORY[0x24BE11780];
    v204 = (void *)*MEMORY[0x24BE11788];
    v203 = (void *)*MEMORY[0x24BE11778];
    v206 = (void *)*MEMORY[0x24BE11660];
    v202 = (void *)*MEMORY[0x24BE11790];
    v201 = (void *)*MEMORY[0x24BE11798];
    v199 = (void *)*MEMORY[0x24BE117A0];
    v214 = (void *)*MEMORY[0x24BE116E8];
    v240 = a5;
    v235 = (const void *)*MEMORY[0x24BDBD270];
    v223 = v8;
    while (1)
    {
      Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
        break;
LABEL_163:
      if (++v9 >= CFArrayGetCount(*(CFArrayRef *)(a3 + 64)))
        goto LABEL_171;
    }
    v12 = Mutable;
    if (v9 >= *(unsigned int *)(a3 + 112))
      v13 = *(_DWORD *)(a3 + 112);
    else
      v13 = 0;
    if (!*(_BYTE *)(a3 + 523))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 64), v9);
      CFDictionarySetValue(v12, key, ValueAtIndex);
    }
    v15 = v9 - v13;
    if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a5 + 24), *(_DWORD *)(a3 + 84), *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v9 - v13) + 16), &__dst, v276))
    {
      v241 = -12780;
    }
    else
    {
      v17 = *(_QWORD *)(a3 + 104);
      v18 = *(_DWORD *)(a3 + 40);
      v19 = *(_DWORD *)(a3 + 112);
      if (v18 < v19)
        v19 = 0;
      v20 = 84 * (v18 - v19);
      if (v17)
        v21 = v17 + 84 * v15;
      else
        v21 = v20;
      v22 = *(float *)(v21 + 68);
      v23 = v267;
      v24 = vcvtd_n_u64_f64(v22, 8uLL);
      if (v22 != 0.0)
        v23 = v24;
      LODWORD(valuePtr[0]) = v23 >> 8;
      v25 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
      CFDictionarySetValue(v12, v212, v25);
      CFRelease(v25);
      if ((_BYTE)v268)
        v26 = HIBYTE(v268) + 1;
      else
        v26 = HIBYTE(v268);
      LODWORD(v248) = v26;
      v27 = CFNumberCreate(0, kCFNumberIntType, &v248);
      CFDictionarySetValue(v12, v211, v27);
      CFRelease(v27);
    }
    if (!*(_BYTE *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 74) || v9 >= *(unsigned int *)(a3 + 112))
      CFDictionarySetValue(v12, v218, v10);
    if (!*(_BYTE *)(a3 + 523))
    {
      LODWORD(valuePtr[0]) = 0;
      LOWORD(v16) = v264;
      v28 = (float)*(unsigned int *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 4) / (double)v16;
      *(float *)valuePtr = v28;
      v29 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
      CFDictionarySetValue(v12, v210, v29);
      CFRelease(v29);
    }
    if (v265 | v266)
      v30 = v10;
    else
      v30 = v243;
    CFDictionarySetValue(v12, v234, v30);
    v261 = 1;
    if (v265 == 2)
    {
      v31 = 4;
    }
    else
    {
      if (v265 != 1)
        goto LABEL_36;
      v31 = 2;
    }
    v261 = v31;
LABEL_36:
    v32 = CFNumberCreate(0, kCFNumberIntType, &v261);
    CFDictionarySetValue(v12, v233, v32);
    CFRelease(v32);
    v260 = 1;
    if (v266 == 2)
    {
      v33 = 4;
    }
    else
    {
      if (v266 != 1)
        goto LABEL_41;
      v33 = 2;
    }
    v260 = v33;
LABEL_41:
    v34 = CFNumberCreate(0, kCFNumberIntType, &v260);
    CFDictionarySetValue(v12, v232, v34);
    CFRelease(v34);
    if (v269 >= 0xFFFF)
      v35 = v243;
    else
      v35 = v10;
    CFDictionarySetValue(v12, v231, v35);
    if (v270 == 2)
    {
      v259 = 12;
    }
    else
    {
      if (v270 == 3)
        v36 = 14;
      else
        v36 = 10;
      v259 = v36;
    }
    v37 = CFNumberCreate(0, kCFNumberIntType, &v259);
    CFDictionarySetValue(v12, v230, v37);
    CFRelease(v37);
    v258 = v272;
    v38 = CFNumberCreate(0, kCFNumberSInt32Type, &v258);
    CFDictionarySetValue(v12, v229, v38);
    CFRelease(v38);
    v257 = v273;
    v39 = CFNumberCreate(0, kCFNumberSInt32Type, &v257);
    CFDictionarySetValue(v12, v228, v39);
    CFRelease(v39);
    v256 = (float)v274;
    v40 = CFNumberCreate(0, kCFNumberFloatType, &v256);
    CFDictionarySetValue(v12, v227, v40);
    CFRelease(v40);
    v255 = v275;
    v41 = CFNumberCreate(0, kCFNumberSInt32Type, &v255);
    CFDictionarySetValue(v12, v226, v41);
    CFRelease(v41);
    v254 = __dst;
    v42 = CFNumberCreate(0, kCFNumberIntType, &v254);
    if (*(_BYTE *)(a3 + 523) || (CFDictionarySetValue(v12, v209, v42), *(_BYTE *)(a3 + 523)))
      CFDictionarySetValue(v12, v222, v42);
    CFRelease(v42);
    v253 = v263;
    v43 = CFNumberCreate(0, kCFNumberIntType, &v253);
    if (*(_BYTE *)(a3 + 523) || (CFDictionarySetValue(v12, v208, v43), *(_BYTE *)(a3 + 523)))
      CFDictionarySetValue(v12, v221, v43);
    CFRelease(v43);
    if (*(_BYTE *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 64))
      v44 = v10;
    else
      v44 = v243;
    CFDictionarySetValue(v12, v225, v44);
    if (!*(_BYTE *)(a3 + 523))
    {
      v49 = (_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * v15);
      LODWORD(v45) = v49[5];
      LODWORD(v46) = v49[6];
      v278.origin.x = (double)v45;
      v278.origin.y = (double)v46;
      LODWORD(v47) = v49[7];
      LODWORD(v48) = v49[8];
      v278.size.width = (double)v47;
      v278.size.height = (double)v48;
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v278);
      CFDictionarySetValue(v12, v207, DictionaryRepresentation);
      CFRelease(DictionaryRepresentation);
    }
    v51 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
    v52 = *(_DWORD *)(a3 + 84);
    if (*(_DWORD *)(v51 + 80 * v52 + 8))
      v53 = *(_QWORD *)(v51 + 80 * v52 + 24);
    else
      v53 = 0;
    *(_QWORD *)v252 = 0;
    *(_QWORD *)v251 = 0;
    v54 = *(_QWORD *)(a3 + 104);
    if (*(_BYTE *)(v54 + 84 * v15 + 36))
    {
      v55 = v54 + 84 * v15;
      H9ISP::CalculateTotalCrop(0, 0, *(_DWORD *)(v55 + 48), *(_DWORD *)(v55 + 52), *(_DWORD *)(v55 + 56), *(_DWORD *)(v55 + 60), *(_DWORD *)(v55 + 40), *(_DWORD *)(v55 + 44), *(_OWORD *)(v55 + 20), HIDWORD(*(_QWORD *)(v55 + 20)), *(_QWORD *)(v55 + 28), HIDWORD(*(_OWORD *)(v55 + 20)), &v252[1], v252, &v251[1], v251, v197);
    }
    else
    {
      v56 = (_DWORD *)(v54 + 84 * v15);
      v252[1] = v56[5];
      v252[0] = v56[6];
      v251[1] = v56[7];
      v251[0] = v56[8];
    }
    if (v265 >= 3u)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unexpected binning mode 0x%08x \n", v265);
      v57 = 1.0;
      if (!v53)
        goto LABEL_72;
    }
    else
    {
      v57 = dbl_235829660[(__int16)v265];
      if (!v53)
      {
LABEL_72:
        if (!*(_BYTE *)(a3 + 523))
        {
          v63 = *(int **)(a3 + 104);
          v64 = &v63[21 * v15];
          v66 = v64[20];
          v65 = v64 + 20;
          if (v66 != -1)
          {
            LODWORD(valuePtr[0]) = -1;
            v67 = *(unsigned int *)(a3 + 112);
            if ((_DWORD)v67)
            {
              v68 = 0;
              v69 = *v65;
              while (1)
              {
                v70 = *v63;
                v63 += 21;
                if (v70 == v69)
                  break;
                if ((_DWORD)v67 == ++v68)
                  goto LABEL_73;
              }
              if (v9 >= v67)
                v194 = *(_DWORD *)(a3 + 112);
              else
                v194 = 0;
              LODWORD(valuePtr[0]) = v194 + v68;
              v195 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(v12, v197, v195);
              CFRelease(v195);
            }
          }
        }
LABEL_73:
        v250 = v271 != 0;
        v62 = CFNumberCreate(0, kCFNumberSInt32Type, &v250);
        CFDictionarySetValue(v12, v224, v62);
        CFRelease(v62);
        if (H9ISP::H9ISPDevice::GetLSCCoefficients(*(_QWORD *)(a5 + 24), *(_DWORD *)(a3 + 84), *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 16), valuePtr))
        {
          v241 = -12780;
        }
        else
        {
          v71 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
          if (v71)
          {
            v72 = v71;
            v248 = (double)*(uint64_t *)&valuePtr[2] * 1.38777878e-17;
            v73 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v73);
            CFRelease(v73);
            v248 = (double)*(uint64_t *)&valuePtr[3] * 1.38777878e-17;
            v74 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v74);
            CFRelease(v74);
            v248 = (double)*(uint64_t *)&valuePtr[4] * 1.38777878e-17;
            v75 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v75);
            CFRelease(v75);
            v248 = (double)*(uint64_t *)&valuePtr[5] * 1.38777878e-17;
            v76 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v76);
            CFRelease(v76);
            v248 = (double)*(uint64_t *)&valuePtr[6] * 1.38777878e-17;
            v77 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v77);
            CFRelease(v77);
            v248 = (double)*(uint64_t *)&valuePtr[7] * 1.38777878e-17;
            v78 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v78);
            CFRelease(v78);
            v248 = (double)*(uint64_t *)&valuePtr[8] * 1.38777878e-17;
            v79 = CFNumberCreate(0, kCFNumberDoubleType, &v248);
            CFArrayAppendValue(v72, v79);
            CFRelease(v79);
            CFDictionarySetValue(v12, v200, v72);
            CFRelease(v72);
          }
        }
        if (*(_BYTE *)(a3 + 523))
        {
          v80 = *(_QWORD *)(a3 + 104);
          if (*(_BYTE *)(v80 + 84 * v15 + 36))
          {
            LODWORD(v248) = 0;
            LODWORD(v248) = *(_DWORD *)(v80 + 84 * v15 + 40);
            v81 = CFNumberCreate(0, kCFNumberIntType, &v248);
            CFDictionarySetValue(v12, v216, v81);
            CFRelease(v81);
            v247 = 0;
            v247 = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 44);
            v82 = CFNumberCreate(0, kCFNumberIntType, &v247);
            CFDictionarySetValue(v12, v215, v82);
            CFRelease(v82);
          }
          v83 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (v83)
          {
            v84 = v83;
            v85 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (v85)
            {
              v86 = v85;
              v87 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
              if (v87)
              {
                v88 = v87;
                LODWORD(v248) = 2037741171;
                v89 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v88, v89);
                CFRelease(v89);
                LODWORD(v248) = 2037741158;
                v90 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v88, v90);
                CFRelease(v90);
                LODWORD(v248) = 875704438;
                v91 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v88, v91);
                CFRelease(v91);
                LODWORD(v248) = 875704422;
                v8 = v223;
                v92 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v88, v92);
                CFRelease(v92);
                CFDictionarySetValue(v86, v220, v88);
                CFRelease(v88);
              }
              LODWORD(v248) = 0;
              v93 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v93 + 84 * v15 + 36))
                v94 = *(_DWORD *)(v93 + 84 * v15 + 40);
              else
                v94 = __dst;
              LODWORD(v248) = v94;
              v95 = CFNumberCreate(0, kCFNumberIntType, &v248);
              CFDictionarySetValue(v86, v239, v95);
              CFRelease(v95);
              v247 = 0;
              v96 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v96 + 84 * v15 + 36))
                v97 = *(_DWORD *)(v96 + 84 * v15 + 44);
              else
                v97 = v263;
              v247 = v97;
              v98 = CFNumberCreate(0, kCFNumberIntType, &v247);
              CFDictionarySetValue(v86, v238, v98);
              CFRelease(v98);
              v246 = 0;
              if (*(_BYTE *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 64))
                v99 = 0.5;
              else
                v99 = 0.25;
              v246 = LODWORD(v99);
              v100 = CFNumberCreate(0, kCFNumberFloatType, &v246);
              CFDictionarySetValue(v86, v237, v100);
              CFRelease(v100);
              v103 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v103 + 84 * v15 + 36))
              {
                v104 = v103 + 84 * v15;
                LODWORD(v101) = *(_DWORD *)(v104 + 40);
                LODWORD(v102) = *(_DWORD *)(v104 + 44);
                v105 = (double)v101;
                v106 = (double)v102;
              }
              else
              {
                LOWORD(v101) = __dst;
                v105 = (double)v101;
                LOWORD(v101) = v263;
                v106 = (double)v101;
              }
              v107 = 0;
              v108 = 0;
              v109 = CGRectCreateDictionaryRepresentation(*(CGRect *)(&v105 - 2));
              if (v109)
              {
                v110 = v109;
                CFDictionarySetValue(v86, v219, v109);
                CFRelease(v110);
              }
              CFDictionarySetValue(v84, v205, v86);
              CFRelease(v86);
              a5 = v240;
            }
            v111 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (v111)
            {
              v112 = v111;
              v113 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
              if (v113)
              {
                v114 = v113;
                LODWORD(v248) = 2037741171;
                v115 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v114, v115);
                CFRelease(v115);
                LODWORD(v248) = 2037741158;
                v116 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v114, v116);
                CFRelease(v116);
                LODWORD(v248) = 875704438;
                v117 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v114, v117);
                CFRelease(v117);
                LODWORD(v248) = 875704422;
                v8 = v223;
                v118 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v114, v118);
                CFRelease(v118);
                CFDictionarySetValue(v112, v220, v114);
                CFRelease(v114);
              }
              LODWORD(v248) = 0;
              v119 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v119 + 84 * v15 + 36))
                v120 = *(_DWORD *)(v119 + 84 * v15 + 40);
              else
                v120 = __dst;
              LODWORD(v248) = v120;
              v121 = CFNumberCreate(0, kCFNumberIntType, &v248);
              CFDictionarySetValue(v112, v239, v121);
              CFRelease(v121);
              v247 = 0;
              v122 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v122 + 84 * v15 + 36))
                v123 = *(_DWORD *)(v122 + 84 * v15 + 44);
              else
                v123 = v263;
              v247 = v123;
              v124 = CFNumberCreate(0, kCFNumberIntType, &v247);
              CFDictionarySetValue(v112, v238, v124);
              CFRelease(v124);
              v246 = 0;
              if (*(_BYTE *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 64))
                v125 = 0.5;
              else
                v125 = 0.25;
              v246 = LODWORD(v125);
              v126 = CFNumberCreate(0, kCFNumberFloatType, &v246);
              CFDictionarySetValue(v112, v237, v126);
              CFRelease(v126);
              v129 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v129 + 84 * v15 + 36))
              {
                v130 = v129 + 84 * v15;
                LODWORD(v127) = *(_DWORD *)(v130 + 40);
                LODWORD(v128) = *(_DWORD *)(v130 + 44);
                v131 = (double)v127;
                v132 = (double)v128;
              }
              else
              {
                LOWORD(v127) = __dst;
                v131 = (double)v127;
                LOWORD(v127) = v263;
                v132 = (double)v127;
              }
              v133 = 0;
              v134 = 0;
              v135 = CGRectCreateDictionaryRepresentation(*(CGRect *)(&v131 - 2));
              if (v135)
              {
                v136 = v135;
                CFDictionarySetValue(v112, v219, v135);
                CFRelease(v136);
              }
              CFDictionarySetValue(v84, v204, v112);
              CFRelease(v112);
              a5 = v240;
            }
            v137 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (v137)
            {
              v138 = v137;
              v139 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
              if (v139)
              {
                v140 = v139;
                LODWORD(v248) = 2037741171;
                v141 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v140, v141);
                CFRelease(v141);
                LODWORD(v248) = 2037741158;
                v8 = v223;
                v142 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v140, v142);
                CFRelease(v142);
                CFDictionarySetValue(v138, v220, v140);
                CFRelease(v140);
              }
              LODWORD(v248) = 0;
              v143 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v143 + 84 * v15 + 36))
                v144 = *(_DWORD *)(v143 + 84 * v15 + 40);
              else
                v144 = __dst;
              LODWORD(v248) = v144;
              v145 = CFNumberCreate(0, kCFNumberIntType, &v248);
              CFDictionarySetValue(v138, v239, v145);
              CFRelease(v145);
              v247 = 0;
              v146 = *(_QWORD *)(a3 + 104);
              if (*(_BYTE *)(v146 + 84 * v15 + 36))
                v147 = *(_DWORD *)(v146 + 84 * v15 + 44);
              else
                v147 = v263;
              v247 = v147;
              v148 = CFNumberCreate(0, kCFNumberIntType, &v247);
              CFDictionarySetValue(v138, v238, v148);
              CFRelease(v148);
              v246 = 1065353216;
              v149 = CFNumberCreate(0, kCFNumberFloatType, &v246);
              CFDictionarySetValue(v138, v237, v149);
              CFRelease(v149);
              v150 = CGRectCreateDictionaryRepresentation(*MEMORY[0x24BDBF070]);
              if (v150)
              {
                v151 = v150;
                CFDictionarySetValue(v138, v219, v150);
                CFRelease(v151);
              }
              CFDictionarySetValue(v84, v203, v138);
              CFRelease(v138);
              a5 = v240;
            }
            v152 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (v152)
            {
              v153 = v152;
              v154 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
              if (v154)
              {
                v155 = v154;
                LODWORD(v248) = 2037741171;
                v156 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v155, v156);
                CFRelease(v156);
                LODWORD(v248) = 2037741158;
                v157 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v155, v157);
                CFRelease(v157);
                LODWORD(v248) = 875704438;
                v158 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v155, v158);
                CFRelease(v158);
                LODWORD(v248) = 875704422;
                v159 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v155, v159);
                CFRelease(v159);
                CFDictionarySetValue(v153, v220, v155);
                CFRelease(v155);
              }
              LODWORD(v248) = __dst;
              v160 = CFNumberCreate(0, kCFNumberIntType, &v248);
              CFDictionarySetValue(v153, v239, v160);
              CFRelease(v160);
              v247 = v263;
              v161 = CFNumberCreate(0, kCFNumberIntType, &v247);
              CFDictionarySetValue(v153, v238, v161);
              CFRelease(v161);
              v246 = 0;
              if (*(_BYTE *)(*(_QWORD *)(a3 + 104) + 84 * v15 + 64))
                v162 = 0.5;
              else
                v162 = 0.25;
              v246 = LODWORD(v162);
              v163 = CFNumberCreate(0, kCFNumberFloatType, &v246);
              CFDictionarySetValue(v153, v237, v163);
              CFRelease(v163);
              LOWORD(v164) = __dst;
              v279.size.width = (double)v164;
              LOWORD(v164) = v263;
              v279.size.height = (double)v164;
              v279.origin.x = 0.0;
              v279.origin.y = 0.0;
              v165 = CGRectCreateDictionaryRepresentation(v279);
              if (v165)
              {
                v166 = v165;
                CFDictionarySetValue(v153, v219, v165);
                CFRelease(v166);
              }
              v245 = *(_DWORD *)(a3 + 1396);
              v167 = CFNumberCreate(0, kCFNumberIntType, &v245);
              v8 = v223;
              if (v167)
              {
                v168 = v167;
                CFDictionarySetValue(v153, v206, v167);
                CFRelease(v168);
              }
              CFDictionarySetValue(v84, v202, v153);
              CFRelease(v153);
              a5 = v240;
            }
            v169 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (v169)
            {
              v170 = v169;
              v171 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
              if (v171)
              {
                v172 = v171;
                LODWORD(v248) = 2037741171;
                v173 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v172, v173);
                CFRelease(v173);
                LODWORD(v248) = 2037741158;
                v174 = CFNumberCreate(0, kCFNumberIntType, &v248);
                CFArrayAppendValue(v172, v174);
                CFRelease(v174);
                CFDictionarySetValue(v170, v220, v172);
                CFRelease(v172);
              }
              LODWORD(v248) = __dst;
              v175 = CFNumberCreate(0, kCFNumberIntType, &v248);
              CFDictionarySetValue(v170, v239, v175);
              CFRelease(v175);
              v247 = v263;
              v176 = CFNumberCreate(0, kCFNumberIntType, &v247);
              CFDictionarySetValue(v170, v238, v176);
              CFRelease(v176);
              v246 = 1065353216;
              v177 = CFNumberCreate(0, kCFNumberFloatType, &v246);
              CFDictionarySetValue(v170, v237, v177);
              CFRelease(v177);
              LOWORD(v178) = __dst;
              v280.size.width = (double)v178;
              LOWORD(v178) = v263;
              v280.size.height = (double)v178;
              v280.origin.x = 0.0;
              v280.origin.y = 0.0;
              v179 = CGRectCreateDictionaryRepresentation(v280);
              if (v179)
              {
                v180 = v179;
                CFDictionarySetValue(v170, v219, v179);
                CFRelease(v180);
              }
              v245 = *(_DWORD *)(a3 + 1396);
              v181 = CFNumberCreate(0, kCFNumberIntType, &v245);
              v8 = v223;
              if (v181)
              {
                v182 = v181;
                CFDictionarySetValue(v170, v206, v181);
                CFRelease(v182);
              }
              CFDictionarySetValue(v84, v201, v170);
              CFRelease(v170);
              a5 = v240;
            }
            LODWORD(v248) = 0;
            v247 = 0;
            if (ConfigSupportsContextSwitchCaptures(a3, a5, &v248, &v247))
            {
              v183 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (v183)
              {
                v184 = v183;
                v185 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
                if (v185)
                {
                  v186 = v185;
                  v246 = 1650943796;
                  v187 = CFNumberCreate(0, kCFNumberIntType, &v246);
                  CFArrayAppendValue(v186, v187);
                  CFRelease(v187);
                  CFDictionarySetValue(v184, v220, v186);
                  CFRelease(v186);
                }
                v246 = LODWORD(v248);
                v188 = CFNumberCreate(0, kCFNumberIntType, &v246);
                CFDictionarySetValue(v184, v239, v188);
                CFRelease(v188);
                v245 = v247;
                v189 = CFNumberCreate(0, kCFNumberIntType, &v245);
                CFDictionarySetValue(v184, v238, v189);
                CFRelease(v189);
                v244 = 1065353216;
                v190 = CFNumberCreate(0, kCFNumberFloatType, &v244);
                CFDictionarySetValue(v184, v237, v190);
                CFRelease(v190);
                LODWORD(v191) = LODWORD(v248);
                v281.size.width = (double)v191;
                LODWORD(v191) = v247;
                v281.size.height = (double)v191;
                v281.origin.x = 0.0;
                v281.origin.y = 0.0;
                v192 = CGRectCreateDictionaryRepresentation(v281);
                if (v192)
                {
                  v193 = v192;
                  CFDictionarySetValue(v184, v219, v192);
                  CFRelease(v193);
                }
                CFDictionarySetValue(v84, v199, v184);
                CFRelease(v184);
                a5 = v240;
              }
            }
            CFDictionarySetValue(v12, v214, v84);
            CFRelease(v84);
          }
        }
        CFArrayAppendValue(theArray, v12);
        CFRelease(v12);
        v10 = v235;
        goto LABEL_163;
      }
    }
    LODWORD(v46) = v251[1];
    v58 = *(_QWORD *)(v53 + 48);
    v59 = v57 * (double)v46 / (double)v58;
    v60 = tan(*(double *)v53 * 0.5 * 0.0174532925);
    valuePtr[0] = atan(v59 * v60)
                * 114.591559
                * (double)v58
                / sqrt((double)(v58 * v58 + *(_QWORD *)(v53 + 56) * *(_QWORD *)(v53 + 56)));
    v61 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    CFDictionarySetValue(v12, v217, v61);
    CFRelease(v61);
    goto LABEL_72;
  }
  v241 = 0;
LABEL_171:
  *v198 = theArray;
  return v241;
}

uint64_t CopyFormatDescription(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const void *v3;

  *a2 = *(_QWORD *)(a3 + 32);
  v3 = *(const void **)(a3 + 32);
  if (v3)
    CFRetain(v3);
  return 0;
}

uint64_t SetMaximumFrameRate(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  unsigned int valuePtr;
  _BYTE __dst[12];
  unsigned __int16 v22;
  unsigned __int16 v23;
  _BYTE v24[200];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 112);
  if (v7 < v8)
    v8 = 0;
  v9 = v7 - v8;
  if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v7 - v8) + 16), __dst, v24))return 4294954516;
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_DWORD *)(a2 + 40);
  v12 = *(_DWORD *)(a2 + 112);
  if (v11 < v12)
    v12 = 0;
  v13 = 84 * (v11 - v12);
  v14 = v10 ? v10 + 84 * v9 : v13;
  v15 = *(float *)(v14 + 68);
  v16 = vcvtd_n_u64_f64(v15, 8uLL);
  v17 = v15 == 0.0 ? v22 : v16;
  valuePtr = v17 >> 8;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  if (valuePtr > v17 >> 8 || v23 > valuePtr << 8)
    return 4294954516;
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting new max frame-rate: %d\n", valuePtr);
  v19 = valuePtr;
  *(_DWORD *)(a2 + 44) = valuePtr;
  result = *(_QWORD *)(a2 + 88);
  if (result)
  {
    if (v19 <= 2)
    {
      H9ISP::H9ISPFrameReceiver::SetFrameDoneTimeoutDuration((H9ISP::H9ISPFrameReceiver *)result, 3.0);
      LOBYTE(v19) = valuePtr;
    }
    H9ISP::H9ISPDevice::SetMaximumFrameRate(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v19 << 8);
    return 0;
  }
  return result;
}

uint64_t CopyMaximumFrameRate(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE __dst[12];
  unsigned __int16 v20;
  int valuePtr;
  _BYTE v22[200];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  valuePtr = 30;
  v7 = *(_DWORD *)(a3 + 40);
  v8 = *(_DWORD *)(a3 + 112);
  if (v7 < v8)
    v8 = 0;
  v9 = v7 - v8;
  if (!H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a5 + 24), *(_DWORD *)(a3 + 84), *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v7 - v8) + 16), __dst, v22))
  {
    v10 = *(_QWORD *)(a3 + 104);
    v11 = *(_DWORD *)(a3 + 40);
    v12 = *(_DWORD *)(a3 + 112);
    if (v11 < v12)
      v12 = 0;
    v13 = 84 * (v11 - v12);
    if (v10)
      v14 = v10 + 84 * v9;
    else
      v14 = v13;
    v15 = *(float *)(v14 + 68);
    v16 = v20;
    v17 = vcvtd_n_u64_f64(v15, 8uLL);
    if (v15 != 0.0)
      v16 = v17;
    valuePtr = v16 >> 8;
  }
  *a2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t CopySupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  const __CFString *v8;
  uint64_t v9;
  const __CFBoolean *v10;
  unsigned int v11;
  uint64_t *v12;
  const __CFString **v13;
  const void *v14;
  __CFDictionary **v16;

  Mutable = *(__CFDictionary **)(a3 + 72);
  if (!Mutable)
  {
    v16 = a2;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v8 = (const __CFString *)streamProperties[0];
      if (streamProperties[0])
      {
        v9 = 0;
        v10 = (const __CFBoolean *)*MEMORY[0x24BDBD268];
        v11 = 1;
        v12 = streamProperties;
        do
        {
          if (streamProperties[5 * v9 + 2])
          {
            if (streamProperties[5 * v9 + 3])
              v13 = (const __CFString **)MEMORY[0x24BE105C8];
            else
              v13 = (const __CFString **)MEMORY[0x24BE105D0];
          }
          else
          {
            v13 = (const __CFString **)MEMORY[0x24BE105C0];
          }
          if (IsPropertySupportedForStream((uint64_t)v12, (unsigned int *)a3, a5))
            addPropertyDictionaryToPropertiesDictionary(Mutable, v8, (const __CFString *)streamProperties[5 * v9 + 1], *v13, v10);
          v9 = v11;
          v12 = &streamProperties[5 * v11];
          v8 = (const __CFString *)*v12;
          ++v11;
        }
        while (*v12);
      }
    }
    *(_QWORD *)(a3 + 72) = Mutable;
    a2 = v16;
  }
  *a2 = Mutable;
  v14 = *(const void **)(a3 + 72);
  if (v14)
    CFRetain(v14);
  return 0;
}

uint64_t SetFormatIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *ValueAtIndex;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t result;
  unsigned __int8 v23[8];
  int v24;
  int v25;
  char __dst[12];
  unsigned __int16 v27;
  unsigned int valuePtr;
  char v29[200];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  valuePtr = -1;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (valuePtr >= 2 * *(_DWORD *)(a2 + 112))
    return 4294954516;
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting new format: %d\n", valuePtr);
  CFRelease(*(CFTypeRef *)(a2 + 32));
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), valuePtr);
  *(_QWORD *)(a2 + 32) = ValueAtIndex;
  CFRetain(ValueAtIndex);
  v9 = valuePtr;
  *(_DWORD *)(a2 + 40) = valuePtr;
  v10 = *(_DWORD *)(a2 + 112);
  if (v9 < v10)
    v10 = 0;
  v11 = v9 - v10;
  if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v9 - v10) + 16), __dst, v29))
  {
    v12 = 30;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 104);
    v14 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a2 + 112);
    if (v14 < v15)
      v15 = 0;
    v16 = 84 * (v14 - v15);
    if (v13)
      v17 = v13 + 84 * v11;
    else
      v17 = v16;
    v18 = *(float *)(v17 + 68);
    v19 = v27;
    v20 = vcvtd_n_u64_f64(v18, 8uLL);
    if (v18 != 0.0)
      v19 = v20;
    v12 = v19 >> 8;
  }
  *(_DWORD *)(a2 + 44) = v12;
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 460) = -1;
  *(_QWORD *)(a2 + 468) = -1;
  *(_QWORD *)(a2 + 476) = -1;
  *(_QWORD *)(a2 + 1252) = 1065353216;
  v21 = *(_DWORD *)(a2 + 1312);
  *(_DWORD *)(a2 + 1320) = v21;
  *(_DWORD *)(a2 + 1316) = v21;
  H9ISPResetVideoOutputConfigurationsForNewSelectedFormat(a2, a4);
  result = 0;
  if (!*(_QWORD *)(a2 + 88))
  {
    *(_QWORD *)v23 = 0;
    v24 = *(_DWORD *)(a2 + 84);
    *(_WORD *)&v23[4] = 263;
    v25 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * v11 + 16);
    result = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), v23, 0x10u, 0, 0xFFFFFFFF);
    if ((_DWORD)result)
    {
      H9ISPLogger(3, "SetFormatIndex - CISP_CMD_CH_CAMERA_CONFIG_SELECT error: 0x%08X\n", result);
      return 4294954516;
    }
  }
  return result;
}

uint64_t CopyFormatIndex(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  *a2 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a3 + 40));
  return 0;
}

uint64_t SetMinimumFrameRate(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned int valuePtr;
  _BYTE __dst[12];
  unsigned __int16 v22;
  _BYTE v23[200];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 112);
  if (v7 < v8)
    v8 = 0;
  v9 = v7 - v8;
  if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v7 - v8) + 16), __dst, v23))return 4294954516;
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_DWORD *)(a2 + 40);
  v12 = *(_DWORD *)(a2 + 112);
  if (v11 < v12)
    v12 = 0;
  v13 = 84 * (v11 - v12);
  v14 = v10 ? v10 + 84 * v9 : v13;
  v15 = *(float *)(v14 + 68);
  v16 = vcvtd_n_u64_f64(v15, 8uLL);
  v17 = v15 == 0.0 ? v22 : v16;
  valuePtr = v17 >> 8;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  if (valuePtr - 1 >= v17 >> 8)
    return 4294954516;
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting new min frame-rate: %d\n", valuePtr);
  v18 = valuePtr;
  *(_DWORD *)(a2 + 48) = valuePtr;
  if (*(_QWORD *)(a2 + 88))
    H9ISP::H9ISPDevice::SetMinimumFrameRate(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v18 << 8);
  return 0;
}

uint64_t CopyMinimumFrameRate(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6;
  unsigned int v7;
  _BYTE __dst[116];
  int valuePtr;
  _BYTE v11[200];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  valuePtr = 2;
  v6 = *(_DWORD *)(a3 + 40);
  v7 = *(_DWORD *)(a3 + 112);
  if (v6 < v7)
    v7 = 0;
  if (!H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a5 + 24), *(_DWORD *)(a3 + 84), *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v6 - v7) + 16), __dst, v11))valuePtr = __dst[15];
  *a2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t StillImageCaptureNow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v7;
  const __CFArray *v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  CFTypeID v12;
  const __CFArray *Value;
  const __CFArray *v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t DerivedStorage;
  int v26;
  _BOOL4 v27;
  CFTypeID v28;
  CFTypeID v29;
  uint64_t TypeID;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  CFIndex v34;
  uint64_t v35;
  CFIndex v36;
  _OWORD *v37;
  const __CFNumber *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  CFTypeID v41;
  int v42;
  CFIndex v43;
  uint64_t v44;
  const __CFDictionary *v45;
  const __CFDictionary *v46;
  CFTypeID v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFArray *v51;
  const __CFArray *v52;
  CFTypeID v53;
  int v54;
  const void *v55;
  const __CFArray *v56;
  const __CFArray *v57;
  CFIndex v58;
  CFIndex v59;
  CFIndex v60;
  _OWORD *v61;
  const __CFNumber *v62;
  const __CFDictionary *v63;
  const __CFDictionary *v64;
  CFTypeID v65;
  uint64_t v66;
  const __CFArray *v67;
  const __CFArray *v68;
  CFTypeID v69;
  int v70;
  const void *v71;
  const void *v72;
  const void *v73;
  unint64_t v74;
  int v75;
  const __CFNumber *v76;
  const __CFNumber *v77;
  CFTypeID v78;
  uint64_t v79;
  int v80;
  const __CFArray *v81;
  const __CFArray *v82;
  CFTypeID v83;
  CFIndex Count;
  pthread_mutex_t *v85;
  CFIndex v86;
  _QWORD *v87;
  const __CFNumber *ValueAtIndex;
  const __CFArray *v89;
  const __CFArray *v90;
  CFTypeID v91;
  CFIndex v92;
  CFIndex v93;
  _QWORD *v94;
  const __CFNumber *v95;
  uint64_t v96;
  char *v97;
  const void *v98;
  const void *v99;
  const void *v100;
  CFTypeID v101;
  pthread_mutex_t *v102;
  CFIndex v103;
  _QWORD *v104;
  const __CFNumber *v105;
  const void *v106;
  uint64_t v107;
  const void *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  unsigned __int16 v116;
  CFTypeID v117;
  CFIndex v118;
  unsigned int v119;
  const __CFDictionary *v120;
  const __CFDictionary *v121;
  CFTypeID v122;
  const __CFNumber *v123;
  const __CFNumber *v124;
  const __CFNumber *v125;
  BOOL v126;
  const void *v127;
  uint64_t v128;
  const void *v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  unsigned __int16 v138;
  CFTypeID v139;
  char *v140;
  unint64_t v141;
  CFTypeID v142;
  const __CFArray *v143;
  const __CFDictionary *v144;
  const __CFArray *v145;
  CFTypeID v146;
  unint64_t v147;
  _WORD *v148;
  const __CFArray *v149;
  const __CFDictionary *v150;
  const __CFDictionary *v151;
  CFTypeID v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  int v158;
  double v159;
  double v160;
  double v161;
  double v162;
  unint64_t v163;
  CFTypeID v164;
  const __CFArray *v165;
  const __CFArray *v166;
  CFTypeID v167;
  unint64_t v168;
  _WORD *v169;
  const __CFDictionary *v170;
  const __CFDictionary *v171;
  CFTypeID v172;
  unsigned int v173;
  char *v174;
  uint64_t v175;
  CFIndex v176;
  _DWORD *v177;
  const __CFNumber *v178;
  const void *v179;
  uint64_t v180;
  const void *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int *v188;
  unsigned int v189;
  unsigned __int16 v190;
  unint64_t v191;
  CFTypeID v192;
  const __CFArray *v193;
  const __CFArray *v194;
  CFTypeID v195;
  BOOL v196;
  unint64_t v197;
  _WORD *v198;
  const __CFDictionary *v199;
  const __CFDictionary *v200;
  CFTypeID v201;
  unsigned int v202;
  uint64_t *v203;
  char *v204;
  uint64_t v205;
  unsigned int v206;
  __int16 v207;
  int v208;
  unsigned __int8 v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  __int16 v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int *v216;
  _WORD *v217;
  H9ISP::H9ISPDevice *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  __int16 v222;
  int v223;
  uint64_t *v224;
  int v225;
  char *v226;
  uint64_t v227;
  int v228;
  unsigned __int8 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  const __CFNumber *v236;
  const __CFNumber *v237;
  CFTypeID v238;
  const __CFNumber *v239;
  const __CFNumber *v240;
  CFTypeID v241;
  __int16 v242;
  _WORD *v243;
  double *v244;
  double *v245;
  uint64_t v246;
  double v247;
  __int16 v248;
  double v249;
  H9ISP::H9ISPDevice *v250;
  unsigned int v251;
  unsigned int v252;
  __int16 v253;
  _WORD *v254;
  double *v255;
  uint64_t v256;
  double v257;
  int v258;
  uint64_t *v259;
  int v260;
  char *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  NSObject *v265;
  dispatch_time_t v266;
  __int16 v267;
  int v268;
  _WORD *v269;
  int *v270;
  int *v271;
  uint64_t v272;
  int v273;
  int v274;
  H9ISP::H9ISPDevice *v275;
  unsigned int v276;
  unsigned int v277;
  __int16 v278;
  _WORD *v279;
  int *v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t *v284;
  int v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int *v297;
  CFTypeRef v298;
  unint64_t v299;
  unsigned __int8 v300;
  unsigned int v301;
  CFTypeRef cf;
  const __CFDictionary *theDict;
  int v304;
  unint64_t cf2;
  _BOOL4 v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  const __CFArray *v312;
  const __CFArray *v313;
  int v314;
  int v315;
  void *v316;
  uint64_t v317;
  int v318;
  int v319;
  pthread_mutex_t *v320;
  int key;
  void *keya;
  char *keyb;
  char *keyc;
  char *keyd;
  unsigned int v326[2];
  unsigned int v327[2];
  unsigned int v328[12];
  __int128 v329;
  _OWORD v330[15];
  int v331;
  unsigned int v332[8];
  unsigned int v333[8];
  __int128 valuePtr;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  _OWORD __b[4];
  _OWORD v347[4];
  _WORD v348[8];
  _WORD v349[8];
  _OWORD v350[2];
  uint64_t v351;
  uint64_t v352;

  v5 = a2;
  v352 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned __int8 *)(a2 + 1304);
  v351 = 0;
  memset(v350, 0, sizeof(v350));
  v8 = *(const __CFArray **)(a2 + 1352);
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(a2 + 1352));
    v9 = (pthread_mutex_t *)(v5 + 184);
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 184));
    LockStreamMutexes(v8);
  }
  else
  {
    v9 = 0;
  }
  if (*(_DWORD *)(v5 + 56) || !*(_QWORD *)(v5 + 88))
    goto LABEL_5;
  v304 = *(_DWORD *)(v5 + 176);
  if (!a1 || (v12 = CFGetTypeID(a1), v12 != CFDictionaryGetTypeID()))
  {
    v306 = 0;
    v298 = 0;
    v299 = 0;
    cf2 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v315 = 0;
    key = 0;
    cf = 0;
    theDict = 0;
    theArray = 0;
    v312 = 0;
    v300 = 0;
    v301 = 4;
    goto LABEL_16;
  }
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F58]);
  v14 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110C8]);
  v15 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11118]);
  theArray = Value;
  v312 = v14;
  theDict = v15;
  if (Value && (v16 = CFGetTypeID(Value), v16 == CFArrayGetTypeID()))
  {
    v306 = 0;
    v315 = 0;
    key = 1;
  }
  else if (v14 && (v28 = CFGetTypeID(v14), v28 == CFArrayGetTypeID()))
  {
    v306 = 0;
    key = 0;
    v315 = 1;
  }
  else if (v15)
  {
    v29 = CFGetTypeID(v15);
    v315 = 0;
    key = 0;
    v306 = v29 == CFDictionaryGetTypeID();
  }
  else
  {
    v306 = 0;
    v315 = 0;
    key = 0;
  }
  v71 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11030]);
  v72 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F98]);
  v73 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11190]);
  v74 = (unint64_t)v73;
  v75 = 4;
  if (v73)
  {
    if (CFEqual(v73, (CFTypeRef)*MEMORY[0x24BDBD270]))
      v75 = 1;
    else
      v75 = 4;
  }
  cf2 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11630]);
  if (cf2)
  {
    if (!CFEqual((CFTypeRef)*MEMORY[0x24BE115E0], (CFTypeRef)cf2))
      goto LABEL_288;
    v75 = 1;
  }
  cf = v71;
  v301 = v75;
  v298 = v72;
  LODWORD(valuePtr) = 0;
  v76 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11640]);
  if (v76 && (v77 = v76, v78 = CFGetTypeID(v76), v78 == CFNumberGetTypeID()))
  {
    v79 = a4;
    CFNumberGetValue(v77, kCFNumberIntType, &valuePtr);
    v80 = valuePtr;
  }
  else
  {
    v79 = a4;
    v80 = 0;
  }
  v300 = v80 == 1;
  memset(v349, 0, 14);
  memset(v348, 0, 14);
  v81 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("FocusDeltaParams"));
  v299 = v74;
  if (v81 && (v82 = v81, v83 = CFGetTypeID(v81), v83 == CFArrayGetTypeID()))
  {
    Count = CFArrayGetCount(v82);
    if (Count > 7)
      goto LABEL_288;
    v19 = Count;
    if (!Count)
      goto LABEL_288;
    v85 = v9;
    if (Count >= 1)
    {
      v86 = 0;
      v87 = v349;
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v82, v86);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v87);
        ++v86;
        v87 = (_QWORD *)((char *)v87 + 2);
      }
      while (v19 != v86);
    }
  }
  else
  {
    v85 = v9;
    v19 = 0;
  }
  v89 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("FocusDeltaParamsSlave"));
  if (v89)
  {
    v90 = v89;
    v91 = CFGetTypeID(v89);
    if (v91 == CFArrayGetTypeID())
    {
      v92 = CFArrayGetCount(v90);
      v9 = v85;
      if (v92 != v19 || v92 > 7 || !v92)
        goto LABEL_288;
      if (v19 < 1)
        goto LABEL_125;
      v93 = 0;
      v94 = v348;
      do
      {
        v95 = (const __CFNumber *)CFArrayGetValueAtIndex(v90, v93);
        CFNumberGetValue(v95, kCFNumberIntType, v94);
        ++v93;
        v94 = (_QWORD *)((char *)v94 + 2);
      }
      while (v19 != v93);
    }
  }
  v9 = v85;
  if (v19 >= 1)
  {
    if (v306 | v315 | key)
    {
      v96 = 0;
      memset(v328, 0, sizeof(v328));
      v328[2] = *(unsigned __int16 *)(v5 + 84) | ((*(_QWORD *)(v5 + 1352) != 0) << 31);
      LOWORD(v328[1]) = 586;
      LOWORD(v328[3]) = v19;
      do
      {
        v97 = (char *)v328 + 2 * v96;
        *((_WORD *)v97 + 7) = v349[v96];
        *((_WORD *)v97 + 15) = v348[v96++];
      }
      while (v19 != v96);
      if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v79 + 24), (unsigned __int8 *)v328, 0x30u, 0, 0xFFFFFFFF))goto LABEL_124;
    }
  }
LABEL_125:
  v98 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11628]);
  if (v98)
    v7 = CFEqual(v98, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  v99 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11620]);
  if (v99)
  {
    if (*(_BYTE *)(v5 + 523)
      && (*(_BYTE *)(v5 + 888) && !*(_BYTE *)(v5 + 984) || *(_BYTE *)(v5 + 1008) && !*(_BYTE *)(v5 + 1104)))
    {
      goto LABEL_288;
    }
    v17 = CFEqual(v99, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  }
  else
  {
    v17 = dword_254291320 == 1;
  }
  v100 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11638]);
  a4 = v79;
  if (v100)
    v18 = CFEqual(v100, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  else
    v18 = 0;
LABEL_16:
  v20 = *(const __CFArray **)(v5 + 1352);
  if (v20)
  {
    if (!CFArrayGetCount(v20))
      goto LABEL_124;
    v293 = v19;
    v21 = a4;
    v320 = v9;
    v22 = 0;
    v23 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 1352), v22))
      {
        FigCaptureStreamGetFigBaseObject();
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(DerivedStorage + 88))
        {
          if (*(_BYTE *)(DerivedStorage + 1360) || !v18)
          {
            if (*(_BYTE *)(DerivedStorage + 1360))
              v5 = DerivedStorage;
            *((_QWORD *)v350 + v23++) = DerivedStorage;
          }
        }
      }
      ++v22;
    }
    while (v22 < CFArrayGetCount(*(CFArrayRef *)(v5 + 1352)));
    if (!v23)
      goto LABEL_49;
    a4 = v21;
    v26 = *(_DWORD *)(v5 + 84);
    v297 = (int *)(v5 + 84);
    v27 = v23 == 1 || !v17;
    if (v23 == 1)
    {
      v292 = 0;
      v27 = 1;
      v19 = v293;
    }
    else
    {
      v26 &= ~0x80000000;
      v19 = v293;
      if (*(_QWORD *)(v5 + 1352))
        v26 |= (*(_BYTE *)(v5 + 1368) == 0) << 31;
      v292 = 0x80000000;
    }
  }
  else
  {
    v320 = v9;
    v292 = 0;
    *(_QWORD *)&v350[0] = v5;
    v26 = *(_DWORD *)(v5 + 84);
    v297 = (int *)(v5 + 84);
    v27 = 1;
    v23 = 1;
  }
  TypeID = H9ISP::H9ISPDevice::EnableCNRForStillCapture(*(H9ISP::H9ISPDevice **)(a4 + 24), v26, v7 != 0);
  v31 = v17 && v27;
  if (*(unsigned __int8 *)(v5 + 1392) != v31)
  {
    *(_QWORD *)v328 = 0;
    v32 = *v297;
    LOWORD(v328[1]) = 320;
    v328[2] = v32;
    v328[3] = v31;
    TypeID = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), (unsigned __int8 *)v328, 0x10u, 0, 0xFFFFFFFF);
    if ((_DWORD)TypeID)
    {
LABEL_49:
      v10 = 4294954611;
LABEL_50:
      v9 = v320;
      goto LABEL_6;
    }
    *(_BYTE *)(v5 + 1392) = v31;
  }
  v33 = (char *)v23;
  if (key)
  {
    v307 = v23;
    v34 = CFArrayGetCount(theArray);
    v10 = 4294954516;
    if (v34 > 7)
      goto LABEL_50;
    v35 = v34;
    if (!v34)
      goto LABEL_50;
    v294 = v19;
    v288 = a4;
    if (v34 >= 1)
    {
      v36 = 0;
      v37 = v347;
      do
      {
        v38 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v36);
        CFNumberGetValue(v38, kCFNumberDoubleType, v37);
        ++v36;
        v37 = (_OWORD *)((char *)v37 + 8);
      }
      while (v35 != v36);
    }
    if (!*(_QWORD *)(v5 + 1352))
    {
LABEL_150:
      v106 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11158]);
      v107 = 0;
      v108 = (const void *)*MEMORY[0x24BDBD270];
      if (v307 <= 1)
        v109 = 1;
      else
        v109 = v307;
      keyb = (char *)v109;
      v318 = v109;
      while (1)
      {
        if (v106)
        {
          v110 = CFEqual(v106, v108);
          v111 = *((_QWORD *)v350 + v107);
          *(_BYTE *)(v111 + 420) = v110;
        }
        else
        {
          v111 = *((_QWORD *)v350 + v107);
        }
        if (*(_BYTE *)(v111 + 523))
        {
          if (!*(_BYTE *)(v111 + 888))
            goto LABEL_462;
          if (H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v111 + 88), 7, (v35 + 1)))break;
          if (*(_BYTE *)(v111 + 523))
          {
LABEL_462:
            if (*(_BYTE *)(v111 + 1008)
              && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v111 + 88), 9, (v35 + 1)))
            {
              break;
            }
          }
        }
        if (v31
          && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v111 + 88), 19, (v35 + 1)))
        {
          break;
        }
        if (keyb == (char *)++v107)
        {
          v10 = 4294954516;
          v112 = v318;
          goto LABEL_170;
        }
      }
      v10 = 4294954610;
      v112 = v107;
LABEL_170:
      v113 = a4;
      v114 = v294;
      v115 = v297;
      if (v112 != v307)
        goto LABEL_50;
      if (*(_QWORD *)(v5 + 1352))
        v116 = 6;
      else
        v116 = 1;
      if (cf)
      {
        v117 = CFGetTypeID(cf);
        if (v117 == CFStringGetTypeID())
        {
          v114 = v294;
          if (CFEqual(cf, (CFTypeRef)*MEMORY[0x24BE10FB0]))
          {
            v300 = 0;
            if (*(_QWORD *)(v5 + 1352))
              v116 = 7;
            else
              v116 = 2;
          }
          else if (CFEqual(cf, (CFTypeRef)*MEMORY[0x24BE10FA0]))
          {
            v300 = 0;
            if (*(_QWORD *)(v5 + 1352))
              v116 = 5;
            else
              v116 = 0;
          }
          else
          {
            v208 = CFEqual(cf, (CFTypeRef)*MEMORY[0x24BE10FA8]);
            if (*(_QWORD *)(v5 + 1352))
              v116 = 6;
            else
              v116 = 1;
            v209 = v300;
            if (!v208)
              v209 = 0;
            v300 = v209;
          }
        }
        else
        {
          v114 = v294;
        }
      }
      if (H9ISP::H9ISPDevice::SetAEBracketingMode(*(H9ISP::H9ISPDevice **)(v288 + 24), *v297, v116, v301)
        || H9ISP::H9ISPDevice::EnableSqrtToneCurve(*(H9ISP::H9ISPDevice **)(v288 + 24), *v297, v300))
      {
        goto LABEL_50;
      }
      LOWORD(v141) = (_WORD)v298;
      if (v298)
      {
        v142 = CFGetTypeID(v298);
        if (v142 == CFDictionaryGetTypeID())
        {
          v143 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v298, (const void *)*MEMORY[0x24BE11220]);
          v144 = (const __CFDictionary *)v298;
          if (!v143)
            goto LABEL_386;
          v145 = v143;
          v146 = CFGetTypeID(v143);
          if (v146 != CFArrayGetTypeID())
            goto LABEL_50;
          if (CFArrayGetCount(v145))
          {
            v147 = 0;
            v148 = (_WORD *)&valuePtr + 3;
            v149 = v145;
            while (1)
            {
              v150 = (const __CFDictionary *)CFArrayGetValueAtIndex(v149, v147);
              if (!v150)
                break;
              v151 = v150;
              v152 = CFGetTypeID(v150);
              if (v152 != CFDictionaryGetTypeID())
                break;
              v328[0] = 0;
              v333[0] = 0;
              v332[0] = 0;
              *(_QWORD *)v327 = 0;
              if (H9ISPGetRectParamsFromDict(v151, v328, v333, v332, &v327[1], v327, 1u))
                break;
              *(_DWORD *)(v148 - 3) = v147;
              *(v148 - 1) = v328[0];
              *v148 = v333[0];
              v148[1] = v332[0];
              v148[2] = v327[1];
              v141 = v147 + 1;
              v153 = CFArrayGetCount(v149);
              if (v147 <= 0xE)
              {
                v148 += 6;
                ++v147;
                if (v141 < v153)
                  continue;
              }
              goto LABEL_402;
            }
            LOWORD(v141) = v147;
LABEL_402:
            v113 = v288;
            v115 = v297;
            v144 = (const __CFDictionary *)v298;
          }
          else
          {
LABEL_386:
            LOWORD(v141) = 0;
          }
          v328[0] = 0;
          v236 = (const __CFNumber *)CFDictionaryGetValue(v144, (const void *)*MEMORY[0x24BE111E0]);
          if (v236 && (v237 = v236, v238 = CFGetTypeID(v236), v238 == CFNumberGetTypeID()))
          {
            CFNumberGetValue(v237, kCFNumberIntType, v328);
            v207 = v328[0];
            if (HIWORD(v328[0]))
              goto LABEL_50;
          }
          else
          {
            v207 = 0;
          }
          v333[0] = 0;
          v239 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v298, (const void *)*MEMORY[0x24BE11428]);
          if (v239 && (v240 = v239, v241 = CFGetTypeID(v239), v241 == CFNumberGetTypeID()))
          {
            CFNumberGetValue(v240, kCFNumberIntType, v333);
            v206 = v333[0];
          }
          else
          {
            v206 = 0;
          }
          v114 = v294;
          goto LABEL_413;
        }
        LOWORD(v141) = 0;
      }
      v206 = 0;
      v207 = 0;
LABEL_413:
      if (*(_QWORD *)(v5 + 1352))
      {
        memset(v328, 0, sizeof(v328));
        v329 = 0u;
        memset(v330, 0, 184);
        if (v114 <= 0)
          v242 = 583;
        else
          v242 = 591;
        LOWORD(v328[1]) = v242;
        v328[2] = *(unsigned __int16 *)v115 | v292;
        LOWORD(v328[3]) = v35;
        HIWORD(v328[7]) = v141;
        v330[4] = v340;
        v330[5] = v341;
        v330[2] = v338;
        v330[3] = v339;
        v330[8] = v344;
        v330[9] = v345;
        v330[6] = v342;
        v330[7] = v343;
        v330[0] = v336;
        v330[1] = v337;
        *(_OWORD *)&v328[8] = valuePtr;
        v329 = v335;
        WORD2(v330[10]) = v207;
        LODWORD(v330[10]) = v206;
        WORD3(v330[10]) = 256;
        if (v35 >= 1)
        {
          v243 = (_WORD *)&v330[10] + 4;
          v244 = (double *)__b;
          v245 = (double *)v347;
          v246 = v35;
          do
          {
            v247 = *v245++;
            v248 = vcvtd_n_s64_f64(v247, 8uLL);
            v249 = *v244++;
            *(v243 - 109) = v248;
            *v243++ = vcvtd_n_s64_f64(v249, 8uLL);
            --v246;
          }
          while (v246);
        }
        v250 = *(H9ISP::H9ISPDevice **)(v113 + 24);
        v251 = *(_DWORD *)(v5 + 1260);
        v252 = 248;
      }
      else
      {
        memset(v328, 0, sizeof(v328));
        memset(v330, 0, 168);
        v329 = 0u;
        if (v114 <= 0)
          v253 = 546;
        else
          v253 = 588;
        LOWORD(v328[1]) = v253;
        v328[2] = *(unsigned __int16 *)v115;
        LOWORD(v328[3]) = v35;
        HIWORD(v328[7]) = v141;
        v330[4] = v340;
        v330[5] = v341;
        v330[2] = v338;
        v330[3] = v339;
        v330[8] = v344;
        v330[9] = v345;
        v330[6] = v342;
        v330[7] = v343;
        v330[0] = v336;
        v330[1] = v337;
        *(_OWORD *)&v328[8] = valuePtr;
        v329 = v335;
        WORD2(v330[10]) = v207;
        LODWORD(v330[10]) = v206;
        WORD3(v330[10]) = 256;
        if (v35 >= 1)
        {
          v254 = (_WORD *)((unint64_t)v328 | 0xE);
          v255 = (double *)v347;
          v256 = v35;
          do
          {
            v257 = *v255++;
            *v254++ = vcvtd_n_s64_f64(v257, 8uLL);
            --v256;
          }
          while (v256);
        }
        v250 = *(H9ISP::H9ISPDevice **)(v113 + 24);
        v251 = *(_DWORD *)(v5 + 1260);
        v252 = 232;
      }
      v258 = H9ISP::H9ISPDevice::ISP_SendCommand(v250, (unsigned __int8 *)v328, v252, 0, v251);
      H9ISPLogger(6, "H9ISPCaptureDevice: Initiating delta-EV bracketed capture operation. result=0x%08X\n", v258);
      if (v258)
        goto LABEL_50;
      v259 = (uint64_t *)v350;
      v260 = v35 + *(unsigned __int8 *)(v5 + 420);
      v140 = keyb;
      v261 = keyb;
      do
      {
        v262 = *v259++;
        *(_DWORD *)(v262 + 56) += v260;
        --v261;
      }
      while (v261);
      v9 = v320;
      goto LABEL_432;
    }
    v39 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F60]);
    v40 = v39;
    if (!v39 || (v41 = CFGetTypeID(v39), v41 != CFArrayGetTypeID()))
    {
      v42 = 0;
LABEL_144:
      if (v35 >= 1)
      {
        v103 = 0;
        v104 = __b;
        do
        {
          if (v42)
          {
            v105 = (const __CFNumber *)CFArrayGetValueAtIndex(v40, v103);
            CFNumberGetValue(v105, kCFNumberDoubleType, v104);
          }
          else
          {
            *v104 = *((_QWORD *)v347 + v103);
          }
          ++v103;
          ++v104;
        }
        while (v35 != v103);
      }
      goto LABEL_150;
    }
    if (CFArrayGetCount(v40) == v35)
    {
      v42 = 1;
      goto LABEL_144;
    }
LABEL_223:
    v10 = 4294954516;
    goto LABEL_50;
  }
  if (!v315)
  {
    v9 = v320;
    if (v306)
    {
      v296 = v19;
      v290 = a4;
      v55 = (const void *)*MEMORY[0x24BE10EF0];
      v56 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x24BE10EF0]);
      if (!v56)
        goto LABEL_288;
      v57 = v56;
      v309 = v33;
      v58 = CFArrayGetCount(v56);
      v10 = 4294954516;
      if (v58 > 7)
        goto LABEL_6;
      v59 = v58;
      if (!v58)
        goto LABEL_6;
      memset(v347, 0, 32);
      memset(__b, 0, 32);
      if (v58 >= 1)
      {
        v60 = 0;
        v61 = v347;
        do
        {
          v62 = (const __CFNumber *)CFArrayGetValueAtIndex(v57, v60);
          CFNumberGetValue(v62, kCFNumberSInt32Type, v61);
          ++v60;
          v61 = (_OWORD *)((char *)v61 + 4);
        }
        while (v59 != v60);
      }
      v317 = v59;
      if (!*(_QWORD *)(v5 + 1352))
      {
LABEL_302:
        v179 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11158]);
        v180 = 0;
        v181 = (const void *)*MEMORY[0x24BDBD270];
        v182 = (v317 + 1);
        if (v309 <= 1)
          v183 = 1;
        else
          v183 = v309;
        keyd = (char *)v183;
        v314 = v183;
        while (1)
        {
          if (v179)
          {
            v184 = CFEqual(v179, v181);
            v185 = *((_QWORD *)v350 + v180);
            *(_BYTE *)(v185 + 420) = v184;
          }
          else
          {
            v185 = *((_QWORD *)v350 + v180);
          }
          if (*(_BYTE *)(v185 + 523))
          {
            if (!*(_BYTE *)(v185 + 888))
              goto LABEL_463;
            if (H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v185 + 88), 7, v182))
              break;
            if (*(_BYTE *)(v185 + 523))
            {
LABEL_463:
              if (*(_BYTE *)(v185 + 1008)
                && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v185 + 88), 9, v182))
              {
                break;
              }
            }
          }
          if (v31
            && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v185 + 88), 19, v182))
          {
            break;
          }
          if (keyd == (char *)++v180)
          {
            v10 = 4294954516;
            v186 = v314;
            goto LABEL_322;
          }
        }
        v10 = 4294954610;
        v186 = v180;
LABEL_322:
        v9 = v320;
        v187 = v290;
        v188 = v297;
        if (v186 != v309)
          goto LABEL_6;
        v189 = v299 | cf2 ? v301 : 1;
        v190 = *(_QWORD *)(v5 + 1352) ? 8 : 3;
        if (H9ISP::H9ISPDevice::SetAEBracketingMode(*(H9ISP::H9ISPDevice **)(v290 + 24), *v297, v190, v189)|| H9ISP::H9ISPDevice::EnableSqrtToneCurve(*(H9ISP::H9ISPDevice **)(v290 + 24), *v297, 0))
        {
          goto LABEL_6;
        }
        LOWORD(v191) = (_WORD)v298;
        if (v298)
        {
          v192 = CFGetTypeID(v298);
          if (v192 == CFDictionaryGetTypeID())
          {
            v193 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v298, (const void *)*MEMORY[0x24BE11220]);
            if (!v193)
              goto LABEL_435;
            v194 = v193;
            v195 = CFGetTypeID(v193);
            v196 = v195 == CFArrayGetTypeID();
            v9 = v320;
            if (!v196)
              goto LABEL_6;
            if (CFArrayGetCount(v194))
            {
              v197 = 0;
              v198 = (_WORD *)&valuePtr + 3;
              while (1)
              {
                v199 = (const __CFDictionary *)CFArrayGetValueAtIndex(v194, v197);
                if (!v199)
                  break;
                v200 = v199;
                v201 = CFGetTypeID(v199);
                if (v201 != CFDictionaryGetTypeID())
                  break;
                v328[0] = 0;
                v333[0] = 0;
                v332[0] = 0;
                *(_QWORD *)v327 = 0;
                if (H9ISPGetRectParamsFromDict(v200, v328, v333, v332, &v327[1], v327, 1u))
                  break;
                *(_DWORD *)(v198 - 3) = v197;
                *(v198 - 1) = v328[0];
                *v198 = v333[0];
                v198[1] = v332[0];
                v198[2] = v327[1];
                v191 = v197 + 1;
                v202 = CFArrayGetCount(v194);
                if (v197 <= 0xE)
                {
                  v198 += 6;
                  ++v197;
                  if (v191 < v202)
                    continue;
                }
                goto LABEL_440;
              }
              LOWORD(v191) = v197;
            }
            else
            {
LABEL_435:
              LOWORD(v191) = 0;
            }
LABEL_440:
            v9 = v320;
            v187 = v290;
            v235 = v296;
            v188 = v297;
LABEL_441:
            if (*(_QWORD *)(v5 + 1352))
            {
              v329 = 0u;
              memset(v330, 0, 184);
              memset(v328, 0, sizeof(v328));
              if (v235 <= 0)
                v267 = 584;
              else
                v267 = 592;
              LOWORD(v328[1]) = v267;
              v328[2] = *(unsigned __int16 *)v188 | v292;
              v268 = v317;
              LOWORD(v328[3]) = v317;
              if (v317 >= 1)
              {
                v269 = (_WORD *)&v330[10] + 4;
                v270 = (int *)__b;
                v271 = (int *)v347;
                v272 = v317;
                do
                {
                  v273 = *v271++;
                  *(v269 - 109) = v273;
                  v274 = *v270++;
                  *v269++ = v274;
                  --v272;
                }
                while (v272);
              }
              HIWORD(v328[7]) = v191;
              v330[6] = v342;
              v330[7] = v343;
              v330[8] = v344;
              v330[9] = v345;
              v330[2] = v338;
              v330[3] = v339;
              v330[4] = v340;
              v330[5] = v341;
              *(_OWORD *)&v328[8] = valuePtr;
              v329 = v335;
              v330[0] = v336;
              v330[1] = v337;
              WORD2(v330[10]) = 0;
              LODWORD(v330[10]) = 0;
              v275 = *(H9ISP::H9ISPDevice **)(v187 + 24);
              v276 = *(_DWORD *)(v5 + 1260);
              v277 = 248;
            }
            else
            {
              memset(v330, 0, 168);
              v329 = 0u;
              memset(v328, 0, sizeof(v328));
              if (v235 <= 0)
                v278 = 573;
              else
                v278 = 589;
              LOWORD(v328[1]) = v278;
              v328[2] = *(unsigned __int16 *)v188;
              v268 = v317;
              LOWORD(v328[3]) = v317;
              if (v317 >= 1)
              {
                v279 = (_WORD *)((unint64_t)v328 | 0xE);
                v280 = (int *)v347;
                v281 = v317;
                do
                {
                  v282 = *v280++;
                  *v279++ = v282;
                  --v281;
                }
                while (v281);
              }
              HIWORD(v328[7]) = v191;
              v330[6] = v342;
              v330[7] = v343;
              v330[8] = v344;
              v330[9] = v345;
              v330[2] = v338;
              v330[3] = v339;
              v330[4] = v340;
              v330[5] = v341;
              *(_OWORD *)&v328[8] = valuePtr;
              v329 = v335;
              v330[0] = v336;
              v330[1] = v337;
              WORD2(v330[10]) = 0;
              LODWORD(v330[10]) = 0;
              v275 = *(H9ISP::H9ISPDevice **)(v187 + 24);
              v276 = *(_DWORD *)(v5 + 1260);
              v277 = 232;
            }
            v283 = H9ISP::H9ISPDevice::ISP_SendCommand(v275, (unsigned __int8 *)v328, v277, 0, v276);
            H9ISPLogger(6, "H9ISPCaptureDevice: Initiating OIS bracketed capture operation. result=0x%08X\n", v283);
            if (!v283)
            {
              v284 = (uint64_t *)v350;
              v285 = v268 + *(unsigned __int8 *)(v5 + 420);
              v140 = keyd;
              v286 = keyd;
              do
              {
                v287 = *v284++;
                *(_DWORD *)(v287 + 56) += v285;
                --v286;
              }
              while (v286);
              goto LABEL_432;
            }
            goto LABEL_6;
          }
          LOWORD(v191) = 0;
        }
        v235 = v296;
        goto LABEL_441;
      }
      v63 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11120]);
      if (v63)
      {
        v64 = v63;
        v65 = CFGetTypeID(v63);
        v66 = v59;
        if (v65 == CFDictionaryGetTypeID())
        {
          v67 = (const __CFArray *)CFDictionaryGetValue(v64, v55);
          v68 = v67;
          if (v67)
          {
            v69 = CFGetTypeID(v67);
            if (v69 == CFArrayGetTypeID())
            {
              if (CFArrayGetCount(v68) != v59)
                goto LABEL_223;
              v70 = 1;
              goto LABEL_296;
            }
          }
        }
        else
        {
          v68 = 0;
        }
        v70 = 0;
      }
      else
      {
        v68 = 0;
        v70 = 0;
        v66 = v317;
      }
LABEL_296:
      if (v66 >= 1)
      {
        v176 = 0;
        v177 = __b;
        do
        {
          if (v70)
          {
            v178 = (const __CFNumber *)CFArrayGetValueAtIndex(v68, v176);
            CFNumberGetValue(v178, kCFNumberSInt32Type, v177);
          }
          else
          {
            *v177 = *((_DWORD *)v347 + v176);
          }
          ++v176;
          ++v177;
        }
        while (v317 != v176);
      }
      goto LABEL_302;
    }
    if (v304)
    {
      v291 = a4;
      if (a1)
      {
        v101 = CFGetTypeID(a1);
        TypeID = CFDictionaryGetTypeID();
        v102 = v320;
        if (v101 == TypeID
          && (TypeID = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F78])) != 0)
        {
          TypeID = CFEqual((CFTypeRef)TypeID, (CFTypeRef)*MEMORY[0x24BDBD270]);
          LOWORD(a1) = (_DWORD)TypeID != 0;
        }
        else
        {
          LOWORD(a1) = 0;
        }
      }
      else
      {
        v102 = v320;
      }
      v154 = 0;
      while (1)
      {
        v155 = *((_QWORD *)v350 + v154);
        if (*(_BYTE *)(v155 + 523))
        {
          if (!*(_BYTE *)(v155 + 888))
            goto LABEL_464;
          TypeID = H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v155 + 88), 7, 1uLL);
          if ((_DWORD)TypeID)
            break;
          if (*(_BYTE *)(v155 + 523))
          {
LABEL_464:
            if (*(_BYTE *)(v155 + 1008))
            {
              TypeID = H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v155 + 88), 9, 1uLL);
              if ((_DWORD)TypeID)
                break;
            }
          }
        }
        if (v31)
        {
          TypeID = H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v155 + 88), 19, 1uLL);
          if ((_DWORD)TypeID)
            break;
        }
        if (v33 == (char *)++v154)
        {
          v156 = v33;
          v10 = 4294954516;
          LODWORD(v154) = (_DWORD)v156;
          goto LABEL_253;
        }
      }
      v156 = v33;
      v10 = 4294954610;
LABEL_253:
      v9 = v102;
      if ((_DWORD)v154 != (_DWORD)v156)
        goto LABEL_6;
      v140 = v156;
      v157 = *(_QWORD *)(*(_QWORD *)(v291 + 24) + 56);
      v158 = *v297;
      if (*(_DWORD *)(v157 + 80 * *v297 + 16) != 1718775412)
        goto LABEL_389;
      if (!*(_QWORD *)(v5 + 1264))
      {
        TypeID = (uint64_t)H9ISPDisplayStrobePrepare();
        *(_QWORD *)(v5 + 1264) = TypeID;
        v158 = *v297;
        if (*(_DWORD *)(v157 + 80 * *v297 + 16) != 1718775412)
          goto LABEL_389;
      }
      if (!*(_QWORD *)(v5 + 1264))
        goto LABEL_389;
      if (!H9ISP::H9ISPDevice::PrepareCommand(*(H9ISP::H9ISPDevice **)(v291 + 24), v158, 1))
      {
        H9ISPDisplayStrobeSetScreenBrightness(*(_QWORD *)(v5 + 1264), 0);
        if (dword_2542912F0)
        {
          v159 = (double)HIBYTE(dword_2542912F0) * 0.00390625;
          v160 = (double)BYTE2(dword_2542912F0) * 0.00390625;
          v161 = (double)BYTE1(dword_2542912F0) * 0.00390625;
          v162 = (double)dword_2542912F0 * 0.00390625;
          H9ISPLogger(6, "Override Display Strobe RGBA Params R=%4.3f G=%4.3f B=%4.3f A=%4.3f\n", v159, v160, v161, v162);
        }
        else
        {
          v159 = (double)*(unsigned __int16 *)(v5 + 1272) * 0.0000152587891;
          v160 = (double)*(unsigned __int16 *)(v5 + 1274) * 0.0000152587891;
          v161 = (double)*(unsigned __int16 *)(v5 + 1276) * 0.0000152587891;
          H9ISPLogger(6, "Current AWB RGBEstimate R=0x%04X (%4.3f) G=0x%04X (%4.3f) B=0x%04X (%4.3f)\n", *(unsigned __int16 *)(v5 + 1272), v159, *(unsigned __int16 *)(v5 + 1274), v160, *(unsigned __int16 *)(v5 + 1276), v161);
          v162 = 1.0;
        }
        *(double *)v328 = v159;
        *(double *)&v328[2] = v160;
        *(double *)&v328[4] = v161;
        *(double *)&v328[6] = v162;
        H9ISPDisplayStrobeSetScreenColor(*(_QWORD *)(v5 + 1264), (const CGFloat *)v328);
        TypeID = usleep(0x3A98u);
        LOWORD(v158) = *(_WORD *)v297;
LABEL_389:
        *(_QWORD *)v328 = 0x21C00000000;
        *(_OWORD *)&v328[7] = 0u;
        v328[2] = (unsigned __int16)v158 | v292;
        LOWORD(v328[3]) = (_WORD)a1;
        *(_QWORD *)((char *)&v328[3] + 2) = 0;
        *(_QWORD *)&v328[5] = 0;
        LOWORD(v328[7]) = -1;
        v328[8] = v301;
        v328[9] = H9ISP::getCameraStrobeMaxLoad((H9ISP *)TypeID);
        v230 = *(_QWORD *)(v291 + 184);
        if (v230)
          H9ISP::H9ISPPhotometerManager::PhotometerCommand(v230, 0);
        if (!H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v291 + 24), (unsigned __int8 *)v328, 0x2Cu, 0, 0xFFFFFFFF))
        {
          H9ISPLogger(6, "H9ISPCaptureDevice: Initiating shutter+strobe operation. result=0x%08X\n", 0);
          v232 = (uint64_t *)v350;
          v233 = v140;
          do
          {
            v234 = *v232++;
            ++*(_DWORD *)(v234 + 56);
            --v233;
          }
          while (v233);
          goto LABEL_432;
        }
        if (*(_QWORD *)(v5 + 1264))
          DisableDisplayStrobeOverlay(v5);
        v231 = *(_QWORD *)(v291 + 184);
        if (v231)
          H9ISP::H9ISPPhotometerManager::PhotometerCommand(v231, 1);
        goto LABEL_6;
      }
LABEL_124:
      v10 = 4294954611;
      goto LABEL_6;
    }
    if (*(_BYTE *)(v5 + 1128))
    {
      if (!H9ISP::H9ISPDevice::CaptureNow(*(H9ISP::H9ISPDevice **)(a4 + 24), *v297, 0))
      {
        H9ISPLogger(6, "H9ISPCaptureDevice: Initiating context-switch capture operation. result=0x%08X\n", 0);
        ++*(_DWORD *)(v5 + 56);
        v140 = v33;
LABEL_432:
        v263 = (uint64_t *)v350;
        v10 = 0;
        do
        {
          v264 = *v263++;
          v265 = *(NSObject **)(v264 + 1336);
          v266 = dispatch_time(0, 5000000000);
          dispatch_source_set_timer(v265, v266, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
          --v140;
        }
        while (v140);
        goto LABEL_6;
      }
LABEL_288:
      v10 = 4294954516;
      goto LABEL_6;
    }
    if (!*(_BYTE *)(v5 + 523) || !*(_BYTE *)(v5 + 888) && !*(_BYTE *)(v5 + 1008))
      goto LABEL_288;
    v174 = 0;
    while (1)
    {
      v175 = *((_QWORD *)v350 + (_QWORD)v174);
      if (*(_BYTE *)(v175 + 888))
      {
        if (H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v175 + 88), 7, 1uLL))
          break;
      }
      if (*(_BYTE *)(v175 + 1008)
        && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v175 + 88), 9, 1uLL)
        || v31
        && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v175 + 88), 19, 1uLL))
      {
        break;
      }
      if (v33 == ++v174)
      {
        v174 = v33;
        v10 = 4294954516;
        v140 = v174;
        goto LABEL_349;
      }
    }
    v140 = v33;
    v10 = 4294954610;
LABEL_349:
    if ((_DWORD)v174 != (_DWORD)v140)
      goto LABEL_6;
    *(_QWORD *)v328 = 0x12A00000000;
    v328[2] = *(unsigned __int16 *)v297 | v292;
    if (!H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), (unsigned __int8 *)v328, 0xCu, 0, 0xFFFFFFFF))
    {
      H9ISPLogger(6, "H9ISPCaptureDevice: Initiating time-machine capture operation. result=0x%08X\n", 0);
      v203 = (uint64_t *)v350;
      v204 = v140;
      do
      {
        v205 = *v203++;
        ++*(_DWORD *)(v205 + 56);
        --v204;
      }
      while (v204);
      goto LABEL_432;
    }
LABEL_5:
    v10 = 4294954608;
    goto LABEL_6;
  }
  v295 = v19;
  memset_pattern16(__b, &unk_2358295C0, 0x20uLL);
  memset_pattern16(v347, &unk_2358295D0, 0x20uLL);
  memset_pattern16(v332, &unk_2358295C0, 0x20uLL);
  memset_pattern16(v333, &unk_2358295D0, 0x20uLL);
  theArraya = (CFArrayRef)CFArrayGetCount(v312);
  v9 = v320;
  if ((unint64_t)theArraya - 8 < 0xFFFFFFFFFFFFFFF9)
    goto LABEL_288;
  v308 = v33;
  v289 = a4;
  v43 = 0;
  v44 = 0;
  keya = (void *)*MEMORY[0x24BE11098];
  v316 = (void *)*MEMORY[0x24BE11068];
  do
  {
    v45 = (const __CFDictionary *)CFArrayGetValueAtIndex(v312, v43);
    if (!v45)
      break;
    v46 = v45;
    v47 = CFGetTypeID(v45);
    if (v47 != CFDictionaryGetTypeID())
      break;
    v48 = (const __CFNumber *)CFDictionaryGetValue(v46, keya);
    v49 = (const __CFNumber *)CFDictionaryGetValue(v46, v316);
    if (!v48)
      break;
    v50 = v49;
    if (!v49)
      break;
    CFNumberGetValue(v48, kCFNumberSInt32Type, (char *)v347 + v44);
    CFNumberGetValue(v50, kCFNumberSInt32Type, (char *)__b + v44);
    v44 += 4;
    ++v43;
  }
  while (v43 < theArraya);
  if (*(_QWORD *)(v5 + 1352))
  {
    v51 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110D0]);
    v52 = v51;
    if (v51 && (v53 = CFGetTypeID(v51), v53 == CFArrayGetTypeID()))
    {
      if ((CFArrayRef)CFArrayGetCount(v52) != theArraya)
        goto LABEL_223;
      v313 = v52;
      v54 = 1;
    }
    else
    {
      v313 = v52;
      v54 = 0;
    }
    v118 = 0;
    v119 = 1;
    do
    {
      if (v54)
      {
        v120 = (const __CFDictionary *)CFArrayGetValueAtIndex(v313, v118);
        if (!v120)
          break;
        v121 = v120;
        v122 = CFGetTypeID(v120);
        if (v122 != CFDictionaryGetTypeID())
          break;
        v123 = (const __CFNumber *)CFDictionaryGetValue(v121, keya);
        v124 = (const __CFNumber *)CFDictionaryGetValue(v121, v316);
        if (!v123)
          break;
        v125 = v124;
        if (!v124)
          break;
        CFNumberGetValue(v123, kCFNumberSInt32Type, &v333[v118]);
        CFNumberGetValue(v125, kCFNumberSInt32Type, &v332[v118]);
      }
      else
      {
        v333[v118] = *((_DWORD *)v347 + v118);
        v332[v118] = *((_DWORD *)__b + v118);
      }
      v118 = v119;
      v126 = (unint64_t)theArraya > v119++;
    }
    while (v126);
  }
  v127 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11158]);
  v128 = 0;
  v129 = (const void *)*MEMORY[0x24BDBD270];
  v130 = ((_DWORD)theArraya + 1);
  if (v308 <= 1)
    v131 = 1;
  else
    v131 = v308;
  keyc = (char *)v131;
  v319 = v131;
  while (1)
  {
    if (v127)
    {
      v132 = CFEqual(v127, v129);
      v133 = *((_QWORD *)v350 + v128);
      *(_BYTE *)(v133 + 420) = v132;
    }
    else
    {
      v133 = *((_QWORD *)v350 + v128);
    }
    if (*(_BYTE *)(v133 + 523))
    {
      if (!*(_BYTE *)(v133 + 888))
        goto LABEL_465;
      if (H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v133 + 88), 7, v130))
        break;
      if (*(_BYTE *)(v133 + 523))
      {
LABEL_465:
        if (*(_BYTE *)(v133 + 1008)
          && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v133 + 88), 9, v130))
        {
          break;
        }
      }
    }
    if (v31 && H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(*(_QWORD *)(v133 + 88), 19, v130))
      break;
    if (keyc == (char *)++v128)
    {
      v10 = 4294954516;
      v134 = v319;
      goto LABEL_210;
    }
  }
  v10 = 4294954610;
  v134 = v128;
LABEL_210:
  v9 = v320;
  v135 = v289;
  v136 = v295;
  v137 = v297;
  if (v134 == v308)
  {
    if (*(_QWORD *)(v5 + 1352))
      v138 = 7;
    else
      v138 = 2;
    if (cf)
    {
      v139 = CFGetTypeID(cf);
      if (v139 == CFStringGetTypeID())
      {
        v136 = v295;
        if (CFEqual(cf, (CFTypeRef)*MEMORY[0x24BE10FB0]))
        {
          v300 = 0;
          if (*(_QWORD *)(v5 + 1352))
            v138 = 7;
          else
            v138 = 2;
        }
        else if (CFEqual(cf, (CFTypeRef)*MEMORY[0x24BE10FA0]))
        {
          v300 = 0;
          if (*(_QWORD *)(v5 + 1352))
            v138 = 5;
          else
            v138 = 0;
        }
        else
        {
          v228 = CFEqual(cf, (CFTypeRef)*MEMORY[0x24BE10FA8]);
          if (*(_QWORD *)(v5 + 1352))
            v138 = 6;
          else
            v138 = 1;
          v229 = v300;
          if (!v228)
            v229 = 0;
          v300 = v229;
        }
      }
      else
      {
        v136 = v295;
      }
    }
    if (!H9ISP::H9ISPDevice::SetAEBracketingMode(*(H9ISP::H9ISPDevice **)(v289 + 24), *v297, v138, v301)
      && !H9ISP::H9ISPDevice::EnableSqrtToneCurve(*(H9ISP::H9ISPDevice **)(v289 + 24), *v297, v300))
    {
      LOWORD(v163) = (_WORD)v298;
      if (v298)
      {
        v164 = CFGetTypeID(v298);
        if (v164 == CFDictionaryGetTypeID()
          && (v165 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v298, (const void *)*MEMORY[0x24BE11220])) != 0)
        {
          v166 = v165;
          v167 = CFGetTypeID(v165);
          if (v167 != CFArrayGetTypeID())
            goto LABEL_6;
          if (CFArrayGetCount(v166))
          {
            v168 = 0;
            v169 = (_WORD *)&valuePtr + 3;
            while (1)
            {
              v170 = (const __CFDictionary *)CFArrayGetValueAtIndex(v166, v168);
              if (!v170)
                break;
              v171 = v170;
              v172 = CFGetTypeID(v170);
              if (v172 != CFDictionaryGetTypeID())
                break;
              v328[0] = 0;
              *(_QWORD *)v326 = 0;
              *(_QWORD *)v327 = 0;
              if (H9ISPGetRectParamsFromDict(v171, v328, &v327[1], v327, &v326[1], v326, 1u))
                break;
              *(_DWORD *)(v169 - 3) = v168;
              *(v169 - 1) = v328[0];
              *v169 = v327[1];
              v169[1] = v327[0];
              v169[2] = v326[1];
              v163 = v168 + 1;
              v173 = CFArrayGetCount(v166);
              if (v168 <= 0xE)
              {
                v169 += 6;
                ++v168;
                if (v163 < v173)
                  continue;
              }
              goto LABEL_438;
            }
            LOWORD(v163) = v168;
          }
          else
          {
            LOWORD(v163) = 0;
          }
LABEL_438:
          v9 = v320;
          v135 = v289;
          v136 = v295;
          v137 = v297;
        }
        else
        {
          LOWORD(v163) = 0;
        }
      }
      v210 = *(_QWORD *)(v5 + 1352);
      if (v210)
      {
        v211 = 0;
        v331 = 0;
        v329 = 0u;
        memset(v330, 0, sizeof(v330));
        memset(v328, 0, sizeof(v328));
        v212 = *(unsigned __int16 *)v137;
        *(_OWORD *)((char *)&v330[3] + 4) = v337;
        *(_OWORD *)((char *)&v330[2] + 4) = v336;
        *(_OWORD *)((char *)&v330[1] + 4) = v335;
        *(_OWORD *)((char *)&v330[7] + 4) = v341;
        *(_OWORD *)((char *)&v330[6] + 4) = v340;
        *(_OWORD *)((char *)&v330[5] + 4) = v339;
        *(_OWORD *)((char *)&v330[4] + 4) = v338;
        *(_OWORD *)((char *)&v330[11] + 4) = v345;
        *(_OWORD *)((char *)&v330[10] + 4) = v344;
        *(_OWORD *)((char *)&v330[9] + 4) = v343;
        *(_OWORD *)((char *)&v330[8] + 4) = v342;
        v213 = v136 <= 0 ? 582 : 590;
        LOWORD(v328[1]) = v213;
        v328[2] = v292 | v212;
        v214 = 1;
        v215 = 292;
        LOWORD(v328[3]) = (_WORD)theArraya;
        LOWORD(v330[0]) = v163;
        *(_OWORD *)((char *)v330 + 4) = valuePtr;
        do
        {
          v216 = &v328[v211];
          v216[4] = *(_DWORD *)((char *)v347 + v211 * 4);
          v217 = (_WORD *)((char *)v328 + v215);
          *(v217 - 122) = *(_DWORD *)((char *)__b + v211 * 4);
          v216[65] = v333[v211];
          *v217 = v332[v211++];
          v126 = (unint64_t)theArraya > v214++;
          v215 += 2;
        }
        while (v126);
        v218 = *(H9ISP::H9ISPDevice **)(v135 + 24);
        v219 = *(_DWORD *)(v5 + 1260);
        v220 = 308;
      }
      else
      {
        memset(v330, 0, 196);
        v329 = 0u;
        memset(v328, 0, sizeof(v328));
        v221 = *(unsigned __int16 *)v137;
        *(_OWORD *)((char *)&v330[3] + 4) = v337;
        *(_OWORD *)((char *)&v330[2] + 4) = v336;
        *(_OWORD *)((char *)&v330[1] + 4) = v335;
        *(_OWORD *)((char *)&v330[7] + 4) = v341;
        *(_OWORD *)((char *)&v330[6] + 4) = v340;
        *(_OWORD *)((char *)&v330[5] + 4) = v339;
        *(_OWORD *)((char *)&v330[4] + 4) = v338;
        *(_OWORD *)((char *)&v330[11] + 4) = v345;
        *(_OWORD *)((char *)&v330[10] + 4) = v344;
        *(_OWORD *)((char *)&v330[9] + 4) = v343;
        *(_OWORD *)((char *)&v330[8] + 4) = v342;
        v222 = v136 <= 0 ? 563 : 587;
        LOWORD(v328[1]) = v222;
        v328[2] = v221;
        LOWORD(v328[3]) = (_WORD)theArraya;
        LOWORD(v330[0]) = v163;
        *(_OWORD *)((char *)v330 + 4) = valuePtr;
        do
        {
          v328[v210 + 4] = *((_DWORD *)v347 + v210);
          *((_WORD *)&v328[12] + v210) = *((_DWORD *)__b + v210);
          ++v210;
        }
        while ((unint64_t)theArraya > v210);
        v218 = *(H9ISP::H9ISPDevice **)(v135 + 24);
        v219 = *(_DWORD *)(v5 + 1260);
        v220 = 260;
      }
      v223 = H9ISP::H9ISPDevice::ISP_SendCommand(v218, (unsigned __int8 *)v328, v220, 0, v219);
      H9ISPLogger(6, "H9ISPCaptureDevice: Initiating manual bracketed capture operation. result=0x%08X\n", v223);
      if (!v223)
      {
        v224 = (uint64_t *)v350;
        v225 = (_DWORD)theArraya + *(unsigned __int8 *)(v5 + 420);
        v140 = keyc;
        v226 = keyc;
        do
        {
          v227 = *v224++;
          *(_DWORD *)(v227 + 56) += v225;
          --v226;
        }
        while (v226);
        goto LABEL_432;
      }
    }
  }
LABEL_6:
  if (v8)
  {
    UnlockStreamMutexes(v8);
    pthread_mutex_lock(v9);
    CFRelease(v8);
  }
  return v10;
}

uint64_t AutoAENow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  v4 = H9ISP::H9ISPDevice::AEUpdateSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84));
  H9ISPLogger(6, "H9ISPCaptureDevice: Reverting to auto-exposure, result=0x%08X\n", v4);
  if (v4)
    return 4294954516;
  else
    return 0;
}

uint64_t AutoFocusNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v6;
  unsigned int v7;
  int v8;
  unsigned __int8 v9[8];
  unsigned int v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 56))
    return 4294954608;
  v6 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v6 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v7 = v6 & 0x8000FFFF;
  if (*(_DWORD *)(a2 + 492) == -1)
  {
    *(_QWORD *)v9 = 0x40700000000;
    v10 = v7;
    v8 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), v9, 0xCu, 0, 0xFFFFFFFF);
    H9ISPLogger(6, "H9ISPCaptureDevice: Initiating auto-focus operation, res=0x%08X\n");
  }
  else
  {
    *(_QWORD *)v9 = 0x840800000000;
    v10 = v7;
    v11 = 0x600000000;
    v8 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), v9, 0x14u, 0, 0xFFFFFFFF);
    H9ISPLogger(6, "H9ISPCaptureDevice: Initiating peak tracking auto-focus operation, res=0x%08X\n");
  }
  if (v8)
    return 4294954516;
  result = 0;
  *(_BYTE *)(a2 + 408) = 1;
  return result;
}

uint64_t SetDeferAdditionOfAttachments(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  const char *v5;
  int v6;
  uint64_t v7;

  if (!a1)
  {
    v5 = "False";
    goto LABEL_7;
  }
  v4 = CFGetTypeID(a1);
  v5 = "False";
  if (v4 != CFBooleanGetTypeID())
  {
LABEL_7:
    v7 = 4294954516;
    goto LABEL_8;
  }
  v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
  v7 = 0;
  if (v6)
    v5 = "True";
  *(_BYTE *)(a2 + 520) = v6 != 0;
LABEL_8:
  H9ISPLogger(6, "H9ISPCaptureDevice: SetDeferAdditionOfAttachments: %s (err=%d) \n", v5, v7);
  return v7;
}

uint64_t CopyDeferAdditionOfAttachments(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef *v4;
  CFTypeRef v5;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (*(_BYTE *)(a3 + 520))
    v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t CopyPortType(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  int v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFTypeRef *v10;
  CFTypeRef v11;

  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 56) + 80 * *(unsigned int *)(a3 + 84) + 16);
  if (v6 == 1718775412)
  {
    v10 = (CFTypeRef *)MEMORY[0x24BE105B0];
  }
  else
  {
    if (v6 == 1919251564)
    {
      v7 = byte_254291304;
      v8 = (CFTypeRef *)MEMORY[0x24BE10588];
      v9 = (CFTypeRef *)MEMORY[0x24BE105A8];
    }
    else
    {
      if (v6 != 1919246706)
      {
        v11 = 0;
        goto LABEL_12;
      }
      v7 = byte_254291304;
      v8 = (CFTypeRef *)MEMORY[0x24BE105A8];
      v9 = (CFTypeRef *)MEMORY[0x24BE10588];
    }
    if (v7)
      v10 = v8;
    else
      v10 = v9;
  }
  v11 = *v10;
  CFRetain(*v10);
LABEL_12:
  *a2 = v11;
  return 0;
}

uint64_t SetTemporalNoiseReductionEnabled(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  int v5;
  uint64_t v6;
  const char *v7;

  if (a1 && (v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
    v6 = 0;
    *(_BYTE *)(a2 + 62) = v5 != 0;
  }
  else
  {
    v6 = 4294954516;
  }
  if (*(_BYTE *)(a2 + 62) == 1)
    v7 = "True";
  else
    v7 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: Enable TNR: %s\n", v7);
  return v6;
}

uint64_t CopyTemporalNoiseReductionEnabled(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef *v4;
  CFTypeRef v5;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (*(_BYTE *)(a3 + 62))
    v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t SetFaceDetectionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  CFTypeID v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  const char *v16;
  _BYTE __dst[116];
  _BYTE v19[116];
  int v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_18;
  v7 = *(unsigned __int8 *)(a2 + 61);
  v8 = CFGetTypeID(a1);
  if (v8 != CFBooleanGetTypeID())
    goto LABEL_18;
  v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
  *(_BYTE *)(a2 + 61) = v9 != 0;
  v10 = (v7 != 0) ^ (v9 == 0);
  if (!*(_QWORD *)(a2 + 88))
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = 4294954514;
  if ((v10 & 1) == 0 && v9)
  {
    v12 = *(_DWORD *)(a2 + 40);
    v13 = *(_DWORD *)(a2 + 112);
    if (v12 < v13)
      v13 = 0;
    if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v12 - v13) + 16), __dst, v19))
    {
      H9ISPLogger(3, "ActivateFaceDetectionOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n");
LABEL_14:
      v14 = -12780;
LABEL_17:
      H9ISPLogger(3, "Unable to activate face Detection while streaming, error: 0x%08X\n", v14);
LABEL_18:
      v11 = 4294954516;
      goto LABEL_19;
    }
    v15 = H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(a2 + 88), 3, v20, (v21 >> 4) + 1, 8, 0, 0, 1, 0.0, 1, 64, 0x1000000040, 0, 10, 0, 0, CFSTR("FACE"), -1, 0,
            *(_DWORD *)(a2 + 1404));
    if (v15)
    {
      H9ISPLogger(3, "ActivateFaceDetectionOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n", v15);
      v14 = -12786;
      goto LABEL_17;
    }
    if (H9ISP::H9ISPFrameReceiver::StartFaceDetect(*(H9ISP::H9ISPFrameReceiver **)(a2 + 88)))
    {
      H9ISPLogger(3, "ActivateFaceDetectionOutputInFrameReceiver - pFrameReceiver->StartFaceDetect: res=0x%08X\n");
      goto LABEL_14;
    }
    v11 = 0;
  }
LABEL_19:
  if (*(_BYTE *)(a2 + 61) == 1)
    v16 = "True";
  else
    v16 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: Enable Face Detection: %s\n", v16);
  return v11;
}

uint64_t CopyFaceDetectionEnabled(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef *v4;
  CFTypeRef v5;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (*(_BYTE *)(a3 + 61))
    v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t SetLuxAdaptiveParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFArray *Value;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  CFIndex Count;
  uint64_t v20;
  int v21;
  BOOL v22;
  CFIndex v23;
  uint64_t v24;
  int v25;
  CFIndex j;
  const __CFNumber *v27;
  const __CFNumber *v28;
  CFIndex v29;
  uint64_t v30;
  int v31;
  const __CFArray *v32;
  CFIndex v33;
  uint64_t v34;
  int v35;
  CFIndex m;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v41;
  CFIndex k;
  const __CFNumber *v43;
  const __CFNumber *v44;
  H9ISP::H9ISPDevice *v45;
  int v46;
  H9ISP::H9ISPDevice *v47;
  int v48;
  int v49;
  H9ISP::H9ISPDevice *v50;
  int v51;
  H9ISP::H9ISPDevice *v52;
  int v53;
  uint64_t v54;
  const __CFArray *v55;
  int v56;
  __int128 v57[2];
  __int128 v58[2];
  __int128 v59[2];
  __int128 v60[2];
  _BYTE v61[32];
  _BYTE valuePtr[32];
  _BYTE v63[32];
  _BYTE v64[32];
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  __int128 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  v54 = a4;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FE0]);
  v9 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FD8]);
  v10 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11188]);
  v11 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11180]);
  v12 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FF0]);
  v13 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FE8]);
  v14 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FD0]);
  v55 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FC8]);
  if (Value)
    v15 = v9 == 0;
  else
    v15 = 1;
  if (v15)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    Count = CFArrayGetCount(Value);
    if (Count <= 8
      && (v20 = Count, CFArrayGetCount(v9) == Count)
      && (H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 0, &v71),
          !v21))
    {
      *(_WORD *)v64 = 0;
      *(_DWORD *)&v64[28] = v72;
      memset(&v64[4], 0, 24);
      *(_WORD *)&v64[2] = v20;
      if (v20 >= 1)
      {
        for (i = 0; i != v20; ++i)
        {
          *(_DWORD *)v63 = 0;
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(Value, i);
          CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v63);
          *(_WORD *)&v64[2 * i + 4] = *(_WORD *)v63;
          v41 = (const __CFNumber *)CFArrayGetValueAtIndex(v9, i);
          CFNumberGetValue(v41, kCFNumberIntType, v63);
          v64[i + 20] = v63[0];
        }
      }
      v17 = -12780;
      if (H9ISP::H9ISPDevice::DisableKnobManualMode(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 0))
      {
        v16 = 0;
      }
      else
      {
        v47 = *(H9ISP::H9ISPDevice **)(v54 + 24);
        v48 = *(_DWORD *)(a2 + 84);
        v60[0] = *(_OWORD *)v64;
        v60[1] = *(_OWORD *)&v64[16];
        v49 = H9ISP::H9ISPDevice::SetLuxAdaptiveSettings(v47, v48, v60);
        v16 = v49 == 0;
        if (v49)
          v17 = -12780;
        else
          v17 = 0;
      }
    }
    else
    {
      v16 = 0;
      v17 = -12780;
    }
  }
  if (v10)
    v22 = v11 == 0;
  else
    v22 = 1;
  if (v22)
  {
LABEL_25:
    if (!v12)
      goto LABEL_31;
    goto LABEL_26;
  }
  v23 = CFArrayGetCount(v10);
  if (v23 > 8)
    goto LABEL_24;
  v24 = v23;
  if (CFArrayGetCount(v11) != v23)
    goto LABEL_24;
  H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 1, &v69);
  if (v25)
    goto LABEL_24;
  *(_WORD *)v63 = 1;
  *(_DWORD *)&v63[28] = v70;
  memset(&v63[4], 0, 24);
  *(_WORD *)&v63[2] = v24;
  if (v24 >= 1)
  {
    for (j = 0; j != v24; ++j)
    {
      *(_DWORD *)valuePtr = 0;
      v27 = (const __CFNumber *)CFArrayGetValueAtIndex(v10, j);
      CFNumberGetValue(v27, kCFNumberIntType, valuePtr);
      *(_WORD *)&v63[2 * j + 4] = *(_WORD *)valuePtr;
      v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v11, j);
      CFNumberGetValue(v28, kCFNumberIntType, valuePtr);
      v63[j + 20] = valuePtr[0];
    }
  }
  if (H9ISP::H9ISPDevice::DisableKnobManualMode(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 1))
  {
LABEL_24:
    v17 = -12780;
    goto LABEL_25;
  }
  v45 = *(H9ISP::H9ISPDevice **)(v54 + 24);
  v46 = *(_DWORD *)(a2 + 84);
  v59[0] = *(_OWORD *)v63;
  v59[1] = *(_OWORD *)&v63[16];
  if (H9ISP::H9ISPDevice::SetLuxAdaptiveSettings(v45, v46, v59))
    v17 = -12780;
  else
    ++v16;
  if (!v12)
    goto LABEL_31;
LABEL_26:
  if (v13)
  {
    v29 = CFArrayGetCount(v12);
    if (v29 <= 8)
    {
      v30 = v29;
      if (CFArrayGetCount(v13) == v29)
      {
        H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 2, &v67);
        if (!v31)
        {
          *(_WORD *)valuePtr = 2;
          *(_DWORD *)&valuePtr[28] = v68;
          memset(&valuePtr[4], 0, 24);
          *(_WORD *)&valuePtr[2] = v30;
          if (v30 >= 1)
          {
            for (k = 0; k != v30; ++k)
            {
              *(_DWORD *)v61 = 0;
              v43 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, k);
              CFNumberGetValue(v43, kCFNumberIntType, v61);
              *(_WORD *)&valuePtr[2 * k + 4] = *(_WORD *)v61;
              v44 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, k);
              CFNumberGetValue(v44, kCFNumberIntType, v61);
              valuePtr[k + 20] = v61[0];
            }
          }
          v32 = v55;
          if (H9ISP::H9ISPDevice::DisableKnobManualMode(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 2))
          {
            v17 = -12780;
          }
          else
          {
            v52 = *(H9ISP::H9ISPDevice **)(v54 + 24);
            v53 = *(_DWORD *)(a2 + 84);
            v58[0] = *(_OWORD *)valuePtr;
            v58[1] = *(_OWORD *)&valuePtr[16];
            if (H9ISP::H9ISPDevice::SetLuxAdaptiveSettings(v52, v53, v58))
              v17 = -12780;
            else
              ++v16;
          }
          goto LABEL_32;
        }
      }
    }
    v17 = -12780;
  }
LABEL_31:
  v32 = v55;
LABEL_32:
  if (v14 && v32)
  {
    v33 = CFArrayGetCount(v14);
    if (v33 > 8)
      goto LABEL_41;
    v34 = v33;
    if (CFArrayGetCount(v32) != v33)
      goto LABEL_41;
    H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 4, &v65);
    if (v35)
      goto LABEL_41;
    *(_WORD *)v61 = 4;
    *(_DWORD *)&v61[28] = v66;
    memset(&v61[4], 0, 24);
    *(_WORD *)&v61[2] = v34;
    if (v34 >= 1)
    {
      for (m = 0; m != v34; ++m)
      {
        v56 = 0;
        v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, m);
        CFNumberGetValue(v37, kCFNumberIntType, &v56);
        *(_WORD *)&v61[2 * m + 4] = v56;
        v38 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, m);
        CFNumberGetValue(v38, kCFNumberIntType, &v56);
        v61[m + 20] = v56;
      }
    }
    if (H9ISP::H9ISPDevice::DisableKnobManualMode(*(H9ISP::H9ISPDevice **)(v54 + 24), *(_DWORD *)(a2 + 84), 4))
    {
LABEL_41:
      v17 = -12780;
    }
    else
    {
      v50 = *(H9ISP::H9ISPDevice **)(v54 + 24);
      v51 = *(_DWORD *)(a2 + 84);
      v57[0] = *(_OWORD *)v61;
      v57[1] = *(_OWORD *)&v61[16];
      if (H9ISP::H9ISPDevice::SetLuxAdaptiveSettings(v50, v51, v57))
        v17 = -12780;
      else
        ++v16;
    }
  }
  if (v16)
    return v17;
  else
    return 4294954516;
}

uint64_t CopyLuxAdaptiveParameters(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  __CFDictionary *Mutable;
  uint64_t result;
  CFMutableArrayRef v15;
  __CFArray *v16;
  unint64_t v17;
  CFNumberRef v18;
  BOOL v19;
  CFMutableArrayRef v20;
  __CFArray *v21;
  uint64_t v22;
  CFNumberRef v23;
  unint64_t v24;
  CFMutableArrayRef v25;
  __CFArray *v26;
  unint64_t v27;
  CFNumberRef v28;
  CFMutableArrayRef v29;
  __CFArray *v30;
  uint64_t v31;
  CFNumberRef v32;
  unint64_t v33;
  CFMutableArrayRef v34;
  __CFArray *v35;
  unint64_t v36;
  CFNumberRef v37;
  CFMutableArrayRef v38;
  __CFArray *v39;
  uint64_t v40;
  CFNumberRef v41;
  unint64_t v42;
  CFMutableArrayRef v43;
  __CFArray *v44;
  unint64_t v45;
  CFNumberRef v46;
  CFMutableArrayRef v47;
  __CFArray *v48;
  uint64_t v49;
  CFNumberRef v50;
  unint64_t v51;
  int valuePtr;
  CFIndex v53[3];
  CFIndex v54[3];
  CFIndex capacity[3];
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 0, &v56);
  if (v9
    || (H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 1, capacity),
        v10)
    || (H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 2, v54), v11)
    || (H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 4, v53), v12))
  {
    Mutable = 0;
    result = 4294954516;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      valuePtr = 0;
      v15 = CFArrayCreateMutable(a1, (unsigned __int16)v56, MEMORY[0x24BDBD690]);
      if (v15)
      {
        v16 = v15;
        if ((_WORD)v56)
        {
          v17 = 1;
          do
          {
            valuePtr = *((unsigned __int16 *)&v56 + v17);
            v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v16, v18);
            CFRelease(v18);
            v19 = v17++ >= (unsigned __int16)v56;
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10FE0], v16);
        CFRelease(v16);
      }
      v20 = CFArrayCreateMutable(a1, (unsigned __int16)v56, MEMORY[0x24BDBD690]);
      if (v20)
      {
        v21 = v20;
        if ((_WORD)v56)
        {
          v22 = 18;
          do
          {
            valuePtr = *((unsigned __int8 *)&v56 + v22);
            v23 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v21, v23);
            CFRelease(v23);
            v24 = v22 - 17;
            ++v22;
          }
          while (v24 < (unsigned __int16)v56);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10FD8], v21);
        CFRelease(v21);
      }
      v25 = CFArrayCreateMutable(a1, LOWORD(capacity[0]), MEMORY[0x24BDBD690]);
      if (v25)
      {
        v26 = v25;
        if (LOWORD(capacity[0]))
        {
          v27 = 1;
          do
          {
            valuePtr = *((unsigned __int16 *)capacity + v27);
            v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v26, v28);
            CFRelease(v28);
            v19 = v27++ >= LOWORD(capacity[0]);
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11188], v26);
        CFRelease(v26);
      }
      v29 = CFArrayCreateMutable(a1, LOWORD(capacity[0]), MEMORY[0x24BDBD690]);
      if (v29)
      {
        v30 = v29;
        if (LOWORD(capacity[0]))
        {
          v31 = 18;
          do
          {
            valuePtr = *((unsigned __int8 *)capacity + v31);
            v32 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v30, v32);
            CFRelease(v32);
            v33 = v31 - 17;
            ++v31;
          }
          while (v33 < LOWORD(capacity[0]));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11180], v30);
        CFRelease(v30);
      }
      v34 = CFArrayCreateMutable(a1, LOWORD(v54[0]), MEMORY[0x24BDBD690]);
      if (v34)
      {
        v35 = v34;
        if (LOWORD(v54[0]))
        {
          v36 = 1;
          do
          {
            valuePtr = *((unsigned __int16 *)v54 + v36);
            v37 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v35, v37);
            CFRelease(v37);
            v19 = v36++ >= LOWORD(v54[0]);
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10FF0], v35);
        CFRelease(v35);
      }
      v38 = CFArrayCreateMutable(a1, LOWORD(v54[0]), MEMORY[0x24BDBD690]);
      if (v38)
      {
        v39 = v38;
        if (LOWORD(v54[0]))
        {
          v40 = 18;
          do
          {
            valuePtr = *((unsigned __int8 *)v54 + v40);
            v41 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v39, v41);
            CFRelease(v41);
            v42 = v40 - 17;
            ++v40;
          }
          while (v42 < LOWORD(v54[0]));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10FE8], v39);
        CFRelease(v39);
      }
      v43 = CFArrayCreateMutable(a1, LOWORD(v53[0]), MEMORY[0x24BDBD690]);
      if (v43)
      {
        v44 = v43;
        if (LOWORD(v53[0]))
        {
          v45 = 1;
          do
          {
            valuePtr = *((unsigned __int16 *)v53 + v45);
            v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v44, v46);
            CFRelease(v46);
            v19 = v45++ >= LOWORD(v53[0]);
          }
          while (!v19);
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10FD0], v44);
        CFRelease(v44);
      }
      v47 = CFArrayCreateMutable(a1, LOWORD(v53[0]), MEMORY[0x24BDBD690]);
      if (v47)
      {
        v48 = v47;
        if (LOWORD(v53[0]))
        {
          v49 = 18;
          do
          {
            valuePtr = *((unsigned __int8 *)v53 + v49);
            v50 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(v48, v50);
            CFRelease(v50);
            v51 = v49 - 17;
            ++v49;
          }
          while (v51 < LOWORD(v53[0]));
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10FC8], v48);
        CFRelease(v48);
      }
    }
    result = 0;
  }
  *a2 = Mutable;
  return result;
}

uint64_t CopyModuleInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFStringRef v15;
  CFStringRef v16;
  _BYTE __dst[116];
  unsigned int valuePtr;
  _BYTE v20[20];
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  char v25[42];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v9 = Mutable;
    valuePtr = *(_DWORD *)(a3 + 100);
    v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE10758], v10);
    CFRelease(v10);
    if (!H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a5 + 24), *(_DWORD *)(a3 + 84), 0, __dst, v20))
    {
      valuePtr = v22;
      v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE10750], v11);
      CFRelease(v11);
      valuePtr = v23;
      v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE10740], v12);
      CFRelease(v12);
      valuePtr = v21;
      v13 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE10748], v13);
      CFRelease(v13);
      valuePtr = v24;
      v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE10738], v14);
      CFRelease(v14);
      v25[17] = 0;
      v15 = CFStringCreateWithCString(0, v25, 0);
      if (v15)
      {
        v16 = v15;
        CFDictionarySetValue(v9, CFSTR("ModuleSerialNumber"), v15);
        CFRelease(v16);
      }
    }
    *a2 = v9;
  }
  return 0;
}

uint64_t CopyColorHistogram()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFDataRef *v4;
  CFDataRef *v5;
  CFDataRef v6;
  uint64_t v7;
  unsigned __int8 v9[4];
  __int16 v10;
  int v11;
  UInt8 v12[16384];

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  bzero(v9, 0x400CuLL);
  v10 = -16372;
  v11 = *(_DWORD *)(v3 + 84);
  if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v1 + 24), v9, 0x400Cu, 0, 0xFFFFFFFF))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v6 = CFDataCreate(0, v12, 0x4000);
    v7 = 0;
  }
  *v5 = v6;
  return v7;
}

uint64_t SetAWBScheme(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    v9 = H9ISP::H9ISPDevice::SetAWBScheme(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: Selected AWB Scheme: %d result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyAWBScheme(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  unsigned __int8 v10;

  v10 = 0;
  if (H9ISP::H9ISPDevice::GetAWBScheme(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v10))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    valuePtr = v10;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetMaxIntegrationTime(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  double v9;
  int v10;
  double valuePtr;

  valuePtr = 0.0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberDoubleType, &valuePtr);
    v9 = valuePtr;
    *(double *)(a2 + 248) = valuePtr;
    v10 = H9ISP::H9ISPDevice::SetMaxIntegrationTime(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), (v9 * 1000.0));
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting Maximum Integration Time (in Milliseconds): %.3f, result=0x%08X\n", valuePtr, v10);
    if (v10)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyMaxIntegrationTime(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  CFNumberRef v7;
  uint64_t v8;
  double v10;
  unsigned int v11;

  v11 = 0;
  if (H9ISP::H9ISPDevice::GetMaxIntegrationTime(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v11))
  {
    v7 = 0;
    v8 = 4294954513;
  }
  else
  {
    LODWORD(v6) = v11;
    v10 = (double)v6 / 1000.0;
    v7 = CFNumberCreate(0, kCFNumberDoubleType, &v10);
    v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t CopyMinIntegrationTime(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  unsigned int valuePtr;

  valuePtr = 0;
  if (H9ISP::H9ISPDevice::GetMinIntegrationTime(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &valuePtr))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopySensorTemperature(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  unsigned int valuePtr;

  valuePtr = 0;
  if (H9ISP::H9ISPDevice::GetSensorTemperature(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &valuePtr))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyAlternateOutputSizeLimits(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  int valuePtr;

  if (*(_BYTE *)(a3 + 523))
  {
    Mutable = 0;
    result = 4294954509;
  }
  else
  {
    v7 = *(_DWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 112);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      if (v7 >= v8)
        v9 = v8;
      else
        v9 = 0;
      v10 = v7 - v9;
      valuePtr = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v7 - v9) + 28) >> 2;
      v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11150], v11);
      CFRelease(v11);
      valuePtr = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * v10 + 32) >> 2;
      v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11138], v12);
      CFRelease(v12);
      valuePtr = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * v10 + 28);
      v13 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11148], v13);
      CFRelease(v13);
      valuePtr = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * v10 + 32);
      v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11130], v14);
      CFRelease(v14);
      result = 0;
    }
    else
    {
      result = 4294954510;
    }
  }
  *a2 = Mutable;
  return result;
}

uint64_t SetAEMaxGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  unsigned int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  if (HIWORD(valuePtr))
    return 4294954516;
  v8 = *(_QWORD *)(a2 + 88);
  v9 = H9ISP::H9ISPDevice::SetGainCap(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), (unsigned __int16)valuePtr);
  if (v8)
  {
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting Gain Cap: 0x%08X, result=0x%08X\n");
  }
  else
  {
    *(_DWORD *)(a2 + 52) = valuePtr;
    H9ISPLogger(6, "H9ISPCaptureDevice: Caching Gain Cap for next stream start: 0x%08X, result=0x%08X\n");
  }
  if (v9)
    return 4294954516;
  else
    return 0;
}

uint64_t CopyAEMaxGain(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  unsigned __int16 v10;

  v10 = 0;
  if (H9ISP::H9ISPDevice::GetGainCap(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v10))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    valuePtr = v10;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetAEMinGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  unsigned int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v8 = 4294954516;
  if (!HIWORD(valuePtr))
  {
    v9 = H9ISP::H9ISPDevice::SetMinimumGainCap(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), (unsigned __int16)valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting Minumum Gain Cap: 0x%08X, result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyAEMinGain(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  unsigned __int16 v10;

  v10 = 0;
  if (H9ISP::H9ISPDevice::GetMinimumGainCap(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v10))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    valuePtr = v10;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetAEGainThresholdForFlickerZoneIntegrationTimeTransition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    v9 = H9ISP::H9ISPDevice::SetAEMaxGainCapWithExposureUpdate(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting AE Max Gain Cap With Exposure Update: 0x%08X, result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyAEGainThresholdForFlickerZoneIntegrationTimeTransition(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  unsigned int valuePtr;

  valuePtr = 0;
  if (H9ISP::H9ISPDevice::GetAEMaxGainCapWithExposureUpdate(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &valuePtr))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetAEIntegrationTimeForUnityGainToMinGainTransition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  v8 = 4294954516;
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    v9 = H9ISP::H9ISPDevice::SetAEGainCapOffExposureUpdate(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting AE Gain Cap Off Exposure Update: 0x%08X, result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyAEIntegrationTimeForUnityGainToMinGainTransition(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  unsigned int valuePtr;

  valuePtr = 0;
  if (H9ISP::H9ISPDevice::GetAEGainCapOffExposureUpdate(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &valuePtr))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyErrorCounters(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *v8;
  uint64_t result;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  unsigned int v15;
  unsigned int v16[2];
  uint64_t valuePtr;

  *(_QWORD *)v16 = 0;
  valuePtr = 0;
  v15 = 0;
  if (H9ISP::H9ISPDevice::GetErrorCount(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 0, (unsigned int *)&valuePtr + 1)|| H9ISP::H9ISPDevice::GetErrorCount(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 1u, (unsigned int *)&valuePtr)|| H9ISP::H9ISPDevice::GetErrorCount(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 2u, &v16[1])|| H9ISP::H9ISPDevice::GetErrorCount(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 3u, v16)|| H9ISP::H9ISPDevice::GetErrorCount(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 4u,
                       &v15))
  {
    v8 = 0;
    result = 4294954513;
  }
  else
  {
    result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v8 = (__CFDictionary *)result;
    if (result)
    {
      v10 = CFNumberCreate(0, kCFNumberIntType, (char *)&valuePtr + 4);
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x24BE110C0], v10);
      CFRelease(v10);
      v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x24BE11080], v11);
      CFRelease(v11);
      v12 = CFNumberCreate(0, kCFNumberIntType, &v16[1]);
      CFDictionarySetValue(v8, CFSTR("SIFErrorCount"), v12);
      CFRelease(v12);
      v13 = CFNumberCreate(0, kCFNumberIntType, v16);
      CFDictionarySetValue(v8, CFSTR("UARTErrorCount"), v13);
      CFRelease(v13);
      v14 = CFNumberCreate(0, kCFNumberIntType, &v15);
      CFDictionarySetValue(v8, CFSTR("LPDPErrorCount"), v14);
      CFRelease(v14);
      result = 0;
    }
  }
  *a2 = v8;
  return result;
}

uint64_t SetFaceDetectionRectangleOfInterest(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  _BOOL4 v8;
  uint64_t v9;
  int32x2_t v10;
  uint64x2_t v11;
  int64x2_t v12;
  int v13;
  CGRect rect;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  v8 = CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a1, &rect);
  v9 = 4294954516;
  if (v8)
  {
    v10 = vmovn_s64(vcvtq_s64_f64(vmulq_f64((float64x2_t)rect.size, (float64x2_t)vdupq_n_s64(0x408F400000000000uLL))));
    v11.i64[0] = v10.u32[0];
    v11.i64[1] = v10.u32[1];
    v12 = (int64x2_t)vshlq_u64(v11, (uint64x2_t)xmmword_235829580);
    v13 = H9ISP::H9ISPDevice::SetFaceDetectionWindowParam(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), vorrq_s8((int8x16_t)vdupq_laneq_s64(v12, 1), (int8x16_t)v12).u64[0] | ((unint64_t)(int)(rect.origin.y * 1000.0) << 16) | (int)(rect.origin.x * 1000.0));
    H9ISPLogger(6, "H9ISPCaptureDevice: set kFigCaptureStreamProperty_FaceDetectionRectangleOfInterest, res=0x%08x\n", v13);
    if (v13)
      return 4294954516;
    else
      return 0;
  }
  return v9;
}

uint64_t CopyFaceDetectionRectangleOfInterest(uint64_t a1, CFDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v11;
  uint64_t v13;
  CGRect v14;

  if (H9ISP::H9ISPDevice::GetFaceDetectionWindowParam(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v13))
  {
    DictionaryRepresentation = 0;
    v11 = 4294954513;
  }
  else
  {
    LOWORD(v6) = v13;
    v14.origin.x = (double)v6 / 1000.0;
    LOWORD(v7) = WORD1(v13);
    v14.origin.y = (double)v7 / 1000.0;
    LOWORD(v8) = WORD2(v13);
    v14.size.width = (double)v8 / 1000.0;
    LOWORD(v9) = HIWORD(v13);
    v14.size.height = (double)v9 / 1000.0;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v14);
    v11 = 0;
  }
  *a2 = DictionaryRepresentation;
  return v11;
}

uint64_t SetAutoFocusMode(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  CFTypeID v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;

  v6 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v6 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  if (!cf)
    return 4294954516;
  v7 = CFGetTypeID(cf);
  if (v7 != CFStringGetTypeID())
    return 4294954516;
  if (CFEqual((CFTypeRef)*MEMORY[0x24BE10680], cf))
  {
    v8 = H9ISP::H9ISPDevice::SetFocusMode(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, 0);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetFocusMode (CISP_AF_FOCUS_MODE_WEIGHTED_SUM), result=0x%08X\n", v8);
    if (v8)
      return 4294954516;
    else
      return 0;
  }
  else
  {
    v11 = CFEqual((CFTypeRef)*MEMORY[0x24BE10678], cf);
    v9 = 4294954516;
    if (v11)
    {
      v12 = H9ISP::H9ISPDevice::SetFocusMode(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, 1u);
      H9ISPLogger(6, "H9ISPCaptureDevice: SetFocusMode (CISP_AF_FOCUS_MODE_MATRIX), result=0x%08X\n", v12);
      if (v12)
        return 4294954516;
      else
        return 0;
    }
  }
  return v9;
}

uint64_t CopyAutoFocusMode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v6;
  uint64_t result;
  CFTypeRef *v8;
  unsigned __int16 v9;

  v9 = 0;
  if (H9ISP::H9ISPDevice::GetFocusMode(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v9))
  {
    v6 = 0;
    result = 4294954513;
  }
  else
  {
    v8 = (CFTypeRef *)MEMORY[0x24BE10678];
    if (v9 != 1)
      v8 = (CFTypeRef *)MEMORY[0x24BE10680];
    v6 = *v8;
    CFRetain(*v8);
    result = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t SetMatrixFocusParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  BOOL v13;
  const __CFNumber *v16;
  int v17;
  int v18;
  unsigned __int16 v19[2];
  unsigned __int16 v20[2];
  unsigned __int16 v21[2];
  unsigned __int16 v22[2];
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10730]);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10720]);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10718]);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10728]);
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10710]);
  v13 = !Value || v9 == 0;
  if (v13 || v10 == 0)
    return 4294954516;
  v16 = v12;
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  *(_DWORD *)v22 = 0;
  CFNumberGetValue(v9, kCFNumberIntType, v22);
  *(_DWORD *)v21 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, v21);
  *(_DWORD *)v20 = 0;
  if (v11)
    CFNumberGetValue(v11, kCFNumberIntType, v20);
  else
    *(_DWORD *)v20 = 20;
  *(_DWORD *)v19 = 0;
  if (v16)
    CFNumberGetValue(v16, kCFNumberIntType, v19);
  else
    *(_DWORD *)v19 = 42;
  v17 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v17 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v18 = H9ISP::H9ISPDevice::SetAFMatrixModeConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v17, valuePtr, v22[0], v21[0], v20[0], v19[0]);
  H9ISPLogger(6, "H9ISPCaptureDevice: SetAFMatrixModeConfig, result=0x%08X\n", v18);
  if (v18)
    return 4294954516;
  else
    return 0;
}

uint64_t CopyMatrixFocusParams(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  __CFDictionary *Mutable;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15[2];
  unsigned __int16 v16[2];

  *(_DWORD *)v15 = 0;
  *(_DWORD *)v16 = 0;
  v14 = 0;
  if (H9ISP::H9ISPDevice::GetAFMatrixModeConfig(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v16[1], v16, &v15[1], v15, &v14))
  {
    *a2 = 0;
    return 4294954513;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v13 = v16[1];
      v8 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10730], v8);
      CFRelease(v8);
      v13 = v16[0];
      v9 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10720], v9);
      CFRelease(v9);
      v13 = v15[1];
      v10 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10718], v10);
      CFRelease(v10);
      v13 = v15[0];
      v11 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10728], v11);
      CFRelease(v11);
      v13 = v14;
      v12 = CFNumberCreate(0, kCFNumberIntType, &v13);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10710], v12);
      CFRelease(v12);
    }
    result = 0;
    *a2 = Mutable;
  }
  return result;
}

uint64_t CopyMatrixFocusDebugData(uint64_t a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDataRef v8;
  uint64_t result;
  UInt8 bytes[4];
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  bzero(bytes, 0xA9CuLL);
  v11 = -31731;
  v12 = *(_DWORD *)(a3 + 84);
  if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a5 + 24), bytes, 0xA9Cu, 0, 0xFFFFFFFF))
  {
    v8 = 0;
    result = 4294954513;
  }
  else
  {
    v8 = CFDataCreate(0, bytes, 2716);
    result = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t SetClientMaxBufferCountHint(CFTypeRef cf, uint64_t a2)
{
  CFTypeID v5;
  int v6;
  int valuePtr;

  if (*(_BYTE *)(a2 + 523))
    return 4294954509;
  if (!cf)
    return 4294954516;
  v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID())
    return 4294954516;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  v6 = valuePtr;
  *(_DWORD *)(a2 + 80) = valuePtr;
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting Max Buffer Count Hint: %d\n", v6);
  return 0;
}

uint64_t SetAttachRAW(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  int v5;
  uint64_t v6;
  const char *v7;

  if (a1 && (v4 = CFGetTypeID(a1), v4 == CFBooleanGetTypeID()))
  {
    v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
    v6 = 0;
    *(_BYTE *)(a2 + 60) = v5 != 0;
  }
  else
  {
    v6 = 4294954516;
  }
  if (*(_BYTE *)(a2 + 60) == 1)
    v7 = "True";
  else
    v7 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: Capture Raw In Parallel: %s\n", v7);
  return v6;
}

uint64_t SetColorRange(CFTypeRef cf, uint64_t a2)
{
  uint64_t result;
  CFTypeID v5;
  int v6;

  if (*(_BYTE *)(a2 + 523))
    return 4294954509;
  if (cf)
  {
    v5 = CFGetTypeID(cf);
    if (v5 == CFStringGetTypeID())
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x24BE10688], cf))
      {
        v6 = 0;
LABEL_9:
        result = 0;
        *(_DWORD *)(a2 + 96) = v6;
        return result;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x24BE10690], cf))
      {
        v6 = 1;
        goto LABEL_9;
      }
    }
  }
  return 4294954516;
}

uint64_t LockAWBNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::AWBUpdateSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  if (!v6)
  {
    v6 = H9ISP::H9ISPDevice::ALSSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
    if (!v6)
      v6 = H9ISP::H9ISPDevice::LSCModulationSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: Lock AWB, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t UnlockAWBNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::AWBUpdateResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  if (!v6)
  {
    v6 = H9ISP::H9ISPDevice::ALSResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
    if (!v6)
      v6 = H9ISP::H9ISPDevice::LSCModulationResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: Unlock AWB, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t LockAENow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::AEUpdateSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: Lock AE, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t UnlockAENow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::AEUpdateResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: Unlock AE, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t SetTorchLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  float valuePtr;

  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID() || !*(_DWORD *)(a2 + 504))
    return 4294954516;
  valuePtr = 0.0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, &valuePtr);
  if (valuePtr >= 1.0)
  {
    v8 = 255;
  }
  else
  {
    if (valuePtr <= 0.0)
    {
      v11 = H9ISP::H9ISPDevice::DisableTorch(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84));
      if (!*(_QWORD *)(a2 + 88))
        H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 0);
      v8 = 0;
      goto LABEL_26;
    }
    if ((float)(valuePtr * 255.0) <= 1)
      v8 = 1;
    else
      v8 = (float)(valuePtr * 255.0);
  }
  if (dword_254291264)
  {
    if (dword_254291264 >= 0xFF)
      v8 = 255;
    else
      v8 = dword_254291264;
    H9ISPLogger(6, "H9ISPCaptureDevice: Torch Level Override: %d.\n", v8);
  }
  if (*(_BYTE *)(a2 + 1400))
  {
    H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1u, 1u);
    if (v8 >= 2)
      v10 = (v8 << 23) & 0xFF000000 | ((v8 >> 1) << 8);
    else
      v10 = 0;
    v11 = H9ISP::H9ISPDevice::SetIndividualTorchLEDLevels(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v10);
    *(_BYTE *)(a2 + 1401) = 1;
  }
  else
  {
    if (!*(_QWORD *)(a2 + 88))
      H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1u, 1u);
    v11 = H9ISP::H9ISPDevice::EnableTorch(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), (unsigned __int16)v8);
  }
LABEL_26:
  if (v11)
    v9 = 4294954516;
  else
    v9 = 0;
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting torch level to %d. result=0x%08X\n", v8, v11);
  return v9;
}

uint64_t SetAFWindowParams(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  CFTypeID v7;
  uint64_t v8;
  int v9;
  const void *Value;
  const __CFNumber *v11;
  int v12;
  CFTypeID v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  int v17;
  const void *v18;
  const void *v19;
  const void *ValueAtIndex;
  CFTypeID v21;
  uint64_t v22;
  int v23;
  const void *v24;
  const __CFNumber *v25;
  int v26;
  int8x16_t v28;
  int8x16_t v29;
  void *key;
  int valuePtr;
  unsigned int v32;
  unsigned int v33[2];
  unsigned int v34[2];
  int8x16_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  memset(&v35, 0, sizeof(v35));
  v6 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v6 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  *(_QWORD *)v33 = 0;
  *(_QWORD *)v34 = 0;
  v32 = 0;
  v7 = CFGetTypeID(cf);
  if (v7 == CFDictionaryGetTypeID())
  {
    v8 = H9ISPGetRectParamsFromDict((const __CFDictionary *)cf, &v34[1], v34, &v33[1], v33, &v32, 1u);
    if ((_DWORD)v8)
      return v8;
    v35.i8[0] = v32;
    v9 = H9ISP::H9ISPDevice::SetAFWindow(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, 0, v34[1], v34[0], v33[1], v33[0]);
    H9ISPLogger(6, "H9ISPCaptureDevice: Set AF Window 0 (result=0x%08X), hStart=%d, vStart=%d, width=%d, height=%d, weight=%d\n", v9, v34[1], v34[0], v33[1], v33[0], v32);
    if (!v9)
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE10760]);
      if (!Value || !CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDBD270]))
      {
        H9ISP::H9ISPDevice::SetAFWindowFDConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, 0xFFFF, 0);
        goto LABEL_31;
      }
      v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE106A0]);
      if (v11)
      {
        valuePtr = 0;
        CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
        v12 = H9ISP::H9ISPDevice::SetAFWindowFDConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, 0, valuePtr);
        H9ISPLogger(6, "H9ISPCaptureDevice: Set AF Window 0 FD Config (result=0x%08X), scale=%d\n", v12, valuePtr);
        if (!v12)
        {
LABEL_31:
          v8 = 4294954516;
          if (!H9ISP::H9ISPDevice::SetAFWindowWeights(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, (unsigned __int8 *)&v35))
          {
            v28 = vceqzq_s8(v35);
            v29 = vorrq_s8(vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v28.i8), (int8x16_t)xmmword_2358295A0), vandq_s8((int8x16_t)vmovl_high_s8(v28), (int8x16_t)xmmword_235829590));
            *(int8x8_t *)v29.i8 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
            if (H9ISP::H9ISPDevice::SetAFWindowFloatConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, v29.i16[0] | v29.i16[2] | ((v29.i32[0] | v29.i32[1]) >> 16)))return 4294954516;
            else
              return 0;
          }
          return v8;
        }
      }
    }
    return 4294954516;
  }
  v13 = CFGetTypeID(cf);
  if (v13 != CFArrayGetTypeID())
    return 4294954516;
  Count = CFArrayGetCount((CFArrayRef)cf);
  if ((unint64_t)(Count - 1) > 0xF)
    return 4294954516;
  v15 = Count;
  v16 = 0;
  v17 = 0;
  v18 = (const void *)*MEMORY[0x24BE10760];
  v19 = (const void *)*MEMORY[0x24BDBD270];
  key = (void *)*MEMORY[0x24BE106A0];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v16);
    v21 = CFGetTypeID(ValueAtIndex);
    if (v21 != CFDictionaryGetTypeID())
    {
LABEL_26:
      v8 = 4294954516;
      if (v17)
        goto LABEL_28;
      goto LABEL_27;
    }
    v22 = H9ISPGetRectParamsFromDict((const __CFDictionary *)ValueAtIndex, &v34[1], v34, &v33[1], v33, &v32, 1u);
    if ((_DWORD)v22)
      break;
    v35.i8[v16] = v32;
    v23 = H9ISP::H9ISPDevice::SetAFWindow(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, v16, v34[1], v34[0], v33[1], v33[0]);
    H9ISPLogger(6, "H9ISPCaptureDevice: Set AF Window %d (result=0x%08X), hStart=%d, vStart=%d, width=%d, height=%d, weight=%d\n", v16, v23, v34[1], v34[0], v33[1], v33[0], v32);
    if (v23)
      goto LABEL_26;
    v24 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v18);
    if (v24)
    {
      if (CFEqual(v24, v19))
      {
        v25 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, key);
        if (!v25)
          goto LABEL_26;
        valuePtr = 0;
        CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
        v26 = H9ISP::H9ISPDevice::SetAFWindowFDConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, v16, valuePtr);
        ++v17;
        H9ISPLogger(6, "H9ISPCaptureDevice: Set AF Window %d FD Config (result=0x%08X), scale=%d\n", v16, v26, valuePtr);
        if (v26)
          goto LABEL_26;
      }
    }
    if (v15 == ++v16)
    {
      v8 = 0;
      if (v17)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  v8 = v22;
  if (!v17)
LABEL_27:
    H9ISP::H9ISPDevice::SetAFWindowFDConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, 0xFFFF, 0);
LABEL_28:
  if (!(_DWORD)v8)
    goto LABEL_31;
  return v8;
}

uint64_t SetAEWindowParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15[2];

  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  *(_QWORD *)v15 = 0;
  v14 = 0;
  v12 = 0;
  v13 = 0;
  if (H9ISPGetRectParamsFromDict((const __CFDictionary *)a1, &v15[1], v15, &v14, &v13, &v12, 0))
    return 4294954516;
  v10 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v10 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v11 = H9ISP::H9ISPDevice::SetAEWindow(*(H9ISP::H9ISPDevice **)(a4 + 24), v10, v15[1], v15[0], v14, v13);
  if (v11)
    v8 = 4294954516;
  else
    v8 = 0;
  H9ISPLogger(6, "H9ISPCaptureDevice: Set AE Window Params (result=0x%08X), hStart=%d, vStart=%d, width=%d, height=%d\n", v11, v15[1], v15[0], v14, v13);
  return v8;
}

uint64_t Apply3AWindowSettings()
{
  return 0;
}

uint64_t SetAEFaceDetectionMetering(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t valuePtr;

  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  v29 = 0;
  valuePtr = 0;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11018]);
  if (!Value)
    return 4294954516;
  CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110A8]);
  if (!v9)
    return 4294954516;
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11070]);
  if (!v10)
    return 4294954516;
  CFNumberGetValue(v10, kCFNumberIntType, (char *)&v29 + 4);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11110]);
  if (!v11)
    return 4294954516;
  CFNumberGetValue(v11, kCFNumberIntType, &v29);
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110F0]);
  if (!v12)
    return 4294954516;
  CFNumberGetValue(v12, kCFNumberIntType, &v28);
  v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11008]);
  if (!v13)
    return 4294954516;
  CFNumberGetValue(v13, kCFNumberIntType, &v27);
  v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FB8]);
  if (!v14)
    return 4294954516;
  CFNumberGetValue(v14, kCFNumberIntType, (char *)&v26 + 4);
  v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11010]);
  if (!v15)
    return 4294954516;
  CFNumberGetValue(v15, kCFNumberIntType, &v26);
  v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110E0]);
  if (!v16)
    return 4294954516;
  CFNumberGetValue(v16, kCFNumberIntType, (char *)&v25 + 4);
  v17 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110B0]);
  if (!v17)
    return 4294954516;
  CFNumberGetValue(v17, kCFNumberIntType, &v25);
  v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10FC0]);
  if (!v18)
    return 4294954516;
  CFNumberGetValue(v18, kCFNumberIntType, (char *)&v24 + 4);
  v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11078]);
  if (!v19)
    return 4294954516;
  CFNumberGetValue(v19, kCFNumberIntType, &v24);
  v20 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v20 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v21 = H9ISP::H9ISPDevice::SetAEFDSceneMeteringConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), v20, SWORD2(valuePtr), valuePtr, SWORD2(v29), v29, v28, v27, SWORD2(v26), SHIWORD(v26), v26, SWORD1(v26), SWORD2(v25), SHIWORD(v25));
  if (v21)
    v22 = 4294954516;
  else
    v22 = 0;
  H9ISPLogger(6, "H9ISPCaptureDevice: SetAEFDSceneMeteringConfig (result=0x%08X)\n", v21);
  return v22;
}

uint64_t SetExposureBias(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  int v12;
  int v13;
  uint64_t valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 == CFDictionaryGetTypeID())
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11310]);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
      if (!HIWORD(valuePtr))
      {
        v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10698]);
        if (v9)
          CFNumberGetValue(v9, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_11;
      }
    }
    return 4294954516;
  }
  v10 = CFGetTypeID(a1);
  if (v10 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, (char *)&valuePtr + 4);
  if (HIWORD(valuePtr))
    return 4294954516;
LABEL_11:
  v12 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v12 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v13 = H9ISP::H9ISPDevice::SetExposureBias(*(H9ISP::H9ISPDevice **)(a4 + 24), v12, WORD2(valuePtr), valuePtr);
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting Exposure Bias: 0x%08X, tag=0x%08X, result=0x%08X\n", HIDWORD(valuePtr), valuePtr, v13);
  if (v13)
    return 4294954516;
  else
    return 0;
}

uint64_t SetColorTables(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFData *ValueAtIndex;
  const __CFData *v9;
  CFTypeID v10;
  uint64_t v11;
  H9ISP::H9ISPDevice *v12;
  unsigned int v13;
  unsigned __int8 *BytePtr;
  int v15;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFArrayGetTypeID())
    return 4294954516;
  ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
  if (!ValueAtIndex)
    return 4294954516;
  v9 = ValueAtIndex;
  v10 = CFGetTypeID(ValueAtIndex);
  if (v10 != CFDataGetTypeID())
    return 4294954516;
  v11 = 4294954516;
  if (CFDataGetLength(v9) == 256)
  {
    v12 = *(H9ISP::H9ISPDevice **)(a4 + 24);
    v13 = *(_DWORD *)(a2 + 84);
    BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v9);
    v15 = H9ISP::H9ISPDevice::SetToneCurve(v12, v13, BytePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting custom color tables, result=0x%08X\n", v15);
    if (v15)
      return 4294954516;
    else
      return 0;
  }
  return v11;
}

uint64_t SetAEConvergenceSpeed(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  CFTypeID v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int valuePtr;

  valuePtr = -1;
  v4 = *(_DWORD *)(a2 + 84);
  if (gCaptureDeviceCFPrefs[28 * v4 + 72] < 0x100
    || gCaptureDeviceCFPrefs[28 * v4 + 71] < 0x100)
  {
    return 0;
  }
  if (!cf)
    return 4294954516;
  v9 = CFGetTypeID(cf);
  if (v9 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  v10 = valuePtr;
  if (valuePtr > 0xFF)
    return 4294954516;
  v11 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v11 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v12 = H9ISP::H9ISPDevice::SetAEConvergenceSpeed2Way(*(H9ISP::H9ISPDevice **)(a4 + 24), v11, valuePtr, valuePtr);
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting AE Convergence Speed - long2shortSpeed:0x%02X, short2longSpeed:0x%02X, result=0x%08X\n", valuePtr, v10, v12);
  if (v12)
    return 4294954516;
  else
    return 0;
}

uint64_t SetAEStability(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  CFTypeID v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const __CFNumber *v15;
  int v16;
  int v17;
  unsigned __int8 v18[4];
  unsigned int valuePtr;

  *(_DWORD *)v18 = -1;
  valuePtr = -1;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 == CFNumberGetTypeID())
  {
    CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
    v8 = 4294954516;
    if (valuePtr <= 0xFF)
    {
      v9 = H9ISP::H9ISPDevice::SetAEStability(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
      H9ISPLogger(6, "H9ISPCaptureDevice: Setting AE Stability: 0x%02X, result=0x%08X\n", valuePtr, v9);
      if (v9)
        return 4294954516;
      else
        return 0;
    }
    return v8;
  }
  v10 = CFGetTypeID(a1);
  if (v10 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F70]);
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F68]);
  if (!Value || v12 == 0)
    return 4294954516;
  v15 = v12;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  CFNumberGetValue(v15, kCFNumberIntType, v18);
  v8 = 4294954516;
  if (valuePtr <= 0xFF && *(_DWORD *)v18 <= 0xFFu)
  {
    v16 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
    if (*(_QWORD *)(a2 + 1352))
      v16 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
    v17 = H9ISP::H9ISPDevice::SetAEStability(*(H9ISP::H9ISPDevice **)(a4 + 24), v16, valuePtr);
    if (!v17)
      v17 = H9ISP::H9ISPDevice::SetAEStability_UnstableToStable(*(H9ISP::H9ISPDevice **)(a4 + 24), v16, v18[0]);
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting AE Stability: 0x%02X/0x%02X, result=0x%08X\n", valuePtr, *(_DWORD *)v18, v17);
    if (v17)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t SetAFSearchPositions(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  unsigned int Count;
  uint64_t v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeID v12;
  const __CFNumber *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t i;
  int valuePtr;
  unsigned __int8 v20[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = CFGetTypeID(a1);
  if (v7 != CFArrayGetTypeID())
    return 4294954516;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  Count = CFArrayGetCount((CFArrayRef)a1);
  v9 = Count >= 0x100 ? 256 : Count;
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, v10);
      v12 = CFGetTypeID(ValueAtIndex);
      if (v12 != CFNumberGetTypeID())
        break;
      valuePtr = 0;
      v13 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v10);
      CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
      v20[v10++] = valuePtr;
      if (v9 == v10)
        goto LABEL_12;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v10 != (_DWORD)v9)
    return 4294954516;
LABEL_12:
  v14 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v14 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v15 = H9ISP::H9ISPDevice::SetAFSearchPositions(*(H9ISP::H9ISPDevice **)(a4 + 24), v14, v9, v20);
  if (v15)
    v16 = 4294954516;
  else
    v16 = 0;
  H9ISPLogger(6, "H9ISPCaptureDevice: Set AF Params, searchPositionCount=%d, result=0x%08X\n", v9, v15);
  if ((_DWORD)v9)
  {
    for (i = 0; i != v9; ++i)
      H9ISPLogger(6, "H9ISPCaptureDevice: AF search position %d = %d\n", i, v20[i]);
  }
  return v16;
}

uint64_t ManualFocusNow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  int v10;
  CFTypeID v11;
  int v12;
  uint64_t valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
  {
    v11 = CFGetTypeID(a1);
    if (v11 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      goto LABEL_8;
    }
    return 4294954516;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE109F8]);
  if (!Value)
    return 4294954516;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10698]);
  if (v9)
  {
    CFNumberGetValue(v9, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v10 = HIDWORD(valuePtr);
    goto LABEL_9;
  }
LABEL_8:
  v10 = 0;
LABEL_9:
  v12 = H9ISP::H9ISPDevice::SetManualFocusPosition(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr, v10);
  H9ISPLogger(6, "H9ISPCaptureDevice: Initiating manual-focus operation, position=0x%02X, result=0x%08X\n", valuePtr, v12);
  if (v12)
    return 4294954516;
  else
    return 0;
}

uint64_t SetVideoRecordingInProgress()
{
  return 0;
}

uint64_t SetHistogramParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t result;
  const void *v9;
  CFTypeID v10;
  int v11;
  H9ISP::H9ISPDevice *v12;
  unsigned __int8 v13;

  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11028]);
  if (result)
  {
    v9 = (const void *)result;
    v10 = CFGetTypeID((CFTypeRef)result);
    if (v10 == CFBooleanGetTypeID())
    {
      v11 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
      if (*(_QWORD *)(a2 + 1352))
        v11 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
      v12 = *(H9ISP::H9ISPDevice **)(a4 + 24);
      v13 = CFEqual(v9, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
      LODWORD(v12) = H9ISP::H9ISPDevice::EnableHistogram(v12, v11, v13);
      H9ISPLogger(6, "H9ISPCaptureDevice: Setting Histogram Parameters (result=0x%08X)\n", (_DWORD)v12);
      if ((_DWORD)v12)
        return 4294954516;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SetAEMeteringMode(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  CFTypeID v7;
  unsigned __int8 v8;

  v6 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v6 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  if (!cf)
    return 4294954516;
  v7 = CFGetTypeID(cf);
  if (v7 != CFStringGetTypeID())
    return 4294954516;
  if (CFEqual((CFTypeRef)*MEMORY[0x24BE11108], cf))
  {
    v8 = 2;
    goto LABEL_9;
  }
  if (!CFEqual((CFTypeRef)*MEMORY[0x24BE11100], cf))
    return 4294954516;
  v8 = 3;
LABEL_9:
  if (H9ISP::H9ISPDevice::SetAEMeteringMode(*(H9ISP::H9ISPDevice **)(a4 + 24), v6, v8))
    return 4294954516;
  else
    return 0;
}

uint64_t SetFlashMode(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  int v5;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x24BE104F8], a1))
    {
      v5 = 0;
LABEL_8:
      result = 0;
      *(_DWORD *)(a2 + 176) = v5;
      return result;
    }
    if (CFEqual((CFTypeRef)*MEMORY[0x24BE10500], a1))
    {
      v5 = 1;
      goto LABEL_8;
    }
  }
  return 4294954516;
}

uint64_t SetAFEarlyOutParams(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  BOOL v12;
  BOOL v13;
  uint64_t result;
  const __CFNumber *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t valuePtr;

  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10638]);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10628]);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10640]);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10630]);
  v12 = !Value || v9 == 0;
  v13 = v12 || v10 == 0;
  if (v13 || v11 == 0)
    return 4294954516;
  v16 = v11;
  v19 = 0;
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  CFNumberGetValue(v10, kCFNumberIntType, (char *)&v19 + 4);
  CFNumberGetValue(v16, kCFNumberIntType, &v19);
  result = 4294954516;
  if (HIDWORD(v19) <= 0xFF && HIDWORD(valuePtr) <= 1 && valuePtr <= 1 && v19 <= 0x40)
  {
    v17 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
    if (*(_QWORD *)(a2 + 1352))
      v17 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
    v18 = H9ISP::H9ISPDevice::SetAFEarlyOutParams(*(H9ISP::H9ISPDevice **)(a4 + 24), v17, SBYTE4(valuePtr), valuePtr, SBYTE4(v19), v19);
    H9ISPLogger(6, "H9ISPCaptureDevice: Setting early-out AF Parameters, result=0x%08X\n", v18);
    if (v18)
      return 4294954516;
    else
      return 0;
  }
  return result;
}

uint64_t SetAEMatrixMetadataEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  v8 = 4294954516;
  if (v7 == CFBooleanGetTypeID())
  {
    v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
    v10 = v9 != 0;
    if (v9)
      H9ISPLogger(6, "H9ISPCaptureDevice: Enable AE-matrix metadata collection\n");
    else
      H9ISPLogger(6, "H9ISPCaptureDevice: Disable AE-matrix metadata collection\n");
    if (H9ISP::H9ISPDevice::EnableAEMatrixMetadata(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v10))return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t ManualAENow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t valuePtr;
  float v21;

  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  valuePtr = 0;
  v19 = 0;
  v18 = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10790]);
  if (!Value)
    return 4294954516;
  CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10788]);
  if (!v9)
    return 4294954516;
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10648]);
  if (!v10)
    return 4294954516;
  CFNumberGetValue(v10, kCFNumberIntType, (char *)&v19 + 4);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10780]);
  if (!v11)
    return 4294954516;
  CFNumberGetValue(v11, kCFNumberIntType, &v19);
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10778]);
  if (!v12)
    return 4294954516;
  CFNumberGetValue(v12, kCFNumberIntType, (char *)&v18 + 4);
  v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10698]);
  if (v13)
    CFNumberGetValue(v13, kCFNumberIntType, &v18);
  v21 = 0.0;
  v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10708]);
  if (v14)
  {
    CFNumberGetValue(v14, kCFNumberFloatType, &v21);
    v15 = vcvts_n_u32_f32(v21, 8uLL);
  }
  else
  {
    v15 = 0;
  }
  v17 = H9ISP::H9ISPDevice::SetAEIntegrationTimeAndGains(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1000000 * HIDWORD(valuePtr) / valuePtr, WORD2(v19), SWORD2(v18), v19, v18, v15);
  H9ISPLogger(6, "H9ISPCaptureDevice: Initiating manual-AE (result=0x%08X), shutterSpeedNumerator=%d, shutterSpeedDenominator=%d, agc=%d, sensorDGain=%d, ispDGain=%d, tag=0x%08X, frameRate=0x%08X\n", v17, HIDWORD(valuePtr), valuePtr, HIDWORD(v19), v19, HIDWORD(v18), v18, v15);
  if (v17)
    return 4294954516;
  else
    return 0;
}

uint64_t RawImageProcessBegin(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  const __CFData *Value;
  const __CFData *v11;
  CFTypeID v12;
  size_t Length;
  __CVBuffer *v14;
  __CVBuffer *v15;
  __IOSurface *IOSurface;
  _DWORD *BaseAddress;
  const UInt8 *BytePtr;
  int v19;
  uint64_t v20;
  char *v21;
  unsigned int v23;
  const void *v24;
  int v25;
  __int16 v26;
  unsigned __int8 v27[8];
  unsigned int v28;
  int v29;

  if (a1)
  {
    v7 = CFGetTypeID(a1);
    if (v7 == CFDictionaryGetTypeID() && !*(_BYTE *)(a2 + 256) && !*(_QWORD *)(a2 + 88))
    {
      Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10D48]);
      if (Value)
      {
        v11 = Value;
        v12 = CFGetTypeID(Value);
        if (v12 == CFDataGetTypeID())
        {
          Length = CFDataGetLength(v11);
          v14 = H9ISP::H9ISPCreateCVBuffer((Length >> 4) + 1, 8u, 0, 0, 1, 0, 64, 64, 0.0, 0, 0, v26, 0, 0);
          if (v14)
          {
            v15 = v14;
            CVPixelBufferLockBaseAddress(v14, 0);
            IOSurface = CVPixelBufferGetIOSurface(v15);
            IOSurfaceGetID(IOSurface);
            BaseAddress = CVPixelBufferGetBaseAddress(v15);
            BytePtr = CFDataGetBytePtr(v11);
            memmove(BaseAddress, BytePtr, Length);
            v19 = BaseAddress[4];
            if (v19)
            {
              v20 = BaseAddress[5];
              v21 = (_DWORD)v20 ? (char *)BaseAddress + v20 : 0;
              if (v19 != 1 && v21 && BaseAddress[6] != 0)
              {
                v23 = *((unsigned __int16 *)v21 + 229);
                if (*(_DWORD *)(a2 + 84) == v23)
                {
                  if (dword_254291268 != -1 || dword_25429126C != -1 || dword_254291270 != -1 || dword_254291274 != -1)
                    H9ISP::H9ISPDevice::SetVISParams(*(H9ISP::H9ISPDevice **)(a4 + 24), *((unsigned __int16 *)v21 + 229), dword_254291268, dword_25429126C, dword_254291270, dword_254291274);
                  v24 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE117D0]);
                  if (v24 && CFEqual(v24, (CFTypeRef)*MEMORY[0x24BDBD270]))
                  {
                    H9ISP::H9ISPDevice::EnableVIS(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1, 1);
                    H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 16, 1);
                    H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 18, 1);
                  }
                  *(_QWORD *)v27 = 0x10700000000;
                  v25 = v21[46];
                  v28 = v23;
                  v29 = v25;
                  if (!H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), v27, 0x10u, 0, 0xFFFFFFFF)&& (!*(_BYTE *)(a2 + 62)|| !H9ISP::H9ISPDevice::EnableTNR(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1, 1)))
                  {
                    if (!H9ISP::H9ISPDevice::ProcessRawStart(*(H9ISP::H9ISPDevice **)(a4 + 24), v23))
                    {
                      v8 = 0;
                      *(_BYTE *)(a2 + 256) = 1;
                      *(_BYTE *)(a2 + 257) = *(_BYTE *)(a2 + 62) != 0;
                      *(_DWORD *)(a2 + 260) = v21[46];
                      goto LABEL_30;
                    }
                    if (*(_BYTE *)(a2 + 62))
                      H9ISP::H9ISPDevice::EnableTNR(*(H9ISP::H9ISPDevice **)(a4 + 24), v23, 0, 1);
                  }
                }
              }
            }
            v8 = 4294954516;
LABEL_30:
            CVPixelBufferUnlockBaseAddress(v15, 0);
            CVPixelBufferRelease(v15);
            return v8;
          }
        }
      }
    }
  }
  return 4294954516;
}

uint64_t RawImageProcessPrepare(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  __CVBuffer *Value;
  __CVBuffer *v11;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  size_t Length;
  int CameraConfig;
  int v21;
  size_t v22;
  size_t v23;
  __CVBuffer *v24;
  __CVBuffer *v25;
  int v26;
  __IOSurface *v27;
  IOSurfaceID v28;
  _DWORD *BaseAddress;
  const UInt8 *BytePtr;
  __CVBuffer *v31;
  const void *v32;
  __IOSurface *v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  char *v40;
  unsigned __int16 *v41;
  const __CFData *v42;
  UInt8 *v43;
  __CVBuffer *v44;
  const __CFData *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  const __CFDictionary *v49;
  const __CFDictionary *v50;
  const __CFNumber *v51;
  __int16 v52;
  _BOOL4 v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  unsigned __int16 v57;
  uint64_t v58;
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFData *v62;
  _BOOL4 v63;
  CFTypeID v64;
  size_t v65;
  int v66;
  size_t v67;
  __CVBuffer *v68;
  __IOSurface *v69;
  void *v70;
  const UInt8 *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  __CVBuffer *v75;
  __IOSurface *v76;
  IOSurfaceID v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int BytesPerRow;
  int Height;
  size_t v84;
  int BytesPerRowOfPlane;
  size_t v86;
  BOOL v87;
  int v88;
  __int16 v89;
  IOSurfaceID v90;
  int v91;
  int v92;
  unsigned __int16 *v93;
  char *v94;
  int v95;
  IOSurfaceID v96;
  IOSurfaceID v97;
  IOSurfaceID v98;
  int DataSize;
  const __CFDictionary *cf;
  _BYTE __dst[116];
  uint64_t v102;
  _DWORD valuePtr[6];
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  CFRange v113;

  v112 = *MEMORY[0x24BDAC8D0];
  v102 = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  if (!*(_BYTE *)(a2 + 256))
    return 4294954516;
  if (*(_BYTE *)(a2 + 264))
    return 4294954516;
  Value = (__CVBuffer *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE107C0]);
  if (!Value)
    return 4294954516;
  v11 = Value;
  IOSurface = CVPixelBufferGetIOSurface(Value);
  ID = IOSurfaceGetID(IOSurface);
  v14 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE107C8]);
  v15 = v14;
  if (!v14)
  {
    v25 = *(__CVBuffer **)(a2 + 272);
    if (v25)
    {
      cf = 0;
      v33 = CVPixelBufferGetIOSurface(v25);
      v28 = IOSurfaceGetID(v33);
      DataSize = CVPixelBufferGetDataSize(v25);
      BaseAddress = CVPixelBufferGetBaseAddress(v25);
      v26 = -536870212;
      goto LABEL_25;
    }
    return 4294954516;
  }
  v16 = CFDictionaryGetValue(v14, (const void *)*MEMORY[0x24BE10D48]);
  if (!v16)
    return 4294954516;
  v17 = v16;
  if (dword_254291278)
    H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 19, 1);
  v18 = CFGetTypeID(v17);
  if (v18 != CFDataGetTypeID())
    return 4294954516;
  cf = v15;
  v97 = ID;
  Length = CFDataGetLength((CFDataRef)v17);
  CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), 0, __dst, valuePtr);
  v21 = CameraConfig;
  v22 = v111;
  if (Length > v111)
    v22 = Length;
  if (CameraConfig)
    v23 = Length;
  else
    v23 = v22;
  v24 = H9ISP::H9ISPCreateCVBuffer((v23 >> 4) + 1, 8u, 0, 0, 1, 0, 64, 64, 0.0, 0, 0, v89, 0, 0);
  if (!v24)
  {
    if (!v21)
    {
      *(_BYTE *)(a2 + 264) = 1;
      *(_QWORD *)(a2 + 272) = 0;
      *(_QWORD *)(a2 + 280) = 0;
      *(_QWORD *)(a2 + 288) = v11;
      *(_QWORD *)(a2 + 296) = 0;
LABEL_47:
      CFRetain(v15);
      *(_QWORD *)(a2 + 304) = v15;
LABEL_48:
      CFRetain(v11);
      return 0;
    }
    return 4294954516;
  }
  v25 = v24;
  DataSize = v23;
  v26 = v21;
  CVPixelBufferLockBaseAddress(v24, 0);
  v27 = CVPixelBufferGetIOSurface(v25);
  v28 = IOSurfaceGetID(v27);
  BaseAddress = CVPixelBufferGetBaseAddress(v25);
  BytePtr = CFDataGetBytePtr((CFDataRef)v17);
  memmove(BaseAddress, BytePtr, Length);
  v31 = *(__CVBuffer **)(a2 + 272);
  if (v31)
  {
    CVPixelBufferUnlockBaseAddress(v31, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 272));
    *(_QWORD *)(a2 + 272) = 0;
  }
  v32 = *(const void **)(a2 + 304);
  ID = v97;
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(a2 + 304) = 0;
  }
LABEL_25:
  v34 = BaseAddress[4];
  if (!v34)
    goto LABEL_37;
  v35 = BaseAddress[5];
  v36 = (_DWORD)v35 ? (char *)BaseAddress + v35 : 0;
  if (v34 == 1
    || (v96 = v28, v37 = BaseAddress[6], !(_DWORD)v37)
    || !v36
    || (v38 = *((unsigned __int16 *)v36 + 229), *(_DWORD *)(a2 + 84) != v38)
    || (v98 = ID,
        v39 = *(_DWORD *)v36,
        v95 = *((unsigned __int16 *)v36 + 229),
        v40 = v36,
        v39 != H9ISP::H9ISPDevice::GetChannelSensorID(*(H9ISP::H9ISPDevice **)(a4 + 24), v38))
    || *(_DWORD *)(a2 + 260) != v40[46])
  {
LABEL_37:
    v44 = 0;
    v45 = 0;
    v8 = 4294954516;
    goto LABEL_38;
  }
  v94 = v40;
  v41 = (unsigned __int16 *)((char *)BaseAddress + v37);
  v42 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE107E0]);
  v43 = (UInt8 *)(a2 + 312);
  if (v42)
  {
    v113.location = 0;
    v113.length = 72;
    CFDataGetBytes(v42, v113, v43);
  }
  else
  {
    v46 = MEMORY[0x24BDC0D40];
    v47 = *MEMORY[0x24BDC0D40];
    *(_OWORD *)v43 = *MEMORY[0x24BDC0D40];
    v48 = *(_QWORD *)(v46 + 16);
    *(_QWORD *)(a2 + 328) = v48;
    *(_OWORD *)(a2 + 336) = v47;
    *(_QWORD *)(a2 + 352) = v48;
    *(_OWORD *)(a2 + 360) = v47;
    *(_QWORD *)(a2 + 376) = v48;
  }
  v49 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE107D8]);
  v50 = v49;
  v93 = v41;
  v92 = v26;
  if (v49)
  {
    v51 = (const __CFNumber *)CFDictionaryGetValue(v49, (const void *)*MEMORY[0x24BDC56B8]);
    if (v51)
    {
      valuePtr[0] = 0;
      CFNumberGetValue(v51, kCFNumberIntType, valuePtr);
      if (valuePtr[0] == 875704438)
      {
        v52 = 0;
        v53 = 0;
      }
      else if (valuePtr[0] == 2037741171)
      {
        v53 = 0;
        v52 = 1;
      }
      else
      {
        v52 = valuePtr[0] == 2037741158;
        v53 = 1;
      }
    }
    else
    {
      v52 = 0;
      v53 = 1;
    }
    *v41 = v52;
    v54 = (const __CFNumber *)CFDictionaryGetValue(v50, (const void *)*MEMORY[0x24BDC5708]);
    v55 = (const __CFNumber *)CFDictionaryGetValue(v50, (const void *)*MEMORY[0x24BDC5650]);
    v50 = 0;
    if (v54 && v55)
    {
      v56 = v55;
      CFNumberGetValue(v54, kCFNumberIntType, (char *)&v102 + 4);
      CFNumberGetValue(v56, kCFNumberIntType, &v102);
      if (HIDWORD(v102) && (v57 = v102, (_DWORD)v102))
      {
        v50 = 0;
        v41[2] = WORD2(v102);
        v41[3] = v57;
      }
      else
      {
        v58 = *(unsigned int *)(a2 + 112);
        if ((_DWORD)v58)
        {
          v50 = 0;
          v59 = *(const __CFDictionary **)(a2 + 104);
          do
          {
            v60 = v50;
            if (*((_DWORD *)v59 + 4) == *((_DWORD *)v94 + 92))
            {
              v50 = v59;
              if (v60)
              {
                if (*((_DWORD *)v59 + 1) <= *((_DWORD *)v60 + 1))
                  v50 = v60;
                else
                  v50 = v59;
              }
            }
            v59 = (const __CFDictionary *)((char *)v59 + 84);
            --v58;
          }
          while (v58);
          if (v50)
          {
            v41[2] = *((_DWORD *)v50 + 1);
            v41[3] = *((_DWORD *)v50 + 2);
            v41[2064] = *((_DWORD *)v50 + 3);
          }
        }
        else
        {
          v50 = 0;
        }
      }
    }
  }
  else
  {
    v53 = 1;
  }
  if (CVPixelBufferGetPixelFormatType(v11) == 2037741171 || CVPixelBufferGetPixelFormatType(v11) == 2037741158)
  {
    *((_WORD *)v94 + 12) = CVPixelBufferGetWidth(v11);
    *((_WORD *)v94 + 13) = CVPixelBufferGetHeight(v11);
    *((_WORD *)v94 + 200) = 1;
    *((_DWORD *)v94 + 13) = 0;
    *((_WORD *)v94 + 28) = CVPixelBufferGetWidth(v11);
    *((_WORD *)v94 + 29) = CVPixelBufferGetHeight(v11);
    *((_WORD *)v94 + 47) = CVPixelBufferGetBytesPerRow(v11);
    v53 = CVPixelBufferGetPixelFormatType(v11) != 2037741171;
  }
  v61 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE107D0]);
  if (v61)
  {
    v62 = (const __CFData *)CFDictionaryGetValue(v61, (const void *)*MEMORY[0x24BE10D48]);
    v45 = v62;
    if (v62)
    {
      v63 = v53;
      v64 = CFGetTypeID(v62);
      if (v64 == CFDataGetTypeID())
      {
        v65 = CFDataGetLength(v45);
        v66 = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), 0, __dst, valuePtr);
        v67 = v111;
        if (v65 > v111)
          v67 = v65;
        v92 = v66;
        if (v66)
          v67 = v65;
        v91 = v67;
        v68 = H9ISP::H9ISPCreateCVBuffer((v67 >> 4) + 1, 8u, 0, 0, 1, 0, 64, 64, 0.0, 0, 0, v89, 0, 0);
        v44 = v68;
        if (v68)
        {
          CVPixelBufferLockBaseAddress(v68, 0);
          v69 = CVPixelBufferGetIOSurface(v44);
          v90 = IOSurfaceGetID(v69);
          v70 = CVPixelBufferGetBaseAddress(v44);
          v71 = CFDataGetBytePtr(v45);
          memmove(v70, v71, v65);
          v41 = v93;
          v53 = v63;
          goto LABEL_88;
        }
      }
      else
      {
        v44 = 0;
      }
      v45 = 0;
    }
    else
    {
      v44 = 0;
    }
LABEL_100:
    v8 = 4294954516;
    v26 = v92;
    goto LABEL_38;
  }
  v44 = 0;
  v90 = 0;
  v91 = 0;
LABEL_88:
  if (v50)
  {
    v72 = *((_DWORD *)v50 + 1);
    v73 = *((_DWORD *)v50 + 2);
    v74 = *((_DWORD *)v50 + 3);
  }
  else
  {
    v72 = v41[2];
    v73 = v41[3];
    v74 = v41[2064];
  }
  v75 = H9ISP::H9ISPCreateCVBuffer(v72, v73, v74, 0, *v41, v53, 64, 64, 0.0, 0, 0, v89, 0, 0);
  v45 = v75;
  if (!v75)
    goto LABEL_100;
  v76 = CVPixelBufferGetIOSurface(v75);
  v77 = IOSurfaceGetID(v76);
  valuePtr[0] = v98;
  v78 = CVPixelBufferGetDataSize(v11);
  v79 = *((unsigned __int16 *)v94 + 47);
  valuePtr[1] = v78;
  valuePtr[2] = v79;
  valuePtr[3] = v96;
  valuePtr[4] = DataSize;
  v80 = v90;
  if (v44)
  {
    v81 = v91;
  }
  else
  {
    v80 = -1;
    v81 = 0;
  }
  valuePtr[5] = v77;
  v109 = v80;
  v110 = v81;
  if (*v41 == 1)
  {
    BytesPerRow = CVPixelBufferGetBytesPerRow(v45);
    Height = CVPixelBufferGetHeight(v45);
    LODWORD(v84) = 0;
    v104 = Height * BytesPerRow;
  }
  else
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v45, 0);
    v104 = CVPixelBufferGetHeight(v45) * BytesPerRowOfPlane;
    v86 = CVPixelBufferGetBytesPerRowOfPlane(v45, 1uLL);
    v84 = (CVPixelBufferGetHeight(v45) * v86) >> 1;
  }
  v105 = v84;
  v87 = *v93 == 1;
  v107 = *v93;
  if (v107 == 1)
    v88 = 262080;
  else
    v88 = 131008;
  v106 = ((v93[2] << v87) + 63) & v88;
  v108 = v95;
  v26 = H9ISP::H9ISPDevice::ISP_ProcessRawImagePrepare(*(_QWORD *)(a4 + 24), valuePtr);
  if (v26)
    v8 = 4294954516;
  else
    v8 = 0;
LABEL_38:
  if (!v26)
  {
    *(_BYTE *)(a2 + 264) = 1;
    *(_QWORD *)(a2 + 272) = v25;
    *(_QWORD *)(a2 + 280) = v44;
    *(_QWORD *)(a2 + 288) = v11;
    *(_QWORD *)(a2 + 296) = v45;
    v15 = cf;
    if (!cf)
      goto LABEL_48;
    goto LABEL_47;
  }
  CVPixelBufferUnlockBaseAddress(v25, 0);
  CVPixelBufferRelease(v25);
  if (v44)
  {
    CVPixelBufferUnlockBaseAddress(v44, 0);
    CVPixelBufferRelease(v44);
  }
  if (v45)
  {
    CVPixelBufferUnlockBaseAddress(v45, 0);
    CVPixelBufferRelease(v45);
  }
  return v8;
}

uint64_t RawImageProcessGo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const __CFString *v7;
  CFTypeRef Attachment;
  const void *v9;
  const __CFAllocator *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v13;
  __CVBuffer *v14;
  __CVBuffer *v15;
  __CVBuffer *v16;
  CMVideoFormatDescriptionRef formatDescriptionOut[2];
  CMSampleBufferRef sampleBufferOut;

  sampleBufferOut = 0;
  if (!*(_BYTE *)(a2 + 264))
    return 4294954516;
  if (H9ISP::H9ISPDevice::ISP_ProcessRawImageGo(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84)))
  {
    v6 = 4294954516;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 56) + 80 * *(unsigned int *)(a2 + 84) + 8))
    {
      LODWORD(formatDescriptionOut[0]) = 257;
      BYTE4(formatDescriptionOut[0]) = 0;
      BYTE6(formatDescriptionOut[0]) = 0;
      formatDescriptionOut[1] = 0;
      CVBufferSetAttachment(*(CVBufferRef *)(a2 + 296), CFSTR("RawMetaData"), *(CFTypeRef *)(a2 + 272), kCVAttachmentMode_ShouldPropagate);
      H9ISP::GenerateAndAttachCoreMediaMetaDataDictionary();
    }
    v7 = (const __CFString *)*MEMORY[0x24BE10818];
    Attachment = CVBufferGetAttachment(*(CVBufferRef *)(a2 + 296), (CFStringRef)*MEMORY[0x24BE10818], 0);
    if (Attachment)
    {
      v9 = *(const void **)(a2 + 304);
      if (v9)
        CFRelease(v9);
      CFRetain(Attachment);
      *(_QWORD *)(a2 + 304) = Attachment;
    }
    formatDescriptionOut[0] = 0;
    v10 = CFGetAllocator(*(CFTypeRef *)(a2 + 8));
    CMVideoFormatDescriptionCreateForImageBuffer(v10, *(CVImageBufferRef *)(a2 + 296), formatDescriptionOut);
    v11 = CFGetAllocator(*(CFTypeRef *)(a2 + 8));
    v6 = CMSampleBufferCreateForImageBuffer(v11, *(CVImageBufferRef *)(a2 + 296), 1u, 0, 0, formatDescriptionOut[0], (const CMSampleTimingInfo *)(a2 + 312), &sampleBufferOut);
    FigFormatDescriptionRelease();
    if ((_DWORD)v6)
    {
      H9ISPLogger(3, "FigSampleBufferCreateForImageBuffer error: %d\n", v6);
    }
    else
    {
      if (Attachment)
        CMSetAttachment(sampleBufferOut, v7, Attachment, 1u);
      v12 = 16;
      if (!*(_BYTE *)(a2 + 456))
        v12 = 24;
      v13 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + v12), sampleBufferOut);
      v6 = v13;
      if ((_DWORD)v13)
        H9ISPLogger(3, "FigBufferQueueEnqueue error: %d\n", v13);
    }
    if (sampleBufferOut)
      FigSampleBufferRelease();
  }
  v14 = *(__CVBuffer **)(a2 + 288);
  if (v14)
  {
    CVPixelBufferUnlockBaseAddress(v14, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 288));
    *(_QWORD *)(a2 + 288) = 0;
  }
  v15 = *(__CVBuffer **)(a2 + 296);
  if (v15)
  {
    CVPixelBufferUnlockBaseAddress(v15, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 296));
    *(_QWORD *)(a2 + 296) = 0;
  }
  v16 = *(__CVBuffer **)(a2 + 280);
  if (v16)
  {
    CVPixelBufferUnlockBaseAddress(v16, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 280));
    *(_QWORD *)(a2 + 280) = 0;
  }
  *(_BYTE *)(a2 + 264) = 0;
  return v6;
}

uint64_t RawImageProcessEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __CVBuffer *v7;

  if (!*(_BYTE *)(a2 + 256) || *(_BYTE *)(a2 + 264))
    return 4294954516;
  H9ISP::H9ISPDevice::ProcessRawStop(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84));
  if (*(_BYTE *)(a2 + 257))
    H9ISP::H9ISPDevice::EnableTNR(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 1);
  *(_BYTE *)(a2 + 256) = 0;
  v7 = *(__CVBuffer **)(a2 + 272);
  if (v7)
  {
    CVPixelBufferUnlockBaseAddress(v7, 0);
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 272));
    *(_QWORD *)(a2 + 272) = 0;
  }
  result = *(_QWORD *)(a2 + 304);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    result = 0;
    *(_QWORD *)(a2 + 304) = 0;
  }
  return result;
}

uint64_t SetAEGainConvergenceNormalizationEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  v8 = 4294954516;
  if (v7 == CFBooleanGetTypeID())
  {
    v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
    v10 = v9 != 0;
    if (v9)
      H9ISPLogger(6, "H9ISPCaptureDevice: Enable AE Gain Convergence Normalization\n");
    else
      H9ISPLogger(6, "H9ISPCaptureDevice: Disable AE Gain Convergence Normalization\n");
    if (H9ISP::H9ISPDevice::EnableAEGainConvergenceNormalization(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v10))return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t SetDeviceOrientation(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v8 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v8 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  if (valuePtr > 3)
  {
    v9 = -536870206;
  }
  else
  {
    v9 = H9ISP::H9ISPDevice::SetDeviceOrientation(*(H9ISP::H9ISPDevice **)(a4 + 24), v8, dword_2358295E0[valuePtr]);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  H9ISPLogger(3, "H9ISPCaptureDevice: Set Device Orientation: did not succeed: 0x%08x\n", v9);
  v10 = 4294954516;
LABEL_11:
  if (valuePtr > 3)
    H9ISPLogger(6, "H9ISPCaptureDevice: Set Device Orientation: Unknown orientation\n");
  else
    H9ISPLogger(6, "H9ISPCaptureDevice: Set Device Orientation: %d (rotation: %d) \n");
  return v10;
}

uint64_t LockDynamicToneCurveNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::ToneCurveAdaptationSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: Tone Curve Adaptation Suspend, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t UnlockDynamicToneCurveNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::ToneCurveAdaptationResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: Tone Curve Adaptation Resume, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t LockBLCNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::BLCSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: BLC Suspend, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t UnlockBLCNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::BLCResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: BLC Resume, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t SetDiagnosticMode(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  H9ISP::H9ISPFrameReceiver *v5;
  uint64_t v6;
  unsigned int valuePtr;

  if (!a1)
    return 4294954516;
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
    return 4294954516;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v5 = *(H9ISP::H9ISPFrameReceiver **)(a2 + 88);
  v6 = 4294954516;
  if (v5)
  {
    if (H9ISP::H9ISPFrameReceiver::setDiagnosticsMode(v5, valuePtr))
      return 4294954516;
    else
      return 0;
  }
  return v6;
}

uint64_t SetImageMapParams(CFTypeRef cf, uint64_t a2)
{
  CFTypeID v4;
  const void *Value;
  CFTypeRef *v6;
  const void *v7;
  int v8;
  const void *v9;
  const void *v10;
  int v11;
  const __CFData *v12;
  const __CFData *v13;
  CFTypeID v14;
  const void *v15;
  uint64_t result;
  const __CFData *v17;
  CFTypeID v18;
  const void *v19;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 != CFDictionaryGetTypeID())
      return 4294954516;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE106D0]);
  v6 = (CFTypeRef *)MEMORY[0x24BE10700];
  if (Value)
  {
    v7 = Value;
    if (CFEqual((CFTypeRef)*MEMORY[0x24BE10700], Value))
    {
      v8 = 0;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE106E0], v7))
    {
      v8 = 6;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE106E8], v7))
    {
      v8 = 7;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE106F0], v7))
    {
      v8 = 8;
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x24BE106F8], v7))
        return 4294954516;
      v8 = 9;
    }
    *(_DWORD *)(a2 + 424) = v8;
  }
  v9 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE106D8]);
  if (v9)
  {
    v10 = v9;
    if (CFEqual(*v6, v9))
    {
      v11 = 0;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE106E0], v10))
    {
      v11 = 6;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE106E8], v10))
    {
      v11 = 7;
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE106F0], v10))
    {
      v11 = 8;
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x24BE106F8], v10))
        return 4294954516;
      v11 = 9;
    }
    *(_DWORD *)(a2 + 428) = v11;
  }
  v12 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11088]);
  if (!v12)
    goto LABEL_33;
  v13 = v12;
  v14 = CFGetTypeID(v12);
  if (v14 != CFDataGetTypeID() || CFDataGetLength(v13) != 36)
    return 4294954516;
  v15 = *(const void **)(a2 + 432);
  if (v15)
    CFRelease(v15);
  *(_QWORD *)(a2 + 432) = v13;
  CFRetain(v13);
LABEL_33:
  result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11090]);
  if (!result)
    return result;
  v17 = (const __CFData *)result;
  v18 = CFGetTypeID((CFTypeRef)result);
  if (v18 != CFDataGetTypeID() || CFDataGetLength(v17) != 36)
    return 4294954516;
  v19 = *(const void **)(a2 + 440);
  if (v19)
    CFRelease(v19);
  *(_QWORD *)(a2 + 440) = v17;
  CFRetain(v17);
  return 0;
}

uint64_t SetAlternateOutputSize(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v7;
  int v8;
  CFTypeID v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  BOOL v15;
  H9ISP::H9ISPFrameReceiver *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  H9ISP::H9ISPFrameReceiver *v39;
  uint64_t valuePtr;
  unsigned int v41[2];

  if (*(_BYTE *)(a2 + 523))
    return 4294954509;
  valuePtr = 0;
  *(_QWORD *)v41 = 0;
  v7 = *(_DWORD *)(a2 + 40);
  if (v7 >= *(_DWORD *)(a2 + 112))
    v8 = *(_DWORD *)(a2 + 112);
  else
    v8 = 0;
  if (!cf)
    return 4294954516;
  v10 = CFGetTypeID(cf);
  if (v10 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11140]);
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11128]);
  v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11000]);
  v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE10FF8]);
  if (Value)
    v15 = v12 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v19 = v7 - v8;
    CFNumberGetValue(Value, kCFNumberIntType, &v41[1]);
    CFNumberGetValue(v12, kCFNumberIntType, v41);
    v20 = *(_QWORD *)(a2 + 104);
    v21 = *(_DWORD *)(v20 + 84 * v19 + 28);
    v22 = v41[1] <= v21 && v41[1] >= v21 >> 2;
    if (!v22)
      return 4294954516;
    v23 = v20 + 84 * v19;
    v25 = *(_DWORD *)(v23 + 32);
    v24 = (unsigned int *)(v23 + 32);
    v26 = v25 >> 2;
    if (v41[0] > v25 || v41[0] < v26)
      return 4294954516;
    if (v13 && v14)
    {
      CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
      v21 = HIDWORD(valuePtr) & 0xFFFFFFFE;
      v29 = valuePtr & 0xFFFFFFFE;
      LODWORD(valuePtr) = valuePtr & 0xFFFFFFFE;
      HIDWORD(valuePtr) = v21;
      v4 = 4294954516;
      if (v21 < 0x140)
        return v4;
      v30 = *(_QWORD *)(a2 + 104);
      v31 = *(_DWORD *)(v30 + 84 * v19 + 28);
      v22 = v31 >= v21;
      v32 = v31 - v21;
      if (!v22)
        return v4;
      if (v29 < 0xF0)
        return v4;
      v33 = *(_DWORD *)(v30 + 84 * v19 + 32);
      v22 = v33 >= v29;
      v34 = v33 - v29;
      if (!v22)
        return v4;
      v35 = v30 + 84 * v19;
      v36 = (*(_DWORD *)(v35 + 20) + (v32 >> 1)) & 0xFFFFFFFE;
      v37 = (*(_DWORD *)(v35 + 24) + (v34 >> 1)) & 0xFFFFFFFE;
    }
    else
    {
      HIDWORD(valuePtr) = *(_DWORD *)(v20 + 84 * v19 + 28);
      v29 = *v24;
      LODWORD(valuePtr) = *v24;
      v38 = v20 + 84 * v19;
      v36 = *(_DWORD *)(v38 + 20);
      v37 = *(_DWORD *)(v38 + 24);
    }
    v39 = *(H9ISP::H9ISPFrameReceiver **)(a2 + 88);
    if (!v39)
    {
      v4 = 0;
      *(_DWORD *)(a2 + 460) = v41[1];
      *(_DWORD *)(a2 + 464) = v41[0];
      *(_DWORD *)(a2 + 476) = v21;
      *(_DWORD *)(a2 + 480) = v29;
      goto LABEL_47;
    }
    v4 = H9ISP::H9ISPFrameReceiver::setNewOutputSize(v39, v41[1], v41[0], v36, v37, v21, v29);
    H9ISPLogger(6, "H9ISPCaptureDevice: setNewOutputSize, result=0x%08X\n", v4);
    if (!(_DWORD)v4)
    {
      *(_DWORD *)(a2 + 460) = v41[1];
      *(_DWORD *)(a2 + 464) = v41[0];
      *(_DWORD *)(a2 + 476) = HIDWORD(valuePtr);
      *(_DWORD *)(a2 + 480) = valuePtr;
LABEL_47:
      *(_DWORD *)(a2 + 468) = v36;
      *(_DWORD *)(a2 + 472) = v37;
      return v4;
    }
    return 4294954516;
  }
  v16 = *(H9ISP::H9ISPFrameReceiver **)(a2 + 88);
  if (!v16 || H9ISP::H9ISPFrameReceiver::isNewOutputSizeChangePending(v16))
    return 4294954516;
  v4 = 4294954516;
  if (v13)
  {
    if (v14)
    {
      CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4);
      CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
      v17 = HIDWORD(valuePtr) & 0xFFFFFFFE;
      v18 = valuePtr & 0xFFFFFFFE;
      LODWORD(valuePtr) = valuePtr & 0xFFFFFFFE;
      HIDWORD(valuePtr) = v17;
      if (v17 >= *(_DWORD *)(a2 + 460) && v18 >= *(_DWORD *)(a2 + 464))
      {
        if (H9ISP::H9ISPDevice::SetScalerCrop(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), ((*(_DWORD *)(a2 + 484) - v17) >> 1) & 0x7FFFFFFE | ((((unint64_t)(((*(_DWORD *)(a2 + 488) - v18) >> 1) & 0x7FFFFFFE) >> 1) & 0x3FFFFFFF) << 33), v17 | (v18 << 32)))return 4294954516;
        else
          return 0;
      }
    }
  }
  return v4;
}

uint64_t SetUsePreviewBufferQueueForRawReprocessing(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  int v5;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID())
    return 4294954516;
  v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
  result = 0;
  *(_BYTE *)(a2 + 456) = v5 != 0;
  return result;
}

uint64_t SetAFPeakPredictionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const char *v8;
  int v9;
  int v10;
  uint64_t v11;

  if (a1)
  {
    v7 = CFGetTypeID(a1);
    v8 = "False";
    if (v7 == CFBooleanGetTypeID())
    {
      v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
      v10 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
      if (*(_QWORD *)(a2 + 1352))
        v10 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
      if (v9)
        v8 = "True";
      if (H9ISP::H9ISPDevice::EnableAFPeakPrediction(*(H9ISP::H9ISPDevice **)(a4 + 24), v10, v9 != 0))
        v11 = 4294954516;
      else
        v11 = 0;
    }
    else
    {
      v11 = 4294954516;
    }
  }
  else
  {
    v11 = 4294954516;
    v8 = "False";
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: Enable AF Peak Prediction: %s\n", v8);
  return v11;
}

uint64_t SetAEEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const char *v8;
  uint64_t v9;
  int v10;

  if (a1)
  {
    v7 = CFGetTypeID(a1);
    v8 = "False";
    v9 = 4294954516;
    if (v7 == CFBooleanGetTypeID())
    {
      v10 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
      if (v10)
        v8 = "True";
      if (H9ISP::H9ISPDevice::EnableAE(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v10 != 0))
        v9 = 4294954516;
      else
        v9 = 0;
    }
  }
  else
  {
    v8 = "False";
    v9 = 4294954516;
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: Enable AE: %s\n", v8);
  return v9;
}

uint64_t SetAWB1stGainManual(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  BOOL v13;
  const __CFNumber *v18;
  _BOOL4 v19;
  int v20;
  unsigned __int16 v21[2];
  unsigned __int16 v22[2];
  unsigned __int16 v23[2];
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10658]);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10670]);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10668]);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10660]);
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10650]);
  if (Value)
    v13 = v9 == 0;
  else
    v13 = 1;
  if (v13 || v10 == 0 || v11 == 0 || v12 == 0)
  {
    H9ISPLogger(4, "H9ISPCaptureDevice: Missing entries in dictionary passed for kFigCaptureStreamProperty_AWB1stGainManual property\n");
    return 4294954516;
  }
  v18 = v12;
  v19 = CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  valuePtr = 0;
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  *(_DWORD *)v23 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, v23);
  *(_DWORD *)v22 = 0;
  CFNumberGetValue(v11, kCFNumberIntType, v22);
  *(_DWORD *)v21 = 0;
  CFNumberGetValue(v18, kCFNumberIntType, v21);
  v20 = H9ISP::H9ISPDevice::SetAWB1stGainManual(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v19, valuePtr, v23[0], v22[0], v21[0]);
  H9ISPLogger(6, "H9ISPCaptureDevice: set kFigCaptureStreamProperty_AWB1stGainManual, enableFlag=%d, rGain=%d, grGain=%d, gbGain=%d, bGain=%d, result=0x%08X\n", v19, valuePtr, *(_DWORD *)v23, *(_DWORD *)v22, *(_DWORD *)v21, v20);
  if (v20)
    return 4294954516;
  else
    return 0;
}

uint64_t SetLimitAERange(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  int v12;
  unsigned __int16 v13[2];
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11198]);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110B8]);
  if (Value)
  {
    v10 = v9;
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    *(_DWORD *)v13 = 0;
    CFNumberGetValue(v10, kCFNumberIntType, v13);
    if (H9ISP::H9ISPDevice::SetPanoAELimits(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr, v13[0]))return 4294954516;
    v12 = H9ISP::H9ISPDevice::SetAEMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1u);
    H9ISPLogger(6, "H9ISPCaptureDevice: kFigCaptureStreamProperty_LimitAERange enabled, upper=0x%08X, lower=0x%08X, res=0x%08x\n", valuePtr, *(_DWORD *)v13, v12);
  }
  else
  {
    v12 = H9ISP::H9ISPDevice::SetAEMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0);
    H9ISPLogger(6, "H9ISPCaptureDevice: kFigCaptureStreamProperty_LimitAERange disabled. res=0x%08x\n", v12);
  }
  if (v12)
    return 4294954516;
  else
    return 0;
}

uint64_t SetChromaNoiseReductionEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  int v8;
  uint64_t v9;
  const char *v10;

  if (!a1 || (v7 = CFGetTypeID(a1), v7 != CFBooleanGetTypeID()))
  {
    v10 = "False";
    v9 = 4294954516;
    goto LABEL_7;
  }
  v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
  if (!H9ISP::H9ISPDevice::EnableCNR(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v8 != 0))
  {
    v9 = 0;
    *(_BYTE *)(a2 + 1304) = v8 != 0;
    if (v8)
      goto LABEL_5;
LABEL_9:
    v10 = "False";
    goto LABEL_7;
  }
  v9 = 4294954516;
  if (!v8)
    goto LABEL_9;
LABEL_5:
  v10 = "True";
LABEL_7:
  H9ISPLogger(6, "H9ISPCaptureDevice: Enable CNR: %s\n", v10);
  return v9;
}

uint64_t PeakTrackingFocusNow(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *Value;
  const void *v9;
  const __CFNumber *v10;
  int v11;
  int v12;
  uint64_t result;
  unsigned __int8 v14[8];
  unsigned int v15;
  int v16;
  int v17;
  int valuePtr;

  valuePtr = 6;
  if (a1 && (v7 = CFGetTypeID(a1), v7 == CFDictionaryGetTypeID()))
  {
    Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE11168]);
    v9 = Value;
    if (Value)
    {
      if (CFEqual(Value, (CFTypeRef)*MEMORY[0x24BE11178]))
        LODWORD(v9) = 1;
      else
        LODWORD(v9) = 2 * (CFEqual(v9, (CFTypeRef)*MEMORY[0x24BE11170]) != 0);
    }
    v10 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE11160]);
    if (v10)
      CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v11 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v11 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  *(_QWORD *)v14 = 0x840800000000;
  v15 = v11 & 0x8000FFFF;
  v16 = (int)v9;
  v17 = valuePtr;
  v12 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), v14, 0x14u, 0, 0xFFFFFFFF);
  H9ISPLogger(6, "H9ISPCaptureDevice: Initiating peak-tracking auto-focus operation, directionHint=%d, res=0x%08X\n", (_DWORD)v9, v12);
  if (v12)
    return 4294954516;
  result = 0;
  *(_BYTE *)(a2 + 408) = 1;
  return result;
}

uint64_t LockLTMNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::LTMUpdateSuspend(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: LTM Update Suspend, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t UnlockLTMNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::LTMUpdateResume(*(H9ISP::H9ISPDevice **)(a4 + 24), v5);
  H9ISPLogger(6, "H9ISPCaptureDevice: LTM Update Resume, result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t SetDynamicToneCurve(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const void *v12;
  int v13;
  BOOL v14;
  int started;
  uint64_t v20;
  uint64_t valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10F90]);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE111A0]);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110A0]);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE110D8]);
  v12 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11020]);
  if (!v12)
    return 4294954516;
  v20 = 0;
  valuePtr = 0;
  v13 = CFEqual(v12, (CFTypeRef)*MEMORY[0x24BDBD270]);
  if (Value)
    v14 = v9 == 0;
  else
    v14 = 1;
  if (v14 || v10 == 0 || v11 == 0 || v13 == 0)
  {
    if (!v13)
    {
      started = H9ISP::H9ISPDevice::StopToneCurveAdaptation(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84));
      H9ISPLogger(6, "H9ISPCaptureDevice: StopToneCurveAdaptation, result=0x%08X\n");
      goto LABEL_23;
    }
  }
  else
  {
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
    CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    CFNumberGetValue(v10, kCFNumberIntType, (char *)&v20 + 4);
    CFNumberGetValue(v11, kCFNumberIntType, &v20);
  }
  started = H9ISP::H9ISPDevice::StartToneCurveAdaptation(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84));
  H9ISPLogger(6, "H9ISPCaptureDevice: StartToneCurveAdaptation, result=0x%08X\n");
LABEL_23:
  if (started)
    return 4294954516;
  else
    return 0;
}

uint64_t SetMaxPerFrameExposureDelta(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  unsigned int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v8 = 4294954516;
  if (!HIWORD(valuePtr))
  {
    v9 = H9ISP::H9ISPDevice::SetAEPanoMaxExpAdjustment(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetMaxPerFrameExposureDelta: 0x%08X, result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyMaxPerFrameExposureDelta(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  unsigned int valuePtr;

  valuePtr = 0;
  if (H9ISP::H9ISPDevice::GetAEPanoMaxExpAdjustment(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &valuePtr))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyFocusLastScanHistory()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFMutableDictionaryRef *v4;
  CFMutableDictionaryRef *v5;
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  const void **v10;
  uint64_t v11;
  CFNumberRef v13;
  CFMutableArrayRef v14;
  __CFArray *v15;
  unint64_t v16;
  CFNumberRef v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  unsigned __int8 v24[4];
  __int16 v25;
  int v26;
  int v27;
  _WORD v28[256];
  _BYTE v29[32834];
  unsigned __int16 v30;
  uint64_t v31;
  int v32[3];

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v31 = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v32[0] = 0;
    v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
    if (!v8)
    {
      v11 = 4294954510;
      goto LABEL_12;
    }
    v9 = v8;
    v30 = 0;
    if (H9ISP::H9ISPDevice::GetFocusMode(*(H9ISP::H9ISPDevice **)(v1 + 24), *(_DWORD *)(v3 + 84), &v30)
      || (v30 ? (v10 = (const void **)MEMORY[0x24BE10678]) : (v10 = (const void **)MEMORY[0x24BE10680]),
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE106A8], *v10),
          bzero(v24, 0x8250uLL),
          v25 = -31730,
          v26 = *(_DWORD *)(v3 + 84),
          H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v1 + 24), v24, 0x8250u, 0, 0xFFFFFFFF)))
    {
      v11 = 4294954516;
LABEL_9:
      CFRelease(v9);
LABEL_12:
      CFRelease(Mutable);
      Mutable = 0;
      goto LABEL_13;
    }
    HIDWORD(v31) = v27;
    v13 = CFNumberCreate(0, kCFNumberIntType, (char *)&v31 + 4);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE106B0], v13);
    CFRelease(v13);
    if (!HIDWORD(v31))
    {
      v11 = 4294954513;
      goto LABEL_9;
    }
    v14 = CFArrayCreateMutable(v6, 0, MEMORY[0x24BDBD690]);
    if (!v14)
    {
      v11 = 4294954510;
      goto LABEL_9;
    }
    v15 = v14;
    if (HIDWORD(v31))
    {
      v16 = 0;
      do
      {
        v32[0] = (unsigned __int16)v28[v16];
        v17 = CFNumberCreate(0, kCFNumberIntType, v32);
        CFArrayAppendValue(v15, v17);
        CFRelease(v17);
        ++v16;
      }
      while (v16 < HIDWORD(v31));
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE106B8], v15);
    CFRelease(v15);
    v18 = 0;
    v19 = v29;
    do
    {
      if (!v29[2052 * v18 + 2048])
        break;
      LODWORD(v31) = ++v18;
      if (HIDWORD(v31))
      {
        v20 = 0;
        v21 = v19;
        do
        {
          v22 = CFNumberCreate(0, kCFNumberLongLongType, v21);
          CFArrayAppendValue(v9, v22);
          CFRelease(v22);
          ++v20;
          v21 += 8;
        }
        while (v20 < HIDWORD(v31));
      }
      v19 += 2052;
    }
    while (v18 != 16);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE106C0], v9);
    CFRelease(v9);
    v23 = CFNumberCreate(0, kCFNumberIntType, &v31);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE106C8], v23);
    CFRelease(v23);
    v11 = 0;
  }
  else
  {
    v11 = 4294954510;
  }
LABEL_13:
  *v5 = Mutable;
  return v11;
}

uint64_t SetLocalHistogramsEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const char *v8;
  uint64_t v9;
  int v11;

  if (a1)
  {
    v7 = CFGetTypeID(a1);
    if (v7 == CFBooleanGetTypeID() && !*(_QWORD *)(a2 + 88))
    {
      v11 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
      if (H9ISP::H9ISPDevice::EnableLocalHistogram(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v11 != 0))
      {
        v9 = 4294954516;
        if (v11)
        {
LABEL_8:
          v8 = "True";
          goto LABEL_5;
        }
      }
      else
      {
        if (H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 15, v11 != 0))v9 = 4294954516;
        else
          v9 = 0;
        if (v11)
          goto LABEL_8;
      }
      v8 = "False";
      goto LABEL_5;
    }
  }
  v8 = "False";
  v9 = 4294954516;
LABEL_5:
  H9ISPLogger(6, "H9ISPCaptureDevice: SetLocalHistogramsEnabled: %s (err=%d) \n", v8, v9);
  return v9;
}

uint64_t SetSphereMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  int v8;
  int v10;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFStringGetTypeID())
    return 4294954516;
  if (!*(_DWORD *)(a2 + 508))
  {
    H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: camChannel = %d \n", *(_DWORD *)(a2 + 84));
    return 0;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x24BE115F8], a1))
  {
    v8 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0);
    if (!v8)
      v8 = H9ISP::H9ISPDevice::SetOISActuator(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 0);
    if (*(_BYTE *)(a2 + 1284))
      DisableSphereBoostVoltage(a2, a4);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Inactive  (res=0x%08X)\n");
    goto LABEL_10;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x24BE115E0], a1))
  {
    v10 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1);
    if (*(_BYTE *)(a2 + 1284))
      DisableSphereBoostVoltage(a2, a4);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Active  (res=0x%08X)\n");
    goto LABEL_23;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x24BE11600], a1))
  {
    v10 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 2);
    if (*(_BYTE *)(a2 + 1284))
      DisableSphereBoostVoltage(a2, a4);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Lock  (res=0x%08X)\n");
    goto LABEL_23;
  }
  if (!CFEqual((CFTypeRef)*MEMORY[0x24BE115E8], a1))
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x24BE115F0], a1))
    {
      v10 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 7);
      if (*(_BYTE *)(a2 + 1284))
        DisableSphereBoostVoltage(a2, a4);
      H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_CenterSagLock  (res=0x%08X)\n");
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE11608], a1))
    {
      v10 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 4);
      if (*(_BYTE *)(a2 + 1284))
        DisableSphereBoostVoltage(a2, a4);
      H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Off  (res=0x%08X)\n");
    }
    else if (CFEqual((CFTypeRef)*MEMORY[0x24BE11610], a1))
    {
      v10 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 5);
      if (*(_BYTE *)(a2 + 1284))
        DisableSphereBoostVoltage(a2, a4);
      H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_Video  (res=0x%08X)\n");
    }
    else
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x24BE11618], a1) || EnableSphereBoostVoltage(a2, a4))
        return 4294954516;
      v10 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 5);
      H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_VideoHighRange  (res=0x%08X)\n");
    }
LABEL_23:
    if (v10)
      return 4294954516;
    return 0;
  }
  v8 = H9ISP::H9ISPDevice::SetOISMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 3);
  if (!v8)
    v8 = H9ISP::H9ISPDevice::SetOISPosition(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 0);
  if (*(_BYTE *)(a2 + 1284))
    DisableSphereBoostVoltage(a2, a4);
  H9ISPLogger(6, "H9ISPCaptureDevice: SetSphereMode: kFigCaptureStreamSphereMode_CenterLock  (res=0x%08X)\n");
LABEL_10:
  if (!v8)
    return 0;
  return 4294954516;
}

uint64_t CopySphereMode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef *v7;
  CFTypeRef v8;
  unsigned __int16 v10[2];

  *(_DWORD *)v10 = 0;
  H9ISP::H9ISPDevice::GetOISMode(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), v10);
  v7 = (CFTypeRef *)MEMORY[0x24BE11600];
  switch(*(_DWORD *)v10)
  {
    case 1:
      v7 = (CFTypeRef *)MEMORY[0x24BE115E0];
      break;
    case 2:
      break;
    case 3:
      v7 = (CFTypeRef *)MEMORY[0x24BE115E8];
      break;
    case 4:
      v7 = (CFTypeRef *)MEMORY[0x24BE11608];
      break;
    case 5:
      if (*(_BYTE *)(a3 + 1284))
        v7 = (CFTypeRef *)MEMORY[0x24BE11618];
      else
        v7 = (CFTypeRef *)MEMORY[0x24BE11610];
      break;
    case 7:
      v7 = (CFTypeRef *)MEMORY[0x24BE115F0];
      break;
    default:
      v7 = (CFTypeRef *)MEMORY[0x24BE115F8];
      break;
  }
  v8 = *v7;
  CFRetain(*v7);
  *a2 = v8;
  return 0;
}

uint64_t SetMotionDataFromISPEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  const char *v9;

  if (a1 && (v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    v8 = 4294954516;
    if (!*(_QWORD *)(a2 + 88))
    {
      *(_BYTE *)(a2 + 1250) = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
      if (EnableDisableOISAndMotionMetaData(a2, a4))
        v8 = 4294954516;
      else
        v8 = 0;
    }
  }
  else
  {
    v8 = 4294954516;
  }
  if (*(_BYTE *)(a2 + 1250))
    v9 = "True";
  else
    v9 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: SetMotionDataFromISPEnabled: %s (err=%d)\n", v9, v8);
  return v8;
}

uint64_t SetMaxFrameCoalescingDuration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  int v8;
  int v9;
  uint64_t result;
  CMTime time;
  CMTime v12;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  memset(&v12, 0, sizeof(v12));
  CMTimeMakeFromDictionary(&v12, (CFDictionaryRef)a1);
  time = v12;
  v8 = (CMTimeGetSeconds(&time) * 1000000.0);
  v9 = H9ISP::H9ISPDevice::SetTargetToHostFrameDeliveryCadenceInMicroSeconds(*(H9ISP::H9ISPDevice **)(a4 + 24), v8);
  H9ISPLogger(6, "H9ISPCaptureDevice: SetMaxFrameCoalescingDuration (in MicroSeconds): %d result=0x%08X\n", v8, v9);
  if (v9)
    return 4294954516;
  result = 0;
  *(_DWORD *)(a2 + 524) = v8;
  return result;
}

uint64_t CopyMaxFrameCoalescingDuration(uint64_t a1, CFDictionaryRef *a2, uint64_t a3)
{
  CMTime time;

  CMTimeMake(&time, *(unsigned int *)(a3 + 524), 1000000);
  *a2 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x24BDBD240]);
  return 0;
}

uint64_t SetContinuousAutoFocusNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::EnableContinuousFocus(*(H9ISP::H9ISPDevice **)(a4 + 24), v5, 1, *(_BYTE *)(a2 + 136));
  H9ISPLogger(6, "H9ISPCaptureDevice: SetContinuousAutoFocusNow result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t SetLockAFNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = H9ISP::H9ISPDevice::EnableContinuousFocus(*(H9ISP::H9ISPDevice **)(a4 + 24), v5, 0, 0);
  H9ISPLogger(6, "H9ISPCaptureDevice: SetLockAFNow result=0x%08X\n", v6);
  if (v6)
    return 4294954516;
  else
    return 0;
}

uint64_t SetManualWhiteBalanceGain(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  BOOL v12;
  const __CFNumber *v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int valuePtr;
  int v21;

  v21 = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10A10]);
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10A08]);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10A00]);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10698]);
  v12 = !Value || v9 == 0;
  if (v12 || v10 == 0)
    return 4294954516;
  v15 = v11;
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v19 = 0;
  CFNumberGetValue(v9, kCFNumberIntType, &v19);
  v18 = 0;
  CFNumberGetValue(v10, kCFNumberIntType, &v18);
  if (v15)
  {
    CFNumberGetValue(v15, kCFNumberSInt32Type, &v21);
    v16 = v21;
  }
  else
  {
    v16 = 0;
  }
  v17 = H9ISP::H9ISPDevice::SetAWBManualGain(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr, v19, v18, v16);
  H9ISPLogger(6, "H9ISPCaptureDevice: SetAWBManualGain, red=0x%08X, green=0x%08X, blue=0x%08X, tag=0x%08X, result=0x%08X\n", valuePtr, v19, v18, v21, v17);
  if (v17)
    return 4294954516;
  else
    return 0;
}

uint64_t SetISPHallDataEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  const char *v9;

  if (a1 && (v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    v8 = 4294954516;
    if (!*(_QWORD *)(a2 + 88))
    {
      *(_BYTE *)(a2 + 1249) = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
      if (EnableDisableOISAndMotionMetaData(a2, a4))
        v8 = 4294954516;
      else
        v8 = 0;
    }
  }
  else
  {
    v8 = 4294954516;
  }
  if (*(_BYTE *)(a2 + 1249))
    v9 = "True";
  else
    v9 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: SetMotionDataFromISPEnabled: %s (err=%d)\n", v9, v8);
  return v8;
}

uint64_t SetISPMotionDataEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  const char *v9;

  if (a1 && (v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    v8 = 4294954516;
    if (!*(_QWORD *)(a2 + 88))
    {
      *(_BYTE *)(a2 + 1248) = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
      if (EnableDisableOISAndMotionMetaData(a2, a4))
        v8 = 4294954516;
      else
        v8 = 0;
    }
  }
  else
  {
    v8 = 4294954516;
  }
  if (*(_BYTE *)(a2 + 1248))
    v9 = "True";
  else
    v9 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: SetMotionDataFromISPEnabled: %s (err=%d)\n", v9, v8);
  return v8;
}

uint64_t SetFaceDetectionConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *Value;
  const void *v9;
  const void *v10;
  const __CFNumber *v11;
  CFTypeRef *v12;
  CFTypeID v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  if (*(_QWORD *)(a2 + 88) && *(_BYTE *)(a2 + 61) != 1)
    return 4294954513;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10948]);
  v9 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10940]);
  v10 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10958]);
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10950]);
  *(_DWORD *)(a2 + 1256) = 0;
  v12 = (CFTypeRef *)MEMORY[0x24BDBD270];
  if (Value && CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDBD270]))
    *(_DWORD *)(a2 + 1256) |= 4u;
  if (v9 && CFEqual(v9, *v12))
    *(_DWORD *)(a2 + 1256) |= 2u;
  if (v10 && CFEqual(v10, *v12))
    *(_DWORD *)(a2 + 1256) |= 1u;
  if (v11 && (v13 = CFGetTypeID(v11), v13 == CFNumberGetTypeID()))
  {
    valuePtr = 0;
    CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
    if ((valuePtr & 0x80000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      v14 = 1320;
      if (!*(_QWORD *)(a2 + 88))
        v14 = 1312;
      v15 = *(_DWORD *)(a2 + v14);
      v16 = valuePtr >= v15 ? v15 : valuePtr;
    }
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 88) ? *(_DWORD *)(a2 + 1320) : *(_DWORD *)(a2 + 1312);
  }
  *(_DWORD *)(a2 + 1316) = v16;
  H9ISPLogger(6, "H9ISPCaptureDevice: SetFaceDetectionConfiguration, fdFeatureFlags=%d, maxFaces=%d\n", *(_DWORD *)(a2 + 1256), v16);
  if (*(_QWORD *)(a2 + 88)
    && *(_BYTE *)(a2 + 61) == 1
    && H9ISP::H9ISPDevice::ReconfigureFaceDetect(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(a2 + 1256), *(_DWORD *)(a2 + 1316)))
  {
    return 4294954516;
  }
  else
  {
    return 0;
  }
}

uint64_t SetZoomFactor(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v8;
  float v9;
  int v10;
  int v11;
  float valuePtr;

  valuePtr = 1.0;
  if (LOBYTE(gCaptureDeviceCFPrefs[28 * *(unsigned int *)(a2 + 84) + 82]))
    return 0;
  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
      v9 = valuePtr;
      *(float *)(a2 + 1252) = valuePtr;
      if (!*(_QWORD *)(a2 + 88))
      {
        H9ISPLogger(6, "H9ISPCaptureDevice: SetZoomFactor: %10.5f, result=0x%08X\n", v9, 0);
        return 0;
      }
      v10 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
      if (*(_QWORD *)(a2 + 1352))
        v10 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
      v11 = H9ISP::H9ISPDevice::SetZoomFactor(*(H9ISP::H9ISPDevice **)(a4 + 24), v10, vcvts_n_s32_f32(v9, 0xAuLL));
      H9ISPLogger(6, "H9ISPCaptureDevice: SetZoomFactor: %10.5f, result=0x%08X\n", valuePtr, v11);
      if (!v11)
        return 0;
    }
  }
  return 4294954516;
}

uint64_t CopyZoomFactor(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  float valuePtr;
  unsigned __int16 v12[2];

  *(_DWORD *)v12 = 0;
  if (H9ISP::H9ISPDevice::GetCurrentZoomFactor(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v12[1], v12))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    v8 = v12[1];
    if (v12[1] <= v12[0])
      v8 = v12[0];
    v9 = (double)v8 * 0.0009765625;
    valuePtr = v9;
    v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t CopyMaxZoomFactor(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  CFNumberRef v7;
  uint64_t v8;
  float v9;
  float valuePtr;
  unsigned __int16 v12[2];

  *(_DWORD *)v12 = 0;
  if (H9ISP::H9ISPDevice::GetZoomFactorLimits(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v12[1], v12))
  {
    v7 = 0;
    v8 = 4294954513;
  }
  else
  {
    LOWORD(v6) = v12[1];
    v9 = (double)v6 * 0.0009765625;
    valuePtr = v9;
    v7 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    v8 = 0;
  }
  *a2 = v7;
  return v8;
}

uint64_t CopyWhiteBalanceCalibrations(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  __CFArray *Mutable;
  uint64_t result;
  const __CFAllocator *v10;
  CFMutableDictionaryRef v11;
  const void **v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t i;
  float v17;
  CFDataRef v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  uint64_t j;
  float v23;
  CFDataRef v24;
  _BYTE valuePtr[4];
  _BYTE v26[76];
  UInt8 bytes[36];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  H9ISP::H9ISPDevice::GetAWBCalibrationMatrix(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), (uint64_t)valuePtr);
  if (v7)
  {
    Mutable = 0;
LABEL_3:
    result = 4294954513;
    goto LABEL_4;
  }
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    goto LABEL_3;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v11 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v12 = (const void **)MEMORY[0x24BE117D8];
  if (v11)
  {
    v13 = v11;
    v14 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
    if (v14)
    {
      v15 = v14;
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x24BE117E0], v14);
      CFRelease(v15);
    }
    for (i = 0; i != 36; i += 4)
    {
      v17 = (double)*(int *)&v26[i + 4] * 0.000244140625;
      *(float *)&bytes[i] = v17;
    }
    v18 = CFDataCreate(0, bytes, 36);
    CFDictionarySetValue(v13, *v12, v18);
    CFRelease(v18);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
  }
  result = (uint64_t)CFDictionaryCreateMutable(v10, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (result)
  {
    v19 = (__CFDictionary *)result;
    v20 = CFNumberCreate(0, kCFNumberSInt32Type, v26);
    if (v20)
    {
      v21 = v20;
      CFDictionaryAddValue(v19, (const void *)*MEMORY[0x24BE117E0], v20);
      CFRelease(v21);
    }
    for (j = 0; j != 36; j += 4)
    {
      v23 = (double)*(int *)&v26[j + 40] * 0.000244140625;
      *(float *)&bytes[j] = v23;
    }
    v24 = CFDataCreate(0, bytes, 36);
    CFDictionarySetValue(v19, *v12, v24);
    CFRelease(v24);
    CFArrayAppendValue(Mutable, v19);
    CFRelease(v19);
    result = 0;
  }
LABEL_4:
  *a2 = Mutable;
  return result;
}

uint64_t CopyWhiteBalanceGain(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  __CFDictionary *Mutable;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  int valuePtr;
  unsigned __int8 v12[8];
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)v12 = 0x830C00000000;
  v13 = 0;
  v14 = 0;
  LODWORD(v13) = *(_DWORD *)(a3 + 84);
  if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a5 + 24), v12, 0x18u, 0, 0xFFFFFFFF))
  {
    *a2 = 0;
    return 4294954513;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      valuePtr = HIDWORD(v13);
      v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE117F8], v8);
      CFRelease(v8);
      valuePtr = v14;
      v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE117F0], v9);
      CFRelease(v9);
      valuePtr = HIDWORD(v14);
      v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE117E8], v10);
      CFRelease(v10);
    }
    result = 0;
    *a2 = Mutable;
  }
  return result;
}

uint64_t SetVideoStabilizationISPOutputVectorsEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const char *v8;
  uint64_t v9;
  int v10;

  if (a1 && (v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    v8 = "False";
    v9 = 4294954516;
    if (!*(_QWORD *)(a2 + 88))
    {
      v10 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
      if (v10)
        v8 = "True";
      if (H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 20, v10 != 0))v9 = 4294954516;
      else
        v9 = 0;
    }
  }
  else
  {
    v8 = "False";
    v9 = 4294954516;
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoStabilizationISPOutputVectorsEnabled: %s (err=%d)\n", v8, v9);
  return v9;
}

uint64_t SetAutoFocusHintNow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  unsigned int v7;

  if (*(_DWORD *)(a2 + 56))
    return 4294954608;
  v5 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v5 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  v6 = 0x841300000000;
  v7 = v5 & 0x8000FFFF;
  if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a4 + 24), (unsigned __int8 *)&v6, 0xCu, 0, 0xFFFFFFFF))return 4294954516;
  else
    return 0;
}

uint64_t CopyFocalLength(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  CFNumberRef v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
  v7 = *(_DWORD *)(a3 + 84);
  if (*(_DWORD *)(v6 + 80 * v7 + 8) && (v8 = *(_QWORD *)(v6 + 80 * v7 + 24)) != 0)
  {
    v9 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v8 + 16));
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 4294954513;
  }
  *a2 = v9;
  return v10;
}

uint64_t CopyPixelSize(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  CFNumberRef v9;
  uint64_t result;

  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
  v6 = *(_DWORD *)(a3 + 84);
  if (!*(_DWORD *)(v5 + 80 * v6 + 8))
    return 4294954513;
  v7 = *(_QWORD *)(v5 + 80 * v6 + 24);
  if (!v7)
    return 4294954513;
  v9 = CFNumberCreate(a1, kCFNumberDoubleType, (const void *)(v7 + 40));
  result = 0;
  *a2 = v9;
  return result;
}

uint64_t CopyLensFNumber(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  CFNumberRef v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
  v7 = *(_DWORD *)(a3 + 84);
  if (*(_DWORD *)(v6 + 80 * v7 + 8) && (v8 = *(_QWORD *)(v6 + 80 * v7 + 24)) != 0)
  {
    v9 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v8 + 8));
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 4294954513;
  }
  *a2 = v9;
  return v10;
}

uint64_t SetGainAdaptiveParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFArray *Value;
  const __CFArray *v9;
  unsigned int Count;
  CFIndex v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  uint64_t result;
  int valuePtr;
  _BYTE v21[14];
  __int16 v22;
  _QWORD v23[2];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE109F0]);
  if (!Value)
  {
    H9ISP::H9ISPDevice::EnableGainAdaptation(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 0);
    return 4294954516;
  }
  v9 = Value;
  Count = CFArrayGetCount(Value);
  if (Count - 9 < 0xFFFFFFF8)
    return 4294954516;
  v11 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v24[0] = 0;
  v22 = Count;
  v12 = (const void *)*MEMORY[0x24BE109E0];
  v13 = (const void *)*MEMORY[0x24BE109E8];
  v14 = Count;
  do
  {
    valuePtr = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v11);
    v16 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v12);
    v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v13);
    if (!v16)
      break;
    v18 = v17;
    if (!v17)
      break;
    CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr >= 0x10000)
      break;
    *((_WORD *)v23 + v11) = valuePtr;
    CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
    if (valuePtr > 0xFF)
      break;
    *((_BYTE *)v24 + v11++) = valuePtr;
  }
  while (v14 != v11);
  if (H9ISP::H9ISPDevice::SetGainAdaptiveSettings(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, (uint64_t)v21))return 4294954516;
  result = H9ISP::H9ISPDevice::EnableGainAdaptation(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 1);
  if ((_DWORD)result)
    return 4294954516;
  return result;
}

uint64_t CopyGainAdaptiveParameters(const __CFAllocator *a1, CFMutableDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  int v12;
  uint64_t result;
  CFMutableArrayRef v14;
  __CFArray *v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  const CFDictionaryValueCallBacks *v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFMutableDictionaryRef *v24;
  int valuePtr;
  char v26[14];
  unsigned __int16 capacity;
  _WORD capacity_2[12];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294954510;
  v11 = Mutable;
  H9ISP::H9ISPDevice::GetGainAdaptiveSettings(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 0, (uint64_t)v26);
  if (v12)
  {
    CFRelease(v11);
    v11 = 0;
    result = 4294954516;
  }
  else
  {
    v14 = CFArrayCreateMutable(a1, capacity, MEMORY[0x24BDBD690]);
    if (v14)
    {
      v15 = v14;
      v24 = a2;
      if (capacity)
      {
        v16 = 0;
        v17 = (const void *)*MEMORY[0x24BE109E0];
        v18 = (const void *)*MEMORY[0x24BE109E8];
        v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
        do
        {
          v20 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], v19);
          if (v20)
          {
            v21 = v20;
            valuePtr = (unsigned __int16)capacity_2[v16];
            v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            CFDictionarySetValue(v21, v17, v22);
            CFRelease(v22);
            valuePtr = *((unsigned __int8 *)&capacity_2[8] + v16);
            v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            CFDictionarySetValue(v21, v18, v23);
            CFRelease(v23);
            CFArrayAppendValue(v15, v21);
            CFRelease(v21);
          }
          ++v16;
        }
        while (v16 < capacity);
      }
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x24BE109F0], v15);
      CFRelease(v15);
      a2 = v24;
    }
    result = 0;
  }
  *a2 = v11;
  return result;
}

uint64_t SetFaceDetectionMetadataCoordinateSpace(CFTypeRef cf, uint64_t a2)
{
  uint64_t result;
  CFTypeID v5;
  int v6;
  int valuePtr;

  result = 4294954516;
  if (cf && !*(_QWORD *)(a2 + 88))
  {
    v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
      v6 = valuePtr;
      *(_BYTE *)(a2 + 1251) = valuePtr != 0;
      H9ISPLogger(6, "H9ISPCaptureDevice: Setting FaceDetection Metadata Coordinate Space: %d\n", v6);
      return 0;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetMultipleOutputSupportEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  CFTypeID v8;
  int v9;
  uint64_t v10;
  int v11;
  const char *v12;

  v4 = *(unsigned __int8 *)(a2 + 523);
  if (a1)
  {
    v8 = CFGetTypeID(a1);
    if (v8 == CFBooleanGetTypeID())
    {
      v9 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
      v10 = 0;
      v11 = v9 != 0;
      *(_BYTE *)(a2 + 523) = v11;
    }
    else
    {
      v11 = *(unsigned __int8 *)(a2 + 523);
      v10 = 4294954516;
    }
    if (v11 != v4)
    {
      InitSupportedFormatsForCaptureStream(a2, a4);
      v4 = *(unsigned __int8 *)(a2 + 523);
    }
  }
  else
  {
    v10 = 4294954516;
  }
  v12 = "True";
  if (!v4)
    v12 = "False";
  H9ISPLogger(6, "H9ISPCaptureDevice: Set MultipleOutputSupportEnabled: %s\n", v12);
  return v10;
}

uint64_t CopyMultipleOutputSupportEnabled(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef *v4;
  CFTypeRef v5;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (*(_BYTE *)(a3 + 523))
    v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t SetVideoOutputHandlers(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  CFTypeID v11;
  const void *v12;
  CFTypeRef *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  CFTypeID v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  CFTypeID v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const __CFDictionary *v37;
  const __CFDictionary *v38;
  CFTypeID v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  CFTypeID v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const __CFDictionary *v55;
  CFTypeID v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  void *v62;

  if (!*(_BYTE *)(a2 + 523))
    return 4294954509;
  result = 4294954516;
  if (cf && !*(_QWORD *)(a2 + 88))
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFDictionaryGetTypeID())
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11780]);
      if (Value)
      {
        v10 = Value;
        v11 = CFGetTypeID(Value);
        if (v11 == CFDictionaryGetTypeID())
        {
          v12 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x24BE11768]);
          v13 = (CFTypeRef *)MEMORY[0x24BDBD430];
          if (v12)
          {
            v14 = v12;
            v15 = *(const void **)(a2 + 616);
            if (v15)
            {
              _Block_release(v15);
              *(_QWORD *)(a2 + 616) = 0;
            }
            if (!CFEqual(v14, *v13))
              *(_QWORD *)(a2 + 616) = _Block_copy(v14);
          }
          v16 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x24BE11770]);
          if (v16)
          {
            v17 = v16;
            v18 = *(const void **)(a2 + 608);
            if (v18)
            {
              _Block_release(v18);
              *(_QWORD *)(a2 + 608) = 0;
            }
            if (!CFEqual(v17, *v13))
              *(_QWORD *)(a2 + 608) = _Block_copy(v17);
          }
        }
      }
      v19 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11788]);
      if (v19)
      {
        v20 = v19;
        v21 = CFGetTypeID(v19);
        if (v21 == CFDictionaryGetTypeID())
        {
          v22 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x24BE11768]);
          if (v22)
          {
            v23 = v22;
            v24 = *(const void **)(a2 + 736);
            if (v24)
            {
              _Block_release(v24);
              *(_QWORD *)(a2 + 736) = 0;
            }
            if (!CFEqual(v23, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 736) = _Block_copy(v23);
          }
          v25 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x24BE11770]);
          if (v25)
          {
            v26 = v25;
            v27 = *(const void **)(a2 + 728);
            if (v27)
            {
              _Block_release(v27);
              *(_QWORD *)(a2 + 728) = 0;
            }
            if (!CFEqual(v26, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 728) = _Block_copy(v26);
          }
        }
      }
      v28 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11790]);
      if (v28)
      {
        v29 = v28;
        v30 = CFGetTypeID(v28);
        if (v30 == CFDictionaryGetTypeID())
        {
          v31 = CFDictionaryGetValue(v29, (const void *)*MEMORY[0x24BE11768]);
          if (v31)
          {
            v32 = v31;
            v33 = *(const void **)(a2 + 976);
            if (v33)
            {
              _Block_release(v33);
              *(_QWORD *)(a2 + 976) = 0;
            }
            if (!CFEqual(v32, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 976) = _Block_copy(v32);
          }
          v34 = CFDictionaryGetValue(v29, (const void *)*MEMORY[0x24BE11770]);
          if (v34)
          {
            v35 = v34;
            v36 = *(const void **)(a2 + 968);
            if (v36)
            {
              _Block_release(v36);
              *(_QWORD *)(a2 + 968) = 0;
            }
            if (!CFEqual(v35, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 968) = _Block_copy(v35);
          }
        }
      }
      v37 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11798]);
      if (v37)
      {
        v38 = v37;
        v39 = CFGetTypeID(v37);
        if (v39 == CFDictionaryGetTypeID())
        {
          v40 = CFDictionaryGetValue(v38, (const void *)*MEMORY[0x24BE11768]);
          if (v40)
          {
            v41 = v40;
            v42 = *(const void **)(a2 + 1096);
            if (v42)
            {
              _Block_release(v42);
              *(_QWORD *)(a2 + 1096) = 0;
            }
            if (!CFEqual(v41, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 1096) = _Block_copy(v41);
          }
          v43 = CFDictionaryGetValue(v38, (const void *)*MEMORY[0x24BE11770]);
          if (v43)
          {
            v44 = v43;
            v45 = *(const void **)(a2 + 1088);
            if (v45)
            {
              _Block_release(v45);
              *(_QWORD *)(a2 + 1088) = 0;
            }
            if (!CFEqual(v44, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 1088) = _Block_copy(v44);
          }
        }
      }
      v46 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11778]);
      if (v46)
      {
        v47 = v46;
        v48 = CFGetTypeID(v46);
        if (v48 == CFDictionaryGetTypeID())
        {
          v49 = CFDictionaryGetValue(v47, (const void *)*MEMORY[0x24BE11768]);
          if (v49)
          {
            v50 = v49;
            v51 = *(const void **)(a2 + 856);
            if (v51)
            {
              _Block_release(v51);
              *(_QWORD *)(a2 + 856) = 0;
            }
            if (!CFEqual(v50, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 856) = _Block_copy(v50);
          }
          v52 = CFDictionaryGetValue(v47, (const void *)*MEMORY[0x24BE11770]);
          if (v52)
          {
            v53 = v52;
            v54 = *(const void **)(a2 + 848);
            if (v54)
            {
              _Block_release(v54);
              *(_QWORD *)(a2 + 848) = 0;
            }
            if (!CFEqual(v53, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 848) = _Block_copy(v53);
          }
        }
      }
      result = ConfigSupportsContextSwitchCaptures(a2, a4, 0, 0);
      if ((_DWORD)result)
      {
        result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE117A0]);
        if (result)
        {
          v55 = (const __CFDictionary *)result;
          v56 = CFGetTypeID((CFTypeRef)result);
          if (v56 != CFDictionaryGetTypeID())
            return 0;
          v57 = CFDictionaryGetValue(v55, (const void *)*MEMORY[0x24BE11768]);
          if (v57)
          {
            v58 = v57;
            v59 = *(const void **)(a2 + 1216);
            if (v59)
            {
              _Block_release(v59);
              *(_QWORD *)(a2 + 1216) = 0;
            }
            if (!CFEqual(v58, (CFTypeRef)*MEMORY[0x24BDBD430]))
              *(_QWORD *)(a2 + 1216) = _Block_copy(v58);
          }
          result = (uint64_t)CFDictionaryGetValue(v55, (const void *)*MEMORY[0x24BE11770]);
          if (result)
          {
            v60 = (const void *)result;
            v61 = *(const void **)(a2 + 1208);
            if (v61)
            {
              _Block_release(v61);
              *(_QWORD *)(a2 + 1208) = 0;
            }
            if (CFEqual(v60, (CFTypeRef)*MEMORY[0x24BDBD430]))
              return 0;
            v62 = _Block_copy(v60);
            result = 0;
            *(_QWORD *)(a2 + 1208) = v62;
          }
        }
      }
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t SetVideoOutputsEnabled(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *Value;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  CFTypeRef *v14;
  uint64_t result;
  int v16;

  if (!*(_BYTE *)(a2 + 523))
    return 4294954509;
  if (!cf)
    return 4294954516;
  v7 = CFGetTypeID(cf);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11780]);
  v9 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11788]);
  v10 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11778]);
  v11 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11790]);
  v12 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11798]);
  v13 = CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE117A0]);
  v14 = (CFTypeRef *)MEMORY[0x24BDBD270];
  if (*(_BYTE *)(a2 + 1278))
  {
    if (Value && CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDBD270]) || v9 && CFEqual(v9, *v14))
      return 4294954516;
  }
  if (Value)
  {
    if (CFEqual(Value, *v14))
    {
      if (!*(_BYTE *)(a2 + 528))
      {
        *(_BYTE *)(a2 + 528) = 1;
        if (*(_QWORD *)(a2 + 88))
          ActivatePrimaryScalerOutputInFrameReceiver(a2, a4);
      }
    }
    H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoOutputsEnabled PrimaryScaler:%d\n", *(unsigned __int8 *)(a2 + 528));
  }
  if (v9)
  {
    if (CFEqual(v9, *v14))
    {
      if (!*(_BYTE *)(a2 + 648))
      {
        *(_BYTE *)(a2 + 648) = 1;
        if (*(_QWORD *)(a2 + 88))
          ActivateSecondaryScalerOutputInFrameReceiver(a2, a4);
      }
    }
    H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoOutputsEnabled SecondaryScaler:%d\n", *(unsigned __int8 *)(a2 + 648));
  }
  if (v10)
  {
    if (CFEqual(v10, *v14))
    {
      if (!*(_BYTE *)(a2 + 768))
      {
        *(_BYTE *)(a2 + 768) = 1;
        if (*(_QWORD *)(a2 + 88))
          ActivateIntermediateTapOutputInFrameReceiver(a2, a4);
      }
    }
    H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoOutputsEnabled IntermediateTap:%d\n", *(unsigned __int8 *)(a2 + 768));
  }
  if (v11)
  {
    if (CFEqual(v11, *v14))
    {
      if (!*(_BYTE *)(a2 + 888))
      {
        *(_BYTE *)(a2 + 888) = 1;
        if (*(_QWORD *)(a2 + 88))
          ActivateStillImageOutputInFrameReceiver(a2, a4);
      }
    }
    H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoOutputsEnabled StillImage:%d\n", *(unsigned __int8 *)(a2 + 888));
  }
  if (v12)
  {
    if (CFEqual(v12, *v14))
    {
      if (!*(_BYTE *)(a2 + 1008))
      {
        *(_BYTE *)(a2 + 1008) = 1;
        if (*(_QWORD *)(a2 + 88))
          ActivateStillImageIntermediateTapOutputInFrameReceiver(a2, a4);
      }
    }
    H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoOutputsEnabled StillImageIntermediateTap:%d\n", *(unsigned __int8 *)(a2 + 1008));
  }
  if (!v13)
    return 0;
  result = ConfigSupportsContextSwitchCaptures(a2, a4, 0, 0);
  if ((_DWORD)result)
  {
    if (CFEqual(v13, *v14))
    {
      if (*(_QWORD *)(a2 + 88))
        return 4294954516;
      v16 = 1;
      if (!*(_BYTE *)(a2 + 1128))
        *(_BYTE *)(a2 + 1128) = 1;
    }
    else
    {
      v16 = *(unsigned __int8 *)(a2 + 1128);
    }
    H9ISPLogger(6, "H9ISPCaptureDevice: SetVideoOutputsEnabled StillImageQuadra:%d\n", v16);
    return 0;
  }
  return result;
}

uint64_t CopyVideoOutputsEnabled(uint64_t a1, __CFDictionary **a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void **v10;
  const void *v11;
  const void **v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  uint64_t result;
  const void **v20;

  if (a3[523])
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v9 = Mutable;
    if (Mutable)
    {
      v10 = (const void **)MEMORY[0x24BDBD268];
      v11 = (const void *)*MEMORY[0x24BDBD268];
      v12 = (const void **)MEMORY[0x24BDBD270];
      v13 = (const void *)*MEMORY[0x24BDBD270];
      if (a3[528])
        v14 = (const void *)*MEMORY[0x24BDBD270];
      else
        v14 = (const void *)*MEMORY[0x24BDBD268];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11780], v14);
      if (a3[648])
        v15 = v13;
      else
        v15 = v11;
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE11788], v15);
      if (a3[768])
        v16 = v13;
      else
        v16 = v11;
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE11778], v16);
      if (a3[888])
        v17 = v13;
      else
        v17 = v11;
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE11790], v17);
      if (a3[1008])
        v18 = v13;
      else
        v18 = v11;
      CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE11798], v18);
      result = ConfigSupportsContextSwitchCaptures((uint64_t)a3, a5, 0, 0);
      if ((_DWORD)result)
      {
        if (a3[1128])
          v20 = v12;
        else
          v20 = v10;
        CFDictionarySetValue(v9, (const void *)*MEMORY[0x24BE117A0], *v20);
        result = 0;
      }
    }
    else
    {
      result = 4294954510;
    }
  }
  else
  {
    v9 = 0;
    result = 4294954509;
  }
  *a2 = v9;
  return result;
}

uint64_t SetVideoOutputConfigurations(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  CFTypeID v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  CGSize v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  const __CFDictionary *Value;
  const __CFDictionary *v48;
  CFTypeID v49;
  const __CFNumber *v50;
  __CVPixelBufferPool *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  double y;
  double height;
  double v59;
  CFTypeRef *v60;
  int v61;
  int v62;
  uint64_t i;
  uint64_t v64;
  int v65;
  int *v66;
  int v67;
  __CVPixelBufferPool *v68;
  __CVPixelBufferPool *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  const __CFDictionary *Attributes;
  const __CFNumber *v74;
  const __CFDictionary *v75;
  const __CFDictionary *v76;
  CFTypeID v77;
  const __CFNumber *v78;
  __CVPixelBufferPool *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int v88;
  int v89;
  uint64_t j;
  uint64_t v91;
  int v92;
  int *v93;
  int v94;
  __CVPixelBufferPool *v95;
  __CVPixelBufferPool *v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  const __CFDictionary *v100;
  const __CFNumber *v101;
  const __CFNumber *v102;
  const __CFDictionary *v103;
  const __CFDictionary *v104;
  CFTypeID v105;
  const __CFNumber *v106;
  const __CFNumber *v107;
  int v108;
  uint64_t k;
  uint64_t v110;
  int v111;
  int *v112;
  int v113;
  __CVPixelBufferPool *v114;
  __CVPixelBufferPool *v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  const __CFDictionary *v119;
  const __CFNumber *v120;
  const __CFDictionary *v121;
  const __CFDictionary *v122;
  CFTypeID v123;
  const __CFNumber *v124;
  const __CFNumber *v125;
  __CVPixelBufferPool *v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  uint64_t m;
  uint64_t v133;
  int v134;
  int *v135;
  int v136;
  __CVPixelBufferPool *v137;
  const __CFDictionary *v138;
  const __CFNumber *v139;
  _BYTE *v140;
  const __CFDictionary *v141;
  const __CFDictionary *v142;
  CFTypeID v143;
  const __CFNumber *v144;
  int v145;
  int v146;
  uint64_t n;
  uint64_t v148;
  int v149;
  int *v150;
  int v151;
  __CVPixelBufferPool *v152;
  const __CFDictionary *v153;
  const __CFNumber *v154;
  const __CFDictionary *v155;
  const __CFDictionary *v156;
  CFTypeID v157;
  const __CFNumber *v158;
  const __CFNumber *v159;
  const __CFNumber *v160;
  double v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int CameraConfig;
  int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  char v172;
  char v173;
  int v174;
  int v175;
  int v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  CGSize size;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  int v208;
  char v209;
  const __CFNumber *v210;
  const __CFArray *pixelBufferPool;
  __CVPixelBufferPool *pixelBufferPoola;
  CFTypeRef v213;
  CFTypeRef v214;
  CFTypeRef v215;
  const __CFNumber *v216;
  CFTypeRef cf1;
  const __CFArray *cf1a;
  CFTypeRef cf1b;
  const __CFArray *cf1c;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  __CVPixelBufferPool *theArrayb;
  CFArrayRef theArrayc;
  CFArrayRef theArrayd;
  const __CFNumber *v226;
  const __CFNumber *v227;
  const __CFArray *v228;
  const __CFNumber *v229;
  CFNumberRef v230;
  const __CFNumber *v231;
  const __CFNumber *v232;
  const __CFNumber *v233;
  const __CFNumber *v234;
  CFNumberRef v235;
  const __CFNumber *v236;
  const __CFNumber *v237;
  CFNumberRef v238;
  const __CFDictionary *v239;
  const __CFNumber *v240;
  const __CFNumber *v241;
  const __CFNumber *v242;
  const __CFNumber *v243;
  const __CFNumber *v244;
  const __CFNumber *v245;
  const __CFDictionary *dict;
  const __CFDictionary *dicta;
  const __CFNumber *dictb;
  const __CFNumber *dictc;
  const __CFNumber *dictd;
  const __CFNumber *number;
  const __CFNumber *numbera;
  CFNumberRef numberb;
  CFNumberRef numberc;
  uint64_t v255;
  int v256;
  CGFloat x;
  int x_low;
  _BYTE *v259;
  _OWORD v260[7];
  int v261;
  _OWORD v262[7];
  int v263;
  CGRect valuePtr;
  __int128 __dst;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  int v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  CVPixelBufferPoolRef v286;
  __int128 v287;
  __int128 v288;
  CGRect v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  CVPixelBufferPoolRef v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __CVPixelBufferPool *v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __CVPixelBufferPool *v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __CVPixelBufferPool *v317;
  _BYTE v318[200];
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  CFRange v326;
  CFRange v327;
  CFRange v328;
  CFRange v329;
  CFRange v330;

  v325 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 523))
    return 4294954509;
  v319 = *MEMORY[0x24BE10588];
  v320 = 1919246706;
  v321 = *MEMORY[0x24BE105A8];
  v322 = 1919251564;
  v323 = *MEMORY[0x24BE105B0];
  v324 = 1718775412;
  if (cf)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 56);
    v8 = CFGetTypeID(cf);
    if (v8 == CFDictionaryGetTypeID())
    {
      v9 = *(_DWORD *)(a2 + 40);
      v10 = *(_DWORD *)(a2 + 112);
      if (v9 < v10)
        v10 = 0;
      v11 = v9 - v10;
      if (!H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v9 - v10) + 16), &__dst, v318))
      {
        v259 = (_BYTE *)(a2 + 528);
        v14 = *(_OWORD *)(a2 + 608);
        v314 = *(_OWORD *)(a2 + 592);
        v315 = v14;
        v316 = *(_OWORD *)(a2 + 624);
        v317 = *(__CVPixelBufferPool **)(a2 + 640);
        v15 = *(_OWORD *)(a2 + 544);
        v310 = *(_OWORD *)(a2 + 528);
        v311 = v15;
        v16 = *(_OWORD *)(a2 + 576);
        v312 = *(_OWORD *)(a2 + 560);
        v313 = v16;
        v17 = (_BYTE *)(a2 + 648);
        v18 = *(_OWORD *)(a2 + 648);
        v19 = *(_OWORD *)(a2 + 664);
        v20 = *(_OWORD *)(a2 + 680);
        v305 = *(_OWORD *)(a2 + 696);
        v304 = v20;
        v303 = v19;
        v302 = v18;
        v21 = *(_OWORD *)(a2 + 712);
        v22 = *(_OWORD *)(a2 + 728);
        v23 = *(_OWORD *)(a2 + 744);
        v309 = *(__CVPixelBufferPool **)(a2 + 760);
        v308 = v23;
        v307 = v22;
        v306 = v21;
        v24 = *(_OWORD *)(a2 + 768);
        v25 = *(_OWORD *)(a2 + 784);
        v26 = *(_OWORD *)(a2 + 816);
        v296 = *(_OWORD *)(a2 + 800);
        v297 = v26;
        v294 = v24;
        v295 = v25;
        v27 = *(_OWORD *)(a2 + 832);
        v28 = *(_OWORD *)(a2 + 848);
        v29 = *(_OWORD *)(a2 + 864);
        v301 = *(__CVPixelBufferPool **)(a2 + 880);
        v299 = v28;
        v300 = v29;
        v298 = v27;
        v30 = (_BYTE *)(a2 + 888);
        v31 = *(_OWORD *)(a2 + 888);
        v32 = *(_OWORD *)(a2 + 904);
        v33 = *(CGSize *)(a2 + 936);
        v289.origin = *(CGPoint *)(a2 + 920);
        v289.size = v33;
        v287 = v31;
        v288 = v32;
        v34 = *(_OWORD *)(a2 + 952);
        v35 = *(_OWORD *)(a2 + 968);
        v36 = *(_OWORD *)(a2 + 984);
        v293 = *(CVPixelBufferPoolRef *)(a2 + 1000);
        v291 = v35;
        v292 = v36;
        v290 = v34;
        v37 = *(_OWORD *)(a2 + 1008);
        v38 = *(_OWORD *)(a2 + 1024);
        v39 = *(_OWORD *)(a2 + 1056);
        v281 = *(_OWORD *)(a2 + 1040);
        v282 = v39;
        v279 = v37;
        v280 = v38;
        v40 = *(_OWORD *)(a2 + 1072);
        v41 = *(_OWORD *)(a2 + 1088);
        v42 = *(_OWORD *)(a2 + 1104);
        v286 = *(CVPixelBufferPoolRef *)(a2 + 1120);
        v284 = v41;
        v285 = v42;
        v283 = v40;
        v255 = *(_QWORD *)(a2 + 1128);
        x = *(double *)(a2 + 1136);
        v43 = *(_OWORD *)(a2 + 1144);
        v44 = *(_OWORD *)(a2 + 1176);
        v277 = *(_OWORD *)(a2 + 1160);
        v278 = v44;
        x_low = *(_DWORD *)(a2 + 1192);
        v256 = *(_DWORD *)(a2 + 1196);
        v45 = *(_OWORD *)(a2 + 1200);
        v46 = *(_OWORD *)(a2 + 1216);
        v275 = *(_OWORD *)(a2 + 1232);
        v276 = v43;
        v273 = v45;
        v274 = v46;
        Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11780]);
        if (!Value)
          goto LABEL_84;
        v48 = Value;
        v49 = CFGetTypeID(Value);
        if (v49 != CFDictionaryGetTypeID())
          goto LABEL_84;
        if (CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11650])
          || CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11658])
          || CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11748]))
        {
          return 4294954516;
        }
        v50 = (const __CFNumber *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11730]);
        number = (const __CFNumber *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11750]);
        v241 = (const __CFNumber *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11760]);
        v236 = (const __CFNumber *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11740]);
        dict = (const __CFDictionary *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11738]);
        v231 = (const __CFNumber *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11758]);
        v226 = (const __CFNumber *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11700]);
        cf1 = CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE116F8]);
        v213 = CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE117D0]);
        theArray = (const __CFArray *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11728]);
        v51 = (__CVPixelBufferPool *)CFDictionaryGetValue(v48, (const void *)*MEMORY[0x24BE11708]);
        if (v50)
        {
          valuePtr.origin.x = 0.0;
          CFNumberGetValue(v50, kCFNumberLongLongType, &valuePtr);
          *((_QWORD *)&v310 + 1) = *(_QWORD *)&valuePtr.origin.x;
        }
        if (!number)
        {
LABEL_26:
          if (dict)
          {
            if (!CGRectMakeWithDictionaryRepresentation(dict, &valuePtr))
              return 4294954516;
            v55 = *(_QWORD *)(a2 + 104);
            v56 = valuePtr.origin.x + valuePtr.size.width;
            if (*(_BYTE *)(v55 + 84 * v11 + 36))
            {
              LODWORD(v53) = *(_DWORD *)(v55 + 84 * v11 + 40);
              if (v56 > (double)v53)
                return 4294954516;
              y = valuePtr.origin.y;
              height = valuePtr.size.height;
              v59 = valuePtr.origin.y + valuePtr.size.height;
              LODWORD(v54) = *(_DWORD *)(v55 + 84 * v11 + 44);
            }
            else
            {
              LOWORD(v53) = __dst;
              if (v56 > (double)v53)
                return 4294954516;
              y = valuePtr.origin.y;
              height = valuePtr.size.height;
              v59 = valuePtr.origin.y + valuePtr.size.height;
              LOWORD(v54) = WORD1(__dst);
            }
            if (v59 > (double)v54
              || (valuePtr.origin.x & 1) != 0
              || (y & 1) != 0
              || (valuePtr.size.width & 1) != 0
              || (height & 1) != 0)
            {
              return 4294954516;
            }
            *(CGFloat *)&v312 = valuePtr.origin.x;
            *((double *)&v312 + 1) = y;
            *(CGFloat *)&v313 = valuePtr.size.width;
            *((double *)&v313 + 1) = height;
          }
          if (v241)
          {
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v241, kCFNumberSInt32Type, &valuePtr);
            if (*v259
              || (LOBYTE(valuePtr.origin.x) & 1) != 0
              || *(double *)&v313 < (double)SLODWORD(valuePtr.origin.x)
              || *(double *)&v313 * 0.25 > (double)SLODWORD(valuePtr.origin.x))
            {
              return 4294954516;
            }
            DWORD1(v311) = LODWORD(valuePtr.origin.x);
          }
          if (v236)
          {
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v236, kCFNumberSInt32Type, &valuePtr);
            if (*v259
              || (LOBYTE(valuePtr.origin.x) & 1) != 0
              || *((double *)&v313 + 1) < (double)SLODWORD(valuePtr.origin.x)
              || *((double *)&v313 + 1) * 0.25 > (double)SLODWORD(valuePtr.origin.x))
            {
              return 4294954516;
            }
            DWORD2(v311) = LODWORD(valuePtr.origin.x);
          }
          if (v231)
          {
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v231, kCFNumberSInt32Type, &valuePtr);
            if (*v259)
              return 4294954516;
            LODWORD(v314) = LODWORD(valuePtr.origin.x);
          }
          if (v226)
          {
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v226, kCFNumberSInt32Type, &valuePtr);
            if (*v259)
              return 4294954516;
            DWORD1(v314) = LODWORD(valuePtr.origin.x);
          }
          v60 = (CFTypeRef *)MEMORY[0x24BDBD270];
          if (cf1)
          {
            v61 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x24BDBD270]);
            if (*v259)
              return 4294954516;
            BYTE8(v314) = v61 != 0;
          }
          if (v213)
          {
            v62 = CFEqual(v213, *v60);
            if (*v259)
              return 4294954516;
            BYTE9(v314) = v62 != 0;
          }
          if (theArray)
          {
            if (*v259 || *(_QWORD *)(a2 + 88))
              return 4294954516;
            for (i = 0; i != 3; ++i)
            {
              v326.length = CFArrayGetCount(theArray);
              v326.location = 0;
              if (CFArrayContainsValue(theArray, v326, (const void *)*(&v319 + 2 * i)))
              {
                v64 = 0;
                v65 = *((_DWORD *)&v319 + 4 * i + 2);
                v66 = (int *)(v7 + 16);
                do
                {
                  v67 = *v66;
                  v66 += 20;
                  if (v67 == v65)
                    *((_BYTE *)&v316 + v64 + 8) = 1;
                  ++v64;
                }
                while (v64 != 5);
              }
            }
          }
          if (v51)
          {
            if (*v259)
              return 4294954516;
            if (*(_QWORD *)(a2 + 88))
              return 4294954612;
            v68 = *(__CVPixelBufferPool **)(a2 + 640);
            if (v68)
              CVPixelBufferPoolRelease(v68);
            v69 = CVPixelBufferPoolRetain(v51);
            v317 = v69;
            LODWORD(valuePtr.origin.x) = 0;
            v70 = dword_2542912E8;
            if (!dword_2542912E8)
            {
              v71 = *(_DWORD *)(a2 + 40);
              v72 = *(_DWORD *)(a2 + 112);
              if (v71 < v72)
                v72 = 0;
              v70 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v71 - v72) + 76);
            }
            Attributes = CVPixelBufferPoolGetAttributes(v69);
            v74 = (const __CFNumber *)CFDictionaryGetValue(Attributes, (const void *)*MEMORY[0x24BDC56F0]);
            if (!v74)
              return 4294954516;
            CFNumberGetValue(v74, kCFNumberSInt32Type, &valuePtr);
            LODWORD(v314) = LODWORD(valuePtr.origin.x) + ~v70;
            if ((int)v314 < 0)
              return 4294954516;
          }
LABEL_84:
          v75 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11788]);
          if (!v75)
            goto LABEL_158;
          v76 = v75;
          v77 = CFGetTypeID(v75);
          if (v77 != CFDictionaryGetTypeID())
            goto LABEL_158;
          if (CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11650])
            || CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11658])
            || CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11748]))
          {
            return 4294954516;
          }
          v78 = (const __CFNumber *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11730]);
          numbera = (const __CFNumber *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11750]);
          v242 = (const __CFNumber *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11760]);
          v237 = (const __CFNumber *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11740]);
          dicta = (const __CFDictionary *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11738]);
          v232 = (const __CFNumber *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11758]);
          v227 = (const __CFNumber *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11700]);
          theArraya = (CFArrayRef)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE116F8]);
          v214 = CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE117D0]);
          cf1a = (const __CFArray *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11728]);
          v79 = (__CVPixelBufferPool *)CFDictionaryGetValue(v76, (const void *)*MEMORY[0x24BE11708]);
          if (v78)
          {
            valuePtr.origin.x = 0.0;
            CFNumberGetValue(v78, kCFNumberLongLongType, &valuePtr);
            *((_QWORD *)&v302 + 1) = *(_QWORD *)&valuePtr.origin.x;
          }
          if (!numbera)
          {
LABEL_100:
            if (dicta)
            {
              if (!CGRectMakeWithDictionaryRepresentation(dicta, &valuePtr))
                return 4294954516;
              v83 = *(_QWORD *)(a2 + 104);
              v84 = valuePtr.origin.x + valuePtr.size.width;
              if (*(_BYTE *)(v83 + 84 * v11 + 36))
              {
                LODWORD(v81) = *(_DWORD *)(v83 + 84 * v11 + 40);
                if (v84 > (double)v81)
                  return 4294954516;
                v85 = valuePtr.origin.y;
                v86 = valuePtr.size.height;
                v87 = valuePtr.origin.y + valuePtr.size.height;
                LODWORD(v82) = *(_DWORD *)(v83 + 84 * v11 + 44);
              }
              else
              {
                LOWORD(v81) = __dst;
                if (v84 > (double)v81)
                  return 4294954516;
                v85 = valuePtr.origin.y;
                v86 = valuePtr.size.height;
                v87 = valuePtr.origin.y + valuePtr.size.height;
                LOWORD(v82) = WORD1(__dst);
              }
              if (v87 > (double)v82
                || (valuePtr.origin.x & 1) != 0
                || (v85 & 1) != 0
                || (valuePtr.size.width & 1) != 0
                || (v86 & 1) != 0)
              {
                return 4294954516;
              }
              *(CGFloat *)&v304 = valuePtr.origin.x;
              *((double *)&v304 + 1) = v85;
              *(CGFloat *)&v305 = valuePtr.size.width;
              *((double *)&v305 + 1) = v86;
            }
            if (v242)
            {
              LODWORD(valuePtr.origin.x) = 0;
              CFNumberGetValue(v242, kCFNumberSInt32Type, &valuePtr);
              if (*v17
                || (LOBYTE(valuePtr.origin.x) & 1) != 0
                || *(double *)&v305 < (double)SLODWORD(valuePtr.origin.x)
                || *(double *)&v305 * 0.25 > (double)SLODWORD(valuePtr.origin.x))
              {
                return 4294954516;
              }
              DWORD1(v303) = LODWORD(valuePtr.origin.x);
            }
            if (v237)
            {
              LODWORD(valuePtr.origin.x) = 0;
              CFNumberGetValue(v237, kCFNumberSInt32Type, &valuePtr);
              if (*v17
                || (LOBYTE(valuePtr.origin.x) & 1) != 0
                || *((double *)&v305 + 1) < (double)SLODWORD(valuePtr.origin.x)
                || *((double *)&v305 + 1) * 0.25 > (double)SLODWORD(valuePtr.origin.x))
              {
                return 4294954516;
              }
              DWORD2(v303) = LODWORD(valuePtr.origin.x);
            }
            if (v232)
            {
              LODWORD(valuePtr.origin.x) = 0;
              CFNumberGetValue(v232, kCFNumberSInt32Type, &valuePtr);
              if (*v17)
                return 4294954516;
              LODWORD(v306) = LODWORD(valuePtr.origin.x);
            }
            if (v227)
            {
              LODWORD(valuePtr.origin.x) = 0;
              CFNumberGetValue(v227, kCFNumberSInt32Type, &valuePtr);
              if (*v17)
                return 4294954516;
              DWORD1(v306) = LODWORD(valuePtr.origin.x);
            }
            if (theArraya)
            {
              v88 = CFEqual(theArraya, (CFTypeRef)*MEMORY[0x24BDBD270]);
              if (*v17)
                return 4294954516;
              BYTE8(v306) = v88 != 0;
            }
            if (v214)
            {
              v89 = CFEqual(v214, (CFTypeRef)*MEMORY[0x24BDBD270]);
              if (*v17)
                return 4294954516;
              BYTE9(v306) = v89 != 0;
            }
            if (cf1a)
            {
              if (*v17 || *(_QWORD *)(a2 + 88))
                return 4294954516;
              for (j = 0; j != 3; ++j)
              {
                v327.length = CFArrayGetCount(cf1a);
                v327.location = 0;
                if (CFArrayContainsValue(cf1a, v327, (const void *)*(&v319 + 2 * j)))
                {
                  v91 = 0;
                  v92 = *((_DWORD *)&v319 + 4 * j + 2);
                  v93 = (int *)(v7 + 16);
                  do
                  {
                    v94 = *v93;
                    v93 += 20;
                    if (v94 == v92)
                      *((_BYTE *)&v308 + v91 + 8) = 1;
                    ++v91;
                  }
                  while (v91 != 5);
                }
              }
            }
            if (v79)
            {
              if (*v17)
                return 4294954516;
              if (*(_QWORD *)(a2 + 88))
                return 4294954612;
              v95 = *(__CVPixelBufferPool **)(a2 + 760);
              if (v95)
                CVPixelBufferPoolRelease(v95);
              v96 = CVPixelBufferPoolRetain(v79);
              v309 = v96;
              LODWORD(valuePtr.origin.x) = 0;
              v97 = dword_2542912E8;
              if (!dword_2542912E8)
              {
                v98 = *(_DWORD *)(a2 + 40);
                v99 = *(_DWORD *)(a2 + 112);
                if (v98 < v99)
                  v99 = 0;
                v97 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v98 - v99) + 76);
              }
              v100 = CVPixelBufferPoolGetAttributes(v96);
              v101 = (const __CFNumber *)CFDictionaryGetValue(v100, (const void *)*MEMORY[0x24BDC56F0]);
              if (!v101)
                return 4294954516;
              CFNumberGetValue(v101, kCFNumberSInt32Type, &valuePtr);
              LODWORD(v306) = LODWORD(valuePtr.origin.x) + ~v97;
              if ((int)v306 < 0)
                return 4294954516;
            }
LABEL_158:
            v102 = (const __CFNumber *)(a2 + 768);
            v103 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11778]);
            if (v103)
            {
              v104 = v103;
              v105 = CFGetTypeID(v103);
              if (v105 == CFDictionaryGetTypeID())
              {
                if (CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11760]))
                  return 4294954516;
                if (CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11740]))
                  return 4294954516;
                if (CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11738]))
                  return 4294954516;
                if (CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE117D0]))
                  return 4294954516;
                if (CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11650]))
                  return 4294954516;
                numberb = (CFNumberRef)(a2 + 768);
                if (CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11658]))
                  return 4294954516;
                v106 = (const __CFNumber *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11730]);
                dictb = (const __CFNumber *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11758]);
                v243 = (const __CFNumber *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11700]);
                v238 = (CFNumberRef)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE116F8]);
                v107 = (const __CFNumber *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11750]);
                v233 = (const __CFNumber *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11748]);
                v228 = (const __CFArray *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11728]);
                theArrayb = (__CVPixelBufferPool *)CFDictionaryGetValue(v104, (const void *)*MEMORY[0x24BE11708]);
                if (v106)
                {
                  valuePtr.origin.x = 0.0;
                  CFNumberGetValue(v106, kCFNumberLongLongType, &valuePtr);
                  *((_QWORD *)&v294 + 1) = *(_QWORD *)&valuePtr.origin.x;
                }
                if (v107)
                {
                  LODWORD(valuePtr.origin.x) = 0;
                  CFNumberGetValue(v107, kCFNumberSInt32Type, &valuePtr);
                  if (*(_BYTE *)numberb
                    || LODWORD(valuePtr.origin.x) != 2037741158 && LODWORD(valuePtr.origin.x) != 2037741171)
                  {
                    return 4294954516;
                  }
                  LODWORD(v295) = LODWORD(valuePtr.origin.x);
                }
                if (dictb)
                {
                  LODWORD(valuePtr.origin.x) = 0;
                  CFNumberGetValue(dictb, kCFNumberSInt32Type, &valuePtr);
                  if (*(_BYTE *)numberb)
                    return 4294954516;
                  LODWORD(v298) = LODWORD(valuePtr.origin.x);
                }
                if (v243)
                {
                  LODWORD(valuePtr.origin.x) = 0;
                  CFNumberGetValue(v243, kCFNumberSInt32Type, &valuePtr);
                  if (*(_BYTE *)numberb)
                    return 4294954516;
                  DWORD1(v298) = LODWORD(valuePtr.origin.x);
                }
                if (v238)
                {
                  v108 = CFEqual(v238, (CFTypeRef)*MEMORY[0x24BDBD270]);
                  if (*(_BYTE *)numberb)
                    return 4294954516;
                  BYTE8(v298) = v108 != 0;
                }
                if (v233)
                {
                  LODWORD(valuePtr.origin.x) = 0;
                  CFNumberGetValue(v233, kCFNumberIntType, &valuePtr);
                  if (*(_BYTE *)numberb || *(_BYTE *)(a2 + 1278) || LODWORD(valuePtr.origin.x) > *(_DWORD *)(a2 + 44))
                    return 4294954516;
                  DWORD1(v300) = LODWORD(valuePtr.origin.x);
                }
                if (v228)
                {
                  if (*(_BYTE *)numberb || *(_QWORD *)(a2 + 88))
                    return 4294954516;
                  for (k = 0; k != 3; ++k)
                  {
                    v328.length = CFArrayGetCount(v228);
                    v328.location = 0;
                    if (CFArrayContainsValue(v228, v328, (const void *)*(&v319 + 2 * k)))
                    {
                      v110 = 0;
                      v111 = *((_DWORD *)&v319 + 4 * k + 2);
                      v112 = (int *)(v7 + 16);
                      do
                      {
                        v113 = *v112;
                        v112 += 20;
                        if (v113 == v111)
                          *((_BYTE *)&v300 + v110 + 8) = 1;
                        ++v110;
                      }
                      while (v110 != 5);
                    }
                  }
                }
                v102 = (const __CFNumber *)(a2 + 768);
                if (theArrayb)
                {
                  if (*(_BYTE *)numberb)
                    return 4294954516;
                  if (*(_QWORD *)(a2 + 88))
                    return 4294954612;
                  v114 = *(__CVPixelBufferPool **)(a2 + 880);
                  if (v114)
                    CVPixelBufferPoolRelease(v114);
                  v115 = CVPixelBufferPoolRetain(theArrayb);
                  v301 = v115;
                  LODWORD(valuePtr.origin.x) = 0;
                  v116 = dword_2542912E8;
                  if (!dword_2542912E8)
                  {
                    v117 = *(_DWORD *)(a2 + 40);
                    v118 = *(_DWORD *)(a2 + 112);
                    if (v117 < v118)
                      v118 = 0;
                    v116 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v117 - v118) + 76);
                  }
                  v119 = CVPixelBufferPoolGetAttributes(v115);
                  v120 = (const __CFNumber *)CFDictionaryGetValue(v119, (const void *)*MEMORY[0x24BDC56F0]);
                  if (!v120)
                    return 4294954516;
                  CFNumberGetValue(v120, kCFNumberSInt32Type, &valuePtr);
                  LODWORD(v298) = LODWORD(valuePtr.origin.x) + ~v116;
                  v102 = (const __CFNumber *)(a2 + 768);
                  if ((int)v298 < 0)
                    return 4294954516;
                }
              }
            }
            numberc = v102;
            v121 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11790]);
            if (!v121)
              goto LABEL_281;
            v122 = v121;
            v123 = CFGetTypeID(v121);
            if (v123 != CFDictionaryGetTypeID())
              goto LABEL_281;
            if (CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE117D0])
              || CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11748]))
            {
              return 4294954516;
            }
            v124 = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11730]);
            v125 = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11750]);
            dictc = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11760]);
            v244 = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11740]);
            v239 = (const __CFDictionary *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11738]);
            v229 = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11758]);
            v234 = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11700]);
            theArrayc = (CFArrayRef)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE116F8]);
            v215 = CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11648]);
            cf1b = CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11650]);
            v210 = (const __CFNumber *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11658]);
            pixelBufferPool = (const __CFArray *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11728]);
            v126 = (__CVPixelBufferPool *)CFDictionaryGetValue(v122, (const void *)*MEMORY[0x24BE11708]);
            if (v124)
            {
              valuePtr.origin.x = 0.0;
              CFNumberGetValue(v124, kCFNumberLongLongType, &valuePtr);
              *((_QWORD *)&v287 + 1) = *(_QWORD *)&valuePtr.origin.x;
            }
            if (!v125)
            {
LABEL_223:
              if (dictc)
              {
                LODWORD(valuePtr.origin.x) = 0;
                CFNumberGetValue(dictc, kCFNumberSInt32Type, &valuePtr);
                if (*v30
                  || (LOBYTE(valuePtr.origin.x) & 1) != 0
                  || SLODWORD(valuePtr.origin.x) > (unsigned __int16)__dst
                  || SLODWORD(valuePtr.origin.x) < (unsigned __int16)__dst >> 2)
                {
                  return 4294954516;
                }
                DWORD1(v288) = LODWORD(valuePtr.origin.x);
              }
              if (v244)
              {
                LODWORD(valuePtr.origin.x) = 0;
                CFNumberGetValue(v244, kCFNumberSInt32Type, &valuePtr);
                if (*v30
                  || (LOBYTE(valuePtr.origin.x) & 1) != 0
                  || SLODWORD(valuePtr.origin.x) > WORD1(__dst)
                  || SLODWORD(valuePtr.origin.x) < WORD1(__dst) >> 2)
                {
                  return 4294954516;
                }
                DWORD2(v288) = LODWORD(valuePtr.origin.x);
              }
              if (v239)
              {
                if (!CGRectMakeWithDictionaryRepresentation(v239, &valuePtr))
                  return 4294954516;
                LOWORD(v128) = __dst;
                if (valuePtr.origin.x + valuePtr.size.width > (double)v128)
                  return 4294954516;
                LOWORD(v129) = WORD1(__dst);
                if (valuePtr.origin.y + valuePtr.size.height > (double)v129
                  || valuePtr.origin.x + valuePtr.size.width < (double)SDWORD1(v288)
                  || valuePtr.origin.y + valuePtr.size.height < (double)SDWORD2(v288)
                  || (valuePtr.origin.x & 1) != 0
                  || (valuePtr.origin.y & 1) != 0
                  || (valuePtr.size.width & 1) != 0
                  || (valuePtr.size.height & 1) != 0)
                {
                  return 4294954516;
                }
                v289 = valuePtr;
              }
              if (v229)
              {
                LODWORD(valuePtr.origin.x) = 0;
                CFNumberGetValue(v229, kCFNumberSInt32Type, &valuePtr);
                LODWORD(v290) = LODWORD(valuePtr.origin.x);
              }
              if (v234)
              {
                LODWORD(valuePtr.origin.x) = 0;
                CFNumberGetValue(v234, kCFNumberSInt32Type, &valuePtr);
                if (*v30)
                  return 4294954516;
                DWORD1(v290) = LODWORD(valuePtr.origin.x);
              }
              if (theArrayc)
              {
                v130 = CFEqual(theArrayc, (CFTypeRef)*MEMORY[0x24BDBD270]);
                if (*v30)
                  return 4294954516;
                BYTE8(v290) = v130 != 0;
              }
              if (v215)
                LOBYTE(v292) = CFEqual(v215, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
              if (cf1b)
              {
                v131 = CFEqual(cf1b, (CFTypeRef)*MEMORY[0x24BDBD270]);
                if (*v30 || *(_QWORD *)(a2 + 88))
                  return 4294954516;
                BYTE10(v290) = v131 != 0;
              }
              if (v210)
              {
                LODWORD(valuePtr.origin.x) = 0;
                CFNumberGetValue(v210, kCFNumberSInt32Type, &valuePtr);
                if (*v30 || *(_QWORD *)(a2 + 88))
                  return 4294954516;
                HIDWORD(v290) = LODWORD(valuePtr.origin.x);
              }
              if (pixelBufferPool)
              {
                if (*v30 || *(_QWORD *)(a2 + 88))
                  return 4294954516;
                for (m = 0; m != 3; ++m)
                {
                  v329.length = CFArrayGetCount(pixelBufferPool);
                  v329.location = 0;
                  if (CFArrayContainsValue(pixelBufferPool, v329, (const void *)*(&v319 + 2 * m)))
                  {
                    v133 = 0;
                    v134 = *((_DWORD *)&v319 + 4 * m + 2);
                    v135 = (int *)(v7 + 16);
                    do
                    {
                      v136 = *v135;
                      v135 += 20;
                      if (v136 == v134)
                        *((_BYTE *)&v292 + v133 + 8) = 1;
                      ++v133;
                    }
                    while (v133 != 5);
                  }
                }
              }
              if (v126)
              {
                if (*v30)
                  return 4294954516;
                if (!*(_QWORD *)(a2 + 88))
                {
                  v137 = *(__CVPixelBufferPool **)(a2 + 1000);
                  if (v137)
                    CVPixelBufferPoolRelease(v137);
                  v293 = CVPixelBufferPoolRetain(v126);
                  LODWORD(valuePtr.origin.x) = 0;
                  v138 = CVPixelBufferPoolGetAttributes(v293);
                  v139 = (const __CFNumber *)CFDictionaryGetValue(v138, (const void *)*MEMORY[0x24BDC56F0]);
                  if (!v139)
                    return 4294954516;
                  CFNumberGetValue(v139, kCFNumberSInt32Type, &valuePtr);
                  LODWORD(v290) = LODWORD(valuePtr.origin.x);
                  if (SLODWORD(valuePtr.origin.x) < 1)
                    return 4294954516;
                  goto LABEL_281;
                }
                return 4294954612;
              }
LABEL_281:
              v140 = (_BYTE *)(a2 + 1008);
              v141 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE11798]);
              if (v141)
              {
                v142 = v141;
                v143 = CFGetTypeID(v141);
                if (v143 == CFDictionaryGetTypeID())
                {
                  if (CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE117D0])
                    || CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11760])
                    || CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11740])
                    || CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11738])
                    || CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11748]))
                  {
                    return 4294954516;
                  }
                  v144 = (const __CFNumber *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11730]);
                  dictd = (const __CFNumber *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11750]);
                  v240 = (const __CFNumber *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11758]);
                  v245 = (const __CFNumber *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11700]);
                  v235 = (CFNumberRef)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE116F8]);
                  theArrayd = (CFArrayRef)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11648]);
                  v230 = (CFNumberRef)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11650]);
                  v216 = (const __CFNumber *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11658]);
                  cf1c = (const __CFArray *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11728]);
                  pixelBufferPoola = (__CVPixelBufferPool *)CFDictionaryGetValue(v142, (const void *)*MEMORY[0x24BE11708]);
                  if (v144)
                  {
                    valuePtr.origin.x = 0.0;
                    CFNumberGetValue(v144, kCFNumberLongLongType, &valuePtr);
                    *((_QWORD *)&v279 + 1) = *(_QWORD *)&valuePtr.origin.x;
                  }
                  if (dictd)
                  {
                    LODWORD(valuePtr.origin.x) = 0;
                    CFNumberGetValue(dictd, kCFNumberSInt32Type, &valuePtr);
                    if (*v140 || LODWORD(valuePtr.origin.x) != 2037741158 && LODWORD(valuePtr.origin.x) != 2037741171)
                      return 4294954516;
                    LODWORD(v280) = LODWORD(valuePtr.origin.x);
                  }
                  if (v240)
                  {
                    LODWORD(valuePtr.origin.x) = 0;
                    CFNumberGetValue(v240, kCFNumberSInt32Type, &valuePtr);
                    LODWORD(v283) = LODWORD(valuePtr.origin.x);
                  }
                  if (v245)
                  {
                    LODWORD(valuePtr.origin.x) = 0;
                    CFNumberGetValue(v245, kCFNumberSInt32Type, &valuePtr);
                    if (*v140)
                      return 4294954516;
                    DWORD1(v283) = LODWORD(valuePtr.origin.x);
                  }
                  if (v235)
                  {
                    v145 = CFEqual(v235, (CFTypeRef)*MEMORY[0x24BDBD270]);
                    if (*v140)
                      return 4294954516;
                    BYTE8(v283) = v145 != 0;
                  }
                  if (theArrayd)
                    LOBYTE(v285) = CFEqual(theArrayd, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
                  if (v230)
                  {
                    v146 = CFEqual(v230, (CFTypeRef)*MEMORY[0x24BDBD270]);
                    if (*v140 || *(_QWORD *)(a2 + 88))
                      return 4294954516;
                    BYTE10(v283) = v146 != 0;
                  }
                  if (v216)
                  {
                    LODWORD(valuePtr.origin.x) = 0;
                    CFNumberGetValue(v216, kCFNumberSInt32Type, &valuePtr);
                    if (*v140 || *(_QWORD *)(a2 + 88))
                      return 4294954516;
                    HIDWORD(v283) = LODWORD(valuePtr.origin.x);
                  }
                  if (cf1c)
                  {
                    if (*v140 || *(_QWORD *)(a2 + 88))
                      return 4294954516;
                    for (n = 0; n != 3; ++n)
                    {
                      v330.length = CFArrayGetCount(cf1c);
                      v330.location = 0;
                      if (CFArrayContainsValue(cf1c, v330, (const void *)*(&v319 + 2 * n)))
                      {
                        v148 = 0;
                        v149 = *((_DWORD *)&v319 + 4 * n + 2);
                        v150 = (int *)(v7 + 16);
                        do
                        {
                          v151 = *v150;
                          v150 += 20;
                          if (v151 == v149)
                            *((_BYTE *)&v285 + v148 + 8) = 1;
                          ++v148;
                        }
                        while (v148 != 5);
                      }
                    }
                  }
                  if (pixelBufferPoola)
                  {
                    if (*v140)
                      return 4294954516;
                    if (*(_QWORD *)(a2 + 88))
                      return 4294954612;
                    v152 = *(__CVPixelBufferPool **)(a2 + 1120);
                    if (v152)
                      CVPixelBufferPoolRelease(v152);
                    v286 = CVPixelBufferPoolRetain(pixelBufferPoola);
                    LODWORD(valuePtr.origin.x) = 0;
                    v153 = CVPixelBufferPoolGetAttributes(v286);
                    v154 = (const __CFNumber *)CFDictionaryGetValue(v153, (const void *)*MEMORY[0x24BDC56F0]);
                    if (!v154)
                      return 4294954516;
                    CFNumberGetValue(v154, kCFNumberSInt32Type, &valuePtr);
                    LODWORD(v283) = LODWORD(valuePtr.origin.x);
                    if (SLODWORD(valuePtr.origin.x) < 1)
                      return 4294954516;
                  }
                }
              }
              v155 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE117A0]);
              if (v155)
              {
                v156 = v155;
                v157 = CFGetTypeID(v155);
                if (v157 == CFDictionaryGetTypeID())
                {
                  if (!ConfigSupportsContextSwitchCaptures(a2, a4, 0, 0)
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE117D0])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11760])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11740])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11738])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE116F8])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11750])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11650])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11658])
                    || CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11748]))
                  {
                    return 4294954516;
                  }
                  v158 = (const __CFNumber *)CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11730]);
                  v159 = (const __CFNumber *)CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11758]);
                  v160 = (const __CFNumber *)CFDictionaryGetValue(v156, (const void *)*MEMORY[0x24BE11700]);
                  if (v158)
                  {
                    valuePtr.origin.x = 0.0;
                    CFNumberGetValue(v158, kCFNumberLongLongType, &valuePtr);
                    x = valuePtr.origin.x;
                  }
                  if (v159)
                  {
                    LODWORD(valuePtr.origin.x) = 0;
                    CFNumberGetValue(v159, kCFNumberSInt32Type, &valuePtr);
                    x_low = LODWORD(valuePtr.origin.x);
                  }
                  if (v160)
                  {
                    LODWORD(valuePtr.origin.x) = 0;
                    CFNumberGetValue(v160, kCFNumberSInt32Type, &valuePtr);
                    if (*(_BYTE *)(a2 + 1128))
                      return 4294954516;
                    v256 = LODWORD(valuePtr.origin.x);
                  }
                }
              }
              if (!*(_QWORD *)(a2 + 88))
              {
LABEL_409:
                v12 = 0;
                *(_QWORD *)(a2 + 640) = v317;
                v177 = v315;
                *(_OWORD *)(a2 + 592) = v314;
                *(_OWORD *)(a2 + 608) = v177;
                *(_OWORD *)(a2 + 624) = v316;
                v178 = v311;
                *(_OWORD *)v259 = v310;
                *(_OWORD *)(a2 + 544) = v178;
                v179 = v313;
                *(_OWORD *)(a2 + 560) = v312;
                *(_OWORD *)(a2 + 576) = v179;
                v180 = v302;
                v181 = v303;
                v182 = v305;
                *(_OWORD *)(a2 + 680) = v304;
                *(_OWORD *)(a2 + 696) = v182;
                *(_OWORD *)v17 = v180;
                *(_OWORD *)(a2 + 664) = v181;
                v183 = v306;
                v184 = v307;
                v185 = v308;
                *(_QWORD *)(a2 + 760) = v309;
                *(_OWORD *)(a2 + 728) = v184;
                *(_OWORD *)(a2 + 744) = v185;
                *(_OWORD *)(a2 + 712) = v183;
                v186 = v294;
                v187 = v295;
                v188 = v297;
                *((_OWORD *)numberc + 2) = v296;
                *((_OWORD *)numberc + 3) = v188;
                *(_OWORD *)numberc = v186;
                *((_OWORD *)numberc + 1) = v187;
                v189 = v298;
                v190 = v299;
                v191 = v300;
                *((_QWORD *)numberc + 14) = v301;
                *((_OWORD *)numberc + 5) = v190;
                *((_OWORD *)numberc + 6) = v191;
                *((_OWORD *)numberc + 4) = v189;
                v192 = v287;
                v193 = v288;
                size = v289.size;
                *(CGPoint *)(a2 + 920) = v289.origin;
                *(CGSize *)(a2 + 936) = size;
                *(_OWORD *)v30 = v192;
                *(_OWORD *)(a2 + 904) = v193;
                v195 = v290;
                v196 = v291;
                v197 = v292;
                *(_QWORD *)(a2 + 1000) = v293;
                *(_OWORD *)(a2 + 968) = v196;
                *(_OWORD *)(a2 + 984) = v197;
                *(_OWORD *)(a2 + 952) = v195;
                v198 = v279;
                v199 = v280;
                v200 = v282;
                *(_OWORD *)(a2 + 1040) = v281;
                *(_OWORD *)(a2 + 1056) = v200;
                *(_OWORD *)v140 = v198;
                *(_OWORD *)(a2 + 1024) = v199;
                v201 = v283;
                v202 = v284;
                v203 = v285;
                *(_QWORD *)(a2 + 1120) = v286;
                *(_OWORD *)(a2 + 1088) = v202;
                *(_OWORD *)(a2 + 1104) = v203;
                *(_OWORD *)(a2 + 1072) = v201;
                *(_QWORD *)(a2 + 1128) = v255;
                *(CGFloat *)(a2 + 1136) = x;
                v204 = v276;
                v205 = v278;
                *(_OWORD *)(a2 + 1160) = v277;
                *(_OWORD *)(a2 + 1176) = v205;
                *(_OWORD *)(a2 + 1144) = v204;
                *(_DWORD *)(a2 + 1192) = x_low;
                *(_DWORD *)(a2 + 1196) = v256;
                v206 = v273;
                v207 = v275;
                *(_OWORD *)(a2 + 1216) = v274;
                *(_OWORD *)(a2 + 1232) = v207;
                *(_OWORD *)(a2 + 1200) = v206;
                return v12;
              }
              if (*(double *)(a2 + 560) == *(double *)&v312)
              {
                v161 = *((double *)&v312 + 1);
                if (*(double *)(a2 + 568) == *((double *)&v312 + 1)
                  && *(double *)(a2 + 576) == *(double *)&v313
                  && *(double *)(a2 + 584) == *((double *)&v313 + 1))
                {
                  v12 = 0;
                  goto LABEL_359;
                }
              }
              else
              {
                v161 = *((double *)&v312 + 1);
              }
              if (H9ISP::H9ISPDevice::SetScalerCrop(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), (int)*(double *)&v312 | ((unint64_t)(int)v161 << 32), *(double *)&v313 | ((unint64_t)*((double *)&v313 + 1) << 32)))v12 = 4294954516;
              else
                v12 = 0;
LABEL_359:
              if (!*v30 || *(unsigned __int8 *)(a2 + 984) == v292)
              {
                v162 = 0;
                goto LABEL_375;
              }
              if (*(_DWORD *)(a2 + 56))
              {
                v162 = 0;
              }
              else
              {
                if ((_BYTE)v292)
                {
                  v163 = *(_DWORD *)(a2 + 40);
                  v164 = *(_DWORD *)(a2 + 112);
                  if (v163 < v164)
                    v164 = 0;
                  CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v163 - v164) + 16), &__dst, v318);
                  if (CameraConfig)
                  {
                    v162 = CameraConfig;
                    H9ISPLogger(3, "SetVideoOutputConfigurations - GetCameraConfig error: 0x%08X\n");
                  }
                  else
                  {
                    v262[4] = v269;
                    v262[5] = v270;
                    v262[6] = v271;
                    v263 = v272;
                    v262[0] = __dst;
                    v262[1] = v266;
                    v262[2] = v267;
                    v262[3] = v268;
                    v162 = AddSushiRawPoolToFrameReceiver(a2, a4, (unsigned __int16 *)v262, v290);
                    if (!v162)
                      goto LABEL_375;
                    H9ISPLogger(3, "SetVideoOutputConfigurations - AddSushiRawPoolToFrameReceiver error: res=0x%08X\n");
                  }
                  v12 = 4294954516;
                  goto LABEL_375;
                }
                v166 = H9ISP::H9ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(_QWORD *)(a2 + 88), 19);
                v162 = v166;
                if (!v166)
                {
LABEL_375:
                  if (*v140 && *(unsigned __int8 *)(a2 + 1104) != v285)
                  {
                    if (*(_DWORD *)(a2 + 56))
                    {
                      v12 = 4294954516;
                      goto LABEL_389;
                    }
                    if ((_BYTE)v285)
                    {
                      v167 = *(_DWORD *)(a2 + 40);
                      v168 = *(_DWORD *)(a2 + 112);
                      if (v167 < v168)
                        v168 = 0;
                      v169 = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a4 + 24), *(_DWORD *)(a2 + 84), *(_DWORD *)(*(_QWORD *)(a2 + 104) + 84 * (v167 - v168) + 16), &__dst, v318);
                      if (v169)
                      {
                        v162 = v169;
                        H9ISPLogger(3, "SetVideoOutputConfigurations - GetCameraConfig error: 0x%08X\n");
                      }
                      else
                      {
                        v260[4] = v269;
                        v260[5] = v270;
                        v260[6] = v271;
                        v261 = v272;
                        v260[0] = __dst;
                        v260[1] = v266;
                        v260[2] = v267;
                        v260[3] = v268;
                        v162 = AddSushiRawPoolToFrameReceiver(a2, a4, (unsigned __int16 *)v260, v283);
                        if (!v162)
                          goto LABEL_389;
                        H9ISPLogger(3, "SetVideoOutputConfigurations - AddSushiRawPoolToFrameReceiver error: res=0x%08X\n");
                      }
                    }
                    else
                    {
                      v162 = H9ISP::H9ISPFrameReceiver::removeBufferPoolFromFrameReceiver(*(_QWORD *)(a2 + 88), 19);
                      if (!v162)
                        goto LABEL_389;
                      H9ISPLogger(3, "SetVideoOutputConfigurations - removeBufferPoolFromFrameReceiver error: 0x%08X\n");
                    }
                    v12 = 4294954516;
                  }
LABEL_389:
                  v170 = *(_DWORD *)(a2 + 952);
                  v171 = v290;
                  if ((_DWORD)v290 == v170)
                  {
                    v172 = 0;
LABEL_397:
                    v173 = 0;
                    goto LABEL_398;
                  }
                  if (*(_BYTE *)(a2 + 600)
                    || *(_BYTE *)(a2 + 720)
                    || *(_BYTE *)(a2 + 840)
                    || *(_BYTE *)(a2 + 960)
                    || *(_BYTE *)(a2 + 1080))
                  {
                    v172 = 1;
                    v162 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 1, (int)v290 - v170);
                    if (v162)
                      goto LABEL_397;
                  }
                  else
                  {
                    v172 = 0;
                    if (v162)
                      goto LABEL_397;
                  }
                  H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 7, v171 - *(_DWORD *)(a2 + 952));
                  v162 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 8, v171 - *(_DWORD *)(a2 + 952));
                  if (*(_BYTE *)(a2 + 523) && *v30 && *(_BYTE *)(a2 + 984))
                    v162 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 19, v171 - *(_DWORD *)(a2 + 952));
                  v173 = 1;
LABEL_398:
                  v174 = *(_DWORD *)(a2 + 1072);
                  v175 = v283;
                  v176 = v283 - v174;
                  if ((_DWORD)v283 == v174)
                  {
LABEL_406:
                    if (v162 == -536870211)
                      return 4294954510;
                    if (v162)
                      return 4294954516;
                    if ((_DWORD)v12)
                      return v12;
                    goto LABEL_409;
                  }
                  if (*(_BYTE *)(a2 + 600) || *(_BYTE *)(a2 + 720) || *(_BYTE *)(a2 + 840) || *(_BYTE *)(a2 + 960))
                  {
                    if ((v172 & 1) != 0)
                      goto LABEL_405;
                  }
                  else
                  {
                    if (*(_BYTE *)(a2 + 1080))
                      v209 = v172;
                    else
                      v209 = 1;
                    if ((v209 & 1) != 0)
                    {
LABEL_405:
                      if (!v162)
                      {
                        v208 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 9, v175 - *(_DWORD *)(a2 + 1072));
                        if ((v173 & 1) == 0)
                          v208 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 8, v175 - *(_DWORD *)(a2 + 1072));
                        v162 = v208;
                        if (*(_BYTE *)(a2 + 523) && *v140 && *(_BYTE *)(a2 + 1104))
                          v162 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 19, v175 - *(_DWORD *)(a2 + 1072));
                      }
                      goto LABEL_406;
                    }
                  }
                  v162 = H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(*(_QWORD *)(a2 + 88), 1, v176);
                  goto LABEL_405;
                }
                H9ISPLogger(3, "SetVideoOutputConfigurations - removeBufferPoolFromFrameReceiver error: 0x%08X\n", v166);
              }
              v12 = 4294954516;
              goto LABEL_375;
            }
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v125, kCFNumberSInt32Type, &valuePtr);
            if (*v30)
              return 4294954516;
            if (SLODWORD(valuePtr.origin.x) > 2037741157)
            {
              if (LODWORD(valuePtr.origin.x) != 2037741158)
              {
                v127 = 2037741171;
LABEL_221:
                if (LODWORD(valuePtr.origin.x) != v127)
                  return 4294954516;
              }
            }
            else if (LODWORD(valuePtr.origin.x) != 875704422)
            {
              v127 = 875704438;
              goto LABEL_221;
            }
            LODWORD(v288) = LODWORD(valuePtr.origin.x);
            goto LABEL_223;
          }
          LODWORD(valuePtr.origin.x) = 0;
          CFNumberGetValue(numbera, kCFNumberSInt32Type, &valuePtr);
          if (*v17)
            return 4294954516;
          if (SLODWORD(valuePtr.origin.x) > 2037741157)
          {
            if (LODWORD(valuePtr.origin.x) != 2037741158)
            {
              v80 = 2037741171;
LABEL_98:
              if (LODWORD(valuePtr.origin.x) != v80)
                return 4294954516;
            }
          }
          else if (LODWORD(valuePtr.origin.x) != 875704422)
          {
            v80 = 875704438;
            goto LABEL_98;
          }
          LODWORD(v303) = LODWORD(valuePtr.origin.x);
          goto LABEL_100;
        }
        LODWORD(valuePtr.origin.x) = 0;
        CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        if (*v259)
          return 4294954516;
        if (SLODWORD(valuePtr.origin.x) > 2037741157)
        {
          if (LODWORD(valuePtr.origin.x) != 2037741158)
          {
            v52 = 2037741171;
LABEL_24:
            if (LODWORD(valuePtr.origin.x) != v52)
              return 4294954516;
          }
        }
        else if (LODWORD(valuePtr.origin.x) != 875704422)
        {
          v52 = 875704438;
          goto LABEL_24;
        }
        LODWORD(v311) = LODWORD(valuePtr.origin.x);
        goto LABEL_26;
      }
    }
  }
  return 4294954516;
}

uint64_t CopyVideoOutputConfigurations(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary **v5;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v11;
  const void **v12;
  const void **v13;
  const void **v14;
  __CFDictionary *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFDictionaryRef DictionaryRepresentation;
  CFNumberRef v21;
  CFNumberRef v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  __CFArray *v28;
  const CFArrayCallBacks *v29;
  uint64_t i;
  uint64_t result;
  const void *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  CFNumberRef v38;
  CFMutableDictionaryRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFDictionaryRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  uint64_t v52;
  __CFArray *v53;
  const CFArrayCallBacks *v54;
  uint64_t j;
  const void *v56;
  CFNumberRef v57;
  CFNumberRef v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  CFNumberRef v62;
  CFMutableDictionaryRef v63;
  __CFDictionary *v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFDictionaryRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  const void **v72;
  uint64_t v73;
  __CFArray *v74;
  const CFArrayCallBacks *v75;
  uint64_t k;
  const void *v77;
  CFNumberRef v78;
  CFNumberRef v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  CFNumberRef v83;
  CFMutableDictionaryRef v84;
  const void **v85;
  __CFDictionary *v86;
  CFNumberRef v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  CFDictionaryRef v91;
  CFNumberRef v92;
  CFNumberRef v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  CFNumberRef v98;
  CFNumberRef v99;
  const void **v100;
  CFNumberRef v101;
  uint64_t v102;
  __CFArray *v103;
  const CFArrayCallBacks *v104;
  uint64_t m;
  const void *v106;
  CFNumberRef v107;
  CFNumberRef v108;
  CFNumberRef v109;
  CFMutableDictionaryRef v110;
  __CFDictionary *v111;
  CFNumberRef v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  CFDictionaryRef v116;
  CFNumberRef v117;
  CFNumberRef v118;
  const void *v119;
  const void *v120;
  const void *v121;
  const void *v122;
  CFNumberRef v123;
  CFNumberRef v124;
  const void **v125;
  CFNumberRef v126;
  uint64_t v127;
  __CFArray *v128;
  const CFArrayCallBacks *v129;
  uint64_t n;
  const void *v131;
  CFNumberRef v132;
  CFNumberRef v133;
  CFNumberRef v134;
  __CFDictionary *v135;
  CFNumberRef v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  CFDictionaryRef v140;
  CFNumberRef v141;
  CFNumberRef v142;
  uint64_t v143;
  __CFDictionary **v144;
  const __CFAllocator *v145;
  __CFDictionary *theDict;
  int v148;
  int valuePtr;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;

  v5 = a2;
  v156 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a3 + 523))
  {
    *a2 = 0;
    return 4294954509;
  }
  v150 = *MEMORY[0x24BE10588];
  v151 = 1919246706;
  v152 = *MEMORY[0x24BE105A8];
  v153 = 1919251564;
  v154 = *MEMORY[0x24BE105B0];
  v155 = 1718775412;
  v8 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    result = 4294954510;
    goto LABEL_148;
  }
  v143 = a5;
  v144 = v5;
  v11 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v12 = (const void **)MEMORY[0x24BDBD268];
  v13 = (const void **)MEMORY[0x24BDBD270];
  v14 = (const void **)MEMORY[0x24BE117D0];
  v145 = v9;
  theDict = Mutable;
  if (!v11)
    goto LABEL_33;
  v15 = v11;
  v16 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 536));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11730], v16);
  CFRelease(v16);
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 544));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11750], v17);
  CFRelease(v17);
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 548));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11760], v18);
  CFRelease(v18);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 552));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11740], v19);
  CFRelease(v19);
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 560));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11738], DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 592));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11758], v21);
  CFRelease(v21);
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 596));
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11700], v22);
  CFRelease(v22);
  v23 = *v12;
  v24 = *v13;
  if (*(_BYTE *)(a3 + 600))
    v25 = *v13;
  else
    v25 = *v12;
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE116F8], v25);
  if (*(_BYTE *)(a3 + 601))
    v26 = v24;
  else
    v26 = v23;
  CFDictionarySetValue(v15, *v14, v26);
  v27 = 0;
  v28 = 0;
  v29 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  do
  {
    while (1)
    {
      if (!*(_BYTE *)(a3 + v27 + 632))
        goto LABEL_18;
      if (v28)
        break;
      v28 = CFArrayCreateMutable(a1, 0, v29);
      if (v28)
        break;
      if (++v27 == 5)
        goto LABEL_26;
    }
    for (i = 0; i != 48; i += 16)
    {
      if (*(_DWORD *)(v8 + 80 * v27 + 16) == *(_DWORD *)((char *)&v150 + i + 8))
        CFArrayAppendValue(v28, *(const void **)((char *)&v150 + i));
    }
LABEL_18:
    ++v27;
  }
  while (v27 != 5);
  if (v28)
  {
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11728], v28);
    CFRelease(v28);
  }
LABEL_26:
  v32 = *(const void **)(a3 + 640);
  if (v32)
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11708], v32);
  valuePtr = 64;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11710], v33);
  CFRelease(v33);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11720], v34);
  CFRelease(v34);
  v35 = dword_2542912E8;
  valuePtr = dword_2542912E8;
  Mutable = theDict;
  v12 = (const void **)MEMORY[0x24BDBD268];
  v13 = (const void **)MEMORY[0x24BDBD270];
  v14 = (const void **)MEMORY[0x24BE117D0];
  if (!dword_2542912E8)
  {
    v36 = *(_DWORD *)(a3 + 40);
    v37 = *(_DWORD *)(a3 + 112);
    if (v36 < v37)
      v37 = 0;
    v35 = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v36 - v37) + 76);
  }
  valuePtr = v35 + 1;
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BE11718], v38);
  CFRelease(v38);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x24BE11780], v15);
  CFRelease(v15);
  v9 = v145;
LABEL_33:
  v39 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v39)
    goto LABEL_61;
  v40 = v39;
  v41 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 656));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11730], v41);
  CFRelease(v41);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 664));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11750], v42);
  CFRelease(v42);
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 668));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11760], v43);
  CFRelease(v43);
  v44 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 672));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11740], v44);
  CFRelease(v44);
  v45 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 680));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11738], v45);
  CFRelease(v45);
  v46 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 712));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11758], v46);
  CFRelease(v46);
  v47 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 716));
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11700], v47);
  CFRelease(v47);
  v48 = *v12;
  v49 = *v13;
  if (*(_BYTE *)(a3 + 720))
    v50 = *v13;
  else
    v50 = *v12;
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE116F8], v50);
  if (*(_BYTE *)(a3 + 721))
    v51 = v49;
  else
    v51 = v48;
  CFDictionarySetValue(v40, *v14, v51);
  v52 = 0;
  v53 = 0;
  v54 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  while (2)
  {
    while (*(_BYTE *)(a3 + v52 + 752))
    {
      if (v53 || (v53 = CFArrayCreateMutable(a1, 0, v54)) != 0)
      {
        for (j = 0; j != 48; j += 16)
        {
          if (*(_DWORD *)(v8 + 80 * v52 + 16) == *(_DWORD *)((char *)&v150 + j + 8))
            CFArrayAppendValue(v53, *(const void **)((char *)&v150 + j));
        }
        break;
      }
      if (++v52 == 5)
        goto LABEL_54;
    }
    if (++v52 != 5)
      continue;
    break;
  }
  if (v53)
  {
    CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11728], v53);
    CFRelease(v53);
  }
LABEL_54:
  v56 = *(const void **)(a3 + 760);
  if (v56)
    CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11708], v56);
  valuePtr = 64;
  v57 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11710], v57);
  CFRelease(v57);
  v58 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11720], v58);
  CFRelease(v58);
  v59 = dword_2542912E8;
  valuePtr = dword_2542912E8;
  Mutable = theDict;
  v12 = (const void **)MEMORY[0x24BDBD268];
  v13 = (const void **)MEMORY[0x24BDBD270];
  if (!dword_2542912E8)
  {
    v60 = *(_DWORD *)(a3 + 40);
    v61 = *(_DWORD *)(a3 + 112);
    if (v60 < v61)
      v61 = 0;
    v59 = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v60 - v61) + 76);
  }
  valuePtr = v59 + 1;
  v62 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v40, (const void *)*MEMORY[0x24BE11718], v62);
  CFRelease(v62);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x24BE11788], v40);
  CFRelease(v40);
  v9 = v145;
LABEL_61:
  v63 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v63)
    goto LABEL_86;
  v64 = v63;
  v65 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 776));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11730], v65);
  CFRelease(v65);
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 784));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11750], v66);
  CFRelease(v66);
  v67 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 788));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11760], v67);
  CFRelease(v67);
  v68 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 792));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11740], v68);
  CFRelease(v68);
  v69 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 800));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11738], v69);
  CFRelease(v69);
  v70 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 832));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11758], v70);
  CFRelease(v70);
  v71 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 836));
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11700], v71);
  CFRelease(v71);
  if (*(_BYTE *)(a3 + 840))
    v72 = v13;
  else
    v72 = v12;
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE116F8], *v72);
  v73 = 0;
  v74 = 0;
  v75 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  while (2)
  {
    while (*(_BYTE *)(a3 + v73 + 872))
    {
      if (v74 || (v74 = CFArrayCreateMutable(a1, 0, v75)) != 0)
      {
        for (k = 0; k != 48; k += 16)
        {
          if (*(_DWORD *)(v8 + 80 * v73 + 16) == *(_DWORD *)((char *)&v150 + k + 8))
            CFArrayAppendValue(v74, *(const void **)((char *)&v150 + k));
        }
        break;
      }
      if (++v73 == 5)
        goto LABEL_79;
    }
    if (++v73 != 5)
      continue;
    break;
  }
  if (v74)
  {
    CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11728], v74);
    CFRelease(v74);
  }
LABEL_79:
  v77 = *(const void **)(a3 + 880);
  if (v77)
    CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11708], v77);
  valuePtr = 64;
  v78 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11710], v78);
  CFRelease(v78);
  v79 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11720], v79);
  CFRelease(v79);
  v80 = dword_2542912E8;
  valuePtr = dword_2542912E8;
  Mutable = theDict;
  v12 = (const void **)MEMORY[0x24BDBD268];
  v13 = (const void **)MEMORY[0x24BDBD270];
  if (!dword_2542912E8)
  {
    v81 = *(_DWORD *)(a3 + 40);
    v82 = *(_DWORD *)(a3 + 112);
    if (v81 < v82)
      v82 = 0;
    v80 = *(_DWORD *)(*(_QWORD *)(a3 + 104) + 84 * (v81 - v82) + 76);
  }
  valuePtr = v80 + 1;
  v83 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v64, (const void *)*MEMORY[0x24BE11718], v83);
  CFRelease(v83);
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x24BE11778], v64);
  CFRelease(v64);
  v9 = v145;
LABEL_86:
  v84 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v85 = (const void **)MEMORY[0x24BE11658];
  if (!v84)
    goto LABEL_115;
  v86 = v84;
  v87 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 896));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11730], v87);
  CFRelease(v87);
  v88 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 904));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11750], v88);
  CFRelease(v88);
  v89 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 908));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11760], v89);
  CFRelease(v89);
  v90 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 912));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11740], v90);
  CFRelease(v90);
  v91 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 920));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11738], v91);
  CFRelease(v91);
  v92 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 952));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11758], v92);
  CFRelease(v92);
  v93 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 956));
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11700], v93);
  CFRelease(v93);
  v94 = *v12;
  v95 = *v13;
  if (*(_BYTE *)(a3 + 960))
    v96 = *v13;
  else
    v96 = *v12;
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE116F8], v96);
  if (*(_BYTE *)(a3 + 984))
    v97 = v95;
  else
    v97 = v94;
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11648], v97);
  valuePtr = *(_DWORD *)(a3 + 1396);
  v98 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v98)
  {
    v99 = v98;
    CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11660], v98);
    CFRelease(v99);
  }
  if (*(_BYTE *)(a3 + 962))
    v100 = v13;
  else
    v100 = v12;
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11650], *v100);
  v101 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 964));
  CFDictionarySetValue(v86, *v85, v101);
  CFRelease(v101);
  v102 = 0;
  v103 = 0;
  v104 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  while (2)
  {
    while (*(_BYTE *)(a3 + v102 + 992))
    {
      if (v103 || (v103 = CFArrayCreateMutable(a1, 0, v104)) != 0)
      {
        for (m = 0; m != 48; m += 16)
        {
          if (*(_DWORD *)(v8 + 80 * v102 + 16) == *(_DWORD *)((char *)&v150 + m + 8))
            CFArrayAppendValue(v103, *(const void **)((char *)&v150 + m));
        }
        break;
      }
      if (++v102 == 5)
        goto LABEL_112;
    }
    if (++v102 != 5)
      continue;
    break;
  }
  if (v103)
  {
    CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11728], v103);
    CFRelease(v103);
  }
LABEL_112:
  v106 = *(const void **)(a3 + 1000);
  if (v106)
    CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11708], v106);
  v148 = 64;
  v107 = CFNumberCreate(0, kCFNumberSInt32Type, &v148);
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11710], v107);
  CFRelease(v107);
  v108 = CFNumberCreate(0, kCFNumberSInt32Type, &v148);
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11720], v108);
  CFRelease(v108);
  v148 = 0;
  v109 = CFNumberCreate(0, kCFNumberSInt32Type, &v148);
  CFDictionarySetValue(v86, (const void *)*MEMORY[0x24BE11718], v109);
  CFRelease(v109);
  Mutable = theDict;
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x24BE11790], v86);
  CFRelease(v86);
  v9 = v145;
  v12 = (const void **)MEMORY[0x24BDBD268];
  v13 = (const void **)MEMORY[0x24BDBD270];
  v85 = (const void **)MEMORY[0x24BE11658];
LABEL_115:
  v110 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v110)
    goto LABEL_144;
  v111 = v110;
  v112 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1016));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11730], v112);
  CFRelease(v112);
  v113 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1024));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11750], v113);
  CFRelease(v113);
  v114 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1028));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11760], v114);
  CFRelease(v114);
  v115 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1032));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11740], v115);
  CFRelease(v115);
  v116 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 1040));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11738], v116);
  CFRelease(v116);
  v117 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1072));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11758], v117);
  CFRelease(v117);
  v118 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1076));
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11700], v118);
  CFRelease(v118);
  v119 = *v12;
  v120 = *v13;
  if (*(_BYTE *)(a3 + 1080))
    v121 = *v13;
  else
    v121 = *v12;
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE116F8], v121);
  if (*(_BYTE *)(a3 + 1104))
    v122 = v120;
  else
    v122 = v119;
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11648], v122);
  valuePtr = *(_DWORD *)(a3 + 1396);
  v123 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v123)
  {
    v124 = v123;
    CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11660], v123);
    CFRelease(v124);
  }
  if (*(_BYTE *)(a3 + 1082))
    v125 = v13;
  else
    v125 = v12;
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11650], *v125);
  v126 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1084));
  CFDictionarySetValue(v111, *v85, v126);
  CFRelease(v126);
  v127 = 0;
  v128 = 0;
  v129 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  while (2)
  {
    while (*(_BYTE *)(a3 + v127 + 1112))
    {
      if (v128 || (v128 = CFArrayCreateMutable(a1, 0, v129)) != 0)
      {
        for (n = 0; n != 48; n += 16)
        {
          if (*(_DWORD *)(v8 + 80 * v127 + 16) == *(_DWORD *)((char *)&v150 + n + 8))
            CFArrayAppendValue(v128, *(const void **)((char *)&v150 + n));
        }
        break;
      }
      if (++v127 == 5)
        goto LABEL_141;
    }
    if (++v127 != 5)
      continue;
    break;
  }
  if (v128)
  {
    CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11728], v128);
    CFRelease(v128);
  }
LABEL_141:
  v131 = *(const void **)(a3 + 1120);
  if (v131)
    CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11708], v131);
  v148 = 64;
  v132 = CFNumberCreate(0, kCFNumberSInt32Type, &v148);
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11710], v132);
  CFRelease(v132);
  v133 = CFNumberCreate(0, kCFNumberSInt32Type, &v148);
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11720], v133);
  CFRelease(v133);
  v148 = 0;
  v134 = CFNumberCreate(0, kCFNumberSInt32Type, &v148);
  CFDictionarySetValue(v111, (const void *)*MEMORY[0x24BE11718], v134);
  CFRelease(v134);
  Mutable = theDict;
  CFDictionarySetValue(theDict, (const void *)*MEMORY[0x24BE11798], v111);
  CFRelease(v111);
  v9 = v145;
LABEL_144:
  result = ConfigSupportsContextSwitchCaptures(a3, v143, 0, 0);
  if ((_DWORD)result)
  {
    result = (uint64_t)CFDictionaryCreateMutable(v9, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v5 = v144;
    if (result)
    {
      v135 = (__CFDictionary *)result;
      v136 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(a3 + 1136));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11730], v136);
      CFRelease(v136);
      v137 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1144));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11750], v137);
      CFRelease(v137);
      v138 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1148));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11760], v138);
      CFRelease(v138);
      v139 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1152));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11740], v139);
      CFRelease(v139);
      v140 = CGRectCreateDictionaryRepresentation(*(CGRect *)(a3 + 1160));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11738], v140);
      CFRelease(v140);
      v141 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1192));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11758], v141);
      CFRelease(v141);
      v142 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(a3 + 1196));
      CFDictionarySetValue(v135, (const void *)*MEMORY[0x24BE11700], v142);
      CFRelease(v142);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE117A0], v135);
      CFRelease(v135);
      result = 0;
    }
  }
  else
  {
    v5 = v144;
  }
LABEL_148:
  *v5 = Mutable;
  return result;
}

uint64_t CopyVideoOutputsColorInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  const void **v11;
  const void **v12;
  const void **v13;
  const void **v14;
  __CFDictionary *v15;
  int v16;
  const void **v17;
  const void **v18;
  int v19;
  const void **v20;
  uint64_t result;
  __CFDictionary *v22;
  __CFDictionary *v23;
  int v24;
  const void **v25;
  const void **v26;
  int v27;
  const void **v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  int v31;
  const void **v32;
  const void **v33;
  int v34;
  const void **v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  int v38;
  const void **v39;
  const void **v40;
  int v41;
  const void **v42;
  __CFDictionary *v43;
  __CFDictionary *v44;
  int v45;
  const void **v46;
  const void **v47;
  int v48;
  const void **v49;
  __CFDictionary *v50;
  int v51;
  const void **v52;
  const void **v53;
  int v54;
  const void **v55;

  if (*(_BYTE *)(a3 + 523))
  {
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v10 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      v11 = (const void **)MEMORY[0x24BDC5490];
      v12 = (const void **)MEMORY[0x24BDC54D0];
      v13 = (const void **)MEMORY[0x24BDC54B0];
      v14 = (const void **)MEMORY[0x24BDC54B8];
      if (v10)
      {
        v15 = v10;
        v16 = *(_DWORD *)(a3 + 1372);
        if (v16 == 2)
          v17 = (const void **)MEMORY[0x24BDC54B0];
        else
          v17 = (const void **)MEMORY[0x24BDC54B8];
        if (v16 == 1)
          v18 = (const void **)MEMORY[0x24BDC54D0];
        else
          v18 = v17;
        CFDictionarySetValue(v10, (const void *)*MEMORY[0x24BDC5490], *v18);
        v19 = *(_DWORD *)(a3 + 544);
        if (v19 == 875704422 || v19 == 2037741158 || *(_DWORD *)(a3 + 548) <= 0x3BFu)
          v20 = (const void **)MEMORY[0x24BDC5590];
        else
          v20 = (const void **)MEMORY[0x24BDC55A8];
        CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BDC5570], *v20);
        CFDictionarySetValue(v15, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11780], v15);
        CFRelease(v15);
      }
      v22 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (v22)
      {
        v23 = v22;
        v24 = *(_DWORD *)(a3 + 1372);
        if (v24 == 2)
          v25 = v13;
        else
          v25 = v14;
        if (v24 == 1)
          v26 = v12;
        else
          v26 = v25;
        CFDictionarySetValue(v22, *v11, *v26);
        v27 = *(_DWORD *)(a3 + 664);
        if (v27 == 875704422 || v27 == 2037741158 || *(_DWORD *)(a3 + 668) <= 0x3BFu)
          v28 = (const void **)MEMORY[0x24BDC5590];
        else
          v28 = (const void **)MEMORY[0x24BDC55A8];
        CFDictionarySetValue(v23, (const void *)*MEMORY[0x24BDC5570], *v28);
        CFDictionarySetValue(v23, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11788], v23);
        CFRelease(v23);
      }
      v29 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (v29)
      {
        v30 = v29;
        v31 = *(_DWORD *)(a3 + 1372);
        if (v31 == 2)
          v32 = v13;
        else
          v32 = v14;
        if (v31 == 1)
          v33 = v12;
        else
          v33 = v32;
        CFDictionarySetValue(v29, *v11, *v33);
        v34 = *(_DWORD *)(a3 + 784);
        if (v34 == 875704422 || v34 == 2037741158 || *(_DWORD *)(a3 + 788) <= 0x3BFu)
          v35 = (const void **)MEMORY[0x24BDC5590];
        else
          v35 = (const void **)MEMORY[0x24BDC55A8];
        CFDictionarySetValue(v30, (const void *)*MEMORY[0x24BDC5570], *v35);
        CFDictionarySetValue(v30, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11778], v30);
        CFRelease(v30);
      }
      v36 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (v36)
      {
        v37 = v36;
        v38 = *(_DWORD *)(a3 + 1372);
        if (v38 == 2)
          v39 = v13;
        else
          v39 = v14;
        if (v38 == 1)
          v40 = v12;
        else
          v40 = v39;
        CFDictionarySetValue(v36, *v11, *v40);
        v41 = *(_DWORD *)(a3 + 904);
        if (v41 == 875704422 || v41 == 2037741158 || *(_DWORD *)(a3 + 908) <= 0x3BFu)
          v42 = (const void **)MEMORY[0x24BDC5590];
        else
          v42 = (const void **)MEMORY[0x24BDC55A8];
        CFDictionarySetValue(v37, (const void *)*MEMORY[0x24BDC5570], *v42);
        CFDictionarySetValue(v37, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11790], v37);
        CFRelease(v37);
      }
      v43 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (v43)
      {
        v44 = v43;
        v45 = *(_DWORD *)(a3 + 1372);
        if (v45 == 2)
          v46 = v13;
        else
          v46 = v14;
        if (v45 == 1)
          v47 = v12;
        else
          v47 = v46;
        CFDictionarySetValue(v43, *v11, *v47);
        v48 = *(_DWORD *)(a3 + 1024);
        if (v48 == 875704422 || v48 == 2037741158 || *(_DWORD *)(a3 + 1028) <= 0x3BFu)
          v49 = (const void **)MEMORY[0x24BDC5590];
        else
          v49 = (const void **)MEMORY[0x24BDC55A8];
        CFDictionarySetValue(v44, (const void *)*MEMORY[0x24BDC5570], *v49);
        CFDictionarySetValue(v44, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11798], v44);
        CFRelease(v44);
      }
      result = ConfigSupportsContextSwitchCaptures(a3, a5, 0, 0);
      if ((_DWORD)result)
      {
        result = (uint64_t)CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (result)
        {
          v50 = (__CFDictionary *)result;
          v51 = *(_DWORD *)(a3 + 1372);
          if (v51 == 2)
            v52 = v13;
          else
            v52 = v14;
          if (v51 == 1)
            v53 = v12;
          else
            v53 = v52;
          CFDictionarySetValue((CFMutableDictionaryRef)result, *v11, *v53);
          v54 = *(_DWORD *)(a3 + 1144);
          if (v54 == 875704422 || v54 == 2037741158 || *(_DWORD *)(a3 + 1148) <= 0x3BFu)
            v55 = (const void **)MEMORY[0x24BDC5590];
          else
            v55 = (const void **)MEMORY[0x24BDC55A8];
          CFDictionarySetValue(v50, (const void *)*MEMORY[0x24BDC5570], *v55);
          CFDictionarySetValue(v50, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE117A0], v50);
          CFRelease(v50);
          result = 0;
        }
      }
    }
    else
    {
      result = 4294954510;
    }
  }
  else
  {
    Mutable = 0;
    result = 4294954509;
  }
  *a2 = Mutable;
  return result;
}

uint64_t SetDecoupleBackendFromStreaming(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;

  result = 4294954516;
  if (cf && !*(_QWORD *)(a2 + 88))
  {
    v8 = CFGetTypeID(cf);
    if (v8 == CFBooleanGetTypeID())
    {
      v9 = CFEqual(cf, (CFTypeRef)*MEMORY[0x24BDBD270]);
      v10 = v9 != 0;
      if (!v9 || !*(_BYTE *)(a2 + 528) && !*(_BYTE *)(a2 + 648))
      {
        v11 = v9 == 0;
        result = H9ISP::H9ISPDevice::ISP_PreviewStreamSet(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v11);
        if (!(_DWORD)result)
        {
          *(_BYTE *)(a2 + 1278) = v10;
          *(_DWORD *)(a2 + 1280) = v11;
          return result;
        }
        H9ISPLogger(3, "SetDecoupleBackendFromStreaming - Could not set decouple backend from streaming res=0x%08X\n", result);
      }
    }
    return 4294954516;
  }
  return result;
}

uint64_t CopyDecoupleBackendFromStreaming(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef *v4;
  CFTypeRef v5;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (*(_BYTE *)(a3 + 1278))
    v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t SetFocusNow(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  CFTypeID v8;
  const void *Value;
  const __CFNumber *v10;
  const void *v11;
  const void *v12;
  const __CFNumber *v13;
  const void *v14;
  const void *v15;
  const __CFNumber *v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  int v26;
  const void *v27;
  int v28;
  int v29;
  int v30;
  const __CFNumber *v31;
  int v32;
  const __CFNumber *v33;
  uint64_t v34;
  unsigned __int8 v35[16];
  _DWORD v36[7];
  int v37;
  int valuePtr;

  v4 = -536870206;
  valuePtr = 0;
  v37 = 0;
  if (!a1)
    goto LABEL_26;
  v8 = CFGetTypeID(a1);
  if (v8 != CFDictionaryGetTypeID())
    goto LABEL_26;
  v34 = a4;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10980]);
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10988]);
  v11 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10990]);
  v12 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10968]);
  v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10998]);
  v14 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10978]);
  v15 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10960]);
  v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10970]);
  v17 = !Value || v10 == 0;
  v18 = v17 || v11 == 0;
  v19 = v18 || v12 == 0;
  v20 = v19 || v13 == 0;
  v21 = v20 || v14 == 0;
  v22 = v21 || v15 == 0;
  if (v22 || v16 == 0)
    goto LABEL_26;
  v26 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  v33 = v16;
  if (*(_QWORD *)(a2 + 1352))
    v26 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  *(_OWORD *)v35 = 0u;
  memset(v36, 0, sizeof(v36));
  *(_WORD *)&v35[4] = -31723;
  *(_DWORD *)&v35[8] = v26 & 0x8000FFFF;
  v27 = (const void *)*MEMORY[0x24BDBD270];
  v35[12] = CFEqual(v12, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  v35[13] = CFEqual(Value, v27) != 0;
  CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
  v36[0] = valuePtr;
  if (CFEqual(v11, (CFTypeRef)*MEMORY[0x24BE115B0]))
  {
    v28 = 0;
  }
  else if (CFEqual(v11, (CFTypeRef)*MEMORY[0x24BE115A0]))
  {
    v28 = 1;
  }
  else
  {
    if (!CFEqual(v11, (CFTypeRef)*MEMORY[0x24BE115A8]))
      goto LABEL_26;
    v28 = 2;
  }
  v36[1] = v28;
  CFNumberGetValue(v13, kCFNumberSInt32Type, &valuePtr);
  v36[2] = valuePtr;
  if (CFEqual(v15, (CFTypeRef)*MEMORY[0x24BE10938]))
  {
    v29 = 0;
  }
  else if (CFEqual(v15, (CFTypeRef)*MEMORY[0x24BE10930]))
  {
    v29 = 1;
  }
  else
  {
    if (!CFEqual(v15, (CFTypeRef)*MEMORY[0x24BE10928]))
      goto LABEL_26;
    v29 = 2;
  }
  v36[3] = v29;
  if (!CFEqual(v14, (CFTypeRef)*MEMORY[0x24BE109B8]))
  {
    if (CFEqual(v14, (CFTypeRef)*MEMORY[0x24BE109C0]))
    {
      v30 = 1;
      goto LABEL_46;
    }
LABEL_26:
    v24 = 4294954516;
    goto LABEL_27;
  }
  v30 = 0;
LABEL_46:
  v36[4] = v30;
  CFNumberGetValue(v33, kCFNumberSInt32Type, &valuePtr);
  v36[5] = valuePtr;
  v31 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10698]);
  if (v31)
  {
    CFNumberGetValue(v31, kCFNumberSInt32Type, &v37);
    v32 = v37;
  }
  else
  {
    v32 = 0;
  }
  v36[6] = v32;
  v4 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v34 + 24), v35, 0x2Cu, 0, 0xFFFFFFFF);
  if (v4)
    v24 = 4294954516;
  else
    v24 = 0;
LABEL_27:
  H9ISPLogger(6, "H9ISPCaptureDevice: SetFocusNow. err=%d, res=0x%08X\n", v24, v4);
  return v24;
}

uint64_t CopyVibeMitigationInfo(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  int v22;
  int v23;
  int v24;
  int valuePtr;

  v5 = 3758097090;
  if (a3 && a5 && *(_DWORD *)(a3 + 84) <= 4u)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v11 = Mutable;
      v12 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 410) && *(_DWORD *)(v12 + 80 * *(unsigned int *)(a3 + 84) + 56))
        {
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE11698], (const void *)*MEMORY[0x24BDBD270]);
          valuePtr = 26;
          v13 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
          if (v13)
          {
            v14 = v13;
            CFDictionaryAddValue(v11, (const void *)*MEMORY[0x24BE11688], v13);
            CFRelease(v14);
          }
          v24 = *(_DWORD *)(a3 + 84);
          v15 = CFNumberCreate(v9, kCFNumberSInt32Type, &v24);
          if (v15)
          {
            v16 = v15;
            CFDictionaryAddValue(v11, (const void *)*MEMORY[0x24BE11680], v15);
            CFRelease(v16);
          }
          v23 = *(_DWORD *)(v12 + 80 * *(unsigned int *)(a3 + 84) + 56);
          v17 = CFNumberCreate(v9, kCFNumberSInt32Type, &v23);
          if (v17)
          {
            v18 = v17;
            CFDictionaryAddValue(v11, (const void *)*MEMORY[0x24BE116A0], v17);
            CFRelease(v18);
          }
          v22 = *(_DWORD *)(v12 + 80 * *(unsigned int *)(a3 + 84) + 52);
          v19 = CFNumberCreate(v9, kCFNumberSInt32Type, &v22);
          if (v19)
          {
            v20 = v19;
            CFDictionaryAddValue(v11, (const void *)*MEMORY[0x24BE11690], v19);
            CFRelease(v20);
          }
        }
        else
        {
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE11698], (const void *)*MEMORY[0x24BDBD268]);
        }
      }
      v5 = 0;
      *a2 = v11;
    }
    else
    {
      return 3758097085;
    }
  }
  return v5;
}

uint64_t CopyQHDRSensorDefectivePixelInfo(const __CFAllocator *a1, CFMutableDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t CameraConfig;
  unsigned int v10;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFArray *Mutable;
  CFMutableDictionaryRef v17;
  const __CFAllocator *v18;
  unint64_t v19;
  unsigned __int16 *v20;
  CFMutableDictionaryRef v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  const __CFAllocator *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  int v38;
  int v39;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *key;
  int v47;
  int v48;
  int v49;
  int v50;
  int valuePtr;
  unsigned __int16 __dst;
  unsigned __int16 v53;
  unsigned int v54;
  _BYTE v55[200];
  uint64_t v56;
  CGRect v57;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = 3758097085;
  CameraConfig = 3758097090;
  if (!a3 || !a5)
    return CameraConfig;
  v10 = *(_DWORD *)(a3 + 84);
  if (v10 > 4)
    return 3758097090;
  v54 = 0;
  CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a5 + 24), v10, 3u, &__dst, v55);
  if ((_DWORD)CameraConfig
    || (CameraConfig = H9ISP::H9ISPDevice::GetDPCCount(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 3, &v54),
        (_DWORD)CameraConfig))
  {
LABEL_7:
    *a2 = 0;
    return CameraConfig;
  }
  if (!v54)
  {
    v14 = 0;
LABEL_13:
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v17 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (v17)
      {
        if (v54)
        {
          v19 = 0;
          key = (void *)*MEMORY[0x24BE10F50];
          v45 = (void *)*MEMORY[0x24BE10F30];
          v44 = (void *)*MEMORY[0x24BE10F48];
          v43 = (void *)*MEMORY[0x24BE10F38];
          v42 = (void *)*MEMORY[0x24BE10F40];
          v20 = (unsigned __int16 *)(v14 + 24);
          while (1)
          {
            v21 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
            if (!v21)
              break;
            v22 = v21;
            valuePtr = *(v20 - 2);
            v23 = CFNumberCreate(v18, kCFNumberSInt32Type, &valuePtr);
            if (v23)
            {
              v24 = v23;
              CFDictionaryAddValue(v22, key, v23);
              CFRelease(v24);
            }
            v50 = *(v20 - 4);
            v25 = CFNumberCreate(v18, kCFNumberSInt32Type, &v50);
            if (v25)
            {
              v26 = v25;
              CFDictionaryAddValue(v22, v45, v25);
              CFRelease(v26);
            }
            v49 = *(v20 - 3);
            v27 = CFNumberCreate(v18, kCFNumberSInt32Type, &v49);
            if (v27)
            {
              v28 = v27;
              CFDictionaryAddValue(v22, v44, v27);
              CFRelease(v28);
            }
            v48 = *(v20 - 1);
            v29 = CFNumberCreate(v18, kCFNumberSInt32Type, &v48);
            if (v29)
            {
              v30 = v29;
              CFDictionaryAddValue(v22, v43, v29);
              CFRelease(v30);
            }
            v47 = *v20;
            v31 = CFNumberCreate(v18, kCFNumberSInt32Type, &v47);
            if (v31)
            {
              v32 = v31;
              CFDictionaryAddValue(v22, v42, v31);
              CFRelease(v32);
            }
            CFArrayAppendValue(Mutable, v22);
            CFRelease(v22);
            ++v19;
            v20 += 5;
            if (v19 >= v54)
            {
              v5 = 0;
              goto LABEL_33;
            }
          }
        }
        else
        {
          v5 = 0;
        }
      }
    }
    else
    {
      v17 = 0;
    }
    CameraConfig = v5;
    if (!v14)
      goto LABEL_34;
    goto LABEL_33;
  }
  v13 = 10 * v54 + 16;
  v14 = operator new[]();
  bzero((void *)v14, v13);
  *(_WORD *)(v14 + 4) = 1304;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(a3 + 84);
  *(_DWORD *)(v14 + 12) = 3;
  v15 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a5 + 24), (unsigned __int8 *)v14, v13, 0, 0xFFFFFFFF);
  if (!(_DWORD)v15)
    goto LABEL_13;
  Mutable = 0;
  v17 = 0;
  v5 = v15;
LABEL_33:
  MEMORY[0x23B7D8AF0](v14, 0x1000C8077774924);
  CameraConfig = v5;
LABEL_34:
  if ((_DWORD)CameraConfig)
  {
    if (Mutable)
      CFRelease(Mutable);
    if (v17)
      CFRelease(v17);
    goto LABEL_7;
  }
  CFDictionaryAddValue(v17, (const void *)*MEMORY[0x24BE11588], Mutable);
  CFRelease(Mutable);
  valuePtr = 2752;
  v33 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  if (v34)
  {
    v35 = v34;
    CFDictionaryAddValue(v17, (const void *)*MEMORY[0x24BE11598], v34);
    CFRelease(v35);
  }
  v50 = 1936;
  v36 = CFNumberCreate(v33, kCFNumberSInt32Type, &v50);
  if (v36)
  {
    v37 = v36;
    CFDictionaryAddValue(v17, (const void *)*MEMORY[0x24BE11590], v36);
    CFRelease(v37);
  }
  v38 = 2752 - __dst;
  if (__dst > 0xAC0u)
    v38 = 2753 - __dst;
  v39 = 1936 - v53;
  if (v53 > 0x790u)
    v39 = 1937 - v53;
  v57.origin.y = (double)(v39 >> 1);
  v57.size.width = (double)__dst;
  v57.size.height = (double)v53;
  v57.origin.x = (double)(v38 >> 1);
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v57);
  if (DictionaryRepresentation)
  {
    v41 = DictionaryRepresentation;
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x24BE11580], DictionaryRepresentation);
    CFRelease(v41);
  }
  CameraConfig = 0;
  *a2 = v17;
  return CameraConfig;
}

uint64_t SetSynchronizedStreamsSlaveConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *Value;
  const void *v9;
  const void *v10;
  const void *v11;
  const __CFNumber *v12;
  int v13;
  int valuePtr;

  if (!a1 || (v7 = CFGetTypeID(a1), v7 != CFDictionaryGetTypeID()))
  {
    H9ISPLogger(3, "Invalid parameter (propertyValue) - specify a dictionary for slave configuration\n");
    return 4294954516;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11678]);
  v9 = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11668]);
  if (!Value)
  {
    H9ISPLogger(3, "Invalid parameter (kFigCaptureStreamSynchronizedStreamsSlaveConfigurationKey_StreamingOutputsEnabled)\n");
    return 4294954516;
  }
  v10 = v9;
  v11 = (const void *)*MEMORY[0x24BDBD270];
  *(_BYTE *)(a2 + 1361) = CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  if (!v10)
  {
    H9ISPLogger(3, "Invalid parameter (kFigCaptureStreamSynchronizedStreamsSlaveConfigurationKey_FrameSkippingEnabled)\n");
    return 4294954516;
  }
  *(_BYTE *)(a2 + 1362) = CFEqual(v10, v11) != 0;
  v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11670]);
  if (v12)
  {
    valuePtr = 0;
    CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
    v13 = valuePtr;
  }
  else
  {
    v13 = 0;
  }
  *(_DWORD *)(a2 + 1364) = v13;
  if (!*(_QWORD *)(a2 + 88) || !*(_QWORD *)(a2 + 1352))
    return 0;
  ConfigureNoDataTimer(a2);
  if (ApplySlaveConfiguration(a4, a2))
    return 4294954514;
  else
    return 0;
}

uint64_t CopySynchronizedStreamsSlaveConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  unsigned int v12;
  CFNumberRef v13;
  uint64_t result;
  unsigned int valuePtr;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 3758097085;
  v7 = Mutable;
  v8 = (const void *)*MEMORY[0x24BDBD268];
  v9 = (const void *)*MEMORY[0x24BDBD270];
  if (*(_BYTE *)(a3 + 1361))
    v10 = (const void *)*MEMORY[0x24BDBD270];
  else
    v10 = (const void *)*MEMORY[0x24BDBD268];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11678], v10);
  if (*(_BYTE *)(a3 + 1362))
    v11 = v9;
  else
    v11 = v8;
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x24BE11668], v11);
  v12 = *(_DWORD *)(a3 + 1364);
  if (!v12)
    v12 = *(_DWORD *)(a3 + 44) / 0xAu;
  valuePtr = v12;
  v13 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x24BE11670], v13);
  CFRelease(v13);
  result = 0;
  *a2 = v7;
  return result;
}

uint64_t SetTorchColor(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  __int16 v9;
  int v10;
  unsigned int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("WarmLEDPercentile"));
  if (!Value)
    return 4294954516;
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v9 = valuePtr;
  if (valuePtr >= 0x65)
  {
    v9 = 100;
    valuePtr = 100;
  }
  v10 = H9ISP::H9ISPDevice::SetTorchColorMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 2, v9);
  H9ISPLogger(6, "H9ISPCaptureDevice: SetTorchColor, warmLEDPercentile=%d, result=0x%08X\n", valuePtr, v10);
  if (v10)
    return 4294954516;
  else
    return 0;
}

uint64_t SetOISPosition(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  uint64_t result;
  int v11;
  float v12;
  float valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("XPosition"));
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("YPosition"));
  result = 4294954516;
  if (Value && v9)
  {
    valuePtr = 0.0;
    CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
    v12 = 0.0;
    CFNumberGetValue(v9, kCFNumberFloat32Type, &v12);
    v11 = H9ISP::H9ISPDevice::SetOISPosition(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), vcvtd_n_s64_f64(valuePtr, 8uLL), vcvtd_n_s64_f64(v12, 8uLL));
    H9ISPLogger(6, "H9ISPCaptureDevice: SetOISPosition, XPosition=%5.5f um, YPosition=%5.5f um, result=0x%08X\n", valuePtr, v12, v11);
    if (v11)
      return 4294954516;
    else
      return 0;
  }
  return result;
}

uint64_t CopyOISPosition(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *v6;
  uint64_t result;
  float v8;
  CFNumberRef v9;
  float v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  int v14;
  int v15;
  float v16;
  float valuePtr;
  __int16 v18[2];
  int v19[2];

  *(_QWORD *)v19 = 0;
  *(_DWORD *)v18 = 0;
  if (H9ISP::H9ISPDevice::GetOISPosition(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v19[1], v19, &v18[1], v18))
  {
    v6 = 0;
    result = 4294954513;
  }
  else
  {
    result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v6 = (__CFDictionary *)result;
    if (result)
    {
      v8 = (double)v19[1] * 0.00390625;
      valuePtr = v8;
      v9 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
      CFDictionarySetValue(v6, CFSTR("XPosition"), v9);
      CFRelease(v9);
      v10 = (double)v19[0] * 0.00390625;
      v16 = v10;
      v11 = CFNumberCreate(0, kCFNumberFloat32Type, &v16);
      CFDictionarySetValue(v6, CFSTR("YPosition"), v11);
      CFRelease(v11);
      v15 = v18[1];
      v12 = CFNumberCreate(0, kCFNumberIntType, &v15);
      CFDictionarySetValue(v6, CFSTR("HallSensor1"), v12);
      CFRelease(v12);
      v14 = v18[0];
      v13 = CFNumberCreate(0, kCFNumberIntType, &v14);
      CFDictionarySetValue(v6, CFSTR("HallSensor2"), v13);
      CFRelease(v13);
      result = 0;
    }
  }
  *a2 = v6;
  return result;
}

uint64_t SetOISActuator(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  uint64_t result;
  int v11;
  __int16 v12[2];
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("XPosition"));
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("YPosition"));
  result = 4294954516;
  if (Value && v9)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    *(_DWORD *)v12 = 0;
    CFNumberGetValue(v9, kCFNumberIntType, v12);
    v11 = H9ISP::H9ISPDevice::SetOISActuator(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr, v12[0]);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetOISActuator, b1=%8.8d, b2=%8.8d, result=0x%08X\n", valuePtr, *(_DWORD *)v12, v11);
    if (v11)
      return 4294954516;
    else
      return 0;
  }
  return result;
}

uint64_t CopyOISTemperature(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  __int16 v10;

  v10 = 0;
  if (H9ISP::H9ISPDevice::GetOISTemperature(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v10))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    valuePtr = v10;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetSensorSidebandEnabled(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const char *v8;
  uint64_t v9;
  int v10;

  if (a1 && (v7 = CFGetTypeID(a1), v7 == CFBooleanGetTypeID()))
  {
    v8 = "False";
    v9 = 4294954516;
    if (!*(_QWORD *)(a2 + 88))
    {
      v10 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
      if (v10)
        v8 = "True";
      if (H9ISP::H9ISPDevice::EnableSensorSideband(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v10 != 0))v9 = 4294954516;
      else
        v9 = 0;
    }
  }
  else
  {
    v8 = "False";
    v9 = 4294954516;
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: EnableSensorSideband: %s (err=%d)\n", v8, v9);
  return v9;
}

uint64_t SetReloadNVM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v7;

  if (*(_QWORD *)(a2 + 88))
    return 4294954514;
  v4 = 4294954514;
  if (!H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1u, 0))
  {
    v7 = H9ISP::H9ISPDevice::ReloadNVMBytes(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84));
    H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 0);
    if (v7)
      return 4294954514;
    else
      return 0;
  }
  return v4;
}

uint64_t SetChromaNoiseReductionLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  unsigned int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v8 = 4294954516;
  if (valuePtr <= 0xFF)
  {
    v9 = H9ISP::H9ISPDevice::SetCNRLevel(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetCNRLevel: 0x%08X, result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyChromaNoiseReductionLevel(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  unsigned __int8 v10;

  v10 = 0;
  if (H9ISP::H9ISPDevice::GetCNRLevel(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v10))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    valuePtr = v10;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetNoiseReductionLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t v8;
  int v9;
  unsigned int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v8 = 4294954516;
  if (valuePtr <= 0xFF)
  {
    v9 = H9ISP::H9ISPDevice::SetNoiseReductionLevel(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
    H9ISPLogger(6, "H9ISPCaptureDevice: SetNoiseReductionLevel: 0x%08X, result=0x%08X\n", valuePtr, v9);
    if (v9)
      return 4294954516;
    else
      return 0;
  }
  return v8;
}

uint64_t CopyNoiseReductionLevel(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v6;
  uint64_t v7;
  int valuePtr;
  unsigned __int8 v10;

  v10 = 0;
  if (H9ISP::H9ISPDevice::GetNoiseReductionLevel(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v10))
  {
    v6 = 0;
    v7 = 4294954513;
  }
  else
  {
    valuePtr = v10;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v7 = 0;
  }
  *a2 = v6;
  return v7;
}

uint64_t SetMasterSlaveAPSFocus(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v8;
  int v9;
  int v10;

  if (*(_QWORD *)(a2 + 88))
  {
    H9ISPLogger(3, "Unable to set master/slave focus while streaming is active\n");
    return 4294954514;
  }
  if (!cf)
    return 4294954516;
  v8 = CFGetTypeID(cf);
  if (v8 != CFBooleanGetTypeID())
    return 4294954516;
  v9 = CFEqual(cf, (CFTypeRef)*MEMORY[0x24BDBD270]);
  v10 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v10 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  result = H9ISP::H9ISPDevice::SetMasterSlaveAPSFocus(*(H9ISP::H9ISPDevice **)(a4 + 24), v10, v9 != 0);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "SetMasterSlaveAPSFocus error: 0x%08X\n");
    return 4294954514;
  }
  return result;
}

uint64_t SetMasterSlaveContrastFocus(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v8;
  int v9;
  int v10;

  if (*(_QWORD *)(a2 + 88))
  {
    H9ISPLogger(3, "Unable to set master/slave focus while streaming is active\n");
    return 4294954514;
  }
  if (!cf)
    return 4294954516;
  v8 = CFGetTypeID(cf);
  if (v8 != CFBooleanGetTypeID())
    return 4294954516;
  v9 = CFEqual(cf, (CFTypeRef)*MEMORY[0x24BDBD270]);
  v10 = *(_DWORD *)(a2 + 84) & 0x7FFFFFFF;
  if (*(_QWORD *)(a2 + 1352))
    v10 |= (*(_BYTE *)(a2 + 1368) == 0) << 31;
  result = H9ISP::H9ISPDevice::SetMasterSlaveContrastFocus(*(H9ISP::H9ISPDevice **)(a4 + 24), v10, v9 != 0);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "SetMasterSlaveContrastFocus error: 0x%08X\n");
    return 4294954514;
  }
  return result;
}

uint64_t SetForceSingleChannelCommands(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  int v5;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID())
    return 4294954516;
  v5 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
  result = 0;
  *(_BYTE *)(a2 + 1368) = v5 != 0;
  return result;
}

uint64_t SetTorchManualParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int valuePtr;

  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID())
    return 4294954516;
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("WarmLED0Level"));
  v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("WarmLED1Level"));
  v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("CoolLED0Level"));
  v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("CoolLED1Level"));
  v12 = v11;
  if (!v9)
  {
    v13 = 0;
    if (!v11)
      goto LABEL_5;
    goto LABEL_4;
  }
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  v13 = valuePtr;
  if (v12)
  {
LABEL_4:
    CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
    v13 = v13 & 0xFFFF00FF | (valuePtr << 8);
  }
LABEL_5:
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v13 = v13 & 0xFF00FFFF | (valuePtr << 16);
  }
  if (v10)
  {
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    v13 |= valuePtr << 24;
  }
  if (v13)
  {
    if (!*(_QWORD *)(a2 + 88))
      H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 1u, 1u);
    v14 = H9ISP::H9ISPDevice::SetIndividualTorchLEDLevels(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v13);
  }
  else
  {
    v14 = H9ISP::H9ISPDevice::SetIndividualTorchLEDLevels(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0);
    if (!*(_QWORD *)(a2 + 88))
      H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, 0);
  }
  if (v14)
    v15 = 4294954516;
  else
    v15 = 0;
  H9ISPLogger(6, "H9ISPCaptureDevice: Setting individual LED levels to %x. result=0x%08X\n", v13, v14);
  return v15;
}

uint64_t SetLPDPFilterEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  _BOOL4 v8;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFBooleanGetTypeID())
    return 4294954516;
  v8 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  result = H9ISP::H9ISPDevice::EnableCameraControl(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), 0, v8);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "EnableCameraControl error: 0x%08X\n", result);
    return 4294954514;
  }
  return result;
}

uint64_t SetHighSpeedOutputLevel(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t result;
  unsigned __int16 valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberShortType, &valuePtr);
  result = H9ISP::H9ISPDevice::SetHighSpeedOutputLevel(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "SetHighSpeedOutputLevel error: 0x%08X\n", result);
    return 4294954514;
  }
  return result;
}

uint64_t CopySupportedLinkFrequencies(uint64_t a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  unsigned int i;
  CFNumberRef v11;
  int Count;
  uint64_t result;
  unsigned int v14;
  uint64_t valuePtr;
  unsigned int v16;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294954510;
  v9 = Mutable;
  v16 = 0;
  if (H9ISP::H9ISPDevice::GetNumberOfMipiFrequencies(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v16))return 4294954514;
  if (v16)
  {
    for (i = 0; i < v16; ++i)
    {
      valuePtr = 0;
      v14 = 0;
      if (H9ISP::H9ISPDevice::GetMIPIFrequency(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), i, &v14))break;
      valuePtr = v14;
      v11 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
      CFArrayAppendValue(v9, v11);
      CFRelease(v11);
    }
  }
  Count = CFArrayGetCount(v9);
  if (v16 != Count)
    return 4294954514;
  result = 0;
  *a2 = v9;
  return result;
}

uint64_t SetLinkFrequencyIndex(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t result;
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  result = H9ISP::H9ISPDevice::SetMIPIFrequencyIndex(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "SetMIPIFrequencyIndex error: 0x%08X\n", result);
    return 4294954514;
  }
  return result;
}

uint64_t CopyLinkFrequencyIndex(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  CFNumberRef v7;
  unsigned int valuePtr;

  valuePtr = 0;
  if (H9ISP::H9ISPDevice::GetCurrentMIPIFrequencyIndex(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &valuePtr))return 4294954514;
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &valuePtr);
  result = 0;
  *a2 = v7;
  return result;
}

uint64_t SetTestPattern(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  int v8;
  __int16 v9;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFStringGetTypeID())
    return 4294954516;
  v8 = CFEqual(a1, CFSTR("TestPatternPN9"));
  if (v8)
  {
    v9 = 5;
    goto LABEL_8;
  }
  if (!CFEqual(a1, CFSTR("TestPatternNone")))
    return 4294954516;
  v9 = 0;
LABEL_8:
  result = H9ISP::H9ISPDevice::TestPatternConfig(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v8 != 0, v9);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "SetTestPattern error: 0x%08X\n", result);
    return 4294954514;
  }
  return result;
}

uint64_t CopySensorNVM(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFDataRef v6;
  uint64_t v7;
  UInt8 *v11;
  CFIndex length;

  LODWORD(length) = 6144;
  if (*(_QWORD *)(a3 + 88))
  {
    v6 = 0;
    v7 = 4294954514;
  }
  else
  {
    v11 = (UInt8 *)operator new[]();
    if (H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 1u, 0)|| (usleep(0x4E20u), H9ISP::H9ISPDevice::GetSensorNVMBytes(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), v11, 0, (unsigned int *)&length)))
    {
      v6 = 0;
      v7 = 4294954514;
    }
    else
    {
      v6 = CFDataCreate(a1, v11, length);
      if (v6)
        v7 = 0;
      else
        v7 = 4294954510;
    }
    if (!*(_QWORD *)(a3 + 88))
      H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), 0, 0);
    MEMORY[0x23B7D8AF0](v11, 0x1000C8077774924);
  }
  *a2 = v6;
  return v7;
}

uint64_t CopySupportedColorSpaces(uint64_t a1, __CFArray **a2)
{
  __CFArray *Mutable;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t result;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    goto LABEL_6;
  valuePtr = 0;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
    goto LABEL_6;
  v5 = v4;
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v5);
  valuePtr = 1;
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v6)
    goto LABEL_6;
  v7 = v6;
  CFArrayAppendValue(Mutable, v6);
  CFRelease(v7);
  valuePtr = 2;
  v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v8)
  {
    v9 = v8;
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v9);
    result = 0;
  }
  else
  {
LABEL_6:
    result = 4294954510;
  }
  *a2 = Mutable;
  return result;
}

uint64_t SetColorSpace(const __CFNumber *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned int valuePtr;

  valuePtr = 0;
  if (*(_QWORD *)(a2 + 88))
  {
    H9ISPLogger(3, "Unable to set color space while streaming is active\n");
    return 4294954514;
  }
  else if (cf && (v8 = CFGetTypeID(cf), v8 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(cf, kCFNumberIntType, &valuePtr);
    v9 = valuePtr;
    if (valuePtr >= 3)
    {
      H9ISPLogger(3, "Invalid color-space specified. Defaulting to rec709\n");
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v10 = valuePtr;
    }
    *(_DWORD *)(a2 + 1372) = v9;
    result = H9ISP::H9ISPDevice::SetAWBRGBColorspace(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), v10);
    if ((_DWORD)result)
    {
      H9ISPLogger(3, "SetColorSpace - SetAWBRGBColorspace Error: res=0x%08X\n", result);
      return 3758097084;
    }
  }
  else
  {
    return 4294954516;
  }
  return result;
}

uint64_t CopyColorSpace(uint64_t a1, CFNumberRef *a2, uint64_t a3)
{
  int v3;
  int valuePtr;

  v3 = *(_DWORD *)(a3 + 1372);
  if (v3 == 2 || v3 == 1)
    valuePtr = *(_DWORD *)(a3 + 1372);
  else
    valuePtr = 0;
  *a2 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  return 0;
}

uint64_t CopyAutoFocusPositionSensor(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)MEMORY[0x24BDBD268];
  if (*(_DWORD *)(a3 + 512))
    v3 = (_QWORD *)MEMORY[0x24BDBD270];
  *a2 = *v3;
  return 0;
}

uint64_t SetDepthEngineConfiguration(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v8;
  const __CFArray *Value;
  const __CFArray *v10;
  CFTypeID v11;
  _BOOL4 v12;
  int v13;
  int HeightOfPreset;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFTypeID v20;
  int Preset;
  const __CFArray *v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned int valuePtr;
  CFRange v27;
  CFRange v28;

  if (*(_QWORD *)(a2 + 88))
    return 4294954516;
  if (!cf)
    goto LABEL_19;
  v8 = CFGetTypeID(cf);
  if (v8 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE108B8]);
  if (!Value)
  {
LABEL_19:
    v13 = 0;
    *(_DWORD *)(a2 + 1376) = 0;
    goto LABEL_20;
  }
  v10 = Value;
  v11 = CFGetTypeID(Value);
  if (v11 == CFArrayGetTypeID())
  {
    v27.length = CFArrayGetCount(v10);
    v27.location = 0;
    v12 = CFArrayContainsValue(v10, v27, (const void *)*MEMORY[0x24BE10888]) != 0;
    v28.length = CFArrayGetCount(v10);
    v28.location = 0;
    if (CFArrayContainsValue(v10, v28, (const void *)*MEMORY[0x24BE108B0]))
      v13 = v12 | 0x10;
    else
      v13 = v12;
    valuePtr = H9ISP::DepthRearConfigurations::getWidthOfPreset((H9ISP::DepthRearConfigurations *)*(unsigned int *)(a2 + 1380));
    HeightOfPreset = H9ISP::DepthRearConfigurations::getHeightOfPreset((H9ISP::DepthRearConfigurations *)*(unsigned int *)(a2 + 1380));
    v25 = HeightOfPreset;
    v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE108C8]);
    if (v15)
    {
      v16 = v15;
      v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID())
        CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr);
    }
    v18 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)*MEMORY[0x24BE108C0]);
    if (v18)
    {
      v19 = v18;
      v20 = CFGetTypeID(v18);
      if (v20 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v19, kCFNumberSInt32Type, &v25);
        HeightOfPreset = v25;
      }
    }
    Preset = H9ISP::DepthRearConfigurations::getPreset((H9ISP::DepthRearConfigurations *)valuePtr, HeightOfPreset);
    if (Preset == 4)
    {
      H9ISPLogger(3, "H9ISPCaptureDevice: Unknown configuration %dx%d\n", valuePtr, v25);
      return 4294954516;
    }
    *(_DWORD *)(a2 + 1380) = Preset;
LABEL_20:
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 56) + 80 * *(unsigned int *)(a2 + 84) + 16) == 1919251564)
    {
      v22 = *(const __CFArray **)(a2 + 1352);
      if (!v13 || v22)
      {
        if (!v22 || !CFArrayGetCount(v22))
          goto LABEL_35;
        v23 = 0;
        v24 = 0;
        do
        {
          if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 1352), v23))
          {
            FigCaptureStreamGetFigBaseObject();
            if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88))
              ++v24;
          }
          ++v23;
        }
        while (v23 < CFArrayGetCount(*(CFArrayRef *)(a2 + 1352)));
        if (!v24)
        {
LABEL_35:
          dword_254291310 = v13;
          H9ISPLogger(6, "H9ISPCaptureDevice: SetDepthEngineEnabled, enable/disable: %d\n", v13);
          return 0;
        }
        H9ISPLogger(3, "SetDepthEngineEnabled: Cannot enable/disable DepthEngine while streaming is active\n");
      }
      else
      {
        H9ISPLogger(3, "SetDepthEngineEnabled: Cannot enable DepthEngine on this stream because hardware sync is not enabled\n");
      }
    }
    else
    {
      H9ISPLogger(3, "SetDepthEngineEnabled: Cannot enable/disable DepthEngine on this stream\n");
    }
    return 4294954514;
  }
  return 4294954516;
}

uint64_t CopySupportedOutputConfigurations(const __CFAllocator *a1, __CFArray **a2)
{
  const CFArrayCallBacks *v3;
  __CFArray *Mutable;
  CFNumberRef v5;
  H9ISP::DepthRearConfigurations *v6;
  H9ISP::DepthRearConfigurations *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  int WidthOfPreset;
  H9ISP::DepthRearConfigurations *v13;
  H9ISP::DepthRearConfigurations *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  void *value;
  __CFArray *theArray;
  int valuePtr;
  int HeightOfPreset;
  int v25;

  v3 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  theArray = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
  Mutable = CFArrayCreateMutable(a1, 0, v3);
  valuePtr = 825437747;
  v5 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v5);
  if (H9ISP::DepthRearConfigurations::Count(v6))
  {
    v7 = 0;
    value = (void *)*MEMORY[0x24BDBD268];
    v8 = (const void *)*MEMORY[0x24BE10908];
    v9 = (const void *)*MEMORY[0x24BE108F0];
    v10 = (const void *)*MEMORY[0x24BE10900];
    v11 = (const void *)*MEMORY[0x24BE108F8];
    do
    {
      WidthOfPreset = H9ISP::DepthRearConfigurations::getWidthOfPreset(v7);
      HeightOfPreset = H9ISP::DepthRearConfigurations::getHeightOfPreset(v7);
      v25 = WidthOfPreset;
      v13 = CFNumberCreate(a1, kCFNumberSInt32Type, &v25);
      if (v13)
      {
        v14 = v13;
        v15 = CFNumberCreate(a1, kCFNumberSInt32Type, &HeightOfPreset);
        if (v15)
        {
          v16 = v15;
          v17 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          CFDictionarySetValue(v17, v8, v14);
          CFDictionarySetValue(v17, v9, v16);
          CFDictionarySetValue(v17, v10, value);
          CFDictionarySetValue(v17, v11, Mutable);
          CFRelease(v14);
          CFRelease(v16);
          CFArrayAppendValue(theArray, v17);
          v18 = v17;
        }
        else
        {
          v18 = v14;
        }
        CFRelease(v18);
      }
      v7 = (H9ISP::DepthRearConfigurations *)((_DWORD)v7 + 1);
    }
    while (v7 < H9ISP::DepthRearConfigurations::Count(v13));
  }
  CFRelease(Mutable);
  *a2 = theArray;
  return 0;
}

uint64_t CopyOutputConfigurations(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  H9ISP::DepthRearConfigurations *v7;
  int HeightOfPreset;
  int WidthOfPreset;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v7 = (H9ISP::DepthRearConfigurations *)*(unsigned int *)(a3 + 1380);
  if (v7 <= 3)
  {
    HeightOfPreset = H9ISP::DepthRearConfigurations::getHeightOfPreset(v7);
    WidthOfPreset = H9ISP::DepthRearConfigurations::getWidthOfPreset((H9ISP::DepthRearConfigurations *)*(unsigned int *)(a3 + 1380));
    addConfiguration(a1, Mutable, (const __CFString *)*MEMORY[0x24BE108B0], HeightOfPreset, WidthOfPreset);
    addConfiguration(a1, Mutable, (const __CFString *)*MEMORY[0x24BE10888], 320, 240);
  }
  *a2 = Mutable;
  return 0;
}

uint64_t CopyGDCCoefficients(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  const __CFAllocator *v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CFNumberRef v21;
  CFDataRef v22;
  CFDataRef v23;
  CFDataRef v24;
  CFDataRef v25;
  _BYTE v27[32];
  _BYTE v28[32];
  _BYTE bytes[32];
  _BYTE v30[32];

  v8 = operator new();
  if (!H9ISP::H9ISPDevice::GetDistortionData(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), (void *)v8))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v12 = *(_DWORD *)(v8 + 12);
      if (v12 == 50177)
      {
        v17 = *(_OWORD *)(v8 + 128);
        *(_OWORD *)bytes = *(_OWORD *)(v8 + 112);
        *(_OWORD *)&bytes[16] = v17;
        v18 = *(_OWORD *)(v8 + 64);
        *(_OWORD *)v30 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)&v30[16] = v18;
        v19 = *(_OWORD *)(v8 + 160);
        *(_OWORD *)v27 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)&v27[16] = v19;
        v20 = *(_OWORD *)(v8 + 96);
        *(_OWORD *)v28 = *(_OWORD *)(v8 + 80);
        *(_OWORD *)&v28[16] = v20;
        v21 = CFNumberCreate(v11, kCFNumberFloatType, (const void *)(v8 + 28));
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE109D8], v21);
        CFRelease(v21);
      }
      else
      {
        if (v12 != 49921)
          goto LABEL_3;
        *(_DWORD *)bytes = 0;
        *(float32x4_t *)&bytes[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 440)), *(float64x2_t *)(v8 + 456));
        *(float32x2_t *)&bytes[20] = vcvt_f32_f64(*(float64x2_t *)(v8 + 472));
        v13 = *(double *)(v8 + 488);
        *(float *)&bytes[28] = v13;
        *(_DWORD *)v30 = 0;
        *(float32x4_t *)&v30[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 312)), *(float64x2_t *)(v8 + 328));
        *(float32x2_t *)&v30[20] = vcvt_f32_f64(*(float64x2_t *)(v8 + 344));
        v14 = *(double *)(v8 + 360);
        *(float *)&v30[28] = v14;
        *(_DWORD *)v27 = 0;
        *(float32x4_t *)&v27[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 504)), *(float64x2_t *)(v8 + 520));
        *(float32x2_t *)&v27[20] = vcvt_f32_f64(*(float64x2_t *)(v8 + 536));
        v15 = *(double *)(v8 + 552);
        *(float *)&v27[28] = v15;
        *(_DWORD *)v28 = 0;
        *(float32x4_t *)&v28[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 376)), *(float64x2_t *)(v8 + 392));
        *(float32x2_t *)&v28[20] = vcvt_f32_f64(*(float64x2_t *)(v8 + 408));
        v16 = *(double *)(v8 + 424);
        *(float *)&v28[28] = v16;
      }
      v22 = CFDataCreate(v11, bytes, 64);
      if (v22)
      {
        v23 = v22;
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE109C8], v22);
        CFRelease(v23);
        v24 = CFDataCreate(v11, v27, 64);
        if (v24)
        {
          v25 = v24;
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE109D0], v24);
          CFRelease(v25);
          v10 = 0;
          goto LABEL_13;
        }
      }
    }
    v10 = 4294954510;
    goto LABEL_13;
  }
  Mutable = 0;
LABEL_3:
  v10 = 4294954514;
LABEL_13:
  MEMORY[0x23B7D8B08](v8, 0x1000C402C69F03DLL);
  *a2 = Mutable;
  return v10;
}

uint64_t CopyOpticalCenter(uint64_t a1, CFDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float *v8;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v10;
  CGPoint v12;

  v8 = (float *)operator new();
  if (H9ISP::H9ISPDevice::GetDistortionData(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), v8))
  {
    DictionaryRepresentation = 0;
    v10 = 4294954514;
  }
  else
  {
    v12.x = v8[444];
    v12.y = v8[445];
    DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v12);
    if (DictionaryRepresentation)
      v10 = 0;
    else
      v10 = 4294954510;
  }
  MEMORY[0x23B7D8B08](v8, 0x1000C402C69F03DLL);
  *a2 = DictionaryRepresentation;
  return v10;
}

uint64_t SetAPSMode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t result;
  int v9;
  int valuePtr;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  if (gCaptureDeviceCFPrefs[28 * *(unsigned int *)(a2 + 84) + 75] != -1)
    return 0;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v9 = valuePtr;
  result = H9ISP::H9ISPDevice::SetAPSMode(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), valuePtr);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "H9ISPCaptureDevice: SetAPSMode failed: %d, result=0x%08X\n", v9, result);
    return 4294954514;
  }
  return result;
}

uint64_t CopyAPSMode(const __CFAllocator *a1, CFNumberRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v7;
  uint64_t v8;
  int v9;
  int valuePtr;
  int v12;

  v12 = 0;
  if (H9ISP::H9ISPDevice::GetAPSMode(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), &v12))
  {
    H9ISPLogger(3, "H9ISPCaptureDevice: GetAPSMode failed: result=0x%08X\n");
LABEL_3:
    v7 = 0;
    v8 = 4294954514;
  }
  else
  {
    switch(v12)
    {
      case 0:
        valuePtr = 0;
        goto LABEL_12;
      case 1:
        v9 = 1;
        goto LABEL_11;
      case 2:
        v9 = 2;
        goto LABEL_11;
      case 3:
        v9 = 3;
        goto LABEL_11;
      case 4:
        v9 = 4;
LABEL_11:
        valuePtr = v9;
LABEL_12:
        v7 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
        v8 = 0;
        break;
      default:
        H9ISPLogger(3, "H9ISPCaptureDevice: Invalid APS mode\n");
        goto LABEL_3;
    }
  }
  *a2 = v7;
  return v8;
}

uint64_t SetHighCurrentTorchEnabled(CFTypeRef cf, uint64_t a2)
{
  uint64_t result;
  CFTypeID v5;
  int v6;

  if (*(_QWORD *)(a2 + 88))
  {
    H9ISPLogger(3, "Unable to enable HighCurrentTorchEnabled while streaming is active\n");
    return 4294954514;
  }
  else if (cf && (v5 = CFGetTypeID(cf), v5 == CFBooleanGetTypeID()))
  {
    v6 = CFEqual(cf, (CFTypeRef)*MEMORY[0x24BDBD270]);
    result = 0;
    *(_BYTE *)(a2 + 1400) = v6 != 0;
  }
  else
  {
    return 4294954516;
  }
  return result;
}

uint64_t SetAPSCalibrationData(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  CFTypeID v8;
  const UInt8 *BytePtr;
  __int128 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 88))
  {
    H9ISPLogger(3, "Unable to set APS calibration data while streaming is active\n");
    return 4294954514;
  }
  if (!cf)
    return 4294954516;
  v8 = CFGetTypeID(cf);
  if (v8 != CFDataGetTypeID())
    return 4294954516;
  if (CFDataGetLength((CFDataRef)cf) != 120)
  {
    H9ISPLogger(3, "CFDataRef size does not match FigCaptureStreamAutoFocusPositionSensorCalibrationData\n");
    return 4294954516;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  if (*(_WORD *)BytePtr)
  {
    H9ISPLogger(3, "Unexpected APS calibration version (%d) (expected 0)\n");
    return 4294954516;
  }
  v11 = 0;
  v12 = *(_QWORD *)(BytePtr + 4);
  v13 = *(_QWORD *)(BytePtr + 12);
  v14 = *((_DWORD *)BytePtr + 5);
  v15 = *(_OWORD *)(BytePtr + 24);
  v18 = *(_QWORD *)(BytePtr + 60);
  v10 = *(_OWORD *)(BytePtr + 40);
  v17 = *((_WORD *)BytePtr + 28);
  v16 = v10;
  result = H9ISP::H9ISPDevice::SetAPSFieldCalibration(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(a2 + 84), (__int128 *)&v11);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "SetAPSFieldCalibration error: 0x%08X\n");
    return 4294954514;
  }
  return result;
}

uint64_t CopyAPSCalibrationData(const __CFAllocator *a1, CFDataRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  CFDataRef v17;
  uint64_t v18;
  UInt8 bytes[80];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[68];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
  if (GetNumberOfActiveChannels(*(const __CFArray **)(a5 + 120)))
  {
    H9ISPLogger(3, "Unable to run APS calibration data while streaming is active\n");
LABEL_21:
    v17 = 0;
    v18 = 4294954514;
    goto LABEL_22;
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  memset(bytes, 0, sizeof(bytes));
  memset(v24, 0, sizeof(v24));
  v10 = *(_DWORD *)(v9 + 80 * *(unsigned int *)(a3 + 84) + 72);
  if (CFArrayGetCount(*(CFArrayRef *)(a5 + 120)))
  {
    v11 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 120), v11))
      {
        if ((FigCaptureStreamGetFigBaseObject(), v12 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 84), !v10)
          && v12 == *(_DWORD *)(a3 + 84)
          || *(_DWORD *)(v9 + 80 * v12 + 72) == v10)
        {
          H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a5 + 24), v12, 1u, 0);
        }
      }
      ++v11;
    }
    while (v11 < CFArrayGetCount(*(CFArrayRef *)(a5 + 120)));
  }
  H9ISP::H9ISPDevice::RunAPSFieldCalibration(*(H9ISP::H9ISPDevice **)(a5 + 24), *(_DWORD *)(a3 + 84), (uint64_t)v24);
  v14 = v13;
  if (CFArrayGetCount(*(CFArrayRef *)(a5 + 120)))
  {
    v15 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 120), v15))
      {
        if ((FigCaptureStreamGetFigBaseObject(), v16 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 84), !v10)
          && v16 == *(_DWORD *)(a3 + 84)
          || *(_DWORD *)(v9 + 80 * v16 + 72) == v10)
        {
          H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(a5 + 24), v16, 0, 0);
        }
      }
      ++v15;
    }
    while (v15 < CFArrayGetCount(*(CFArrayRef *)(a5 + 120)));
  }
  if (v14)
  {
    H9ISPLogger(3, "RunAPSFieldCalibration error: 0x%08X\n");
    goto LABEL_21;
  }
  *(_WORD *)bytes = 0;
  *(_QWORD *)&bytes[4] = *(_QWORD *)&v24[2];
  *(_QWORD *)&bytes[12] = *(_QWORD *)&v24[12];
  *(_DWORD *)&bytes[20] = *(_DWORD *)&v24[20];
  *(_OWORD *)&bytes[24] = *(_OWORD *)&v24[24];
  *(_QWORD *)&bytes[60] = *(_QWORD *)&v24[60];
  *(_OWORD *)&bytes[40] = *(_OWORD *)&v24[40];
  *(_WORD *)&bytes[56] = *(_WORD *)&v24[56];
  v17 = CFDataCreate(a1, bytes, 120);
  if (v17)
  {
    v18 = 0;
  }
  else
  {
    H9ISPLogger(3, "Failed to create CFDataRef for APS calibration\n", 0);
    v17 = 0;
    v18 = 4294954510;
  }
LABEL_22:
  *a2 = v17;
  return v18;
}

uint64_t CopyFocusPositionToPFLCoefficients(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  int v10;
  uint64_t result;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  unsigned __int8 v15[8];
  uint64_t v16;
  uint64_t v17;

  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    *(_QWORD *)v15 = 0;
    v16 = 0;
    v17 = 0;
    LODWORD(v16) = *(unsigned __int16 *)(a3 + 84);
    *(_WORD *)&v15[4] = 1941;
    v10 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a5 + 24), v15, 0x18u, 0, 0xFFFFFFFF);
    if (v10)
    {
      H9ISPLogger(3, "CopyFocusPositionToPFLCoefficients - sCIspCmdChPflDacFitGet error: 0x%08X\n", v10);
      result = 4294954514;
    }
    else
    {
      v12 = CFNumberCreate(v8, kCFNumberFloatType, (char *)&v16 + 4);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE109A0], v12);
      CFRelease(v12);
      v13 = CFNumberCreate(v8, kCFNumberFloatType, (char *)&v17 + 4);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE109A8], v13);
      CFRelease(v13);
      v14 = CFNumberCreate(v8, kCFNumberFloatType, &v17);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE109B0], v14);
      CFRelease(v14);
      result = 0;
    }
  }
  else
  {
    result = 4294954510;
  }
  *a2 = Mutable;
  return result;
}

uint64_t SetStreamMemoryPoolID(const __CFNumber *a1, uint64_t a2)
{
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  *(_DWORD *)(a2 + 1404) = valuePtr;
  return 0;
}

uint64_t CopyGroupSupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;
  const __CFBoolean *v11;
  const __CFString **v12;
  const __CFString **v13;
  const __CFString **v14;
  uint64_t *v15;
  const __CFString **v16;
  const __CFString *v17;
  const void *v18;
  __CFDictionary **v20;

  v7 = *(__CFDictionary **)(a4 + 24);
  if (!v7)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v7 = Mutable;
      v20 = a2;
      v10 = 0;
      v11 = (const __CFBoolean *)*MEMORY[0x24BDBD268];
      v12 = (const __CFString **)MEMORY[0x24BE105C0];
      v13 = (const __CFString **)MEMORY[0x24BE105C8];
      v14 = (const __CFString **)MEMORY[0x24BE105D0];
      do
      {
        v15 = &groupProperties[v10];
        if (groupProperties[v10 + 2])
        {
          if (v15[3])
            v16 = v13;
          else
            v16 = v14;
        }
        else
        {
          v16 = v12;
        }
        v17 = *v16;
        if (IsPropertySupportedForGroup((uint64_t)v15, a4, a5))
          addPropertyDictionaryToPropertiesDictionary(v7, (const __CFString *)groupProperties[v10], (const __CFString *)groupProperties[v10 + 1], v17, v11);
        v10 += 5;
      }
      while (v10 != 210);
      *(_QWORD *)(a4 + 24) = v7;
      a2 = v20;
    }
    else
    {
      v7 = *(__CFDictionary **)(a4 + 24);
    }
  }
  *a2 = v7;
  v18 = *(const void **)(a4 + 24);
  if (v18)
    CFRetain(v18);
  return 0;
}

uint64_t CopyGroupSupportedStreams(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const void *v4;

  *a2 = *(_QWORD *)(a4 + 16);
  v4 = *(const void **)(a4 + 16);
  if (v4)
    CFRetain(v4);
  return 0;
}

uint64_t CopyGroupBaseZoomFactors(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  uint64_t v9;
  CFIndex v10;
  const void *v11;
  const void *v12;
  unsigned int v13;
  uint64_t DerivedStorage;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  const void *v18;
  uint64_t result;
  unsigned __int16 v21;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
    if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) < 1)
    {
      result = 0;
    }
    else
    {
      v10 = 0;
      v11 = (const void *)*MEMORY[0x24BE105A8];
      v12 = (const void *)*MEMORY[0x24BE10588];
      v13 = 1;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), v10);
        FigCaptureStreamGetFigBaseObject();
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v15 = 1024;
        v21 = 1024;
        v16 = *(_DWORD *)(DerivedStorage + 84);
        v17 = v9 + 80 * v16;
        if (*(_DWORD *)(v17 + 16) == 1919251564)
          v18 = v11;
        else
          v18 = v12;
        if (!*(_BYTE *)(v17 + 76))
        {
          if (H9ISP::H9ISPDevice::GetRelativeZoomFactor(*(H9ISP::H9ISPDevice **)(a5 + 24), v16, &v21))
            break;
          v15 = v21;
        }
        addCFNumber<float>(Mutable, v18, (float)v15 * 0.00097656);
        v10 = v13;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) > v13++);
      result = 0;
    }
  }
  else
  {
    result = 4294954516;
  }
  *a2 = Mutable;
  return result;
}

uint64_t CopyGroupExtrinsics(const __CFAllocator *a1, CFMutableDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  H9ISP::H9ISPDevice *v11;
  unsigned __int16 SensorChannel;
  uint64_t v13;
  uint64_t i;
  CFMutableDictionaryRef v15;
  __CFDictionary *v16;
  CFDataRef v17;
  CFDataRef v18;
  _OWORD v20[3];
  _OWORD v21[247];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v10 = Mutable;
    if (*(_DWORD *)(a4 + 8) != 1
      || !H9ISP::H9ISPDevice::hasSensorType(*(_QWORD *)(a5 + 24), 1919246706)
      || !H9ISP::H9ISPDevice::hasSensorType(*(_QWORD *)(a5 + 24), 1919251564))
    {
      goto LABEL_13;
    }
    v11 = *(H9ISP::H9ISPDevice **)(a5 + 24);
    SensorChannel = H9ISP::H9ISPDevice::getSensorChannel((uint64_t)v11, 1919246706);
    if (H9ISP::H9ISPDevice::GetDistortionData(v11, SensorChannel, v21))
    {
      v13 = 4294954514;
LABEL_17:
      CFRelease(v10);
      return v13;
    }
    for (i = 0; i != 3; ++i)
      v20[i] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v21[2 * i + 113] + 8)), *(float64x2_t *)((char *)&v21[2 * i + 114] + 8));
    v15 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v15)
    {
      v16 = v15;
      v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v20, 48);
      if (v17)
      {
        v18 = v17;
        CFDictionaryAddValue(v16, (const void *)*MEMORY[0x24BE10588], v17);
        CFDictionaryAddValue(v10, (const void *)*MEMORY[0x24BE105A8], v16);
        CFRelease(v18);
        CFRelease(v16);
LABEL_13:
        v13 = 0;
        *a2 = v10;
        return v13;
      }
      CFRelease(v16);
    }
    v13 = 4294954510;
    goto LABEL_17;
  }
  return 4294954510;
}

uint64_t CopyGroupSynchronizationMaster(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  CFIndex v8;
  unsigned int v9;
  const void *ValueAtIndex;

  v7 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 56);
  if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) < 1)
  {
LABEL_6:
    *a2 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), v8);
      FigCaptureStreamGetFigBaseObject();
      if (*(_BYTE *)(v7 + 80 * *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 84) + 76))
        break;
      v8 = v9;
      if (CFArrayGetCount(*(CFArrayRef *)(a4 + 16)) <= v9++)
        goto LABEL_6;
    }
    *a2 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
  }
  return 0;
}

uint64_t SetGroupActiveStreams(const __CFArray *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const __CFArray *v8;
  CFIndex v10;
  const void *ValueAtIndex;
  const __CFArray *v12;
  CFRange v13;

  if (!cf)
  {
LABEL_4:
    v8 = *(const __CFArray **)(a3 + 104);
    if (v8 && GetNumberOfActiveChannels(v8))
      return 4294954514;
    if (cf && CFArrayGetCount(cf))
    {
      v10 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(cf, v10);
        v12 = *(const __CFArray **)(a3 + 16);
        v13.length = CFArrayGetCount(v12);
        v13.location = 0;
        if (!CFArrayContainsValue(v12, v13, ValueAtIndex))
          return 4294954516;
      }
      while (++v10 < (unint64_t)CFArrayGetCount(cf));
    }
    if (*(_QWORD *)(a3 + 104))
    {
      if (ResetGroupSynchronization(a4, a3, 0))
        return 4294954514;
      CFRelease(*(CFTypeRef *)(a3 + 104));
    }
    *(_QWORD *)(a3 + 104) = cf;
    if (!cf)
      return 0;
    if (!ResetGroupSynchronization(a4, a3, 1))
    {
      CFRetain(*(CFTypeRef *)(a3 + 104));
      return 0;
    }
    return 4294954514;
  }
  v7 = CFGetTypeID(cf);
  if (v7 == CFArrayGetTypeID())
  {
    if (GetNumberOfActiveChannels(cf))
      return 4294954514;
    goto LABEL_4;
  }
  return 4294954516;
}

uint64_t CopyGroupActiveStreams(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const void *v4;

  *a2 = *(_QWORD *)(a4 + 104);
  v4 = *(const void **)(a4 + 104);
  if (v4)
    CFRetain(v4);
  return 0;
}

uint64_t SetGroupMinSkippingRatio(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  uint64_t result;
  const __CFArray *v9;
  uint64_t DerivedStorage;
  int v11;
  int valuePtr;

  valuePtr = 0;
  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFNumberGetTypeID())
    return 4294954516;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  if (*(_DWORD *)(a3 + 112) == valuePtr)
    return 0;
  v9 = *(const __CFArray **)(a3 + 104);
  if (v9 && GetNumberOfActiveChannels(v9))
  {
    H9ISPLogger(3, "Cannot change minimum skipping ratio after stream has started");
    return 4294954516;
  }
  if (*(_DWORD *)(a3 + 8) == 1
    && (CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 16), 0),
        FigCaptureStreamGetFigBaseObject(),
        DerivedStorage = CMBaseObjectGetDerivedStorage(),
        (v11 = H9ISP::H9ISPDevice::SetMinimumFrameSkippingRatio(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(DerivedStorage + 84), valuePtr)) != 0))
  {
    H9ISPLogger(3, "SetMinSkippingRatio - SetMinimumFrameSkippingRatio error: 0x%08X\n", v11);
    return 4294954514;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a3 + 112) = valuePtr;
  }
  return result;
}

uint64_t CopyGroupMinSkippingRatio(uint64_t a1, CFNumberRef *a2, uint64_t a3, uint64_t a4)
{
  int valuePtr;

  valuePtr = *(_DWORD *)(a4 + 112);
  *a2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  return 0;
}

uint64_t SetGroupMasterConfiguration(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v7;
  const void *Value;
  CFIndex Count;
  CFIndex v10;
  const void *v11;
  unint64_t v12;
  uint64_t v13;
  const void *ValueAtIndex;
  uint64_t DerivedStorage;
  uint64_t v16;
  int v17;
  CFRange v19;

  if (!a1)
    return 4294954516;
  v7 = CFGetTypeID(a1);
  if (v7 != CFDictionaryGetTypeID() || !*(_QWORD *)(a3 + 104))
    return 4294954516;
  Value = CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE11810]);
  Count = CFArrayGetCount(*(CFArrayRef *)(a3 + 104));
  if (!Value)
    goto LABEL_9;
  v10 = Count;
  v11 = (const void *)*MEMORY[0x24BDBD430];
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDBD430]))
  {
    v19.location = 0;
    v19.length = v10;
    if (!CFArrayContainsValue(*(CFArrayRef *)(a3 + 104), v19, Value))
      return 4294954516;
  }
  if (CFEqual(Value, v11))
    Value = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), 0);
LABEL_9:
  if (CFArrayGetCount(*(CFArrayRef *)(a3 + 104)))
  {
    v12 = 0;
    v13 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 104), v12);
      FigCaptureStreamGetFigBaseObject();
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (Value)
      {
        v16 = DerivedStorage;
        v17 = CFEqual(ValueAtIndex, Value);
        *(_BYTE *)(v16 + 1360) = v17 != 0;
        if (v17)
          v13 = v16;
        ConfigureNoDataTimer(v16);
      }
      ++v12;
    }
    while (v12 < CFArrayGetCount(*(CFArrayRef *)(a3 + 104)));
    if (!Value)
      return 0;
  }
  else
  {
    v13 = 0;
    if (!Value)
      return 0;
  }
  if (*(_DWORD *)(a3 + 8) == 1
    && H9ISP::H9ISPDevice::SetMaster(*(H9ISP::H9ISPDevice **)(a4 + 24), *(_DWORD *)(v13 + 84), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 56) + 80 * *(unsigned int *)(v13 + 84) + 16) == 1919251564))
  {
    return 4294954514;
  }
  return 0;
}

uint64_t CopyGroupMasterConfiguration(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4)
{
  __CFDictionary *Mutable;
  const __CFArray *v7;
  unint64_t v8;
  const void *v9;
  const void *ValueAtIndex;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v7 = *(const __CFArray **)(a4 + 104);
    if (v7)
    {
      if (CFArrayGetCount(v7))
      {
        v8 = 0;
        v9 = (const void *)*MEMORY[0x24BE11810];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 104), v8);
          FigCaptureStreamGetFigBaseObject();
          if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 1360))
            CFDictionarySetValue(Mutable, v9, ValueAtIndex);
          ++v8;
        }
        while (v8 < CFArrayGetCount(*(CFArrayRef *)(a4 + 104)));
      }
    }
  }
  *a2 = Mutable;
  return 0;
}

uint64_t CopyGroupMasterConfigurationSupportedKeys(const __CFAllocator *a1, __CFArray **a2, uint64_t a3, uint64_t a4)
{
  __CFArray *Mutable;
  __CFArray *v7;

  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
  v7 = Mutable;
  if (Mutable && *(_DWORD *)(a4 + 8) == 1)
    CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x24BE11810]);
  *a2 = v7;
  return 0;
}

uint64_t CopyDeviceSupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  const __CFString *v8;
  uint64_t v9;
  const __CFBoolean *v10;
  unsigned int v11;
  const __CFString **v12;
  const __CFString **v13;
  const __CFString **v14;
  const __CFString **v15;
  const void *v16;

  Mutable = *(__CFDictionary **)(a5 + 96);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v8 = (const __CFString *)deviceProperties[0];
      if (deviceProperties[0])
      {
        v9 = 0;
        v10 = (const __CFBoolean *)*MEMORY[0x24BDBD268];
        v11 = 1;
        v12 = (const __CFString **)MEMORY[0x24BE105C0];
        v13 = (const __CFString **)MEMORY[0x24BE105C8];
        v14 = (const __CFString **)MEMORY[0x24BE105D0];
        do
        {
          if (deviceProperties[5 * v9 + 2])
          {
            if (deviceProperties[5 * v9 + 3])
              v15 = v13;
            else
              v15 = v14;
          }
          else
          {
            v15 = v12;
          }
          if ((deviceProperties[5 * v9 + 4] & 0x400) == 0
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 56) + 412))
          {
            addPropertyDictionaryToPropertiesDictionary(Mutable, v8, (const __CFString *)deviceProperties[5 * v9 + 1], *v15, v10);
          }
          v9 = v11;
          v8 = (const __CFString *)deviceProperties[5 * v11++];
        }
        while (v8);
      }
    }
    *(_QWORD *)(a5 + 96) = Mutable;
  }
  *a2 = Mutable;
  v16 = *(const void **)(a5 + 96);
  if (v16)
    CFRetain(v16);
  return 0;
}

uint64_t CopyClock(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v5;

  *a2 = *(_QWORD *)(a5 + 8);
  v5 = *(const void **)(a5 + 8);
  if (v5)
    CFRetain(v5);
  return 0;
}

uint64_t CopyStreamArray(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v5;

  *a2 = *(_QWORD *)(a5 + 120);
  v5 = *(const void **)(a5 + 120);
  if (v5)
    CFRetain(v5);
  return 0;
}

uint64_t CopyFirmwareVersion(uint64_t a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  H9ISP::H9ISPDevice *v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t result;
  CFStringRef v11;
  CFStringRef v12;
  CFStringRef v13;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef v16;
  CFStringRef v17;
  CFStringRef v18;
  CFStringRef v19;
  CFStringRef v20;
  CFNumberRef v21;
  CFIndex v22;
  const void *v23;
  const void *v24;
  uint64_t DerivedStorage;
  CFNumberRef v27;
  int v28;
  const void *v29;
  void *key;
  int valuePtr;
  _BYTE outputStruct[16];
  int v33;
  __int128 v34;
  __int128 v35;
  char v36[128];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v7 = *(H9ISP::H9ISPDevice **)(a5 + 24);
  v8 = *((_QWORD *)v7 + 7);
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v34 = 0u;
  v35 = 0u;
  WORD2(v34) = 6;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(v7, (unsigned __int8 *)&v34, 0xA8u, 0, 0xFFFFFFFF))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
      goto LABEL_3;
    v11 = CFStringCreateWithCString(0, (const char *)&v34 + 8, 0);
    if (v11)
    {
      v12 = v11;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11040], v11);
      CFRelease(v12);
    }
    v13 = CFStringCreateWithCString(0, &v36[8], 0);
    if (v13)
    {
      v14 = v13;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11038], v13);
      CFRelease(v14);
    }
    v15 = CFStringCreateWithCString(0, &v36[40], 0);
    if (v15)
    {
      v16 = v15;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11048], v15);
      CFRelease(v16);
    }
    v17 = CFStringCreateWithCString(0, &v36[72], 0);
    if (v17)
    {
      v18 = v17;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11050], v17);
      CFRelease(v18);
    }
    v19 = CFStringCreateWithCString(0, &v36[104], 0);
    if (v19)
    {
      v20 = v19;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE11058], v19);
      CFRelease(v20);
    }
    valuePtr = 1286;
    v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE110F8], v21);
    CFRelease(v21);
    if ((int)CFArrayGetCount(*(CFArrayRef *)(a5 + 120)) < 1)
    {
LABEL_30:
      result = 0;
      goto LABEL_31;
    }
    v22 = 0;
    key = (void *)*MEMORY[0x24BE10F88];
    v23 = (const void *)*MEMORY[0x24BE11060];
    v24 = (const void *)*MEMORY[0x24BE10F80];
    while (1)
    {
      if (!CFArrayGetValueAtIndex(*(CFArrayRef *)(a5 + 120), v22))
        goto LABEL_29;
      FigCaptureStreamGetFigBaseObject();
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (H9ISP::H9ISPDevice::ISP_GetModuleParams(*(_QWORD *)(a5 + 24), *(_DWORD *)(DerivedStorage + 84), outputStruct)|| outputStruct[12] == 0)
      {
        goto LABEL_29;
      }
      valuePtr = v33;
      v27 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v28 = *(_DWORD *)(v8 + 80 * *(unsigned int *)(DerivedStorage + 84) + 16);
      if (v28 == 1919251564)
      {
        v29 = key;
      }
      else
      {
        v29 = v24;
        if (v28 != 1919246706)
        {
          v29 = v23;
          if (v28 != 1718775412)
            goto LABEL_28;
        }
      }
      CFDictionarySetValue(Mutable, v29, v27);
LABEL_28:
      CFRelease(v27);
LABEL_29:
      if (++v22 >= (int)CFArrayGetCount(*(CFArrayRef *)(a5 + 120)))
        goto LABEL_30;
    }
  }
  Mutable = 0;
LABEL_3:
  result = 4294954513;
LABEL_31:
  *a2 = Mutable;
  return result;
}

uint64_t SetDARTCacheParameters(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6;
  const __CFNumber *Value;
  int v8;
  unsigned int valuePtr;

  if (!a1)
    return 4294954516;
  v6 = CFGetTypeID(a1);
  if (v6 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("CacheTTL"));
  if (!Value)
  {
    H9ISPLogger(4, "H9ISPCaptureDevice: Missing entries in dictionary passed for kFigCaptureDeviceProperty_DARTCacheParameters property\n");
    return 4294954516;
  }
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v8 = H9ISP::H9ISPDevice::ISP_SetDARTCacheTTL(*(H9ISP::H9ISPDevice **)(a4 + 24), valuePtr);
  H9ISPLogger(6, "H9ISPCaptureDevice: set kFigCaptureDeviceProperty_DARTCacheParameters, ttl=%d, res=0x%08X\n", valuePtr, v8);
  if (v8)
    return 4294954516;
  else
    return 0;
}

uint64_t SetDiagnosticsLogDump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  H9ISP::H9ISPDevice *v6;
  unsigned int v8;

  v8 = 0;
  if (H9ISP::H9ISPDevice::ISP_GetDriverLoggingFlags(*(H9ISP::H9ISPDevice **)(a4 + 24), &v8))
  {
    v5 = 4294954516;
  }
  else
  {
    v6 = *(H9ISP::H9ISPDevice **)(a4 + 24);
    if ((v8 & 1) != 0)
    {
      H9ISP::H9ISPDevice::SetFirmwareRunMode(v6, 1u);
    }
    else
    {
      H9ISP::H9ISPDevice::ISP_SetDriverLoggingFlags(v6, v8 | 1);
      H9ISP::H9ISPDevice::SetFirmwareRunMode(*(H9ISP::H9ISPDevice **)(a4 + 24), 1u);
      usleep(0x7A120u);
      H9ISP::H9ISPDevice::ISP_SetDriverLoggingFlags(*(H9ISP::H9ISPDevice **)(a4 + 24), v8);
    }
    v5 = 0;
  }
  H9ISPLogger(6, "H9ISPCaptureDevice: SetDiagnosticsLogDump (err=%d)\n", v5);
  return v5;
}

uint64_t SetSensorAgileClockingEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6;
  unsigned int v7;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v6 = CFGetTypeID(a1);
  if (v6 != CFBooleanGetTypeID())
    return 4294954516;
  v7 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  *(_BYTE *)(a4 + 224) = v7;
  result = H9ISP::H9ISPDevice::ISP_EnableMIPIClockAdjustments(*(H9ISP::H9ISPDevice **)(a4 + 24), v7);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "ISP_EnableMIPIClockAdjustments error: 0x%08X\n", result);
    return 4294954514;
  }
  return result;
}

uint64_t SetFactoryFeaturesMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;

  if (CFArrayGetCount(*(CFArrayRef *)(a4 + 120)))
  {
    v5 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), v5))
      {
        FigCaptureStreamGetFigBaseObject();
        *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 521) = 1;
      }
      ++v5;
    }
    while (v5 < CFArrayGetCount(*(CFArrayRef *)(a4 + 120)));
  }
  return 0;
}

uint64_t SetFastISPClockEnable(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v6;
  unsigned int v7;
  uint64_t result;

  if (!a1)
    return 4294954516;
  v6 = CFGetTypeID(a1);
  if (v6 != CFBooleanGetTypeID())
    return 4294954516;
  v7 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]) != 0;
  result = H9ISP::H9ISPDevice::ISP_EnableFastISPClock(*(H9ISP::H9ISPDevice **)(a4 + 24), v7, 0);
  if ((_DWORD)result)
  {
    H9ISPLogger(3, "ISP_EnableFastISPClock error: 0x%08X\n", result);
    return 4294954514;
  }
  return result;
}

uint64_t SetDeviceMemoryPoolID(const __CFNumber *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  H9ISP::H9ISPDevice::ISP_SetMemoryPoolID(*(H9ISP::H9ISPDevice **)(a4 + 24), valuePtr);
  return 0;
}

uint64_t CopyStreamGroupsArray(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v5;

  *a2 = *(_QWORD *)(a5 + 208);
  v5 = *(const void **)(a5 + 208);
  if (v5)
    CFRetain(v5);
  return 0;
}

uint64_t CopyProcessingSessionSupportedPropertiesDictionary(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  const __CFString *v6;
  uint64_t v7;
  const __CFBoolean *v8;
  unsigned int v9;
  const __CFString **v10;
  const __CFString **v11;
  const __CFString **v12;
  const void *v13;

  Mutable = *(__CFDictionary **)(a3 + 24);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = (const __CFString *)processingSessionProperties[0];
      if (processingSessionProperties[0])
      {
        v7 = 0;
        v8 = (const __CFBoolean *)*MEMORY[0x24BDBD268];
        v9 = 1;
        v10 = (const __CFString **)MEMORY[0x24BE105C8];
        v11 = (const __CFString **)MEMORY[0x24BE105D0];
        do
        {
          if (processingSessionProperties[5 * v7 + 2])
          {
            if (streamProperties[5 * v7 + 3])
              v12 = v10;
            else
              v12 = v11;
          }
          else
          {
            v12 = (const __CFString **)MEMORY[0x24BE105C0];
          }
          addPropertyDictionaryToPropertiesDictionary(Mutable, v6, (const __CFString *)processingSessionProperties[5 * v7 + 1], *v12, v8);
          v7 = v9;
          v6 = (const __CFString *)processingSessionProperties[5 * v9++];
        }
        while (v6);
      }
    }
    *(_QWORD *)(a3 + 24) = Mutable;
  }
  *a2 = Mutable;
  v13 = *(const void **)(a3 + 24);
  if (v13)
    CFRetain(v13);
  return 0;
}

uint64_t CopyProcessingSessionInputPixelBufferAttributes(const __CFAllocator *a1, __CFDictionary **a2, uint64_t a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  __CFDictionary *v14;
  CFMutableArrayRef v15;
  __CFArray *v16;
  int v17;
  CFNumberRef v18;
  CFNumberRef v19;
  int v21;
  int v22;
  int valuePtr;

  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v8 = Mutable;
    valuePtr = 64;
    v9 = CFNumberCreate(v6, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v8, (const void *)*MEMORY[0x24BDC55D0], v9);
    CFRelease(v9);
    v22 = 64;
    v10 = CFNumberCreate(v6, kCFNumberIntType, &v22);
    CFDictionarySetValue(v8, (const void *)*MEMORY[0x24BDC56C8], v10);
    CFRelease(v10);
    v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v11)
    {
      v12 = v11;
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x24BDD8FB8], (const void *)*MEMORY[0x24BDBD270]);
      v21 = 0;
      v13 = CFNumberCreate(0, kCFNumberIntType, &v21);
      CFDictionarySetValue(v12, (const void *)*MEMORY[0x24BDD8E40], v13);
      CFRelease(v13);
      CFDictionaryAddValue(v8, (const void *)*MEMORY[0x24BDC5668], v12);
      v14 = v12;
    }
    else
    {
      v14 = v8;
    }
    CFRelease(v14);
    v15 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
    if (!v15)
      goto LABEL_12;
    v16 = v15;
    v17 = *(_DWORD *)(a3 + 32);
    if (v17 == 1)
    {
      v21 = 2037741171;
      v18 = CFNumberCreate(0, kCFNumberIntType, &v21);
      CFArrayAppendValue(v16, v18);
      CFRelease(v18);
      v21 = 2037741158;
    }
    else
    {
      if (v17 != 2)
      {
LABEL_11:
        CFDictionaryAddValue(v8, (const void *)*MEMORY[0x24BDC56B8], v16);
        CFRelease(v16);
LABEL_12:
        *a2 = v8;
        return 0;
      }
      v21 = 1650943796;
    }
    v19 = CFNumberCreate(0, kCFNumberIntType, &v21);
    CFArrayAppendValue(v16, v19);
    CFRelease(v19);
    goto LABEL_11;
  }
  return 0;
}

uint64_t CopyProcessingSessionOutputPixelBufferAttributes(const __CFAllocator *a1, __CFDictionary **a2)
{
  const void *v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  uint64_t v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  CFMutableDictionaryRef v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  __CFDictionary *v14;
  __CFDictionary *v15;
  CFNumberRef v16;
  CFMutableArrayRef v17;
  const void *v18;
  __CFArray *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  int v22;
  int v23;
  CFNumberRef v24;
  CFNumberRef v25;
  __CFDictionary **v27;
  CFTypeRef v28;
  CFTypeRef v29;
  void *v30;
  void *v31;
  void *v32;
  const void *v33;
  const void *v34;
  CFTypeRef cf2;
  void *v36;
  void *key;
  int v39;
  int v40;
  int valuePtr;
  _QWORD v42[4];

  v42[3] = *MEMORY[0x24BDAC8D0];
  v3 = (const void *)*MEMORY[0x24BE10520];
  cf2 = (CFTypeRef)*MEMORY[0x24BE10518];
  v42[0] = *MEMORY[0x24BE10518];
  v42[1] = v3;
  v28 = (CFTypeRef)*MEMORY[0x24BE10510];
  v29 = v3;
  v42[2] = *MEMORY[0x24BE10510];
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 3, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    v6 = Mutable;
    v27 = a2;
    v7 = 0;
    key = (void *)*MEMORY[0x24BDC55D0];
    v36 = (void *)*MEMORY[0x24BDC56C8];
    v34 = (const void *)*MEMORY[0x24BDD8FB8];
    v33 = (const void *)*MEMORY[0x24BDBD270];
    v32 = (void *)*MEMORY[0x24BDD8E40];
    v31 = (void *)*MEMORY[0x24BDC5668];
    v30 = (void *)*MEMORY[0x24BDC56B8];
    v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    while (1)
    {
      v10 = CFDictionaryCreateMutable(v4, 0, v8, v9);
      if (v10)
        break;
LABEL_13:
      if (++v7 == 3)
      {
        *v27 = v6;
        return 0;
      }
    }
    v11 = v10;
    valuePtr = 64;
    v12 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v11, key, v12);
    CFRelease(v12);
    v40 = 64;
    v13 = CFNumberCreate(v4, kCFNumberIntType, &v40);
    CFDictionarySetValue(v11, v36, v13);
    CFRelease(v13);
    v14 = CFDictionaryCreateMutable(0, 0, v8, v9);
    if (v14)
    {
      v15 = v14;
      CFDictionarySetValue(v14, v34, v33);
      v39 = 0;
      v16 = CFNumberCreate(0, kCFNumberIntType, &v39);
      CFDictionarySetValue(v15, v32, v16);
      CFRelease(v16);
      CFDictionaryAddValue(v11, v31, v15);
      CFRelease(v15);
    }
    v17 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
    v18 = (const void *)v42[v7];
    if (!v17)
    {
LABEL_12:
      CFDictionaryAddValue(v6, v18, v11);
      CFRelease(v11);
      goto LABEL_13;
    }
    v19 = v17;
    if (CFEqual((CFTypeRef)v42[v7], cf2) || CFEqual(v18, v29))
    {
      v39 = 2037741171;
      v20 = CFNumberCreate(0, kCFNumberIntType, &v39);
      CFArrayAppendValue(v19, v20);
      CFRelease(v20);
      v39 = 2037741158;
      v21 = CFNumberCreate(0, kCFNumberIntType, &v39);
      CFArrayAppendValue(v19, v21);
      CFRelease(v21);
      v22 = 875704422;
      v23 = 875704438;
    }
    else
    {
      if (!CFEqual(v18, v28))
        goto LABEL_11;
      v22 = 2037741158;
      v23 = 2037741171;
    }
    v39 = v23;
    v24 = CFNumberCreate(0, kCFNumberIntType, &v39);
    CFArrayAppendValue(v19, v24);
    CFRelease(v24);
    v39 = v22;
    v25 = CFNumberCreate(0, kCFNumberIntType, &v39);
    CFArrayAppendValue(v19, v25);
    CFRelease(v25);
LABEL_11:
    CFDictionaryAddValue(v11, v30, v19);
    CFRelease(v19);
    goto LABEL_12;
  }
  return 0;
}

uint64_t SetProcessingSessionDefaultProcessingParameters(const void *a1, uint64_t a2)
{
  CFTypeID v5;
  const __CFData *Value;
  const __CFData *v7;
  CFTypeID v8;
  int v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  CGRect *v15;
  const void **v16;
  const void *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef *v23;
  uint64_t v24;
  __int128 v25;
  CFDataRef Copy;
  CFTypeRef cf[7];
  uint64_t v28;

  bzero(cf, 0x470uLL);
  if (*(_DWORD *)(a2 + 32) == 4)
    return 4294954514;
  if (!a1)
    return 4294954516;
  v5 = CFGetTypeID(a1);
  if (v5 != CFDictionaryGetTypeID())
    return 4294954516;
  Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10548]);
  v7 = Value;
  if (Value)
  {
    v8 = CFGetTypeID(Value);
    if (v8 == CFDataGetTypeID())
    {
      v9 = *(_DWORD *)(a2 + 32);
      if (v9 == 1)
        goto LABEL_33;
      if (v9 == 3)
      {
        if (CFDataGetLength(v7) > 0x200000)
        {
          H9ISPLogger(3, "Vision parameters size exceeded maximum supported\n");
          return 4294954516;
        }
        if (*(_DWORD *)(a2 + 32) != 1)
        {
LABEL_36:
          Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v7);
          if (!Copy)
            return 4294954510;
          v7 = Copy;
          cf[0] = Copy;
          goto LABEL_12;
        }
LABEL_33:
        if (CFDataGetLength(v7) >= 55941)
        {
          H9ISPLogger(3, "Warp matrix size exceeded maximum supported\n");
          return 4294954516;
        }
        goto LABEL_36;
      }
    }
    v7 = 0;
  }
LABEL_12:
  v10 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x24BE10540]);
  if (!v10)
  {
LABEL_21:
    if (v7)
    {
      v20 = *(const void **)(a2 + 88);
      if (v20)
      {
        CFRelease(v20);
        v7 = (const __CFData *)cf[0];
      }
      *(_QWORD *)(a2 + 88) = v7;
    }
    v21 = 0;
    v22 = a2 + 96;
    do
    {
      v23 = &cf[v21];
      if (!CGRectIsEmpty(*(CGRect *)&cf[v21 + 3]))
      {
        v24 = v22 + v21 * 8;
        v25 = *(_OWORD *)(v23 + 3);
        *(_OWORD *)v24 = *(_OWORD *)(v23 + 1);
        *(_OWORD *)(v24 + 16) = v25;
        *(_OWORD *)(v24 + 32) = *(_OWORD *)(v23 + 5);
        *(_QWORD *)(v24 + 48) = v23[7];
      }
      v21 += 7;
    }
    while (v21 != 140);
    return 0;
  }
  v11 = v10;
  v12 = 0;
  v13 = 0;
  v14 = (const void *)*MEMORY[0x24BE10530];
  v15 = (CGRect *)&v28;
  while (1)
  {
    if ((v13 & 0xFFFFFFFC) != 0
      || (v16 = *(const void ***)((char *)qword_2506DB078 + (v12 >> 29)), (v17 = *v16) == 0))
    {
LABEL_20:
      v7 = (const __CFData *)cf[0];
      goto LABEL_21;
    }
    v18 = (const __CFDictionary *)CFDictionaryGetValue(v11, *v16);
    if (v18)
      break;
LABEL_19:
    ++v13;
    v12 += 0x100000000;
    v15 = (CGRect *)((char *)v15 + 56);
    if (v13 == 20)
      goto LABEL_20;
  }
  v19 = (const __CFDictionary *)CFDictionaryGetValue(v18, v14);
  if (CGRectMakeWithDictionaryRepresentation(v19, v15 - 1))
  {
    *(_QWORD *)&v15->origin.x = v17;
    goto LABEL_19;
  }
  if (cf[0])
    CFRelease(cf[0]);
  return 4294954516;
}

uint64_t CopyProcessingSessionDefaultProcessingParameters(uint64_t a1, __CFDictionary **a2, uint64_t a3)
{
  uint64_t result;
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const __CFData *v8;
  CFDataRef Copy;
  CFDataRef v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const CFDictionaryKeyCallBacks *v14;
  const CFDictionaryValueCallBacks *v15;
  CFMutableDictionaryRef v16;
  __CFDictionary *v17;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v19;
  const void *v20;
  __CFDictionary *theDict;

  if (*(_BYTE *)a3)
  {
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "CopyProcessingSessionDefaultProcessingParameters");
    return 4294954516;
  }
  else
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v8 = *(const __CFData **)(a3 + 88);
      if (v8)
      {
        Copy = CFDataCreateCopy(v6, v8);
        if (Copy)
        {
          v10 = Copy;
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10548], Copy);
          CFRelease(v10);
        }
      }
      theDict = CFDictionaryCreateMutable(v6, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (theDict)
      {
        v11 = 0;
        v12 = (const void *)*MEMORY[0x24BE10530];
        v13 = a3 + 136;
        v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
        v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
        do
        {
          if (!CGRectIsEmpty(*(CGRect *)(v13 - 24)))
          {
            v16 = CFDictionaryCreateMutable(v6, 0, v14, v15);
            if (v16)
            {
              v17 = v16;
              DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(v13 - 24));
              if (DictionaryRepresentation)
              {
                v19 = DictionaryRepresentation;
                CFDictionarySetValue(v17, v12, DictionaryRepresentation);
                CFRelease(v19);
              }
              if ((v11 & 0xFFFFFFFC) == 0)
              {
                v20 = *(const void **)qword_2506DB078[v11];
                if (v20)
                  CFDictionarySetValue(theDict, v20, v17);
              }
              CFRelease(v17);
            }
          }
          ++v11;
          v13 += 56;
        }
        while (v11 != 20);
      }
    }
    result = 0;
    *a2 = Mutable;
  }
  return result;
}

uint64_t SetProcessingSessionOutputHandler(void *aBlock, uint64_t a2)
{
  const void *v4;

  if (aBlock)
  {
    v4 = *(const void **)(a2 + 48);
    if (v4)
      _Block_release(v4);
    *(_QWORD *)(a2 + 48) = _Block_copy(aBlock);
  }
  return 0;
}

uint64_t CopyProcessingSessionSupportedOutputs(const __CFAllocator *a1, __CFArray **a2, uint64_t a3)
{
  uint64_t result;
  __CFArray *Mutable;
  __CFArray *v7;
  int v8;

  if (*(_BYTE *)a3)
  {
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "CopyProcessingSessionSupportedOutputs");
    return 4294954516;
  }
  if (!a2)
    return 4294954516;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
  v7 = Mutable;
  if (Mutable)
  {
    v8 = *(_DWORD *)(a3 + 32);
    if ((v8 - 1) <= 1)
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x24BE10518]);
      v8 = *(_DWORD *)(a3 + 32);
      if (v8 == 2)
      {
        CFArrayAppendValue(v7, (const void *)*MEMORY[0x24BE10520]);
        CFArrayAppendValue(v7, (const void *)*MEMORY[0x24BE10510]);
        v8 = *(_DWORD *)(a3 + 32);
      }
    }
    if (v8 == 3)
    {
      CFArrayAppendValue(v7, (const void *)*MEMORY[0x24BE10528]);
      v8 = *(_DWORD *)(a3 + 32);
    }
    if (v8 == 4)
    {
      CFArrayAppendValue(v7, (const void *)*MEMORY[0x24BE10528]);
      CFArrayAppendValue(v7, CFSTR("OperationsList"));
      CFArrayAppendValue(v7, CFSTR("ActionsList"));
    }
  }
  result = 0;
  *a2 = v7;
  return result;
}

uint64_t SetProcessingSessionDeferAdditionOfAttachments(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  const char *v5;
  int v6;
  uint64_t v7;

  if (!a1)
  {
    v5 = "False";
    goto LABEL_7;
  }
  v4 = CFGetTypeID(a1);
  v5 = "False";
  if (v4 != CFBooleanGetTypeID())
  {
LABEL_7:
    v7 = 4294954516;
    goto LABEL_8;
  }
  v6 = CFEqual(a1, (CFTypeRef)*MEMORY[0x24BDBD270]);
  v7 = 0;
  if (v6)
    v5 = "True";
  *(_BYTE *)(a2 + 1312) = v6 != 0;
LABEL_8:
  H9ISPLogger(6, "H9ISPProcessingSession: SetDeferAdditionOfAttachments: %s (err=%d) \n", v5, v7);
  return v7;
}

uint64_t CopyProcessingSessionDeferAdditionOfAttachments(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef *v4;
  CFTypeRef v5;

  v4 = (CFTypeRef *)MEMORY[0x24BDBD268];
  if (*(_BYTE *)(a3 + 1312))
    v4 = (CFTypeRef *)MEMORY[0x24BDBD270];
  v5 = *v4;
  CFRetain(*v4);
  *a2 = v5;
  return 0;
}

uint64_t H9ISPProcessingSessionCreate(const void *a1, int a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  uint64_t v4;
  const __CFNumber *Value;
  uint64_t DerivedStorage;
  pthread_mutex_t *v9;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v13;
  H9ISPMetrics *v14;
  H9ISPMetrics *v15;
  H9ISPMetrics *v16;
  H9ISPMetrics *v17;
  H9ISPMetrics *v18;
  H9ISPMetrics *v19;
  H9ISPMetrics *v20;
  char v21;
  H9ISPMetrics *v22;
  H9ISPMetrics *v23;
  H9ISPMetrics *v24;
  H9ISPMetrics *v25;
  H9ISPMetrics *v26;
  mach_timebase_info info;
  int valuePtr;
  CFTypeRef cf;
  pthread_mutexattr_t v30;
  uint8_t buf[4];
  uint32_t numer;
  __int16 v33;
  uint32_t denom;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  valuePtr = 0;
  v4 = 4294954516;
  if (!a1)
    goto LABEL_10;
  if (!theDict)
    goto LABEL_10;
  if (!a4)
    goto LABEL_10;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x24BE10508]);
  if (!Value)
    goto LABEL_10;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  if ((valuePtr - 1) > 3)
    goto LABEL_10;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (pthread_mutex_t *)(DerivedStorage + 32);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!DerivedStorage || *(_BYTE *)DerivedStorage)
  {
    H9ISPLogger(3, "%s: Capture device is invalid\n", "H9ISPProcessingSessionCreate");
LABEL_9:
    pthread_mutex_unlock(v9);
    goto LABEL_10;
  }
  if (!*(_DWORD *)(DerivedStorage + 108) && valuePtr == 2)
  {
    v4 = 3758097088;
    goto LABEL_9;
  }
  CFRetain(a1);
  pthread_mutex_unlock(v9);
  FigCaptureISPProcessingSessionGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
LABEL_10:
    if (cf)
      CFRelease(cf);
    return v4;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)v11 = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 1312) = 0;
  *(_DWORD *)(v11 + 1316) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_QWORD *)(v11 + 72) = 0;
  bzero((void *)(v11 + 88), 0x478uLL);
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 56) = *(_QWORD *)(DerivedStorage + 24);
  if (valuePtr == 4)
    *(_BYTE *)(v11 + 1312) = 1;
  if (dword_254291298 && (byte_2542912A7 & 0x40) != 0)
  {
    v14 = (H9ISPMetrics *)operator new();
    H9ISPMetrics::H9ISPMetrics(v14, 1024);
    *(_QWORD *)(v11 + 1328) = v14;
    v15 = (H9ISPMetrics *)operator new();
    H9ISPMetrics::H9ISPMetrics(v15, 1024);
    *(_QWORD *)(v11 + 1336) = v15;
    v16 = (H9ISPMetrics *)operator new();
    H9ISPMetrics::H9ISPMetrics(v16, 1024);
    *(_QWORD *)(v11 + 1344) = v16;
    v17 = (H9ISPMetrics *)operator new();
    H9ISPMetrics::H9ISPMetrics(v17, 1024);
    *(_QWORD *)(v11 + 1352) = v17;
    v18 = (H9ISPMetrics *)operator new();
    H9ISPMetrics::H9ISPMetrics(v18, 1024);
    *(_QWORD *)(v11 + 1360) = v18;
    v19 = (H9ISPMetrics *)operator new();
    H9ISPMetrics::H9ISPMetrics(v19, 1024);
    *(_QWORD *)(v11 + 1368) = v19;
    v20 = *(H9ISPMetrics **)(v11 + 1328);
    if (v20)
    {
      if (*(_QWORD *)(v11 + 1336) && *(_QWORD *)(v11 + 1344) && *(_QWORD *)(v11 + 1352) && *(_QWORD *)(v11 + 1360))
      {
        v21 = 1;
LABEL_46:
        *(_BYTE *)(v11 + 1320) = v21;
        if ((byte_2542912A6 & 8) != 0)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "SampleTemplate:TAG,DRVSETUPBEGIN,DRVSETUPEND,FWSETUPBEGIN,FWSETUPEND,FWPROCESSBEGINUSER,FWPROCESSENDUSER,FWPROCESSBEGINKERN,FWPROCESSENDKERN,TOTALBEGIN,TOTALEND", buf, 2u);
          }
          mach_timebase_info(&info);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            numer = info.numer;
            v33 = 1024;
            denom = info.denom;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Conversion Formula: elapsedNano = elapsed * %d/%d", buf, 0xEu);
          }
        }
        goto LABEL_22;
      }
      H9ISPMetrics::~H9ISPMetrics(v20);
      MEMORY[0x23B7D8B08]();
    }
    v22 = *(H9ISPMetrics **)(v11 + 1336);
    if (v22)
    {
      H9ISPMetrics::~H9ISPMetrics(v22);
      MEMORY[0x23B7D8B08]();
    }
    v23 = *(H9ISPMetrics **)(v11 + 1344);
    if (v23)
    {
      H9ISPMetrics::~H9ISPMetrics(v23);
      MEMORY[0x23B7D8B08]();
    }
    v24 = *(H9ISPMetrics **)(v11 + 1352);
    if (v24)
    {
      H9ISPMetrics::~H9ISPMetrics(v24);
      MEMORY[0x23B7D8B08]();
    }
    v25 = *(H9ISPMetrics **)(v11 + 1360);
    if (v25)
    {
      H9ISPMetrics::~H9ISPMetrics(v25);
      MEMORY[0x23B7D8B08]();
    }
    v26 = *(H9ISPMetrics **)(v11 + 1368);
    if (v26)
    {
      H9ISPMetrics::~H9ISPMetrics(v26);
      MEMORY[0x23B7D8B08]();
    }
    v21 = 0;
    goto LABEL_46;
  }
  *(_BYTE *)(v11 + 1320) = 0;
LABEL_22:
  *(_DWORD *)(v11 + 32) = valuePtr;
  bzero((void *)(v11 + 88), 0x470uLL);
  *(_DWORD *)buf = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(v11 + 16) = Mutable;
  if (Mutable)
  {
    if (processingSessionProperties[0])
    {
      do
      {
        v13 = CFNumberCreate(0, kCFNumberIntType, buf);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v11 + 16), (const void *)processingSessionProperties[5 * *(unsigned int *)buf], v13);
        CFRelease(v13);
        ++*(_DWORD *)buf;
      }
      while (processingSessionProperties[5 * *(unsigned int *)buf]);
    }
    v4 = 0;
  }
  else
  {
    v4 = 3758097085;
  }
  pthread_mutexattr_init(&v30);
  pthread_mutexattr_settype(&v30, 2);
  pthread_mutex_init((pthread_mutex_t *)(v11 + 1248), &v30);
  pthread_mutexattr_destroy(&v30);
  *a4 = cf;
  return v4;
}

void sub_2357E8D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1010C40C6958149);
  _Unwind_Resume(a1);
}

uint64_t H9ISPLogger(uint64_t result, const char *a2, ...)
{
  int v3;
  char *v4;
  FILE **v5;
  va_list va;

  va_start(va, a2);
  v3 = result;
  if (result < 6 || dword_254291298)
  {
    v4 = (char *)operator new[]();
    vsnprintf(v4, 0x200uLL, a2, va);
    if (dword_25429129C)
    {
      v5 = (FILE **)MEMORY[0x24BDAC8E8];
      fputs(v4, (FILE *)*MEMORY[0x24BDAC8E8]);
      fflush(*v5);
    }
    else
    {
      syslog(v3, "%s", v4);
    }
    return MEMORY[0x23B7D8AF0](v4, 0x1000C8077774924);
  }
  return result;
}

uint64_t H9ISPCaptureDeviceCreate(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  _OWORD *v5;
  uint64_t v6;
  char *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  int v36;
  FILE **v37;
  void *v38;
  uint64_t H9ISPDeviceController;
  unint64_t v40;
  H9ISP::H9ISPDevice *ValueAtIndex;
  uint64_t v42;
  H9ISP::H9ISPDevice *v43;
  CFMutableDictionaryRef Mutable;
  uint64_t i;
  CFNumberRef v46;
  tm *v47;
  FILE *v48;
  H9ISP::H9ISPFirmwareLogger *v49;
  uint64_t v50;
  const __CFAllocator *v51;
  CFMutableArrayRef v52;
  tm *v53;
  CFStringEncoding SystemEncoding;
  const __CFString *v55;
  const __CFURL *v56;
  __CFWriteStream *v57;
  uint64_t v58;
  uint64_t v59;
  int j;
  uint64_t v61;
  unsigned int *v62;
  CFTypeRef v63;
  CFTypeRef *v64;
  CFMutableArrayRef v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  int ModuleParams;
  int ChannelSensorID;
  int v71;
  CFTypeRef v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const CMBufferCallbacks *v77;
  NSObject *v78;
  tm *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  char v85;
  int CameraConfig;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  CFMutableArrayRef v92;
  const CFArrayCallBacks *v93;
  char v94;
  __CFArray *v95;
  CFIndex k;
  const void *v97;
  CFTypeRef v98;
  uint64_t v99;
  uint64_t v100;
  CMClockRef HostTimeClock;
  uint64_t v102;
  uint64_t v103;
  H9ISP::H9ISPFirmwareWorkProcessor **v104;
  uint64_t v105;
  int started;
  H9ISP::H9ISPFirmwareWorkProcessor *v107;
  int v108;
  H9ISP::H9ISPFirmwareWorkProcessor *v109;
  time_t handler[15];
  unsigned int valuePtr;
  unsigned int v115;
  mach_timebase_info info;
  uint64_t v117;
  CFTypeRef cf;
  time_t v119;
  void *value;
  char v121[8];
  uint64_t v122;
  uint64_t v123;
  int v124;
  pthread_mutexattr_t __dst[68];
  unsigned int v126;
  pthread_mutexattr_t v127;
  char __source[48];
  unsigned int v129;
  int v130;
  int v131;
  pthread_mutexattr_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  cf = 0;
  mach_timebase_info(&info);
  v117 = mach_absolute_time();
  H9ISPLogger(6, "H9ISPCaptureDeviceCreate\n");
  FigCaptureDeviceGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
  {
    DerivedStorage = 0;
    goto LABEL_58;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 160) = 0;
  *(_QWORD *)(DerivedStorage + 24) = 0;
  *(_BYTE *)(DerivedStorage + 224) = 1;
  *(_QWORD *)(DerivedStorage + 128) = 0;
  *(_QWORD *)(DerivedStorage + 232) = 0;
  *(_QWORD *)(DerivedStorage + 168) = 0;
  *(_QWORD *)(DerivedStorage + 176) = 0;
  v5 = (_OWORD *)operator new();
  v5[1] = 0u;
  v5[2] = 0u;
  *v5 = 0u;
  *(_QWORD *)(DerivedStorage + 216) = v5;
  unk_2542912A4 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPVerboseFlags"), CFSTR("com.apple.coremedia"), 0);
  dword_254291298 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPVerboseLogging"), CFSTR("com.apple.coremedia"), 0);
  dword_25429129C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPStdOutLogging"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912E0 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("CamSave2File"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912AC = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPFirmwareLogging"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912B0 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPFirmwareLoggingInfoLoggerOut"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912B4 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPFirmwareLoggingPollInterval"), CFSTR("com.apple.coremedia"), (const __CFString *)0xA);
  dword_2542912B8 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPFirmwareLoggingThreadPriority"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912E8 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("CamFWPoolPrimeCount"), CFSTR("com.apple.coremedia"), 0);
  gCaptureDeviceCFPrefs[0] = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPUseAuxRawPool"), CFSTR("com.apple.coremedia"), 0);
  dword_254291264 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("TorchLevelOverride"), CFSTR("com.apple.coremedia"), 0);
  dword_254291268 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("visSphereControl"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_25429126C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("visBaseCountControl"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291270 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("visLogDerivedStepControl"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291274 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("visOverScanPercetageControl"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291270 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("visLogDerivedStepControl"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291290 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("visMaxZoomEnhancement"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291278 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableLTMLuts"), CFSTR("com.apple.coremedia"), 0);
  dword_25429127C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableRawGyroData"), CFSTR("com.apple.coremedia"), 0);
  dword_254291280 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableFocusPixelMetadata"), CFSTR("com.apple.coremedia"), 0);
  dword_254291284 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableTNRMetadata"), CFSTR("com.apple.coremedia"), 0);
  dword_254291288 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableLocalHist"), CFSTR("com.apple.coremedia"), 0);
  dword_25429128C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableMetadataSections"), CFSTR("com.apple.coremedia"), 0);
  dword_254291294 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPBCapAFTimeout"), CFSTR("com.apple.coremedia"), (const __CFString *)0x1F4);
  dword_2542912A0 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPRawMetaInDict"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912A8 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("H9ISPFullStats"), CFSTR("com.apple.coremedia"), 0);
  qword_2542912C0 = (int)H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("CaptureDeviceEventLogging"), CFSTR("com.apple.coremedia"), 0);
  qword_2542912C8 = (int)H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("CaptureDeviceEventMaximumLogLength"), CFSTR("com.apple.coremedia"), (const __CFString *)0x7D0);
  byte_2542912D0 = (int)H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("SavePreBracketingFrame"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL) > 0;
  dword_2542912D4 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("AFPeakTracking"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_2542912D8 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("HighFrameRateAF"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  byte_2542912DC = (int)H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("DualCamStreaming"), CFSTR("com.apple.coremedia"), 0) > 0;
  dword_2542912E4 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("DisableFrameDoneTimeoutRecovery"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_2542912EC = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableCFOV"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_2542912F0 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("DisplayStrobeOverride"), CFSTR("com.apple.coremedia"), 0);
  dword_2542912F4 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableFastISP"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_2542912F8 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("BypassFrameDelivery"), CFSTR("com.apple.coremedia"), 0);
  word_2542912FC = (unsigned __int16)H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("DisableFocusWithDACSetting"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFF);
  dword_254291300 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableCamPackedRaw"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  byte_254291304 = (int)H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("SwapTeleAndWideStreams"), CFSTR("com.apple.coremedia"), 0) > 0;
  dword_254291308 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableSidebandMetadata"), CFSTR("com.apple.coremedia"), 0);
  dword_25429130C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableHawking"), CFSTR("com.apple.coremedia"), (const __CFString *)1);
  dword_254291320 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("AttachSushiRaw"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291314 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("LTMVersion"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291310 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableSDOF"), CFSTR("com.apple.coremedia"), 0);
  dword_254291318 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableLTMStaticCLUT"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_25429131C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableWorkProcessor"), CFSTR("com.apple.coremedia"), (const __CFString *)1);
  dword_254291324 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("PreviewStreamSelect"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291328 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableDYWithSDOF"), CFSTR("com.apple.coremedia"), 0);
  dword_25429132C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableConcurrentFocus"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291330 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("FocusBehaviorSDOF"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  dword_254291334 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableLTMPadding"), CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
  v6 = 0;
  dword_254291338 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("EnableMasterSlaveAFMetadata"), CFSTR("com.apple.coremedia"), 0);
  v7 = &byte_2542913A8;
  do
  {
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dCAFHintAction"), v6);
    *((_DWORD *)v7 - 13) = H9ISP::H9ISPGetCFPreferenceNumber(v8, CFSTR("com.apple.coremedia"), 0);
    CFRelease(v8);
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dFullLSC"), v6);
    *((_DWORD *)v7 - 27) = H9ISP::H9ISPGetCFPreferenceNumber(v9, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v9);
    v10 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dSNF"), v6);
    *((_DWORD *)v7 - 26) = H9ISP::H9ISPGetCFPreferenceNumber(v10, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v10);
    v11 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dBinningCompensation"), v6);
    *((_DWORD *)v7 - 25) = H9ISP::H9ISPGetCFPreferenceNumber(v11, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v11);
    v12 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dHRLTM"), v6);
    *((_DWORD *)v7 - 24) = H9ISP::H9ISPGetCFPreferenceNumber(v12, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v12);
    v13 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dHR"), v6);
    *((_DWORD *)v7 - 6) = H9ISP::H9ISPGetCFPreferenceNumber(v13, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v13);
    v14 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dContextSwitching"), v6);
    *((_DWORD *)v7 - 23) = H9ISP::H9ISPGetCFPreferenceNumber(v14, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v14);
    v15 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dAWBScheme"), v6);
    *((_DWORD *)v7 - 22) = H9ISP::H9ISPGetCFPreferenceNumber(v15, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v15);
    v16 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dALS"), v6);
    *((_DWORD *)v7 - 21) = H9ISP::H9ISPGetCFPreferenceNumber(v16, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v16);
    v17 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dTemporalCoherenceFilter"), v6);
    *((_DWORD *)v7 - 20) = H9ISP::H9ISPGetCFPreferenceNumber(v17, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v17);
    v18 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dSIFPixelFormat"), v6);
    *((_DWORD *)v7 - 12) = H9ISP::H9ISPGetCFPreferenceNumber(v18, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v18);
    v19 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dSingleFormatOverride"), v6);
    *((_DWORD *)v7 - 19) = H9ISP::H9ISPGetCFPreferenceNumber(v19, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v19);
    v20 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dVIS"), v6);
    *((_DWORD *)v7 - 18) = H9ISP::H9ISPGetCFPreferenceNumber(v20, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v20);
    v21 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dDebugMetadata"), v6);
    *((_DWORD *)v7 - 17) = H9ISP::H9ISPGetCFPreferenceNumber(v21, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v21);
    v22 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dsHDRRatio"), v6);
    *((_DWORD *)v7 - 16) = H9ISP::H9ISPGetCFPreferenceNumber(v22, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v22);
    v23 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dFocusPixels"), v6);
    *((_DWORD *)v7 - 15) = H9ISP::H9ISPGetCFPreferenceNumber(v23, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v23);
    v24 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dContinuousFocus"), v6);
    *((_DWORD *)v7 - 14) = H9ISP::H9ISPGetCFPreferenceNumber(v24, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v24);
    v25 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dShort2LongSpeed"), v6);
    *((_DWORD *)v7 - 10) = H9ISP::H9ISPGetCFPreferenceNumber(v25, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v25);
    v26 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dLong2ShortSpeed"), v6);
    *((_DWORD *)v7 - 11) = H9ISP::H9ISPGetCFPreferenceNumber(v26, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v26);
    v27 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dEnableDPM"), v6);
    *((_DWORD *)v7 - 9) = H9ISP::H9ISPGetCFPreferenceNumber(v27, CFSTR("com.apple.coremedia"), (const __CFString *)1);
    CFRelease(v27);
    v28 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dEnableDPMAssistedAE"), v6);
    *((_DWORD *)v7 - 8) = H9ISP::H9ISPGetCFPreferenceNumber(v28, CFSTR("com.apple.coremedia"), (const __CFString *)1);
    CFRelease(v28);
    v29 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dEnableAPS"), v6);
    *((_DWORD *)v7 - 7) = H9ISP::H9ISPGetCFPreferenceNumber(v29, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v29);
    v30 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dEnableSensorCrop"), v6);
    *((_DWORD *)v7 - 5) = H9ISP::H9ISPGetCFPreferenceNumber(v30, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v30);
    v31 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dCalCropOffsetX"), v6);
    *((_DWORD *)v7 - 4) = H9ISP::H9ISPGetCFPreferenceNumber(v31, CFSTR("com.apple.coremedia"), 0);
    CFRelease(v31);
    v32 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dCalCropOffsetY"), v6);
    *((_DWORD *)v7 - 3) = H9ISP::H9ISPGetCFPreferenceNumber(v32, CFSTR("com.apple.coremedia"), 0);
    CFRelease(v32);
    v33 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dOisMetaFileMode"), v6);
    *((_DWORD *)v7 - 2) = H9ISP::H9ISPGetCFPreferenceNumber(v33, CFSTR("com.apple.coremedia"), 0);
    CFRelease(v33);
    v34 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dFrameSkipRatio"), v6);
    *((_DWORD *)v7 - 1) = H9ISP::H9ISPGetCFPreferenceNumber(v34, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v34);
    v35 = CFStringCreateWithFormat(0, 0, CFSTR("Cam%dDisableZoom"), v6);
    *v7 = H9ISP::H9ISPGetCFPreferenceNumber(v35, CFSTR("com.apple.coremedia"), 0) != 0;
    CFRelease(v35);
    ++v6;
    v7 += 112;
  }
  while (v6 != 5);
  v36 = unk_2542912A4;
  *(_DWORD *)(DerivedStorage + 104) = unk_2542912A4;
  if (v36)
  {
    if (dword_25429129C)
    {
      v37 = (FILE **)MEMORY[0x24BDAC8E8];
      fprintf((FILE *)*MEMORY[0x24BDAC8E8], "H9ISPVerboseFlags: 0x%08X\n", v36);
      fflush(*v37);
    }
    else
    {
      syslog(6, "H9ISPVerboseFlags: 0x%08X\n", v36);
    }
  }
  pthread_mutexattr_init(&v127);
  pthread_mutexattr_settype(&v127, 2);
  pthread_mutex_init((pthread_mutex_t *)(DerivedStorage + 32), &v127);
  pthread_mutexattr_destroy(&v127);
  H9ISPDeviceController = H9ISP::CreateH9ISPDeviceController((H9ISP *)(DerivedStorage + 16), (H9ISP::H9ISPDeviceController **)MyH9ISPDeviceControllerNotification, (int (*)(H9ISP::H9ISPDeviceController *, void *, H9ISP::H9ISPDevice *))cf, v38);
  v3 = H9ISPDeviceController;
  if (!*(_QWORD *)(DerivedStorage + 16))
    H9ISPLogger(3, "Error creating H9ISPDeviceController object: %d\n", H9ISPDeviceController);
  if ((_DWORD)v3)
  {
LABEL_58:
    if (cf)
    {
      H9ISPCaptureDeviceInvalidate();
      CFRelease(cf);
      DerivedStorage = 0;
    }
LABEL_60:
    v63 = *a3;
    v42 = v3;
    goto LABEL_61;
  }
  if (CFArrayGetCount(**(CFArrayRef **)(DerivedStorage + 16)))
  {
    v40 = 0;
    do
    {
      ValueAtIndex = (H9ISP::H9ISPDevice *)CFArrayGetValueAtIndex(**(CFArrayRef **)(DerivedStorage + 16), v40);
      *(_QWORD *)(DerivedStorage + 24) = ValueAtIndex;
      v42 = H9ISP::H9ISPDevice::H9ISPDeviceOpen(ValueAtIndex, (int (*)(H9ISP::H9ISPDevice *, unsigned int, void *, void *))MyH9ISPDeviceMessageNotification, (void *)cf);
      if (!(_DWORD)v42)
        break;
      *(_QWORD *)(DerivedStorage + 24) = 0;
      ++v40;
    }
    while (v40 < CFArrayGetCount(**(CFArrayRef **)(DerivedStorage + 16)));
  }
  else
  {
    v42 = 0;
  }
  v43 = *(H9ISP::H9ISPDevice **)(DerivedStorage + 24);
  if (!v43)
  {
    H9ISPLogger(3, "No H9ISP Capture Device Available\n");
    v3 = 3758097088;
    goto LABEL_58;
  }
  v115 = 0;
  if (!(H9ISP::H9ISPDevice::ISP_GetDriverLoggingFlags(v43, &v115) | dword_254291298)
    && (v115 & 0x10000000) != 0)
  {
    dword_254291298 = 1;
    H9ISPLogger(6, "Enabled H9ISPVerboseLogging via driverlogging flag\n");
  }
  valuePtr = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(DerivedStorage + 128) = Mutable;
  if (!Mutable)
  {
    v3 = 3758097085;
    goto LABEL_58;
  }
  for (i = 5 * valuePtr; streamProperties[i]; i = 5 * valuePtr)
  {
    v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 128), (const void *)streamProperties[5 * valuePtr], v46);
    CFRelease(v46);
    ++valuePtr;
  }
  if (dword_2542912A8)
    H9ISP::H9ISPDevice::ISP_SetFullStatsMode(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), dword_2542912A8);
  if (dword_2542912AC)
  {
    handler[0] = 0;
    setlocale(0, "");
    time(handler);
    v47 = localtime(handler);
    strftime(__source, 0x14uLL, "%m%d%g_%H%M%S", v47);
    strlcpy((char *)__dst, "/var/mobile/Media/DCIM/ISPCPU_LOG_", 0x400uLL);
    strlcat((char *)__dst, __source, 0x400uLL);
    strlcat((char *)__dst, ".log", 0x400uLL);
    if (dword_2542912B0)
    {
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    else
    {
      v48 = fopen((const char *)__dst, "w");
      *(_QWORD *)(DerivedStorage + 144) = v48;
      if (!v48)
        H9ISPLogger(3, "Error: Could not open firmware logging output file. Routing firmware logs to info logger\n");
    }
    v49 = (H9ISP::H9ISPFirmwareLogger *)operator new();
    H9ISP::H9ISPFirmwareLogger::H9ISPFirmwareLogger(v49, *(H9ISP::H9ISPDevice **)(DerivedStorage + 24), (void (*)(void *, const char *))PrintFirmwareLog, *(void **)(DerivedStorage + 144), dword_2542912B4, dword_2542912B8);
    *(_QWORD *)(DerivedStorage + 136) = v49;
  }
  v50 = qword_2542912C0;
  *(_QWORD *)(DerivedStorage + 152) = qword_2542912C0;
  if (v50)
  {
    *(_QWORD *)(DerivedStorage + 176) = qword_2542912C8;
    v51 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v52 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1000, MEMORY[0x24BDBD690]);
    *(_QWORD *)(DerivedStorage + 168) = v52;
    if (v52)
    {
      handler[0] = 0;
      setlocale(0, "");
      time(handler);
      v53 = localtime(handler);
      strftime(__source, 0x14uLL, "%m%d%g_%H%M%S", v53);
      strlcpy((char *)__dst, "/var/mobile/Media/DCIM/CaptureDevice_Event_", 0x400uLL);
      strlcat((char *)__dst, __source, 0x400uLL);
      strlcat((char *)__dst, ".plist", 0x400uLL);
      SystemEncoding = CFStringGetSystemEncoding();
      v55 = CFStringCreateWithCString(v51, (const char *)__dst, SystemEncoding);
      if (v55)
      {
        v56 = CFURLCreateWithFileSystemPath(v51, v55, kCFURLPOSIXPathStyle, 0);
        if (v56)
        {
          v57 = CFWriteStreamCreateWithFile(v51, v56);
          *(_QWORD *)(DerivedStorage + 160) = v57;
          if (v57 && !CFWriteStreamOpen(v57))
            H9ISPLogger(3, "Error: CFWriteStreamOpen failed.\n");
          CFRelease(v56);
        }
        CFRelease(v55);
      }
    }
    LogCaptureDeviceEvent(0, DerivedStorage, 0, 0, 0, 0);
  }
  v58 = *(_QWORD *)(DerivedStorage + 24);
  v59 = *(_QWORD *)(v58 + 56);
  for (j = 20; ; --j)
  {
    v61 = H9ISP::H9ISPDevice::ISP_PowerOnCamera((mach_port_t *)v58);
    v3 = v61;
    if ((_DWORD)v61 != -536870187)
      break;
    if (j == 20)
    {
      syslog(3, "H9ISP: device busy. Doing delay/retry now\n");
    }
    else if (!j)
    {
      goto LABEL_57;
    }
    usleep(0x186A0u);
    v58 = *(_QWORD *)(DerivedStorage + 24);
  }
  if ((_DWORD)v61)
  {
LABEL_57:
    H9ISPLogger(3, "Error: Could not power on camera: 0x%08X\n", v61);
    goto LABEL_58;
  }
  if (dword_2542912F4 != -1)
    H9ISP::H9ISPDevice::ISP_EnableFastISPClock(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), dword_2542912F4 != 0, 0);
  v62 = (unsigned int *)(DerivedStorage + 112);
  if (H9ISP::H9ISPDevice::ISP_GetNumChannels(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), (unsigned int *)(DerivedStorage + 112)))
  {
    H9ISPLogger(3, "Error: Could not query the number of cameras\n");
    v3 = 3758097088;
    goto LABEL_58;
  }
  v65 = CFArrayCreateMutable(a1, *v62, MEMORY[0x24BDBD690]);
  *(_QWORD *)(DerivedStorage + 120) = v65;
  if (!v65)
  {
    v3 = 4294967188;
    goto LABEL_58;
  }
  *(_DWORD *)(DerivedStorage + 108) = 0;
  if (*(_DWORD *)(DerivedStorage + 112))
  {
    v66 = 0;
    v67 = &dword_25429133C;
    v68 = 32;
    do
    {
      ModuleParams = H9ISP::H9ISPDevice::ISP_GetModuleParams(*(_QWORD *)(DerivedStorage + 24), v66, __dst);
      if (ModuleParams == -536870172)
        goto LABEL_117;
      if (ModuleParams)
      {
        H9ISPLogger(3, "Error: Could not get the module parameters\n");
        v103 = 3758097088;
        goto LABEL_155;
      }
      if (!BYTE4(__dst[0].__sig))
        goto LABEL_117;
      ChannelSensorID = H9ISP::H9ISPDevice::GetChannelSensorID(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), v66);
      if (ChannelSensorID > 851)
      {
        if (ChannelSensorID > 4495)
        {
          if (ChannelSensorID > 38751)
          {
            if (ChannelSensorID == 38752)
              goto LABEL_94;
            v71 = 38754;
          }
          else
          {
            if (ChannelSensorID == 4496)
              goto LABEL_94;
            v71 = 22160;
          }
          if (ChannelSensorID != v71)
            goto LABEL_119;
        }
        else if (ChannelSensorID > 1043)
        {
          if (ChannelSensorID != 1044 && ChannelSensorID != 3414)
            goto LABEL_119;
        }
        else if (ChannelSensorID != 852 && ChannelSensorID != 1029)
        {
          goto LABEL_119;
        }
      }
      else if (ChannelSensorID <= 552)
      {
        if (((ChannelSensorID - 356) > 0x2E
           || ((1 << (ChannelSensorID - 100)) & 0x500000000001) == 0)
          && ChannelSensorID != 329)
        {
LABEL_119:
          v62 = (unsigned int *)(DerivedStorage + 112);
          goto LABEL_117;
        }
      }
      else if (((ChannelSensorID - 553) > 0x1F || ((1 << (ChannelSensorID - 41)) & 0xC0004001) == 0)
             && ((ChannelSensorID - 771) > 0x11 || ((1 << (ChannelSensorID - 3)) & 0x30001) == 0))
      {
        goto LABEL_119;
      }
LABEL_94:
      ++*(_DWORD *)(DerivedStorage + 108);
      v72 = cf;
      v73 = *(_QWORD *)(DerivedStorage + 24);
      value = 0;
      FigCaptureStreamGetClassID();
      v3 = CMDerivedObjectCreate();
      if ((_DWORD)v3)
        goto LABEL_120;
      v74 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(v74 + 8) = v72;
      v75 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(v75 + 24) = v73;
      CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
      v3 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v74 + 16));
      if ((_DWORD)v3
        || (v77 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers(),
            v3 = CMBufferQueueCreate(a1, 0, v77, (CMBufferQueueRef *)(v74 + 24)),
            (_DWORD)v3))
      {
LABEL_120:
        v78 = 0;
LABEL_122:
        if (value)
          CFRelease(value);
        if (v78)
          dispatch_release(v78);
        if ((_DWORD)v3)
          goto LABEL_58;
        v80 = 0;
        goto LABEL_102;
      }
      v78 = dispatch_queue_create("com.apple.stillimagetimeout.queue", 0);
      if (!v78)
      {
        v3 = 0;
        goto LABEL_122;
      }
      v3 = (uint64_t)dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v78);
      if (!v3)
        goto LABEL_122;
      *(_DWORD *)(v74 + 59) = 0;
      *(_DWORD *)(v74 + 80) = 3;
      *(_DWORD *)(v74 + 96) = 1;
      *(_QWORD *)(v74 + 248) = 0;
      *(_WORD *)(v74 + 256) = 0;
      *(_DWORD *)(v74 + 260) = 0;
      *(_BYTE *)(v74 + 264) = 0;
      *(_QWORD *)(v74 + 384) = 0;
      *(_BYTE *)(v74 + 408) = 0;
      *(_DWORD *)(v74 + 412) = 0;
      *(_BYTE *)(v74 + 456) = 0;
      *(_OWORD *)(v74 + 272) = 0u;
      *(_OWORD *)(v74 + 288) = 0u;
      *(_QWORD *)(v74 + 304) = 0;
      *(_QWORD *)(v74 + 460) = -1;
      *(_QWORD *)(v74 + 468) = -1;
      *(_QWORD *)(v74 + 476) = -1;
      *(_DWORD *)(v74 + 172) = 0;
      *(_DWORD *)(v74 + 176) = 0;
      *(_WORD *)(v74 + 522) = 0;
      *(_DWORD *)(v74 + 868) = 0;
      *(_QWORD *)(v74 + 608) = 0;
      *(_QWORD *)(v74 + 616) = 0;
      *(_QWORD *)(v74 + 728) = 0;
      *(_QWORD *)(v74 + 736) = 0;
      *(_QWORD *)(v74 + 848) = 0;
      *(_QWORD *)(v74 + 856) = 0;
      *(_QWORD *)(v74 + 968) = 0;
      *(_QWORD *)(v74 + 976) = 0;
      *(_QWORD *)(v74 + 1088) = 0;
      *(_QWORD *)(v74 + 1096) = 0;
      *(_QWORD *)(v74 + 1208) = 0;
      *(_QWORD *)(v74 + 1216) = 0;
      *(_QWORD *)(v74 + 492) = -1;
      *(_DWORD *)(v74 + 52) = 0;
      *(_DWORD *)(v74 + 56) = 0;
      *(_BYTE *)(v74 + 520) = 0;
      *(_QWORD *)(v74 + 32) = 0;
      *(_DWORD *)(v74 + 524) = 0;
      *(_QWORD *)(v74 + 1248) = 0x3F80000000000000;
      *(_QWORD *)(v74 + 1256) = 0xFFFFFFFF00000000;
      *(_QWORD *)(v74 + 1264) = 0;
      *(_BYTE *)(v74 + 1285) = 0;
      *(_DWORD *)(v74 + 1288) = 0;
      *(_QWORD *)(v74 + 1296) = 0x3FF0000000000000;
      *(_DWORD *)(v74 + 1372) = 0;
      *(_BYTE *)(v74 + 1392) = 0;
      *(_BYTE *)(v74 + 1278) = 0;
      *(_DWORD *)(v74 + 1280) = 1;
      *(_WORD *)(v74 + 1400) = 0;
      *(_DWORD *)(v74 + 1404) = 0;
      pthread_mutexattr_init(&v132);
      pthread_mutexattr_settype(&v132, 2);
      pthread_mutex_init((pthread_mutex_t *)(v74 + 184), &v132);
      pthread_mutexattr_destroy(&v132);
      dispatch_source_set_timer((dispatch_source_t)v3, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 0x40000000;
      handler[2] = (time_t)___ZL24H9ISPCaptureStreamCreatePK13__CFAllocatorP22OpaqueFigCaptureDevicePN5H9ISP11H9ISPDeviceEPP22OpaqueFigCaptureStream_block_invoke;
      handler[3] = (time_t)&__block_descriptor_tmp;
      handler[4] = v74;
      handler[5] = v75;
      handler[6] = (time_t)value;
      dispatch_source_set_event_handler((dispatch_source_t)v3, handler);
      dispatch_activate((dispatch_object_t)v3);
      if (gCaptureDeviceCFPrefs[28 * *(unsigned int *)(v74 + 84) + 80])
      {
        v119 = 0;
        setlocale(0, "");
        time(&v119);
        v79 = localtime(&v119);
        strftime(v121, 0x14uLL, "%m%d%g_%H%M%S", v79);
        strcpy(__source, "/var/mobile/Media/DCIM/oismeta--");
        strlcat(__source, v121, 0x400uLL);
        strlcat(__source, ".log", 0x400uLL);
        pthread_mutex_lock((pthread_mutex_t *)(v74 + 184));
        *(_QWORD *)(v74 + 1384) = CreateMotionMetadataDebugLogger(__source, gCaptureDeviceCFPrefs[28 * *(unsigned int *)(v74 + 84) + 80], *(H9ISP::H9ISPDevice **)(v75 + 24));
        pthread_mutex_unlock((pthread_mutex_t *)(v74 + 184));
      }
      *(_QWORD *)(v74 + 1328) = v78;
      *(_QWORD *)(v74 + 1336) = v3;
      v80 = value;
LABEL_102:
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 120), v80);
      FigCaptureStreamGetFigBaseObject();
      v81 = CMBaseObjectGetDerivedStorage();
      v82 = v81;
      *(_DWORD *)(v81 + 84) = v66;
      *(_QWORD *)(v81 + 88) = 0;
      v62 = (unsigned int *)(DerivedStorage + 112);
      if (v126 < 4)
        *(_DWORD *)(v81 + 1396) = dword_2358295F0[v126];
      *(_DWORD *)(v81 + 116) = *v67;
      *(_DWORD *)(v81 + 140) = v67[1];
      *(_DWORD *)(v81 + 168) = v67[2];
      *(_DWORD *)(v81 + 144) = v67[3];
      *(_DWORD *)(v81 + 148) = v67[21];
      v83 = v67[4];
      if (v83 == -1)
        v83 = 0;
      *(_DWORD *)(v81 + 172) = v83;
      *(_DWORD *)(v81 + 164) = v67[5];
      v84 = v67[6];
      *(_DWORD *)(v81 + 152) = v84;
      if (v84 == -1)
      {
        v85 = 0;
        *(_DWORD *)(v81 + 152) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(DerivedStorage + 24) + 56) + v68);
      }
      else
      {
        v85 = 1;
      }
      *(_BYTE *)(v81 + 156) = v85;
      *(_DWORD *)(v81 + 160) = v67[7];
      *(_DWORD *)(v81 + 416) = v67[15];
      *(_BYTE *)(v81 + 420) = byte_2542912D0;
      *(_QWORD *)(v81 + 492) = *(_QWORD *)&dword_2542912D4;
      *(_DWORD *)(v81 + 516) = v67[10];
      *(_BYTE *)(v81 + 521) = byte_2542912DC;
      *(_DWORD *)(v81 + 120) = v67[9];
      *(_OWORD *)(v81 + 124) = *(_OWORD *)(v67 + 11);
      CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(DerivedStorage + 24), v66, 0, handler, __source);
      if (CameraConfig)
      {
        H9ISPLogger(3, "Error: GetCameraConfig error: 0x%08X\n", CameraConfig);
        v103 = 3758097088;
        goto LABEL_155;
      }
      v87 = v129;
      *(_DWORD *)(v82 + 100) = *(_DWORD *)&__source[32];
      *(_DWORD *)(v82 + 112) = 0;
      *(_QWORD *)(v82 + 104) = 0;
      *(_DWORD *)(v82 + 500) = v87 & 1;
      v88 = v131;
      *(_DWORD *)(v82 + 504) = v130;
      *(_DWORD *)(v82 + 508) = v88;
      *(_DWORD *)(v82 + 512) = (v87 >> 1) & 1;
      *(_QWORD *)(v82 + 432) = 0;
      *(_QWORD *)(v82 + 440) = 0;
      *(_QWORD *)(v82 + 424) = 0;
      *(_QWORD *)(v82 + 448) = -1;
      *(_DWORD *)(v82 + 1344) = 2;
      *(_DWORD *)(v82 + 1376) = 0;
      *(_BYTE *)(v82 + 1278) = 0;
      *(_BYTE *)(v82 + 1304) = 0;
      *(_DWORD *)(v82 + 1308) = 0;
      *(_QWORD *)(v82 + 1352) = 0;
      *(_WORD *)(v82 + 1360) = 0;
      *(_BYTE *)(v82 + 1362) = 1;
      *(_DWORD *)(v82 + 1364) = 0;
      *(_BYTE *)(v82 + 1368) = 0;
      *(_QWORD *)v121 = 0xD0200000000;
      v124 = 0;
      v123 = 0;
      v122 = v66;
      v89 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), (unsigned __int8 *)v121, 0x1Cu, 0, 0xFFFFFFFF);
      if (v89)
      {
        H9ISPLogger(4, "CISP_CMD_CH_FACE_DETECTION_CONFIG_GET error: 0x%08X\n", v89);
        v90 = 10;
      }
      else
      {
        v90 = v123;
      }
      *(_DWORD *)(v82 + 1320) = v90;
      *(_DWORD *)(v82 + 1316) = v90;
      *(_DWORD *)(v82 + 1312) = v90;
      if (!InitSupportedFormatsForCaptureStream(v82, DerivedStorage))
      {
        H9ISPLogger(3, "Error: InitSupportedFormatsForCaptureStream found no supported formats for channel %d\n", v66);
        v103 = 3758097088;
        goto LABEL_155;
      }
      if (dword_254291334 != -1)
      {
        v91 = H9ISP::H9ISPDevice::WritePropertyValue(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), *(_DWORD *)(v82 + 84), 5133, dword_254291334);
        if (v91)
        {
          H9ISPLogger(3, "H9ISPCaptureDeviceCreate - WritePropertyValue(capstream->camChannel, 0x140D, %d) error: 0x%08X\n", dword_254291334, v91);
          v103 = 3758097122;
LABEL_155:
          v3 = v103;
          goto LABEL_58;
        }
      }
      v42 = 0;
LABEL_117:
      ++v66;
      v67 += 28;
      v68 += 80;
    }
    while (v66 < *v62);
  }
  v92 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(DerivedStorage + 208) = v92;
  if (!v92)
  {
LABEL_175:
    v3 = 4294954510;
    goto LABEL_58;
  }
  v93 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
  v94 = 1;
  while ((v94 & 1) != 0)
  {
    v95 = CFArrayCreateMutable(a1, 0, v93);
    if (!v95)
      goto LABEL_175;
    for (k = 0; k < (int)CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)); ++k)
    {
      v97 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 120), k);
      FigCaptureStreamGetFigBaseObject();
      if (*(_DWORD *)(v59 + 80 * *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 84) + 72) == 1)
        CFArrayAppendValue(v95, v97);
    }
    v3 = v42;
    if (CFArrayGetCount(v95) >= 1)
    {
      v98 = cf;
      v99 = *(_QWORD *)(DerivedStorage + 24);
      *(_QWORD *)__source = 0;
      FigCaptureSynchronizedStreamsGroupGetClassID();
      v3 = CMDerivedObjectCreate();
      if ((_DWORD)v3)
      {
        if (*(_QWORD *)__source)
          CFRelease(*(CFTypeRef *)__source);
      }
      else
      {
        v100 = CMBaseObjectGetDerivedStorage();
        *(_BYTE *)(v100 + 32) = 0;
        *(_QWORD *)v100 = v98;
        *(_QWORD *)(v100 + 16) = CFRetain(v95);
        *(_QWORD *)(v100 + 24) = 0;
        *(_DWORD *)(v100 + 112) = 1;
        if (CFArrayGetValueAtIndex(v95, 0))
        {
          FigCaptureStreamGetFigBaseObject();
          *(_DWORD *)(v100 + 8) = *(_DWORD *)(*(_QWORD *)(v99 + 56)
                                            + 80 * *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 84)
                                            + 72);
        }
        pthread_mutexattr_init(__dst);
        pthread_mutexattr_settype(__dst, 2);
        pthread_mutex_init((pthread_mutex_t *)(v100 + 40), __dst);
        pthread_mutexattr_destroy(__dst);
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 208), *(const void **)__source);
        v3 = 0;
      }
    }
    CFRelease(v95);
    v42 = 0;
    v94 = 0;
    if ((_DWORD)v3)
      goto LABEL_58;
  }
  if (!*(_DWORD *)(DerivedStorage + 108))
    H9ISPLogger(4, "Warning: no valid streams detected\n");
  HostTimeClock = CMClockGetHostTimeClock();
  *(_QWORD *)(DerivedStorage + 8) = CFRetain(HostTimeClock);
  v63 = cf;
  *a3 = cf;
  cf = 0;
  if (!(_DWORD)v42)
  {
    if (dword_25429130C)
    {
      v102 = operator new();
      H9ISP::H9ISPPhotometerManager::H9ISPPhotometerManager(v102, H9ISPCaptureDevicePhotometerManagerCallback, DerivedStorage);
    }
    else
    {
      v102 = 0;
    }
    *(_QWORD *)(DerivedStorage + 184) = v102;
    if (dword_25429131C)
    {
      v104 = (H9ISP::H9ISPFirmwareWorkProcessor **)(DerivedStorage + 192);
      v105 = *(_QWORD *)(DerivedStorage + 24);
      __dst[0].__sig = DerivedStorage + 192;
      *(_QWORD *)__dst[0].__opaque = v105;
      v3 = 3758097084;
      if (!H9ISP::CreateH9ISPFirmwareWorkProcessor((uint64_t)__dst))
      {
        started = H9ISP::H9ISPFirmwareWorkProcessor::startReceive(*v104);
        if (started)
        {
          H9ISPLogger(3, "Failed to start work processor: %x\n", started);
          H9ISP::DestroyH9ISPFirmwareWorkProcessor(*v104, v107);
        }
        else
        {
          v108 = H9ISP::H9ISPDevice::SetRPCEnableFlag(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), 65533);
          if (!v108)
          {
            v3 = 0;
            goto LABEL_165;
          }
          H9ISPLogger(3, "SetRPCEnableFlag failed: %x\n", v108);
          H9ISP::H9ISPFirmwareWorkProcessor::stopReceive(*v104);
          H9ISP::DestroyH9ISPFirmwareWorkProcessor(*v104, v109);
        }
        *v104 = 0;
      }
    }
    else
    {
      v3 = 0;
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
LABEL_165:
    if ((*(_BYTE *)(DerivedStorage + 107) & 0x40) != 0)
    {
      H9ISP::H9ISPTimeLogger::end((H9ISP::H9ISPTimeLogger *)&info, "H9ISPCaptureDeviceCreate: device creation time", 0, 1);
      if (*(_DWORD *)(DerivedStorage + 104) != 0x40000000)
        H9ISPLogger(4, "H9ISPCaptureDeviceCreate verbose logging may affect timing (flags=0x%08x)", *(_DWORD *)(DerivedStorage + 104));
    }
    DerivedStorage = 0;
    if (!(_DWORD)v3)
    {
      v42 = 0;
      goto LABEL_170;
    }
    goto LABEL_60;
  }
LABEL_61:
  if (v63)
  {
    H9ISPCaptureDeviceInvalidate();
    CFRelease(*a3);
    v64 = a3;
    *a3 = 0;
    goto LABEL_171;
  }
LABEL_170:
  v64 = a3;
LABEL_171:
  H9ISPLogger(6, "H9ISPCaptureDeviceCreate complete. err=0x%08X, newCaptureDeviceOut=%p\n", v42, v64);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__dst[0].__sig) = 67109120;
    HIDWORD(__dst[0].__sig) = v42;
    _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "H9ISPCaptureDeviceCreate complete. err=0x%08X\n", (uint8_t *)__dst, 8u);
  }
  LogCaptureDeviceEvent(0, DerivedStorage, 0, 0, 0, 1);
  kdebug_trace();
  return v42;
}

void sub_2357EACFC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t MyH9ISPDeviceControllerNotification()
{
  return 0;
}

uint64_t MyH9ISPDeviceMessageNotification(H9ISP::H9ISPDevice *a1, int a2, void *a3, void *a4)
{
  if (a2 == 560363379 && dword_2542912E4 == -1)
  {
    MEMORY[0x23B7D87FC](a1);
    CMNotificationCenterPostNotification();
  }
  return 0;
}

FILE *PrintFirmwareLog(FILE *result, const char *a2)
{
  if (a2)
  {
    if (result)
      return (FILE *)fputs(a2, result);
    else
      return (FILE *)H9ISPLogger(6, "ISPCPU: %s", a2);
  }
  return result;
}

void LogCaptureDeviceEvent(unsigned int a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, int a6)
{
  const __CFArray *v8;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  CFNumberRef v16;
  const __CFArray *v17;
  CFIndex v18;
  CFNumberRef v19;
  CFNumberRef v20;
  int v21;
  const void **v22;
  int v23;
  uint64_t valuePtr;

  if (a2 && (*(_QWORD *)(a2 + 152) & (1 << a1)) != 0)
  {
    v8 = *(const __CFArray **)(a2 + 168);
    if (!v8)
    {
      H9ISPLogger(3, "H9ISPCaptureDevice: LogCaptureDeviceEvent failed, Event Log Array is not set up correctly.\n");
      return;
    }
    if (!*(_QWORD *)(a2 + 176) || CFArrayGetCount(v8) <= *(_QWORD *)(a2 + 176))
    {
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 5, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v15 = Mutable;
        valuePtr = mach_absolute_time();
        v16 = CFNumberCreate(v13, kCFNumberLongLongType, &valuePtr);
        CFDictionaryAddValue(v15, CFSTR("Timestamp"), v16);
        CFRelease(v16);
        if (a1 <= 0xE)
          CFDictionaryAddValue(v15, CFSTR("EventType"), kCMEventLogger_EventTypeString[a1]);
        if (a3)
        {
          v17 = *(const __CFArray **)(a2 + 120);
          if (v17)
          {
            v23 = 0;
            if (CFArrayGetCount(v17) >= 1)
            {
              v18 = 0;
              while (1)
              {
                CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 120), v18);
                if (CMBaseObjectGetDerivedStorage() == a3)
                  break;
                v23 = ++v18;
                if (CFArrayGetCount(*(CFArrayRef *)(a2 + 120)) <= v18)
                  goto LABEL_18;
              }
              v19 = CFNumberCreate(v13, kCFNumberIntType, &v23);
              CFDictionaryAddValue(v15, CFSTR("StreamIndex"), v19);
              CFRelease(v19);
            }
          }
LABEL_18:
          if (a1 - 15 >= 0xFFFFFFF6)
          {
            v20 = CFNumberCreate(v13, kCFNumberIntType, (const void *)(a3 + 84));
            CFDictionaryAddValue(v15, CFSTR("CameraChannel"), v20);
            CFRelease(v20);
          }
        }
        if (a1 > 0xE || ((1 << a1) & 0x6318) == 0)
          goto LABEL_26;
        if (a4)
        {
          CFDictionaryAddValue(v15, CFSTR("PropertyKey"), a4);
          v21 = CFEqual(a4, (CFTypeRef)*MEMORY[0x24BE11540]);
          if (!a5 || v21)
          {
LABEL_26:
            v22 = (const void **)MEMORY[0x24BDBD270];
            if (!a6)
              v22 = (const void **)MEMORY[0x24BDBD268];
            CFDictionaryAddValue(v15, CFSTR("EventCompleted"), *v22);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 168), v15);
            CFRelease(v15);
            return;
          }
        }
        else if (!a5)
        {
          goto LABEL_26;
        }
        CFDictionaryAddValue(v15, CFSTR("PropertyValue"), a5);
        goto LABEL_26;
      }
    }
  }
}

uint64_t InitSupportedFormatsForCaptureStream(uint64_t a1, uint64_t a2)
{
  int *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  const void **v11;
  const __CFAllocator *v12;
  uint64_t v13;
  unint64_t v14;
  CMVideoFormatDescriptionRef *v15;
  const void *v16;
  CMVideoFormatDescriptionRef v17;
  float v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *OutputPresetForOutputSize;
  char *v25;
  _BYTE *v26;
  unint64_t v27;
  const __CFAllocator *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const void *v32;
  const void *v33;
  float v34;
  unsigned int v35;
  unint64_t v36;
  CFIndex v37;
  unint64_t v38;
  _BYTE __dst[12];
  unsigned __int16 v41;
  _BYTE v42[200];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 112) = 0;
  v4 = (int *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = 0;
  v5 = *(const void **)(a1 + 64);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 104) = H9ISP::getOutputPresets(*(_DWORD *)(a1 + 100), v4, *(_DWORD *)(*(_QWORD *)(a2 + 24) + 64), 0);
  if (!*(_DWORD *)(a1 + 112))
    return 0;
  if (*(_BYTE *)(a1 + 523))
  {
    v6 = operator new[]();
    *(_BYTE *)(a1 + 522) = 1;
    v7 = *(unsigned int *)(a1 + 112);
    if (!(_DWORD)v7)
      goto LABEL_22;
    v8 = 0;
    v9 = *(_BYTE **)(a1 + 104);
    do
    {
      if (v9[75])
        memmove((void *)(v6 + 84 * v8++), v9, 0x54uLL);
      v9 += 84;
      --v7;
    }
    while (v7);
    if (!v8)
    {
LABEL_22:
      v21 = v6;
      v22 = 0x1000C80423FBCF9;
      goto LABEL_48;
    }
    *(_DWORD *)(a1 + 112) = v8;
    *(_QWORD *)(a1 + 104) = v6;
    v10 = operator new[]();
    v11 = (const void **)v10;
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (*(_DWORD *)(a1 + 112))
    {
      v13 = 0;
      v14 = 0;
      v15 = (CMVideoFormatDescriptionRef *)v10;
      do
      {
        CMVideoFormatDescriptionCreate(v12, 0x34323076u, *(_DWORD *)(*(_QWORD *)(a1 + 104) + v13 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 104) + v13 + 8), 0, v15);
        if (!v13)
        {
          if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16), __dst, v42))goto LABEL_47;
          v16 = *(const void **)(a1 + 32);
          if (v16)
            CFRelease(v16);
          v17 = *v15;
          *(_QWORD *)(a1 + 32) = *v15;
          *(_DWORD *)(a1 + 40) = 0;
          v18 = *(float *)(*(_QWORD *)(a1 + 104) + 68);
          v19 = vcvtd_n_u64_f64(v18, 8uLL);
          if (v18 == 0.0)
            v19 = v41;
          *(_QWORD *)(a1 + 44) = v19 >> 8;
          CFRetain(v17);
          H9ISPResetVideoOutputConfigurationsForNewSelectedFormat(a1, a2);
        }
        ++v14;
        v20 = *v4;
        v13 += 84;
        ++v15;
      }
      while (v14 < v20);
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)(a1 + 64) = CFArrayCreate(v12, v11, v20, MEMORY[0x24BDBD690]);
    if (*(_DWORD *)(a1 + 112))
    {
      v27 = 0;
      do
        CFRelease(v11[v27++]);
      while (v27 < *v4);
    }
    goto LABEL_46;
  }
  v23 = gCaptureDeviceCFPrefs[28 * *(unsigned int *)(a1 + 84) + 63];
  if (v23 != -1)
  {
    OutputPresetForOutputSize = H9ISP::GetOutputPresetForOutputSize(*(_DWORD *)(a1 + 100), v23, *(_DWORD *)(*(_QWORD *)(a2 + 24) + 64), 0);
    if (OutputPresetForOutputSize)
    {
      v25 = OutputPresetForOutputSize;
      v26 = (_BYTE *)operator new[]();
      memmove(v26, v25, 0x54uLL);
      v26[74] = 1;
      *(_DWORD *)(a1 + 112) = 1;
      *(_QWORD *)(a1 + 104) = v26;
      *(_BYTE *)(a1 + 522) = 1;
    }
  }
  v11 = (const void **)operator new[]();
  v28 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (!*v4)
  {
    v37 = 0;
LABEL_43:
    *(_QWORD *)(a1 + 64) = CFArrayCreate(v28, v11, v37, MEMORY[0x24BDBD690]);
    if ((*(_DWORD *)(a1 + 112) & 0x7FFFFFFF) != 0)
    {
      v38 = 0;
      do
        CFRelease(v11[v38++]);
      while (v38 < (2 * *v4));
    }
LABEL_46:
    MEMORY[0x23B7D8AF0](v11, 0x60C8044C4A2DFLL);
    return *v4;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  while (1)
  {
    CMVideoFormatDescriptionCreate(v28, 0x34323076u, *(_DWORD *)(*(_QWORD *)(a1 + 104) + v29 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 104) + v29 + 8), 0, (CMVideoFormatDescriptionRef *)&v11[v30]);
    CMVideoFormatDescriptionCreate(v28, 0x79757673u, *(_DWORD *)(*(_QWORD *)(a1 + 104) + v29 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 104) + v29 + 8), 0, (CMVideoFormatDescriptionRef *)&v11[(v31 + *(_DWORD *)(a1 + 112))]);
    if (!v31)
      break;
LABEL_40:
    ++v31;
    v36 = *v4;
    ++v30;
    v29 += 84;
    if (v31 >= v36)
    {
      v37 = (2 * v36);
      goto LABEL_43;
    }
  }
  if (!H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 16), __dst, v42))
  {
    v32 = *(const void **)(a1 + 32);
    if (v32)
      CFRelease(v32);
    v33 = *v11;
    *(_QWORD *)(a1 + 32) = *v11;
    *(_DWORD *)(a1 + 40) = 0;
    v34 = *(float *)(*(_QWORD *)(a1 + 104) + 68);
    v35 = vcvtd_n_u64_f64(v34, 8uLL);
    if (v34 == 0.0)
      v35 = v41;
    *(_QWORD *)(a1 + 44) = v35 >> 8;
    CFRetain(v33);
    H9ISPResetVideoOutputConfigurationsForNewSelectedFormat(a1, a2);
    goto LABEL_40;
  }
LABEL_47:
  v21 = (uint64_t)v11;
  v22 = 0x60C8044C4A2DFLL;
LABEL_48:
  MEMORY[0x23B7D8AF0](v21, v22);
  return 0;
}

uint64_t H9ISPCaptureDeviceInvalidate()
{
  uint64_t DerivedStorage;
  H9ISP::H9ISPDeviceController *v1;
  const __CFArray *v2;
  unint64_t v3;
  const void *ValueAtIndex;
  const void *v5;
  const __CFArray *v6;
  unint64_t v7;
  const void *v8;
  const void *v9;
  _QWORD *v10;
  H9ISP::H9ISPFrameReceiverBufferPool *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;
  H9ISP::H9ISPFirmwareWorkProcessor *v17;
  H9ISP::H9ISPDevice *v18;
  H9ISP::H9ISPFirmwareLogger *v19;
  FILE *v20;
  H9ISP::H9ISPPhotometerManager *v21;
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  const void *v24;
  H9ISP *v25;
  const void *v26;
  CFErrorRef error;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(1u, DerivedStorage, 0, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)DerivedStorage = 1;
    v2 = *(const __CFArray **)(DerivedStorage + 208);
    if (v2)
    {
      if (CFArrayGetCount(v2))
      {
        v3 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 208), v3);
          if (ValueAtIndex)
          {
            v5 = ValueAtIndex;
            FigCaptureSynchronizedStreamsGroupGetFigBaseObject();
            H9ISPCaptureGroupInvalidate();
            CFRelease(v5);
          }
          ++v3;
        }
        while (v3 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 208)));
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 208));
      *(_QWORD *)(DerivedStorage + 208) = 0;
    }
    v6 = *(const __CFArray **)(DerivedStorage + 120);
    if (v6)
    {
      if (CFArrayGetCount(v6))
      {
        v7 = 0;
        do
        {
          v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 120), v7);
          if (v8)
          {
            v9 = v8;
            FigCaptureStreamGetFigBaseObject();
            H9ISPCaptureStreamInvalidate();
            CFRelease(v9);
          }
          ++v7;
        }
        while (v7 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120)));
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 120));
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
    v10 = *(_QWORD **)(DerivedStorage + 216);
    if (v10)
    {
      while (1)
      {
        v12 = v10[5];
        if (!v12)
          break;
        v11 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(*(_QWORD *)(v10[1] + ((v10[4] >> 6) & 0x3FFFFFFFFFFFFF8))
                                                      + 8 * (v10[4] & 0x1FFLL));
        ++v10[4];
        v10[5] = v12 - 1;
        std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v10, 1);
        if (v11)
        {
          H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v11);
          MEMORY[0x23B7D8B08]();
        }
        v10 = *(_QWORD **)(DerivedStorage + 216);
      }
      v13 = std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100](v10);
      MEMORY[0x23B7D8B08](v13, 0x1080C40BE8D5F09);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 128);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    v15 = *(const void **)(DerivedStorage + 232);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 8);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    if (*(_QWORD *)(DerivedStorage + 192))
    {
      H9ISP::H9ISPDevice::SetRPCEnableFlag(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24), 0);
      H9ISP::H9ISPFirmwareWorkProcessor::stopReceive(*(H9ISP::H9ISPFirmwareWorkProcessor **)(DerivedStorage + 192));
      H9ISP::DestroyH9ISPFirmwareWorkProcessor(*(H9ISP **)(DerivedStorage + 192), v17);
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
    v18 = *(H9ISP::H9ISPDevice **)(DerivedStorage + 24);
    if (v18)
    {
      if (H9ISP::H9ISPDevice::ISP_IsPowered(v18))
        H9ISP::H9ISPDevice::ISP_PowerOffCamera(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24));
      v19 = *(H9ISP::H9ISPFirmwareLogger **)(DerivedStorage + 136);
      if (v19)
      {
        H9ISP::H9ISPFirmwareLogger::~H9ISPFirmwareLogger(v19);
        MEMORY[0x23B7D8B08]();
      }
      v20 = *(FILE **)(DerivedStorage + 144);
      if (v20)
        fclose(v20);
      pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
      v21 = *(H9ISP::H9ISPPhotometerManager **)(DerivedStorage + 184);
      if (v21)
      {
        H9ISP::H9ISPPhotometerManager::~H9ISPPhotometerManager(v21);
        MEMORY[0x23B7D8B08]();
        *(_QWORD *)(DerivedStorage + 184) = 0;
      }
      pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
      H9ISP::H9ISPDevice::H9ISPDeviceClose(*(H9ISP::H9ISPDevice **)(DerivedStorage + 24));
      *(_QWORD *)(DerivedStorage + 24) = 0;
      LogCaptureDeviceEvent(1u, DerivedStorage, 0, 0, 0, 1);
      if (*(_QWORD *)(DerivedStorage + 160))
      {
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (Mutable)
        {
          v23 = Mutable;
          v24 = *(const void **)(DerivedStorage + 168);
          if (v24)
          {
            CFDictionaryAddValue(Mutable, CFSTR("CameraEventLog"), v24);
            error = 0;
            if (!CFPropertyListWrite(v23, *(CFWriteStreamRef *)(DerivedStorage + 160), kCFPropertyListXMLFormat_v1_0, 0, &error))H9ISPLogger(3, "H9ISPCaptureDevice: LogCaptureDeviceEvent CFPropertyListWrite failed.\n");
            CFRelease(*(CFTypeRef *)(DerivedStorage + 168));
            *(_QWORD *)(DerivedStorage + 168) = 0;
          }
          CFRelease(v23);
        }
        CFWriteStreamClose(*(CFWriteStreamRef *)(DerivedStorage + 160));
        CFRelease(*(CFTypeRef *)(DerivedStorage + 160));
        *(_QWORD *)(DerivedStorage + 160) = 0;
      }
    }
    v25 = *(H9ISP **)(DerivedStorage + 16);
    if (v25)
    {
      H9ISP::DestroyH9ISPDeviceController(v25, v1);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v26 = *(const void **)(DerivedStorage + 96);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  return 0;
}

uint64_t H9ISPCaptureDevicePhotometerManagerCallback(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  pthread_mutex_t *v6;
  H9ISP::H9ISPDevice *v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[4];

  v3 = 3758097097;
  if (a2)
  {
    v6 = (pthread_mutex_t *)(a2 + 32);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
    if (!*(_BYTE *)a2)
    {
      v7 = *(H9ISP::H9ISPDevice **)(a2 + 24);
      v8 = a3[1];
      v11[0] = *a3;
      v11[1] = v8;
      v9 = a3[3];
      v11[2] = a3[2];
      v11[3] = v9;
      v3 = H9ISP::H9ISPDevice::SetFlickerFrequency(v7, v11);
    }
    pthread_mutex_unlock(v6);
  }
  return v3;
}

uint64_t H9ISP::H9ISPTimeLogger::end(H9ISP::H9ISPTimeLogger *this, const char *a2, double *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  char *v12;
  const char *v13;
  const char *v14;
  const char *v15;

  v8 = mach_absolute_time();
  *((_QWORD *)this + 2) = v8;
  v9 = v8 - *((_QWORD *)this + 1);
  v10 = (double)(v9 * *(unsigned int *)this / *((unsigned int *)this + 1));
  v11 = v10 / 1000000.0;
  if (a4)
  {
    v12 = (char *)operator new[]();
    v13 = v12;
    v14 = " ";
    if (a2)
      v14 = a2;
    snprintf(v12, 0x200uLL, "%s: %9.3f msec\n", v14, v11);
    syslog(6, "%s", v13);
    MEMORY[0x23B7D8AF0](v13, 0x1000C8077774924);
    if (!a3)
      return v9;
LABEL_9:
    *a3 = v11;
    return v9;
  }
  v15 = " ";
  if (a2)
    v15 = a2;
  printf("%s: %9.3f msec\n", v15, v10 / 1000000.0);
  if (a3)
    goto LABEL_9;
  return v9;
}

uint64_t MyH9ISPFrameReceivedProc(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  __CFArray *Mutable;
  __CVBuffer *v10;
  __CVBuffer *v11;
  __CVBuffer *v12;
  __CVBuffer *v13;
  __CVBuffer *v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  __CVBuffer *v18;
  __CVBuffer *v19;
  _BOOL4 v20;
  __CVBuffer *v21;
  BOOL v22;
  __CVBuffer *v23;
  __CVBuffer *v24;
  uint64_t v25;
  uint64_t v26;
  __CVBuffer *v27;
  __CVBuffer *v28;
  int64_t v29;
  __CVBuffer *v30;
  H9ISP::H9ISPFrameMetadata *v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  _DWORD *v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  size_t v51;
  _WORD *v52;
  size_t v53;
  int v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  size_t v58;
  _QWORD *v59;
  size_t v60;
  unsigned __int8 *v61;
  size_t v62;
  size_t v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  size_t v69;
  size_t v70;
  size_t v71;
  uint64_t v72;
  size_t v73;
  size_t v74;
  _DWORD *v75;
  size_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  size_t v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  size_t v87;
  int *v88;
  size_t v89;
  size_t v90;
  int *v91;
  FILE **v92;
  H9ISP::H9ISPFrameMetadata *v93;
  uint64_t v94;
  __CVBuffer *v95;
  H9ISP::H9ISPFrameMetadata *v96;
  H9ISP::H9ISPFrameMetadata *v97;
  H9ISP::H9ISPPhotometerManager *v98;
  uint64_t v99;
  _WORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  CMTimeEpoch v108;
  __CVBuffer *v109;
  const __CFAllocator *v110;
  size_t Width;
  const __CFAllocator *v112;
  __CFDictionary *v113;
  int64_t v114;
  CFDictionaryRef v115;
  __CVBuffer *v116;
  CFTypeRef Attachment;
  const __CFAllocator *v118;
  const __CFAllocator *v119;
  OSStatus v120;
  __CFDictionary *v121;
  __CFDictionary *v122;
  int v123;
  char v124;
  int v125;
  OSStatus v126;
  int v127;
  int v128;
  int v129;
  __CFDictionary *v130;
  const __CFAllocator *v131;
  __CFDictionary *v132;
  unsigned int v133;
  uint64_t v134;
  CFNumberRef v135;
  CFNumberRef v136;
  __CVBuffer *v137;
  __CVBuffer *v138;
  BOOL v139;
  BOOL v140;
  OSStatus v141;
  int v143;
  CVBufferRef v144;
  __CVBuffer *buffer;
  void *value;
  __CVBuffer *valuea;
  __CVBuffer *v150;
  __CVBuffer *v151;
  __CVBuffer *v152;
  __CVBuffer *v153;
  __CVBuffer *v154;
  __CVBuffer *v155;
  __CVBuffer *v156;
  uint64_t v157;
  int v158;
  __CVBuffer *texture;
  int texturea;
  __int128 v161;
  __CVBuffer *v162;
  int v163;
  CMTime time;
  pthread_t v165;
  CMTime v166;
  CMSampleTimingInfo sampleTiming;
  CMSampleBufferRef sampleBufferOut;
  pthread_attr_t valuePtr;
  uint64_t v170;

  LODWORD(v6) = a4;
  v170 = *MEMORY[0x24BDAC8D0];
  FigCaptureStreamGetFigBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  v157 = DerivedStorage;
  kdebug_trace();
  Mutable = 0;
  if ((*(_BYTE *)(v8 + 153) & 0x20) != 0)
  {
    LogCaptureDeviceEvent(0xDu, v8, DerivedStorage, 0, 0, 0);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 10, MEMORY[0x24BDBD690]);
  }
  value = (void *)v8;
  if ((_DWORD)v6)
  {
    v152 = 0;
    v153 = 0;
    v155 = 0;
    v156 = 0;
    v154 = 0;
    v10 = 0;
    v150 = 0;
    v151 = 0;
    texture = 0;
    v161 = 0uLL;
    v11 = 0;
    v162 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v6 = v6;
    while (2)
    {
      v15 = *(unsigned int *)(a5 + 8);
      switch((int)v15)
      {
        case 0:
          v162 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 1:
          v14 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 2:
          v13 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 5:
          v150 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 6:
          v12 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 7:
          *((_QWORD *)&v161 + 1) = *(_QWORD *)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 8:
          v11 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 9:
          *(_QWORD *)&v161 = *(_QWORD *)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 10:
          texture = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 12:
          v154 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 13:
          v155 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 14:
          v152 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 15:
          v156 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 16:
          v153 = *(__CVBuffer **)a5;
          if (Mutable)
            goto LABEL_36;
          goto LABEL_38;
        case 17:
          v10 = *(__CVBuffer **)a5;
          goto LABEL_35;
        case 19:
          v151 = *(__CVBuffer **)a5;
          if (!Mutable)
            goto LABEL_38;
          goto LABEL_36;
        default:
LABEL_35:
          if (Mutable)
          {
LABEL_36:
            if ((int)v15 <= 20)
              CFArrayAppendValue(Mutable, kCMEventLogger_BufferPoolTypeString[v15]);
          }
LABEL_38:
          a5 += 16;
          if (!--v6)
            goto LABEL_43;
          continue;
      }
    }
  }
  v162 = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  texture = 0;
  v161 = 0uLL;
  v11 = 0;
  v150 = 0;
  v151 = 0;
  v10 = 0;
  v154 = 0;
  v155 = 0;
  v152 = 0;
  v153 = 0;
  v156 = 0;
LABEL_43:
  v16 = v11 != 0;
  v17 = v13 != 0;
  if (v16 && v17)
    v18 = 0;
  else
    v18 = v14;
  if (v16 && v17)
    v19 = 0;
  else
    v19 = v11;
  v20 = v19 == 0;
  if (v13)
    v20 = 1;
  if (v20)
    v21 = v13;
  else
    v21 = v19;
  v22 = v161 != 0;
  if (v161 == 0)
    v23 = v12;
  else
    v23 = 0;
  v144 = v23;
  v25 = v157;
  v24 = texture;
  if (v161 != 0)
    v24 = 0;
  buffer = v24;
  if (*(_BYTE *)(v157 + 523))
  {
    v26 = (uint64_t)value;
    v27 = v10;
    if (v161 != 0 && !v19)
      goto LABEL_66;
    if (!((unint64_t)v162 | (unint64_t)v24 | (unint64_t)v144))
    {
LABEL_67:
      v28 = v21;
      if (waitingForFirstFrame == 1)
      {
        if ((*(_BYTE *)(v26 + 107) & 0x40) != 0)
          H9ISP::H9ISPTimeLogger::end((H9ISP::H9ISPTimeLogger *)&firstFrameTimer, "H9ISPCaptureDevice: Time from stream start to first frame", 0, 1);
        waitingForFirstFrame = 0;
      }
      valuea = v18;
      sampleBufferOut = 0;
      v29 = FigHostTimeToNanoseconds();
      CMTimeMake(&v166, v29, 1000000000);
      v30 = v162;
      if (!*(_DWORD *)(v26 + 104) || !v28)
      {
LABEL_163:
        if (!dword_2542912E0 || !v28)
        {
LABEL_176:
          if (gCaptureDeviceCFPrefs[28 * *(unsigned int *)(v25 + 84) + 80] && v28)
          {
            v96 = (H9ISP::H9ISPFrameMetadata *)operator new();
            H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v96, v28, 1uLL);
            pthread_mutex_lock((pthread_mutex_t *)(v25 + 184));
            AppendMotionMetadata(*(_QWORD *)(v25 + 1384), v96, a2);
            pthread_mutex_unlock((pthread_mutex_t *)(v25 + 184));
            H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v96);
            MEMORY[0x23B7D8B08]();
          }
          else if (!v28)
          {
            v143 = 0;
            v158 = 0;
            texturea = 0;
            goto LABEL_207;
          }
          v97 = (H9ISP::H9ISPFrameMetadata *)operator new();
          v98 = (H9ISP::H9ISPPhotometerManager *)H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v97, v28, 1uLL);
          v99 = *((_QWORD *)v97 + 3);
          if (v99)
            *(_DWORD *)(v25 + 412) = *(_DWORD *)(v99 + 2728);
          v100 = (_WORD *)*((_QWORD *)v97 + 4);
          if (v100)
          {
            *(_WORD *)(v25 + 1272) = v100[86];
            *(_WORD *)(v25 + 1274) = v100[87];
            *(_WORD *)(v25 + 1276) = v100[88];
          }
          v101 = *((_QWORD *)v97 + 2);
          if (v101)
          {
            v98 = *(H9ISP::H9ISPPhotometerManager **)(v26 + 184);
            if (v98)
              v98 = (H9ISP::H9ISPPhotometerManager *)H9ISP::H9ISPPhotometerManager::SetLux(v98, *(_DWORD *)(v101 + 36));
          }
          if (*(_DWORD *)(v25 + 56))
          {
            v102 = *(_QWORD *)v97;
            if (*(_QWORD *)v97)
            {
              v103 = *(unsigned __int16 *)(v102 + 40);
              v104 = *(unsigned __int8 *)(v102 + 42);
              v143 = *(unsigned __int8 *)(v102 + 43);
              if (v103 == 2)
                goto LABEL_194;
              if (v103 == 1)
              {
                MEMORY[0x23B7D87FC](v98);
                v98 = (H9ISP::H9ISPPhotometerManager *)CMNotificationCenterPostNotification();
              }
              if (v143 == 2 && v104)
              {
LABEL_194:
                MEMORY[0x23B7D87FC](v98);
                CMNotificationCenterPostNotification();
              }
            }
            else
            {
              v104 = 0;
              v143 = 0;
            }
            v105 = *((_QWORD *)v97 + 2);
            if (v105)
            {
              texturea = *(unsigned __int8 *)(v105 + 12);
              v158 = *(unsigned __int8 *)(v105 + 15);
            }
            else
            {
              texturea = 0;
              v158 = 0;
            }
          }
          else
          {
            v104 = 0;
            texturea = 0;
            v158 = 0;
            v143 = 0;
          }
          H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v97);
          MEMORY[0x23B7D8B08]();
          v163 = v104;
          if (v104)
          {
            if (*(_QWORD *)(v25 + 1264))
              DisableDisplayStrobeOverlay(v25);
            v106 = *(_QWORD *)(v26 + 184);
            if (v106)
              H9ISP::H9ISPPhotometerManager::PhotometerCommand(v106, 1);
            v107 = 0;
LABEL_208:
            if (!*(_BYTE *)(v25 + 523))
            {
              if (texturea)
                v107 = 0;
              if ((v107 == 1 && !v158 || !*(_DWORD *)(v25 + 56))
                && CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v25 + 16)) >= 2
                && !v150)
              {
                v112 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                v113 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                if (v113)
                {
                  v114 = FigHostTimeToNanoseconds();
                  CMTimeMake(&time, v114, 1000000000);
                  v115 = CMTimeCopyAsDictionary(&time, v112);
                  if (v115)
                  {
                    CFDictionarySetValue(v113, (const void *)*MEMORY[0x24BE10E98], v115);
                    CFRelease(v115);
                  }
                  MEMORY[0x23B7D87FC]();
                  CMNotificationCenterPostNotification();
                  CFRelease(v113);
                }
                else
                {
                  MEMORY[0x23B7D87FC]();
                  CMNotificationCenterPostNotification();
                }
                goto LABEL_407;
              }
            }
            *(_OWORD *)&sampleTiming.duration.value = *MEMORY[0x24BDC0D40];
            v108 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
            sampleTiming.presentationTimeStamp = v166;
            sampleTiming.duration.epoch = v108;
            *(_OWORD *)&sampleTiming.decodeTimeStamp.value = *(_OWORD *)&sampleTiming.duration.value;
            sampleTiming.decodeTimeStamp.epoch = v108;
            if (v30)
            {
              v109 = v30;
              if (!*(_BYTE *)(v25 + 523))
              {
                if (*(_QWORD *)(v25 + 384))
                {
                  if (CVPixelBufferGetWidth(v30) == *(_QWORD *)(v25 + 392)
                    && CVPixelBufferGetHeight(v30) == *(_QWORD *)(v25 + 400))
                  {
LABEL_237:
                    v119 = CFGetAllocator(*(CFTypeRef *)(v25 + 8));
                    v120 = CMSampleBufferCreateForImageBuffer(v119, v30, 1u, 0, 0, *(CMVideoFormatDescriptionRef *)(v25 + 384), &sampleTiming, &sampleBufferOut);
                    v109 = v30;
                    if (v120)
                    {
                      H9ISPLogger(3, "FigSampleBufferCreateForImageBuffer error: %d\n", v120);
                      v121 = 0;
                      goto LABEL_397;
                    }
                    goto LABEL_239;
                  }
                  FigFormatDescriptionRelease();
                  v110 = CFGetAllocator(*(CFTypeRef *)(v25 + 8));
                  CMVideoFormatDescriptionCreateForImageBuffer(v110, v30, (CMVideoFormatDescriptionRef *)(v25 + 384));
                  Width = CVPixelBufferGetWidth(v30);
                }
                else
                {
                  v118 = CFGetAllocator(*(CFTypeRef *)(v25 + 8));
                  CMVideoFormatDescriptionCreateForImageBuffer(v118, v30, (CMVideoFormatDescriptionRef *)(v25 + 384));
                  Width = CVPixelBufferGetWidth(v30);
                }
                *(_QWORD *)(v25 + 392) = Width;
                *(_QWORD *)(v25 + 400) = CVPixelBufferGetHeight(v30);
                goto LABEL_237;
              }
            }
            else
            {
              v109 = buffer;
              if (!buffer)
              {
                v116 = (__CVBuffer *)v161;
                if (*((_QWORD *)&v161 + 1))
                  v116 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                v109 = v144 ? v144 : v116;
                if (!v144 && v161 == 0)
                {
                  Attachment = 0;
LABEL_240:
                  if (valuea
                    && (*(_BYTE *)(v25 + 60)
                     || *(_BYTE *)(v25 + 523)
                     && (*(_BYTE *)(v25 + 600)
                      || *(_BYTE *)(v25 + 720)
                      || *(_BYTE *)(v25 + 840)
                      || *(_BYTE *)(v25 + 960)
                      || *(_BYTE *)(v25 + 1080))))
                  {
                    v122 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                    v121 = v122;
                    if (v122)
                    {
                      if (Attachment)
                        CFDictionarySetValue(v122, (const void *)*MEMORY[0x24BE107C8], Attachment);
                      CFDictionarySetValue(v121, (const void *)*MEMORY[0x24BE107C0], valuea);
                    }
                    if (!v30)
                    {
LABEL_260:
                      v123 = *(_DWORD *)(v25 + 56);
                      if (!*(_BYTE *)(v25 + 523))
                      {
                        if (!v123 || !(v163 | texturea) && (!v158 || !*(_BYTE *)(v25 + 420)))
                        {
                          if (!dword_2542912F8)
                          {
                            v126 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v25 + 16), sampleBufferOut);
                            if (v126)
                              H9ISPLogger(3, "FigBufferQueueEnqueue error: %d\n", v126);
                          }
                          goto LABEL_397;
                        }
                        if (!dword_2542912F8)
                        {
                          v141 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v25 + 24), sampleBufferOut);
                          if (v141)
                          {
                            H9ISPLogger(3, "FigBufferQueueEnqueue (still image buffer queue) error: %d\n", v141);
                            goto LABEL_397;
                          }
                          v123 = *(_DWORD *)(v25 + 56);
                          if (!v123)
                            goto LABEL_276;
                        }
                        v125 = v123 - 1;
                        *(_DWORD *)(v25 + 56) = v125;
                        if (!v125)
LABEL_276:
                          dispatch_source_set_timer(*(dispatch_source_t *)(v25 + 1336), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
LABEL_397:
                        v130 = 0;
LABEL_398:
                        if (sampleBufferOut)
                          FigSampleBufferRelease();
                        if (v121)
                          CFRelease(v121);
                        if (v130)
                          CFRelease(v130);
                        if ((*(_BYTE *)(v26 + 153) & 0x20) != 0)
                        {
                          LogCaptureDeviceEvent(0xDu, v26, v25, CFSTR("FrameReceivedArray"), Mutable, 1);
                          if (Mutable)
                            CFRelease(Mutable);
                        }
LABEL_407:
                        kdebug_trace();
                        return 0;
                      }
                      if (!v123)
                      {
LABEL_294:
                        if (!v27 && !v154 && !v155 && !v152 && !v156 && !v153)
                        {
                          v130 = 0;
                          goto LABEL_321;
                        }
                        v131 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                        v132 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                        v130 = v132;
                        if (!v132)
                          goto LABEL_321;
                        if (v27)
                          CFDictionarySetValue(v132, (const void *)*MEMORY[0x24BE10898], v27);
                        if (v154)
                          CFDictionarySetValue(v130, (const void *)*MEMORY[0x24BE10888], v154);
                        if (v155)
                          CFDictionarySetValue(v130, (const void *)*MEMORY[0x24BE10890], v155);
                        if (v156)
                          CFDictionarySetValue(v130, (const void *)*MEMORY[0x24BE10880], v156);
                        if (v153)
                          CFDictionarySetValue(v130, (const void *)*MEMORY[0x24BE108B0], v153);
                        valuePtr.__sig = 0;
                        v165 = 0;
                        v133 = *(_DWORD *)(v25 + 1380);
                        if (v133 - 2 < 2)
                        {
                          valuePtr.__sig = 0xC018BB54C23A09C5;
                          v134 = 0x3F8831F6889CA9E9;
                        }
                        else
                        {
                          if (v133 > 1)
                          {
LABEL_317:
                            v135 = CFNumberCreate(v131, kCFNumberFloat64Type, &valuePtr);
                            if (v135)
                            {
                              CFDictionarySetValue(v130, (const void *)*MEMORY[0x24BE108A8], v135);
                              CFRelease(v135);
                            }
                            v136 = CFNumberCreate(v131, kCFNumberFloat64Type, &v165);
                            if (v136)
                            {
                              CFDictionarySetValue(v130, (const void *)*MEMORY[0x24BE108A0], v136);
                              CFRelease(v136);
                            }
LABEL_321:
                            if (v30 && *(_BYTE *)(v25 + 528) && *(_QWORD *)(v25 + 608))
                            {
                              if (v121 && *(_BYTE *)(v25 + 600))
                                CVBufferSetAttachment(v30, (CFStringRef)*MEMORY[0x24BE10838], v121, kCVAttachmentMode_ShouldPropagate);
                              if (v130)
                                CVBufferSetAttachment(v30, (CFStringRef)*MEMORY[0x24BE107F0], v130, kCVAttachmentMode_ShouldPropagate);
                              if (!dword_2542912F8)
                                (*(void (**)(void))(*(_QWORD *)(v25 + 608) + 16))();
                            }
                            v137 = v28;
                            v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                            if (buffer && *(_BYTE *)(v25 + 648) && *(_QWORD *)(v25 + 728))
                            {
                              if (v121 && *(_BYTE *)(v25 + 720))
                              {
                                CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x24BE10838], v121, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                              if (v130)
                              {
                                CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x24BE107F0], v130, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                              if (!dword_2542912F8)
                              {
                                (*(void (**)(void))(*(_QWORD *)(v25 + 728) + 16))();
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                            }
                            if (v144 && *(_BYTE *)(v25 + 768) && *(_QWORD *)(v25 + 848))
                            {
                              if (Attachment)
                              {
                                CVBufferSetAttachment(v144, (CFStringRef)*MEMORY[0x24BE10818], Attachment, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                              if (v121 && *(_BYTE *)(v25 + 840))
                              {
                                CVBufferSetAttachment(v144, (CFStringRef)*MEMORY[0x24BE10838], v121, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                              if (!dword_2542912F8)
                              {
                                (*(void (**)(void))(*(_QWORD *)(v25 + 848) + 16))();
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                            }
                            if (v138 && *(_BYTE *)(v25 + 888) && *(_QWORD *)(v25 + 968))
                            {
                              if (v121 && *(_BYTE *)(v25 + 960))
                              {
                                CVBufferSetAttachment(v138, (CFStringRef)*MEMORY[0x24BE10838], v121, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                                v138 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
                              }
                              if (v151
                                && (*(_BYTE *)(v25 + 888) && *(_BYTE *)(v25 + 984)
                                 || *(_BYTE *)(v25 + 1008) && *(_BYTE *)(v25 + 1104)))
                              {
                                CVBufferSetAttachment(v138, (CFStringRef)*MEMORY[0x24BE10860], v151, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                              }
                              if (v158)
                                v139 = *(_BYTE *)(v25 + 420) == 0;
                              else
                                v139 = 0;
                              if (!v139 && !dword_2542912F8)
                              {
                                (*(void (**)(void))(*(_QWORD *)(v25 + 968) + 16))();
                                v137 = v28;
                              }
                            }
                            if ((_QWORD)v161 && *(_BYTE *)(v25 + 1008) && *(_QWORD *)(v25 + 1088))
                            {
                              if (v121 && *(_BYTE *)(v25 + 1080))
                              {
                                CVBufferSetAttachment((CVBufferRef)v161, (CFStringRef)*MEMORY[0x24BE10838], v121, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                              }
                              if (v151
                                && (*(_BYTE *)(v25 + 888) && *(_BYTE *)(v25 + 984)
                                 || *(_BYTE *)(v25 + 1008) && *(_BYTE *)(v25 + 1104)))
                              {
                                CVBufferSetAttachment((CVBufferRef)v161, (CFStringRef)*MEMORY[0x24BE10860], v151, kCVAttachmentMode_ShouldPropagate);
                                v137 = v28;
                              }
                              if (v158)
                                v140 = *(_BYTE *)(v25 + 420) == 0;
                              else
                                v140 = 0;
                              if (!v140 && !dword_2542912F8)
                              {
                                (*(void (**)(void))(*(_QWORD *)(v25 + 1088) + 16))();
                                v137 = v28;
                              }
                            }
                            if (!valuea || !*(_BYTE *)(v25 + 1128) || !*(_QWORD *)(v25 + 1208))
                              goto LABEL_398;
                            if (!(v163 | texturea))
                            {
                              if (v158)
                              {
                                if (!*(_BYTE *)(v25 + 420))
                                  goto LABEL_398;
                              }
                              else if (v143 != 2)
                              {
                                goto LABEL_398;
                              }
                            }
                            if (v137)
                              CVBufferSetAttachment(valuea, CFSTR("RawMetaData"), v137, kCVAttachmentMode_ShouldPropagate);
                            if (!dword_2542912F8)
                              (*(void (**)(void))(*(_QWORD *)(v25 + 1208) + 16))();
                            goto LABEL_398;
                          }
                          valuePtr.__sig = 0xC016CB5484497E2FLL;
                          v134 = 0x3F87D12EAE7A3740;
                        }
                        v165 = (pthread_t)v134;
                        goto LABEL_317;
                      }
                      if (v163)
                        v124 = 1;
                      else
                        v124 = v22;
                      if ((v124 & 1) != 0 || texturea)
                      {
                        v127 = *(unsigned __int8 *)(v25 + 888);
                        if (*((_QWORD *)&v161 + 1) && *(_BYTE *)(v25 + 888)
                          || (v128 = *(unsigned __int8 *)(v25 + 1008), *(_BYTE *)(v25 + 1008)) && (_QWORD)v161)
                        {
LABEL_292:
                          v129 = v123 - 1;
                          *(_DWORD *)(v25 + 56) = v129;
                          if (!v129)
                            dispatch_source_set_timer(*(dispatch_source_t *)(v25 + 1336), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
                          goto LABEL_294;
                        }
                      }
                      else
                      {
                        if (v158)
                        {
                          if (!*(_BYTE *)(v25 + 420))
                            goto LABEL_294;
                        }
                        else if (!*(_BYTE *)(v25 + 1128) || v143 != 2)
                        {
                          goto LABEL_294;
                        }
                        v127 = *(unsigned __int8 *)(v25 + 888);
                        v128 = *(unsigned __int8 *)(v25 + 1008);
                      }
                      if ((!valuea || !*(_BYTE *)(v25 + 1128))
                        && (v127 | v128 | *(unsigned __int8 *)(v25 + 1128)
                         || !((unint64_t)v30 | (unint64_t)buffer)))
                      {
                        goto LABEL_294;
                      }
                      goto LABEL_292;
                    }
                  }
                  else
                  {
                    v121 = 0;
                    if (!v30)
                      goto LABEL_260;
                  }
                  if (sampleBufferOut)
                  {
                    if (Attachment)
                      CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x24BE10818], Attachment, 1u);
                    if (v121)
                      CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x24BE10838], v121, 1u);
                  }
                  goto LABEL_260;
                }
              }
            }
LABEL_239:
            Attachment = CVBufferGetAttachment(v109, (CFStringRef)*MEMORY[0x24BE10818], 0);
            goto LABEL_240;
          }
LABEL_207:
          v163 = 0;
          v107 = 1;
          goto LABEL_208;
        }
        v93 = (H9ISP::H9ISPFrameMetadata *)operator new();
        H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v93, v28, 1uLL);
        v94 = *((_QWORD *)v93 + 1);
        if (v94 && *(_WORD *)(v94 + 4116))
        {
          v95 = (__CVBuffer *)v161;
          if (*((_QWORD *)&v161 + 1))
            v95 = (__CVBuffer *)*((_QWORD *)&v161 + 1);
          if (v30)
          {
            v95 = v30;
          }
          else if (v161 == 0)
          {
            v95 = v144;
            if (buffer)
              goto LABEL_174;
          }
          texture = v95;
          if (v95)
          {
LABEL_174:
            CVPixelBufferRetain(texture);
            v165 = 0;
            pthread_attr_init(&valuePtr);
            pthread_attr_setdetachstate(&valuePtr, 1);
            pthread_create(&v165, &valuePtr, (void *(__cdecl *)(void *))H9ISPDebugFrameFileWriter, texture);
            pthread_attr_destroy(&valuePtr);
          }
        }
        H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v93);
        MEMORY[0x23B7D8B08]();
        goto LABEL_176;
      }
      v31 = (H9ISP::H9ISPFrameMetadata *)operator new();
      H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v31, v28, 1uLL);
      v32 = operator new[]();
      v33 = (char *)v32;
      *(_OWORD *)(v32 + 480) = 0u;
      *(_OWORD *)(v32 + 496) = 0u;
      *(_OWORD *)(v32 + 448) = 0u;
      *(_OWORD *)(v32 + 464) = 0u;
      *(_OWORD *)(v32 + 416) = 0u;
      *(_OWORD *)(v32 + 432) = 0u;
      *(_OWORD *)(v32 + 384) = 0u;
      *(_OWORD *)(v32 + 400) = 0u;
      *(_OWORD *)(v32 + 352) = 0u;
      *(_OWORD *)(v32 + 368) = 0u;
      *(_OWORD *)(v32 + 320) = 0u;
      *(_OWORD *)(v32 + 336) = 0u;
      *(_OWORD *)(v32 + 288) = 0u;
      *(_OWORD *)(v32 + 304) = 0u;
      *(_OWORD *)(v32 + 256) = 0u;
      *(_OWORD *)(v32 + 272) = 0u;
      *(_OWORD *)(v32 + 224) = 0u;
      *(_OWORD *)(v32 + 240) = 0u;
      *(_OWORD *)(v32 + 192) = 0u;
      *(_OWORD *)(v32 + 208) = 0u;
      *(_OWORD *)(v32 + 160) = 0u;
      *(_OWORD *)(v32 + 176) = 0u;
      *(_OWORD *)(v32 + 128) = 0u;
      *(_OWORD *)(v32 + 144) = 0u;
      *(_OWORD *)(v32 + 96) = 0u;
      *(_OWORD *)(v32 + 112) = 0u;
      *(_OWORD *)(v32 + 64) = 0u;
      *(_OWORD *)(v32 + 80) = 0u;
      *(_OWORD *)(v32 + 32) = 0u;
      *(_OWORD *)(v32 + 48) = 0u;
      *(_OWORD *)v32 = 0u;
      *(_OWORD *)(v32 + 16) = 0u;
      v34 = *(_DWORD *)(v26 + 104);
      if ((v34 & 1) != 0)
      {
        v36 = *((_QWORD *)v31 + 37);
        v35 = (char *)v32;
        if (v36)
        {
          v37 = strlen((const char *)v32);
          snprintf(v33, 512 - v37, "frameCount=%d ", *(_DWORD *)(v36 + 12));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      else
      {
        v35 = (char *)v32;
      }
      if ((v34 & 2) != 0)
      {
        v38 = (_DWORD *)*((_QWORD *)v31 + 2);
        if (v38)
        {
          v39 = strlen(v33);
          snprintf(v35, 512 - v39, "aeShutterTime=%d ", *v38);
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 4) != 0)
      {
        v40 = *((_QWORD *)v31 + 2);
        if (v40)
        {
          v41 = strlen(v33);
          snprintf(v35, 512 - v41, "aeAGC=0x%04X ", *(unsigned __int16 *)(v40 + 4));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 8) != 0)
      {
        v42 = *((_QWORD *)v31 + 2);
        if (v42)
        {
          v43 = strlen(v33);
          snprintf(v35, 512 - v43, "ispDGain=0x%04X ", *(unsigned __int16 *)(v42 + 6));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x10) != 0)
      {
        v44 = *((_QWORD *)v31 + 2);
        if (v44)
        {
          v45 = strlen(v33);
          snprintf(v35, 512 - v45, "sensorDGain=0x%04X ", *(unsigned __int16 *)(v44 + 8));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x20) != 0)
      {
        v46 = *((_QWORD *)v31 + 3);
        if (v46)
        {
          v47 = strlen(v33);
          snprintf(v35, 512 - v47, "curScanPosition=0x%04X afFocusMoving=0x%02X ", *(unsigned __int16 *)(v46 + 26), *(unsigned __int16 *)(v46 + 424));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x40) != 0)
      {
        v48 = *((_QWORD *)v31 + 37);
        if (v48)
        {
          v49 = strlen(v33);
          snprintf(v35, 512 - v49, "firmwareTimestamp=0x%08X ptsInNanoSeconds=0x%016llX", *(_QWORD *)(v48 + 4), v29);
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x80) != 0)
      {
        v50 = *((_QWORD *)v31 + 3);
        if (v50)
        {
          v51 = 512 - strlen(v33);
          snprintf(v35, v51, "afStable=%d ", *(_WORD *)(v50 + 24) != 0);
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x100) != 0)
      {
        v52 = (_WORD *)*((_QWORD *)v31 + 3);
        if (v52)
        {
          v53 = 512 - strlen(v33);
          if (v52[11] || v52[213] || v52[1360])
            v54 = 2;
          else
            v54 = 4;
          snprintf(v35, v53, "afStatus=%d ", v54);
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x200) != 0)
      {
        v55 = *((_QWORD *)v31 + 2);
        if (v55)
        {
          v56 = strlen(v33);
          snprintf(v35, 512 - v56, "aeStable=%d aeLimitsReached=%d ", *(_DWORD *)(v55 + 16), *(_DWORD *)(v55 + 584));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x400) != 0)
      {
        v57 = *((_QWORD *)v31 + 4);
        if (v57)
        {
          v58 = strlen(v33);
          snprintf(v35, 512 - v58, "awbStable=%d ", *(unsigned __int16 *)(v57 + 4));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x800) != 0)
      {
        v59 = (_QWORD *)*((_QWORD *)v31 + 3);
        if (v59)
        {
          v60 = strlen(v33);
          snprintf(v35, 512 - v60, "currentFocusScore=0x%016llX ", *v59);
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x1000) != 0)
      {
        v61 = (unsigned __int8 *)*((_QWORD *)v31 + 2);
        if (v61)
        {
          v62 = strlen(v33);
          snprintf(v35, 512 - v62, "bracketingCapture=%d bracketingCaptureCount=%d bracketingCaptureLast=%d preBracketing=%d ", v61[12], v61[13], v61[14], v61[15]);
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x2000) != 0 && *(_QWORD *)v31)
      {
        v63 = strlen(v33);
        snprintf(v35, 512 - v63, "flashCaptureSequence=%d flashCaptureCount=%d flashCapture=%d captureType=%d", *(unsigned __int8 *)(*(_QWORD *)v31 + 72), *(unsigned __int16 *)(*(_QWORD *)v31 + 40), *(unsigned __int8 *)(*(_QWORD *)v31 + 42), *(unsigned __int8 *)(*(_QWORD *)v31 + 43));
        v35 = &v33[strlen(v33)];
        v34 = *(_DWORD *)(v26 + 104);
      }
      if ((v34 & 0x4000) != 0)
      {
        v64 = *((_QWORD *)v31 + 2);
        if (v64)
        {
          v65 = strlen(v33);
          snprintf(v35, 512 - v65, "luxLevel=%d ", *(_DWORD *)(v64 + 36));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x8000) != 0)
      {
        v66 = *((_QWORD *)v31 + 2);
        if (v66)
        {
          v67 = strlen(v33);
          snprintf(v35, 512 - v67, "curSceneBrightnessEstimate=0x%08X ", *(_DWORD *)(v66 + 28));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x20000) != 0)
      {
        v68 = *((_QWORD *)v31 + 7);
        if (v68)
        {
          v69 = strlen(v33);
          snprintf(v35, 512 - v69, "motionLUTUpdated=%d ", *(_DWORD *)(v68 + 52));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      if ((v34 & 0x40000) != 0 && *(_QWORD *)v31)
      {
        v70 = strlen(v33);
        snprintf(v35, 512 - v70, "sensorTemp=%d ", *(unsigned __int16 *)(*(_QWORD *)v31 + 336));
        v35 = &v33[strlen(v33)];
        v34 = *(_DWORD *)(v26 + 104);
      }
      if ((v34 & 0x80000) != 0)
      {
        v71 = strlen(v33);
        snprintf(v35, 512 - v71, "systemTime=0x%016llX ", a2);
        v35 = &v33[strlen(v33)];
        v34 = *(_DWORD *)(v26 + 104);
        if ((v34 & 0x100000) == 0)
        {
LABEL_134:
          if ((v34 & 0x200000) == 0)
          {
LABEL_143:
            if ((v34 & 0x400000) != 0)
            {
              v75 = (_DWORD *)*((_QWORD *)v31 + 4);
              if (v75)
              {
                v76 = strlen(v33);
                LODWORD(v77) = v75[24];
                LODWORD(v78) = v75[25];
                LODWORD(v79) = v75[26];
                LODWORD(v80) = v75[27];
                snprintf(v35, 512 - v76, "rawAverage[Gr]=%f rawAverage[R]=%f rawAverage[B]=%f rawAverage[Gb]=%f  ", (double)v77 * 0.00390625, (double)v78 * 0.00390625, (double)v79 * 0.00390625, (double)v80 * 0.00390625);
                v35 = &v33[strlen(v33)];
                v34 = *(_DWORD *)(v26 + 104);
              }
            }
            if ((v34 & 0x10000) != 0 && *(_QWORD *)v31)
            {
              v81 = strlen(v33);
              snprintf(v35, 512 - v81, "motionDataStatus=0x%08X sphereStatus=0x%08X ", *(_DWORD *)(*(_QWORD *)v31 + 420), *(_DWORD *)(*(_QWORD *)v31 + 424));
              v35 = &v33[strlen(v33)];
              v34 = *(_DWORD *)(v26 + 104);
            }
            if ((v34 & 0x1000000) != 0)
            {
              v82 = *((_QWORD *)v31 + 3);
              if (v82)
              {
                v83 = strlen(v33);
                snprintf(v35, 512 - v83, "manualFocusCommandTag=0x%08X ", *(_DWORD *)(v82 + 2724));
                v35 = &v33[strlen(v33)];
              }
              v84 = *((_QWORD *)v31 + 4);
              if (v84)
              {
                v85 = strlen(v33);
                snprintf(v35, 512 - v85, "manualAWBGainCommandTag=0x%08X manualCCTCommandTag=0x%08X ", *(_DWORD *)(v84 + 148), *(_DWORD *)(v84 + 152));
                v35 = &v33[strlen(v33)];
              }
              v86 = *((_QWORD *)v31 + 2);
              if (v86)
              {
                v87 = strlen(v33);
                snprintf(v35, 512 - v87, "expBiasCommandTag=0x%08X manualExposureGainCommandTag=0x%08X ", *(_DWORD *)(v86 + 1708), *(_DWORD *)(v86 + 1712));
                v35 = &v33[strlen(v33)];
              }
              if ((*(_BYTE *)(v26 + 107) & 2) != 0)
              {
                v88 = (int *)*((_QWORD *)v31 + 7);
                if (v88)
                {
                  v89 = strlen(v33);
                  snprintf(v35, 512 - v89, "sensorBlkAvg: [Gr]=%f [R]=%f [B]=%f [Gb]=%f [Mono]=%f ", (double)v88[44] * 0.03125, (double)v88[45] * 0.03125, (double)v88[46] * 0.03125, (double)v88[47] * 0.03125, (double)v88[48] * 0.03125);
                  v90 = strlen(v33);
                  v91 = (int *)*((_QWORD *)v31 + 7);
                  v25 = v157;
                  snprintf(&v33[v90], 512 - v90, "sensorBlkOffset: [Gr]=%f [R]=%f [B]=%f [Gb]=%f [Mono]=%f ", (double)v91[49] * 0.03125, (double)v91[50] * 0.03125, (double)v91[51] * 0.03125, (double)v91[52] * 0.03125, (double)v91[53] * 0.03125);
                }
              }
            }
            if (dword_25429129C)
            {
              v92 = (FILE **)MEMORY[0x24BDAC8E8];
              fprintf((FILE *)*MEMORY[0x24BDAC8E8], "%s\n", v33);
              fflush(*v92);
            }
            else
            {
              syslog(6, "%s", v33);
            }
            v30 = v162;
            v22 = v161 != 0;
            MEMORY[0x23B7D8AF0](v33, 0x1000C8077774924);
            H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v31);
            MEMORY[0x23B7D8B08]();
            goto LABEL_163;
          }
LABEL_141:
          if (*(_QWORD *)v31)
          {
            v74 = strlen(v33);
            snprintf(v35, 512 - v74, "sensorConfigurationIndex=%d ", *(unsigned __int8 *)(*(_QWORD *)v31 + 46));
            v35 = &v33[strlen(v33)];
            v34 = *(_DWORD *)(v26 + 104);
          }
          goto LABEL_143;
        }
      }
      else if ((v34 & 0x100000) == 0)
      {
        goto LABEL_134;
      }
      if (*(_QWORD *)v31)
      {
        v72 = *((_QWORD *)v31 + 1);
        if (v72)
        {
          v73 = strlen(v33);
          snprintf(v35, 512 - v73, "crop=%d/%d/%d/%d scale=%d/%d ", *(unsigned __int16 *)(*(_QWORD *)v31 + 52), *(unsigned __int16 *)(*(_QWORD *)v31 + 54), *(unsigned __int16 *)(*(_QWORD *)v31 + 56), *(unsigned __int16 *)(*(_QWORD *)v31 + 58), *(unsigned __int16 *)(v72 + 4), *(unsigned __int16 *)(v72 + 6));
          v35 = &v33[strlen(v33)];
          v34 = *(_DWORD *)(v26 + 104);
        }
      }
      v25 = v157;
      if ((v34 & 0x200000) == 0)
        goto LABEL_143;
      goto LABEL_141;
    }
  }
  else
  {
    v26 = (uint64_t)value;
    v27 = v10;
    if (!v162)
      goto LABEL_67;
  }
  if (v21)
    goto LABEL_67;
LABEL_66:
  H9ISPLogger(4, "MyH9ISPFrameReceivedProc - Didn't get YUV+META buffers\n");
  MyH9ISPFrameReceiverMessageProc(5, 0, 0, 0, 0, a1);
  kdebug_trace();
  return 0;
}

void sub_2357ED6B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C40D32E3BE5);
  _Unwind_Resume(a1);
}

void MyH9ISPFrameReceiverMessageProc(int a1, unsigned int a2, int a3, void *a4, void *a5, void *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const __CFAllocator *v18;
  __CFDictionary *Mutable;
  int64_t v20;
  CFDictionaryRef v21;
  CFDictionaryRef v22;
  const void **v23;
  const __CFAllocator *v24;
  int64_t v25;
  CFDictionaryRef v26;
  CFDictionaryRef v27;
  const void **v28;
  uint64_t v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  const void *v32;
  const void *v33;
  CMTime v34;
  CMTime time;

  H9ISPLogger(6, "MyH9ISPFrameReceiverMessageProc: msg = 0x%08X\n", a1);
  FigCaptureStreamGetFigBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = CMBaseObjectGetDerivedStorage();
  if (a1 == 2)
  {
    *(_BYTE *)(DerivedStorage + 408) = 0;
    return;
  }
  v13 = v12;
  if (a1 == 1)
  {
    v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v20 = FigHostTimeToNanoseconds();
      CMTimeMake(&time, v20, 1000000000);
      v21 = CMTimeCopyAsDictionary(&time, v18);
      if (v21)
      {
        v22 = v21;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10E98], v21);
        CFRelease(v22);
      }
    }
    MEMORY[0x23B7D87FC]();
    v23 = (const void **)MEMORY[0x24BE10EB0];
    goto LABEL_43;
  }
  if (!a1)
  {
    MEMORY[0x23B7D87FC]();
    v14 = (const void *)*MEMORY[0x24BE10EC0];
    CMNotificationCenterPostNotification();
    if ((*(_BYTE *)(v13 + 153) & 0x40) != 0)
    {
      v15 = v13;
      v16 = DerivedStorage;
      v17 = v14;
LABEL_6:
      LogCaptureDeviceEvent(0xEu, v15, v16, v17, 0, 1);
      return;
    }
    return;
  }
  if ((a1 - 3) <= 2)
  {
    v24 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v25 = FigHostTimeToNanoseconds();
      CMTimeMake(&v34, v25, 1000000000);
      v26 = CMTimeCopyAsDictionary(&v34, v24);
      if (v26)
      {
        v27 = v26;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10E90], v26);
        CFRelease(v27);
      }
      if (a3 | a2)
      {
        if ((a1 - 3) >= 2 && !*(_BYTE *)(DerivedStorage + 408)
          || *(_DWORD *)(DerivedStorage + 100) == 400)
        {
          goto LABEL_42;
        }
        v28 = (const void **)MEMORY[0x24BE11800];
      }
      else
      {
        v28 = (const void **)MEMORY[0x24BE11808];
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE10E88], *v28);
    }
LABEL_42:
    MEMORY[0x23B7D87FC]();
    v23 = (const void **)MEMORY[0x24BE10EA0];
LABEL_43:
    v33 = *v23;
    CMNotificationCenterPostNotification();
    if ((*(_BYTE *)(v13 + 153) & 0x40) != 0)
      LogCaptureDeviceEvent(0xEu, v13, DerivedStorage, v33, Mutable, 1);
    if (Mutable)
      CFRelease(Mutable);
    return;
  }
  if (a1 == 7)
  {
    if (a2 <= 0xA && (((1 << a2) & 0x6C1) != 0 || a2 == 1 && *(_BYTE *)(DerivedStorage + 1128)))
    {
      v30 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (v30)
      {
        v31 = v30;
        if (((0x6C3u >> a2) & 1) != 0)
          CFDictionarySetValue(v30, (const void *)*MEMORY[0x24BE10F18], **((const void ***)&unk_2506DB020 + (int)a2));
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x24BE10F20], a4);
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x24BE10F28], a5);
        MEMORY[0x23B7D87FC]();
        v32 = (const void *)*MEMORY[0x24BE10EC8];
        CMNotificationCenterPostNotification();
        if ((*(_BYTE *)(v13 + 153) & 0x40) != 0)
          LogCaptureDeviceEvent(0xEu, v13, DerivedStorage, v32, 0, 1);
        CFRelease(v31);
      }
    }
  }
  else if (a1 == 6)
  {
    if (*(_DWORD *)(DerivedStorage + 56) && *(_QWORD *)(DerivedStorage + 1264))
      DisableDisplayStrobeOverlay(DerivedStorage);
    v29 = *(_QWORD *)(v13 + 184);
    if (v29)
      v29 = H9ISP::H9ISPPhotometerManager::PhotometerCommand(v29, 1);
    if (dword_2542912E4 == -1)
    {
      MEMORY[0x23B7D87FC](v29);
      CMNotificationCenterPostNotification();
    }
    if ((*(_BYTE *)(v13 + 153) & 0x40) != 0)
    {
      v17 = (const void *)*MEMORY[0x24BE10EB8];
      v15 = v13;
      v16 = DerivedStorage;
      goto LABEL_6;
    }
  }
}

uint64_t H9ISPDebugFrameFileWriter(__CVBuffer *a1)
{
  tm *v2;
  _BOOL4 v3;
  const char *v4;
  FILE *v5;
  FILE *v6;
  size_t BytesPerRow;
  size_t Width;
  size_t Height;
  char *BaseAddress;
  char *v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  BOOL v15;
  size_t BytesPerRowOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  char *BaseAddressOfPlane;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  time_t v30;
  char __str[8];
  char __dst[1028];
  char __source[20];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  pthread_setname_np("H9ISPDebugFrameFileWriter");
  if (a1)
  {
    v30 = 0;
    setlocale(0, "");
    time(&v30);
    v2 = localtime(&v30);
    strftime(__source, 0x14uLL, "%m%d%g_%H%M%S", v2);
    snprintf(__str, 7uLL, "-%d", H9ISPDebugFrameFileWriter(__CVBuffer *)::savedFrameCounter);
    ++H9ISPDebugFrameFileWriter(__CVBuffer *)::savedFrameCounter;
    v3 = CVPixelBufferGetPixelFormatType(a1) == 2037741171 || CVPixelBufferGetPixelFormatType(a1) == 2037741158;
    strcpy(__dst, "/var/mobile/Media/DCIM/");
    strlcat(__dst, __source, 0x400uLL);
    strlcat(__dst, __str, 0x400uLL);
    if (v3)
      v4 = ".422";
    else
      v4 = ".420";
    strlcat(__dst, v4, 0x400uLL);
    v5 = fopen(__dst, "wb");
    if (v5)
    {
      v6 = v5;
      CVPixelBufferLockBaseAddress(a1, 0);
      if (v3)
      {
        BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        Width = CVPixelBufferGetWidth(a1);
        Height = CVPixelBufferGetHeight(a1);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        if (Height)
        {
          v11 = BaseAddress;
          v12 = 0;
          v13 = 2 * Width;
          v14 = 1;
          do
          {
            fwrite(&v11[v12 * BytesPerRow], v13, 1uLL, v6);
            v12 = v14;
            v15 = Height > v14++;
          }
          while (v15);
        }
      }
      else
      {
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
        if (HeightOfPlane)
        {
          v20 = BaseAddressOfPlane;
          v21 = 0;
          v22 = 1;
          do
          {
            fwrite(&v20[v21 * BytesPerRowOfPlane], WidthOfPlane, 1uLL, v6);
            v21 = v22;
            v15 = HeightOfPlane > v22++;
          }
          while (v15);
        }
        v23 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
        v24 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
        v25 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
        if (v24)
        {
          v26 = v25;
          v27 = 0;
          v28 = 1;
          do
          {
            fwrite(&v26[v27 * v23], WidthOfPlane, 1uLL, v6);
            v27 = v28;
            v15 = v24 > v28++;
          }
          while (v15);
        }
      }
      CVPixelBufferUnlockBaseAddress(a1, 0);
      fclose(v6);
    }
    CVPixelBufferRelease(a1);
  }
  return 0;
}

uint64_t DisableDisplayStrobeOverlay(uint64_t a1)
{
  uint64_t result;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 1264);
  if (result)
  {
    H9ISPDisplayStrobeSetScreenBrightness(result, 1);
    memset(v3, 0, sizeof(v3));
    return H9ISPDisplayStrobeSetScreenColor(*(_QWORD *)(a1 + 1264), (const CGFloat *)v3);
  }
  return result;
}

BOOL ConfigSupportsContextSwitchCaptures(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  _BOOL8 result;
  uint64_t v13;
  unsigned int v14;
  _WORD v15[58];
  _WORD __dst[30];
  int v17;
  __int16 v18;
  _BYTE v19[200];
  _BYTE v20[200];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 112);
  if (v8 < v9)
    v9 = 0;
  if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 84 * (v8 - v9) + 16), __dst, v20))
  {
    v10 = 0;
    v11 = 0;
LABEL_5:
    result = 0;
    goto LABEL_6;
  }
  v10 = __dst[0];
  v11 = __dst[1];
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_DWORD *)(a1 + 84);
  if (!*(_DWORD *)(*(_QWORD *)(v13 + 56) + 80 * v14 + 48))
    goto LABEL_5;
  if ((v18 & 1) != 0)
  {
    result = 1;
  }
  else
  {
    if (v17 == 0xFFFF || H9ISP::H9ISPDevice::GetCameraConfig(v13, v14, v17, v15, v19))
      goto LABEL_5;
    result = v15[0] > __dst[0];
    if (v15[0] > __dst[0])
    {
      v10 = v15[0];
      v11 = v15[1];
    }
  }
LABEL_6:
  if (a3)
    *a3 = v10;
  if (a4)
    *a4 = v11;
  return result;
}

BOOL IsPropertySupportedForStream(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  _BYTE *v3;
  int v4;

  v3 = *(_BYTE **)(*(_QWORD *)(a3 + 24) + 56);
  v4 = *(_DWORD *)(a1 + 32);
  return ((v4 & 1) == 0 || a2[126] || *(_DWORD *)&v3[80 * a2[21] + 36])
      && ((v4 & 2) == 0 || a2[125])
      && ((v4 & 4) == 0 || a2[127])
      && ((v4 & 0x10) == 0 || v3[411])
      && ((v4 & 0x20) == 0 || v3[408])
      && ((v4 & 0x200) == 0 || a2[25] == 400)
      && ((v4 & 0x800) == 0 || *(_DWORD *)&v3[80 * a2[21] + 16] == 1919251564)
      && ((v4 & 0x100) == 0 || a2[128])
      && ((v4 & 0x400) == 0 || v3[412] && *(_DWORD *)&v3[80 * a2[21] + 72]);
}

void addPropertyDictionaryToPropertiesDictionary(__CFDictionary *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFBoolean *a5)
{
  CFIndex v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  void *keys[3];
  void *values[4];

  values[3] = *(void **)MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  memset(values, 0, 24);
  memset(keys, 0, sizeof(keys));
  if (!a3)
  {
    v8 = 0;
    if (!a4)
      goto LABEL_5;
    goto LABEL_4;
  }
  keys[0] = *(void **)MEMORY[0x24BE105E0];
  values[0] = (void *)a3;
  v8 = 1;
  if (a4)
  {
LABEL_4:
    keys[v8] = (void *)*MEMORY[0x24BE105B8];
    values[v8++] = (void *)a4;
  }
LABEL_5:
  if (a5)
  {
    keys[v8] = (void *)*MEMORY[0x24BE105D8];
    values[v8++] = a5;
  }
  v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const void **)keys, (const void **)values, v8, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (v9)
  {
    v10 = v9;
    CFDictionaryAddValue(a1, a2, v9);
    CFRelease(v10);
  }
}

BOOL H9ISPResetVideoOutputConfigurationsForNewSelectedFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  double v18;
  double v19;
  int v20;
  int v21;
  double v22;
  double v23;
  _BOOL8 result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int16 __dst;
  unsigned __int16 v30;
  _BYTE v31[200];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 548;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_DWORD *)(a1 + 112);
  if (v5 < v6)
    v6 = 0;
  H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 84 * (v5 - v6) + 16), &__dst, v31);
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 2037741171;
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 40);
  v9 = v7 + 84 * v8;
  *(_QWORD *)v4 = *(_QWORD *)(v9 + 4);
  v10 = *(_QWORD *)(v9 + 20);
  v11.i64[0] = v10;
  v11.i64[1] = HIDWORD(v10);
  *(float64x2_t *)(a1 + 560) = vcvtq_f64_u64(v11);
  v12 = *(_QWORD *)(v9 + 28);
  v11.i64[0] = v12;
  v11.i64[1] = HIDWORD(v12);
  *(float64x2_t *)(a1 + 576) = vcvtq_f64_u64(v11);
  *(_QWORD *)(a1 + 592) = 3;
  *(_DWORD *)(a1 + 604) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 636) = 0;
  *(_DWORD *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 599) = 0;
  *(_DWORD *)(a1 + 664) = 2037741171;
  *(_QWORD *)(v4 + 120) = *(_QWORD *)(v9 + 4);
  v13 = *(_QWORD *)(v9 + 20);
  v11.i64[0] = v13;
  v11.i64[1] = HIDWORD(v13);
  *(float64x2_t *)(v4 + 132) = vcvtq_f64_u64(v11);
  v14 = *(_QWORD *)(v9 + 28);
  v11.i64[0] = v14;
  v11.i64[1] = HIDWORD(v14);
  *(float64x2_t *)(v4 + 148) = vcvtq_f64_u64(v11);
  *(_QWORD *)(a1 + 712) = 3;
  *(_DWORD *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 719) = 0;
  *(_DWORD *)(a1 + 784) = 2037741171;
  if (*(_BYTE *)(v9 + 36))
  {
    v15 = v7 + 84 * v8;
    v16 = *(_DWORD *)(v15 + 40);
    v17 = *(_DWORD *)(v15 + 44);
    v18 = (double)v16;
    v19 = (double)v17;
    v20 = __dst;
    v21 = v30;
    v22 = (double)__dst;
    v23 = (double)v30;
  }
  else
  {
    v20 = __dst;
    v21 = v30;
    v22 = (double)__dst;
    v23 = (double)v30;
    v16 = __dst;
    v17 = v30;
    v18 = v22;
    v19 = v23;
  }
  *(_DWORD *)(a1 + 788) = v16;
  *(_DWORD *)(a1 + 792) = v17;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(double *)(a1 + 816) = v18;
  *(double *)(a1 + 824) = v19;
  *(_QWORD *)(a1 + 832) = 3;
  *(_DWORD *)(a1 + 844) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 876) = 0;
  *(_BYTE *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 839) = 0;
  *(_DWORD *)(a1 + 904) = 2037741171;
  *(_DWORD *)(a1 + 908) = v20;
  *(_DWORD *)(a1 + 912) = v21;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = 0;
  *(double *)(a1 + 936) = v22;
  *(double *)(a1 + 944) = v23;
  *(_QWORD *)(a1 + 952) = 3;
  *(_DWORD *)(a1 + 964) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 996) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_DWORD *)(a1 + 959) = 0;
  *(_DWORD *)(a1 + 1024) = 2037741171;
  *(_DWORD *)(a1 + 1028) = v20;
  *(_DWORD *)(a1 + 1032) = v21;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(double *)(a1 + 1056) = v22;
  *(double *)(a1 + 1064) = v23;
  *(_DWORD *)(a1 + 1072) = 3;
  *(_DWORD *)(a1 + 1084) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1116) = 0;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1079) = 0;
  *(_DWORD *)(a1 + 1076) = 0;
  v27 = 0;
  v28 = 0;
  result = ConfigSupportsContextSwitchCaptures(a1, a2, &v28, &v27);
  if (result)
  {
    *(_QWORD *)(a1 + 1136) = 0;
    *(_DWORD *)(a1 + 1144) = 1650943796;
    v26 = v27;
    v25 = v28;
    *(_DWORD *)(a1 + 1148) = v28;
    *(_DWORD *)(a1 + 1152) = v26;
    *(_QWORD *)(a1 + 1168) = 0;
    *(_QWORD *)(a1 + 1160) = 0;
    *(double *)(a1 + 1176) = (double)v25;
    *(double *)(a1 + 1184) = (double)v26;
    *(_QWORD *)(a1 + 1192) = 3;
    *(_DWORD *)(a1 + 1204) = 0;
    *(_BYTE *)(a1 + 1224) = 0;
    *(_QWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1232) = 0;
    *(_BYTE *)(a1 + 1236) = 0;
    *(_DWORD *)(a1 + 1199) = 0;
  }
  *(_BYTE *)(a1 + 1128) = 0;
  return result;
}

CFIndex LockStreamMutexes(const __CFArray *a1)
{
  CFIndex result;
  CFIndex v3;
  uint64_t DerivedStorage;

  result = CFArrayGetCount(a1);
  if ((int)result >= 1)
  {
    v3 = 0;
    do
    {
      if (CFArrayGetValueAtIndex(a1, v3))
      {
        FigCaptureStreamGetFigBaseObject();
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 184));
      }
      ++v3;
      result = CFArrayGetCount(a1);
    }
    while (v3 < (int)result);
  }
  return result;
}

uint64_t H9ISPGetRectParamsFromDict(const __CFDictionary *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int a7)
{
  const __CFNumber *Value;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  uint64_t result;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE10768]);
  if (!Value)
    return 4294954516;
  CFNumberGetValue(Value, kCFNumberIntType, a2);
  v15 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE10798]);
  if (!v15)
    return 4294954516;
  CFNumberGetValue(v15, kCFNumberIntType, a3);
  v16 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE107A8]);
  if (!v16)
    return 4294954516;
  CFNumberGetValue(v16, kCFNumberIntType, a4);
  v17 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE10770]);
  if (!v17)
    return 4294954516;
  CFNumberGetValue(v17, kCFNumberIntType, a5);
  result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x24BE107A0]);
  if (result)
  {
    CFNumberGetValue((CFNumberRef)result, kCFNumberIntType, a6);
    return 0;
  }
  else
  {
    *a6 = a7;
  }
  return result;
}

uint64_t UnlockStreamMutexes(const __CFArray *a1)
{
  uint64_t result;
  int v3;
  CFIndex v4;
  uint64_t DerivedStorage;

  result = CFArrayGetCount(a1);
  v3 = result;
  v4 = (result - 1);
  if ((int)result - 1 >= 0)
  {
    do
    {
      result = (uint64_t)CFArrayGetValueAtIndex(a1, v4);
      if (result)
      {
        FigCaptureStreamGetFigBaseObject();
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        result = pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 184));
      }
      --v3;
      --v4;
    }
    while (v3 > 0);
  }
  return result;
}

uint64_t DisableSphereBoostVoltage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = H9ISP::H9ISPDevice::ISP_EnableSphereBoostVoltage(*(H9ISP::H9ISPDevice **)(a2 + 24), 0);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 1284) = 0;
    return H9ISP::H9ISPDevice::SetOisBoostMode(*(H9ISP::H9ISPDevice **)(a2 + 24), 0, 0);
  }
  return result;
}

uint64_t EnableSphereBoostVoltage(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = H9ISP::H9ISPDevice::ISP_EnableSphereBoostVoltage(*(H9ISP::H9ISPDevice **)(a2 + 24), 1u);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 1284) = 1;
    return H9ISP::H9ISPDevice::SetOisBoostMode(*(H9ISP::H9ISPDevice **)(a2 + 24), 0, 1);
  }
  return result;
}

uint64_t EnableDisableOISAndMotionMetaData(uint64_t a1, uint64_t a2)
{
  H9ISP::H9ISPDevice **v2;
  unsigned int *v3;
  uint64_t result;
  __int16 v5;

  if (*(_BYTE *)(a1 + 1249) || *(_BYTE *)(a1 + 1250))
  {
    v2 = (H9ISP::H9ISPDevice **)(a2 + 24);
    v3 = (unsigned int *)(a1 + 84);
    result = H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 84), 13, 1);
    if ((_DWORD)result)
      return result;
    v5 = 0;
    return H9ISP::H9ISPDevice::EnableMetadataSection(*v2, *v3, 21, v5);
  }
  v3 = (unsigned int *)(a1 + 84);
  v5 = *(_BYTE *)(a1 + 1248) != 0;
  v2 = (H9ISP::H9ISPDevice **)(a2 + 24);
  result = H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 84), 13, 0);
  if (!(_DWORD)result)
    return H9ISP::H9ISPDevice::EnableMetadataSection(*v2, *v3, 21, v5);
  return result;
}

uint64_t ActivatePrimaryScalerOutputInFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  float64x2_t v19;
  int v20;
  __CVPixelBufferPool *v21;
  const __CFDictionary *PixelBufferAttributes;
  const __CFNumber *Value;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _BOOL4 v37;
  unsigned __int8 v39;
  int v40;
  int v41;
  char v43;
  _OWORD v44[7];
  int v45;
  unsigned __int8 v46[32];
  uint64_t v47;
  int v48;
  int valuePtr;
  unsigned __int8 v50[8];
  int v51;
  int32x2_t v52;
  int32x2_t v53;
  __int128 __dst;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  _BYTE v62[200];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 88))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 40);
    v5 = *(_DWORD *)(result + 112);
    if (v4 < v5)
      v5 = 0;
    v6 = v4 - v5;
    v7 = dword_2542912E8;
    v8 = *(_QWORD *)(result + 104);
    if (!dword_2542912E8)
      v7 = *(_DWORD *)(v8 + 84 * v6 + 76);
    if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(result + 84), *(_DWORD *)(v8 + 84 * v6 + 16), &__dst, v62))return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n");
    v9 = *(_DWORD *)(v3 + 524);
    if (v9)
    {
      v10 = (double)v9 / 1000000.0;
      v11 = *(_QWORD *)(v3 + 104);
      v12 = *(_DWORD *)(v3 + 40);
      v13 = *(_DWORD *)(v3 + 112);
      if (v12 < v13)
        v13 = 0;
      if (v11)
        v14 = v11 + 84 * v6;
      else
        v14 = 84 * (v12 - v13);
      v15 = *(float *)(v14 + 68);
      v16 = WORD6(__dst);
      v17 = vcvtd_n_u64_f64(v15, 8uLL);
      if (v15 != 0.0)
        v16 = v17;
      v18 = v7 + 2 * (v10 / (1.0 / (double)(v16 >> 8)));
      if (v18 >= 0xA)
        v7 = 10;
      else
        v7 = v18;
    }
    *(_QWORD *)v50 = 0;
    v51 = *(_DWORD *)(v3 + 84);
    *(_WORD *)&v50[4] = 2049;
    v19 = *(float64x2_t *)(v3 + 576);
    v52 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v3 + 560)));
    v53 = vmovn_s64((int64x2_t)vcvtq_u64_f64(v19));
    if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v50, 0x1Cu, 0, 0xFFFFFFFF))
      return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - sCIspCmdChCropSet error: 0x%08X\n");
    v20 = -*(_DWORD *)(v3 + 552) & 0xF;
    valuePtr = v20;
    v21 = *(__CVPixelBufferPool **)(v3 + 640);
    if (v21)
    {
      PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v21);
      Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x24BDC5610]);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        v20 = valuePtr;
      }
    }
    v24 = 0;
    memset(v46, 0, sizeof(v46));
    v25 = *(_DWORD *)(v3 + 84);
    *(_WORD *)&v46[4] = 2817;
    v26 = *(_QWORD *)(v3 + 548);
    v48 = v20;
    v27 = *(_DWORD *)(v3 + 544);
    *(_DWORD *)&v46[8] = v25;
    *(_DWORD *)&v46[24] = (v27 & 0xFFFFFFEF) != 875704422;
    v47 = 0;
    *(_QWORD *)&v46[12] = v26;
    if (v27 != 875704422 && v27 != 2037741158)
    {
      if (v26 <= 0x3BF)
        v24 = 1;
      else
        v24 = 2;
    }
    *(_DWORD *)&v46[20] = v24;
    if ((v27 & 0xFFFFFFEF) == 0x34323066)
    {
      v28 = (v26 + 63) & 0xFFFFFFC0;
      LODWORD(v47) = v28;
    }
    else
    {
      v28 = (2 * v26 + 63) & 0xFFFFFFC0;
    }
    *(_DWORD *)&v46[28] = v28;
    if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v46, 0x2Cu, 0, 0xFFFFFFFF))
      return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - sCIspCmdChOutputConfigSet error: 0x%08X\n");
    v29 = *(float *)(v3 + 1252);
    if (v29 == 1.0)
    {
      v32 = 0;
    }
    else
    {
      v30 = *(_DWORD *)(v3 + 84) & 0x7FFFFFFF;
      if (*(_QWORD *)(v3 + 1352))
        v30 |= (*(_BYTE *)(v3 + 1368) == 0) << 31;
      v31 = H9ISP::H9ISPDevice::SetZoomFactor(*(H9ISP::H9ISPDevice **)(a2 + 24), v30, vcvts_n_s32_f32(v29, 0xAuLL));
      v32 = v31;
      if (v31)
        H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - Could not Initial ZoomFactor = %10.5f: res=0x%08X\n", *(float *)(v3 + 1252), v31);
    }
    if (*(_BYTE *)(v3 + 600) && !*(_BYTE *)(*(_QWORD *)(v3 + 88) + 437))
    {
      v44[4] = v58;
      v44[5] = v59;
      v44[6] = v60;
      v45 = v61;
      v44[0] = __dst;
      v44[1] = v55;
      v44[2] = v56;
      v44[3] = v57;
      if (AddRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v44))
        return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - AddRawPoolToFrameReceiver error: res=0x%08X\n");
    }
    else if (v32)
    {
      return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n");
    }
    v33 = v7 + *(_DWORD *)(v3 + 592) + 1;
    v34 = *(_DWORD *)(v3 + 1372);
    if (v34 == 1)
      v35 = 16;
    else
      v35 = 32 * (v34 == 2);
    if (valuePtr)
      v35 |= 0x800u;
    v36 = *(_DWORD *)(v3 + 544);
    v37 = (v36 & 0xFFFFFFEF) != 875704422;
    v39 = v36 == 875704422 || v36 == 2037741158;
    v40 = AddBufferPool(a2, v3, v3 + 632, 0, v55, *(_DWORD *)(v3 + 548), *(_DWORD *)(v3 + 552), valuePtr, v37, v39, v33, *(_DWORD *)(v3 + 596), v7, v35, CFSTR("YUV"), *(_QWORD *)(v3 + 640));
    H9ISPLogger(6, "ActivatePrimaryScalerOutputInFrameReceiver YUV pool size=%d,prime=%d\n", v33, v7);
    if (v40)
      return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n");
    v41 = *(_DWORD *)(v3 + 544);
    v43 = v41 == 875704422 || v41 == 2037741158;
    if (H9ISP::H9ISPDevice::SetScalerChromaSampleOffset(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), v43, 1, 0))return H9ISPLogger(3, "ActivatePrimaryScalerOutputInFrameReceiver - SetScalerChromaSampleOffset: res=0x%08X\n");
    else
      return SetMetaDataOptionsOnFrameReceiver(v3);
  }
  return result;
}

uint64_t ActivateSecondaryScalerOutputInFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  __CVPixelBufferPool *v20;
  const __CFDictionary *PixelBufferAttributes;
  const __CFNumber *Value;
  unsigned int v23;
  int v24;
  float v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BOOL4 v33;
  unsigned __int8 v35;
  int v36;
  int v37;
  char v39;
  _OWORD v40[7];
  int v41;
  int valuePtr;
  _OWORD __dst[5];
  __int128 v44;
  __int128 v45;
  int v46;
  _BYTE v47[200];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 88))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 40);
    v5 = *(_DWORD *)(result + 112);
    if (v4 < v5)
      v5 = 0;
    v6 = v4 - v5;
    v7 = dword_2542912E8;
    v8 = *(_QWORD *)(result + 104);
    if (!dword_2542912E8)
      v7 = *(_DWORD *)(v8 + 84 * v6 + 76);
    if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(result + 84), *(_DWORD *)(v8 + 84 * v6 + 16), __dst, v47))return H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n");
    v9 = *(_DWORD *)(v3 + 524);
    if (v9)
    {
      v10 = (double)v9 / 1000000.0;
      v11 = *(_QWORD *)(v3 + 104);
      v12 = *(_DWORD *)(v3 + 40);
      v13 = *(_DWORD *)(v3 + 112);
      if (v12 < v13)
        v13 = 0;
      if (v11)
        v14 = v11 + 84 * v6;
      else
        v14 = 84 * (v12 - v13);
      v15 = *(float *)(v14 + 68);
      v16 = WORD6(__dst[0]);
      v17 = vcvtd_n_u64_f64(v15, 8uLL);
      if (v15 != 0.0)
        v16 = v17;
      v18 = v7 + 2 * (v10 / (1.0 / (double)(v16 >> 8)));
      if (v18 >= 0xA)
        v7 = 10;
      else
        v7 = v18;
    }
    v19 = -*(_DWORD *)(v3 + 672) & 0xF;
    valuePtr = v19;
    v20 = *(__CVPixelBufferPool **)(v3 + 760);
    if (v20)
    {
      PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v20);
      Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x24BDC5610]);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        v19 = valuePtr;
      }
    }
    v23 = 0;
    v24 = *(_DWORD *)(v3 + 664);
    if (v24 != 875704422 && v24 != 2037741158)
    {
      if (*(_DWORD *)(v3 + 668) <= 0x3BFu)
        v23 = 1;
      else
        v23 = 2;
    }
    if (H9ISP::H9ISPDevice::SetSecondaryBESConfig(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), (int)*(double *)(v3 + 680) | ((unint64_t)(int)*(double *)(v3 + 688) << 32), *(double *)(v3 + 696) | ((unint64_t)*(double *)(v3 + 704) << 32), (unsigned __int16)*(_DWORD *)(v3 + 668), (unsigned __int16)*(_DWORD *)(v3 + 672), v19, (v24 & 0xFFFFFFEF) != 875704422, v23))return H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - SetSecondaryBESConfig error: 0x%08X\n");
    v25 = *(float *)(v3 + 1252);
    if (v25 == 1.0)
    {
      v28 = 0;
    }
    else
    {
      v26 = *(_DWORD *)(v3 + 84) & 0x7FFFFFFF;
      if (*(_QWORD *)(v3 + 1352))
        v26 |= (*(_BYTE *)(v3 + 1368) == 0) << 31;
      v27 = H9ISP::H9ISPDevice::SetZoomFactor(*(H9ISP::H9ISPDevice **)(a2 + 24), v26, vcvts_n_s32_f32(v25, 0xAuLL));
      v28 = v27;
      if (v27)
        H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - Could not Initial ZoomFactor = %10.5f: res=0x%08X\n", *(float *)(v3 + 1252), v27);
    }
    if (*(_BYTE *)(v3 + 720) && !*(_BYTE *)(*(_QWORD *)(v3 + 88) + 437))
    {
      v40[4] = __dst[4];
      v40[5] = v44;
      v40[6] = v45;
      v40[0] = __dst[0];
      v40[1] = __dst[1];
      v41 = v46;
      v40[2] = __dst[2];
      v40[3] = __dst[3];
      if (AddRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v40))
        return H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - AddRawPoolToFrameReceiver error: res=0x%08X\n");
    }
    else if (v28)
    {
      return H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n");
    }
    v29 = v7 + *(_DWORD *)(v3 + 712) + 1;
    v30 = *(_DWORD *)(v3 + 1372);
    if (v30 == 1)
      v31 = 16;
    else
      v31 = 32 * (v30 == 2);
    if (valuePtr)
      v31 |= 0x800u;
    v32 = *(_DWORD *)(v3 + 664);
    v33 = (v32 & 0xFFFFFFEF) != 875704422;
    v35 = v32 == 875704422 || v32 == 2037741158;
    v36 = AddBufferPool(a2, v3, v3 + 752, 10, SHIDWORD(v44), *(_DWORD *)(v3 + 668), *(_DWORD *)(v3 + 672), valuePtr, v33, v35, v29, *(_DWORD *)(v3 + 716), v7, v31, CFSTR("YUV2"), *(_QWORD *)(v3 + 760));
    H9ISPLogger(6, "ActivateSecondaryScalerOutputInFrameReceiver YUV2 pool size=%d,prime=%d\n", v29, v7);
    if (v36)
      return H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n");
    v37 = *(_DWORD *)(v3 + 664);
    v39 = v37 == 875704422 || v37 == 2037741158;
    if (H9ISP::H9ISPDevice::SetScalerChromaSampleOffset(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), v39, 1, 1))return H9ISPLogger(3, "ActivateSecondaryScalerOutputInFrameReceiver - SetScalerChromaSampleOffset: res=0x%08X\n");
    else
      return SetMetaDataOptionsOnFrameReceiver(v3);
  }
  return result;
}

uint64_t ActivateIntermediateTapOutputInFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  unsigned __int8 v30;
  int v31;
  int v32;
  _OWORD v33[7];
  int v34;
  unsigned __int8 v35[8];
  int v36;
  unsigned int v37;
  int v38;
  unsigned __int8 v39[16];
  __int128 v40;
  int v41;
  _OWORD __dst[5];
  __int128 v43;
  __int128 v44;
  int v45;
  _BYTE v46[200];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 88))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 40);
    v5 = *(_DWORD *)(result + 112);
    if (v4 < v5)
      v5 = 0;
    v6 = v4 - v5;
    v7 = dword_2542912E8;
    v8 = *(_QWORD *)(result + 104);
    if (!dword_2542912E8)
      v7 = *(_DWORD *)(v8 + 84 * v6 + 76);
    if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(result + 84), *(_DWORD *)(v8 + 84 * v6 + 16), __dst, v46))
    {
      return H9ISPLogger(3, "ActivateIntermediateTapOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n");
    }
    else
    {
      v9 = *(_DWORD *)(v3 + 524);
      if (v9)
      {
        v10 = (double)v9 / 1000000.0;
        v11 = *(_QWORD *)(v3 + 104);
        v12 = *(_DWORD *)(v3 + 40);
        v13 = *(_DWORD *)(v3 + 112);
        if (v12 < v13)
          v13 = 0;
        if (v11)
          v14 = v11 + 84 * v6;
        else
          v14 = 84 * (v12 - v13);
        v15 = *(float *)(v14 + 68);
        v16 = WORD6(__dst[0]);
        v17 = vcvtd_n_u64_f64(v15, 8uLL);
        if (v15 != 0.0)
          v16 = v17;
        v18 = v7 + 2 * (v10 / (1.0 / (double)(v16 >> 8)));
        if (v18 >= 0xA)
          v7 = 10;
        else
          v7 = v18;
      }
      *(_OWORD *)v39 = 0u;
      v40 = 0u;
      *(_WORD *)&v39[4] = 2306;
      v19 = *(_DWORD *)(v3 + 84);
      v41 = 0;
      *(_DWORD *)&v39[8] = v19;
      if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v39, 0x24u, 0, 0xFFFFFFFF))
      {
        return H9ISPLogger(3, "ActivateIntermediateTapOutputInFrameReceiver - Error getting FES output parameters: res=0x%08X\n");
      }
      else
      {
        v20 = 0;
        v21 = HIDWORD(v40);
        v22 = v41;
        *(_QWORD *)v35 = 0xB0600000000;
        v36 = *(_DWORD *)(v3 + 84);
        v37 = (2 * HIDWORD(v40) + 63) & 0xFFFFFFC0;
        v23 = *(_DWORD *)(v3 + 784);
        if (v23 != 875704422 && v23 != 2037741158)
        {
          if (*(_DWORD *)(v3 + 788) <= 0x3BFu)
            v20 = 1;
          else
            v20 = 2;
        }
        v38 = v20;
        if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v35, 0x14u, 0, 0xFFFFFFFF))
        {
          return H9ISPLogger(3, "ActivateIntermediateTapOutputInFrameReceiver - Error configuring YCC output: res=0x%08X\n");
        }
        else
        {
          if (!*(_BYTE *)(v3 + 840))
            goto LABEL_30;
          if (*(_BYTE *)(*(_QWORD *)(v3 + 88) + 437))
            goto LABEL_30;
          v33[4] = __dst[4];
          v33[5] = v43;
          v33[6] = v44;
          v34 = v45;
          v33[0] = __dst[0];
          v33[1] = __dst[1];
          v33[2] = __dst[2];
          v33[3] = __dst[3];
          if (AddRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v33))
          {
            return H9ISPLogger(3, "ActivateIntermediateTapOutputInFrameReceiver - AddRawPoolToFrameReceiver error: res=0x%08X\n");
          }
          else
          {
LABEL_30:
            v24 = v7 + *(_DWORD *)(v3 + 832) + 1;
            v25 = *(_DWORD *)(v3 + 1372);
            if (v25 == 1)
              v26 = 16;
            else
              v26 = 32 * (v25 == 2);
            v27 = *(_DWORD *)(v3 + 784);
            v28 = (v27 & 0xFFFFFFEF) != 875704422;
            v30 = v27 == 875704422 || v27 == 2037741158;
            v31 = AddBufferPool(a2, v3, v3 + 872, 6, v43, v21, v22, 0, v28, v30, v24, 0, v7, v26, CFSTR("YCC"), *(_QWORD *)(v3 + 880));
            H9ISPLogger(6, "ActivateIntermediateTapOutputInFrameReceiver YCC pool size=%d,prime=%d\n", v24, v7);
            if (v31)
            {
              return H9ISPLogger(3, "ActivateIntermediateTapOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n");
            }
            else
            {
              if (*(int *)(v3 + 868) >= 1 && !*(_BYTE *)(v3 + 1278))
              {
                v32 = H9ISP::H9ISPDevice::ISP_PreviewStreamSet(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), 2);
                if (v32)
                {
                  H9ISPLogger(3, "ActivateIntermediateTapOutputInFrameReceiver - Could not set preview streaming mode res=0x%08X\n", v32);
                }
                else if (H9ISP::H9ISPDevice::ISP_SetMaxOutputRate(*(H9ISP::H9ISPDevice **)(a2 + 24), 6, (unsigned __int16)*(_DWORD *)(v3 + 868) << 8))
                {
                  H9ISP::H9ISPDevice::ISP_PreviewStreamSet(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), 1);
                }
                else
                {
                  *(_DWORD *)(v3 + 1280) = 2;
                }
              }
              return SetMetaDataOptionsOnFrameReceiver(v3);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ActivateStillImageOutputInFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int CameraConfig;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v45;
  int v46;
  uint64_t v47;
  _OWORD v48[7];
  int v49;
  _OWORD v50[7];
  int v51;
  unsigned __int8 v52[32];
  uint64_t v53;
  int v54;
  unsigned __int8 v55[8];
  int v56;
  int32x2_t v57;
  int32x2_t v58;
  __int128 __dst;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  _BYTE v67[104];
  unsigned int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 88))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 40);
    v5 = *(_DWORD *)(result + 112);
    if (v4 < v5)
      v5 = 0;
    CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(result + 84), *(_DWORD *)(*(_QWORD *)(result + 104) + 84 * (v4 - v5) + 16), &__dst, v67);
    if (CameraConfig)
    {
      return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n", CameraConfig);
    }
    else
    {
      *(_QWORD *)v55 = 0;
      v56 = *(_DWORD *)(v3 + 84);
      *(_WORD *)&v55[4] = 2827;
      v57 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v3 + 920)));
      v58 = vmovn_s64((int64x2_t)vcvtq_u64_f64(*(float64x2_t *)(v3 + 936)));
      v7 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v55, 0x1Cu, 0, 0xFFFFFFFF);
      if (v7)
      {
        return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - Error configuring Capture output crop: res=0x%08X\n", v7);
      }
      else
      {
        v8 = 0;
        memset(v52, 0, sizeof(v52));
        v9 = *(_DWORD *)(v3 + 84);
        *(_WORD *)&v52[4] = 2823;
        v10 = *(_QWORD *)(v3 + 908);
        v11 = *(_DWORD *)(v3 + 904);
        *(_DWORD *)&v52[8] = v9;
        *(_DWORD *)&v52[24] = (v11 & 0xFFFFFFEF) != 875704422;
        v12 = *(_DWORD *)(v3 + 952);
        v53 = 0;
        *(_QWORD *)&v52[12] = v10;
        v54 = 0;
        if (v11 != 875704422 && v11 != 2037741158)
        {
          if (v10 <= 0x3BF)
            v8 = 1;
          else
            v8 = 2;
        }
        *(_DWORD *)&v52[20] = v8;
        if ((v11 & 0xFFFFFFEF) == 0x34323066)
        {
          v13 = (v10 + 63) & 0xFFFFFFC0;
          LODWORD(v53) = v13;
        }
        else
        {
          v13 = (2 * v10 + 63) & 0xFFFFFFC0;
        }
        *(_DWORD *)&v52[28] = v13;
        v14 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v52, 0x2Cu, 0, 0xFFFFFFFF);
        if (v14)
        {
          return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - Error configuring Capture output: res=0x%08X\n", v14);
        }
        else
        {
          if (!*(_BYTE *)(v3 + 600)
            && !*(_BYTE *)(v3 + 720)
            && !*(_BYTE *)(v3 + 840)
            && !*(_BYTE *)(v3 + 960)
            && !*(_BYTE *)(v3 + 1080)
            && !*(_BYTE *)(v3 + 1128))
          {
            goto LABEL_27;
          }
          if (*(_BYTE *)(*(_QWORD *)(v3 + 88) + 437))
            goto LABEL_27;
          v50[4] = v63;
          v50[5] = v64;
          v50[6] = v65;
          v51 = v66;
          v50[0] = __dst;
          v50[1] = v60;
          v50[2] = v61;
          v50[3] = v62;
          v15 = AddRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v50);
          if (v15)
          {
            return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - AddRawPoolToFrameReceiver error: res=0x%08X\n", v15);
          }
          else
          {
LABEL_27:
            v16 = *(_DWORD *)(v3 + 1372);
            if (v16 == 2)
              v17 = 33;
            else
              v17 = 1;
            if (v16 == 1)
              v18 = 17;
            else
              v18 = v17;
            v19 = *(_DWORD *)(v3 + 904);
            v20 = v19 != 875704438;
            if (v19 == 875704422)
              v20 = 0;
            v21 = v19 == 2037741158 || v19 == 875704422;
            v22 = AddBufferPool(a2, v3, v3 + 992, 7, SDWORD1(v64), *(_DWORD *)(v3 + 908), *(_DWORD *)(v3 + 912), 0, v20, v21, v12, 0, 0, v18, CFSTR("STILL"), *(_QWORD *)(v3 + 1000));
            H9ISPLogger(6, "ActivateStillImageOutputInFrameReceiver STILL pool size=%d,prime=%d\n", v12, 0);
            if (v22)
            {
              return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n", v22);
            }
            else
            {
              if (!*(_BYTE *)(v3 + 888))
                goto LABEL_44;
              if (!*(_BYTE *)(v3 + 984))
                goto LABEL_44;
              v48[4] = v63;
              v48[5] = v64;
              v48[6] = v65;
              v49 = v66;
              v48[0] = __dst;
              v48[1] = v60;
              v48[2] = v61;
              v48[3] = v62;
              v23 = AddSushiRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v48, *(_DWORD *)(v3 + 952));
              if (v23)
              {
                return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - AddSushiRawPoolToFrameReceiver error: res=0x%08X\n", v23);
              }
              else
              {
LABEL_44:
                if (!H9ISP::H9ISPFrameReceiver::HasPool(*(_QWORD **)(v3 + 88), 8))
                {
                  v24 = *(_QWORD **)(a2 + 216);
                  v25 = v24[4];
                  v26 = v24[1];
                  v27 = v24[2];
                  v28 = (_QWORD *)(v26 + 8 * (v25 >> 9));
                  if (v27 == v26)
                    v29 = 0;
                  else
                    v29 = (_QWORD *)(*v28 + 8 * (v24[4] & 0x1FFLL));
LABEL_48:
                  v30 = v29 - 512;
                  while (1)
                  {
                    v31 = v27 == v26
                        ? 0
                        : *(_QWORD *)(v26 + (((v24[5] + v25) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v24[5] + v25) & 0x1FF);
                    if (v29 == (_QWORD *)v31)
                      break;
                    v32 = (_DWORD *)*v29;
                    if (*(_DWORD *)*v29 == 7)
                    {
                      v33 = *(unsigned int *)(v3 + 84);
                      if (v33 <= 4)
                      {
                        if (*((_BYTE *)v32 + v33 + 24))
                          v12 = v32[16];
                      }
                    }
                    ++v29;
                    if ((_QWORD *)*v28 == ++v30)
                    {
                      v34 = (_QWORD *)v28[1];
                      ++v28;
                      v29 = v34;
                      goto LABEL_48;
                    }
                  }
                  v35 = *(_DWORD *)(v3 + 964);
                  v36 = ALSModeForStreaming(v3, a2);
                  v37 = v35 + v12 + 2;
                  v38 = v35 + 2;
                  if (v36 == 1 && *(_BYTE *)(v3 + 523) && *(_BYTE *)(v3 + 962))
                    v37 = v35 + v12 + 3;
                  v39 = *(_QWORD *)(v3 + 1352);
                  v40 = v35 + 5;
                  if ((v35 + 5) >= 0x10)
                    v40 = 16;
                  if (v39)
                    v41 = v37 + 3;
                  else
                    v41 = v37;
                  if (v39)
                    v42 = v40;
                  else
                    v42 = v38;
                  HIDWORD(v47) = v41;
                  LODWORD(v47) = 64;
                  H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(v3 + 88), 8, v69, (v68 >> 4) + 1, 8, 0, 0, 1, 0.0, 1, 64, v47, 0, v42, 0, 0, CFSTR("STILLMETA"), -1, 0,
                    *(_DWORD *)(v3 + 1404));
                  H9ISPLogger(6, "ActivateStillImageOutputInFrameReceiver STILLMETA pool size=%d,prime=%d\n", v41, v42);
                }
                v43 = *(_DWORD *)(v3 + 904);
                v45 = v43 == 875704422 || v43 == 2037741158;
                v46 = H9ISP::H9ISPDevice::SetScalerChromaSampleOffset(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), v45, 1, 2);
                if (v46)
                  return H9ISPLogger(3, "ActivateStillImageOutputInFrameReceiver - SetScalerChromaSampleOffset: res=0x%08X\n", v46);
                else
                  return SetMetaDataOptionsOnFrameReceiver(v3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ActivateStillImageIntermediateTapOutputInFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int CameraConfig;
  int v7;
  uint64_t v8;
  unsigned __int16 *i;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  _OWORD v43[7];
  int v44;
  _OWORD v45[7];
  int v46;
  unsigned __int8 v47[16];
  _OWORD v48[20];
  __int128 __dst;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  _BYTE v57[104];
  unsigned int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 88))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 40);
    v5 = *(_DWORD *)(result + 112);
    if (v4 < v5)
      v5 = 0;
    CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(result + 84), *(_DWORD *)(*(_QWORD *)(result + 104) + 84 * (v4 - v5) + 16), &__dst, v57);
    if (CameraConfig)
    {
      return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n", CameraConfig);
    }
    else
    {
      memset(v48, 0, sizeof(v48));
      *(_OWORD *)v47 = 0u;
      *(_WORD *)&v47[4] = 278;
      *(_DWORD *)&v47[8] = *(_DWORD *)(v3 + 84);
      *(_DWORD *)&v47[12] = 20;
      v7 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a2 + 24), v47, 0x150u, 0, 0xFFFFFFFF);
      if (v7)
      {
        return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - CISP_CMD_CH_BUFFER_POOL_CONFIG_GET error: 0x%08X\n", v7);
      }
      else
      {
        v8 = *(unsigned int *)&v47[12];
        if (!*(_DWORD *)&v47[12])
          return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - CISP_CMD_CH_BUFFER_POOL_CONFIG_GET error: 0x%08X\n", 0);
        for (i = (unsigned __int16 *)v48 + 1; *(i - 1) != 13; i += 8)
        {
          if (!--v8)
            return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - CISP_CMD_CH_BUFFER_POOL_CONFIG_GET error: 0x%08X\n", 0);
        }
        v10 = *i;
        if (v10 == 0xFFFF)
        {
          return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - CISP_CMD_CH_BUFFER_POOL_CONFIG_GET error: 0x%08X\n", 0);
        }
        else
        {
          v11 = *(_DWORD *)(v3 + 1072);
          v12 = *(_DWORD *)(v3 + 1028);
          v13 = (2 * v12 + 63) & 0xFFFFFFC0;
          v14 = *(_DWORD *)(v3 + 1024);
          if (v12 <= 0x3BF)
            v15 = 1;
          else
            v15 = 2;
          if (v14 == 875704422 || v14 == 2037741158)
            v17 = 0;
          else
            v17 = v15;
          v18 = H9ISP::H9ISPDevice::ConfigureStillImageIntermediateTapDMA(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(v3 + 84), v13, v17);
          if (v18)
          {
            return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - ConfigureStillImageIntermediateTapDMA Error: res=0x%08X\n", v18);
          }
          else
          {
            if (!*(_BYTE *)(v3 + 600)
              && !*(_BYTE *)(v3 + 720)
              && !*(_BYTE *)(v3 + 840)
              && !*(_BYTE *)(v3 + 960)
              && !*(_BYTE *)(v3 + 1080)
              && !*(_BYTE *)(v3 + 1128))
            {
              goto LABEL_36;
            }
            if (*(_BYTE *)(*(_QWORD *)(v3 + 88) + 437))
              goto LABEL_36;
            v45[4] = v53;
            v45[5] = v54;
            v45[6] = v55;
            v46 = v56;
            v45[0] = __dst;
            v45[1] = v50;
            v45[2] = v51;
            v45[3] = v52;
            v19 = AddRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v45);
            if (v19)
            {
              return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - AddRawPoolToFrameReceiver error: res=0x%08X\n", v19);
            }
            else
            {
LABEL_36:
              v20 = *(_DWORD *)(v3 + 1372);
              if (v20 == 2)
                v21 = 33;
              else
                v21 = 1;
              if (v20 == 1)
                v22 = 17;
              else
                v22 = v21;
              v23 = AddBufferPool(a2, v3, v3 + 1112, 9, v10, *(_DWORD *)(v3 + 1028), *(_DWORD *)(v3 + 1032), 0, 1, *(_DWORD *)(v3 + 1024) == 2037741158, v11, 0, 0, v22, CFSTR("STILLYCC"), *(_QWORD *)(v3 + 1120));
              H9ISPLogger(6, "ActivateStillImageIntermediateTapOutputInFrameReceiver STILLYCC pool size=%d,prime=%d\n", v11, 0);
              if (v23)
              {
                return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - pFrameReceiver->addBufferPoolToFrameReceiver: res=0x%08X\n", v23);
              }
              else
              {
                if (!*(_BYTE *)(v3 + 1008))
                  goto LABEL_48;
                if (!*(_BYTE *)(v3 + 1104))
                  goto LABEL_48;
                v43[4] = v53;
                v43[5] = v54;
                v43[6] = v55;
                v44 = v56;
                v43[0] = __dst;
                v43[1] = v50;
                v43[2] = v51;
                v43[3] = v52;
                v24 = AddSushiRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v43, *(_DWORD *)(v3 + 1072));
                if (v24)
                {
                  return H9ISPLogger(3, "ActivateStillImageIntermediateTapOutputInFrameReceiver - AddSushiRawPoolToFrameReceiver error: res=0x%08X\n", v24);
                }
                else
                {
LABEL_48:
                  if (!H9ISP::H9ISPFrameReceiver::HasPool(*(_QWORD **)(v3 + 88), 8))
                  {
                    v25 = *(_QWORD **)(a2 + 216);
                    v26 = v25[4];
                    v27 = v25[1];
                    v28 = v25[2];
                    v29 = (_QWORD *)(v27 + 8 * (v26 >> 9));
                    if (v28 == v27)
                      v30 = 0;
                    else
                      v30 = (_QWORD *)(*v29 + 8 * (v25[4] & 0x1FFLL));
LABEL_52:
                    v31 = v30 - 512;
                    while (1)
                    {
                      v32 = v28 == v27
                          ? 0
                          : *(_QWORD *)(v27 + (((v25[5] + v26) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v25[5] + v26) & 0x1FF);
                      if (v30 == (_QWORD *)v32)
                        break;
                      v33 = (_DWORD *)*v30;
                      if (*(_DWORD *)*v30 == 9)
                      {
                        v34 = *(unsigned int *)(v3 + 84);
                        if (v34 <= 4)
                        {
                          if (*((_BYTE *)v33 + v34 + 24))
                            v11 = v33[16];
                        }
                      }
                      ++v30;
                      if ((_QWORD *)*v29 == ++v31)
                      {
                        v35 = (_QWORD *)v29[1];
                        ++v29;
                        v30 = v35;
                        goto LABEL_52;
                      }
                    }
                    v36 = *(_DWORD *)(v3 + 1084);
                    v37 = ALSModeForStreaming(v3, a2);
                    v38 = v36 + v11;
                    v39 = v36 + v11 + 2;
                    v40 = v36 + 2;
                    if (v37 == 1)
                    {
                      if (*(_BYTE *)(v3 + 523))
                      {
                        v41 = v38 + 3;
                        if (*(_BYTE *)(v3 + 1082))
                          v39 = v41;
                      }
                    }
                    HIDWORD(v42) = v39;
                    LODWORD(v42) = 64;
                    H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(v3 + 88), 8, v59, (v58 >> 4) + 1, 8, 0, 0, 1, 0.0, 1, 64, v42, 0, v40, 0, 0, CFSTR("STILLMETA"), -1, 0,
                      *(_DWORD *)(v3 + 1404));
                    H9ISPLogger(6, "ActivateStillImageIntermediateTapOutputInFrameReceiver STILLMETA pool size=%d,prime=%d\n", v39, v40);
                  }
                  return SetMetaDataOptionsOnFrameReceiver(v3);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AddRawPoolToFrameReceiver(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t RawBufferCount;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int8 v23;

  v23 = 0;
  RawBufferCount = H9ISP::H9ISPDevice::GetRawBufferCount(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 84), &v23);
  if ((_DWORD)RawBufferCount)
  {
    v7 = RawBufferCount;
    H9ISPLogger(3, "AddRawPoolToFrameReceiver - GetRawBufferCount error: res=0x%08X\n", RawBufferCount);
    return v7;
  }
  if (*(_BYTE *)(a1 + 600))
  {
    v8 = *(_DWORD *)(a1 + 592);
    if (!*(_BYTE *)(a1 + 720))
      goto LABEL_10;
LABEL_8:
    if (*(_DWORD *)(a1 + 712) > v8)
      v8 = *(_DWORD *)(a1 + 712);
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 720))
  {
    v8 = 0;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 840) || *(_BYTE *)(a1 + 960) || *(_BYTE *)(a1 + 1080))
  {
    v8 = 0;
    goto LABEL_10;
  }
  v8 = 0;
  if (*(_BYTE *)(a1 + 1128))
  {
LABEL_10:
    if (*(_BYTE *)(a1 + 840) && *(_DWORD *)(a1 + 832) > v8)
      v8 = *(_DWORD *)(a1 + 832);
    if (*(_BYTE *)(a1 + 960) && *(_DWORD *)(a1 + 952) > v8)
      v8 = *(_DWORD *)(a1 + 952);
    if (*(_BYTE *)(a1 + 1080) && *(_DWORD *)(a1 + 1072) > v8)
      v8 = *(_DWORD *)(a1 + 1072);
    if (*(_BYTE *)(a1 + 1128) && *(_DWORD *)(a1 + 1192) > v8)
      v8 = *(_DWORD *)(a1 + 1192);
  }
  if (ALSModeForStreaming(a1, a2) == 1)
    v9 = v8 + 1;
  else
    v9 = v8;
  v10 = v9 + v23 + 1;
  v11 = 28;
  if (!gCaptureDeviceCFPrefs[0])
    v11 = 22;
  v12 = *(_DWORD *)&a3[v11];
  v13 = *a3;
  v21 = a3[1];
  v22 = v13;
  GetRawPoolBufferSizeForStream(a1, a2, &v22, &v21);
  v14 = 0;
  v15 = *(_DWORD *)(a1 + 1396);
  if (v15 > 1735549491)
  {
    if (v15 == 1919379252)
    {
      v14 = 128;
    }
    else if (v15 == 1735549492)
    {
      v14 = 64;
    }
  }
  else if (v15 == 1650943796)
  {
    v14 = 256;
  }
  else if (v15 == 1734505012)
  {
    v14 = 512;
  }
  v16 = *(_DWORD *)(a1 + 1308);
  switch(v16)
  {
    case 3:
      v14 |= 8u;
      break;
    case 2:
      v14 |= 4u;
      break;
    case 1:
      v14 |= 2u;
      break;
  }
  v17 = v21;
  v18 = v22;
  HIDWORD(v20) = v10;
  LODWORD(v20) = 64;
  v7 = H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(a1 + 88), 1, v12, v22, v21, 0, 0, 2, 0.0, 1, 64, v20, 0, v23, v14, 0, CFSTR("RAW"), -1, 0,
         *(_DWORD *)(a1 + 1404));
  H9ISPLogger(6, "AddRawPoolToFrameReceiver - RAW pool size=%d,prime=%d (res=0x%08X)\n", v10, v23, v7);
  if ((_DWORD)v7)
  {
    H9ISPLogger(3, "AddRawPoolToFrameReceiver - addBufferPoolToFrameReceiver error: res=0x%08X\n");
  }
  else
  {
    v7 = H9ISP::H9ISPDevice::SetBufferPoolConfiguration(*(H9ISP::H9ISPDevice **)(a2 + 24), *(_DWORD *)(a1 + 84), 3, v23, ((2 * v18 + 63) & 0xFFFFFFC0) * v17, (2 * v18 + 63) & 0xFFFFFFC0);
    if ((_DWORD)v7)
      H9ISPLogger(3, "AddRawPoolToFrameReceiver - SetBufferPoolConfiguration error: res=0x%08X\n");
  }
  return v7;
}

uint64_t AddBufferPool(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned __int8 a10, int a11, int a12, int a13, int a14, const void *a15, uint64_t a16)
{
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  H9ISP::H9ISPFrameReceiver *v24;
  H9ISP::H9ISPFrameReceiverBufferPool *v25;
  int v26;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _DWORD **v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD **v38;
  uint64_t v39;
  __int128 v42;
  uint64_t v43;
  H9ISP::H9ISPFrameReceiverBufferPool *v48;

  v48 = 0;
  if (a3)
  {
    v20 = 0;
    v21 = 0;
    do
      v21 += *(unsigned __int8 *)(a3 + v20++);
    while (v20 != 5);
    if (v21 && *(_QWORD *)(a2 + 1352))
    {
      v22 = operator new();
      HIDWORD(v42) = a11;
      *(_QWORD *)((char *)&v42 + 4) = 0x4000000040;
      LOBYTE(v42) = a10;
      H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool(v22, *(_QWORD *)(a1 + 24), a4, a6, a7, a8, 0, a9, v42, *((uint64_t *)&v42 + 1), a12, a13, a14, a15, a16, 0);
      v48 = (H9ISP::H9ISPFrameReceiverBufferPool *)v22;
      *(_QWORD *)(v22 + 104) = 0;
      *(_DWORD *)(v22 + 112) = -1;
      *(_DWORD *)(v22 + 24) = *(_DWORD *)a3;
      *(_BYTE *)(v22 + 28) = *(_BYTE *)(a3 + 4);
      v23 = *(unsigned int *)(a2 + 84);
      if (v23 < 5)
        *(_BYTE *)(v22 + v23 + 24) = 1;
      std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::push_back(*(_QWORD **)(a1 + 216), &v48);
      v24 = *(H9ISP::H9ISPFrameReceiver **)(a2 + 88);
      v25 = v48;
      v26 = a5;
      return H9ISP::H9ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(v24, v25, v26);
    }
  }
  v28 = *(_QWORD **)(a1 + 216);
  v29 = v28[4];
  v30 = v28[1];
  v31 = v28[2];
  v32 = (_QWORD *)(v30 + 8 * (v29 >> 9));
  if (v31 == v30)
    v33 = 0;
  else
    v33 = (_DWORD **)(*v32 + 8 * (v28[4] & 0x1FFLL));
LABEL_13:
  v34 = v33 - 512;
  while (1)
  {
    if (v31 == v30)
      v35 = 0;
    else
      v35 = *(_QWORD *)(v30 + (((v28[5] + v29) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v28[5] + v29) & 0x1FF);
    if (v33 == (_DWORD **)v35)
    {
      HIDWORD(v43) = a11;
      LODWORD(v43) = 64;
      return H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(a2 + 88), a4, a5, a6, a7, a8, 0, a9, 0.0, a10, 64, v43, a12, a13, a14, 0, a15, -1, a16,
               0);
    }
    v36 = *v33;
    if (**v33 == a4)
    {
      v37 = *(unsigned int *)(a2 + 84);
      if (v37 <= 4)
      {
        if (*((_BYTE *)v36 + v37 + 24))
          break;
      }
    }
    ++v33;
    if ((_DWORD **)*v32 == ++v34)
    {
      v38 = (_DWORD **)v32[1];
      ++v32;
      v33 = v38;
      goto LABEL_13;
    }
  }
  v39 = 3758097084;
  if (v36[8] == a6
    && v36[9] == a7
    && v36[10] == a8
    && !v36[11]
    && v36[12] == a9
    && (((*((_BYTE *)v36 + 52) != 0) ^ a10) & 1) == 0
    && v36[14] == 64
    && v36[15] == 64
    && v36[17] == a12
    && v36[18] == a13
    && v36[19] == a14
    && !v36[26]
    && *((float *)v36 + 27) == 0.0
    && v36[28] == -1)
  {
    if (CFEqual(*((CFTypeRef *)v36 + 17), a15))
    {
      v39 = H9ISP::H9ISPFrameReceiverBufferPool::ModifyBufferCount((H9ISP::H9ISPFrameReceiverBufferPool *)v36, a11);
      if (!(_DWORD)v39)
      {
        v24 = *(H9ISP::H9ISPFrameReceiver **)(a2 + 88);
        v25 = (H9ISP::H9ISPFrameReceiverBufferPool *)v36;
        v26 = a5;
        return H9ISP::H9ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(v24, v25, v26);
      }
    }
  }
  return v39;
}

void sub_2357F0654(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1060C4012BDE7A7);
  _Unwind_Resume(a1);
}

uint64_t SetMetaDataOptionsOnFrameReceiver(uint64_t a1)
{
  uint64_t result;
  BOOL v3;
  int v4;
  __int128 v5;

  result = *(_QWORD *)(a1 + 88);
  if (!result)
    return result;
  if (!*(_BYTE *)(a1 + 523))
  {
    v4 = *(unsigned __int8 *)(result + 437);
LABEL_10:
    v3 = v4 != 0;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a1 + 600)
    && !*(_BYTE *)(a1 + 720)
    && !*(_BYTE *)(a1 + 840)
    && !*(_BYTE *)(a1 + 960)
    && !*(_BYTE *)(a1 + 1080))
  {
    v4 = *(unsigned __int8 *)(a1 + 1128);
    goto LABEL_10;
  }
  v3 = 1;
LABEL_11:
  if (dword_2542912A0)
    v3 = 1;
  LOBYTE(v5) = v3;
  BYTE1(v5) = *(_DWORD *)(result + 440) == 0;
  BYTE2(v5) = *(_BYTE *)(a1 + 1248);
  *(_WORD *)((char *)&v5 + 3) = *(_WORD *)(a1 + 1249);
  BYTE6(v5) = *(_BYTE *)(a1 + 1251);
  *((_QWORD *)&v5 + 1) = 0;
  BYTE5(v5) = *(_DWORD *)(a1 + 508) != 0;
  return H9ISP::H9ISPFrameReceiver::SetMetaDataOptions(result, &v5);
}

uint64_t ALSModeForStreaming(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int CameraConfig;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE __dst[12];
  unsigned __int16 v18;
  _BYTE v19[200];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 156);
  result = *(unsigned int *)(a1 + 152);
  if (!v3 && (_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 40);
    v6 = *(_DWORD *)(a1 + 112);
    if (v5 < v6)
      v6 = 0;
    v7 = v5 - v6;
    CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 84 * (v5 - v6) + 16), __dst, v19);
    result = 0;
    if (!CameraConfig)
    {
      result = 0;
      v9 = *(_DWORD *)(a1 + 40);
      v10 = *(_DWORD *)(a1 + 112);
      if (v9 < v10)
        v10 = 0;
      v11 = v9 - v10;
      v12 = *(_QWORD *)(a1 + 104);
      v13 = 84 * v11;
      if (v12)
        v13 = v12 + 84 * v7;
      v14 = *(float *)(v13 + 68);
      v15 = v18;
      v16 = vcvtd_n_u64_f64(v14, 8uLL);
      if (v14 != 0.0)
        v15 = v16;
      if (v15 >> 10 <= 0xE)
        return *(unsigned int *)(a1 + 152);
    }
  }
  return result;
}

uint64_t GetRawPoolBufferSizeForStream(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  _BYTE v15[6];
  unsigned __int16 __dst;
  unsigned __int16 v17;
  int v18;
  _BYTE v19[200];
  _BYTE v20[200];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 112);
  if (v8 < v9)
    v9 = 0;
  result = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), *(_DWORD *)(*(_QWORD *)(a1 + 104) + 84 * (v8 - v9) + 16), &__dst, v20);
  if (!(_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 1128) || v18 == 0xFFFF)
    {
      v11 = __dst;
      v13 = v17;
    }
    else
    {
      result = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(a1 + 84), v18, &v14, v19);
      if ((_DWORD)result)
        return result;
      v11 = v14;
      if (v14 > __dst)
      {
        v12 = (unsigned __int16 *)v15;
      }
      else
      {
        v11 = __dst;
        v12 = &v17;
      }
      v13 = *v12;
    }
    *a3 = v11;
    *a4 = v13;
  }
  return result;
}

void std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2357F0CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t AddSushiRawPoolToFrameReceiver(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v6 = *((_DWORD *)a3 + 28);
  v7 = *a3;
  v14 = a3[1];
  v15 = v7;
  GetRawPoolBufferSizeForStream(a1, a2, &v15, &v14);
  v8 = *(_DWORD *)(a1 + 1396);
  v9 = 1;
  if (v8 > 1735549491)
  {
    if (v8 == 1919379252)
    {
      v9 = 129;
    }
    else if (v8 == 1735549492)
    {
      v9 = 65;
    }
  }
  else
  {
    if (v8 == 1734505012)
      v9 = 513;
    else
      v9 = 1;
    if (v8 == 1650943796)
      v9 = 257;
  }
  HIDWORD(v12) = a4;
  LODWORD(v12) = 64;
  v10 = H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(a1 + 88), 19, v6, v15, v14, 0, 0, 2, 0.0, 1, 64, v12, 0, 0, v9, 0, CFSTR("RENDERED_RAW"), -1, 0,
          *(_DWORD *)(a1 + 1404));
  H9ISPLogger(6, "AddSushiRawPoolToFrameReceiver - RAW pool size=%d,prime=%d (res=0x%08X)\n", a4, v10, v13);
  return v10;
}

H9ISP::H9ISPFrameReceiver *ConfigureNoDataTimer(uint64_t a1)
{
  H9ISP::H9ISPFrameReceiver *result;

  result = *(H9ISP::H9ISPFrameReceiver **)(a1 + 88);
  if (result)
  {
    if (*(_BYTE *)(a1 + 1360) || *(_BYTE *)(a1 + 1361))
    {
      if (!*((_QWORD *)result + 33))
      {
        H9ISP::H9ISPFrameReceiver::ClearFaceDetectSavedBuffer(result);
        return (H9ISP::H9ISPFrameReceiver *)H9ISP::H9ISPFrameReceiver::startNoDataTimer(*(H9ISP::H9ISPFrameReceiver **)(a1 + 88));
      }
    }
    else if (*((_QWORD *)result + 33))
    {
      return (H9ISP::H9ISPFrameReceiver *)H9ISP::H9ISPFrameReceiver::stopNoDataTimer(result);
    }
  }
  return result;
}

uint64_t ApplySlaveConfiguration(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a2 + 84);
  v5 = gCaptureDeviceCFPrefs[28 * v4 + 81];
  if (v5 == -1)
    v5 = *(_DWORD *)(a2 + 1364);
  if (*(_BYTE *)(a2 + 1362))
    v6 = v5;
  else
    v6 = 1;
  v7 = H9ISP::H9ISPDevice::SetFrameSkippingRatio(*(H9ISP::H9ISPDevice **)(a1 + 24), v4, v6);
  if ((_DWORD)v7)
  {
    v8 = v7;
    H9ISPLogger(3, "ISP_SendCommand for CISP_CMD_CH_FRAME_SKIPPING_RATIO error: 0x%08X\n", v7);
  }
  else
  {
    v9 = H9ISP::H9ISPDevice::SetSlaveProcessingConfig(*(H9ISP::H9ISPDevice **)(a1 + 24), *(_DWORD *)(a2 + 84), *(_BYTE *)(a2 + 1361) == 0);
    v8 = v9;
    if ((_DWORD)v9)
      H9ISPLogger(3, "ISP_SendCommand for CISP_CMD_CH_SLAVE_CAMERA_PROCESSING_CONFIG error: 0x%08X\n", v9);
  }
  return v8;
}

void addConfiguration(const __CFAllocator *a1, __CFDictionary *a2, const __CFString *a3, int a4, int a5)
{
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  __CFDictionary *v15;
  int v16;
  int v17;
  int v18;
  int valuePtr;

  valuePtr = 825437747;
  v17 = a4;
  v18 = 0x3FFF;
  v16 = a5;
  v8 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(a1, kCFNumberSInt32Type, &v18);
  v10 = CFNumberCreate(a1, kCFNumberSInt32Type, &v17);
  v11 = CFNumberCreate(a1, kCFNumberSInt32Type, &v16);
  v12 = v11;
  if (v8 && v9 && v10 && v11)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v14 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE108E0], v8);
      CFDictionarySetValue(v14, (const void *)*MEMORY[0x24BE108D8], v9);
      CFDictionarySetValue(v14, (const void *)*MEMORY[0x24BE108E8], v10);
      CFDictionarySetValue(v14, (const void *)*MEMORY[0x24BE108D0], v12);
      CFDictionarySetValue(a2, a3, v14);
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
    if (!v8)
      goto LABEL_9;
  }
  CFRelease(v8);
  v15 = v14;
LABEL_9:
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v12)
    CFRelease(v12);
  if (v15)
    CFRelease(v15);
}

uint64_t GetNumberOfActiveChannels(const __CFArray *a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!CFArrayGetCount(a1))
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    if (CFArrayGetValueAtIndex(a1, v2))
    {
      FigCaptureStreamGetFigBaseObject();
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88))
        v3 = (v3 + 1);
      else
        v3 = v3;
    }
    ++v2;
  }
  while (v2 < CFArrayGetCount(a1));
  return v3;
}

void addCFNumber<float>(__CFDictionary *a1, const void *a2, float a3)
{
  CFNumberRef v5;
  float valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, &valuePtr);
  CFDictionaryAddValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t ResetGroupSynchronization(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  CFIndex v8;
  uint64_t DerivedStorage;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = 3758097084;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56);
  if (!CFArrayGetCount(*(CFArrayRef *)(a2 + 104)))
  {
LABEL_12:
    if (!a3)
      return v6;
    goto LABEL_13;
  }
  v8 = 0;
  while (1)
  {
    if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 104), v8))
    {
      FigCaptureStreamGetFigBaseObject();
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_BYTE *)(DerivedStorage + 1360) = 0;
      v10 = *(const void **)(a2 + 104);
      if (a3)
      {
        *(_QWORD *)(DerivedStorage + 1352) = v10;
        CFRetain(v10);
      }
      else
      {
        CFRelease(v10);
        *(_QWORD *)(DerivedStorage + 1352) = 0;
      }
      v11 = H9ISP::H9ISPDevice::SetMultiCameraEnable(*(H9ISP::H9ISPDevice **)(a1 + 24), *(_DWORD *)(DerivedStorage + 84), a3);
      if ((_DWORD)v11)
      {
        v6 = v11;
        H9ISPLogger(3, "ResetGroupSynchronization - ISP_SendCommand for CISP_CMD_CH_MULTI_CAM_ENABLE error: 0x%08X\n", v11);
        goto LABEL_12;
      }
      v12 = H9ISP::H9ISPDevice::SetMasterSlaveSync(*(H9ISP::H9ISPDevice **)(a1 + 24), *(_DWORD *)(DerivedStorage + 84), *(_QWORD *)(DerivedStorage + 1352) != 0);
      v6 = v12;
      if ((_DWORD)v12)
        break;
    }
    if (++v8 >= (unint64_t)CFArrayGetCount(*(CFArrayRef *)(a2 + 104)))
      goto LABEL_12;
  }
  H9ISPLogger(3, "ResetGroupSynchronization - SetMasterSlaveSync error: 0x%08X\n", v12);
  if (a3)
  {
LABEL_13:
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 104), 0);
    FigCaptureStreamGetFigBaseObject();
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = v13;
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      v15 = H9ISP::H9ISPDevice::SetMaster(*(H9ISP::H9ISPDevice **)(a1 + 24), *(_DWORD *)(v13 + 84), *(_DWORD *)(v7 + 80 * *(unsigned int *)(v13 + 84) + 16) == 1919251564);
      if (v15)
        H9ISPLogger(3, "ResetGroupSynchronization - SetMaster error: 0x%08X\n", v15);
    }
    v16 = *(_DWORD *)(v14 + 84) & 0x7FFFFFFF;
    if (*(_QWORD *)(v14 + 1352))
      v16 |= (*(_BYTE *)(v14 + 1368) == 0) << 31;
    v17 = H9ISP::H9ISPDevice::SetMinimumFrameSkippingRatio(*(H9ISP::H9ISPDevice **)(a1 + 24), v16, *(_DWORD *)(a2 + 112));
    v6 = v17;
    if ((_DWORD)v17)
      H9ISPLogger(3, "ResetGroupSynchronization - SetMinimumFrameSkippingRatio error: 0x%08X\n", v17);
  }
  return v6;
}

BOOL IsPropertySupportedForGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v6;
  unsigned int *DerivedStorage;
  _BOOL8 v8;

  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 16)) < 1)
    return 0;
  v6 = 0;
  do
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v6);
    FigCaptureStreamGetFigBaseObject();
    DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
    v8 = IsPropertySupportedForStream(a1, DerivedStorage, a3);
    if (v8)
      break;
    ++v6;
  }
  while (v6 < CFArrayGetCount(*(CFArrayRef *)(a2 + 16)));
  return v8;
}

uint64_t H9ISPProcessingSessionInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  pthread_mutex_t *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  H9ISPMetrics *v7;
  H9ISPMetrics *v8;
  H9ISPMetrics *v9;
  H9ISPMetrics *v10;
  H9ISPMetrics *v11;
  H9ISPMetrics *v12;
  H9ISP::H9ISPGeneralProcessFrameReceiver *v13;
  uint64_t v14;
  H9ISP::H9ISPGeneralProcessFrameReceiver *v15;
  H9ISP::H9ISPFrameReceiverBufferPool *v16;
  H9ISP::H9ISPFrameReceiverBufferPool *v17;
  H9ISP::H9ISPFrameReceiverBufferPool *v18;
  H9ISP::H9ISPFrameReceiverBufferPool *v19;
  H9ISP **v20;
  const void *v21;
  const void *v23;

  if (!a1)
  {
    H9ISPLogger(4, "ISP Processing session ref passed is NULL\n");
    return 4294954516;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    H9ISPLogger(4, "ISP Processing Session is invalid\n");
    return 4294954516;
  }
  v2 = DerivedStorage;
  v3 = (pthread_mutex_t *)(DerivedStorage + 1248);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
  if (!*(_BYTE *)v2)
  {
    *(_BYTE *)v2 = 1;
    v4 = *(const void **)(v2 + 48);
    if (v4)
    {
      _Block_release(v4);
      *(_QWORD *)(v2 + 48) = 0;
    }
    v5 = *(const void **)(v2 + 40);
    if (v5)
    {
      _Block_release(v5);
      *(_QWORD *)(v2 + 40) = 0;
    }
    v6 = *(const void **)(v2 + 24);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_BYTE *)(v2 + 1242))
    {
      if (*(_BYTE *)(v2 + 1320))
      {
        H9ISPMetrics::StopTimer(*(H9ISPMetrics **)(v2 + 1328));
        v7 = *(H9ISPMetrics **)(v2 + 1328);
        if (v7)
        {
          H9ISPMetrics::~H9ISPMetrics(v7);
          MEMORY[0x23B7D8B08]();
        }
        v8 = *(H9ISPMetrics **)(v2 + 1336);
        if (v8)
        {
          H9ISPMetrics::~H9ISPMetrics(v8);
          MEMORY[0x23B7D8B08]();
        }
        v9 = *(H9ISPMetrics **)(v2 + 1344);
        if (v9)
        {
          H9ISPMetrics::~H9ISPMetrics(v9);
          MEMORY[0x23B7D8B08]();
        }
        v10 = *(H9ISPMetrics **)(v2 + 1352);
        if (v10)
        {
          H9ISPMetrics::~H9ISPMetrics(v10);
          MEMORY[0x23B7D8B08]();
        }
        v11 = *(H9ISPMetrics **)(v2 + 1360);
        if (v11)
        {
          H9ISPMetrics::~H9ISPMetrics(v11);
          MEMORY[0x23B7D8B08]();
        }
        v12 = *(H9ISPMetrics **)(v2 + 1368);
        if (v12)
        {
          H9ISPMetrics::~H9ISPMetrics(v12);
          MEMORY[0x23B7D8B08]();
        }
      }
      v13 = *(H9ISP::H9ISPGeneralProcessFrameReceiver **)(v2 + 1224);
      if (v13)
        H9ISP::H9ISPGeneralProcessFrameReceiver::stopReceive(v13);
      v14 = CMBaseObjectGetDerivedStorage();
      pthread_mutex_lock((pthread_mutex_t *)(v14 + 32));
      if (v14 && !*(_BYTE *)v14)
        H9ISP::H9ISPDevice::ISP_GeneralProcessStop(*(H9ISP::H9ISPDevice **)(v2 + 56), *(_WORD *)(v2 + 1240));
      pthread_mutex_unlock((pthread_mutex_t *)(v14 + 32));
      v16 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(v2 + 72);
      if (v16)
      {
        H9ISP::H9ISPFrameReceiverBufferPool::deactivatePool(v16);
        v17 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(v2 + 72);
        if (v17)
        {
          H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v17);
          MEMORY[0x23B7D8B08]();
        }
        *(_QWORD *)(v2 + 72) = 0;
      }
      v18 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(v2 + 64);
      if (v18)
      {
        H9ISP::H9ISPFrameReceiverBufferPool::deactivatePool(v18);
        v19 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(v2 + 64);
        if (v19)
        {
          H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v19);
          MEMORY[0x23B7D8B08]();
        }
        *(_QWORD *)(v2 + 64) = 0;
      }
      v20 = (H9ISP **)(v2 + 1224);
      v21 = *(const void **)(v2 + 88);
      if (v21)
      {
        CFRelease(v21);
        *(_QWORD *)(v2 + 88) = 0;
      }
      if (*v20)
        H9ISP::DestroyH9ISPGeneralProcessFrameReceiver(*v20, v15);
      *(_BYTE *)(v2 + 1242) = 0;
      *v20 = 0;
      *(_QWORD *)(v2 + 1232) = 0;
    }
    else
    {
      H9ISPLogger(3, "H9ISPProcessingSessionDestroy failed: no general processing session active");
    }
    CFRelease(*(CFTypeRef *)(v2 + 8));
    v23 = *(const void **)(v2 + 16);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(v2 + 16) = 0;
    }
  }
  pthread_mutex_unlock(v3);
  return 0;
}

uint64_t H9ISPProcessingSessionFinalize(uint64_t result)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v3 = DerivedStorage;
      H9ISPProcessingSessionInvalidate(v1);
      return pthread_mutex_destroy((pthread_mutex_t *)(v3 + 1248));
    }
    else
    {
      return H9ISPLogger(4, "ISP Processing Session is invalid\n");
    }
  }
  return result;
}

uint64_t H9ISPProcessingSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFNumber *Value;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int valuePtr;
  char v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "H9ISPProcessingSessionCopyProperty");
    return 4294954516;
  }
  v8 = DerivedStorage;
  strcpy(v15, "invalidated");
  v9 = CMBaseObjectGetDerivedStorage();
  H9ISPLogger(6, "H9ISPProcessingSessionCopyProperty: \n");
  pthread_mutex_lock((pthread_mutex_t *)(v8 + 1248));
  if (*(_BYTE *)v8)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 1248));
    H9ISPLogger(3, "%s: Processing session is invalid\n", "H9ISPProcessingSessionCopyProperty");
    v10 = 4294954511;
    H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v15);
  }
  else
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 16), a2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (valuePtr <= 0x90
        && (v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))processingSessionProperties[5 * valuePtr + 3]) != 0)
      {
        v10 = v13(a3, a4, v8, v9);
      }
      else
      {
        v10 = 4294954512;
      }
    }
    else
    {
      H9ISPLogger(4, "Unsupported property passed to ISP processing session :%s\n", (const char *)a2);
      v10 = 4294954509;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 1248));
  }
  return v10;
}

uint64_t H9ISPProcessingSessionSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFNumber *Value;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD valuePtr[9];

  valuePtr[8] = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "H9ISPProcessingSessionSetProperty");
    return 4294954516;
  }
  v6 = DerivedStorage;
  v7 = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 1248));
  if (*(_BYTE *)v6)
  {
    H9ISPLogger(3, "%s: Processing session is invalid\n", "H9ISPProcessingSessionSetProperty");
    strcpy((char *)valuePtr, "invalidated");
    v8 = 4294954511;
    H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, (const char *)valuePtr);
  }
  else
  {
    LODWORD(valuePtr[0]) = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 16), a2);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
      if (LODWORD(valuePtr[0]) <= 0x90
        && (v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))processingSessionProperties[5
                                                                                               * LODWORD(valuePtr[0])
                                                                                               + 2]) != 0)
      {
        v8 = v10(a3, v6, v7);
      }
      else
      {
        v8 = 4294954512;
      }
    }
    else
    {
      H9ISPLogger(4, "Unsupported property passed to ISP processing session :%s\n", (const char *)a2);
      v8 = 4294954509;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 1248));
  return v8;
}

uint64_t H9ISPProcessingSessionPrepare(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  int started;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int H9ISPGeneralProcessFrameReceiver;
  int CameraConfig;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  H9ISP::H9ISPFrameReceiverBufferPool *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  H9ISP::H9ISPFrameReceiverBufferPool *v30;
  int v31;
  const void *v32;
  void *v33;
  __int128 v34;
  _BYTE __dst[116];
  _QWORD v36[6];
  __int16 v37;
  _BYTE v38[104];
  unsigned int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v4 = DerivedStorage;
      v5 = (pthread_mutex_t *)(DerivedStorage + 1248);
      pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
      if (*(_BYTE *)v4)
      {
        a2 = 4294954511;
LABEL_25:
        pthread_mutex_unlock(v5);
        return a2;
      }
      v37 = 0;
      if (*(_BYTE *)(v4 + 1242))
      {
        H9ISPLogger(3, "%s: general processing for camera channel already in progress\n");
LABEL_21:
        a2 = 4294954516;
LABEL_22:
        v12 = 1;
        goto LABEL_23;
      }
      v6 = *(_DWORD *)(v4 + 32) - 1;
      if (v6 > 3)
      {
        H9ISPLogger(3, "%s: general processing session type is not supported\n");
        goto LABEL_21;
      }
      v7 = dword_235829610[v6];
      *(_DWORD *)(v4 + 80) = dword_235829600[v6];
      v8 = CMBaseObjectGetDerivedStorage();
      v9 = (pthread_mutex_t *)(v8 + 32);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 32));
      if (v8 && !*(_BYTE *)v8)
      {
        started = H9ISP::H9ISPDevice::ISP_GeneralProcessStart(*(H9ISP::H9ISPDevice **)(v4 + 56), *(_DWORD *)(v4 + 80), &v37);
        pthread_mutex_unlock(v9);
        if (!started)
        {
          *(_WORD *)(v4 + 1240) = v37;
          v15 = *(_QWORD *)(v4 + 56);
          v36[2] = MyH9ISPGeneralProcessFrameReceivedProc;
          v36[3] = v4;
          v36[4] = 0;
          v36[5] = 0;
          v36[0] = v4 + 1224;
          v36[1] = v15;
          H9ISPGeneralProcessFrameReceiver = H9ISP::CreateH9ISPGeneralProcessFrameReceiver((uint64_t)v36);
          if (H9ISPGeneralProcessFrameReceiver)
          {
            H9ISPLogger(3, "%s: Could not create the general process frame receiver 0x%x\n", "ISPProcessingSessionPrepare", H9ISPGeneralProcessFrameReceiver);
          }
          else if (*(_QWORD *)(v4 + 1224))
          {
            *(_QWORD *)(v4 + 1232) = MyH9ISPGeneralProcessFrameReceivedProc;
            CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(v4 + 56), 0, 0, __dst, v38);
            v18 = v39;
            v19 = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(v4 + 56), 1u, 0, __dst, v38);
            if (*(_DWORD *)(v4 + 80))
              goto LABEL_33;
            v27 = v39;
            if (CameraConfig)
              v28 = 0;
            else
              v28 = v18;
            if (v39 <= v28)
              v27 = v28;
            v29 = v19 ? v28 : v27;
            v30 = (H9ISP::H9ISPFrameReceiverBufferPool *)operator new();
            HIDWORD(v34) = v7;
            *(_QWORD *)((char *)&v34 + 4) = 0x4000000040;
            LOBYTE(v34) = 0;
            H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool((uint64_t)v30, *(_QWORD *)(v4 + 56), 2, (v29 >> 4) + 1, 8, 0, 0, 1, v34, *((uint64_t *)&v34 + 1), 0, 0, 1, CFSTR("META)"), 0, 0);
            *(_QWORD *)(v4 + 72) = v30;
            v31 = H9ISP::H9ISPFrameReceiverBufferPool::activatePool(v30);
            if (!v31)
            {
LABEL_33:
              v20 = *(_DWORD *)(v4 + 32);
              if (v20 == 2)
                v21 = 40;
              else
                v21 = 2;
              if (v20 == 1)
                v22 = 3498;
              else
                v22 = v21;
              v23 = v20 == 3;
              v24 = operator new();
              v25 = (H9ISP::H9ISPFrameReceiverBufferPool *)v24;
              v26 = v22 | 0x20050;
              if (!v23)
                v26 = v22;
              HIDWORD(v34) = v7;
              *(_QWORD *)((char *)&v34 + 4) = 0x4000000040;
              LOBYTE(v34) = 0;
              H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool(v24, *(_QWORD *)(v4 + 56), 18, v26 | 1, 8, 0, 0, 1, v34, *((uint64_t *)&v34 + 1), 0, 0, 1025, CFSTR("PARAMS (input)"), 0, 0);
              *(_QWORD *)(v4 + 64) = v25;
              if (!H9ISP::H9ISPFrameReceiverBufferPool::activatePool(v25))
              {
                started = H9ISP::H9ISPGeneralProcessFrameReceiver::startReceive(*(H9ISP::H9ISPGeneralProcessFrameReceiver **)(v4 + 1224));
                *(_BYTE *)(v4 + 1242) = 1;
                if (!started)
                {
                  if (a2)
                  {
                    v32 = *(const void **)(v4 + 40);
                    if (v32)
                      _Block_release(v32);
                    v33 = _Block_copy((const void *)a2);
                    v12 = 0;
                    a2 = 0;
                    *(_QWORD *)(v4 + 40) = v33;
                  }
                  else
                  {
                    v12 = 0;
                  }
                  goto LABEL_23;
                }
                goto LABEL_14;
              }
              H9ISPLogger(3, "%s: Could not activate the general processing params pool\n", "ISPProcessingSessionPrepare");
            }
            else
            {
              H9ISPLogger(3, "%s: Could not activate the output metadata buffer pool 0x%x\n", "ISPProcessingSessionPrepare", v31);
            }
          }
          else
          {
            H9ISPLogger(3, "%s: Could not create GP frame receiver \n", "ISPProcessingSessionPrepare");
          }
          v12 = 1;
          *(_BYTE *)(v4 + 1242) = 1;
          a2 = 4294954516;
LABEL_23:
          v13 = *(_QWORD *)(v4 + 40);
          if (v13)
            (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v13, v12);
          goto LABEL_25;
        }
      }
      else
      {
        pthread_mutex_unlock(v9);
        started = -536870212;
      }
      H9ISPLogger(3, "%s: Could not start general processing 0x%x\n", "ISPProcessingSessionPrepare", started);
      *(_BYTE *)(v4 + 1242) = 1;
LABEL_14:
      if (started == -536870210)
        v11 = -12786;
      else
        v11 = -12780;
      if (started == -536870208)
        a2 = 4294954511;
      else
        a2 = v11;
      goto LABEL_22;
    }
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "H9ISPProcessingSessionPrepare");
  }
  return 4294954516;
}

void sub_2357F23A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1060C4012BDE7A7);
  _Unwind_Resume(a1);
}

uint64_t H9ISPProcessingSessionProcessBuffer(uint64_t a1, uint64_t a2, __CVBuffer *a3, int a4, CFTypeRef *a5, const __CFDictionary *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  CFTypeRef *v15;
  const __CFString *v16;
  CFTypeID v17;
  uint64_t v18;
  _DWORD *v20;
  int v21;
  int v22;
  __CVBuffer *v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  void *v26;
  const __CFData *Value;
  const __CFData *v28;
  CFTypeID v29;
  CFTypeID TypeID;
  const __CFDictionary *v31;
  int v32;
  const __CFData *v33;
  CFDataRef Copy;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  const void *v38;
  const __CFDictionary *v39;
  const __CFDictionary *v40;
  uint64_t v41;
  double Width;
  size_t Height;
  double *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CFDataRef v49;
  __CVBuffer *v50;
  pthread_mutex_t *v51;
  void *key;
  const __CFDictionary *theDict;
  const __CFDictionary *v54;
  char __src[8];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD v71[82];
  uint64_t v72;
  uint64_t v73;

  v69 = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "H9ISPProcessingSessionProcessBuffer");
    return 4294954516;
  }
  v12 = DerivedStorage;
  v13 = (pthread_mutex_t *)(DerivedStorage + 1248);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
  if (*(_BYTE *)(v12 + 1320))
  {
    H9ISPMetrics::StopTimer(*(H9ISPMetrics **)(v12 + 1328));
    H9ISPMetrics::StartTimer(*(_QWORD **)(v12 + 1328));
    v72 = mach_absolute_time();
    v73 = mach_absolute_time();
  }
  if (a4 > 20 || !a5 || !*(_BYTE *)(v12 + 1242))
  {
    H9ISPLogger(3, "%s: Invalid parameters\n");
    goto LABEL_20;
  }
  if (a4 >= 1)
  {
    v14 = a4;
    v15 = a5 + 1;
    while (*v15)
    {
      v16 = (const __CFString *)*(v15 - 1);
      if (!v16)
        break;
      GetISPProcessingSessionOutputIndex(v16);
      v17 = CFGetTypeID(*v15);
      if (v17 != CVPixelBufferGetTypeID())
        break;
      v15 += 2;
      if (!--v14)
        goto LABEL_14;
    }
    H9ISPLogger(3, "%s: Invalid output descriptor array\n");
LABEL_20:
    v18 = 4294954516;
    goto LABEL_21;
  }
LABEL_14:
  if (*(_BYTE *)v12)
  {
    H9ISPLogger(3, "%s: Processing session is invalid\n", "H9ISPProcessingSessionProcessBuffer");
    v18 = 4294954511;
    goto LABEL_21;
  }
  theDict = a6;
  v20 = (_DWORD *)operator new();
  bzero(v20, 0x470uLL);
  v21 = *(_DWORD *)(v12 + 32);
  if (v21 == 4)
    goto LABEL_24;
  if (!a3)
  {
    H9ISPLogger(3, "%s: Invalid parameters\n");
    goto LABEL_56;
  }
  if (!theDict)
    goto LABEL_50;
  Value = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x24BE10548]);
  if (!Value)
  {
    v21 = *(_DWORD *)(v12 + 32);
    goto LABEL_50;
  }
  v28 = Value;
  v29 = CFGetTypeID(Value);
  TypeID = CFDataGetTypeID();
  v21 = *(_DWORD *)(v12 + 32);
  if (v29 != TypeID)
  {
LABEL_50:
    if ((v21 | 2) == 3)
    {
      v33 = *(const __CFData **)(v12 + 88);
      if (!v33)
      {
        H9ISPLogger(3, "%s: Session default type specific parameters NULL\n");
        goto LABEL_56;
      }
      Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v33);
      *(_QWORD *)v20 = Copy;
      if (!Copy)
      {
LABEL_75:
        H9ISPLogger(3, "%s: Could not create session specific type parameters\n", "H9ISPProcessingSessionProcessBuffer");
        goto LABEL_76;
      }
    }
    v31 = theDict;
    if (!theDict)
    {
      v54 = 0;
      goto LABEL_58;
    }
    goto LABEL_54;
  }
  if (v21 == 1)
    goto LABEL_72;
  v31 = theDict;
  if (v21 == 3)
  {
    if (CFDataGetLength(v28) > 0x200000)
    {
      H9ISPLogger(3, "%s: Vision parameters exceed maximum supported size\n");
LABEL_56:
      v18 = 4294954516;
      goto LABEL_77;
    }
    if (*(_DWORD *)(v12 + 32) != 1)
    {
LABEL_74:
      v49 = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v28);
      *(_QWORD *)v20 = v49;
      v31 = theDict;
      if (!v49)
        goto LABEL_75;
      goto LABEL_54;
    }
LABEL_72:
    if (CFDataGetLength(v28) >= 55941)
    {
      H9ISPLogger(3, "%s: Warp matrix parameters exceed maximum supported size\n");
      goto LABEL_56;
    }
    goto LABEL_74;
  }
LABEL_54:
  v54 = (const __CFDictionary *)CFDictionaryGetValue(v31, (const void *)*MEMORY[0x24BE10540]);
LABEL_58:
  v35 = 0;
  v51 = v13;
  key = (void *)*MEMORY[0x24BE10530];
  v36 = 0x3FFFFFFFFFFFFEE8;
  v50 = a3;
  while (1)
  {
    if (!v54)
    {
      v41 = v12 + v36 * 4;
      if (CGRectIsEmpty(*(CGRect *)(v12 + v36 * 4 + 1232)))
      {
        Width = (double)CVPixelBufferGetWidth(a3);
        Height = CVPixelBufferGetHeight(a3);
        v44 = (double *)&v20[v36];
        *(_OWORD *)&v20[v36 + 286] = 0u;
        v44[145] = Width;
        v44[146] = (double)Height;
      }
      else
      {
        v45 = &v20[v36 + 282];
        v46 = *(_OWORD *)(v41 + 1216);
        v47 = *(_OWORD *)(v41 + 1232);
        v48 = *(_OWORD *)(v41 + 1248);
        *(_QWORD *)&v20[v36 + 294] = *(_QWORD *)(v41 + 1264);
        v45[1] = v47;
        v45[2] = v48;
        *v45 = v46;
      }
      goto LABEL_68;
    }
    if ((v35 & 0xFFFFFFFC) != 0)
      goto LABEL_24;
    v37 = (const void **)qword_2506DB078[v35];
    v38 = *v37;
    if (!*v37)
      goto LABEL_24;
    v39 = (const __CFDictionary *)CFDictionaryGetValue(v54, *v37);
    if (v39)
      break;
LABEL_68:
    ++v35;
    v36 += 14;
    if (!(v36 * 4))
      goto LABEL_24;
  }
  v40 = (const __CFDictionary *)CFDictionaryGetValue(v39, key);
  if (CGRectMakeWithDictionaryRepresentation(v40, (CGRect *)&v20[v36 + 286]))
  {
    *(_QWORD *)&v20[v36 + 294] = v38;
    a3 = v50;
    v13 = v51;
    goto LABEL_68;
  }
  H9ISPLogger(3, "%s: Invalid output params\n", "H9ISPProcessingSessionProcessBuffer");
  a3 = v50;
  v13 = v51;
LABEL_24:
  v20[282] = a4;
  v70 = a2;
  v71[80] = a4;
  v22 = *(_DWORD *)(v12 + 1316);
  *(_DWORD *)(v12 + 1316) = v22 + 1;
  v71[81] = v22;
  if (a4 >= 1)
    memcpy(v71, a5, 16 * a4);
  v23 = a3;
  if (theDict
    && (v24 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x24BE10538])) != 0)
  {
    v25 = v24;
    v26 = (void *)CFDictionaryGetValue(v24, (const void *)*MEMORY[0x24BE104F0]);
    if (!v26)
      v26 = (void *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x24BE10D48]);
  }
  else
  {
    v26 = 0;
  }
  if (*(_DWORD *)(v12 + 32) == 4)
    v32 = ISPProcessingSessionProcessBufferGeneric(v12, (uint64_t)v20, (uint64_t)a5, __src);
  else
    v32 = ISPProcessingSessionProcessBuffer(v12, v23, v26, (uint64_t)v20, (uint64_t)a5, __src);
  if (!v32)
  {
    v18 = 0;
    goto LABEL_77;
  }
  if (v32 == -536870208)
  {
    v18 = 4294954511;
    goto LABEL_77;
  }
  if (v32 != -536870210)
    goto LABEL_56;
LABEL_76:
  v18 = 4294954510;
LABEL_77:
  if (*(_QWORD *)v20)
  {
    CFRelease(*(CFTypeRef *)v20);
    *(_QWORD *)v20 = 0;
  }
  MEMORY[0x23B7D8B08](v20, 0x1060C401540F3A4);
LABEL_21:
  pthread_mutex_unlock(v13);
  return v18;
}

uint64_t H9ISPProcessingSessionCompleteBuffers(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  H9ISP::H9ISPGeneralProcessFrameReceiver *v5;
  int v6;

  if (!a1)
    return 4294954516;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "H9ISPProcessingSessionCompleteBuffers");
    return 4294954516;
  }
  v2 = DerivedStorage;
  v3 = (pthread_mutex_t *)(DerivedStorage + 1248);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 1248));
  if (*(_BYTE *)(v2 + 1242))
  {
    if (*(_BYTE *)v2)
    {
      H9ISPLogger(3, "%s: ISP Processing Session is invalid\n", "H9ISPProcessingSessionCompleteBuffers");
      v4 = 4294954511;
    }
    else
    {
      v5 = *(H9ISP::H9ISPGeneralProcessFrameReceiver **)(v2 + 1224);
      if (v5 && (v6 = H9ISP::H9ISPGeneralProcessFrameReceiver::completeAllRequests(v5)) != 0)
      {
        H9ISPLogger(3, "%s: completeAllRequests failed 0x%x\n", "H9ISPProcessingSessionCompleteBuffers", v6);
        v4 = 4294954516;
      }
      else
      {
        v4 = 0;
      }
    }
  }
  else
  {
    H9ISPLogger(3, "%s: ISP Processing Session is not prepared\n", "H9ISPProcessingSessionCompleteBuffers");
    v4 = 4294954513;
  }
  pthread_mutex_unlock(v3);
  return v4;
}

void MyH9ISPGeneralProcessFrameReceivedProc(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  const void *v35;
  const __CFString *Attachment;
  uint64_t DerivedStorage;
  const __CFString *v38;
  uint64_t v39;
  unint64_t v40;
  const __CFString **v41;
  uint8_t v42[4];
  char v43;
  char v44;
  uint64_t v45;
  _BYTE buf[12];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  _OWORD v67[21];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (!*(_DWORD *)(a2 + 940) && *(_QWORD *)(a1 + 48))
    {
      if (*(_DWORD *)(a2 + 1288))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = *(unsigned int *)(a2 + 936);
          if ((_DWORD)v7)
          {
            v8 = a2 + 16 * v4;
            v9 = (_QWORD *)(v8 + 968);
            v10 = *(_QWORD *)(v8 + 976);
            v11 = (_QWORD *)(a2 + 32);
            do
            {
              if (*v11 == v10)
              {
                v12 = &v67[v5];
                *v12 = *v9;
                v12[1] = v10;
                ++v5;
              }
              ++v11;
              --v7;
            }
            while (v7);
          }
          v13 = a2 + 16 * v4;
          if (CFEqual(*(CFTypeRef *)(v13 + 968), CFSTR("ActionsList"))
            || CFEqual(*(CFTypeRef *)(v13 + 968), CFSTR("OperationsList")))
          {
            v6 = 1;
          }
          ++v4;
        }
        while (v4 < *(unsigned int *)(a2 + 1288));
        if ((v6 & 1) != 0)
        {
          v14 = *(_QWORD *)(a2 + 24);
          if (v14)
          {
            v15 = &v67[v5++];
            *((_QWORD *)v15 + 1) = v14;
          }
          v16 = 1;
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v16 = 0;
        v5 = 0;
      }
      if (*(_BYTE *)(a1 + 1320))
      {
        *(_QWORD *)(a2 + 1304) = mach_absolute_time();
        *(_QWORD *)(a2 + 1368) = mach_absolute_time();
        *(_QWORD *)(a2 + 1384) = *(_QWORD *)(a2 + 944);
        H9ISPMetrics::AddSample(*(H9ISPMetrics **)(a1 + 1336), *(_QWORD *)(a2 + 1312), *(_QWORD *)(a2 + 1320));
        H9ISPMetrics::AddSample(*(H9ISPMetrics **)(a1 + 1344), *(_QWORD *)(a2 + 1328), *(_QWORD *)(a2 + 1336));
        H9ISPMetrics::AddSample(*(H9ISPMetrics **)(a1 + 1352), *(_QWORD *)(a2 + 1360), *(_QWORD *)(a2 + 1368));
        H9ISPMetrics::AddSample(*(H9ISPMetrics **)(a1 + 1360), *(_QWORD *)(a2 + 1376), *(_QWORD *)(a2 + 1384));
        v17 = H9ISPMetrics::AddSample(*(H9ISPMetrics **)(a1 + 1368), *(_QWORD *)(a2 + 1296), *(_QWORD *)(a2 + 1304));
        if ((byte_2542912A6 & 8) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(_QWORD *)(a2 + 952);
          v19 = *(_QWORD *)(a2 + 1312);
          v20 = *(_QWORD *)(a2 + 1320);
          v21 = *(_QWORD *)(a2 + 1328);
          v22 = *(_QWORD *)(a2 + 1336);
          v23 = *(_QWORD *)(a2 + 1360);
          v24 = *(_QWORD *)(a2 + 1368);
          v25 = *(_QWORD *)(a2 + 1376);
          v26 = *(_QWORD *)(a2 + 1384);
          v27 = *(_QWORD *)(a2 + 1296);
          v28 = *(_QWORD *)(a2 + 1304);
          *(_DWORD *)buf = 134220544;
          *(_QWORD *)&buf[4] = v18;
          v47 = 2048;
          v48 = v19;
          v49 = 2048;
          v50 = v20;
          v51 = 2048;
          v52 = v21;
          v53 = 2048;
          v54 = v22;
          v55 = 2048;
          v56 = v23;
          v57 = 2048;
          v58 = v24;
          v59 = 2048;
          v60 = v25;
          v61 = 2048;
          v62 = v26;
          v63 = 2048;
          v64 = v27;
          v65 = 2048;
          v66 = v28;
          _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "Sample:%p,%lld,%lld,%lld,%lld,%lld,%lld,%lld,%lld,%lld,%lld", buf, 0x70u);
        }
        H9ISPMetrics::GetMetricsSummary(*(uint64_t **)(a1 + 1328), (uint64_t)buf, v17);
        if (*(_DWORD *)&buf[8] == *(_DWORD *)&buf[4] - 2)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Metrics report for GP Session ***", v42, 2u);
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** CM command cadence ***", v42, 2u);
          }
          H9ISPMetrics::PrintMetricsSummary(*(H9ISPMetrics **)(a1 + 1328), v29);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Driver Setup time ***", v42, 2u);
          }
          H9ISPMetrics::PrintMetricsSummary(*(H9ISPMetrics **)(a1 + 1336), v30);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** FW Setup time ***", v42, 2u);
          }
          H9ISPMetrics::PrintMetricsSummary(*(H9ISPMetrics **)(a1 + 1344), v31);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Request Processing time (Userspace) ***", v42, 2u);
          }
          H9ISPMetrics::PrintMetricsSummary(*(H9ISPMetrics **)(a1 + 1352), v32);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Request Processing time (Kernel) ***", v42, 2u);
          }
          H9ISPMetrics::PrintMetricsSummary(*(H9ISPMetrics **)(a1 + 1360), v33);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Total Processing time ***", v42, 2u);
          }
          H9ISPMetrics::PrintMetricsSummary(*(H9ISPMetrics **)(a1 + 1368), v34);
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v42 = 0;
            _os_log_impl(&dword_2357C5000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "*** Metrics end ***", v42, 2u);
          }
        }
      }
      if ((v16 & 1) == 0
        && *(_DWORD *)(a2 + 936)
        && (v35 = *(const void **)(a2 + 24)) != 0
        && (CVBufferSetAttachment(*(CVBufferRef *)(a2 + 32), CFSTR("RawMetaData"), v35, kCVAttachmentMode_ShouldPropagate), !*(_BYTE *)(a1 + 1312)))
      {
        H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata((H9ISP::H9ISPFrameMetadata *)buf, *(__CVBuffer **)(a2 + 24), 1uLL);
        if (*(_QWORD *)buf && *(unsigned __int16 *)(*(_QWORD *)buf + 458) <= 4uLL)
        {
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
          pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
        }
        *(_DWORD *)v42 = 256;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        H9ISP::GenerateAndAttachCoreMediaMetaDataDictionary();
        v38 = (const __CFString *)*MEMORY[0x24BE10818];
        Attachment = (const __CFString *)CVBufferGetAttachment(*(CVBufferRef *)(a2 + 32), (CFStringRef)*MEMORY[0x24BE10818], 0);
        if (*(_DWORD *)(a2 + 936) >= 2u)
        {
          v39 = 5;
          do
          {
            CVBufferSetAttachment(*(CVBufferRef *)(a2 + 8 * v39), v38, Attachment, kCVAttachmentMode_ShouldPropagate);
            v40 = v39 - 3;
            ++v39;
          }
          while (v40 < *(unsigned int *)(a2 + 936));
        }
        CFRetain(Attachment);
        v41 = (const __CFString **)&v67[v5];
        *v41 = v38;
        v41[1] = Attachment;
        H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata((H9ISP::H9ISPFrameMetadata *)buf);
      }
      else
      {
        Attachment = 0;
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      if (Attachment)
        CFRelease(Attachment);
    }
  }
  else
  {
    H9ISPLogger(4, "%s: ISP Processing Session is invalid\n", "MyH9ISPGeneralProcessFrameReceivedProc");
  }
}

void sub_2357F315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata((H9ISP::H9ISPFrameMetadata *)va);
  _Unwind_Resume(a1);
}

uint64_t GetISPProcessingSessionOutputIndex(const __CFString *a1)
{
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BE10518]))
    return 0;
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BE10520]))
    return 1;
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BE10510]))
    return 2;
  if (CFEqual(a1, (CFTypeRef)*MEMORY[0x24BE10528]))
    return 3;
  return 0;
}

uint64_t ISPProcessingSessionProcessBuffer(uint64_t a1, CVBufferRef buffer, void *cf, uint64_t a4, uint64_t a5, const void *a6)
{
  CFTypeID v12;
  uint64_t v13;
  uint64_t v15;
  _WORD *BaseAddress;
  size_t DataSize;
  int v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int Length;
  const UInt8 *BytePtr;
  size_t v31;
  unsigned int v32;
  const UInt8 *v33;
  void *v34;
  H9ISP *PixelFormatType;
  _BOOL4 v36;
  int v37;
  unint64_t v38;
  const void *v39;
  __CVBuffer **v40;
  uint64_t v41;
  __CVBuffer *v42;
  unsigned int ISPProcessingSessionOutputIndex;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t DerivedStorage;
  pthread_mutex_t *v48;
  uint64_t v49;
  H9ISP::H9ISPFrameReceiverBufferPool *v50;
  size_t v51;
  void *v52;
  int v53;
  const __CFString *key;
  _BYTE v55[1400];
  __int128 extraRowsOnBottom;
  _QWORD __dst[175];
  __CVBuffer *Attachment;
  __CVBuffer *v59;

  Attachment = 0;
  v59 = 0;
  if (!*(_BYTE *)(a1 + 1242))
  {
    H9ISPLogger(3, "generalProcess failed: no general processing session active", cf);
    return 3758097112;
  }
  if (!buffer)
  {
    v13 = 3758097090;
    H9ISPLogger(3, "generalProcess failed: input buffer is NULL", cf);
    return v13;
  }
  if (!a5)
  {
    v13 = 3758097090;
    H9ISPLogger(3, "generalProcess failed: outputDescriptor is NULL", cf);
    return v13;
  }
  if (!a4)
  {
    v13 = 3758097090;
    H9ISPLogger(3, "generalProcess failed: perFrameConfig is NULL", cf);
    return v13;
  }
  if (*(_DWORD *)(a1 + 32) == 2)
  {
    if (cf)
    {
      v12 = CFGetTypeID(cf);
      if (v12 == CVPixelBufferGetTypeID())
      {
        Attachment = (__CVBuffer *)cf;
        CVPixelBufferRetain((CVPixelBufferRef)cf);
      }
    }
    else
    {
      Attachment = (__CVBuffer *)CVBufferGetAttachment(buffer, CFSTR("RawMetaData"), 0);
      CVPixelBufferRetain(Attachment);
      CVBufferRemoveAttachment(buffer, CFSTR("RawMetaData"));
      if (!Attachment)
      {
        v13 = 3758097090;
        H9ISPLogger(3, "generalProcess failed: inputMetadataBuffer is not available for Bayer processing", v15);
        return v13;
      }
    }
  }
  if (!H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(*(H9ISP::H9ISPFrameReceiverBufferPool **)(a1 + 64), &v59))
  {
    CVPixelBufferLockBaseAddress(v59, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v59);
    DataSize = CVPixelBufferGetDataSize(v59);
    bzero(BaseAddress, DataSize);
    *BaseAddress = 1;
    *((_DWORD *)BaseAddress + 1) = 4;
    v18 = *(_DWORD *)(a1 + 32);
    switch(v18)
    {
      case 1:
        *((_DWORD *)BaseAddress + 4) = 40;
        Length = CFDataGetLength(*(CFDataRef *)a4);
        BytePtr = CFDataGetBytePtr(*(CFDataRef *)a4);
        v31 = Length;
        if (Length > DataSize - *((unsigned int *)BaseAddress + 4))
        {
          v13 = 3758097090;
          goto LABEL_60;
        }
        v33 = BytePtr;
        v34 = BaseAddress + 20;
        break;
      case 3:
        *((_DWORD *)BaseAddress + 5) = 64;
        v32 = CFDataGetLength(*(CFDataRef *)a4);
        v33 = CFDataGetBytePtr(*(CFDataRef *)a4);
        v31 = v32;
        v34 = BaseAddress + 32;
        break;
      case 2:
        if (Attachment)
        {
          CVPixelBufferLockBaseAddress(Attachment, 0);
          v19 = CVPixelBufferGetBaseAddress(Attachment);
        }
        else
        {
          v50 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(a1 + 72);
          if (!v50)
          {
            H9ISPLogger(3, "outputMetadataBufferPool is unavailable!");
            v13 = 3758096385;
            goto LABEL_60;
          }
          if (H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(v50, &Attachment))
          {
            H9ISPLogger(3, "Could not allocate output metadata buffer");
            goto LABEL_17;
          }
          v51 = CFDataGetLength((CFDataRef)cf);
          v19 = CFDataGetBytePtr((CFDataRef)cf);
          CVPixelBufferLockBaseAddress(Attachment, 0);
          v52 = CVPixelBufferGetBaseAddress(Attachment);
          memmove(v52, v19, v51);
        }
        v20 = v19[4];
        if (v20)
        {
          v21 = v19[5];
          if ((_DWORD)v21)
            v22 = (char *)v19 + v21;
          else
            v22 = 0;
          if (v20 >= 3)
          {
            v23 = v19[7];
            if ((_DWORD)v23)
              v24 = (char *)v19 + v23;
            else
              v24 = 0;
            if (v20 < 8)
            {
              v26 = 0;
            }
            else
            {
              v25 = v19[12];
              if ((_DWORD)v25)
                v26 = (char *)v19 + v25;
              else
                v26 = 0;
              if (v20 >= 0xA)
              {
                v27 = v19[14];
                if ((_DWORD)v27)
                {
                  v28 = (char *)v19 + v27;
                  goto LABEL_71;
                }
              }
            }
LABEL_70:
            v28 = 0;
LABEL_71:
            v13 = 3758096385;
            if (!v22 || !v24 || !v26 || !v28)
              goto LABEL_60;
            *((_QWORD *)BaseAddress + 1) = 0x5000000028;
            *((_DWORD *)BaseAddress + 10) = *(_DWORD *)v22;
            *(_OWORD *)(BaseAddress + 22) = *(_OWORD *)(v22 + 344);
            BaseAddress[30] = *((_DWORD *)v22 + 4);
            BaseAddress[31] = *((_DWORD *)v22 + 94);
            BaseAddress[32] = v22[45];
            BaseAddress[33] = *((_WORD *)v22 + 201);
            *((_BYTE *)BaseAddress + 72) = v22[461];
            BaseAddress[34] = *((_WORD *)v24 + 2);
            BaseAddress[35] = *((_WORD *)v24 + 4);
            *((_DWORD *)BaseAddress + 19) = v22[46];
            BaseAddress[44] = *((_WORD *)v24 + 3);
            *((_DWORD *)BaseAddress + 160) = *((_DWORD *)v24 + 432);
            *((_BYTE *)BaseAddress + 644) = v24[12];
            *((_BYTE *)BaseAddress + 645) = v24[1732];
            *((_DWORD *)BaseAddress + 20) = 0;
            *((_DWORD *)BaseAddress + 21) = v19[3];
            *((_BYTE *)BaseAddress + 630) = v26[63];
            *((_BYTE *)BaseAddress + 631) = v26[66];
            *((_BYTE *)BaseAddress + 632) = v28[162];
            *((_BYTE *)BaseAddress + 633) = v28[5];
            *((_BYTE *)BaseAddress + 634) = v28[2];
            *((_BYTE *)BaseAddress + 629) = v28[4];
            *((_BYTE *)BaseAddress + 635) = 0;
            v53 = *((unsigned __int16 *)v22 + 229);
            CVPixelBufferUnlockBaseAddress(Attachment, 0);
LABEL_45:
            CVPixelBufferUnlockBaseAddress(v59, 0);
            memcpy(__dst, a6, sizeof(__dst));
            __dst[1] = buffer;
            PixelFormatType = (H9ISP *)CVPixelBufferGetPixelFormatType(buffer);
            v36 = H9ISP::getFrameFormat(PixelFormatType) == 2;
            __dst[2] = v59;
            v37 = *(_DWORD *)(a4 + 1128);
            LODWORD(__dst[26]) = v36;
            LODWORD(__dst[117]) = v37;
            if (v37)
            {
              v38 = 0;
              key = (const __CFString *)*MEMORY[0x24BDC5618];
              v39 = (const void *)*MEMORY[0x24BDBD270];
              v40 = (__CVBuffer **)(a5 + 8);
              v41 = 27;
              do
              {
                v42 = *v40;
                ISPProcessingSessionOutputIndex = GetISPProcessingSessionOutputIndex((const __CFString *)*(v40 - 1));
                __dst[v38 + 4] = v42;
                if (*(_DWORD *)(a1 + 32) == 1)
                {
                  extraRowsOnBottom = 0uLL;
                  CVPixelBufferGetExtendedPixels(v42, 0, (size_t *)&extraRowsOnBottom + 1, 0, (size_t *)&extraRowsOnBottom);
                  if (extraRowsOnBottom != 0)
                    CVBufferSetAttachment(v42, key, v39, kCVAttachmentMode_ShouldNotPropagate);
                }
                v44 = a4 + 56 * ISPProcessingSessionOutputIndex;
                v45 = &__dst[v41];
                v46 = *(_OWORD *)(v44 + 40);
                *v45 = *(_OWORD *)(v44 + 24);
                v45[1] = v46;
                *((_DWORD *)&__dst[107] + v38++) = 0;
                v40 += 2;
                v41 += 4;
              }
              while (v38 < LODWORD(__dst[117]));
            }
            __dst[3] = Attachment;
            LODWORD(__dst[0]) = *(unsigned __int16 *)(a1 + 1240);
            HIDWORD(__dst[0]) = v53;
            if (*(_BYTE *)(a1 + 1320))
            {
              __dst[165] = mach_absolute_time();
              __dst[166] = mach_absolute_time();
              __dst[170] = mach_absolute_time();
              __dst[172] = mach_absolute_time();
            }
            DerivedStorage = CMBaseObjectGetDerivedStorage();
            v48 = (pthread_mutex_t *)(DerivedStorage + 32);
            pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
            v13 = 3758097088;
            if (DerivedStorage && !*(_BYTE *)DerivedStorage)
            {
              v49 = *(_QWORD *)(a1 + 1224);
              memcpy(v55, __dst, sizeof(v55));
              v13 = H9ISP::H9ISPGeneralProcessFrameReceiver::GeneralProcess(v49, (uint64_t)v55, 0);
            }
            pthread_mutex_unlock(v48);
            if (*(_BYTE *)(a1 + 1320))
              mach_absolute_time();
            if ((_DWORD)v13)
              H9ISPLogger(3, "generalProcess failed:  kernel request failed 0x%08X", v13);
            goto LABEL_60;
          }
          v26 = 0;
        }
        else
        {
          v26 = 0;
          v22 = 0;
        }
        v24 = 0;
        goto LABEL_70;
      default:
LABEL_44:
        v53 = 0;
        goto LABEL_45;
    }
    memmove(v34, v33, v31);
    goto LABEL_44;
  }
  H9ISPLogger(3, "Could not allocate input params buffer");
LABEL_17:
  v13 = 3758097086;
LABEL_60:
  if (Attachment)
    CVPixelBufferRelease(Attachment);
  if (v59)
    CVPixelBufferRelease(v59);
  return v13;
}

uint64_t ISPProcessingSessionProcessBufferGeneric(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v14;
  _BYTE v16[1400];
  _QWORD __dst[176];

  if (*(_BYTE *)(a1 + 1242))
  {
    if (a2 && a3)
    {
      memcpy(__dst, __src, 0x578uLL);
      if (*(_DWORD *)(a2 + 1128))
      {
        v7 = 0;
        v8 = 0;
        v9 = __dst[3];
        v10 = (_QWORD *)(a3 + 8);
        do
        {
          if (CFEqual((CFTypeRef)*(v10 - 1), CFSTR("ActionsList")))
          {
            __dst[25] = *v10;
          }
          else if (CFEqual((CFTypeRef)*(v10 - 1), CFSTR("OperationsList")))
          {
            __dst[24] = *v10;
          }
          else if (CFEqual((CFTypeRef)*(v10 - 1), CFSTR("StatsBuffer")))
          {
            v9 = *v10;
          }
          else
          {
            __dst[v8++ + 4] = *v10;
          }
          ++v7;
          v10 += 2;
        }
        while (v7 < *(unsigned int *)(a2 + 1128));
      }
      else
      {
        v8 = 0;
        v9 = __dst[3];
      }
      LODWORD(__dst[117]) = v8;
      if (*(int *)(*(_QWORD *)(a1 + 56) + 64) >= 7 && v9 == 0)
      {
        return 4294954516;
      }
      else
      {
        __dst[3] = 0;
        __dst[0] = *(unsigned __int16 *)(a1 + 1240);
        if (*(_BYTE *)(a1 + 1320))
        {
          __dst[165] = mach_absolute_time();
          __dst[166] = mach_absolute_time();
          __dst[170] = mach_absolute_time();
          __dst[172] = mach_absolute_time();
        }
        v11 = 3758097088;
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
        if (DerivedStorage && !*(_BYTE *)DerivedStorage)
        {
          v14 = *(_QWORD *)(a1 + 1224);
          memcpy(v16, __dst, sizeof(v16));
          v11 = H9ISP::H9ISPGeneralProcessFrameReceiver::GeneralProcessGeneric(v14, (uint64_t)v16, 0);
        }
        pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
        if (*(_BYTE *)(a1 + 1320))
          mach_absolute_time();
        if ((_DWORD)v11)
          H9ISPLogger(3, "generalProcess failed: 0x%08X", v11);
      }
    }
    else
    {
      H9ISPLogger(3, "generalProcess failed: invalid params", a3, __src);
      return 3758097090;
    }
  }
  else
  {
    H9ISPLogger(3, "generalProcess failed: no general processing session active", a3, __src);
    return 3758097112;
  }
  return v11;
}

uint64_t H9ISPCaptureDeviceFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(2u, DerivedStorage, 0, 0, 0, 0);
  H9ISPCaptureDeviceInvalidate();
  return pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 32));
}

uint64_t H9ISPCaptureDeviceCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  const void *v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t);
  char v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  H9ISPLogger(6, "H9ISPCaptureDeviceCopyProperty: \n");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(3u, DerivedStorage, 0, a2, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!*(_BYTE *)DerivedStorage)
  {
    if (!*(_QWORD *)(DerivedStorage + 24))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
      return 4294954616;
    }
    if (deviceProperties[0])
    {
      if (CFEqual((CFTypeRef)deviceProperties[0], a2))
      {
        v9 = 0;
LABEL_11:
        v13 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))deviceProperties[5 * v9 + 3];
        if (v13)
        {
          if ((deviceProperties[5 * v9 + 4] & 0x400) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(DerivedStorage + 24) + 56) + 412))
          {
            v8 = 4294954509;
          }
          else
          {
            v8 = v13(a3, a4, 0, 0, DerivedStorage);
          }
          goto LABEL_16;
        }
      }
      else
      {
        v10 = 1;
        while (1)
        {
          v11 = (const void *)deviceProperties[5 * v10];
          if (!v11)
            break;
          v9 = v10;
          v12 = CFEqual(v11, a2);
          v10 = v9 + 1;
          if (v12)
            goto LABEL_11;
        }
      }
    }
    v8 = 4294954512;
LABEL_16:
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    LogCaptureDeviceEvent(3u, DerivedStorage, 0, a2, 0, 1);
    kdebug_trace();
    return v8;
  }
  strcpy(v15, "invalidated");
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  v8 = 4294954511;
  H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v15);
  return v8;
}

uint64_t H9ISPCaptureDeviceSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  int v10;
  uint64_t (*v11)(uint64_t, _QWORD, _QWORD, uint64_t);
  char v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(4u, DerivedStorage, 0, a2, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 32));
  if (!*(_BYTE *)DerivedStorage)
  {
    if (!*(_QWORD *)(DerivedStorage + 24))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
      return 4294954616;
    }
    if (deviceProperties[0])
    {
      if (CFEqual((CFTypeRef)deviceProperties[0], a2))
      {
        v7 = 0;
LABEL_11:
        v11 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))deviceProperties[5 * v7 + 2];
        if (v11)
        {
          if ((deviceProperties[5 * v7 + 4] & 0x400) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(DerivedStorage + 24) + 56) + 412))
          {
            v6 = 4294954509;
          }
          else
          {
            v6 = v11(a3, 0, 0, DerivedStorage);
          }
          goto LABEL_16;
        }
      }
      else
      {
        v8 = 1;
        while (1)
        {
          v9 = (const void *)deviceProperties[5 * v8];
          if (!v9)
            break;
          v7 = v8;
          v10 = CFEqual(v9, a2);
          v8 = v7 + 1;
          if (v10)
            goto LABEL_11;
        }
      }
    }
    v6 = 4294954512;
LABEL_16:
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
    LogCaptureDeviceEvent(4u, DerivedStorage, 0, a2, 0, 1);
    kdebug_trace();
    return v6;
  }
  strcpy(v13, "invalidated");
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 32));
  v6 = 4294954511;
  H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v13);
  return v6;
}

uint64_t ___ZL24H9ISPCaptureStreamCreatePK13__CFAllocatorP22OpaqueFigCaptureDevicePN5H9ISP11H9ISPDeviceEPP22OpaqueFigCaptureStream_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 56) = 0;
  if (*(_QWORD *)(v2 + 1264))
    DisableDisplayStrobeOverlay(v2);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 184);
  if (v3)
    v3 = H9ISP::H9ISPPhotometerManager::PhotometerCommand(v3, 1);
  MEMORY[0x23B7D87FC](v3);
  return CMNotificationCenterPostNotification();
}

uint64_t H9ISPCaptureStreamFinalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = CMBaseObjectGetDerivedStorage();
    LogCaptureDeviceEvent(7u, v1, DerivedStorage, 0, 0, 0);
    H9ISPCaptureStreamInvalidate();
    v2 = CMBaseObjectGetDerivedStorage();
    LogCaptureDeviceEvent(7u, v2, DerivedStorage, 0, 0, 1);
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 184));
}

uint64_t H9ISPCaptureStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const __CFNumber *Value;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  unsigned int valuePtr;
  char v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  strcpy(v14, "invalidated");
  v8 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(8u, v8, DerivedStorage, a2, 0, 0);
  H9ISPLogger(6, "H9ISPCaptureStreamCopyProperty: \n");
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 184));
  if (!*(_BYTE *)DerivedStorage)
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 128), a2);
    if (!Value)
      goto LABEL_8;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if (valuePtr > 0x90
      || (v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))streamProperties[5 * valuePtr + 3]) == 0)
    {
      v9 = 4294954512;
      goto LABEL_10;
    }
    if (IsPropertySupportedForStream((uint64_t)&streamProperties[5 * valuePtr], (unsigned int *)DerivedStorage, v8))
      v9 = v11(a3, a4, DerivedStorage, 0, v8);
    else
LABEL_8:
      v9 = 4294954509;
LABEL_10:
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 184));
    LogCaptureDeviceEvent(8u, v8, DerivedStorage, a2, 0, 1);
    kdebug_trace();
    return v9;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 184));
  v9 = 4294954511;
  H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v14);
  return v9;
}

uint64_t H9ISPCaptureStreamSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const __CFNumber *Value;
  uint64_t (*v9)(const void *, uint64_t, _QWORD, uint64_t);
  _QWORD valuePtr[9];

  valuePtr[8] = *MEMORY[0x24BDAC8D0];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  kdebug_trace();
  v6 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(9u, v6, DerivedStorage, a2, a3, 0);
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 184));
  if (!*(_BYTE *)DerivedStorage)
  {
    LODWORD(valuePtr[0]) = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 128), a2);
    if (!Value)
      goto LABEL_8;
    CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
    if (LODWORD(valuePtr[0]) > 0x90
      || (v9 = (uint64_t (*)(const void *, uint64_t, _QWORD, uint64_t))streamProperties[5 * LODWORD(valuePtr[0])
                                                                                              + 2]) == 0)
    {
      v7 = 4294954512;
      goto LABEL_10;
    }
    if (IsPropertySupportedForStream((uint64_t)&streamProperties[5 * LODWORD(valuePtr[0])], (unsigned int *)DerivedStorage, v6))
    {
      v7 = v9(a3, DerivedStorage, 0, v6);
    }
    else
    {
LABEL_8:
      v7 = 4294954509;
    }
LABEL_10:
    pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 184));
    LogCaptureDeviceEvent(9u, v6, DerivedStorage, a2, 0, 1);
    kdebug_trace();
    return v7;
  }
  strcpy((char *)valuePtr, "invalidated");
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 184));
  v7 = 4294954511;
  H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, (const char *)valuePtr);
  return v7;
}

void H9ISPCaptureStreamInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  H9ISP::H9ISPFrameReceiver *v6;
  H9ISP::H9ISPFrameReceiver *v7;
  H9ISP::H9ISPFrameReceiver *v8;
  H9ISP::H9ISPFrameReceiver *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  __CVPixelBufferPool *v22;
  __CVPixelBufferPool *v23;
  __CVPixelBufferPool *v24;
  __CVPixelBufferPool *v25;
  __CVPixelBufferPool *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  void **v35;
  FILE **v36;
  NSObject *v37;
  NSObject *v38;
  const void *v39;
  H9ISP::H9ISPFirmwareWorkProcessor *v40;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  LogCaptureDeviceEvent(6u, v1, DerivedStorage, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  v2 = *(const __CFArray **)(v1 + 120);
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(v1 + 120));
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
    LockStreamMutexes(v2);
    if (!*(_BYTE *)DerivedStorage)
    {
      if (*(_QWORD *)(DerivedStorage + 1352)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 56) + 80 * *(unsigned int *)(DerivedStorage + 84) + 76)
        && CFArrayGetCount(v2))
      {
        v3 = 0;
        do
        {
          if (CFArrayGetValueAtIndex(v2, v3))
          {
            FigCaptureStreamGetFigBaseObject();
            v4 = CMBaseObjectGetDerivedStorage();
            if (*(_DWORD *)(v4 + 84) != *(_DWORD *)(DerivedStorage + 84))
            {
              v5 = v4;
              if (!*(_BYTE *)v4)
              {
                v6 = *(H9ISP::H9ISPFrameReceiver **)(v4 + 88);
                if (v6)
                {
                  H9ISP::H9ISPFrameReceiver::stopReceive(v6);
                  H9ISP::DestroyH9ISPFrameReceiver(*(H9ISP **)(v5 + 88), v7);
                  H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(v1 + 24), *(_DWORD *)(v5 + 84), 0, 0);
                  *(_QWORD *)(v5 + 88) = 0;
                }
              }
            }
          }
          ++v3;
        }
        while (v3 < CFArrayGetCount(v2));
      }
      *(_BYTE *)DerivedStorage = 1;
      v8 = *(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88);
      if (v8)
      {
        H9ISP::H9ISPFrameReceiver::stopReceive(v8);
        H9ISP::DestroyH9ISPFrameReceiver(*(H9ISP **)(DerivedStorage + 88), v9);
        H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(v1 + 24), *(_DWORD *)(DerivedStorage + 84), 0, 0);
        *(_QWORD *)(DerivedStorage + 88) = 0;
      }
      v10 = *(const void **)(DerivedStorage + 616);
      if (v10)
      {
        _Block_release(v10);
        *(_QWORD *)(DerivedStorage + 616) = 0;
      }
      v11 = *(const void **)(DerivedStorage + 608);
      if (v11)
      {
        _Block_release(v11);
        *(_QWORD *)(DerivedStorage + 608) = 0;
      }
      v12 = *(const void **)(DerivedStorage + 736);
      if (v12)
      {
        _Block_release(v12);
        *(_QWORD *)(DerivedStorage + 736) = 0;
      }
      v13 = *(const void **)(DerivedStorage + 728);
      if (v13)
      {
        _Block_release(v13);
        *(_QWORD *)(DerivedStorage + 728) = 0;
      }
      v14 = *(const void **)(DerivedStorage + 856);
      if (v14)
      {
        _Block_release(v14);
        *(_QWORD *)(DerivedStorage + 856) = 0;
      }
      v15 = *(const void **)(DerivedStorage + 848);
      if (v15)
      {
        _Block_release(v15);
        *(_QWORD *)(DerivedStorage + 848) = 0;
      }
      v16 = *(const void **)(DerivedStorage + 976);
      if (v16)
      {
        _Block_release(v16);
        *(_QWORD *)(DerivedStorage + 976) = 0;
      }
      v17 = *(const void **)(DerivedStorage + 968);
      if (v17)
      {
        _Block_release(v17);
        *(_QWORD *)(DerivedStorage + 968) = 0;
      }
      v18 = *(const void **)(DerivedStorage + 1096);
      if (v18)
      {
        _Block_release(v18);
        *(_QWORD *)(DerivedStorage + 1096) = 0;
      }
      v19 = *(const void **)(DerivedStorage + 1088);
      if (v19)
      {
        _Block_release(v19);
        *(_QWORD *)(DerivedStorage + 1088) = 0;
      }
      v20 = *(const void **)(DerivedStorage + 1216);
      if (v20)
      {
        _Block_release(v20);
        *(_QWORD *)(DerivedStorage + 1216) = 0;
      }
      v21 = *(const void **)(DerivedStorage + 1208);
      if (v21)
      {
        _Block_release(v21);
        *(_QWORD *)(DerivedStorage + 1208) = 0;
      }
      v22 = *(__CVPixelBufferPool **)(DerivedStorage + 640);
      if (v22)
      {
        CVPixelBufferPoolRelease(v22);
        *(_QWORD *)(DerivedStorage + 640) = 0;
      }
      v23 = *(__CVPixelBufferPool **)(DerivedStorage + 760);
      if (v23)
      {
        CVPixelBufferPoolRelease(v23);
        *(_QWORD *)(DerivedStorage + 760) = 0;
      }
      v24 = *(__CVPixelBufferPool **)(DerivedStorage + 880);
      if (v24)
      {
        CVPixelBufferPoolRelease(v24);
        *(_QWORD *)(DerivedStorage + 880) = 0;
      }
      v25 = *(__CVPixelBufferPool **)(DerivedStorage + 1000);
      if (v25)
      {
        CVPixelBufferPoolRelease(v25);
        *(_QWORD *)(DerivedStorage + 1000) = 0;
      }
      v26 = *(__CVPixelBufferPool **)(DerivedStorage + 1120);
      if (v26)
      {
        CVPixelBufferPoolRelease(v26);
        *(_QWORD *)(DerivedStorage + 1120) = 0;
      }
      if (*(_QWORD *)(DerivedStorage + 384))
      {
        FigFormatDescriptionRelease();
        *(_QWORD *)(DerivedStorage + 384) = 0;
      }
      v27 = *(const void **)(DerivedStorage + 16);
      if (v27)
      {
        CFRelease(v27);
        *(_QWORD *)(DerivedStorage + 16) = 0;
      }
      v28 = *(const void **)(DerivedStorage + 24);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(DerivedStorage + 24) = 0;
      }
      v29 = *(const void **)(DerivedStorage + 72);
      if (v29)
      {
        CFRelease(v29);
        *(_QWORD *)(DerivedStorage + 72) = 0;
      }
      v30 = *(const void **)(DerivedStorage + 32);
      if (v30)
      {
        CFRelease(v30);
        *(_QWORD *)(DerivedStorage + 32) = 0;
      }
      v31 = *(const void **)(DerivedStorage + 64);
      if (v31)
      {
        CFRelease(v31);
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      v32 = *(const void **)(DerivedStorage + 432);
      if (v32)
      {
        CFRelease(v32);
        *(_QWORD *)(DerivedStorage + 432) = 0;
      }
      v33 = *(const void **)(DerivedStorage + 440);
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(DerivedStorage + 440) = 0;
      }
      if (*(_BYTE *)(DerivedStorage + 522))
      {
        v34 = *(_QWORD *)(DerivedStorage + 104);
        if (v34)
        {
          MEMORY[0x23B7D8B08](v34, 0x1000C40423FBCF9);
          *(_QWORD *)(DerivedStorage + 104) = 0;
        }
      }
      v35 = *(void ***)(DerivedStorage + 1264);
      if (v35)
      {
        H9ISPDisplayStrobeDispose(v35);
        *(_QWORD *)(DerivedStorage + 1264) = 0;
      }
      v36 = *(FILE ***)(DerivedStorage + 1384);
      if (v36)
      {
        DestroyMotionMetadataDebugLogger(v36);
        *(_QWORD *)(DerivedStorage + 1384) = 0;
      }
      v37 = *(NSObject **)(DerivedStorage + 1336);
      if (v37)
      {
        dispatch_source_cancel(v37);
        dispatch_release(*(dispatch_object_t *)(DerivedStorage + 1336));
      }
      v38 = *(NSObject **)(DerivedStorage + 1328);
      if (v38)
        dispatch_release(v38);
      v39 = *(const void **)(DerivedStorage + 1352);
      if (v39)
      {
        CFRelease(v39);
        *(_QWORD *)(DerivedStorage + 1352) = 0;
      }
      v40 = *(H9ISP::H9ISPFirmwareWorkProcessor **)(v1 + 192);
      if (v40)
        H9ISP::H9ISPFirmwareWorkProcessor::FlushSurfaceCache(v40);
    }
    UnlockStreamMutexes(v2);
    CFRelease(v2);
    LogCaptureDeviceEvent(6u, v1, DerivedStorage, 0, 0, 1);
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
  }
}

uint64_t H9ISPCaptureStreamStart(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const __CFArray *v6;
  H9ISP::H9ISPDevice *v7;
  int v8;
  int v9;
  uint64_t v10;
  int NumberOfActiveChannels;
  const __CFArray *v12;
  __int16 v13;
  unsigned int v14;
  int i;
  char v16;
  int v17;
  int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  H9ISP::H9ISPDevice *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  H9ISP::H9ISPDevice *v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int CameraConfig;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned __int16 v56;
  int v57;
  H9ISP::H9ISPDevice *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  __CVPixelBufferPool *v69;
  const void **v70;
  const __CFDictionary *Attributes;
  const __CFNumber *Value;
  __CVPixelBufferPool *v73;
  const __CFDictionary *v74;
  const __CFNumber *v75;
  __CVPixelBufferPool *v76;
  const __CFDictionary *v77;
  const __CFNumber *v78;
  __CVPixelBufferPool *v79;
  const __CFDictionary *v80;
  const __CFNumber *v81;
  __CVPixelBufferPool *v82;
  const __CFDictionary *v83;
  const __CFNumber *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int H9ISPFrameReceiver;
  __int16 v97;
  int v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  double v104;
  int v105;
  uint64_t v106;
  float v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  unsigned __int16 v114;
  uint64_t v115;
  int v116;
  H9ISP::H9ISPDevice *v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  int **v133;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  int v137;
  uint64_t j;
  int v139;
  int **v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  H9ISP::H9ISPFrameReceiver *v161;
  uint64_t started;
  H9ISP::H9ISPFrameReceiver *v163;
  int v164;
  float v165;
  int v166;
  double v167;
  int v168;
  char v169;
  const __CFData *v170;
  const UInt8 *BytePtr;
  H9ISP::H9ISPFrameReceiver *v172;
  const __CFData *v173;
  const UInt8 *v174;
  int v175;
  int v176;
  unsigned int v177;
  uint64_t k;
  float v179;
  int v180;
  unsigned int v181;
  int v182;
  uint64_t m;
  float v184;
  int v185;
  unsigned int v186;
  int v187[2];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  _WORD v198[16];
  int v199;
  __int128 valuePtr;
  __int128 v201;
  _QWORD v202[5];
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t (*v211)(void *, uint64_t, uint64_t, int, uint64_t);
  uint64_t v212;
  void (*v213)(int, unsigned int, int, void *, void *, void *);
  uint64_t v214;
  _BOOL4 v215;
  uint64_t v216;
  BOOL v217;
  char v218;
  int32x2_t v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned __int16 __dst;
  unsigned __int16 v224;
  unsigned __int16 v225;
  int v226;
  int v227;
  int v228;
  int v229;
  char v230;
  char v231[100];
  int v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;

  v236 = *MEMORY[0x24BDAC8D0];
  FigCaptureStreamGetFigBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  H9ISPLogger(6, "H9ISPCaptureStreamStart: camChannel:%d\n", *(_DWORD *)(DerivedStorage + 84));
  LogCaptureDeviceEvent(0xAu, v3, DerivedStorage, 0, 0, 0);
  qword_254291250 = mach_absolute_time();
  waitingForFirstFrame = 1;
  if (!*(_QWORD *)(v3 + 24))
  {
    strcpy(v231, "device invalidated");
    H9ISPLogger(3, "H9ISPCaptureStreamStart: invalid device \n");
    H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v231);
    return 4294954511;
  }
  if (!*(_BYTE *)(DerivedStorage + 256))
  {
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 32));
    v6 = *(const __CFArray **)(v3 + 120);
    if (!v6)
    {
      pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
      strcpy(v231, "device invalidated");
      H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v231);
      return 4294954511;
    }
    CFRetain(*(CFTypeRef *)(v3 + 120));
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 32));
    LockStreamMutexes(v6);
    if (*(_BYTE *)DerivedStorage)
    {
      strcpy(v231, "invalidated");
      CFRelease(v6);
      UnlockStreamMutexes(*(const __CFArray **)(v3 + 120));
      H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v231);
      return 4294954511;
    }
    v7 = *(H9ISP::H9ISPDevice **)(v3 + 24);
    v8 = *(_DWORD *)(DerivedStorage + 84);
    v9 = v8 & 0x7FFFFFFF;
    if (*(_QWORD *)(DerivedStorage + 1352))
      v9 |= (*(_BYTE *)(DerivedStorage + 1368) == 0) << 31;
    v10 = *((_QWORD *)v7 + 7);
    if (*(_BYTE *)(DerivedStorage + 1401))
    {
      H9ISP::H9ISPDevice::DisableTorch(v7, v8);
      H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0, 0);
    }
    *(_WORD *)(DerivedStorage + 1400) = 0;
    NumberOfActiveChannels = GetNumberOfActiveChannels(*(const __CFArray **)(v3 + 120));
    v12 = *(const __CFArray **)(DerivedStorage + 1352);
    if (v12)
    {
      LODWORD(v12) = GetNumberOfActiveChannels(v12);
      if (!(_DWORD)v12)
      {
        if (!*(_BYTE *)(v10 + 80 * *(unsigned int *)(DerivedStorage + 84) + 76))
        {
          v4 = 3758097122;
          H9ISPLogger(3, "H9ISPCaptureStreamStart - HW sync master must be started first\n", *(_QWORD *)v187);
          goto LABEL_29;
        }
        LODWORD(v12) = 0;
      }
    }
    if (*(_BYTE *)(DerivedStorage + 521))
    {
      if (H9ISP::H9ISPDevice::SetMultiCameraEnable(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 1u))
      {
        v4 = 3758097122;
        H9ISPLogger(3, "H9ISPCaptureStreamStart - ISP_SendCommand for CISP_CMD_CH_MULTI_CAM_ENABLE error: 0x%08X\n");
        goto LABEL_29;
      }
    }
    else
    {
      if (NumberOfActiveChannels == (_DWORD)v12 && *(_QWORD *)(DerivedStorage + 1352))
      {
LABEL_27:
        if (ApplySlaveConfiguration(v3, DerivedStorage))
        {
          v4 = 4294954514;
          goto LABEL_29;
        }
LABEL_30:
        if (dword_25429127C
          && H9ISP::H9ISPDevice::WritePropertyValue(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 2306, 0))
        {
          v4 = 3758097122;
          H9ISPLogger(3, "H9ISPCaptureStreamStart - WritePropertyValue(capstream->camChannel, 0x902, 0) error: 0x%08X\n");
          goto LABEL_29;
        }
        if (dword_254291314 != -1
          && H9ISP::H9ISPDevice::WritePropertyValue(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 514, dword_254291314))
        {
          v4 = 3758097122;
          H9ISPLogger(3, "H9ISPCaptureStreamStart - WritePropertyValue(capstream->camChannel, 0x202, %d) error: 0x%08X\n");
          goto LABEL_29;
        }
        if (dword_254291318 != -1
          && H9ISP::H9ISPDevice::EnableStaticLUTForLTM(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), dword_254291318 != 0))
        {
          v4 = 3758097122;
          H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableStaticLUTForLTM(capstream->camChannel, %d) error: 0x%08X\n");
          goto LABEL_29;
        }
        v13 = *(_QWORD *)(DerivedStorage + 1352) != 0;
        H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 30, v13);
        H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 34, v13);
        if (dword_254291280)
          H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 14, 1);
        if (dword_254291284)
          H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 17, 1);
        if (dword_254291278)
          H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 19, 1);
        if (dword_254291308)
          H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 26, 1);
        if (dword_254291338)
          H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 35, 1);
        if (dword_254291288)
        {
          H9ISP::H9ISPDevice::EnableLocalHistogram(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 1u);
          H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 15, 1);
        }
        v14 = dword_25429128C;
        if (dword_25429128C)
        {
          for (i = 0; i != 37; ++i)
          {
            if (((v14 >> i) & 1) != 0)
            {
              H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), i, 1);
              v14 = dword_25429128C;
            }
          }
        }
        v16 = dword_254291320;
        if (dword_254291320 != -1)
        {
          if (!dword_254291320)
          {
            *(_BYTE *)(DerivedStorage + 984) = 0;
LABEL_64:
            *(_BYTE *)(DerivedStorage + 1104) = v16;
            goto LABEL_65;
          }
          if (*(_BYTE *)(DerivedStorage + 888))
            *(_BYTE *)(DerivedStorage + 984) = 1;
          if (*(_BYTE *)(DerivedStorage + 1008))
          {
            v16 = 1;
            goto LABEL_64;
          }
        }
LABEL_65:
        v17 = *(_DWORD *)(DerivedStorage + 84);
        v18 = &gCaptureDeviceCFPrefs[28 * v17];
        v19 = v18[72];
        v20 = v18[71];
        if (v19 < 0x100 || v20 <= 0xFF)
        {
          if (v19 > 0xFF)
            LOBYTE(v19) = v20;
          if (v20 > 0xFF)
            LOBYTE(v20) = v19;
          H9ISP::H9ISPDevice::SetAEConvergenceSpeed2Way(*(H9ISP::H9ISPDevice **)(v3 + 24), v17, v20, v19);
        }
        if (dword_254291268 != -1 || dword_25429126C != -1 || dword_254291270 != -1 || dword_254291274 != -1)
          H9ISP::H9ISPDevice::SetVISParams(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), dword_254291268, dword_25429126C, dword_254291270, dword_254291274);
        if (dword_254291290 >= 1)
          H9ISP::H9ISPDevice::WritePropertyValue(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 2057, 1);
        v21 = *(_DWORD *)(DerivedStorage + 120);
        switch(v21)
        {
          case -1:
            if (*(_BYTE *)(DerivedStorage + 523))
            {
              if (*(_BYTE *)(DerivedStorage + 601))
              {
                v25 = 1;
                v26 = 1;
              }
              else
              {
                v25 = 0;
                v26 = 0;
              }
              H9ISP::H9ISPDevice::EnableVIS(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v25, v26);
            }
LABEL_90:
            v30 = *(_DWORD *)(DerivedStorage + 84);
            if (*(_DWORD *)(DerivedStorage + 124) != -1)
            {
              H9ISP::H9ISPDevice::SuspendAEHdrRatioUpdate(*(H9ISP::H9ISPDevice **)(v3 + 24), v30);
              H9ISP::H9ISPDevice::SetHDRRatioManual(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), *(_DWORD *)(DerivedStorage + 124));
              v30 = *(_DWORD *)(DerivedStorage + 84);
            }
            v31 = *(_DWORD *)(DerivedStorage + 40);
            v32 = *(_DWORD *)(DerivedStorage + 112);
            if (v31 < v32)
              v32 = 0;
            v33 = v31 - v32;
            CameraConfig = H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(v3 + 24), v30, *(_DWORD *)(*(_QWORD *)(DerivedStorage + 104) + 84 * (v31 - v32) + 16), &__dst, v231);
            if (CameraConfig)
            {
              H9ISPLogger(3, "H9ISPCaptureStreamStart - GetCameraConfig error: 0x%08X\n", CameraConfig);
              goto LABEL_25;
            }
            v35 = *(_QWORD *)(DerivedStorage + 104);
            v36 = v35 + 84 * v33;
            v192 = *(_QWORD *)(v36 + 28);
            v193 = *(_QWORD *)(v36 + 20);
            if (*(_DWORD *)(DerivedStorage + 96) == 1)
            {
              if (*(_BYTE *)(v35 + 84 * v33 + 72))
                v37 = 2;
              else
                v37 = 1;
            }
            else
            {
              v37 = 0;
            }
            if (*(int *)(DerivedStorage + 516) >= 1)
            {
              v203 = 0x12400000000;
              LODWORD(v204) = *(_DWORD *)(DerivedStorage + 84);
              HIDWORD(v204) = 1;
              H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)&v203, 0x10u, 0, 0xFFFFFFFF);
            }
            v38 = *(_DWORD *)(DerivedStorage + 116);
            if (v38 != -1)
            {
              if (v38)
                H9ISP::H9ISPDevice::EnableFullResLSC(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
              else
                H9ISP::H9ISPDevice::DisableFullResLSC(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
            }
            v39 = *(_DWORD *)(DerivedStorage + 128);
            if (v39 != -1)
              H9ISP::H9ISPDevice::EnableFocusPixels(*(H9ISP::H9ISPDevice **)(v3 + 24), v9, v39 != 0);
            v40 = *(_DWORD *)(DerivedStorage + 132);
            if (v40 != -1)
              H9ISP::H9ISPDevice::EnableContinuousFocus(*(H9ISP::H9ISPDevice **)(v3 + 24), v9, v40 != 0, *(_BYTE *)(DerivedStorage + 136));
            v41 = *(_DWORD *)(DerivedStorage + 168);
            if (v41 != -1)
            {
              if (v41)
                H9ISP::H9ISPDevice::BinningCompensationStart(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
              else
                H9ISP::H9ISPDevice::BinningCompensationStop(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
            }
            v42 = *(_DWORD *)(DerivedStorage + 144);
            if (v42 == -1)
            {
              v43 = *(_DWORD *)(DerivedStorage + 148);
              if (v43 != -1)
              {
                if (v43)
                  H9ISP::H9ISPDevice::StartHighlightRecovery(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
                else
                  H9ISP::H9ISPDevice::StopHighlightRecovery(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
              }
            }
            else if (v42)
            {
              H9ISP::H9ISPDevice::StartHighlightRecovery(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
              H9ISP::H9ISPDevice::StartLocalToneMapping(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
            }
            else
            {
              H9ISP::H9ISPDevice::StopHighlightRecovery(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
              H9ISP::H9ISPDevice::StopLocalToneMapping(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
            }
            v44 = *(_DWORD *)(DerivedStorage + 172);
            switch(v44)
            {
              case 3:
                H9ISP::H9ISPDevice::EnableContextSwitching(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 2u);
                break;
              case 2:
                H9ISP::H9ISPDevice::EnableContextSwitching(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 1u);
                break;
              case 1:
                H9ISP::H9ISPDevice::EnableContextSwitching(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0);
                break;
              default:
                H9ISP::H9ISPDevice::DisableContextSwitching(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
                break;
            }
            if (!*(_BYTE *)(DerivedStorage + 523))
              goto LABEL_141;
            if (*(_BYTE *)(DerivedStorage + 962))
            {
              v45 = (int *)(DerivedStorage + 964);
            }
            else
            {
              if (!*(_BYTE *)(DerivedStorage + 1082))
              {
                v46 = 0;
LABEL_138:
                v47 = H9ISP::H9ISPDevice::SetTimeMachineDepth(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v46);
                if (v47)
                {
                  H9ISPLogger(3, "H9ISPCaptureStreamStart - Error configuring TimeMachine depth: res=0x%08X\n", v47);
LABEL_140:
                  v4 = 0;
                  goto LABEL_29;
                }
LABEL_141:
                v48 = H9ISP::H9ISPDevice::EnableSBS(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), *(_BYTE *)(*(_QWORD *)(DerivedStorage + 104) + 84 * v33 + 64));
                if (v48)
                {
                  H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableSBS error: 0x%08X\n", v48);
                  goto LABEL_25;
                }
                v49 = *(_QWORD *)(DerivedStorage + 104) + 84 * v33;
                v50 = H9ISP::H9ISPDevice::SetCameraConfig(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), *(_DWORD *)(v49 + 16), v193, v192, *(unsigned __int16 *)(v49 + 4), *(unsigned __int16 *)(v49 + 8), *(_DWORD *)(v49 + 12), *(_DWORD *)(DerivedStorage + 40) >= *(_DWORD *)(DerivedStorage + 112), v37, *(_BYTE *)(v49 + 36), *(_DWORD *)(v49 + 40), *(_DWORD *)(v49 + 44), *(_QWORD *)(v49 + 48), *(_QWORD *)(v49 + 56));
                if (v50)
                {
                  H9ISPLogger(3, "H9ISPCaptureStreamStart - SetCameraConfig error: 0x%08X\n", v50);
                  goto LABEL_25;
                }
                v222 = 0;
                H9ISP::H9ISPDevice::ISP_SelectBestMIPIFrequencyIndex(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), &v222);
                v221 = 0;
                H9ISP::H9ISPDevice::ISP_SelectBestChargePumpFrequencyIndex(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), &v221);
                if (*(_BYTE *)(v3 + 224))
                {
                  H9ISP::H9ISPDevice::SetMIPIFrequencyIndex(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v222);
                  if (v221 != -1)
                    H9ISP::H9ISPDevice::SetChargePumpFrequencyIndex(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v221);
                }
                v51 = H9ISP::H9ISPDevice::SetAWBRGBColorspace(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), *(_BYTE *)(DerivedStorage + 1372));
                if (v51)
                {
                  H9ISPLogger(3, "H9ISPCaptureStreamStart - SetAWBRGBColorspace Error: res=0x%08X\n", v51);
LABEL_151:
                  v4 = 3758097084;
                  goto LABEL_29;
                }
                if (*(_DWORD *)(DerivedStorage + 164) != -1)
                  H9ISP::H9ISPDevice::SetAWBScheme(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), *(_DWORD *)(DerivedStorage + 164));
                v52 = *(_DWORD *)(DerivedStorage + 160);
                if (v52 != -1)
                  H9ISP::H9ISPDevice::EnableTemporalCoherenceFilter(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v52 != 0);
                v53 = *(_DWORD *)(DerivedStorage + 140);
                if (v53 != -1)
                {
                  if (v53)
                    H9ISP::H9ISPDevice::SNFStart(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
                  else
                    H9ISP::H9ISPDevice::SNFStop(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84));
                }
                v54 = *(_DWORD *)(DerivedStorage + 496);
                if (v54 != -1 && !*(_DWORD *)(DerivedStorage + 84))
                {
                  v55 = H9ISP::H9ISPDevice::EnableHighFrameRateAF(*(H9ISP::H9ISPDevice **)(v3 + 24), 0, v54 != 0);
                  if (v55)
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableHighFrameRateAF error: 0x%08X\n", v55);
                }
                v56 = ALSModeForStreaming(DerivedStorage, v3) == 1
                   && *(_BYTE *)(DerivedStorage + 523)
                   && (*(_BYTE *)(DerivedStorage + 962) || *(_BYTE *)(DerivedStorage + 1082));
                H9ISP::H9ISPDevice::AttachOldRawToPreview(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v56);
                if (*(_BYTE *)(DerivedStorage + 60) == 1)
                {
                  if (gCaptureDeviceCFPrefs[0])
                    v57 = v228;
                  else
                    v57 = v227;
                }
                else
                {
                  v57 = -1;
                }
                v58 = *(H9ISP::H9ISPDevice **)(v3 + 24);
                v59 = *(_DWORD *)(DerivedStorage + 84);
                if (dword_254291294)
                {
                  H9ISP::H9ISPDevice::SetAEBracketingWaitForFocusParams(v58, v59, 1, 1000 * dword_254291294);
                  v60 = dword_254291294 / 0x3E8u + 4;
                }
                else
                {
                  H9ISP::H9ISPDevice::SetAEBracketingWaitForFocusParams(v58, v59, 0, 0);
                  v60 = 4;
                }
                *(_DWORD *)(DerivedStorage + 1260) = v60;
                v61 = *(_QWORD *)(DerivedStorage + 104);
                if (*(_BYTE *)(v61 + 84 * v33 + 36))
                {
                  v62 = v61 + 84 * v33;
                  v63 = *(_DWORD *)(v62 + 40);
                  v64 = *(_DWORD *)(v62 + 44);
                }
                else
                {
                  v63 = __dst;
                  v64 = v224;
                }
                *(_DWORD *)(DerivedStorage + 484) = v63;
                *(_DWORD *)(DerivedStorage + 488) = v64;
                v65 = *(_QWORD *)(v3 + 24);
                v203 = DerivedStorage + 88;
                v204 = v65;
                v205 = v233;
                v206 = v235;
                v66 = *(_DWORD *)(DerivedStorage + 80);
                v207 = *(_DWORD *)(DerivedStorage + 84);
                v208 = v232;
                v67 = v234;
                if (*(_BYTE *)(DerivedStorage + 61) != 1)
                  v67 = -1;
                v209 = v67;
                if (*(_BYTE *)(DerivedStorage + 523))
                {
                  v68 = *(_DWORD *)(DerivedStorage + 592);
                  if (v66 > v68)
                    v68 = v66;
                  if (v68 <= *(_DWORD *)(DerivedStorage + 712))
                    v68 = *(_DWORD *)(DerivedStorage + 712);
                  if (v68 <= *(_DWORD *)(DerivedStorage + 952))
                    v68 = *(_DWORD *)(DerivedStorage + 952);
                  if (v68 <= *(_DWORD *)(DerivedStorage + 1072))
                    v68 = *(_DWORD *)(DerivedStorage + 1072);
                  if (v68 <= *(_DWORD *)(DerivedStorage + 832))
                    v66 = *(_DWORD *)(DerivedStorage + 832);
                  else
                    v66 = v68;
                  v69 = *(__CVPixelBufferPool **)(DerivedStorage + 640);
                  v70 = (const void **)MEMORY[0x24BDC56F0];
                  if (v69)
                  {
                    LODWORD(valuePtr) = 0;
                    Attributes = CVPixelBufferPoolGetAttributes(v69);
                    Value = (const __CFNumber *)CFDictionaryGetValue(Attributes, *v70);
                    if (Value)
                      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
                    if (v66 <= (int)valuePtr)
                      v66 = valuePtr;
                  }
                  v73 = *(__CVPixelBufferPool **)(DerivedStorage + 760);
                  if (v73)
                  {
                    LODWORD(valuePtr) = 0;
                    v74 = CVPixelBufferPoolGetAttributes(v73);
                    v75 = (const __CFNumber *)CFDictionaryGetValue(v74, *v70);
                    if (v75)
                      CFNumberGetValue(v75, kCFNumberSInt32Type, &valuePtr);
                    if (v66 <= (int)valuePtr)
                      v66 = valuePtr;
                  }
                  v76 = *(__CVPixelBufferPool **)(DerivedStorage + 1000);
                  if (v76)
                  {
                    LODWORD(valuePtr) = 0;
                    v77 = CVPixelBufferPoolGetAttributes(v76);
                    v78 = (const __CFNumber *)CFDictionaryGetValue(v77, *v70);
                    if (v78)
                      CFNumberGetValue(v78, kCFNumberSInt32Type, &valuePtr);
                    if (v66 <= (int)valuePtr)
                      v66 = valuePtr;
                  }
                  v79 = *(__CVPixelBufferPool **)(DerivedStorage + 1120);
                  if (v79)
                  {
                    LODWORD(valuePtr) = 0;
                    v80 = CVPixelBufferPoolGetAttributes(v79);
                    v81 = (const __CFNumber *)CFDictionaryGetValue(v80, *v70);
                    if (v81)
                      CFNumberGetValue(v81, kCFNumberSInt32Type, &valuePtr);
                    if (v66 <= (int)valuePtr)
                      v66 = valuePtr;
                  }
                  v82 = *(__CVPixelBufferPool **)(DerivedStorage + 880);
                  if (v82)
                  {
                    LODWORD(valuePtr) = 0;
                    v83 = CVPixelBufferPoolGetAttributes(v82);
                    v84 = (const __CFNumber *)CFDictionaryGetValue(v83, *v70);
                    if (v84)
                      CFNumberGetValue(v84, kCFNumberSInt32Type, &valuePtr);
                    if (v66 <= (int)valuePtr)
                      v66 = valuePtr;
                  }
                }
                v85 = *(_QWORD **)(v3 + 216);
                v86 = v85[4];
                v87 = v85[1];
                v88 = v85[2];
                v89 = (_QWORD *)(v87 + 8 * (v86 >> 9));
                if (v88 == v87)
                  v90 = 0;
                else
                  v90 = *v89 + 8 * (v85[4] & 0x1FFLL);
LABEL_223:
                v91 = v90 - 4096;
                while (1)
                {
                  v92 = v88 == v87
                      ? 0
                      : *(_QWORD *)(v87 + (((v85[5] + v86) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v85[5] + v86) & 0x1FF);
                  if (v90 == v92)
                    break;
                  if (v66 < *(_DWORD *)(*(_QWORD *)v90 + 64))
                  {
                    v93 = *(unsigned int *)(DerivedStorage + 84);
                    if (v93 <= 4)
                    {
                      if (*(_BYTE *)(*(_QWORD *)v90 + v93 + 24))
                        v66 = *(_DWORD *)(*(_QWORD *)v90 + 64);
                    }
                  }
                  v90 += 8;
                  v91 += 8;
                  if (*v89 == v91)
                  {
                    v94 = v89[1];
                    ++v89;
                    v90 = v94;
                    goto LABEL_223;
                  }
                }
                v210 = v66;
                v211 = MyH9ISPFrameReceivedProc;
                v212 = a1;
                v213 = MyH9ISPFrameReceiverMessageProc;
                v214 = a1;
                v215 = ALSModeForStreaming(DerivedStorage, v3) == 1;
                v216 = 0;
                v217 = *(_BYTE *)(DerivedStorage + 62) != 0;
                v218 = 1;
                v219 = vshl_n_s32(*(int32x2_t *)(DerivedStorage + 44), 8uLL);
                v220 = *(_DWORD *)(DerivedStorage + 1404);
                if (ALSModeForStreaming(DerivedStorage, v3) == 2)
                {
                  v95 = H9ISP::H9ISPDevice::EnableALS(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 2);
                  if (v95)
                  {
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - Could not enable ALS2: res=0x%08X\n", v95);
                    goto LABEL_151;
                  }
                }
                *(_DWORD *)(DerivedStorage + 1320) = *(_DWORD *)(DerivedStorage + 1316);
                H9ISPFrameReceiver = H9ISP::CreateH9ISPFrameReceiver((uint64_t)&v203);
                if (H9ISPFrameReceiver)
                {
                  H9ISPLogger(3, "H9ISPCaptureStreamStart - Could not create H9ISPFrameReceiver: res=0x%08X\n", H9ISPFrameReceiver);
                  goto LABEL_25;
                }
                if (!*(_BYTE *)(DerivedStorage + 523))
                {
                  v99 = dword_2542912E8;
                  v100 = *(_QWORD *)(DerivedStorage + 104);
                  if (!dword_2542912E8)
                    v99 = *(_DWORD *)(v100 + 84 * v33 + 76);
                  v101 = *(_DWORD *)(DerivedStorage + 524);
                  v102 = *(_DWORD *)(DerivedStorage + 40);
                  v103 = *(_DWORD *)(DerivedStorage + 112);
                  if (v101)
                  {
                    v104 = (double)v101 / 1000000.0;
                    if (v102 >= v103)
                      v105 = *(_DWORD *)(DerivedStorage + 112);
                    else
                      v105 = 0;
                    v106 = 84 * (v102 - v105);
                    if (v100)
                      v106 = v100 + 84 * v33;
                    v107 = *(float *)(v106 + 68);
                    v108 = v225;
                    v109 = vcvtd_n_u64_f64(v107, 8uLL);
                    if (v107 != 0.0)
                      v108 = v109;
                    v110 = v99 + 2 * (v104 / (1.0 / (double)(v108 >> 8)));
                    if (v110 >= 0xA)
                      v99 = 10;
                    else
                      v99 = v110;
                  }
                  v111 = *(_DWORD *)(DerivedStorage + 1372);
                  if (v111 == 1)
                    v112 = 16;
                  else
                    v112 = 32 * (v111 == 2);
                  HIDWORD(v188) = v99 + 1 + *(_DWORD *)(DerivedStorage + 80);
                  LODWORD(v188) = 64;
                  v113 = H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(DerivedStorage + 88), 0, v226, *(_DWORD *)(v100 + 84 * v33 + 4), *(_DWORD *)(v100 + 84 * v33 + 8), *(_DWORD *)(v100 + 84 * v33 + 12), 0, v102 >= v103, 0.0, *(_DWORD *)(DerivedStorage + 96) == 0, 64, v188, 0, v99, v112, 0, CFSTR("YUV"), -1, 0,
                           *(_DWORD *)(DerivedStorage + 1404));
                  if (v113)
                  {
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - addBufferPoolToFrameReceiver (YUV) error: res=0x%08X\n", v113);
                    goto LABEL_25;
                  }
                  v116 = H9ISP::H9ISPDevice::SetScalerChromaSampleOffset(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), *(_DWORD *)(DerivedStorage + 96) == 0, 1, 0);
                  if (v116)
                  {
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - SetScalerChromaSampleOffset: res=0x%08X\n", v116);
                    goto LABEL_140;
                  }
                  if (v57 != -1)
                  {
                    HIDWORD(v189) = v99 + *(_DWORD *)(DerivedStorage + 80) + 2;
                    LODWORD(v189) = 64;
                    H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(DerivedStorage + 88), 1, v57, __dst, v224, 0, 0, 2, 0.0, 1, 64, v189, 0, v99 + 1, 1024, 0, CFSTR("RAW"), -1, 0,
                      *(_DWORD *)(DerivedStorage + 1404));
                  }
LABEL_303:
                  if (dword_254291324 == -1)
                  {
                    v4 = 0;
                  }
                  else
                  {
                    v120 = H9ISP::H9ISPDevice::ISP_PreviewStreamSet(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), dword_254291324);
                    if (v120)
                    {
                      H9ISPLogger(3, "ISP_PreviewStreamSet res=0x%08X\n", v120);
                      v4 = 4294954516;
                    }
                    else
                    {
                      v4 = 0;
                    }
                    *(_DWORD *)(DerivedStorage + 1280) = dword_254291324;
                  }
                  v121 = *(_DWORD *)(DerivedStorage + 84);
                  if (*(_DWORD *)(v10 + 80 * v121 + 16) == 1919251564)
                  {
                    if (dword_254291310 && *(_QWORD *)(DerivedStorage + 1352))
                    {
                      H9ISP::H9ISPDevice::EnablePDEOutput(*(H9ISP::H9ISPDevice **)(v3 + 24), v121, 1, 1);
                      v122 = dword_254291310;
                      *(_DWORD *)(DerivedStorage + 1376) = dword_254291310 | 4;
                      if (dword_254291328)
                        *(_DWORD *)(DerivedStorage + 1376) = v122 | 6;
                      v123 = dword_254291330;
                      if (dword_254291330 == -1)
                        v123 = 1;
                      if (dword_25429132C == -1)
                        v124 = v123;
                      else
                        v124 = dword_25429132C;
                    }
                    else
                    {
                      *(_DWORD *)(DerivedStorage + 1376) = 0;
                      H9ISP::H9ISPDevice::EnablePDEOutput(*(H9ISP::H9ISPDevice **)(v3 + 24), v121, 0, 0);
                      if (dword_25429132C == -1)
                        v124 = 2;
                      else
                        v124 = dword_25429132C;
                    }
                    H9ISP::H9ISPDevice::SetFocusMultiCamBehavior(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v124);
                  }
                  v125 = *(_DWORD *)(DerivedStorage + 84);
                  if (*(_DWORD *)(v10 + 80 * v125 + 16) == 1919246706)
                  {
                    if (dword_254291310 && *(_QWORD *)(DerivedStorage + 1352))
                      H9ISP::H9ISPDevice::EnablePDEOutput(*(H9ISP::H9ISPDevice **)(v3 + 24), v125, 1, 1);
                    else
                      H9ISP::H9ISPDevice::EnablePDEOutput(*(H9ISP::H9ISPDevice **)(v3 + 24), v125, 0, 0);
                  }
                  if (*(_DWORD *)(DerivedStorage + 1376))
                  {
                    v126 = *(_DWORD *)(DerivedStorage + 80);
                    if (*(_BYTE *)(DerivedStorage + 528) && *(_DWORD *)(DerivedStorage + 592) > v126)
                      v126 = *(_DWORD *)(DerivedStorage + 592);
                    if (*(_BYTE *)(DerivedStorage + 648) && *(_DWORD *)(DerivedStorage + 712) > v126)
                      v126 = *(_DWORD *)(DerivedStorage + 712);
                    if (*(_BYTE *)(DerivedStorage + 768) && *(_DWORD *)(DerivedStorage + 832) > v126)
                      v126 = *(_DWORD *)(DerivedStorage + 832);
                    if (*(_BYTE *)(DerivedStorage + 888))
                      v127 = *(_DWORD *)(DerivedStorage + 952) & ~(*(int *)(DerivedStorage + 952) >> 31);
                    else
                      v127 = 0;
                    if (*(_BYTE *)(DerivedStorage + 1008) && *(_DWORD *)(DerivedStorage + 1072) > v127)
                      v127 = *(_DWORD *)(DerivedStorage + 1072);
                    v128 = *(_QWORD **)(v3 + 216);
                    v129 = v128[4];
                    v131 = v128[1];
                    v130 = v128[2];
                    v132 = (_QWORD *)(v131 + 8 * (v129 >> 9));
                    if (v130 == v131)
                      v133 = 0;
                    else
                      v133 = (int **)(*v132 + 8 * (v128[4] & 0x1FFLL));
                    while (1)
                    {
                      v134 = v130 == v131
                           ? 0
                           : *(_QWORD *)(v131 + (((v128[5] + v129) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v128[5] + v129) & 0x1FF);
                      if (v133 == (int **)v134)
                        break;
                      v135 = *(unsigned int *)(DerivedStorage + 84);
                      if (v135 <= 4)
                      {
                        v136 = *v133;
                        if (*((_BYTE *)*v133 + v135 + 24))
                        {
                          v137 = 0;
                          for (j = 24; j != 29; ++j)
                            v137 += *((unsigned __int8 *)v136 + j);
                          v139 = v136[16] - v137 * v136[18];
                          if (*(_BYTE *)(DerivedStorage + 528) && !*v136
                            || *(_BYTE *)(DerivedStorage + 648) && *v136 == 10
                            || *(_BYTE *)(DerivedStorage + 768) && *v136 == 6)
                          {
                            if (v139 > v126)
                              v126 = v139;
                          }
                          else if (*(_BYTE *)(DerivedStorage + 888) && *v136 == 7)
                          {
                            if (v139 > v127)
                              v127 = v139;
                          }
                          else if (*(_BYTE *)(DerivedStorage + 1008))
                          {
                            v141 = *v136;
                            if (v139 <= v127)
                              v139 = v127;
                            if (v141 == 9)
                              v127 = v139;
                          }
                        }
                      }
                      if ((int **)((char *)++v133 - *v132) == (int **)4096)
                      {
                        v140 = (int **)v132[1];
                        ++v132;
                        v133 = v140;
                      }
                    }
                    v142 = v127 + v126;
                    H9ISPLogger(6, "H9ISPCaptureStreamStart: Depth pool size=%d,prime=%d", v127 + v126, 4);
                    H9ISP::H9ISPFrameReceiver::setPCEPreset(*(_QWORD *)(DerivedStorage + 88), *(_DWORD *)(DerivedStorage + 1380));
                    H9ISP::H9ISPFrameReceiver::EnablePDEStreaming(*(_QWORD *)(DerivedStorage + 88), *(_DWORD *)(DerivedStorage + 1376), v142, 4);
                  }
                  v143 = *(_DWORD *)(DerivedStorage + 424);
                  v144 = *(_DWORD *)(DerivedStorage + 428);
                  if (!*(_QWORD *)(DerivedStorage + 424))
                    goto LABEL_378;
                  valuePtr = 0u;
                  v201 = 0u;
                  memset(v202, 0, 28);
                  WORD2(valuePtr) = -16366;
                  DWORD2(valuePtr) = *(_DWORD *)(DerivedStorage + 84);
                  HIDWORD(valuePtr) = v143;
                  LODWORD(v201) = v144;
                  v164 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)&valuePtr, 0x3Cu, 0, 0xFFFFFFFF);
                  if (v164)
                  {
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - Error configuring edge-map: res=0x%08X\n", v164);
                    goto LABEL_25;
                  }
                  if (*(_DWORD *)(DerivedStorage + 424))
                  {
                    H9ISPLogger(6, "Adding buffer-pool to receiver for horizontal edge map\n");
                    LODWORD(v190) = 64;
                    HIDWORD(v190) = *(_DWORD *)(DerivedStorage + 80) + 4;
                    H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(DerivedStorage + 88), 4, v202[0], WORD4(v201) * WORD5(v201), WORD6(v201), 0, 0, 5, 0.0, 1, SHIDWORD(v202[0]), v190, 0, 3, 0, 0, CFSTR("AUX (Horizontal Edge Map)"), -1, 0,
                      *(_DWORD *)(DerivedStorage + 1404));
                    *(_DWORD *)(DerivedStorage + 448) = v202[0];
                    v170 = *(const __CFData **)(DerivedStorage + 432);
                    if (v170)
                    {
                      BytePtr = CFDataGetBytePtr(v170);
                      if (BytePtr)
                      {
                        v199 = 0;
                        memset(v198, 0, sizeof(v198));
                        v198[2] = -16368;
                        switch(*(_DWORD *)(DerivedStorage + 424))
                        {
                          case 6:
                            *(_DWORD *)&v198[6] = 1;
                            break;
                          case 7:
                            *(_DWORD *)&v198[6] = 1;
                            goto LABEL_442;
                          case 8:
                            v198[8] = 0;
                            break;
                          case 9:
LABEL_442:
                            v198[8] = 1;
                            break;
                          default:
                            break;
                        }
                        for (k = 0; k != 9; ++k)
                        {
                          v179 = *(float *)&BytePtr[4 * k];
                          LOWORD(v180) = vcvts_n_s32_f32(v179, 0xDuLL);
                          v181 = vcvts_n_s32_f32(fabsf(v179), 0xDuLL);
                          if (v179 < 0.0)
                            v180 = -v181;
                          v198[k + 9] = v180;
                        }
                        v182 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)v198, 0x24u, 0, 0xFFFFFFFF);
                        if (v182)
                          goto LABEL_448;
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(DerivedStorage + 448) = -1;
                  }
                  if (*(_DWORD *)(DerivedStorage + 428))
                  {
                    H9ISPLogger(6, "Adding buffer-pool to receiver for vertical edge map\n");
                    LODWORD(v191) = 64;
                    HIDWORD(v191) = *(_DWORD *)(DerivedStorage + 80) + 4;
                    H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(*(_QWORD *)(DerivedStorage + 88), 4, SHIDWORD(v202[2]), WORD2(v202[1]) * HIWORD(v202[1]), LOWORD(v202[2]), 0, 0, 5, 0.0, 1, v202[3], v191, 0, 3, 0, 0, CFSTR("AUX (Vertical Edge Map)"), -1, 0,
                      *(_DWORD *)(DerivedStorage + 1404));
                    *(_DWORD *)(DerivedStorage + 452) = HIDWORD(v202[2]);
                    v173 = *(const __CFData **)(DerivedStorage + 440);
                    if (v173)
                    {
                      v174 = CFDataGetBytePtr(v173);
                      if (v174)
                      {
                        memset(v198, 0, sizeof(v198));
                        v198[2] = -16368;
                        v199 = 0;
                        *(_DWORD *)&v198[4] = 1;
                        switch(*(_DWORD *)(DerivedStorage + 428))
                        {
                          case 6:
                            *(_DWORD *)&v198[6] = 1;
                            break;
                          case 7:
                            *(_DWORD *)&v198[6] = 1;
                            goto LABEL_451;
                          case 8:
                            v198[8] = 0;
                            break;
                          case 9:
LABEL_451:
                            v198[8] = 1;
                            break;
                          default:
                            break;
                        }
                        for (m = 0; m != 9; ++m)
                        {
                          v184 = *(float *)&v174[4 * m];
                          LOWORD(v185) = vcvts_n_s32_f32(v184, 0xDuLL);
                          v186 = vcvts_n_s32_f32(fabsf(v184), 0xDuLL);
                          if (v184 < 0.0)
                            v185 = -v186;
                          v198[m + 9] = v185;
                        }
                        v182 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)v198, 0x24u, 0, 0xFFFFFFFF);
                        if (v182)
                        {
LABEL_448:
                          H9ISPLogger(3, "H9ISPCaptureStreamStart - Error configuring edge-map coefficients: res=0x%08X\n", v182);
                          goto LABEL_25;
                        }
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(DerivedStorage + 452) = -1;
                  }
LABEL_378:
                  v145 = *(_DWORD *)(DerivedStorage + 460);
                  if (v145 == -1)
                    goto LABEL_381;
                  v146 = *(_DWORD *)(DerivedStorage + 464);
                  if (v146 == -1
                    || H9ISP::H9ISPFrameReceiver::setNewOutputSize(*(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88), v145, v146, *(_DWORD *)(DerivedStorage + 468), *(_DWORD *)(DerivedStorage + 472), *(_DWORD *)(DerivedStorage + 476), *(_DWORD *)(DerivedStorage + 480)))
                  {
                    goto LABEL_381;
                  }
                  v196 = 0;
                  v197 = 0;
                  v195 = 0;
                  v194 = 0;
                  H9ISP::H9ISPFrameReceiver::getOutputSize(*(_QWORD **)(DerivedStorage + 88), (_DWORD *)&v197 + 1, &v197, (_DWORD *)&v196 + 1, &v196, &v195, &v194);
                  *(_QWORD *)v198 = 0;
                  *(_DWORD *)&v198[4] = *(_DWORD *)(DerivedStorage + 84);
                  v198[2] = 2049;
                  *(_OWORD *)&v198[6] = *(_OWORD *)(DerivedStorage + 468);
                  if (H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)v198, 0x1Cu, 0, 0xFFFFFFFF))goto LABEL_426;
                  valuePtr = 0u;
                  v201 = 0u;
                  v202[0] = 0;
                  v175 = *(_DWORD *)(DerivedStorage + 84);
                  WORD2(valuePtr) = 2817;
                  v176 = v196 + HIDWORD(v197);
                  DWORD2(valuePtr) = v175;
                  HIDWORD(valuePtr) = v196 + HIDWORD(v197);
                  LODWORD(v202[1]) = HIDWORD(v196);
                  LODWORD(v201) = v197;
                  DWORD1(v201) = v194 == 0;
                  DWORD2(v201) = v195;
                  if (v195 == 1)
                  {
                    v177 = (2 * v176 + 63) & 0xFFFFFFC0;
                  }
                  else
                  {
                    v177 = (v176 + 63) & 0xFFFFFFC0;
                    LODWORD(v202[0]) = v177;
                  }
                  HIDWORD(v201) = v177;
                  if (!H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)&valuePtr, 0x2Cu, 0, 0xFFFFFFFF))
                  {
LABEL_381:
                    H9ISP::H9ISPFrameReceiver::EnableMetaDataDictionaryCreationOnRealTimeThread(*(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88), *(_BYTE *)(DerivedStorage + 520) == 0);
                    if (*(_DWORD *)(DerivedStorage + 52))
                    {
                      v147 = H9ISP::H9ISPDevice::SetGainCap(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), (unsigned __int16)*(_DWORD *)(DerivedStorage + 52));
                      if (v147)
                        H9ISPLogger(3, "H9ISPCaptureStreamStart - Could not SetGainCap = 0x%08X: res=0x%08X\n", *(_DWORD *)(DerivedStorage + 52), v147);
                      *(_DWORD *)(DerivedStorage + 52) = 0;
                    }
                    if (!*(_BYTE *)(DerivedStorage + 523))
                    {
                      v165 = *(float *)(DerivedStorage + 1252);
                      if (v165 != 1.0)
                      {
                        v166 = H9ISP::H9ISPDevice::SetZoomFactor(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), vcvts_n_s32_f32(v165, 0xAuLL));
                        if (v166)
                          H9ISPLogger(3, "H9ISPCaptureStreamStart - Could not Initial ZoomFactor = %10.5f: res=0x%08X\n", *(float *)(DerivedStorage + 1252), v166);
                      }
                    }
                    if (*(_DWORD *)(DerivedStorage + 44) <= 2u)
                      H9ISP::H9ISPFrameReceiver::SetFrameDoneTimeoutDuration(*(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88), 3.0);
                    v148 = *(_QWORD *)(DerivedStorage + 88);
                    *(_BYTE *)(DerivedStorage + 1285) = *(_BYTE *)(v148 + 437);
                    *(_DWORD *)(DerivedStorage + 1288) = *(_DWORD *)(v148 + 440);
                    *(_QWORD *)(DerivedStorage + 1296) = *(_QWORD *)(v148 + 360);
                    SetMetaDataOptionsOnFrameReceiver(DerivedStorage);
                    *(_DWORD *)(DerivedStorage + 412) = 0;
                    if (dword_2542912EC >= 1)
                      H9ISP::H9ISPDevice::EnableCFOV(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 1u);
                    if ((unsigned __int16)word_2542912FC != 0xFFFF)
                      H9ISP::H9ISPDevice::EnableFocus(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0, word_2542912FC);
                    v149 = *(_DWORD *)(DerivedStorage + 84);
                    v150 = gCaptureDeviceCFPrefs[28 * v149 + 73];
                    if (v150 != -1)
                    {
                      v151 = H9ISP::H9ISPDevice::EnableDPM(*(H9ISP::H9ISPDevice **)(v3 + 24), v149, v150 != 0);
                      if (v151)
                        H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableDPM error. res=0x%08X\n", v151);
                    }
                    v152 = *(_DWORD *)(DerivedStorage + 84);
                    v153 = gCaptureDeviceCFPrefs[28 * v152 + 74];
                    if (v153 != -1)
                    {
                      v154 = H9ISP::H9ISPDevice::EnableDPMAssistedAE(*(H9ISP::H9ISPDevice **)(v3 + 24), v152, v153 != 0);
                      if (v154)
                        H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableDPMAssistedAE error. res=0x%08X\n", v154);
                    }
                    v155 = *(_DWORD *)(DerivedStorage + 84);
                    v156 = gCaptureDeviceCFPrefs[28 * v155 + 75];
                    if (v156 != -1)
                    {
                      v157 = H9ISP::H9ISPDevice::SetAPSMode(*(H9ISP::H9ISPDevice **)(v3 + 24), v155, v156);
                      if (v157)
                        H9ISPLogger(3, "H9ISPCaptureStreamStart - SetAPSMode error. res=0x%08X\n", v157);
                    }
                    v158 = *(_DWORD *)(DerivedStorage + 84);
                    v159 = gCaptureDeviceCFPrefs[28 * v158 + 77];
                    if (v159 != -1)
                    {
                      H9ISP::H9ISPDevice::WritePropertyValue(*(H9ISP::H9ISPDevice **)(v3 + 24), v158, 3076, v159);
                      v158 = *(_DWORD *)(DerivedStorage + 84);
                    }
                    v160 = LOWORD(gCaptureDeviceCFPrefs[28 * v158 + 79]) | (gCaptureDeviceCFPrefs[28 * v158 + 78] << 16);
                    if (v160)
                      H9ISP::H9ISPDevice::WritePropertyValue(*(H9ISP::H9ISPDevice **)(v3 + 24), v158, 5127, v160);
                    v161 = *(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88);
                    *(_DWORD *)(DerivedStorage + 1272) = -1;
                    *(_WORD *)(DerivedStorage + 1276) = -1;
                    H9ISP::H9ISPFrameReceiver::SetFDFeatureFlags(v161, *(_DWORD *)(DerivedStorage + 1256));
                    started = H9ISP::H9ISPFrameReceiver::startReceive(*(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88));
                    if (!(_DWORD)started)
                    {
                      v167 = *(double *)(DerivedStorage + 248);
                      if (v167 != 0.0)
                        started = H9ISP::H9ISPDevice::SetMaxIntegrationTime(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), (v167 * 1000.0));
                      v168 = *(_DWORD *)(DerivedStorage + 1316);
                      if (v168 != *(_DWORD *)(DerivedStorage + 1312))
                      {
                        *(_QWORD *)&valuePtr = 0xD0300000000;
                        DWORD2(valuePtr) = 0;
                        HIDWORD(valuePtr) = v168;
                        LODWORD(v201) = 0;
                        DWORD2(valuePtr) = *(_DWORD *)(DerivedStorage + 84);
                        v169 = *(_BYTE *)(DerivedStorage + 1256);
                        LODWORD(v201) = v169 & 1;
                        *(_WORD *)((char *)&v201 + 1) = (v169 & 2) != 0;
                        BYTE2(v201) = (v169 & 4) != 0;
                        started = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(v3 + 24), (unsigned __int8 *)&valuePtr, 0x14u, 0, 0xFFFFFFFF);
                      }
                      if (*(_QWORD *)(DerivedStorage + 1352))
                        started = (uint64_t)ConfigureNoDataTimer(DerivedStorage);
                      MEMORY[0x23B7D87FC](started);
                      CMNotificationCenterPostNotification();
                      goto LABEL_29;
                    }
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - Could not start H9ISPFrameReceiver: res=0x%08X\n", started);
                    H9ISP::H9ISPFrameReceiver::stopReceive(*(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88));
                    H9ISP::DestroyH9ISPFrameReceiver(*(H9ISP **)(DerivedStorage + 88), v163);
                    H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0, 0);
                    v4 = 3758097122;
                  }
                  else
                  {
LABEL_426:
                    H9ISP::DestroyH9ISPFrameReceiver(*(H9ISP **)(DerivedStorage + 88), v172);
                    H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0, 0);
                  }
                  *(_QWORD *)(DerivedStorage + 88) = 0;
LABEL_29:
                  UnlockStreamMutexes(v6);
                  CFRelease(v6);
                  LogCaptureDeviceEvent(0xAu, v3, DerivedStorage, 0, 0, 1);
                  return v4;
                }
                v97 = *(_BYTE *)(DerivedStorage + 600)
                   || *(_BYTE *)(DerivedStorage + 720)
                   || *(_BYTE *)(DerivedStorage + 840)
                   || *(_BYTE *)(DerivedStorage + 960)
                   || *(_BYTE *)(DerivedStorage + 1080)
                   || *(_BYTE *)(DerivedStorage + 1128) != 0;
                v98 = H9ISP::H9ISPDevice::EnableLocalRawBufferMode(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v97 ^ 1u);
                if (v98)
                {
                  H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableLocalRawBufferMode error: 0x%08X\n", v98);
                  goto LABEL_25;
                }
                if (*(_BYTE *)(DerivedStorage + 1128))
                {
                  if ((v230 & 1) != 0)
                    v114 = 2;
                  else
                    v114 = 1;
                  v115 = H9ISP::H9ISPDevice::EnableFullResCapture(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), v114);
                  v4 = v115;
                  if ((_DWORD)v115)
                    goto LABEL_271;
                }
                else
                {
                  v115 = H9ISP::H9ISPDevice::EnableFullResCapture(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0);
                  v4 = v115;
                  if ((_DWORD)v115)
                  {
LABEL_271:
                    H9ISPLogger(3, "H9ISPCaptureStreamStart - EnableFullResCapture error: res=0x%08X\n", v115);
                    goto LABEL_29;
                  }
                }
                if (dword_254291300 == -1)
                {
                  if (*(_BYTE *)(DerivedStorage + 600)
                    || *(_BYTE *)(DerivedStorage + 720)
                    || *(_BYTE *)(DerivedStorage + 840)
                    || *(_BYTE *)(DerivedStorage + 960)
                    || *(_BYTE *)(DerivedStorage + 1080)
                    || *(_BYTE *)(DerivedStorage + 1128)
                    || v229 != 1)
                  {
                    v117 = *(H9ISP::H9ISPDevice **)(v3 + 24);
                    v118 = *(_DWORD *)(DerivedStorage + 84);
                    if (*(_DWORD *)(DerivedStorage + 416) != -1)
                      goto LABEL_278;
                    goto LABEL_289;
                  }
                }
                else if (!dword_254291300)
                {
                  v117 = *(H9ISP::H9ISPDevice **)(v3 + 24);
                  v118 = *(_DWORD *)(DerivedStorage + 84);
                  if (*(_DWORD *)(DerivedStorage + 416) != -1)
                  {
LABEL_278:
                    H9ISP::H9ISPDevice::SetSensorInterfacePixelFormat(v117, v118, *(_DWORD *)(DerivedStorage + 416), 1);
LABEL_290:
                    v119 = 0;
                    goto LABEL_291;
                  }
LABEL_289:
                  H9ISP::H9ISPDevice::SetSensorInterfacePixelFormat(v117, v118, 3, 1);
                  goto LABEL_290;
                }
                H9ISP::H9ISPDevice::SetSensorInterfacePixelFormat(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 1, 0);
                v119 = 1;
LABEL_291:
                *(_DWORD *)(DerivedStorage + 1308) = v119;
                if (*(_BYTE *)(DerivedStorage + 528))
                  ActivatePrimaryScalerOutputInFrameReceiver(DerivedStorage, v3);
                if (*(_BYTE *)(DerivedStorage + 648))
                  ActivateSecondaryScalerOutputInFrameReceiver(DerivedStorage, v3);
                if (*(_BYTE *)(DerivedStorage + 768))
                  ActivateIntermediateTapOutputInFrameReceiver(DerivedStorage, v3);
                if (*(_BYTE *)(DerivedStorage + 888))
                  ActivateStillImageOutputInFrameReceiver(DerivedStorage, v3);
                if (*(_BYTE *)(DerivedStorage + 1008))
                  ActivateStillImageIntermediateTapOutputInFrameReceiver(DerivedStorage, v3);
                if (*(_BYTE *)(DerivedStorage + 1128))
                  ActivateStillImageQuadraOutputInFrameReceiver(DerivedStorage, v3);
                goto LABEL_303;
              }
              v45 = (int *)(DerivedStorage + 1084);
            }
            v46 = *v45;
            goto LABEL_138;
          case 1:
            v22 = *(H9ISP::H9ISPDevice **)(v3 + 24);
            v23 = *(_DWORD *)(DerivedStorage + 84);
            v24 = 1;
            break;
          case 2:
            v22 = *(H9ISP::H9ISPDevice **)(v3 + 24);
            v23 = *(_DWORD *)(DerivedStorage + 84);
            v24 = 0;
            break;
          default:
            H9ISP::H9ISPDevice::EnableVIS(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 0, 0);
            H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 16, 0);
            v27 = *(H9ISP::H9ISPDevice **)(v3 + 24);
            v28 = *(_DWORD *)(DerivedStorage + 84);
            v29 = 0;
            goto LABEL_89;
        }
        H9ISP::H9ISPDevice::EnableVIS(v22, v23, 1, v24);
        H9ISP::H9ISPDevice::EnableMetadataSection(*(H9ISP::H9ISPDevice **)(v3 + 24), *(_DWORD *)(DerivedStorage + 84), 16, 1);
        v27 = *(H9ISP::H9ISPDevice **)(v3 + 24);
        v28 = *(_DWORD *)(DerivedStorage + 84);
        v29 = 1;
LABEL_89:
        H9ISP::H9ISPDevice::EnableMetadataSection(v27, v28, 18, v29);
        goto LABEL_90;
      }
      if (NumberOfActiveChannels)
      {
LABEL_25:
        v4 = 3758097122;
        goto LABEL_29;
      }
    }
    if (!*(_QWORD *)(DerivedStorage + 1352))
      goto LABEL_30;
    goto LABEL_27;
  }
  strcpy(v231, "processRawSessionStarted");
  H9ISPLogger(3, "FigSignalError: %d, %s\n", -12780, v231);
  return 4294954516;
}

uint64_t H9ISPCaptureStreamStop()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFArray *v2;
  uint64_t v3;
  uint64_t v5;
  const __CFArray *v6;
  uint64_t v7;
  unsigned int NumberOfActiveChannels;
  H9ISP::H9ISPFrameReceiver *v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  H9ISP::H9ISPFrameReceiverBufferPool *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  H9ISP::H9ISPFirmwareWorkProcessor *v21;
  __CVPixelBufferPool *v22;
  __CVPixelBufferPool *v23;
  __CVPixelBufferPool *v24;
  __CVPixelBufferPool *v25;
  __CVPixelBufferPool *v26;
  char v27[72];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  FigCaptureStreamGetFigBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  H9ISPLogger(6, "H9ISPCaptureStreamStop: camChannel:%d\n", *(_DWORD *)(DerivedStorage + 84));
  LogCaptureDeviceEvent(0xBu, v1, DerivedStorage, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  v2 = *(const __CFArray **)(v1 + 120);
  if (!v2)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
    strcpy(v27, "device invalidated");
    H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v27);
    return 4294954511;
  }
  CFRetain(*(CFTypeRef *)(v1 + 120));
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
  LockStreamMutexes(v2);
  if (!*(_BYTE *)DerivedStorage)
  {
    v5 = *(_QWORD *)(v1 + 24);
    if (!v5)
    {
      UnlockStreamMutexes(v2);
      CFRelease(v2);
      return 4294954616;
    }
    v3 = 3758097122;
    if (*(_QWORD *)(DerivedStorage + 88))
    {
      v6 = *(const __CFArray **)(DerivedStorage + 1352);
      if (v6)
      {
        v7 = *(_QWORD *)(v5 + 56);
        NumberOfActiveChannels = GetNumberOfActiveChannels(v6);
        if (NumberOfActiveChannels >= 2 && *(_BYTE *)(v7 + 80 * *(unsigned int *)(DerivedStorage + 84) + 76))
        {
          H9ISPLogger(3, "H9ISPCaptureStreamStop - HW sync master must be stopped last\n");
          goto LABEL_56;
        }
      }
      else
      {
        NumberOfActiveChannels = 0;
      }
      H9ISP::H9ISPFrameReceiver::stopReceive(*(H9ISP::H9ISPFrameReceiver **)(DerivedStorage + 88));
      if (*(_DWORD *)(DerivedStorage + 1280) == 2)
      {
        v3 = H9ISP::H9ISPDevice::ISP_PreviewStreamSet(*(H9ISP::H9ISPDevice **)(v1 + 24), *(_DWORD *)(DerivedStorage + 84), 1);
        if ((_DWORD)v3)
          H9ISPLogger(3, "H9ISPCaptureStreamStop - ISP_PreviewStreamSet failed\n");
        else
          *(_DWORD *)(DerivedStorage + 1280) = 1;
      }
      else
      {
        v3 = 0;
      }
      H9ISP::DestroyH9ISPFrameReceiver(*(H9ISP **)(DerivedStorage + 88), v9);
      H9ISP::H9ISPDevice::ISP_EnableSensorPower(*(H9ISP::H9ISPDevice **)(v1 + 24), *(_DWORD *)(DerivedStorage + 84), 0, 0);
      *(_QWORD *)(DerivedStorage + 88) = 0;
      v10 = *(int64x2_t **)(v1 + 216);
      v11 = v10->i64[1];
      v12 = v10[1].i64[0];
      v13 = (char *)(v11 + 8 * ((unint64_t)v10[2].i64[0] >> 9));
      if (v12 == v11)
        v14 = 0;
      else
        v14 = (char *)(*(_QWORD *)v13 + 8 * (v10[2].i64[0] & 0x1FF));
      while (1)
      {
        if (v12 == v11)
        {
          v19 = 0;
        }
        else
        {
          v18 = v10[2].i64[1] + v10[2].i64[0];
          v19 = *(_QWORD *)(v11 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF);
        }
        if (v14 == (char *)v19)
          break;
        if (NumberOfActiveChannels == 1)
        {
          v15 = *(H9ISP::H9ISPFrameReceiverBufferPool **)v14;
          v13 = (char *)std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase(v10, v13, v14);
          v14 = v16;
          if (v15)
          {
            H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v15);
            MEMORY[0x23B7D8B08]();
          }
        }
        else
        {
          v14 += 8;
          if (&v14[-*(_QWORD *)v13] == (char *)4096)
          {
            v17 = (char *)*((_QWORD *)v13 + 1);
            v13 += 8;
            v14 = v17;
          }
        }
        v10 = *(int64x2_t **)(v1 + 216);
        v11 = v10->i64[1];
        v12 = v10[1].i64[0];
      }
      if (*(_DWORD *)(DerivedStorage + 56))
      {
        dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 1336), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
        if (*(_QWORD *)(DerivedStorage + 1264))
          DisableDisplayStrobeOverlay(DerivedStorage);
        v20 = *(_QWORD *)(v1 + 184);
        if (v20)
          v20 = H9ISP::H9ISPPhotometerManager::PhotometerCommand(v20, 1);
        MEMORY[0x23B7D87FC](v20);
        CMNotificationCenterPostNotification();
        *(_DWORD *)(DerivedStorage + 56) = 0;
      }
      *(_DWORD *)(DerivedStorage + 52) = 0;
      if (*(_QWORD *)(DerivedStorage + 384))
      {
        FigFormatDescriptionRelease();
        *(_QWORD *)(DerivedStorage + 384) = 0;
      }
      if (*(_BYTE *)(DerivedStorage + 408))
        *(_BYTE *)(DerivedStorage + 408) = 0;
      v21 = *(H9ISP::H9ISPFirmwareWorkProcessor **)(v1 + 192);
      if (v21)
        H9ISP::H9ISPFirmwareWorkProcessor::FlushSurfaceCache(v21);
      v22 = *(__CVPixelBufferPool **)(DerivedStorage + 640);
      if (v22)
      {
        CVPixelBufferPoolRelease(v22);
        *(_QWORD *)(DerivedStorage + 640) = 0;
      }
      v23 = *(__CVPixelBufferPool **)(DerivedStorage + 760);
      if (v23)
      {
        CVPixelBufferPoolRelease(v23);
        *(_QWORD *)(DerivedStorage + 760) = 0;
      }
      v24 = *(__CVPixelBufferPool **)(DerivedStorage + 880);
      if (v24)
      {
        CVPixelBufferPoolRelease(v24);
        *(_QWORD *)(DerivedStorage + 880) = 0;
      }
      v25 = *(__CVPixelBufferPool **)(DerivedStorage + 1000);
      if (v25)
      {
        CVPixelBufferPoolRelease(v25);
        *(_QWORD *)(DerivedStorage + 1000) = 0;
      }
      v26 = *(__CVPixelBufferPool **)(DerivedStorage + 1120);
      if (v26)
      {
        CVPixelBufferPoolRelease(v26);
        *(_QWORD *)(DerivedStorage + 1120) = 0;
      }
      MEMORY[0x23B7D87FC]();
      CMNotificationCenterPostNotification();
    }
LABEL_56:
    UnlockStreamMutexes(v2);
    CFRelease(v2);
    LogCaptureDeviceEvent(0xBu, v1, DerivedStorage, 0, 0, 1);
    return v3;
  }
  UnlockStreamMutexes(v2);
  CFRelease(v2);
  strcpy(v27, "invalidated");
  H9ISPLogger(3, "FigSignalError: %d, %s\n", -12785, v27);
  return 4294954511;
}

uint64_t H9ISPCaptureStreamAddAttachmentsToSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CVImageBufferRef ImageBuffer;
  __CVBuffer *v8;
  uint64_t v9;
  CFStringRef *v10;
  const __CFString *v11;
  CFTypeRef v12;
  const __CFString *v13;
  CFTypeRef Attachment;
  const __CFString *v15;
  CFTypeRef v16;
  const void *v17;
  __CFDictionary *v18;
  const __CFString *v19;
  CFTypeRef v20;
  __int128 v21;
  _BYTE outputStruct[24];

  FigCaptureStreamGetFigBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(v4 + 153) & 0x10) != 0)
    LogCaptureDeviceEvent(0xCu, v4, DerivedStorage, 0, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 32));
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)v4)
  {
    v5 = 4294954511;
  }
  else if (*(_QWORD *)(v4 + 24))
  {
    if (a2)
    {
      ImageBuffer = CMSampleBufferGetImageBuffer(a2);
      if (ImageBuffer)
      {
        v8 = ImageBuffer;
        H9ISP::H9ISPDevice::ISP_GetCameraTime(*(_QWORD *)(v4 + 24), outputStruct);
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 32);
        if (v9)
          H9ISP::H9ISPMotionManager::GetOscarTimeSyncInfo(v9, &v21);
        else
          v21 = 0uLL;
        v10 = (CFStringRef *)MEMORY[0x24BE10800];
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 56) + 80 * *(unsigned int *)(DerivedStorage + 84) + 8))
        {
          v11 = (const __CFString *)*MEMORY[0x24BE10800];
          v12 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x24BE10800], 0);
          if (v12)
            CVBufferSetAttachment(v8, v11, v12, kCVAttachmentMode_ShouldPropagate);
          v13 = (const __CFString *)*MEMORY[0x24BE107F0];
          Attachment = CVBufferGetAttachment(v8, (CFStringRef)*MEMORY[0x24BE107F0], 0);
          if (Attachment)
            CMSetAttachment(a2, v13, Attachment, 1u);
          H9ISP::GenerateAndAttachCoreMediaMetaDataDictionary();
        }
        v15 = (const __CFString *)*MEMORY[0x24BE10818];
        v16 = CVBufferGetAttachment(v8, (CFStringRef)*MEMORY[0x24BE10818], 0);
        if (v16)
        {
          v17 = v16;
          CMSetAttachment(a2, v15, v16, 1u);
          v18 = (__CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x24BE10838], 0);
          if (v18)
            CFDictionarySetValue(v18, (const void *)*MEMORY[0x24BE107C8], v17);
          v5 = 0;
        }
        else
        {
          v5 = 4294954616;
        }
        v19 = *v10;
        v20 = CVBufferGetAttachment(v8, *v10, 0);
        if (v20)
          CMSetAttachment(a2, v19, v20, 1u);
      }
      else
      {
        v5 = 4294954513;
      }
    }
    else
    {
      v5 = 4294954516;
    }
  }
  else
  {
    v5 = 4294954616;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 32));
  if ((*(_BYTE *)(v4 + 153) & 0x10) != 0)
    LogCaptureDeviceEvent(0xCu, v4, DerivedStorage, 0, 0, 1);
  H9ISPLogger(6, "H9ISPCaptureStreamAddAttachmentsToSampleBuffer: camChannel=%d, err=%d\n", *(_DWORD *)(DerivedStorage + 84), v5);
  return v5;
}

uint64_t ActivateStillImageQuadraOutputInFrameReceiver(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _OWORD v6[7];
  int v7;
  _OWORD __dst[7];
  int v9;
  _BYTE v10[200];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 88))
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 40);
    v5 = *(_DWORD *)(result + 112);
    if (v4 < v5)
      v5 = 0;
    if (H9ISP::H9ISPDevice::GetCameraConfig(*(_QWORD *)(a2 + 24), *(_DWORD *)(result + 84), *(_DWORD *)(*(_QWORD *)(result + 104) + 84 * (v4 - v5) + 16), __dst, v10))
    {
      return H9ISPLogger(3, "ActivateStillImageQuadraOutputInFrameReceiver - GetCameraConfig error: 0x%08X\n");
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(v3 + 88) + 437))
        return SetMetaDataOptionsOnFrameReceiver(v3);
      v6[4] = __dst[4];
      v6[5] = __dst[5];
      v6[6] = __dst[6];
      v6[0] = __dst[0];
      v6[1] = __dst[1];
      v7 = v9;
      v6[2] = __dst[2];
      v6[3] = __dst[3];
      if (!AddRawPoolToFrameReceiver(v3, a2, (unsigned __int16 *)v6))
        return SetMetaDataOptionsOnFrameReceiver(v3);
      else
        return H9ISPLogger(3, "ActivateStillImageQuadraOutputInFrameReceiver - AddRawPoolToFrameReceiver error: res=0x%08X\n");
    }
  }
  return result;
}

_QWORD *std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase(int64x2_t *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char **v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v32;
  char *v33;
  __n128 v34[2];

  v4 = a1->i64[1];
  v5 = (char *)(v4 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
  if (a1[1].i64[0] == v4)
    v6 = 0;
  else
    v6 = (char *)(*(_QWORD *)v5 + 8 * (a1[2].i64[0] & 0x1FF));
  v32 = (char **)(v4 + 8 * ((unint64_t)a1[2].i64[0] >> 9));
  v33 = v6;
  if (v6 == a3)
    v7 = 0;
  else
    v7 = ((uint64_t)&a3[-*(_QWORD *)a2] >> 3) + ((a2 - v5) << 6) - ((uint64_t)&v6[-*(_QWORD *)v5] >> 3);
  v8 = (char **)std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v7);
  v10 = (unint64_t)v8;
  v11 = (unint64_t)v9;
  v12 = a1[2].i64[1];
  if (v7 <= (unint64_t)(v12 - 1) >> 1)
  {
    v18 = v9 - *v8;
    v19 = v18 >> 3;
    if (v18 < -7)
    {
      v28 = 510 - v19;
      v21 = &v8[-(v28 >> 9)];
      v22 = &(*v21)[8 * (~(_WORD)v28 & 0x1FF)];
    }
    else
    {
      v20 = v19 + 1;
      v21 = &v8[v20 >> 9];
      v22 = &(*v21)[8 * (v20 & 0x1FF)];
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>(v32, v33, v8, v9, v21, v22, v34);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2358295B0);
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
  }
  else
  {
    v13 = v9 - *v8;
    v14 = v13 >> 3;
    if (v13 < -7)
    {
      v23 = 510 - v14;
      v16 = &v8[-(v23 >> 9)];
      v17 = &(*v16)[8 * (~(_WORD)v23 & 0x1FF)];
    }
    else
    {
      v15 = v14 + 1;
      v16 = &v8[v15 >> 9];
      v17 = &(*v16)[8 * (v15 & 0x1FF)];
    }
    v24 = a1[2].i64[0] + v12;
    v25 = a1->i64[1];
    v26 = (char **)(v25 + 8 * (v24 >> 9));
    if (a1[1].i64[0] == v25)
      v27 = 0;
    else
      v27 = &(*v26)[8 * (v24 & 0x1FF)];
    v34[0].n128_u64[0] = v10;
    v34[0].n128_u64[1] = v11;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>>>(v16, v17, v26, v27, (uint64_t)v34);
    --a1[2].i64[1];
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
  }
  v29 = a1->i64[1];
  if (a1[1].i64[0] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * ((unint64_t)a1[2].i64[0] >> 9)) + 8 * (a1[2].i64[0] & 0x1FF);
  v34[0].n128_u64[0] = v29 + 8 * ((unint64_t)a1[2].i64[0] >> 9);
  v34[0].n128_u64[1] = v30;
  return std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100]((uint64_t)v34, v7);
}

_QWORD *std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

uint64_t std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a1) >> 3;
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13)
        result = memmove(a4, v11, 8 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool **,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t H9ISPCaptureGroupFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (!*(_BYTE *)(DerivedStorage + 32))
    H9ISPCaptureGroupInvalidate();
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
  return pthread_mutex_destroy((pthread_mutex_t *)(DerivedStorage + 40));
}

uint64_t H9ISPCaptureGroupCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;

  kdebug_trace();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    H9ISPLogger(3, "H9ISPCaptureGroupCopyProperty: Invalid sync group");
    v9 = 4294954511;
  }
  else
  {
    LockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
    v10 = 0;
    while (!CFEqual((CFTypeRef)groupProperties[v10], a2))
    {
      v10 += 5;
      if (v10 == 210)
      {
        v9 = 4294954512;
        goto LABEL_18;
      }
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 56);
    if (!IsPropertySupportedForGroup((uint64_t)&groupProperties[v10], DerivedStorage, v8))
    {
      UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
      v9 = 4294954509;
      goto LABEL_19;
    }
    v12 = *(const __CFArray **)(DerivedStorage + 104);
    if (v12 && CFArrayGetCount(v12) >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 104), v13);
        FigCaptureStreamGetFigBaseObject();
        v15 = CMBaseObjectGetDerivedStorage();
        if (*(_BYTE *)(v11 + 80 * *(unsigned int *)(v15 + 84) + 76))
          v14 = v15;
        ++v13;
      }
      while (v13 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 104)));
    }
    else
    {
      v14 = 0;
    }
    v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))groupProperties[v10 + 3])(a3, a4, v14, DerivedStorage, v8);
LABEL_18:
    UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
  }
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
  kdebug_trace();
  return v9;
}

uint64_t H9ISPCaptureGroupSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;

  kdebug_trace();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    H9ISPLogger(3, "H9ISPCaptureGroupSetProperty: Invalid sync group");
    v7 = 4294954511;
  }
  else
  {
    LockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
    v8 = 0;
    while (!CFEqual((CFTypeRef)groupProperties[v8], a2))
    {
      v8 += 5;
      if (v8 == 210)
      {
        v7 = 4294954512;
        goto LABEL_18;
      }
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 56);
    if (!IsPropertySupportedForGroup((uint64_t)&groupProperties[v8], DerivedStorage, v6))
    {
      UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
      v7 = 4294954509;
      goto LABEL_19;
    }
    v10 = *(const __CFArray **)(DerivedStorage + 104);
    if (v10 && CFArrayGetCount(v10) >= 1)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 104), v11);
        FigCaptureStreamGetFigBaseObject();
        v13 = CMBaseObjectGetDerivedStorage();
        if (*(_BYTE *)(v9 + 80 * *(unsigned int *)(v13 + 84) + 76))
          v12 = v13;
        ++v11;
      }
      while (v11 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 104)));
    }
    else
    {
      v12 = 0;
    }
    v7 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))groupProperties[v8 + 2])(a3, v12, DerivedStorage, v6);
LABEL_18:
    UnlockStreamMutexes(*(const __CFArray **)(DerivedStorage + 16));
  }
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
  kdebug_trace();
  return v7;
}

uint64_t H9ISPCaptureGroupInvalidate()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock((pthread_mutex_t *)(DerivedStorage + 40));
  if (!*(_BYTE *)(DerivedStorage + 32))
  {
    *(_BYTE *)(DerivedStorage + 32) = 1;
    v1 = *(const void **)(DerivedStorage + 16);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
    v2 = *(const void **)(DerivedStorage + 104);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 24);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(DerivedStorage + 40));
}

uint64_t std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t _GLOBAL__sub_I_H9ISPCaptureDevice_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  mach_timebase_info(&firstFrameTimer);
  v0 = *MEMORY[0x24BE105F0];
  streamProperties[0] = *MEMORY[0x24BE11288];
  unk_254291F60 = v0;
  qword_254291F68 = 0;
  unk_254291F70 = CopyBufferQueue;
  dword_254291F78 = 0;
  qword_254291F80 = *MEMORY[0x24BE114C8];
  unk_254291F88 = v0;
  qword_254291F90 = 0;
  unk_254291F98 = CopyStillImageBufferQueue;
  dword_254291FA0 = 0;
  v1 = *MEMORY[0x24BE10600];
  qword_254291FA8 = *MEMORY[0x24BE114E0];
  unk_254291FB0 = v1;
  qword_254291FB8 = 0;
  unk_254291FC0 = CopySupportedFormatsArray;
  dword_254291FC8 = 0;
  v2 = *MEMORY[0x24BE10608];
  qword_254291FD0 = *MEMORY[0x24BE11360];
  unk_254291FD8 = v2;
  qword_254291FE0 = 0;
  unk_254291FE8 = CopyFormatDescription;
  dword_254291FF0 = 0;
  v3 = *MEMORY[0x24BE10610];
  qword_254291FF8 = *MEMORY[0x24BE11438];
  unk_254292000 = v3;
  qword_254292008 = (uint64_t)SetMaximumFrameRate;
  unk_254292010 = CopyMaximumFrameRate;
  dword_254292018 = 0;
  qword_254292020 = *MEMORY[0x24BE107B8];
  unk_254292028 = v1;
  qword_254292030 = 0;
  unk_254292038 = CopySupportedPropertiesDictionary;
  dword_254292040 = 0;
  qword_254292048 = *MEMORY[0x24BE11368];
  unk_254292050 = v3;
  qword_254292058 = (uint64_t)SetFormatIndex;
  unk_254292060 = CopyFormatIndex;
  dword_254292068 = 0;
  qword_254292070 = *MEMORY[0x24BE11450];
  unk_254292078 = v3;
  qword_254292080 = (uint64_t)SetMinimumFrameRate;
  unk_254292088 = CopyMinimumFrameRate;
  dword_254292090 = 0;
  v4 = *MEMORY[0x24BE10620];
  qword_254292098 = *MEMORY[0x24BE114D0];
  unk_2542920A0 = v4;
  qword_2542920A8 = (uint64_t)StillImageCaptureNow;
  unk_2542920B0 = 0;
  dword_2542920B8 = 0;
  qword_2542920C0 = *MEMORY[0x24BE11258];
  unk_2542920C8 = v4;
  qword_2542920D0 = (uint64_t)AutoAENow;
  unk_2542920D8 = 0;
  dword_2542920E0 = 0;
  qword_2542920E8 = *MEMORY[0x24BE11270];
  unk_2542920F0 = v4;
  qword_2542920F8 = (uint64_t)AutoFocusNow;
  unk_254292100 = 0;
  dword_254292108 = 2;
  v5 = *MEMORY[0x24BE105E8];
  qword_254292110 = *MEMORY[0x24BE112D0];
  unk_254292118 = v5;
  qword_254292120 = (uint64_t)SetDeferAdditionOfAttachments;
  unk_254292128 = CopyDeferAdditionOfAttachments;
  dword_254292130 = 0;
  v6 = *MEMORY[0x24BE10618];
  qword_254292138 = *MEMORY[0x24BE11488];
  unk_254292140 = v6;
  qword_254292148 = 0;
  unk_254292150 = CopyPortType;
  dword_254292158 = 0;
  qword_254292160 = *MEMORY[0x24BE114F0];
  qword_254292168 = v5;
  qword_254292170 = (uint64_t)SetTemporalNoiseReductionEnabled;
  qword_254292178 = (uint64_t)CopyTemporalNoiseReductionEnabled;
  dword_254292180 = 0;
  qword_254292188 = *MEMORY[0x24BE11320];
  qword_254292190 = v5;
  qword_254292198 = (uint64_t)SetFaceDetectionEnabled;
  qword_2542921A0 = (uint64_t)CopyFaceDetectionEnabled;
  dword_2542921A8 = 0;
  qword_2542921B0 = *MEMORY[0x24BE113F8];
  qword_2542921B8 = v1;
  qword_2542921C0 = (uint64_t)SetLuxAdaptiveParameters;
  qword_2542921C8 = (uint64_t)CopyLuxAdaptiveParameters;
  dword_2542921D0 = 0;
  qword_2542921D8 = *MEMORY[0x24BE11458];
  qword_2542921E0 = v1;
  qword_2542921E8 = 0;
  qword_2542921F0 = (uint64_t)CopyModuleInfo;
  dword_2542921F8 = 0;
  qword_254292200 = *MEMORY[0x24BE112A0];
  qword_254292208 = v1;
  qword_254292210 = 0;
  qword_254292218 = (uint64_t)CopyColorHistogram;
  dword_254292220 = 0;
  qword_254292228 = *MEMORY[0x24BE11230];
  qword_254292230 = v3;
  qword_254292238 = (uint64_t)SetAWBScheme;
  qword_254292240 = (uint64_t)CopyAWBScheme;
  dword_254292248 = 0;
  qword_254292250 = *MEMORY[0x24BE11428];
  qword_254292258 = v3;
  qword_254292260 = (uint64_t)SetMaxIntegrationTime;
  qword_254292268 = (uint64_t)CopyMaxIntegrationTime;
  dword_254292270 = 0;
  qword_254292278 = *MEMORY[0x24BE11448];
  qword_254292280 = v3;
  qword_254292288 = 0;
  qword_254292290 = (uint64_t)CopyMinIntegrationTime;
  dword_254292298 = 0;
  qword_2542922A0 = *MEMORY[0x24BE114B8];
  qword_2542922A8 = v3;
  qword_2542922B0 = 0;
  qword_2542922B8 = (uint64_t)CopySensorTemperature;
  dword_2542922C0 = 0;
  qword_2542922C8 = *MEMORY[0x24BE11240];
  qword_2542922D0 = v1;
  qword_2542922D8 = 0;
  qword_2542922E0 = (uint64_t)CopyAlternateOutputSizeLimits;
  dword_2542922E8 = 0;
  qword_2542922F0 = *MEMORY[0x24BE111E0];
  qword_2542922F8 = v3;
  qword_254292300 = (uint64_t)SetAEMaxGain;
  qword_254292308 = (uint64_t)CopyAEMaxGain;
  dword_254292310 = 0;
  qword_254292318 = *MEMORY[0x24BE111F0];
  qword_254292320 = v3;
  qword_254292328 = (uint64_t)SetAEMinGain;
  qword_254292330 = (uint64_t)CopyAEMinGain;
  dword_254292338 = 0;
  qword_254292340 = *MEMORY[0x24BE111C8];
  qword_254292348 = v3;
  qword_254292350 = (uint64_t)SetAEGainThresholdForFlickerZoneIntegrationTimeTransition;
  qword_254292358 = (uint64_t)CopyAEGainThresholdForFlickerZoneIntegrationTimeTransition;
  dword_254292360 = 0;
  qword_254292368 = *MEMORY[0x24BE111D0];
  qword_254292370 = v3;
  qword_254292378 = (uint64_t)SetAEIntegrationTimeForUnityGainToMinGainTransition;
  qword_254292380 = (uint64_t)CopyAEIntegrationTimeForUnityGainToMinGainTransition;
  dword_254292388 = 0;
  qword_254292390 = *MEMORY[0x24BE11308];
  qword_254292398 = v1;
  qword_2542923A0 = 0;
  qword_2542923A8 = (uint64_t)CopyErrorCounters;
  dword_2542923B0 = 0;
  qword_2542923B8 = *MEMORY[0x24BE11330];
  qword_2542923C0 = v1;
  qword_2542923C8 = (uint64_t)SetFaceDetectionRectangleOfInterest;
  qword_2542923D0 = (uint64_t)CopyFaceDetectionRectangleOfInterest;
  dword_2542923D8 = 0;
  qword_2542923E0 = *MEMORY[0x24BE11268];
  qword_2542923E8 = v6;
  qword_2542923F0 = (uint64_t)SetAutoFocusMode;
  qword_2542923F8 = (uint64_t)CopyAutoFocusMode;
  dword_254292400 = 2;
  qword_254292408 = *MEMORY[0x24BE11418];
  qword_254292410 = v1;
  qword_254292418 = (uint64_t)SetMatrixFocusParams;
  qword_254292420 = (uint64_t)CopyMatrixFocusParams;
  dword_254292428 = 2;
  qword_254292430 = *MEMORY[0x24BE107B0];
  qword_254292438 = v1;
  qword_254292440 = 0;
  qword_254292448 = (uint64_t)CopyMatrixFocusDebugData;
  dword_254292450 = 2;
  qword_254292458 = *MEMORY[0x24BE11298];
  qword_254292460 = v3;
  qword_254292468 = (uint64_t)SetClientMaxBufferCountHint;
  qword_254292470 = 0;
  dword_254292478 = 0;
  qword_254292480 = *MEMORY[0x24BE11250];
  qword_254292488 = v5;
  qword_254292490 = (uint64_t)SetAttachRAW;
  qword_254292498 = 0;
  dword_2542924A0 = 0;
  qword_2542924A8 = *MEMORY[0x24BE112A8];
  qword_2542924B0 = v6;
  qword_2542924B8 = (uint64_t)SetColorRange;
  qword_2542924C0 = 0;
  dword_2542924C8 = 0;
  qword_2542924D0 = *MEMORY[0x24BE113D8];
  qword_2542924D8 = v4;
  qword_2542924E0 = (uint64_t)LockAWBNow;
  qword_2542924E8 = 0;
  dword_2542924F0 = 0;
  qword_2542924F8 = *MEMORY[0x24BE11508];
  qword_254292500 = v4;
  qword_254292508 = (uint64_t)UnlockAWBNow;
  qword_254292510 = 0;
  dword_254292518 = 0;
  qword_254292520 = *MEMORY[0x24BE113C8];
  qword_254292528 = v4;
  qword_254292530 = (uint64_t)LockAENow;
  qword_254292570 = *MEMORY[0x24BE114F8];
  qword_254292580 = (uint64_t)SetTorchLevel;
  qword_2542925E8 = *MEMORY[0x24BE11248];
  qword_2542925F8 = (uint64_t)Apply3AWindowSettings;
  qword_254292660 = *MEMORY[0x24BE112B8];
  qword_254292670 = (uint64_t)SetColorTables;
  qword_254292728 = *MEMORY[0x24BE11558];
  qword_254292738 = (uint64_t)SetVideoRecordingInProgress;
  qword_2542927A0 = *MEMORY[0x24BE11338];
  qword_2542927B0 = (uint64_t)SetFlashMode;
  qword_2542927F0 = *MEMORY[0x24BE111D8];
  qword_254292800 = (uint64_t)SetAEMatrixMetadataEnable;
  qword_254292818 = *MEMORY[0x24BE11400];
  qword_254292828 = (uint64_t)ManualAENow;
  qword_254292840 = *MEMORY[0x24BE11498];
  qword_254292850 = (uint64_t)RawImageProcessBegin;
  qword_254292868 = *MEMORY[0x24BE114B0];
  qword_254292878 = (uint64_t)RawImageProcessPrepare;
  qword_254292890 = *MEMORY[0x24BE114A8];
  qword_2542928A0 = (uint64_t)RawImageProcessGo;
  qword_2542928B8 = *MEMORY[0x24BE114A0];
  qword_2542928C8 = (uint64_t)RawImageProcessEnd;
  qword_2542928E0 = *MEMORY[0x24BE111C0];
  qword_2542928F0 = (uint64_t)SetAEGainConvergenceNormalizationEnable;
  qword_2542929D0 = *MEMORY[0x24BE112F8];
  qword_2542929E0 = (uint64_t)SetDiagnosticMode;
  qword_2542929F8 = *MEMORY[0x24BE113A8];
  qword_254292A08 = (uint64_t)SetImageMapParams;
  qword_254292A20 = *MEMORY[0x24BE11238];
  qword_254292A30 = (uint64_t)SetAlternateOutputSize;
  qword_254292A48 = *MEMORY[0x24BE11528];
  qword_254292A58 = (uint64_t)SetUsePreviewBufferQueueForRawReprocessing;
  qword_254292A98 = *MEMORY[0x24BE111B0];
  qword_254292AA8 = (uint64_t)SetAEEnabled;
  qword_254292AC0 = *MEMORY[0x24BE11228];
  qword_254292AD0 = (uint64_t)SetAWB1stGainManual;
  qword_254292AE8 = *MEMORY[0x24BE113B8];
  qword_254292AF8 = (uint64_t)SetLimitAERange;
  qword_254292B10 = *MEMORY[0x24BE11290];
  qword_254292B20 = (uint64_t)SetChromaNoiseReductionEnabled;
  qword_254292BB0 = *MEMORY[0x24BE11300];
  qword_254292BC0 = (uint64_t)SetDynamicToneCurve;
  qword_254292BD8 = *MEMORY[0x24BE110E8];
  qword_254292BE8 = (uint64_t)SetMaxPerFrameExposureDelta;
  qword_254292BF0 = (uint64_t)CopyMaxPerFrameExposureDelta;
  qword_254292C00 = *MEMORY[0x24BE11348];
  qword_254292C18 = (uint64_t)CopyFocusLastScanHistory;
  qword_254292C28 = *MEMORY[0x24BE113C0];
  qword_254292C38 = (uint64_t)SetLocalHistogramsEnabled;
  qword_254292C50 = *MEMORY[0x24BE114C0];
  qword_254292C60 = (uint64_t)SetSphereMode;
  qword_254292C68 = (uint64_t)CopySphereMode;
  qword_254292C78 = *MEMORY[0x24BE11460];
  qword_254292C88 = (uint64_t)SetMotionDataFromISPEnabled;
  qword_254292CA0 = *MEMORY[0x24BE11420];
  qword_254292CB0 = (uint64_t)SetMaxFrameCoalescingDuration;
  qword_254292CB8 = (uint64_t)CopyMaxFrameCoalescingDuration;
  qword_254292D18 = *MEMORY[0x24BE11410];
  qword_254292D28 = (uint64_t)SetManualWhiteBalanceGain;
  qword_254292D40 = *MEMORY[0x24BE11398];
  qword_254292D50 = (uint64_t)SetISPHallDataEnabled;
  qword_254292D68 = *MEMORY[0x24BE113A0];
  qword_254292D78 = (uint64_t)SetISPMotionDataEnabled;
  qword_254292D90 = *MEMORY[0x24BE11318];
  qword_254292DA0 = (uint64_t)SetFaceDetectionConfiguration;
  qword_254292DE0 = *MEMORY[0x24BE11430];
  qword_254292DF8 = (uint64_t)CopyMaxZoomFactor;
  qword_254292E08 = *MEMORY[0x24BE11568];
  qword_254292E20 = (uint64_t)CopyWhiteBalanceCalibrations;
  qword_254292E30 = *MEMORY[0x24BE11570];
  qword_254292E48 = (uint64_t)CopyWhiteBalanceGain;
  qword_254292E58 = *MEMORY[0x24BE11560];
  qword_254292ED0 = *MEMORY[0x24BE11480];
  dword_254292FE0 = 0;
  qword_254293138 = (uint64_t)SetOISPosition;
  qword_254293278 = (uint64_t)SetMasterSlaveContrastFocus;
  qword_2542932C8 = (uint64_t)SetTorchManualParameters;
  qword_254293308 = (uint64_t)CFSTR("HighSpeedOutputLevel");
  qword_254293348 = (uint64_t)CopySupportedLinkFrequencies;
  qword_254293368 = (uint64_t)SetLinkFrequencyIndex;
  qword_254293380 = (uint64_t)CFSTR("TestPattern");
  qword_2542933C0 = (uint64_t)CopySensorNVM;
  qword_2542933F8 = *MEMORY[0x24BE112B0];
  qword_254291860 = (uint64_t)SetGroupActiveStreams;
  unk_254291868 = CopyGroupActiveStreams;
  qword_2542918B0 = (uint64_t)SetGroupMasterConfiguration;
  qword_254291900 = (uint64_t)LockAWBNow;
  qword_254291908 = 0;
  qword_2542918B8 = (uint64_t)CopyGroupMasterConfiguration;
  dword_2542918E8 = 1024;
  qword_2542918F0 = qword_2542924D0;
  unk_2542918F8 = v4;
  qword_2542918D8 = 0;
  unk_2542918E0 = CopyGroupMasterConfigurationSupportedKeys;
  qword_2542918C8 = *MEMORY[0x24BE11838];
  v7 = *MEMORY[0x24BE11830];
  qword_2542918D0 = v1;
  qword_2542918A0 = v7;
  unk_2542918A8 = v1;
  dword_2542918C0 = 1024;
  qword_254291888 = (uint64_t)SetGroupMinSkippingRatio;
  qword_254291890 = (uint64_t)CopyGroupMinSkippingRatio;
  dword_254291898 = 1024;
  qword_254292538 = 0;
  qword_254291878 = *MEMORY[0x24BE11840];
  qword_254291880 = v3;
  qword_254291850 = *MEMORY[0x24BE11818];
  unk_254291858 = v1;
  dword_254291870 = 1024;
  dword_254292540 = 0;
  qword_254291838 = 0;
  unk_254291840 = CopyGroupSynchronizationMaster;
  dword_254291848 = 1024;
  v26 = *MEMORY[0x24BE11500];
  qword_254291828 = *MEMORY[0x24BE11850];
  unk_254291830 = v1;
  qword_254292548 = v26;
  qword_254291810 = 0;
  unk_254291818 = CopyGroupExtrinsics;
  dword_254291820 = 1024;
  qword_254292550 = v4;
  qword_254291800 = *MEMORY[0x24BE11828];
  unk_254291808 = v1;
  qword_2542917E8 = 0;
  unk_2542917F0 = CopyGroupBaseZoomFactors;
  v8 = *MEMORY[0x24BE11820];
  dword_2542917F8 = 1024;
  qword_2542917D8 = v8;
  v9 = *MEMORY[0x24BE11848];
  dword_2542917D0 = 0;
  qword_2542917E0 = v1;
  qword_2542917B0 = v9;
  unk_2542917B8 = v1;
  qword_2542917C0 = 0;
  unk_2542917C8 = CopyGroupSupportedStreams;
  v10 = *MEMORY[0x24BE112D8];
  qword_254291798 = 0;
  unk_2542917A0 = CopyGroupSupportedPropertiesDictionary;
  dword_2542917A8 = 0;
  qword_254293448 = v10;
  xmmword_2542935E8 = 0u;
  xmmword_2542935D8 = 0u;
  groupProperties[0] = qword_254292020;
  unk_254291790 = v1;
  qword_254293510 = *MEMORY[0x24BE11280];
  qword_254293598 = 0;
  qword_2542935C8 = 0;
  dword_2542935D0 = 0;
  dword_2542935F8 = 0;
  qword_2542935B8 = v3;
  qword_2542935C0 = (uint64_t)SetStreamMemoryPoolID;
  qword_2542935A0 = (uint64_t)CopyFocusPositionToPFLCoefficients;
  dword_2542935A8 = 2;
  qword_2542935B0 = *MEMORY[0x24BE11440];
  qword_254293590 = v1;
  qword_254293578 = (uint64_t)CopyAPSCalibrationData;
  dword_254293580 = 256;
  qword_254293588 = *MEMORY[0x24BE11358];
  qword_254293528 = (uint64_t)CopyAPSMode;
  qword_254293568 = v1;
  qword_254293570 = (uint64_t)SetAPSCalibrationData;
  qword_254293550 = 0;
  dword_254293558 = 1;
  qword_254293560 = *MEMORY[0x24BE11278];
  qword_254293548 = (uint64_t)SetHighCurrentTorchEnabled;
  qword_254293540 = v5;
  qword_254292558 = (uint64_t)UnlockAENow;
  dword_254293530 = 256;
  qword_254293538 = *MEMORY[0x24BE11388];
  qword_254293520 = (uint64_t)SetAPSMode;
  qword_254293518 = v3;
  qword_2542934B0 = (uint64_t)CopyOutputConfigurations;
  qword_2542934F8 = 0;
  qword_254293500 = (uint64_t)CopyOpticalCenter;
  dword_254293508 = 1024;
  dword_2542934E0 = 1024;
  qword_2542934E8 = *MEMORY[0x24BE11470];
  qword_2542934F0 = v1;
  qword_2542934D8 = (uint64_t)CopyGDCCoefficients;
  v11 = *MEMORY[0x24BE11370];
  qword_2542934D0 = 0;
  qword_2542934C0 = v11;
  v12 = *MEMORY[0x24BE112E0];
  dword_2542934B8 = 2048;
  qword_2542934C8 = v1;
  qword_254293498 = v12;
  dword_254293490 = 2048;
  qword_2542934A0 = v1;
  qword_2542934A8 = 0;
  qword_254292560 = 0;
  qword_254293488 = (uint64_t)CopySupportedOutputConfigurations;
  qword_254293478 = v1;
  qword_254293480 = 0;
  qword_254293460 = 0;
  dword_254293468 = 2048;
  qword_254293470 = *MEMORY[0x24BE112E8];
  qword_254293458 = (uint64_t)SetDepthEngineConfiguration;
  qword_254293450 = v1;
  qword_254293408 = (uint64_t)SetColorSpace;
  qword_254293430 = 0;
  qword_254293438 = (uint64_t)CopyAutoFocusPositionSensor;
  dword_254293440 = 0;
  dword_254293418 = 0;
  qword_254293420 = *MEMORY[0x24BE11380];
  qword_254293428 = v1;
  qword_254293410 = (uint64_t)CopyColorSpace;
  qword_254293400 = v3;
  dword_254292568 = 0;
  qword_2542933E8 = (uint64_t)CopySupportedColorSpaces;
  qword_2542933E0 = 0;
  dword_2542933F0 = 0;
  qword_2542933D0 = *MEMORY[0x24BE114D8];
  dword_2542933C8 = 0;
  qword_2542933D8 = v1;
  qword_2542933A8 = (uint64_t)CFSTR("SensorNVM");
  dword_2542933A0 = 0;
  qword_2542933B0 = v1;
  qword_2542933B8 = 0;
  qword_254292578 = v3;
  qword_254293390 = (uint64_t)SetTestPattern;
  qword_254293388 = v6;
  qword_254293398 = 0;
  dword_254292590 = 1;
  qword_254293370 = (uint64_t)CopyLinkFrequencyIndex;
  qword_254293360 = v3;
  dword_254293378 = 0;
  dword_2542927C0 = 1;
  qword_254293358 = (uint64_t)CFSTR("LinkFrequencyIndex");
  qword_254293340 = 0;
  dword_254293350 = 0;
  qword_254293330 = (uint64_t)CFSTR("SupportedLinkFrequencies");
  qword_254293320 = 0;
  dword_254293328 = 0;
  qword_254293338 = v1;
  dword_254293120 = 1;
  qword_254293318 = (uint64_t)SetHighSpeedOutputLevel;
  dword_254293300 = 0;
  qword_254293310 = v3;
  dword_2542932D8 = 1;
  qword_2542932E8 = v5;
  qword_2542932F0 = (uint64_t)SetLPDPFilterEnable;
  qword_2542932F8 = 0;
  qword_2542932E0 = (uint64_t)CFSTR("LPDPFilterEnable");
  qword_2542932D0 = 0;
  qword_254292588 = 0;
  qword_2542932B8 = (uint64_t)CFSTR("TorchManualParameters");
  dword_2542932B0 = 1024;
  qword_2542932C0 = v1;
  v25 = *MEMORY[0x24BE11220];
  qword_2542932A0 = (uint64_t)SetForceSingleChannelCommands;
  v13 = v5;
  qword_254293298 = v5;
  qword_2542932A8 = 0;
  qword_254292598 = v25;
  qword_254293290 = (uint64_t)CFSTR("ForceSingleChannelCommands");
  qword_254293280 = 0;
  dword_254293288 = 1024;
  qword_2542925A0 = v1;
  qword_254293268 = (uint64_t)CFSTR("MasterSlaveContrastFocusEnable");
  dword_254293260 = 1024;
  qword_254293270 = v5;
  qword_2542925A8 = (uint64_t)SetAFWindowParams;
  qword_254293250 = (uint64_t)SetMasterSlaveAPSFocus;
  qword_254293248 = v5;
  qword_254293258 = 0;
  qword_254293208 = (uint64_t)CopyChromaNoiseReductionLevel;
  qword_254293220 = v3;
  dword_254293238 = 0;
  qword_254293240 = (uint64_t)CFSTR("MasterSlaveAPSFocusEnable");
  qword_254293228 = (uint64_t)SetNoiseReductionLevel;
  qword_254293230 = (uint64_t)CopyNoiseReductionLevel;
  qword_254293218 = (uint64_t)CFSTR("NoiseReductionLevel");
  dword_254293210 = 0;
  dword_2542931E8 = 0;
  qword_2542931F0 = (uint64_t)CFSTR("ChromaNoiseReductionLevel");
  qword_2542931F8 = v3;
  qword_254293200 = (uint64_t)SetChromaNoiseReductionLevel;
  qword_2542931D8 = (uint64_t)SetReloadNVM;
  qword_2542931D0 = v4;
  qword_2542931E0 = 0;
  qword_2542931A0 = (uint64_t)CFSTR("SensorSidebandEnable");
  qword_2542931B8 = 0;
  dword_2542931C0 = 0;
  qword_2542931C8 = (uint64_t)CFSTR("ReloadNVM");
  qword_2542931B0 = (uint64_t)SetSensorSidebandEnabled;
  qword_2542931A8 = v5;
  qword_254293190 = (uint64_t)CopyOISTemperature;
  qword_254293180 = v3;
  qword_254293188 = 0;
  dword_254293198 = 4;
  dword_254292C70 = 4;
  qword_254293178 = (uint64_t)CFSTR("OISTemperature");
  qword_254293168 = 0;
  dword_254293170 = 4;
  dword_254292D60 = 4;
  qword_254293150 = (uint64_t)CFSTR("OISActuator");
  qword_254293158 = v1;
  qword_254293160 = (uint64_t)SetOISActuator;
  qword_254293140 = (uint64_t)CopyOISPosition;
  dword_254293148 = 4;
  qword_254293128 = (uint64_t)CFSTR("OISPosition");
  qword_254293130 = v1;
  qword_2542930F0 = (uint64_t)CopySynchronizedStreamsSlaveConfiguration;
  qword_254293108 = v1;
  qword_254293110 = (uint64_t)SetTorchColor;
  qword_254293118 = 0;
  dword_2542930F8 = 1024;
  qword_254293100 = (uint64_t)CFSTR("TorchColor");
  qword_2542930C8 = (uint64_t)CopyQHDRSensorDefectivePixelInfo;
  qword_2542930E0 = v1;
  qword_2542930E8 = (uint64_t)SetSynchronizedStreamsSlaveConfiguration;
  dword_2542930D0 = 512;
  qword_2542930D8 = *MEMORY[0x24BE114E8];
  qword_254292F80 = (uint64_t)SetMultipleOutputSupportEnabled;
  v14 = *MEMORY[0x24BE11550];
  qword_2542930B8 = v1;
  qword_2542930C0 = 0;
  qword_2542930A0 = (uint64_t)CopyVibeMitigationInfo;
  dword_2542930A8 = 2;
  qword_2542930B0 = *MEMORY[0x24BE11490];
  qword_254292FC0 = v14;
  qword_254292FD0 = (uint64_t)SetVideoOutputsEnabled;
  qword_254293090 = v1;
  qword_254293098 = 0;
  qword_254293078 = 0;
  dword_254293080 = 18;
  qword_254293088 = *MEMORY[0x24BE11530];
  qword_254293068 = v1;
  qword_254293070 = (uint64_t)SetFocusNow;
  qword_254293050 = (uint64_t)CopyDecoupleBackendFromStreaming;
  dword_254293058 = 0;
  qword_254293060 = *MEMORY[0x24BE11350];
  qword_254293048 = (uint64_t)SetDecoupleBackendFromStreaming;
  qword_254293040 = v5;
  qword_254293028 = (uint64_t)CopyVideoOutputsColorInfo;
  dword_254293030 = 0;
  qword_254293038 = *MEMORY[0x24BE112C8];
  qword_254293010 = *MEMORY[0x24BE11548];
  qword_254293018 = v1;
  qword_254293020 = 0;
  qword_254293000 = (uint64_t)CopyVideoOutputConfigurations;
  dword_254293008 = 0;
  qword_254292FE8 = *MEMORY[0x24BE11538];
  qword_254292FF0 = v1;
  qword_254292FF8 = (uint64_t)SetVideoOutputConfigurations;
  qword_254292FD8 = (uint64_t)CopyVideoOutputsEnabled;
  qword_254292FC8 = v1;
  qword_2542925B0 = 0;
  qword_254292FA8 = (uint64_t)SetVideoOutputHandlers;
  qword_254292FB0 = 0;
  dword_254292FB8 = 0;
  dword_2542925B8 = 0;
  qword_254292F98 = *MEMORY[0x24BE11540];
  qword_254292FA0 = v1;
  v23 = *MEMORY[0x24BE11200];
  qword_254292F88 = (uint64_t)CopyMultipleOutputSupportEnabled;
  v15 = *MEMORY[0x24BE11468];
  dword_254292F90 = 0;
  qword_254292F70 = v15;
  v16 = *MEMORY[0x24BE11378];
  dword_254292F68 = 0;
  qword_254292F78 = v5;
  qword_254292F20 = v16;
  qword_254292F50 = v3;
  qword_254292F58 = (uint64_t)SetFaceDetectionMetadataCoordinateSpace;
  qword_254292F60 = 0;
  qword_254292F28 = v1;
  dword_254292F40 = 0;
  qword_254292F48 = *MEMORY[0x24BE11328];
  qword_254292F30 = (uint64_t)SetGainAdaptiveParameters;
  qword_254292F38 = (uint64_t)CopyGainAdaptiveParameters;
  qword_254292F10 = (uint64_t)CopyLensFNumber;
  qword_254292F08 = 0;
  dword_254292F18 = 0;
  qword_254292EF8 = *MEMORY[0x24BE113B0];
  dword_254292EF0 = 0;
  qword_254292F00 = v3;
  dword_254292C98 = 32;
  qword_254292EE8 = (uint64_t)CopyPixelSize;
  qword_254292ED8 = v3;
  qword_254292EE0 = 0;
  dword_254292D88 = 32;
  qword_254292EC0 = (uint64_t)CopyFocalLength;
  qword_254292EB8 = 0;
  dword_254292EC8 = 0;
  qword_254292EA8 = *MEMORY[0x24BE11340];
  dword_254292EA0 = 18;
  qword_254292EB0 = v3;
  qword_254292E68 = (uint64_t)SetVideoStabilizationISPOutputVectorsEnabled;
  qword_254292E88 = v4;
  qword_254292E90 = (uint64_t)SetAutoFocusHintNow;
  qword_254292E98 = 0;
  qword_254292E70 = 0;
  dword_254292E78 = 32;
  qword_254292E80 = *MEMORY[0x24BE11260];
  qword_2542925C0 = v23;
  qword_254292E40 = 0;
  dword_254292E50 = 0;
  qword_254292E60 = v5;
  qword_2542925C8 = v1;
  qword_2542925D0 = (uint64_t)SetAEWindowParams;
  qword_254292E10 = v1;
  qword_254292E18 = 0;
  dword_254292E28 = 0;
  qword_254292E38 = v1;
  qword_2542925D8 = 0;
  dword_2542925E0 = 0;
  qword_2542925F0 = v4;
  qword_254292600 = 0;
  qword_254292DF0 = 0;
  dword_254292E00 = 0;
  dword_254292608 = 0;
  qword_254292DD0 = (uint64_t)CopyZoomFactor;
  dword_254292DD8 = 0;
  qword_254292DE8 = v3;
  qword_254292DA8 = 0;
  dword_254292DB0 = 0;
  qword_254292DC0 = v3;
  qword_254292DC8 = (uint64_t)SetZoomFactor;
  qword_254292DB8 = *MEMORY[0x24BE11578];
  qword_254292610 = *MEMORY[0x24BE111B8];
  result = qword_254292610;
  qword_254292618 = v1;
  qword_254292D98 = v1;
  qword_254292620 = (uint64_t)SetAEFaceDetectionMetering;
  qword_254292628 = 0;
  qword_254292D70 = v13;
  qword_254292D80 = 0;
  dword_254292630 = 0;
  qword_254292638 = *MEMORY[0x24BE11310];
  qword_254292640 = v1;
  qword_254292D48 = v13;
  qword_254292D58 = 0;
  qword_254292648 = (uint64_t)SetExposureBias;
  qword_254292650 = 0;
  qword_254292D30 = 0;
  dword_254292D38 = 0;
  dword_254292658 = 0;
  v24 = *MEMORY[0x24BE113D0];
  dword_254292D10 = 2;
  qword_254292D20 = v1;
  qword_254292CF0 = v24;
  qword_254292CF8 = v4;
  qword_254292D00 = (uint64_t)SetLockAFNow;
  qword_254292D08 = 0;
  qword_254292668 = v1;
  qword_254292CD8 = (uint64_t)SetContinuousAutoFocusNow;
  qword_254292CE0 = 0;
  dword_254292CE8 = 18;
  dword_254292CC0 = 0;
  qword_254292CC8 = *MEMORY[0x24BE112C0];
  qword_254292CD0 = v1;
  qword_254292678 = 0;
  dword_254292680 = 0;
  v18 = *MEMORY[0x24BE111A8];
  qword_254292CA8 = v1;
  qword_254292688 = v18;
  qword_254292690 = v3;
  qword_254292C80 = v13;
  qword_254292C90 = 0;
  qword_254292698 = (uint64_t)SetAEConvergenceSpeed;
  qword_2542926A0 = 0;
  dword_2542926A8 = 0;
  qword_2542926B0 = *MEMORY[0x24BE111F8];
  qword_254292C40 = 0;
  dword_254292C48 = 0;
  qword_254292C58 = v6;
  qword_2542926B8 = v3;
  qword_2542926C0 = (uint64_t)SetAEStability;
  qword_2542926C8 = 0;
  dword_2542926D0 = 0;
  dword_254292C20 = 2;
  qword_254292C30 = v13;
  qword_2542926D8 = *MEMORY[0x24BE11218];
  qword_254292C08 = v1;
  qword_254292C10 = 0;
  qword_2542926E0 = v1;
  qword_2542926E8 = (uint64_t)SetAFSearchPositions;
  qword_254292BE0 = v3;
  dword_254292BF8 = 0;
  qword_2542926F0 = 0;
  dword_2542926F8 = 2;
  qword_254292BC8 = 0;
  dword_254292BD0 = 0;
  v19 = *MEMORY[0x24BE11408];
  v20 = *MEMORY[0x24BE11520];
  dword_254292BA8 = 0;
  qword_254292BB8 = v1;
  qword_254292B88 = v20;
  qword_254292B90 = v4;
  qword_254292B98 = (uint64_t)UnlockLTMNow;
  qword_254292BA0 = 0;
  qword_254292700 = v19;
  dword_254292B58 = 2;
  qword_254292B78 = 0;
  dword_254292B80 = 0;
  qword_254292B60 = *MEMORY[0x24BE113F0];
  qword_254292B68 = v4;
  qword_254292B70 = (uint64_t)LockLTMNow;
  qword_254292B18 = v13;
  qword_254292B40 = v1;
  qword_254292B48 = (uint64_t)PeakTrackingFocusNow;
  qword_254292B50 = 0;
  qword_254292B28 = 0;
  dword_254292B30 = 0;
  qword_254292B38 = *MEMORY[0x24BE11478];
  qword_254292708 = v1;
  qword_254292AF0 = v1;
  qword_254292B00 = 0;
  dword_254292B08 = 0;
  qword_254292710 = (uint64_t)ManualFocusNow;
  qword_254292718 = 0;
  dword_254292720 = 2;
  qword_254292AC8 = v1;
  qword_254292AD8 = 0;
  dword_254292AE0 = 0;
  qword_254292730 = v13;
  qword_254292740 = 0;
  qword_254292AB0 = 0;
  dword_254292AB8 = 0;
  dword_254292748 = 0;
  qword_254292A70 = *MEMORY[0x24BE11210];
  qword_254292A78 = v13;
  dword_254292A90 = 0;
  qword_254292AA0 = v13;
  qword_254292A80 = (uint64_t)SetAFPeakPredictionEnabled;
  qword_254292A88 = 0;
  qword_254292750 = *MEMORY[0x24BE11390];
  qword_254292758 = v1;
  qword_254292A50 = v13;
  qword_254292A60 = 0;
  dword_254292A68 = 0;
  qword_254292760 = (uint64_t)SetHistogramParams;
  qword_254292A28 = v1;
  qword_254292A38 = 0;
  dword_254292A40 = 0;
  qword_254292768 = 0;
  dword_254292770 = 0;
  qword_254292A10 = 0;
  dword_254292A18 = 0;
  qword_254292778 = *MEMORY[0x24BE111E8];
  qword_254292780 = v6;
  dword_254292900 = 0;
  dword_2542929F0 = 0;
  qword_254292A00 = v1;
  qword_254292908 = *MEMORY[0x24BE112F0];
  qword_2542929D8 = v3;
  qword_2542929E8 = 0;
  qword_2542929A8 = *MEMORY[0x24BE11510];
  qword_2542929C0 = 0;
  dword_2542929C8 = 0;
  qword_2542929B0 = v4;
  qword_2542929B8 = (uint64_t)UnlockBLCNow;
  v21 = *MEMORY[0x24BE11518];
  qword_254292990 = (uint64_t)LockBLCNow;
  qword_254292998 = 0;
  dword_2542929A0 = 0;
  dword_254292978 = 0;
  qword_254292980 = *MEMORY[0x24BE113E0];
  qword_254292988 = v4;
  qword_254292958 = v21;
  qword_254292960 = v4;
  qword_254292968 = (uint64_t)UnlockDynamicToneCurveNow;
  qword_254292970 = 0;
  qword_254292910 = v3;
  qword_254292940 = (uint64_t)LockDynamicToneCurveNow;
  qword_254292948 = 0;
  dword_254292950 = 0;
  dword_254292928 = 0;
  qword_254292930 = *MEMORY[0x24BE113E8];
  qword_254292938 = v4;
  qword_254292918 = (uint64_t)SetDeviceOrientation;
  qword_254292920 = 0;
  qword_254292788 = (uint64_t)SetAEMeteringMode;
  qword_254292790 = 0;
  dword_254292798 = 0;
  dword_2542928D8 = 0;
  qword_2542928E8 = v13;
  qword_2542928F8 = 0;
  qword_2542927A8 = v6;
  qword_2542927B8 = 0;
  qword_2542928C0 = v4;
  qword_2542928D0 = 0;
  qword_2542927C8 = *MEMORY[0x24BE11208];
  qword_2542927D0 = v1;
  qword_254292898 = v4;
  qword_2542928A8 = 0;
  dword_2542928B0 = 0;
  qword_2542927D8 = (uint64_t)SetAFEarlyOutParams;
  qword_254292870 = v1;
  qword_254292880 = 0;
  dword_254292888 = 0;
  qword_2542927E0 = 0;
  dword_2542927E8 = 2;
  dword_254292838 = 0;
  qword_254292848 = v1;
  qword_254292858 = 0;
  dword_254292860 = 0;
  qword_2542927F8 = v13;
  qword_254292808 = 0;
  dword_254292810 = 0;
  qword_254292820 = v1;
  qword_254292830 = 0;
  qword_254291928 = (uint64_t)UnlockAWBNow;
  qword_254291940 = qword_254292520;
  qword_254291950 = (uint64_t)LockAENow;
  qword_254291968 = v26;
  qword_254291978 = (uint64_t)UnlockAENow;
  qword_254291990 = qword_2542920E8;
  qword_2542919A0 = (uint64_t)AutoFocusNow;
  qword_2542919B8 = v25;
  qword_2542919C8 = (uint64_t)SetAFWindowParams;
  qword_2542919E0 = v23;
  qword_2542919F0 = (uint64_t)SetAEWindowParams;
  qword_254291A08 = qword_254292610;
  qword_254291A30 = qword_254292610;
  qword_254291A18 = (uint64_t)SetAEFaceDetectionMetering;
  qword_254291A40 = (uint64_t)SetAEFaceDetectionMetering;
  qword_254291A58 = qword_254292638;
  qword_254291A68 = (uint64_t)SetExposureBias;
  qword_254291A80 = v18;
  qword_254291A90 = (uint64_t)SetAEConvergenceSpeed;
  qword_254291AA8 = qword_2542926B0;
  qword_254291AB8 = (uint64_t)SetAEStability;
  qword_254291AD0 = qword_2542926D8;
  qword_254291AE0 = (uint64_t)SetAFSearchPositions;
  qword_254291AF8 = v19;
  qword_254291B08 = (uint64_t)ManualFocusNow;
  qword_254291B20 = qword_254292750;
  qword_254291B30 = (uint64_t)SetHistogramParams;
  qword_254291B48 = qword_254292778;
  qword_254291B58 = (uint64_t)SetAEMeteringMode;
  qword_254291B70 = qword_2542927C8;
  qword_254291B80 = (uint64_t)SetAFEarlyOutParams;
  qword_254291B98 = qword_254292908;
  qword_254291BA8 = (uint64_t)SetDeviceOrientation;
  qword_254291BC0 = qword_254292930;
  qword_254291BD0 = (uint64_t)LockDynamicToneCurveNow;
  qword_254291BE8 = v21;
  qword_254291BF8 = (uint64_t)UnlockDynamicToneCurveNow;
  qword_254291C10 = qword_254292980;
  qword_254291C20 = (uint64_t)LockBLCNow;
  qword_254291C38 = qword_2542929A8;
  qword_254291C48 = (uint64_t)UnlockBLCNow;
  qword_254291C60 = qword_254292A70;
  qword_254291C70 = (uint64_t)SetAFPeakPredictionEnabled;
  qword_254291C88 = qword_254292B38;
  qword_254291C98 = (uint64_t)PeakTrackingFocusNow;
  qword_254291CB0 = qword_254292B60;
  qword_254291CC0 = (uint64_t)LockLTMNow;
  qword_254291CD8 = v20;
  qword_254291CE8 = (uint64_t)UnlockLTMNow;
  qword_254291D00 = qword_2542923E0;
  qword_254291D10 = (uint64_t)SetAutoFocusMode;
  qword_254291D18 = (uint64_t)CopyAutoFocusMode;
  qword_254291D28 = qword_254292408;
  qword_254291D38 = (uint64_t)SetMatrixFocusParams;
  qword_254291D40 = (uint64_t)CopyMatrixFocusParams;
  qword_254291D50 = qword_254292CC8;
  qword_254291D60 = (uint64_t)SetContinuousAutoFocusNow;
  qword_254291D78 = v24;
  qword_254291D88 = (uint64_t)SetLockAFNow;
  dword_2542919B0 = 2;
  dword_2542919D8 = 2;
  dword_254291AF0 = 2;
  dword_254291B18 = 2;
  dword_254291B90 = 2;
  dword_254291CA8 = 2;
  dword_254291D20 = 2;
  dword_254291D48 = 2;
  dword_254291D98 = 2;
  qword_254291DA0 = qword_254292DB8;
  qword_254291DB0 = (uint64_t)SetZoomFactor;
  qword_254291DB8 = (uint64_t)CopyZoomFactor;
  qword_254291DC8 = qword_254292E80;
  qword_254291DD8 = (uint64_t)SetAutoFocusHintNow;
  qword_254291DF0 = qword_254293060;
  qword_254291918 = qword_2542924F8;
  unk_254291920 = v4;
  dword_254291910 = 0;
  qword_254291930 = 0;
  dword_254291938 = 0;
  qword_254291948 = v4;
  qword_254291958 = 0;
  dword_254291960 = 0;
  qword_254291970 = v4;
  qword_254291980 = 0;
  dword_254291988 = 0;
  qword_254291998 = v4;
  qword_2542919A8 = 0;
  qword_2542919C0 = v1;
  qword_2542919D0 = 0;
  qword_2542919E8 = v1;
  qword_2542919F8 = 0;
  dword_254291A00 = 0;
  qword_254291A10 = v1;
  qword_254291A20 = 0;
  dword_254291A28 = 0;
  qword_254291A38 = v1;
  qword_254291A48 = 0;
  dword_254291A50 = 0;
  qword_254291A60 = v1;
  qword_254291A70 = 0;
  dword_254291A78 = 0;
  qword_254291A88 = v3;
  qword_254291A98 = 0;
  dword_254291AA0 = 0;
  qword_254291AB0 = v3;
  qword_254291AC0 = 0;
  dword_254291AC8 = 0;
  qword_254291AD8 = v1;
  qword_254291AE8 = 0;
  qword_254291B00 = v1;
  qword_254291B10 = 0;
  qword_254291B28 = v1;
  qword_254291B38 = 0;
  dword_254291B40 = 0;
  qword_254291B50 = v6;
  qword_254291B60 = 0;
  dword_254291B68 = 0;
  qword_254291B78 = v1;
  qword_254291B88 = 0;
  qword_254291BA0 = v3;
  qword_254291BB0 = 0;
  dword_254291BB8 = 0;
  qword_254291BC8 = v4;
  qword_254291BD8 = 0;
  dword_254291BE0 = 0;
  qword_254291BF0 = v4;
  qword_254291C00 = 0;
  dword_254291C08 = 0;
  qword_254291C18 = v4;
  qword_254291C28 = 0;
  dword_254291C30 = 0;
  qword_254291C40 = v4;
  qword_254291C50 = 0;
  dword_254291C58 = 0;
  qword_254291C68 = v13;
  qword_254291C78 = 0;
  dword_254291C80 = 0;
  qword_254291C90 = v1;
  qword_254291CA0 = 0;
  qword_254291CB8 = v4;
  qword_254291CC8 = 0;
  dword_254291CD0 = 0;
  qword_254291CE0 = v4;
  qword_254291CF0 = 0;
  dword_254291CF8 = 0;
  qword_254291D08 = v6;
  qword_254291D30 = v1;
  qword_254291D58 = v1;
  qword_254291D68 = 0;
  dword_254291D70 = 18;
  qword_254291D80 = v4;
  qword_254291D90 = 0;
  qword_254291DA8 = v3;
  dword_254291DC0 = 0;
  qword_254291DD0 = v4;
  qword_254291DE0 = 0;
  dword_254291DE8 = 18;
  qword_254291DF8 = v1;
  qword_254291E00 = (uint64_t)SetFocusNow;
  qword_254291E08 = 0;
  dword_254291E10 = 18;
  qword_2542915C0 = (uint64_t)CopyDeviceSupportedPropertiesDictionary;
  v22 = *MEMORY[0x24BE105F8];
  qword_2542915D0 = *MEMORY[0x24BE104C0];
  unk_2542915D8 = v22;
  qword_2542915E8 = (uint64_t)CopyClock;
  qword_2542915F8 = *MEMORY[0x24BE104D8];
  qword_254291610 = (uint64_t)CopyStreamArray;
  qword_254291620 = *MEMORY[0x24BE104C8];
  unk_254291628 = v6;
  qword_2542915B0 = v1;
  unk_2542915B8 = 0;
  qword_2542915E0 = 0;
  qword_254291600 = v1;
  unk_254291608 = 0;
  deviceProperties[0] = qword_254292020;
  dword_2542915C8 = 0;
  dword_2542915F0 = 0;
  dword_254291618 = 0;
  qword_254291630 = 0;
  unk_254291638 = CopyFirmwareVersion;
  dword_254291640 = 0;
  qword_254291648 = (uint64_t)CFSTR("DARTCacheParameters");
  unk_254291650 = v1;
  qword_254291658 = (uint64_t)SetDARTCacheParameters;
  unk_254291660 = 0;
  dword_254291668 = 0;
  qword_254291670 = (uint64_t)CFSTR("DiagnosticsLogDump");
  unk_254291678 = v4;
  qword_254291680 = (uint64_t)SetDiagnosticsLogDump;
  unk_254291688 = 0;
  dword_254291690 = 0;
  qword_254291698 = (uint64_t)CFSTR("SensorAgileClockingEnable");
  unk_2542916A0 = v13;
  qword_2542916A8 = (uint64_t)SetSensorAgileClockingEnable;
  unk_2542916B0 = 0;
  dword_2542916B8 = 0;
  qword_2542916C0 = (uint64_t)CFSTR("FactoryFeaturesMode");
  unk_2542916C8 = v4;
  qword_2542916D0 = (uint64_t)SetFactoryFeaturesMode;
  unk_2542916D8 = 0;
  dword_2542916E0 = 0;
  qword_2542916E8 = (uint64_t)CFSTR("FastISPClockEnable");
  unk_2542916F0 = v4;
  qword_2542916F8 = (uint64_t)SetFastISPClockEnable;
  unk_254291700 = 0;
  dword_254291708 = 0;
  qword_254291710 = *MEMORY[0x24BE104D0];
  unk_254291718 = v3;
  qword_254291720 = (uint64_t)SetDeviceMemoryPoolID;
  unk_254291728 = 0;
  dword_254291730 = 0;
  qword_254291738 = *MEMORY[0x24BE104E0];
  unk_254291740 = v1;
  qword_254291748 = 0;
  unk_254291750 = CopyStreamGroupsArray;
  dword_254291758 = 0;
  dword_254291780 = 0;
  xmmword_254291760 = 0u;
  *(_OWORD *)algn_254291770 = 0u;
  qword_254291E30 = (uint64_t)CopyProcessingSessionSupportedPropertiesDictionary;
  qword_254291E40 = *MEMORY[0x24BE10560];
  qword_254291E58 = (uint64_t)CopyProcessingSessionInputPixelBufferAttributes;
  qword_254291E68 = *MEMORY[0x24BE10570];
  qword_254291E80 = (uint64_t)CopyProcessingSessionOutputPixelBufferAttributes;
  qword_254291E90 = *MEMORY[0x24BE10550];
  qword_254291EA0 = (uint64_t)SetProcessingSessionDefaultProcessingParameters;
  unk_254291EA8 = CopyProcessingSessionDefaultProcessingParameters;
  qword_254291EB8 = *MEMORY[0x24BE10568];
  qword_254291EC0 = v4;
  qword_254291EE0 = *MEMORY[0x24BE10578];
  unk_254291EE8 = v1;
  processingSessionProperties[0] = qword_254292020;
  unk_254291E20 = v1;
  qword_254291E48 = v1;
  qword_254291E70 = v1;
  qword_254291E98 = v1;
  qword_254291EF8 = (uint64_t)CopyProcessingSessionSupportedOutputs;
  qword_254291F08 = *MEMORY[0x24BE10558];
  unk_254291F10 = v13;
  qword_254291F18 = (uint64_t)SetProcessingSessionDeferAdditionOfAttachments;
  unk_254291F20 = CopyProcessingSessionDeferAdditionOfAttachments;
  qword_254291EC8 = (uint64_t)SetProcessingSessionOutputHandler;
  unk_254291ED0 = 0;
  qword_254291E28 = 0;
  qword_254291E50 = 0;
  qword_254291E78 = 0;
  qword_254291EF0 = 0;
  dword_254291E38 = 0;
  dword_254291E60 = 0;
  dword_254291E88 = 0;
  dword_254291EB0 = 0;
  dword_254291ED8 = 0;
  dword_254291F00 = 0;
  dword_254291F28 = 0;
  dword_254291F50 = 0;
  xmmword_254291F30 = 0u;
  unk_254291F40 = 0u;
  return result;
}

H9ISP::H9ISPFirmwareWorkProcessor *H9ISP::H9ISPFirmwareWorkProcessor::H9ISPFirmwareWorkProcessor(H9ISP::H9ISPFirmwareWorkProcessor *this, H9ISP::H9ISPDevice *a2)
{
  H9ISP::H9ISPDevice **v3;
  H9ISPFirmwareWork *v4;
  unsigned int v6;
  pthread_mutexattr_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = a2;
  v3 = (H9ISP::H9ISPDevice **)((char *)this + 240);
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0x4000000000000000;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), 0);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 144), 0);
  *((_QWORD *)this + 26) = 0;
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_settype(&v7, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 80), &v7);
  pthread_mutexattr_destroy(&v7);
  v6 = 0;
  H9ISP::H9ISPDevice::GetISPCounterFrequency(*v3, &v6, (double *)this + 32);
  mach_timebase_info((mach_timebase_info_t)this + 33);
  v4 = (H9ISPFirmwareWork *)operator new();
  H9ISPFirmwareWork::H9ISPFirmwareWork(v4);
  *((_QWORD *)this + 36) = v4;
  return this;
}

void sub_2357F9C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C4077668FA2);
  _Unwind_Resume(a1);
}

void H9ISP::H9ISPFirmwareWorkProcessor::~H9ISPFirmwareWorkProcessor(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  H9ISP::H9ISPCFLocalMessagePort *v2;
  __CFRunLoop *v3;
  __CFRunLoopSource *RunLoopSource;
  uint64_t v5;
  H9ISPFirmwareWork *v6;

  if (*(_DWORD *)this)
    H9ISP::H9ISPFirmwareWorkProcessor::stopReceive(this);
  if (*((_QWORD *)this + 29))
    H9ISP::H9ISPFirmwareWorkProcessor::removeIODispatcherFromRunLoop(this);
  v2 = (H9ISP::H9ISPCFLocalMessagePort *)*((_QWORD *)this + 34);
  if (v2)
  {
    v3 = (__CFRunLoop *)*((_QWORD *)this + 1);
    RunLoopSource = H9ISP::H9ISPCFLocalMessagePort::GetRunLoopSource(v2);
    CFRunLoopRemoveSource(v3, RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    v5 = *((_QWORD *)this + 34);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 34) = 0;
  }
  v6 = (H9ISPFirmwareWork *)*((_QWORD *)this + 36);
  if (v6)
  {
    H9ISPFirmwareWork::~H9ISPFirmwareWork(v6);
    MEMORY[0x23B7D8B08]();
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 80));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 144));
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::stopReceive(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*(_DWORD *)this)
  {
    H9ISP::H9ISPFirmwareWorkProcessor::stopNoDataTimer(this);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
    *((_BYTE *)this + 248) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 80));
    v3 = H9ISP::H9ISPDevice::ISP_UnregisterFirmwareWorkProcessor(*((H9ISP::H9ISPDevice **)this + 30), *((_DWORD *)this + 56));
    *((_BYTE *)this + 248) = 0;
    *(_DWORD *)this = 0;
  }
  else
  {
    v3 = 3758097122;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void H9ISP::H9ISPFirmwareWorkProcessor::removeIODispatcherFromRunLoop(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  __CFRunLoopSource *v2;
  __CFMachPort *v3;
  mach_port_name_t v4;

  v2 = (__CFRunLoopSource *)*((_QWORD *)this + 29);
  if (v2)
  {
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 1), v2, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    CFRelease(*((CFTypeRef *)this + 29));
    *((_QWORD *)this + 29) = 0;
  }
  v3 = (__CFMachPort *)*((_QWORD *)this + 27);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 27));
    *((_QWORD *)this + 27) = 0;
  }
  v4 = *((_DWORD *)this + 56);
  if (v4)
  {
    mach_port_mod_refs(*MEMORY[0x24BDAEC58], v4, 1u, -1);
    *((_DWORD *)this + 56) = 0;
  }
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::setupWorkProcessor(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  *((_QWORD *)this + 1) = CFRunLoopGetCurrent();
  return H9ISP::H9ISPFirmwareWorkProcessor::addIODispatcherToRunLoop(this);
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::addIODispatcherToRunLoop(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  uint64_t v2;
  const __CFAllocator *v3;
  __CFMachPort *v4;
  __CFRunLoopSource *RunLoopSource;
  Boolean shouldFreeInfo;
  CFMachPortContext context;

  v2 = IOCreateReceivePort(0x39u, (mach_port_t *)this + 56);
  if (!(_DWORD)v2)
  {
    v2 = 3758097085;
    shouldFreeInfo = 0;
    context.version = 1;
    context.info = this;
    memset(&context.retain, 0, 24);
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x24BDBD240], *((_DWORD *)this + 56), MEMORY[0x24BDD7FD8], &context, &shouldFreeInfo);
    *((_QWORD *)this + 27) = v4;
    if (v4)
    {
      RunLoopSource = CFMachPortCreateRunLoopSource(v3, v4, 0);
      *((_QWORD *)this + 29) = RunLoopSource;
      if (RunLoopSource)
      {
        CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::startReceive(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  _QWORD inputStruct[2];
  int v6;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*(_DWORD *)this == 1)
  {
    pthread_mutex_unlock(v2);
    return 3758097122;
  }
  else
  {
    *((_BYTE *)this + 248) = 0;
    *(_DWORD *)this = 1;
    inputStruct[0] = H9ISP::H9ISPFirmwareWorkProcessor::WorkReady;
    inputStruct[1] = this;
    v6 = *((_DWORD *)this + 56);
    v3 = H9ISP::H9ISPDevice::ISP_RegisterFirmwareWorkProcessor(*((_QWORD *)this + 30), inputStruct);
    if (!(_DWORD)v3)
      H9ISP::H9ISPFirmwareWorkProcessor::startNoDataTimer(this);
    pthread_mutex_unlock(v2);
  }
  return v3;
}

void H9ISP::H9ISPFirmwareWorkProcessor::WorkReady(H9ISP::H9ISPFirmwareWorkProcessor *this, void *a2, int a3, unint64_t *a4)
{
  uint64_t v5;
  double v6;
  double v7;
  int16x4_t v8;
  int16x4_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v5 = operator new();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
  if (!H9ISP::H9ISPDevice::ISP_GetFirmwareWorkProcessorItem(*((_QWORD *)this + 30), *((_DWORD *)this + 56), v5))
  {
    H9ISP::H9ISPFirmwareWorkProcessor::tickleNoDataTimer(this);
    v10 = *((_QWORD *)this + 36);
    if (v10)
    {
      H9ISPFirmwareWork::FirmwareRPC(v10, v5, v6, v7, v8, v9);
    }
    else
    {
      v11 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v11)
      {
        v12 = (_DWORD *)(v5 + 36);
        do
        {
          *v12 = 5;
          v12 += 14;
          --v11;
        }
        while (v11);
      }
    }
    H9ISP::H9ISPDevice::ISP_CompleteFirmwareWorkProcessorItem(*((_QWORD *)this + 30), *((_DWORD *)this + 56), v5);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 80));
  JUMPOUT(0x23B7D8B08);
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::startNoDataTimer(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v5;
  CFRunLoopTimerContext context;

  v2 = (pthread_mutex_t *)((char *)this + 144);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 26);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 26));
    *((_QWORD *)this + 26) = 0;
  }
  context.version = 0;
  context.info = this;
  memset(&context.retain, 0, 24);
  Current = CFAbsoluteTimeGetCurrent();
  v5 = CFRunLoopTimerCreate(0, Current + *((double *)this + 35), 0.0, 0, 0, (CFRunLoopTimerCallBack)H9ISP::H9ISPFirmwareWorkProcessor::NoDataTimeout, &context);
  *((_QWORD *)this + 26) = v5;
  if (v5)
    CFRunLoopAddTimer(*((CFRunLoopRef *)this + 1), v5, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::stopNoDataTimer(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;

  v2 = (pthread_mutex_t *)((char *)this + 144);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 26);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 26));
    *((_QWORD *)this + 26) = 0;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::tickleNoDataTimer(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;
  CFAbsoluteTime Current;

  v2 = (pthread_mutex_t *)((char *)this + 144);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 26);
  if (v3)
  {
    Current = CFAbsoluteTimeGetCurrent();
    CFRunLoopTimerSetNextFireDate(v3, Current + *((double *)this + 35));
  }
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::SetFrameDoneTimeoutDuration(H9ISP::H9ISPFirmwareWorkProcessor *this, double a2)
{
  if (a2 < 2.0)
    a2 = 2.0;
  *((double *)this + 35) = a2;
  H9ISP::H9ISPFirmwareWorkProcessor::tickleNoDataTimer(this);
  return 0;
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessor::FlushSurfaceCache(H9ISP::H9ISPFirmwareWorkProcessor *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  H9ISP::H9ISPDevice::ISP_ReleaseFirmwareWorkProcessorBuffers(*((H9ISP::H9ISPDevice **)this + 30), *((_DWORD *)this + 56));
  pthread_mutex_unlock(v2);
  return 0;
}

uint64_t H9ISP::CreateH9ISPFirmwareWorkProcessor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  pthread_t v5;
  _QWORD v6[3];
  pthread_mutex_t v7;
  pthread_attr_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v7);
  v2 = *(_QWORD *)(a1 + 8);
  v6[0] = 0;
  v6[1] = v2;
  v6[2] = &v7;
  pthread_attr_init(&v8);
  pthread_attr_setdetachstate(&v8, 2);
  pthread_create(&v5, &v8, (void *(__cdecl *)(void *))H9ISP::H9ISPFirmwareWorkProcessorThreadStart, v6);
  pthread_attr_destroy(&v8);
  H9ISP::H9ISPThreadReadySyncer::wait(&v7);
  **(_QWORD **)a1 = v6[0];
  if (v6[0])
    v3 = 0;
  else
    v3 = 3758097084;
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v7);
  return v3;
}

void sub_2357FA370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t H9ISP::H9ISPFirmwareWorkProcessorThreadStart(uint64_t a1)
{
  H9ISP::H9ISPFirmwareWorkProcessor *v2;
  int v3;
  _opaque_pthread_t *v4;
  H9ISP *v5;

  pthread_setname_np("H9ISPFirmwareWorkProcessorThread");
  H9ISP::H9ISPThreadReadySyncer::lock(*(pthread_mutex_t **)(a1 + 16));
  v2 = (H9ISP::H9ISPFirmwareWorkProcessor *)operator new();
  H9ISP::H9ISPFirmwareWorkProcessor::H9ISPFirmwareWorkProcessor(v2, *(H9ISP::H9ISPDevice **)(a1 + 8));
  *((_QWORD *)v2 + 1) = CFRunLoopGetCurrent();
  v3 = H9ISP::H9ISPFirmwareWorkProcessor::addIODispatcherToRunLoop(v2);
  if (v3)
  {
    H9ISP::H9ISPFirmwareWorkProcessor::~H9ISPFirmwareWorkProcessor(v2);
    MEMORY[0x23B7D8B08]();
    v2 = 0;
  }
  *(_QWORD *)a1 = v2;
  v4 = pthread_self();
  v5 = (H9ISP *)pthread_mach_thread_np(v4);
  H9ISP::H9ISPSetMachThreadPriority(v5, 47);
  H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 16));
  if (!v3 && v2)
    CFRunLoopRun();
  return 0;
}

void sub_2357FA44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C4078A72D64);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::DestroyH9ISPFirmwareWorkProcessor(H9ISP *this, H9ISP::H9ISPFirmwareWorkProcessor *a2)
{
  void *v3;

  v3 = (void *)*((_QWORD *)this + 1);
  CFRetain(v3);
  H9ISP::H9ISPFirmwareWorkProcessor::~H9ISPFirmwareWorkProcessor(this);
  MEMORY[0x23B7D8B08]();
  CFRunLoopStop((CFRunLoopRef)v3);
  CFRelease(v3);
  return 0;
}

uint64_t H9ISP::H9ISPDevice::CacheNumChannels(H9ISP::H9ISPDevice *this)
{
  return H9ISP::H9ISPDevice::ISP_GetNumChannels(this, (unsigned int *)this + 98);
}

uint64_t H9ISP::H9ISPDevice::ISP_GetNumChannels(H9ISP::H9ISPDevice *this, unsigned int *a2)
{
  mach_port_t v2;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;

  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  output = 0;
  outputCnt = 1;
  result = IOConnectCallScalarMethod(v2, 0x26u, 0, 0, &output, &outputCnt);
  if (!(_DWORD)result)
    *a2 = output;
  return result;
}

uint64_t H9ISP::H9ISPDevice::CacheDeviceConfigs(H9ISP::H9ISPDevice *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD __src[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)this + 98))
    return 3758097112;
  WORD2(__src[0]) = 3;
  v2 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)__src, 0x1Cu, 0, 0xFFFFFFFF);
  if (!(_DWORD)v2)
  {
    *((_OWORD *)this + 22) = __src[0];
    *(_OWORD *)((char *)this + 364) = *(_OWORD *)((char *)__src + 12);
    printf("H9ISP: maxChannels=%d, timeStampFrequency=%d\n", HIDWORD(__src[0]), DWORD2(__src[0]));
    if (!*((_QWORD *)this + 48))
    {
      v3 = *((_DWORD *)this + 98);
      v4 = operator new[]();
      if (v3)
      {
        v5 = v4;
        do
        {
          *(_DWORD *)v5 = 0;
          *(_OWORD *)(v5 + 8) = 0uLL;
          *(_OWORD *)(v5 + 24) = 0uLL;
          *(_OWORD *)(v5 + 40) = 0uLL;
          *(_OWORD *)(v5 + 56) = 0uLL;
          *(_OWORD *)(v5 + 72) = 0uLL;
          *(_OWORD *)(v5 + 88) = 0uLL;
          *(_OWORD *)(v5 + 104) = 0uLL;
          *(_OWORD *)(v5 + 120) = 0uLL;
          *(_OWORD *)(v5 + 136) = 0uLL;
          *(_OWORD *)(v5 + 152) = 0uLL;
          *(_OWORD *)(v5 + 168) = 0uLL;
          *(_OWORD *)(v5 + 184) = 0uLL;
          *(_OWORD *)(v5 + 200) = 0uLL;
          *(_QWORD *)(v5 + 216) = 0;
          v5 += 224;
        }
        while (v5 != v4 + 224 * v3);
      }
      *((_QWORD *)this + 48) = v4;
    }
    LODWORD(v6) = *((_DWORD *)this + 98);
    if (!(_DWORD)v6)
    {
LABEL_26:
      v2 = 0;
      *((_DWORD *)this + 86) = v6;
      *((_BYTE *)this + 348) = 1;
      return v2;
    }
    v7 = 0;
    while (1)
    {
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      memset(__src, 0, sizeof(__src));
      WORD2(__src[0]) = 269;
      DWORD2(__src[0]) = v7;
      v2 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)__src, 0xC8u, 0, 0xFFFFFFFF);
      if ((_DWORD)v2)
        break;
      v8 = (_DWORD *)(*((_QWORD *)this + 48) + 224 * v7);
      *v8 = v17;
      memmove(v8 + 6, __src, 0xC8uLL);
      v9 = *((_QWORD *)this + 48);
      if (*(_DWORD *)(v9 + 224 * v7)
        && (*(_QWORD *)(v9 + 224 * v7 + 8)
         || *(_QWORD *)(v9 + 224 * v7 + 16)
         || (*(_QWORD *)(*((_QWORD *)this + 48) + 224 * v7 + 8) = operator new[](),
             v10 = operator new[](),
             v11 = *((_QWORD *)this + 48) + 224 * v7,
             *(_QWORD *)(v11 + 16) = v10,
             *(_DWORD *)v11)))
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          WORD2(__src[0]) = 262;
          *((_QWORD *)&__src[0] + 1) = __PAIR64__(v14, v7);
          v2 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)__src, 0x84u, 0, 0xFFFFFFFF);
          if ((_DWORD)v2)
            break;
          if ((BYTE12(__src[1]) & 0x80) != 0)
            WORD6(__src[1]) = (WORD6(__src[1]) & 0xFF00) + 256;
          memmove((void *)(*(_QWORD *)(*((_QWORD *)this + 48) + 224 * v7 + 8) + v13), &__src[1], 0x74uLL);
          WORD2(__src[0]) = 322;
          *((_QWORD *)&__src[0] + 1) = __PAIR64__(v14, v7);
          v2 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)__src, 0x48u, 0, 0xFFFFFFFF);
          if ((_DWORD)v2)
            break;
          memmove((void *)(*(_QWORD *)(*((_QWORD *)this + 48) + 224 * v7 + 16) + v12), __src, 0x48uLL);
          ++v14;
          v13 += 116;
          v12 += 72;
          if (v14 >= *(unsigned int *)(*((_QWORD *)this + 48) + 224 * v7))
            goto LABEL_23;
        }
      }
      else
      {
LABEL_23:
        v2 = 0;
      }
      ++v7;
      v6 = *((unsigned int *)this + 98);
      if (v7 >= v6)
      {
        if ((_DWORD)v2)
          break;
        goto LABEL_26;
      }
    }
  }
  H9ISP::H9ISPDevice::InitDeviceConfigsCache(this);
  return v2;
}

uint64_t H9ISP::H9ISPDevice::ISP_SendCommand(H9ISP::H9ISPDevice *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  mach_port_t v10;
  uint64_t v11;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v10 = *((_DWORD *)this + 24);
  if (v10)
  {
    input[0] = (uint64_t)a2;
    input[1] = a3;
    input[2] = a4;
    input[3] = a5;
    v11 = IOConnectCallScalarMethod(v10, 7u, input, 4u, 0, 0);
  }
  else
  {
    v11 = 3758097084;
  }
  kdebug_trace();
  return v11;
}

uint64_t H9ISP::H9ISPDevice::InitDeviceConfigsCache(H9ISP::H9ISPDevice *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 348))
  {
    *((_BYTE *)this + 348) = 0;
    *((_DWORD *)this + 86) = 0;
    if (*((_QWORD *)this + 48))
    {
      if (!*((_DWORD *)this + 98))
        goto LABEL_11;
      v2 = 0;
      v3 = 0;
      do
      {
        v4 = *((_QWORD *)this + 48);
        v5 = *(_QWORD *)(v4 + v2 + 8);
        if (v5)
        {
          MEMORY[0x23B7D8AF0](v5, 0x1000C8067CC99C6);
          v4 = *((_QWORD *)this + 48);
          *(_QWORD *)(v4 + v2 + 8) = 0;
        }
        v6 = *(_QWORD *)(v4 + v2 + 16);
        if (v6)
        {
          MEMORY[0x23B7D8AF0](v6, 0x1000C80FF89C88ELL);
          v4 = *((_QWORD *)this + 48);
          *(_QWORD *)(v4 + v2 + 16) = 0;
        }
        v7 = v4 + v2;
        *(_DWORD *)v7 = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + 40) = 0u;
        *(_OWORD *)(v7 + 56) = 0u;
        *(_OWORD *)(v7 + 72) = 0u;
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + 104) = 0u;
        *(_OWORD *)(v7 + 120) = 0u;
        *(_OWORD *)(v7 + 136) = 0u;
        *(_OWORD *)(v7 + 152) = 0u;
        *(_OWORD *)(v7 + 168) = 0u;
        *(_OWORD *)(v7 + 184) = 0u;
        *(_OWORD *)(v7 + 200) = 0u;
        *(_QWORD *)(v7 + 216) = 0;
        ++v3;
        v2 += 224;
      }
      while (v3 < *((unsigned int *)this + 98));
      if (*((_QWORD *)this + 48))
LABEL_11:
        MEMORY[0x23B7D8AF0]();
      *((_QWORD *)this + 48) = 0;
    }
  }
  return 0;
}

uint64_t H9ISP::H9ISPDevice::GetNumCameraConfigs(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  if (*((_DWORD *)this + 98) > a2 && *((_BYTE *)this + 348))
    return *(unsigned int *)(*((_QWORD *)this + 48) + 224 * a2);
  else
    return 0;
}

uint64_t H9ISP::H9ISPDevice::GetCameraConfig(uint64_t a1, unsigned int a2, unsigned int a3, void *__dst, void *a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v9;

  result = 3758097090;
  if (!*(_BYTE *)(a1 + 348))
    return 3758097112;
  if (*(_DWORD *)(a1 + 392) > a2)
  {
    v7 = *(_QWORD *)(a1 + 384);
    if (*(_DWORD *)(v7 + 224 * a2) > a3)
    {
      v9 = 224 * a2;
      memmove(__dst, (const void *)(*(_QWORD *)(v7 + v9 + 8) + 116 * a3), 0x74uLL);
      memmove(a5, (const void *)(*(_QWORD *)(a1 + 384) + v9 + 24), 0xC8uLL);
      return 0;
    }
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetLSCCoefficients(uint64_t a1, unsigned int a2, unsigned int a3, void *__dst)
{
  uint64_t result;
  uint64_t v6;

  result = 3758097090;
  if (!*(_BYTE *)(a1 + 348))
    return 3758097112;
  if (*(_DWORD *)(a1 + 392) > a2)
  {
    v6 = *(_QWORD *)(a1 + 384);
    if (*(_DWORD *)(v6 + 224 * a2) > a3)
    {
      memmove(__dst, (const void *)(*(_QWORD *)(v6 + 224 * a2 + 16) + 72 * a3), 0x48uLL);
      return 0;
    }
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetChannelSensorID(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  if (*((_BYTE *)this + 348) && *((_DWORD *)this + 98) > a2)
    return *(unsigned int *)(*((_QWORD *)this + 48) + 224 * a2 + 56);
  else
    return 0;
}

uint64_t H9ISP::H9ISPDevice::GetISPCounterFrequency(H9ISP::H9ISPDevice *this, unsigned int *a2, double *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  mach_timebase_info info;

  if (!*((_BYTE *)this + 348))
    return 3758097112;
  mach_timebase_info(&info);
  result = 0;
  *a2 = *((_DWORD *)this + 90);
  LODWORD(v7) = *((_DWORD *)this + 90);
  LODWORD(v8) = info.numer;
  *a3 = 1.0 / (double)v7 * 1000000000.0 * ((double)(info.denom | 0x41CDCD6500000000uLL) / (double)v8);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetCameraConfig(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, char a11, int a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  NSObject *v24;
  int v25;
  _QWORD block[5];
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30[8];
  unsigned int v31;
  int v32;
  int v33;
  unsigned __int8 v34[4];
  __int16 v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v15 = 3758097090;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) > a2 && *(_DWORD *)(*((_QWORD *)this + 48) + 224 * a2) > a3)
  {
    v15 = H9ISP::H9ISPDevice::ISP_EnableSensorPower(this, a2, 1u, 0);
    if (!(_DWORD)v15)
    {
      v35 = 263;
      v36 = a2;
      LODWORD(v37) = a3;
      v15 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v34, 0x10u, 0, 0xFFFFFFFF);
      if (!(_DWORD)v15)
      {
        if (*((_BYTE *)this + a2 + 308))
        {
          v24 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
          if (v24)
          {
            block[0] = MEMORY[0x24BDAC760];
            block[1] = 0x40000000;
            block[2] = ___ZN5H9ISP11H9ISPDevice15SetCameraConfigEjj9sCIspRectttjj27eCIspVOutputColorRangeModesbjjS1__block_invoke;
            block[3] = &__block_descriptor_tmp_0;
            block[4] = this;
            v28 = a2;
            v29 = a3;
            dispatch_async(v24, block);
          }
        }
        if (!a11
          || (*(_QWORD *)v30 = 0x90100000000,
              v31 = a2,
              v32 = a12,
              v33 = a13,
              v15 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v30, 0x14u, 0, 0xFFFFFFFF),
              !(_DWORD)v15)
          && (v15 = H9ISP::H9ISPDevice::SetFESCropRect(this, a2, a14, a15), !(_DWORD)v15))
        {
          v35 = 2049;
          v36 = a2;
          v37 = a4;
          v38 = a5;
          v15 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v34, 0x1Cu, 0, 0xFFFFFFFF);
          if (!(_DWORD)v15)
          {
            v35 = 2817;
            v36 = a2;
            v37 = __PAIR64__(a7, a6);
            v41 = a8;
            v38 = __PAIR64__(a9, a10);
            if (a9 == 1)
            {
              v25 = (2 * a6 + 63) & 0x3FFC0;
            }
            else
            {
              v25 = (a6 + 63) & 0x1FFC0;
              v40 = v25;
            }
            v39 = v25;
            v15 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v34, 0x2Cu, 0, 0xFFFFFFFF);
            if (!(_DWORD)v15)
            {
              v35 = 270;
              v36 = a2;
              LODWORD(v37) = 1;
              v15 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v34, 0x10u, 0, 0xFFFFFFFF);
              if (!(_DWORD)v15)
              {
                v36 = a2;
                v35 = 271;
                v15 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v34, 0xCu, 0, 0xFFFFFFFF);
                if ((_DWORD)v15)
                  H9ISP::H9ISPDevice::ISP_EnableSensorPower(this, a2, 0, 0);
              }
            }
          }
        }
      }
    }
  }
  return v15;
}

uint64_t H9ISP::H9ISPDevice::ISP_EnableSensorPower(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  mach_port_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD block[6];
  unsigned int v11;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 3758097084;
  v7 = a2;
  v8 = a3;
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  result = IOConnectCallScalarMethod(v5, 0x14u, input, 3u, 0, 0);
  if ((_DWORD)result)
    return result;
  if (*((_BYTE *)this + v7 + 236))
  {
    result = *(_QWORD *)(*((_QWORD *)this + 2) + 72);
    if (!result)
      return result;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN5H9ISP11H9ISPDevice21ISP_EnableSensorPowerEjbb_block_invoke;
    block[3] = &__block_descriptor_tmp_92;
    v11 = a2;
    block[4] = this;
    block[5] = v8;
    dispatch_async((dispatch_queue_t)result, block);
  }
  return 0;
}

uint64_t ___ZN5H9ISP11H9ISPDevice15SetCameraConfigEjj9sCIspRectttjj27eCIspVOutputColorRangeModesbjjS1__block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v2 + 4 * *(unsigned int *)(a1 + 40) + 288), *(unsigned int *)(a1 + 44));
  return notify_post(*(const char **)(v2 + 8 * *(unsigned int *)(a1 + 40) + 248));
}

uint64_t H9ISP::H9ISPDevice::SetFESOutputSize(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x90100000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFESCropRect(H9ISP::H9ISPDevice *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0x90000000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v5, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetSecondaryBESConfig(H9ISP::H9ISPDevice *a1, unsigned int a2, unint64_t a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7, unsigned int a8, unsigned int a9)
{
  uint64_t v17;
  int v18;
  unsigned __int8 v20[4];
  __int16 v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)a1 + 98) <= a2)
    return 3758097090;
  v17 = H9ISP::H9ISPDevice::ISP_EnableSensorPower(a1, a2, 1u, 0);
  if (!(_DWORD)v17)
  {
    v21 = 2060;
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v17 = H9ISP::H9ISPDevice::ISP_SendCommand(a1, v20, 0x1Cu, 0, 0xFFFFFFFF);
    if (!(_DWORD)v17)
    {
      v21 = 2825;
      v22 = a2;
      v23 = __PAIR64__(a6, a5);
      v27 = a7;
      v24 = __PAIR64__(a8, a9);
      if (a8 == 1)
      {
        v18 = (2 * a5 + 63) & 0x3FFC0;
      }
      else
      {
        v18 = (a5 + 63) & 0x1FFC0;
        v26 = v18;
      }
      v25 = v18;
      v17 = H9ISP::H9ISPDevice::ISP_SendCommand(a1, v20, 0x2Cu, 0, 0xFFFFFFFF);
      if ((_DWORD)v17)
        H9ISP::H9ISPDevice::ISP_EnableSensorPower(a1, a2, 0, 0);
    }
  }
  return v17;
}

uint64_t H9ISP::H9ISPDevice::StartCamera(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  uint64_t result;
  unsigned __int8 v4[4];
  __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = 3758097090;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) > a2)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 48) + 224 * a2))
    {
      v6 = a2;
      v5 = 256;
      return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0xCu, 0, 0xFFFFFFFF);
    }
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::StopCamera(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  uint64_t result;
  unsigned __int8 v4[4];
  __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  result = 3758097090;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) > a2)
  {
    if (*(_DWORD *)(*((_QWORD *)this + 48) + 224 * a2))
    {
      v6 = a2;
      v5 = 257;
      return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0xCu, 0, 3u);
    }
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::ReturnAllUnusedBuffers(H9ISP::H9ISPDevice *this, int a2)
{
  unsigned __int8 v3[4];
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  v5 = a2;
  v4 = 260;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StartFaceDetect(H9ISP::H9ISPDevice *this, int a2, char a3)
{
  uint64_t result;
  unsigned __int8 v7[4];
  __int16 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v8 = 3330;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x1Cu, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v8 = 3331;
    v9 = a2;
    v10 = v11;
    LOBYTE(v11) = a3 & 1;
    BYTE1(v11) = (a3 & 2) != 0;
    BYTE2(v11) = (a3 & 4) != 0;
    result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x14u, 0, 0xFFFFFFFF);
    if (!(_DWORD)result)
    {
      v9 = a2;
      v8 = 3333;
      result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0xCu, 0, 0xFFFFFFFF);
      if (!(_DWORD)result)
      {
        v9 = a2;
        v8 = 3328;
        return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0xCu, 0, 0xFFFFFFFF);
      }
    }
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::ReconfigureFaceDetect(H9ISP::H9ISPDevice *this, int a2, char a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0xD0300000000;
  v7 = a4;
  v6 = a2;
  v8 = a3 & 1;
  *(_WORD *)((char *)&v8 + 1) = (a3 & 2) != 0;
  BYTE2(v8) = (a3 & 4) != 0;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StopFaceDetect(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t result;
  unsigned __int8 v5[4];
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v6 = 3329;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0xCu, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v7 = a2;
    v6 = 3332;
    return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0xCu, 0, 0xFFFFFFFF);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetMaximumFrameRate(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  unsigned __int8 v4[4];
  __int16 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 520;
  v6 = a2;
  v7 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMinimumFrameRate(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  unsigned __int8 v4[4];
  __int16 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 522;
  v6 = a2;
  v7 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMultiCameraEnable(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  unsigned __int8 v4[8];
  int v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v4 = 0x12C00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetSensorNVMBytes(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int v10;
  unsigned int v12;
  size_t v13;
  uint64_t v15;

  v5 = 3758097090;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) > a2)
  {
    v8 = *((_QWORD *)this + 48);
    if (*(_DWORD *)(v8 + 224 * a2))
    {
      v10 = *(_DWORD *)(v8 + 224 * a2 + 64);
      if (v10 > a4)
      {
        v12 = *a5;
        if (*a5 >= v10)
          v12 = v10;
        if (v12 + a4 <= v10)
          v13 = v12;
        else
          v13 = v10 - a4;
        if ((_DWORD)v13)
        {
          v5 = H9ISP::H9ISPDevice::ISP_EnableSensorPower(this, a2, 1u, 0);
          if (!(_DWORD)v5)
          {
            v15 = operator new[]();
            bzero((void *)v15, (v13 + 20));
            *(_WORD *)(v15 + 4) = 1281;
            *(_DWORD *)(v15 + 8) = a2;
            *(_DWORD *)(v15 + 12) = a4;
            *(_DWORD *)(v15 + 16) = v13;
            v5 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v15, (int)v13 + 20, 0, 0xFFFFFFFF);
            if (!(_DWORD)v5)
            {
              memcpy(a3, (const void *)(v15 + 20), v13);
              *a5 = v13;
            }
            MEMORY[0x23B7D8AF0](v15, 0x1000C8077774924);
          }
        }
      }
    }
    else
    {
      return 3758097088;
    }
  }
  return v5;
}

uint64_t H9ISP::H9ISPDevice::GetDeviceNVMBytes(H9ISP::H9ISPDevice *a1, int a2, int a3, void *a4, int a5, _DWORD *a6)
{
  size_t v6;
  uint64_t v13;
  uint64_t v14;

  v6 = *a6;
  if (!(_DWORD)v6)
    return 3758097090;
  v13 = operator new[]();
  bzero((void *)v13, (v6 + 24));
  *(_WORD *)(v13 + 4) = 334;
  *(_DWORD *)(v13 + 8) = a2;
  *(_DWORD *)(v13 + 12) = a3;
  *(_DWORD *)(v13 + 16) = a5;
  *(_DWORD *)(v13 + 20) = v6;
  v14 = H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)v13, (int)v6 + 24, 0, 0xFFFFFFFF);
  if (!(_DWORD)v14)
  {
    memcpy(a4, (const void *)(v13 + 24), v6);
    *a6 = *(_DWORD *)(v13 + 20);
  }
  MEMORY[0x23B7D8AF0](v13, 0x1000C8077774924);
  return v14;
}

uint64_t H9ISP::H9ISPDevice::ReloadNVMBytes(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int8 v5[8];
  unsigned int v6;
  int v7;
  int v8;

  result = 3758097088;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) <= a2)
    return 3758097090;
  v4 = *((_QWORD *)this + 48);
  if (*(_DWORD *)(v4 + 224 * a2))
  {
    *(_QWORD *)v5 = 0x50200000000;
    v6 = a2;
    v7 = 0;
    v8 = *(_DWORD *)(v4 + 224 * a2 + 64);
    result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
    if (!(_DWORD)result)
      return H9ISP::H9ISPDevice::CacheDeviceConfigs(this);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableAE(H9ISP::H9ISPDevice *this, unsigned int a2, int a3)
{
  __int16 v3;
  uint64_t v5;
  unsigned int v6;

  if (*((_DWORD *)this + 98) <= a2)
    return 3758097090;
  v5 = 0;
  if (a3)
    v3 = 512;
  else
    v3 = 513;
  WORD2(v5) = v3;
  v6 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableAWB(H9ISP::H9ISPDevice *this, unsigned int a2, int a3)
{
  __int16 v3;
  uint64_t v5;
  unsigned int v6;

  if (*((_DWORD *)this + 98) <= a2)
    return 3758097090;
  v5 = 0;
  if (a3)
    v3 = 768;
  else
    v3 = 769;
  WORD2(v5) = v3;
  v6 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFaceDetectionWindowParam(H9ISP::H9ISPDevice *a1, int a2, uint64_t a3)
{
  unsigned __int8 v4[8];
  int v5;
  uint64_t v6;

  *(_QWORD *)v4 = 0xD0C00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, v4, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetFaceDetectionWindowParam(H9ISP::H9ISPDevice *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned __int8 v5[8];
  _BYTE v6[12];

  *(_QWORD *)v5 = 0xD0D00000000;
  *(_DWORD *)&v6[8] = 0;
  *(_QWORD *)v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(a1, v5, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = *(_QWORD *)&v6[4];
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableHighFrameRateAF(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x40E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::WritePropertyValue(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x12200000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ReadPropertyValue(H9ISP::H9ISPDevice *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  unsigned __int8 v6[8];
  int v7;
  int v8;
  unsigned int v9;

  *(_QWORD *)v6 = 0x12300000000;
  v8 = a3;
  v9 = 0;
  v7 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetBinningMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x50D00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFocusMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x840900000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetFocusMode(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x840A00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = WORD2(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAFMatrixModeConfig(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6, __int16 a7)
{
  unsigned __int8 v8[8];
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *(_QWORD *)v8 = 0x840B00000000;
  v9 = a2 & 0x8000FFFF;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WORD1(v12) = a6;
  WORD2(v12) = a7;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAFMatrixModeConfig(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int16 *a7)
{
  uint64_t result;
  unsigned __int8 v13[8];
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)v13 = 0x840C00000000;
  v15 = 0;
  v14 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v13, 0x18u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v14);
    *a4 = HIWORD(v14);
    *a5 = v15;
    *a6 = WORD1(v15);
    *a7 = WORD2(v15);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetLSC(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, float *a7, float *a8)
{
  uint64_t v16;
  uint64_t v17;
  size_t v19;
  unsigned __int8 *__dst;

  v16 = 3758097084;
  v17 = operator new[]();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_WORD *)(v17 + 4) = 1287;
  *(_DWORD *)(v17 + 8) = a2;
  if (H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v17, 0x10u, 0, 0xFFFFFFFF))
  {
    *a5 = 0;
    *a6 = 0;
  }
  else
  {
    __dst = a3;
    *a5 = *(_BYTE *)(v17 + 12);
    *a6 = *(_BYTE *)(v17 + 13);
    v19 = *(unsigned __int16 *)(v17 + 14);
    MEMORY[0x23B7D8AF0](v17, 0x1000C8077774924);
    if (v19 > 0x374)
      return v16;
    v17 = operator new[]();
    bzero((void *)v17, v19 + 136);
    *(_WORD *)(v17 + 4) = 1297;
    *(_DWORD *)(v17 + 8) = a2;
    v16 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v17, (int)v19 + 136, 0, 0xFFFFFFFF);
    if ((_DWORD)v16)
    {
      *a4 = 0;
      puts("H9ISPDevice::get lsc failed");
    }
    else
    {
      *a4 = *(_BYTE *)(v17 + 12);
      memcpy(a7, (const void *)(v17 + 16), 4 * *a5);
      memcpy(a8, (const void *)(v17 + 84), 4 * *a6);
      memcpy(__dst, (const void *)(v17 + 136), v19);
    }
  }
  MEMORY[0x23B7D8AF0](v17, 0x1000C8077774924);
  return v16;
}

uint64_t H9ISP::H9ISPDevice::LTMUpdateSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x200200000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::LTMUpdateResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x200300000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::LSCModulationSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = 0xA3200000000;
  v4 = a2 & 0x8000FFFF;
  v5 = 1;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::LSCModulationResume(H9ISP::H9ISPDevice *this, int a2)
{
  _QWORD v3[2];

  v3[0] = 0xA3200000000;
  v3[1] = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v3, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetTNRAlgorithm(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC11900000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetOISPosition(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x74000000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetOISPosition(H9ISP::H9ISPDevice *this, unsigned int a2, int *a3, int *a4, __int16 *a5, __int16 *a6)
{
  uint64_t result;
  int v11;
  unsigned __int8 v12[8];
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)v12 = 0x74100000000;
  v14 = 0;
  v13 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v12, 0x18u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v11 = v14;
    *a3 = HIDWORD(v13);
    *a4 = v11;
    *a5 = WORD2(v14);
    *a6 = HIWORD(v14);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetOISParams(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x74200000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetOISMode(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x74300000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetOISMode(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x74600000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = WORD2(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetOISTemperature(H9ISP::H9ISPDevice *this, unsigned int a2, __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x74400000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = WORD2(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetOISStatus(H9ISP::H9ISPDevice *this, unsigned int a2, int *a3, __int16 *a4, __int16 *a5, __int16 *a6, __int16 *a7, __int16 *a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v15 = 0x74500000000;
  v18 = 0;
  v17 = 0;
  v16 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v15, 0x1Cu, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = HIDWORD(v16);
    *a4 = v17;
    *a5 = WORD1(v17);
    *a6 = WORD2(v17);
    *a7 = HIWORD(v17);
    *a8 = v18;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableLocalRawBufferMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x12500000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableRawAverageMetadata(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC01700000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableLocalHistogram(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC01A00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableVIS(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x470000000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetVISParams(H9ISP::H9ISPDevice *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v7 = 0x470100000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DisableHardwareBlock(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x810100000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableHardwareBlock(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x810000000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFlickerFrequencyHint(H9ISP::H9ISPDevice *this, int a2, double a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;

  v4 = 0x821200000000;
  v5 = a2;
  v6 = vcvtd_n_u64_f64(a3, 0x10uLL);
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFlickerFrequency(H9ISP::H9ISPDevice *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  double *v6;
  char *v7;
  _OWORD v9[2];

  v2 = 0;
  memset(v9, 0, sizeof(v9));
  WORD2(v9[0]) = 20;
  DWORD2(v9[0]) = 0x80000000;
  v3 = a2[1];
  BYTE12(v9[0]) = *a2;
  BYTE13(v9[0]) = v3;
  HIWORD(v9[0]) = a2[14];
  v4 = 1;
  do
  {
    v5 = v4;
    v6 = (double *)&a2[2 * v2];
    *((_DWORD *)&v9[1] + v2) = vcvtd_n_u64_f64(v6[1], 0x10uLL);
    v7 = (char *)v9 + 2 * v2;
    *((_WORD *)v7 + 12) = (int)v6[3];
    *((_WORD *)v7 + 14) = vcvtd_n_s64_f64(v6[5], 8uLL);
    v2 = 1;
    v4 = 0;
  }
  while ((v5 & 1) != 0);
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)v9, 0x20u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SuspendAEHdrRatioUpdate(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x23A00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ResumeAEHdrRatioUpdate(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x23B00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetHDRRatioManual(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC30800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetTimeMachineDepth(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x12800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetOscarToISPClockSync(H9ISP::H9ISPDevice *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4[8];
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)v4 = 0xC00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableMetadataSection(H9ISP::H9ISPDevice *this, unsigned int a2, __int16 a3, __int16 a4)
{
  uint64_t v4;
  unsigned __int8 v8[8];
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  int v12;
  _OWORD __src[12];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = 3758097090;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) > a2)
  {
    *(_QWORD *)v8 = 0x12600000000;
    v12 = 0;
    v9 = a2;
    v11 = a4;
    v10 = a3;
    v4 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x14u, 0, 0xFFFFFFFF);
    if (!(_DWORD)v4)
    {
      v14 = 0;
      memset(__src, 0, sizeof(__src));
      WORD2(__src[0]) = 269;
      DWORD2(__src[0]) = a2;
      v4 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)__src, 0xC8u, 0, 0xFFFFFFFF);
      if (!(_DWORD)v4)
        memmove((void *)(*((_QWORD *)this + 48) + 224 * a2 + 24), __src, 0xC8uLL);
    }
  }
  return v4;
}

uint64_t H9ISP::H9ISPDevice::EnableMotionCaptureControl(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x460000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SendAccelerometerSampleToFirmware(H9ISP::H9ISPDevice *this, uint64_t a2, int a3, int a4, int a5)
{
  _QWORD v6[2];
  int v7;
  int v8;
  int v9;

  v6[0] = 0x460100000000;
  v6[1] = a2;
  v7 = a3;
  v8 = a4;
  v9 = a5;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v6, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableRowColSumStats(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC01900000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetRowColSumWindow(H9ISP::H9ISPDevice *a1, int a2, uint64_t a3)
{
  unsigned __int8 v4[8];
  int v5;
  uint64_t v6;

  *(_QWORD *)v4 = 0xC01800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, v4, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEPanoMaxExpAdjustment(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x23800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAEPanoMaxExpAdjustment(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x23900000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableCNR(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  __int16 v3;
  uint64_t v5;
  int v6;

  v5 = 0;
  if (a3)
    v3 = 2607;
  else
    v3 = 2608;
  WORD2(v5) = v3;
  v6 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableTNR(H9ISP::H9ISPDevice *this, unsigned int a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10[8];
  unsigned int v11;

  if (*((_DWORD *)this + 98) <= a2)
    return 3758097090;
  if (a3)
  {
    v8 = 0xC10000000000;
    v9 = a2;
    result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v8, 0xCu, 0, 0xFFFFFFFF);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        *(_QWORD *)v10 = 0xC10200000000;
        v11 = a2;
        result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v10, 0xCu, 0, 0xFFFFFFFF);
      }
    }
    if (!(_DWORD)result)
    {
      *(_QWORD *)v10 = 0xC11300000000;
LABEL_14:
      v11 = a2;
      return H9ISP::H9ISPDevice::ISP_SendCommand(this, v10, 0xCu, 0, 0xFFFFFFFF);
    }
  }
  else
  {
    *(_QWORD *)v10 = 0xC11400000000;
    v11 = a2;
    result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v10, 0xCu, 0, 0xFFFFFFFF);
    if (!(_DWORD)result && a4)
    {
      *(_QWORD *)v10 = 0xC10300000000;
      v11 = a2;
      result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v10, 0xCu, 0, 0xFFFFFFFF);
    }
    if (!(_DWORD)result)
    {
      *(_QWORD *)v10 = 0xC10100000000;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::TNRResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC11300000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::TNRSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC11400000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMaxCurrentTorch(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x61800000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMaxCurrentFlashLight(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x61A00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMaxCurrentPreFlash(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x61600000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMaxCurrentMainFlash(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x61700000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::OverrideTotalStrobeMaxCurrent(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x61900000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetTorchManualLevel(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v5;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int8 v9[8];
  int v10;
  int v11;

  *(_QWORD *)v9 = 0x60500000000;
  v10 = a2;
  v11 = a3;
  v5 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v9, 0x10u, 0, 0xFFFFFFFF);
  H9ISP::H9ISPDevice::GetTorchCurrents(this, a2, &v8, &v7);
  return v5;
}

uint64_t H9ISP::H9ISPDevice::GetTorchCurrents(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v11[5];
  __int128 v12;
  _QWORD block[5];
  __int128 v14;
  unsigned __int8 v15[16];

  *(_QWORD *)v15 = 0x60700000000;
  *(_DWORD *)&v15[12] = 0;
  *(_DWORD *)&v15[8] = a2;
  v7 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v15, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)v7)
  {
    if (*((_BYTE *)this + 328))
    {
      v8 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v8)
      {
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN5H9ISP11H9ISPDevice16GetTorchCurrentsEjPtS1__block_invoke;
        block[3] = &__block_descriptor_tmp_7;
        block[4] = this;
        v14 = *(_OWORD *)v15;
        dispatch_async(v8, block);
      }
    }
    if (*((_BYTE *)this + 336))
    {
      v9 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v9)
      {
        v11[0] = MEMORY[0x24BDAC760];
        v11[1] = 0x40000000;
        v11[2] = ___ZN5H9ISP11H9ISPDevice16GetTorchCurrentsEjPtS1__block_invoke_2;
        v11[3] = &__block_descriptor_tmp_9;
        v11[4] = this;
        v12 = *(_OWORD *)v15;
        dispatch_async(v9, v11);
      }
    }
    *a3 = *(_WORD *)&v15[12];
    *a4 = *(_WORD *)&v15[14];
  }
  return v7;
}

uint64_t H9ISP::H9ISPDevice::SetTorchColorMode(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v6;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int8 v10[8];
  int v11;
  __int16 v12;
  __int16 v13;

  *(_QWORD *)v10 = 0x60600000000;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v6 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v10, 0x10u, 0, 0xFFFFFFFF);
  H9ISP::H9ISPDevice::GetTorchCurrents(this, a2, &v9, &v8);
  return v6;
}

uint64_t H9ISP::H9ISPDevice::SetIndividualTorchLEDLevels(H9ISP::H9ISPDevice *this, int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  unsigned __int16 v10;
  unsigned __int16 v11;
  _QWORD block[5];
  __int16 v13;
  unsigned __int8 v14[8];
  int v15;
  unsigned int v16;

  *(_QWORD *)v14 = 0x61200000000;
  v15 = a2;
  v16 = a3;
  v6 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v14, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)v6)
  {
    if (*((_BYTE *)this + 320))
    {
      v7 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v7)
      {
        v8 = HIBYTE(a3) + a3 + BYTE1(a3) + BYTE2(a3);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN5H9ISP11H9ISPDevice27SetIndividualTorchLEDLevelsEjj_block_invoke;
        block[3] = &__block_descriptor_tmp_4;
        if (v8 >= 0xFF)
          LOWORD(v8) = 255;
        block[4] = this;
        v13 = v8;
        dispatch_async(v7, block);
      }
    }
  }
  H9ISP::H9ISPDevice::GetTorchCurrents(this, a2, &v11, &v10);
  return v6;
}

uint64_t ___ZN5H9ISP11H9ISPDevice27SetIndividualTorchLEDLevelsEjj_block_invoke(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 316), *(unsigned __int16 *)(a1 + 40));
  return notify_post("com.apple.isp.cameratorch");
}

uint64_t H9ISP::H9ISPDevice::SetScalerCrop(H9ISP::H9ISPDevice *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0x80A00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v5, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x23500000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetPanoAELimits(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x23700000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEBracketingMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3, unsigned int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)v5 = 0x23400000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableStaticLUTForLTM(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x200600000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

__n128 H9ISP::H9ISPDevice::GetDistortionInfo(H9ISP::H9ISPDevice *a1, int a2, uint64_t a3)
{
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[14];

  memset(v10, 0, 216);
  WORD2(v10[0]) = 28673;
  DWORD2(v10[0]) = a2;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)v10, 0xD8u, 0, 0xFFFFFFFF))
  {
    v5 = *(_OWORD *)((char *)&v10[9] + 12);
    v6 = *(_OWORD *)((char *)&v10[11] + 12);
    *(_OWORD *)(a3 + 160) = *(_OWORD *)((char *)&v10[10] + 12);
    *(_OWORD *)(a3 + 176) = v6;
    *(_OWORD *)(a3 + 188) = *(_OWORD *)((char *)&v10[12] + 8);
    v7 = *(_OWORD *)((char *)&v10[5] + 12);
    v8 = *(_OWORD *)((char *)&v10[7] + 12);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)((char *)&v10[6] + 12);
    *(_OWORD *)(a3 + 112) = v8;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)((char *)&v10[8] + 12);
    *(_OWORD *)(a3 + 144) = v5;
    result = *(__n128 *)((char *)&v10[1] + 12);
    v9 = *(_OWORD *)((char *)&v10[3] + 12);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)&v10[2] + 12);
    *(_OWORD *)(a3 + 48) = v9;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)((char *)&v10[4] + 12);
    *(_OWORD *)(a3 + 80) = v7;
    *(_OWORD *)a3 = *(_OWORD *)((char *)v10 + 12);
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::StartHighlightRecovery(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x100000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StopHighlightRecovery(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x100100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StartLocalToneMapping(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x200000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StopLocalToneMapping(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x200100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableTorch(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  __int16 v3;
  uint64_t v6;
  NSObject *v7;
  unsigned __int16 v9;
  unsigned __int16 v10;
  _QWORD block[5];
  __int16 v12;
  unsigned __int8 v13[8];
  int v14;
  int v15;

  v3 = a3;
  *(_QWORD *)v13 = 0x60300000000;
  v14 = a2;
  v15 = a3;
  v6 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v13, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)v6)
  {
    if (*((_BYTE *)this + 320))
    {
      v7 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v7)
      {
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN5H9ISP11H9ISPDevice11EnableTorchEjt_block_invoke;
        block[3] = &__block_descriptor_tmp_5;
        block[4] = this;
        v12 = v3;
        dispatch_async(v7, block);
      }
    }
  }
  H9ISP::H9ISPDevice::GetTorchCurrents(this, a2, &v10, &v9);
  return v6;
}

uint64_t ___ZN5H9ISP11H9ISPDevice11EnableTorchEjt_block_invoke(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 316), *(unsigned __int16 *)(a1 + 40));
  return notify_post("com.apple.isp.cameratorch");
}

uint64_t ___ZN5H9ISP11H9ISPDevice16GetTorchCurrentsEjPtS1__block_invoke(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 324), *(unsigned __int16 *)(a1 + 52));
  return notify_post("com.apple.isp.cameratorchcoolcurrent");
}

uint64_t ___ZN5H9ISP11H9ISPDevice16GetTorchCurrentsEjPtS1__block_invoke_2(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 332), *(unsigned __int16 *)(a1 + 54));
  return notify_post("com.apple.isp.cameratorchwarmcurrent");
}

uint64_t H9ISP::H9ISPDevice::DisableTorch(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v4;
  NSObject *v5;
  unsigned __int16 v7;
  unsigned __int16 v8;
  _QWORD block[5];
  unsigned __int8 v10[8];
  int v11;

  *(_QWORD *)v10 = 0x60200000000;
  v11 = a2;
  v4 = H9ISP::H9ISPDevice::ISP_SendCommand(this, v10, 0xCu, 0, 0xFFFFFFFF);
  if (!(_DWORD)v4)
  {
    if (*((_BYTE *)this + 320))
    {
      v5 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v5)
      {
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN5H9ISP11H9ISPDevice12DisableTorchEj_block_invoke;
        block[3] = &__block_descriptor_tmp_10;
        block[4] = this;
        dispatch_async(v5, block);
      }
    }
  }
  H9ISP::H9ISPDevice::GetTorchCurrents(this, a2, &v8, &v7);
  return v4;
}

uint64_t ___ZN5H9ISP11H9ISPDevice12DisableTorchEj_block_invoke(uint64_t a1)
{
  notify_set_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 316), 0);
  return notify_post("com.apple.isp.cameratorch");
}

uint64_t H9ISP::H9ISPDevice::SetManualFocusPosition(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3, int a4)
{
  unsigned __int8 v5[8];
  unsigned int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x70200000000;
  v6 = a2 & 0x8000FFFF;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetSharpness(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;

  v7 = 0xA1300000000;
  v8 = a2;
  v9 = 1;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v7 = 0xA0900000000;
    v8 = a2;
    v9 = a3;
    return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableKnobManualMode(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA1300000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetChromaSupression(H9ISP::H9ISPDevice *this, int a2, char a3, char a4, unsigned __int8 a5)
{
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;

  v11 = 0xA1300000000;
  v12 = a2;
  v13 = 2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v11, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v11 = 0xA0D00000000;
    v12 = a2;
    LOBYTE(v13) = a3;
    BYTE1(v13) = a4;
    HIWORD(v13) = a5;
    return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v11, 0x10u, 0, 0xFFFFFFFF);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableBPC(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  __int16 v3;
  uint64_t v5;
  int v6;

  v5 = 0;
  if (a3)
    v3 = 2050;
  else
    v3 = 2051;
  WORD2(v5) = v3;
  v6 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEIntegrationTime(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x20F00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEIntegrationTimeAndGains(H9ISP::H9ISPDevice *this, int a2, int a3, unsigned __int16 a4, __int16 a5, __int16 a6, int a7, int a8)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v9 = 0x23C00000000;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  WORD1(v12) = a5;
  WORD2(v12) = a6;
  v13 = a7;
  v14 = a8;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v9, 0x20u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetHDRRatioClipScoreIIRStrength(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC30600000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetHDRRatioHightLightClipDetectSensitivity(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC30700000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetOISActuator(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x74A00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableFocusPixels(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x841000000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableContinuousFocus(H9ISP::H9ISPDevice *this, int a2, char a3, char a4)
{
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;
  __int16 v9;

  v5 = 0x840F00000000;
  v9 = 0;
  v6 = a2 & 0x8000FFFF;
  v8 = a4;
  v7 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableFocusDACLimiting(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x70800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetScalerChromaSampleOffset(H9ISP::H9ISPDevice *a1, int a2, char a3, char a4, int a5)
{
  unsigned __int8 v6[8];
  int v7;
  char v8;
  char v9;
  __int16 v10;
  int v11;

  *(_QWORD *)v6 = 0xB0A00000000;
  v10 = 0;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = a5;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, v6, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAWBManualGain(H9ISP::H9ISPDevice *this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v7 = 0x31200000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetZoomFactorLimits(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = 0x80F00000000;
  v8 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v8);
    *a4 = HIWORD(v8);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetSyncZoomFactorLimits(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = 0x81300000000;
  v8 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v8);
    *a4 = HIWORD(v8);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetCurrentZoomFactor(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = 0x81100000000;
  v8 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v8);
    *a4 = HIWORD(v8);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetRelativeZoomFactor(H9ISP::H9ISPDevice *this, unsigned __int16 a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x81400000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = WORD2(v6);
  return result;
}

double H9ISP::H9ISPDevice::GetAEParams(H9ISP::H9ISPDevice *this, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, double *a8)
{
  double result;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v17 = 0u;
  v18 = 0u;
  WORD2(v17) = 530;
  v19 = 0;
  DWORD2(v17) = a2;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v17, 0x24u, 0, 0xFFFFFFFF))
  {
    v15 = v18;
    *a3 = HIDWORD(v17);
    *a4 = v15;
    v16 = DWORD2(v18);
    *a5 = DWORD1(v18);
    *a6 = v16;
    *a7 = HIDWORD(v18);
    LODWORD(result) = v19;
    result = (double)*(unint64_t *)&result * 0.0000152587891;
    *a8 = result;
  }
  return result;
}

__n128 H9ISP::H9ISPDevice::GetAWBCalibrationMatrix(H9ISP::H9ISPDevice *a1, int a2, uint64_t a3)
{
  __n128 result;
  __int128 v5;
  _OWORD v6[6];

  memset(v6, 0, 92);
  WORD2(v6[0]) = -31973;
  DWORD2(v6[0]) = a2;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)v6, 0x5Cu, 0, 0xFFFFFFFF))
  {
    result = *(__n128 *)((char *)&v6[1] + 12);
    v5 = *(_OWORD *)((char *)&v6[3] + 12);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)&v6[2] + 12);
    *(_OWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)((char *)&v6[4] + 12);
    *(_OWORD *)a3 = *(_OWORD *)((char *)v6 + 12);
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetZoomFactor(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x81000000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetTargetToHostFrameDeliveryCadenceInMicroSeconds(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xD00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::TimeMachineCapture(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x12A00000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DPCStart(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC50D00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DPCStop(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC50E00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEAGC(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x20200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetManualCCT(H9ISP::H9ISPDevice *this, int a2, unsigned int a3, int a4, int a5)
{
  unsigned __int8 v6[8];
  int v7;
  int v8;
  int v9;

  *(_QWORD *)v6 = 0x30500000000;
  v7 = a2;
  v8 = a4;
  v9 = a5;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAFWindow(H9ISP::H9ISPDevice *this, int a2, int a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7)
{
  unsigned __int8 v8[8];
  unsigned int v9;
  int v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  *(_QWORD *)v8 = 0x840100000000;
  v9 = a2 & 0x8000FFFF;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAFWindowWeights(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 *a3)
{
  unsigned __int8 v4[8];
  unsigned int v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v4 = 0x840300000000;
  v5 = a2 & 0x8000FFFF;
  v6 = *(_OWORD *)a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v4, 0x1Cu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEMeteringMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x820600000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEWindow(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  unsigned __int8 v7[8];
  unsigned int v8;
  int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  *(_QWORD *)v7 = 0x820000000000;
  v8 = a2 & 0x8000FFFF;
  v9 = 0;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAWBWindow(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  unsigned __int8 v7[8];
  int v8;
  int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  *(_QWORD *)v7 = 0x830300000000;
  v8 = a2;
  v9 = 1;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableAFPeakPrediction(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x840500000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetISPDGain(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x22000000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetSensorDGain(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x21F00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMaxIntegrationTime(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x20E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetMaxIntegrationTime(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x20D00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetMinIntegrationTime(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x22A00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetGainCap(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x20C00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMinimumGainCap(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x22E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEMaxGainCapWithExposureUpdate(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x23000000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEGainCapOffExposureUpdate(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x23200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAWB1stGainManual(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6, __int16 a7)
{
  unsigned __int8 v8[8];
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *(_QWORD *)v8 = 0x31100000000;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WORD1(v12) = a6;
  WORD2(v12) = a7;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetGainCap(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x20B00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  *a3 = WORD2(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetMinimumGainCap(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x22D00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  *a3 = WORD2(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetAEMaxGainCapWithExposureUpdate(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x22F00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetAEGainCapOffExposureUpdate(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x23100000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAEStability(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x21A00000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEStability_UnstableToStable(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x22900000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEOutlierClipCount(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x20600000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEConvergenceSpeed(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x21800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEConvergenceSpeed2Way(H9ISP::H9ISPDevice *this, int a2, char a3, char a4)
{
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;
  __int16 v9;

  v5 = 0x24300000000;
  v9 = 0;
  v6 = a2 & 0x8000FFFF;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAPSDistance(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x78200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAPSDistance(H9ISP::H9ISPDevice *this, unsigned int a2, int *a3, int *a4)
{
  uint64_t result;
  int v7;
  unsigned __int8 v8[8];
  uint64_t v9;
  int v10;

  *(_QWORD *)v8 = 0x78300000000;
  v10 = 0;
  v9 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v7 = v10;
    *a3 = HIDWORD(v9);
    *a4 = v7;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAPSPosition(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x78000000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAPSPosition(H9ISP::H9ISPDevice *this, int a2, int *a3, __int16 *a4, __int16 *a5, int *a6, int *a7, int *a8, int *a9, int *a10, int *a11)
{
  uint64_t result;
  int v18;
  int v19;
  int v20;
  _OWORD v21[3];

  memset(v21, 0, 44);
  WORD2(v21[0]) = 1921;
  DWORD2(v21[0]) = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v21, 0x2Cu, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = HIDWORD(v21[0]);
    *a4 = v21[1];
    *a5 = WORD1(v21[1]);
    v18 = DWORD2(v21[1]);
    *a6 = DWORD1(v21[1]);
    *a7 = v18;
    v19 = v21[2];
    *a8 = HIDWORD(v21[1]);
    *a9 = v19;
    v20 = DWORD2(v21[2]);
    *a10 = DWORD1(v21[2]);
    *a11 = v20;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAPSMode(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x78400000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAPSMode(H9ISP::H9ISPDevice *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x78500000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAPSClampingMode(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x79100000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAPSClampingMode(H9ISP::H9ISPDevice *this, unsigned int a2, int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x79200000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAPSBeta(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x78600000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAPSFocusOffset(H9ISP::H9ISPDevice *this, int a2, int a3, unsigned __int8 a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x78700000000;
  v7 = a3;
  v6 = a2;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAPSSearchRange(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x78C00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAPSRawOffset(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6, __int16 a7, int a8, int a9)
{
  uint64_t v10;
  int v11;
  __int16 v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  int v16;

  v10 = 0x78A00000000;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  WORD1(v14) = a6;
  WORD2(v14) = a7;
  v15 = a8;
  v16 = a9;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v10, 0x20u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAPSEFL(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x78800000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAPSActuator(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x78900000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableAPSDelta(H9ISP::H9ISPDevice *this, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x78D00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAPSDeltaEnabled(H9ISP::H9ISPDevice *this, unsigned __int16 a2, BOOL *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x78E00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAPSFieldCalibration(H9ISP::H9ISPDevice *a1, unsigned __int16 a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  unsigned __int8 v6[8];
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v9 = a3[1];
  v4 = a3[3];
  v10 = a3[2];
  v11 = v4;
  *(_QWORD *)v6 = 0x79000000000;
  v7 = a2;
  v12 = *((_DWORD *)a3 + 16);
  v8 = v3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, v6, 0x50u, 0, 0xFFFFFFFF);
}

__n128 H9ISP::H9ISPDevice::RunAPSFieldCalibration(H9ISP::H9ISPDevice *a1, unsigned __int16 a2, uint64_t a3)
{
  __n128 result;
  __int128 v5;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  WORD2(v6[0]) = 1935;
  DWORD2(v6[0]) = a2;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)v6, 0x50u, 0, 0xFFFFFFFF))
  {
    result = *(__n128 *)((char *)&v6[1] + 12);
    v5 = *(_OWORD *)((char *)&v6[3] + 12);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)&v6[2] + 12);
    *(_OWORD *)(a3 + 48) = v5;
    *(_DWORD *)(a3 + 64) = HIDWORD(v6[4]);
    *(_OWORD *)a3 = *(_OWORD *)((char *)v6 + 12);
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetCNRLevel(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA2D00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetCNRLevel(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0xA2E00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetNoiseReductionLevel(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA0B00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetNoiseReductionLevel(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0xA0C00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetMasterSlaveSync(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13800000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMaster(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13A00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFrameSkippingRatio(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13C00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMinimumFrameSkippingRatio(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x14B00000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMasterSlaveAPSFocus(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x841600000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetMasterSlaveContrastFocus(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x841700000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetFocusSlavePos(H9ISP::H9ISPDevice *this, unsigned int a2, int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x841800000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetFocusSlaveDistance(H9ISP::H9ISPDevice *this, unsigned int a2, int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x841900000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetAFSearchPositions(H9ISP::H9ISPDevice *this, int a2, unsigned int a3, unsigned __int8 *a4)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a3 + 16;
  v9 = operator new[]();
  bzero((void *)v9, v8);
  *(_WORD *)(v9 + 4) = 1030;
  *(_DWORD *)(v9 + 8) = a2 & 0x8000FFFF | ((HIWORD(*(_DWORD *)(v9 + 8)) & 0x7FFF) << 16);
  *(_DWORD *)(v9 + 12) = a3;
  memcpy((void *)(v9 + 16), a4, a3);
  v10 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v9, v8, 0, 0xFFFFFFFF);
  MEMORY[0x23B7D8AF0](v9, 0x1000C8077774924);
  return v10;
}

uint64_t H9ISP::H9ISPDevice::SetAFEarlyOutParams(H9ISP::H9ISPDevice *this, int a2, char a3, char a4, char a5, char a6)
{
  uint64_t v7;
  unsigned int v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = 0x40300000000;
  v8 = a2 & 0x8000FFFF;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetScalerSharpening(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA0700000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetCurrentCCT(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x30400000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetManualCCTRange(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v7;
  unsigned __int8 v8[8];
  uint64_t v9;
  unsigned int v10;

  *(_QWORD *)v8 = 0x31300000000;
  v10 = 0;
  v9 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v7 = v10;
    *a3 = HIDWORD(v9);
    *a4 = v7;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetColorCalibrationData(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x80400000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetExposureBias(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3, int a4)
{
  unsigned __int8 v5[8];
  unsigned int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x20400000000;
  v6 = a2 & 0x8000FFFF;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetExposureBias(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x20300000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = WORD2(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableHistogram(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0xA0F00000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetSensorCustomSettings(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3, unsigned __int16 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  uint64_t i;
  _OWORD v8[13];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = 3758097090;
  if (*((_DWORD *)this + 98) > a2 && a3 <= 0x40)
  {
    memset(v8, 0, sizeof(v8));
    WORD2(v8[0]) = 1285;
    DWORD2(v8[0]) = a2;
    WORD6(v8[0]) = a3;
    if (a3)
    {
      for (i = 0; i != a3; ++i)
      {
        *((_WORD *)v8 + i + 7) = a4[i];
        *((_BYTE *)&v8[8] + i + 14) = a5[i];
      }
    }
    return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v8, 0xD0u, 0, 0xFFFFFFFF);
  }
  return v5;
}

uint64_t H9ISP::H9ISPDevice::SetAFLimits(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x70000000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAFLimits(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = 0x70100000000;
  v8 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v8);
    *a4 = HIWORD(v8);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetPreflashParams(H9ISP::H9ISPDevice *this, int a2, char a3, char a4, char a5, char a6)
{
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = 0x22500000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAWBFlashGain(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, unsigned __int16 a5)
{
  unsigned __int8 v6[8];
  int v7;
  __int16 v8;
  __int16 v9;
  int v10;

  *(_QWORD *)v6 = 0x30E00000000;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetToneCurve(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  double v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _WORD __src[257];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  result = 3758097090;
  if (!*((_BYTE *)this + 348))
    return 3758097112;
  if (*((_DWORD *)this + 98) > a2)
  {
    for (i = 0; i != 257; ++i)
    {
      v8 = dbl_235829698[i];
      LODWORD(v3) = vcvtmd_s64_f64(v8);
      v9 = v8 - (double)v3;
      v10 = a3[v3];
      if (v9 == 0.0 || (v11 = a3[v3 + 1], v10 == v11))
        v12 = (double)v10;
      else
        v12 = (1.0 - v9) * (double)v10 + v9 * (double)v11;
      v13 = v12 * 16.0588235;
      v14 = round(v13);
      if (v13 <= 4095.0)
        v15 = v14;
      else
        v15 = 4095.0;
      __src[i] = (int)v15;
    }
    v16 = operator new[]();
    *(_QWORD *)v16 = 0;
    *(_WORD *)(v16 + 4) = 2563;
    *(_DWORD *)(v16 + 8) = a2;
    *(_QWORD *)(v16 + 12) = 0x10100000001;
    memcpy((void *)(v16 + 20), __src, 0x202uLL);
    v17 = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)v16, 0x216u, 0, 0xFFFFFFFF);
    MEMORY[0x23B7D8AF0](v16, 0x1000C8077774924);
    return v17;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableFullResLSC(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xA1100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DisableFullResLSC(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xA1200000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAETarget(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x22400000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAETarget(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x22300000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

double H9ISP::H9ISPDevice::GetLuxAdaptiveSettings(H9ISP::H9ISPDevice *a1, int a2, __int16 a3, _OWORD *a4)
{
  double result;
  _OWORD v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, 44);
  WORD2(v6[0]) = 2582;
  DWORD2(v6[0]) = a2;
  WORD6(v6[0]) = a3;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)v6, 0x2Cu, 0, 0xFFFFFFFF))
  {
    *a4 = *(_OWORD *)((char *)v6 + 14);
    result = *(double *)((char *)&v6[1] + 12);
    *(_OWORD *)((char *)a4 + 14) = *(_OWORD *)((char *)&v6[1] + 12);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetLuxAdaptiveSettings(H9ISP::H9ISPDevice *a1, int a2, __int128 *a3)
{
  __int128 v3;
  unsigned __int8 v5[8];
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v5 = 0xA1500000000;
  v6 = a2;
  v3 = a3[1];
  v7 = *a3;
  v8 = v3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, v5, 0x2Cu, 0, 0xFFFFFFFF);
}

double H9ISP::H9ISPDevice::GetGainAdaptiveSettings(H9ISP::H9ISPDevice *a1, int a2, __int16 a3, uint64_t a4)
{
  double result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  WORD2(v6) = 2613;
  DWORD2(v6) = a2;
  WORD6(v6) = a3;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v6, 0x28u, 0, 0xFFFFFFFF))
  {
    result = *(double *)&v7;
    *(_OWORD *)(a4 + 16) = v7;
    *(_QWORD *)(a4 + 32) = v8;
    *(_WORD *)(a4 + 14) = HIWORD(v6);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetGainAdaptiveSettings(H9ISP::H9ISPDevice *a1, int a2, __int16 a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = 0xA3400000000;
  v6 = a2;
  v7 = a3;
  v8 = *(_WORD *)(a4 + 14);
  v9 = *(_OWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 32);
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v5, 0x28u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableGainAdaptation(H9ISP::H9ISPDevice *a1, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0xA3300000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DisableKnobManualMode(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA1400000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ProcessRawStart(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x10900000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ProcessRawStop(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x10A00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAWBScheme(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x830500000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAWBScheme(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x830600000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetCurrentFocusPosition(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x70300000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetCurrentFocusDacPosition(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x70900000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = WORD2(v6);
  return result;
}

double H9ISP::H9ISPDevice::GetCameraCurrentConfig(H9ISP::H9ISPDevice *a1, int a2, _DWORD *a3, uint64_t a4)
{
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  WORD2(v11) = 261;
  DWORD2(v11) = a2;
  if (!H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v11, 0x84u, 0, 0xFFFFFFFF))
  {
    *a3 = HIDWORD(v11);
    v7 = v15;
    *(_OWORD *)(a4 + 32) = v14;
    *(_OWORD *)(a4 + 48) = v7;
    v8 = v13;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v8;
    *(_DWORD *)(a4 + 112) = v19;
    v9 = v18;
    v10 = v16;
    result = *(double *)&v17;
    *(_OWORD *)(a4 + 80) = v17;
    *(_OWORD *)(a4 + 96) = v9;
    *(_OWORD *)(a4 + 64) = v10;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetHistogramWindow(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  unsigned __int8 v7[8];
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  *(_QWORD *)v7 = 0xA1B00000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAFFocusPosOverride(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x840600000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEMaxFrameRateGainLimit(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x820900000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAEMaxFrameRateGainLimit(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x820A00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::BinningCompensationStart(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC20000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::BinningCompensationStop(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC20100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DRCStart(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC0000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DRCStop(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC0100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SNFStart(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC40000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SNFStop(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC40100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetSNFParams(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC40200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetSNFParams(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0xC40300000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetErrorCount(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3, unsigned int *a4)
{
  uint64_t result;
  unsigned __int8 v6[8];
  int v7;
  int v8;
  unsigned int v9;

  *(_QWORD *)v6 = 0x12100000000;
  v9 = 0;
  v7 = a2;
  v8 = a3;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t H9ISP::H9ISPDevice::OverrideAbsoluteColorCal(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6, char a7)
{
  unsigned __int8 v8[8];
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *(_QWORD *)v8 = 0x80900000000;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WORD1(v12) = a6;
  BYTE4(v12) = a7;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetLuxTableMode(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0xA1700000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::AEUpdateSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x22600000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::AEUpdateResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x22700000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ALSSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0xA2B00000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ALSResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0xA2C00000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::BLCSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x50900000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::BLCResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x50A00000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::TestPatternConfig(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x50300000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableAEMatrixMetadata(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x820B00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableALS(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA1C00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DisableALS(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xA1D00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetColorCalData(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6)
{
  uint64_t result;
  unsigned __int8 v11[8];
  uint64_t v12;
  int v13;

  *(_QWORD *)v11 = 0x80500000000;
  v13 = 0;
  v12 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v11, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v12);
    *a4 = HIWORD(v12);
    *a5 = v13;
    *a6 = HIWORD(v13);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetBinningGainLuxThresholds(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x820C00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAFSoftLanding(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, int a5, int a6)
{
  unsigned __int8 v7[8];
  int v8;
  __int16 v9;
  __int16 v10;
  int v11;
  int v12;

  *(_QWORD *)v7 = 0x40C00000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAFWindowFDConfig(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x840400000000;
  v6 = a2 & 0x8000FFFF;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAFWindowFloatConfig(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0x841200000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableAEGainConvergenceNormalization(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x820F00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableTemporalCoherenceFilter(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x830E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEFDSceneMeteringConfig(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11, __int16 a12, __int16 a13, __int16 a14)
{
  unsigned __int8 v15[8];
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;

  *(_QWORD *)v15 = 0x820E00000000;
  v16 = a2 & 0x8000FFFF;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a9;
  v24 = a10;
  v25 = a11;
  v26 = a12;
  v27 = a13;
  v28 = a14;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v15, 0x24u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StartToneCurveAdaptation(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC30000000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::StopToneCurveAdaptation(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xC30100000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetToneCurveAdaptationParams(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6, __int16 a7)
{
  unsigned __int8 v8[8];
  int v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;

  *(_QWORD *)v8 = 0xC30200000000;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WORD1(v12) = a6;
  WORD2(v12) = a7;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v8, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::AWBUpdateSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x30F00000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::AWBUpdateResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0x31000000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::LuxAdaptiveSettingSuspend(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA2400000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::LuxAdaptiveSettingResume(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA2500000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ToneCurveAdaptationSuspend(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0xC30400000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ToneCurveAdaptationResume(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = 0xC30500000000;
  v4 = a2 & 0x8000FFFF;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetDeviceOrientation(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0xD0700000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableContextSwitching(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x810200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetContextSwitchMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x810600000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DisableContextSwitching(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x810300000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetSensorNoiseModelForSensorMode(H9ISP::H9ISPDevice *a1, int a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;

  v14 = 0x810500000000;
  v17 = 0u;
  v15 = a2;
  v16 = a3;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v14, 0x20u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    v12 = DWORD1(v17);
    *a4 = v17;
    *a5 = v12;
    v13 = HIDWORD(v17);
    *a6 = DWORD2(v17);
    *a7 = v13;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetIdealColorCal(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int8 *a7)
{
  uint64_t result;
  unsigned __int8 v13[8];
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)v13 = 0x80700000000;
  v15 = 0;
  v14 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v13, 0x18u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v14);
    *a4 = HIWORD(v14);
    *a5 = v15;
    *a6 = WORD1(v15);
    *a7 = BYTE4(v15);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetIdealColorCal(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  unsigned __int8 v7[8];
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  *(_QWORD *)v7 = 0x80600000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetAbsoluteColorCal(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int8 *a7)
{
  uint64_t result;
  unsigned __int8 v13[8];
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)v13 = 0x80800000000;
  v15 = 0;
  v14 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v13, 0x18u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    *a3 = WORD2(v14);
    *a4 = HIWORD(v14);
    *a5 = v15;
    *a6 = WORD1(v15);
    *a7 = BYTE4(v15);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetISOParamsForSensorMode(H9ISP::H9ISPDevice *a1, int a2, int a3, _QWORD *a4)
{
  uint64_t result;
  unsigned __int8 v6[8];
  int v7;
  int v8;
  uint64_t v9;

  *(_QWORD *)v6 = 0x11D00000000;
  v9 = 0;
  v7 = a2;
  v8 = a3;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(a1, v6, 0x18u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetMIPIFrequency(H9ISP::H9ISPDevice *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  unsigned __int8 v6[8];
  int v7;
  int v8;
  unsigned int v9;

  *(_QWORD *)v6 = 0x11A00000000;
  v8 = a3;
  v9 = 0;
  v7 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetCurrentMIPIFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x11900000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetMIPIFrequencyIndex(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x11B00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetSensorTemperature(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x50600000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetSensorInterfacePixelFormat(H9ISP::H9ISPDevice *this, int a2, char a3, char a4)
{
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  __int16 v9;

  v5 = 0x11500000000;
  v9 = 0;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableSensorSideband(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x50E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::DPCEnable(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xC50000000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetBufferPoolConfiguration(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4, int a5, int a6)
{
  unsigned __int8 v7[8];
  int v8;
  __int16 v9;
  __int16 v10;
  int v11;
  int v12;

  *(_QWORD *)v7 = 0x11700000000;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v7, 0x18u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetLedParms(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x60900000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableNTCStatus(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x60A00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetNTCStatus(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x60800000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::SetDscStreamingMode(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x12E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableFullResCapture(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13100000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableFocus(H9ISP::H9ISPDevice *this, int a2, __int16 a3, __int16 a4)
{
  unsigned __int8 v5[8];
  int v6;
  __int16 v7;
  __int16 v8;
  int v9;

  *(_QWORD *)v5 = 0x70A00000000;
  v9 = 0;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableCFOV(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x81200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableSensorBLCRead(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x51400000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableCNRForStillCapture(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  v4 = 0xA3600000000;
  v5 = a2 & 0x8000FFFF;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableSBS(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13B00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAWBRGBColorspace(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x831D00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableDPM(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x500600000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableDPMAssistedAE(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x24900000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFirmwareRunMode(H9ISP::H9ISPDevice *this, unsigned __int16 a2)
{
  uint64_t v3;
  int v4;

  v3 = 0xE00000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::OverrideFocusGravityZ(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3, __int16 a4)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  v5 = 0x70B00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::PrepareCommand(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13500000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetOisBoostMode(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x74B00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetOisBoostMode(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x74C00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnableAvEvMinus(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13400000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::CreateSensorConfig(H9ISP::H9ISPDevice *this, int a2, unsigned __int8 a3, __int16 a4, unsigned __int16 a5, __int16 a6, __int16 a7)
{
  uint64_t result;
  unsigned __int8 v9[8];
  int v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;

  *(_QWORD *)v9 = 0x51000000000;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  WORD1(v13) = a6;
  WORD2(v13) = a7;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v9, 0x18u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
  {
    H9ISP::H9ISPDevice::InitDeviceConfigsCache(this);
    return H9ISP::H9ISPDevice::CacheDeviceConfigs(this);
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::ConfigureStillImageIntermediateTapDMA(H9ISP::H9ISPDevice *a1, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0xB0E00000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetNumberOfMipiFrequencies(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x13300000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetDPCCount(H9ISP::H9ISPDevice *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  unsigned __int8 v6[8];
  int v7;
  int v8;
  unsigned int v9;

  *(_QWORD *)v6 = 0x51700000000;
  v8 = a3;
  v9 = 0;
  v7 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t H9ISP::H9ISPDevice::CaptureNow(H9ISP::H9ISPDevice *this, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13200000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::AttachOldRawToPreview(H9ISP::H9ISPDevice *this, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x12B00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetAEBracketingWaitForFocusParams(H9ISP::H9ISPDevice *this, int a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x24200000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableMultiBit(H9ISP::H9ISPDevice *this, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0x13F00000000;
  v4 = 0;
  BYTE4(v4) = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetRPCEnableFlag(H9ISP::H9ISPDevice *this, int a2)
{
  uint64_t v3;
  int v4;

  v3 = 0x1300000000;
  v4 = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0xCu, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableCameraControl(H9ISP::H9ISPDevice *this, unsigned __int16 a2, int a3, int a4)
{
  unsigned __int8 v5[8];
  int v6;
  int v7;
  int v8;

  *(_QWORD *)v5 = 0x14100000000;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, v5, 0x14u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetHighSpeedOutputLevel(H9ISP::H9ISPDevice *this, unsigned __int16 a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x51A00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetDistortionData(H9ISP::H9ISPDevice *a1, unsigned __int16 a2, void *a3)
{
  bzero(a3, 0xF78uLL);
  *((_DWORD *)a3 + 2) = a2;
  *((_WORD *)a3 + 2) = 28674;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)a3, 0xF78u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetSlaveProcessingConfig(H9ISP::H9ISPDevice *a1, unsigned __int16 a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x13E00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetChargePumpFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned __int16 a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x14600000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetCurrentChargePumpFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x14400000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetChargePumpFrequencyForIndex(H9ISP::H9ISPDevice *this, int a2, int a3, unsigned int *a4)
{
  uint64_t result;
  unsigned __int8 v6[8];
  int v7;
  int v8;
  unsigned int v9;

  *(_QWORD *)v6 = 0x14500000000;
  v8 = a3;
  v9 = 0;
  v7 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, v6, 0x14u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a4 = v9;
  return result;
}

uint64_t H9ISP::H9ISPDevice::GetChargePumpFrequencyCount(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x14300000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIDWORD(v6);
  return result;
}

uint64_t H9ISP::H9ISPDevice::EnablePDEOutput(H9ISP::H9ISPDevice *this, unsigned __int16 a2, char a3, char a4)
{
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  __int16 v9;

  v5 = 0x500300000000;
  v9 = 0;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::SetFocusMultiCamBehavior(H9ISP::H9ISPDevice *a1, unsigned __int16 a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x841A00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableFOD(H9ISP::H9ISPDevice *this, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x690000000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::EnableSqrtToneCurve(H9ISP::H9ISPDevice *this, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xA3900000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::GetRawBufferCount(H9ISP::H9ISPDevice *this, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 0x14C00000000;
  v6 = a2;
  result = H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v5, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = BYTE4(v6);
  return result;
}

H9ISP::H9ISPDevice *H9ISP::H9ISPDevice::H9ISPDevice(H9ISP::H9ISPDevice *this, H9ISP::H9ISPDeviceController *a2, io_registry_entry_t a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  __CFDictionary **v11;
  const __CFData *v12;
  const __CFData *v13;
  const UInt8 *BytePtr;
  int v15;
  int v16;
  int *v17;
  int v18;
  pthread_mutexattr_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 348) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 86) = 0;
  v5 = (unsigned int *)((char *)this + 392);
  *((_DWORD *)this + 98) = 0;
  *((_DWORD *)this + 22) = a3;
  *(_QWORD *)this = 0;
  v6 = &byte_254291575;
  byte_254291598 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("LsInterpMode"), CFSTR("com.apple.coremedia"), (const __CFString *)1);
  dword_25429159C = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("LsBypassVerify"), CFSTR("com.apple.coremedia"), 0);
  byte_2542915A0 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("LsEnableGreenAvg"), CFSTR("com.apple.coremedia"), 0) != 0;
  v7 = 0;
  byte_2542915A1 = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("RadialGainEnable"), CFSTR("com.apple.coremedia"), (const __CFString *)1) != 0;
  do
  {
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("LsAdjustEnableCam%d"), v7);
    *(_DWORD *)(v6 - 5) = H9ISP::H9ISPGetCFPreferenceNumber(v8, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    CFRelease(v8);
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("LsAdjustInvertCam%d"), v7);
    *(v6 - 1) = H9ISP::H9ISPGetCFPreferenceNumber(v9, CFSTR("com.apple.coremedia"), 0) != 0;
    CFRelease(v9);
    v10 = CFStringCreateWithFormat(0, 0, CFSTR("LsIdealPctCam%d"), v7);
    *v6 = H9ISP::H9ISPGetCFPreferenceNumber(v10, CFSTR("com.apple.coremedia"), (const __CFString *)0xFFFFFFFFLL);
    v6 += 8;
    CFRelease(v10);
    ++v7;
  }
  while (v7 != 5);
  *((_QWORD *)this + 3) = 0;
  H9ISP::InitSupportedMetadataPropertiesDict((CFMutableDictionaryRef *)this + 3, v11);
  v12 = (const __CFData *)IORegistryEntrySearchCFProperty(a3, "IOService", CFSTR("sensor-type"), (CFAllocatorRef)*MEMORY[0x24BDBD240], 3u);
  if (v12)
  {
    v13 = v12;
    BytePtr = CFDataGetBytePtr(v12);
    if (BytePtr)
      v15 = *BytePtr;
    else
      v15 = -1;
    *((_DWORD *)this + 12) = v15;
    CFRelease(v13);
    v16 = *((_DWORD *)this + 12);
  }
  else
  {
    v16 = -1;
    *((_DWORD *)this + 12) = -1;
  }
  v17 = &h9ispPlatformInfo;
  *((_QWORD *)this + 7) = &h9ispPlatformInfo;
  v18 = 15;
  while (*v17 != v16)
  {
    v17 += 104;
    if (!--v18)
    {
      printf("H9ISPDevice - Did not find platform-info for platform:%d. Defaulting to 0.\n", v16);
      goto LABEL_14;
    }
  }
  *((_QWORD *)this + 7) = v17;
LABEL_14:
  pthread_mutexattr_init(&v20);
  pthread_mutexattr_settype(&v20, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 104), &v20);
  pthread_mutexattr_destroy(&v20);
  H9ISP::H9ISPDevice::EnableDeviceMessages((uint64_t)this);
  H9ISP::H9ISPDevice::InitDeviceConfigsCache(this);
  *((_DWORD *)this + 59) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_DWORD *)this + 77) = 0;
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 320) = 0;
  *((_BYTE *)this + 328) = 0;
  *((_BYTE *)this + 336) = 0;
  if (H9ISP::H9ISPDevice::ISP_IsPowered(this)
    && !H9ISP::H9ISPDevice::ISP_GetNumChannels(this, v5))
  {
    H9ISP::H9ISPDevice::CacheDeviceConfigs(this);
  }
  return this;
}

uint64_t H9ISP::H9ISPDevice::EnableDeviceMessages(uint64_t this)
{
  if (!*(_DWORD *)(this + 92))
    return IOServiceAddInterestNotification(*(IONotificationPortRef *)(*(_QWORD *)(this + 16) + 16), *(_DWORD *)(this + 88), "IOGeneralInterest", (IOServiceInterestCallback)H9ISP::H9ISPDeviceServiceInterestCallback, (void *)this, (io_object_t *)(this + 92));
  return this;
}

uint64_t H9ISP::H9ISPDevice::ISP_IsPowered(H9ISP::H9ISPDevice *this)
{
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;

  output = 0;
  outputCnt = 1;
  result = *((unsigned int *)this + 24);
  if ((_DWORD)result)
    return !IOConnectCallScalarMethod(result, 2u, 0, 0, &output, &outputCnt) && output == 1;
  return result;
}

void H9ISP::H9ISPDevice::~H9ISPDevice(H9ISP::H9ISPDevice *this)
{
  io_object_t v2;
  H9ISP::H9ISPMotionManager *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  int v16;
  _QWORD block[5];
  int v18;

  if (*((_DWORD *)this + 24))
    H9ISP::H9ISPDevice::H9ISPDeviceClose(this);
  v2 = *((_DWORD *)this + 23);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)this + 23) = 0;
  }
  v3 = (H9ISP::H9ISPMotionManager *)*((_QWORD *)this + 4);
  if (v3)
  {
    H9ISP::H9ISPMotionManager::~H9ISPMotionManager(v3);
    MEMORY[0x23B7D8B08]();
    *((_QWORD *)this + 4) = 0;
  }
  H9ISP::H9ISPDevice::InitDeviceConfigsCache(this);
  v4 = 0;
  v5 = MEMORY[0x24BDAC760];
  do
  {
    if (*((_BYTE *)this + v4 + 236))
    {
      v6 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v6)
      {
        block[0] = v5;
        block[1] = 0x40000000;
        block[2] = ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke;
        block[3] = &__block_descriptor_tmp_14;
        block[4] = this;
        v18 = v4;
        dispatch_sync(v6, block);
      }
    }
    if (*((_BYTE *)this + v4 + 308))
    {
      v7 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
      if (v7)
      {
        v15[0] = v5;
        v15[1] = 0x40000000;
        v15[2] = ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_2;
        v15[3] = &__block_descriptor_tmp_15;
        v15[4] = this;
        v16 = v4;
        dispatch_sync(v7, v15);
      }
    }
    ++v4;
  }
  while (v4 != 5);
  if (*((_BYTE *)this + 320))
  {
    v8 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
    if (v8)
    {
      v14[0] = v5;
      v14[1] = 0x40000000;
      v14[2] = ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_16;
      v14[4] = this;
      dispatch_sync(v8, v14);
    }
  }
  if (*((_BYTE *)this + 328))
  {
    v9 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
    if (v9)
    {
      v13[0] = v5;
      v13[1] = 0x40000000;
      v13[2] = ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_4;
      v13[3] = &__block_descriptor_tmp_17;
      v13[4] = this;
      dispatch_sync(v9, v13);
    }
  }
  if (*((_BYTE *)this + 336))
  {
    v10 = *(NSObject **)(*((_QWORD *)this + 2) + 72);
    if (v10)
    {
      v12[0] = v5;
      v12[1] = 0x40000000;
      v12[2] = ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_5;
      v12[3] = &__block_descriptor_tmp_18;
      v12[4] = this;
      dispatch_sync(v10, v12);
    }
  }
  v11 = (const void *)*((_QWORD *)this + 3);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 3) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 104));
}

uint64_t H9ISP::H9ISPDevice::H9ISPDeviceClose(H9ISP::H9ISPDevice *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  io_connect_t v4;

  v2 = (pthread_mutex_t *)((char *)this + 104);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 104));
  v3 = IOConnectCallScalarMethod(*((_DWORD *)this + 24), 1u, 0, 0, 0, 0);
  v4 = *((_DWORD *)this + 24);
  if (v4)
  {
    IOServiceClose(v4);
    *((_DWORD *)this + 24) = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v3 = 3758097101;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t H9ISP::H9ISPDevice::DisableDeviceMessages(H9ISP::H9ISPDevice *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 23);
  if ((_DWORD)result)
  {
    result = IOObjectRelease(result);
    *((_DWORD *)this + 23) = 0;
  }
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  result = notify_cancel(*(_DWORD *)(v2 + 4 * *(unsigned int *)(a1 + 40) + 216));
  *(_BYTE *)(v2 + *(unsigned int *)(a1 + 40) + 236) = 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  result = notify_cancel(*(_DWORD *)(v2 + 4 * *(unsigned int *)(a1 + 40) + 288));
  *(_BYTE *)(v2 + *(unsigned int *)(a1 + 40) + 308) = 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_cancel(*(_DWORD *)(v1 + 316));
  *(_BYTE *)(v1 + 320) = 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_cancel(*(_DWORD *)(v1 + 324));
  *(_BYTE *)(v1 + 328) = 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDeviceD2Ev_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_cancel(*(_DWORD *)(v1 + 332));
  *(_BYTE *)(v1 + 336) = 0;
  return result;
}

_QWORD *H9ISP::H9ISPDevice::RegisterDeviceMessageNotificationProc(_QWORD *this, int (*a2)(H9ISP::H9ISPDevice *, unsigned int, void *, void *), void *a3)
{
  *this = a2;
  this[1] = a3;
  return this;
}

uint64_t H9ISP::H9ISPDeviceServiceInterestCallback(uint64_t this, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*(_QWORD *)this)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))this)(this, a3, a4, *(_QWORD *)(this + 8));
  return this;
}

uint64_t H9ISP::H9ISPDevice::H9ISPDeviceOpen(H9ISP::H9ISPDevice *this, int (*a2)(H9ISP::H9ISPDevice *, unsigned int, void *, void *), void *a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unsigned int v8;
  mach_port_t v9;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v6 = (pthread_mutex_t *)((char *)this + 104);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 104));
  if (*((_DWORD *)this + 24))
  {
    pthread_mutex_unlock(v6);
    return 3758097093;
  }
  else
  {
    v8 = IOServiceOpen(*((_DWORD *)this + 22), *MEMORY[0x24BDAEC58], 0x2Au, (io_connect_t *)this + 24);
    v9 = *((_DWORD *)this + 24);
    if (v9)
      v7 = v8;
    else
      v7 = 3758097084;
    if (!(_DWORD)v7)
    {
      v11[0] = 0;
      v7 = IOConnectCallScalarMethod(v9, 0, v11, 1u, 0, 0);
      if (!(_DWORD)v7)
      {
        *(_QWORD *)this = a2;
        *((_QWORD *)this + 1) = a3;
        H9ISP::H9ISPDevice::ISP_GetVersion((uint64_t)this, (_DWORD *)this + 16);
      }
    }
    pthread_mutex_unlock(v6);
  }
  return v7;
}

uint64_t H9ISP::H9ISPDevice::ISP_GetVersion(uint64_t a1, _DWORD *a2)
{
  mach_port_t v2;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;

  v2 = *(_DWORD *)(a1 + 96);
  if (!v2)
    return 3758097084;
  output = 0;
  outputCnt = 1;
  result = IOConnectCallScalarMethod(v2, 0x25u, 0, 0, &output, &outputCnt);
  if (!(_DWORD)result)
    *a2 = output;
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_ForgetFirmware(H9ISP::H9ISPDevice *this)
{
  mach_port_t v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  result = IOConnectCallScalarMethod(v2, 6u, 0, 0, 0, 0);
  if (!(_DWORD)result)
  {
    H9ISP::H9ISPDevice::InitDeviceConfigsCache(this);
    return 0;
  }
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_SendBuffers(uint64_t a1, const void *a2, unsigned int a3, mach_port_t a4)
{
  mach_port_t v8;
  uint64_t v9;
  uint64_t reference;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v8 = *(_DWORD *)(a1 + 96);
  if (v8)
  {
    v12 = 0u;
    v9 = IOConnectCallAsyncMethod(v8, 3u, a4, &reference, 8u, 0, 0, a2, 40 * a3, 0, 0, 0, 0);
  }
  else
  {
    v9 = 3758097084;
  }
  kdebug_trace();
  return v9;
}

uint64_t H9ISP::H9ISPDevice::ISP_DetectFaces(uint64_t a1, void *inputStruct)
{
  mach_port_t v2;

  v2 = *(_DWORD *)(a1 + 96);
  if (v2)
    return IOConnectCallStructMethod(v2, 0x16u, inputStruct, 0x10uLL, 0, 0);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::ISP_OfflineDRC(uint64_t a1, void *inputStruct)
{
  mach_port_t v2;

  v2 = *(_DWORD *)(a1 + 96);
  if (v2)
    return IOConnectCallStructMethod(v2, 0x17u, inputStruct, 0x4CuLL, 0, 0);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::ISP_FlushInactiveDARTMappings(H9ISP::H9ISPDevice *this)
{
  mach_port_t v1;

  v1 = *((_DWORD *)this + 24);
  if (v1)
    return IOConnectCallScalarMethod(v1, 0x24u, 0, 0, 0, 0);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::ISP_ProcessRawImagePrepare(uint64_t a1, void *inputStruct)
{
  mach_port_t v2;

  v2 = *(_DWORD *)(a1 + 96);
  if (v2)
    return IOConnectCallStructMethod(v2, 0xFu, inputStruct, 0x34uLL, 0, 0);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::ISP_ProcessRawImageGo(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x10u, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_PowerOnCamera(mach_port_t *this)
{
  uint64_t v2;
  const __CFAllocator *v3;
  const __CFURL *v4;
  const __CFURL *v5;
  __CFReadStream *v6;
  __CFReadStream *v7;
  CFPropertyListRef v8;
  CFStringRef v9;
  CFStringRef v10;
  CFTypeID v11;
  const __CFArray *Value;
  const __CFArray *v13;
  CFIndex v14;
  const __CFDictionary *ValueAtIndex;
  const __CFData *v16;
  const __CFData *v17;
  int Length;
  kern_return_t v19;
  const __CFData *v20;
  const __CFData *v21;
  int v22;
  kern_return_t v23;
  int v24;
  kern_return_t v25;
  const char *v26;
  FILE *v27;
  FILE *v28;
  FILE *v29;
  unsigned __int8 *v30;
  void *v31;
  size_t v32;
  unint64_t *v33;
  H9ISP::H9ISPDevice *v34;
  const char *v35;
  kern_return_t v36;
  uint64_t v37;
  int NumChannels;
  uint64_t ModuleParams;
  __CFError *v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  const void *v44;
  size_t v45;
  FILE *v46;
  FILE *v47;
  unsigned __int8 *v48;
  void *v49;
  size_t v50;
  char *v51;
  unsigned int *v52;
  _BOOL4 v53;
  char v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  char v63;
  int v64;
  unsigned int *v65;
  double v66;
  uint64_t v67;
  H9ISP::H9ISPDevice *v68;
  H9ISP::H9ISPMotionManager *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  H9ISP::H9ISPDevice *v73;
  unint64_t v74;
  const char **v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  const char *v80;
  const char *v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  NSObject *v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  FILE *v90;
  H9ISP::H9ISPDevice *v91;
  char *v92;
  const char *v93;
  int v94;
  char *v95;
  int v96;
  char v97;
  char *v98;
  char *v99;
  unsigned int v100;
  char *v101;
  int v102;
  int v103;
  const char *v104;
  mach_port_t v105;
  unsigned int v107;
  uint64_t v108;
  unsigned __int8 v109;
  int v110;
  _BOOL4 v111;
  unsigned int *v112;
  uint64_t v113;
  int v114;
  unsigned __int16 *CommandInSetfile;
  char v116;
  H9ISP::H9ISPDevice *v117;
  _QWORD v118[5];
  _QWORD v119[5];
  _QWORD v120[5];
  _QWORD block[5];
  int v122;
  _QWORD v123[5];
  int v124;
  Bytef *v125;
  unsigned __int8 *v126;
  char __str[40];
  CFErrorRef error[111];
  char __filename[256];
  CFPropertyListFormat format[2];
  uint64_t v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  int v134;
  uint64_t v135;
  _BYTE v136[908];
  unsigned int v137;
  uint64_t input;
  unint64_t v139;
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v125 = 0;
  v126 = 0;
  v2 = 3758097084;
  v117 = (H9ISP::H9ISPDevice *)this;
  if (this[24])
  {
    if ((H9ISP::H9ISPDevice::ISP_IsPowered((H9ISP::H9ISPDevice *)this) & 1) == 0 && *((_BYTE *)this + 348))
      H9ISP::H9ISPDevice::InitDeviceConfigsCache((H9ISP::H9ISPDevice *)this);
    v2 = IOConnectCallScalarMethod(this[24], 8u, 0, 0, 0, 0);
    if ((_DWORD)v2 == -536870172)
    {
      v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("/usr/local/share/firmware/isp/ISPUnitInfo.plist"), kCFURLPOSIXPathStyle, 0);
      if (v4)
      {
        v5 = v4;
        v6 = CFReadStreamCreateWithFile(v3, v4);
        if (v6)
        {
          v7 = v6;
          if (CFReadStreamOpen(v6) == 1)
          {
            fwrite("Parsing ISPUnitInfo.plist \n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
            format[0] = 0;
            error[0] = 0;
            v8 = CFPropertyListCreateWithStream(v3, v7, 0, 0, format, error);
            if (error[0])
            {
              puts("Failure loading override ISPUnitInfo property list : CFPropertyListCreateWithStream failed ");
              v9 = CFErrorCopyDescription(error[0]);
              v10 = v9;
              if (v9)
              {
                CFShow(v9);
                CFRelease(v10);
              }
            }
            CFReadStreamClose(v7);
          }
          else
          {
            v8 = 0;
          }
          CFRelease(v7);
          CFRelease(v5);
          if (v8)
          {
            v11 = CFGetTypeID(v8);
            if (v11 == CFDictionaryGetTypeID())
            {
              Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("ChannelArray"));
              v13 = Value;
              if (Value && CFArrayGetCount(Value) >= 1)
              {
                v14 = 0;
                do
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v14);
                  if (ValueAtIndex)
                  {
                    v16 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, CFSTR("NVM"));
                    v17 = v16;
                    if (v16)
                    {
                      Length = CFDataGetLength(v16);
                      printf("sending camera channel %d over-ride NVM bytes to kernel (%d bytes)\n", v14, Length);
                      format[0] = (CFPropertyListFormat)CFDataGetBytePtr(v17);
                      format[1] = CFDataGetLength(v17);
                      v131 = v14;
                      v19 = IOConnectCallScalarMethod(*((_DWORD *)v117 + 24), 0x19u, (const uint64_t *)format, 3u, 0, 0);
                      if (v19)
                        printf("error sending camera channel %d over-ride NVM bytes to kernel: 0x%08X\n", v14, v19);
                    }
                  }
                  ++v14;
                }
                while (CFArrayGetCount(v13) > v14);
              }
              v20 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("BackCameraNVM"));
              v21 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("FrontCameraNVM"));
              if (v20)
              {
                v22 = CFDataGetLength(v20);
                printf("sending camera channel 0 over-ride NVM bytes to kernel (%d bytes)\n", v22);
                format[0] = (CFPropertyListFormat)CFDataGetBytePtr(v20);
                format[1] = CFDataGetLength(v20);
                v131 = 0;
                v23 = IOConnectCallScalarMethod(*((_DWORD *)v117 + 24), 0x19u, (const uint64_t *)format, 3u, 0, 0);
                if (v23)
                  printf("error sending camera channel 0 over-ride NVM bytes to kernel: 0x%08X\n", v23);
              }
              if (v21)
              {
                v24 = CFDataGetLength(v21);
                printf("sending camera channel 1 over-ride NVM bytes to kernel (%d bytes)\n", v24);
                format[0] = (CFPropertyListFormat)CFDataGetBytePtr(v21);
                format[1] = CFDataGetLength(v21);
                v131 = 1;
                v25 = IOConnectCallScalarMethod(*((_DWORD *)v117 + 24), 0x19u, (const uint64_t *)format, 3u, 0, 0);
                if (v25)
                  printf("error sending camera channel 1 over-ride NVM bytes to kernel: 0x%08X\n", v25);
              }
              CFRelease(v8);
            }
          }
        }
        else
        {
          CFRelease(v5);
        }
      }
      if (*((_DWORD *)v117 + 16) == 7)
      {
        v26 = "/System/Library/PrivateFrameworks/H9ISPServices.framework/adc-thaos.bin.gz";
      }
      else if (**((_DWORD **)v117 + 7) == 144)
      {
        v26 = "/System/Library/PrivateFrameworks/H9ISPServices.framework/adc-hephaestus.bin.gz";
      }
      else
      {
        v26 = "/System/Library/PrivateFrameworks/H9ISPServices.framework/adc-dionysus.bin.gz";
      }
      v27 = fopen(v26, "rb");
      v28 = fopen("/usr/local/share/firmware/isp/h9_isp_fw.bin", "rb");
      if (v28)
      {
        puts("Using ISPCPU firmware override file");
        v29 = v28;
        if (v27)
        {
          fclose(v27);
          v29 = v28;
        }
      }
      else
      {
        v29 = v27;
        if (!v27)
        {
          perror("error loading ISPCPU firmware ");
          goto LABEL_47;
        }
      }
      fseeko(v29, 0, 2);
      v30 = (unsigned __int8 *)ftello(v29);
      fseeko(v29, 0, 0);
      v31 = (void *)operator new[]();
      v32 = fread(v31, 1uLL, (size_t)v30, v29);
      fclose(v29);
      if ((unsigned __int8 *)v32 == v30)
      {
        v34 = v117;
        if (v28)
        {
          v125 = (Bytef *)v31;
          v126 = v30;
LABEL_48:
          format[0] = (CFPropertyListFormat)v125;
          format[1] = (CFPropertyListFormat)v126;
          v131 = *((unsigned int *)v34 + 12);
          v36 = IOConnectCallScalarMethod(*((_DWORD *)v34 + 24), 4u, (const uint64_t *)format, 3u, 0, 0);
          if (v36)
            printf("error: LoadFirmware returned 0x%08x \n", v36);
          if (v125)
          {
            MEMORY[0x23B7D8AF0](v125, 0x1000C8077774924);
            v125 = 0;
          }
          v2 = IOConnectCallScalarMethod(*((_DWORD *)v117 + 24), 8u, 0, 0, 0, 0);
          this = (mach_port_t *)v117;
          goto LABEL_53;
        }
        if (!H9ISP::H9ISPInflateFirmwareBuffer((Bytef *)v31, (unint64_t)v30, &v125, &v126, v33)
          && v125)
        {
          goto LABEL_46;
        }
        v35 = "error: corrupt firmware image ";
      }
      else
      {
        v35 = "could not read ISPCPU Firmware file";
      }
      puts(v35);
LABEL_46:
      MEMORY[0x23B7D8AF0](v31, 0x1000C8077774924);
LABEL_47:
      v34 = v117;
      goto LABEL_48;
    }
  }
LABEL_53:
  v113 = v2;
  if (!H9ISP::H9ISPDevice::ISP_IsPowered((H9ISP::H9ISPDevice *)this))
    goto LABEL_175;
  v37 = (uint64_t)v117;
  v112 = (unsigned int *)((char *)v117 + 392);
  if (!*((_DWORD *)v117 + 98))
  {
    NumChannels = H9ISP::H9ISPDevice::ISP_GetNumChannels(v117, v112);
    v37 = (uint64_t)v117;
    if (NumChannels)
      printf("ISP_PowerOnCamera - ISP_GetNumChannels failed with 0x%08x\n", NumChannels);
  }
  ModuleParams = *(unsigned int *)(v37 + 96);
  if ((_DWORD)ModuleParams)
  {
    *(int64x2_t *)format = vdupq_n_s64(1uLL);
    ModuleParams = IOConnectCallScalarMethod(ModuleParams, 0x22u, (const uint64_t *)format, 2u, 0, 0);
    v37 = (uint64_t)v117;
  }
  if (*v112)
  {
    v40 = 0;
    v41 = &byte_254291575;
    do
    {
      bzero(format, 0x450uLL);
      ModuleParams = H9ISP::H9ISPDevice::ISP_GetModuleParams(v37, v40, format);
      if (BYTE4(format[0]))
        v42 = BYTE4(format[1]) == 0;
      else
        v42 = 0;
      if (!v42)
        goto LABEL_159;
      v43 = operator new();
      H9ISP::H9ISPSetfileSelector::H9ISPSetfileSelector((H9ISP::H9ISPSetfileSelector *)v43, HIWORD(format[0]), WORD1(format[1]), LOWORD(format[1]), *((_DWORD *)v117 + 12), 0, (unsigned __int8 *)&v131 + 4, v137);
      v44 = *(const void **)v43;
      v45 = *(unsigned int *)(v43 + 8);
      sprintf(__filename, "/usr/local/share/firmware/isp/cam%dsetfile.dat", (_DWORD)v40);
      v46 = fopen(__filename, "rb");
      v47 = v46;
      if (v46 || (v47 = fopen((const char *)(v43 + 12), "rb")) != 0)
      {
        fseeko(v47, 0, 2);
        v48 = (unsigned __int8 *)ftello(v47);
        fseeko(v47, 0, 0);
        v49 = (void *)operator new[]();
        v50 = fread(v49, 1uLL, (size_t)v48, v47);
        fclose(v47);
        if ((unsigned __int8 *)v50 == v48)
        {
          if (v46)
            v51 = __filename;
          else
            v51 = (char *)(v43 + 12);
          printf("using sensor setfile from file for camera %d: %s\n", (_DWORD)v40, v51);
LABEL_76:
          CommandInSetfile = (unsigned __int16 *)H9ISP::FindCommandInSetfile((H9ISP *)v49, v48, 49155);
          v52 = H9ISP::FindCommandInSetfile((H9ISP *)v49, v48, 2615);
          if (!v52)
            puts("No ALS2 profile found in Setfile.");
          v53 = 0;
          v54 = 90;
          v55 = 1;
          if (HIWORD(format[0]) > 0x312u)
          {
            if (HIWORD(format[0]) > 0xD55u)
            {
              if (HIWORD(format[0]) <= 0x568Fu)
              {
                if (HIWORD(format[0]) != 3414)
                  goto LABEL_109;
                v53 = 0;
                v114 = 0;
                v110 = 0;
                v54 = 70;
                goto LABEL_120;
              }
              if (HIWORD(format[0]) == 22160 || HIWORD(format[0]) == 38752)
                goto LABEL_96;
              v114 = 0;
              v110 = 0;
              if (HIWORD(format[0]) == 38754)
                goto LABEL_120;
            }
            else
            {
              if (HIWORD(format[0]) > 0x353u)
              {
                if (HIWORD(format[0]) != 852 && HIWORD(format[0]) != 1029)
                {
                  v114 = 0;
                  v110 = 0;
                  if (HIWORD(format[0]) != 1044)
                    goto LABEL_109;
LABEL_120:
                  v111 = v53;
                  if (*(_DWORD *)(v41 - 5) != -1)
                    v55 = *(_DWORD *)(v41 - 5);
                  v56 = *(v41 - 1);
                  if (*v41 != -1)
                    v54 = *v41;
                  v108 = (uint64_t)v52;
                  v109 = v54;
                  v57 = byte_254291598;
                  if (!v55 && byte_254291598 != 2)
                  {
                    printf("H9ISPDEVICE:: lsc adjustment not enabled for %x. lsc enabled = %d\n");
                    goto LABEL_131;
                  }
                  if (v136[884] || dword_25429159C || byte_254291598 == 2)
                  {
                    v60 = H9ISP::FindCommandInSetfile((H9ISP *)v49, v48, 2602);
                    if (CommandInSetfile)
                    {
                      v61 = v60;
                      v62 = v132;
                      v107 = v133;
                      v58 = v110 ^ (v56 != 0);
                      if (v58 == 1)
                        LSCFlipPerModule(&v132, (uint64_t)error);
                      else
                        memcpy(error, v136, 4 * v132 * (unint64_t)v133);
                      LSCComputeFromNVMApple((uint64_t)CommandInSetfile, (uint64_t)error, v62, v107, v57, v109, (uint64_t)&v134, (uint64_t)&v135);
                      if (v61)
                        *((_BYTE *)v61 + 12) = 1;
                      v59 = 0;
                    }
                    else
                    {
                      printf("H9ISPDEVICE:: lsc not run for %x.  pCmdAppleChLSCConfigure = %p\n", HIWORD(format[0]), 0);
                      v58 = v111 ^ (v56 != 0);
                      v59 = 1;
                    }
                  }
                  else
                  {
                    printf("H9ISPDevice: NVM not valid for camera %d sensorId = %x  %d\n");
LABEL_131:
                    v58 = v111 ^ (v56 != 0);
                    v59 = 1;
                    if (v58 == 1 && CommandInSetfile)
                    {
                      LSCFlipApple((uint64_t)CommandInSetfile);
                      v59 = 1;
                      v58 = 1;
                    }
                  }
                  v63 = v114 ^ 1;
                  if (!v108)
                    v63 = 1;
                  if ((v63 & 1) == 0)
                    ALS2RotateApple(v108);
                  v64 = byte_2542915A0;
                  if (byte_2542915A0 && CommandInSetfile)
                    LSCAverageGreenApple(CommandInSetfile);
                  printf("H9ISPDEVICE:: LSC Orientation cam%d, flip = %d, invert = %d, useSetfile = %d, flipSetfile = %d, flipPerModule = %d rotateAls2Profile = %d enableGreenAvg = %d interpMode = %d  idealPct = %d\n", (_DWORD)v40, v58, v56, v59, v111, v110, v114, v64, v57, v109);
                  if (byte_2542915A1 && CommandInSetfile)
                  {
                    v65 = H9ISP::FindCommandInSetfile((H9ISP *)v49, v48, 50180);
                    if (v65)
                      LSCComputeSNFRadialGains((uint64_t)v65, (uint64_t)CommandInSetfile, v66);
                    else
                      printf("H9ISPDEVICE:: snfRadialGains command not in setfile for ch %d\n");
                  }
                  else
                  {
                    printf("H9ISPDEVICE:: snfRadialGains not enabled for ch %d\n");
                  }
                  error[0] = (CFErrorRef)v49;
                  error[1] = (CFErrorRef)v48;
                  error[2] = v40;
                  v67 = IOConnectCallScalarMethod(*((_DWORD *)v117 + 24), 5u, (const uint64_t *)error, 3u, 0, 0);
                  v113 = v67;
                  if ((_DWORD)v67)
                    printf("H9ISPDEVICE:: LoadSetFile returned 0x%08x\n", v67);
                  MEMORY[0x23B7D8AF0](v49, 0x1000C8077774924);
                  goto LABEL_158;
                }
LABEL_96:
                v114 = 0;
LABEL_97:
                v110 = v53;
                goto LABEL_120;
              }
              if (HIWORD(format[0]) == 787)
              {
                v53 = 0;
                v114 = 0;
                v110 = 0;
                v54 = 97;
                goto LABEL_120;
              }
              v114 = 0;
              v110 = 0;
              if (HIWORD(format[0]) == 788)
                goto LABEL_120;
            }
LABEL_109:
            v55 = 0;
            goto LABEL_115;
          }
          if (HIWORD(format[0]) <= 0x228u)
          {
            if (HIWORD(format[0]) > 0x18Fu)
            {
              if (HIWORD(format[0]) == 400)
              {
                v114 = 0;
                v53 = **((_DWORD **)v117 + 7) == 37;
                v54 = 90;
                goto LABEL_97;
              }
              if (HIWORD(format[0]) != 402)
                goto LABEL_109;
            }
            else if (HIWORD(format[0]) != 329)
            {
              if (HIWORD(format[0]) != 356)
                goto LABEL_109;
              v53 = 0;
              v114 = 0;
              v110 = 0;
              v54 = 85;
              goto LABEL_120;
            }
            v55 = 0;
            v53 = 0;
            v114 = 0;
            v110 = 0;
            goto LABEL_120;
          }
          if (HIWORD(format[0]) <= 0x246u)
          {
            if (HIWORD(format[0]) != 553)
            {
              v114 = 0;
              v110 = 0;
              if (HIWORD(format[0]) == 567)
                goto LABEL_120;
              goto LABEL_109;
            }
            v53 = 0;
            v114 = 0;
          }
          else
          {
            if (HIWORD(format[0]) != 583)
            {
              if (HIWORD(format[0]) == 584)
                goto LABEL_96;
              v114 = 0;
              v110 = 0;
              if (HIWORD(format[0]) == 771)
                goto LABEL_120;
              goto LABEL_109;
            }
            if (**((_DWORD **)v117 + 7) != 132)
            {
LABEL_115:
              v53 = 0;
              v114 = 0;
              v110 = 0;
              v54 = 90;
              goto LABEL_120;
            }
            v54 = 90;
            v53 = 1;
            v114 = 1;
          }
          v110 = 1;
          goto LABEL_120;
        }
        puts("could not read sensor SetFile");
        MEMORY[0x23B7D8AF0](v49, 0x1000C8077774924);
      }
      if (v44)
      {
        v49 = (void *)operator new[]();
        memmove(v49, *(const void **)v43, v45);
        v48 = (unsigned __int8 *)v45;
        goto LABEL_76;
      }
LABEL_158:
      ModuleParams = MEMORY[0x23B7D8B08](v43, 0x1050C4060A6220DLL);
LABEL_159:
      v40 = (__CFError *)((char *)v40 + 1);
      v41 += 8;
      v37 = (uint64_t)v117;
    }
    while ((unint64_t)v40 < *v112);
  }
  if (*(_BYTE *)(*(_QWORD *)(v37 + 56) + 408) && !*(_QWORD *)(v37 + 32) && !(_DWORD)v113)
  {
    if (*(_BYTE *)(v37 + 168))
    {
      ModuleParams = puts("ISP_PowerOnCamera - bypassMotionManagerInitialization!");
    }
    else
    {
      v69 = (H9ISP::H9ISPMotionManager *)operator new();
      ModuleParams = H9ISP::H9ISPMotionManager::H9ISPMotionManager(v69, v117);
      *((_QWORD *)v117 + 4) = v69;
    }
LABEL_170:
    v70 = H9ISP::FlickerFrequencyHintForCurrentLocation((H9ISP *)ModuleParams);
    v68 = v117;
    if (*v112)
    {
      v71 = 0;
      v72 = v70 << 16;
      do
      {
        format[0] = 0x821200000000;
        format[1] = __PAIR64__(v72, v71);
        H9ISP::H9ISPDevice::ISP_SendCommand(v68, (unsigned __int8 *)format, 0x10u, 0, 0xFFFFFFFF);
        ++v71;
        v68 = v117;
      }
      while (v71 < *((_DWORD *)v117 + 98));
    }
    goto LABEL_173;
  }
  v68 = (H9ISP::H9ISPDevice *)v37;
  if (!(_DWORD)v113)
    goto LABEL_170;
LABEL_173:
  v73 = v68;
  if (*((_BYTE *)v68 + 348))
    goto LABEL_176;
  H9ISP::H9ISPDevice::CacheDeviceConfigs(v68);
LABEL_175:
  v73 = v117;
LABEL_176:
  if (*((_DWORD *)v73 + 98))
  {
    v74 = 0;
    v75 = (const char **)((char *)v73 + 248);
    v76 = (char *)v73 + 176;
    v77 = 16;
    v78 = MEMORY[0x24BDAC760];
    while (1)
    {
      v79 = *(_DWORD *)(*((_QWORD *)v73 + 7) + v77);
      if (v79 == 1718775412)
        break;
      if (v79 == 1919246706)
      {
        v80 = "com.apple.isp.backcamerapower";
        v81 = "com.apple.isp.backcamerasensorconfig";
        goto LABEL_184;
      }
      if (v79 == 1919251564)
      {
        v80 = "com.apple.isp.backtelecamerapower";
        v81 = "com.apple.isp.backtelecamerasensorconfig";
        goto LABEL_184;
      }
      *(v75 - 9) = 0;
      *v75 = 0;
LABEL_192:
      ++v74;
      v73 = v117;
      ++v75;
      v77 += 80;
      if (v74 >= *((unsigned int *)v117 + 98))
        goto LABEL_193;
    }
    v80 = "com.apple.isp.frontcamerapower";
    v81 = "com.apple.isp.frontcamerasensorconfig";
LABEL_184:
    *(v75 - 9) = v80;
    *v75 = v81;
    if (v76[v74 + 60])
      goto LABEL_245;
    v83 = *(NSObject **)(*((_QWORD *)v117 + 2) + 72);
    if (!v83
      || (v123[0] = v78,
          v123[1] = 0x40000000,
          v123[2] = ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke,
          v123[3] = &__block_descriptor_tmp_69,
          v123[4] = v117,
          v124 = v74,
          dispatch_sync(v83, v123),
          *v75))
    {
LABEL_245:
      if (!v76[v74 + 132])
      {
        v82 = *(NSObject **)(*((_QWORD *)v117 + 2) + 72);
        if (v82)
        {
          block[0] = v78;
          block[1] = 0x40000000;
          block[2] = ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_70;
          block[4] = v117;
          v122 = v74;
          dispatch_sync(v82, block);
        }
      }
    }
    goto LABEL_192;
  }
LABEL_193:
  if (!*((_BYTE *)v73 + 320))
  {
    v84 = *(NSObject **)(*((_QWORD *)v73 + 2) + 72);
    if (v84)
    {
      v120[0] = MEMORY[0x24BDAC760];
      v120[1] = 0x40000000;
      v120[2] = ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_3;
      v120[3] = &__block_descriptor_tmp_71;
      v120[4] = v73;
      dispatch_sync(v84, v120);
    }
  }
  if (!*((_BYTE *)v73 + 328))
  {
    v85 = *(NSObject **)(*((_QWORD *)v73 + 2) + 72);
    if (v85)
    {
      v119[0] = MEMORY[0x24BDAC760];
      v119[1] = 0x40000000;
      v119[2] = ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_4;
      v119[3] = &__block_descriptor_tmp_72;
      v119[4] = v73;
      dispatch_sync(v85, v119);
    }
  }
  if (!*((_BYTE *)v73 + 336))
  {
    v86 = *(NSObject **)(*((_QWORD *)v73 + 2) + 72);
    if (v86)
    {
      v118[0] = MEMORY[0x24BDAC760];
      v118[1] = 0x40000000;
      v118[2] = ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_5;
      v118[3] = &__block_descriptor_tmp_73;
      v118[4] = v73;
      dispatch_sync(v86, v118);
    }
  }
  if (H9ISP::H9ISPDevice::ISP_IsPowered(v73)
    && *((_BYTE *)v117 + 348)
    && !(_DWORD)v113
    && *((_DWORD *)v117 + 98))
  {
    v87 = 0;
    v116 = 0;
    v88 = 0;
    v89 = 0;
    do
    {
      sprintf((char *)format, "/usr/local/share/firmware/isp/cam%dclocks.txt", v87);
      v90 = fopen((const char *)format, "r");
      if (v90)
      {
        printf("Found camera clock override information file for camera channel %d\n", v87);
        v91 = v117;
        while (fgets(__str, 40, v90))
        {
          v92 = strtok(__str, "=");
          if (!v92)
            goto LABEL_222;
          v93 = v92;
          if (!strncmp(v92, "clockdiv", 8uLL))
          {
            v98 = strtok(0, " \n");
            if (!v98)
              goto LABEL_222;
            v88 = strtoul(v98, 0, 0);
            printf("Set clock divider reg to 0x%08X\n", v88);
            v116 = 1;
          }
          else
          {
            if (!strncmp(v93, "property", 8uLL))
            {
              v99 = strtok(0, " :");
              if (v99)
              {
                v100 = strtoul(v99, 0, 0);
                v101 = strtok(0, " \n");
                if (v101)
                {
                  v102 = strtoul(v101, 0, 0);
                  printf("Setting FW property 0x%08x to 0x%08X\n", v100, v102);
                  input = 0x12200000000;
                  v139 = __PAIR64__(v100, v87);
                  v140 = v102;
                  v103 = H9ISP::H9ISPDevice::ISP_SendCommand(v91, (unsigned __int8 *)&input, 0x14u, 0, 0xFFFFFFFF);
                  if (v103)
                    printf("Error setting FW property: 0x%08x\n", v103);
                  v91 = v117;
                  continue;
                }
              }
LABEL_222:
              v104 = "Error parsing camera clock override file";
LABEL_223:
              puts(v104);
              continue;
            }
            v94 = strtoul(v93, 0, 0);
            v95 = strtok(0, " \n");
            if (!v95)
              goto LABEL_222;
            if (v89 > 0x3F)
            {
              v104 = "Error: too many camera sensor register over-rides in file";
              goto LABEL_223;
            }
            v96 = strtoul(v95, 0, 0);
            v97 = v96;
            printf("Set sensor reg 0x%08x to val 0x%08X\n", v94, v96);
            *((_WORD *)error + v89) = v94;
            __filename[v89++] = v97;
          }
        }
        fclose(v90);
        if ((v116 & 1) != 0)
        {
          v105 = *((_DWORD *)v91 + 24);
          if (v105
            && (input = v87, v139 = v88, v91 = v117, !IOConnectCallScalarMethod(v105, 0x1Du, &input, 2u, 0, 0)))
          {
            printf("Successfully set camera %d clock divider over-ride: 0x%08X\n");
          }
          else
          {
            printf("Error: ISP_OverrideSensorClockFrequency returned an error: 0x%08X\n");
          }
        }
        if (!v89)
          goto LABEL_237;
        if (H9ISP::H9ISPDevice::SetSensorCustomSettings(v91, v87, v89, (unsigned __int16 *)error, (unsigned __int8 *)__filename))printf("Error: SetSensorCustomSettings returned an error: 0x%08X\n");
        else
          printf("Successfully sent camera %d sensor register over-ride values for %d registers\n");
      }
      v91 = v117;
LABEL_237:
      ++v87;
    }
    while (v87 < *((unsigned int *)v91 + 98));
  }
  kdebug_trace();
  return v113;
}

void sub_2358038A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x10A0C40DE8F937BLL);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::H9ISPDevice::ISP_EnableFastISPClock(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x22u, input, 2u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_GetModuleParams(uint64_t a1, unsigned int a2, void *outputStruct)
{
  mach_port_t v3;
  size_t v5;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v5 = 1104;
  v3 = *(_DWORD *)(a1 + 96);
  if (!v3)
    return 3758097084;
  input[0] = a2;
  return IOConnectCallMethod(v3, 0xBu, input, 1u, 0, 0, 0, 0, outputStruct, &v5);
}

uint64_t ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  result = notify_register_check(*(const char **)(v2 + 8 * *(unsigned int *)(a1 + 40) + 176), (int *)(v2 + 4 * *(unsigned int *)(a1 + 40) + 216));
  *(_BYTE *)(v2 + *(unsigned int *)(a1 + 40) + 236) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  result = notify_register_check(*(const char **)(v2 + 8 * *(unsigned int *)(a1 + 40) + 248), (int *)(v2 + 4 * *(unsigned int *)(a1 + 40) + 288));
  *(_BYTE *)(v2 + *(unsigned int *)(a1 + 40) + 308) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_register_check("com.apple.isp.cameratorch", (int *)(v1 + 316));
  *(_BYTE *)(v1 + 320) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_register_check("com.apple.isp.cameratorchcoolcurrent", (int *)(v1 + 324));
  *(_BYTE *)(v1 + 328) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN5H9ISP11H9ISPDevice17ISP_PowerOnCameraEv_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_register_check("com.apple.isp.cameratorchwarmcurrent", (int *)(v1 + 332));
  *(_BYTE *)(v1 + 336) = (_DWORD)result == 0;
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_OverrideSensorClockFrequency(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x1Du, input, 2u, 0, 0);
}

uint64_t ___ZN5H9ISP11H9ISPDevice21ISP_EnableSensorPowerEjbb_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v2 + 4 * *(unsigned int *)(a1 + 48) + 216), *(_QWORD *)(a1 + 40));
  return notify_post(*(const char **)(v2 + 8 * *(unsigned int *)(a1 + 48) + 176));
}

uint64_t H9ISP::H9ISPDevice::ISP_PowerOffCamera(H9ISP::H9ISPDevice *this)
{
  mach_port_t v2;
  uint64_t v3;

  kdebug_trace();
  v2 = *((_DWORD *)this + 24);
  if (v2)
    v3 = IOConnectCallScalarMethod(v2, 9u, 0, 0, 0, 0);
  else
    v3 = 3758097084;
  kdebug_trace();
  return v3;
}

uint64_t H9ISP::H9ISPDevice::ISP_EnableFastMemory(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x2Fu, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_EnableSphereBoostVoltage(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x2Au, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_RegisterFirmwareWorkProcessor(uint64_t a1, _DWORD *inputStruct)
{
  mach_port_t v2;
  uint64_t reference;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 96);
  if (!v2)
    return 3758097084;
  v5 = 0u;
  return IOConnectCallAsyncMethod(v2, 0x2Bu, inputStruct[4], &reference, 8u, 0, 0, inputStruct, 0x18uLL, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_UnregisterFirmwareWorkProcessor(H9ISP::H9ISPDevice *this, mach_port_t wake_port)
{
  mach_port_t v2;
  uint64_t reference;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v5 = 0u;
  return IOConnectCallAsyncMethod(v2, 0x2Cu, wake_port, &reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_GetFirmwareWorkProcessorItem(uint64_t a1, mach_port_t wake_port, uint64_t a3)
{
  mach_port_t v3;
  uint64_t reference;
  __int128 v6;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 96);
  if (!v3)
    return 3758097084;
  input[0] = a3;
  input[1] = 2008;
  v6 = 0u;
  return IOConnectCallAsyncMethod(v3, 0x2Du, wake_port, &reference, 8u, input, 2u, 0, 0, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_CompleteFirmwareWorkProcessorItem(uint64_t a1, mach_port_t wake_port, uint64_t a3)
{
  mach_port_t v3;
  uint64_t reference;
  __int128 v6;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 96);
  if (!v3)
    return 3758097084;
  input[0] = a3;
  input[1] = 2008;
  v6 = 0u;
  return IOConnectCallAsyncMethod(v3, 0x2Eu, wake_port, &reference, 8u, input, 2u, 0, 0, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_ReleaseFirmwareWorkProcessorBuffers(H9ISP::H9ISPDevice *this, mach_port_t wake_port)
{
  mach_port_t v2;
  uint64_t reference;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v5 = 0u;
  return IOConnectCallAsyncMethod(v2, 0x32u, wake_port, &reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_GetCameraTime(uint64_t a1, void *outputStruct)
{
  mach_port_t v2;
  size_t outputStructCnt;

  outputStructCnt = 24;
  v2 = *(_DWORD *)(a1 + 96);
  if (v2)
    return IOConnectCallStructMethod(v2, 0xAu, 0, 0, outputStruct, &outputStructCnt);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::ISP_GetSensorConfigInfo(uint64_t a1, unsigned int a2, unsigned int a3, void *outputStruct)
{
  mach_port_t v4;
  size_t v6;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v6 = 116;
  v4 = *(_DWORD *)(a1 + 96);
  if (!v4)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallMethod(v4, 0x1Eu, input, 2u, 0, 0, 0, 0, outputStruct, &v6);
}

uint64_t H9ISP::H9ISPDevice::ISP_GetCameraStatus(uint64_t a1, void *outputStruct)
{
  mach_port_t v2;
  size_t outputStructCnt;

  outputStructCnt = 12;
  v2 = *(_DWORD *)(a1 + 96);
  if (v2)
    return IOConnectCallStructMethod(v2, 0xCu, 0, 0, outputStruct, &outputStructCnt);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::ISP_SetDriverLoggingFlags(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0xDu, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_GetDriverLoggingFlags(H9ISP::H9ISPDevice *this, unsigned int *a2)
{
  mach_port_t v2;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;

  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  output = 0;
  outputCnt = 1;
  result = IOConnectCallScalarMethod(v2, 0x23u, 0, 0, &output, &outputCnt);
  if (!(_DWORD)result)
    *a2 = output;
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_SetFullStatsMode(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x15u, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_LoadFullResLensShadingTable(H9ISP::H9ISPDevice *this, unsigned int a2, const unsigned __int8 *a3, unsigned int a4)
{
  FILE **v5;
  uint64_t v6;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  input[0] = (uint64_t)a3;
  input[1] = a4;
  input[2] = a2;
  v5 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "H9ISPDevice: sending full-res lens shading table to kernel, size = %d\n", a4);
  v6 = IOConnectCallScalarMethod(*((_DWORD *)this + 24), 0x13u, input, 3u, 0, 0);
  if ((_DWORD)v6)
    fwrite("H9ISPDevice: Error sending full-res lens shading table to kernel\n", 0x41uLL, 1uLL, *v5);
  return v6;
}

uint64_t H9ISP::H9ISPDevice::ISP_GetSetfileSize(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  mach_port_t v3;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  output = 0;
  input[0] = a2;
  outputCnt = 1;
  result = IOConnectCallScalarMethod(v3, 0x11u, input, 1u, &output, &outputCnt);
  if (!(_DWORD)result)
    *a3 = output;
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_CopySetfile(H9ISP::H9ISPDevice *this, uint64_t a2, unsigned int a3, unsigned int a4)
{
  mach_port_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t input[4];

  input[3] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)this + 24);
  if (!v4)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  v5 = IOConnectCallScalarMethod(v4, 0x12u, input, 3u, 0, 0);
  v6 = v5;
  if ((_DWORD)v5)
    printf("H9ISPDEVICE:: ISP_CopySetfile returned 0x%08x\n", v5);
  return v6;
}

uint64_t H9ISP::H9ISPDevice::ISP_CreateClientLoggingSession(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x20u, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_TerminateClientLoggingSession(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x21u, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_LoadDataFile(H9ISP::H9ISPDevice *this, unsigned int a2, const unsigned __int8 *a3, unsigned int a4, unsigned int a5)
{
  mach_port_t v5;
  uint64_t input[5];

  input[4] = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 24);
  if (!v5)
    return 3758097084;
  input[0] = (uint64_t)a3;
  input[1] = a4;
  input[2] = a2;
  input[3] = a5;
  return IOConnectCallScalarMethod(v5, 0x27u, input, 4u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_ShowSharedMemoryAllocations(H9ISP::H9ISPDevice *this)
{
  mach_port_t v1;

  v1 = *((_DWORD *)this + 24);
  if (v1)
    return IOConnectCallScalarMethod(v1, 0xEu, 0, 0, 0, 0);
  else
    return 3758097084;
}

uint64_t H9ISP::H9ISPDevice::SetClientPrivateData(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 72) = a2;
  return this;
}

uint64_t H9ISP::H9ISPDevice::GetClientPrivateData(H9ISP::H9ISPDevice *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t H9ISP::H9ISPDevice::ISP_SelectBestMIPIFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  mach_port_t v3;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  output = 0;
  input[0] = a2;
  outputCnt = 1;
  result = IOConnectCallScalarMethod(v3, 0x18u, input, 1u, &output, &outputCnt);
  if (!(_DWORD)result)
    *a3 = output;
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_SetBestMIPIFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x1Fu, input, 2u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_SelectBestChargePumpFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int *a3)
{
  mach_port_t v3;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  input[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  output = 0;
  input[0] = a2;
  outputCnt = 1;
  result = IOConnectCallScalarMethod(v3, 0x30u, input, 1u, &output, &outputCnt);
  if (!(_DWORD)result)
    *a3 = output;
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_SetBestChargePumpFrequencyIndex(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x31u, input, 2u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_DriverInitiatedManualFocus(H9ISP::H9ISPDevice *this, unsigned int a2, unsigned int a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[2] = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 24);
  if (!v3)
    return 3758097084;
  input[0] = a2;
  input[1] = a3;
  return IOConnectCallScalarMethod(v3, 0x1Au, input, 2u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_SetDARTCacheTTL(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x1Bu, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_EnableMIPIClockAdjustments(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x1Cu, v4, 1u, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_PreviewStreamSet(H9ISP::H9ISPDevice *a1, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0xB0D00000000;
  v5 = a2;
  v6 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ISP_SetMaxOutputRate(H9ISP::H9ISPDevice *a1, int a2, unsigned __int16 a3)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = 0x1500000000;
  v6 = a2;
  v5 = a3;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v4, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ISP_GeneralProcessStart(H9ISP::H9ISPDevice *a1, unsigned int a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 > 3)
    return 3758097090;
  v10 = v3;
  v11 = v4;
  v7 = 0x12F00000000;
  v8 = 0;
  v9 = (unsigned __int16)(0x2000200010000uLL >> (16 * a2));
  result = H9ISP::H9ISPDevice::ISP_SendCommand(a1, (unsigned __int8 *)&v7, 0x10u, 0, 0xFFFFFFFF);
  if (!(_DWORD)result)
    *a3 = HIWORD(v9);
  return result;
}

uint64_t H9ISP::H9ISPDevice::ISP_GeneralProcessStop(H9ISP::H9ISPDevice *this, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0x13000000000;
  v4 = 0;
  WORD2(v4) = a2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(this, (unsigned __int8 *)&v3, 0x10u, 0, 0xFFFFFFFF);
}

uint64_t H9ISP::H9ISPDevice::ISP_GeneralProcessGeneric(uint64_t a1, void *inputStruct, mach_port_t a3)
{
  mach_port_t v3;
  uint64_t reference;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 96);
  if (!v3)
    return 3758097084;
  if (!a3)
    return IOConnectCallStructMethod(v3, 0x29u, inputStruct, 0x478uLL, 0, 0);
  v6 = 0u;
  return IOConnectCallAsyncMethod(v3, 0x29u, a3, &reference, 8u, 0, 0, inputStruct, 0x478uLL, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_GeneralProcess(uint64_t a1, void *inputStruct, mach_port_t a3)
{
  mach_port_t v3;
  uint64_t reference;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 96);
  if (!v3)
    return 3758097084;
  if (!a3)
    return IOConnectCallStructMethod(v3, 0x28u, inputStruct, 0x3B0uLL, 0, 0);
  v6 = 0u;
  return IOConnectCallAsyncMethod(v3, 0x28u, a3, &reference, 8u, 0, 0, inputStruct, 0x3B0uLL, 0, 0, 0, 0);
}

uint64_t H9ISP::H9ISPDevice::ISP_SetMemoryPoolID(H9ISP::H9ISPDevice *this, unsigned int a2)
{
  mach_port_t v2;
  uint64_t v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 24);
  if (!v2)
    return 3758097084;
  v4[0] = a2;
  return IOConnectCallScalarMethod(v2, 0x33u, v4, 1u, 0, 0);
}

BOOL H9ISP::H9ISPDevice::isSensorType(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 56);
  return *(_DWORD *)(v3 + 80 * a2 + 8) && *(_DWORD *)(v3 + 80 * a2 + 16) == a3;
}

BOOL H9ISP::H9ISPDevice::hasSensorType(uint64_t a1, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 392);
  if (!(_DWORD)v2)
    return 0;
  v3 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 16);
  v4 = 0xFFFFFFFFLL;
  while (!*(v3 - 2) || *v3 != a2)
  {
    --v4;
    v3 += 20;
    if (!--v2)
      return 0;
  }
  return v4 != 0;
}

uint64_t H9ISP::H9ISPDevice::getSensorChannel(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *i;

  v2 = *(unsigned int *)(a1 + 392);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  result = 0;
  for (i = (_DWORD *)(*(_QWORD *)(a1 + 56) + 16); !*(i - 2) || *i != a2; i += 20)
  {
    if (v2 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, const void *a14, uint64_t a15, int a16)
{
  const __CFAllocator *v17;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v19;
  _BYTE v21[20];

  *(_DWORD *)&v21[16] = a11;
  *(_QWORD *)&v21[8] = a10;
  *(_QWORD *)v21 = a9;
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  *(_BYTE *)(a1 + 52) = v21[0];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v21[4];
  *(_DWORD *)(a1 + 72) = a12;
  *(_DWORD *)(a1 + 76) = a13;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = a16;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 160), 0);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 128) = Mutable;
  if (Mutable)
  {
    v19 = CFNumberCreate(v17, kCFNumberSInt32Type, (const void *)(a1 + 64));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 128), (const void *)*MEMORY[0x24BDC56D0], v19);
    CFRelease(v19);
  }
  if (a14)
    *(_QWORD *)(a1 + 136) = CFRetain(a14);
  if (a15)
    *(_QWORD *)(a1 + 144) = a15;
  H9ISP::gFrameReceiverBufferPoolPrefs = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("UseIOSurfaceWiringAssertion"), CFSTR("com.apple.coremedia"), (const __CFString *)1);
  return a1;
}

{
  return H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(H9ISP::H9ISPFrameReceiverBufferPool *this)
{
  pthread_mutex_t *v2;
  uint64_t i;
  const void *v4;
  const void *v5;

  v2 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  if (*((_QWORD *)this + 15))
  {
    for (i = 0; i != 5; ++i)
    {
      if (*((_DWORD *)this + i + 1) != -1 && !*((_BYTE *)this + i + 24))
        break;
    }
    kdebug_trace();
    CVPixelBufferPoolRelease(*((CVPixelBufferPoolRef *)this + 15));
    *((_QWORD *)this + 15) = 0;
    kdebug_trace();
  }
  v4 = (const void *)*((_QWORD *)this + 16);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 17);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 18) = 0;
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  *((_DWORD *)this + 38) = 0;
}

uint64_t H9ISP::H9ISPFrameReceiverBufferPool::activatePool(H9ISP::H9ISPFrameReceiverBufferPool *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  CVPixelBufferPoolRef v4;
  uint64_t v5;
  __int16 v7;
  void *v8;

  v2 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  v3 = *((_QWORD *)this + 15);
  if (!v3)
  {
    do
    {
      if (*((_DWORD *)this + v3 + 1) != -1 && !*((_BYTE *)this + v3 + 24))
        break;
      ++v3;
    }
    while (v3 != 5);
    kdebug_trace();
    if (*((_QWORD *)this + 18))
    {
      puts("H9ISPFrameReceiverBufferPool::activatePool() - using client passed buffer pool");
      v4 = CVPixelBufferPoolRetain(*((CVPixelBufferPoolRef *)this + 18));
    }
    else
    {
      LODWORD(v8) = *((_DWORD *)this + 26);
      v4 = H9ISP::H9ISPCreateCVBufferPool(*((_DWORD *)this + 8), *((_DWORD *)this + 9), *((_DWORD *)this + 10), *((_DWORD *)this + 11), *((_DWORD *)this + 12), *((unsigned int *)this + 16), *((unsigned __int8 *)this + 52), *((_DWORD *)this + 14), *((float *)this + 27), *((_DWORD *)this + 15), *((_DWORD *)this + 17), (*(_DWORD *)this < 0x14u) & (0x806C3u >> *(_DWORD *)this), v7, *((_DWORD *)this + 19), v8, *((_QWORD *)this + 17), HIDWORD(*((_QWORD *)this + 17)), *((_DWORD *)this + 28));
    }
    *((_QWORD *)this + 15) = v4;
    if (!v4)
    {
      kdebug_trace();
      v5 = 3758097084;
      goto LABEL_11;
    }
    CVPixelBufferPoolScanIOSurfaces();
    kdebug_trace();
  }
  v5 = 0;
LABEL_11:
  pthread_mutex_unlock(v2);
  return v5;
}

uint64_t H9ISP::MyCVPixelBufferPoolScanIOSurfacesCallback(__IOSurface *a1, uint64_t a2)
{
  if (a2 && a1 && !*(_DWORD *)(a2 + 116))
    *(_DWORD *)(a2 + 116) = IOSurfaceGetAllocSize(a1);
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiverBufferPool::deactivatePool(H9ISP::H9ISPFrameReceiverBufferPool *this)
{
  pthread_mutex_t *v2;
  uint64_t i;
  uint64_t v4;

  v2 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  if (*((_QWORD *)this + 15))
  {
    for (i = 0; i != 5; ++i)
    {
      if (*((_DWORD *)this + i + 1) != -1 && !*((_BYTE *)this + i + 24))
        break;
    }
    kdebug_trace();
    CVPixelBufferPoolRelease(*((CVPixelBufferPoolRef *)this + 15));
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    kdebug_trace();
    v4 = 0;
  }
  else
  {
    v4 = 3758097122;
  }
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(H9ISP::H9ISPFrameReceiverBufferPool *this, __CVBuffer **a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  __CVPixelBufferPool *v6;
  CFAllocatorRef *v7;
  CFNumberRef v8;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v4 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  if (a2)
  {
    v5 = 3758097085;
    *a2 = 0;
    v6 = (__CVPixelBufferPool *)*((_QWORD *)this + 15);
    if (v6)
    {
      v7 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
      if (*((_BYTE *)this + 100))
      {
        if (*((_QWORD *)this + 16))
        {
          v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)this + 64);
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 16), (const void *)*MEMORY[0x24BDC56D0], v8);
          CFRelease(v8);
          v6 = (__CVPixelBufferPool *)*((_QWORD *)this + 15);
        }
        *((_BYTE *)this + 100) = 0;
      }
      CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(*v7, v6, *((CFDictionaryRef *)this + 16), &pixelBufferOut);
      pthread_mutex_unlock(v4);
      if (pixelBufferOut)
      {
        v5 = 0;
        *a2 = pixelBufferOut;
      }
    }
    else
    {
      pthread_mutex_unlock(v4);
      return 3758097086;
    }
  }
  else
  {
    pthread_mutex_unlock(v4);
    return 3758097090;
  }
  return v5;
}

uint64_t H9ISP::H9ISPFrameReceiverBufferPool::ModifyBufferCount(H9ISP::H9ISPFrameReceiverBufferPool *this, int a2)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t i;
  int v7;

  v4 = 3758097085;
  v5 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  if (!*((_QWORD *)this + 15))
  {
    v4 = 3758097086;
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_12:
    v4 = 0;
    goto LABEL_13;
  }
  if (!(*((_DWORD *)this + 16) + a2))
  {
    v4 = 3758097090;
    goto LABEL_13;
  }
  for (i = 0; i != 5; ++i)
  {
    if (*((_DWORD *)this + i + 1) != -1 && !*((_BYTE *)this + i + 24))
      break;
  }
  kdebug_trace();
  v7 = *((_DWORD *)this + 16) + a2;
  if (!CVPixelBufferPoolSetMinBufferCount())
  {
    *((_DWORD *)this + 16) = v7;
    *((_BYTE *)this + 100) = 1;
    kdebug_trace();
    goto LABEL_12;
  }
LABEL_13:
  pthread_mutex_unlock(v5);
  return v4;
}

uint64_t H9ISP::H9ISPDeviceController::H9ISPDeviceController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;

  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 64) = pthread_self();
  Current = CFRunLoopGetCurrent();
  *(_QWORD *)(a1 + 48) = CFRetain(Current);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void H9ISP::H9ISPDeviceController::~H9ISPDeviceController(H9ISP::H9ISPDeviceController *this)
{
  unint64_t i;
  H9ISP::H9ISPDevice *ValueAtIndex;
  io_object_t v4;
  IONotificationPort *v5;
  __CFRunLoopSource *v6;
  NSObject *v7;
  const void *v8;

  for (i = 0; i < CFArrayGetCount(*(CFArrayRef *)this); ++i)
  {
    ValueAtIndex = (H9ISP::H9ISPDevice *)CFArrayGetValueAtIndex(*(CFArrayRef *)this, i);
    H9ISP::H9ISPDevice::DisableDeviceMessages(ValueAtIndex);
  }
  v4 = *((_DWORD *)this + 14);
  if (v4)
    IOObjectRelease(v4);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
  v5 = (IONotificationPort *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = (__CFRunLoopSource *)*((_QWORD *)this + 3);
    if (v6)
    {
      CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 6), v6, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
      *((_QWORD *)this + 3) = 0;
      v5 = (IONotificationPort *)*((_QWORD *)this + 2);
    }
    IONotificationPortDestroy(v5);
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    dispatch_sync(v7, &__block_literal_global);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 6);
  if (v8)
    CFRelease(v8);
}

uint64_t H9ISP::H9ISPDeviceController::SetupDeviceController(H9ISP::H9ISPDeviceController *this)
{
  CFMutableArrayRef v2;
  uint64_t result;
  const __CFDictionary *v4;
  IONotificationPort *v5;
  __CFRunLoopSource *RunLoopSource;
  CFArrayCallBacks callBacks;

  callBacks.version = 0;
  callBacks.retain = 0;
  callBacks.copyDescription = 0;
  callBacks.equal = 0;
  callBacks.release = (CFArrayReleaseCallBack)H9ISP::cfArrayReleaseH9ISPUnitObject;
  v2 = CFArrayCreateMutable(0, 0, &callBacks);
  *(_QWORD *)this = v2;
  if (!v2)
    return 3758097085;
  result = IOMasterPort(*MEMORY[0x24BDAD2F0], (mach_port_t *)this + 2);
  if ((_DWORD)result)
    return result;
  v4 = IOServiceMatching("AppleH9CamIn");
  v5 = IONotificationPortCreate(*((_DWORD *)this + 2));
  *((_QWORD *)this + 2) = v5;
  if (!v5)
  {
    syslog(0, "%s: IONotificationPortCreate returned NULL ", "IOReturn H9ISP::H9ISPDeviceController::SetupDeviceController()");
    return 3758097086;
  }
  RunLoopSource = IONotificationPortGetRunLoopSource(v5);
  *((_QWORD *)this + 3) = RunLoopSource;
  if (!RunLoopSource)
  {
    syslog(0, "%s: IONotificationPortGetRunLoopSource returned NULL ", "IOReturn H9ISP::H9ISPDeviceController::SetupDeviceController()");
    IONotificationPortDestroy(*((IONotificationPortRef *)this + 2));
    *((_QWORD *)this + 2) = 0;
    return 3758097086;
  }
  CFRunLoopAddSource(*((CFRunLoopRef *)this + 6), RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
  result = IOServiceAddMatchingNotification(*((IONotificationPortRef *)this + 2), "IOServiceMatched", v4, (IOServiceMatchingCallback)H9ISP::deviceArrivedCallback, this, (io_iterator_t *)this + 14);
  if (!(_DWORD)result)
  {
    *((_QWORD *)this + 9) = dispatch_queue_create("com.apple.h9ispdevicecontroller.notifications.queue", 0);
    H9ISP::deviceArrivedCallback(this, *((_DWORD *)this + 14));
    return 0;
  }
  return result;
}

void H9ISP::cfArrayReleaseH9ISPUnitObject(H9ISP *this, const __CFAllocator *a2, const void *a3)
{
  if (a2)
  {
    H9ISP::H9ISPDevice::~H9ISPDevice(a2);
    JUMPOUT(0x23B7D8B08);
  }
}

uint64_t H9ISP::deviceArrivedCallback(H9ISP *this, io_iterator_t iterator)
{
  H9ISP::H9ISPDevice *v4;
  const __CFAllocator *v5;
  uint64_t result;
  unsigned int v7;
  void (*v8)(H9ISP *, _QWORD, H9ISP::H9ISPDevice *);
  CFMutableDictionaryRef properties;

  v4 = 0;
  properties = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    result = IOIteratorNext(iterator);
    if (!(_DWORD)result)
      break;
    v7 = result;
    if (!IORegistryEntryCreateCFProperties(result, &properties, v5, 0))
    {
      if (!CFArrayGetCount(*(CFArrayRef *)this))
      {
        v4 = (H9ISP::H9ISPDevice *)operator new();
        H9ISP::H9ISPDevice::H9ISPDevice(v4, this, v7);
        CFArrayAppendValue(*(CFMutableArrayRef *)this, v4);
      }
      CFRelease(properties);
      v8 = (void (*)(H9ISP *, _QWORD, H9ISP::H9ISPDevice *))*((_QWORD *)this + 4);
      if (v8)
      {
        if (v4)
          v8(this, *((_QWORD *)this + 5), v4);
      }
    }
  }
  return result;
}

void sub_23580588C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x10F0C40496BE145);
  _Unwind_Resume(a1);
}

H9ISP::H9ISPGeneralProcessFrameReceiver *H9ISP::H9ISPGeneralProcessFrameReceiver::H9ISPGeneralProcessFrameReceiver(H9ISP::H9ISPGeneralProcessFrameReceiver *this, H9ISP::H9ISPDevice *a2)
{
  pthread_mutexattr_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = a2;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 44) = 0x4000000000000000;
  *((_DWORD *)this + 90) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 48), 0);
  pthread_mutex_init((pthread_mutex_t *)this + 3, 0);
  *((_QWORD *)this + 32) = 0;
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 112), &v4);
  pthread_mutexattr_destroy(&v4);
  *((_QWORD *)this + 22) = dispatch_semaphore_create(0);
  return this;
}

void sub_235805988(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void H9ISP::H9ISPGeneralProcessFrameReceiver::~H9ISPGeneralProcessFrameReceiver(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  if (*(_DWORD *)this)
    H9ISP::H9ISPGeneralProcessFrameReceiver::stopReceive(this);
  if (*((_QWORD *)this + 35))
    H9ISP::H9ISPGeneralProcessFrameReceiver::removeIODispatcherFromRunLoop(this);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 112));
  pthread_mutex_destroy((pthread_mutex_t *)this + 3);
  H9ISP::H9ISPDevice::ISP_FlushInactiveDARTMappings(*((H9ISP::H9ISPDevice **)this + 36));
  dispatch_release(*((dispatch_object_t *)this + 22));
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100]((_QWORD *)this + 37);
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::stopReceive(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  int v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = 3758097110;
  v3 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*(_DWORD *)this)
  {
    H9ISP::H9ISPGeneralProcessFrameReceiver::stopNoDataTimer(this);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
    *((_BYTE *)this + 344) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
    v4 = 2001;
    do
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
      if (!*((_QWORD *)this + 42))
      {
        v2 = 0;
        goto LABEL_32;
      }
      usleep(0x3E8u);
      --v4;
    }
    while (v4);
    printf("H9ISPGeneralProcessFrameReceiver: Did not get all pending requests back from kernel. remaining: %d.\n", *((_QWORD *)this + 42));
    v5 = (void **)*((_QWORD *)this + 38);
    v6 = (void **)*((_QWORD *)this + 39);
    v7 = &v5[*((_QWORD *)this + 41) >> 9];
    if (v6 == v5)
      v8 = 0;
    else
      v8 = (uint64_t *)((char *)*v7 + 8 * (*((_QWORD *)this + 41) & 0x1FFLL));
    while (1)
    {
      v9 = (char *)v6 - (char *)v5;
      if (v9)
      {
        v10 = *((_QWORD *)this + 42) + *((_QWORD *)this + 41);
        v11 = *(uint64_t *)((char *)v5 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF);
      }
      else
      {
        v11 = 0;
      }
      if (v8 == (uint64_t *)v11)
        break;
      v12 = *v8;
      if (*v8)
      {
        CVPixelBufferRelease(*(CVPixelBufferRef *)(v12 + 8));
        CVPixelBufferRelease(*(CVPixelBufferRef *)(v12 + 16));
        v13 = *(__CVBuffer **)(v12 + 24);
        if (v13)
          CVPixelBufferRelease(v13);
        if (*(_DWORD *)(v12 + 936))
        {
          v14 = 0;
          do
            CVPixelBufferRelease(*(CVPixelBufferRef *)(v12 + 32 + 8 * v14++));
          while (v14 < *(unsigned int *)(v12 + 936));
        }
        printf("H9ISPGeneralProcessFrameReceiver: Request not returned 0x%p\n", (const void *)v12);
        MEMORY[0x23B7D8B08](v12, 0x10E0C408739BADELL);
      }
      else
      {
        printf("H9ISPGeneralProcessFrameReceiver: Request not returned 0x%p\n", 0);
      }
      if ((char *)++v8 - (_BYTE *)*v7 == 4096)
      {
        v15 = (uint64_t *)v7[1];
        ++v7;
        v8 = v15;
      }
      v5 = (void **)*((_QWORD *)this + 38);
      v6 = (void **)*((_QWORD *)this + 39);
    }
    *((_QWORD *)this + 42) = 0;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        v16 = *((_QWORD *)this + 39);
        v5 = (void **)(*((_QWORD *)this + 38) + 8);
        *((_QWORD *)this + 38) = v5;
        v9 = v16 - (_QWORD)v5;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      v17 = 256;
    }
    else
    {
      if (v9 >> 3 != 2)
      {
LABEL_32:
        pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
        *((_BYTE *)this + 344) = 0;
        *(_DWORD *)this = 0;
        goto LABEL_33;
      }
      v17 = 512;
    }
    *((_QWORD *)this + 41) = v17;
    goto LABEL_32;
  }
  v2 = 3758097122;
LABEL_33:
  pthread_mutex_unlock(v3);
  return v2;
}

void H9ISP::H9ISPGeneralProcessFrameReceiver::removeIODispatcherFromRunLoop(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  __CFRunLoopSource *v2;
  __CFMachPort *v3;
  mach_port_name_t v4;

  v2 = (__CFRunLoopSource *)*((_QWORD *)this + 35);
  if (v2)
  {
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 1), v2, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    CFRelease(*((CFTypeRef *)this + 35));
    *((_QWORD *)this + 35) = 0;
  }
  v3 = (__CFMachPort *)*((_QWORD *)this + 33);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 33));
    *((_QWORD *)this + 33) = 0;
  }
  v4 = *((_DWORD *)this + 68);
  if (v4)
  {
    mach_port_mod_refs(*MEMORY[0x24BDAEC58], v4, 1u, -1);
    *((_DWORD *)this + 68) = 0;
  }
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::setupFrameReceiver(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  *((_QWORD *)this + 1) = CFRunLoopGetCurrent();
  return H9ISP::H9ISPGeneralProcessFrameReceiver::addIODispatcherToRunLoop(this);
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::addIODispatcherToRunLoop(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  uint64_t v2;
  const __CFAllocator *v3;
  __CFMachPort *v4;
  __CFRunLoopSource *RunLoopSource;
  Boolean shouldFreeInfo;
  CFMachPortContext context;

  v2 = IOCreateReceivePort(0x39u, (mach_port_t *)this + 68);
  if (!(_DWORD)v2)
  {
    v2 = 3758097085;
    shouldFreeInfo = 0;
    context.version = 1;
    context.info = this;
    memset(&context.retain, 0, 24);
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x24BDBD240], *((_DWORD *)this + 68), MEMORY[0x24BDD7FD8], &context, &shouldFreeInfo);
    *((_QWORD *)this + 33) = v4;
    if (v4)
    {
      RunLoopSource = CFMachPortCreateRunLoopSource(v3, v4, 0);
      *((_QWORD *)this + 35) = RunLoopSource;
      if (RunLoopSource)
      {
        CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::registerFrameReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  return 0;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::registerMessageCallback(H9ISP::H9ISPGeneralProcessFrameReceiver *this, void (*a2)(unsigned int, unsigned int, unsigned int, void *, void *, void *), void *a3)
{
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a3;
  return 0;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::startReceive(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*(_DWORD *)this == 1)
  {
    v3 = 3758097122;
  }
  else
  {
    v3 = 0;
    *((_BYTE *)this + 344) = 0;
    *(_DWORD *)this = 1;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::stopNoDataTimer(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;

  v2 = (pthread_mutex_t *)((char *)this + 192);
  pthread_mutex_lock((pthread_mutex_t *)this + 3);
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 32);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 32));
    *((_QWORD *)this + 32) = 0;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::completeAllRequests(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  dispatch_time_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const void **v8;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  const void **v13;

  v2 = 3758097110;
  v3 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  if (*(_DWORD *)this)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
    if (*((_QWORD *)this + 42))
    {
      *((_BYTE *)this + 184) = 1;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
      v4 = dispatch_time(0, 2000000000);
      if (dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 22), v4))
      {
        syslog(3, "H9ISPGeneralProcessFrameReceiver: Did not get all pending requests back from kernel. remaining: %d.\n", *((_QWORD *)this + 42));
        v5 = *((_QWORD *)this + 38);
        v6 = *((_QWORD *)this + 39);
        v7 = (_QWORD *)(v5 + 8 * (*((_QWORD *)this + 41) >> 9));
        if (v6 == v5)
          v8 = 0;
        else
          v8 = (const void **)(*v7 + 8 * (*((_QWORD *)this + 41) & 0x1FFLL));
        while (1)
        {
          if (v6 == v5)
          {
            v11 = 0;
          }
          else
          {
            v10 = *((_QWORD *)this + 42) + *((_QWORD *)this + 41);
            v11 = *(_QWORD *)(v5 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF);
          }
          if (v8 == (const void **)v11)
            break;
          v12 = *v8++;
          printf("H9ISPGeneralProcessFrameReceiver: Request not returned 0x%p\n", v12);
          if ((const void **)((char *)v8 - *v7) == (const void **)4096)
          {
            v13 = (const void **)v7[1];
            ++v7;
            v8 = v13;
          }
          v5 = *((_QWORD *)this + 38);
          v6 = *((_QWORD *)this + 39);
        }
        goto LABEL_9;
      }
    }
    else
    {
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
    }
    v2 = 0;
LABEL_9:
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
    *((_BYTE *)this + 184) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 112));
    goto LABEL_10;
  }
  v2 = 3758097122;
LABEL_10:
  pthread_mutex_unlock(v3);
  return v2;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::GeneralProcess(uint64_t a1, uint64_t a2, char a3)
{
  pthread_mutex_t *v6;
  __CVBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  unint64_t v14;
  __IOSurface *IOSurface;
  H9ISP *PixelFormatType;
  int v17;
  int Height;
  int v19;
  BOOL v21;
  __IOSurface *v22;
  __CVBuffer *v23;
  __IOSurface *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  CVPixelBufferRef *v28;
  __CVBuffer *v29;
  __IOSurface *v30;
  _DWORD *v31;
  H9ISP *v32;
  int v33;
  int BytesPerRowOfPlane;
  double *v35;
  unsigned int v36;
  unsigned int v37;
  double v38;
  double v39;
  _WORD *v40;
  OSType v41;
  __CVBuffer *v42;
  _DWORD *v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v50;
  int v51;
  _DWORD *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __CVBuffer *v62;
  unint64_t v63;
  _DWORD *v64;
  _WORD inputStruct[2];
  int v66;
  IOSurfaceID ID;
  int DataSize;
  int BytesPerRow;
  int FrameFormat;
  int Width;
  int v72;
  int v73;
  BOOL v74;
  IOSurfaceID v75;
  int v76;
  int v77;
  _DWORD v78[197];
  uint64_t (*v79)(uint64_t, void *, _QWORD *, unint64_t *);
  uint64_t v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  if (*(_BYTE *)(a1 + 344) || *(_DWORD *)a1 != 1)
  {
    pthread_mutex_unlock(v6);
    return 3758097122;
  }
  else
  {
    v7 = *(__CVBuffer **)(a2 + 8);
    if (v7)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v8 = *(unsigned int *)(a2 + 936);
        if ((v8 - 21) >= 0xFFFFFFEC)
        {
          v11 = 0;
          v12 = 8 * v8;
          while (*(_QWORD *)(a2 + v11 + 32))
          {
            v11 += 8;
            if (v12 == v11)
            {
              if ((a3 & 1) == 0)
              {
                CVPixelBufferRetain(v7);
                CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 16));
                v13 = *(__CVBuffer **)(a2 + 24);
                if (v13)
                  CVPixelBufferRetain(v13);
                if (*(_DWORD *)(a2 + 936))
                {
                  v14 = 0;
                  do
                    CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 32 + 8 * v14++));
                  while (v14 < *(unsigned int *)(a2 + 936));
                }
              }
              bzero(inputStruct, 0x3B0uLL);
              IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 8));
              ID = IOSurfaceGetID(IOSurface);
              DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a2 + 8));
              BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a2 + 8));
              PixelFormatType = (H9ISP *)CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a2 + 8));
              v17 = (int)PixelFormatType;
              FrameFormat = H9ISP::getFrameFormat(PixelFormatType);
              Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a2 + 8));
              Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a2 + 8));
              v19 = *(_DWORD *)(a2 + 208);
              v72 = Height;
              v73 = v19;
              v21 = v17 != 2037741171 && v17 != 875704438;
              v74 = v21;
              v22 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 16));
              v75 = IOSurfaceGetID(v22);
              v76 = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a2 + 16));
              v23 = *(__CVBuffer **)(a2 + 24);
              if (v23)
              {
                v24 = CVPixelBufferGetIOSurface(v23);
                v78[195] = IOSurfaceGetID(v24);
                v78[196] = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a2 + 24));
              }
              LODWORD(v25) = *(_DWORD *)(a2 + 936);
              if ((_DWORD)v25)
              {
                v26 = 0;
                do
                {
                  v27 = a2 + 8 * v26;
                  v29 = *(__CVBuffer **)(v27 + 32);
                  v28 = (CVPixelBufferRef *)(v27 + 32);
                  v30 = CVPixelBufferGetIOSurface(v29);
                  v31 = &inputStruct[2 * v26];
                  v31[13] = IOSurfaceGetID(v30);
                  v32 = (H9ISP *)CVPixelBufferGetPixelFormatType(*v28);
                  v33 = H9ISP::getFrameFormat(v32);
                  v31[93] = v33;
                  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*v28, 0);
                  v35 = (double *)(a2 + 32 * v26);
                  v36 = v35[27];
                  v37 = v35[28];
                  v38 = v35[29];
                  v39 = v35[30];
                  v31[73] = BytesPerRowOfPlane;
                  v31[113] = v36;
                  v31[133] = v37;
                  v31[153] = v38;
                  v31[173] = v39;
                  v40 = &inputStruct[v26];
                  v40[386] = CVPixelBufferGetWidth(*v28);
                  v40[406] = CVPixelBufferGetHeight(*v28);
                  v41 = CVPixelBufferGetPixelFormatType(*v28);
                  v40[426] = *(_DWORD *)(a2 + 4 * v26 + 856);
                  v42 = *v28;
                  v43 = &v78[2 * v26];
                  if (v33)
                  {
                    v44 = CVPixelBufferGetBytesPerRow(v42);
                    v45 = CVPixelBufferGetHeight(*v28);
                    v46 = 0;
                    *v43 = v45 * v44;
                  }
                  else
                  {
                    v47 = CVPixelBufferGetBytesPerRowOfPlane(v42, 0);
                    *v43 = CVPixelBufferGetHeight(*v28) * v47;
                    v48 = CVPixelBufferGetBytesPerRowOfPlane(*v28, 1uLL);
                    v46 = (CVPixelBufferGetHeight(*v28) * v48) >> 1;
                  }
                  v78[2 * v26 + 1] = v46;
                  v50 = v41 != 2037741171 && v41 != 875704438;
                  *((_BYTE *)&v78[190] + v26++) = v50;
                  v25 = *(unsigned int *)(a2 + 936);
                }
                while (v26 < v25);
              }
              v51 = *(_DWORD *)(a2 + 4);
              inputStruct[0] = *(_DWORD *)a2;
              v77 = v25;
              v66 = v51;
              v79 = H9ISP::H9ISPGeneralProcessFrameReceiver::FrameDone;
              if ((a3 & 1) != 0)
              {
                v9 = H9ISP::H9ISPDevice::ISP_GeneralProcess(*(_QWORD *)(a1 + 288), inputStruct, 0);
              }
              else
              {
                v52 = (_DWORD *)operator new();
                memcpy(v52, (const void *)a2, 0x578uLL);
                v64 = v52;
                v80 = a1;
                v53 = *(_DWORD *)(a1 + 360);
                *(_DWORD *)(a1 + 360) = v53 + 1;
                v52[348] = v53;
                v81 = v53;
                pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
                std::deque<H9ISP::H9ISPGeneralProcessFrameReceiverRequest *>::push_back((_QWORD *)(a1 + 296), &v64);
                pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
                v9 = H9ISP::H9ISPDevice::ISP_GeneralProcess(*(_QWORD *)(a1 + 288), inputStruct, *(_DWORD *)(a1 + 272));
                if ((_DWORD)v9)
                {
                  pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
                  v54 = *(_QWORD *)(a1 + 328);
                  v55 = *(_QWORD *)(a1 + 304);
                  v56 = *(_QWORD *)(a1 + 312);
                  v57 = (char *)(v55 + 8 * (v54 >> 9));
                  if (v56 == v55)
                    v58 = 0;
                  else
                    v58 = (char *)(*(_QWORD *)v57 + 8 * (*(_QWORD *)(a1 + 328) & 0x1FFLL));
LABEL_46:
                  v59 = v58;
                  while (1)
                  {
                    if (v56 == v55)
                      v60 = 0;
                    else
                      v60 = *(_QWORD *)(v55 + (((*(_QWORD *)(a1 + 336) + v54) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*(_QWORD *)(a1 + 336) + v54) & 0x1FF);
                    if (v59 == (char *)v60)
                    {
                      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
                      goto LABEL_63;
                    }
                    if (*(_QWORD *)v59 && *(_DWORD *)(*(_QWORD *)v59 + 1392) == v64[348])
                      break;
                    v59 += 8;
                    v58 += 8;
                    if ((char *)(*(_QWORD *)v57 + 4096) == v58)
                    {
                      v61 = (char *)*((_QWORD *)v57 + 1);
                      v57 += 8;
                      v58 = v61;
                      goto LABEL_46;
                    }
                  }
                  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)(a1 + 296), v57, v58);
                  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
                  if (v64)
                    MEMORY[0x23B7D8B08](v64, 0x10E0C408739BADELL);
                  v64 = 0;
                  CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 8));
                  CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 16));
                  v62 = *(__CVBuffer **)(a2 + 24);
                  if (v62)
                    CVPixelBufferRelease(v62);
                  if (*(_DWORD *)(a2 + 936))
                  {
                    v63 = 0;
                    do
                      CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 32 + 8 * v63++));
                    while (v63 < *(unsigned int *)(a2 + 936));
                  }
                }
                else if (*(_QWORD *)(a1 + 336) == 1)
                {
                  H9ISP::H9ISPGeneralProcessFrameReceiver::startNoDataTimer((H9ISP::H9ISPGeneralProcessFrameReceiver *)a1);
                }
              }
LABEL_63:
              pthread_mutex_unlock(v6);
              return v9;
            }
          }
        }
      }
    }
    v9 = 3758097090;
    pthread_mutex_unlock(v6);
  }
  return v9;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::FrameDone(uint64_t this, void *a2, _QWORD *a3, unint64_t *a4)
{
  int v4;
  int v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(_QWORD, uint64_t);
  __CVBuffer *v20;
  __CVBuffer *v21;
  __CVBuffer *v22;
  __CVBuffer *v23;
  __CVBuffer *v24;
  unint64_t v25;

  if (this)
  {
    v4 = (int)a4;
    v6 = (int)a2;
    v7 = this;
    v8 = (pthread_mutex_t *)(this + 112);
    pthread_mutex_lock((pthread_mutex_t *)(this + 112));
    v9 = *(_QWORD *)(v7 + 328);
    v10 = *(_QWORD *)(v7 + 304);
    v11 = *(_QWORD *)(v7 + 312);
    v12 = v10 + 8 * (v9 >> 9);
    if (v11 == v10)
      v13 = 0;
    else
      v13 = (char *)(*(_QWORD *)v12 + 8 * (*(_QWORD *)(v7 + 328) & 0x1FFLL));
LABEL_6:
    v14 = v13;
    while (1)
    {
      v15 = v11 == v10
          ? 0
          : *(_QWORD *)(v10 + (((*(_QWORD *)(v7 + 336) + v9) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(v7 + 336) + v9) & 0x1FF);
      if (v14 == (char *)v15)
        return pthread_mutex_unlock(v8);
      v16 = *(_QWORD *)v14;
      if (*(_QWORD *)v14 && a3[2] == *(_DWORD *)(v16 + 1392))
      {
        std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)(v7 + 296), (char *)v12, v13);
        *(_DWORD *)(v16 + 940) = v6;
        if (v4 < 5)
        {
          v18 = 0;
          *(_QWORD *)(v16 + 944) = 0;
        }
        else
        {
          *(_QWORD *)(v16 + 944) = a3[3];
          v18 = a3[4];
        }
        *(_QWORD *)(v16 + 952) = v18;
        v19 = *(void (**)(_QWORD, uint64_t))(v7 + 16);
        if (v19)
          v19(*(_QWORD *)(v7 + 24), v16);
        v20 = *(__CVBuffer **)(v16 + 8);
        if (v20)
          CVPixelBufferRelease(v20);
        v21 = *(__CVBuffer **)(v16 + 16);
        if (v21)
          CVPixelBufferRelease(v21);
        v22 = *(__CVBuffer **)(v16 + 200);
        if (v22)
          CVPixelBufferRelease(v22);
        v23 = *(__CVBuffer **)(v16 + 192);
        if (v23)
          CVPixelBufferRelease(v23);
        v24 = *(__CVBuffer **)(v16 + 24);
        if (v24)
          CVPixelBufferRelease(v24);
        if (*(_DWORD *)(v16 + 936))
        {
          v25 = 0;
          do
            CVPixelBufferRelease(*(CVPixelBufferRef *)(v16 + 32 + 8 * v25++));
          while (v25 < *(unsigned int *)(v16 + 936));
        }
        MEMORY[0x23B7D8B08](v16, 0x10E0C408739BADELL);
        if (*(_QWORD *)(v7 + 336))
          H9ISP::H9ISPGeneralProcessFrameReceiver::tickleNoDataTimer((pthread_mutex_t *)v7);
        else
          H9ISP::H9ISPGeneralProcessFrameReceiver::stopNoDataTimer((H9ISP::H9ISPGeneralProcessFrameReceiver *)v7);
        if (*(_BYTE *)(v7 + 184))
        {
          if (!*(_QWORD *)(v7 + 336))
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v7 + 176));
        }
        return pthread_mutex_unlock(v8);
      }
      v14 += 8;
      v13 += 8;
      if ((char *)(*(_QWORD *)v12 + 4096) == v13)
      {
        v17 = *(char **)(v12 + 8);
        v12 += 8;
        v13 = v17;
        goto LABEL_6;
      }
    }
  }
  return this;
}

void std::deque<H9ISP::H9ISPGeneralProcessFrameReceiverRequest *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H9ISP::H9ISPGeneralProcessFrameReceiverRequest *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::startNoDataTimer(H9ISP::H9ISPGeneralProcessFrameReceiver *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v5;
  CFRunLoopTimerContext context;

  v2 = (pthread_mutex_t *)((char *)this + 192);
  pthread_mutex_lock((pthread_mutex_t *)this + 3);
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 32);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 32));
    *((_QWORD *)this + 32) = 0;
  }
  context.version = 0;
  context.info = this;
  memset(&context.retain, 0, 24);
  Current = CFAbsoluteTimeGetCurrent();
  v5 = CFRunLoopTimerCreate(0, Current + *((double *)this + 44), 0.0, 0, 0, (CFRunLoopTimerCallBack)H9ISP::H9ISPGeneralProcessFrameReceiver::NoDataTimeout, &context);
  *((_QWORD *)this + 32) = v5;
  if (v5)
    CFRunLoopAddTimer(*((CFRunLoopRef *)this + 1), v5, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::GeneralProcessGeneric(uint64_t a1, uint64_t a2, char a3)
{
  pthread_mutex_t *v6;
  __CVBuffer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  unint64_t v14;
  __IOSurface *IOSurface;
  __IOSurface *v16;
  __CVBuffer *v17;
  __IOSurface *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL *v21;
  uint64_t v22;
  uint64_t v23;
  __IOSurface *v24;
  H9ISP *PixelFormatType;
  int FrameFormat;
  OSType v27;
  __CVBuffer *v28;
  int BytesPerRow;
  int Height;
  unsigned int v31;
  int BytesPerRowOfPlane;
  int v33;
  BOOL v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __CVBuffer *v47;
  unint64_t v48;
  _DWORD *v49;
  _BYTE inputStruct[4];
  __int16 v51;
  IOSurfaceID ID;
  int DataSize;
  IOSurfaceID v54;
  int v55;
  IOSurfaceID v56;
  int v57;
  int v58;
  _BYTE v59[926];
  uint64_t v60;
  int v61;

  v6 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  if (*(_BYTE *)(a1 + 344) || *(_DWORD *)a1 != 1)
  {
    pthread_mutex_unlock(v6);
    return 3758097122;
  }
  else
  {
    if (*(_QWORD *)(a2 + 200))
    {
      v7 = *(__CVBuffer **)(a2 + 192);
      if (v7)
      {
        v8 = *(unsigned int *)(a2 + 936);
        if ((v8 - 21) >= 0xFFFFFFEC)
        {
          v11 = 0;
          v12 = 8 * v8;
          while (*(_QWORD *)(a2 + v11 + 32))
          {
            v11 += 8;
            if (v12 == v11)
            {
              if ((a3 & 1) == 0)
              {
                CVPixelBufferRetain(v7);
                CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 200));
                v13 = *(__CVBuffer **)(a2 + 24);
                if (v13)
                  CVPixelBufferRetain(v13);
                if (*(_DWORD *)(a2 + 936))
                {
                  v14 = 0;
                  do
                    CVPixelBufferRetain(*(CVPixelBufferRef *)(a2 + 32 + 8 * v14++));
                  while (v14 < *(unsigned int *)(a2 + 936));
                }
              }
              bzero(inputStruct, 0x478uLL);
              IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 200));
              ID = IOSurfaceGetID(IOSurface);
              DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a2 + 200));
              v16 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a2 + 192));
              v54 = IOSurfaceGetID(v16);
              v55 = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a2 + 192));
              v17 = *(__CVBuffer **)(a2 + 24);
              if (v17)
              {
                v18 = CVPixelBufferGetIOSurface(v17);
                v56 = IOSurfaceGetID(v18);
                v57 = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a2 + 24));
              }
              LODWORD(v19) = *(_DWORD *)(a2 + 936);
              if ((_DWORD)v19)
              {
                v20 = 0;
                v21 = v59;
                v22 = 214;
                do
                {
                  v23 = a2 + 8 * v20;
                  v24 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(v23 + 32));
                  *(_DWORD *)(v21 - 46) = IOSurfaceGetID(v24);
                  PixelFormatType = (H9ISP *)CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v23 + 32));
                  FrameFormat = H9ISP::getFrameFormat(PixelFormatType);
                  *(_DWORD *)(v21 - 26) = FrameFormat;
                  *(_DWORD *)(v21 - 34) = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(v23 + 32), 0);
                  *(int32x4_t *)(v21 - 22) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a2 + 32 * v20 + 216)), (int32x4_t)vcvtq_u64_f64(*(float64x2_t *)(a2 + 32 * v20 + 232)));
                  *((_WORD *)v21 - 3) = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(v23 + 32));
                  *((_WORD *)v21 - 2) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(v23 + 32));
                  v27 = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v23 + 32));
                  *((_WORD *)v21 - 1) = *(_DWORD *)(a2 + 4 * v22);
                  v28 = *(__CVBuffer **)(v23 + 32);
                  if (FrameFormat)
                  {
                    BytesPerRow = CVPixelBufferGetBytesPerRow(v28);
                    Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(v23 + 32));
                    v31 = 0;
                    *(_DWORD *)(v21 - 42) = Height * BytesPerRow;
                  }
                  else
                  {
                    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v28, 0);
                    *(_DWORD *)(v21 - 42) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(v23 + 32)) * BytesPerRowOfPlane;
                    v33 = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(v23 + 32), 1uLL);
                    v31 = (CVPixelBufferGetHeight(*(CVPixelBufferRef *)(v23 + 32)) * v33) >> 1;
                  }
                  *(_DWORD *)(v21 - 38) = v31;
                  v35 = v27 != 2037741171 && v27 != 875704438;
                  *v21 = v35;
                  v21 += 48;
                  ++v20;
                  v19 = *(unsigned int *)(a2 + 936);
                  v36 = v22 - 213;
                  ++v22;
                }
                while (v36 < v19);
              }
              v58 = v19;
              v51 = *(_DWORD *)a2;
              *(_QWORD *)&v59[918] = H9ISP::H9ISPGeneralProcessFrameReceiver::FrameDone;
              if ((a3 & 1) != 0)
              {
                v9 = H9ISP::H9ISPDevice::ISP_GeneralProcessGeneric(*(_QWORD *)(a1 + 288), inputStruct, 0);
              }
              else
              {
                v37 = (_DWORD *)operator new();
                memcpy(v37, (const void *)a2, 0x578uLL);
                v49 = v37;
                v60 = a1;
                v38 = *(_DWORD *)(a1 + 360);
                *(_DWORD *)(a1 + 360) = v38 + 1;
                v37[348] = v38;
                v61 = v38;
                pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
                std::deque<H9ISP::H9ISPGeneralProcessFrameReceiverRequest *>::push_back((_QWORD *)(a1 + 296), &v49);
                pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
                v9 = H9ISP::H9ISPDevice::ISP_GeneralProcessGeneric(*(_QWORD *)(a1 + 288), inputStruct, *(_DWORD *)(a1 + 272));
                if ((_DWORD)v9)
                {
                  pthread_mutex_lock((pthread_mutex_t *)(a1 + 112));
                  v39 = *(_QWORD *)(a1 + 328);
                  v40 = *(_QWORD *)(a1 + 304);
                  v41 = *(_QWORD *)(a1 + 312);
                  v42 = (char *)(v40 + 8 * (v39 >> 9));
                  if (v41 == v40)
                    v43 = 0;
                  else
                    v43 = (char *)(*(_QWORD *)v42 + 8 * (*(_QWORD *)(a1 + 328) & 0x1FFLL));
LABEL_41:
                  v44 = v43;
                  while (1)
                  {
                    if (v41 == v40)
                      v45 = 0;
                    else
                      v45 = *(_QWORD *)(v40 + (((*(_QWORD *)(a1 + 336) + v39) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*(_QWORD *)(a1 + 336) + v39) & 0x1FF);
                    if (v44 == (char *)v45)
                    {
                      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
                      goto LABEL_7;
                    }
                    if (*(_QWORD *)v44 && *(_DWORD *)(*(_QWORD *)v44 + 1392) == v49[348])
                      break;
                    v44 += 8;
                    v43 += 8;
                    if ((char *)(*(_QWORD *)v42 + 4096) == v43)
                    {
                      v46 = (char *)*((_QWORD *)v42 + 1);
                      v42 += 8;
                      v43 = v46;
                      goto LABEL_41;
                    }
                  }
                  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)(a1 + 296), v42, v43);
                  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 112));
                  if (v49)
                    MEMORY[0x23B7D8B08](v49, 0x10E0C408739BADELL);
                  v49 = 0;
                  CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 200));
                  CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 192));
                  v47 = *(__CVBuffer **)(a2 + 24);
                  if (v47)
                    CVPixelBufferRelease(v47);
                  if (*(_DWORD *)(a2 + 936))
                  {
                    v48 = 0;
                    do
                      CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 32 + 8 * v48++));
                    while (v48 < *(unsigned int *)(a2 + 936));
                  }
                }
                else if (*(_QWORD *)(a1 + 336) == 1)
                {
                  H9ISP::H9ISPGeneralProcessFrameReceiver::startNoDataTimer((H9ISP::H9ISPGeneralProcessFrameReceiver *)a1);
                }
              }
              goto LABEL_7;
            }
          }
        }
      }
    }
    v9 = 3758097090;
LABEL_7:
    pthread_mutex_unlock(v6);
  }
  return v9;
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::tickleNoDataTimer(pthread_mutex_t *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *sig;
  CFAbsoluteTime Current;

  v2 = this + 3;
  pthread_mutex_lock(this + 3);
  sig = (__CFRunLoopTimer *)this[4].__sig;
  if (sig)
  {
    Current = CFAbsoluteTimeGetCurrent();
    CFRunLoopTimerSetNextFireDate(sig, Current + *(double *)&this[5].__opaque[24]);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiver::NoDataTimeout(H9ISP::H9ISPGeneralProcessFrameReceiver *this, __CFRunLoopTimer *a2, void *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const void **v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  const void **v12;
  uint64_t (*v13)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  result = puts("H9ISPGeneralProcessFrameReceiver::NoDataTimeout!");
  v5 = *((_QWORD *)a2 + 38);
  v6 = *((_QWORD *)a2 + 39);
  v7 = (_QWORD *)(v5 + 8 * (*((_QWORD *)a2 + 41) >> 9));
  if (v6 == v5)
    v8 = 0;
  else
    v8 = (const void **)(*v7 + 8 * (*((_QWORD *)a2 + 41) & 0x1FFLL));
  while (1)
  {
    if (v6 == v5)
    {
      v10 = 0;
    }
    else
    {
      v9 = *((_QWORD *)a2 + 42) + *((_QWORD *)a2 + 41);
      v10 = *(_QWORD *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF);
    }
    if (v8 == (const void **)v10)
      break;
    v11 = *v8++;
    result = printf("H9ISPGeneralProcessFrameReceiver: Request not returned 0x%p\n", v11);
    if ((const void **)((char *)v8 - *v7) == (const void **)4096)
    {
      v12 = (const void **)v7[1];
      ++v7;
      v8 = v12;
    }
    v5 = *((_QWORD *)a2 + 38);
    v6 = *((_QWORD *)a2 + 39);
  }
  v13 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)a2 + 4);
  if (v13)
    return v13(0, 0, 0, 0, 0, *((_QWORD *)a2 + 5));
  return result;
}

uint64_t H9ISP::CreateH9ISPGeneralProcessFrameReceiver(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  pthread_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  pthread_mutex_t *v10;
  pthread_mutex_t v11;
  pthread_attr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v11);
  v6 = 0;
  v2 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 16);
  v8 = v2;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = &v11;
  pthread_attr_init(&v12);
  pthread_attr_setdetachstate(&v12, 2);
  pthread_create(&v5, &v12, (void *(__cdecl *)(void *))H9ISP::H9ISPGeneralProcessFrameReceiverRTThreadStart, &v6);
  pthread_attr_destroy(&v12);
  H9ISP::H9ISPThreadReadySyncer::wait(&v11);
  **(_QWORD **)a1 = v6;
  if (v6)
    v3 = 0;
  else
    v3 = 3758097084;
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v11);
  return v3;
}

void sub_235806F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t H9ISP::H9ISPGeneralProcessFrameReceiverRTThreadStart(uint64_t a1)
{
  _opaque_pthread_t *v2;
  H9ISP *v3;
  uint64_t v4;
  int v5;
  __int128 v6;

  pthread_setname_np("H9ISPGeneralProcessFrameReceiverRealTimeThread");
  v2 = pthread_self();
  v3 = (H9ISP *)pthread_mach_thread_np(v2);
  H9ISP::H9ISPSetMachThreadPriority(v3, 47);
  H9ISP::H9ISPThreadReadySyncer::lock(*(pthread_mutex_t **)(a1 + 48));
  v4 = operator new();
  H9ISP::H9ISPGeneralProcessFrameReceiver::H9ISPGeneralProcessFrameReceiver((H9ISP::H9ISPGeneralProcessFrameReceiver *)v4, *(H9ISP::H9ISPDevice **)(a1 + 40));
  *(_QWORD *)(v4 + 8) = CFRunLoopGetCurrent();
  v5 = H9ISP::H9ISPGeneralProcessFrameReceiver::addIODispatcherToRunLoop((H9ISP::H9ISPGeneralProcessFrameReceiver *)v4);
  if (v5)
  {
    H9ISP::H9ISPGeneralProcessFrameReceiver::~H9ISPGeneralProcessFrameReceiver((H9ISP::H9ISPGeneralProcessFrameReceiver *)v4);
    MEMORY[0x23B7D8B08]();
    v4 = 0;
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(v4 + 32) = v6;
  }
  *(_QWORD *)a1 = v4;
  H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 48));
  if (!v5 && v4)
    CFRunLoopRun();
  return 0;
}

void sub_235807058(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x10A0C4053130460);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::DestroyH9ISPGeneralProcessFrameReceiver(H9ISP *this, H9ISP::H9ISPGeneralProcessFrameReceiver *a2)
{
  void *v3;

  v3 = (void *)*((_QWORD *)this + 1);
  CFRetain(v3);
  H9ISP::H9ISPGeneralProcessFrameReceiver::~H9ISPGeneralProcessFrameReceiver(this);
  MEMORY[0x23B7D8B08]();
  CFRunLoopStop((CFRunLoopRef)v3);
  CFRelease(v3);
  return 0;
}

void std::deque<H9ISP::H9ISPGeneralProcessFrameReceiverRequest *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23580739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

H9ISP::H9ISPThreadReadySyncer *H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer(H9ISP::H9ISPThreadReadySyncer *this)
{
  pthread_mutex_init((pthread_mutex_t *)this, 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 64), 0);
  pthread_mutex_lock((pthread_mutex_t *)this);
  return this;
}

void H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer(H9ISP::H9ISPThreadReadySyncer *this)
{
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 64));
  pthread_mutex_destroy((pthread_mutex_t *)this);
}

uint64_t H9ISP::H9ISPThreadReadySyncer::wait(pthread_mutex_t *this)
{
  return pthread_cond_wait((pthread_cond_t *)&this[1], this);
}

uint64_t H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(H9ISP::H9ISPThreadReadySyncer *this)
{
  pthread_cond_signal((pthread_cond_t *)((char *)this + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

uint64_t H9ISP::H9ISPFrameReceiver::H9ISPFrameReceiver(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5, char a6, char a7, int a8, int a9)
{
  char v11;
  uint64_t v12;
  int v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v19[5];
  _QWORD block[5];
  unsigned int v21;
  pthread_mutexattr_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a2;
  *(_DWORD *)(a1 + 316) = a3;
  *(_DWORD *)(a1 + 368) = a4;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = -1;
  *(_BYTE *)(a1 + 425) = a6;
  *(_BYTE *)(a1 + 426) = a7;
  *(_DWORD *)(a1 + 428) = a8;
  *(_DWORD *)(a1 + 432) = a9;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 660) = 1;
  *(_QWORD *)(a1 + 680) = 0x4000000000000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 72), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 200), 0);
  *(_QWORD *)(a1 + 264) = 0;
  H9ISP::gFrameReceiverCFPrefs = H9ISP::H9ISPGetCFPreferenceNumber(CFSTR("SmileAndBlinkFD"), CFSTR("com.apple.coremedia"), 0);
  pthread_mutexattr_init(&v22);
  pthread_mutexattr_settype(&v22, 2);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 136), &v22);
  pthread_mutexattr_destroy(&v22);
  v21 = 0;
  H9ISP::H9ISPDevice::GetISPCounterFrequency(*(H9ISP::H9ISPDevice **)(a1 + 304), &v21, (double *)(a1 + 360));
  v11 = 0;
  if (a5 && *(_DWORD *)(a1 + 368))
  {
    *(_DWORD *)(a1 + 384) = *a5;
    v11 = 1;
  }
  *(_BYTE *)(a1 + 388) = v11;
  *(_QWORD *)(a1 + 464) = 0xFFFF00000004;
  *(_WORD *)(a1 + 436) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 484) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 667) = 0;
  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(_DWORD *)(*(_QWORD *)(v12 + 56) + 80 * *(unsigned int *)(a1 + 316) + 16);
  switch(v13)
  {
    case 1718775412:
      *(_QWORD *)(a1 + 472) = "com.apple.isp.frontsensortemperature";
      *(_QWORD *)(a1 + 448) = 0;
LABEL_12:
      v17 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 16) + 72);
      if (v17)
      {
        v19[0] = MEMORY[0x24BDAC760];
        v19[1] = 0x40000000;
        v19[2] = ___ZN5H9ISP18H9ISPFrameReceiverC2EPNS_11H9ISPDeviceEjjPNS_47H9ISPFrameReceiverImageCompensationParamsStructEbbjj_block_invoke_2;
        v19[3] = &__block_descriptor_tmp_6;
        v19[4] = a1;
        dispatch_sync(v17, v19);
      }
      goto LABEL_15;
    case 1919246706:
      v14 = "com.apple.isp.focusing";
      v15 = "com.apple.isp.backsensortemperature";
      break;
    case 1919251564:
      v14 = "com.apple.isp.backtelefocusing";
      v15 = "com.apple.isp.backtelesensortemperature";
      break;
    default:
      *(_QWORD *)(a1 + 472) = 0;
      *(_QWORD *)(a1 + 448) = 0;
      goto LABEL_15;
  }
  *(_QWORD *)(a1 + 472) = v15;
  *(_QWORD *)(a1 + 448) = v14;
  v16 = *(NSObject **)(*(_QWORD *)(v12 + 16) + 72);
  if (!v16)
    goto LABEL_12;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN5H9ISP18H9ISPFrameReceiverC2EPNS_11H9ISPDeviceEjjPNS_47H9ISPFrameReceiverImageCompensationParamsStructEbbjj_block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = a1;
  dispatch_sync(v16, block);
  if (*(_QWORD *)(a1 + 472))
    goto LABEL_12;
LABEL_15:
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 496));
  *(_DWORD *)(a1 + 656) = H9ISP::gFrameReceiverCFPrefs;
  return a1;
}

{
  return H9ISP::H9ISPFrameReceiver::H9ISPFrameReceiver(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_235807784(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100]((_QWORD *)(v1 + 552));
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiverC2EPNS_11H9ISPDeviceEjjPNS_47H9ISPFrameReceiverImageCompensationParamsStructEbbjj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_register_check(*(const char **)(v1 + 448), (int *)(v1 + 456));
  *(_BYTE *)(v1 + 460) = (_DWORD)result == 0;
  return result;
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiverC2EPNS_11H9ISPDeviceEjjPNS_47H9ISPFrameReceiverImageCompensationParamsStructEbbjj_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_register_check(*(const char **)(v1 + 472), (int *)(v1 + 480));
  *(_BYTE *)(v1 + 484) = (_DWORD)result == 0;
  return result;
}

void H9ISP::H9ISPFrameReceiver::~H9ISPFrameReceiver(H9ISP::H9ISPFrameReceiver *this)
{
  H9ISP::H9ISPImageCompensator *v2;
  H9ISP::H9ISPCFLocalMessagePort *v3;
  __CFRunLoop *v4;
  __CFRunLoopSource *RunLoopSource;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  H9ISP::H9ISPFrameReceiverBufferPool *v9;
  int v10;
  uint64_t i;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD v15[5];
  _QWORD block[5];

  if (*(_DWORD *)this)
    H9ISP::H9ISPFrameReceiver::stopReceive(this);
  if (*((_QWORD *)this + 36))
    H9ISP::H9ISPFrameReceiver::removeIODispatcherFromRunLoop(this);
  v2 = (H9ISP::H9ISPImageCompensator *)*((_QWORD *)this + 47);
  if (v2)
  {
    H9ISP::H9ISPImageCompensator::~H9ISPImageCompensator(v2);
    MEMORY[0x23B7D8B08]();
  }
  v3 = (H9ISP::H9ISPCFLocalMessagePort *)*((_QWORD *)this + 75);
  if (v3)
  {
    v4 = (__CFRunLoop *)*((_QWORD *)this + 1);
    RunLoopSource = H9ISP::H9ISPCFLocalMessagePort::GetRunLoopSource(v3);
    CFRunLoopRemoveSource(v4, RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    v6 = *((_QWORD *)this + 75);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 75) = 0;
  }
  while (1)
  {
    v7 = *((_QWORD *)this + 68);
    if (!v7)
      break;
    v8 = *((_QWORD *)this + 67);
    v9 = *(H9ISP::H9ISPFrameReceiverBufferPool **)(*(_QWORD *)(*((_QWORD *)this + 64) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                 + 8 * (v8 & 0x1FF));
    *((_QWORD *)this + 68) = v7 - 1;
    *((_QWORD *)this + 67) = v8 + 1;
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 504, 1);
    v10 = 0;
    for (i = 24; i != 29; ++i)
      v10 += *((unsigned __int8 *)v9 + i);
    if (!v10)
    {
      H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v9);
      MEMORY[0x23B7D8B08]();
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 72));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 136));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 200));
  if (*((_BYTE *)this + 460))
  {
    v12 = *(NSObject **)(*(_QWORD *)(*((_QWORD *)this + 38) + 16) + 72);
    if (v12)
    {
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = ___ZN5H9ISP18H9ISPFrameReceiverD2Ev_block_invoke;
      block[3] = &__block_descriptor_tmp_7_0;
      block[4] = this;
      dispatch_sync(v12, block);
    }
    *((_BYTE *)this + 460) = 0;
  }
  if (*((_BYTE *)this + 484))
  {
    v13 = *(NSObject **)(*(_QWORD *)(*((_QWORD *)this + 38) + 16) + 72);
    if (v13)
    {
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 0x40000000;
      v15[2] = ___ZN5H9ISP18H9ISPFrameReceiverD2Ev_block_invoke_2;
      v15[3] = &__block_descriptor_tmp_8;
      v15[4] = this;
      dispatch_sync(v13, v15);
    }
  }
  H9ISP::H9ISPDevice::ISP_FlushInactiveDARTMappings(*((H9ISP::H9ISPDevice **)this + 38));
  v14 = *((_QWORD *)this + 37);
  if (v14)
    dispatch_release(v14);
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100]((_QWORD *)this + 69);
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100]((_QWORD *)this + 63);
}

uint64_t H9ISP::H9ISPFrameReceiver::stopReceive(H9ISP::H9ISPFrameReceiver *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  NSObject *v17;
  H9ISP::H9ISPImageCompensator *v18;
  uint64_t i;
  unint64_t v20;
  CVPixelBufferRef *v21;
  __CVBuffer *v22;
  H9ISP::H9ISPFrameReceiverBufferPool *v23;
  uint64_t v25;
  unsigned __int8 v26[8];
  int v27;

  v2 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  if (*(_DWORD *)this)
  {
    kdebug_trace();
    H9ISP::H9ISPFrameReceiver::stopNoDataTimer(this);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
    *((_BYTE *)this + 312) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
    v3 = H9ISP::H9ISPDevice::StopCamera(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79));
    if ((_DWORD)v3)
    {
      v4 = v3;
      printf("H9ISPFrameReceiver::stopReceive - StopCamera error: 0x%08X\n", v3);
    }
    else if (*((_BYTE *)this + 436)
           && (v5 = H9ISP::H9ISPDevice::StopFaceDetect(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79)),
               (_DWORD)v5))
    {
      v4 = v5;
      printf("H9ISPFrameReceiver::stopReceive - StopFaceDetect error: 0x%08X\n");
    }
    else
    {
      v6 = H9ISP::H9ISPDevice::ReturnAllUnusedBuffers(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79));
      if ((_DWORD)v6)
      {
        v4 = v6;
        printf("H9ISPFrameReceiver::stopReceive - ReturnAllUnusedBuffers error: 0x%08X\n");
      }
      else if (*((_DWORD *)this + 92)
             && (v25 = H9ISP::H9ISPDevice::DisableALS(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79)),
                 (_DWORD)v25))
      {
        v4 = v25;
        printf("H9ISPFrameReceiver::stopReceive - DisableALS error: 0x%08X\n");
      }
      else if (*((_BYTE *)this + 425))
      {
        v4 = H9ISP::H9ISPDevice::EnableTNR(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), 0, *((unsigned __int8 *)this + 426));
        if ((_DWORD)v4)
          printf("H9ISPFrameReceiver::stopReceive - Stop TNR error: 0x%08X\n");
      }
      else
      {
        v4 = 0;
      }
    }
    v7 = 2001;
    while (1)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
      v8 = *((_QWORD *)this + 74);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
      if (!v8)
        break;
      usleep(0x3E8u);
      if (!--v7)
      {
        printf("H9ISPFrameReceiver: Did not get all pending frames back from kernel. remaining: %d.\n", *((_QWORD *)this + 74));
        v9 = *((_QWORD *)this + 70);
        v10 = (_QWORD *)(v9 + 8 * (*((_QWORD *)this + 73) >> 9));
        v11 = *((_QWORD *)this + 71);
        if (v11 == v9)
          v12 = 0;
        else
          v12 = (uint64_t *)(*v10 + 8 * (*((_QWORD *)this + 73) & 0x1FFLL));
        while (1)
        {
          if (v11 == v9)
          {
            v14 = 0;
          }
          else
          {
            v13 = *((_QWORD *)this + 74) + *((_QWORD *)this + 73);
            v14 = *(_QWORD *)(v9 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF);
          }
          if (v12 == (uint64_t *)v14)
            break;
          v15 = *v12++;
          printf("H9ISPFrameReceiver: Buffer with IOSurface ID 0x%08X was not returned\n", *(_DWORD *)(v15 + 8));
          if ((uint64_t *)((char *)v12 - *v10) == (uint64_t *)4096)
          {
            v16 = (uint64_t *)v10[1];
            ++v10;
            v12 = v16;
          }
          v9 = *((_QWORD *)this + 70);
          v11 = *((_QWORD *)this + 71);
        }
        break;
      }
    }
    v17 = *((_QWORD *)this + 37);
    if (v17)
      dispatch_sync(v17, &__block_literal_global_0);
    *((_BYTE *)this + 312) = 0;
    *(_DWORD *)this = 0;
    v18 = (H9ISP::H9ISPImageCompensator *)*((_QWORD *)this + 47);
    if (v18)
      H9ISP::H9ISPImageCompensator::deactivate(v18);
    for (i = *((_QWORD *)this + 74); i; i = *((_QWORD *)this + 74))
    {
      v20 = *((_QWORD *)this + 73);
      v21 = *(CVPixelBufferRef **)(*(_QWORD *)(*((_QWORD *)this + 70) + ((v20 >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * (v20 & 0x1FF));
      *((_QWORD *)this + 74) = i - 1;
      *((_QWORD *)this + 73) = v20 + 1;
      std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 552, 1);
      if (v21)
      {
        CVPixelBufferRelease(*v21);
        MEMORY[0x23B7D8B08](v21, 0x1020C4093CA8EA1);
      }
    }
    v22 = (__CVBuffer *)*((_QWORD *)this + 42);
    if (v22)
    {
      CVPixelBufferRelease(v22);
      *((_QWORD *)this + 42) = 0;
    }
    if (*((_QWORD *)this + 49))
    {
      *(_QWORD *)v26 = 0x10400000000;
      v27 = *((_DWORD *)this + 79);
      H9ISP::H9ISPDevice::ISP_SendCommand(*((H9ISP::H9ISPDevice **)this + 38), v26, 0xCu, 0, 0xFFFFFFFF);
      CVPixelBufferRelease(*((CVPixelBufferRef *)this + 49));
      *((_QWORD *)this + 49) = 0;
    }
    v23 = (H9ISP::H9ISPFrameReceiverBufferPool *)*((_QWORD *)this + 78);
    if (v23)
    {
      H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v23);
      MEMORY[0x23B7D8B08]();
      *((_QWORD *)this + 78) = 0;
    }
    pthread_mutex_unlock(v2);
    kdebug_trace();
  }
  else
  {
    pthread_mutex_unlock(v2);
    return 3758097122;
  }
  return v4;
}

void H9ISP::H9ISPFrameReceiver::removeIODispatcherFromRunLoop(H9ISP::H9ISPFrameReceiver *this)
{
  __CFRunLoopSource *v2;
  __CFMachPort *v3;
  mach_port_name_t v4;

  v2 = (__CFRunLoopSource *)*((_QWORD *)this + 36);
  if (v2)
  {
    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 1), v2, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    CFRelease(*((CFTypeRef *)this + 36));
    *((_QWORD *)this + 36) = 0;
  }
  v3 = (__CFMachPort *)*((_QWORD *)this + 34);
  if (v3)
  {
    CFMachPortInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 34));
    *((_QWORD *)this + 34) = 0;
  }
  v4 = *((_DWORD *)this + 70);
  if (v4)
  {
    mach_port_mod_refs(*MEMORY[0x24BDAEC58], v4, 1u, -1);
    *((_DWORD *)this + 70) = 0;
  }
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiverD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v1 + 456), 0);
  notify_post(*(const char **)(v1 + 448));
  return notify_cancel(*(_DWORD *)(v1 + 456));
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiverD2Ev_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = notify_cancel(*(_DWORD *)(v1 + 480));
  *(_BYTE *)(v1 + 484) = 0;
  return result;
}

uint64_t H9ISP::H9ISPFrameReceiver::setupFrameReceiver(H9ISP::H9ISPFrameReceiver *this)
{
  H9ISP::H9ISPImageCompensator *v2;

  if (*((_DWORD *)this + 92))
  {
    v2 = (H9ISP::H9ISPImageCompensator *)operator new();
    H9ISP::H9ISPImageCompensator::H9ISPImageCompensator(v2, *((H9ISP::H9ISPDevice **)this + 38), this, *((_DWORD *)this + 79), *((_DWORD *)this + 92));
    *((_QWORD *)this + 47) = v2;
  }
  *((_QWORD *)this + 1) = CFRunLoopGetCurrent();
  return H9ISP::H9ISPFrameReceiver::addIODispatcherToRunLoop(this);
}

void sub_235807F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1070C4098B37D1ELL);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::H9ISPFrameReceiver::addIODispatcherToRunLoop(H9ISP::H9ISPFrameReceiver *this)
{
  uint64_t v2;
  const __CFAllocator *v3;
  __CFMachPort *v4;
  __CFRunLoopSource *RunLoopSource;
  Boolean shouldFreeInfo;
  CFMachPortContext context;

  v2 = IOCreateReceivePort(0x39u, (mach_port_t *)this + 70);
  if (!(_DWORD)v2)
  {
    v2 = 3758097085;
    shouldFreeInfo = 0;
    context.version = 1;
    context.info = this;
    memset(&context.retain, 0, 24);
    v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v4 = CFMachPortCreateWithPort((CFAllocatorRef)*MEMORY[0x24BDBD240], *((_DWORD *)this + 70), MEMORY[0x24BDD7FD8], &context, &shouldFreeInfo);
    *((_QWORD *)this + 34) = v4;
    if (v4)
    {
      RunLoopSource = CFMachPortCreateRunLoopSource(v3, v4, 0);
      *((_QWORD *)this + 36) = RunLoopSource;
      if (RunLoopSource)
      {
        CFRunLoopAddSource(*((CFRunLoopRef *)this + 1), RunLoopSource, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t H9ISP::H9ISPFrameReceiver::setPCEPreset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t H9ISP::H9ISPFrameReceiver::EnablePDEStreaming(uint64_t a1, char a2, int a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int *v14;
  unint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  int v34;
  int *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43[2];
  unsigned __int8 v44[8];
  int v45;
  uint64_t v46;
  unsigned __int8 v47[4];
  __int16 v48;
  int v49;
  int v50;
  unsigned __int8 v51[16];
  _OWORD v52[20];

  v8 = *(_DWORD *)(a1 + 16);
  memset(&v52[18], 0, 32);
  if (v8 <= 3)
    v9 = v8;
  else
    v9 = 0;
  memset(v52, 0, 288);
  *(_OWORD *)v51 = 0uLL;
  *(_WORD *)&v51[4] = 278;
  *(_DWORD *)&v51[8] = *(_DWORD *)(a1 + 316);
  *(_DWORD *)&v51[12] = 20;
  v10 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v51, 0x150u, 0, 0xFFFFFFFF);
  if ((_DWORD)v10)
  {
    v11 = v10;
    printf("EnablePDEStreaming - CISP_CMD_CH_BUFFER_POOL_CONFIG_GET error: 0x%08X\n");
    return v11;
  }
  v48 = 24577;
  v49 = *(_DWORD *)(a1 + 316);
  v50 = 0;
  v13 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v47, 0x10u, 0, 0xFFFFFFFF);
  LODWORD(v15) = v50;
  v16 = (double)v15 + 0.4375;
  if (v13)
    v17 = 0.0;
  else
    v17 = v16;
  if ((a2 & 0x21) != 0)
  {
    v18 = *(unsigned int *)&v51[12];
    if (!*(_DWORD *)&v51[12])
      goto LABEL_20;
    v19 = (unsigned __int16 *)v52 + 1;
    while (*(v19 - 1) != 14)
    {
      v19 += 8;
      if (!--v18)
        goto LABEL_20;
    }
    v20 = *v19;
    printf("AY_DEBUG: pdeDXPoolID=%d\n", *v19);
    if (v20 == 0xFFFF)
    {
LABEL_20:
      puts("EnablePDEStreaming - Firmware PDE_DX pool not supported for this channel");
      v11 = 3758097095;
    }
    else
    {
      *(_QWORD *)v44 = 0x600200000000;
      v45 = *(_DWORD *)(a1 + 316);
      v46 = 0x200014000F00000;
      v21 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v44, 0x14u, 0, 0xFFFFFFFF);
      if ((_DWORD)v21)
        goto LABEL_49;
      LODWORD(v38) = 64;
      HIDWORD(v38) = a3 + a4 + 1;
      H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, 12, v20, 240, 320, 0, 0, 3, v17, 1, 64, v38, 0, a4, 0, 270, CFSTR("PDE_DX"), 0x1FFF, 0,
        0);
      v11 = 0;
      a2 &= ~0x20u;
    }
  }
  else
  {
    v11 = 0;
  }
  if ((a2 & 2) != 0)
  {
    v22 = *(unsigned int *)&v51[12];
    if (!*(_DWORD *)&v51[12])
      goto LABEL_30;
    v23 = (unsigned __int16 *)v52 + 1;
    while (*(v23 - 1) != 15)
    {
      v23 += 8;
      if (!--v22)
        goto LABEL_30;
    }
    v24 = *v23;
    printf("AY_DEBUG: pdeDYPoolID=%d\n", *v23);
    if (v24 == 0xFFFF)
    {
LABEL_30:
      puts("EnablePDEStreaming - Firmware PDE_DY pool not supported for this channel");
      v11 = 3758097095;
    }
    else
    {
      *(_QWORD *)v44 = 0x600200000000;
      v45 = *(_DWORD *)(a1 + 316);
      v46 = 0x100014000F00001;
      v21 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v44, 0x14u, 0, 0xFFFFFFFF);
      if ((_DWORD)v21)
        goto LABEL_49;
      LODWORD(v39) = 64;
      HIDWORD(v39) = a3 + a4 + 1;
      H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, 13, v24, 240, 320, 0, 0, 5, 0.0, 1, 64, v39, 0, a4, 0, 0, CFSTR("PDE_DY"), 0, 0,
        0);
      v11 = 0;
    }
  }
  if ((a2 & 4) == 0)
    goto LABEL_41;
  v25 = *(unsigned int *)&v51[12];
  if (*(_DWORD *)&v51[12])
  {
    v26 = (unsigned __int16 *)v52 + 1;
    while (*(v26 - 1) != 16)
    {
      v26 += 8;
      if (!--v25)
        goto LABEL_40;
    }
    v27 = *v26;
    if (v27 != 0xFFFF)
    {
      *(_QWORD *)v43 = 0;
      H9ISP::H9ISPGetYUVSBufferParamsForDataBufferSize(40448, &v43[1], v43, v14);
      *(_QWORD *)v44 = 0x600200000000;
      v45 = *(_DWORD *)(a1 + 316);
      LOWORD(v46) = 2;
      WORD1(v46) = v43[1];
      WORD2(v46) = v43[0];
      HIWORD(v46) = 2 * LOWORD(v43[1]);
      v21 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v44, 0x14u, 0, 0xFFFFFFFF);
      if (!(_DWORD)v21)
      {
        HIDWORD(v40) = a3 + a4 + 1;
        LODWORD(v40) = 64;
        H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, 14, v27, v43[1], v43[0], 0, 0, 1, 0.0, 1, 64, v40, 0, a4, 0, 0, CFSTR("PDE_GMS"), 0, 0,
          0);
        v11 = 0;
        goto LABEL_41;
      }
LABEL_49:
      v31 = v21;
      printf("EnablePDEStreaming - CISP_CMD_CH_PDE_OUTPUT_CONFIG error: 0x%08X\n", v21);
      return v31;
    }
  }
LABEL_40:
  puts("EnablePDEStreaming - Firmware PDE_GMS pool not supported for this channel");
  v11 = 3758097095;
LABEL_41:
  if ((a2 & 8) == 0)
    goto LABEL_51;
  v28 = *(unsigned int *)&v51[12];
  if (!*(_DWORD *)&v51[12])
    goto LABEL_50;
  v29 = (unsigned __int16 *)v52 + 1;
  while (*(v29 - 1) != 17)
  {
    v29 += 8;
    if (!--v28)
      goto LABEL_50;
  }
  v30 = *v29;
  if (v30 == 0xFFFF)
  {
LABEL_50:
    puts("EnablePDEStreaming - Firmware PDE_SCORE pool not supported for this channel");
    v11 = 3758097095;
LABEL_51:
    if ((a2 & 0x10) == 0)
      return v11;
    goto LABEL_52;
  }
  *(_QWORD *)v44 = 0x600200000000;
  v45 = *(_DWORD *)(a1 + 316);
  v46 = 0x14001E000A00003;
  v21 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v44, 0x14u, 0, 0xFFFFFFFF);
  if ((_DWORD)v21)
    goto LABEL_49;
  LODWORD(v41) = 64;
  HIDWORD(v41) = a3 + a4 + 1;
  H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, 15, v30, 160, 480, 0, 0, 1, 0.0, 1, 64, v41, 0, a4, 0, 0, CFSTR("PDE_SCORE"), 0, 0,
    0);
  v11 = 0;
  if ((a2 & 0x10) == 0)
    return v11;
LABEL_52:
  v32 = *(unsigned int *)&v51[12];
  if (!*(_DWORD *)&v51[12])
    goto LABEL_60;
  v33 = (unsigned __int16 *)v52 + 1;
  while (*(v33 - 1) != 18)
  {
    v33 += 8;
    if (!--v32)
      goto LABEL_60;
  }
  v34 = *v33;
  if (v34 == 0xFFFF)
  {
LABEL_60:
    puts("EnablePDEStreaming - Firmware PDE_NORM_DX pool not supported for this channel");
    return 3758097095;
  }
  else
  {
    v35 = (int *)((char *)&H9ISP::PCERearPresets + 8 * v9);
    v37 = *v35;
    v36 = v35[1];
    *(_QWORD *)v44 = 0x600200000000;
    v45 = *(_DWORD *)(a1 + 316);
    LOWORD(v46) = 4;
    WORD1(v46) = v36;
    WORD2(v46) = v37;
    HIWORD(v46) = (2 * v36 + 63) & 0xFFC0;
    v11 = H9ISP::H9ISPDevice::ISP_SendCommand(*(H9ISP::H9ISPDevice **)(a1 + 304), v44, 0x14u, 0, 0xFFFFFFFF);
    if ((_DWORD)v11)
    {
      printf("EnablePDEStreaming - CISP_CMD_CH_PDE_OUTPUT_CONFIG error: 0x%08X\n");
    }
    else
    {
      LODWORD(v42) = 64;
      HIDWORD(v42) = a3 + a4 + 1;
      H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(a1, 16, v34, v36, v37, 0, 0, 3, v17, 1, 64, v42, 0, a4, 0, 270, CFSTR("PDE_NORM_DX"), 4095, 0,
        0);
    }
  }
  return v11;
}

uint64_t H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9, char a10, int a11, uint64_t a12, int a13, int a14, int a15, int a16, const void *a17, int a18, uint64_t a19, int a20)
{
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  H9ISP::H9ISPFrameReceiverBufferPool *v45;
  unsigned int v46;
  unsigned int v47;
  __CVBuffer *v48;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v51;
  uint64_t (**v52)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *);
  uint64_t v53;
  int v54;
  H9ISP::H9ISPFrameReceiverBufferPool *v55;
  uint64_t v56;
  uint64_t v58;
  pthread_mutex_t *v59;
  uint64_t v60;
  CVPixelBufferRef pixelBuffer;
  H9ISP::H9ISPFrameReceiverBufferPool *v62;
  _QWORD v63[82];

  v63[80] = *MEMORY[0x24BDAC8D0];
  v59 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  v29 = *(_QWORD *)(a1 + 512);
  v30 = *(_QWORD *)(a1 + 536);
  v31 = (_QWORD *)(v29 + 8 * (v30 >> 9));
  v32 = *(_QWORD *)(a1 + 520);
  if (v32 == v29)
    v33 = 0;
  else
    v33 = (_QWORD *)(*v31 + 8 * (*(_QWORD *)(a1 + 536) & 0x1FFLL));
LABEL_4:
  v34 = v33 - 512;
  while (1)
  {
    v35 = v32 == v29
        ? 0
        : *(_QWORD *)(v29 + (((*(_QWORD *)(a1 + 544) + v30) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 544) + v30) & 0x1FF);
    if (v33 == (_QWORD *)v35)
      break;
    v36 = *(unsigned int *)(a1 + 316);
    if (v36 > 4)
      v37 = -1;
    else
      v37 = *(_DWORD *)(*v33 + 4 * v36 + 4);
    if (v37 == a3)
    {
      pthread_mutex_unlock(v59);
      return 3758097122;
    }
    ++v33;
    if ((_QWORD *)*v31 == ++v34)
    {
      v38 = (_QWORD *)v31[1];
      ++v31;
      v33 = v38;
      goto LABEL_4;
    }
  }
  v39 = operator new();
  v40 = a8;
  v41 = v39;
  HIDWORD(v58) = a11;
  LOBYTE(v58) = a10;
  H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool(v39, *(_QWORD *)(a1 + 304), a2, a4, a5, a6, a7, v40, v58, a12, a13, a14, a15, a17, a19, a20);
  v62 = (H9ISP::H9ISPFrameReceiverBufferPool *)v41;
  *(float *)(v41 + 108) = a9;
  *(_DWORD *)(v41 + 104) = a16;
  *(_DWORD *)(v41 + 112) = a18;
  v42 = *(unsigned int *)(a1 + 316);
  if (v42 <= 4)
    *(_DWORD *)(v41 + 4 * v42 + 4) = a3;
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::push_back((_QWORD *)(a1 + 504), &v62);
  switch(a2)
  {
    case 1:
      *(_BYTE *)(a1 + 437) = 1;
      break;
    case 4:
      ++*(_DWORD *)(a1 + 440);
      break;
    case 3:
      *(_BYTE *)(a1 + 436) = 1;
      break;
  }
  if (*(_DWORD *)a1 != 1)
    goto LABEL_47;
  pixelBuffer = 0;
  v43 = H9ISP::H9ISPFrameReceiverBufferPool::activatePool(v62);
  if (!(_DWORD)v43)
  {
    v44 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 40);
    if (v44)
      v44(7, *(unsigned int *)v62, 0, *((_QWORD *)v62 + 15), *((_QWORD *)v62 + 16), *(_QWORD *)(a1 + 48));
    if ((a15 & 1) == 0)
    {
      v45 = v62;
      if (*((_DWORD *)v62 + 18))
      {
        v46 = 0;
        v47 = 0;
        do
        {
          v43 = H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(v45, &pixelBuffer);
          if ((_DWORD)v43)
          {
            v45 = v62;
          }
          else
          {
            v60 = 0;
            v60 = operator new();
            v48 = pixelBuffer;
            *(_QWORD *)v60 = pixelBuffer;
            IOSurface = CVPixelBufferGetIOSurface(v48);
            ID = IOSurfaceGetID(IOSurface);
            v51 = v60;
            *(_DWORD *)(v60 + 8) = ID;
            *(_QWORD *)(v51 + 16) = v62;
            std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::push_back((_QWORD *)(a1 + 552), &v60);
            v52 = (uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))&v63[5 * v47];
            *v52 = H9ISP::H9ISPFrameReceiver::FrameDone;
            v52[1] = (uint64_t (*)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))a1;
            *((_DWORD *)v52 + 4) = *(_DWORD *)(v60 + 8);
            v45 = v62;
            *(uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))((char *)v52 + 20) = (uint64_t (*)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))*((_QWORD *)v62 + 4);
            *((_DWORD *)v52 + 7) = *((_DWORD *)v45 + 12);
            v53 = *(unsigned int *)(a1 + 316);
            if (v53 > 4)
              v54 = -1;
            else
              v54 = *((_DWORD *)v45 + v53 + 1);
            LODWORD(v63[5 * v47++ + 4]) = v54;
          }
          ++v46;
        }
        while (v46 < *((_DWORD *)v45 + 18));
        if ((_DWORD)v43)
          goto LABEL_48;
      }
      else
      {
        v47 = 0;
      }
      v43 = H9ISP::H9ISPDevice::ISP_SendBuffers(*(_QWORD *)(a1 + 304), v63, v47, *(_DWORD *)(a1 + 280));
      if ((_DWORD)v43)
      {
        printf("pH9ISPDevice->ISP_SendBuffers failed, result=0x%08X\n");
        goto LABEL_48;
      }
      v55 = v62;
      v56 = *(unsigned int *)(a1 + 316);
      if (v56 <= 4)
        *((_DWORD *)v62 + v56 + 20) = v47;
      if (!*(_DWORD *)v55)
      {
        v43 = 0;
        *(_DWORD *)(a1 + 652) += v47;
        goto LABEL_48;
      }
    }
LABEL_47:
    v43 = 0;
    goto LABEL_48;
  }
  printf("pNewBufferPool->activatePool() failed, result=0x%08X\n");
LABEL_48:
  pthread_mutex_unlock(v59);
  return v43;
}

void sub_235808B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1060C4012BDE7A7);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::DepthRearConfigurations::getHeightOfPreset(H9ISP::DepthRearConfigurations *this)
{
  if (this <= 3)
    return *((unsigned int *)&H9ISP::PCERearPresets + 2 * this + 1);
  else
    return 0;
}

uint64_t H9ISP::DepthRearConfigurations::getWidthOfPreset(H9ISP::DepthRearConfigurations *this)
{
  if (this <= 3)
    return *((unsigned int *)&H9ISP::PCERearPresets + 2 * this);
  else
    return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::removeBufferPoolFromFrameReceiver(uint64_t a1, int a2)
{
  uint64_t v2;
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  H9ISP::H9ISPFrameReceiverBufferPool **v10;
  uint64_t v11;
  H9ISP::H9ISPFrameReceiverBufferPool *v12;
  char *v13;
  int v14;
  uint64_t i;

  v2 = 3758097090;
  if (a2 == 19)
  {
    v4 = (pthread_mutex_t *)(a1 + 72);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
    v5 = *(_QWORD *)(a1 + 512);
    v6 = *(_QWORD *)(a1 + 536);
    v7 = (char *)(v5 + 8 * (v6 >> 9));
    v8 = *(_QWORD *)(a1 + 520);
    if (v8 == v5)
      v9 = 0;
    else
      v9 = (char *)(*(_QWORD *)v7 + 8 * (*(_QWORD *)(a1 + 536) & 0x1FFLL));
LABEL_5:
    v10 = (H9ISP::H9ISPFrameReceiverBufferPool **)v9;
    while (1)
    {
      if (v8 == v5)
        v11 = 0;
      else
        v11 = *(_QWORD *)(v5 + (((*(_QWORD *)(a1 + 544) + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(_QWORD *)(a1 + 544) + v6) & 0x1FF);
      if (v10 == (H9ISP::H9ISPFrameReceiverBufferPool **)v11)
      {
        v2 = 3758097136;
        goto LABEL_19;
      }
      v12 = *v10;
      if (*(_DWORD *)*v10 == 19)
        break;
      ++v10;
      v9 += 8;
      if ((char *)(*(_QWORD *)v7 + 4096) == v9)
      {
        v13 = (char *)*((_QWORD *)v7 + 1);
        v7 += 8;
        v9 = v13;
        goto LABEL_5;
      }
    }
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)(a1 + 504), v7, v9);
    v14 = 0;
    for (i = 24; i != 29; ++i)
      v14 += *((unsigned __int8 *)v12 + i);
    if (!v14)
    {
      H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v12);
      MEMORY[0x23B7D8B08]();
    }
    v2 = 0;
LABEL_19:
    pthread_mutex_unlock(v4);
  }
  return v2;
}

void std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t H9ISP::H9ISPFrameReceiver::FrameDone(H9ISP::H9ISPFrameReceiver *this, void *a2, uint64_t a3, unint64_t *a4)
{
  int v4;
  __CVBuffer *v7;
  __CVBuffer *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  char *v20;
  H9ISP::H9ISPFrameReceiverBufferPool *v21;
  uint64_t v22;
  H9ISP::H9ISPFrameReceiverBufferPool *v23;
  int v24;
  _OWORD *v25;
  CVPixelBufferRef v26;
  int v27;
  CVPixelBufferRef v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _OWORD *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  _OWORD *v48;
  uint64_t v49;
  int v50;
  char *v51;
  __int128 v52;
  __IOSurface *v53;
  IOSurfaceID v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _OWORD *v59;
  uint64_t v60;
  int v61;
  __IOSurface *v62;
  IOSurfaceID v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  __CVBuffer *v73;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v76;
  __CVBuffer **v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  H9ISP::H9ISPFrameReceiverBufferPool **v87;
  uint64_t v88;
  H9ISP::H9ISPFrameReceiverBufferPool *v89;
  char *v90;
  __CVBuffer *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  H9ISP::H9ISPFrameMetadata *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _DWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  const void *v117;
  const void *v118;
  const void *v119;
  int64_t v120;
  CFDictionaryRef v121;
  CFStringRef *v122;
  uint64_t v123;
  uint64_t v124;
  H9ISP::H9ISPImageCompensator *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  __CVBuffer *v130;
  __CVBuffer *v131;
  __CVBuffer *v132;
  uint64_t v133;
  _OWORD *v134;
  int64_t v135;
  CFDictionaryRef v136;
  uint64_t v137;
  __CVBuffer *v138;
  __CVBuffer *v139;
  OSType PixelFormatType;
  OSType v142;
  _BOOL4 v144;
  _DWORD *BaseAddress;
  size_t Width;
  size_t Height;
  H9ISP::H9ISPFrameReceiver *BytesPerRow;
  char *BaseAddressOfPlane;
  char *v150;
  int v151;
  int v152;
  size_t BytesPerRowOfPlane;
  H9ISP::H9ISPFrameReceiver *v154;
  double v155;
  uint64_t v156;
  _OWORD *v157;
  _DWORD *v158;
  uint64_t v159;
  int v160;
  BOOL v161;
  void (*v162)(_QWORD, unint64_t, _QWORD, uint64_t, _OWORD *);
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  uint64_t v166;
  CVPixelBufferRef *v167;
  BOOL v169;
  __CVBuffer *v170;
  CVPixelBufferRef *v171;
  int64x2_t *v172;
  char v173;
  __CVBuffer *v174;
  char v175;
  unint64_t v176;
  __int128 v177;
  _QWORD *v178;
  __CVBuffer *value;
  __CVBuffer *v180;
  __CVBuffer *v181;
  unsigned int v182;
  __CVBuffer *buffer;
  _QWORD block[6];
  CMTime v185;
  CMTime time;
  uint64_t v187;
  CVPixelBufferRef v188;
  __int128 v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned __int8 v196[4];
  __int16 v197;
  int v198;
  __int128 v199;
  CVPixelBufferRef pixelBuffer;
  unint64_t v201;
  __CVBuffer *outputStruct[80];
  _QWORD v203[80];
  _OWORD __src[16];
  uint64_t v205;

  v4 = (int)a4;
  v205 = *MEMORY[0x24BDAC8D0];
  v201 = 0;
  kdebug_trace();
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  pixelBuffer = 0;
  v7 = (__CVBuffer *)(v4 - 2);
  if (v4 == 2)
  {
    value = 0;
    v180 = 0;
    v177 = 0uLL;
    v175 = 0;
    v181 = 0;
    v174 = 0;
    v176 = 0;
    buffer = 0;
    v10 = 0;
    v9 = 0;
    goto LABEL_166;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v182 = 0;
  v173 = 0;
  buffer = 0;
  value = 0;
  v180 = 0;
  v176 = 0;
  v177 = 0uLL;
  v174 = 0;
  v181 = 0;
  v175 = 0;
  v178 = (_QWORD *)((char *)this + 624);
  v172 = (int64x2_t *)((char *)this + 504);
  v171 = (CVPixelBufferRef *)((char *)this + 336);
  do
  {
    v11 = *(_QWORD *)(a3 + 8 * ((_DWORD)v8 + 2));
    if (v11 == *((_DWORD *)this + 100))
    {
      *((_BYTE *)this + 424) = 0;
      v9 = 1;
      goto LABEL_64;
    }
    v12 = *((_QWORD *)this + 70);
    v13 = *((_QWORD *)this + 73);
    v14 = (char *)(v12 + 8 * (v13 >> 9));
    v15 = *((_QWORD *)this + 71);
    if (v15 == v12)
      v16 = 0;
    else
      v16 = (char *)(*(_QWORD *)v14 + 8 * (*((_QWORD *)this + 73) & 0x1FFLL));
LABEL_8:
    v17 = v16;
    while (1)
    {
      if (v15 == v12)
        v18 = 0;
      else
        v18 = *(_QWORD *)(v12 + (((*((_QWORD *)this + 74) + v13) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)this + 74) + v13) & 0x1FF);
      if (v17 == (char *)v18)
        goto LABEL_64;
      v19 = *(__int128 **)v17;
      if (v11 == *(_DWORD *)(*(_QWORD *)v17 + 8))
        break;
      v17 += 8;
      v16 += 8;
      if ((char *)(*(_QWORD *)v14 + 4096) == v16)
      {
        v20 = (char *)*((_QWORD *)v14 + 1);
        v14 += 8;
        v16 = v20;
        goto LABEL_8;
      }
    }
    v21 = (H9ISP::H9ISPFrameReceiverBufferPool *)*((_QWORD *)v19 + 2);
    v22 = *((unsigned int *)this + 79);
    if (v22 <= 4)
      --*((_DWORD *)v21 + v22 + 20);
    if (*((_BYTE *)this + 312))
    {
      CVPixelBufferRelease(*(CVPixelBufferRef *)v19);
      std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)((char *)this + 552), v14, v16);
LABEL_63:
      MEMORY[0x23B7D8B08](v19, 0x1020C4093CA8EA1);
      goto LABEL_64;
    }
    if ((*((_BYTE *)v21 + 76) & 1) != 0)
    {
      v27 = *(_DWORD *)v21;
      switch(*(_DWORD *)v21)
      {
        case 0:
          v28 = *(CVPixelBufferRef *)v19;
          buffer = *(__CVBuffer **)v19;
          break;
        case 1:
          v28 = *(CVPixelBufferRef *)v19;
          v176 = *(_QWORD *)v19;
          break;
        case 2:
          v28 = *(CVPixelBufferRef *)v19;
          value = *(__CVBuffer **)v19;
          break;
        case 6:
          v28 = *(CVPixelBufferRef *)v19;
          v180 = *(__CVBuffer **)v19;
          break;
        case 7:
          v28 = *(CVPixelBufferRef *)v19;
          *((_QWORD *)&v177 + 1) = *(_QWORD *)v19;
          break;
        case 8:
          v28 = *(CVPixelBufferRef *)v19;
          v174 = *(__CVBuffer **)v19;
          break;
        case 9:
          v28 = *(CVPixelBufferRef *)v19;
          *(_QWORD *)&v177 = *(_QWORD *)v19;
          break;
        case 0xA:
          v28 = *(CVPixelBufferRef *)v19;
          v181 = *(__CVBuffer **)v19;
          break;
        default:
          v28 = *(CVPixelBufferRef *)v19;
          break;
      }
      v48 = &__src[v10];
      *(_QWORD *)v48 = v28;
      *((_DWORD *)v48 + 2) = v27;
      v49 = *((unsigned int *)this + 79);
      if (v49 > 4)
        v50 = -1;
      else
        v50 = *((_DWORD *)v21 + v49 + 1);
      HIDWORD(__src[v10]) = v50;
      std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)((char *)this + 552), v14, v16);
      v10 = (v10 + 1);
      goto LABEL_63;
    }
    if (*v178 && !*(_DWORD *)v21)
    {
      v33 = &__src[v10];
      buffer = *(__CVBuffer **)v19;
      *(_QWORD *)v33 = *(_QWORD *)v19;
      *((_DWORD *)v33 + 2) = 0;
      v34 = *((unsigned int *)this + 79);
      if (v34 > 4)
        v35 = -1;
      else
        v35 = *((_DWORD *)v21 + v34 + 1);
      HIDWORD(__src[v10]) = v35;
      std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase((int64x2_t *)((char *)this + 552), v14, v16);
      v10 = (v10 + 1);
      MEMORY[0x23B7D8B08](v19, 0x1020C4093CA8EA1);
      v40 = *((_DWORD *)this + 163) - 1;
      *((_DWORD *)this + 163) = v40;
      if (v40)
        goto LABEL_64;
      v198 = *((_DWORD *)this + 79);
      v197 = 2049;
      v199 = *(_OWORD *)((char *)this + 632);
      v41 = H9ISP::H9ISPDevice::ISP_SendCommand(*((H9ISP::H9ISPDevice **)this + 38), v196, 0x1Cu, 0, 0xFFFFFFFF);
      if (v41)
        printf("H9ISPFrameReceiver::FrameDone -  Error sending sCIspCmdChCropSet command: 0x%08X\n", v41);
      v42 = *((_QWORD *)this + 78);
      v43 = *(_DWORD *)(v42 + 36);
      v44 = *(_DWORD *)(v42 + 40);
      v45 = *(_DWORD *)(v42 + 44) + *(_DWORD *)(v42 + 32);
      v46 = *((_DWORD *)this + 79);
      WORD2(v189) = 2817;
      *((_QWORD *)&v189 + 1) = __PAIR64__(v45, v46);
      v47 = *(_DWORD *)(v42 + 48);
      v195 = v44;
      v192 = v47;
      LODWORD(v42) = *(unsigned __int8 *)(v42 + 52) == 0;
      v190 = v43;
      v191 = v42;
      if (v47 == 1)
      {
        v193 = (2 * v45 + 63) & 0xFFFFFFC0;
      }
      else
      {
        v193 = (v45 + 63) & 0xFFFFFFC0;
        v194 = v193;
      }
      v67 = H9ISP::H9ISPDevice::ISP_SendCommand(*((H9ISP::H9ISPDevice **)this + 38), (unsigned __int8 *)&v189, 0x2Cu, 0, 0xFFFFFFFF);
      v68 = v67;
      if (v67)
        printf("H9ISPFrameReceiver::FrameDone -  Error sending sCIspCmdChOutputConfigSet command: 0x%08X\n", v67);
      v188 = 0;
      v69 = *v178;
      if (*(_DWORD *)(*v178 + 72))
      {
        v70 = 0;
        v71 = 0;
        do
        {
          v72 = H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer((H9ISP::H9ISPFrameReceiverBufferPool *)v69, &v188);
          if (v72)
          {
            v69 = *v178;
          }
          else
          {
            v187 = 0;
            v187 = operator new();
            v73 = v188;
            *(_QWORD *)v187 = v188;
            IOSurface = CVPixelBufferGetIOSurface(v73);
            ID = IOSurfaceGetID(IOSurface);
            v76 = v187;
            *(_DWORD *)(v187 + 8) = ID;
            *(_QWORD *)(v76 + 16) = *((_QWORD *)this + 78);
            std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::push_back((_QWORD *)this + 69, &v187);
            v77 = &outputStruct[5 * v71];
            *v77 = (__CVBuffer *)H9ISP::H9ISPFrameReceiver::FrameDone;
            v77[1] = this;
            *((_DWORD *)v77 + 4) = *(_DWORD *)(v187 + 8);
            v69 = *((_QWORD *)this + 78);
            *(__CVBuffer **)((char *)v77 + 20) = *(__CVBuffer **)(v69 + 32);
            *((_DWORD *)v77 + 7) = *(_DWORD *)(v69 + 48);
            v78 = *((unsigned int *)this + 79);
            if (v78 > 4)
              v79 = -1;
            else
              v79 = *(_DWORD *)(v69 + 4 * v78 + 4);
            LODWORD(outputStruct[5 * v71++ + 4]) = v79;
          }
          ++v70;
        }
        while (v70 < *(_DWORD *)(v69 + 72));
        if (!v72)
        {
LABEL_100:
          v80 = H9ISP::H9ISPDevice::ISP_SendBuffers(*((_QWORD *)this + 38), outputStruct, v71, *((_DWORD *)this + 70));
          if (v80)
          {
            printf("pH9ISPDevice->ISP_SendBuffers failed, result=0x%08X\n", v80);
          }
          else
          {
            v81 = *((unsigned int *)this + 79);
            if (v81 <= 4)
              *(_DWORD *)(*v178 + 4 * v81 + 80) = v71;
            *((_DWORD *)this + 163) += v71;
          }
        }
      }
      else
      {
        v71 = 0;
        if (!v68)
          goto LABEL_100;
      }
      v82 = *((_QWORD *)this + 64);
      v83 = *((_QWORD *)this + 67);
      v84 = v82 + 8 * (v83 >> 9);
      v85 = *((_QWORD *)this + 65);
      if (v85 == v82)
        v86 = 0;
      else
        v86 = (char *)(*(_QWORD *)v84 + 8 * (*((_QWORD *)this + 67) & 0x1FFLL));
LABEL_109:
      v87 = (H9ISP::H9ISPFrameReceiverBufferPool **)v86;
      while (1)
      {
        v88 = v85 == v82
            ? 0
            : *(_QWORD *)(v82 + (((*((_QWORD *)this + 68) + v83) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)this + 68) + v83) & 0x1FF);
        if (v87 == (H9ISP::H9ISPFrameReceiverBufferPool **)v88)
          goto LABEL_64;
        v89 = *v87;
        if (!*(_DWORD *)*v87)
        {
          std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase(v172, (char *)v84, v86);
          H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool(v89);
          MEMORY[0x23B7D8B08]();
          std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::push_back(v172, v178);
          *v178 = 0;
          goto LABEL_64;
        }
        ++v87;
        v86 += 8;
        if ((char *)(*(_QWORD *)v84 + 4096) == v86)
        {
          v90 = *(char **)(v84 + 8);
          v84 += 8;
          v86 = v90;
          goto LABEL_109;
        }
      }
    }
    H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(v21, &pixelBuffer);
    if (pixelBuffer)
    {
      v23 = (H9ISP::H9ISPFrameReceiverBufferPool *)*((_QWORD *)v19 + 2);
      v24 = *(_DWORD *)v23;
      if (!*(_DWORD *)v23)
      {
        buffer = *(__CVBuffer **)v19;
        v24 = *((_DWORD *)this + 162);
        if (!v24)
        {
LABEL_50:
          v26 = *(CVPixelBufferRef *)v19;
LABEL_77:
          v59 = &__src[v10];
          *(_QWORD *)v59 = v26;
          *((_DWORD *)v59 + 2) = v24;
          v60 = *((unsigned int *)this + 79);
          if (v60 > 4)
            v61 = -1;
          else
            v61 = *((_DWORD *)v23 + v60 + 1);
          HIDWORD(__src[v10]) = v61;
          *(_QWORD *)v19 = pixelBuffer;
          v62 = CVPixelBufferGetIOSurface(pixelBuffer);
          v63 = IOSurfaceGetID(v62);
          *((_DWORD *)v19 + 2) = v63;
          v64 = &v203[5 * v182];
          *v64 = H9ISP::H9ISPFrameReceiver::FrameDone;
          v64[1] = this;
          *((_DWORD *)v64 + 4) = v63;
          v65 = *((_QWORD *)v19 + 2);
          *(_QWORD *)((char *)v64 + 20) = *(_QWORD *)(v65 + 32);
          *((_DWORD *)v64 + 7) = *(_DWORD *)(v65 + 48);
          v66 = *((unsigned int *)this + 79);
          if (v66 > 4)
            v58 = -1;
          else
            v58 = *(_DWORD *)(v65 + 4 * v66 + 4);
          v10 = (v10 + 1);
          goto LABEL_84;
        }
        outputStruct[0] = 0;
        H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(v23, outputStruct);
        if (outputStruct[0])
        {
          v25 = &__src[v10];
          *(__CVBuffer **)v25 = outputStruct[0];
          *((_QWORD *)v25 + 1) = -4294967291;
          v10 = (v10 + 1);
          --*((_DWORD *)this + 162);
        }
        v23 = (H9ISP::H9ISPFrameReceiverBufferPool *)*((_QWORD *)v19 + 2);
        v24 = *(_DWORD *)v23;
      }
      switch(v24)
      {
        case 1:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 1;
          v176 = *(_QWORD *)v19;
          goto LABEL_77;
        case 2:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 2;
          value = *(__CVBuffer **)v19;
          goto LABEL_77;
        case 3:
          v51 = (char *)this + 336;
          if (*v171)
          {
            CVPixelBufferRelease(*v171);
            v51 = (char *)this + 336;
            *v171 = 0;
          }
          v52 = *v19;
          *((_QWORD *)v51 + 2) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v51 = v52;
          *(_QWORD *)v19 = pixelBuffer;
          v53 = CVPixelBufferGetIOSurface(pixelBuffer);
          v54 = IOSurfaceGetID(v53);
          *((_DWORD *)v19 + 2) = v54;
          v55 = &v203[5 * v182];
          *v55 = H9ISP::H9ISPFrameReceiver::FrameDone;
          v55[1] = this;
          *((_DWORD *)v55 + 4) = v54;
          v56 = *((_QWORD *)v19 + 2);
          *(_QWORD *)((char *)v55 + 20) = *(_QWORD *)(v56 + 32);
          *((_DWORD *)v55 + 7) = *(_DWORD *)(v56 + 48);
          v57 = *((unsigned int *)this + 79);
          if (v57 > 4)
            v58 = -1;
          else
            v58 = *(_DWORD *)(v56 + 4 * v57 + 4);
          break;
        case 6:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 6;
          v180 = *(__CVBuffer **)v19;
          goto LABEL_77;
        case 7:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 7;
          *((_QWORD *)&v177 + 1) = *(_QWORD *)v19;
          goto LABEL_77;
        case 8:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 8;
          v174 = *(__CVBuffer **)v19;
          goto LABEL_77;
        case 9:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 9;
          *(_QWORD *)&v177 = *(_QWORD *)v19;
          goto LABEL_77;
        case 10:
          v26 = *(CVPixelBufferRef *)v19;
          v24 = 10;
          v181 = *(__CVBuffer **)v19;
          goto LABEL_77;
        default:
          goto LABEL_50;
      }
LABEL_84:
      LODWORD(v203[5 * v182++ + 4]) = v58;
      goto LABEL_64;
    }
    v29 = &v203[5 * v182];
    *v29 = H9ISP::H9ISPFrameReceiver::FrameDone;
    v29[1] = this;
    *((_DWORD *)v29 + 4) = *((_DWORD *)v19 + 2);
    v30 = *((_QWORD *)v19 + 2);
    *(_QWORD *)((char *)v29 + 20) = *(_QWORD *)(v30 + 32);
    *((_DWORD *)v29 + 7) = *(_DWORD *)(v30 + 48);
    v31 = *((unsigned int *)this + 79);
    if (v31 > 4)
      v32 = -1;
    else
      v32 = *(_DWORD *)(v30 + 4 * v31 + 4);
    LODWORD(v203[5 * v182++ + 4]) = v32;
    v36 = *(_DWORD *)v30;
    v37 = v36 > 0xA;
    v38 = (1 << v36) & 0x443;
    if (!v37 && v38 != 0)
      v175 = 1;
    v173 = 1;
LABEL_64:
    v8 = (__CVBuffer *)((char *)v8 + 1);
  }
  while (v8 != v7);
  if ((v173 & 1) != 0 && *((_QWORD *)this + 5))
  {
    v91 = value;
    if (value)
    {
LABEL_121:
      if (H9ISP::H9ISPDevice::ISP_GetCameraTime(*((_QWORD *)this + 38), outputStruct))
      {
        v92 = 0;
      }
      else
      {
        v102 = (H9ISP::H9ISPFrameMetadata *)operator new();
        H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v102, value, 1uLL);
        v103 = *((_QWORD *)v102 + 37);
        if (v103)
          v92 = (unint64_t)((double)(unint64_t)outputStruct[0]
                                 - (double)((unint64_t)outputStruct[1] - *(_QWORD *)(v103 + 4))
                                 * *((double *)this + 45));
        else
          v92 = 0;
        H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v102);
        MEMORY[0x23B7D8B08]();
      }
    }
    else
    {
      v93 = *((_QWORD *)this + 70);
      v94 = *((_QWORD *)this + 73);
      v95 = *((_QWORD *)this + 71);
      while (2)
      {
        if (v95 == v93)
          v96 = 0;
        else
          v96 = *(_QWORD *)(v93 + 8 * (*((_QWORD *)this + 73) >> 9)) + 8 * (*((_QWORD *)this + 73) & 0x1FFLL);
        v97 = (_QWORD *)(v93 + 8 * (v94 >> 9));
LABEL_129:
        v98 = v96 - 4096;
        while (1)
        {
          v99 = v95 == v93
              ? 0
              : *(_QWORD *)(v93 + (((*((_QWORD *)this + 74) + v94) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((_QWORD *)this + 74) + v94) & 0x1FF);
          if (v96 == v99)
            break;
          v100 = *(_QWORD *)v96;
          if (*(_QWORD *)(a3 + 8 * ((_DWORD)v91 + 2)) == *(_DWORD *)(*(_QWORD *)v96 + 8)
            && **(_DWORD **)(v100 + 16) == 2)
          {
            if (*(_QWORD *)v100)
            {
              value = *(__CVBuffer **)v100;
              goto LABEL_121;
            }
            break;
          }
          v96 += 8;
          v98 += 8;
          if (*v97 == v98)
          {
            v101 = v97[1];
            ++v97;
            v96 = v101;
            goto LABEL_129;
          }
        }
        v91 = (__CVBuffer *)((char *)v91 + 1);
        if (v91 != v7)
          continue;
        break;
      }
      v92 = mach_absolute_time();
      value = 0;
    }
    (*((void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))this + 5))(1, HIDWORD(v92), v92, 0, 0, *((_QWORD *)this + 6));
  }
  if (v182)
  {
    v104 = H9ISP::H9ISPDevice::ISP_SendBuffers(*((_QWORD *)this + 38), v203, v182, *((_DWORD *)this + 70));
    if (v104)
    {
      printf("pH9ISPDevice->ISP_SendBuffers failed, result=0x%08X\n", v104);
    }
    else
    {
      v105 = 0;
      v106 = *((_QWORD *)this + 64);
      v107 = *((_QWORD *)this + 67);
      v108 = *((_QWORD *)this + 65);
      do
      {
        if (v108 == v106)
          v109 = 0;
        else
          v109 = (_QWORD *)(*(_QWORD *)(v106 + 8 * (v107 >> 9)) + 8 * (v107 & 0x1FF));
        v110 = &v203[5 * v105 + 4];
        v111 = (_QWORD *)(v106 + 8 * (v107 >> 9));
LABEL_154:
        v112 = v109 - 512;
        while (1)
        {
          v113 = v108 == v106
               ? 0
               : *(_QWORD *)(v106 + (((*((_QWORD *)this + 68) + v107) >> 6) & 0x3FFFFFFFFFFFFF8))
               + 8 * ((*((_QWORD *)this + 68) + v107) & 0x1FF);
          if (v109 == (_QWORD *)v113)
            break;
          v114 = *((unsigned int *)this + 79);
          if (v114 > 4)
          {
            if (*v110 == -1)
              break;
          }
          else
          {
            v115 = *v109 + 4 * v114;
            if (*(_DWORD *)(v115 + 4) == *v110)
            {
              ++*(_DWORD *)(v115 + 80);
              break;
            }
          }
          ++v109;
          if ((_QWORD *)*v111 == ++v112)
          {
            v116 = (_QWORD *)v111[1];
            ++v111;
            v109 = v116;
            goto LABEL_154;
          }
        }
        ++v105;
      }
      while (v105 != v182);
    }
  }
LABEL_166:
  if (!*((_BYTE *)this + 312))
  {
    v125 = (H9ISP::H9ISPImageCompensator *)*((_QWORD *)this + 47);
    if (v125)
    {
      if (*((_DWORD *)v125 + 4) != 2)
      {
        v126 = *((_DWORD *)this + 101);
        v127 = v126 - 1;
        if (v126 == 1)
        {
          if (*((_QWORD *)this + 49) && !*((_BYTE *)this + 424))
          {
            H9ISP::H9ISPFrameReceiver::sendImageCompensatorRawBufferToFirmware(this);
            *((_BYTE *)this + 424) = 1;
            v127 = *((_DWORD *)this + 101) - 1;
          }
        }
        else if (!v126)
        {
          if ((_DWORD)v10)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            v131 = 0;
            v132 = 0;
            v133 = v10;
            v134 = __src;
            do
            {
              switch(*((_DWORD *)v134 + 2))
              {
                case 1:
                  v132 = *(__CVBuffer **)v134;
                  break;
                case 2:
                  v131 = *(__CVBuffer **)v134;
                  break;
                case 7:
                  v129 = *(_QWORD *)v134;
                  break;
                case 8:
                  v130 = *(__CVBuffer **)v134;
                  break;
                case 9:
                  v128 = *(_QWORD *)v134;
                  break;
                default:
                  break;
              }
              ++v134;
              --v133;
            }
            while (v133);
          }
          else
          {
            v132 = 0;
            v131 = 0;
            v130 = 0;
            v129 = 0;
            v128 = 0;
          }
          if ((v9 & 1) != 0)
            v132 = (__CVBuffer *)*((_QWORD *)this + 49);
          if (v130)
            v169 = v131 == 0;
          else
            v169 = 1;
          if (v169)
            v170 = v131;
          else
            v170 = v130;
          if (*((_DWORD *)this + 92)
            && v170
            && v132
            && !v129
            && !v128
            && H9ISP::H9ISPImageCompensator::checkForWork(v125, v170, v132)
            && *((_DWORD *)this + 101) <= 1u
            && *((_QWORD *)this + 49)
            && !*((_BYTE *)this + 424))
          {
            H9ISP::H9ISPFrameReceiver::sendImageCompensatorRawBufferToFirmware(this);
            *((_BYTE *)this + 424) = 1;
          }
          goto LABEL_167;
        }
        *((_DWORD *)this + 101) = v127;
      }
    }
  }
LABEL_167:
  if ((_DWORD)v10)
  {
    if (value)
    {
      H9ISP::H9ISPFrameReceiver::ProcessFrameMetadata(this, value, &v201, 0, (((unint64_t)buffer | (unint64_t)v180 | (unint64_t)v181 | v176) != 0) | v175 & 1);
      if (buffer)
      {
        CVBufferSetAttachment(buffer, CFSTR("RawMetaData"), value, kCVAttachmentMode_ShouldPropagate);
        v117 = (const void *)*((_QWORD *)this + 42);
        if (v117)
          CVBufferSetAttachment(buffer, CFSTR("RawFaceDetectData"), v117, kCVAttachmentMode_ShouldPropagate);
      }
      if (v180)
      {
        CVBufferSetAttachment(v180, CFSTR("RawMetaData"), value, kCVAttachmentMode_ShouldPropagate);
        v118 = (const void *)*((_QWORD *)this + 42);
        if (v118)
          CVBufferSetAttachment(v180, CFSTR("RawFaceDetectData"), v118, kCVAttachmentMode_ShouldPropagate);
      }
      if (v181)
      {
        CVBufferSetAttachment(v181, CFSTR("RawMetaData"), value, kCVAttachmentMode_ShouldPropagate);
        v119 = (const void *)*((_QWORD *)this + 42);
        if (v119)
          CVBufferSetAttachment(v181, CFSTR("RawFaceDetectData"), v119, kCVAttachmentMode_ShouldPropagate);
      }
      v120 = FigHostTimeToNanoseconds();
      CMTimeMake(&time, v120, 1000000000);
      v121 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x24BDBD240]);
      if (v121)
      {
        v122 = (CFStringRef *)MEMORY[0x24BE10820];
        if (buffer)
          CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x24BE10820], v121, kCVAttachmentMode_ShouldPropagate);
        if (v180)
          CVBufferSetAttachment(v180, *v122, v121, kCVAttachmentMode_ShouldPropagate);
        if (v181)
          CVBufferSetAttachment(v181, *v122, v121, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v121);
      }
      if (*((_BYTE *)this + 660))
      {
        H9ISP::H9ISPDevice::ISP_GetCameraTime(*((_QWORD *)this + 38), outputStruct);
        v123 = *((_QWORD *)this + 38);
        v124 = *(_QWORD *)(v123 + 32);
        if (v124)
        {
          H9ISP::H9ISPMotionManager::GetOscarTimeSyncInfo(v124, &v189);
          v123 = *((_QWORD *)this + 38);
        }
        else
        {
          v189 = 0uLL;
        }
        if (v181)
          v138 = v181;
        else
          v138 = v180;
        if (buffer)
          v139 = buffer;
        else
          v139 = v138;
        if (*(_DWORD *)(*(_QWORD *)(v123 + 56) + 80 * *((unsigned int *)this + 79) + 8))
        {
          if (!v139)
            goto LABEL_237;
LABEL_226:
          H9ISP::GenerateAndAttachCoreMediaMetaDataDictionary();
        }
        else if (v139)
        {
          goto LABEL_226;
        }
      }
    }
    else if (v174)
    {
      H9ISP::H9ISPFrameReceiver::ProcessFrameMetadata(this, v174, &v201, 1, 0);
      if (*((_QWORD *)&v177 + 1))
        CVBufferSetAttachment(*((CVBufferRef *)&v177 + 1), CFSTR("RawMetaData"), v174, kCVAttachmentMode_ShouldPropagate);
      if ((_QWORD)v177)
        CVBufferSetAttachment((CVBufferRef)v177, CFSTR("RawMetaData"), v174, kCVAttachmentMode_ShouldPropagate);
      v135 = FigHostTimeToNanoseconds();
      CMTimeMake(&v185, v135, 1000000000);
      v136 = CMTimeCopyAsDictionary(&v185, (CFAllocatorRef)*MEMORY[0x24BDBD240]);
      if (v136)
      {
        if (*((_QWORD *)&v177 + 1))
          CVBufferSetAttachment(*((CVBufferRef *)&v177 + 1), (CFStringRef)*MEMORY[0x24BE10820], v136, kCVAttachmentMode_ShouldPropagate);
        CFRelease(v136);
      }
      if (*((_BYTE *)this + 660))
      {
        H9ISP::H9ISPDevice::ISP_GetCameraTime(*((_QWORD *)this + 38), outputStruct);
        v137 = *(_QWORD *)(*((_QWORD *)this + 38) + 32);
        if (v137)
          H9ISP::H9ISPMotionManager::GetOscarTimeSyncInfo(v137, &v189);
        else
          v189 = 0uLL;
        if (*((_QWORD *)&v177 + 1) ? *((_QWORD *)&v177 + 1) : v177)
          H9ISP::GenerateAndAttachCoreMediaMetaDataDictionary();
      }
    }
LABEL_237:
    if (*((_DWORD *)this + 153) && buffer)
    {
      PixelFormatType = CVPixelBufferGetPixelFormatType(buffer);
      v142 = PixelFormatType;
      v144 = PixelFormatType == 2037741158 || PixelFormatType == 875704422;
      CVPixelBufferLockBaseAddress(buffer, 0);
      if (v142 == 2037741171 || v142 == 2037741158)
      {
        BaseAddress = CVPixelBufferGetBaseAddress(buffer);
        Width = CVPixelBufferGetWidth(buffer);
        Height = CVPixelBufferGetHeight(buffer);
        BytesPerRow = (H9ISP::H9ISPFrameReceiver *)CVPixelBufferGetBytesPerRow(buffer);
        H9ISP::H9ISPFrameReceiver::InsertTestPattern(BytesPerRow, BaseAddress, Width, Height, (size_t)BytesPerRow, !v144, v144);
      }
      else
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 0);
        v150 = (char *)CVPixelBufferGetBaseAddressOfPlane(buffer, 1uLL);
        v151 = CVPixelBufferGetWidth(buffer);
        v152 = CVPixelBufferGetHeight(buffer);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(buffer, 0);
        v154 = (H9ISP::H9ISPFrameReceiver *)CVPixelBufferGetBytesPerRowOfPlane(buffer, 1uLL);
        H9ISP::H9ISPFrameReceiver::InsertTestPattern_YCbCr_420_Y_UV(v154, BaseAddressOfPlane, v150, v151, v152, BytesPerRowOfPlane, (unint64_t)v154, !v144, v155, v144);
      }
      CVPixelBufferUnlockBaseAddress(buffer, 0);
    }
    v156 = *((_QWORD *)this + 42);
    if (v156 && !*((_QWORD *)&v177 + 1) && (buffer || v181 || v180))
    {
      v157 = &__src[v10];
      *(_QWORD *)v157 = v156;
      v158 = (_DWORD *)*((_QWORD *)this + 44);
      *((_DWORD *)v157 + 2) = *v158;
      v159 = *((unsigned int *)this + 79);
      if (v159 > 4)
        v160 = -1;
      else
        v160 = v158[v159 + 1];
      HIDWORD(__src[v10]) = v160;
      v10 = (v10 + 1);
      *((_QWORD *)this + 42) = 0;
    }
    v161 = v177 == 0
        && *((_DWORD *)this + 81) != -1
        && (v176 | (unint64_t)buffer | (unint64_t)v180 | (unint64_t)v181) == 0;
    v162 = (void (*)(_QWORD, unint64_t, _QWORD, uint64_t, _OWORD *))*((_QWORD *)this + 3);
    if (v162 && !v161)
    {
      if (*((_QWORD *)this + 37))
      {
        v163 = operator new();
        v164 = v163;
        *(_QWORD *)v163 = v201;
        *(_DWORD *)(v163 + 8) = *((_DWORD *)this + 79);
        *(_DWORD *)(v163 + 12) = v10;
        *(_QWORD *)(v163 + 272) = this;
        if ((_DWORD)v10)
          memcpy((void *)(v163 + 16), __src, 16 * v10);
        v165 = *((_QWORD *)this + 37);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN5H9ISP18H9ISPFrameReceiver9FrameDoneEPviPyi_block_invoke;
        block[3] = &__block_descriptor_tmp_50;
        block[4] = this;
        block[5] = v164;
        dispatch_async(v165, block);
        goto LABEL_273;
      }
      v162(*((_QWORD *)this + 4), v201, *((unsigned int *)this + 79), v10, __src);
    }
    if ((_DWORD)v10)
    {
      v166 = v10;
      v167 = (CVPixelBufferRef *)__src;
      do
      {
        CVPixelBufferRelease(*v167);
        *v167 = 0;
        v167 += 2;
        --v166;
      }
      while (v166);
    }
  }
LABEL_273:
  H9ISP::H9ISPFrameReceiver::tickleNoDataTimer(this);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 136));
  return kdebug_trace();
}

void sub_23580A20C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C40D32E3BE5);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::H9ISPFrameReceiver::addSharedBufferPoolToFrameReceiver(H9ISP::H9ISPFrameReceiver *this, H9ISP::H9ISPFrameReceiverBufferPool *a2, int a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  H9ISP::H9ISPFrameReceiverBufferPool *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  __CVBuffer *v23;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v26;
  uint64_t (**v27)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *);
  uint64_t v28;
  H9ISP::H9ISPFrameReceiverBufferPool *v29;
  uint64_t v30;
  uint64_t v32;
  CVPixelBufferRef pixelBuffer;
  H9ISP::H9ISPFrameReceiverBufferPool *v34;
  _QWORD v35[82];

  v35[80] = *MEMORY[0x24BDAC8D0];
  v34 = a2;
  v6 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  v7 = *((_QWORD *)this + 64);
  v8 = *((_QWORD *)this + 67);
  v9 = (_QWORD *)(v7 + 8 * (v8 >> 9));
  v10 = *((_QWORD *)this + 65);
  if (v10 == v7)
    v11 = 0;
  else
    v11 = (_QWORD *)(*v9 + 8 * (*((_QWORD *)this + 67) & 0x1FFLL));
LABEL_4:
  v12 = v11 - 512;
  while (1)
  {
    v13 = v10 == v7
        ? 0
        : *(_QWORD *)(v7 + (((*((_QWORD *)this + 68) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((_QWORD *)this + 68) + v8) & 0x1FF);
    if (v11 == (_QWORD *)v13)
      break;
    v14 = *((unsigned int *)this + 79);
    if (v14 > 4)
      v15 = -1;
    else
      v15 = *(_DWORD *)(*v11 + 4 * v14 + 4);
    if (v15 == a3)
    {
      pthread_mutex_unlock(v6);
      return 3758097122;
    }
    ++v11;
    if ((_QWORD *)*v9 == ++v12)
    {
      v16 = (_QWORD *)v9[1];
      ++v9;
      v11 = v16;
      goto LABEL_4;
    }
  }
  if (a2)
  {
    v17 = *((unsigned int *)this + 79);
    if (v17 <= 4)
      *((_DWORD *)a2 + v17 + 1) = a3;
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::push_back((_QWORD *)this + 63, &v34);
    v18 = v34;
    v19 = *(_DWORD *)v34;
    if (*(_DWORD *)v34 == 1)
    {
      *((_BYTE *)this + 437) = 1;
    }
    else if (v19 == 4)
    {
      ++*((_DWORD *)this + 110);
    }
    else if (v19 == 3)
    {
      *((_BYTE *)this + 436) = 1;
    }
    if (*(_DWORD *)this == 1)
    {
      pixelBuffer = 0;
      if ((*((_BYTE *)v18 + 76) & 1) == 0)
      {
        if (*((_DWORD *)v18 + 18))
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v20 = H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(v18, &pixelBuffer);
            if ((_DWORD)v20)
            {
              v18 = v34;
            }
            else
            {
              v32 = 0;
              v32 = operator new();
              v23 = pixelBuffer;
              *(_QWORD *)v32 = pixelBuffer;
              IOSurface = CVPixelBufferGetIOSurface(v23);
              ID = IOSurfaceGetID(IOSurface);
              v26 = v32;
              *(_DWORD *)(v32 + 8) = ID;
              *(_QWORD *)(v26 + 16) = v34;
              std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::push_back((_QWORD *)this + 69, &v32);
              v27 = (uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))&v35[5 * v22];
              *v27 = H9ISP::H9ISPFrameReceiver::FrameDone;
              v27[1] = (uint64_t (*)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))this;
              *((_DWORD *)v27 + 4) = *(_DWORD *)(v32 + 8);
              v18 = v34;
              *(uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))((char *)v27 + 20) = (uint64_t (*)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))*((_QWORD *)v34 + 4);
              *((_DWORD *)v27 + 7) = *((_DWORD *)v18 + 12);
              *((_DWORD *)v27 + 8) = a3;
              ++v22;
            }
            ++v21;
          }
          while (v21 < *((_DWORD *)v18 + 18));
          if ((_DWORD)v20)
            goto LABEL_43;
        }
        else
        {
          v22 = 0;
        }
        v28 = H9ISP::H9ISPDevice::ISP_SendBuffers(*((_QWORD *)this + 38), v35, v22, *((_DWORD *)this + 70));
        v20 = v28;
        if ((_DWORD)v28)
        {
          printf("pH9ISPDevice->ISP_SendBuffers failed, result=0x%08X\n", v28);
LABEL_43:
          pthread_mutex_unlock(v6);
          return v20;
        }
        v29 = v34;
        v30 = *((unsigned int *)this + 79);
        if (v30 <= 4)
          *((_DWORD *)v34 + v30 + 20) = v22;
        if (!*(_DWORD *)v29)
        {
          v20 = 0;
          *((_DWORD *)this + 163) += v22;
          goto LABEL_43;
        }
      }
    }
    v20 = 0;
    goto LABEL_43;
  }
  v20 = 3758097085;
  pthread_mutex_unlock(v6);
  return v20;
}

uint64_t H9ISP::H9ISPFrameReceiver::MessageHandlerEntry(H9ISP::H9ISPFrameReceiver *this, __CFMessagePort *a2, int a3, const __CFData *a4, H9ISP::H9ISPFrameReceiver *a5)
{
  *((_DWORD *)a4 + 152) |= a2;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::registerFrameReceiveCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::registerMessageCallback(H9ISP::H9ISPFrameReceiver *this, void (*a2)(unsigned int, unsigned int, unsigned int, void *, void *, void *), void *a3)
{
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = a3;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::registerFramePostProcessingCallback(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  dispatch_queue_t v5;

  if (a1[37])
    return 3758097122;
  a1[7] = a2;
  a1[8] = a3;
  v5 = dispatch_queue_create("com.apple.h9ispframereceiver.postprocess.queue", 0);
  result = 0;
  a1[37] = v5;
  return result;
}

uint64_t H9ISP::H9ISPFrameReceiver::setDiagnosticsMode(H9ISP::H9ISPFrameReceiver *this, unsigned int a2)
{
  uint64_t result;

  if (a2 > 2)
    return 3758097090;
  result = 0;
  *((_DWORD *)this + 153) = a2;
  return result;
}

uint64_t H9ISP::H9ISPFrameReceiver::StartFaceDetect(H9ISP::H9ISPFrameReceiver *this)
{
  if (*((_BYTE *)this + 436))
    return H9ISP::H9ISPDevice::StartFaceDetect(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), *((_DWORD *)this + 164));
  else
    return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::ClearFaceDetectSavedBuffer(H9ISP::H9ISPFrameReceiver *this)
{
  pthread_mutex_t *v2;
  __CVBuffer *v3;

  v2 = (pthread_mutex_t *)((char *)this + 136);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  v3 = (__CVBuffer *)*((_QWORD *)this + 42);
  if (v3)
  {
    CVPixelBufferRelease(v3);
    *((_QWORD *)this + 42) = 0;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPFrameReceiver::SetFDFeatureFlags(H9ISP::H9ISPFrameReceiver *this, int a2)
{
  *((_DWORD *)this + 164) = a2;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::SetMetaDataOptions(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 664) = *a2;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::startReceive(H9ISP::H9ISPFrameReceiver *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int sig_low;
  unsigned int v8;
  __CVBuffer *v9;
  __IOSurface *IOSurface;
  int started;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  __CVBuffer *v24;
  __IOSurface *v25;
  IOSurfaceID ID;
  uint64_t sig;
  uint64_t (**v28)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int **v35;
  void (*v37)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int **v38;
  unint64_t v39;
  uint64_t v40;
  __int16 v41;
  pthread_mutex_t *v42;
  CVPixelBufferRef pixelBuffer;
  sched_param v44;
  void *v45;
  _OWORD v46[3];
  int v47;
  pthread_t v48;
  _QWORD v49[80];
  pthread_attr_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v48 = 0;
  memset(v46, 0, sizeof(v46));
  v45 = 0;
  v2 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  if (*(_DWORD *)this == 1)
  {
    pthread_mutex_unlock(v2);
    v3 = 3758097122;
    goto LABEL_68;
  }
  kdebug_trace();
  v4 = *((unsigned __int8 *)this + 616);
  if (!*((_BYTE *)this + 616))
  {
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::operator=(v46, (_QWORD *)this + 63);
    v44 = (sched_param)48;
    pthread_attr_init(&v50);
    pthread_attr_setschedparam(&v50, &v44);
    pthread_attr_setdetachstate(&v50, 1);
    pthread_create(&v48, &v50, (void *(__cdecl *)(void *))H9ISP::PoolAllocatorThreadStart, v46);
    pthread_attr_destroy(&v50);
  }
  v5 = *((_DWORD *)this + 92);
  if (!v5)
    goto LABEL_13;
  if (*((_BYTE *)this + 437))
  {
    v5 = 1;
  }
  else
  {
    v44.sched_priority = 0;
    H9ISP::H9ISPDevice::GetCameraCurrentConfig(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), &v44, (uint64_t)&v50);
    if (v6)
    {
      puts("H9ISPFrameReceiver: Could not get Camera config, turning off image compensator");
      syslog(6, "H9ISPFrameReceiver: Could not get Camera config, turning off image compensator\n");
    }
    else
    {
      *((_DWORD *)this + 102) = *(_DWORD *)&v50.__opaque[36];
      sig_low = LOWORD(v50.__sig);
      *((_DWORD *)this + 103) = LOWORD(v50.__sig);
      v8 = WORD1(v50.__sig);
      *((_DWORD *)this + 104) = WORD1(v50.__sig);
      *((_DWORD *)this + 105) = 1650943796;
      v9 = H9ISP::H9ISPCreateCVBuffer(sig_low, v8, 0, 0, 2, 1, 64, 64, 0.0, 0, 0, v41, 0, 0);
      *((_QWORD *)this + 49) = v9;
      if (v9)
      {
        IOSurface = CVPixelBufferGetIOSurface(v9);
        *((_DWORD *)this + 100) = IOSurfaceGetID(IOSurface);
        v5 = *((_DWORD *)this + 92);
        goto LABEL_13;
      }
      puts("H9ISPFrameReceiver: Could not allocate image compensator buffer, turning off image compensator");
      syslog(6, "H9ISPFrameReceiver: Could not allocate image compensator buffer, turning off image compensator\n");
    }
    v5 = 0;
    *((_DWORD *)this + 92) = 0;
  }
LABEL_13:
  *((_BYTE *)this + 312) = 0;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = -1;
  *((_WORD *)this + 164) = 1;
  *((_BYTE *)this + 330) = 0;
  if (v5)
    H9ISP::H9ISPImageCompensator::activate(*((H9ISP::H9ISPImageCompensator **)this + 47));
  *((_DWORD *)this + 101) = 0;
  if (*((_QWORD *)this + 49))
  {
    H9ISP::H9ISPFrameReceiver::sendImageCompensatorRawBufferToFirmware(this);
    *((_BYTE *)this + 424) = 1;
  }
  if (*((_BYTE *)this + 436))
  {
    started = H9ISP::H9ISPDevice::StartFaceDetect(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), *((_DWORD *)this + 164));
    v12 = started;
    if (started)
    {
      printf("H9ISPFrameReceiver::startReceive - StartFaceDetect error: 0x%08X\n", started);
      if (*((_DWORD *)this + 92))
      {
        v13 = H9ISP::H9ISPDevice::EnableALS(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), 1);
        v12 = v13;
        if (v13)
          printf("H9ISPFrameReceiver::startReceive - EnableALS error: 0x%08X\n", v13);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  if (*((_DWORD *)this + 107))
    H9ISP::H9ISPDevice::SetMaximumFrameRate(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), (unsigned __int16)*((_DWORD *)this + 107));
  if (*((_DWORD *)this + 108))
    H9ISP::H9ISPDevice::SetMinimumFrameRate(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), (unsigned __int16)*((_DWORD *)this + 108));
  H9ISP::H9ISPDevice::EnableTNR(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79), *((unsigned __int8 *)this + 425), *((unsigned __int8 *)this + 426));
  if (v12)
    printf("H9ISPFrameReceiver::startReceive - EnableTNR error: 0x%08X\n", v12);
  v14 = H9ISP::H9ISPDevice::StartCamera(*((H9ISP::H9ISPDevice **)this + 38), *((_DWORD *)this + 79));
  v3 = v14;
  if ((_DWORD)v14)
    printf("H9ISPFrameReceiver::startReceive - StartCamera error: 0x%08X\n", v14);
  if (v4)
  {
    v15 = *((_QWORD *)this + 64);
    v16 = *((_QWORD *)this + 65);
  }
  else
  {
    pthread_join(v48, &v45);
    if (v47)
    {
      v3 = 3758097085;
      goto LABEL_67;
    }
    *((_BYTE *)this + 616) = 1;
    v15 = *((_QWORD *)this + 64);
    v34 = (_QWORD *)(v15 + 8 * (*((_QWORD *)this + 67) >> 9));
    v16 = *((_QWORD *)this + 65);
    if (v16 == v15)
      v35 = 0;
    else
      v35 = (unsigned int **)(*v34 + 8 * (*((_QWORD *)this + 67) & 0x1FFLL));
    while (1)
    {
      if (v16 == v15)
      {
        v40 = 0;
      }
      else
      {
        v39 = *((_QWORD *)this + 68) + *((_QWORD *)this + 67);
        v40 = *(_QWORD *)(v15 + ((v39 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v39 & 0x1FF);
      }
      if (v35 == (unsigned int **)v40)
        break;
      v37 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 5);
      if (v37)
        v37(7, **v35, 0, *((_QWORD *)*v35 + 15), *((_QWORD *)*v35 + 16), *((_QWORD *)this + 6));
      if ((unsigned int **)((char *)++v35 - *v34) == (unsigned int **)4096)
      {
        v38 = (unsigned int **)v34[1];
        ++v34;
        v35 = v38;
      }
      v15 = *((_QWORD *)this + 64);
      v16 = *((_QWORD *)this + 65);
    }
  }
  v42 = v2;
  pixelBuffer = 0;
  v17 = (_QWORD *)(v15 + 8 * (*((_QWORD *)this + 67) >> 9));
  if (v16 == v15)
    v18 = 0;
  else
    v18 = *v17 + 8 * (*((_QWORD *)this + 67) & 0x1FFLL);
  while (1)
  {
    if (*((_QWORD *)this + 65) == v15)
    {
      v20 = 0;
    }
    else
    {
      v19 = *((_QWORD *)this + 68) + *((_QWORD *)this + 67);
      v20 = *(_QWORD *)(v15 + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v19 & 0x1FF);
    }
    if (v18 == v20)
      break;
    v21 = *(_QWORD *)v18;
    if ((*(_BYTE *)(*(_QWORD *)v18 + 76) & 1) != 0)
      goto LABEL_59;
    if (*(_DWORD *)(v21 + 72))
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v3 = H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer((H9ISP::H9ISPFrameReceiverBufferPool *)v21, &pixelBuffer);
        if (!(_DWORD)v3)
        {
          v50.__sig = 0;
          v50.__sig = operator new();
          v24 = pixelBuffer;
          *(_QWORD *)v50.__sig = pixelBuffer;
          v25 = CVPixelBufferGetIOSurface(v24);
          ID = IOSurfaceGetID(v25);
          sig = v50.__sig;
          *(_DWORD *)(v50.__sig + 8) = ID;
          *(_QWORD *)(sig + 16) = v21;
          std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::push_back((_QWORD *)this + 69, &v50);
          v28 = (uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))&v49[5 * v23];
          *v28 = H9ISP::H9ISPFrameReceiver::FrameDone;
          v28[1] = (uint64_t (*)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))this;
          *((_DWORD *)v28 + 4) = *(_DWORD *)(v50.__sig + 8);
          *(uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))((char *)v28 + 20) = *(uint64_t (**)(H9ISP::H9ISPFrameReceiver *, void *, uint64_t, unint64_t *))(v21 + 32);
          *((_DWORD *)v28 + 7) = *(_DWORD *)(v21 + 48);
          v29 = *((unsigned int *)this + 79);
          if (v29 > 4)
            v30 = -1;
          else
            v30 = *(_DWORD *)(v21 + 4 * v29 + 4);
          LODWORD(v49[5 * v23++ + 4]) = v30;
        }
        ++v22;
      }
      while (v22 < *(_DWORD *)(v21 + 72));
      if ((_DWORD)v3)
        goto LABEL_59;
    }
    else
    {
      v23 = 0;
      if ((_DWORD)v3)
        goto LABEL_59;
    }
    v31 = H9ISP::H9ISPDevice::ISP_SendBuffers(*((_QWORD *)this + 38), v49, v23, *((_DWORD *)this + 70));
    v3 = v31;
    if ((_DWORD)v31)
    {
      printf("pH9ISPDevice->ISP_SendBuffers failed, result=0x%08X\n", v31);
      v2 = v42;
      goto LABEL_67;
    }
    v32 = *((unsigned int *)this + 79);
    if (v32 <= 4)
      *(_DWORD *)(v21 + 4 * v32 + 80) = v23;
    v3 = 0;
    if (!*(_DWORD *)v21)
      *((_DWORD *)this + 163) += v23;
LABEL_59:
    v18 += 8;
    if (v18 - *v17 == 4096)
    {
      v33 = v17[1];
      ++v17;
      v18 = v33;
    }
    v15 = *((_QWORD *)this + 64);
  }
  v2 = v42;
  if (!(_DWORD)v3)
  {
    H9ISP::H9ISPFrameReceiver::startNoDataTimer(this);
    v3 = 0;
  }
LABEL_67:
  pthread_mutex_unlock(v2);
  kdebug_trace();
LABEL_68:
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100](v46);
  return v3;
}

void sub_23580ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::operator=(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      v8 = &(*v7)[8 * (v4 & 0x1FF)];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 9));
      v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
    }
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::assign<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool * const*,H9ISP::H9ISPFrameReceiverBufferPool * const&,H9ISP::H9ISPFrameReceiverBufferPool * const* const*,long,512l>,0>(a1, v7, v8, v10, v11);
  }
  return a1;
}

uint64_t H9ISP::PoolAllocatorThreadStart(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  H9ISP::H9ISPFrameReceiverBufferPool **v5;
  int i;
  unint64_t v7;
  uint64_t v8;
  H9ISP::H9ISPFrameReceiverBufferPool **v9;

  pthread_setname_np("H9ISPFrameReceiverPoolAllocatorThread");
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(v2 + 8 * (*(_QWORD *)(a1 + 32) >> 9));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = (H9ISP::H9ISPFrameReceiverBufferPool **)(*v4 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL));
  for (i = -536870212; ; i = 0)
  {
    if (v3 == v2)
    {
      v8 = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)(v2 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF);
    }
    if (v5 == (H9ISP::H9ISPFrameReceiverBufferPool **)v8)
      break;
    i = H9ISP::H9ISPFrameReceiverBufferPool::activatePool(*v5);
    if (i)
      break;
    if ((H9ISP::H9ISPFrameReceiverBufferPool **)((char *)++v5 - *v4) == (H9ISP::H9ISPFrameReceiverBufferPool **)4096)
    {
      v9 = (H9ISP::H9ISPFrameReceiverBufferPool **)v4[1];
      ++v4;
      v5 = v9;
    }
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 16);
  }
  *(_DWORD *)(a1 + 48) = i;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::sendImageCompensatorRawBufferToFirmware(H9ISP::H9ISPFrameReceiver *this)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  _QWORD v5[2];
  int v6;
  int8x16_t v7;

  v2 = 3758097084;
  v3 = (pthread_mutex_t *)((char *)this + 136);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  if (*((_QWORD *)this + 49))
  {
    if (*((_BYTE *)this + 312))
    {
      v2 = 3758097122;
    }
    else
    {
      v5[0] = H9ISP::H9ISPFrameReceiver::FrameDone;
      v5[1] = this;
      v6 = *((_DWORD *)this + 100);
      v7 = vextq_s8(*(int8x16_t *)((char *)this + 408), *(int8x16_t *)((char *)this + 408), 4uLL);
      v2 = H9ISP::H9ISPDevice::ISP_SendBuffers(*((_QWORD *)this + 38), v5, 1u, *((_DWORD *)this + 70));
    }
  }
  pthread_mutex_unlock(v3);
  return v2;
}

uint64_t H9ISP::H9ISPFrameReceiver::startNoDataTimer(H9ISP::H9ISPFrameReceiver *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v5;
  CFRunLoopTimerContext context;

  v2 = (pthread_mutex_t *)((char *)this + 200);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 200));
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 33);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 33));
    *((_QWORD *)this + 33) = 0;
  }
  context.version = 0;
  context.info = this;
  memset(&context.retain, 0, 24);
  Current = CFAbsoluteTimeGetCurrent();
  v5 = CFRunLoopTimerCreate(0, Current + *((double *)this + 85), 0.0, 0, 0, (CFRunLoopTimerCallBack)H9ISP::H9ISPFrameReceiver::NoDataTimeout, &context);
  *((_QWORD *)this + 33) = v5;
  if (v5)
    CFRunLoopAddTimer(*((CFRunLoopRef *)this + 1), v5, (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPFrameReceiver::stopNoDataTimer(H9ISP::H9ISPFrameReceiver *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;

  v2 = (pthread_mutex_t *)((char *)this + 200);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 200));
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 33);
  if (v3)
  {
    CFRunLoopTimerInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 33));
    *((_QWORD *)this + 33) = 0;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t H9ISP::H9ISPFrameReceiver::ProcessFrameMetadata(H9ISP::H9ISPFrameReceiver *this, __CVBuffer *a2, unint64_t *a3, char a4, int a5)
{
  int CameraTime;
  H9ISP::H9ISPFrameMetadata *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __int16 v34;
  _WORD *v35;
  _BYTE *v36;
  NSObject *v37;
  int v38;
  int v39;
  NSObject *v40;
  void (*v42)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v43[5];
  int v44;
  _QWORD v45[5];
  _QWORD block[5];
  __int16 v47;
  _QWORD outputStruct[4];

  CameraTime = H9ISP::H9ISPDevice::ISP_GetCameraTime(*((_QWORD *)this + 38), outputStruct);
  if (!CameraTime)
  {
    v11 = (H9ISP::H9ISPFrameMetadata *)operator new();
    H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v11, a2, 1uLL);
    v12 = *((_QWORD *)v11 + 37);
    if (!v12)
      return 0;
    v13 = (unint64_t)((double)outputStruct[0]
                           - (double)(unint64_t)(outputStruct[1] - *(_QWORD *)(v12 + 4)) * *((double *)this + 45));
    *a3 = v13;
    if ((a4 & 1) != 0)
      goto LABEL_65;
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v15 = *(unsigned __int8 *)(v14 + 46);
      v16 = *(_DWORD *)(v14 + 368);
      v17 = *(_DWORD *)(v14 + 396);
      v18 = *(unsigned __int8 *)(v14 + 339);
    }
    else
    {
      v17 = 0;
      LOBYTE(v16) = -1;
      v18 = 1;
      v15 = 255;
    }
    v19 = *((_DWORD *)this + 80);
    v20 = v19 != -1 && *(_DWORD *)(v12 + 12) != v19 + 1;
    v21 = *((_DWORD *)this + 81) != -1 && *(_DWORD *)(v12 + 12) != v19 + 1;
    if (!v20 && !v21)
    {
LABEL_36:
      v28 = *(_DWORD *)(*((_QWORD *)v11 + 37) + 12);
      *((_DWORD *)this + 80) = v28;
      if ((a5 | v21) == 1)
        *((_DWORD *)this + 81) = v28;
      *((_BYTE *)this + 328) = v18;
      v29 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
      {
        *((_BYTE *)this + 330) = *(_BYTE *)(v29 + 46);
        if ((*(__int16 *)(v29 + 336) & 0x80000000) == 0)
        {
          if (*((_BYTE *)this + 484))
          {
            v30 = mach_absolute_time();
            v31 = v30;
            v32 = *((_QWORD *)this + 61);
            if (!v32 || (v30 - v32) * *((unsigned int *)this + 124) / *((unsigned int *)this + 125) >= 0x12A05F201)
            {
              v33 = *(NSObject **)(*(_QWORD *)(*((_QWORD *)this + 38) + 16) + 72);
              if (v33)
              {
                v34 = *(_WORD *)(*(_QWORD *)v11 + 336);
                block[0] = MEMORY[0x24BDAC760];
                block[1] = 0x40000000;
                block[2] = ___ZN5H9ISP18H9ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPybb_block_invoke;
                block[3] = &__block_descriptor_tmp_52;
                block[4] = this;
                v47 = v34;
                dispatch_async(v33, block);
              }
              *((_QWORD *)this + 61) = v31;
            }
          }
        }
      }
      v35 = (_WORD *)*((_QWORD *)v11 + 3);
      if (!v35)
        goto LABEL_65;
      if (v35[11] || v35[213] || v35[1360])
      {
        v36 = (char *)this + 460;
        if (*((_BYTE *)this + 460) && *((_DWORD *)this + 116) == 4)
        {
          v37 = *(NSObject **)(*(_QWORD *)(*((_QWORD *)this + 38) + 16) + 72);
          if (v37)
          {
            v45[0] = MEMORY[0x24BDAC760];
            v45[1] = 0x40000000;
            v45[2] = ___ZN5H9ISP18H9ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPybb_block_invoke_2;
            v45[3] = &__block_descriptor_tmp_53;
            v45[4] = this;
            dispatch_async(v37, v45);
          }
          *((_DWORD *)this + 117) = 0xFFFF;
        }
        v38 = 2;
        *((_DWORD *)this + 116) = 2;
        if (!*((_BYTE *)this + 329))
          *((_BYTE *)this + 329) = 1;
        v39 = 2;
      }
      else
      {
        v36 = (char *)this + 460;
        *((_DWORD *)this + 116) = 4;
        if (!*((_BYTE *)this + 329))
        {
          v38 = 4;
          if (!*v36)
            goto LABEL_64;
          goto LABEL_60;
        }
        v42 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 5);
        if (v42)
        {
          v42(2, 4, *(unsigned __int16 *)(*((_QWORD *)v11 + 3) + 26), 0, 0, *((_QWORD *)this + 6));
          v39 = *((_DWORD *)this + 116);
        }
        else
        {
          v39 = 4;
        }
        *((_BYTE *)this + 329) = 0;
        v38 = 4;
      }
      if (!*v36)
        goto LABEL_63;
      if (v39 != 4)
        goto LABEL_65;
LABEL_60:
      if (*((_DWORD *)this + 117) == v38)
        goto LABEL_64;
      v40 = *(NSObject **)(*(_QWORD *)(*((_QWORD *)this + 38) + 16) + 72);
      if (!v40)
        goto LABEL_64;
      v43[0] = MEMORY[0x24BDAC760];
      v43[1] = 0x40000000;
      v43[2] = ___ZN5H9ISP18H9ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPybb_block_invoke_3;
      v43[3] = &__block_descriptor_tmp_54;
      v43[4] = this;
      v44 = v38;
      dispatch_async(v40, v43);
      v39 = *((_DWORD *)this + 116);
LABEL_63:
      if (v39 == 4)
LABEL_64:
        *((_DWORD *)this + 117) = v38;
LABEL_65:
      H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v11);
      MEMORY[0x23B7D8B08]();
      return 0;
    }
    if (v20)
      v22 = (char *)this + 320;
    else
      v22 = (char *)this + 324;
    if (v14 && (v23 = *(_DWORD *)(v14 + 48)) != 0)
      v24 = v13
          - (unint64_t)(1.0
                             / ((double)v23
                              * 0.00390625)
                             * (double)(*(_DWORD *)(v12 + 12) + ~*(_DWORD *)v22)
                             * 1000000000.0)
          * *((unsigned int *)this + 125)
          / *((unsigned int *)this + 124);
    else
      v24 = mach_absolute_time();
    if (v15 != 255)
    {
      if (v15 != *((unsigned __int8 *)this + 330))
      {
        v26 = (void (*)(uint64_t, uint64_t))*((_QWORD *)this + 5);
        if (!v26)
          goto LABEL_36;
        v27 = 3;
        goto LABEL_35;
      }
      if (v17 == 2 && v15 != v16)
        goto LABEL_36;
    }
    if (!v18)
      goto LABEL_36;
    if (v18 != *((unsigned __int8 *)this + 328))
      goto LABEL_36;
    v26 = (void (*)(uint64_t, uint64_t))*((_QWORD *)this + 5);
    if (!v26)
      goto LABEL_36;
    v27 = 5;
LABEL_35:
    v26(v27, HIDWORD(v24));
    goto LABEL_36;
  }
  printf("pH9ISPDevice->ISP_GetCameraTime failed, result=0x%08X\n", CameraTime);
  return 0;
}

void sub_23580B4AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C40D32E3BE5);
  _Unwind_Resume(a1);
}

void *H9ISP::H9ISPFrameReceiver::InsertTestPattern(H9ISP::H9ISPFrameReceiver *this, _DWORD *a2, unint64_t a3, unint64_t a4, size_t __n, int a6, int a7)
{
  size_t v10;
  unsigned int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned int v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int8x16_t v26;
  __int16 *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  void *result;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  unint64_t v46;
  char *v47;
  size_t v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  char *v60;
  _DWORD v61[4];
  _DWORD v62[8];
  _BYTE v63[32];
  uint64_t v64;
  int16x8x2_t v65;
  int16x8x2_t v66;

  v64 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v10 = __n >> 2;
    if (a6)
      v11 = -1;
    else
      v11 = 0;
    v12 = (int8x16_t)vdupq_n_s16(v11);
    v13 = vbslq_s8(v12, (int8x16_t)xmmword_23582A0A0, (int8x16_t)xmmword_23582A090);
    v14 = vbslq_s8(v12, (int8x16_t)xmmword_23582A0C0, (int8x16_t)xmmword_23582A0B0);
    v15 = vbslq_s8(v12, (int8x16_t)xmmword_23582A0E0, (int8x16_t)xmmword_23582A0D0);
    if (a7)
      v16 = -1;
    else
      v16 = 0;
    v17 = (int8x16_t)vdupq_n_s16(v16);
    v18 = (int16x8_t)vbslq_s8(v17, v14, vbslq_s8(v12, (int8x16_t)xmmword_23582A100, (int8x16_t)xmmword_23582A0F0));
    v19 = (int16x8_t)vbslq_s8(v17, v13, v15);
    v66.val[0] = (int16x8_t)vrev16q_s8((int8x16_t)vuzp1q_s16(v19, v18));
    v66.val[1] = (int16x8_t)vrev16q_s8((int8x16_t)vuzp2q_s16(v19, v18));
    v20 = (__int16 *)v63;
    vst2q_s16(v20, v66);
    v21 = (a4 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
    v22 = a4 / 0x18;
    v23 = (int16x8_t)vbslq_s8(v17, vbslq_s8(v12, (int8x16_t)xmmword_23582A140, (int8x16_t)xmmword_23582A130), vbslq_s8(v12, (int8x16_t)xmmword_23582A180, (int8x16_t)xmmword_23582A170));
    v24 = (int16x8_t)vbslq_s8(v17, vbslq_s8(v12, (int8x16_t)xmmword_23582A120, (int8x16_t)xmmword_23582A110), vbslq_s8(v12, (int8x16_t)xmmword_23582A160, (int8x16_t)xmmword_23582A150));
    v25 = (int8x16_t)vuzp1q_s16(v24, v23);
    v26 = (int8x16_t)vuzp2q_s16(v24, v23);
    v65.val[0] = (int16x8_t)vrev16q_s8(v25);
    v65.val[1] = (int16x8_t)vrev16q_s8(v26);
    v27 = (__int16 *)v62;
    vst2q_s16(v27, v65);
    v28 = a3 >> 1;
    if (a3 >= 2)
    {
      v29 = 0;
      v30 = 0;
      do
      {
        a2[v30++] = bswap32(*(_DWORD *)((char *)v62 + ((uint64_t)((v29 / v28) << 32) >> 30)));
        v29 += 8;
      }
      while (v28 > v30);
    }
    v31 = 4 * v10;
    v32 = v22 - 1;
    if (v22 == 1)
    {
      v36 = (char *)&a2[v10];
    }
    else
    {
      v33 = v22 - 1;
      do
      {
        v34 = (char *)&a2[(unint64_t)v31 / 4];
        result = memcpy(&a2[(unint64_t)v31 / 4], a2, __n);
        a2 = v34;
        --v33;
      }
      while (v33);
      v36 = &v34[4 * v10];
    }
    if (a3 >= 2)
    {
      v37 = 0;
      v38 = 0;
      do
      {
        *(_DWORD *)&v36[4 * v38++] = bswap32(*(_DWORD *)&v63[(uint64_t)((v37 / v28) << 32) >> 30]);
        v37 += 8;
      }
      while (v28 > v38);
    }
    if (v32)
    {
      v39 = v32;
      do
      {
        v40 = &v36[v31];
        result = memcpy(&v36[v31], v36, __n);
        v36 = v40;
        --v39;
      }
      while (v39);
      v41 = &v40[4 * v10];
    }
    else
    {
      v41 = &v36[4 * v10];
    }
    if (a3 >= 2)
    {
      v42 = 0;
      v43 = 0;
      do
      {
        v44 = v42 / v28;
        if (a7)
          v45 = (double)(255 * (int)v44 / 31);
        else
          v45 = (double)(int)v44 * 219.0 / 31.0 + 16.0;
        *(_DWORD *)&v41[4 * v43++] = bswap32(16777472 * (int)(v45 + 0.5) + 8388736);
        v42 += 32;
      }
      while (v28 > v43);
    }
    v46 = v21 >> 5;
    if (v32)
    {
      do
      {
        v47 = &v41[v31];
        result = memcpy(&v41[v31], v41, __n);
        v41 = v47;
        --v32;
      }
      while (v32);
      v48 = v10;
      v49 = &v47[4 * v10];
    }
    else
    {
      v48 = v10;
      v49 = &v41[4 * v10];
    }
    v50 = 0;
    v61[0] = v62[0];
    v61[1] = v62[5];
    v51 = v62[7];
    v61[2] = v62[3];
    v61[3] = v62[6];
    v52 = v46 - 1;
    do
    {
      if (a3 >= 2)
      {
        v53 = 0;
        v54 = v61[v50];
        do
        {
          v55 = 0;
          v56 = 4;
          v57 = v54;
          v58 = v51;
          do
          {
            v55 = (int)((double)v53 / (double)(v28 - 1) * (double)v57
                      + (double)v58 * (1.0 - (double)v53 / (double)(v28 - 1))
                      + 0.5)
                + (v55 << 8);
            v58 >>= 8;
            v57 >>= 8;
            --v56;
          }
          while (v56);
          *(_DWORD *)&v49[4 * v53] = v55;
          v53 = (v53 + 1);
        }
        while (v28 > v53);
      }
      if (v52)
      {
        v59 = v52;
        do
        {
          v60 = &v49[v31];
          result = memcpy(&v49[v31], v49, __n);
          v49 = v60;
          --v59;
        }
        while (v59);
        v49 = &v60[v31];
      }
      else
      {
        v49 += 4 * v48;
      }
      ++v50;
    }
    while (v50 != 4);
  }
  return result;
}

uint64_t H9ISP::H9ISPFrameReceiver::InsertTestPattern_YCbCr_420_Y_UV(H9ISP::H9ISPFrameReceiver *this, char *__src, char *a3, size_t __n, unint64_t a5, unint64_t a6, unint64_t a7, int a8, double a9, BOOL a10)
{
  uint64_t result;
  char *v11;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  size_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  size_t v54;
  double v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  double v69;
  double v70;
  double v71;
  unint64_t v72;
  double v73;
  double v74;
  char *v75;
  double v76;
  int v77;
  unint64_t i;
  char *v79;
  char *v80;
  _DWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  unint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  unint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE v97[4];
  _WORD v98[4];
  uint64_t v99;

  result = 0;
  v99 = *MEMORY[0x24BDAC8D0];
  if (__src)
  {
    v11 = a3;
    if (a3)
    {
      v13 = __src;
      v14 = (a5 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
      v15 = a5 / 0x18 + 1;
      if (a10)
      {
        v16 = a8 == 0;
        if (a8)
          v17 = &unk_23582A2F0;
        else
          v17 = &unk_23582A370;
        if (a8)
          v18 = &unk_23582A310;
        else
          v18 = &unk_23582A390;
        if (a8)
          v19 = &unk_23582A2B0;
        else
          v19 = &unk_23582A330;
        v20 = &unk_23582A350;
        v21 = &unk_23582A2D0;
      }
      else
      {
        v16 = a8 == 0;
        if (a8)
          v17 = &unk_23582A1F0;
        else
          v17 = &unk_23582A270;
        if (a8)
          v18 = &unk_23582A210;
        else
          v18 = &unk_23582A290;
        if (a8)
          v19 = &unk_23582A1B0;
        else
          v19 = &unk_23582A230;
        v20 = &unk_23582A250;
        v21 = &unk_23582A1D0;
      }
      if (v16)
        v22 = v20;
      else
        v22 = v21;
      v23 = v15 & 0x1FFFFFFFFFFFFFFELL;
      v24 = a6 >> 2;
      v25 = a7 >> 2;
      if (__n)
      {
        v26 = 0;
        v27 = 0;
        do
        {
          v28 = v17[v26 / __n];
          v29 = v18[v26 / __n];
          *(_DWORD *)&v13[v27] = v28;
          *(_DWORD *)&v13[4 * v24 + v27] = v28;
          *(_DWORD *)&a3[v27] = bswap32(v29);
          v27 += 4;
          v26 += 32;
        }
        while (v27 < __n);
      }
      v92 = a6 >> 2;
      v93 = v18;
      v30 = 8 * v24;
      v31 = 4 * v24;
      v32 = 4 * v25;
      v84 = v23;
      v33 = v23 - 2;
      v89 = a7 >> 2;
      v95 = v23 - 2;
      v87 = v17;
      v88 = 2 * v24;
      if (v23 == 2)
      {
        v38 = &v13[8 * v24];
        v39 = &v11[4 * v25];
      }
      else
      {
        v81 = v22;
        v82 = v14;
        v90 = v19;
        v34 = 0;
        v35 = 12 * v24;
        do
        {
          v36 = &v13[v30];
          v37 = &v11[v32];
          memcpy(&v13[v30], v13, __n);
          memcpy(&v13[v35], &v13[v31], __n);
          memcpy(&v11[v32], v11, __n);
          v33 = v95;
          v34 += 2;
          v11 += v32;
          v13 += v30;
        }
        while (v34 < v95);
        v19 = v90;
        v24 = v92;
        v38 = &v36[8 * v92];
        v25 = v89;
        v39 = &v37[4 * v89];
        v22 = v81;
        v14 = v82;
      }
      if (__n)
      {
        v40 = 0;
        v41 = 0;
        do
        {
          v42 = v19[v40 / __n];
          v43 = v22[v40 / __n];
          *(_DWORD *)&v38[v41] = v42;
          *(_DWORD *)&v38[4 * v24 + v41] = v42;
          *(_DWORD *)&v39[v41] = bswap32(v43);
          v41 += 4;
          v40 += 32;
        }
        while (v41 < __n);
      }
      v91 = v31;
      v44 = (v14 >> 5) + 1;
      if (v33)
      {
        v83 = (v14 >> 5) + 1;
        v45 = 0;
        v46 = 12 * v24;
        do
        {
          v47 = &v38[v30];
          v48 = &v39[v32];
          memcpy(&v38[v30], v38, __n);
          memcpy(&v38[v46], &v38[v31], __n);
          memcpy(&v39[v32], v39, __n);
          v33 = v95;
          v45 += 2;
          v39 += v32;
          v38 += v30;
        }
        while (v45 < v95);
        v24 = v92;
        v49 = &v47[8 * v92];
        v25 = v89;
        v50 = &v48[4 * v89];
        v44 = v83;
      }
      else
      {
        v49 = &v38[4 * v88];
        v50 = &v39[4 * v25];
      }
      v51 = v44 & 0xFFFFFFFFFFFFFFELL;
      if (__n)
      {
        v52 = 0;
        v53 = 0;
        a9 = 0.5;
        do
        {
          v54 = v52 / __n;
          if (a10)
            v55 = (double)(255 * v54 / 0x1F);
          else
            v55 = (double)v54 * 219.0 / 31.0 + 16.0;
          v56 = 16843009 * (int)(v55 + 0.5);
          *(_DWORD *)&v49[v53] = v56;
          *(_DWORD *)&v49[4 * v24 + v53] = v56;
          *(_DWORD *)&v50[v53] = -2139062144;
          v53 += 4;
          v52 += 128;
        }
        while (v53 < __n);
      }
      v86 = 3 * v84 + 4 * v51;
      if (v33)
      {
        v85 = v51;
        v57 = 0;
        v58 = 12 * v24;
        do
        {
          v59 = &v49[v30];
          v60 = &v50[v32];
          memcpy(&v49[v30], v49, __n);
          memcpy(&v49[v58], &v49[v31], __n);
          memcpy(&v50[v32], v50, __n);
          v57 += 2;
          v50 += v32;
          v49 += v30;
        }
        while (v57 < v95);
        v24 = v92;
        v61 = &v59[8 * v92];
        v62 = &v60[4 * v89];
        v51 = v85;
      }
      else
      {
        v61 = &v49[4 * v88];
        v62 = &v50[4 * v25];
      }
      v63 = 0;
      v97[0] = *v87;
      v64 = v87[6];
      v97[1] = v87[5];
      v65 = *((unsigned __int8 *)v87 + 28);
      v97[2] = v87[3];
      v97[3] = v64;
      v98[0] = *v93;
      v66 = v93[6];
      v98[1] = v93[5];
      v67 = v93[7];
      v98[2] = v93[3];
      v68 = v51 - 2;
      v69 = (double)v65;
      v70 = (double)BYTE1(v67);
      v98[3] = v66;
      v71 = (double)v67;
      v96 = 12 * v24;
      do
      {
        if (__n)
        {
          v72 = 0;
          LOBYTE(a9) = v97[v63];
          a9 = (double)*(unint64_t *)&a9;
          v73 = (double)HIBYTE(v98[v63]);
          v74 = (double)v98[v63];
          v75 = v62;
          do
          {
            v76 = (double)v72 / (double)(__n - 1);
            v77 = (int)(v76 * a9 + v69 * (1.0 - v76) + 0.5);
            v61[v72] = v77;
            v61[4 * v24 + v72] = v77;
            if ((v72 & 1) == 0)
            {
              *(_WORD *)v75 = bswap32((int)(v76 * v74 + v71 * (1.0 - v76) + 0.5) | ((int)(v76 * v73 + v70 * (1.0 - v76) + 0.5) << 8)) >> 16;
              v75 += 2;
            }
            ++v72;
          }
          while (__n != v72);
        }
        if (v68)
        {
          v94 = v63;
          for (i = 0; i < v68; i += 2)
          {
            v79 = &v61[v30];
            v80 = &v62[v32];
            memcpy(&v61[v30], v61, __n);
            memcpy(&v61[v96], &v61[v91], __n);
            memcpy(&v62[v32], v62, __n);
            v62 += v32;
            v61 += v30;
          }
          v61 = &v79[v30];
          v62 = &v80[v32];
          v24 = v92;
          v63 = v94;
        }
        else
        {
          v61 += 4 * v88;
          v62 += 4 * v89;
        }
        ++v63;
      }
      while (v63 != 4);
      return v86;
    }
  }
  return result;
}

void ___ZN5H9ISP18H9ISPFrameReceiver9FrameDoneEPviPyi_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 312))
  {
    v3 = *(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
    if (v3)
    {
      v3(*(_QWORD *)(v2 + 64), v2, **(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 40) + 16, *(_QWORD *)(a1 + 40) + 12);
      v2 = *(_QWORD *)(a1 + 32);
    }
    v4 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v2 + 24);
    if (v4)
      v4(*(_QWORD *)(v2 + 32), **(_QWORD **)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 12), *(_QWORD *)(a1 + 40) + 16);
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v5 + 12))
  {
    v6 = 0;
    v7 = 16;
    do
    {
      CVPixelBufferRelease(*(CVPixelBufferRef *)(v5 + v7));
      ++v6;
      v5 = *(_QWORD *)(a1 + 40);
      v7 += 16;
    }
    while (v6 < *(unsigned int *)(v5 + 12));
  }
  JUMPOUT(0x23B7D8B08);
}

uint64_t H9ISP::H9ISPFrameReceiver::tickleNoDataTimer(H9ISP::H9ISPFrameReceiver *this)
{
  pthread_mutex_t *v2;
  __CFRunLoopTimer *v3;
  CFAbsoluteTime Current;

  v2 = (pthread_mutex_t *)((char *)this + 200);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 200));
  v3 = (__CFRunLoopTimer *)*((_QWORD *)this + 33);
  if (v3)
  {
    Current = CFAbsoluteTimeGetCurrent();
    CFRunLoopTimerSetNextFireDate(v3, Current + *((double *)this + 85));
  }
  return pthread_mutex_unlock(v2);
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPybb_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v1 + 480), *(unsigned __int16 *)(a1 + 40));
  return notify_post(*(const char **)(v1 + 472));
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPybb_block_invoke_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v1 + 456), 0xFFFFuLL);
  return notify_post(*(const char **)(v1 + 448));
}

uint64_t ___ZN5H9ISP18H9ISPFrameReceiver20ProcessFrameMetadataEP10__CVBufferPybb_block_invoke_3(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  notify_set_state(*(_DWORD *)(v1 + 456), *(unsigned int *)(a1 + 40));
  return notify_post(*(const char **)(v1 + 448));
}

uint64_t H9ISP::H9ISPFrameReceiver::NoDataTimeout(H9ISP::H9ISPFrameReceiver *this, __CFRunLoopTimer *a2, void *a3)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  result = puts("H9ISPFrameReceiver::NoDataTimeout!");
  v5 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)a2 + 5);
  if (v5)
    return v5(6, 0, 0, 0, 0, *((_QWORD *)a2 + 6));
  return result;
}

BOOL H9ISP::H9ISPFrameReceiver::isNewOutputSizeChangePending(H9ISP::H9ISPFrameReceiver *this)
{
  return *((_QWORD *)this + 78) != 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::EnableMetaDataDictionaryCreationOnRealTimeThread(H9ISP::H9ISPFrameReceiver *this, char a2)
{
  *((_BYTE *)this + 660) = a2;
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::SetFrameDoneTimeoutDuration(H9ISP::H9ISPFrameReceiver *this, double a2)
{
  if (a2 < 2.0)
    a2 = 2.0;
  *((double *)this + 85) = a2;
  H9ISP::H9ISPFrameReceiver::tickleNoDataTimer(this);
  return 0;
}

uint64_t H9ISP::H9ISPFrameReceiver::AllocateAndSendOneShotBuffers(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t Buffer;
  uint64_t i;
  __CVBuffer *v5;
  uint64_t v8;
  unint64_t v9;
  H9ISP::H9ISPFrameReceiverBufferPool ***v10;
  uint64_t v11;
  H9ISP::H9ISPFrameReceiverBufferPool **v12;
  H9ISP::H9ISPFrameReceiverBufferPool **v13;
  uint64_t v14;
  H9ISP::H9ISPFrameReceiverBufferPool *v15;
  H9ISP::H9ISPFrameReceiverBufferPool **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __CVBuffer **v20;
  uint64_t v21;
  uint64_t v22;
  __CVBuffer **v23;
  __CVBuffer *v24;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __CVBuffer *v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[640];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  Buffer = 3758097086;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  if (*(_DWORD *)a1 == 1)
  {
    if (a3 <= 0x10)
    {
      v8 = *(_QWORD *)(a1 + 512);
      v9 = *(_QWORD *)(a1 + 536);
      v10 = (H9ISP::H9ISPFrameReceiverBufferPool ***)(v8 + 8 * (v9 >> 9));
      v11 = *(_QWORD *)(a1 + 520);
      if (v11 == v8)
        v12 = 0;
      else
        v12 = &(*v10)[*(_QWORD *)(a1 + 536) & 0x1FFLL];
LABEL_13:
      v13 = v12 - 512;
      while (1)
      {
        v14 = v11 == v8
            ? 0
            : *(_QWORD *)(v8 + (((*(_QWORD *)(a1 + 544) + v9) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(_QWORD *)(a1 + 544) + v9) & 0x1FF);
        if (v12 == (H9ISP::H9ISPFrameReceiverBufferPool **)v14)
          break;
        v15 = *v12;
        if (*(_DWORD *)*v12 == a2)
        {
          v17 = *(unsigned int *)(a1 + 316);
          if (v17 > 4)
            v18 = 0;
          else
            v18 = *((_DWORD *)v15 + v17 + 20);
          v19 = (a3 - v18);
          if ((int)v19 >= 1)
          {
            v20 = v34;
            v21 = (a3 - v18);
            while (1)
            {
              Buffer = H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(v15, v20);
              if ((_DWORD)Buffer)
                goto LABEL_5;
              ++v20;
              if (!--v21)
              {
                v22 = 0;
                v23 = v34;
                do
                {
                  v33 = 0;
                  v33 = operator new();
                  v24 = *v23;
                  *(_QWORD *)v33 = *v23;
                  IOSurface = CVPixelBufferGetIOSurface(v24);
                  ID = IOSurfaceGetID(IOSurface);
                  v27 = v33;
                  *(_DWORD *)(v33 + 8) = ID;
                  *(_QWORD *)(v27 + 16) = v15;
                  std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::push_back((_QWORD *)(a1 + 552), &v33);
                  v28 = &v42[v22];
                  *(_QWORD *)v28 = H9ISP::H9ISPFrameReceiver::FrameDone;
                  *((_QWORD *)v28 + 1) = a1;
                  *((_DWORD *)v28 + 4) = *(_DWORD *)(v33 + 8);
                  *(_QWORD *)(v28 + 20) = *((_QWORD *)v15 + 4);
                  *((_DWORD *)v28 + 7) = *((_DWORD *)v15 + 12);
                  v29 = *(unsigned int *)(a1 + 316);
                  if (v29 > 4)
                    v30 = -1;
                  else
                    v30 = *((_DWORD *)v15 + v29 + 1);
                  *((_DWORD *)v28 + 8) = v30;
                  v22 += 40;
                  ++v23;
                }
                while (40 * v19 != v22);
                v31 = H9ISP::H9ISPDevice::ISP_SendBuffers(*(_QWORD *)(a1 + 304), v42, v19, *(_DWORD *)(a1 + 280));
                Buffer = v31;
                if ((_DWORD)v31)
                {
                  printf("pH9ISPDevice->ISP_SendBuffers failed, result=0x%08X\n", v31);
                  goto LABEL_5;
                }
                v32 = *(unsigned int *)(a1 + 316);
                if (v32 <= 4)
                {
                  Buffer = 0;
                  *((_DWORD *)v15 + v32 + 20) += v19;
                  return Buffer;
                }
                return 0;
              }
            }
          }
          printf("Warning: Not queuing any more single shot buffers to firmware");
          return 0;
        }
        ++v12;
        if (*v10 == ++v13)
        {
          v16 = v10[1];
          ++v10;
          v12 = v16;
          goto LABEL_13;
        }
      }
    }
    else
    {
      Buffer = 3758097090;
    }
  }
  else
  {
    Buffer = 3758097122;
  }
LABEL_5:
  for (i = 0; i != 16; ++i)
  {
    v5 = v34[i];
    if (v5)
      CVPixelBufferRelease(v5);
  }
  return Buffer;
}

uint64_t H9ISP::H9ISPFrameReceiver::AllocateOneShotBuffer(uint64_t a1, int a2, __CVBuffer **a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  H9ISP::H9ISPFrameReceiverBufferPool ***v8;
  uint64_t v9;
  H9ISP::H9ISPFrameReceiverBufferPool **v10;
  H9ISP::H9ISPFrameReceiverBufferPool **v11;
  uint64_t v12;
  H9ISP::H9ISPFrameReceiverBufferPool **v13;
  __CVBuffer *v14;

  result = 3758097086;
  *a3 = 0;
  if (*(_DWORD *)a1 != 1)
    return 3758097122;
  v14 = 0;
  v6 = *(_QWORD *)(a1 + 512);
  v7 = *(_QWORD *)(a1 + 536);
  v8 = (H9ISP::H9ISPFrameReceiverBufferPool ***)(v6 + 8 * (v7 >> 9));
  v9 = *(_QWORD *)(a1 + 520);
  if (v9 == v6)
    v10 = 0;
  else
    v10 = &(*v8)[*(_QWORD *)(a1 + 536) & 0x1FFLL];
LABEL_6:
  v11 = v10 - 512;
  while (1)
  {
    v12 = v9 == v6
        ? 0
        : *(_QWORD *)(v6 + (((*(_QWORD *)(a1 + 544) + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 544) + v7) & 0x1FF);
    if (v10 == (H9ISP::H9ISPFrameReceiverBufferPool **)v12)
      return result;
    if (*(_DWORD *)*v10 == a2)
    {
      result = H9ISP::H9ISPFrameReceiverBufferPool::allocateBuffer(*v10, &v14);
      if (!(_DWORD)result)
        *a3 = v14;
      return result;
    }
    ++v10;
    if (*v8 == ++v11)
    {
      v13 = v8[1];
      ++v8;
      v10 = v13;
      goto LABEL_6;
    }
  }
}

BOOL H9ISP::H9ISPFrameReceiver::HasPool(_QWORD *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD **v9;

  v2 = a1[64];
  v3 = a1[67];
  v4 = (_QWORD *)(v2 + 8 * (v3 >> 9));
  v5 = a1[65];
  if (v5 == v2)
    v6 = 0;
  else
    v6 = (_DWORD **)(*v4 + 8 * (a1[67] & 0x1FFLL));
LABEL_4:
  v7 = v6 - 512;
  while (1)
  {
    v8 = v5 == v2 ? 0 : *(_QWORD *)(v2 + (((a1[68] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[68] + v3) & 0x1FF);
    if (v6 == (_DWORD **)v8 || **v6 == a2)
      return v6 != (_DWORD **)v8;
    ++v6;
    if ((_DWORD **)*v4 == ++v7)
    {
      v9 = (_DWORD **)v4[1];
      ++v4;
      v6 = v9;
      goto LABEL_4;
    }
  }
}

uint64_t H9ISP::H9ISPFrameReceiver::ModifyPoolBufferCount(uint64_t a1, int a2, int a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  unint64_t v8;
  H9ISP::H9ISPFrameReceiverBufferPool ***v9;
  uint64_t v10;
  H9ISP::H9ISPFrameReceiverBufferPool **v11;
  H9ISP::H9ISPFrameReceiverBufferPool **v12;
  uint64_t v13;
  H9ISP::H9ISPFrameReceiverBufferPool **v14;
  uint64_t v15;

  v6 = (pthread_mutex_t *)(a1 + 72);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  v7 = *(_QWORD *)(a1 + 512);
  v8 = *(_QWORD *)(a1 + 536);
  v9 = (H9ISP::H9ISPFrameReceiverBufferPool ***)(v7 + 8 * (v8 >> 9));
  v10 = *(_QWORD *)(a1 + 520);
  if (v10 == v7)
    v11 = 0;
  else
    v11 = &(*v9)[*(_QWORD *)(a1 + 536) & 0x1FFLL];
LABEL_4:
  v12 = v11 - 512;
  while (1)
  {
    if (v10 == v7)
      v13 = 0;
    else
      v13 = *(_QWORD *)(v7 + (((*(_QWORD *)(a1 + 544) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(a1 + 544) + v8) & 0x1FF);
    if (v11 == (H9ISP::H9ISPFrameReceiverBufferPool **)v13)
    {
      v15 = 3758097086;
      goto LABEL_14;
    }
    if (*(_DWORD *)*v11 == a2)
      break;
    ++v11;
    if (*v9 == ++v12)
    {
      v14 = v9[1];
      ++v9;
      v11 = v14;
      goto LABEL_4;
    }
  }
  v15 = H9ISP::H9ISPFrameReceiverBufferPool::ModifyBufferCount(*v11, a3);
LABEL_14:
  pthread_mutex_unlock(v6);
  return v15;
}

uint64_t H9ISP::H9ISPFrameReceiver::getOutputSize(_QWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _BYTE *a7)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int **v11;
  int *v12;
  int v13;
  uint64_t i;
  int **v15;
  uint64_t v16;
  uint64_t result;
  int v18;

  v7 = a1[64];
  v8 = a1[67];
  v9 = (_QWORD *)(v7 + 8 * (v8 >> 9));
  v10 = a1[65];
  if (v10 == v7)
    v11 = 0;
  else
    v11 = (int **)(*v9 + 8 * (a1[67] & 0x1FFLL));
  while (1)
  {
    if (v10 == v7)
      v16 = 0;
    else
      v16 = *(_QWORD *)(v7 + (((a1[68] + v8) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[68] + v8) & 0x1FF);
    if (v11 == (int **)v16)
      return 3758097097;
    v12 = *v11;
    v13 = **v11;
    if (!v13)
    {
      for (i = 0; i != 5; ++i)
        v13 += *((unsigned __int8 *)v12 + i + 24);
      if (!v13)
        break;
    }
    if ((int **)((char *)++v11 - *v9) == (int **)4096)
    {
      v15 = (int **)v9[1];
      ++v9;
      v11 = v15;
    }
  }
  result = 0;
  *a2 = v12[8];
  *a3 = v12[9];
  *a4 = v12[10];
  v18 = v12[12];
  *a5 = v12[11];
  *a6 = v18;
  *a7 = *((_BYTE *)v12 + 52);
  return result;
}

uint64_t H9ISP::H9ISPFrameReceiver::setNewOutputSize(H9ISP::H9ISPFrameReceiver *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  pthread_mutex_t *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void (*v27)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _BYTE v29[20];
  int64x2_t *v30;
  int v31;
  _QWORD *v33;

  v13 = (pthread_mutex_t *)((char *)this + 72);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 72));
  v14 = *((_QWORD *)this + 64);
  v15 = *((_QWORD *)this + 67);
  v16 = (char *)(v14 + 8 * (v15 >> 9));
  v17 = *((_QWORD *)this + 65);
  if (v17 == v14)
    v18 = 0;
  else
    v18 = (char *)(*(_QWORD *)v16 + 8 * (*((_QWORD *)this + 67) & 0x1FFLL));
LABEL_4:
  v19 = v18;
  while (1)
  {
    if (v17 == v14)
      v20 = 0;
    else
      v20 = *(_QWORD *)(v14 + (((*((_QWORD *)this + 68) + v15) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((_QWORD *)this + 68) + v15) & 0x1FF);
    if (v19 == (char *)v20)
    {
      pthread_mutex_unlock(v13);
      return 3758097097;
    }
    v21 = *(_DWORD **)v19;
    if (!**(_DWORD **)v19)
      break;
    v19 += 8;
    v18 += 8;
    if ((char *)(*(_QWORD *)v16 + 4096) == v18)
    {
      v22 = (char *)*((_QWORD *)v16 + 1);
      v16 += 8;
      v18 = v22;
      goto LABEL_4;
    }
  }
  if (!*((_QWORD *)this + 78))
  {
    v31 = a7;
    v30 = (int64x2_t *)((char *)this + 504);
    v24 = (_QWORD *)operator new();
    *(_OWORD *)&v29[4] = *(_OWORD *)(v21 + 14);
    v29[0] = *((_BYTE *)v21 + 52);
    H9ISP::H9ISPFrameReceiverBufferPool::H9ISPFrameReceiverBufferPool((uint64_t)v24, *((_QWORD *)this + 38), 0, a2, a3, ((a3 + 15) & 0xFFFFFFF0) - a3, 0, v21[12], *(uint64_t *)v29, *(_OWORD *)&v29[4] >> 32, *(int *)&v29[16], v21[18], v21[19], *((const void **)v21 + 17), 0, 0);
    v33 = v24;
    v25 = *((unsigned int *)this + 79);
    if (v25 <= 4)
      *((_DWORD *)v24 + v25 + 1) = v21[v25 + 1];
    if (*(_DWORD *)this)
    {
      if (!H9ISP::H9ISPFrameReceiverBufferPool::activatePool((H9ISP::H9ISPFrameReceiverBufferPool *)v24))
      {
        v26 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 5);
        if (v26)
          v26(7, *(unsigned int *)v24, 0, v24[15], v24[16], *((_QWORD *)this + 6));
        *((_DWORD *)this + 158) = a4;
        *((_DWORD *)this + 159) = a5;
        *((_DWORD *)this + 160) = a6;
        *((_DWORD *)this + 161) = v31;
        *((_QWORD *)this + 78) = v24;
        goto LABEL_28;
      }
LABEL_24:
      v23 = 3758097085;
      H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool((H9ISP::H9ISPFrameReceiverBufferPool *)v24);
      MEMORY[0x23B7D8B08]();
      pthread_mutex_unlock(v13);
      return v23;
    }
    if (*((_BYTE *)this + 616))
    {
      if (H9ISP::H9ISPFrameReceiverBufferPool::activatePool((H9ISP::H9ISPFrameReceiverBufferPool *)v24))
        goto LABEL_24;
      v27 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 5);
      if (v27)
        v27(7, *(unsigned int *)v24, 0, v24[15], v24[16], *((_QWORD *)this + 6));
    }
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::erase(v30, v16, v18);
    H9ISP::H9ISPFrameReceiverBufferPool::~H9ISPFrameReceiverBufferPool((H9ISP::H9ISPFrameReceiverBufferPool *)v21);
    MEMORY[0x23B7D8B08]();
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::push_back(v30, &v33);
LABEL_28:
    pthread_mutex_unlock(v13);
    return 0;
  }
  pthread_mutex_unlock(v13);
  return 3758097112;
}

void sub_23580CA78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1060C4012BDE7A7);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::H9ISPFrameReceiver::SetNumFramesUntilNextImageCompensatorCheckForWork(H9ISP::H9ISPFrameReceiver *this, unsigned int a2)
{
  int v2;

  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  *((_DWORD *)this + 101) = v2;
  return 0;
}

uint64_t H9ISP::CreateH9ISPFrameReceiver(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  pthread_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  pthread_mutex_t *v16;
  int v17;
  pthread_mutex_t v18;
  pthread_attr_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v18);
  v6 = 0;
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_OWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_WORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 92);
  v16 = &v18;
  v17 = *(_DWORD *)(a1 + 100);
  v4 = 48;
  pthread_attr_init(&v19);
  pthread_attr_setschedparam(&v19, (const sched_param *)&v4);
  pthread_attr_setdetachstate(&v19, 2);
  pthread_create(&v5, &v19, (void *(__cdecl *)(void *))H9ISP::H9ISPFrameReceiverRTThreadStart, &v6);
  pthread_attr_destroy(&v19);
  H9ISP::H9ISPThreadReadySyncer::wait(&v18);
  **(_QWORD **)a1 = v6;
  if (v6)
    v2 = 0;
  else
    v2 = 3758097084;
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v18);
  return v2;
}

void sub_23580CBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Unwind_Resume(exception_object);
}

uint64_t H9ISP::H9ISPFrameReceiverRTThreadStart(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  _opaque_pthread_t *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  double v10;
  thread_act_t v16;
  uint64_t v18;
  uint64_t v19;
  mach_timebase_info info;
  integer_t policy_info[2];
  unsigned int v22;
  int v23;

  pthread_setname_np("H9ISPFrameReceiverRealTimeThread");
  H9ISP::H9ISPThreadReadySyncer::lock(*(pthread_mutex_t **)(a1 + 104));
  v2 = operator new();
  H9ISP::H9ISPFrameReceiver::H9ISPFrameReceiver(v2, *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), *(_DWORD **)(a1 + 80), *(_BYTE *)(a1 + 88), *(_BYTE *)(a1 + 89), *(_DWORD *)(a1 + 92), *(_DWORD *)(a1 + 96));
  v3 = H9ISP::H9ISPFrameReceiver::setupFrameReceiver((H9ISP::H9ISPFrameReceiver *)v2);
  if (v3)
  {
    H9ISP::H9ISPFrameReceiver::~H9ISPFrameReceiver((H9ISP::H9ISPFrameReceiver *)v2);
    MEMORY[0x23B7D8B08]();
    v2 = 0;
  }
  else
  {
    *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 24);
    HIDWORD(v18) = *(_DWORD *)(a1 + 68) + 19;
    LODWORD(v18) = 64;
    H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(v2, 2, *(_DWORD *)(a1 + 60), (*(_DWORD *)(a1 + 48) >> 4) + 1, 8, 0, 0, 1, 0.0, 1, 64, v18, 0, 16, 1024, 0, CFSTR("META"), -1, 0,
      *(_DWORD *)(a1 + 112));
    v4 = *(_DWORD *)(a1 + 64);
    if (v4 != -1)
    {
      HIDWORD(v19) = *(_DWORD *)(a1 + 68) + 13;
      LODWORD(v19) = 64;
      H9ISP::H9ISPFrameReceiver::addBufferPoolToFrameReceiver(v2, 3, v4, (*(_DWORD *)(a1 + 52) >> 4) + 1, 8, 0, 0, 1, 0.0, 1, 64, v19, 0, 10, 0, 0, CFSTR("FACE"), -1, 0,
        *(_DWORD *)(a1 + 112));
    }
  }
  *(_QWORD *)a1 = v2;
  v5 = *(_DWORD *)(a1 + 92);
  v6 = pthread_self();
  mach_timebase_info(&info);
  if (v5 <= 0x3C)
    v9 = 15;
  else
    v9 = 8;
  if (v5 > 0x78)
    v9 = 4;
  LODWORD(v8) = info.numer;
  LODWORD(v7) = info.denom;
  v10 = (double)v7 / (double)v8 * 1000000.0;
  __asm { FMOV            V2.2D, #2.0 }
  _Q2.f64[0] = (double)v9;
  *(int32x2_t *)policy_info = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_n_f64(_Q2, v10)));
  v22 = (v10 * (double)(2 * v9));
  v23 = 1;
  v16 = pthread_mach_thread_np(v6);
  thread_policy_set(v16, 2u, policy_info, 4u);
  H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 104));
  if (!v3 && v2)
    CFRunLoopRun();
  return 0;
}

void sub_23580CE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x10F0C4008AE675FLL);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::DestroyH9ISPFrameReceiver(H9ISP *this, H9ISP::H9ISPFrameReceiver *a2)
{
  void *v3;

  v3 = (void *)*((_QWORD *)this + 1);
  CFRetain(v3);
  H9ISP::H9ISPFrameReceiver::~H9ISPFrameReceiver(this);
  MEMORY[0x23B7D8B08]();
  CFRunLoopStop((CFRunLoopRef)v3);
  CFRelease(v3);
  return 0;
}

uint64_t H9ISP::DepthRearConfigurations::Count(H9ISP::DepthRearConfigurations *this)
{
  return 4;
}

uint64_t H9ISP::DepthRearConfigurations::getPreset(H9ISP::DepthRearConfigurations *this, int a2)
{
  int v2;
  uint64_t result;
  int *v4;

  v2 = (int)this;
  result = 0;
  v4 = &dword_23582A3B4;
  do
  {
    if (*(v4 - 1) == v2 && *v4 == a2)
      break;
    v4 += 2;
    ++result;
  }
  while (result != 4);
  return result;
}

void std::deque<H9ISP::H9ISPFrameReceiverAllocatedBufferStruct *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23580D1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::assign<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool * const*,H9ISP::H9ISPFrameReceiverBufferPool * const&,H9ISP::H9ISPFrameReceiverBufferPool * const* const*,long,512l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool * const*,H9ISP::H9ISPFrameReceiverBufferPool * const&,H9ISP::H9ISPFrameReceiverBufferPool * const* const*,long,512l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__assign_with_size_random_access[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool * const*,H9ISP::H9ISPFrameReceiverBufferPool * const&,H9ISP::H9ISPFrameReceiverBufferPool * const* const*,long,512l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char **v18;
  char *v19;
  char **v20;
  char *v21;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v14 = a1[1];
    v15 = (char *)(v14 + 8 * (a1[4] >> 9));
    if (a1[2] == v14)
      v16 = 0;
    else
      v16 = *(_QWORD *)v15 + 8 * (a1[4] & 0x1FFLL);
    v22[0] = a2;
    v22[1] = a3;
    v18 = (char **)std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100]((uint64_t)v22, a4);
    v23 = v15;
    v24 = v16;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>>>(a2, a3, v18, v19, (uint64_t)&v23);
    return (_QWORD *)std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__erase_to_end((uint64_t)a1, v23, v24);
  }
  else
  {
    v9 = (char **)std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v20, v7);
    v10 = (uint64_t *)v8;
    v11 = a1[1];
    if (a1[2] == v11)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v11 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    v23 = (char *)(v11 + 8 * (a1[4] >> 9));
    v24 = v12;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>,std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>>>(v20, v21, v9, v8, (uint64_t)&v23);
    return std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__append_with_size[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool * const*,H9ISP::H9ISPFrameReceiverBufferPool * const&,H9ISP::H9ISPFrameReceiverBufferPool * const* const*,long,512l>>(a1, v9, v10, a4 - a1[5]);
  }
}

_QWORD *std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__append_with_size[abi:ne180100]<std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool * const*,H9ISP::H9ISPFrameReceiverBufferPool * const&,H9ISP::H9ISPFrameReceiverBufferPool * const* const*,long,512l>>(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  result = std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100]((uint64_t)v23, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = (_QWORD *)v14;
        do
        {
          v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v22 = v13[1];
      ++v13;
      v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

uint64_t std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 8 * (v5 & 0x1FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - a2) << 6);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 8 * (*(_QWORD *)(result + 32) & 0x1FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(_QWORD *)v13) >> 3);
      std::__deque_iterator<H9ISP::H9ISPFrameReceiverBufferPool *,H9ISP::H9ISPFrameReceiverBufferPool **,H9ISP::H9ISPFrameReceiverBufferPool *&,H9ISP::H9ISPFrameReceiverBufferPool ***,long,512l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void std::deque<H9ISP::H9ISPFrameReceiverBufferPool *>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::H9ISPFrameReceiverBufferPool **>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<H9ISP::H9ISPFrameReceiverBufferPool **>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_23580DAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

H9ISP::H9ISPFirmwareLogger *H9ISP::H9ISPFirmwareLogger::H9ISPFirmwareLogger(H9ISP::H9ISPFirmwareLogger *this, H9ISP::H9ISPDevice *a2, void (*a3)(void *, const char *), void *a4, int a5, int a6)
{
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  pthread_attr_t v11;
  pthread_mutex_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 1) = a3;
  v7 = (_OWORD *)((char *)this + 8);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  v8 = (_QWORD *)((char *)this + 24);
  *((_DWORD *)this + 7) = a6;
  H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v12);
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 56) = 0;
  v9 = *(_QWORD *)this;
  *((_QWORD *)this + 5) = &v12;
  *((_QWORD *)this + 6) = v9;
  *((_OWORD *)this + 4) = *v7;
  *((_QWORD *)this + 10) = *v8;
  *((_QWORD *)this + 4) = this;
  pthread_attr_init(&v11);
  pthread_attr_setdetachstate(&v11, 1);
  pthread_create((pthread_t *)this + 11, &v11, (void *(__cdecl *)(void *))H9ISP::H9ISPFirmwareLoggerThreadStart, (char *)this + 32);
  pthread_attr_destroy(&v11);
  H9ISP::H9ISPThreadReadySyncer::wait(&v12);
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v12);
  return this;
}

void sub_23580DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t H9ISP::H9ISPFirmwareLoggerThreadStart(uint64_t a1)
{
  int v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFNumberRef v6;
  __IOSurface *v7;
  __IOSurface *v8;
  IOSurfaceID ID;
  void *BaseAddress;
  int ClientLoggingSession;
  size_t AllocSize;
  unsigned int *v13;
  size_t v14;
  unsigned int v15;
  unsigned int *v16;
  void (*v17)(_QWORD, char *);
  int v18;
  uint32_t seed;
  size_t valuePtr;

  pthread_setname_np("H9ISPFirmwareLoggerThread");
  H9ISP::H9ISPThreadReadySyncer::lock(*(pthread_mutex_t **)(a1 + 8));
  if (!*(_QWORD *)(a1 + 16))
  {
    H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 8));
    return 0;
  }
  v2 = *(_DWORD *)(a1 + 52);
  if (v2)
    H9ISP::H9ISPFirmwareLogger::SetFirmwareLoggerThreadPriority(*(H9ISP::H9ISPFirmwareLogger **)a1, v2);
  H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 8));
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    printf("%s: Unable to allocate CFDictionary for IOSurface properties \n", "void *H9ISP::H9ISPFirmwareLoggerThreadStart(H9ISPFirmwareLoggerThreadParams *)");
LABEL_29:
    (*(void (**)(_QWORD, const char *))(a1 + 32))(*(_QWORD *)(a1 + 40), "Firmware logging aborted \n");
    return 0;
  }
  v5 = Mutable;
  valuePtr = 0x10000;
  v6 = CFNumberCreate(v3, kCFNumberLongType, &valuePtr);
  CFDictionaryAddValue(v5, (const void *)*MEMORY[0x24BDD8E18], v6);
  CFRelease(v6);
  v7 = IOSurfaceCreate(v5);
  if (!v7)
  {
    printf("%s: Unable to create IOSurface for client logging buffer \n", "void *H9ISP::H9ISPFirmwareLoggerThreadStart(H9ISPFirmwareLoggerThreadParams *)");
    CFRelease(v5);
    goto LABEL_29;
  }
  v8 = v7;
  seed = 0;
  IOSurfaceLock(v7, 0, &seed);
  ID = IOSurfaceGetID(v8);
  BaseAddress = IOSurfaceGetBaseAddress(v8);
  if (BaseAddress)
  {
    bzero(BaseAddress, valuePtr);
    ClientLoggingSession = H9ISP::H9ISPDevice::ISP_CreateClientLoggingSession(*(H9ISP::H9ISPDevice **)(a1 + 16), ID);
    if (ClientLoggingSession)
    {
      printf("%s: ISP_CreateClientLoggingSession returned 0x%08x \n", "void *H9ISP::H9ISPFirmwareLoggerThreadStart(H9ISPFirmwareLoggerThreadParams *)", ClientLoggingSession);
      CFRelease(v8);
      v8 = 0;
      ID = 0;
    }
  }
  IOSurfaceUnlock(v8, 0, &seed);
  CFRelease(v5);
  if (!v8)
    goto LABEL_29;
  while (!*(_BYTE *)(a1 + 24))
  {
    IOSurfaceLock(v8, 0, 0);
    AllocSize = IOSurfaceGetAllocSize(v8);
    v13 = (unsigned int *)IOSurfaceGetBaseAddress(v8);
    v15 = *v13;
    LODWORD(v14) = v13[1];
    if ((_DWORD)v14 != *v13)
    {
      v16 = v13;
      do
      {
        if (*(_BYTE *)(a1 + 24))
          break;
        v17 = *(void (**)(_QWORD, char *))(a1 + 32);
        if (v17)
        {
          v17(*(_QWORD *)(a1 + 40), (char *)v16 + v14);
          v15 = *v16;
          LODWORD(v14) = v16[1];
        }
        v14 = (v14 + 128);
        if (AllocSize <= v14)
          LODWORD(v14) = 128;
        v16[1] = v14;
        if (v15 < 0x80 || AllocSize <= v15)
        {
          (*(void (**)(_QWORD, const char *))(a1 + 32))(*(_QWORD *)(a1 + 40), "Logging Buffer Corruption.  Aborting Logging\n");
          *(_BYTE *)(a1 + 24) = 1;
          v15 = *v16;
          LODWORD(v14) = v16[1];
        }
      }
      while ((_DWORD)v14 != v15);
    }
    IOSurfaceUnlock(v8, 0, 0);
    usleep(1000 * *(_DWORD *)(a1 + 48));
  }
  v18 = H9ISP::H9ISPDevice::ISP_TerminateClientLoggingSession(*(H9ISP::H9ISPDevice **)(a1 + 16), ID);
  if (v18)
    printf("%s: ISP_TerminateClientLoggingSession returned 0x%08x \n", "void *H9ISP::H9ISPFirmwareLoggerThreadStart(H9ISPFirmwareLoggerThreadParams *)", v18);
  CFRelease(v8);
  return 0;
}

void H9ISP::H9ISPFirmwareLogger::~H9ISPFirmwareLogger(pthread_t *this)
{
  void *v2;

  v2 = 0;
  H9ISP::H9ISPFirmwareLogger::SetFirmwareLoggerThreadPriority((H9ISP::H9ISPFirmwareLogger *)this, 47);
  *((_BYTE *)this + 56) = 1;
  pthread_join(this[11], &v2);
  this[11] = 0;
}

uint64_t H9ISP::H9ISPFirmwareLogger::SetFirmwareLoggerThreadPriority(H9ISP::H9ISPFirmwareLogger *this, int a2)
{
  _opaque_pthread_t *v2;
  H9ISP *v4;

  v2 = (_opaque_pthread_t *)*((_QWORD *)this + 11);
  if (!v2)
    return 3758097086;
  v4 = (H9ISP *)pthread_mach_thread_np(v2);
  H9ISP::H9ISPSetMachThreadPriority(v4, a2);
  return 0;
}

uint64_t H9ISP::CreateH9ISPDeviceController(H9ISP *this, H9ISP::H9ISPDeviceController **a2, int (*a3)(H9ISP::H9ISPDeviceController *, void *, H9ISP::H9ISPDevice *), void *a4)
{
  sched_param v8;
  pthread_t v9;
  _QWORD v10[4];
  pthread_mutex_t v11;
  pthread_attr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v11);
  v10[0] = 0;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = &v11;
  v8 = (sched_param)48;
  pthread_attr_init(&v12);
  pthread_attr_setschedparam(&v12, &v8);
  pthread_attr_setdetachstate(&v12, 1);
  pthread_create(&v9, &v12, (void *(__cdecl *)(void *))H9ISP::H9ISPServicesThreadStart, v10);
  pthread_attr_destroy(&v12);
  H9ISP::H9ISPThreadReadySyncer::wait(&v11);
  *(_QWORD *)this = v10[0];
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v11);
  return 0;
}

void sub_23580E0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t H9ISP::H9ISPServicesThreadStart(uint64_t a1)
{
  H9ISP::H9ISPDeviceController *v2;

  pthread_setname_np("H9ISPServicesThread");
  H9ISP::H9ISPThreadReadySyncer::lock(*(pthread_mutex_t **)(a1 + 24));
  v2 = (H9ISP::H9ISPDeviceController *)operator new();
  H9ISP::H9ISPDeviceController::H9ISPDeviceController(v2, *(int (**)(H9ISP::H9ISPDeviceController *, void *, H9ISP::H9ISPDevice *))(a1 + 8), *(void **)(a1 + 16));
  if (H9ISP::H9ISPDeviceController::SetupDeviceController(v2))
  {
    H9ISP::H9ISPDeviceController::~H9ISPDeviceController(v2);
    MEMORY[0x23B7D8B08]();
    *(_QWORD *)a1 = 0;
    H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 24));
  }
  else
  {
    *(_QWORD *)a1 = v2;
    H9ISP::H9ISPThreadReadySyncer::signalAndUnlock(*(H9ISP::H9ISPThreadReadySyncer **)(a1 + 24));
    CFRunLoopRun();
  }
  return 0;
}

void sub_23580E174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x10A0C4054F8D3D6);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::DestroyH9ISPDeviceController(H9ISP *this, H9ISP::H9ISPDeviceController *a2)
{
  __CFRunLoop *v3;
  void *v5;

  v3 = (__CFRunLoop *)CFRetain(*((CFTypeRef *)this + 6));
  CFRunLoopStop(v3);
  v5 = 0;
  pthread_join(*((pthread_t *)this + 8), &v5);
  H9ISP::H9ISPDeviceController::~H9ISPDeviceController(this);
  MEMORY[0x23B7D8B08]();
  CFRelease(v3);
  return 0;
}

char *H9ISP::GetOutputPresetForOutputSize(int a1, int a2, int a3, int a4)
{
  char *result;
  uint64_t v6;
  unsigned int v7;

  v7 = 0;
  result = (char *)H9ISP::getOutputPresets(a1, (int *)&v7, a3, a4);
  if (!result)
    return result;
  v6 = v7;
  if (a2 == 255)
  {
    if (v7)
    {
      while (!result[73])
      {
        result += 84;
        if (!--v6)
          return 0;
      }
      return result;
    }
    return 0;
  }
  if (!v7)
    return 0;
  while (*(_DWORD *)result != a2)
  {
    result += 84;
    if (!--v6)
      return 0;
  }
  return result;
}

void *H9ISP::getOutputPresets(int a1, int *a2, int a3, int a4)
{
  int v4;
  void *result;

  if (a1 > 787)
  {
    if (a1 <= 3413)
    {
      if (a1 > 867)
      {
        switch(a1)
        {
          case 868:
            result = &h9ispOutputPreset_IMX364;
            v4 = 4;
            goto LABEL_64;
          case 1029:
            result = &H9ispOutputPreset_IMX405;
            break;
          case 1044:
            result = &H9ispOutputPreset_IMX414;
            break;
          default:
            goto LABEL_63;
        }
        v4 = 5;
        goto LABEL_64;
      }
      if (a1 == 788)
      {
        result = &h9ispOutputPreset_IMX314;
        v4 = 16;
        goto LABEL_64;
      }
      if (a1 == 852)
      {
        result = &H9ispOutputPreset_IMX354;
        v4 = 17;
        goto LABEL_64;
      }
LABEL_63:
      v4 = 0;
      result = 0;
      goto LABEL_64;
    }
    if (a1 > 22159)
    {
      if (a1 != 22160)
      {
        if (a1 == 38752)
        {
          result = &h9ispOutputPreset_OV9760;
        }
        else
        {
          if (a1 != 38754)
            goto LABEL_63;
          result = &h9ispOutputPreset_OV9762;
        }
        v4 = 11;
        goto LABEL_64;
      }
      result = &h9ispOutputPreset_OV5690;
      goto LABEL_53;
    }
    if (a1 != 3414)
    {
      if (a1 == 4496)
      {
        result = &h9ispOutputPreset_IMX1190;
        v4 = 3;
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    result = &H9ispOutputPreset_VD56G0;
LABEL_62:
    v4 = 2;
    goto LABEL_64;
  }
  if (a1 <= 566)
  {
    if (a1 > 399)
    {
      switch(a1)
      {
        case 400:
          result = &h9ispOutputPreset_IMX190;
          v4 = 23;
          goto LABEL_64;
        case 402:
          result = &h9ispOutputPreset_IMX192;
          v4 = 13;
          goto LABEL_64;
        case 553:
          if (a3 <= 4)
            v4 = 11;
          else
            v4 = 14;
          if (a3 <= 4)
            result = &h9ispOutputPreset_IMX229;
          else
            result = &h9ispOutputPreset_IMX229_H8Plus;
          goto LABEL_64;
      }
      goto LABEL_63;
    }
    if (a1 != 329)
    {
      if (a1 == 356)
      {
        result = &h9ispOutputPreset_IMX164;
        v4 = 25;
        goto LABEL_64;
      }
      goto LABEL_63;
    }
    result = &h9ispOutputPreset_IMX149;
LABEL_53:
    v4 = 19;
    goto LABEL_64;
  }
  if (a1 > 583)
  {
    if (a1 != 584)
    {
      if (a1 == 771)
      {
        result = &h9ispOutputPreset_IMX303;
      }
      else
      {
        if (a1 != 787)
          goto LABEL_63;
        result = &h9ispOutputPreset_IMX313;
      }
      v4 = 27;
      goto LABEL_64;
    }
    result = &h9ispOutputPreset_IMX248;
    goto LABEL_62;
  }
  if (a1 != 567)
  {
    if (a1 == 583)
    {
      result = &h9ispOutputPreset_IMX247;
      v4 = 24;
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (a4)
    v4 = 21;
  else
    v4 = 18;
  if (a4)
    result = &h9ispOutputPreset_IMX237_MantaRay;
  else
    result = &h9ispOutputPreset_IMX237;
LABEL_64:
  *a2 = v4;
  return result;
}

uint64_t H9ISP::H9ISPGetYUVSBufferParamsForDataBufferSize(uint64_t this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    *a2 = this >> 4;
    if ((this & 0xF) != 0)
      *a2 = (this >> 4) + 1;
  }
  if (a3)
    *a3 = 16;
  return this;
}

CFMutableDictionaryRef H9ISP::H9ISPCreateCVBuffer(unsigned int a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9, int a10, char a11, __int16 a12, int a13, int a14)
{
  int v19;
  int v20;
  OSType v21;
  unint64_t v22;
  const __CFAllocator *v23;
  CFMutableDictionaryRef result;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFDictionary *Mutable;
  __CFDictionary *v37;
  CFNumberRef v38;
  int v39;
  int v40;
  int v41;
  OSType pixelFormatType;
  CVPixelBufferRef pixelBufferOut;
  float v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int valuePtr;

  v20 = a13;
  v19 = a14;
  v47 = a2;
  valuePtr = a1;
  v45 = a4;
  v46 = a3;
  v44 = a9;
  pixelBufferOut = 0;
  switch(a5)
  {
    case 0:
      v21 = 875704422;
      if (!a6)
        v21 = 875704438;
      break;
    case 2:
      HIDWORD(v22) = a12 & 0xFF0;
      LODWORD(v22) = HIDWORD(v22) - 64;
      switch((v22 >> 6))
      {
        case 0u:
          v21 = 1735549492;
          break;
        case 1u:
          v21 = 1919379252;
          break;
        case 7u:
          v21 = 1734505012;
          break;
        default:
          v21 = 1650943796;
          break;
      }
      break;
    case 3:
      v21 = 825437747;
      break;
    case 5:
      v21 = 1278226488;
      break;
    default:
      v21 = 2037741158;
      if (!a6)
        v21 = 2037741171;
      break;
  }
  pixelFormatType = v21;
  v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (result)
  {
    v25 = result;
    v26 = CFNumberCreate(v23, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5708], v26);
    CFRelease(v26);
    v41 = a7;
    v27 = CFNumberCreate(v23, kCFNumberIntType, &v41);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC55D0], v27);
    CFRelease(v27);
    v28 = CFNumberCreate(v23, kCFNumberIntType, &v47);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5650], v28);
    CFRelease(v28);
    if (a3)
    {
      v29 = CFNumberCreate(v23, kCFNumberIntType, &v46);
      CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5610], v29);
      CFRelease(v29);
    }
    if (a4)
    {
      v30 = CFNumberCreate(v23, kCFNumberIntType, &v45);
      CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5628], v30);
      CFRelease(v30);
    }
    if ((a12 & 0x800) != 0)
      CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5618], (const void *)*MEMORY[0x24BDBD270]);
    if (v20)
    {
      v31 = CFNumberCreate(v23, kCFNumberIntType, &a13);
      CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5700], v31);
      CFRelease(v31);
    }
    if (a9 != 0.0)
    {
      v32 = CFNumberCreate(v23, kCFNumberFloatType, &v44);
      CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5648], v32);
      CFRelease(v32);
    }
    if (v19 != -1)
    {
      v33 = CFNumberCreate(v23, kCFNumberIntType, &a14);
      CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC5640], v33);
      CFRelease(v33);
    }
    v34 = CFNumberCreate(v23, kCFNumberIntType, &pixelFormatType);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC56B8], v34);
    CFRelease(v34);
    v40 = a8;
    v35 = CFNumberCreate(v23, kCFNumberIntType, &v40);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x24BDC56C8], v35);
    CFRelease(v35);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v37 = Mutable;
      if (a11)
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8FB8], (const void *)*MEMORY[0x24BDBD268]);
      if ((a12 & 0x400) != 0)
        CFDictionarySetValue(v37, (const void *)*MEMORY[0x24BDD8FC8], (const void *)*MEMORY[0x24BDBD270]);
      v39 = a10;
      v38 = CFNumberCreate(0, kCFNumberIntType, &v39);
      CFDictionarySetValue(v37, (const void *)*MEMORY[0x24BDD8E40], v38);
      CFRelease(v38);
      CFDictionaryAddValue(v25, (const void *)*MEMORY[0x24BDC5668], v37);
      CFRelease(v37);
      CVPixelBufferCreate(v23, valuePtr, v47, pixelFormatType, v25, &pixelBufferOut);
      CFRelease(v25);
      return pixelBufferOut;
    }
    else
    {
      CFRelease(v25);
      return 0;
    }
  }
  return result;
}

CVPixelBufferPoolRef H9ISP::H9ISPCreateCVBufferPool(int a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, float a9, int a10, int a11, char a12, __int16 a13, int a14, void *value, int a16, int a17, unsigned __int8 a18)
{
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  const __CFAllocator *v25;
  CVPixelBufferPoolRef result;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  const void **v33;
  CFNumberRef v34;
  CFNumberRef v35;
  int v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  const void *v40;
  const void *v41;
  const void *v42;
  __CFDictionary *Mutable;
  CFNumberRef v44;
  CFNumberRef v45;
  __CFDictionary *v46;
  __CFDictionary *v47;
  const void **v48;
  const void **v49;
  __CFDictionary *v50;
  __CFDictionary *v51;
  CFNumberRef v52;
  int v53;
  int v54;
  int v55;
  int v56;
  CVPixelBufferPoolRef poolOut;
  float v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int valuePtr;

  v21 = a16;
  v22 = a17;
  v62 = a2;
  valuePtr = a1;
  v60 = a4;
  v61 = a3;
  v59 = a6;
  v58 = a9;
  poolOut = 0;
  switch(a5)
  {
    case 0:
      v23 = 875704422;
      if (!a7)
        v23 = 875704438;
      break;
    case 2:
      HIDWORD(v24) = a13 & 0xFF0;
      LODWORD(v24) = HIDWORD(v24) - 64;
      switch((v24 >> 6))
      {
        case 0u:
          v23 = 1735549492;
          break;
        case 1u:
          v23 = 1919379252;
          break;
        case 7u:
          v23 = 1734505012;
          break;
        default:
          v23 = 1650943796;
          break;
      }
      break;
    case 3:
      v23 = 825437747;
      break;
    case 5:
      v23 = 1278226488;
      break;
    default:
      v23 = 2037741158;
      if (!a7)
        v23 = 2037741171;
      break;
  }
  v56 = v23;
  v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (result)
  {
    v27 = result;
    v28 = CFNumberCreate(v25, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5708], v28);
    CFRelease(v28);
    v55 = a8;
    v29 = CFNumberCreate(v25, kCFNumberIntType, &v55);
    CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC55D0], v29);
    CFRelease(v29);
    v30 = CFNumberCreate(v25, kCFNumberIntType, &v62);
    CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5650], v30);
    CFRelease(v30);
    if (v61)
    {
      v31 = CFNumberCreate(v25, kCFNumberIntType, &v61);
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5610], v31);
      CFRelease(v31);
    }
    if (v60)
    {
      v32 = CFNumberCreate(v25, kCFNumberIntType, &v60);
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5628], v32);
      CFRelease(v32);
    }
    v33 = (const void **)MEMORY[0x24BDBD270];
    if ((a13 & 0x800) != 0)
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5618], (const void *)*MEMORY[0x24BDBD270]);
    if (a14)
    {
      v34 = CFNumberCreate(v25, kCFNumberIntType, &a14);
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5700], v34);
      CFRelease(v34);
    }
    if (a9 != 0.0)
    {
      v35 = CFNumberCreate(v25, kCFNumberFloatType, &v58);
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5648], v35);
      CFRelease(v35);
    }
    v36 = a18;
    if (v21 != -1)
    {
      v37 = CFNumberCreate(v25, kCFNumberIntType, &a16);
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5640], v37);
      CFRelease(v37);
    }
    v38 = CFNumberCreate(v25, kCFNumberIntType, &v56);
    CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC56B8], v38);
    CFRelease(v38);
    v54 = a10;
    v39 = CFNumberCreate(v25, kCFNumberIntType, &v54);
    CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC56C8], v39);
    CFRelease(v39);
    v40 = *v33;
    v41 = (const void *)*MEMORY[0x24BDBD268];
    if (v36)
      v42 = v40;
    else
      v42 = (const void *)*MEMORY[0x24BDBD268];
    CFDictionarySetValue(v27, (const void *)*MEMORY[0x24BDC5680], v42);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v22)
    {
      v44 = CFNumberCreate(v25, kCFNumberIntType, &a17);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8E20], v44);
      CFRelease(v44);
    }
    if (a12 && (v36 & 1) == 0)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8FB8], v41);
    if ((a13 & 0x400) != 0)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8FC8], v40);
    v53 = a11;
    v45 = CFNumberCreate(0, kCFNumberIntType, &v53);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDD8E40], v45);
    CFRelease(v45);
    CFDictionaryAddValue(v27, (const void *)*MEMORY[0x24BDC5668], Mutable);
    CFRelease(Mutable);
    if (v62 == 8 || (a13 & 0x30) == 0 && !a7)
      goto LABEL_50;
    v46 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!v46)
      goto LABEL_50;
    v47 = v46;
    if (a7)
    {
      CFDictionarySetValue(v46, (const void *)*MEMORY[0x24BDC5420], (const void *)*MEMORY[0x24BDC5448]);
      if ((a13 & 0x10) != 0)
        v48 = (const void **)MEMORY[0x24BDC54D0];
      else
        v48 = (const void **)MEMORY[0x24BDC54B0];
      if ((a13 & 0x30) == 0)
        goto LABEL_49;
      v49 = (const void **)MEMORY[0x24BDC5590];
    }
    else
    {
      if ((a13 & 0x10) != 0)
        v48 = (const void **)MEMORY[0x24BDC54D0];
      else
        v48 = (const void **)MEMORY[0x24BDC54B0];
      if ((a13 & 0x30) == 0)
        goto LABEL_49;
      v49 = (const void **)MEMORY[0x24BDC55A8];
    }
    CFDictionarySetValue(v47, (const void *)*MEMORY[0x24BDC5570], *v49);
    CFDictionarySetValue(v47, (const void *)*MEMORY[0x24BDC5490], *v48);
    CFDictionarySetValue(v47, (const void *)*MEMORY[0x24BDC5510], (const void *)*MEMORY[0x24BDC5538]);
LABEL_49:
    CFDictionaryAddValue(v27, (const void *)*MEMORY[0x24BDC53F8], v47);
    CFRelease(v47);
LABEL_50:
    v50 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (v50)
    {
      v51 = v50;
      if (value)
        CFDictionarySetValue(v50, (const void *)*MEMORY[0x24BDC56F8], value);
      v52 = CFNumberCreate(0, kCFNumberCFIndexType, &v59);
      CFDictionaryAddValue(v51, (const void *)*MEMORY[0x24BDC56F0], v52);
      CFRelease(v52);
      CVPixelBufferPoolCreate(v25, v51, v27, &poolOut);
      CFRelease(v51);
    }
    CFRelease(v27);
    return poolOut;
  }
  return result;
}

long double H9ISP::CalculateAdditionalMetadataParameters(H9ISP *this, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, double a10, double a11, double a12, double a13, unsigned __int16 a14, unsigned __int16 a15, unsigned __int16 a16, unsigned __int16 a17, long double *a18, double *a19, double *a20,double *a21,double *a22)
{
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  long double result;

  v29 = a14;
  if (a9 <= 0.0)
    a9 = 0.0001;
  if (a8)
    v30 = a8;
  else
    v30 = 128;
  if (!a14)
    v29 = 128;
  if (a7 <= 4)
    v31 = 4;
  else
    v31 = a7;
  v32 = (double)v31;
  v33 = (double)v30 * 0.00390625 * (double)a15 * 0.00390625 * (double)v29 * 0.00390625;
  *a18 = log2((double)v31 / (a9 * v33 * a13) / 67.2);
  *a19 = v33 * (double)a16 / ((double)a17 * 0.00390625);
  v34 = ((double)(int)(8 * v30 - 2048) * a12 + (double)(int)(2048 - v30) * a11) / (double)(int)(7 * v30);
  if (v30 > 0x800)
    v34 = a12;
  if (v30 < 0x100)
    v34 = a11;
  v35 = log10(v32 / v33 / a10 / sqrt(v32 / v33 / a10 + v34 * v34)) * 20.0;
  result = v35 + log10(sqrt((double)(a3 * a2) / (double)(a5 * a4))) * -20.0;
  *a20 = result;
  *a21 = v35;
  return result;
}

uint64_t H9ISP::CalculateTotalCrop(H9ISP *this, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, _DWORD *a13, unsigned int *a14, unsigned int *a15, unsigned int *a16, unsigned int *a17)
{
  double v17;
  double v18;

  v17 = 1.0;
  v18 = 1.0;
  if (a7)
    v18 = (double)a5 / (double)a7;
  if (a8)
    v17 = (double)a6 / (double)a8;
  *a13 = (round(v18 * (double)a9) + (double)(a3 + (_DWORD)this));
  *a14 = (round(v17 * (double)a10) + (double)(a4 + a2));
  *a15 = vcvtad_u64_f64(v18 * (double)a11);
  *a16 = vcvtad_u64_f64(v17 * (double)a12);
  return 0;
}

const __CFString *H9ISP::H9ISPGetCFPreferenceNumber(const __CFString *this, const __CFString *a2, const __CFString *a3)
{
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;
  uint64_t IntValue;
  CFStringEncoding SystemEncoding;
  const char *CStringPtr;
  CFTypeID v10;
  CFTypeID v11;
  unsigned int valuePtr;

  v4 = (const __CFString *)CFPreferencesCopyValue(this, a2, (CFStringRef)*MEMORY[0x24BDBD590], (CFStringRef)*MEMORY[0x24BDBD570]);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 != CFStringGetTypeID())
    {
      v10 = CFGetTypeID(v5);
      if (v10 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr))
          IntValue = valuePtr;
        else
          IntValue = a3;
      }
      else
      {
        v11 = CFGetTypeID(v5);
        IntValue = (uint64_t)a3;
        if (v11 == CFBooleanGetTypeID())
          IntValue = CFEqual(v5, (CFTypeRef)*MEMORY[0x24BDBD270]);
      }
      goto LABEL_19;
    }
    IntValue = CFStringGetIntValue(v5);
    if (!(_DWORD)IntValue)
    {
      SystemEncoding = CFStringGetSystemEncoding();
      CStringPtr = CFStringGetCStringPtr(v5, SystemEncoding);
      if (!CStringPtr)
        goto LABEL_7;
      IntValue = strtol(CStringPtr, 0, 0);
    }
    if ((int)IntValue > 0)
    {
LABEL_19:
      CFRelease(v5);
      return (const __CFString *)IntValue;
    }
LABEL_7:
    IntValue = 1;
    if (CFStringCompare(v5, CFSTR("true"), 1uLL))
    {
      IntValue = 1;
      if (CFStringCompare(v5, CFSTR("yes"), 1uLL))
      {
        if (CFStringCompare(v5, CFSTR("false"), 1uLL) == kCFCompareEqualTo
          || CFStringCompare(v5, CFSTR("no"), 1uLL) == kCFCompareEqualTo
          || (IntValue = (uint64_t)a3, CFStringCompare(v5, CFSTR("0"), 1uLL) == kCFCompareEqualTo))
        {
          IntValue = 0;
        }
      }
    }
    goto LABEL_19;
  }
  return a3;
}

unsigned int *H9ISP::FindCommandInSetfile(H9ISP *this, unsigned __int8 *a2, int a3)
{
  int v3;
  unsigned int *v4;
  uint64_t v5;

  v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    v4 = (unsigned int *)((char *)this + 20);
    do
    {
      v5 = *v4;
      if ((unsigned __int8 *)((unint64_t)v4 + v5) > &a2[(_QWORD)this])
        break;
      if (*((unsigned __int16 *)v4 + 4) == a3)
        return v4 + 1;
      v4 = (unsigned int *)((char *)v4 + (v5 + 4));
      --v3;
    }
    while (v3);
  }
  return 0;
}

H9ISP::H9ISPCFLocalMessagePort *H9ISP::H9ISPCFLocalMessagePort::H9ISPCFLocalMessagePort(H9ISP::H9ISPCFLocalMessagePort *this, const __CFString *a2, CFDataRef (__cdecl *a3)(CFMessagePortRef, SInt32, CFDataRef, void *), void (__cdecl *a4)(CFMessagePortRef, void *), void *a5)
{
  __CFMessagePort *v7;
  CFMessagePortContext context;

  *(_QWORD *)this = &off_2506DCCA8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  context.version = 0;
  context.info = a5;
  memset(&context.retain, 0, 24);
  v7 = CFMessagePortCreateLocal(0, a2, a3, &context, 0);
  *((_QWORD *)this + 1) = v7;
  if (a4 && v7)
    CFMessagePortSetInvalidationCallBack(v7, a4);
  return this;
}

void H9ISP::H9ISPCFLocalMessagePort::~H9ISPCFLocalMessagePort(H9ISP::H9ISPCFLocalMessagePort *this)
{
  const void *v2;
  __CFMessagePort *v3;

  *(_QWORD *)this = &off_2506DCCA8;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (__CFMessagePort *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFMessagePortInvalidate(v3);
    CFRelease(*((CFTypeRef *)this + 1));
  }
}

{
  H9ISP::H9ISPCFLocalMessagePort::~H9ISPCFLocalMessagePort(this);
  JUMPOUT(0x23B7D8B08);
}

CFRunLoopSourceRef H9ISP::H9ISPCFLocalMessagePort::GetRunLoopSource(H9ISP::H9ISPCFLocalMessagePort *this)
{
  CFRunLoopSourceRef result;

  result = (CFRunLoopSourceRef)*((_QWORD *)this + 2);
  if (!result)
  {
    result = CFMessagePortCreateRunLoopSource(0, *((CFMessagePortRef *)this + 1), 0);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

void H9ISP::H9ISPCFLocalMessagePort::SetDispatchQueue(H9ISP::H9ISPCFLocalMessagePort *this, NSObject *a2)
{
  *((_QWORD *)this + 3) = a2;
  CFMessagePortSetDispatchQueue(*((CFMessagePortRef *)this + 1), a2);
}

H9ISP::H9ISPCFRemoteMessagePort *H9ISP::H9ISPCFRemoteMessagePort::H9ISPCFRemoteMessagePort(H9ISP::H9ISPCFRemoteMessagePort *this, const __CFString *a2, void (__cdecl *a3)(CFMessagePortRef, void *))
{
  __CFMessagePort *Remote;

  *(_QWORD *)this = &off_2506DCCC8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  Remote = CFMessagePortCreateRemote(0, a2);
  *((_QWORD *)this + 1) = Remote;
  if (a3 && Remote)
    CFMessagePortSetInvalidationCallBack(Remote, a3);
  return this;
}

void H9ISP::H9ISPCFRemoteMessagePort::~H9ISPCFRemoteMessagePort(H9ISP::H9ISPCFRemoteMessagePort *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_2506DCCC8;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
}

{
  H9ISP::H9ISPCFRemoteMessagePort::~H9ISPCFRemoteMessagePort(this);
  JUMPOUT(0x23B7D8B08);
}

CFRunLoopSourceRef H9ISP::H9ISPCFRemoteMessagePort::GetRunLoopSource(H9ISP::H9ISPCFRemoteMessagePort *this)
{
  CFRunLoopSourceRef result;

  result = (CFRunLoopSourceRef)*((_QWORD *)this + 2);
  if (!result)
  {
    result = CFMessagePortCreateRunLoopSource(0, *((CFMessagePortRef *)this + 1), 0);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

void H9ISP::H9ISPCFRemoteMessagePort::SetDispatchQueue(H9ISP::H9ISPCFRemoteMessagePort *this, NSObject *a2)
{
  *((_QWORD *)this + 3) = a2;
  CFMessagePortSetDispatchQueue(*((CFMessagePortRef *)this + 1), a2);
}

uint64_t H9ISP::H9ISPGetMachThreadPriority(H9ISP *this, integer_t *a2, int *a3)
{
  thread_inspect_t v4;
  uint64_t v5;
  uint64_t v6;
  FILE *v7;
  const char *v8;
  size_t v9;
  integer_t v11;
  integer_t v12[5];
  integer_t v13[5];
  integer_t v14[4];
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[5];
  int v17;

  if (!a2)
    return 3758097090;
  v4 = this;
  thread_info_outCnt = 10;
  v5 = thread_info((thread_inspect_t)this, 3u, thread_info_out, &thread_info_outCnt);
  if (!(_DWORD)v5)
  {
    switch(v17)
    {
      case 4:
        thread_info_outCnt = 4;
        v6 = thread_info(v4, 0xCu, v14, &thread_info_outCnt);
        if ((_DWORD)v6)
        {
          v7 = (FILE *)*MEMORY[0x24BDAC8D8];
          v8 = "thread_info() for THREAD_SCHED_FIFO_INFO failed";
          v9 = 47;
          goto LABEL_4;
        }
        v11 = v14[1];
        break;
      case 2:
        thread_info_outCnt = 5;
        v6 = thread_info(v4, 0xBu, v13, &thread_info_outCnt);
        if ((_DWORD)v6)
        {
          v7 = (FILE *)*MEMORY[0x24BDAC8D8];
          v8 = "thread_info() for THREAD_SCHED_RR_INFO failed\n";
          v9 = 46;
          goto LABEL_4;
        }
        v11 = v13[1];
        break;
      case 1:
        thread_info_outCnt = 5;
        v6 = thread_info(v4, 0xAu, v12, &thread_info_outCnt);
        if ((_DWORD)v6)
        {
          v7 = (FILE *)*MEMORY[0x24BDAC8D8];
          v8 = "thread_info() for THREAD_SCHED_TIMESHARE_INFO failed\n";
          v9 = 53;
          goto LABEL_4;
        }
        v11 = v12[1];
        break;
      default:
        fwrite("Unknown mach thread policy\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
        return 0;
    }
    *a2 = v11;
    return v6;
  }
  v6 = v5;
  v7 = (FILE *)*MEMORY[0x24BDAC8D8];
  v8 = "thread_info() for THREAD_BASIC_INFO failed\n";
  v9 = 43;
LABEL_4:
  fwrite(v8, v9, 1uLL, v7);
  return v6;
}

uint64_t H9ISP::H9ISPSetMachThreadPriority(H9ISP *this, int a2)
{
  thread_act_t v3;
  pid_t v4;
  uint64_t v5;
  uint64_t v6;
  integer_t v8;
  integer_t policy_info;
  _BYTE buffer[228];
  int v11;
  uint64_t v12;

  v3 = this;
  v12 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v4 = getpid();
  if (proc_pidinfo(v4, 2, 0, buffer, 232) <= 0)
  {
    fwrite("H9ISPSetMachThreadPriority - proc_pidinfo() failed\n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 0xFFFFFFFFLL;
  }
  else
  {
    policy_info = a2 - v11;
    v5 = thread_policy_set(v3, 3u, &policy_info, 1u);
    if ((_DWORD)v5)
    {
      v6 = v5;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "H9ISPSetMachThreadPriority - thread_policy_set(...,THREAD_PRECEDENCE_POLICY,...) failed, err=%d\n", v5);
    }
    else
    {
      v6 = thread_policy_set(v3, 1u, &v8, 1u);
      if ((_DWORD)v6)
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "H9ISPSetMachThreadPriority - thread_policy_set(...,THREAD_EXTENDED_POLICY,...) failed, err=%d\n", v6);
    }
  }
  return v6;
}

uint64_t H9ISP::H9ISPVerifyFirmwareDigest(H9ISP *this, unint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  CC_LONG v4;
  CC_SHA256_CTX c;
  unsigned __int8 md[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2;
  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >> 25)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Computing signature for buffer %p whose size 0x%08zx is too large.  Failing. \n", this, a2);
    return 3758097090;
  }
  else
  {
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, this, v4);
    CC_SHA256_Final(md, &c);
    return *a3 != *(_QWORD *)md || a3[1] != v13 || a3[2] != v14 || a3[3] != v15;
  }
}

uint64_t H9ISP::H9ISPInflateFirmwareBuffer(Bytef *this, unint64_t a2, Bytef **a3, unsigned __int8 **a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v12;
  Bytef *v13;
  unint64_t v14;
  uint64_t v15;
  uInt avail_out;
  z_stream strm;

  memset(&strm.zalloc, 0, 24);
  strm.avail_in = a2;
  strm.next_in = 0;
  if (HIDWORD(a2))
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Cannot initialize decompression.  Compressed buffer size %zd too large. \n", a2);
    return 4294967292;
  }
  v9 = inflateInit2_(&strm, 47, "1.2.12", 112);
  if ((_DWORD)v9)
  {
    v10 = v9;
    fwrite("Cannot initialize decompression.  Invalid input. \n", 0x32uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return v10;
  }
  v12 = (unsigned __int8 *)*(unsigned int *)&this[a2 - 4];
  *a4 = v12;
  if (v12 >> 25)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Expected size for decompressed firmware 0x%08x is larger than 0x%08x.  Failing. \n", (_DWORD)v12, 0x2000000);
    return 4294967293;
  }
  v13 = (Bytef *)operator new[]();
  *a3 = v13;
  if (!strm.avail_in)
  {
    MEMORY[0x23B7D8AF0]();
    *a3 = 0;
    return 0xFFFFFFFFLL;
  }
  v14 = (unint64_t)*a4;
  strm.avail_out = *a4;
  strm.next_in = this;
  strm.next_out = v13;
  if (HIDWORD(v14))
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Cannot inflate to output buffer.  Output buffer size %zd does not match available bytes %zd \n", v14, v14);
    if (*a3)
      MEMORY[0x23B7D8AF0](*a3, 0x1000C8077774924);
    *a3 = 0;
    return 4294967292;
  }
  v15 = inflate(&strm, 0);
  avail_out = strm.avail_out;
  inflateEnd(&strm);
  if (avail_out || (v10 = 0, (_DWORD)v15 != 1))
  {
    if (*a3)
      MEMORY[0x23B7D8AF0](*a3, 0x1000C8077774924);
    *a3 = 0;
    return v15;
  }
  return v10;
}

uint64_t H9ISP::getFrameFormat(H9ISP *this)
{
  if ((int)this > 1650943795)
  {
    if ((_DWORD)this == 2037741171 || (_DWORD)this == 2037741158)
    {
      return 1;
    }
    else if ((_DWORD)this == 1650943796)
    {
      return 2;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  else if ((_DWORD)this == 875704422 || (_DWORD)this == 875704438)
  {
    return 0;
  }
  else if ((_DWORD)this == 1278226488)
  {
    return 5;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t H9ISP::getCameraStrobeMaxLoad(H9ISP *this)
{
  mach_port_t v1;
  const __CFDictionary *v2;
  io_service_t MatchingService;
  io_object_t v4;
  const __CFNumber *CFProperty;
  const __CFNumber *v6;
  int Value;
  FILE *v8;
  const char *v9;
  size_t v10;
  unsigned int valuePtr;

  valuePtr = 0x10000;
  v1 = *MEMORY[0x24BDD8B20];
  v2 = IOServiceNameMatching("AppleDieTempController");
  MatchingService = IOServiceGetMatchingService(v1, v2);
  if (!MatchingService)
  {
    fwrite("could not find AppleDieTempController", 0x25uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 0x10000;
  }
  v4 = MatchingService;
  CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("CameraStrobeMaxLoad"), (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (!CFProperty)
  {
    v8 = (FILE *)*MEMORY[0x24BDAC8D8];
    v9 = "could not find CameraStrobeMaxLoad of die temperature controller";
    v10 = 64;
    goto LABEL_7;
  }
  v6 = CFProperty;
  Value = CFNumberGetValue(CFProperty, kCFNumberSInt32Type, &valuePtr);
  CFRelease(v6);
  if (!Value)
  {
    v8 = (FILE *)*MEMORY[0x24BDAC8D8];
    v9 = "could not get CameraStrobeMaxLoad of die temperature controller";
    v10 = 63;
LABEL_7:
    fwrite(v9, v10, 1uLL, v8);
  }
  IOObjectRelease(v4);
  return valuePtr;
}

uint64_t ALSParameters::overrideALSParameters(ALSParameters *this)
{
  int AppIntegerValue;
  FILE **v2;
  int v3;
  int v4;
  int v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  CFTypeID v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  int v26;
  float valuePtr;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  valuePtr = 0.0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("ALS_AWB_debounce"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  if (keyExistsAndHasValidFormat)
  {
    v3 = AppIntegerValue;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "ALS: Overriding AWB debounce count from %d to %d\n", ALSParameters::kAWBDebounceCountReload, AppIntegerValue);
    ALSParameters::kAWBDebounceCountReload = v3;
  }
  v4 = CFPreferencesGetAppIntegerValue(CFSTR("ALS_min_samples"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v5 = v4;
    fprintf(*v2, "ALS: Overriding IIR min samples from %zu to %d\n", ALSParameters::sMin, v4);
    ALSParameters::sMin = v5;
  }
  v6 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("ALS_IIR_factor"), CFSTR("com.apple.coremedia"));
  if (v6)
  {
    v7 = v6;
    v8 = CFGetTypeID(v6);
    if (v8 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v7, kCFNumberFloatType, &valuePtr);
      fprintf(*v2, "ALS: Overriding IIR factor from %.4f to %.4f\n", *(float *)&ALSParameters::kIIR_factor, valuePtr);
      ALSParameters::kIIR_factor = LODWORD(valuePtr);
    }
    CFRelease(v7);
  }
  v9 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("ALS_bg_min"), CFSTR("com.apple.coremedia"));
  if (v9)
  {
    v10 = v9;
    v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr);
      fprintf(*v2, "ALS: Overriding b/g ratio min value from %.4f to %.4f\n", *(float *)&ALSParameters::bgMin, valuePtr);
      ALSParameters::bgMin = LODWORD(valuePtr);
    }
    CFRelease(v10);
  }
  v12 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("ALS_bg_max"), CFSTR("com.apple.coremedia"));
  if (v12)
  {
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (v14 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v13, kCFNumberFloatType, &valuePtr);
      fprintf(*v2, "ALS: Overriding b/g ratio max value from %.4f to %.4f\n", *(float *)&ALSParameters::bgMax, valuePtr);
      ALSParameters::bgMax = LODWORD(valuePtr);
    }
    CFRelease(v13);
  }
  v15 = CFPreferencesGetAppIntegerValue(CFSTR("ALS_IIR_threshold"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v16 = v15;
    fprintf(*v2, "ALS: Overriding IIR threshold from %d to %d\n", ALSParameters::kThreshold, v15);
    ALSParameters::kThreshold = v16;
  }
  v17 = CFPreferencesGetAppIntegerValue(CFSTR("ALS_algorithm"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v18 = v17;
    fprintf(*v2, "ALS: Overriding ALS algorithm from %d to %d\n", ALSParameters::kALSAlgorithm, v17);
    ALSParameters::kALSAlgorithm = v18;
  }
  v19 = CFPreferencesGetAppIntegerValue(CFSTR("ALS_TMIN"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v20 = v19;
    fprintf(*v2, "ALS: Overriding TMIN from %d to %d\n", ALSParameters::kTMin, v19);
  }
  else
  {
    v20 = 2000;
  }
  ALSParameters::kTMin = v20;
  v21 = CFPreferencesGetAppIntegerValue(CFSTR("ALS_TMAX"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v22 = v21;
    fprintf(*v2, "ALS: Overriding TMAX from %d to %d\n", ALSParameters::kTMax, v21);
  }
  else
  {
    v22 = 8000;
  }
  ALSParameters::kTMax = v22;
  v23 = CFPreferencesGetAppIntegerValue(CFSTR("ALS_LONG_INTERVAL"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v24 = v23;
    fprintf(*v2, "ALS: Overriding long interval from %d to %d\n", ALSParameters::kCompensateRetryCountReloadLong, v23);
    ALSParameters::kCompensateRetryCountReloadLong = v24;
  }
  result = CFPreferencesGetAppIntegerValue(CFSTR("ALS_SHORT_INTERVAL"), CFSTR("com.apple.coremedia"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v26 = result;
    result = fprintf(*v2, "ALS: Overriding short interval from %d to %d\n", ALSParameters::kCompensateRetryCountReloadShort, result);
    ALSParameters::kCompensateRetryCountReloadShort = v26;
  }
  return result;
}

H9ISP::AdaptiveLensShading *H9ISP::AdaptiveLensShading::AdaptiveLensShading(H9ISP::AdaptiveLensShading *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 256;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = 0;
  *((_DWORD *)this + 23) = 4000;
  ALSParameters::overrideALSParameters(this);
  return this;
}

void sub_235810244(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 56);
  if (v3)
  {
    *(_QWORD *)(v1 + 64) = v3;
    operator delete(v3);
  }
  H9ISP::AdaptiveLensShading::AdaptiveLensShading(v1);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::AdaptiveLensShading::deferredInitialization(H9ISP::AdaptiveLensShading *this, H9ISP::H9ISPDevice *a2)
{
  unsigned int *v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  float *v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned __int8 v14[8];
  int v15;
  uint64_t v16;

  v4 = (unsigned int *)malloc_type_malloc(0x38uLL, 0x3C02C118uLL);
  v5 = 0;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_QWORD *)v4 + 6) = 0;
  v6 = &ALSParameters::kTable;
  do
  {
    *((_WORD *)v4 + 2) = 2593;
    v4[2] = *(_DWORD *)(*(_QWORD *)this + 8);
    v4[3] = v5;
    v7 = H9ISP::H9ISPDevice::ISP_SendCommand(a2, (unsigned __int8 *)v4, 0x38u, 0, 0xFFFFFFFF);
    if (v7)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "ERROR: %d, for CISP_CMD_CH_ALS_POLYNOMIAL_GET", v7);
      free(v4);
      return 0;
    }
    v8 = v4[4];
    ALSParameters::tTable[v5] = v4[5];
    if ((int)v8 >= 1)
    {
      v9 = (float *)v6;
      v10 = (uint64_t *)(v4 + 6);
      do
      {
        v11 = *v10++;
        *v9++ = (float)v11 * 1.7347e-18;
        --v8;
      }
      while (v8);
    }
    ++v5;
    v6 += 5;
  }
  while (v5 != 4);
  free(v4);
  v12 = (_BYTE *)*((_QWORD *)this + 3);
  if (v12 && *v12)
  {
    puts("Aborting ALS deferred initialization");
    return 0;
  }
  *(_QWORD *)v14 = 0xA1F00000000;
  v15 = *(_DWORD *)(*(_QWORD *)this + 8);
  v16 = 0xFA000000001;
  H9ISP::H9ISPDevice::ISP_SendCommand(a2, v14, 0x14u, 0, 0xFFFFFFFF);
  return 1;
}

unsigned __int16 **H9ISP::AdaptiveLensShading::lsGridProperties(unsigned __int16 **result, uint64_t *a2, _QWORD *a3, _QWORD *a4, int *a5, int *a6, int *a7, int *a8)
{
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v8 = *result;
  *a3 = 2 * (*result)[28];
  *a4 = 2 * v8[29];
  v9 = *a2;
  v10 = *(unsigned __int16 *)(*a2 + 28);
  if (v10 == 2)
    v11 = 4;
  else
    v11 = 1;
  if (v10 == 1)
    v11 = 2;
  *a5 = v11;
  v12 = *(unsigned __int16 *)(v9 + 30);
  if (v12 == 2)
    v13 = 4;
  else
    v13 = 1;
  if (v12 == 1)
    v14 = 2;
  else
    v14 = v13;
  *a6 = v14;
  *a7 = v8[7] >> 2;
  *a8 = v8[8] >> 2;
  return result;
}

float H9ISP::AdaptiveLensShading::lsLookup(H9ISP::AdaptiveLensShading *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  float result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  result = 0.0;
  if (!v5 & v4)
  {
    fwrite("ALS ERROR: Invalid channel\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)this;
LABEL_8:
    LOWORD(result) = *(_WORD *)(v12 + 2 * v11 + 2 * (a4 + v10 * a3) + 92);
    return (float)LODWORD(result) * 0.00012207;
  }
  else
  {
    switch(a2)
    {
      case 0:
        v12 = *(_QWORD *)this;
        v11 = *(unsigned __int16 *)(*(_QWORD *)this + 42);
        v10 = *(unsigned __int16 *)(*(_QWORD *)this + 50);
        goto LABEL_8;
      case 1:
        v12 = *(_QWORD *)this;
        v11 = *(unsigned __int16 *)(*(_QWORD *)this + 24);
        v10 = *(unsigned __int16 *)(*(_QWORD *)this + 32);
        goto LABEL_8;
      case 2:
        v12 = *(_QWORD *)this;
        v11 = *(unsigned __int16 *)(*(_QWORD *)this + 78);
        v10 = *(unsigned __int16 *)(*(_QWORD *)this + 86);
        goto LABEL_8;
      case 3:
        v12 = *(_QWORD *)this;
        v11 = *(unsigned __int16 *)(*(_QWORD *)this + 60);
        v10 = *(unsigned __int16 *)(*(_QWORD *)this + 68);
        goto LABEL_8;
      default:
        return result;
    }
  }
}

BOOL H9ISP::AdaptiveLensShading::shouldCompensate(H9ISP::AdaptiveLensShading *this, H9ISP::H9ISPDevice *a2, const H9ISP::H9ISPFrameMetadata *a3)
{
  return !*(_BYTE *)(*((_QWORD *)a3 + 2) + 12)
      && !*(_BYTE *)(*(_QWORD *)a3 + 42)
      && !*(_DWORD *)(*(_QWORD *)a3 + 396)
      && H9ISP::AdaptiveLensShading::nextState((uint64_t)this, (uint64_t)a2, a3);
}

BOOL H9ISP::AdaptiveLensShading::nextState(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;

  v3 = *(unsigned __int16 *)(a3[4] + 4);
  v4 = *(_DWORD *)(a1 + 84);
  if (*(_BYTE *)(a1 + 16))
    v5 = v3 == 0;
  else
    v5 = 0;
  if (!v5)
  {
    if (v4 != 2)
    {
      if (v4)
        goto LABEL_15;
      goto LABEL_14;
    }
    v7 = *(_DWORD *)(a1 + 8);
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v9 < 0 == v8)
    {
      *(_DWORD *)(a1 + 8) = v9;
      v4 = 2;
      goto LABEL_15;
    }
LABEL_14:
    *(_DWORD *)(a1 + 12) = 0;
    v4 = 1;
    *(_DWORD *)(a1 + 84) = 1;
    goto LABEL_15;
  }
  if (!v4)
    goto LABEL_14;
  v4 = 2;
  *(_DWORD *)(a1 + 84) = 2;
  v6 = vcvtpd_s64_f64((double)(2 * *(_DWORD *)(*a3 + 48)) / 7680.0);
  if (v6 <= 2)
    v6 = 2;
  *(_DWORD *)(a1 + 8) = v6;
LABEL_15:
  *(_BYTE *)(a1 + 16) = v3 != 0;
  return v4 == 1;
}

void H9ISP::AdaptiveLensShading::compensate(void **a1, const unsigned __int16 *a2, unint64_t a3, unint64_t a4, unint64_t a5, H9ISP::H9ISPDevice *a6, const H9ISP::H9ISPFrameMetadata *a7, unsigned __int16 *a8)
{
  H9ISP::H9ISPDevice *v15;
  int32x4_t v16;
  float v17;
  int v18;
  int v19;

  if (a8)
  {
    *a1 = a8;
    std::vector<H9ISP::lsData>::reserve(a1 + 7, a8[35] * (unint64_t)a8[34]);
    std::vector<H9ISP::bayerData>::reserve(a1 + 4, *((unsigned __int16 *)*a1 + 35) * (unint64_t)*((unsigned __int16 *)*a1 + 34));
    if (!*(_BYTE *)(*((_QWORD *)a7 + 2) + 12) && !*(_BYTE *)(*(_QWORD *)a7 + 42))
    {
      if (*((_BYTE *)a1 + 17))
      {
        if (!H9ISP::AdaptiveLensShading::deferredInitialization((H9ISP::AdaptiveLensShading *)a1, a6))
        {
          fwrite("ALS ERROR: deferredInitialization failed\n", 0x29uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
          return;
        }
        *((_BYTE *)a1 + 17) = 0;
      }
      v17 = H9ISP::AdaptiveLensShading::analyze((H9ISP::AdaptiveLensShading *)a1, ALSParameters::kALSAlgorithm, v15, a2, a3, a4, a5, a7, v16);
      if (v17 >= 0.0)
      {
        *((_DWORD *)a1 + 23) = (int)v17;
        H9ISP::AdaptiveLensShading::applyLensShading((H9ISP::AdaptiveLensShading *)a1, a6);
        v19 = vcvtpd_s64_f64((double)(*(_DWORD *)(*(_QWORD *)a7 + 48) * ALSParameters::kCompensateRetryCountReloadLong)/ 7680.0);
        if (v19 <= 2)
          v19 = 2;
        *((_DWORD *)a1 + 2) = v19;
        *((_DWORD *)a1 + 21) = 2;
        *((_BYTE *)a1 + 88) = 1;
      }
      else if (!*((_DWORD *)a1 + 3))
      {
        v18 = vcvtpd_s64_f64((double)(*(_DWORD *)(*(_QWORD *)a7 + 48)* ALSParameters::kCompensateRetryCountReloadShort)/ 7680.0);
        if (v18 <= 2)
          v18 = 2;
        *((_DWORD *)a1 + 2) = v18;
        *((_DWORD *)a1 + 21) = 2;
      }
    }
  }
}

void std::vector<H9ISP::lsData>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<H9ISP::lsData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::lsData>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<H9ISP::bayerData>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<H9ISP::lsData>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::bayerData>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

float H9ISP::AdaptiveLensShading::analyze(H9ISP::AdaptiveLensShading *this, int a2, H9ISP::H9ISPDevice *a3, const unsigned __int16 *a4, unint64_t a5, unint64_t a6, unint64_t a7, const H9ISP::H9ISPFrameMetadata *a8, int32x4_t a9)
{
  unsigned int v11;
  float v12;
  float v14;

  v14 = 0.0;
  if (a2 == 3)
  {
    *(float *)a9.i32 = H9ISP::AdaptiveLensShading::analyze_Hybrid(this, a4, a5, a6, a7, a8);
  }
  else if (a2 == 2)
  {
    a9.i32[0] = 1157234688;
    *(float *)a9.i32 = H9ISP::AdaptiveLensShading::analyze_covar(this, a4, a5, a6, a7, a8, &v14, a9, 8000.0);
    if (*(float *)a9.i32 > 0.0 && v14 < 1.15 && v14 > 0.85)
      *(float *)a9.i32 = -1.0;
  }
  else
  {
    a9.i32[0] = -1.0;
    if (a2 == 1)
      *(float *)a9.i32 = H9ISP::AdaptiveLensShading::analyze(this, a4, a5, a6, a7, a8, a9);
  }
  v11 = *(_DWORD *)(*((_QWORD *)a8 + 2) + 36);
  if (v11 >> 5 <= 0x270)
  {
    if (v11 >> 4 <= 0x464)
    {
      v12 = 8000.0;
      if (v11 >> 7 > 0x7C)
        v12 = 5500.0;
    }
    else
    {
      v12 = 5000.0;
    }
  }
  else
  {
    v12 = 4500.0;
  }
  if (*(float *)a9.i32 >= v12)
    *(float *)a9.i32 = v12;
  return *(float *)a9.i32;
}

uint64_t H9ISP::AdaptiveLensShading::applyLensShading(H9ISP::AdaptiveLensShading *this, H9ISP::H9ISPDevice *a2)
{
  int v2;
  int v3;
  unsigned __int8 v7[8];
  int v8;
  int v9;
  int v10;

  v2 = (int)((double)*((int *)this + 23) + 0.5);
  if (ALSParameters::kTMax >= v2)
    v3 = (int)((double)*((int *)this + 23) + 0.5);
  else
    v3 = ALSParameters::kTMax;
  if (ALSParameters::kTMin > v3)
    v3 = ALSParameters::kTMin;
  if (ALSParameters::kTMax >= ALSParameters::kTMin && ALSParameters::kTMin != 0 && ALSParameters::kTMax != 0)
    v2 = v3;
  *(_QWORD *)v7 = 0xA1F00000000;
  v8 = *(_DWORD *)(*(_QWORD *)this + 8);
  v9 = 1;
  v10 = v2;
  return H9ISP::H9ISPDevice::ISP_SendCommand(a2, v7, 0x14u, 0, 0xFFFFFFFF);
}

BOOL H9ISP::AdaptiveLensShading::gatherStatistics(H9ISP::AdaptiveLensShading *this, const unsigned __int16 *a2, unint64_t a3, unint64_t a4, unint64_t a5, const H9ISP::H9ISPFrameMetadata *a6, int32x4_t a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _WORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  H9ISP::AdaptiveLensShading *v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  __int32 v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  __int32 *v46;
  __int32 **v47;
  __int32 *v48;
  void **v49;
  __int32 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  __int32 *v56;
  __int32 *v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  __int16 v63;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  float *v83;
  char *v84;
  char *v85;
  float *v86;
  __int128 v87;
  int v88;
  _BOOL8 result;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  char **v94;
  float v95;
  float v96;
  unint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  int *v106;
  int *v107;
  int *v108;
  int *v109;
  unint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char v122;
  int32x4_t v123;
  unint64_t v124;
  int v125;
  _BYTE v126[40];
  _BYTE v127[40];
  float32x4_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v112 = *((_DWORD *)this + 3);
  if (!v112)
    *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  v10 = (_WORD *)*((_QWORD *)a6 + 4);
  LOWORD(v9) = v10[6];
  LOWORD(v8) = v10[7];
  LOWORD(v7) = v10[8];
  v11 = *(_QWORD *)a6;
  v111 = *(unsigned __int16 *)(*(_QWORD *)a6 + 70);
  a7.i32[0] = *(_DWORD *)(*(_QWORD *)a6 + 376);
  v123 = a7;
  v12 = 2 * *(_WORD *)(*(_QWORD *)a6 + 68) + 8;
  if ((*(_WORD *)(*(_QWORD *)a6 + 68) & 0xFC) != 0)
    v12 = 0;
  v13 = *(unsigned __int8 *)(v11 + 45);
  v14 = *(unsigned int *)(v11 + 16);
  v15 = *(unsigned __int16 *)(*(_QWORD *)this + 56);
  v16 = *(unsigned __int16 *)(*(_QWORD *)this + 58);
  v94 = (char **)((char *)this + 56);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  v125 = v12;
  v101 = a4 >> 1;
  v102 = a3 >> 1;
  v99 = v12 - v13;
  BayerArray::BayerArray((BayerArray *)v127, a2, a5 >> 1, a3 >> 1, a4 >> 1, v12 - v13);
  BayerArray::BayerArray((BayerArray *)v126);
  v17 = *(unsigned __int16 **)this;
  v18 = *(unsigned __int16 *)(*(_QWORD *)this + 70);
  if (v18 >= 3)
  {
    v19 = 0;
    v115 = 0;
    v20 = (float)v8 * 0.00024414;
    v95 = (float)v7 * 0.00024414;
    v96 = (float)v9 * 0.00024414;
    v91 = 2 * v16;
    v21 = (((unint64_t)v17[7] >> 1) - v102) >> 1;
    v90 = (((unint64_t)v17[8] >> 1) - v101) >> 1;
    v92 = (v18 - 2);
    v93 = v17[34];
    v22 = (int *)((char *)&ALSParameters::fp2comp + 16 * v14);
    v107 = v22 + 2;
    v108 = v22 + 3;
    v109 = v22;
    v106 = v22 + 1;
    v105 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcvtq_f32_s32(v123), 0);
    v110 = v21;
    v98 = -2 * v21;
    v113 = 2 * v15;
    while (1)
    {
      v23 = v19 + 1;
      v100 = v23;
      if (v93 >= 3)
        break;
LABEL_65:
      v19 = v100;
      if (v100 == v92)
        goto LABEL_66;
    }
    v24 = ((unint64_t)(v91 * v23) >> 1) - v90;
    v25 = 0;
    v104 = v24 - 1;
    v103 = v24 + 3;
    v97 = v24;
    v24 *= 2;
    v119 = v24 - 1;
    v120 = v24 - 2;
    v26 = v113;
    v118 = v113;
    v27 = this;
    while (1)
    {
      v117 = v25 + 1;
      v28 = ((unint64_t)(v26 * (v25 + 1)) >> 1) - v110;
      v114 = v28;
      if (v111)
        break;
      if (v28 + 3 <= v102 && v103 <= v101)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v122 = v98 + (v118 & 0xFE);
        do
        {
          v124 = v120 + 2 * v30;
          v35 = -8;
          v121 = v30;
          v36 = v119 + 2 * v30;
          do
          {
            v37 = v122 + v35 + 7;
            v34 += BayerArray::GetPackedPixel((BayerArray *)v127, v122 + v35 + 6, v124, v125);
            v33 += BayerArray::GetPackedPixel((BayerArray *)v127, v37, v124, v125);
            v32 += BayerArray::GetPackedPixel((BayerArray *)v127, v122 + v35 + 6, v36, v125);
            v31 += BayerArray::GetPackedPixel((BayerArray *)v127, v37, v36, v125);
            v35 += 2;
          }
          while (v35);
          v30 = v121 + 1;
        }
        while (v121 != 3);
        v128.f32[0] = (float)(v34 >> v99) * 0.0625;
        v128.f32[1] = (float)(v33 >> v99) * 0.0625;
        v128.f32[2] = (float)(v32 >> v99) * 0.0625;
        v128.f32[3] = (float)(v31 >> v99) * 0.0625;
        goto LABEL_21;
      }
      v128 = 0uLL;
LABEL_22:
      v128 = vsubq_f32(v128, v105);
      v38 = v128.i32[*v108];
      v39 = v128.i32[*v107];
      v40 = v128.i32[*v106];
      v41 = v128.i32[*v109];
      v42 = (char *)v27 + 24 * *((int *)v27 + 3);
      v45 = *((_QWORD *)v42 + 6);
      v44 = v42 + 48;
      v43 = v45;
      v47 = (__int32 **)(v44 - 1);
      v46 = (__int32 *)*(v44 - 1);
      if ((unint64_t)v46 >= v45)
      {
        v49 = (void **)(v44 - 2);
        v50 = (__int32 *)*(v44 - 2);
        v51 = ((char *)v46 - (char *)v50) >> 4;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 60)
          std::vector<H9ISP::lsData>::__throw_length_error[abi:ne180100]();
        v53 = v43 - (_QWORD)v50;
        if (v53 >> 3 > v52)
          v52 = v53 >> 3;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
          v54 = 0xFFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::bayerData>>((uint64_t)v44, v54);
          v46 = *v47;
          v50 = (__int32 *)*v49;
        }
        else
        {
          v55 = 0;
        }
        v56 = (__int32 *)&v55[16 * v51];
        *v56 = v38;
        v56[1] = v39;
        v56[2] = v40;
        v56[3] = v41;
        v57 = v56;
        if (v46 != v50)
        {
          do
          {
            *((_OWORD *)v57 - 1) = *((_OWORD *)v46 - 1);
            v57 -= 4;
            v46 -= 4;
          }
          while (v46 != v50);
          v50 = (__int32 *)*v49;
        }
        *v49 = v57;
        v48 = v56 + 4;
        *v47 = v56 + 4;
        *v44 = &v55[16 * v54];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v46 = v38;
        v46[1] = v39;
        v48 = v46 + 4;
        v46[2] = v40;
        v46[3] = v41;
      }
      v27 = this;
      *v47 = v48;
      if (!v112)
      {
        v58 = *((_QWORD *)this + 4) + 16 * v115;
        v59 = *(float *)v58;
        if (*(float *)v58 > 50.0 && v59 < 907.0)
        {
          v60 = *(float *)(v58 + 8);
          v61 = *(float *)(v58 + 12);
          v62.i32[0] = *(_DWORD *)(v58 + 4);
          v62.f32[1] = v61;
          v62.i64[1] = __PAIR64__(v62.u32[0], LODWORD(v60));
          v63 = vmovn_s32(vcgtq_f32(v62, (float32x4_t)xmmword_235830D10)).u16[0];
          *(int16x4_t *)v62.f32 = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_235830D10, v62));
          v62.i16[0] = v63;
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v62.f32, 0xFuLL))) & 1) != 0
            && v61 > 50.0
            && v60 > 50.0)
          {
            *(float *)&v65 = *(float *)(v58 + 4) + 0.0;
            *(float *)&v66 = v61 + 0.0;
            HIWORD(v67) = HIWORD(v96);
            v68 = *(_QWORD *)this + 92;
            LOWORD(v67) = *(_WORD *)(v68
                                   + 2 * *(unsigned __int16 *)(*(_QWORD *)this + 42)
                                   + 2 * (v117 + v100 * *(unsigned __int16 *)(*(_QWORD *)this + 50)));
            *(float *)&v69 = (float)v67 * 0.00012207;
            v70 = (float)(v96 * (float)(v59 + 0.0)) * *(float *)&v69;
            v71 = v20 * *(float *)&v65;
            LOWORD(v65) = *(_WORD *)(v68
                                   + 2 * *(unsigned __int16 *)(*(_QWORD *)this + 24)
                                   + 2 * (v117 + v100 * *(unsigned __int16 *)(*(_QWORD *)this + 32)));
            LOWORD(v69) = *(_WORD *)(v68
                                   + 2 * *(unsigned __int16 *)(*(_QWORD *)this + 78)
                                   + 2 * (v117 + v100 * *(unsigned __int16 *)(*(_QWORD *)this + 86)));
            v72 = (float)((float)((float)(v20 * (float)(v60 + 0.0)) * (float)((float)v69 * 0.00012207))
                        + (float)(v71 * (float)((float)v65 * 0.00012207)))
                * 0.5;
            v73 = v95 * *(float *)&v66;
            LOWORD(v66) = *(_WORD *)(v68
                                   + 2 * *(unsigned __int16 *)(*(_QWORD *)this + 60)
                                   + 2 * (v117 + v100 * *(unsigned __int16 *)(*(_QWORD *)this + 68)));
            v74 = v73 * (float)((float)v66 * 0.00012207);
            v75 = *((_QWORD *)this + 8);
            v76 = *((_QWORD *)this + 9);
            if (v75 >= v76)
            {
              v78 = (uint64_t)(v75 - (_QWORD)*v94) >> 5;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 59)
                std::vector<H9ISP::lsData>::__throw_length_error[abi:ne180100]();
              v80 = v76 - (_QWORD)*v94;
              if (v80 >> 4 > v79)
                v79 = v80 >> 4;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFE0)
                v81 = 0x7FFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::lsData>>((uint64_t)this + 72, v81);
                v27 = this;
              }
              else
              {
                v82 = 0;
              }
              v83 = (float *)&v82[32 * v78];
              *v83 = v70;
              v83[1] = v72;
              v83[2] = v74;
              v83[3] = 0.0;
              *((_QWORD *)v83 + 2) = v114;
              *((_QWORD *)v83 + 3) = v97;
              v85 = (char *)*((_QWORD *)v27 + 7);
              v84 = (char *)*((_QWORD *)v27 + 8);
              v86 = v83;
              if (v84 != v85)
              {
                do
                {
                  v87 = *((_OWORD *)v84 - 1);
                  *((_OWORD *)v86 - 2) = *((_OWORD *)v84 - 2);
                  *((_OWORD *)v86 - 1) = v87;
                  v86 -= 8;
                  v84 -= 32;
                }
                while (v84 != v85);
                v84 = *v94;
              }
              v77 = (char *)(v83 + 8);
              *((_QWORD *)v27 + 7) = v86;
              *((_QWORD *)v27 + 8) = v83 + 8;
              *((_QWORD *)v27 + 9) = &v82[32 * v81];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(float *)v75 = v70;
              *(float *)(v75 + 4) = v72;
              *(float *)(v75 + 8) = v74;
              *(_DWORD *)(v75 + 12) = 0;
              v77 = (char *)(v75 + 32);
              *(_QWORD *)(v75 + 16) = v114;
              *(_QWORD *)(v75 + 24) = v97;
            }
            *((_QWORD *)v27 + 8) = v77;
          }
        }
        ++v115;
      }
      v26 = v113;
      v118 += v113;
      v25 = v117;
      if (v117 == v93 - 2)
        goto LABEL_65;
    }
    BayerArray::DefineSubBayerArray((BayerArray *)v127, v28 - 1, v104, 4, 4, (BayerArray *)v126, 1);
    BayerArray::Average((BayerArray *)v126, v128.f32, &v128.f32[1], &v128.f32[2], (float *)((unint64_t)&v128 | 0xC));
LABEL_21:
    v27 = this;
    goto LABEL_22;
  }
LABEL_66:
  v88 = v112;
  if (v112)
    v88 = *((_DWORD *)this + 3) + 1;
  result = v112 == 0;
  *((_DWORD *)this + 3) = v88;
  return result;
}

float H9ISP::AdaptiveLensShading::analyze(H9ISP::AdaptiveLensShading *this, const unsigned __int16 *a2, unint64_t a3, unint64_t a4, unint64_t a5, const H9ISP::H9ISPFrameMetadata *a6, int32x4_t a7)
{
  _BYTE *v9;
  float v10;
  int8x8_t v11;
  float *v12;
  float *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  int64_t v22;
  unint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  uint32x2_t v29;
  char v30;
  int v31;
  float v32;
  _BYTE *v33;
  unint64_t v34;
  unint64_t v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  int32x2_t v43;
  int32x2_t v44;
  float v45;
  float *v46;
  float v47;
  float v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  int8x8_t v57;
  _QWORD v58[4];
  float *v59;
  float *v60;
  float v61;
  void *__p;
  float *v63;
  _DWORD v64[5];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v9 = (_BYTE *)*((_QWORD *)this + 3);
  if (v9 && *v9)
  {
    puts("Aborting ALS analyze");
    return -1.0;
  }
  else if (H9ISP::AdaptiveLensShading::gatherStatistics(this, a2, a3, a4, a5, a6, a7))
  {
    v13 = (float *)*((_QWORD *)this + 7);
    v12 = (float *)*((_QWORD *)this + 8);
    v14 = ALSParameters::sMin;
    v10 = -1.0;
    if (ALSParameters::sMin <= (unint64_t)(((char *)v12 - (char *)v13) >> 5))
    {
      v11.i16[0] = *(_WORD *)(*(_QWORD *)a6 + 28);
      v11.i16[2] = *(_WORD *)(*(_QWORD *)a6 + 30);
      v57 = v11;
      v15 = *(unsigned __int16 *)(*(_QWORD *)this + 14);
      v16 = *(unsigned __int16 *)(*(_QWORD *)this + 16);
      if (v13 == v12)
      {
        v19 = (float *)*((_QWORD *)this + 8);
      }
      else
      {
        v17 = *(float *)&ALSParameters::bgMin;
        v18 = *(float *)&ALSParameters::bgMax;
        v19 = (float *)*((_QWORD *)this + 8);
        do
        {
          v20 = v13[2] / v13[1];
          if (v20 > v17 && v20 < v18)
          {
            v13 += 8;
          }
          else
          {
            v22 = (char *)v19 - (char *)(v13 + 8);
            if (v19 != v13 + 8)
            {
              memmove(v13, v13 + 8, (char *)v19 - (char *)(v13 + 8));
              v17 = *(float *)&ALSParameters::bgMin;
              v18 = *(float *)&ALSParameters::bgMax;
            }
            v19 = (float *)((char *)v13 + v22);
            *((_QWORD *)this + 8) = (char *)v13 + v22;
          }
        }
        while (v13 != v19);
        v12 = (float *)*((_QWORD *)this + 7);
        v14 = ALSParameters::sMin;
      }
      v24 = (char *)v19 - (char *)v12;
      if (v14 <= ((char *)v19 - (char *)v12) >> 5)
      {
        __p = 0;
        v63 = 0;
        if (v19 != v12)
        {
          if ((v24 & 0x8000000000000000) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          __p = operator new(v24 >> 3);
          bzero(__p, v24 >> 3);
          v63 = (float *)((char *)__p + (v24 >> 3));
        }
        v25 = 0;
        v26 = (int32x2_t)vshr_n_u32((uint32x2_t)__PAIR64__(v16, v15), 2uLL);
        v27 = (int32x2_t)vand_s8(v57, (int8x8_t)0xFFFF0000FFFFLL);
        v28 = vceq_s32(v27, (int32x2_t)0x100000001);
        v29 = (uint32x2_t)vsub_s32((int32x2_t)vand_s8(vbic_s8((int8x8_t)vceq_s32(v27, (int32x2_t)0x200000002), (int8x8_t)v28), (int8x8_t)0x200000002), v28);
        v30 = 1;
        v31 = -1;
        v32 = 3.4028e38;
        do
        {
          v33 = (_BYTE *)*((_QWORD *)this + 3);
          if (v33 && *v33)
          {
            puts("Aborting ALS analyze");
            v10 = -1.0;
            goto LABEL_55;
          }
          H9ISP::Interpolate_kTable((H9ISP *)v64, (float *)ALSParameters::tSet[v25]);
          v34 = *((_QWORD *)this + 7);
          v35 = *((_QWORD *)this + 8);
          v36 = (float *)__p;
          if (v34 < v35)
          {
            v37 = *(float *)v64;
            v38 = *(float *)&v64[1];
            v39 = *(float *)&v64[2];
            v40 = *(float *)&v64[3];
            v41 = (float *)__p;
            v42 = *(float *)&v64[4];
            do
            {
              v43 = (int32x2_t)vshl_u32((uint32x2_t)vsub_s32(vmovn_s64(*(int64x2_t *)(v34 + 16)), v26), v29);
              v44 = vmul_s32(v43, v43);
              *(float *)v44.i32 = (float)vadd_s32(vdup_lane_s32(v44, 1), v44).i32[0];
              v45 = sqrtf(*(float *)v44.i32);
              *v41++ = (float)(*(float *)v34
                             * (float)(v42
                                     + (float)((float)(v40 * v45)
                                             + (float)(*(float *)v44.i32
                                                     * (float)(v39
                                                             + (float)((float)(v38 * v45)
                                                                     + (float)(v37 * *(float *)v44.i32)))))))
                     / *(float *)(v34 + 8);
              v34 += 32;
            }
            while (v34 < v35);
          }
          v61 = 0.0;
          if (v36 == v63)
          {
            v47 = 0.0;
          }
          else
          {
            v46 = v36 + 1;
            v47 = *v36;
            while (v46 != v63)
            {
              v48 = *v46++;
              v47 = v47 + v48;
            }
          }
          v49 = v63 - v36;
          v61 = v47 / (float)(unint64_t)v49;
          v58[1] = &__p;
          v58[2] = &v61;
          v58[3] = v49;
          std::__val_expr<std::_BinaryOp<std::minus<float>,std::valarray<float>,std::__scalar_expr<float>>>::operator std::valarray<float>(v58, &v59);
          v50 = v59;
          v51 = v60;
          if (v59 == v60)
          {
            v54 = 0.0;
          }
          else
          {
            v52 = v59;
            do
            {
              *v52 = *v52 * *v52;
              ++v52;
            }
            while (v52 != v51);
            v53 = v50 + 1;
            v54 = *v50;
            while (v53 != v51)
            {
              v55 = *v53++;
              v54 = v54 + v55;
            }
          }
          v56 = v54 / (float)(unint64_t)(v51 - v50);
          if (v56 >= v32)
          {
            if (v56 == v32)
              v30 = 0;
          }
          else
          {
            v30 = 1;
            v31 = v25;
            v32 = v56;
          }
          if (v50)
          {
            if (v50 != v51)
              v60 = (float *)((char *)v51 + (((char *)v50 - (char *)v51 + 3) & 0xFFFFFFFFFFFFFFFCLL));
            operator delete(v50);
          }
          ++v25;
        }
        while (v25 != 13);
        v10 = -1.0;
        if ((v30 & 1) != 0)
          v10 = (float)(int)ALSParameters::tSet[v31];
LABEL_55:
        if (__p)
        {
          if (v63 != __p)
            v63 = (float *)((char *)v63 + (((_BYTE *)__p - (_BYTE *)v63 + 3) & 0xFFFFFFFFFFFFFFFCLL));
          operator delete(__p);
        }
      }
    }
  }
  else
  {
    return (float)(-100 - *((_DWORD *)this + 3));
  }
  return v10;
}

void sub_235811730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float H9ISP::AdaptiveLensShading::analyze_covar(H9ISP::AdaptiveLensShading *this, const unsigned __int16 *a2, unint64_t a3, unint64_t a4, unint64_t a5, const H9ISP::H9ISPFrameMetadata *a6, float *a7, int32x4_t a8)
{
  a8.i32[0] = 1157234688;
  return H9ISP::AdaptiveLensShading::analyze_covar(this, a2, a3, a4, a5, a6, a7, a8, 8000.0);
}

float H9ISP::AdaptiveLensShading::analyze_Hybrid(H9ISP::AdaptiveLensShading *this, const unsigned __int16 *a2, unint64_t a3, unint64_t a4, unint64_t a5, const H9ISP::H9ISPFrameMetadata *a6)
{
  int32x4_t v12;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;
  uint64_t v19;

  v19 = 0;
  v18 = 0.0;
  H9ISP::AdaptiveLensShading::analyze_ALS((uint64_t)this, (float *)&v19 + 1, (float *)&v19, &v18);
  v17 = 0.0;
  v12.i32[0] = v19;
  v13 = H9ISP::AdaptiveLensShading::analyze_covar(this, a2, a3, a4, a5, a6, &v17, v12, v18);
  if (v13 <= 0.0)
    return v13;
  v14 = *((float *)this + 20) / *((float *)&v19 + 1);
  if (v14 <= 0.85 || v14 >= 1.15 || v17 <= 0.85 || (v15 = -1.0, v17 >= 1.15))
  {
    *((_DWORD *)this + 20) = HIDWORD(v19);
    return v13;
  }
  return v15;
}

uint64_t H9ISP::AdaptiveLensShading::analyze_ALS(uint64_t this, float *a2, float *a3, float *a4)
{
  unsigned int v4;
  float v5;
  float v6;
  unsigned int v7;
  float *v8;
  float v9;
  float *v10;
  float v11;

  v4 = *(_DWORD *)(this + 100);
  v5 = 0.4;
  v6 = 0.4;
  if (v4)
    v6 = (float)*(unsigned int *)(this + 104) / (float)v4;
  if (v6 <= 0.4)
    v5 = v6;
  if (v5 < 0.11)
    v5 = 0.11;
  v7 = -1;
  v8 = (float *)&unk_235830C84;
  do
  {
    v9 = v8[1];
    ++v7;
    v8 += 3;
  }
  while (v5 < v9);
  v10 = (float *)((char *)&unk_235830C7C + 12 * v7);
  v11 = (float)(*v10 - v5) / (float)(*v10 - v9);
  *a3 = (float)(v10[1] * (float)(1.0 - v11)) + (float)(v11 * *(v8 - 1));
  *a4 = (float)((float)(1.0 - v11) * v10[2]) + (float)(v11 * *v8);
  *a2 = v5;
  return this;
}

float H9ISP::AdaptiveLensShading::analyze_covar(H9ISP::AdaptiveLensShading *this, const unsigned __int16 *a2, unint64_t a3, unint64_t a4, unint64_t a5, const H9ISP::H9ISPFrameMetadata *a6, float *a7, int32x4_t a8, float a9)
{
  float v10;
  _BYTE *v14;
  float v15;
  int8x8_t v16;
  float *v17;
  float *v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  int64_t v27;
  unint64_t v28;
  size_t v29;
  float *v30;
  char *v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;
  uint64_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  uint32x2_t v42;
  unint64_t v43;
  float v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  float *v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  float *v62;
  float *v63;
  float v64;
  int32x2_t v65;
  int32x2_t v66;
  float v67;
  float v68;
  float v69;
  float *i;
  float v71;
  float *j;
  float v73;
  float v74;
  float *k;
  float v76;
  uint64_t v77;
  float *v78;
  float v79;
  float *v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  uint64_t m;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  __double2 v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  float *v110;
  uint64_t v111;
  char v112;
  float v113;
  int v114;
  float *v115;
  unsigned int v116;
  int8x8_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  _DWORD v124[5];
  _QWORD v125[5];

  v10 = *(float *)a8.i32;
  v125[3] = *MEMORY[0x24BDAC8D0];
  v14 = (_BYTE *)*((_QWORD *)this + 3);
  if (v14 && *v14)
  {
    puts("Aborting ALS analyze");
    return -1.0;
  }
  else if (H9ISP::AdaptiveLensShading::gatherStatistics(this, a2, a3, a4, a5, a6, a8))
  {
    v18 = (float *)*((_QWORD *)this + 7);
    v17 = (float *)*((_QWORD *)this + 8);
    v19 = ALSParameters::sMin;
    v15 = -1.0;
    if (ALSParameters::sMin <= (unint64_t)(((char *)v17 - (char *)v18) >> 5))
    {
      v16.i16[0] = *(_WORD *)(*(_QWORD *)a6 + 28);
      v16.i16[2] = *(_WORD *)(*(_QWORD *)a6 + 30);
      v117 = v16;
      v20 = *(unsigned __int16 *)(*(_QWORD *)this + 14);
      v21 = *(unsigned __int16 *)(*(_QWORD *)this + 16);
      if (v18 == v17)
      {
        v24 = (float *)*((_QWORD *)this + 8);
      }
      else
      {
        v22 = *(float *)&ALSParameters::bgMin;
        v23 = *(float *)&ALSParameters::bgMax;
        v24 = (float *)*((_QWORD *)this + 8);
        do
        {
          v25 = v18[2] / v18[1];
          if (v25 > v22 && v25 < v23)
          {
            v18 += 8;
          }
          else
          {
            v27 = (char *)v24 - (char *)(v18 + 8);
            if (v24 != v18 + 8)
            {
              memmove(v18, v18 + 8, (char *)v24 - (char *)(v18 + 8));
              v22 = *(float *)&ALSParameters::bgMin;
              v23 = *(float *)&ALSParameters::bgMax;
            }
            v24 = (float *)((char *)v18 + v27);
            *((_QWORD *)this + 8) = (char *)v18 + v27;
          }
        }
        while (v18 != v24);
        v17 = (float *)*((_QWORD *)this + 7);
        v19 = ALSParameters::sMin;
      }
      v28 = (char *)v24 - (char *)v17;
      if (v19 <= ((char *)v24 - (char *)v17) >> 5)
      {
        v110 = a7;
        v116 = v21;
        if (v24 == v17)
        {
          v35 = 0;
          v30 = 0;
          v33 = 0;
          v34 = 0;
          v36 = 0;
          v37 = 0;
        }
        else
        {
          if ((v28 & 0x8000000000000000) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = v28 >> 3;
          v30 = (float *)operator new(v28 >> 3);
          bzero(v30, v28 >> 3);
          v31 = (char *)operator new(v28 >> 3);
          bzero(v31, v28 >> 3);
          v32 = (float *)operator new(v28 >> 3);
          v33 = (float *)((char *)v30 + (v28 >> 3));
          v34 = (float *)v31;
          v35 = (float *)&v31[v29];
          v36 = v32;
          bzero(v32, v29);
          v37 = (float *)((char *)v36 + v29);
        }
        v38 = 0;
        v39 = (int32x2_t)vshr_n_u32((uint32x2_t)__PAIR64__(v116, v20), 2uLL);
        v40 = (int32x2_t)vand_s8(v117, (int8x8_t)0xFFFF0000FFFFLL);
        v41 = vceq_s32(v40, (int32x2_t)0x100000001);
        v42 = (uint32x2_t)vsub_s32((int32x2_t)vand_s8(vbic_s8((int8x8_t)vceq_s32(v40, (int32x2_t)0x200000002), (int8x8_t)v41), (int8x8_t)0x200000002), v41);
        v43 = v33 - v30;
        v111 = v37 - v36;
        v114 = -1;
        v112 = 1;
        v113 = 3.4028e38;
        v44 = 1.1755e-38;
        v115 = v37;
        do
        {
          v45 = (_BYTE *)*((_QWORD *)this + 3);
          if (v45 && *v45)
          {
            puts("Aborting ALS analyze");
LABEL_116:
            v15 = -1.0;
            goto LABEL_117;
          }
          v46 = v38 + 1;
          if ((v38 + 1) >= 0xC)
            v47 = 12;
          else
            v47 = v38 + 1;
          v48 = (float *)ALSParameters::tSet[v38];
          v49 = ALSParameters::tSet[v47];
          v50 = __OFSUB__(v49, (_DWORD)v48);
          v51 = v49 - (_DWORD)v48;
          if (v51 < 0 != v50)
            ++v51;
          if ((float)((int)v48 + (v51 >> 1)) > v10)
          {
            if ((int)v38 <= 1)
              v52 = 1;
            else
              v52 = v38;
            v53 = ALSParameters::tSet[v52 - 1];
            v50 = __OFSUB__((_DWORD)v48, v53);
            v54 = (_DWORD)v48 - v53;
            if (v54 < 0 != v50)
              ++v54;
            if ((float)((int)v48 - (v54 >> 1)) <= a9)
            {
              H9ISP::Interpolate_kTable((H9ISP *)v124, v48);
              v55 = *((_QWORD *)this + 7);
              v56 = *((_QWORD *)this + 8);
              if (v55 < v56)
              {
                v57 = *(float *)v124;
                v58 = *(float *)&v124[1];
                v59 = *(float *)&v124[2];
                v60 = *(float *)&v124[3];
                v61 = v36;
                v62 = v34;
                v63 = v30;
                v64 = *(float *)&v124[4];
                do
                {
                  v65 = (int32x2_t)vshl_u32((uint32x2_t)vsub_s32(vmovn_s64(*(int64x2_t *)(v55 + 16)), v39), v42);
                  v66 = vmul_s32(v65, v65);
                  *(float *)v66.i32 = (float)vadd_s32(vdup_lane_s32(v66, 1), v66).i32[0];
                  v67 = sqrtf(*(float *)v66.i32);
                  *v63++ = (float)(*(float *)v55
                                 * (float)(v64
                                         + (float)((float)(v60 * v67)
                                                 + (float)(*(float *)v66.i32
                                                         * (float)(v59
                                                                 + (float)((float)(v58 * v67)
                                                                         + (float)(v57 * *(float *)v66.i32)))))))
                         / 1023.0;
                  *v62++ = *(float *)(v55 + 4) / 1023.0;
                  *v61++ = *(float *)(v55 + 8) / 1023.0;
                  v55 += 32;
                }
                while (v55 < v56);
              }
              v68 = 0.0;
              v69 = 0.0;
              if (v30 != v33)
              {
                v69 = *v30;
                for (i = v30 + 1; i != v33; ++i)
                {
                  v71 = *i;
                  v69 = v69 + v71;
                }
              }
              if (v34 != v35)
              {
                v68 = *v34;
                for (j = v34 + 1; j != v35; ++j)
                {
                  v73 = *j;
                  v68 = v68 + v73;
                }
              }
              if (v36 == v115)
              {
                v74 = 0.0;
              }
              else
              {
                v74 = *v36;
                for (k = v36 + 1; k != v115; v74 = v74 + v76)
                  v76 = *k++;
              }
              if (v30 != v33)
              {
                v77 = v33 - v30;
                v78 = v30;
                v79 = v69 / (float)v43;
                do
                {
                  *v78 = *v78 - v79;
                  ++v78;
                  --v77;
                }
                while (v77);
              }
              if (v35 != v34)
              {
                v80 = v34;
                v81 = v68 / (float)(unint64_t)(v35 - v34);
                v82 = v35 - v34;
                do
                {
                  *v80 = *v80 - v81;
                  ++v80;
                  --v82;
                }
                while (v82);
              }
              if (v36 != v115)
              {
                v83 = v111;
                v84 = v36;
                do
                {
                  *v84 = *v84 - (float)(v74 / (float)(unint64_t)v111);
                  ++v84;
                  --v83;
                }
                while (v83);
              }
              v85 = 0;
              v125[0] = v30;
              v125[1] = v34;
              v125[2] = v36;
              do
              {
                for (m = v85; m != 3; ++m)
                {
                  if (v30 == v33)
                  {
                    v88 = 0.0;
                  }
                  else
                  {
                    v87 = 0;
                    v88 = 0.0;
                    do
                    {
                      v88 = v88 + *(float *)(v125[v85] + 4 * v87) * *(float *)(v125[m] + 4 * v87);
                      ++v87;
                    }
                    while (v43 > v87);
                  }
                  *(&v118 + 3 * v85 + m) = v88;
                }
                ++v85;
              }
              while (v85 != 3);
              v89 = v122;
              v90 = (v118 + v121 + v123) / 3.0;
              v91 = ((v118 - v90) * ((v121 - v90) * (v123 - v90) - v89 * v89)
                   - v119 * (v119 * (v123 - v90) - v122 * v120)
                   + v120 * (v119 * v122 - (v121 - v90) * v120))
                  * 0.5;
              v92 = (v119 * v119
                   + (v118 - v90) * (v118 - v90)
                   + v120 * v120
                   + v119 * v119
                   + (v121 - v90) * (v121 - v90)
                   + v89 * v89
                   + v120 * v120
                   + v89 * v89
                   + (v123 - v90) * (v123 - v90))
                  / 6.0;
              v93 = sqrt(v92);
              v94 = v92 * v93;
              v95 = fabs(v92 * v93);
              v96 = 0.0;
              if (fabs(v91) <= v95)
                v96 = acos(v91 / v94) / 3.0;
              v97 = v96 + 1.04719755;
              if (v96 >= 0.0)
                v97 = v96;
              v98 = __sincos_stret(v97);
              v99 = v90 + (v93 + v93) * v98.__cosval;
              v100 = v90 - v93 * (v98.__cosval + v98.__sinval * 1.73205081);
              v101 = v98.__cosval + v98.__sinval * -1.73205081;
              v102 = v90 - v93 * v101;
              if (v102 >= v100)
                v103 = v90 - v93 * (v98.__cosval + v98.__sinval * 1.73205081);
              else
                v103 = v90 - v93 * v101;
              if (v103 >= v99)
                v103 = v90 + (v93 + v93) * v98.__cosval;
              if (v100 >= v102)
                v104 = v90 - v93 * (v98.__cosval + v98.__sinval * 1.73205081);
              else
                v104 = v102;
              if (v99 >= v104)
                v104 = v90 + (v93 + v93) * v98.__cosval;
              if (v104 == v99)
                v105 = v90 - v93 * (v98.__cosval + v98.__sinval * 1.73205081);
              else
                v105 = v90 + (v93 + v93) * v98.__cosval;
              if (v104 == v102)
                v106 = v90 + (v93 + v93) * v98.__cosval;
              else
                v106 = v102;
              if (v103 == v100)
                v105 = v106;
              if (v104 != v102)
                v100 = v102;
              if (v103 == v99)
                v107 = v100;
              else
                v107 = v105;
              if (fabs(v103) <= 1.0e-12 || fabs(v107) <= 1.0e-12 || fabs(v104) <= 1.0e-12)
                goto LABEL_116;
              v108 = v104 * (v103 * v107);
              if (v108 >= v113)
              {
                if (v108 == v113)
                  v112 = 0;
                LODWORD(v38) = v114;
              }
              else
              {
                v112 = 1;
                v113 = v108;
              }
              if (v108 > v44)
                v44 = v108;
              v114 = v38;
            }
          }
          v38 = v46;
        }
        while (v46 != 13);
        v15 = -1.0;
        if ((v112 & (v114 >= 0)) != 0)
        {
          *v110 = v113 / v44;
          v15 = (float)(int)ALSParameters::tSet[v114];
        }
LABEL_117:
        if (v36)
          operator delete(v36);
        if (v34)
          operator delete(v34);
        if (v30)
          operator delete(v30);
      }
    }
  }
  else
  {
    return (float)(-100 - *((_DWORD *)this + 3));
  }
  return v15;
}

void sub_2358120EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *__p)
{
  void *v21;
  void *v22;

  operator delete(v22);
  if (v21)
    operator delete(v21);
  _Unwind_Resume(a1);
}

char *H9ISP::Interpolate_kTable(H9ISP *this, float *a2)
{
  char *result;
  uint64_t v4;
  float v5;
  int *v6;
  float v7;
  uint64_t v8;
  float v9;
  int v10;

  v9 = 0.0;
  v10 = (int)a2;
  v8 = 0;
  result = H9ISP::Interpolate<int>((char *)ALSParameters::tTable, (char *)&ALSParameters::kCompensateRetryCountReloadShort, &v10, &v8, &v9);
  v4 = 0;
  v5 = v9;
  v6 = &ALSParameters::kTable[5 * v8];
  do
  {
    v7 = *(float *)&v6[v4];
    if (v5 > 0.0)
      v7 = v7 + (float)(v5 * (float)(*(float *)&v6[v4 + 5] - v7));
    *(float *)((char *)this + v4 * 4) = v7;
    ++v4;
  }
  while (v4 != 5);
  return result;
}

_QWORD *std::__val_expr<std::_BinaryOp<std::minus<float>,std::valarray<float>,std::__scalar_expr<float>>>::operator std::valarray<float>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  float *v9;
  float v10;

  *a2 = 0;
  a2[1] = 0;
  v3 = result[1];
  v5 = *(float **)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v6 = v4 - *(_QWORD *)v3;
  if (v4 != *(_QWORD *)v3)
  {
    if (v6 < 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = result;
    result = operator new(v4 - *(_QWORD *)v3);
    v8 = v6 >> 2;
    *a2 = result;
    a2[1] = result;
    v9 = (float *)v7[2];
    do
    {
      v10 = *v5++;
      *(float *)result = v10 - *v9;
      result = (_QWORD *)((char *)result + 4);
      --v8;
    }
    while (v8);
    a2[1] = result;
  }
  return result;
}

void sub_235812240(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::valarray<float>::~valarray(v1);
  _Unwind_Resume(a1);
}

uint64_t std::valarray<float>::~valarray(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)a1;
  if (v2)
  {
    v3 = *(_BYTE **)(a1 + 8);
    if (v3 != v2)
      *(_QWORD *)(a1 + 8) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

char *H9ISP::Interpolate<int>(char *result, char *a2, int *a3, uint64_t *a4, float *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;

  v5 = a2 - result;
  if (a2 == result)
  {
    *a5 = 0.0;
    goto LABEL_11;
  }
  v6 = v5 >> 2;
  v7 = *a3;
  v8 = v6;
  v9 = result;
  do
  {
    v10 = v8 >> 1;
    v11 = &v9[4 * (v8 >> 1)];
    v13 = *(_DWORD *)v11;
    v12 = v11 + 4;
    v8 += ~(v8 >> 1);
    if (v7 < v13)
      v8 = v10;
    else
      v9 = v12;
  }
  while (v8);
  *a5 = 0.0;
  if (v9 == a2)
    goto LABEL_12;
  v5 = v9 - result;
  if (v9 != result)
  {
    *a5 = (float)(v7 - *((_DWORD *)v9 - 1)) / (float)(*(_DWORD *)v9 - *((_DWORD *)v9 - 1));
LABEL_11:
    v6 = v5 >> 2;
LABEL_12:
    v5 = v6 - 1;
  }
  *a4 = v5;
  return result;
}

void std::vector<H9ISP::lsData>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2506D9318, MEMORY[0x24BEDAAF0]);
}

void sub_23581237C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::lsData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<H9ISP::bayerData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t H9ISP::FlickerFrequencyHintForCurrentLocation(H9ISP *this)
{
  void *v1;
  void *v2;
  const char *v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v22;
  int v23;
  unsigned int v27;
  int v28;
  unsigned int v30;

  v1 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BE3CBB8], "sharedConfiguration"), "countryCode");
  if (v1)
  {
    v2 = v1;
    v3 = (const char *)objc_msgSend(v1, "UTF8String");
    if (v3)
    {
      v4 = 0;
      v5 = *(unsigned __int8 *)v3;
      switch(*v3)
      {
        case 'A':
          v6 = *((unsigned __int8 *)v3 + 1) - 71;
          v7 = v6 > 0x10;
          v8 = 1 << v6;
          v9 = 69633;
          goto LABEL_28;
        case 'B':
          v11 = *((unsigned __int8 *)v3 + 1) - 72;
          v7 = v11 > 0x12;
          v8 = 1 << v11;
          v9 = 265249;
          goto LABEL_28;
        case 'C':
          v12 = *((unsigned __int8 *)v3 + 1) - 65;
          v7 = v12 > 0x14;
          v8 = 1 << v12;
          v13 = 16385;
          goto LABEL_8;
        case 'D':
          if (v3[1] == 79)
            break;
          goto LABEL_61;
        case 'E':
          if (v3[1] == 67)
            break;
          goto LABEL_61;
        case 'G':
          LODWORD(v14) = *((unsigned __int8 *)v3 + 1) - 84;
          if (v14 >= 6)
            goto LABEL_61;
          v14 = (char)v14;
          v15 = (unsigned int *)&unk_235830D40;
          goto LABEL_15;
        case 'H':
          v16 = *((unsigned __int8 *)v3 + 1);
          v17 = v16 == 78;
          v18 = 84;
          goto LABEL_37;
        case 'J':
          if (v3[1] == 80)
            break;
          goto LABEL_61;
        case 'K':
          v4 = 1;
          v19 = *((unsigned __int8 *)v3 + 1) - 80;
          v7 = v19 > 9;
          v20 = (1 << v19) & 0x205;
          if (!v7 && v20 != 0)
            break;
          goto LABEL_24;
        case 'P':
          v22 = *((unsigned __int8 *)v3 + 1) - 65;
          v7 = v22 > 0x16;
          v8 = 1 << v22;
          v9 = 4329649;
          goto LABEL_28;
        case 'S':
          v16 = *((unsigned __int8 *)v3 + 1);
          if (v16 == 86)
            break;
          v17 = v16 == 82;
          v18 = 65;
LABEL_37:
          if (v17 || v16 == v18)
            v10 = 60;
          else
            v10 = 50;
          goto LABEL_33;
        case 'U':
          if (v3[1] == 83)
            break;
          goto LABEL_61;
        default:
LABEL_24:
          switch(*v3)
          {
            case 'F':
              if (v3[1] == 77)
                goto LABEL_32;
              break;
            case 'L':
              if (v3[1] == 82)
                goto LABEL_32;
              break;
            case 'M':
              v27 = *((unsigned __int8 *)v3 + 1) - 70;
              v7 = v27 > 0x12;
              v28 = (1 << v27) & 0x42401;
              if (!v7 && v28 != 0)
                goto LABEL_32;
              break;
            case 'N':
              if (v3[1] == 73)
                goto LABEL_32;
              break;
            default:
              break;
          }
          if (v4 && v3[1] == 78)
            break;
          if (v5 == 86)
          {
            LODWORD(v14) = *((unsigned __int8 *)v3 + 1) - 69;
            if (v14 < 5)
            {
              v14 = (char)v14;
              v15 = (unsigned int *)&unk_235830D58;
LABEL_15:
              v10 = v15[v14];
              goto LABEL_33;
            }
          }
          else if (v5 == 84)
          {
            v30 = *((unsigned __int8 *)v3 + 1) - 67;
            v7 = v30 > 0x14;
            v8 = 1 << v30;
            v13 = 1;
LABEL_8:
            v9 = v13 | 0x120000;
LABEL_28:
            v23 = v8 & v9;
            if (!v7 && v23 != 0)
              break;
          }
LABEL_61:
          v10 = 50;
          goto LABEL_33;
      }
    }
LABEL_32:
    v10 = 60;
LABEL_33:
    printf("H9ISPLocationManager: countryCode=%s, flickerFreqHint=%dHz\n", v3, v10);

    return v10;
  }
  return 50;
}

uint64_t H9ISP::H9ISPPhotometerManager::H9ISPPhotometerManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[5];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 68) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 32));
  v4 = dispatch_queue_create("com.apple.video.PhotometerManager.CommandQueue", 0);
  v5 = MEMORY[0x24BDAC760];
  *(_QWORD *)(a1 + 16) = v4;
  block[0] = v5;
  block[1] = 3221225472;
  block[2] = ___ZN5H9ISP22H9ISPPhotometerManagerC2EPFiP27H9ISPFlickerDetectorContextPvP25photometer_flicker_resultES3__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v4, block);
  return a1;
}

uint64_t ___ZN5H9ISP22H9ISPPhotometerManagerC2EPFiP27H9ISPFlickerDetectorContextPvP25photometer_flicker_resultES3__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = H9ISPFlickerDetectorCreate();
  *(_QWORD *)(v1 + 24) = result;
  if (result)
  {
    H9ISPFlickerDetectorRegisterDataCollectionCallback(result, v1, (uint64_t)H9ISPPhotometerManagerDataCollectionCallback);
    *(_DWORD *)(v1 + 72) = 1065353216;
    H9ISPFlickerDetectorSetGain(*(AudioUnit **)(v1 + 24), *(float *)(v1 + 72));
    return H9ISPFlickerDetectorStartDataCollection(*(AudioUnit **)(v1 + 24));
  }
  return result;
}

uint64_t H9ISPPhotometerManagerDataCollectionCallback(int a1, uint64_t a2, void *a3)
{
  NSObject *v3;
  _QWORD v5[6];

  if (a2)
  {
    v3 = *(NSObject **)(a2 + 16);
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = ___ZN5H9ISP22H9ISPPhotometerManager26PhotometerAnalysisCallbackEP27H9ISPFlickerDetectorContextP25photometer_flicker_result_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a2;
    v5[5] = a3;
    dispatch_async(v3, v5);
  }
  else
  {
    free(a3);
  }
  return 0;
}

void H9ISP::H9ISPPhotometerManager::~H9ISPPhotometerManager(H9ISP::H9ISPPhotometerManager *this)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 2);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN5H9ISP22H9ISPPhotometerManagerD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_sync(*((dispatch_queue_t *)this + 2), &__block_literal_global_1);
  dispatch_release(*((dispatch_object_t *)this + 2));
}

uint64_t H9ISP::H9ISPPhotometerManager::PhotometerAnalysisCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD v5[6];

  v3 = *(NSObject **)(a1 + 16);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 3221225472;
  v5[2] = ___ZN5H9ISP22H9ISPPhotometerManager26PhotometerAnalysisCallbackEP27H9ISPFlickerDetectorContextP25photometer_flicker_result_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a1;
  v5[5] = a3;
  dispatch_async(v3, v5);
  return 0;
}

void ___ZN5H9ISP22H9ISPPhotometerManager26PhotometerAnalysisCallbackEP27H9ISPFlickerDetectorContextP25photometer_flicker_result_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = mach_absolute_time();
  if (*(_BYTE *)(v2 + 40)
    || (HIDWORD(v5) = 1041313291,
        LODWORD(v5) = *(_DWORD *)(v2 + 32),
        LODWORD(v4) = *(_DWORD *)(v2 + 36),
        (double)(v3 - *(_QWORD *)(v2 + 48)) * 0.000000001 * (double)v5 / (double)v4 < 1.5))
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (!v6)
      return;
    goto LABEL_12;
  }
  if (*(float *)(v2 + 72) != 1.0)
  {
    *(_DWORD *)(v2 + 72) = 1065353216;
    H9ISPFlickerDetectorSetGain(*(AudioUnit **)(v2 + 24), *(float *)(v2 + 72));
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(double *)(v6 + 8);
    if (vabdd_f64(v7, *(double *)(v2 + 56)) >= 1.0 || *(_DWORD *)(v2 + 64) != *(_DWORD *)(v6 + 4))
    {
      if (*(_QWORD *)v2)
      {
        (*(void (**)(_QWORD, _QWORD))v2)(0, *(_QWORD *)(v2 + 8));
        v6 = *(_QWORD *)(a1 + 40);
        v7 = *(double *)(v6 + 8);
      }
      *(double *)(v2 + 56) = v7;
      *(_DWORD *)(v2 + 64) = *(_DWORD *)(v6 + 4);
    }
LABEL_12:
    free((void *)v6);
  }
}

uint64_t H9ISP::H9ISPPhotometerManager::PhotometerCommand(uint64_t a1, int a2)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD v5[5];
  _QWORD v6[5];

  if (a2 == 1)
  {
    v2 = *(NSObject **)(a1 + 16);
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 3221225472;
    v5[2] = ___ZN5H9ISP22H9ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_2;
    v5[3] = &__block_descriptor_40_e5_v8__0l;
    v5[4] = a1;
    v3 = v5;
    goto LABEL_5;
  }
  if (!a2)
  {
    v2 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = ___ZN5H9ISP22H9ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke;
    v6[3] = &__block_descriptor_40_e5_v8__0l;
    v6[4] = a1;
    v3 = v6;
LABEL_5:
    dispatch_async(v2, v3);
    return 0;
  }
  return 3758097090;
}

uint64_t ___ZN5H9ISP22H9ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = mach_absolute_time();
  *(_DWORD *)(v1 + 72) = 0;
  return H9ISPFlickerDetectorSetGain(*(AudioUnit **)(v1 + 24), *(float *)(v1 + 72));
}

uint64_t ___ZN5H9ISP22H9ISPPhotometerManager17PhotometerCommandENS_24PhotometerManagerCommandE_block_invoke_2(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 40))
  {
    *(_BYTE *)(v1 + 40) = 0;
    result = mach_absolute_time();
    *(_QWORD *)(v1 + 48) = result;
  }
  return result;
}

uint64_t H9ISP::H9ISPPhotometerManager::SetLux(H9ISP::H9ISPPhotometerManager *this, int a2)
{
  *((_DWORD *)this + 17) = a2;
  return 0;
}

_DWORD *CreateMotionMetadataDebugLogger(const char *a1, int a2, H9ISP::H9ISPDevice *a3)
{
  _DWORD *v6;
  FILE *v7;
  tm *v8;
  time_t v10;
  unsigned __int8 v11[16];
  __int128 v12;
  _OWORD v13[8];
  uint64_t v14;
  char v15[40];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = malloc_type_calloc(0x10uLL, 1uLL, 0x598E6CF3uLL);
  if (v6)
  {
    v7 = fopen(a1, "w");
    *(_QWORD *)v6 = v7;
    if (v7)
    {
      v6[2] = a2;
      fwrite("---------------------------------------------------------------------------\n", 0x4CuLL, 1uLL, v7);
      fwrite("OIS/Motion Debug Log\n", 0x15uLL, 1uLL, *(FILE **)v6);
      v10 = 0;
      setlocale(0, "");
      time(&v10);
      v8 = localtime(&v10);
      strftime(v15, 0x28uLL, "%m/%d/%g - %H:%M:%S", v8);
      fprintf(*(FILE **)v6, "Created: %s\n\n", v15);
      if (a3)
      {
        v14 = 0;
        memset(v13, 0, sizeof(v13));
        *(_OWORD *)v11 = 0u;
        v12 = 0u;
        *(_WORD *)&v11[4] = 6;
        if (!H9ISP::H9ISPDevice::ISP_SendCommand(a3, v11, 0xA8u, 0, 0xFFFFFFFF))
        {
          fwrite("Firmware Info:\n", 0xFuLL, 1uLL, *(FILE **)v6);
          fprintf(*(FILE **)v6, "    Platform Name: %s\n", (const char *)&v11[8]);
          fprintf(*(FILE **)v6, "    Link Date: %s\n", (const char *)v13 + 8);
          fprintf(*(FILE **)v6, "    Release Version: %s\n", (const char *)&v13[2] + 8);
          fprintf(*(FILE **)v6, "    Toolchain Name: %s\n", (const char *)&v13[4] + 8);
          fprintf(*(FILE **)v6, "    Toolchain Version: %s\n", (const char *)&v13[6] + 8);
          fprintf(*(FILE **)v6, "    Metadata Version: %d\n", 1286);
          fputc(10, *(FILE **)v6);
        }
      }
      fwrite("---------------------------------------------------------------------------\n", 0x4CuLL, 1uLL, *(FILE **)v6);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Could not open OIS meta-data file for writing: %s\n", a1);
      free(v6);
      return 0;
    }
  }
  return v6;
}

uint64_t DestroyMotionMetadataDebugLogger(FILE **a1)
{
  FILE *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      fflush(v2);
      fclose(*a1);
    }
    free(a1);
    return 0;
  }
  else
  {
    fwrite("DestroyMotionMetadataDebugLogger: Invalid context \n", 0x33uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 3758097090;
  }
}

uint64_t AppendMotionMetadata(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  FILE *v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  size_t v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
    return 3758097090;
  v5 = *(FILE **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  fwrite("---------------------------------------------------------------------------\n", 0x4CuLL, 1uLL, *(FILE **)a1);
  if (a2)
  {
    fprintf(v5, "frame: %d\n", *(_DWORD *)(a2[37] + 12));
    fprintf(v5, "timeStamp: 0x%016llX\n", a3);
    if ((v6 & 8) != 0 && *a2)
      fprintf(v5, "sensorTemperature: %d\n", *(unsigned __int16 *)(*a2 + 336));
    if ((v6 & 0x10) != 0 && *a2)
    {
      fprintf(v5, "motionDataStatus: %d\n", *(_DWORD *)(*a2 + 420));
      fprintf(v5, "sphereStatus: %d\n", *(_DWORD *)(*a2 + 424));
      fprintf(v5, "sphereMode: %d\n", *(_DWORD *)(*a2 + 428));
    }
    if ((v6 & 0x20) != 0)
    {
      v7 = a2[3];
      if (v7)
        fprintf(v5, "afCurrentPosition: %d\n", *(unsigned __int16 *)(v7 + 26));
    }
    v8 = (unsigned __int16 *)a2[13];
    if (v8)
    {
      fprintf(v5, "oisMetaVersion: %d\n", *v8);
      fprintf(v5, "oisSampleCount: %d\n", *(unsigned __int16 *)(a2[13] + 2));
      fprintf(v5, "motionSampleCount: %d\n", *(unsigned __int16 *)(a2[13] + 4));
      v9 = *a2;
      if (*a2)
      {
        if (!*(_QWORD *)(v9 + 468) || (fprintf(v5, "torchOn: ts=0x%016llX\n", *(_QWORD *)(v9 + 468)), (v9 = *a2) != 0))
        {
          v10 = *(_QWORD *)(v9 + 476);
          if (v10)
            fprintf(v5, "torchOff: ts=0x%016llX\n", v10);
        }
      }
      if ((v6 & 1) != 0)
      {
        v11 = a2[13];
        if (*(_WORD *)(v11 + 2))
        {
          v12 = 0;
          v13 = 20;
          do
          {
            v14 = v11 + v13;
            fprintf(v5, "oisSample: ts=0x%016llX  Xt=%-10.5f  Yt=%-10.5f  H1=%-5d  H2=%-5d  B1=%-5d  B2=%-5d  Xe=%-10.5f  Ye=%-10.5f  temp=%-5d\n", *(_QWORD *)(v14 - 12), (double)*(int *)(v14 - 4) * 0.00390625, (double)*(int *)v14 * 0.00390625, *(__int16 *)(v14 + 4), *(__int16 *)(v14 + 6), *(__int16 *)(v14 + 8), *(__int16 *)(v14 + 10), (double)*(int *)(v14 + 12) * 0.00390625, (double)*(int *)(v14 + 16) * 0.00390625, *(unsigned __int16 *)(v14 + 20));
            ++v12;
            v11 = a2[13];
            v13 += 36;
          }
          while (v12 < *(unsigned __int16 *)(v11 + 2));
        }
      }
      if ((v6 & 2) != 0)
      {
        v15 = a2[13];
        if (*(_WORD *)(v15 + 4))
        {
          v16 = 0;
          v17 = 18368;
          do
          {
            v18 = v15 + v17;
            fprintf(v5, "motionSample: Tisp=0x%016llX  Tmot=0x%016llX  type=%-5d  convergence=%-5d  Wq=%-10.7f  Xq=%-10.7f  Yq=%-10.7f  Zq=%-10.7f  Wp=%-10.7f  Xp=%-10.7f  Yp=%-10.7f  Zp=%-10.7f  Xg=%-10.7f  Yg=%-10.7f  Zg=%-10.7f\n", *(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(unsigned __int16 *)(v18 + 96), *(unsigned __int16 *)(v18 + 18), (double)*(int *)(v18 + 20) * 9.31322575e-10, (double)*(int *)(v18 + 24) * 9.31322575e-10, (double)*(int *)(v18 + 28) * 9.31322575e-10, (double)*(int *)(v18 + 32) * 9.31322575e-10, (double)*(int *)(v18 + 48) * 9.31322575e-10, (double)*(int *)(v18 + 52) * 9.31322575e-10, (double)*(int *)(v18 + 56) * 9.31322575e-10, (double)*(int *)(v18 + 60) * 9.31322575e-10, (double)*(int *)(v18 + 36) * 0.0000152587891, (double)*(int *)(v18 + 40) * 0.0000152587891, (double)*(int *)(v18 + 44) * 0.0000152587891);
            ++v16;
            v15 = a2[13];
            v17 += 100;
          }
          while (v16 < *(unsigned __int16 *)(v15 + 4));
        }
      }
    }
    else
    {
      fwrite("OIS meta-data section not found in frame meta-data.\n", 0x34uLL, 1uLL, v5);
    }
    if ((v6 & 0x80) == 0)
      goto LABEL_38;
    v22 = (unsigned __int16 *)a2[25];
    if (v22)
    {
      fprintf(v5, "apsMetaVersion: %d\n", *v22);
      fprintf(v5, "apsSampleCount: %d\n", *(unsigned __int16 *)(a2[25] + 2));
      v23 = a2[25];
      if (*(_WORD *)(v23 + 2))
      {
        v24 = 0;
        v25 = 44;
        do
        {
          v26 = v23 + v25;
          fprintf(v5, "apsSample: ts=0x%016llX  Zt=%-10.4f  Ze=%-10.4f  aps_w=%-5d  aps_e=%-5d  apsTemperature=%-10.4f  magTemperature=%-10.7f  coilResistance=%-10.7f\n           aps_sp_w=%-10.4f  aps_sp_e=%-10.4f  cDr=%-10.4f  dDr=%-10.4f  Bz=%-5d  do=%-10.4f  di=%-10.7f  Ze_w=%-10.4f  Ze_e=%-10.4f  aps_tc_w=%-10.4f  aps_tc_e=%-10.4f\n           afInter_w=%-10.4f  afInter_e=%-10.4f\n", *(_QWORD *)(v23 + v25 - 40), (double)*(int *)(v26 - 32) * 0.00390625, (double)*(int *)(v26 - 28) * 0.00390625, *(__int16 *)(v26 - 24), *(__int16 *)(v26 - 22), (double)*(__int16 *)(v26 - 20) * 0.00390625, (double)*(int *)(v26 - 16) * 0.0000152587891, (double)*(int *)(v26 - 12) * 0.0000152587891, (double)*(int *)(v26 - 8) * 0.00390625, (double)*(int *)(v26 - 4) * 0.00390625, (double)*(int *)v26 * 0.00390625, (double)*(int *)(v26 + 4) * 0.00390625, *(__int16 *)(v26 + 8),
            (double)*(int *)(v26 + 12) * 0.00390625,
            (double)*(int *)(v26 + 16) * 0.0000152587891,
            (double)*(int *)(v26 + 20) * 0.00390625,
            (double)*(int *)(v26 + 24) * 0.00390625,
            (double)*(int *)(v26 + 28) * 0.00390625,
            (double)*(int *)(v26 + 32) * 0.00390625,
            (double)*(int *)(v26 + 36) * 0.00390625,
            (double)*(int *)(v26 + 40) * 0.00390625);
          ++v24;
          v23 = a2[25];
          v25 += 84;
        }
        while (v24 < *(unsigned __int16 *)(v23 + 2));
      }
      goto LABEL_38;
    }
    v20 = "APS meta-data section not found in frame meta-data.\n";
    v21 = 52;
  }
  else
  {
    v20 = "frame: Dropped\n";
    v21 = 15;
  }
  fwrite(v20, v21, 1uLL, v5);
LABEL_38:
  fflush(v5);
  return 0;
}

pthread_mutex_t *H9ISP::H9ISPMotionManager::H9ISPMotionManager(pthread_mutex_t *this, H9ISP::H9ISPDevice *a2)
{
  pthread_t *v3;
  pthread_attr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&this->__opaque[48] = 0;
  v3 = (pthread_t *)&this->__opaque[48];
  *(_QWORD *)&this->__opaque[8] = 0;
  this->__sig = (uint64_t)a2;
  *(_QWORD *)this->__opaque = 0;
  *(_DWORD *)&this->__opaque[16] = 0;
  *(_QWORD *)&this->__opaque[24] = 0;
  *(_QWORD *)&this->__opaque[32] = 0;
  this->__opaque[40] = 0;
  pthread_mutex_init(this + 1, 0);
  pthread_attr_init(&v5);
  pthread_attr_setdetachstate(&v5, 1);
  pthread_create(v3, &v5, (void *(__cdecl *)(void *))H9ISP::H9ISPMotionManagerInitializationThread, this);
  pthread_attr_destroy(&v5);
  return this;
}

uint64_t H9ISP::H9ISPMotionManagerInitializationThread(pthread_mutex_t *this, H9ISP::H9ISPMotionManager *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  _QWORD v8[5];

  pthread_setname_np("H9ISPMotionManagerInitializationThread");
  v3 = objc_alloc_init(MEMORY[0x24BDC1400]);
  if (v3)
  {
    v4 = v3;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v5 = mach_absolute_time();
      syslog(6, "H9ISPMotionManager: Enabling motion at 0x%016llX", v5);
      if ((objc_msgSend(v4, "setSidebandSensorFusionEnable:", 1) & 1) != 0)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v8[0] = MEMORY[0x24BDAC760];
          v8[1] = 3221225472;
          v8[2] = ___ZN5H9ISPL38H9ISPMotionManagerInitializationThreadEPNS_18H9ISPMotionManagerE_block_invoke;
          v8[3] = &__block_descriptor_40_e11_v24__0Q8Q16l;
          v8[4] = this;
          objc_msgSend(v4, "setSidebandTimeSyncHandler:", v8);
LABEL_10:
          pthread_mutex_lock(this + 1);
          *(_QWORD *)this->__opaque = v4;
          pthread_mutex_unlock(this + 1);
          return 0;
        }
        v6 = "H9ISPMotionManager::EnableMotionDataFeedToISPCPU - CMMotionManager doesn't support setSidebandTimeSyncHandler";
      }
      else
      {
        v6 = "H9ISPMotionManager::EnableMotionDataFeedToISPCPU - setSidebandSensorFusionEnable failed";
      }
    }
    else
    {
      v6 = "H9ISPMotionManager::EnableMotionDataFeedToISPCPU - CMMotionManager doesn't support setSidebandSensorFusionEnable";
    }
    puts(v6);
    goto LABEL_10;
  }
  return 0;
}

void H9ISP::H9ISPMotionManager::~H9ISPMotionManager(H9ISP::H9ISPMotionManager *this)
{
  _opaque_pthread_t *v2;
  void *v3;

  v3 = 0;
  v2 = (_opaque_pthread_t *)*((_QWORD *)this + 7);
  if (v2)
    pthread_join(v2, &v3);
  if (*((_QWORD *)this + 1))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(*((id *)this + 1), "setSidebandSensorFusionEnable:", 0);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(*((id *)this + 1), "setSidebandTimeSyncHandler:", 0);

    *((_QWORD *)this + 1) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)this + 1);
}

uint64_t H9ISP::H9ISPMotionManager::GetOscarTimeSyncInfo(uint64_t a1, _OWORD *a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 48))
    return 3758097112;
  result = 0;
  *a2 = *(_OWORD *)(a1 + 32);
  return result;
}

uint64_t ___ZN5H9ISPL38H9ISPMotionManagerInitializationThreadEPNS_18H9ISPMotionManagerE_block_invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  mach_timebase_info v10;
  _QWORD outputStruct[2];
  unint64_t v12;

  mach_timebase_info(&v10);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a2;
  *(_BYTE *)(v6 + 48) = 1;
  if (*(_DWORD *)(v6 + 24)
    || (result = H9ISP::H9ISPDevice::GetISPCounterFrequency(*(H9ISP::H9ISPDevice **)v6, (unsigned int *)(v6 + 24), (double *)(v6 + 16)), v6 = *(_QWORD *)(a1 + 32), *(_DWORD *)(v6 + 24)))
  {
    result = H9ISP::H9ISPDevice::ISP_GetCameraTime(*(_QWORD *)v6, outputStruct);
    if (!(_DWORD)result)
    {
      if (v12 <= a2)
      {
        v9 = *(_QWORD *)(a1 + 32);
        v8 = (unint64_t)((double)outputStruct[1]
                              + -1.0 / *(double *)(v9 + 16) * (double)(uint64_t)(outputStruct[0] - a2));
      }
      else
      {
        v8 = 0;
        a3 += (uint64_t)((v12 - a2) * v10.numer) / v10.denom / 0x3E8uLL;
        v9 = *(_QWORD *)(a1 + 32);
      }
      return H9ISP::H9ISPDevice::SetOscarToISPClockSync(*(H9ISP::H9ISPDevice **)v9, a3, v8);
    }
  }
  return result;
}

__n128 H9ISP::H9ISPSetfileSelector::H9ISPSetfileSelector(H9ISP::H9ISPSetfileSelector *this, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7)
{
  const char *v7;
  __int128 v8;
  __n128 result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  if (a2 > 851)
  {
    if (a2 > 1043)
    {
      switch(a2)
      {
        case 1044:
          *(_QWORD *)this = &H9ISP::IMX414_setfile_2561_03XX;
          *((_DWORD *)this + 2) = 40604;
          v7 = "/usr/local/share/firmware/isp/2561_03XX.dat";
          break;
        case 3414:
          if (a3 == 2)
          {
            *(_QWORD *)this = &H9ISP::VD56G0_setfile_6222_01XX;
            *((_DWORD *)this + 2) = 7040;
            v7 = "/usr/local/share/firmware/isp/6222_01XX.dat";
          }
          else
          {
            *(_QWORD *)this = &H9ISP::VD56G0_setfile_6221_01XX;
            *((_DWORD *)this + 2) = 7040;
            v7 = "/usr/local/share/firmware/isp/6221_01XX.dat";
          }
          break;
        case 38754:
          if (a3 == 3)
          {
            *(_QWORD *)this = &H9ISP::OV9762_setfile_7153_01XX;
            *((_DWORD *)this + 2) = 42996;
            v7 = "/usr/local/share/firmware/isp/7153_01XX.dat";
          }
          else if (a3 == 2)
          {
            *(_QWORD *)this = &H9ISP::OV9762_setfile_7152_01XX;
            *((_DWORD *)this + 2) = 42996;
            v7 = "/usr/local/share/firmware/isp/7152_01XX.dat";
          }
          else
          {
            *(_QWORD *)this = &H9ISP::OV9762_setfile_7151_01XX;
            *((_DWORD *)this + 2) = 42996;
            v7 = "/usr/local/share/firmware/isp/7151_01XX.dat";
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(a2)
      {
        case 852:
          *(_QWORD *)this = &H9ISP::IMX354_setfile_9251_03XX;
          *((_DWORD *)this + 2) = 41508;
          v7 = "/usr/local/share/firmware/isp/9251_03XX.dat";
          break;
        case 868:
          *(_QWORD *)this = &H9ISP::IMX364_setfile_8762_01XX;
          *((_DWORD *)this + 2) = 13324;
          v7 = "/usr/local/share/firmware/isp/8762_01XX.dat";
          break;
        case 1029:
          *(_QWORD *)this = &H9ISP::IMX405_setfile_9711_01XX;
          *((_DWORD *)this + 2) = 16656;
          v7 = "/usr/local/share/firmware/isp/9711_01XX.dat";
          break;
        default:
          return result;
      }
    }
  }
  else if (a2 > 770)
  {
    switch(a2)
    {
      case 771:
        if (a4 == 2)
        {
          *(_QWORD *)this = &H9ISP::IMX303_setfile_5121_01XX;
          *((_DWORD *)this + 2) = 18552;
          v7 = "/usr/local/share/firmware/isp/5121_01XX.dat";
        }
        else
        {
          *(_QWORD *)this = &H9ISP::IMX303_setfile_5111_01XX;
          *((_DWORD *)this + 2) = 18552;
          v7 = "/usr/local/share/firmware/isp/5111_01XX.dat";
        }
        break;
      case 787:
        if (a3 == 1)
        {
          *(_QWORD *)this = &H9ISP::IMX313_setfile_4121_01XX;
          *((_DWORD *)this + 2) = 18532;
          v7 = "/usr/local/share/firmware/isp/4121_01XX.dat";
        }
        else
        {
          *(_QWORD *)this = &H9ISP::IMX313_setfile_4123_01XX;
          *((_DWORD *)this + 2) = 18532;
          v7 = "/usr/local/share/firmware/isp/4123_01XX.dat";
        }
        break;
      case 788:
        *(_QWORD *)this = &H9ISP::IMX314_setfile_9151_01XX;
        *((_DWORD *)this + 2) = 42440;
        v7 = "/usr/local/share/firmware/isp/9151_01XX.dat";
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(a2)
    {
      case 400:
        if (a3 == 2)
        {
          *(_QWORD *)this = &H9ISP::IMX190_setfile_1422_01XX;
          *((_DWORD *)this + 2) = 42768;
          v7 = "/usr/local/share/firmware/isp/1422_01XX.dat";
        }
        else
        {
          *(_QWORD *)this = &H9ISP::IMX190_setfile_1421_01XX;
          *((_DWORD *)this + 2) = 42768;
          v7 = "/usr/local/share/firmware/isp/1421_01XX.dat";
        }
        break;
      case 553:
        if (a3 == 2)
        {
          *(_QWORD *)this = &H9ISP::IMX229_setfile_8522_01XX;
          *((_DWORD *)this + 2) = 41632;
          v7 = "/usr/local/share/firmware/isp/8522_01XX.dat";
        }
        else
        {
          *(_QWORD *)this = &H9ISP::IMX229_setfile_8521_01XX;
          *((_DWORD *)this + 2) = 41632;
          v7 = "/usr/local/share/firmware/isp/8521_01XX.dat";
        }
        break;
      case 584:
        if (a3 == 5)
        {
          *(_QWORD *)this = &H9ISP::IMX248_setfile_1875_01XX;
          *((_DWORD *)this + 2) = 17648;
          v7 = "/usr/local/share/firmware/isp/1875_01XX.dat";
        }
        else
        {
          *(_QWORD *)this = &H9ISP::IMX248_setfile_1871_01XX;
          *((_DWORD *)this + 2) = 17648;
          v7 = "/usr/local/share/firmware/isp/1871_01XX.dat";
        }
        break;
      default:
        return result;
    }
  }
  v8 = *((_OWORD *)v7 + 1);
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)v7;
  *(_OWORD *)((char *)this + 28) = v8;
  result = *(__n128 *)(v7 + 28);
  *(__n128 *)((char *)this + 40) = result;
  return result;
}

H9ISP::H9ISPImageCompensator *H9ISP::H9ISPImageCompensator::H9ISPImageCompensator(H9ISP::H9ISPImageCompensator *this, H9ISP::H9ISPDevice *a2, H9ISP::H9ISPFrameReceiver *a3, int a4, int a5)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 56) = a5;
  *((_DWORD *)this + 57) = a4;
  *((_DWORD *)this + 58) = 0;
  H9ISP::AdaptiveLensShading::AdaptiveLensShading((H9ISP::H9ISPImageCompensator *)((char *)this + 240));
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 160), 0);
  pthread_cond_init((pthread_cond_t *)((char *)this + 112), 0);
  return this;
}

void sub_235813B34(_Unwind_Exception *a1)
{
  H9ISP::AdaptiveLensShading *v1;

  H9ISP::AdaptiveLensShading::~AdaptiveLensShading(v1);
  _Unwind_Resume(a1);
}

void H9ISP::AdaptiveLensShading::~AdaptiveLensShading(H9ISP::AdaptiveLensShading *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
}

void H9ISP::H9ISPImageCompensator::~H9ISPImageCompensator(H9ISP::H9ISPImageCompensator *this)
{
  void *v2;
  void *v3;

  pthread_cond_destroy((pthread_cond_t *)((char *)this + 112));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 160));
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 34);
  if (v3)
  {
    *((_QWORD *)this + 35) = v3;
    operator delete(v3);
  }
}

uint64_t H9ISP::H9ISPImageCompensator::activate(H9ISP::H9ISPImageCompensator *this)
{
  uint64_t v3;
  pthread_attr_t v4;
  pthread_mutex_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 4))
    return 3758097109;
  H9ISP::H9ISPThreadReadySyncer::H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v5);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  *((_QWORD *)this + 3) = this;
  *((_QWORD *)this + 6) = (char *)this + 112;
  *((_QWORD *)this + 7) = (char *)this + 160;
  *((_BYTE *)this + 68) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 2) = *(_OWORD *)this;
  *((_DWORD *)this + 22) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 12) = &v5;
  v3 = 48;
  pthread_attr_init(&v4);
  pthread_attr_setschedparam(&v4, (const sched_param *)&v3);
  pthread_attr_setdetachstate(&v4, 1);
  pthread_create((pthread_t *)this + 13, &v4, (void *(__cdecl *)(void *))H9ISP::H9ISPImageCompensatorThreadStart, (char *)this + 24);
  pthread_attr_destroy(&v4);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
  H9ISP::H9ISPThreadReadySyncer::wait(&v5);
  *((_DWORD *)this + 4) = 1;
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)&v5);
  return 0;
}

void sub_235813CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  H9ISP::H9ISPThreadReadySyncer::~H9ISPThreadReadySyncer((H9ISP::H9ISPThreadReadySyncer *)va);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::H9ISPImageCompensatorThreadStart(uint64_t *a1)
{
  uint64_t v2;
  unsigned __int16 *v4;
  __CVBuffer **v5;
  _opaque_pthread_t *v6;
  H9ISP *v7;
  H9ISP::H9ISPFrameMetadata *v8;
  const unsigned __int16 *BaseAddress;
  size_t Width;
  size_t Height;
  size_t BytesPerRowOfPlane;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;

  pthread_setname_np("H9ISPImageCompensatorThread");
  H9ISP::H9ISPThreadReadySyncer::lock((pthread_mutex_t *)a1[9]);
  pthread_mutex_lock((pthread_mutex_t *)a1[4]);
  H9ISP::H9ISPThreadReadySyncer::signalAndUnlock((H9ISP::H9ISPThreadReadySyncer *)a1[9]);
  pthread_cond_wait((pthread_cond_t *)a1[3], (pthread_mutex_t *)a1[4]);
  if (*((_DWORD *)a1 + 10) == 2)
  {
    v2 = 0;
  }
  else
  {
    v4 = 0;
    v2 = 0;
    v5 = (__CVBuffer **)(a1 + 6);
    do
    {
      if (!v4)
      {
        v6 = pthread_self();
        v7 = (H9ISP *)pthread_mach_thread_np(v6);
        H9ISP::H9ISPSetMachThreadPriority(v7, 31);
        v17 = 0;
        if (H9ISP::H9ISPDevice::ISP_GetSetfileSize((H9ISP::H9ISPDevice *)a1[1], *((_DWORD *)a1 + 16), &v17))
        {
          printf("error: ISP_GetSetfileSize failed: 0x%08X\n");
        }
        else
        {
          v2 = operator new[]();
          if (H9ISP::H9ISPDevice::ISP_CopySetfile((H9ISP::H9ISPDevice *)a1[1], v2, v17, *((_DWORD *)a1 + 16)))
          {
            printf("error: ISP_CopySetfile failed: 0x%08X\n");
          }
          else
          {
            v14 = *(_DWORD *)(v2 + 16);
            if (v14)
            {
              v15 = (unsigned int *)(v2 + 20);
              do
              {
                v16 = *v15;
                if ((unint64_t)v15 + v16 > v2 + v17)
                  break;
                if (*((unsigned __int16 *)v15 + 4) == 49155)
                {
                  v4 = (unsigned __int16 *)(v15 + 1);
                  goto LABEL_13;
                }
                v15 = (unsigned int *)((char *)v15 + (v16 + 4));
                --v14;
              }
              while (v14);
            }
          }
        }
        v4 = 0;
      }
LABEL_13:
      v8 = (H9ISP::H9ISPFrameMetadata *)operator new();
      H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v8, *v5, 1uLL);
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)a1[7], 1uLL);
      BaseAddress = (const unsigned __int16 *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)a1[7]);
      Width = CVPixelBufferGetWidth((CVPixelBufferRef)a1[7]);
      Height = CVPixelBufferGetHeight((CVPixelBufferRef)a1[7]);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane((CVPixelBufferRef)a1[7], 0);
      if (BaseAddress && Width && Height && BytesPerRowOfPlane)
      {
        v13 = *a1;
        *(_QWORD *)(*a1 + 264) = (char *)a1 + 44;
        if (!*((_BYTE *)a1 + 44))
        {
          if ((*(_BYTE *)(v13 + 232) & 4) != 0)
            H9ISP::AdaptiveLensShading::compensate((void **)(v13 + 240), BaseAddress, Width, Height, BytesPerRowOfPlane, (H9ISP::H9ISPDevice *)a1[1], v8, v4);
          *(_DWORD *)(v13 + 232) = 0;
        }
      }
      else
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "buffer not OK: pBuf = %p, w,h=%zu,%zu, bytesPerRow=%zu\n", BaseAddress, Width, Height, BytesPerRowOfPlane);
      }
      CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)a1[7], 1uLL);
      H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v8);
      MEMORY[0x23B7D8B08]();
      *(_DWORD *)(*a1 + 232) = 0;
      CVPixelBufferRelease((CVPixelBufferRef)a1[6]);
      CVPixelBufferRelease((CVPixelBufferRef)a1[7]);
      *v5 = 0;
      a1[7] = 0;
      H9ISP::H9ISPFrameReceiver::SetNumFramesUntilNextImageCompensatorCheckForWork((H9ISP::H9ISPFrameReceiver *)a1[2], 1u);
      *((_DWORD *)a1 + 10) = 0;
      *(_DWORD *)(*a1 + 16) = 1;
      pthread_cond_wait((pthread_cond_t *)a1[3], (pthread_mutex_t *)a1[4]);
    }
    while (*((_DWORD *)a1 + 10) != 2);
  }
  *(_DWORD *)(*a1 + 16) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)a1[4]);
  if (v2)
    MEMORY[0x23B7D8AF0](v2, 0x1000C8077774924);
  return 0;
}

void sub_235814008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C40D32E3BE5);
  _Unwind_Resume(a1);
}

uint64_t H9ISP::H9ISPImageCompensator::deactivate(H9ISP::H9ISPImageCompensator *this)
{
  uint64_t result;
  void *v3;

  if (!*((_DWORD *)this + 4))
    return 3758097111;
  *((_BYTE *)this + 68) = 1;
  H9ISP::H9ISPImageCompensator::SetImageCompensatorThreadPriority(this, 47);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
    if (*((_DWORD *)this + 16) != 1)
      break;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
    usleep(0x2710u);
  }
  v3 = 0;
  *((_DWORD *)this + 16) = 2;
  pthread_cond_signal((pthread_cond_t *)((char *)this + 112));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
  pthread_join(*((pthread_t *)this + 13), &v3);
  result = 0;
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t H9ISP::H9ISPImageCompensator::SetImageCompensatorThreadPriority(H9ISP::H9ISPImageCompensator *this, int a2)
{
  _opaque_pthread_t *v2;
  H9ISP *v4;

  v2 = (_opaque_pthread_t *)*((_QWORD *)this + 13);
  if (!v2)
    return 3758097086;
  v4 = (H9ISP *)pthread_mach_thread_np(v2);
  H9ISP::H9ISPSetMachThreadPriority(v4, a2);
  return 0;
}

uint64_t H9ISP::H9ISPImageCompensator::checkForWork(H9ISP::H9ISPImageCompensator *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v3;
  int v4;
  H9ISP::H9ISPFrameMetadata *v8;

  v3 = 3758097109;
  v4 = *((_DWORD *)this + 4);
  if (v4 != 2)
  {
    if (v4)
    {
      v8 = (H9ISP::H9ISPFrameMetadata *)operator new();
      H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v8, a2, 1uLL);
      if ((*((_BYTE *)this + 224) & 1) != 0
        && H9ISP::AdaptiveLensShading::shouldCompensate((H9ISP::H9ISPImageCompensator *)((char *)this + 240), *(H9ISP::H9ISPDevice **)this, v8))
      {
        *((_DWORD *)this + 58) |= 4u;
      }
      H9ISP::H9ISPFrameReceiver::SetNumFramesUntilNextImageCompensatorCheckForWork(*((H9ISP::H9ISPFrameReceiver **)this + 1), 1u);
      H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v8);
      MEMORY[0x23B7D8B08]();
      if (*((_DWORD *)this + 58))
      {
        if (!*((_BYTE *)this + 68))
        {
          pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
          CVPixelBufferRetain(a2);
          CVPixelBufferRetain(a3);
          *((_QWORD *)this + 9) = a2;
          *((_QWORD *)this + 10) = a3;
          *((_DWORD *)this + 16) = 1;
          pthread_cond_signal((pthread_cond_t *)((char *)this + 112));
          *((_DWORD *)this + 4) = 2;
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 160));
        }
        return 0;
      }
      else
      {
        return 3758097112;
      }
    }
    else
    {
      return 3758097111;
    }
  }
  return v3;
}

void sub_23581423C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C40D32E3BE5);
  _Unwind_Resume(a1);
}

H9ISP::H9ISPFrameMetadata *H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(H9ISP::H9ISPFrameMetadata *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  _DWORD *BaseAddress;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = pixelBuffer;
  *((_QWORD *)this + 39) = lockFlags;
  if (pixelBuffer)
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
    BaseAddress = CVPixelBufferGetBaseAddress(*((CVPixelBufferRef *)this + 38));
    *((_QWORD *)this + 37) = BaseAddress;
    if (BaseAddress)
    {
      v5 = BaseAddress[4];
      if (v5)
      {
        v6 = BaseAddress[5];
        if ((_DWORD)v6)
          *(_QWORD *)this = (char *)BaseAddress + v6;
        if (v5 >= 2)
        {
          v7 = BaseAddress[6];
          if ((_DWORD)v7)
            *((_QWORD *)this + 1) = (char *)BaseAddress + v7;
          if (v5 >= 3)
          {
            v8 = BaseAddress[7];
            if ((_DWORD)v8)
              *((_QWORD *)this + 2) = (char *)BaseAddress + v8;
            if (v5 >= 4)
            {
              v9 = BaseAddress[8];
              if ((_DWORD)v9)
                *((_QWORD *)this + 3) = (char *)BaseAddress + v9;
              if (v5 >= 5)
              {
                v10 = BaseAddress[9];
                if ((_DWORD)v10)
                  *((_QWORD *)this + 4) = (char *)BaseAddress + v10;
                if (v5 >= 6)
                {
                  v11 = BaseAddress[10];
                  if ((_DWORD)v11)
                    *((_QWORD *)this + 5) = (char *)BaseAddress + v11;
                  if (v5 >= 7)
                  {
                    v12 = BaseAddress[11];
                    if ((_DWORD)v12)
                      *((_QWORD *)this + 6) = (char *)BaseAddress + v12;
                    if (v5 >= 8)
                    {
                      v13 = BaseAddress[12];
                      if ((_DWORD)v13)
                        *((_QWORD *)this + 7) = (char *)BaseAddress + v13;
                      if (v5 >= 9)
                      {
                        v14 = BaseAddress[13];
                        if ((_DWORD)v14)
                          *((_QWORD *)this + 8) = (char *)BaseAddress + v14;
                        if (v5 < 0xB)
                        {
                          if (v5 != 10)
                            return this;
                        }
                        else
                        {
                          v15 = BaseAddress[15];
                          if ((_DWORD)v15)
                            *((_QWORD *)this + 10) = (char *)BaseAddress + v15;
                        }
                        v16 = BaseAddress[14];
                        if ((_DWORD)v16)
                          *((_QWORD *)this + 9) = (char *)BaseAddress + v16;
                        if (v5 >= 0xC)
                        {
                          v17 = BaseAddress[16];
                          if ((_DWORD)v17)
                            *((_QWORD *)this + 11) = (char *)BaseAddress + v17;
                          if (v5 >= 0xD)
                          {
                            v18 = BaseAddress[17];
                            if ((_DWORD)v18)
                              *((_QWORD *)this + 12) = (char *)BaseAddress + v18;
                            if (v5 >= 0xE)
                            {
                              v19 = BaseAddress[18];
                              if ((_DWORD)v19)
                                *((_QWORD *)this + 13) = (char *)BaseAddress + v19;
                              if (v5 >= 0xF)
                              {
                                v20 = BaseAddress[19];
                                if ((_DWORD)v20)
                                  *((_QWORD *)this + 14) = (char *)BaseAddress + v20;
                                if (v5 >= 0x10)
                                {
                                  v21 = BaseAddress[20];
                                  if ((_DWORD)v21)
                                    *((_QWORD *)this + 15) = (char *)BaseAddress + v21;
                                  if (v5 >= 0x11)
                                  {
                                    v22 = BaseAddress[21];
                                    if ((_DWORD)v22)
                                      *((_QWORD *)this + 16) = (char *)BaseAddress + v22;
                                    if (v5 >= 0x12)
                                    {
                                      v23 = BaseAddress[22];
                                      if ((_DWORD)v23)
                                        *((_QWORD *)this + 17) = (char *)BaseAddress + v23;
                                      if (v5 >= 0x13)
                                      {
                                        v24 = BaseAddress[23];
                                        if ((_DWORD)v24)
                                          *((_QWORD *)this + 18) = (char *)BaseAddress + v24;
                                        if (v5 >= 0x14)
                                        {
                                          v25 = BaseAddress[24];
                                          if ((_DWORD)v25)
                                            *((_QWORD *)this + 19) = (char *)BaseAddress + v25;
                                          if (v5 >= 0x15)
                                          {
                                            v26 = BaseAddress[25];
                                            if ((_DWORD)v26)
                                              *((_QWORD *)this + 20) = (char *)BaseAddress + v26;
                                            if (v5 >= 0x16)
                                            {
                                              v27 = BaseAddress[26];
                                              if ((_DWORD)v27)
                                                *((_QWORD *)this + 21) = (char *)BaseAddress + v27;
                                              if (v5 >= 0x17)
                                              {
                                                v28 = BaseAddress[27];
                                                if ((_DWORD)v28)
                                                  *((_QWORD *)this + 22) = (char *)BaseAddress + v28;
                                                if (v5 >= 0x18)
                                                {
                                                  v29 = BaseAddress[28];
                                                  if ((_DWORD)v29)
                                                    *((_QWORD *)this + 23) = (char *)BaseAddress + v29;
                                                  if (v5 >= 0x19)
                                                  {
                                                    v30 = BaseAddress[29];
                                                    if ((_DWORD)v30)
                                                      *((_QWORD *)this + 24) = (char *)BaseAddress + v30;
                                                    if (v5 >= 0x1A)
                                                    {
                                                      v31 = BaseAddress[30];
                                                      if ((_DWORD)v31)
                                                        *((_QWORD *)this + 25) = (char *)BaseAddress + v31;
                                                      if (v5 >= 0x1B)
                                                      {
                                                        v32 = BaseAddress[31];
                                                        if ((_DWORD)v32)
                                                          *((_QWORD *)this + 26) = (char *)BaseAddress + v32;
                                                        if (v5 >= 0x1C)
                                                        {
                                                          v33 = BaseAddress[32];
                                                          if ((_DWORD)v33)
                                                            *((_QWORD *)this + 27) = (char *)BaseAddress + v33;
                                                          if (v5 >= 0x1D)
                                                          {
                                                            v34 = BaseAddress[33];
                                                            if ((_DWORD)v34)
                                                              *((_QWORD *)this + 28) = (char *)BaseAddress + v34;
                                                            if (v5 >= 0x1E)
                                                            {
                                                              v35 = BaseAddress[34];
                                                              if ((_DWORD)v35)
                                                                *((_QWORD *)this + 29) = (char *)BaseAddress + v35;
                                                              if (v5 >= 0x1F)
                                                              {
                                                                v36 = BaseAddress[35];
                                                                if ((_DWORD)v36)
                                                                  *((_QWORD *)this + 30) = (char *)BaseAddress + v36;
                                                                if (v5 >= 0x20)
                                                                {
                                                                  v37 = BaseAddress[36];
                                                                  if ((_DWORD)v37)
                                                                    *((_QWORD *)this + 31) = (char *)BaseAddress + v37;
                                                                  if (v5 >= 0x21)
                                                                  {
                                                                    v38 = BaseAddress[37];
                                                                    if ((_DWORD)v38)
                                                                      *((_QWORD *)this + 32) = (char *)BaseAddress + v38;
                                                                    if (v5 >= 0x22)
                                                                    {
                                                                      v39 = BaseAddress[38];
                                                                      if ((_DWORD)v39)
                                                                        *((_QWORD *)this + 33) = (char *)BaseAddress
                                                                                               + v39;
                                                                      if (v5 >= 0x23)
                                                                      {
                                                                        v40 = BaseAddress[39];
                                                                        if ((_DWORD)v40)
                                                                          *((_QWORD *)this + 34) = (char *)BaseAddress
                                                                                                 + v40;
                                                                        if (v5 >= 0x24)
                                                                        {
                                                                          v41 = BaseAddress[40];
                                                                          if ((_DWORD)v41)
                                                                            *((_QWORD *)this + 35) = (char *)BaseAddress + v41;
                                                                          if (v5 >= 0x25)
                                                                          {
                                                                            v42 = BaseAddress[41];
                                                                            if ((_DWORD)v42)
                                                                              *((_QWORD *)this + 36) = (char *)BaseAddress + v42;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(H9ISP::H9ISPFrameMetadata *this)
{
  __CVBuffer *v2;

  v2 = (__CVBuffer *)*((_QWORD *)this + 38);
  if (v2)
    CVPixelBufferUnlockBaseAddress(v2, *((_QWORD *)this + 39));
}

void BayerArray::BayerArray(BayerArray *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0x43F800000;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = 0x43F800000;
}

void BayerArray::BayerArray(BayerArray *this, const unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((float *)this + 8) = 1.0 / (float)(unint64_t)(a5 * a4);
  *((_DWORD *)this + 9) = a6;
}

{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((float *)this + 8) = 1.0 / (float)(unint64_t)(a5 * a4);
  *((_DWORD *)this + 9) = a6;
}

float BayerArray::Average(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (a2 >= 0)
      v6 = a2;
    else
      v6 = a2 + 1;
    v7 = *(_QWORD *)a1 + 2 * v5 * ((uint64_t)v6 >> 1) + 2 * (int)(a2 - (v6 & 0xFFFFFFFE));
    v8 = 4 * v5;
    do
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v9 = 0;
        v10 = *(_QWORD *)(a1 + 16);
        do
        {
          v4 += (unint64_t)*(unsigned __int16 *)(v7 + v9) >> 4;
          v9 += 4;
          --v10;
        }
        while (v10);
      }
      ++v3;
      v7 += v8;
    }
    while (v3 != v2);
  }
  else
  {
    v4 = 0;
  }
  return *(float *)(a1 + 32) * (float)v4;
}

float BayerArray::Average(BayerArray *this, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t i;
  int v17;
  float result;

  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *(unsigned __int16 **)this;
    v12 = *((_QWORD *)this + 1);
    v13 = v12;
    v14 = 4 * v12;
    do
    {
      v15 = v11;
      for (i = *((_QWORD *)this + 2); i; --i)
      {
        v6 += *v15;
        v7 += v15[1];
        v8 += v15[v13];
        v9 += v15[v13 + 1];
        v15 += 2;
      }
      ++v10;
      v11 = (unsigned __int16 *)((char *)v11 + v14);
    }
    while (v10 != v5);
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  v17 = *((_DWORD *)this + 9);
  *a2 = *((float *)this + 8) * (float)(v6 >> v17);
  *a3 = *((float *)this + 8) * (float)(v7 >> v17);
  *a4 = *((float *)this + 8) * (float)(v8 >> v17);
  result = *((float *)this + 8) * (float)(v9 >> v17);
  *a5 = result;
  return result;
}

uint64_t BayerArray::DefineSubBayerArray(BayerArray *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BayerArray *a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (!a7)
    goto LABEL_7;
  v7 = 0;
  if (((a3 | a2) & 0x8000000000000000) == 0 && ((a5 | a4) & 0x80000000) == 0)
  {
    if ((unint64_t)(a4 + a2) > *((_QWORD *)this + 2) || (unint64_t)(a5 + a3) > *((_QWORD *)this + 3))
      return 0;
LABEL_7:
    v8 = *((_QWORD *)this + 1);
    v9 = *((_DWORD *)this + 9);
    *(_QWORD *)a6 = *(_QWORD *)this + 4 * (a2 + v8 * a3);
    *((_QWORD *)a6 + 1) = v8;
    *((_QWORD *)a6 + 2) = (int)a4;
    *((_QWORD *)a6 + 3) = (int)a5;
    *((float *)a6 + 8) = 1.0 / (float)(a5 * a4);
    *((_DWORD *)a6 + 9) = v9;
    return 1;
  }
  return v7;
}

uint64_t BayerArray::Dump(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v2 = this;
    if (*(_QWORD *)this && *(_QWORD *)(this + 16) && (v3 = *(_QWORD *)(this + 24)) != 0)
    {
      this = printf("[base=%p, width = %zd, height = %zd]\n", *(const void **)this, *(_QWORD *)(this + 16), v3);
      if (*(_QWORD *)(v2 + 24))
      {
        v5 = 0;
        v6 = 0;
        if (a2 >= 2)
          v7 = "/";
        else
          v7 = "";
        if (a2 >= 4)
          v8 = "/";
        else
          v8 = "";
        if (a2 >= 8)
          v9 = "/";
        else
          v9 = "";
        for (i = 2; ; i += 4)
        {
          v13 = v6;
          if (*(_QWORD *)(v2 + 16))
            break;
LABEL_29:
          this = putchar(10);
          v6 = v13 + 1;
          v5 += 4;
          if ((unint64_t)(v13 + 1) >= *(_QWORD *)(v2 + 24))
            return this;
        }
        v11 = 0;
        v12 = 0;
        while (1)
        {
          if ((a2 & 1) != 0)
          {
            printf("%5d%s", *(unsigned __int16 *)(*(_QWORD *)v2 + v5 * *(_QWORD *)(v2 + 8) + v11) >> *(_DWORD *)(v2 + 36), v7);
            if ((a2 & 2) == 0)
            {
LABEL_20:
              if ((a2 & 4) != 0)
                goto LABEL_27;
              goto LABEL_21;
            }
          }
          else if ((a2 & 2) == 0)
          {
            goto LABEL_20;
          }
          printf("%5d%s", *(unsigned __int16 *)(*(_QWORD *)v2 + v5 * *(_QWORD *)(v2 + 8) + v11 + 2) >> *(_DWORD *)(v2 + 36), v8);
          if ((a2 & 4) != 0)
          {
LABEL_27:
            printf("%5d%s", *(unsigned __int16 *)(*(_QWORD *)v2 + i * *(_QWORD *)(v2 + 8) + v11) >> *(_DWORD *)(v2 + 36), v9);
            if ((a2 & 8) == 0)
              goto LABEL_23;
LABEL_22:
            printf("%5d  ", *(unsigned __int16 *)(*(_QWORD *)v2 + i * *(_QWORD *)(v2 + 8) + v11 + 2) >> *(_DWORD *)(v2 + 36));
            goto LABEL_23;
          }
LABEL_21:
          if ((a2 & 8) != 0)
            goto LABEL_22;
LABEL_23:
          ++v12;
          v11 += 4;
          if (v12 >= *(_QWORD *)(v2 + 16))
            goto LABEL_29;
        }
      }
    }
    else
    {
      return puts("BayerArray::Dump -- empty array");
    }
  }
  return this;
}

uint64_t BayerArray::GetPackedPixel(BayerArray *this, char a2, unint64_t a3, int a4)
{
  switch(a4)
  {
    case 14:
      return ((uint64_t (*)(void))((char *)&loc_235814B7C + 4 * byte_235830D80[a2 & 0xF]))();
    case 12:
      return ((uint64_t (*)(void))((char *)&loc_235814BC4 + 4 * byte_235830D90[a2 & 7]))();
    case 10:
      return ((uint64_t (*)(void))((char *)&loc_235814B34 + 4 * byte_235830D98[a2 & 0xF]))();
  }
  return 0;
}

uint64_t sub_235814BD8@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 4) & 0xFF0 | (*a1 >> 20) & 0xFu;
}

uint64_t sub_235814BEC@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 20) & 0xFF0 | (a1[1] >> 8) & 0xFu;
}

void sub_235814C00()
{
  JUMPOUT(0x235814C08);
}

uint64_t sub_235814C10@<X0>(uint64_t a1@<X8>)
{
  return *(_DWORD *)(a1 + 8) & 0xF | (16 * BYTE2(*(_DWORD *)(a1 + 4)));
}

uint64_t sub_235814C24@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 4) >> 20) & 0xFF0 | (*(_DWORD *)(a1 + 8) >> 4);
}

uint64_t sub_235814C38@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 8) >> 4) & 0xFF0 | HIBYTE(*(_DWORD *)(a1 + 8)) & 0xFu;
}

uint64_t sub_235814C4C@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 8) >> 12) & 0xFF0u | (*(_DWORD *)(a1 + 8) >> 28);
}

uint64_t sub_235814C60@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 6) & 0x3FC | (a1[1] >> 2) & 3u;
}

uint64_t sub_235814C74@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 14) & 0x3FC | (a1[1] >> 4) & 3u;
}

uint64_t sub_235814C88@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 22) & 0x3FC | (a1[1] >> 6);
}

uint64_t sub_235814C9C@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 4) >> 6) & 0x3FC | (*(_DWORD *)(a1 + 8) >> 8) & 3u;
}

uint64_t sub_235814CB0@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 4) >> 14) & 0x3FC | (*(_DWORD *)(a1 + 8) >> 10) & 3u;
}

uint64_t sub_235814CC4@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 4) >> 22) & 0x3FC | (*(_DWORD *)(a1 + 8) >> 12) & 3u;
}

uint64_t sub_235814CD8@<X0>(uint64_t a1@<X8>)
{
  return ((unsigned __int16)*(_DWORD *)(a1 + 8) >> 14) & 0xFFFFFC03 | (4 * *(_DWORD *)(a1 + 8));
}

uint64_t sub_235814D50@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 16) >> 6) & 0x3FC | (*(_DWORD *)(a1 + 16) >> 28) & 3u;
}

uint64_t sub_235814D64@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 16) >> 14) & 0x3FCu | (*(_DWORD *)(a1 + 16) >> 30);
}

uint64_t sub_235814D78@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 2) & 0x3FC0 | (a1[1] >> 6) & 0x3Fu;
}

uint64_t sub_235814D8C@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 10) & 0x3FC0 | (a1[1] >> 12) & 0x3Fu;
}

uint64_t sub_235814DA0@<X0>(_DWORD *a1@<X8>)
{
  return (*a1 >> 18) & 0x3FC0 | (a1[1] >> 18) & 0x3Fu;
}

uint64_t sub_235814DB4@<X0>(uint64_t a1@<X8>)
{
  return *(_BYTE *)(a1 + 11) & 0x3Fu | (HIBYTE(*(_DWORD *)(a1 + 4)) << 6);
}

uint64_t sub_235814E18@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 12) >> 18) & 0x3FC0 | (*(_DWORD *)(a1 + 16) >> 22) & 0x3Fu;
}

uint64_t sub_235814E2C@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 16) >> 28) & 0xFFFFC00F | (*(_DWORD *)(a1 + 16) << 6) | (16 * (*(_DWORD *)(a1 + 20) & 3));
}

uint64_t sub_235814E40@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 16) >> 2) & 0x3FC0 | (*(_DWORD *)(a1 + 20) >> 2);
}

uint64_t sub_235814E54@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 2) & 0x3FC0 | (*(_DWORD *)(a1 + 24) >> 8) & 0x3Fu;
}

uint64_t sub_235814E68@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 10) & 0x3FC0 | (*(_DWORD *)(a1 + 24) >> 14) & 0x3Fu;
}

uint64_t sub_235814E7C@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 18) & 0x3FC0 | (*(_DWORD *)(a1 + 24) >> 20) & 0x3Fu;
}

uint64_t sub_235814E90@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;

  HIDWORD(v1) = *(_DWORD *)(a1 + 24);
  LODWORD(v1) = HIDWORD(v1);
  return (v1 >> 26) & 0x3FFF;
}

CFTypeRef H9ISP::CreateFormatedMetadata(uint64_t a1)
{
  NamedValues *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  NamedValues *v21;
  NamedValues *v22;
  NamedValues *v23;
  NamedValues *v24;
  NamedValues *v25;
  char *v26;
  NamedValues *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  const char *v55;
  const char *v56;
  const char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  const char *v87;
  int v88;
  const char *v89;
  int v90;
  const char *v91;
  const char *v92;
  const char *v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  const char *v98;
  int v99;
  NamedValues *v100;
  unint64_t v101;
  CFTypeRef v102;
  uint64_t v104;
  uint64_t v105;
  double v106;
  __CFArray *v107;
  __CFArray *v108;
  CFTypeRef cf;
  int v110;
  unsigned int v111;
  double v112;
  char v113[8];
  char v114[8];
  char v115[8];
  char __str[8];
  char v117;
  char v118[8];
  uint64_t v119;
  uint64_t v120;
  void *__p;
  char v122;
  _QWORD v123[114];

  v123[112] = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)a1 != 1286)
    return 0;
  NamedValues::NamedValues((NamedValues *)&cf);
  NamedValues::NamedValues((NamedValues *)&v108);
  v3 = *(unsigned int *)(a1 + 16);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v105 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v106 = *MEMORY[0x24BEDB7F0];
    v104 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    while (1)
    {
      v5 = *(unsigned int *)(a1 + 4 * v4 + 20);
      if ((_DWORD)v5)
        break;
LABEL_120:
      if (++v4 == v3)
        goto LABEL_121;
    }
    NamedValues::NamedValues((NamedValues *)&v107);
    v6 = (unsigned __int16 *)(a1 + v5);
    switch((int)v4)
    {
      case 0:
        *(double *)v118 = COERCE_DOUBLE("unknown");
        switch(*((_DWORD *)v6 + 4))
        {
          case 0:
            *(double *)&v7 = COERCE_DOUBLE("green-red");
            goto LABEL_79;
          case 1:
            *(double *)&v7 = COERCE_DOUBLE("red");
            goto LABEL_79;
          case 2:
            *(double *)&v7 = COERCE_DOUBLE("blue");
            goto LABEL_79;
          case 3:
            *(double *)&v7 = COERCE_DOUBLE("green-blue");
LABEL_79:
            *(double *)v118 = *(double *)&v7;
            break;
          default:
            break;
        }
        *(_QWORD *)__str = "unknown";
        v88 = v6[14];
        if (v88 == 2)
        {
          v89 = "binning 1/4";
        }
        else if (v88 == 1)
        {
          v89 = "binning 1/2";
        }
        else
        {
          if (v6[14])
            goto LABEL_87;
          v89 = "binning disabled";
        }
        *(_QWORD *)__str = v89;
LABEL_87:
        *(_QWORD *)v115 = "unknown";
        v90 = v6[15];
        if (v90 == 2)
        {
          v91 = "binning 1/4";
        }
        else if (v90 == 1)
        {
          v91 = "binning 1/2";
        }
        else
        {
          if (v6[15])
            goto LABEL_94;
          v91 = "binning disabled";
        }
        *(_QWORD *)v115 = v91;
LABEL_94:
        *(_QWORD *)v114 = "unknown";
        switch(v6[34])
        {
          case 0u:
            v92 = "raw8";
            goto LABEL_99;
          case 1u:
            v92 = "raw10";
            goto LABEL_99;
          case 2u:
            v92 = "raw12";
            goto LABEL_99;
          case 3u:
            v92 = "raw14";
LABEL_99:
            *(_QWORD *)v114 = v92;
            break;
          default:
            break;
        }
        *(_QWORD *)v113 = "unknown";
        if (v6[35] == 1)
        {
          v93 = "unpacked";
        }
        else
        {
          if (v6[35])
          {
LABEL_105:
            LODWORD(v112) = *((unsigned __int8 *)v6 + 43);
            LODWORD(v112) = *((unsigned __int8 *)v6 + 44);
            LODWORD(v112) = *((unsigned __int8 *)v6 + 45);
            LODWORD(v112) = *((unsigned __int8 *)v6 + 46);
            LODWORD(v112) = *((unsigned __int8 *)v6 + 47);
            LODWORD(v94) = *((_DWORD *)v6 + 12);
            v112 = (double)v94 * 0.00390625;
            LOWORD(v95) = v6[32];
            v112 = (double)v95 * 0.00390625;
            LODWORD(v112) = *((unsigned __int8 *)v6 + 72);
            LODWORD(v112) = *((unsigned __int8 *)v6 + 73);
            v112 = COERCE_DOUBLE(bswap64(*(_QWORD *)(v6 + 37)));
            *(_QWORD *)&v112 = v6 + 48;
            *(_QWORD *)&v112 = v6 + 64;
            *(_QWORD *)&v112 = v6 + 80;
            *(_QWORD *)&v112 = v6 + 96;
            v96 = *((_DWORD *)v6 + 80);
            v97 = *((_DWORD *)v6 + 81);
            v111 = bswap32(v97);
            LODWORD(v112) = bswap32(v96);
            v110 = v96;
            v110 = BYTE1(v96);
            v110 = BYTE2(v96);
            v110 = HIBYTE(v96) & 0xF;
            v110 = v96 >> 28;
            v110 = HIBYTE(v97);
            v110 = BYTE2(v97);
            v110 = BYTE1(v97);
            v110 = v97;
            v110 = *((unsigned __int8 *)v6 + 338);
            v110 = *((unsigned __int8 *)v6 + 339);
            v110 = *((unsigned __int8 *)v6 + 460);
            v110 = *((unsigned __int8 *)v6 + 461);
            v110 = v6[229];
            v110 = v6[246];
            v110 = v6[247];
            v110 = v6[248];
            v110 = v6[249];
            v110 = *((unsigned __int8 *)v6 + 500);
            v110 = *((unsigned __int8 *)v6 + 501);
            v110 = v6[254];
            v110 = v6[255];
            v110 = v6[256];
            v110 = v6[257];
            v110 = *((_DWORD *)v6 + 129);
            v110 = *((_DWORD *)v6 + 130);
            v110 = *((_DWORD *)v6 + 131);
            v110 = *((_DWORD *)v6 + 132);
            v110 = *((_DWORD *)v6 + 133);
            v110 = *((_DWORD *)v6 + 134);
            v110 = *((_DWORD *)v6 + 135);
            v110 = v6[272];
            v110 = v6[273];
            v110 = v6[282];
            v110 = v6[283];
            v110 = v6[284];
            v110 = v6[285];
            v110 = v6[286];
            v110 = v6[287];
            v110 = v6[288];
            v110 = v6[289];
            v110 = *((_DWORD *)v6 + 145);
            v110 = *((_DWORD *)v6 + 146);
            v110 = v6[294];
            v110 = *((_DWORD *)v6 + 148);
            v110 = *((_DWORD *)v6 + 149);
            v110 = *((_DWORD *)v6 + 150);
            v110 = *((unsigned __int8 *)v6 + 604);
            v110 = *((unsigned __int8 *)v6 + 605);
            v110 = *((_DWORD *)v6 + 152);
            v110 = *((_DWORD *)v6 + 153);
            v110 = *((_DWORD *)v6 + 154);
            v110 = *((_DWORD *)v6 + 155);
            v26 = "Shared Input";
            goto LABEL_118;
          }
          v93 = "packed";
        }
        *(_QWORD *)v113 = v93;
        goto LABEL_105;
      case 1:
        v8 = "unknown";
        *(double *)v118 = COERCE_DOUBLE("unknown");
        v9 = *v6;
        if (v9 == 2)
        {
          *(double *)&v10 = COERCE_DOUBLE("R'G'B'");
        }
        else if (v9 == 1)
        {
          *(double *)&v10 = COERCE_DOUBLE("Y'CbCr 4:2:2");
        }
        else
        {
          if (*v6)
            goto LABEL_74;
          *(double *)&v10 = COERCE_DOUBLE("Y'CbCr 4:2:0");
        }
        *(double *)v118 = *(double *)&v10;
LABEL_74:
        *(_QWORD *)__str = "unknown";
        switch(v6[1])
        {
          case 0u:
            v87 = "BackEnd";
            goto LABEL_110;
          case 1u:
            v87 = "StatsBlock";
            goto LABEL_110;
          case 2u:
            v87 = "RawProcBlock";
            goto LABEL_110;
          case 3u:
            v87 = "RGBProcBlock";
            goto LABEL_110;
          case 4u:
            v87 = "YCCProcBlock";
LABEL_110:
            *(_QWORD *)__str = v87;
            break;
          default:
            break;
        }
        v98 = "RGBY";
        if (!*((_BYTE *)v6 + 9))
          v98 = "RGGB";
        *(_QWORD *)v115 = v98;
        v99 = *((_DWORD *)v6 + 1028);
        if (v99 == 1)
        {
          v8 = "log2";
        }
        else if (!v99)
        {
          v8 = "linear";
        }
        *(_QWORD *)v114 = v8;
        NamedValues::NamedValues((NamedValues *)v113);
        LODWORD(v101) = *((_DWORD *)v6 + 1027);
        v112 = (double)v101 * 0.0625;
        LODWORD(v112) = *((unsigned __int8 *)v6 + 4138);
        LODWORD(v112) = *((unsigned __int8 *)v6 + 4139);
        LODWORD(v112) = *((_DWORD *)v6 + 1035);
        LODWORD(v112) = *((_DWORD *)v6 + 1036);
        LODWORD(v112) = *((_DWORD *)v6 + 1037);
        LODWORD(v112) = *((_DWORD *)v6 + 1038);
        LODWORD(v112) = *((_DWORD *)v6 + 1039);
        LODWORD(v112) = *((_DWORD *)v6 + 1040);
        LODWORD(v112) = *((_DWORD *)v6 + 1041);
        LODWORD(v112) = *((_DWORD *)v6 + 1042);
        LODWORD(v112) = *((_DWORD *)v6 + 1043);
        LODWORD(v112) = *((_DWORD *)v6 + 1044);
        LODWORD(v112) = *((_DWORD *)v6 + 1045);
        LODWORD(v112) = *((_DWORD *)v6 + 1046);
        NamedValues::~NamedValues((NamedValues *)v113);
        v26 = "Shared Output";
LABEL_118:
LABEL_119:
        NamedValues::~NamedValues((NamedValues *)&v107);
        goto LABEL_120;
      case 2:
        LOWORD(v11) = v6[2];
        *(double *)v118 = (double)v11 * 0.00390625;
        LOWORD(v12) = v6[3];
        *(double *)v118 = (double)v12 * 0.00390625;
        LOWORD(v13) = v6[4];
        *(double *)v118 = (double)v13 * 0.00390625;
        *(_DWORD *)v118 = v6[5];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 13);
        LODWORD(v14) = *((_DWORD *)v6 + 5);
        *(double *)v118 = (double)v14 * 0.0000152587891;
        NamedValues::NamedValues((NamedValues *)v114);
        NamedValues::NamedValues((NamedValues *)v113);
        v15 = 0;
        v16 = a1 + 60 + v5;
        do
        {
          snprintf(__str, 0x40uLL, "row[%d]", v15);
          v17 = 0;
          strcpy(v118, "{");
          v18 = 1;
          do
          {
            v19 = snprintf(&v118[v18], (1024 - v18), "%3d ", *(unsigned __int8 *)(v16 + v17));
            v18 += v19;
            if (v19 <= 0)
              v20 = 1024;
            else
              v20 = v18;
            if (v17 > 0xE)
              break;
            ++v17;
          }
          while (v20 < 1024);
          if (v20 <= 1023)
            snprintf(&v118[v20], (1024 - v20), "}");
          NamedValue::NamedValue((NamedValue *)v115, __str, v118, 0);
          NamedValues::push_back((__CFArray **)v113, (const void **)v115);
          NamedValue::~NamedValue((NamedValue *)v115);
          ++v15;
          v16 += 16;
        }
        while (v15 != 32);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 1732);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 434);
        *(_DWORD *)v118 = v6[870];
        *(_DWORD *)v118 = v6[871];
        *(_DWORD *)v118 = v6[872];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 437);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 438);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 439);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 440);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 441);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 442);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 443);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 444);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 445);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 446);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 447);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 448);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 449);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 450);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 451);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 452);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 453);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 454);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 455);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 456);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 457);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 458);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 459);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 460);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 461);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 462);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 463);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 464);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 465);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 466);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 467);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 468);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 469);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 470);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 471);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 472);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 473);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 474);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 475);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 476);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 477);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 478);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 479);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 480);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 481);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 482);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 483);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 484);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 485);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 486);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 487);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 488);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 489);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 490);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 491);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 492);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 493);
        *(_DWORD *)v118 = v6[988];
        *(_DWORD *)v118 = v6[989];
        *(_DWORD *)v118 = v6[990];
        *(_DWORD *)v118 = v6[991];
        *(_DWORD *)v118 = v6[992];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 497);
        NamedValues::NamedValues((NamedValues *)v118);
        *(_DWORD *)v115 = *((unsigned __int8 *)v6 + 592);
        *(_DWORD *)v115 = *((unsigned __int8 *)v6 + 593);
        NamedValues::NamedValues((NamedValues *)v115);
        LODWORD(v112) = *((_DWORD *)v6 + 405);
        LODWORD(v112) = *((_DWORD *)v6 + 406);
        LODWORD(v112) = *((_DWORD *)v6 + 407);
        LODWORD(v112) = *((_DWORD *)v6 + 408);
        LODWORD(v112) = *((_DWORD *)v6 + 409);
        LODWORD(v112) = *((_DWORD *)v6 + 410);
        LODWORD(v112) = *((_DWORD *)v6 + 411);
        LODWORD(v112) = *((_DWORD *)v6 + 412);
        LODWORD(v112) = *((_DWORD *)v6 + 413);
        LODWORD(v112) = *((_DWORD *)v6 + 414);
        LODWORD(v112) = *((_DWORD *)v6 + 415);
        LODWORD(v112) = *((_DWORD *)v6 + 416);
        NamedValues::~NamedValues((NamedValues *)v115);
        NamedValues::~NamedValues((NamedValues *)v118);
        NamedValues::~NamedValues((NamedValues *)v113);
        NamedValues::~NamedValues((NamedValues *)v114);
        v26 = "Shared Auto Exposure";
        goto LABEL_118;
      case 3:
        NamedValues::NamedValues((NamedValues *)v114);
        *(_DWORD *)v118 = v6[80];
        *(_DWORD *)v118 = v6[81];
        *(_DWORD *)v118 = v6[82];
        *(_DWORD *)v118 = v6[83];
        *(_DWORD *)v118 = v6[1292];
        *(_DWORD *)v118 = v6[1293];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 2716);
        *(_DWORD *)v118 = v6[1360];
        *(_DWORD *)v118 = v6[1361];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 682);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 2732);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 2733);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 2734);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 684);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 685);
        *(_DWORD *)v118 = (__int16)v6[1372];
        *(_DWORD *)v118 = v6[1373];
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v118);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (v117 >= 0)
          v28 = __str;
        else
          v28 = *(char **)__str;
        NamedValue::NamedValue((NamedValue *)v115, "lastFocusingMethod", v28, 0);
        if (v117 < 0)
          operator delete(*(void **)__str);
        NamedValues::push_back(&v107, (const void **)v115);
        NamedValue::~NamedValue((NamedValue *)v115);
        *(double *)v118 = v106;
        *(_QWORD *)&v118[*(_QWORD *)(*(_QWORD *)&v106 - 24)] = v105;
        v29 = MEMORY[0x24BEDB848];
        v119 = v104;
        v120 = MEMORY[0x24BEDB848] + 16;
        if (v122 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B7D8AD8](v123);
        *(_DWORD *)v118 = v6[1390];
        *(_DWORD *)v118 = v6[1391];
        *(_DWORD *)v118 = v6[1392];
        *(_DWORD *)v118 = v6[1393];
        *(_DWORD *)v118 = v6[1394];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 775);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v118);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (v117 >= 0)
          v30 = __str;
        else
          v30 = *(char **)__str;
        NamedValue::NamedValue((NamedValue *)v115, "roiType", v30, 0);
        if (v117 < 0)
          operator delete(*(void **)__str);
        NamedValues::push_back(&v107, (const void **)v115);
        NamedValue::~NamedValue((NamedValue *)v115);
        *(double *)v118 = v106;
        *(_QWORD *)&v118[*(_QWORD *)(*(_QWORD *)&v106 - 24)] = v105;
        v119 = v104;
        v120 = v29 + 16;
        if (v122 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B7D8AD8](v123);
        NamedValues::~NamedValues((NamedValues *)v114);
        v26 = "Shared Auto Focus";
        goto LABEL_118;
      case 4:
        LOWORD(v31) = v6[6];
        LOWORD(v32) = v6[7];
        LOWORD(v33) = v6[8];
        LOWORD(v35) = v6[9];
        LOWORD(v36) = v6[10];
        LOWORD(v37) = v6[11];
        LOWORD(v42) = v6[21];
        *(double *)v118 = (double)v42 * 0.0000610351562;
        LOWORD(v43) = v6[22];
        *(double *)v118 = (double)v43 * 0.0000610351562;
        LODWORD(v44) = *((_DWORD *)v6 + 13);
        *(double *)v118 = (double)v44 * 0.000244140625;
        *(_DWORD *)v118 = v6[73];
        *(_DWORD *)v118 = v6[86];
        *(_DWORD *)v118 = v6[87];
        *(_DWORD *)v118 = v6[88];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 178);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 179);
        *(_DWORD *)v118 = v6[90];
        *(_DWORD *)v118 = v6[91];
        *(_DWORD *)v118 = v6[92];
        *(_DWORD *)v118 = v6[93];
        *(_DWORD *)v118 = v6[94];
        *(_DWORD *)v118 = v6[95];
        *(_DWORD *)v118 = v6[96];
        *(_DWORD *)v118 = v6[97];
        *(_DWORD *)v118 = v6[98];
        *(_DWORD *)v118 = v6[99];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 68);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 86);
        LOWORD(v45) = v6[138];
        *(double *)v118 = (double)v45 * 0.0000610351562;
        LOWORD(v46) = v6[139];
        *(double *)v118 = (double)v46 * 0.0000610351562;
        *(_DWORD *)v118 = *((_DWORD *)v6 + 70);
        LODWORD(v47) = *((_DWORD *)v6 + 71);
        LODWORD(v48) = *((_DWORD *)v6 + 72);
        LODWORD(v49) = *((_DWORD *)v6 + 73);
        LODWORD(v51) = *((_DWORD *)v6 + 74);
        LODWORD(v52) = *((_DWORD *)v6 + 75);
        LODWORD(v53) = *((_DWORD *)v6 + 76);
        v26 = "Shared Auto White Balance";
        goto LABEL_118;
      case 5:
        v26 = "Adaptive Tone Curve";
        goto LABEL_118;
      case 6:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = v6[2];
        *(_DWORD *)v118 = v6[3];
        *(_DWORD *)v118 = v6[4];
        *(_DWORD *)v118 = v6[5];
        v26 = "Shared LTM";
        goto LABEL_118;
      case 7:
        LODWORD(v58) = *((_DWORD *)v6 + 5);
        *(double *)v118 = (double)v58 * 0.00390625;
        LODWORD(v59) = *((_DWORD *)v6 + 10);
        *(double *)v118 = (double)v59 * 0.00390625;
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 60);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 61);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 62);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 63);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 64);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 65);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 66);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 67);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 68);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 69);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 70);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 71);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 72);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 73);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 74);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 75);
        *(_DWORD *)v118 = v6[38];
        *(_DWORD *)v118 = v6[39];
        *(_DWORD *)v118 = (__int16)v6[40];
        *(_DWORD *)v118 = v6[41];
        LOWORD(v60) = v6[44];
        LOWORD(v61) = v6[45];
        LOWORD(v62) = v6[46];
        LOWORD(v67) = v6[56];
        *(double *)v118 = (double)v67 * 0.0000610351562;
        LOWORD(v68) = v6[57];
        *(double *)v118 = (double)v68 * 0.0000610351562;
        LOWORD(v69) = v6[58];
        *(double *)v118 = (double)v69 * 0.000244140625;
        LOWORD(v70) = v6[59];
        *(double *)v118 = (double)v70 * 0.000244140625;
        LOWORD(v71) = v6[60];
        *(double *)v118 = (double)v71 * 0.000244140625;
        LOWORD(v72) = v6[61];
        *(double *)v118 = (double)v72 * 0.000244140625;
        LOWORD(v73) = v6[62];
        *(double *)v118 = (double)v73 * 0.000244140625;
        LOWORD(v74) = v6[63];
        *(double *)v118 = (double)v74 * 0.000244140625;
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 128);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 129);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 132);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 133);
        *(_DWORD *)v118 = v6[67];
        *(_DWORD *)v118 = v6[68];
        *(_DWORD *)v118 = v6[69];
        *(_DWORD *)v118 = v6[76];
        *(_DWORD *)v118 = v6[77];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 160);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 161);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 162);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 41);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 44);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 45);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 46);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 47);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 48);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 49);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 50);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 51);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 52);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 53);
        *(_DWORD *)v118 = v6[108];
        *(_DWORD *)v118 = v6[109];
        v26 = "Shared RAW Proc";
        goto LABEL_118;
      case 8:
        *(_DWORD *)v118 = v6[2];
        *(_DWORD *)v118 = v6[275];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 552);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 553);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 554);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 640);
        v26 = "Shared RGB Proc";
        goto LABEL_118;
      case 9:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 2);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 3);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 4);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 5);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 6);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 7);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 8);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 9);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 10);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 11);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 12);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 13);
        *(_DWORD *)v118 = v6[7];
        *(_DWORD *)v118 = v6[8];
        *(_DWORD *)v118 = v6[9];
        *(_DWORD *)v118 = v6[10];
        *(_DWORD *)v118 = v6[11];
        *(_DWORD *)v118 = v6[12];
        *(_DWORD *)v118 = v6[79];
        *(_DWORD *)v118 = v6[80];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 162);
        *(_DWORD *)v118 = v6[82];
        *(_DWORD *)v118 = v6[83];
        *(_DWORD *)v118 = v6[84];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 43);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 44);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 45);
        v26 = "Shared YCC Proc";
        goto LABEL_118;
      case 10:
        *(_DWORD *)v118 = *(unsigned __int8 *)v6;
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 1);
        v26 = "Shared BES Proc";
        goto LABEL_118;
      case 11:
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 164);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 165);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = v6[84];
        *(_DWORD *)v118 = v6[85];
        *(_DWORD *)v118 = v6[86];
        *(_DWORD *)v118 = v6[87];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 166);
        *(_DWORD *)v118 = v6[90];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 182);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 183);
        *(_DWORD *)v118 = v6[94];
        *(_DWORD *)v118 = v6[95];
        *(_DWORD *)v118 = v6[96];
        *(_DWORD *)v118 = v6[97];
        *(_DWORD *)v118 = v6[98];
        *(_DWORD *)v118 = v6[99];
        *(_DWORD *)v118 = v6[100];
        *(_DWORD *)v118 = v6[101];
        LOWORD(v79) = v6[106];
        LOWORD(v80) = v6[107];
        LOWORD(v81) = v6[108];
        LOWORD(v83) = v6[109];
        LOWORD(v84) = v6[110];
        LOWORD(v85) = v6[111];
        *(_DWORD *)v118 = v6[112];
        *(_DWORD *)v118 = v6[113];
        *(_DWORD *)v118 = v6[118];
        *(_DWORD *)v118 = v6[119];
        *(_DWORD *)v118 = v6[120];
        *(_DWORD *)v118 = v6[121];
        *(_DWORD *)v118 = v6[124];
        *(_DWORD *)v118 = v6[125];
        *(_DWORD *)v118 = v6[132];
        *(_DWORD *)v118 = v6[133];
        *(_DWORD *)v118 = v6[134];
        *(_DWORD *)v118 = v6[135];
        *(_DWORD *)v118 = v6[136];
        *(_DWORD *)v118 = v6[137];
        *(_DWORD *)v118 = v6[138];
        *(_DWORD *)v118 = v6[139];
        *(_DWORD *)v118 = v6[260];
        *(_DWORD *)v118 = v6[261];
        *(_DWORD *)v118 = v6[262];
        *(_DWORD *)v118 = v6[263];
        *(_DWORD *)v118 = v6[264];
        *(_DWORD *)v118 = v6[265];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 133);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 134);
        v26 = "Shared Stats";
        goto LABEL_118;
      case 12:
        v26 = "Shared Debug";
        goto LABEL_118;
      case 13:
        v26 = "Shared OIS";
        goto LABEL_118;
      case 14:
        v26 = "Shared FocusPixel";
        goto LABEL_118;
      case 15:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = v6[2];
        *(_DWORD *)v118 = v6[3];
        *(_DWORD *)v118 = v6[4];
        *(_DWORD *)v118 = v6[5];
        v26 = "Shared LocalHist";
        goto LABEL_118;
      case 16:
        v26 = "Shared VIS";
        goto LABEL_118;
      case 17:
        v26 = "Shared TNR";
        goto LABEL_118;
      case 18:
        *(_DWORD *)v118 = (__int16)v6[8];
        *(_DWORD *)v118 = (__int16)v6[9];
        *(_DWORD *)v118 = (__int16)v6[10];
        *(_DWORD *)v118 = (__int16)v6[11];
        *(_DWORD *)v118 = (__int16)v6[12];
        *(_DWORD *)v118 = (__int16)v6[13];
        *(_DWORD *)v118 = (__int16)v6[14];
        *(_DWORD *)v118 = (__int16)v6[15];
        *(_DWORD *)v118 = v6[16];
        *(_DWORD *)v118 = v6[17];
        *(_DWORD *)v118 = v6[28];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 58);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 59);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 60);
        v26 = "Shared System";
        goto LABEL_118;
      case 19:
        *(_DWORD *)v118 = v6[11523];
        *(_DWORD *)v118 = v6[11524];
        *(_DWORD *)v118 = v6[11525];
        *(_DWORD *)v118 = v6[11526];
        *(_DWORD *)v118 = v6[11527];
        *(_DWORD *)v118 = v6[11528];
        *(_DWORD *)v118 = v6[11529];
        *(_DWORD *)v118 = v6[11530];
        *(_DWORD *)v118 = v6[11531];
        v26 = "Shared LTM LUTs";
        goto LABEL_118;
      case 20:
        v26 = "Shared VIS Info";
        goto LABEL_118;
      case 21:
        v26 = "Shared Motion Info";
        goto LABEL_118;
      case 22:
        *(_DWORD *)v118 = *(unsigned __int8 *)v6;
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 1);
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 2);
        v26 = "Shared AF FocusMap";
        goto LABEL_118;
      case 23:
        *(_DWORD *)v118 = *(_DWORD *)v6;
        v26 = "Shared DMA Config";
        goto LABEL_118;
      case 24:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = v6[2];
        *(_DWORD *)v118 = v6[3];
        *(_DWORD *)v118 = v6[4];
        *(_DWORD *)v118 = v6[5];
        *(_DWORD *)v118 = v6[6];
        *(_DWORD *)v118 = v6[7];
        *(_DWORD *)v118 = v6[8];
        *(_DWORD *)v118 = v6[9];
        v26 = "Shared HITH";
        goto LABEL_118;
      case 25:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        v26 = "Shared APS";
        goto LABEL_118;
      case 26:
        v26 = "Shared SideBand";
        goto LABEL_118;
      case 27:
        *(_DWORD *)v118 = *(_DWORD *)v6;
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 4);
        v26 = "Shared VisionProc";
        goto LABEL_118;
      case 28:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = v6[2];
        *(_DWORD *)v118 = v6[3];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 2);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 3);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 4);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 5);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 6);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 7);
        *(double *)v118 = (double)*((int *)v6 + 10) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 11) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 12) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 13) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 14) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 15) * 0.03125;
        v26 = "Shared Projector";
        goto LABEL_118;
      case 29:
        *(_DWORD *)v118 = *(_DWORD *)v6;
        *(_DWORD *)v118 = *((_DWORD *)v6 + 1);
        v26 = "Shared BodyDetector";
        goto LABEL_118;
      case 30:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 5);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 6);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 7);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 8);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 9);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 10);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 11);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 12);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 13);
        *(_DWORD *)v118 = v6[30];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 16);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 17);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 18);
        v26 = "Shared Distortion";
        goto LABEL_118;
      case 31:
        v26 = "BodyDetector Debug";
        goto LABEL_118;
      case 32:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        v26 = "PDE Debug";
        goto LABEL_118;
      case 33:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(double *)v118 = (double)*((int *)v6 + 3) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 4) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 5) * 0.03125;
        *(double *)v118 = (double)*((int *)v6 + 6) * 0.03125;
        *(_DWORD *)v118 = *((_DWORD *)v6 + 7);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 8);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 9);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 10);
        v26 = "Shared Powersupply";
        goto LABEL_118;
      case 34:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 1);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 2);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 3);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 4);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 5);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 6);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 7);
        *(_DWORD *)v118 = v6[16];
        *(_DWORD *)v118 = v6[17];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 9);
        *(_DWORD *)v118 = v6[20];
        *(_DWORD *)v118 = v6[21];
        *(_DWORD *)v118 = v6[22];
        *(_DWORD *)v118 = v6[23];
        *(_DWORD *)v118 = *((unsigned __int8 *)v6 + 51);
        *(_DWORD *)v118 = v6[24];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 13);
        *(_DWORD *)v118 = (__int16)v6[28];
        *(_DWORD *)v118 = v6[29];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 15);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 16);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 17);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 18);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 19);
        *(_DWORD *)v118 = v6[40];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 21);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 22);
        *(_DWORD *)v118 = *((_DWORD *)v6 + 29);
        v26 = "Shared Slave";
        goto LABEL_118;
      case 35:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = *((_DWORD *)v6 + 1);
        v26 = "Shared MasterSlaveAF";
        goto LABEL_118;
      case 36:
        *(_DWORD *)v118 = *v6;
        *(_DWORD *)v118 = v6[1];
        *(_DWORD *)v118 = v6[2];
        *(_DWORD *)v118 = v6[3];
        *(_DWORD *)v118 = v6[4];
        *(_DWORD *)v118 = v6[5];
        v26 = "Shared YCC Histogram";
        goto LABEL_118;
      default:
        goto LABEL_119;
    }
  }
LABEL_121:
  v102 = cf;
  CFRetain(cf);
  NamedValues::~NamedValues((NamedValues *)&v108);
  NamedValues::~NamedValues((NamedValues *)&cf);
  return v102;
}

void sub_23581B9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  NamedValues::~NamedValues((NamedValues *)&a30);
  NamedValues::~NamedValues((NamedValues *)&a17);
  NamedValues::~NamedValues((NamedValues *)&a19);
  NamedValues::~NamedValues((NamedValues *)&a23);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::AppendMetadataList(__CFArray **this, NamedValues *a2, __CFArray **a3, NamedValues *a4)
{
  const void *v5;

  NamedValue::NamedValue((NamedValue *)&v5, (const char *)a2, 0, *a3);
  NamedValues::push_back(this, &v5);
  NamedValue::~NamedValue((NamedValue *)&v5);
}

void sub_23581BCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  NamedValue::~NamedValue((NamedValue *)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<unsigned short>(__CFArray **a1, const char *a2, _WORD *a3, int a4)
{
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const char *p_p;
  uint64_t v12;
  void *__p;
  char v15;
  const void *v16;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  if (a4 == 1)
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 8;
    goto LABEL_11;
  }
  if (a4 != 2)
  {
LABEL_11:
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (*a3)
    v8 = "yes";
  else
    v8 = "no";
  if (*a3)
    v9 = 3;
  else
    v9 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v8, v9);
LABEL_12:
  std::stringbuf::str();
  if (v15 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v16, a2, p_p, 0);
  if (v15 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v16);
  NamedValue::~NamedValue((NamedValue *)&v16);
  v17[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[0] = v12;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v20);
}

void sub_23581BE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<unsigned long long>(__CFArray **a1, const char *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  const char *p_p;
  uint64_t v9;
  void *__p;
  char v12;
  const void *v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a4 == 1)
  {
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v13, a2, p_p, 0);
  if (v12 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v13);
  NamedValue::~NamedValue((NamedValue *)&v13);
  v14[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v9;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v17);
}

void sub_23581C01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<unsigned int>(__CFArray **a1, const char *a2, _DWORD *a3, int a4)
{
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const char *p_p;
  uint64_t v12;
  void *__p;
  char v15;
  const void *v16;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  if (a4 == 1)
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 8;
    goto LABEL_11;
  }
  if (a4 != 2)
  {
LABEL_11:
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (*a3)
    v8 = "yes";
  else
    v8 = "no";
  if (*a3)
    v9 = 3;
  else
    v9 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v8, v9);
LABEL_12:
  std::stringbuf::str();
  if (v15 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v16, a2, p_p, 0);
  if (v15 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v16);
  NamedValue::~NamedValue((NamedValue *)&v16);
  v17[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[0] = v12;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v20);
}

void sub_23581C1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_23581C324(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x23B7D8AD8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B7D8AD8](a1 + 128);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x23B7D8A24](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x23B7D8A30](v13);
  return a1;
}

void sub_23581C4DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x23B7D8A30](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23581C4BCLL);
}

void sub_23581C524(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_23581C658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t `anonymous namespace'::AppendMetadataItem<char const*>(__CFArray **a1, const char *a2, const char **a3)
{
  const char *v6;
  size_t v7;
  const char *p_p;
  uint64_t v9;
  void *__p;
  char v12;
  const void *v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v6 = *a3;
  v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v7);
  std::stringbuf::str();
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v13, a2, p_p, 0);
  if (v12 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v13);
  NamedValue::~NamedValue((NamedValue *)&v13);
  v14[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v9;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v17);
}

void sub_23581C84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<unsigned char>(__CFArray **a1, const char *a2, _BYTE *a3, int a4)
{
  const char *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  const void *v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  if (a4 == 3)
  {
    if (*a3)
      v8 = "on";
    else
      v8 = "off";
    if (*a3)
      v9 = 2;
    else
      v9 = 3;
    goto LABEL_15;
  }
  if (a4 == 2)
  {
    if (*a3)
      v8 = "yes";
    else
      v8 = "no";
    if (*a3)
      v9 = 3;
    else
      v9 = 2;
LABEL_15:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v8, v9);
    goto LABEL_17;
  }
  LOBYTE(__p[0]) = *a3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)__p, 1);
LABEL_17:
  std::stringbuf::str();
  if (v14 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  NamedValue::NamedValue((NamedValue *)&v15, a2, (const char *)v10, 0);
  if (v14 < 0)
    operator delete(__p[0]);
  NamedValues::push_back(a1, &v15);
  NamedValue::~NamedValue((NamedValue *)&v15);
  v16[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17[0] = v11;
  v17[1] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v19);
}

void sub_23581CA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<int>(__CFArray **a1, const char *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  const char *p_p;
  uint64_t v9;
  void *__p;
  char v12;
  const void *v13;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a4 == 1)
  {
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v13, a2, p_p, 0);
  if (v12 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v13);
  NamedValue::~NamedValue((NamedValue *)&v13);
  v14[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[0] = v9;
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v17);
}

void sub_23581CB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<double>(__CFArray **a1, const char *a2)
{
  const char *p_p;
  uint64_t v5;
  void *__p;
  char v8;
  const void *v9;
  _QWORD v10[13];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v8 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v9, a2, p_p, 0);
  if (v8 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v9);
  NamedValue::~NamedValue((NamedValue *)&v9);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[2] = v5;
  v10[3] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v12);
}

void sub_23581CCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<short>(__CFArray **a1, const char *a2, _WORD *a3, int a4)
{
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const char *p_p;
  uint64_t v12;
  void *__p;
  char v15;
  const void *v16;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  if (a4 == 1)
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 8;
    goto LABEL_11;
  }
  if (a4 != 2)
  {
LABEL_11:
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (*a3)
    v8 = "yes";
  else
    v8 = "no";
  if (*a3)
    v9 = 3;
  else
    v9 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v8, v9);
LABEL_12:
  std::stringbuf::str();
  if (v15 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v16, a2, p_p, 0);
  if (v15 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v16);
  NamedValue::~NamedValue((NamedValue *)&v16);
  v17[0] = *MEMORY[0x24BEDB7F0];
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[0] = v12;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v20);
}

void sub_23581CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem<char [4]>(__CFArray **a1, const char *a2)
{
  const char *p_p;
  uint64_t v5;
  void *__p;
  char v8;
  const void *v9;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"...", 3);
  std::stringbuf::str();
  if (v8 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v9, a2, p_p, 0);
  if (v8 < 0)
    operator delete(__p);
  NamedValues::push_back(a1, &v9);
  NamedValue::~NamedValue((NamedValue *)&v9);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[0] = v5;
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v13);
}

void sub_23581CFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AppendMetadataItem(__CFArray **this, NamedValues *a2, const char *a3, double a4, double a5, double a6)
{
  _QWORD *v8;
  _QWORD *v9;
  const char *p_p;
  uint64_t v11;
  void *__p;
  char v14;
  const void *v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  *(_QWORD *)((char *)&v17[2] + *(_QWORD *)(v17[0] - 24)) = 5;
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v14 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  NamedValue::NamedValue((NamedValue *)&v15, (const char *)a2, p_p, 0);
  if (v14 < 0)
    operator delete(__p);
  NamedValues::push_back(this, &v15);
  NamedValue::~NamedValue((NamedValue *)&v15);
  v16[0] = *MEMORY[0x24BEDB7F0];
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17[0] = v11;
  v17[1] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B7D8AD8](&v19);
}

void sub_23581D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  NamedValue::~NamedValue((NamedValue *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

CFDictionaryRef CreateNamedValue(const char *cStr, const char *a2, __CFArray *a3)
{
  CFAllocatorRef *v5;
  unsigned int v6;
  CFDictionaryRef v7;
  __int16 v9;
  void *values;
  CFTypeRef cf;
  uint64_t v12;
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x24BDAC8D0];
  memset(keys, 0, 24);
  values = 0;
  cf = 0;
  v12 = 0;
  v9 = 0;
  v5 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (cStr)
  {
    keys[0] = CFSTR("Name");
    values = (void *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
    v6 = 1;
    LOBYTE(v9) = 1;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = 0;
  if (a2)
  {
LABEL_3:
    keys[v6] = CFSTR("Value");
    *(&values + v6) = (void *)CFStringCreateWithCString(*v5, a2, 0x8000100u);
    *(_BYTE *)((unint64_t)&v9 | v6++) = 1;
  }
LABEL_4:
  if (a3)
  {
    keys[v6] = CFSTR("List");
    *(&values + v6++) = a3;
  }
  else if (!v6)
  {
    return 0;
  }
  v7 = CFDictionaryCreate(*v5, (const void **)keys, (const void **)&values, v6, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if ((_BYTE)v9)
    CFRelease(values);
  if (HIBYTE(v9))
    CFRelease(cf);
  return v7;
}

void ReleaseNamedValue(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

const __CFDictionary *Name(const __CFDictionary *result)
{
  void *value;

  value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, CFSTR("Name"), (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

const __CFDictionary *Value(const __CFDictionary *result)
{
  void *value;

  value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, CFSTR("Value"), (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

const __CFDictionary *List(const __CFDictionary *result)
{
  void *value;

  value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, CFSTR("List"), (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

CFMutableArrayRef CreateNamedValues(void)
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
}

void ReleaseNamedValues(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void ClearNamedValues(CFMutableArrayRef theArray)
{
  if (theArray)
    CFArrayRemoveAllValues(theArray);
}

void AppendNamedValue(CFMutableArrayRef theArray, const void *value)
{
  if (theArray)
    CFArrayAppendValue(theArray, value);
}

const __CFArray *CountNamedValues(const __CFArray *theArray)
{
  if (theArray)
    return (const __CFArray *)CFArrayGetCount(theArray);
  return theArray;
}

const __CFArray *GetNamedValue(const __CFArray *result, int a2)
{
  if (result)
    return (const __CFArray *)CFArrayGetValueAtIndex(result, a2);
  return result;
}

void NamedValue::NamedValue(NamedValue *this)
{
  *(_QWORD *)this = 0;
}

{
  *(_QWORD *)this = 0;
}

void NamedValue::NamedValue(NamedValue *this, const char *a2, const char *a3, __CFArray *a4)
{
  *(_QWORD *)this = 0;
  NamedValue::Set((const void **)this, a2, a3, a4);
}

{
  *(_QWORD *)this = 0;
  NamedValue::Set((const void **)this, a2, a3, a4);
}

CFDictionaryRef NamedValue::Set(const void **this, const char *cStr, const char *a3, __CFArray *a4)
{
  const void *v8;
  CFDictionaryRef result;

  v8 = *this;
  if (v8)
    CFRelease(v8);
  result = CreateNamedValue(cStr, a3, a4);
  *this = result;
  return result;
}

void NamedValue::~NamedValue(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void NamedValue::Name(Name *this)
{
  const __CFDictionary *v1;
  void *value;

  v1 = *(const __CFDictionary **)this;
  value = 0;
  if (v1)
    CFDictionaryGetValueIfPresent(v1, CFSTR("Name"), (const void **)&value);
}

const __CFDictionary *NamedValue::Value(const __CFDictionary **this)
{
  const __CFDictionary *result;
  void *value;

  result = *this;
  value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, CFSTR("Value"), (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

const __CFDictionary *NamedValue::List(const __CFDictionary **this)
{
  const __CFDictionary *result;
  void *value;

  result = *this;
  value = 0;
  if (result)
  {
    CFDictionaryGetValueIfPresent(result, CFSTR("List"), (const void **)&value);
    return (const __CFDictionary *)value;
  }
  return result;
}

void NamedValues::NamedValues(NamedValues *this)
{
  *(_QWORD *)this = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
}

{
  *(_QWORD *)this = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
}

void NamedValues::~NamedValues(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void NamedValues::push_back(__CFArray **this, const void **a2)
{
  __CFArray *v2;

  v2 = *this;
  if (v2)
    CFArrayAppendValue(v2, *a2);
}

const __CFArray *NamedValues::size(const __CFArray **this)
{
  const __CFArray *result;

  result = *this;
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

void NamedValues::clear(__CFArray **this)
{
  __CFArray *v1;

  v1 = *this;
  if (v1)
    CFArrayRemoveAllValues(v1);
}

id *H9ISPDisplayStrobePrepare(void)
{
  id *v0;
  int v1;
  FILE **v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  id v11;
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  v0 = (id *)malloc_type_calloc(1uLL, 0x20uLL, 0x8004018A671A6uLL);
  if (v0)
  {
    objc_msgSend(MEMORY[0x24BDE57D8], "begin");
    objc_msgSend(MEMORY[0x24BDE57D8], "setValue:forKey:", *MEMORY[0x24BDBD270], *MEMORY[0x24BDE5DF0]);
    v1 = 0;
    v2 = (FILE **)MEMORY[0x24BDAC8D8];
    while (1)
    {
      v3 = objc_msgSend(MEMORY[0x24BDE5660], "mainDisplay");
      v0[1] = (id)v3;
      if (v3)
        break;
      fprintf(*v2, "warning: display was expected, but was not found.  Retrying main display, attempt=%d \n", v1);
      usleep(0x7A120u);
      if (++v1 == 10)
      {
        if (!v0[1])
        {
          fwrite("warning: display was expected, but was not found.\n", 0x32uLL, 1uLL, *v2);
          objc_msgSend(MEMORY[0x24BDE57D8], "commit");
          free(v0);
          return 0;
        }
        break;
      }
    }
    v4 = (void *)objc_msgSend(MEMORY[0x24BDE56D0], "layer");
    v0[2] = v4;
    objc_msgSend(v0[1], "bounds");
    objc_msgSend(v4, "setFrame:");
    v13[0] = *MEMORY[0x24BDE58B0];
    v5 = objc_msgSend(v0[1], "name");
    v6 = *MEMORY[0x24BDE58B8];
    v14[0] = v5;
    v14[1] = MEMORY[0x24BDBD1C8];
    v7 = *MEMORY[0x24BDE58D8];
    v13[1] = v6;
    v13[2] = v7;
    v14[2] = MEMORY[0x24BDBD1C8];
    v8 = objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
    v9 = (id)objc_msgSend(MEMORY[0x24BDE57F8], "contextWithOptions:", v8);
    *v0 = v9;
    objc_msgSend(v9, "setLayer:", v0[2]);
    LODWORD(v10) = 2139095039;
    objc_msgSend(*v0, "setLevel:", v10);
    objc_msgSend(MEMORY[0x24BDE57D8], "commit");
    v11 = objc_alloc_init(MEMORY[0x24BE1A2D0]);
    v0[3] = v11;
    if (v11)
      return v0;
    fwrite("error: brightness system client initialization failed.\n", 0x37uLL, 1uLL, *v2);
    H9ISPDisplayStrobeDispose(v0);
    return 0;
  }
  return v0;
}

uint64_t H9ISPDisplayStrobeDispose(void **a1)
{
  void *v2;
  void *v3;

  if (!a1)
    return 3758097090;
  v2 = *a1;
  if (v2)
  {
    objc_msgSend(v2, "dealloc");
    *a1 = 0;
  }
  v3 = a1[3];
  if (v3)
    objc_msgSend(v3, "dealloc");
  free(a1);
  return 0;
}

uint64_t H9ISPDisplayStrobeSetScreenBrightness(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = 3758097090;
  if (a1)
  {
    if (a2 == 1)
    {
      v3 = *(void **)(a1 + 24);
      if (v3)
      {
        v4 = &unk_2506DEC48;
LABEL_8:
        if (objc_msgSend(v3, "setProperty:forKey:", v4, CFSTR("PreStrobe")))
          return 0;
        else
          return 3758097090;
      }
    }
    else
    {
      if (a2)
        return v2;
      v3 = *(void **)(a1 + 24);
      if (v3)
      {
        v4 = &unk_2506DEC60;
        goto LABEL_8;
      }
    }
    return 3758097112;
  }
  return v2;
}

uint64_t H9ISPDisplayStrobeSetScreenColor(uint64_t a1, const CGFloat *a2)
{
  void *v4;
  uint64_t v5;
  CGColorSpace *DeviceRGB;
  CGColorRef v8;

  if (!a1)
    return 3758097090;
  objc_msgSend(MEMORY[0x24BDE57D8], "begin");
  objc_msgSend(MEMORY[0x24BDE57D8], "setValue:forKey:", *MEMORY[0x24BDBD270], *MEMORY[0x24BDE5DF0]);
  v4 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  if (!_AXSInvertColorsEnabled() && !_AXSClassicInvertColorsEnabled())
  {
    v4 = 0;
    goto LABEL_8;
  }
  v5 = objc_msgSend(MEMORY[0x24BDE56B0], "filterWithType:", *MEMORY[0x24BDE59F0]);
  if (v5)
  {
    objc_msgSend(v4, "addObject:", v5);
LABEL_8:
    objc_msgSend(*(id *)(a1 + 16), "setFilters:", v4);
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v8 = CGColorCreate(DeviceRGB, a2);
  objc_msgSend(*(id *)(a1 + 16), "setContents:", 0);
  objc_msgSend(*(id *)(a1 + 16), "setBackgroundColor:", v8);
  CFRelease(v8);
  CFRelease(DeviceRGB);
  objc_msgSend(MEMORY[0x24BDE57D8], "commit");
  return 0;
}

double linearInterpolate(double *a1, double *a2, double a3)
{
  return ((*a2 - a3) * a1[1] + (a3 - *a1) * a2[1]) / (a3 - *a1 + *a2 - a3);
}

double bilinearInterpolate(double *a1, double *a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = a3 - *a2;
  v5 = a2[2] - a3;
  return ((v5 * a1[1] + v4 * a1[3]) / (v4 + v5) * (a2[3] - a4) + (a4 - a2[1]) * ((v5 * *a1 + v4 * a1[2]) / (v4 + v5)))
       / (a4 - a2[1] + a2[3] - a4);
}

double InitCubicPoly(double *a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double result;

  *a1 = a2;
  a1[1] = a4;
  v5 = a3 * 3.0 + a2 * -3.0 + a4 * -2.0 - a5;
  result = a3 * -2.0 + a2 * 2.0 + a4 + a5;
  a1[2] = v5;
  a1[3] = result;
  return result;
}

double InitNonuniformCatmullRom(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  float v10;
  float v11;
  double v12;
  double v13;
  double v14;
  double result;

  v8 = (a3 - a2) / a6 - (a4 - a2) / (a6 + a7);
  v9 = (a4 - a3) / a7;
  *(float *)&v8 = v9 + v8;
  v10 = (a5 - a4) / a8 + v9 - (a5 - a3) / (a7 + a8);
  *(float *)&v8 = *(float *)&v8 * a7;
  v11 = v10 * a7;
  v12 = *(float *)&v8;
  v13 = v11;
  *a1 = a3;
  a1[1] = v12;
  v14 = a4 * 3.0 + a3 * -3.0 + v12 * -2.0 - v13;
  result = a4 * -2.0 + a3 * 2.0 + v12 + v13;
  a1[2] = v14;
  a1[3] = result;
  return result;
}

double cubicInterpolateNonuniform(double *a1, double *a2, double a3)
{
  double v5[4];

  InitNonuniformCatmullRom(v5, *a1, a1[1], a1[2], a1[3], a2[1] - *a2, a2[2] - a2[1], a2[3] - a2[2]);
  return v5[0] + a3 * (v5[1] + a3 * (v5[2] + v5[3] * a3));
}

void bicubicInterpolateNonuniform(double (*a1)[4], double *a2, double *a3, double a4, double a5)
{
  double v10[5];

  v10[4] = *(double *)MEMORY[0x24BDAC8D0];
  v10[0] = cubicInterpolateNonuniform((double *)a1, a3, a5);
  v10[1] = cubicInterpolateNonuniform(&(*a1)[4], a3, a5);
  v10[2] = cubicInterpolateNonuniform(&(*a1)[8], a3, a5);
  v10[3] = cubicInterpolateNonuniform(&(*a1)[12], a3, a5);
  cubicInterpolateNonuniform(v10, a2, a4);
}

void ComputeIdealLs(unsigned __int16 *a1, long double *a2, unsigned int a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  double v12;
  double v13;
  int v14;
  double v15;
  long double v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  double v21;
  long double v22;
  uint64_t v23;
  long double *v24;
  double v25;
  long double v26;
  long double v27;

  v3 = a1[7];
  if (a1[7])
  {
    v6 = 0;
    v7 = a1[6];
    v8 = (double)(*a1 + 1) * 0.5;
    v9 = (double)(a1[1] + 1) * 0.5;
    v10 = 0.0;
    do
    {
      if (a1[6])
      {
        v11 = a1[4];
        v12 = (double)(a1[5] + v6 * a1[3]) - v9;
        v13 = v12 * v12;
        v14 = a1[6];
        do
        {
          v15 = sqrt(((double)v11 - v8) * ((double)v11 - v8) + v13);
          if (v15 > v10)
            v10 = v15;
          v11 += a1[2];
          --v14;
        }
        while (v14);
      }
      ++v6;
    }
    while (v6 != (_DWORD)v3);
    v16 = pow((double)a3 / 100.0, 0.25);
    v17 = 0;
    do
    {
      if ((_DWORD)v7)
      {
        v18 = a1[4];
        v19 = a1[2];
        v20 = a1[5] + v17 * a1[3];
        v21 = ((double)v20 - v9) * ((double)v20 - v9);
        v22 = acos(v16);
        v23 = v7;
        v24 = a2;
        v25 = v10 / tan(v22);
        do
        {
          v26 = atan(sqrt(((double)v18 - v8) * ((double)v18 - v8) + v21) / v25);
          v27 = cos(v26);
          *v24++ = pow(v27, 4.0);
          v18 += v19;
          --v23;
        }
        while (v23);
      }
      ++v17;
      a2 += v7;
    }
    while (v17 != v3);
  }
}

void LSCInterpolateNvm(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  signed int v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  _BYTE *v41;
  double *v42;
  uint64_t v43;
  double v44;
  _BYTE *v45;
  double v46;
  float v47;
  double v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  double v55;
  double v56;
  double v57;
  unsigned int v58;
  double v59;
  double v60;
  float v61;
  float v62;
  float v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  double v79[4];
  double v80[4];
  double v81[18];

  v81[16] = *(double *)MEMORY[0x24BDAC8D0];
  v71 = a3[7];
  if (a3[7])
  {
    v70 = a3[3];
    v15 = a3[2];
    v69 = a3[5];
    v16 = a4 + 56;
    v17 = a4 + 124;
    v18 = a3[4];
    v19 = a3[6];
    v75 = v18;
    v76 = a2 - 2;
    v74 = v19;
    v72 = 0;
    v73 = v15;
    while (!(_DWORD)v19)
    {
LABEL_43:
      if (++v72 == v71)
        return;
    }
    v20 = 0;
    v21 = (double)(v69 + v72 * v70);
    v22 = *(unsigned __int16 *)(a4 + 40);
    v23 = *(unsigned __int16 *)(a4 + 42);
    v24 = v72 * v19;
    while (1)
    {
      v25 = (double)(v18 + v20 * v15);
      if ((_DWORD)v22)
      {
        v26 = 0;
        LOWORD(a7) = *(_WORD *)a4;
        *(float *)&a7 = (float)LODWORD(a7);
        while (v25 >= (float)(*(float *)(v16 + 4 * v26) * *(float *)&a7))
        {
          if (v22 == ++v26)
          {
            LOWORD(v26) = v22;
            if ((_DWORD)v23)
              goto LABEL_12;
            goto LABEL_17;
          }
        }
        if ((_DWORD)v23)
          goto LABEL_12;
      }
      else
      {
        LOWORD(v26) = 0;
        if ((_DWORD)v23)
        {
LABEL_12:
          v27 = 0;
          LOWORD(a7) = *(_WORD *)(a4 + 2);
          *(float *)&a7 = (float)LODWORD(a7);
          while (v21 >= (float)(*(float *)(v17 + 4 * v27) * *(float *)&a7))
          {
            if (v23 == ++v27)
            {
              v28 = v23;
              goto LABEL_19;
            }
          }
          v28 = v27;
          goto LABEL_19;
        }
      }
LABEL_17:
      v28 = 0;
LABEL_19:
      v29 = (unsigned __int16)v26;
      v30 = (unsigned __int16)v26 - 1;
      v31 = (double)(int)v30;
      v32 = v28;
      v33 = v28 - 1;
      v34 = (double)(int)v33;
      if (v29 < 2
        || (v35 = v32 - 2, v32 < 2)
        || ((double)v22 + -3.0 >= v31 ? (v36 = a5 == 0) : (v36 = 1),
            !v36 ? (v37 = (double)v23 + -3.0 < v34) : (v37 = 1),
            v37))
      {
        if (!(_DWORD)v29)
          v31 = 0.0;
        if (!v32)
          v34 = 0.0;
        if (v31 >= (double)((int)v22 - 2))
          v31 = (double)((int)v22 - 2);
        if (v34 >= (double)((int)v23 - 2))
          v34 = (double)((int)v23 - 2);
        v52 = vcvtmd_u64_f64(v31);
        v53 = vcvtmd_u64_f64(v34);
        v54 = v52 + v53 * v22;
        LOBYTE(v31) = *(_BYTE *)(a2 + v54);
        v55 = *(double *)(a4 + 48);
        v56 = (double)*(unint64_t *)&v31 / v55;
        LOBYTE(a9) = *(_BYTE *)(a2 + v54 + 1);
        v57 = (double)*(unint64_t *)&a9 / v55;
        v58 = v52 + (v53 + 1) * v22;
        LOBYTE(a10) = *(_BYTE *)(a2 + v58);
        LOBYTE(a11) = *(_BYTE *)(a2 + v58 + 1);
        v59 = (double)*(unint64_t *)&a10 / v55;
        v60 = (double)*(unint64_t *)&a11 / v55;
        LOWORD(a12) = *(_WORD *)a4;
        v61 = (float)LODWORD(a12);
        v62 = roundf(*(float *)(a4 + 56 + 4 * v52) * v61);
        LOWORD(v12) = *(_WORD *)(a4 + 2);
        v63 = (float)LODWORD(v12);
        v64 = roundf(*(float *)(a4 + 124 + 4 * v53) * v63);
        a12 = roundf(*(float *)(a4 + 56 + 4 * (v52 + 1)) * v61);
        v12 = roundf(*(float *)(a4 + 124 + 4 * (v53 + 1)) * v63);
        a11 = v25 - v62;
        v65 = a12 - v25;
        v66 = v59 * v65 + a11 * v60;
        a10 = a11 + v65;
        v67 = v66 / (a11 + v65);
        v68 = (v56 * v65 + a11 * v57) / (a11 + v65);
        a9 = v12 - v21;
        a7 = v21 - v64 + v12 - v21;
        *(double *)(a1 + 8 * (v24 + v20)) = ((v12 - v21) * v68 + (v21 - v64) * v67) / a7;
      }
      else
      {
        v38 = 0;
        v39 = *(double *)(a4 + 48);
        v40 = v35;
        v41 = (_BYTE *)(v76 + v29 + (int)v22 * (uint64_t)v35);
        v42 = v81;
        do
        {
          v43 = 0;
          v80[v38] = *(float *)(a4 + 4 * (v38 + (int)v29 - 2) + 56);
          v44 = *(float *)(a4 + 4 * (v38 + v40) + 124);
          v79[v38] = v44;
          v45 = v41;
          do
          {
            LOBYTE(v44) = *v45;
            v44 = (double)*(unint64_t *)&v44 / v39;
            v42[v43] = v44;
            v45 += v22;
            ++v43;
          }
          while (v43 != 4);
          ++v38;
          ++v41;
          v42 += 4;
        }
        while (v38 != 4);
        LOWORD(v39) = *(_WORD *)a4;
        v46 = v25 / (double)*(unint64_t *)&v39;
        v47 = *(float *)(a4 + 56 + 4 * v30);
        v48 = v46 - v47;
        *(double *)&v49 = (float)(*(float *)(a4 + 56 + 4 * v29) - v47);
        v50 = v48 / *(double *)&v49;
        LOWORD(v49) = *(_WORD *)(a4 + 2);
        bicubicInterpolateNonuniform((double (*)[4])v81, v80, v79, v50, (v21 / (double)v49 - *(float *)(a4 + 124 + 4 * v33))/ (float)(*(float *)(a4 + 124 + 4 * v32) - *(float *)(a4 + 124 + 4 * v33)));
        *(_QWORD *)(a1 + 8 * (v24 + v20)) = v51;
        v15 = v73;
        v19 = v74;
        v18 = v75;
      }
      if (++v20 == v19)
        goto LABEL_43;
    }
  }
}

uint64_t LSCComputeGain(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  unsigned int v7;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int i;
  uint64_t v12;
  int v13;

  v7 = *(unsigned __int16 *)(a5 + 14);
  if (*(_WORD *)(a5 + 14))
  {
    v8 = 0;
    v9 = 0;
    v10 = *(unsigned __int16 *)(a5 + 12);
    do
    {
      if (v10)
      {
        for (i = 0; i < v10; ++i)
        {
          v12 = i + v9 * v10;
          v13 = 1 << a6;
          if (a7 != 2)
            LOWORD(v13) = llround(*(double *)(a3 + 8 * v12) / *(double *)(a4 + 8 * v12) * (double)(1 << a6));
          *(_WORD *)(result + 2 * v12) = v13;
          if ((unsigned __int16)v13 > v8)
            v8 = v13;
          v10 = *(unsigned __int16 *)(a5 + 12);
        }
        v7 = *(unsigned __int16 *)(a5 + 14);
      }
      ++v9;
    }
    while (v9 < v7);
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t LSCComputeFromNVMApple(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int32x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  long double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t result;
  _WORD v35[4];
  int64x2_t v36;
  float64x2_t v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  _DWORD v41[30];
  unsigned __int16 v42[2];
  int v43;
  int v44;
  __int16 v45;
  __int16 v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned __int16 *)(a1 + 14) >> 1;
  v42[0] = *(_WORD *)(a1 + 14) >> 1;
  v10 = *(unsigned __int16 *)(a1 + 16) >> 1;
  v42[1] = *(_WORD *)(a1 + 16) >> 1;
  if (a3)
  {
    v11 = 0;
    do
    {
      v41[v11] = *(_DWORD *)(a7 + 4 * v11);
      ++v11;
    }
    while (a3 > v11);
  }
  if (a4)
  {
    v12 = 0;
    do
    {
      v41[v12 + 17] = *(_DWORD *)(a8 + 4 * v12);
      ++v12;
    }
    while (a4 > v12);
  }
  v13 = 0;
  v14 = 0;
  v47[0] = a1 + 18;
  v47[1] = a1 + 36;
  v47[2] = a1 + 54;
  v47[3] = a1 + 72;
  v35[0] = v9;
  v35[1] = v10;
  v36 = vdupq_n_s64(0x3F847AE147AE147BuLL);
  v38 = a3;
  v39 = a4;
  v15 = vadd_s32((int32x2_t)__PAIR64__(a4, a3), (int32x2_t)-1);
  v16.i64[0] = v15.i32[0];
  v16.i64[1] = v15.i32[1];
  v37 = vdivq_f64((float64x2_t)vdupq_n_s64(0x3FEF5C28F5C28F5CuLL), vcvtq_f64_s64(v16));
  v40 = 0x406F400000000000;
  v17 = a1 + 92;
  v18 = a4 * a3;
  do
  {
    v19 = v47[v14];
    v20 = *(_DWORD *)(v19 + 10);
    v43 = *(_DWORD *)(v19 + 2);
    v44 = v20;
    v45 = *(_WORD *)(v19 + 14);
    v46 = *(_WORD *)(v19 + 16);
    v21 = (long double *)operator new[]();
    v22 = operator new[]();
    v23 = operator new[]();
    v24 = *(unsigned __int16 *)(v19 + 6);
    if (a5 != 2)
    {
      ComputeIdealLs(v42, v21, a6);
      LSCInterpolateNvm(v22, a2 + v13, v42, (uint64_t)v35, a5, v25, v26, v27, v28, v29, v30, v31);
    }
    LSCComputeGain(v17 + 2 * v24, (unsigned __int16 *)v19, (uint64_t)v21, v22, (uint64_t)v42, 13, a5);
    MEMORY[0x23B7D8AF0](v21, 0x1000C8000313F17);
    MEMORY[0x23B7D8AF0](v22, 0x1000C8000313F17);
    result = MEMORY[0x23B7D8AF0](v23, 0x1000C80BDFB0063);
    ++v14;
    v13 += v18;
  }
  while (v14 != 4);
  return result;
}

_WORD *flip(_WORD *result, int a2, int a3)
{
  int64_t v3;
  unint64_t v4;
  __int16 v5;
  BOOL v6;

  v3 = ((unint64_t)(a2 * a3) << 32) - 0x100000000;
  if (v3 >= 1)
  {
    v4 = (unint64_t)&result[HIDWORD(v3) - 1];
    do
    {
      v5 = *(_WORD *)(v4 + 2);
      *(_WORD *)(v4 + 2) = *result;
      *result++ = v5;
      v6 = v4 > (unint64_t)result;
      v4 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t LSCFlipApple(uint64_t result)
{
  uint64_t v1;
  unsigned __int16 *v2;
  int64_t v3;
  uint64_t v4;
  _WORD *v5;
  unint64_t v6;
  __int16 v7;
  BOOL v8;
  _QWORD v9[5];

  v1 = 0;
  v9[4] = *MEMORY[0x24BDAC8D0];
  v9[0] = result + 18;
  v9[1] = result + 36;
  v9[2] = result + 54;
  v9[3] = result + 72;
  do
  {
    v2 = (unsigned __int16 *)v9[v1];
    v3 = ((unint64_t)(v2[7] * v2[8]) << 32) - 0x100000000;
    if (v3 >= 1)
    {
      v4 = v2[3];
      v5 = (_WORD *)(result + 92 + 2 * v4);
      v6 = result + 90 + (((unint64_t)v3 >> 31) & 0x1FFFFFFFELL) + 2 * v4;
      do
      {
        v7 = *(_WORD *)(v6 + 2);
        *(_WORD *)(v6 + 2) = *v5;
        *v5++ = v7;
        v8 = v6 > (unint64_t)v5;
        v6 -= 2;
      }
      while (v8);
    }
    ++v1;
  }
  while (v1 != 4);
  return result;
}

void ALS2RotateApple(uint64_t a1)
{
  unsigned __int16 *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v2 = (unsigned __int16 *)(a1 + 26760);
  v3 = (void *)operator new[]();
  v4 = 0;
  v5 = *v2;
  v6 = v2[1];
  while (1)
  {
    memcpy(v3, (const void *)(a1 + 6370 * v4 + 414), 0x18E2uLL);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = v6 * v5 - 1;
      do
      {
        if ((_DWORD)v5)
        {
          v10 = v5;
          v11 = v9;
          do
          {
            v12 = (v8 + 1);
            *(_WORD *)(a1 + 6370 * v4 + 2 * v11-- + 414) = *((_WORD *)v3 + v8);
            LODWORD(v8) = v8 + 1;
            --v10;
          }
          while (v10);
        }
        else
        {
          v12 = v8;
        }
        ++v7;
        v9 -= v5;
        v8 = v12;
      }
      while (v7 != v6);
      memcpy(v3, (const void *)(a1 + 6370 * v4 + 13538), 0x18E2uLL);
      v13 = 0;
      v14 = 0;
      v15 = v6 * v5 - 1;
      do
      {
        if ((_DWORD)v5)
        {
          v16 = v5;
          v17 = v15;
          do
          {
            v18 = (v14 + 1);
            *(_WORD *)(a1 + 6370 * v4 + 2 * v17-- + 13538) = *((_WORD *)v3 + v14);
            LODWORD(v14) = v14 + 1;
            --v16;
          }
          while (v16);
        }
        else
        {
          v18 = v14;
        }
        ++v13;
        v15 -= v5;
        v14 = v18;
      }
      while (v13 != v6);
    }
    else
    {
      memcpy(v3, (const void *)(a1 + 6370 * v4 + 13538), 0x18E2uLL);
    }
    if (++v4 == 2)
      JUMPOUT(0x23B7D8AF0);
  }
}

unint64_t LSCFlipPerModule(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;

  v2 = 0;
  v3 = 0;
  v4 = a1[1] * *a1;
  v5 = (v4 - 1);
  v6 = a2 + v5;
  v7 = a1 + 124;
  v8 = &a1[v5 + 124];
  do
  {
    v9 = v7;
    v10 = v8;
    v11 = a2;
    v12 = v6;
    do
    {
      *(_BYTE *)(v11 + v2) = v10[v2];
      result = v11 + v2 + 1;
      *(_BYTE *)(v12 + v2) = v9[v2];
      --v12;
      ++v11;
      --v10;
      ++v9;
    }
    while (v12 + v2 >= result);
    ++v3;
    v2 += v4;
  }
  while (v3 != 4);
  return result;
}

_WORD *averageGreen(_WORD *result, unsigned __int16 *a2, int a3, int a4)
{
  int v4;
  unsigned int v5;

  if (a4 * a3)
  {
    v4 = 0;
    do
    {
      v5 = (*a2 + (unsigned __int16)*result) >> 1;
      *result++ = v5;
      *a2++ = v5;
      ++v4;
    }
    while (a4 * a3 > (unsigned __int16)v4);
  }
  return result;
}

unsigned __int16 *LSCAverageGreenApple(unsigned __int16 *result)
{
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned int v7;

  v1 = result[16];
  if (v1 != result[43])
    LSCAverageGreenApple();
  v2 = result[17];
  if (v2 != result[44])
    LSCAverageGreenApple();
  v3 = v2 * v1;
  if (v3)
  {
    v4 = 0;
    v5 = &result[result[39] + 46];
    v6 = &result[result[12] + 46];
    do
    {
      v7 = (*v5 + *v6) >> 1;
      *v6++ = v7;
      *v5++ = v7;
      ++v4;
    }
    while (v3 > (unsigned __int16)v4);
  }
  return result;
}

uint64_t LSCComputeSNFRadialGains(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  double v22;
  uint64_t result;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double v29;
  unsigned int v30;
  double v31;
  unsigned int v32;
  double v33;
  unsigned int v34;
  _WORD *v35;
  _WORD *v36;
  unsigned int v37;
  double v38;
  double v39;
  double v40;
  uint64_t i;
  double v42;
  _QWORD v43[4];
  double v44[257];
  _QWORD v45[5];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  LOWORD(a3) = *(_WORD *)(a2 + 14);
  *(double *)&v5 = (double)*(unint64_t *)&a3;
  v6 = *(double *)&v5 * 0.5;
  LOWORD(v5) = *(_WORD *)(a2 + 16);
  v7 = (double)v5 * 0.5;
  memset(v45, 0, 32);
  bzero(v44, 0x808uLL);
  v8 = 0;
  v9 = v6;
  v43[0] = a2 + 18;
  v43[1] = a2 + 36;
  v43[2] = a2 + 54;
  v43[3] = a2 + 72;
  do
  {
    v45[v8] = a2 + 92 + 2 * *(unsigned __int16 *)(v43[v8] + 6);
    ++v8;
  }
  while (v8 != 4);
  v10 = v7;
  v11 = sqrt(v9 * v9 + v10 * v10);
  v12 = log2f(v11 * 0.0039062);
  v16 = 0;
  *(_WORD *)(a1 + 12) = vcvtps_s32_f32(v12);
  do
  {
    v17 = 0;
    v18 = (unsigned __int16 *)v43[v16];
    v19 = v18[1];
    v20 = v18[2];
    v21 = v18[7];
    v22 = (double)(v18[8] - 2);
    result = v45[v16];
    do
    {
      v24 = 0;
      v25 = (float)dword_235830E10[v17];
      v26 = (float)dword_235830E20[v17];
      do
      {
        v27 = (float)(v11 * (float)v24) * 0.0039062;
        v28 = (float)(v9 + (float)(v25 * (float)((float)(v9 / v11) * v27))) * 0.5;
        v29 = (float)(v10 + (float)(v26 * (float)((float)(v10 / v11) * v27))) * 0.5;
        if (v28 < 0.0)
          v28 = 0.0;
        if (v29 < 0.0)
          v29 = 0.0;
        v30 = (v29 / (double)v20);
        v31 = (double)(v28 / (double)v19);
        if (v31 >= (double)(v21 - 2))
          v31 = (double)(v21 - 2);
        v32 = v31;
        v33 = (double)v30;
        if ((double)v30 >= v22)
          v33 = v22;
        v34 = v33;
        v35 = (_WORD *)(result + 2 * v33 * v21 + 2 * v32);
        LOWORD(v33) = *v35;
        LOWORD(v13) = v35[1];
        v13 = (float)((float)LODWORD(v13) * 0.00012207);
        v36 = (_WORD *)(result + 2 * (v34 + 1) * v21 + 2 * v32);
        LOWORD(v14) = *v36;
        LOWORD(v15) = v36[1];
        v37 = v32 * v19;
        v38 = v28 - (double)v37;
        v39 = (double)(v19 + v37) - v28;
        v40 = v39 * (float)((float)LODWORD(v14) * 0.00012207) + v38 * (float)((float)LODWORD(v15) * 0.00012207);
        v15 = v38 + v39;
        v14 = v40 / (v38 + v39);
        v44[v24] = v44[v24]
                 + 1.0
                 / sqrt((((double)((v34 + 1) * v20) - v29)* ((v39 * (float)((float)LODWORD(v33) * 0.00012207) + v38 * v13)/ (v38 + v39))+ (v29 - (double)(v34 * v20)) * v14)/ (v29 - (double)(v34 * v20) + (double)((v34 + 1) * v20) - v29));
        ++v24;
      }
      while (v24 != 257);
      ++v17;
    }
    while (v17 != 4);
    ++v16;
  }
  while (v16 != 4);
  for (i = 0; i != 257; ++i)
  {
    v42 = v44[i] * 0.0625;
    v44[i] = v42;
    *(_WORD *)(a1 + 14 + 2 * i) = vcvtd_n_s64_f64(v42, 0xCuLL);
  }
  return result;
}

void H9ISP::InitSupportedMetadataPropertiesDict(CFMutableDictionaryRef *this, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFNumberRef v83;
  CFNumberRef v84;
  CFNumberRef v85;
  CFNumberRef v86;
  CFNumberRef v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  CFNumberRef v91;
  CFNumberRef v92;
  CFNumberRef v93;
  CFNumberRef v94;
  CFNumberRef v95;
  CFNumberRef v96;
  CFNumberRef v97;
  CFNumberRef v98;
  CFNumberRef v99;
  CFNumberRef v100;
  CFNumberRef v101;
  CFNumberRef v102;
  CFNumberRef v103;
  CFNumberRef v104;
  CFNumberRef v105;
  CFNumberRef v106;
  CFNumberRef v107;
  CFNumberRef v108;
  CFNumberRef v109;
  CFNumberRef v110;
  CFNumberRef v111;
  CFNumberRef v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  CFNumberRef v116;
  CFNumberRef v117;
  CFNumberRef v118;
  CFNumberRef v119;
  CFNumberRef v120;
  CFNumberRef v121;
  CFNumberRef v122;
  CFNumberRef v123;
  CFNumberRef v124;
  CFNumberRef v125;
  CFNumberRef v126;
  CFNumberRef v127;
  CFNumberRef v128;
  CFNumberRef v129;
  CFNumberRef v130;
  CFNumberRef v131;
  CFNumberRef v132;
  CFNumberRef v133;
  CFNumberRef v134;
  CFNumberRef v135;
  CFNumberRef v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  CFNumberRef v140;
  CFNumberRef v141;
  CFNumberRef v142;
  CFNumberRef v143;
  CFNumberRef v144;
  CFNumberRef v145;
  CFNumberRef v146;
  CFNumberRef v147;
  CFNumberRef v148;
  CFNumberRef v149;
  CFNumberRef v150;
  CFNumberRef v151;
  CFNumberRef v152;
  CFNumberRef v153;
  CFNumberRef v154;
  CFNumberRef v155;
  CFNumberRef v156;
  CFNumberRef v157;
  CFNumberRef v158;
  CFNumberRef v159;
  CFNumberRef v160;
  CFNumberRef v161;
  CFNumberRef v162;
  CFNumberRef v163;
  CFNumberRef v164;
  CFNumberRef v165;
  CFNumberRef v166;
  CFNumberRef v167;
  CFNumberRef v168;
  CFNumberRef v169;
  CFNumberRef v170;
  CFNumberRef v171;
  CFNumberRef v172;
  CFNumberRef v173;
  CFNumberRef v174;
  CFNumberRef v175;
  CFNumberRef v176;
  CFNumberRef v177;
  CFNumberRef v178;
  CFNumberRef v179;
  CFNumberRef v180;
  CFNumberRef v181;
  CFNumberRef v182;
  CFNumberRef v183;
  CFNumberRef v184;
  CFNumberRef v185;
  CFNumberRef v186;
  CFNumberRef v187;
  CFNumberRef v188;
  CFNumberRef v189;
  CFNumberRef v190;
  CFNumberRef v191;
  CFNumberRef v192;
  CFNumberRef v193;
  CFNumberRef v194;
  CFNumberRef v195;
  CFNumberRef v196;
  CFNumberRef v197;
  CFNumberRef v198;
  CFNumberRef v199;
  CFNumberRef v200;
  CFNumberRef v201;
  CFNumberRef v202;
  CFNumberRef v203;
  CFNumberRef v204;
  CFNumberRef v205;
  CFNumberRef v206;
  CFNumberRef v207;
  CFNumberRef v208;
  CFNumberRef v209;
  CFNumberRef v210;
  CFNumberRef v211;
  CFNumberRef v212;
  CFNumberRef v213;
  CFNumberRef v214;
  CFNumberRef v215;
  CFNumberRef v216;
  CFNumberRef v217;
  CFNumberRef v218;
  CFNumberRef v219;
  CFNumberRef v220;
  CFNumberRef v221;
  CFNumberRef v222;
  CFNumberRef v223;
  CFNumberRef v224;
  CFNumberRef v225;
  CFNumberRef v226;
  CFNumberRef v227;
  CFNumberRef v228;
  CFNumberRef v229;
  CFNumberRef v230;
  CFNumberRef v231;
  CFNumberRef v232;
  CFNumberRef v233;
  CFNumberRef v234;
  CFNumberRef v235;
  CFNumberRef v236;
  CFNumberRef v237;
  CFNumberRef v238;
  CFNumberRef v239;
  CFNumberRef v240;
  CFNumberRef v241;
  CFNumberRef v242;
  CFNumberRef v243;
  CFNumberRef v244;
  CFNumberRef v245;
  CFNumberRef v246;
  CFNumberRef v247;
  CFNumberRef v248;
  CFNumberRef v249;
  CFNumberRef v250;
  CFNumberRef v251;
  CFNumberRef v252;
  CFNumberRef v253;
  CFNumberRef v254;
  CFNumberRef v255;
  CFNumberRef v256;
  CFNumberRef v257;
  CFNumberRef v258;
  CFNumberRef v259;
  CFNumberRef v260;
  CFNumberRef v261;
  CFNumberRef v262;
  CFNumberRef v263;
  CFNumberRef v264;
  CFNumberRef v265;
  CFNumberRef v266;
  CFNumberRef v267;
  CFNumberRef v268;
  CFNumberRef v269;
  CFNumberRef v270;
  CFNumberRef v271;
  CFNumberRef v272;
  CFNumberRef v273;
  CFNumberRef v274;
  CFNumberRef v275;
  CFNumberRef v276;
  CFNumberRef v277;
  CFNumberRef v278;
  CFNumberRef v279;
  CFNumberRef v280;
  CFNumberRef v281;
  CFNumberRef v282;
  CFNumberRef v283;
  int valuePtr;

  if (*this
    || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]), (*this = Mutable) != 0))
  {
    valuePtr = 0;
    v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v4)
    {
      v5 = v4;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D48], v4);
      CFRelease(v5);
    }
    valuePtr = 1;
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10820], v6);
      CFRelease(v7);
    }
    valuePtr = 2;
    v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v8)
    {
      v9 = v8;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B38], v8);
      CFRelease(v9);
    }
    valuePtr = 3;
    v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v10)
    {
      v11 = v10;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DB0], v10);
      CFRelease(v11);
    }
    valuePtr = 4;
    v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v12)
    {
      v13 = v12;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BF0], v12);
      CFRelease(v13);
    }
    valuePtr = 5;
    v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v14)
    {
      v15 = v14;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BE8], v14);
      CFRelease(v15);
    }
    valuePtr = 6;
    v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v16)
    {
      v17 = v16;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D80], v16);
      CFRelease(v17);
    }
    valuePtr = 7;
    v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v18)
    {
      v19 = v18;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C40], v18);
      CFRelease(v19);
    }
    valuePtr = 8;
    v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v20)
    {
      v21 = v20;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B60], v20);
      CFRelease(v21);
    }
    valuePtr = 9;
    v22 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v22)
    {
      v23 = v22;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C48], v22);
      CFRelease(v23);
    }
    valuePtr = 10;
    v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v24)
    {
      v25 = v24;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BD8], v24);
      CFRelease(v25);
    }
    valuePtr = 11;
    v26 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v26)
    {
      v27 = v26;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D58], v26);
      CFRelease(v27);
    }
    valuePtr = 12;
    v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v28)
    {
      v29 = v28;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D50], v28);
      CFRelease(v29);
    }
    valuePtr = 13;
    v30 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v30)
    {
      v31 = v30;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D40], v30);
      CFRelease(v31);
    }
    valuePtr = 14;
    v32 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v32)
    {
      v33 = v32;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E48], v32);
      CFRelease(v33);
    }
    valuePtr = 15;
    v34 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v34)
    {
      v35 = v34;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E68], v34);
      CFRelease(v35);
    }
    valuePtr = 16;
    v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v36)
    {
      v37 = v36;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D98], v36);
      CFRelease(v37);
    }
    valuePtr = 17;
    v38 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v38)
    {
      v39 = v38;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DC8], v38);
      CFRelease(v39);
    }
    valuePtr = 18;
    v40 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v40)
    {
      v41 = v40;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B48], v40);
      CFRelease(v41);
    }
    valuePtr = 19;
    v42 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v42)
    {
      v43 = v42;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D60], v42);
      CFRelease(v43);
    }
    valuePtr = 20;
    v44 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v44)
    {
      v45 = v44;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D68], v44);
      CFRelease(v45);
    }
    valuePtr = 21;
    v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v46)
    {
      v47 = v46;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C80], v46);
      CFRelease(v47);
    }
    valuePtr = 22;
    v48 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v48)
    {
      v49 = v48;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E78], v48);
      CFRelease(v49);
    }
    valuePtr = 23;
    v50 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v50)
    {
      v51 = v50;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CD0], v50);
      CFRelease(v51);
    }
    valuePtr = 24;
    v52 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v52)
    {
      v53 = v52;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DA8], v52);
      CFRelease(v53);
    }
    valuePtr = 25;
    v54 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v54)
    {
      v55 = v54;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C58], v54);
      CFRelease(v55);
    }
    valuePtr = 26;
    v56 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v56)
    {
      v57 = v56;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CA8], v56);
      CFRelease(v57);
    }
    valuePtr = 27;
    v58 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v58)
    {
      v59 = v58;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DE8], v58);
      CFRelease(v59);
    }
    valuePtr = 28;
    v60 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v60)
    {
      v61 = v60;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DF8], v60);
      CFRelease(v61);
    }
    valuePtr = 29;
    v62 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v62)
    {
      v63 = v62;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DF0], v62);
      CFRelease(v63);
    }
    valuePtr = 30;
    v64 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v64)
    {
      v65 = v64;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DA0], v64);
      CFRelease(v65);
    }
    valuePtr = 31;
    v66 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v66)
    {
      v67 = v66;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BC8], v66);
      CFRelease(v67);
    }
    valuePtr = 32;
    v68 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v68)
    {
      v69 = v68;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DD8], v68);
      CFRelease(v69);
    }
    valuePtr = 33;
    v70 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v70)
    {
      v71 = v70;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A80], v70);
      CFRelease(v71);
    }
    valuePtr = 34;
    v72 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v72)
    {
      v73 = v72;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E80], v72);
      CFRelease(v73);
    }
    valuePtr = 35;
    v74 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v74)
    {
      v75 = v74;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E70], v74);
      CFRelease(v75);
    }
    valuePtr = 36;
    v76 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v76)
    {
      v77 = v76;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D38], v76);
      CFRelease(v77);
    }
    valuePtr = 37;
    v78 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v78)
    {
      v79 = v78;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B28], v78);
      CFRelease(v79);
    }
    valuePtr = 38;
    v80 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v80)
    {
      v81 = v80;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BB8], v80);
      CFRelease(v81);
    }
    valuePtr = 39;
    v82 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v82)
    {
      v83 = v82;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A70], v82);
      CFRelease(v83);
    }
    valuePtr = 40;
    v84 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v84)
    {
      v85 = v84;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A78], v84);
      CFRelease(v85);
    }
    valuePtr = 41;
    v86 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v86)
    {
      v87 = v86;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C30], v86);
      CFRelease(v87);
    }
    valuePtr = 42;
    v88 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v88)
    {
      v89 = v88;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C18], v88);
      CFRelease(v89);
    }
    valuePtr = 43;
    v90 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v90)
    {
      v91 = v90;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B00], v90);
      CFRelease(v91);
    }
    valuePtr = 44;
    v92 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v92)
    {
      v93 = v92;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C38], v92);
      CFRelease(v93);
    }
    valuePtr = 45;
    v94 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v94)
    {
      v95 = v94;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A68], v94);
      CFRelease(v95);
    }
    valuePtr = 46;
    v96 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v96)
    {
      v97 = v96;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B58], v96);
      CFRelease(v97);
    }
    valuePtr = 47;
    v98 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v98)
    {
      v99 = v98;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BF8], v98);
      CFRelease(v99);
    }
    valuePtr = 48;
    v100 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v100)
    {
      v101 = v100;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CE8], v100);
      CFRelease(v101);
    }
    valuePtr = 49;
    v102 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v102)
    {
      v103 = v102;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AD0], v102);
      CFRelease(v103);
    }
    valuePtr = 50;
    v104 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v104)
    {
      v105 = v104;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AA8], v104);
      CFRelease(v105);
    }
    valuePtr = 51;
    v106 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v106)
    {
      v107 = v106;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A88], v106);
      CFRelease(v107);
    }
    valuePtr = 52;
    v108 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v108)
    {
      v109 = v108;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CC0], v108);
      CFRelease(v109);
    }
    valuePtr = 53;
    v110 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v110)
    {
      v111 = v110;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AD8], v110);
      CFRelease(v111);
    }
    valuePtr = 54;
    v112 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v112)
    {
      v113 = v112;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AC8], v112);
      CFRelease(v113);
    }
    valuePtr = 55;
    v114 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v114)
    {
      v115 = v114;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AA0], v114);
      CFRelease(v115);
    }
    valuePtr = 56;
    v116 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v116)
    {
      v117 = v116;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A98], v116);
      CFRelease(v117);
    }
    valuePtr = 57;
    v118 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v118)
    {
      v119 = v118;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A90], v118);
      CFRelease(v119);
    }
    valuePtr = 58;
    v120 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v120)
    {
      v121 = v120;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AC0], v120);
      CFRelease(v121);
    }
    valuePtr = 59;
    v122 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v122)
    {
      v123 = v122;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AB8], v122);
      CFRelease(v123);
    }
    valuePtr = 60;
    v124 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v124)
    {
      v125 = v124;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AB0], v124);
      CFRelease(v125);
    }
    valuePtr = 61;
    v126 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v126)
    {
      v127 = v126;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CF0], v126);
      CFRelease(v127);
    }
    valuePtr = 62;
    v128 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v128)
    {
      v129 = v128;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A58], v128);
      CFRelease(v129);
    }
    valuePtr = 63;
    v130 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v130)
    {
      v131 = v130;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A30], v130);
      CFRelease(v131);
    }
    valuePtr = 64;
    v132 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v132)
    {
      v133 = v132;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A60], v132);
      CFRelease(v133);
    }
    valuePtr = 65;
    v134 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v134)
    {
      v135 = v134;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A40], v134);
      CFRelease(v135);
    }
    valuePtr = 66;
    v136 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v136)
    {
      v137 = v136;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CD8], v136);
      CFRelease(v137);
    }
    valuePtr = 67;
    v138 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v138)
    {
      v139 = v138;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CF8], v138);
      CFRelease(v139);
    }
    valuePtr = 68;
    v140 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v140)
    {
      v141 = v140;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A50], v140);
      CFRelease(v141);
    }
    valuePtr = 69;
    v142 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v142)
    {
      v143 = v142;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A48], v142);
      CFRelease(v143);
    }
    valuePtr = 70;
    v144 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v144)
    {
      v145 = v144;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10A38], v144);
      CFRelease(v145);
    }
    valuePtr = 71;
    v146 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v146)
    {
      v147 = v146;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BC0], v146);
      CFRelease(v147);
    }
    valuePtr = 72;
    v148 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v148)
    {
      v149 = v148;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CE0], v148);
      CFRelease(v149);
    }
    valuePtr = 73;
    v150 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v150)
    {
      v151 = v150;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AE0], v150);
      CFRelease(v151);
    }
    valuePtr = 74;
    v152 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v152)
    {
      v153 = v152;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E50], v152);
      CFRelease(v153);
    }
    valuePtr = 75;
    v154 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v154)
    {
      v155 = v154;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B88], v154);
      CFRelease(v155);
    }
    valuePtr = 76;
    v156 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v156)
    {
      v157 = v156;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BA8], v156);
      CFRelease(v157);
    }
    valuePtr = 77;
    v158 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v158)
    {
      v159 = v158;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B98], v158);
      CFRelease(v159);
    }
    valuePtr = 78;
    v160 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v160)
    {
      v161 = v160;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BA0], v160);
      CFRelease(v161);
    }
    valuePtr = 79;
    v162 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v162)
    {
      v163 = v162;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE111A0], v162);
      CFRelease(v163);
    }
    valuePtr = 80;
    v164 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v164)
    {
      v165 = v164;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE110A0], v164);
      CFRelease(v165);
    }
    valuePtr = 81;
    v166 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v166)
    {
      v167 = v166;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE110D8], v166);
      CFRelease(v167);
    }
    valuePtr = 82;
    v168 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v168)
    {
      v169 = v168;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B90], v168);
      CFRelease(v169);
    }
    valuePtr = 83;
    v170 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v170)
    {
      v171 = v170;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BE0], v170);
      CFRelease(v171);
    }
    valuePtr = 84;
    v172 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v172)
    {
      v173 = v172;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10AF8], v172);
      CFRelease(v173);
    }
    valuePtr = 85;
    v174 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v174)
    {
      v175 = v174;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B30], v174);
      CFRelease(v175);
    }
    valuePtr = 86;
    v176 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v176)
    {
      v177 = v176;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D88], v176);
      CFRelease(v177);
    }
    valuePtr = 87;
    v178 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v178)
    {
      v179 = v178;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D08], v178);
      CFRelease(v179);
    }
    valuePtr = 88;
    v180 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v180)
    {
      v181 = v180;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C88], v180);
      CFRelease(v181);
    }
    valuePtr = 89;
    v182 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v182)
    {
      v183 = v182;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B68], v182);
      CFRelease(v183);
    }
    valuePtr = 90;
    v184 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v184)
    {
      v185 = v184;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D00], v184);
      CFRelease(v185);
    }
    valuePtr = 91;
    v186 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v186)
    {
      v187 = v186;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C90], v186);
      CFRelease(v187);
    }
    valuePtr = 92;
    v188 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v188)
    {
      v189 = v188;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C98], v188);
      CFRelease(v189);
    }
    valuePtr = 93;
    v190 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v190)
    {
      v191 = v190;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E58], v190);
      CFRelease(v191);
    }
    valuePtr = 94;
    v192 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v192)
    {
      v193 = v192;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C70], v192);
      CFRelease(v193);
    }
    valuePtr = 95;
    v194 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v194)
    {
      v195 = v194;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C68], v194);
      CFRelease(v195);
    }
    valuePtr = 96;
    v196 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v196)
    {
      v197 = v196;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C60], v196);
      CFRelease(v197);
    }
    valuePtr = 97;
    v198 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v198)
    {
      v199 = v198;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C78], v198);
      CFRelease(v199);
    }
    valuePtr = 98;
    v200 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v200)
    {
      v201 = v200;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C10], v200);
      CFRelease(v201);
    }
    valuePtr = 99;
    v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v202)
    {
      v203 = v202;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE115C0], v202);
      CFRelease(v203);
    }
    valuePtr = 100;
    v204 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v204)
    {
      v205 = v204;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE115C8], v204);
      CFRelease(v205);
    }
    valuePtr = 101;
    v206 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v206)
    {
      v207 = v206;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E08], v206);
      CFRelease(v207);
    }
    valuePtr = 102;
    v208 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v208)
    {
      v209 = v208;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E10], v208);
      CFRelease(v209);
    }
    valuePtr = 103;
    v210 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v210)
    {
      v211 = v210;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E30], v210);
      CFRelease(v211);
    }
    valuePtr = 104;
    v212 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v212)
    {
      v213 = v212;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E28], v212);
      CFRelease(v213);
    }
    valuePtr = 105;
    v214 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v214)
    {
      v215 = v214;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C08], v214);
      CFRelease(v215);
    }
    valuePtr = 106;
    v216 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v216)
    {
      v217 = v216;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10BB0], v216);
      CFRelease(v217);
    }
    valuePtr = 107;
    v218 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v218)
    {
      v219 = v218;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C00], v218);
      CFRelease(v219);
    }
    valuePtr = 108;
    v220 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v220)
    {
      v221 = v220;
      CFDictionarySetValue(*this, CFSTR("NTCTemperatureIdle"), v220);
      CFRelease(v221);
    }
    valuePtr = 109;
    v222 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v222)
    {
      v223 = v222;
      CFDictionarySetValue(*this, CFSTR("NTCTemperatureActive"), v222);
      CFRelease(v223);
    }
    valuePtr = 110;
    v224 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v224)
    {
      v225 = v224;
      CFDictionarySetValue(*this, CFSTR("DIETemperatureIdle"), v224);
      CFRelease(v225);
    }
    valuePtr = 111;
    v226 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v226)
    {
      v227 = v226;
      CFDictionarySetValue(*this, CFSTR("DIETemperatureActive"), v226);
      CFRelease(v227);
    }
    valuePtr = 112;
    v228 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v228)
    {
      v229 = v228;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyTemperature1"), v228);
      CFRelease(v229);
    }
    valuePtr = 113;
    v230 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v230)
    {
      v231 = v230;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyTemperature2"), v230);
      CFRelease(v231);
    }
    valuePtr = 114;
    v232 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v232)
    {
      v233 = v232;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyTemperature3"), v232);
      CFRelease(v233);
    }
    valuePtr = 115;
    v234 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v234)
    {
      v235 = v234;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyTemperature4"), v234);
      CFRelease(v235);
    }
    valuePtr = 116;
    v236 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v236)
    {
      v237 = v236;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyVoltage1"), v236);
      CFRelease(v237);
    }
    valuePtr = 117;
    v238 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v238)
    {
      v239 = v238;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyVoltage2"), v238);
      CFRelease(v239);
    }
    valuePtr = 118;
    v240 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v240)
    {
      v241 = v240;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyVoltage3"), v240);
      CFRelease(v241);
    }
    valuePtr = 119;
    v242 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v242)
    {
      v243 = v242;
      CFDictionarySetValue(*this, CFSTR("PowerSupplyVoltage4"), v242);
      CFRelease(v243);
    }
    valuePtr = 120;
    v244 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v244)
    {
      v245 = v244;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D18], v244);
      CFRelease(v245);
    }
    valuePtr = 121;
    v246 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v246)
    {
      v247 = v246;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D30], v246);
      CFRelease(v247);
    }
    valuePtr = 122;
    v248 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v248)
    {
      v249 = v248;
      CFDictionarySetValue(*this, CFSTR("APSTemperature"), v248);
      CFRelease(v249);
    }
    valuePtr = 123;
    v250 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v250)
    {
      v251 = v250;
      CFDictionarySetValue(*this, CFSTR("APSPositionOffset"), v250);
      CFRelease(v251);
    }
    valuePtr = 124;
    v252 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v252)
    {
      v253 = v252;
      CFDictionarySetValue(*this, CFSTR("DistortionDynamicCorrectionParams"), v252);
      CFRelease(v253);
    }
    valuePtr = 125;
    v254 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v254)
    {
      v255 = v254;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E00], v254);
      CFRelease(v255);
    }
    valuePtr = 126;
    v256 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v256)
    {
      v257 = v256;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D10], v256);
      CFRelease(v257);
    }
    valuePtr = 127;
    v258 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v258)
    {
      v259 = v258;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C20], v258);
      CFRelease(v259);
    }
    valuePtr = 128;
    v260 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v260)
    {
      v261 = v260;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C28], v260);
      CFRelease(v261);
    }
    valuePtr = 129;
    v262 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v262)
    {
      v263 = v262;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E18], v262);
      CFRelease(v263);
    }
    valuePtr = 130;
    v264 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v264)
    {
      v265 = v264;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B08], v264);
      CFRelease(v265);
    }
    valuePtr = 131;
    v266 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v266)
    {
      v267 = v266;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10B80], v266);
      CFRelease(v267);
    }
    valuePtr = 132;
    v268 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v268)
    {
      v269 = v268;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D20], v268);
      CFRelease(v269);
    }
    valuePtr = 133;
    v270 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v270)
    {
      v271 = v270;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CA0], v270);
      CFRelease(v271);
    }
    valuePtr = 134;
    v272 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v272)
    {
      v273 = v272;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10C50], v272);
      CFRelease(v273);
    }
    valuePtr = 135;
    v274 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v274)
    {
      v275 = v274;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DC0], v274);
      CFRelease(v275);
    }
    valuePtr = 136;
    v276 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v276)
    {
      v277 = v276;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10DB8], v276);
      CFRelease(v277);
    }
    valuePtr = 137;
    v278 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v278)
    {
      v279 = v278;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10D90], v278);
      CFRelease(v279);
    }
    valuePtr = 138;
    v280 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v280)
    {
      v281 = v280;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10CB8], v280);
      CFRelease(v281);
    }
    valuePtr = 139;
    v282 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v282)
    {
      v283 = v282;
      CFDictionarySetValue(*this, (const void *)*MEMORY[0x24BE10E20], v282);
      CFRelease(v283);
    }
  }
}

uint64_t H9ISP::GenerateAndAttachCoreMediaMetaDataDictionary()
{
  uint64_t v0;
  __CVBuffer *v1;
  uint64_t v2;
  uint64_t *v3;
  __CVBuffer *v4;
  __CVBuffer *v5;
  double v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __CVBuffer *v10;
  __CVBuffer *v11;
  uint64_t *v12;
  double v13;
  uint64_t v14;
  __CVBuffer *v15;
  __CVBuffer *Attachment;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFArray *v20;
  size_t Width;
  size_t Height;
  H9ISP::H9ISPFrameMetadata *v23;
  double v24;
  double v25;
  double v26;
  unint64_t v27;
  __CFArray *v28;
  uint64_t v29;
  const __CFArray *v30;
  CFNumberRef v31;
  const void **v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  unint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  int v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  unsigned int v46;
  int v47;
  const __CFArray *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned int Count;
  uint64_t v77;
  CFIndex v78;
  const __CFString *v79;
  const void *v80;
  const __CFString *v81;
  const CFDictionaryValueCallBacks *v82;
  const void *ValueAtIndex;
  __CFDictionary *v84;
  __CFDictionary *v85;
  const __CFString *v86;
  const __CFString *v87;
  __CVBuffer *v88;
  CFIndex v90;
  const void *v91;
  double v92;
  double v93;
  float32x2_t v94;
  BOOL v95;
  int v96;
  const void *v97;
  const __CFNumber *v98;
  int v99;
  const UInt8 *v100;
  size_t DataSize;
  CFDataRef v102;
  unsigned __int16 *v103;
  CFDictionaryRef v104;
  CFNumberRef v105;
  CFNumberRef v106;
  unsigned int v107;
  double v108;
  double v109;
  CFNumberRef v110;
  CFNumberRef v111;
  CFNumberRef v112;
  CFNumberRef v113;
  CFNumberRef v114;
  CFNumberRef v115;
  CFDictionaryRef v116;
  H9ISP *v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  CFDictionaryRef v125;
  float v126;
  CFNumberRef v127;
  float v128;
  CFNumberRef v129;
  int v130;
  BOOL v131;
  CFNumberRef v132;
  CFNumberRef v133;
  CFNumberRef v134;
  CFNumberRef v135;
  CFNumberRef v136;
  float v137;
  CFNumberRef v138;
  int v139;
  CFNumberRef v140;
  CFNumberRef v141;
  CFNumberRef v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned __int16 *v147;
  int v148;
  int *v149;
  float v150;
  CFNumberRef v151;
  CFNumberRef v152;
  CFNumberRef v153;
  float v154;
  float v155;
  CFNumberRef v156;
  uint64_t v157;
  double v158;
  float v159;
  CFNumberRef v160;
  float v161;
  CFNumberRef v162;
  double v163;
  long double v164;
  long double v165;
  long double v166;
  CFNumberRef v167;
  __CFDictionary *v168;
  CFNumberRef v169;
  CFNumberRef v170;
  CFNumberRef v171;
  CFNumberRef v172;
  CFNumberRef v173;
  CFNumberRef v174;
  uint64_t v175;
  CFNumberRef v176;
  __CFDictionary *v177;
  int v178;
  int v179;
  CFNumberRef v180;
  CFNumberRef v181;
  CFNumberRef v182;
  CFNumberRef v183;
  CFNumberRef v184;
  CFStringRef v185;
  CFNumberRef v186;
  __CFArray *v187;
  uint64_t v188;
  char v189;
  char v190;
  __CFDictionary *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  CFNumberRef v195;
  CFNumberRef v196;
  uint64_t v197;
  CFNumberRef v198;
  unint64_t v199;
  double v200;
  uint64_t v201;
  CFNumberRef v202;
  int v203;
  uint64_t i;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  _WORD *v208;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v210;
  int v211;
  int v212;
  CFNumberRef v213;
  CFNumberRef v214;
  unsigned __int16 *v215;
  CFNumberRef v216;
  uint64_t v217;
  UInt8 *v218;
  UInt8 *v219;
  CFDataRef v220;
  uint64_t v221;
  unsigned __int16 *v222;
  __CFArray *v223;
  uint64_t j;
  CFNumberRef v225;
  uint64_t v226;
  CFNumberRef v227;
  CFNumberRef v228;
  CFNumberRef v229;
  CFNumberRef v230;
  CFNumberRef v231;
  CFNumberRef v232;
  CFNumberRef v233;
  CFNumberRef v234;
  uint64_t v235;
  CFNumberRef v236;
  CFNumberRef v237;
  CFNumberRef v238;
  CFNumberRef v239;
  uint64_t v240;
  CFNumberRef v241;
  CFNumberRef v242;
  CFDataRef v243;
  CFNumberRef v244;
  CFNumberRef v245;
  CFNumberRef v246;
  int v247;
  CFNumberRef v248;
  int *v249;
  unsigned int v250;
  CFNumberRef v251;
  unsigned int v252;
  int *v253;
  int *v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  CFNumberRef v259;
  CFNumberRef v260;
  CFNumberRef v261;
  CFNumberRef v262;
  CFNumberRef v263;
  CFNumberRef v264;
  CFNumberRef v265;
  int32x2_t *v266;
  CFDictionaryRef v267;
  CGPoint v268;
  CGFloat y;
  _WORD *v270;
  __CFDictionary *v271;
  CFNumberRef v272;
  CFNumberRef v273;
  CFNumberRef v274;
  unint64_t v275;
  float v276;
  CFNumberRef v277;
  int v278;
  int v279;
  CFNumberRef v280;
  unint64_t v281;
  uint64_t v282;
  CFNumberRef v283;
  CFNumberRef v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  CFNumberRef v291;
  CFNumberRef v292;
  uint64_t v293;
  unint64_t v294;
  double v295;
  CFNumberRef v296;
  CFNumberRef v297;
  CFNumberRef v298;
  CFNumberRef v299;
  CFNumberRef v300;
  CFNumberRef v301;
  CFNumberRef v302;
  CFNumberRef v303;
  CFNumberRef v304;
  CFNumberRef v305;
  CFNumberRef v306;
  CFNumberRef v307;
  __CFArray *v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t k;
  uint64_t v312;
  uint64_t v313;
  CFDictionaryRef v314;
  int v315;
  CFNumberRef v316;
  float v317;
  CFNumberRef v318;
  __CFDictionary *v319;
  __CFDictionary *v320;
  const void *v321;
  CFNumberRef v322;
  int v323;
  CFNumberRef v324;
  CFNumberRef v325;
  int v326;
  char *BaseAddress;
  __CFArray *v328;
  unint64_t v329;
  int *v330;
  __CFDictionary *v331;
  CFNumberRef v332;
  CFNumberRef v333;
  CFNumberRef v334;
  CFNumberRef v335;
  CFNumberRef v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  double v341;
  double v342;
  double v343;
  double v344;
  CFDictionaryRef v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unsigned int v350;
  unsigned int v351;
  double v352;
  double v353;
  double v354;
  double v355;
  CFDictionaryRef v356;
  unsigned int v357;
  unsigned int v358;
  double v359;
  double v360;
  double v361;
  double v362;
  CFDictionaryRef v363;
  CFNumberRef v364;
  CFNumberRef v365;
  CFNumberRef v366;
  CFNumberRef v367;
  const __CFArray *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  CFDataRef v375;
  uint64_t v376;
  unsigned __int16 *v377;
  const UInt8 *v378;
  uint64_t v379;
  unsigned __int16 *v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  float v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  const UInt8 *v394;
  CFDataRef v395;
  const UInt8 *v396;
  CFDataRef v397;
  uint64_t v398;
  CFDataRef v399;
  int *v400;
  float v401;
  CFNumberRef v402;
  float v403;
  float v404;
  float v405;
  double *v406;
  unsigned int *v407;
  void *v408;
  void *v409;
  void *v410;
  void *v411;
  void *v412;
  void *v413;
  void *v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  void *v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  void *v424;
  void *v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  void *v430;
  void *v431;
  void *v432;
  void *v433;
  void *v434;
  void *v435;
  void *v436;
  void *v437;
  void *v438;
  void *v439;
  void *v440;
  void *v441;
  void *v442;
  void *v443;
  void *v444;
  void *v445;
  void *v446;
  void *v447;
  void *v448;
  void *v449;
  void *v450;
  void *v451;
  void *v452;
  void *v453;
  void *v454;
  void *v455;
  void *v456;
  void *v457;
  void *v458;
  void *v459;
  void *v460;
  void *v461;
  void *v462;
  void *v463;
  void *v464;
  void *v465;
  void *v466;
  void *v467;
  void *v468;
  void *v469;
  void *v470;
  void *v471;
  void *v472;
  void *v473;
  void *v474;
  void *v475;
  void *v476;
  void *v477;
  void *v478;
  void *v479;
  void *v480;
  void *v481;
  void *v482;
  void *v483;
  void *v484;
  void *v485;
  void *v486;
  void *v487;
  void *v488;
  void *v489;
  void *v490;
  void *v491;
  void *v492;
  void *v493;
  void *v494;
  void *v495;
  void *v496;
  void *v497;
  void *v498;
  void *v499;
  void *v500;
  void *v501;
  void *v502;
  void *v503;
  void *v504;
  void *v505;
  void *v506;
  void *v507;
  void *v508;
  void *v509;
  void *v510;
  void *v511;
  void *v512;
  void *v513;
  void *v514;
  void *v515;
  CFIndex range;
  const __CFAllocator *bytesDeallocator;
  void *v518;
  void *v519;
  void *v520;
  const void *v521;
  const void *v522;
  void *v523;
  void *v524;
  void *v525;
  void *v526;
  void *v527;
  void *v528;
  void *v529;
  void *v530;
  void *v531;
  void *v532;
  void *v533;
  void *v534;
  void *v535;
  void *v536;
  void *v537;
  void *v538;
  void *v539;
  void *v540;
  void *v541;
  void *v542;
  void *v543;
  void *v544;
  void *v545;
  void *v546;
  CFMutableArrayRef cf;
  void *v548;
  void *v549;
  void *v550;
  void *v551;
  void *v552;
  void *key;
  void *v554;
  void *v555;
  void *v556;
  void *v557;
  const __CFArray *v558;
  __CVBuffer *buffer;
  CFTypeRef v560;
  __CVBuffer *value;
  const __CFDictionary *theDict;
  __CVBuffer *v563;
  __CVBuffer *v564;
  void *v565;
  void *v566;
  void *v567;
  void *v568;
  uint64_t v569;
  int v570;
  unint64_t *v571;
  uint64_t v572;
  void *v573;
  CVPixelBufferRef pixelBuffer;
  void *v575;
  void *v576;
  void *v577;
  void *v578;
  void *v579;
  const __CFArray *theArray;
  const __CFAllocator *allocator;
  CFMutableDictionaryRef Mutable;
  UInt8 bytes[4];
  int v584;
  uint64_t v585;
  _DWORD v586[6];
  uint64_t v587;
  double v588;
  uint64_t v589;
  double v590;
  int v591;
  double v592;
  double v593;
  double v594;
  double v595;
  double v596;
  long double v597;
  float v598;
  uint64_t v599;
  int valuePtr;
  unsigned __int16 v601;
  mach_timebase_info info;
  uint64_t v603;
  CFRange v604;
  CFRange v605;
  CFRange v606;
  CFRange v607;
  CFRange v608;
  CFRange v609;
  CFRange v610;
  CFRange v611;
  CFRange v612;
  CFRange v613;
  CFRange v614;
  CGRect v615;
  CGRect v616;
  CGRect v617;
  CGRect v618;
  CGRect v619;
  CGRect v620;
  CGRect v621;
  CGRect v622;
  CGRect v623;
  CGRect v624;
  CGRect v625;

  v0 = MEMORY[0x24BDAC7A8]();
  v571 = v7;
  v572 = v8;
  v603 = *MEMORY[0x24BDAC8D0];
  v9 = 3758097084;
  v596 = 0.0;
  theDict = (const __CFDictionary *)v0;
  if (v0)
  {
    v10 = v5;
    v11 = v4;
    v12 = v3;
    v13 = v6;
    v14 = v2;
    v15 = v1;
    kdebug_trace();
    Attachment = (__CVBuffer *)CVBufferGetAttachment(v15, CFSTR("RawMetaData"), 0);
    pixelBuffer = (CVPixelBufferRef)CVBufferGetAttachment(v15, CFSTR("RawFaceDetectData"), 0);
    value = Attachment;
    if (!Attachment)
    {
      v17 = (const __CFDictionary *)CVBufferGetAttachment(v15, (CFStringRef)*MEMORY[0x24BE10800], 0);
      if (v17)
      {
        v18 = v17;
        value = (__CVBuffer *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x24BE104F0]);
        pixelBuffer = (CVPixelBufferRef)CFDictionaryGetValue(v18, CFSTR("RawFaceDetectData"));
      }
      else
      {
        value = 0;
      }
    }
    v19 = *(const __CFDictionary **)(v14 + 8);
    if (v19)
    {
      theArray = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 8), (const void *)*MEMORY[0x24BE104A8]);
      v20 = (const __CFArray *)CFDictionaryGetValue(v19, (const void *)*MEMORY[0x24BE104A0]);
    }
    else
    {
      v20 = 0;
      theArray = 0;
    }
    v601 = 0;
    valuePtr = 0;
    v599 = 0;
    v598 = 0.0;
    v597 = 0.0;
    key = (void *)*MEMORY[0x24BE10820];
    v560 = CVBufferGetAttachment(v15, (CFStringRef)*MEMORY[0x24BE10820], 0);
    if (value)
    {
      v558 = v20;
      Width = CVPixelBufferGetWidth(v15);
      Height = CVPixelBufferGetHeight(v15);
      allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        buffer = v15;
        v23 = (H9ISP::H9ISPFrameMetadata *)operator new();
        H9ISP::H9ISPFrameMetadata::H9ISPFrameMetadata(v23, value, 1uLL);
        if (!*((_QWORD *)v23 + 37))
        {
LABEL_115:
          CFRelease(Mutable);
          v9 = 0;
          goto LABEL_116;
        }
        if (theArray)
          range = CFArrayGetCount(theArray);
        else
          range = 0;
        v563 = v10;
        v564 = v11;
        if (*(_BYTE *)(v14 + 1) && *((_QWORD *)v23 + 3))
        {
          cf = CFArrayCreateMutable(allocator, 1, MEMORY[0x24BDBD690]);
          if (theArray)
          {
            v604.location = 0;
            v604.length = range;
            if (!CFArrayContainsValue(theArray, v604, (const void *)*MEMORY[0x24BE10C30]))
            {
              v611.location = 0;
              v611.length = range;
              if (CFArrayContainsValue(theArray, v611, (const void *)*MEMORY[0x24BE10C18]))
              {
                v28 = cf;
                if (cf)
                  goto LABEL_21;
              }
LABEL_25:
              v30 = theArray;
              goto LABEL_26;
            }
          }
          v28 = cf;
          if (cf)
          {
LABEL_21:
            v29 = 28;
            v30 = theArray;
            do
            {
              v31 = CFNumberCreate(0, kCFNumberLongLongType, (const void *)(*((_QWORD *)v23 + 3) + v29));
              CFArrayAppendValue(v28, v31);
              CFRelease(v31);
              v29 += 8;
            }
            while (v29 != 156);
LABEL_26:
            v594 = 0.0;
            v595 = 0.0;
            v593 = 0.0;
            v592 = 0.0;
            v32 = (const void **)MEMORY[0x24BE10D00];
            if (*(_QWORD *)v23 && *((_QWORD *)v23 + 1) && *((_QWORD *)v23 + 2))
            {
              if (v30)
              {
                v605.location = 0;
                v605.length = range;
                if (!CFArrayContainsValue(v30, v605, (const void *)*MEMORY[0x24BE10BE0]))
                {
                  v606.location = 0;
                  v606.length = range;
                  if (!CFArrayContainsValue(v30, v606, (const void *)*MEMORY[0x24BE10AF8]))
                  {
                    v607.location = 0;
                    v607.length = range;
                    if (!CFArrayContainsValue(v30, v607, (const void *)*MEMORY[0x24BE10B30]))
                    {
                      v608.location = 0;
                      v608.length = range;
                      if (!CFArrayContainsValue(v30, v608, (const void *)*MEMORY[0x24BE10D88]))
                      {
                        v609.location = 0;
                        v609.length = range;
                        if (!CFArrayContainsValue(v30, v609, (const void *)*MEMORY[0x24BE10D08]))
                        {
                          v610.location = 0;
                          v610.length = range;
                          if (!CFArrayContainsValue(v30, v610, (const void *)*MEMORY[0x24BE10C88]))
                            goto LABEL_44;
                        }
                      }
                    }
                  }
                }
              }
              v33 = *(unsigned __int16 **)v23;
              v34 = *((_QWORD *)v23 + 1);
              LODWORD(v24) = *(_DWORD *)(*(_QWORD *)v23 + 348);
              *(double *)&v35 = (double)*(unint64_t *)&v24;
              v36 = *(double *)&v35 * 0.0000152587891;
              LODWORD(v35) = *(_DWORD *)(*(_QWORD *)v23 + 352);
              *(double *)&v37 = (double)v35;
              v38 = *(double *)&v37 * 0.0000152587891;
              LODWORD(v37) = *(_DWORD *)(*(_QWORD *)v23 + 356);
              *(double *)&v39 = (double)v37;
              v40 = *(double *)&v39 * 0.0000152587891;
              v41 = *(_DWORD *)(*(_QWORD *)v23 + 360);
              LODWORD(v39) = *(_DWORD *)(*(_QWORD *)v23 + 364);
              *(double *)&v42 = (double)v39;
              v43 = *(double *)&v42 * 0.0000152587891;
              v44 = *((_QWORD *)v23 + 2);
              LODWORD(v42) = *(_DWORD *)v44;
              v45 = (double)v42 / 1000000.0;
              v596 = v45;
              if (v33[14])
                v46 = 1;
              else
                v46 = v33[15] != 0;
              v24 = H9ISP::CalculateAdditionalMetadataParameters((H9ISP *)*(unsigned int *)v33, *(unsigned __int16 *)(v34 + 4), *(unsigned __int16 *)(v34 + 6), v33[12], v33[13], v46, *(_DWORD *)(v44 + 28), *(unsigned __int16 *)(v44 + 4), v45, v36, v38, v40, v43, *(_DWORD *)(v44 + 6), HIWORD(*(_DWORD *)(v44 + 6)), v41, v33[194], &v595, &v594,
                      &v593,
                      &v592,
                      v406);
              v30 = theArray;
            }
            if (!v30)
            {
LABEL_46:
              if (v12)
              {
                if (v571)
                {
                  v49 = *((_QWORD *)v23 + 13);
                  if (v49)
                  {
                    if (*(unsigned __int16 *)(v49 + 2) >= 0x1FEu)
                      v50 = 510;
                    else
                      v50 = *(unsigned __int16 *)(v49 + 2);
                    if ((_DWORD)v50)
                    {
                      v51 = v571[1];
                      v24 = (double)*v571;
                      v52 = (_QWORD *)(v49 + 8);
                      do
                      {
                        v25 = v24 - (double)(v51 - *v52) * v13;
                        *v52 = (unint64_t)v25;
                        v52 = (_QWORD *)((char *)v52 + 36);
                        --v50;
                      }
                      while (v50);
                    }
                    if (*(_WORD *)(v49 + 4))
                    {
                      v53 = 0;
                      v54 = 18376;
                      do
                      {
                        v55 = (uint64_t *)(v49 + v54);
                        v56 = *v55;
                        *(v55 - 1) = (unint64_t)((double)*v571 - (double)(v571[1] - *(v55 - 1)) * v13);
                        v57 = *v12;
                        mach_timebase_info(&info);
                        LODWORD(v59) = info.numer;
                        LODWORD(v58) = info.denom;
                        v60 = (double)v58 / (double)v59 * -1000.0;
                        v25 = (double)(unint64_t)v12[1];
                        v26 = (double)(v57 - v56);
                        v24 = v25 + v26 * v60;
                        v49 = *((_QWORD *)v23 + 13);
                        *(_QWORD *)(v49 + v54) = (unint64_t)v24;
                        if (v53 > 0x6C)
                          break;
                        ++v53;
                        v54 += 100;
                      }
                      while (v53 < *(unsigned __int16 *)(v49 + 4));
                    }
                    if (*(_QWORD *)v23)
                    {
                      v61 = (_QWORD *)(*(_QWORD *)v23 + 468);
                      if (*v61)
                      {
                        v25 = (double)(v571[1] - *v61);
                        v24 = (double)*v571 - v25 * v13;
                        *v61 = (unint64_t)v24;
                      }
                      v62 = v61[1];
                      if (v62)
                      {
                        v25 = (double)(v571[1] - v62);
                        v24 = (double)*v571 - v25 * v13;
                        v61[1] = (unint64_t)v24;
                      }
                    }
                  }
                }
              }
              if (v12)
              {
                if (v571)
                {
                  v63 = *((_QWORD *)v23 + 21);
                  if (v63)
                  {
                    if (*(_WORD *)(v63 + 2))
                    {
                      v64 = 0;
                      v65 = 0;
                      do
                      {
                        v66 = v63 + v64;
                        v67 = *(_QWORD *)(v66 + 16);
                        *(_QWORD *)(v66 + 8) = (unint64_t)((double)*v571
                                                                - (double)(v571[1] - *(_QWORD *)(v66 + 8)) * v13);
                        v68 = *v12;
                        mach_timebase_info(&info);
                        LODWORD(v70) = info.numer;
                        LODWORD(v69) = info.denom;
                        v71 = (double)v69 / (double)v70 * -1000.0;
                        v25 = (double)(unint64_t)v12[1];
                        v26 = (double)(v68 - v67);
                        v24 = v25 + v26 * v71;
                        v63 = *((_QWORD *)v23 + 21);
                        *(_QWORD *)(v63 + v64 + 16) = (unint64_t)v24;
                        if (v65 > 0x6C)
                          break;
                        ++v65;
                        v64 += 100;
                      }
                      while (v65 < *(unsigned __int16 *)(v63 + 2));
                    }
                  }
                }
              }
              if (v571)
              {
                v72 = *((_QWORD *)v23 + 25);
                if (v72)
                {
                  v73 = *(unsigned __int16 *)(v72 + 2) >= 0x1FEu ? 510 : *(unsigned __int16 *)(v72 + 2);
                  if ((_DWORD)v73)
                  {
                    v74 = v571[1];
                    v24 = (double)*v571;
                    v75 = (_QWORD *)(v72 + 4);
                    do
                    {
                      v25 = v24 - (double)(v74 - *v75) * v13;
                      *v75 = (unint64_t)v25;
                      v75 = (_QWORD *)((char *)v75 + 84);
                      --v73;
                    }
                    while (v73);
                  }
                }
              }
              v48 = theArray;
              if (!theArray)
              {
                Count = 140;
                goto LABEL_119;
              }
LABEL_80:
              Count = CFArrayGetCount(v48);
              if (!Count)
              {
LABEL_81:
                if (cf)
                  CFRelease(cf);
                if (v558)
                {
                  v77 = CFArrayGetCount(v558);
                  if (v77)
                  {
                    v78 = 0;
                    v79 = (const __CFString *)*MEMORY[0x24BE10800];
                    v80 = (const void *)*MEMORY[0x24BE104F0];
                    v81 = (const __CFString *)*MEMORY[0x24BE10818];
                    v82 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
                    do
                    {
                      ValueAtIndex = CFArrayGetValueAtIndex(v558, v78);
                      if (CFEqual(ValueAtIndex, v79))
                      {
                        v84 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], v82);
                        v85 = v84;
                        if (v84)
                        {
                          CFDictionarySetValue(v84, v80, value);
                          if (pixelBuffer)
                            CFDictionarySetValue(v85, CFSTR("RawFaceDetectData"), pixelBuffer);
                          CVBufferSetAttachment(buffer, v79, v85, kCVAttachmentMode_ShouldPropagate);
                          if (v564)
                            CVBufferSetAttachment(v564, v79, v85, kCVAttachmentMode_ShouldPropagate);
                          if (v563)
                            CVBufferSetAttachment(v563, v79, v85, kCVAttachmentMode_ShouldPropagate);
                          CFRelease(v85);
                        }
                      }
                      if (CFEqual(ValueAtIndex, v81))
                      {
                        CVBufferSetAttachment(buffer, v81, Mutable, kCVAttachmentMode_ShouldPropagate);
                        if (v564)
                          CVBufferSetAttachment(v564, v81, Mutable, kCVAttachmentMode_ShouldPropagate);
                        if (v563)
                          CVBufferSetAttachment(v563, v81, Mutable, kCVAttachmentMode_ShouldPropagate);
                      }
                      ++v78;
                    }
                    while (v77 != v78);
                  }
                }
                else
                {
                  v86 = (const __CFString *)*MEMORY[0x24BE10818];
                  CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x24BE10818], Mutable, kCVAttachmentMode_ShouldPropagate);
                  if (v564)
                    CVBufferSetAttachment(v564, v86, Mutable, kCVAttachmentMode_ShouldPropagate);
                  if (v563)
                    CVBufferSetAttachment(v563, v86, Mutable, kCVAttachmentMode_ShouldPropagate);
                }
                H9ISP::H9ISPFrameMetadata::~H9ISPFrameMetadata(v23);
                MEMORY[0x23B7D8B08]();
                CVBufferRemoveAttachment(buffer, CFSTR("RawMetaData"));
                if (pixelBuffer)
                {
                  CVBufferRemoveAttachment(buffer, CFSTR("RawFaceDetectData"));
                  if (v564)
                  {
                    CVBufferRemoveAttachment(v564, CFSTR("RawMetaData"));
                    v87 = CFSTR("RawFaceDetectData");
                    v88 = v564;
LABEL_111:
                    CVBufferRemoveAttachment(v88, v87);
                  }
                }
                else
                {
                  v88 = v564;
                  if (v564)
                  {
                    v87 = CFSTR("RawMetaData");
                    goto LABEL_111;
                  }
                }
                if (v563)
                {
                  CVBufferRemoveAttachment(v563, CFSTR("RawMetaData"));
                  if (pixelBuffer)
                    CVBufferRemoveAttachment(v563, CFSTR("RawFaceDetectData"));
                }
                goto LABEL_115;
              }
LABEL_119:
              v90 = 0;
              v91 = (const void *)*MEMORY[0x24BE10D48];
              v414 = (void *)*MEMORY[0x24BE10DC0];
              v434 = (void *)*MEMORY[0x24BE10DA0];
              v526 = (void *)*MEMORY[0x24BE10CA8];
              v433 = (void *)*MEMORY[0x24BE10C58];
              v452 = (void *)*MEMORY[0x24BE10DA8];
              v410 = (void *)*MEMORY[0x24BE10A18];
              v409 = (void *)*MEMORY[0x24BE10A20];
              v408 = (void *)*MEMORY[0x24BE10A28];
              v444 = (void *)*MEMORY[0x24BE10CD0];
              v539 = (void *)*MEMORY[0x24BDBD268];
              v531 = (void *)*MEMORY[0x24BE10E78];
              v530 = (void *)*MEMORY[0x24BE10C80];
              v527 = (void *)*MEMORY[0x24BE10D68];
              v528 = (void *)*MEMORY[0x24BE10D60];
              v529 = (void *)*MEMORY[0x24BE10B48];
              v411 = (void *)*MEMORY[0x24BE10DC8];
              v432 = (void *)*MEMORY[0x24BE10D98];
              v431 = (void *)*MEMORY[0x24BE10E68];
              v422 = (void *)*MEMORY[0x24BE10E48];
              v430 = (void *)*MEMORY[0x24BE10D40];
              v429 = (void *)*MEMORY[0x24BE10D50];
              v428 = (void *)*MEMORY[0x24BE10D58];
              v525 = (void *)*MEMORY[0x24BE10BD8];
              v427 = (void *)*MEMORY[0x24BE10C48];
              v426 = (void *)*MEMORY[0x24BE10B60];
              v92 = (double)Width;
              v425 = (void *)*MEMORY[0x24BE10C40];
              v93 = (double)Height;
              v94 = (float32x2_t)vdup_n_s32(0x49742400u);
              v424 = (void *)*MEMORY[0x24BE10D80];
              v423 = (void *)*MEMORY[0x24BE10DB0];
              v443 = (void *)*MEMORY[0x24BE10B38];
              v435 = (void *)*MEMORY[0x24BE10E18];
              v447 = (void *)*MEMORY[0x24BE10E28];
              v446 = (void *)*MEMORY[0x24BE10E30];
              v475 = (void *)*MEMORY[0x24BE10E10];
              v549 = (void *)*MEMORY[0x24BDBD270];
              v445 = (void *)*MEMORY[0x24BE10E08];
              v451 = (void *)*MEMORY[0x24BE10D20];
              v450 = (void *)*MEMORY[0x24BE10B80];
              v449 = (void *)*MEMORY[0x24BE10D30];
              v519 = (void *)*MEMORY[0x24BE10C00];
              v537 = (void *)*MEMORY[0x24BE10BB0];
              v448 = (void *)*MEMORY[0x24BE10C08];
              v514 = (void *)*MEMORY[0x24BE10BE8];
              v515 = (void *)*MEMORY[0x24BE10BF0];
              v518 = (void *)*MEMORY[0x24BE10DF0];
              v421 = (void *)*MEMORY[0x24BE11608];
              v420 = (void *)*MEMORY[0x24BE115F8];
              v419 = (void *)*MEMORY[0x24BE115F0];
              v418 = (void *)*MEMORY[0x24BE115E8];
              v417 = (void *)*MEMORY[0x24BE115E0];
              v416 = (void *)*MEMORY[0x24BE11600];
              v412 = (void *)*MEMORY[0x24BE11618];
              v407 = (unsigned int *)*MEMORY[0x24BE11610];
              v501 = (void *)*MEMORY[0x24BE10DF8];
              v465 = (void *)*MEMORY[0x24BE115D0];
              v464 = (void *)*MEMORY[0x24BE115D8];
              v463 = (void *)*MEMORY[0x24BE115B8];
              v462 = (void *)*MEMORY[0x24BE115C0];
              v461 = (void *)*MEMORY[0x24BE115C8];
              v498 = (void *)*MEMORY[0x24BE10DE8];
              v457 = (void *)*MEMORY[0x24BE10F10];
              v557 = (void *)*MEMORY[0x24BE10F00];
              v556 = (void *)*MEMORY[0x24BE10EF8];
              v454 = (void *)*MEMORY[0x24BE10F08];
              v494 = (void *)*MEMORY[0x24BE10D18];
              v496 = (void *)*MEMORY[0x24BE10D38];
              v545 = (void *)*MEMORY[0x24BE10E70];
              v544 = (void *)*MEMORY[0x24BE10E80];
              v546 = (void *)*MEMORY[0x24BE10A80];
              v495 = (void *)*MEMORY[0x24BE10DD8];
              v543 = (void *)*MEMORY[0x24BE10BC8];
              v548 = (void *)*MEMORY[0x24BE10BB8];
              v513 = (void *)*MEMORY[0x24BE10B28];
              v523 = (void *)*MEMORY[0x24BE10C28];
              v540 = (void *)*MEMORY[0x24BE10C20];
              v474 = (void *)*MEMORY[0x24BE10C10];
              v478 = (void *)*MEMORY[0x24BE10CE8];
              v477 = (void *)*MEMORY[0x24BE10BF8];
              v542 = (void *)*MEMORY[0x24BE10B58];
              v440 = (void *)*MEMORY[0x24BE10A68];
              v541 = (void *)*MEMORY[0x24BE10C38];
              v476 = (void *)*MEMORY[0x24BE10A70];
              v550 = (void *)*MEMORY[0x24BE10A78];
              v460 = (void *)*MEMORY[0x24BE10B00];
              v500 = (void *)*MEMORY[0x24BE10C18];
              v499 = (void *)*MEMORY[0x24BE10C30];
              v512 = (void *)*MEMORY[0x24BE10E00];
              v511 = (void *)*MEMORY[0x24BE10A88];
              v510 = (void *)*MEMORY[0x24BE10AA8];
              v509 = (void *)*MEMORY[0x24BE10AD0];
              bytesDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD248];
              v497 = (void *)*MEMORY[0x24BE10C50];
              v504 = (void *)*MEMORY[0x24BE10B08];
              v538 = (void *)*MEMORY[0x24BE10CC0];
              v473 = (void *)*MEMORY[0x24BE10CF0];
              v472 = (void *)*MEMORY[0x24BE10AB0];
              v471 = (void *)*MEMORY[0x24BE10AB8];
              v470 = (void *)*MEMORY[0x24BE10AC0];
              v469 = (void *)*MEMORY[0x24BE10A90];
              v468 = (void *)*MEMORY[0x24BE10A98];
              v467 = (void *)*MEMORY[0x24BE10AA0];
              v502 = (void *)*MEMORY[0x24BE10AC8];
              v466 = (void *)*MEMORY[0x24BE10AD8];
              v439 = (void *)*MEMORY[0x24BE10CE0];
              v438 = (void *)*MEMORY[0x24BE10BC0];
              v413 = (void *)*MEMORY[0x24BE10A38];
              v453 = (void *)*MEMORY[0x24BE10A48];
              v415 = (void *)*MEMORY[0x24BE10A50];
              v437 = (void *)*MEMORY[0x24BE10CF8];
              v533 = (void *)*MEMORY[0x24BE10CD8];
              v534 = (void *)*MEMORY[0x24BE10A40];
              v436 = (void *)*MEMORY[0x24BE10A60];
              v535 = (void *)*MEMORY[0x24BE10A30];
              v532 = (void *)*MEMORY[0x24BE10A58];
              v482 = (void *)*MEMORY[0x24BE10CB8];
              v481 = (void *)*MEMORY[0x24BE10D90];
              v480 = (void *)*MEMORY[0x24BE10DB8];
              v506 = (void *)*MEMORY[0x24BE10E50];
              v505 = (void *)*MEMORY[0x24BE10AE0];
              v507 = (void *)*MEMORY[0x24BE10B90];
              v489 = (void *)*MEMORY[0x24BE110D8];
              v488 = (void *)*MEMORY[0x24BE110A0];
              v487 = (void *)*MEMORY[0x24BE111A0];
              v486 = (void *)*MEMORY[0x24BE10BA0];
              v485 = (void *)*MEMORY[0x24BE10B98];
              v484 = (void *)*MEMORY[0x24BE10BA8];
              v483 = (void *)*MEMORY[0x24BE10B88];
              v524 = (void *)*MEMORY[0x24BE10D10];
              v536 = (void *)*MEMORY[0x24BE10D08];
              if (v571)
                v95 = pixelBuffer == 0;
              else
                v95 = 1;
              v569 = Count;
              v522 = (const void *)*MEMORY[0x24BE105A8];
              v521 = (const void *)*MEMORY[0x24BE10588];
              v520 = (void *)*MEMORY[0x24BE10E20];
              v459 = (void *)*MEMORY[0x24BE10AF8];
              v458 = (void *)*MEMORY[0x24BE10BE0];
              v442 = (void *)*MEMORY[0x24BE10D88];
              v441 = (void *)*MEMORY[0x24BE10B30];
              v508 = (void *)*MEMORY[0x24BE10C88];
              v579 = (void *)*MEMORY[0x24BE10BD0];
              v578 = (void *)*MEMORY[0x24BE10E40];
              v577 = (void *)*MEMORY[0x24BE10AE8];
              v576 = (void *)*MEMORY[0x24BE10AF0];
              v575 = (void *)*MEMORY[0x24BE10B40];
              v573 = (void *)*MEMORY[0x24BE10D70];
              v555 = (void *)*MEMORY[0x24BE10CC8];
              v554 = (void *)*MEMORY[0x24BE10D78];
              v568 = (void *)*MEMORY[0x24BE10DE0];
              v567 = (void *)*MEMORY[0x24BE10B18];
              v566 = (void *)*MEMORY[0x24BE10B10];
              v565 = (void *)*MEMORY[0x24BE10B20];
              v551 = (void *)*MEMORY[0x24BE10B68];
              v479 = (void *)*MEMORY[0x24BE10CA0];
              v491 = (void *)*MEMORY[0x24BE10C90];
              v503 = (void *)*MEMORY[0x24BE10C98];
              v490 = (void *)*v32;
              v552 = (void *)*MEMORY[0x24BE10E58];
              v456 = (void *)*MEMORY[0x24BE10C78];
              v493 = (void *)*MEMORY[0x24BE10C60];
              v455 = (void *)*MEMORY[0x24BE10C68];
              v492 = (void *)*MEMORY[0x24BE10C70];
              v96 = !v95;
              v570 = v96;
              while (1)
              {
                v591 = 0;
                if (theArray)
                {
                  v97 = CFArrayGetValueAtIndex(theArray, v90);
                  v98 = (const __CFNumber *)CFDictionaryGetValue(theDict, v97);
                  CFNumberGetValue(v98, kCFNumberIntType, &v591);
                  v99 = v591;
                }
                else
                {
                  v591 = v90;
                  v99 = v90;
                }
                if (v99 == 1)
                {
                  if (v560)
                    CFDictionarySetValue(Mutable, key, v560);
                }
                else if (!v99 && (theArray || *(_BYTE *)v14))
                {
                  v100 = (const UInt8 *)*((_QWORD *)v23 + 37);
                  DataSize = CVPixelBufferGetDataSize(value);
                  v102 = CFDataCreate(0, v100, DataSize);
                  if (v102)
                  {
                    CFDictionarySetValue(Mutable, v91, v102);
                    CFRelease(v102);
                  }
                }
                v103 = *(unsigned __int16 **)v23;
                if (*(_QWORD *)v23)
                  break;
LABEL_272:
                v175 = *((_QWORD *)v23 + 2);
                if (!v175)
                  goto LABEL_326;
                switch(v591)
                {
                  case 31:
                    LODWORD(v24) = *(_DWORD *)v175;
                    v596 = (double)*(unint64_t *)&v24 / 1000000.0;
                    v176 = CFNumberCreate(0, kCFNumberDoubleType, &v596);
                    if (v176)
                    {
                      CFDictionarySetValue(Mutable, v543, v176);
                      CFRelease(v176);
                    }
                    goto LABEL_318;
                  case 32:
                    v597 = -log2(v596);
                    v180 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                    if (v180)
                    {
                      CFDictionarySetValue(Mutable, v495, v180);
                      CFRelease(v180);
                    }
                    goto LABEL_318;
                  case 33:
                    valuePtr = *(unsigned __int16 *)(v175 + 4);
                    v181 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v181)
                    {
                      CFDictionarySetValue(Mutable, v546, v181);
                      CFRelease(v181);
                    }
                    goto LABEL_318;
                  case 34:
                    valuePtr = *(unsigned __int16 *)(v175 + 8);
                    v182 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v182)
                    {
                      CFDictionarySetValue(Mutable, v544, v182);
                      CFRelease(v182);
                    }
                    goto LABEL_318;
                  case 35:
                    valuePtr = *(unsigned __int16 *)(v175 + 6);
                    v183 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v183)
                    {
                      CFDictionarySetValue(Mutable, v545, v183);
                      CFRelease(v183);
                    }
                    goto LABEL_318;
                  case 36:
                    valuePtr = *(unsigned __int8 *)(v175 + 15);
                    v184 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v184)
                    {
                      CFDictionarySetValue(Mutable, v496, v184);
                      CFRelease(v184);
                    }
                    goto LABEL_318;
                  default:
                    if (v591 != 120)
                      goto LABEL_318;
                    v177 = CFDictionaryCreateMutable(allocator, 3, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                    if (!v177)
                      goto LABEL_318;
                    v178 = *(unsigned __int16 *)(*((_QWORD *)v23 + 2) + 1984);
                    switch(v178)
                    {
                      case 3:
                        v179 = 3;
                        break;
                      case 2:
                        v179 = 2;
                        break;
                      case 1:
                        v179 = 1;
                        break;
                      default:
                        LODWORD(v589) = 0;
                        goto LABEL_305;
                    }
                    LODWORD(v589) = v179;
LABEL_305:
                    v186 = CFNumberCreate(allocator, kCFNumberIntType, &v589);
                    if (v186)
                    {
                      CFDictionaryAddValue(v177, v457, v186);
                      CFRelease(v186);
                    }
                    v187 = CFArrayCreateMutable(allocator, 2, MEMORY[0x24BDBD690]);
                    if (v187)
                    {
                      v188 = 0;
                      v189 = 1;
                      do
                      {
                        v190 = v189;
                        v191 = CFDictionaryCreateMutable(allocator, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                        if (v191)
                        {
                          info = 0;
                          v193 = *((_QWORD *)v23 + 2);
                          LODWORD(v192) = *(_DWORD *)(v193 + 4 * v188 + 1968);
                          *(double *)&v194 = (double)v192 * 0.0000152587891;
                          info = (mach_timebase_info)v194;
                          v590 = 0.0;
                          LOWORD(v194) = *(_WORD *)(v193 + 2 * v188 + 1976);
                          v590 = (double)v194;
                          v195 = CFNumberCreate(allocator, kCFNumberDoubleType, &info);
                          if (v195)
                          {
                            CFDictionaryAddValue(v191, v557, v195);
                            CFRelease(v195);
                          }
                          v196 = CFNumberCreate(allocator, kCFNumberDoubleType, &v590);
                          if (v196)
                          {
                            CFDictionaryAddValue(v191, v556, v196);
                            CFRelease(v196);
                          }
                          CFArrayAppendValue(v187, v191);
                          CFRelease(v191);
                        }
                        v189 = 0;
                        v188 = 1;
                      }
                      while ((v190 & 1) != 0);
                      CFDictionaryAddValue(v177, v454, v187);
                      CFRelease(v187);
                    }
                    CFDictionaryAddValue(Mutable, v494, v177);
                    CFRelease(v177);
LABEL_318:
                    v197 = *((_QWORD *)v23 + 2);
                    if (*(_BYTE *)(v197 + 12))
                    {
                      if (v591 == 38)
                      {
                        *(double *)&v199 = (double)*(__int16 *)(v197 + 1716);
                        v200 = *(double *)&v199 * 0.00390625;
                        LOWORD(v199) = *(_WORD *)(v197 + 588);
                        v597 = v200 + log2((double)v199 * 0.00390625);
                        v198 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (!v198)
                          goto LABEL_326;
                        CFDictionarySetValue(Mutable, v548, v198);
                        goto LABEL_325;
                      }
                      if (v591 == 37)
                      {
                        valuePtr = *(unsigned __int8 *)(v197 + 13) + 1;
                        v198 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                        if (v198)
                        {
                          CFDictionarySetValue(Mutable, v513, v198);
LABEL_325:
                          CFRelease(v198);
                        }
                      }
                    }
LABEL_326:
                    v201 = *((_QWORD *)v23 + 3);
                    if (!v201)
                      goto LABEL_379;
                    if (v591 > 97)
                    {
                      if (v591 == 98)
                      {
                        valuePtr = *(_DWORD *)(v201 + 2776);
                        v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                        if (!v202)
                          goto LABEL_361;
                        CFDictionarySetValue(Mutable, v474, v202);
                        goto LABEL_360;
                      }
                      if (v591 == 127)
                      {
                        v202 = CFArrayCreateMutable(allocator, 3, MEMORY[0x24BDBD690]);
                        if (!v202)
                          goto LABEL_361;
                        for (i = 3364; i != 3388; i += 8)
                        {
                          v205 = *((_QWORD *)v23 + 3);
                          v206 = *(unsigned __int16 *)(v205 + i + 4);
                          if (*(_WORD *)(v205 + i + 4))
                          {
                            v207 = *(unsigned __int16 *)(v205 + i + 6);
                            if (*(_WORD *)(v205 + i + 6))
                            {
                              v208 = (_WORD *)(v205 + i);
                              LOWORD(v24) = *v208;
                              v620.origin.x = (double)*(unint64_t *)&v24 / 1000.0;
                              LOWORD(v25) = v208[1];
                              v620.origin.y = (double)*(unint64_t *)&v25 / 1000.0;
                              v620.size.width = (double)v206 / 1000.0;
                              v620.size.height = (double)v207 / 1000.0;
                              DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v620);
                              if (DictionaryRepresentation)
                              {
                                CFArrayAppendValue(v202, DictionaryRepresentation);
                                CFRelease(DictionaryRepresentation);
                              }
                            }
                          }
                        }
                        CFDictionarySetValue(Mutable, v540, v202);
                        goto LABEL_360;
                      }
                      if (v591 != 128)
                        goto LABEL_361;
                      v203 = *(_DWORD *)(v201 + 3360);
                      if ((v203 - 1) >= 3)
                      {
                        if (v203 == -1)
                          goto LABEL_361;
                        v203 = 0;
                      }
                      valuePtr = v203;
                      v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                      if (v202)
                      {
                        CFDictionarySetValue(Mutable, v523, v202);
LABEL_360:
                        CFRelease(v202);
                      }
                    }
                    else
                    {
                      switch(v591)
                      {
                        case '\'':
                          valuePtr = *(unsigned __int16 *)(v201 + 24) != 0;
                          v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v202)
                          {
                            CFDictionarySetValue(Mutable, v476, v202);
                            goto LABEL_360;
                          }
                          break;
                        case ',':
                          valuePtr = *(_DWORD *)(v201 + 2736);
                          v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v202)
                          {
                            CFDictionarySetValue(Mutable, v541, v202);
                            goto LABEL_360;
                          }
                          break;
                        case '-':
                          if (*(_DWORD *)(v201 + 156) != 0xFFFF)
                          {
                            LOWORD(v24) = *(_WORD *)(v201 + 160);
                            v619.origin.x = (double)*(unint64_t *)&v24;
                            LOWORD(v25) = *(_WORD *)(v201 + 162);
                            v619.origin.y = (double)*(unint64_t *)&v25;
                            LOWORD(v26) = *(_WORD *)(v201 + 164);
                            v619.size.width = (double)*(unint64_t *)&v26;
                            LOWORD(v27) = *(_WORD *)(v201 + 166);
                            v619.size.height = (double)v27;
                            v202 = CGRectCreateDictionaryRepresentation(v619);
                            if (v202)
                            {
                              CFDictionarySetValue(Mutable, v440, v202);
                              goto LABEL_360;
                            }
                          }
                          break;
                        case '.':
                          valuePtr = *(unsigned __int16 *)(v201 + 26);
                          v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v202)
                          {
                            CFDictionarySetValue(Mutable, v542, v202);
                            goto LABEL_360;
                          }
                          break;
                        case '/':
                          valuePtr = *(unsigned __int16 *)(v201 + 424);
                          v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v202)
                          {
                            CFDictionarySetValue(Mutable, v477, v202);
                            goto LABEL_360;
                          }
                          break;
                        case '0':
                          valuePtr = *(_DWORD *)(v201 + 2724);
                          v202 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v202)
                          {
                            CFDictionarySetValue(Mutable, v478, v202);
                            goto LABEL_360;
                          }
                          break;
                        default:
                          break;
                      }
                    }
LABEL_361:
                    v210 = *((_QWORD *)v23 + 3);
                    if (!*(_WORD *)(v210 + 2722))
                      goto LABEL_379;
                    if (v591 == 40)
                    {
                      v211 = *(_DWORD *)(v210 + 2728);
                      if (v211 == 1)
                      {
                        v212 = 3;
LABEL_367:
                        valuePtr = v212;
                      }
                      else
                      {
                        if (v211 == 2)
                        {
                          v212 = 2;
                          goto LABEL_367;
                        }
                        valuePtr = 4;
                      }
                      v213 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                      if (v213)
                      {
                        CFDictionarySetValue(Mutable, v550, v213);
                        CFRelease(v213);
                      }
                    }
                    if (*(_BYTE *)(v14 + 1))
                    {
                      switch(v591)
                      {
                        case '+':
                          v599 = **((_QWORD **)v23 + 3);
                          v214 = CFNumberCreate(0, kCFNumberLongLongType, &v599);
                          if (v214)
                          {
                            CFDictionarySetValue(Mutable, v460, v214);
                            CFRelease(v214);
                          }
                          break;
                        case '*':
                          CFDictionarySetValue(Mutable, v500, cf);
                          break;
                        case ')':
                          CFDictionarySetValue(Mutable, v499, cf);
                          break;
                      }
                    }
LABEL_379:
                    v215 = (unsigned __int16 *)*((_QWORD *)v23 + 7);
                    if (!v215)
                      goto LABEL_394;
                    if (v591 > 50)
                    {
                      if (v591 == 51)
                      {
                        valuePtr = v215[46];
                        v216 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                        if (!v216)
                          goto LABEL_394;
                        CFDictionarySetValue(Mutable, v511, v216);
                        goto LABEL_393;
                      }
                      if (v591 == 125)
                      {
                        v601 = v215[109];
                        v216 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                        if (v216)
                        {
                          CFDictionarySetValue(Mutable, v512, v216);
                          goto LABEL_393;
                        }
                      }
                    }
                    else
                    {
                      if (v591 == 49)
                      {
                        valuePtr = v215[44];
                        v216 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                        if (!v216)
                          goto LABEL_394;
                        CFDictionarySetValue(Mutable, v509, v216);
                        goto LABEL_393;
                      }
                      if (v591 == 50)
                      {
                        valuePtr = v215[45];
                        v216 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                        if (v216)
                        {
                          CFDictionarySetValue(Mutable, v510, v216);
LABEL_393:
                          CFRelease(v216);
                        }
                      }
                    }
LABEL_394:
                    v217 = *((_QWORD *)v23 + 8);
                    if (v217)
                    {
                      switch(v591)
                      {
                        case 134:
                          v218 = (UInt8 *)malloc_type_malloc(0x204uLL, 0x4591EB35uLL);
                          v219 = v218;
                          if (v218)
                          {
                            *(_WORD *)v218 = 257;
                            memcpy(v218 + 2, (const void *)(*((_QWORD *)v23 + 8) + 36), 0x202uLL);
                            v220 = CFDataCreateWithBytesNoCopy(allocator, v219, 516, bytesDeallocator);
                            if (v220)
                            {
                              CFDictionarySetValue(Mutable, v497, v220);
                              CFRelease(v220);
                            }
                            else
                            {
                              free(v219);
                            }
                          }
                          break;
                        case 130:
                          v221 = *((_QWORD *)v23 + 2);
                          if (v221)
                          {
                            if (*(_BYTE *)(v221 + 12)
                              || (LODWORD(v221) = *(unsigned __int8 *)(v221 + 15), (_DWORD)v221))
                            {
                              LODWORD(v221) = 1;
                            }
                          }
                          v222 = *(unsigned __int16 **)v23;
                          if (*(_QWORD *)v23)
                          {
                            if (*((_BYTE *)v222 + 42))
                              LODWORD(v221) = 1;
                            if (*((unsigned __int8 *)v222 + 43) - 1 < 2)
                              goto LABEL_412;
                          }
                          if ((_DWORD)v221)
                          {
LABEL_412:
                            v223 = CFArrayCreateMutable(allocator, 33, MEMORY[0x24BDBD690]);
                            if (v223)
                            {
                              for (j = 642; j != 708; j += 2)
                              {
                                info.numer = 0;
                                info.numer = *(unsigned __int16 *)(*((_QWORD *)v23 + 8) + j);
                                v225 = CFNumberCreate(0, kCFNumberIntType, &info);
                                CFArrayAppendValue(v223, v225);
                                CFRelease(v225);
                              }
                              CFDictionaryAddValue(Mutable, v504, v223);
                              CFRelease(v223);
                            }
                          }
                          break;
                        case 52:
                          if (*(_BYTE *)(v217 + 553))
                            CFDictionarySetValue(Mutable, v538, v549);
                          else
                            CFDictionarySetValue(Mutable, v538, v539);
                          break;
                      }
                    }
                    v226 = *((_QWORD *)v23 + 4);
                    if (v226)
                    {
                      switch(v591)
                      {
                        case '5':
                          valuePtr = *(unsigned __int16 *)(v226 + 4);
                          v227 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v227)
                          {
                            CFDictionarySetValue(Mutable, v466, v227);
                            CFRelease(v227);
                          }
                          break;
                        case '6':
                          if (*(_DWORD *)(v226 + 72))
                            CFDictionarySetValue(Mutable, v502, v549);
                          else
                            CFDictionarySetValue(Mutable, v502, v539);
                          break;
                        case '7':
                          valuePtr = *(unsigned __int16 *)(v226 + 12);
                          v228 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v228)
                          {
                            CFDictionarySetValue(Mutable, v467, v228);
                            CFRelease(v228);
                          }
                          break;
                        case '8':
                          valuePtr = *(unsigned __int16 *)(v226 + 14);
                          v229 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v229)
                          {
                            CFDictionarySetValue(Mutable, v468, v229);
                            CFRelease(v229);
                          }
                          break;
                        case '9':
                          valuePtr = *(unsigned __int16 *)(v226 + 16);
                          v230 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v230)
                          {
                            CFDictionarySetValue(Mutable, v469, v230);
                            CFRelease(v230);
                          }
                          break;
                        case ':':
                          valuePtr = *(unsigned __int16 *)(v226 + 140);
                          v231 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v231)
                          {
                            CFDictionarySetValue(Mutable, v470, v231);
                            CFRelease(v231);
                          }
                          break;
                        case ';':
                          valuePtr = *(unsigned __int16 *)(v226 + 142);
                          v232 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v232)
                          {
                            CFDictionarySetValue(Mutable, v471, v232);
                            CFRelease(v232);
                          }
                          break;
                        case '<':
                          valuePtr = *(unsigned __int16 *)(v226 + 144);
                          v233 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v233)
                          {
                            CFDictionarySetValue(Mutable, v472, v233);
                            CFRelease(v233);
                          }
                          break;
                        case '=':
                          valuePtr = *(_DWORD *)(v226 + 148);
                          v234 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v234)
                          {
                            CFDictionarySetValue(Mutable, v473, v234);
                            CFRelease(v234);
                          }
                          break;
                        default:
                          break;
                      }
                    }
                    v235 = *((_QWORD *)v23 + 2);
                    if (v235 && *(_WORD *)(v235 + 10))
                    {
                      switch(v591)
                      {
                        case '>':
                          valuePtr = *(_DWORD *)(v235 + 16);
                          v236 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v236)
                          {
                            CFDictionarySetValue(Mutable, v532, v236);
                            CFRelease(v236);
                          }
                          break;
                        case '?':
                          valuePtr = *(_DWORD *)(v235 + 28);
                          v237 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v237)
                          {
                            CFDictionarySetValue(Mutable, v535, v237);
                            CFRelease(v237);
                          }
                          break;
                        case '@':
                          valuePtr = *(_DWORD *)(v235 + 32);
                          v238 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v238)
                          {
                            CFDictionarySetValue(Mutable, v436, v238);
                            CFRelease(v238);
                          }
                          break;
                        case 'A':
                          valuePtr = *(_DWORD *)(v235 + 584);
                          v239 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v239)
                          {
                            CFDictionarySetValue(Mutable, v534, v239);
                            CFRelease(v239);
                          }
                          goto LABEL_452;
                        case 'B':
                          valuePtr = *(_DWORD *)(v235 + 36);
                          v242 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v242)
                          {
                            CFDictionarySetValue(Mutable, v533, v242);
                            CFRelease(v242);
                          }
                          break;
                        case 'C':
                          switch(*(_WORD *)(v235 + 590))
                          {
                            case 0:
                              v247 = 1;
                              goto LABEL_475;
                            case 1:
                            case 3:
                              valuePtr = 5;
                              break;
                            case 2:
                              v247 = 3;
LABEL_475:
                              valuePtr = v247;
                              break;
                            default:
                              valuePtr = 0;
                              break;
                          }
                          v248 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v248)
                          {
                            CFDictionarySetValue(Mutable, v437, v248);
                            CFRelease(v248);
                          }
                          break;
                        case 'D':
                          if (*(_WORD *)(v235 + 594))
                          {
                            v243 = CFDataCreate(0, (const UInt8 *)(v235 + 596), 2* *(unsigned __int8 *)(v235 + 592)* (unint64_t)*(unsigned __int8 *)(v235 + 593));
                            if (v243)
                            {
                              CFDictionarySetValue(Mutable, v415, v243);
                              CFRelease(v243);
                            }
                          }
                          break;
                        case 'E':
                          if (*(_DWORD *)(v235 + 1680))
                            CFDictionarySetValue(Mutable, v453, v549);
                          else
                            CFDictionarySetValue(Mutable, v453, v539);
                          break;
                        case 'F':
                          if (*(_WORD *)(v235 + 1684) == 1)
                          {
                            valuePtr = *(unsigned __int16 *)(v235 + 1686);
                            v244 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                            if (v244)
                            {
                              CFDictionarySetValue(Mutable, v413, v244);
                              CFRelease(v244);
                            }
                          }
                          break;
                        case 'G':
                          valuePtr = *(_DWORD *)(v235 + 1708);
                          v245 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                          if (v245)
                          {
                            CFDictionarySetValue(Mutable, v438, v245);
                            CFRelease(v245);
                          }
                          break;
                        case 'H':
                          valuePtr = *(_DWORD *)(v235 + 1712);
                          v246 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                          if (v246)
                          {
                            CFDictionarySetValue(Mutable, v439, v246);
                            CFRelease(v246);
                          }
                          break;
                        default:
                          if (v591 == 38)
                          {
LABEL_452:
                            v240 = *((_QWORD *)v23 + 2);
                            if (!*(_BYTE *)(v240 + 12))
                            {
                              LOWORD(v24) = *(_WORD *)(v240 + 588);
                              v597 = log2((double)*(unint64_t *)&v24 * 0.00390625);
                              v241 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                              if (v241)
                              {
                                CFDictionarySetValue(Mutable, v548, v241);
                                CFRelease(v241);
                              }
                            }
                          }
                          break;
                      }
                    }
                    v249 = (int *)*((_QWORD *)v23 + 1);
                    if (v249)
                    {
                      if (v591 <= 135)
                      {
                        if (v591 == 62)
                        {
                          valuePtr = v249[1027];
                          v251 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (!v251)
                            goto LABEL_502;
                          CFDictionarySetValue(Mutable, v505, v251);
                          goto LABEL_501;
                        }
                        if (v591 == 74)
                        {
                          v252 = v249[1045];
                          if (v252)
                          {
                            v253 = v249 + 1043;
                            v254 = v249 + 1044;
                            v255 = 1046;
                          }
                          else
                          {
                            v253 = v249 + 1035;
                            v254 = v249 + 1036;
                            v252 = v249[1037];
                            v255 = 1038;
                          }
                          v624.origin.x = (double)*v253;
                          v624.origin.y = (double)*v254;
                          v624.size.width = (double)v252;
                          LODWORD(v27) = v249[v255];
                          v624.size.height = (double)v27;
                          v251 = CGRectCreateDictionaryRepresentation(v624);
                          if (v251)
                          {
                            CFDictionarySetValue(Mutable, v506, v251);
                            goto LABEL_501;
                          }
                        }
                      }
                      else
                      {
                        switch(v591)
                        {
                          case 136:
                            v256 = v249[1049];
                            if (v256)
                            {
                              v622.size.width = (double)v256;
                              LODWORD(v24) = v249[1050];
                              v622.size.height = (double)*(unint64_t *)&v24;
                              v622.origin.y = (double)v249[1048];
                              v622.origin.x = (double)v249[1047];
                              v251 = CGRectCreateDictionaryRepresentation(v622);
                              if (v251)
                              {
                                CFDictionarySetValue(Mutable, v480, v251);
                                goto LABEL_501;
                              }
                            }
                            break;
                          case 137:
                            v257 = v249[1053];
                            if (v257)
                            {
                              v623.size.width = (double)v257;
                              LODWORD(v24) = v249[1054];
                              v623.size.height = (double)*(unint64_t *)&v24;
                              v623.origin.y = (double)v249[1052];
                              v623.origin.x = (double)v249[1051];
                              v251 = CGRectCreateDictionaryRepresentation(v623);
                              if (v251)
                              {
                                CFDictionarySetValue(Mutable, v481, v251);
                                goto LABEL_501;
                              }
                            }
                            break;
                          case 138:
                            v250 = v249[1057];
                            if (v250)
                            {
                              v621.size.width = (double)v250;
                              LODWORD(v24) = v249[1058];
                              v621.size.height = (double)*(unint64_t *)&v24;
                              v621.origin.y = (double)v249[1056];
                              v621.origin.x = (double)v249[1055];
                              v251 = CGRectCreateDictionaryRepresentation(v621);
                              if (v251)
                              {
                                CFDictionarySetValue(Mutable, v482, v251);
LABEL_501:
                                CFRelease(v251);
                              }
                            }
                            break;
                        }
                      }
                    }
LABEL_502:
                    v258 = *((_QWORD *)v23 + 5);
                    if (v258)
                    {
                      switch(v591)
                      {
                        case 'K':
                          v601 = *(_WORD *)(v258 + 4);
                          v259 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v259)
                          {
                            CFDictionarySetValue(Mutable, v483, v259);
                            CFRelease(v259);
                          }
                          break;
                        case 'L':
                          v601 = *(_WORD *)(v258 + 6);
                          v260 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v260)
                          {
                            CFDictionarySetValue(Mutable, v484, v260);
                            CFRelease(v260);
                          }
                          break;
                        case 'M':
                          v601 = *(_WORD *)(v258 + 8);
                          v261 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v261)
                          {
                            CFDictionarySetValue(Mutable, v485, v261);
                            CFRelease(v261);
                          }
                          break;
                        case 'N':
                          v601 = *(_WORD *)(v258 + 10);
                          v262 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v262)
                          {
                            CFDictionarySetValue(Mutable, v486, v262);
                            CFRelease(v262);
                          }
                          break;
                        case 'O':
                          v601 = *(_WORD *)(v258 + 16);
                          v263 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v263)
                          {
                            CFDictionarySetValue(Mutable, v487, v263);
                            CFRelease(v263);
                          }
                          break;
                        case 'P':
                          v601 = *(_WORD *)(v258 + 18);
                          v264 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v264)
                          {
                            CFDictionarySetValue(Mutable, v488, v264);
                            CFRelease(v264);
                          }
                          break;
                        case 'Q':
                          v601 = *(_WORD *)(v258 + 20);
                          v265 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                          if (v265)
                          {
                            CFDictionarySetValue(Mutable, v489, v265);
                            CFRelease(v265);
                          }
                          break;
                        case 'R':
                          if (*(_DWORD *)(v258 + 12))
                            CFDictionarySetValue(Mutable, v507, v549);
                          else
                            CFDictionarySetValue(Mutable, v507, v539);
                          break;
                        default:
                          break;
                      }
                    }
                    v266 = (int32x2_t *)*((_QWORD *)v23 + 30);
                    if (v266)
                    {
                      if (v591 == 126)
                      {
                        v268 = (CGPoint)vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(v266[4]), v94));
                        y = v268.y;
                        v267 = CGPointCreateDictionaryRepresentation(v268);
                        if (v267)
                        {
                          CFDictionarySetValue(Mutable, v524, v267);
                          goto LABEL_528;
                        }
                      }
                      else if (v591 == 124)
                      {
                        v267 = CFDataCreate(0, (const UInt8 *)v266, 84);
                        if (v267)
                        {
                          CFDictionarySetValue(Mutable, CFSTR("DistortionDynamicCorrectionParams"), v267);
LABEL_528:
                          CFRelease(v267);
                        }
                      }
                    }
                    v270 = (_WORD *)*((_QWORD *)v23 + 34);
                    if (!v270)
                      goto LABEL_603;
                    if (!*v270)
                      goto LABEL_603;
                    if (v591 != 139)
                      goto LABEL_603;
                    v271 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                    if (!v271)
                      goto LABEL_603;
                    valuePtr = *(unsigned __int16 *)(*((_QWORD *)v23 + 34) + 44);
                    v272 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v272)
                    {
                      CFDictionarySetValue(v271, v546, v272);
                      CFRelease(v272);
                    }
                    valuePtr = *(unsigned __int16 *)(*((_QWORD *)v23 + 34) + 46);
                    v273 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v273)
                    {
                      CFDictionarySetValue(v271, v545, v273);
                      CFRelease(v273);
                    }
                    valuePtr = *(unsigned __int16 *)(*((_QWORD *)v23 + 34) + 48);
                    v274 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v274)
                    {
                      CFDictionarySetValue(v271, v544, v274);
                      CFRelease(v274);
                    }
                    LOWORD(v275) = *(_WORD *)(*((_QWORD *)v23 + 34) + 2);
                    v276 = (double)v275 * 0.00390625;
                    v598 = v276;
                    v277 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                    if (v277)
                    {
                      CFDictionarySetValue(v271, v531, v277);
                      CFRelease(v277);
                    }
                    v278 = *(_DWORD *)(*((_QWORD *)v23 + 34) + 72);
                    if (v278 == 1)
                    {
                      v279 = 3;
                      goto LABEL_545;
                    }
                    if (v278 == 2)
                    {
                      v279 = 2;
LABEL_545:
                      valuePtr = v279;
                      goto LABEL_547;
                    }
                    valuePtr = 4;
LABEL_547:
                    v280 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v280)
                    {
                      CFDictionarySetValue(v271, v550, v280);
                      CFRelease(v280);
                    }
                    v282 = *((_QWORD *)v23 + 34);
                    if (*(_DWORD *)(v282 + 8))
                    {
                      v598 = (float)*(int *)(v282 + 4) * 0.0039062;
                      v283 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                      if (v283)
                      {
                        CFDictionarySetValue(v271, v519, v283);
                        CFRelease(v283);
                      }
                    }
                    LODWORD(v281) = *(_DWORD *)(*((_QWORD *)v23 + 34) + 52);
                    v596 = (double)v281 / 1000000.0;
                    v284 = CFNumberCreate(0, kCFNumberDoubleType, &v596);
                    if (v284)
                    {
                      CFDictionarySetValue(v271, v543, v284);
                      CFRelease(v284);
                    }
                    info = 0;
                    v590 = 0.0;
                    v589 = 0;
                    v588 = 0.0;
                    v290 = *((_QWORD *)v23 + 34);
                    LODWORD(v285) = *(_DWORD *)(v290 + 52);
                    LODWORD(v286) = *(_DWORD *)(v290 + 16);
                    LODWORD(v287) = *(_DWORD *)(v290 + 20);
                    LODWORD(v288) = *(_DWORD *)(v290 + 24);
                    LODWORD(v289) = *(_DWORD *)(v290 + 36);
                    H9ISP::CalculateAdditionalMetadataParameters(0, *(unsigned __int16 *)(v290 + 40), *(unsigned __int16 *)(v290 + 42), *(unsigned __int16 *)(v290 + 32), *(unsigned __int16 *)(v290 + 34), 0, *(_DWORD *)(v290 + 60), *(unsigned __int16 *)(v290 + 44), (double)v285 / 1000000.0, (double)v286 * 0.0000152587891, (double)v287 * 0.0000152587891, (double)v288 * 0.0000152587891, (double)v289 * 0.0000152587891, *(_DWORD *)(v290 + 46), HIWORD(*(_DWORD *)(v290 + 46)), *(_DWORD *)(v290 + 12), *(_WORD *)(v290 + 2), (long double *)&info, &v590,
                      (double *)&v589,
                      &v588,
                      v406);
                    v597 = v588;
                    v291 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                    if (v291)
                    {
                      CFDictionarySetValue(v271, v536, v291);
                      CFRelease(v291);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 12);
                    v292 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v292)
                    {
                      CFDictionarySetValue(v271, v530, v292);
                      CFRelease(v292);
                    }
                    v293 = *((_QWORD *)v23 + 34);
                    *(double *)&v294 = (double)*(__int16 *)(v293 + 56);
                    v295 = *(double *)&v294 * 0.00390625;
                    LOWORD(v294) = *(_WORD *)(v293 + 58);
                    v597 = v295 + log2((double)v294 * 0.00390625);
                    v296 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                    if (v296)
                    {
                      CFDictionarySetValue(v271, v548, v296);
                      CFRelease(v296);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 16);
                    v297 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v297)
                    {
                      CFDictionarySetValue(v271, v529, v297);
                      CFRelease(v297);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 20);
                    v298 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v298)
                    {
                      CFDictionarySetValue(v271, v528, v298);
                      CFRelease(v298);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 24);
                    v299 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v299)
                    {
                      CFDictionarySetValue(v271, v527, v299);
                      CFRelease(v299);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 60);
                    v300 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v300)
                    {
                      CFDictionarySetValue(v271, v535, v300);
                      CFRelease(v300);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 64);
                    v301 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v301)
                    {
                      CFDictionarySetValue(v271, v534, v301);
                      CFRelease(v301);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 28);
                    v302 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v302)
                    {
                      CFDictionarySetValue(v271, v526, v302);
                      CFRelease(v302);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 68);
                    v303 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v303)
                    {
                      CFDictionarySetValue(v271, v533, v303);
                      CFRelease(v303);
                    }
                    valuePtr = *(unsigned __int8 *)(*((_QWORD *)v23 + 34) + 51);
                    v304 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v304)
                    {
                      CFDictionarySetValue(v271, v525, v304);
                      CFRelease(v304);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 76);
                    v305 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v305)
                    {
                      CFDictionarySetValue(v271, v532, v305);
                      CFRelease(v305);
                    }
                    valuePtr = *(unsigned __int16 *)(*((_QWORD *)v23 + 34) + 80);
                    v306 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v306)
                    {
                      CFDictionarySetValue(v271, v542, v306);
                      CFRelease(v306);
                    }
                    valuePtr = *(_DWORD *)(*((_QWORD *)v23 + 34) + 84);
                    v307 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v307)
                    {
                      CFDictionarySetValue(v271, v541, v307);
                      CFRelease(v307);
                    }
                    v308 = CFArrayCreateMutable(allocator, 3, MEMORY[0x24BDBD690]);
                    if (v308)
                    {
                      for (k = 0; k != 24; k += 8)
                      {
                        v312 = *((_QWORD *)v23 + 34);
                        v313 = v312 + k;
                        if (*(_WORD *)(v312 + k + 96))
                        {
                          if (*(_WORD *)(v313 + 98))
                          {
                            LOWORD(v309) = *(_WORD *)(v313 + 92);
                            v625.origin.x = (double)v309 / 1000.0;
                            LOWORD(v310) = *(_WORD *)(v312 + k + 94);
                            v625.origin.y = (double)v310 / 1000.0;
                            v625.size.width = (double)*(unsigned __int16 *)(v312 + k + 96) / 1000.0;
                            v625.size.height = (double)*(unsigned __int16 *)(v313 + 98) / 1000.0;
                            v314 = CGRectCreateDictionaryRepresentation(v625);
                            if (v314)
                            {
                              CFArrayAppendValue(v308, v314);
                              CFRelease(v314);
                            }
                          }
                        }
                      }
                      CFDictionarySetValue(v271, v540, v308);
                      CFRelease(v308);
                    }
                    v315 = *(_DWORD *)(*((_QWORD *)v23 + 34) + 88);
                    if ((v315 - 1) < 3)
                      goto LABEL_593;
                    if (v315 != -1)
                    {
                      v315 = 0;
LABEL_593:
                      valuePtr = v315;
                      v316 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                      if (v316)
                      {
                        CFDictionarySetValue(v271, v523, v316);
                        CFRelease(v316);
                      }
                    }
                    v317 = (float)*(int *)(*((_QWORD *)v23 + 34) + 116) * 0.0000152587891 * 1000.0;
                    v598 = v317;
                    v318 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                    if (v318)
                    {
                      CFDictionarySetValue(v271, v537, v318);
                      CFRelease(v318);
                    }
                    v319 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                    v320 = v319;
                    if (v319)
                    {
                      if (*(_WORD *)(*(_QWORD *)v23 + 458))
                        v321 = v521;
                      else
                        v321 = v522;
                      CFDictionarySetValue(v319, v321, v271);
                      CFDictionarySetValue(Mutable, v520, v320);
                      CFRelease(v320);
                    }
                    CFRelease(v271);
LABEL_603:
                    if (!*(_QWORD *)v23 || !*((_QWORD *)v23 + 1) || !*((_QWORD *)v23 + 2))
                      goto LABEL_629;
                    if (v572)
                    {
                      if (v591 == 84)
                      {
                        v597 = *(double *)(v572 + 16) / *(double *)(v572 + 8);
                        v322 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (!v322)
                          goto LABEL_614;
                        CFDictionarySetValue(Mutable, v459, v322);
                        goto LABEL_613;
                      }
                      if (v591 == 83)
                      {
                        v597 = *(double *)(v572 + 8);
                        v322 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (v322)
                        {
                          CFDictionarySetValue(Mutable, v458, v322);
LABEL_613:
                          CFRelease(v322);
                        }
                      }
                    }
LABEL_614:
                    if (!*(_WORD *)(*((_QWORD *)v23 + 2) + 10))
                      goto LABEL_625;
                    v323 = v591;
                    switch(v591)
                    {
                      case 'W':
                        v597 = v592;
                        v324 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (v324)
                        {
                          CFDictionarySetValue(Mutable, v536, v324);
                          goto LABEL_624;
                        }
LABEL_625:
                        v323 = v591;
                        break;
                      case 'V':
                        v597 = v593;
                        v324 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (v324)
                        {
                          CFDictionarySetValue(Mutable, v442, v324);
LABEL_624:
                          CFRelease(v324);
                        }
                        goto LABEL_625;
                      case 'U':
                        v597 = v595;
                        v324 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (v324)
                        {
                          CFDictionarySetValue(Mutable, v441, v324);
                          goto LABEL_624;
                        }
                        goto LABEL_625;
                    }
                    if (v323 == 88)
                    {
                      v597 = v594;
                      v325 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                      if (v325)
                      {
                        CFDictionarySetValue(Mutable, v508, v325);
                        CFRelease(v325);
                      }
                    }
LABEL_629:
                    v326 = v570;
                    if (v591 != 89)
                      v326 = 0;
                    if (v326 == 1)
                    {
                      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
                      BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
                      if (*((_DWORD *)BaseAddress + 6))
                      {
                        v328 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                        if (v328)
                        {
                          info = (mach_timebase_info)(unint64_t)((double)*v571
                                                                      - (double)(v571[1] - *((_QWORD *)BaseAddress + 1))
                                                                      * v13);
                          if (*((_DWORD *)BaseAddress + 6))
                          {
                            v329 = 0;
                            v330 = (int *)(BaseAddress + 148);
                            do
                            {
                              v331 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                              if (v331)
                              {
                                valuePtr = *v330;
                                v332 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                CFDictionarySetValue(v331, v579, v332);
                                CFRelease(v332);
                                v333 = CFNumberCreate(0, kCFNumberLongLongType, &info);
                                CFDictionarySetValue(v331, v578, v333);
                                CFRelease(v333);
                                valuePtr = *(v330 - 3);
                                v334 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                CFDictionarySetValue(v331, v577, v334);
                                CFRelease(v334);
                                valuePtr = *(v330 - 2);
                                v335 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                CFDictionarySetValue(v331, v576, v335);
                                CFRelease(v335);
                                valuePtr = *(v330 - 1);
                                v336 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                CFDictionarySetValue(v331, v575, v336);
                                CFRelease(v336);
                                if (*(_BYTE *)(v14 + 6))
                                {
                                  LOWORD(v337) = *((_WORD *)v330 - 26);
                                  v341 = (double)v337 / 1000.0;
                                  LOWORD(v338) = *((_WORD *)v330 - 25);
                                  v342 = (double)v338 / 1000.0;
                                  LOWORD(v339) = *((_WORD *)v330 - 24);
                                  v343 = (double)v339 / 1000.0;
                                  LOWORD(v340) = *((_WORD *)v330 - 23);
                                  v344 = (double)v340 / 1000.0;
                                }
                                else
                                {
                                  LODWORD(v339) = *(v330 - 23);
                                  LODWORD(v340) = *(v330 - 22);
                                  v341 = (double)*(v330 - 25) / v92;
                                  v342 = (double)*(v330 - 24) / v93;
                                  v343 = (double)v339 / v92;
                                  v344 = (double)v340 / v93;
                                }
                                v345 = CGRectCreateDictionaryRepresentation(*(CGRect *)&v341);
                                if (v345)
                                {
                                  CFDictionarySetValue(v331, v573, v345);
                                  CFRelease(v345);
                                }
                                if (*((_DWORD *)BaseAddress + 9))
                                {
                                  v350 = *(v330 - 19);
                                  if (v350)
                                  {
                                    v351 = *(v330 - 18);
                                    if (v351)
                                    {
                                      if (*(_BYTE *)(v14 + 6))
                                      {
                                        LOWORD(v346) = *((_WORD *)v330 - 22);
                                        v352 = (double)v346 / 1000.0;
                                        LOWORD(v347) = *((_WORD *)v330 - 21);
                                        v353 = (double)v347 / 1000.0;
                                        LOWORD(v348) = *((_WORD *)v330 - 20);
                                        v354 = (double)v348 / 1000.0;
                                        LOWORD(v349) = *((_WORD *)v330 - 19);
                                        v355 = (double)v349 / 1000.0;
                                      }
                                      else
                                      {
                                        v352 = (double)*(v330 - 21) / v92;
                                        v353 = (double)*(v330 - 20) / v93;
                                        v354 = (double)v350 / v92;
                                        v355 = (double)v351 / v93;
                                      }
                                      v356 = CGRectCreateDictionaryRepresentation(*(CGRect *)&v352);
                                      if (v356)
                                      {
                                        CFDictionarySetValue(v331, v555, v356);
                                        CFRelease(v356);
                                      }
                                    }
                                  }
                                  v357 = *(v330 - 15);
                                  if (v357)
                                  {
                                    v358 = *(v330 - 14);
                                    if (v358)
                                    {
                                      if (*(_BYTE *)(v14 + 6))
                                      {
                                        LOWORD(v346) = *((_WORD *)v330 - 18);
                                        v359 = (double)v346 / 1000.0;
                                        LOWORD(v347) = *((_WORD *)v330 - 17);
                                        v360 = (double)v347 / 1000.0;
                                        LOWORD(v348) = *((_WORD *)v330 - 16);
                                        v361 = (double)v348 / 1000.0;
                                        LOWORD(v349) = *((_WORD *)v330 - 15);
                                        v362 = (double)v349 / 1000.0;
                                      }
                                      else
                                      {
                                        v359 = (double)*(v330 - 17) / v92;
                                        v360 = (double)*(v330 - 16) / v93;
                                        v361 = (double)v357 / v92;
                                        v362 = (double)v358 / v93;
                                      }
                                      v363 = CGRectCreateDictionaryRepresentation(*(CGRect *)&v359);
                                      if (v363)
                                      {
                                        CFDictionarySetValue(v331, v554, v363);
                                        CFRelease(v363);
                                      }
                                    }
                                  }
                                }
                                if (*((_DWORD *)BaseAddress + 11) && *(v330 - 7))
                                {
                                  valuePtr = *(v330 - 7);
                                  v364 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                  CFDictionarySetValue(v331, v568, v364);
                                  CFRelease(v364);
                                }
                                if (*((_DWORD *)BaseAddress + 10))
                                {
                                  if (*(v330 - 6))
                                  {
                                    valuePtr = *(v330 - 6);
                                    v365 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                    CFDictionarySetValue(v331, v567, v365);
                                    CFRelease(v365);
                                  }
                                  if (*(v330 - 5))
                                  {
                                    valuePtr = *(v330 - 5);
                                    v366 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                    CFDictionarySetValue(v331, v566, v366);
                                    CFRelease(v366);
                                  }
                                  if (*(v330 - 4))
                                  {
                                    valuePtr = *(v330 - 4);
                                    v367 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                                    CFDictionarySetValue(v331, v565, v367);
                                    CFRelease(v367);
                                  }
                                }
                                CFArrayAppendValue(v328, v331);
                                CFRelease(v331);
                              }
                              ++v329;
                              v330 += 26;
                            }
                            while (v329 < *((unsigned int *)BaseAddress + 6));
                          }
LABEL_672:
                          CFDictionarySetValue(Mutable, v551, v328);
                          CFRelease(v328);
                        }
                      }
                      else if (v591 == 89)
                      {
                        v328 = CFArrayCreateMutable(allocator, 0, MEMORY[0x24BDBD690]);
                        if (v328)
                          goto LABEL_672;
                      }
                      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
                    }
                    v368 = theArray;
                    if (!*(_BYTE *)(v14 + 2) && !*(_BYTE *)(v14 + 3) && !*(_BYTE *)(v14 + 4))
                      goto LABEL_720;
                    if (v591 > 91)
                    {
                      if (v591 == 92)
                      {
                        if (!*(_BYTE *)(v14 + 2))
                          goto LABEL_720;
                        v379 = *((_QWORD *)v23 + 13);
                        if (v379)
                        {
                          v380 = (unsigned __int16 *)(v379 + 4);
                        }
                        else
                        {
                          v388 = *((_QWORD *)v23 + 21);
                          if (!v388)
                            goto LABEL_720;
                          v380 = (unsigned __int16 *)(v388 + 2);
                        }
                        v389 = *v380;
                        v586[1] = v389;
                        v586[0] = 0;
                        if (v389)
                        {
                          v390 = 0;
                          v391 = 0;
                          v392 = &v587;
                          do
                          {
                            if (v379)
                              v393 = v379 + 100 * v391 + 18368;
                            else
                              v393 = *((_QWORD *)v23 + 21) + v390 + 8;
                            *(v392 - 2) = *(_QWORD *)(v393 + 8);
                            *((_WORD *)v392 - 4) = *(_WORD *)(v393 + 18);
                            *((_DWORD *)v392 - 1) = *(_DWORD *)(v393 + 20);
                            *(_DWORD *)v392 = *(_DWORD *)(v393 + 24);
                            *((_DWORD *)v392 + 1) = *(_DWORD *)(v393 + 28);
                            *((_DWORD *)v392 + 2) = *(_DWORD *)(v393 + 32);
                            *((_DWORD *)v392 + 3) = *(_DWORD *)(v393 + 36);
                            *((_DWORD *)v392 + 4) = *(_DWORD *)(v393 + 40);
                            *((_DWORD *)v392 + 5) = *(_DWORD *)(v393 + 44);
                            ++v391;
                            v390 += 100;
                            v392 += 5;
                          }
                          while (100 * v389 != v390);
                        }
                        v375 = CFDataCreate(0, (const UInt8 *)v586, 40 * v389 + 8);
                        v368 = theArray;
                        if (!v375)
                          goto LABEL_720;
                        CFDictionarySetValue(Mutable, v503, v375);
                      }
                      else
                      {
                        if (v591 != 133 || !*(_BYTE *)(v14 + 2))
                          goto LABEL_720;
                        v376 = *((_QWORD *)v23 + 13);
                        if (v376)
                        {
                          v377 = (unsigned __int16 *)(v376 + 4);
                        }
                        else
                        {
                          v381 = *((_QWORD *)v23 + 21);
                          if (!v381)
                            goto LABEL_720;
                          v377 = (unsigned __int16 *)(v381 + 2);
                        }
                        v382 = *v377;
                        if (!v382)
                          goto LABEL_720;
                        v383 = 0;
                        v384 = 0;
                        v385 = 0;
                        do
                        {
                          if (v376)
                            v386 = v376 + 100 * v384 + 18368;
                          else
                            v386 = *((_QWORD *)v23 + 21) + v383 + 8;
                          v385 += *(_DWORD *)(v386 + 80);
                          ++v384;
                          v383 += 100;
                        }
                        while (100 * v382 != v383);
                        v387 = (double)(int)(v385 / v382) * 0.0000152587891;
                        v598 = v387;
                        v375 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                        v368 = theArray;
                        if (!v375)
                          goto LABEL_720;
                        CFDictionarySetValue(Mutable, v479, v375);
                      }
                    }
                    else if (v591 == 90)
                    {
                      if (!*(_BYTE *)(v14 + 4))
                        goto LABEL_720;
                      v378 = (const UInt8 *)*((_QWORD *)v23 + 13);
                      if (!v378)
                        goto LABEL_720;
                      v375 = CFDataCreate(0, v378, 32448);
                      v368 = theArray;
                      if (!v375)
                        goto LABEL_720;
                      CFDictionarySetValue(Mutable, v490, v375);
                    }
                    else
                    {
                      if (v591 != 91)
                        goto LABEL_720;
                      if (!*(_BYTE *)(v14 + 3))
                        goto LABEL_720;
                      v369 = *((_QWORD *)v23 + 13);
                      if (!v369)
                        goto LABEL_720;
                      v370 = *(unsigned __int16 *)(v369 + 2);
                      v584 = v370;
                      *(_DWORD *)bytes = 0;
                      if ((_DWORD)v370)
                      {
                        v371 = (uint64_t *)(v369 + 32);
                        v372 = v370;
                        v373 = &v585;
                        do
                        {
                          *(v373 - 1) = *(v371 - 3);
                          v374 = *v371;
                          v371 = (uint64_t *)((char *)v371 + 36);
                          *v373 = v374;
                          v373 += 2;
                          --v372;
                        }
                        while (v372);
                      }
                      v375 = CFDataCreate(0, bytes, (16 * v370) | 8);
                      v368 = theArray;
                      if (!v375)
                        goto LABEL_720;
                      CFDictionarySetValue(Mutable, v491, v375);
                    }
                    CFRelease(v375);
                    v368 = theArray;
LABEL_720:
                    v394 = (const UInt8 *)*((_QWORD *)v23 + 20);
                    if (v394)
                    {
                      if (v591 == 93)
                      {
                        v395 = CFDataCreate(0, v394, 1736);
                        v368 = theArray;
                        if (v395)
                        {
                          CFDictionarySetValue(Mutable, v552, v395);
                          CFRelease(v395);
                          v368 = theArray;
                        }
                      }
                    }
                    if (!v368)
                    {
                      v396 = (const UInt8 *)*((_QWORD *)v23 + 17);
                      if (v396)
                      {
                        v397 = CFDataCreate(0, v396, 16388);
                        if (v397)
                        {
                          CFDictionarySetValue(Mutable, CFSTR("TNRDebug"), v397);
                          CFRelease(v397);
                        }
                      }
                    }
                    v398 = *((_QWORD *)v23 + 1);
                    if (v398 && *(_BYTE *)(v398 + 8))
                    {
                      switch(v591)
                      {
                        case '^':
                          v399 = CFDataCreate(0, (const UInt8 *)(v398 + 12), 1024);
                          if (v399)
                          {
                            CFDictionarySetValue(Mutable, v492, v399);
                            goto LABEL_741;
                          }
                          break;
                        case '_':
                          if (*(_BYTE *)(v398 + 9))
                          {
                            v399 = CFDataCreate(0, (const UInt8 *)(v398 + 1036), 1024);
                            if (v399)
                            {
                              CFDictionarySetValue(Mutable, v455, v399);
                              goto LABEL_741;
                            }
                          }
                          break;
                          v399 = CFDataCreate(0, (const UInt8 *)(v398 + 2060), 1024);
                          if (v399)
                          {
                            CFDictionarySetValue(Mutable, v493, v399);
                            goto LABEL_741;
                          }
                          break;
                        case 'a':
                          if (*(_BYTE *)(v398 + 9))
                          {
                            v399 = CFDataCreate(0, (const UInt8 *)(v398 + 3084), 1024);
                            if (v399)
                            {
                              CFDictionarySetValue(Mutable, v456, v399);
LABEL_741:
                              CFRelease(v399);
                            }
                          }
                          break;
                        default:
                          break;
                      }
                    }
                    v400 = (int *)*((_QWORD *)v23 + 33);
                    if (v400)
                    {
                      switch(v591)
                      {
                        case 'p':
                          v401 = (double)v400[3] * 0.03125;
                          v598 = v401;
                          v402 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyTemperature1"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 'q':
                          v403 = (double)v400[4] * 0.03125;
                          v598 = v403;
                          v402 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyTemperature2"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 'r':
                          v404 = (double)v400[5] * 0.03125;
                          v598 = v404;
                          v402 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyTemperature3"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 's':
                          v405 = (double)v400[6] * 0.03125;
                          v598 = v405;
                          v402 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyTemperature4"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 't':
                          valuePtr = v400[7];
                          v402 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyVoltage1"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 'u':
                          valuePtr = v400[8];
                          v402 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyVoltage2"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 'v':
                          valuePtr = v400[9];
                          v402 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyVoltage3"), v402);
                            goto LABEL_760;
                          }
                          break;
                        case 'w':
                          valuePtr = v400[10];
                          v402 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v402)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("PowerSupplyVoltage4"), v402);
LABEL_760:
                            CFRelease(v402);
                          }
                          break;
                        default:
                          break;
                      }
                    }
                    if (++v90 == v569)
                      goto LABEL_81;
                    break;
                }
              }
              switch(v591)
              {
                case 2:
                  CFDictionarySetValue(Mutable, v443, CFSTR("AppleH9CameraInterface"));
                  goto LABEL_204;
                case 3:
                  valuePtr = *(_DWORD *)v103;
                  v105 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v105)
                  {
                    CFDictionarySetValue(Mutable, v423, v105);
                    CFRelease(v105);
                  }
                  goto LABEL_204;
                case 4:
                case 5:
                case 27:
                case 28:
                case 29:
                  goto LABEL_204;
                case 6:
                  valuePtr = *((_DWORD *)v103 + 5);
                  v106 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v106)
                  {
                    CFDictionarySetValue(Mutable, v424, v106);
                    CFRelease(v106);
                  }
                  goto LABEL_204;
                case 7:
                  LODWORD(v24) = *((_DWORD *)v103 + 5);
                  LOWORD(v25) = v103[29];
                  LOWORD(v26) = v103[207];
                  *(float *)&v107 = (float)LODWORD(v26);
                  v108 = (float)((float)LODWORD(v25) / *(float *)&v107);
                  v109 = (double)*(unint64_t *)&v24 * v108;
                  LOWORD(v108) = v103[205];
                  LOWORD(v107) = v103[13];
                  valuePtr = (v109 * (float)((float)LODWORD(v108) / (float)v107));
                  v110 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  if (v110)
                  {
                    CFDictionarySetValue(Mutable, v425, v110);
                    CFRelease(v110);
                  }
                  goto LABEL_204;
                case 8:
                  LODWORD(v24) = *((_DWORD *)v103 + 12);
                  v597 = (double)*(unint64_t *)&v24 * 0.00390625;
                  v111 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                  if (v111)
                  {
                    CFDictionarySetValue(Mutable, v426, v111);
                    CFRelease(v111);
                  }
                  goto LABEL_204;
                case 9:
                  valuePtr = *((unsigned __int8 *)v103 + 42);
                  v112 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v112)
                  {
                    CFDictionarySetValue(Mutable, v427, v112);
                    CFRelease(v112);
                  }
                  goto LABEL_204;
                case 10:
                  valuePtr = *((unsigned __int8 *)v103 + 72);
                  v113 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v113)
                  {
                    CFDictionarySetValue(Mutable, v525, v113);
                    CFRelease(v113);
                  }
                  goto LABEL_204;
                case 11:
                  valuePtr = v103[12];
                  v114 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v114)
                  {
                    CFDictionarySetValue(Mutable, v428, v114);
                    CFRelease(v114);
                  }
                  goto LABEL_204;
                case 12:
                  valuePtr = v103[13];
                  v115 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v115)
                  {
                    CFDictionarySetValue(Mutable, v429, v115);
                    CFRelease(v115);
                  }
                  goto LABEL_204;
                case 13:
                  LOWORD(v24) = v103[26];
                  v616.origin.x = (double)*(unint64_t *)&v24;
                  LOWORD(v25) = v103[27];
                  v616.origin.y = (double)*(unint64_t *)&v25;
                  LOWORD(v26) = v103[28];
                  v616.size.width = (double)*(unint64_t *)&v26;
                  LOWORD(v27) = v103[29];
                  v616.size.height = (double)v27;
                  v116 = CGRectCreateDictionaryRepresentation(v616);
                  if (v116)
                  {
                    CFDictionarySetValue(Mutable, v430, v116);
                    CFRelease(v116);
                  }
                  goto LABEL_204;
                case 14:
                  v117 = (H9ISP *)v103[254];
                  v118 = v103[26];
                  v119 = v103[255];
                  v120 = v103[27];
                  v121 = v103[28];
                  v122 = v103[29];
                  v123 = v103[206];
                  if (v103[12] == v123)
                  {
                    v124 = v103[207];
                    if (v103[13] == v124)
                    {
                      v617.origin.x = (double)(int)(v118 + (_DWORD)v117);
                      v617.origin.y = (double)(int)(v120 + v119);
                      v617.size.width = (double)v121;
                      v617.size.height = (double)v122;
                      v125 = CGRectCreateDictionaryRepresentation(v617);
                      if (!v125)
                        goto LABEL_204;
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    v124 = v103[207];
                  }
                  info.numer = 0;
                  LODWORD(v590) = 0;
                  LODWORD(v589) = 0;
                  LODWORD(v588) = 0;
                  H9ISP::CalculateTotalCrop(v117, v119, v103[202], v103[203], v103[204], v103[205], v123, v124, v118, v120, v121, v122, &info, (unsigned int *)&v590, (unsigned int *)&v589, (unsigned int *)&v588, v407);
                  LODWORD(v143) = info.numer;
                  v618.origin.x = (double)v143;
                  LODWORD(v144) = LODWORD(v590);
                  v618.origin.y = (double)v144;
                  LODWORD(v145) = v589;
                  v618.size.width = (double)v145;
                  LODWORD(v146) = LODWORD(v588);
                  v618.size.height = (double)v146;
                  v125 = CGRectCreateDictionaryRepresentation(v618);
                  if (!v125)
                  {
LABEL_204:
                    v147 = *(unsigned __int16 **)v23;
                    v148 = *(_DWORD *)(*(_QWORD *)v23 + 504);
                    if (v148 < 0)
                    {
                      switch(v591)
                      {
                        case 'e':
                          valuePtr = v148 & 0xFFFFFF;
                          v152 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v152)
                          {
                            CFDictionarySetValue(Mutable, v445, v152);
                            CFRelease(v152);
                          }
                          break;
                        case 'f':
                          if (*((_BYTE *)v147 + 339))
                            CFDictionarySetValue(Mutable, v475, v549);
                          else
                            CFDictionarySetValue(Mutable, v475, v539);
                          break;
                        case 'g':
                          LOWORD(v24) = v147[272];
                          v159 = (double)*(unint64_t *)&v24 * 0.0009765625;
                          v598 = v159;
                          v160 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v160)
                          {
                            CFDictionarySetValue(Mutable, v446, v160);
                            CFRelease(v160);
                          }
                          break;
                        case 'h':
                          LOWORD(v24) = v147[273];
                          v161 = (double)*(unint64_t *)&v24 * 0.0009765625;
                          v598 = v161;
                          v162 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v162)
                          {
                            CFDictionarySetValue(Mutable, v447, v162);
                            CFRelease(v162);
                          }
                          break;
                        default:
                          if (v591 == 129)
                          {
                            if (*((_BYTE *)v147 + 604))
                            {
                              valuePtr = *((_DWORD *)v147 + 149);
                              v153 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                              if (v153)
                              {
                                CFDictionarySetValue(Mutable, v435, v153);
                                CFRelease(v153);
                              }
                            }
                          }
                          break;
                      }
                    }
                    v149 = *(int **)v23;
                    if (!*(_DWORD *)(*(_QWORD *)v23 + 592))
                      goto LABEL_235;
                    if (v591 > 120)
                    {
                      switch(v591)
                      {
                        case 121:
                          v150 = (float)v149[132] * 0.0000152587891 * 1000.0;
                          v598 = v150;
                          v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v151)
                          {
                            CFDictionarySetValue(Mutable, v449, v151);
                            goto LABEL_234;
                          }
                          break;
                        case 122:
                          v598 = (float)v149[133] * 0.000015259;
                          v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v151)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("APSTemperature"), v151);
                            goto LABEL_234;
                          }
                          break;
                        case 123:
                          v598 = (float)v149[135] * 0.0039062;
                          v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v151)
                          {
                            CFDictionarySetValue(Mutable, CFSTR("APSPositionOffset"), v151);
                            goto LABEL_234;
                          }
                          break;
                        case 131:
                          v598 = (float)v149[134] * 0.000015259;
                          v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v151)
                          {
                            CFDictionarySetValue(Mutable, v450, v151);
                            goto LABEL_234;
                          }
                          break;
                        case 132:
                          v154 = (float)v149[152] * 0.0000152587891 * 1000.0;
                          v598 = v154;
                          v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                          if (v151)
                          {
                            CFDictionarySetValue(Mutable, v451, v151);
                            goto LABEL_234;
                          }
                          break;
                        default:
                          goto LABEL_235;
                      }
                      goto LABEL_235;
                    }
                    switch(v591)
                    {
                      case 'i':
                        v598 = (float)v149[129] * 0.0039062;
                        v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                        if (v151)
                        {
                          CFDictionarySetValue(Mutable, v448, v151);
LABEL_234:
                          CFRelease(v151);
                        }
                        break;
                      case 'j':
                        v155 = (float)v149[131] * 0.0000152587891 * 1000.0;
                        v598 = v155;
                        v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                        if (v151)
                        {
                          CFDictionarySetValue(Mutable, v537, v151);
                          goto LABEL_234;
                        }
                        break;
                      case 'k':
                        v598 = (float)v149[130] * 0.0039062;
                        v151 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                        if (!v151)
                          break;
                        CFDictionarySetValue(Mutable, v519, v151);
                        goto LABEL_234;
                      default:
                        break;
                    }
LABEL_235:
                    if (v572)
                    {
                      if (v591 == 5)
                      {
                        info.numer = 0;
                        LODWORD(v590) = 0;
                        LODWORD(v589) = 0;
                        LODWORD(v588) = 0;
                        H9ISP::CalculateTotalCrop((H9ISP *)*(unsigned __int16 *)(*(_QWORD *)v23 + 508), *(unsigned __int16 *)(*(_QWORD *)v23 + 510), *(unsigned __int16 *)(*(_QWORD *)v23 + 404), *(unsigned __int16 *)(*(_QWORD *)v23 + 406), *(unsigned __int16 *)(*(_QWORD *)v23 + 408), *(unsigned __int16 *)(*(_QWORD *)v23 + 410), *(unsigned __int16 *)(*(_QWORD *)v23 + 412), *(unsigned __int16 *)(*(_QWORD *)v23 + 414), *(unsigned __int16 *)(*(_QWORD *)v23 + 52), *(unsigned __int16 *)(*(_QWORD *)v23 + 54), *(unsigned __int16 *)(*(_QWORD *)v23 + 56), *(unsigned __int16 *)(*(_QWORD *)v23 + 58), &info, (unsigned int *)&v590, (unsigned int *)&v589, (unsigned int *)&v588, v407);
                        v157 = *(int *)(*(_QWORD *)v23 + 340);
                        if (v157 < 0xC && ((0xC93u >> v157) & 1) != 0)
                        {
                          v158 = dbl_235830EE8[v157];
                        }
                        else
                        {
                          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unexpected binning mode 0x%08x \n", *(_DWORD *)(*(_QWORD *)v23 + 340));
                          v158 = 1.0;
                        }
                        v163 = v158
                             * (v158
                              * sqrt((double)(v589 * v589 + LODWORD(v588) * LODWORD(v588))))
                             / sqrt((double)(unint64_t)(*(_QWORD *)(v572 + 48) * *(_QWORD *)(v572 + 48)
                                                             + *(_QWORD *)(v572 + 56) * *(_QWORD *)(v572 + 56)));
                        v164 = tan(*(double *)v572 * 0.5 * 0.0174532925);
                        v165 = atan(v164 * v163);
                        v166 = tan(v165 * 114.591559 * 3.14159265 / 180.0 * 0.5);
                        v597 = 42.4381903 / (v166 + v166);
                        v167 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (v167)
                        {
                          CFDictionarySetValue(Mutable, v514, v167);
                          CFRelease(v167);
                        }
                      }
                      else if (v591 == 4)
                      {
                        v597 = *(double *)(v572 + 16);
                        v156 = CFNumberCreate(0, kCFNumberDoubleType, &v597);
                        if (v156)
                        {
                          CFDictionarySetValue(Mutable, v515, v156);
                          CFRelease(v156);
                        }
                      }
                    }
                    if (*(_BYTE *)(v14 + 5))
                    {
                      switch(v591)
                      {
                        case 29:
                          switch(*(_DWORD *)(*(_QWORD *)v23 + 428))
                          {
                            case 0:
                              CFDictionarySetValue(Mutable, v518, v420);
                              break;
                            case 1:
                              CFDictionarySetValue(Mutable, v518, v417);
                              break;
                            case 2:
                              CFDictionarySetValue(Mutable, v518, v416);
                              break;
                            case 3:
                              CFDictionarySetValue(Mutable, v518, v418);
                              break;
                            case 4:
                              CFDictionarySetValue(Mutable, v518, v421);
                              break;
                            case 5:
                              if (*(_DWORD *)(*(_QWORD *)v23 + 464))
                                CFDictionarySetValue(Mutable, v518, v412);
                              else
                                CFDictionarySetValue(Mutable, v518, v407);
                              break;
                            case 7:
                              CFDictionarySetValue(Mutable, v518, v419);
                              break;
                            default:
                              snprintf((char *)&info, 0x26uLL, "UnknownMode(%d)", *(_DWORD *)(*(_QWORD *)v23 + 428));
                              v185 = CFStringCreateWithCString(0, (const char *)&info, 0);
                              CFDictionarySetValue(Mutable, v518, v185);
                              CFRelease(v185);
                              break;
                          }
                          break;
                        case 28:
                          valuePtr = *(_DWORD *)(*(_QWORD *)v23 + 424);
                          v174 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                          if (v174)
                          {
                            CFDictionarySetValue(Mutable, v501, v174);
                            CFRelease(v174);
                          }
                          break;
                        case 27:
                          v168 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                          if (v168)
                          {
                            valuePtr = *(_DWORD *)(*(_QWORD *)v23 + 448);
                            v169 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                            if (v169)
                            {
                              CFDictionarySetValue(v168, v465, v169);
                              CFRelease(v169);
                            }
                            valuePtr = *(_DWORD *)(*(_QWORD *)v23 + 452);
                            v170 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                            if (v170)
                            {
                              CFDictionarySetValue(v168, v464, v170);
                              CFRelease(v170);
                            }
                            v601 = *(_WORD *)(*(_QWORD *)v23 + 456);
                            v171 = CFNumberCreate(0, kCFNumberSInt16Type, &v601);
                            if (v171)
                            {
                              CFDictionarySetValue(v168, v463, v171);
                              CFRelease(v171);
                            }
                            valuePtr = *(_DWORD *)(*(_QWORD *)v23 + 484);
                            v172 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                            if (v172)
                            {
                              CFDictionarySetValue(v168, v462, v172);
                              CFRelease(v172);
                            }
                            valuePtr = *(_DWORD *)(*(_QWORD *)v23 + 488);
                            v173 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                            if (v173)
                            {
                              CFDictionarySetValue(v168, v461, v173);
                              CFRelease(v173);
                            }
                            CFDictionarySetValue(Mutable, v498, v168);
                            CFRelease(v168);
                          }
                          break;
                      }
                    }
                    goto LABEL_272;
                  }
LABEL_164:
                  CFDictionarySetValue(Mutable, v422, v125);
                  CFRelease(v125);
                  goto LABEL_204;
                case 15:
                  LOWORD(v24) = v103[222];
                  v126 = (double)*(unint64_t *)&v24 * 0.0009765625;
                  v598 = v126;
                  v127 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                  if (v127)
                  {
                    CFDictionarySetValue(Mutable, v431, v127);
                    CFRelease(v127);
                  }
                  goto LABEL_204;
                case 16:
                  LOWORD(v24) = v103[223];
                  v128 = (double)*(unint64_t *)&v24 * 0.0009765625;
                  v598 = v128;
                  v129 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                  if (v129)
                  {
                    CFDictionarySetValue(Mutable, v432, v129);
                    CFRelease(v129);
                  }
                  goto LABEL_204;
                case 17:
                  v130 = v103[168];
                  if (v130)
                    v131 = v130 == 0xFFFF;
                  else
                    v131 = 1;
                  if (!v131)
                  {
                    valuePtr = v130;
                    v132 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                    if (v132)
                    {
                      CFDictionarySetValue(Mutable, v411, v132);
                      CFRelease(v132);
                    }
                  }
                  goto LABEL_204;
                case 18:
                  valuePtr = *((_DWORD *)v103 + 87);
                  v133 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v133)
                  {
                    CFDictionarySetValue(Mutable, v529, v133);
                    CFRelease(v133);
                  }
                  goto LABEL_204;
                case 19:
                  valuePtr = *((_DWORD *)v103 + 88);
                  v134 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v134)
                  {
                    CFDictionarySetValue(Mutable, v528, v134);
                    CFRelease(v134);
                  }
                  goto LABEL_204;
                case 20:
                  valuePtr = *((_DWORD *)v103 + 89);
                  v135 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v135)
                  {
                    CFDictionarySetValue(Mutable, v527, v135);
                    CFRelease(v135);
                  }
                  goto LABEL_204;
                case 21:
                  valuePtr = *((_DWORD *)v103 + 90);
                  v136 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v136)
                  {
                    CFDictionarySetValue(Mutable, v530, v136);
                    CFRelease(v136);
                  }
                  goto LABEL_204;
                case 22:
                  LOWORD(v24) = v103[194];
                  v137 = (double)*(unint64_t *)&v24 * 0.00390625;
                  v598 = v137;
                  v138 = CFNumberCreate(0, kCFNumberFloatType, &v598);
                  if (v138)
                  {
                    CFDictionarySetValue(Mutable, v531, v138);
                    CFRelease(v138);
                  }
                  goto LABEL_204;
                case 23:
                  CFDictionarySetValue(Mutable, v444, v539);
                  goto LABEL_204;
                case 24:
                  if (!theArray)
                    goto LABEL_189;
                  v614.location = 0;
                  v614.length = range;
                  if (CFArrayContainsValue(theArray, v614, v452))
                  {
                    v103 = *(unsigned __int16 **)v23;
LABEL_189:
                    v139 = *((_DWORD *)v103 + 99);
                    switch(v139)
                    {
                      case 2:
                        CFDictionarySetValue(Mutable, v452, v410);
                        break;
                      case 1:
                        CFDictionarySetValue(Mutable, v452, v409);
                        break;
                      case 0:
                        CFDictionarySetValue(Mutable, v452, v408);
                        break;
                    }
                  }
                  goto LABEL_204;
                case 25:
                  valuePtr = v103[193];
                  v140 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v140)
                  {
                    CFDictionarySetValue(Mutable, v433, v140);
                    CFRelease(v140);
                  }
                  goto LABEL_204;
                case 26:
                  valuePtr = *((_DWORD *)v103 + 105);
                  v141 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v141)
                  {
                    CFDictionarySetValue(Mutable, v526, v141);
                    CFRelease(v141);
                  }
                  goto LABEL_204;
                case 30:
                  valuePtr = *((_DWORD *)v103 + 94);
                  v142 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                  if (v142)
                  {
                    CFDictionarySetValue(Mutable, v434, v142);
                    CFRelease(v142);
                  }
                  goto LABEL_204;
                default:
                  if (v591 == 135)
                  {
                    LOWORD(v24) = v103[254];
                    v615.origin.x = (double)*(unint64_t *)&v24;
                    LOWORD(v25) = v103[255];
                    v615.origin.y = (double)*(unint64_t *)&v25;
                    LOWORD(v26) = v103[256];
                    v615.size.width = (double)*(unint64_t *)&v26;
                    LOWORD(v27) = v103[257];
                    v615.size.height = (double)v27;
                    v104 = CGRectCreateDictionaryRepresentation(v615);
                    if (v104)
                    {
                      CFDictionarySetValue(Mutable, v414, v104);
                      CFRelease(v104);
                    }
                  }
                  goto LABEL_204;
              }
            }
LABEL_44:
            v612.location = 0;
            v612.length = range;
            if (!CFArrayContainsValue(v30, v612, *v32))
            {
              v613.location = 0;
              v613.length = range;
              v47 = CFArrayContainsValue(theArray, v613, (const void *)*MEMORY[0x24BE10C90]);
              v48 = theArray;
              if (!v47)
                goto LABEL_80;
            }
            goto LABEL_46;
          }
        }
        cf = 0;
        goto LABEL_25;
      }
    }
    else
    {
      v9 = 3758097113;
    }
LABEL_116:
    kdebug_trace();
  }
  return v9;
}

void sub_2358260C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B7D8B08](v1, 0x1020C40D32E3BE5);
  _Unwind_Resume(a1);
}

uint64_t H9ISPFlickerDetectorCreate(void)
{
  _DWORD *v0;
  uint64_t v1;
  FILE **v2;
  OpaqueAudioComponent *Next;
  OSStatus v4;
  int v5;
  FILE *v6;
  const char *v7;
  FILE *v8;
  const char *v9;
  size_t v10;
  OSStatus v11;
  OSStatus Property;
  OSStatus v14;
  OSStatus v15;
  OSStatus v16;
  OSStatus v17;
  size_t v18;
  unsigned int v19;
  int v20;
  size_t v21;
  unsigned int v22;
  void *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  void *v27;
  _DWORD *v28;
  FFTSetup fftsetup;
  FILE **v30;
  FILE *v31;
  uint64_t v32;
  _QWORD v33[2];
  UInt32 ioDataSize;
  uint64_t inData;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  AudioComponentDescription inDesc;

  v0 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10A0040A7716A93uLL);
  v1 = (uint64_t)v0;
  v2 = (FILE **)MEMORY[0x24BDAC8D8];
  if (v0)
  {
    v0[12] = 4096;
    *((_QWORD *)v0 + 21) = 0;
    *((_QWORD *)v0 + 22) = 0;
    *((_QWORD *)v0 + 20) = 0;
    *(_OWORD *)&inDesc.componentType = xmmword_235830F50;
    inDesc.componentFlagsMask = 0;
    Next = AudioComponentFindNext(0, &inDesc);
    if (!Next)
    {
      v5 = -536870212;
      v8 = *v2;
      v9 = "AudioComponentFindNext: no component found \n";
      v10 = 44;
LABEL_7:
      fwrite(v9, v10, 1uLL, v8);
LABEL_14:
      fprintf(*v2, "PrepareAudioCaptureSession returned 0x%08x\n", v5);
      H9ISPFlickerDetectorDispose(v1);
      return 0;
    }
    v4 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)v1);
    if (v4)
    {
      v5 = -536870212;
      v6 = *v2;
      v32 = v4;
      v7 = "AudioComponentInstanceNew returned 0x%08lx\n";
LABEL_13:
      fprintf(v6, v7, v32);
      goto LABEL_14;
    }
    v38 = 32;
    inData = 0x40E7700000000000;
    v37 = 0x100000004;
    v36 = xmmword_235830F60;
    v11 = AudioUnitSetProperty(*(AudioUnit *)v1, 8u, 1u, 0, &inData, 0x28u);
    if (v11)
    {
      v7 = "Set Input IO Format on AURemoteIO returned 0x%08lx \n";
LABEL_12:
      v5 = -536870212;
      v6 = *v2;
      v32 = v11;
      goto LABEL_13;
    }
    v11 = AudioUnitSetProperty(*(AudioUnit *)v1, 0xEu, 0, 0, (const void *)(v1 + 48), 4u);
    if (v11)
    {
      v7 = "Set Max Frames Per Slice on AURemoteIO returned 0x%08lx\n ";
      goto LABEL_12;
    }
    ioDataSize = 4;
    Property = AudioUnitGetProperty(*(AudioUnit *)v1, 0xEu, 0, 0, (void *)(v1 + 48), &ioDataSize);
    if (Property)
    {
      v5 = -536870212;
      v6 = *v2;
      v32 = Property;
      v7 = "Get Maximum Frames Per Slice on AURemoteIO returned 0x%08lx \n";
      goto LABEL_13;
    }
    v33[0] = inputCallback;
    v33[1] = v1;
    v14 = AudioUnitSetProperty(*(AudioUnit *)v1, 0x7D5u, 1u, 0, v33, 0x10u);
    if (v14)
    {
      v5 = -536870212;
      v6 = *v2;
      v32 = v14;
      v7 = "Set Render Callback on AURemoteIO returned 0x%08lx \n";
      goto LABEL_13;
    }
    v15 = AudioUnitInitialize(*(AudioUnit *)v1);
    if (v15)
    {
      v16 = v15;
      fprintf(*v2, "AudioUnitInitialize returned 0x%08lx\n", v15);
      if (v16 == 1852794999)
      {
        v5 = -536870212;
        v8 = *v2;
        v9 = "AudioUnitInitialize :  kAudioServicesNoHardwareError \n";
        v10 = 54;
        goto LABEL_7;
      }
    }
    ioDataSize = 40;
    v17 = AudioUnitGetProperty(*(AudioUnit *)v1, 8u, 1u, 0, (void *)(v1 + 8), &ioDataSize);
    if (v17)
    {
      v5 = -536870212;
      v6 = *v2;
      v32 = v17;
      v7 = "Get input stream format on AURemoteIO returned 0x%08lx \n";
      goto LABEL_13;
    }
    if (bcmp((const void *)(v1 + 8), &inData, 0x28uLL))
    {
      v5 = -536870212;
      v8 = *v2;
      v9 = "Retrieved format mismatches desired data format! \n";
      v10 = 50;
      goto LABEL_7;
    }
    if ((*(_BYTE *)(v1 + 20) & 1) != 0 && *(_DWORD *)(v1 + 32) != 4)
    {
      v5 = -536870212;
      fprintf(*v2, "Retrieved format will use %d bytes per frame for float data type! \n");
      goto LABEL_14;
    }
    v18 = (unint64_t)*(unsigned int *)(v1 + 40) >> 3;
    v19 = (*(double *)(v1 + 8) * 0.25);
    *(_DWORD *)(v1 + 60) = v18 * v19;
    v20 = (int)(log2((double)((double)v19 * 3000.0 / 48000.0)) + 1.0);
    *(_DWORD *)(v1 + 136) = v20;
    v21 = ldexp(1.0, v20);
    v22 = ((double)v21 * 48000.0 / 3000.0);
    *(_DWORD *)(v1 + 60) = v18 * v22;
    v23 = malloc_type_calloc(v22, v18, 0x7D623350uLL);
    *(_QWORD *)(v1 + 64) = v23;
    if (v23)
    {
      *(_DWORD *)(v1 + 84) = v18 * v21;
      v24 = malloc_type_calloc(v21, v18, 0x34D0E50EuLL);
      *(_QWORD *)(v1 + 88) = v24;
      if (v24)
      {
        v25 = ((double)v22 * 12000.0 / 48000.0);
        *(_DWORD *)(v1 + 100) = v18 * v25;
        v26 = malloc_type_calloc(v25, v18, 0x92AC4E0DuLL);
        *(_QWORD *)(v1 + 104) = v26;
        if (v26)
        {
          v27 = malloc_type_calloc((v21 + 2), v18, 0x3A2E3CB4uLL);
          *(_QWORD *)(v1 + 120) = v27;
          if (v27)
          {
            v28 = malloc_type_calloc(1uLL, 0xCCuLL, 0x100004005C82046uLL);
            *(_QWORD *)(v1 + 128) = v28;
            if (v28)
            {
              v28[2] = 0;
              *(_QWORD *)v28 = 3;
              fftsetup = vDSP_create_fftsetup(*(int *)(v1 + 136), 0);
              *(_QWORD *)(v1 + 144) = fftsetup;
              if (fftsetup)
              {
                v30 = (FILE **)MEMORY[0x24BDAC8E8];
                fwrite("PrepareAudioCaptureSession: buffers allocated  \n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8E8]);
                fprintf(*v30, "    nAccumulatedSamples: %6d    (%6zd bytes)     \n    nResampledSamples:   %6d    (%6zd bytes)     \n    nResampledSamplesWM: %6d    (%6zd bytes)     \n    fftBins:             %6d                     \n    Hardware Sample Rate          %8.2f (Hz)            \n    Peak Detector Sample Rate     %8.2f (Hz)            \n    Waveform Analyzer Sample Rate %8.2f (Hz)            \n    Analysis Interval:            %8.5f (sec)  (target) \n                                  %8.5f (sec)  (actual) \n\n", v22, *(unsigned int *)(v1 + 60), v21, *(unsigned int *)(v1 + 84), v25, *(unsigned int *)(v1 + 100), *(_DWORD *)(v1 + 136), 48000.0,
                  3000.0,
                  12000.0,
                  0.25,
                  (double)v21 / 3000.0);
                return v1;
              }
              v2 = (FILE **)MEMORY[0x24BDAC8D8];
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unable to create fft setup : bins == %d \n", *(_DWORD *)(v1 + 136));
              v5 = -536870210;
              goto LABEL_14;
            }
            v2 = (FILE **)MEMORY[0x24BDAC8D8];
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unable to allocate pAlgorithmHistory: nAccumulatedSamples==%d, sampleSizeBytes==%zd \n", v22, v18);
          }
          else
          {
            v2 = (FILE **)MEMORY[0x24BDAC8D8];
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unable to allocate fftBuffer: nFFTBufferSamples==%zd, sampleSizeBytes==%zd \n", (v21 + 2), v18);
            *(_DWORD *)(v1 + 116) = 0;
          }
          goto LABEL_42;
        }
        v31 = *v2;
      }
      else
      {
        v31 = *v2;
      }
      fprintf(v31, "Unable to allocate resampling buffer: nResampledSamples==%d, sampleSizeBytes==%zd \n");
    }
    else
    {
      fprintf(*v2, "Unable to allocate accumulator buffer: nAccumulatedSamples==%d, sampleSizeBytes==%zd \n");
    }
    *(_DWORD *)(v1 + 60) = 0;
LABEL_42:
    v5 = -536870211;
    goto LABEL_14;
  }
  fwrite("Unable to allocate memory\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  return v1;
}

uint64_t H9ISPFlickerDetectorDispose(uint64_t a1)
{
  void *v2;
  void *v3;
  OpaqueFFTSetup *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!a1)
    return 3758097090;
  StopAudioCaptureSession((AudioUnit *)a1);
  if (*(_QWORD *)a1)
  {
    AudioComponentInstanceDispose(*(AudioComponentInstance *)a1);
    *(_QWORD *)a1 = 0;
  }
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v4 = *(OpaqueFFTSetup **)(a1 + 144);
  if (v4)
  {
    vDSP_destroy_fftsetup(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v6 = *(void **)(a1 + 120);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v7 = *(void **)(a1 + 128);
  if (v7)
    free(v7);
  free((void *)a1);
  return 0;
}

uint64_t StopAudioCaptureSession(AudioUnit *a1)
{
  uint64_t result;

  result = AudioOutputUnitStop(*a1);
  if ((_DWORD)result)
    return fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AudioOutputUnitStop returned 0x%08lx\n", (int)result);
  return result;
}

uint64_t H9ISPFlickerDetectorStartDataCollection(AudioUnit *a1)
{
  uint64_t result;

  if (!a1)
    return 3758097090;
  result = AudioOutputUnitStart(*a1);
  if ((_DWORD)result)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AudioOutputUnitStart returned 0x%08lx\n", (int)result);
    return 0;
  }
  return result;
}

uint64_t H9ISPFlickerDetectorStopDataCollection(AudioUnit *a1)
{
  if (!a1)
    return 3758097090;
  StopAudioCaptureSession(a1);
  return 0;
}

uint64_t H9ISPFlickerDetectorSetGain(AudioUnit *a1, float a2)
{
  uint64_t v2;
  OSStatus v3;
  float inData;

  v2 = 3758097090;
  inData = a2;
  if (a1)
  {
    v3 = AudioUnitSetProperty(*a1, 0x7E6u, 1u, 1u, &inData, 4u);
    if (v3)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Set Volume Scalar returned 0x%08lx\n ", v3);
      return 3758097097;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t H9ISPFlickerDetectorGetGain(AudioUnit *a1, void *outData)
{
  uint64_t v2;
  OSStatus Property;
  UInt32 ioDataSize;

  v2 = 3758097090;
  if (a1 && outData)
  {
    ioDataSize = 4;
    Property = AudioUnitGetProperty(*a1, 0x7E6u, 1u, 1u, outData, &ioDataSize);
    if (Property)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Get Volume Scalar returned 0x%08lx\n ", Property);
      return 3758097097;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t H9ISPFlickerDetectorRegisterDataCollectionCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    *(_QWORD *)(a1 + 168) = a3;
    *(_QWORD *)(a1 + 176) = a2;
  }
  return 0;
}

uint64_t inputCallback(unsigned int *a1, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, unsigned int a4, UInt32 inNumberFrames, AudioBufferList *a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  FILE *v16;
  char *v17;
  char *v18;
  vDSP_Length v19;
  vDSP_Length v20;
  int v21;
  float v22;
  double v28;
  void (*v29)(unsigned int *, _QWORD, char *);
  H9ISPMetrics *v30;
  int v32;
  AudioBufferList ioData;
  _OWORD __F[5];
  uint64_t v35;
  int v36;
  float32x2_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v10 = (_QWORD *)*((_QWORD *)a1 + 20);
    if (v10)
      H9ISPMetrics::StartTimer(v10);
    v11 = *((_QWORD *)a1 + 8);
    if (v11)
    {
      v12 = (a1[10] >> 3) * inNumberFrames;
      v13 = *((_QWORD *)a1 + 9);
      ioData.mBuffers[0].mData = (void *)(v11 + v13);
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mDataByteSize = v12;
      if (v13 + v12 <= (unint64_t)a1[15])
      {
        v15 = AudioUnitRender(*(AudioUnit *)a1, ioActionFlags, inTimeStamp, 1u, inNumberFrames, &ioData);
        if ((_DWORD)v15)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AudioUnitRender - status 0x%08x \n", v15);
        v16 = (FILE *)*((_QWORD *)a1 + 19);
        if (v16)
        {
          fwrite(ioData.mBuffers[0].mData, 1uLL, ioData.mBuffers[0].mDataByteSize, v16);
          fflush(*((FILE **)a1 + 19));
        }
        v14 = *((_QWORD *)a1 + 9) + ioData.mBuffers[0].mDataByteSize;
      }
      else
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AudioUnit Input Callback: accumulatedSize=%zd inputBufferByteSize=%d\n", v13, v12);
        v14 = 0;
        v15 = 0;
      }
      *((_QWORD *)a1 + 9) = v14;
      if (v14 == a1[15])
      {
        v17 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x100004092CCFFCCuLL);
        if (v17)
        {
          v18 = v17;
          v40 = 2143289344;
          v39 = 0x7FC000007FC00000;
          v38 = 2143289344;
          v37 = (float32x2_t)0x7FC000007FC00000;
          v32 = 2143289344;
          v36 = 0;
          v35 = 0;
          v19 = (unint64_t)a1[21] >> 2;
          __F[2] = xmmword_235830FE0;
          __F[3] = unk_235830FF0;
          __F[4] = xmmword_235831000;
          __F[0] = xmmword_235830FC0;
          __F[1] = unk_235830FD0;
          vDSP_desamp(*((const float **)a1 + 8), 16, (const float *)__F, *((float **)a1 + 11), v19, 0x10uLL);
          analyze_flicker(*((DSPComplex **)a1 + 11), a1[34], 3000.0, (float *)&v39, (float *)&v37, *((float **)a1 + 15), (OpaqueFFTSetup **)a1 + 18);
          v20 = (unint64_t)a1[25] >> 2;
          __F[0] = xmmword_235830F70;
          vDSP_desamp(*((const float **)a1 + 8), 4, (const float *)__F, *((float **)a1 + 13), v20, 4uLL);
          waveMatching(*((const float **)a1 + 13), v20, 12000.0, (float *)&v39, (float *)&v35, 3u);
          v21 = flicker_temporal_filter((float *)&v32, *((_DWORD **)a1 + 16), *(float *)&v39, v37.f32[0], *(float *)&v35);
          *(_DWORD *)v18 = v21;
          v22 = *(float *)(*((_QWORD *)a1 + 16)
                         + 4
                         * ((*(_DWORD *)(*((_QWORD *)a1 + 16) + 8) + **((_DWORD **)a1 + 16) - 1)
                          % **((_DWORD **)a1 + 16))
                         + 140);
          *(float *)&v35 = v22;
          if (v21 != 3)
          {
            if (v21 == 1)
            {
              if (v22 > 0.4)
                v21 = 1;
              else
                v21 = 2;
            }
            else
            {
              v21 = 2;
            }
          }
          __asm { FMOV            V2.2D, #0.5 }
          *(float64x2_t *)(v18 + 8) = vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(HIDWORD(v39), v32)), _Q2);
          *(float64x2_t *)(v18 + 24) = vcvtq_f64_f32(vminnm_f32(v37, (float32x2_t)vdup_n_s32(0x477FFF00u)));
          v28 = fminf(*((float *)&v35 + 1), 65535.0);
          *((double *)v18 + 5) = fminf(v22, 65535.0);
          *((double *)v18 + 6) = v28;
          *((_DWORD *)v18 + 1) = v21;
          *((_DWORD *)v18 + 14) = 2;
          v29 = (void (*)(unsigned int *, _QWORD, char *))*((_QWORD *)a1 + 21);
          if (v29)
            v29(a1, *((_QWORD *)a1 + 22), v18);
          else
            free(v18);
        }
        *((_QWORD *)a1 + 9) = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    v30 = (H9ISPMetrics *)*((_QWORD *)a1 + 20);
    if (v30)
      H9ISPMetrics::StopTimer(v30);
  }
  else
  {
    fwrite("performRender - invalid context \n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    return 0xFFFFFFFFLL;
  }
  return v15;
}

void analyze_flicker(DSPComplex *a1, int a2, float a3, float *a4, float *a5, float *a6, OpaqueFFTSetup **a7)
{
  int v13;
  int v14;
  vDSP_Length v15;
  float *imagp;
  vDSP_Length v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  vDSP_Length v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  int v39;
  double v40;
  float v41;
  float *v42;
  int v43;
  float v44;
  float v45;
  double v46;
  int v47;
  float v48;
  int v49;
  double v50;
  float *v51;
  int v52;
  double v53;
  int v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  vDSP_Length v72;
  float v73;
  DSPSplitComplex __Z;
  _OWORD v75[4];
  vDSP_Length __I;
  vDSP_Length v77[2];
  uint64_t __C;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v13 = (1 << a2) / 2;
  v14 = v13 + 1;
  v15 = (uint64_t)((1 << a2) + (1 << a2 < 0)) >> 1;
  __Z.realp = a6;
  __Z.imagp = &a6[v13 + 1];
  vDSP_ctoz(a1, 2, &__Z, 1, v15);
  vDSP_fft_zrip(*a7, &__Z, 1, a2, 1);
  imagp = __Z.imagp;
  __Z.realp[v13] = *__Z.imagp;
  imagp[v13] = 0.0;
  *imagp = 0.0;
  v17 = v13 + 1;
  vDSP_zvabs(&__Z, 1, (float *)a1, 1, v17);
  v18 = a3 * 0.5;
  v19 = (double)v13;
  vDSP_vclr((float *)a1, 1, (int)fmin((double)(int)((float)((float)(v13 + 1) * 90.0) / v18), (double)v13));
  v79 = 0;
  v77[1] = 0;
  __C = 0;
  __I = 0;
  v77[0] = 0;
  vDSP_maxvi((const float *)a1, 1, (float *)&__C, &__I, v15);
  v20 = 0;
  v21 = (int)fmin((double)v13, fmax((double)__I, 1.0));
  v22 = *(&a1->real + v21);
  v23 = v21;
  v24 = (float)v21;
  v25 = v21 - 1;
  v26 = *(&a1->real + v25);
  v27 = v23 + 1;
  v28 = v22 * v24;
  if (v26 <= *(&a1->real + v27))
  {
    LODWORD(v25) = v27;
    v26 = *(&a1->real + v27);
  }
  v29 = (float)(v22 + v26) + 0.0000001;
  v30 = (float)(v28 + (float)(v26 * (float)(int)v25)) / v29;
  while (1)
  {
    v73 = 0.0;
    v72 = 0;
    v31 = *(float *)&dword_235831030[v20];
    v32 = (float)(v30 * v31) + -1.0;
    if (v32 < 0.0)
      v32 = 0.0;
    v33 = v32;
    vDSP_maxvi((const float *)a1 + v33, 1, &v73, &v72, 3uLL);
    v34 = v72 + v33;
    v72 += v33;
    if (*(float *)&__C > 0.0 && (float)(v73 / *(float *)&__C) > 0.1)
      break;
    if (++v20 == 4)
      goto LABEL_11;
  }
  v30 = v30 * v31;
  __I = v34;
LABEL_11:
  v35 = 0;
  memset(v75, 0, 60);
  v36 = (float)v13;
  v37 = *(float *)&__C * 0.08;
  do
  {
    if (v35 == 15)
      break;
    v38 = v30 * (float)(v35 + 1);
    if (v38 >= v36)
      break;
    v39 = (int)fmax((float)(v38 + -7.0), 0.0);
    v40 = fmin(v19, (float)(v38 + 7.0));
    v41 = *((float *)v75 + v35);
    if (v40 > (double)v39)
    {
      v42 = (float *)a1 + v39;
      v43 = v39 + 1;
      do
      {
        v44 = *v42++;
        v45 = v44;
        if (v41 < v44)
          v41 = v45;
        v46 = (double)v43++;
      }
      while (v40 > v46);
      *((float *)v75 + v35) = v41;
    }
    ++v35;
  }
  while (v41 >= v37);
  v47 = 0;
  do
  {
    v48 = v30 * (float)++v47;
    if (v48 >= v36)
      break;
    v49 = (int)fmax((float)(v48 + -7.0), 0.0);
    v50 = fmin(v19, (float)(v48 + 7.0));
    if (v50 > (double)v49)
    {
      v51 = (float *)a1 + v49;
      v52 = v49 + 1;
      do
      {
        *v51++ = 0.0;
        --v14;
        v53 = (double)v52++;
      }
      while (v50 > v53);
    }
  }
  while (v47 != 15);
  vDSP_maxvi((const float *)a1, 1, (float *)&__C + 1, v77, v17);
  v71 = 0.0;
  vDSP_meanv((const float *)a1, 1, &v71, v17);
  v54 = (int)fmin(v19, fmax((double)v77[0], 1.0));
  v55 = *((float *)a1 + v54 - 1);
  v56 = v54 + 1;
  v57 = *(&a1->real + v56);
  v58 = *(&a1->real + v54);
  v59 = v58 * (float)v54;
  if (v55 <= v57)
    v60 = v54 + 1;
  else
    v60 = v54 - 1;
  if (v55 <= v57)
    v55 = *(&a1->real + v56);
  v61 = v59 + (float)(v55 * (float)v60);
  v62 = (float)(v58 + v55) + 0.0000001;
  v63 = v61 / v62;
  v64 = fmax((double)v14, 1.0);
  v65 = (float)((float)(v13 + 1) / v64) * v71;
  v66 = v18 * v30 / v19;
  *a4 = v66;
  if (v65 == 0.0)
  {
    *a5 = 0.0;
    v70 = v18 * v63 / v19;
    a4[1] = v70;
    v69 = 0.0;
  }
  else
  {
    v67 = *((float *)&__C + 1);
    *a5 = *(float *)&__C / v65;
    v68 = v18 * v63 / v19;
    a4[1] = v68;
    v69 = v67 / v65;
  }
  a5[1] = v69;
  a4[2] = a4[1];
  a5[2] = a5[1];
}

uint64_t flicker_temporal_filter(float *a1, _DWORD *a2, float a3, float a4, float a5)
{
  int v8;
  int v10;
  float *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  float *v19;
  uint64_t result;
  uint64_t v21;

  v8 = a2[1];
  if ((*a2 & 0xFFFFFFFD) == 5 || *a2 == 3)
    v10 = *a2;
  else
    v10 = 5;
  v11 = (float *)(a2 + 3);
  v12 = (int)a2[2];
  *(float *)&a2[v12 + 3] = a3;
  *(float *)&a2[v12 + 19] = a4;
  v13 = (int)fmin((double)(v8 + 1), (double)v10);
  a2[1] = v13;
  if (v13 <= 0)
  {
    *a1 = 0.0;
LABEL_22:
    *a1 = medianFilter(v11, v13);
    v13 = a2[1];
    result = 1;
    goto LABEL_23;
  }
  v14 = 0;
  v15 = v10 + v12;
  LOBYTE(v16) = 1;
  LOBYTE(v17) = 1;
  do
  {
    v18 = (v15 + v14) % v10;
    v19 = (float *)&a2[v18];
    v17 = v17 && vabds_f32(a3, v19[3]) < 2.0 && *(float *)&a2[v18 + 19] > 15.0;
    v16 = v16 && v19[19] < 6.0;
    --v14;
  }
  while (v13 + v14);
  *a1 = 0.0;
  if (v17)
    goto LABEL_22;
  if (v16)
    result = 3;
  else
    result = 0;
LABEL_23:
  v21 = (int)a2[2];
  if (v13 >= 2)
    a5 = (float)(*(float *)&a2[(v10 + (int)v21 - 1) % v10 + 35] * 0.382) + (float)(a5 * 0.618);
  *(float *)&a2[v21 + 35] = a5;
  a2[2] = ((int)v21 + 1) % v10;
  return result;
}

float medianFilter(float *a1, int a2)
{
  float result;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;

  if (a2 == 2)
    return (float)(*a1 + a1[1]) * 0.5;
  if (a2 == 1)
    return *a1;
  if ((a2 - 3) > 1)
  {
    if ((a2 - 5) > 1)
    {
      result = 0.0;
      if (a2 == 7)
      {
        v23 = a1[1];
        v25 = a1[4];
        v24 = a1[5];
        v26 = fminf(*a1, v24);
        v27 = fmaxf(*a1, v24);
        v29 = a1[2];
        v28 = a1[3];
        v30 = fminf(v26, v28);
        v31 = fmaxf(v26, v28);
        v32 = a1[6];
        v33 = fminf(v23, v32);
        v34 = fmaxf(v23, v32);
        v35 = fminf(v29, v25);
        v36 = fmaxf(v29, v25);
        v37 = fminf(v30, v33);
        v38 = fmaxf(v30, v33);
        v39 = fminf(v31, v27);
        v40 = fmaxf(v31, v27);
        v41 = fminf(v35, v34);
        v42 = fmaxf(v35, v34);
        v43 = fminf(v41, v39);
        v44 = fmaxf(v41, v39);
        v45 = fminf(v44, v42);
        a1[6] = fmaxf(v44, v42);
        v46 = fminf(v36, v40);
        v47 = fmaxf(v36, v40);
        v48 = fminf(v38, v46);
        v49 = fmaxf(v38, v46);
        *a1 = v37;
        a1[1] = fminf(v48, v45);
        v50 = fmaxf(v48, v45);
        result = fminf(v50, v49);
        a1[2] = v43;
        a1[3] = result;
        a1[4] = fmaxf(v50, v49);
        a1[5] = v47;
      }
    }
    else
    {
      v8 = a1[1];
      v9 = fminf(*a1, v8);
      v10 = fmaxf(*a1, v8);
      v12 = a1[3];
      v11 = a1[4];
      v13 = a1[2];
      v14 = fminf(v12, v11);
      v15 = fmaxf(v12, v11);
      v16 = fminf(v9, v14);
      v17 = fmaxf(v9, v14);
      v18 = fminf(v10, v15);
      v19 = fmaxf(v10, v15);
      v20 = fminf(v18, v13);
      *a1 = v16;
      a1[1] = v20;
      v21 = fmaxf(v18, v13);
      v22 = fminf(v21, v17);
      a1[2] = v22;
      a1[3] = fmaxf(v21, v17);
      a1[4] = v19;
      return fmaxf(v20, v22);
    }
  }
  else
  {
    v3 = a1[1];
    v4 = fminf(*a1, v3);
    v5 = fmaxf(*a1, v3);
    v6 = a1[2];
    v7 = fminf(v5, v6);
    *a1 = v4;
    a1[1] = v7;
    a1[2] = fmaxf(v5, v6);
    return fmaxf(v4, v7);
  }
  return result;
}

void waveMatching(const float *__A, unint64_t a2, float a3, float *a4, float *a5, unsigned int a6)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float *v14;
  vDSP_Length v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  int v19;
  const float *v20;
  const float *v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t __C;

  if (a6)
  {
    v9 = 0;
    v10 = a6;
    __C = 0;
    v11 = (float)a2;
    v24 = 0.0;
    v12 = 1;
    v23 = a6;
    do
    {
      a5[v9] = 0.0;
      v13 = a4[v9];
      if (v13 <= 0.0)
      {
        v16 = v12;
      }
      else
      {
        v14 = a4;
        v15 = (float)((float)((float)(a3 / v13)
                                          * (float)(float)((float)(v11 / (float)(a3 / v13)) / 5.0))
                                  + 0.5);
        vDSP_dotpr(__A, 1, __A, 1, (float *)&__C, v15);
        v16 = v12 + 4;
        v17 = 0.0;
        v18 = 4;
        v19 = v15;
        v20 = __A;
        do
        {
          v21 = v20;
          v20 = &__A[v19];
          vDSP_dotpr(v21, 1, v20, 1, (float *)&__C + 1, v15);
          vDSP_dotpr(v20, 1, v20, 1, &v24, v15);
          v22 = 0.0;
          if (fabsf(*(float *)&__C) > 0.001)
          {
            v22 = 0.0;
            if (fabsf(v24) > 0.001)
              v22 = (float)(fabsf(*((float *)&__C + 1)) / sqrtf(*(float *)&__C)) / sqrtf(v24);
          }
          *(float *)&__C = v24;
          v19 += v15;
          v17 = v17 + v22;
          --v18;
        }
        while (v18);
        if (v16 > 1)
          a5[v9] = v17 / (float)(unint64_t)(v12 + 3);
        a4 = v14;
        v10 = v23;
      }
      ++v9;
      v12 = v16;
    }
    while (v9 != v10);
  }
}

void PDAF::PixelEngine::ProcessPart1()
{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5558, "pImage != nullptr");
}

{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5559, "pContext != nullptr");
}

{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5560, "pContext->imageByteStride > 0");
}

{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5568, "focusStride > 0");
}

{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5569, "auxStride > 0");
}

{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5570, "satStride > 0");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1635, "false");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1438, "false");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1261, "false");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1188, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1353, "false");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1431, "false");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1360, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1183, "(imageByteStride % sizeof(uint16_t)) == 0");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1628, "false");
}

{
  __assert_rtn("ExtractAux", "PDAFPixelEngine.cpp", 1180, "IsAligned((uintptr_t)auxBuffer, MEMALIGN)");
}

{
  __assert_rtn("ProcessPart1", "PDAFPixelEngine.cpp", 5589, "false");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractFocus()
{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3690, "false");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3465, "false");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3236, "false");
}

{
  __assert_rtn("ExtractFocus1x1Raw14Neon64", "PDAFPixelEngine.cpp", 1734, "PATTERN != Pattern::SHAPE_1X1_0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3175, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3304, "false");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3243, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3388, "false");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3458, "false");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3395, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3171, "(imageByteStride % sizeof(uint16_t)) == 0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3683, "false");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3474, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3518, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("ExtractFocus", "PDAFPixelEngine.cpp", 3642, "geometry.patternRowOffset == 0");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractFocus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_8("ExtractFocus1x1Pack10", "PDAFPixelEngine.cpp", a3, "false");
}

{
  OUTLINED_FUNCTION_0("ExtractFocus1x1Pack10WithPackOffsetNeon64", "PDAFPixelEngine.cpp", a3, "PATTERN != Pattern::SHAPE_1X1_0");
}

{
  OUTLINED_FUNCTION_6("ExtractFocus1x1Pack10", "PDAFPixelEngine.cpp", a3, "false");
}

{
  OUTLINED_FUNCTION_5("ExtractFocus1x1Pack10", "PDAFPixelEngine.cpp", a3, "false");
}

{
  OUTLINED_FUNCTION_2("ExtractFocus1x1Pack10", "PDAFPixelEngine.cpp", a3, "false");
}

void PDAF::PixelEngine::ProcessPart2()
{
  __assert_rtn("ProcessPart2", "PDAFPixelEngine.cpp", 5628, "pContext != nullptr");
}

{
  __assert_rtn("ProcessPart2", "PDAFPixelEngine.cpp", 5633, "(pContext->geometry.tileEndX - pContext->geometry.tileStartX) * (pContext->geometry.tileEndY - pContext->geometry.tileStartY) <= NTILES");
}

{
  __assert_rtn("ProcessPart2", "PDAFPixelEngine.cpp", 5688, "false");
}

{
  __assert_rtn("ProcessPart2", "PDAFPixelEngine.cpp", 5677, "false");
}

{
  __assert_rtn("Accumulate", "PDAFPixelEngine.cpp", 4871, "false");
}

{
  __assert_rtn("Accumulate1x1Scalar", "PDAFPixelEngine.cpp", 3832, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("Accumulate1x1Neon64", "PDAFPixelEngine.cpp", 4067, "geometry.patternRowOffset == 0");
}

{
  __assert_rtn("Accumulate", "PDAFPixelEngine.cpp", 4918, "false");
}

{
  __assert_rtn("Accumulate", "PDAFPixelEngine.cpp", 4969, "false");
}

{
  __assert_rtn("Accumulate", "PDAFPixelEngine.cpp", 5020, "false");
}

{
  __assert_rtn("Accumulate", "PDAFPixelEngine.cpp", 5024, "pContext->geometry.patternRowOffset == 0");
}

{
  __assert_rtn("Check", "PDAFPixelEngine.cpp", 3773, "focusStride > 0");
}

{
  __assert_rtn("Check", "PDAFPixelEngine.cpp", 3774, "refStride > 0");
}

{
  __assert_rtn("Check", "PDAFPixelEngine.cpp", 3796, "false");
}

{
  __assert_rtn("CheckRow", "PDAFPixelEngine.cpp", 3732, "false");
}

{
  __assert_rtn("ProcessPart2", "PDAFPixelEngine.cpp", 5649, "false");
}

void PDAF::PixelEngine::ProcessPart2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_9("PostProcess", "PDAFPixelEngine.cpp", a3, "pContext->params.levels[0] == 1");
}

{
  OUTLINED_FUNCTION_7("PostProcess", "PDAFPixelEngine.cpp", a3, "pContext->params.iirs [0] == 0");
}

{
  OUTLINED_FUNCTION_4("Accumulate", "PDAFPixelEngine.cpp", a3, "pContext->params.invStdLUT[LUTSIZE - 1] == pContext->params.invStdLUT[LUTSIZE - 2]");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractNeighborRaw14Scalar()
{
  __assert_rtn("ExtractNeighborRaw14Scalar", "PDAFPixelEngine.cpp", 241, "false");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractGradsRaw14Neon64()
{
  __assert_rtn("ExtractGradsRaw14Neon64", "PDAFPixelEngine.cpp", 350, "false");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractNeighborPack10()
{
  __assert_rtn("ExtractNeighborPack10", "PDAFPixelEngine.cpp", 1160, "false");
}

{
  __assert_rtn("ExtractNeighborPack10", "PDAFPixelEngine.cpp", 1018, "false");
}

{
  __assert_rtn("ExtractNeighborPack10", "PDAFPixelEngine.cpp", 1063, "false");
}

{
  __assert_rtn("ExtractNeighborPack10", "PDAFPixelEngine.cpp", 1108, "false");
}

{
  __assert_rtn("ExtractNeighborPack10", "PDAFPixelEngine.cpp", 1153, "false");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractNeighborPack10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_3("ExtractNeighborPack10WithPackOffsetScalar", "PDAFPixelEngine.cpp", a3, "false");
}

{
  OUTLINED_FUNCTION_1("ExtractGradsPack10WithPackOffsetNeon64", "PDAFPixelEngine.cpp", a3, "false");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractFocus2x1Raw14Neon64()
{
  __assert_rtn("ExtractFocus2x1Raw14Neon64", "PDAFPixelEngine.cpp", 2477, "(geometry.pixelInTileRowCount % 2) == 0");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractFocus2x1Pack10()
{
  __assert_rtn("ExtractFocus2x1Pack10", "PDAFPixelEngine.cpp", 3149, "false");
}

{
  __assert_rtn("ExtractFocus2x1Pack10", "PDAFPixelEngine.cpp", 3019, "false");
}

{
  __assert_rtn("ExtractFocus2x1Pack10", "PDAFPixelEngine.cpp", 3060, "false");
}

{
  __assert_rtn("ExtractFocus2x1Pack10", "PDAFPixelEngine.cpp", 3101, "false");
}

{
  __assert_rtn("ExtractFocus2x1Pack10", "PDAFPixelEngine.cpp", 3142, "false");
}

void PDAF::PixelEngine::`anonymous namespace'::ExtractFocus2x1Pack10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_10("ExtractFocus2x1Pack10WithPackOffsetNeon64", "PDAFPixelEngine.cpp", a3, "(geometry.pixelInTileRowCount % 2) == 0");
}

void PDAF::PixelEngine::`anonymous namespace'::StatsResetUnused()
{
  __assert_rtn("StatsResetUnused", "PDAFPixelEngine.cpp", 5043, "unusedTileCount >= 0");
}

void H9ISP::AdaptiveLensShading::AdaptiveLensShading(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void LSCAverageGreenApple()
{
  __assert_rtn("LSCAverageGreenApple", "LSCComputeFromNVM.cpp", 781, "pLSCConfig->channelGR.gridCountY == pLSCConfig->channelGB.gridCountY");
}

{
  __assert_rtn("LSCAverageGreenApple", "LSCComputeFromNVM.cpp", 780, "pLSCConfig->channelGR.gridCountX == pLSCConfig->channelGB.gridCountX");
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x24BDB67A8](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x24BDB67B8](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x24BDB67C8](inComponent, outInstance);
}

OSStatus AudioOutputUnitStart(AudioUnit ci)
{
  return MEMORY[0x24BDB68B8](ci);
}

OSStatus AudioOutputUnitStop(AudioUnit ci)
{
  return MEMORY[0x24BDB68C0](ci);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x24BDB6A10](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outData, ioDataSize);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  return MEMORY[0x24BDB6A20](inUnit);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x24BDB6A38](inUnit, ioActionFlags, inTimeStamp, *(_QWORD *)&inOutputBusNumber, *(_QWORD *)&inNumberFrames, ioData);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x24BDB6A50](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, inData, *(_QWORD *)&inDataSize);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x24BDBB780]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x24BDBB7E8](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x24BDBB878](theArray);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x24BDBBCA0](allocator, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x24BDBBE70](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x24BDBBEE0](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x24BDBBFB0](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x24BDBBFB8](allocator, *(_QWORD *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
  MEMORY[0x24BDBBFD0](port);
}

CFMessagePortRef CFMessagePortCreateLocal(CFAllocatorRef allocator, CFStringRef name, CFMessagePortCallBack callout, CFMessagePortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMessagePortRef)MEMORY[0x24BDBBFF0](allocator, name, callout, context, shouldFreeInfo);
}

CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name)
{
  return (CFMessagePortRef)MEMORY[0x24BDBBFF8](allocator, name);
}

CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(CFAllocatorRef allocator, CFMessagePortRef local, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x24BDBC000](allocator, local, order);
}

void CFMessagePortInvalidate(CFMessagePortRef ms)
{
  MEMORY[0x24BDBC010](ms);
}

void CFMessagePortSetDispatchQueue(CFMessagePortRef ms, dispatch_queue_t queue)
{
  MEMORY[0x24BDBC028](ms, queue);
}

void CFMessagePortSetInvalidationCallBack(CFMessagePortRef ms, CFMessagePortInvalidationCallBack callout)
{
  MEMORY[0x24BDBC030](ms, callout);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC160](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC178](key, applicationID, userName, hostName);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1F0](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x24BDBC208](propertyList, stream, format, options, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x24BDBC218](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x24BDBC230](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC258](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x24BDBC2C8](rl, source, mode);
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
  MEMORY[0x24BDBC2D0](rl, timer, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x24BDBC2F8]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x24BDBC348](rl, source, mode);
}

void CFRunLoopRun(void)
{
  MEMORY[0x24BDBC358]();
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x24BDBC388](rl);
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x24BDBC390](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
  MEMORY[0x24BDBC3A8](timer);
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
  MEMORY[0x24BDBC3B0](timer, fireDate);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x24BDBC438](obj);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x24BDBC650](str);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x24BDBC690]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x24BDBC968](stream);
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x24BDBC988](alloc, fileURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x24BDBC9A8](stream);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x24BDBDA78](space, components);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEF98]((__n128)point, *(__n128 *)&point.y);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x24BDBF050]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x24BDBF068](dict, rect);
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x24BDC0080]();
}

OSStatus CMBufferQueueCreate(CFAllocatorRef allocator, CMItemCount capacity, const CMBufferCallbacks *callbacks, CMBufferQueueRef *queueOut)
{
  return MEMORY[0x24BDC0100](allocator, capacity, callbacks, queueOut);
}

OSStatus CMBufferQueueEnqueue(CMBufferQueueRef queue, CMBufferRef buf)
{
  return MEMORY[0x24BDC0110](queue, buf);
}

CMItemCount CMBufferQueueGetBufferCount(CMBufferQueueRef queue)
{
  return MEMORY[0x24BDC0118](queue);
}

const CMBufferCallbacks *CMBufferQueueGetCallbacksForUnsortedSampleBuffers(void)
{
  return (const CMBufferCallbacks *)MEMORY[0x24BDC0128]();
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x24BDC0150]();
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x24BDC0180]();
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x24BDC01E0](target, key, attachmentModeOut);
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x24BDC0238]();
}

OSStatus CMSampleBufferCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMVideoFormatDescriptionRef formatDescription, const CMSampleTimingInfo *sampleTiming, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x24BDC0290](allocator, imageBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, sampleTiming, sampleBufferOut);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x24BDC02E8](sbuf);
}

void CMSetAttachment(CMAttachmentBearerRef target, CFStringRef key, CFTypeRef value, CMAttachmentMode attachmentMode)
{
  MEMORY[0x24BDC0380](target, key, value, *(_QWORD *)&attachmentMode);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x24BDC0468](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x24BDC0490](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x24BDC0498](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x24BDC04A8](retstr, dictionaryRepresentation);
}

OSStatus CMVideoFormatDescriptionCreate(CFAllocatorRef allocator, CMVideoCodecType codecType, int32_t width, int32_t height, CFDictionaryRef extensions, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x24BDC0638](allocator, *(_QWORD *)&codecType, *(_QWORD *)&width, *(_QWORD *)&height, extensions, formatDescriptionOut);
}

OSStatus CMVideoFormatDescriptionCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x24BDC0648](allocator, imageBuffer, formatDescriptionOut);
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x24BDC5148](buffer, key, attachmentMode);
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
  MEMORY[0x24BDC5170](buffer, key);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x24BDC5180](buffer, key, value, *(_QWORD *)&attachmentMode);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52A0](pixelBuffer);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x24BDC52A8](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x24BDC52E0]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CFDictionaryRef auxAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5330](allocator, pixelBufferPool, auxAttributes, pixelBufferOut);
}

CFDictionaryRef CVPixelBufferPoolGetAttributes(CVPixelBufferPoolRef pool)
{
  return (CFDictionaryRef)MEMORY[0x24BDC5340](pool);
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  return (CFDictionaryRef)MEMORY[0x24BDC5348](pool);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  MEMORY[0x24BDC5358](pixelBufferPool);
}

CVPixelBufferPoolRef CVPixelBufferPoolRetain(CVPixelBufferPoolRef pixelBufferPool)
{
  return (CVPixelBufferPoolRef)MEMORY[0x24BDC5368](pixelBufferPool);
}

uint64_t CVPixelBufferPoolScanIOSurfaces()
{
  return MEMORY[0x24BDC5378]();
}

uint64_t CVPixelBufferPoolSetMinBufferCount()
{
  return MEMORY[0x24BDC5388]();
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x24BDC5398](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

uint64_t FigCaptureDeviceGetClassID()
{
  return MEMORY[0x24BE10368]();
}

uint64_t FigCaptureDeviceGetNotificationCenter()
{
  return MEMORY[0x24BE10378]();
}

uint64_t FigCaptureISPProcessingSessionGetClassID()
{
  return MEMORY[0x24BE10388]();
}

uint64_t FigCaptureStreamGetClassID()
{
  return MEMORY[0x24BE103A8]();
}

uint64_t FigCaptureStreamGetFigBaseObject()
{
  return MEMORY[0x24BE103B0]();
}

uint64_t FigCaptureSynchronizedStreamsGroupGetClassID()
{
  return MEMORY[0x24BE103B8]();
}

uint64_t FigCaptureSynchronizedStreamsGroupGetFigBaseObject()
{
  return MEMORY[0x24BE103C0]();
}

uint64_t FigFormatDescriptionRelease()
{
  return MEMORY[0x24BDC08A0]();
}

uint64_t FigHostTimeToNanoseconds()
{
  return MEMORY[0x24BDC0940]();
}

uint64_t FigSampleBufferRelease()
{
  return MEMORY[0x24BDC09B0]();
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7EE0](*(_QWORD *)&connection, *(_QWORD *)&selector, *(_QWORD *)&wake_port, reference, *(_QWORD *)&referenceCnt, input, *(_QWORD *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7EF8](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x24BDD7F00](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7F08](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

kern_return_t IOCreateReceivePort(uint32_t msgType, mach_port_t *recvPort)
{
  return MEMORY[0x24BDD7F98](*(_QWORD *)&msgType, recvPort);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x24BDD8668](*(_QWORD *)&iterator);
}

kern_return_t IOMasterPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x24BDD8688](*(_QWORD *)&bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x24BDD8690](*(_QWORD *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x24BDD8698](notify);
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x24BDD86A8](notify);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x24BDD88A8](*(_QWORD *)&entry, properties, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD8928](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x24BDD8958](notifyPort, *(_QWORD *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x24BDD8960](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x24BDD8970](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89B0](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x24BDD89B8](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x24BDD8B50](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8B78](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x24BDD8B80](buffer);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C68](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8D08](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8DD0](buffer, *(_QWORD *)&options, seed);
}

uint64_t _AXSClassicInvertColorsEnabled()
{
  return MEMORY[0x24BED2138]();
}

uint64_t _AXSInvertColorsEnabled()
{
  return MEMORY[0x24BED22E0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF68]();
}

{
  return MEMORY[0x24BEDAF70]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_2506D9348();
}

void operator delete(void *__p)
{
  off_2506D9350(__p);
}

uint64_t operator delete()
{
  return off_2506D9358();
}

uint64_t operator new[]()
{
  return off_2506D9360();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_2506D9368(__sz);
}

uint64_t operator new()
{
  return off_2506D9370();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x24BDAD218](__x);
  return result;
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x24BDAD2C0](a1, a2, a3);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

char *__cdecl dirname(char *a1)
{
  return (char *)MEMORY[0x24BDADC40](a1);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x24BDADF68](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x24BDAE380](a1, *(_QWORD *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x24BDAE438](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x24BDAE4E0](__stream, a2, *(_QWORD *)&__whence);
}

off_t ftello(FILE *__stream)
{
  return MEMORY[0x24BDAE538](__stream);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x24BEDF260](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x24BEDF268](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x24BEDF270](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x24BDAEA30](*(_QWORD *)&__e, __x);
  return result;
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAB0](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x24BDAEBF8](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x24BDAEF60](path, omode);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x24BDAF168](name, out_token);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x24BDAF198](*(_QWORD *)&token, state64);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void perror(const char *a1)
{
  MEMORY[0x24BDAF5A8](a1);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x24BDAF6F8](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF778](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x24BDAF790](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x24BDAF7A0](a1, *(_QWORD *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x24BDAF7B0](a1, a2);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7E0](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x24BDAF800](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x24BDAF880](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x24BDAF8A8](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x24BDAF8E8](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x24BDAF8F0](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x24BDAF908](a1, *(_QWORD *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x24BDAF998](a1);
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x24BDAFD40](*(_QWORD *)&a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFE60](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF30](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF38](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF60](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x24BDAFFF0](__str, __sep);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0030](__str, __endptr, *(_QWORD *)&__base);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x24BDB0128](*(_QWORD *)&a1, a2);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x24BDB0210](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x24BDB0220](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

FFTSetup vDSP_create_fftsetup(vDSP_Length __Log2n, FFTRadix __Radix)
{
  return (FFTSetup)MEMORY[0x24BDB31A0](__Log2n, *(_QWORD *)&__Radix);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x24BDB31A8](__C, __IC, __Z, __IZ, __N);
}

void vDSP_desamp(const float *__A, vDSP_Stride __DF, const float *__F, float *__C, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB31B8](__A, __DF, __F, __C, __N, __P);
}

void vDSP_destroy_fftsetup(FFTSetup __setup)
{
  MEMORY[0x24BDB31C0](__setup);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_fft_zrip(FFTSetup __Setup, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __Log2N, FFTDirection __Direction)
{
  MEMORY[0x24BDB31F8](__Setup, __C, __IC, __Log2N, *(_QWORD *)&__Direction);
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
  MEMORY[0x24BDB3230](__A, __IA, __C, __I, __N);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3248](__A, __IA, __C, __N);
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3330](__C, __IC, __N);
}

void vDSP_zvabs(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB35A0](__A, __IA, __C, __IC, __N);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

