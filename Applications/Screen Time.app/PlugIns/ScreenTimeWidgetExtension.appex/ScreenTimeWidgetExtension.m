void sub_100003644(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, uint64_t a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, char *a18, uint64_t a19)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  double *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;

  v94 = a8;
  v91 = a7;
  v87 = a5;
  v88 = a6;
  v83 = a3;
  v84 = a4;
  v97 = a2;
  LODWORD(v80) = a1;
  v23 = sub_100003C84(&qword_100059958);
  __chkstk_darwin(v23);
  v93 = (uint64_t)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DateInterval(0);
  v92 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v95 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v26);
  v79 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Calendar(0);
  v86 = *(_QWORD *)(v90 - 8);
  v28 = __chkstk_darwin(v90);
  v85 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v73 - v30;
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v81 = (char *)&v73 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v73 - v37;
  v39 = __chkstk_darwin(v36);
  v41 = (char *)&v73 - v40;
  __chkstk_darwin(v39);
  v43 = (char *)&v73 - v42;
  v44 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v45 = &a9[v44[6]];
  *v45 = 0;
  v45[1] = 0;
  v46 = &a9[v44[8]];
  *v46 = 0;
  v46[1] = 0;
  v89 = v44[18];
  *(_QWORD *)&a9[v89] = 0;
  v47 = static Date.now.getter();
  v96 = v31;
  v48 = (uint64_t)v79;
  static Calendar.current.getter(v47);
  *a9 = v80;
  sub_100003D00(v97, v48, &qword_100059960);
  v73 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v73(v38, v43, v32);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v48, 1, v32);
  v82 = v33;
  if (v49 == 1)
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v50(v41, v38, v32);
    sub_100003D44(v48, &qword_100059960);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v32);
    v50 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v50(v41, (char *)v48, v32);
  }
  v80 = a19;
  v79 = a18;
  v78 = a17;
  v77 = a16;
  v76 = a15;
  v75 = a14;
  v74 = a13;
  v50(&a9[v44[5]], v41, v32);
  swift_bridgeObjectRelease(v45[1]);
  v51 = v84;
  *v45 = v83;
  v45[1] = v51;
  v52 = (double *)&a9[v44[7]];
  *v52 = a10;
  v52[1] = a11;
  swift_bridgeObjectRelease(v46[1]);
  v53 = v88;
  *v46 = v87;
  v46[1] = v53;
  v54 = v91;
  v55 = v93;
  sub_100003D00(v91, v93, &qword_100059958);
  v56 = (uint64_t)v81;
  v73(v81, v43, v32);
  v57 = v86;
  v58 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v88 = v43;
  v59 = v85;
  v60 = v90;
  v58(v85, v96, v90);
  v61 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v55, 1, v98) == 1)
  {
    sub_10000E200(v56, (uint64_t)v95);
    sub_100003D44(v54, &qword_100059958);
    sub_100003D44(v97, &qword_100059960);
    v62 = *(void (**)(char *, uint64_t))(v57 + 8);
    v62(v59, v60);
    v63 = v55;
    v64 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
    v64(v56, v32);
    v62(v96, v60);
    v64((uint64_t)v88, v32);
    v65 = v63;
    v66 = (uint64_t)v95;
    sub_100003D44(v65, &qword_100059958);
    v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v61 + 32);
    v68 = v98;
    v67(&a9[v44[9]], v66, v98);
  }
  else
  {
    sub_100003D44(v54, &qword_100059958);
    sub_100003D44(v97, &qword_100059960);
    v69 = *(void (**)(char *, uint64_t))(v57 + 8);
    v69(v59, v60);
    v70 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
    v70(v56, v32);
    v69(v96, v60);
    v70((uint64_t)v88, v32);
    v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v61 + 32);
    v71 = (uint64_t)v95;
    v68 = v98;
    v67(v95, v55, v98);
    v67(&a9[v44[9]], v71, v68);
  }
  v67(&a9[v44[10]], v94, v68);
  *(_QWORD *)&a9[v44[11]] = v74;
  a9[v44[12]] = v75 & 1;
  *(_QWORD *)&a9[v44[13]] = v76;
  a9[v44[14]] = v77 & 1;
  a9[v44[15]] = v78 & 1;
  *(_QWORD *)&a9[v44[16]] = v79;
  *(double *)&a9[v44[17]] = a12;
  v72 = v89;

  *(_QWORD *)&a9[v72] = v80;
}

uint64_t sub_100003C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t variable initialization expression of STSelectUserIntentResponse.code()
{
  return 0;
}

uint64_t sub_100003C84(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for UsageTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_1000599C8;
  if (!qword_1000599C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UsageTimelineEntry);
  return result;
}

uint64_t sub_100003D00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003C84(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100003D44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003C84(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100003D80(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100003D88@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100003D9C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100003DCC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100003DE0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100003DF4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100003E04(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_100003E10(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

BOOL sub_100003E1C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_100003E30(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100003E44@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100003E50@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

__n128 sub_100003E78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100003E88(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100003EA8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10000494C(a1, &qword_100059968, (uint64_t)&unk_100055C48);
}

char *sub_100003EE4(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = &v4[v11];
    v14 = &a2[v11];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    *(_OWORD *)&v4[v12] = *(_OWORD *)&a2[v12];
    v16 = a3[8];
    v17 = a3[9];
    v18 = &v4[v16];
    v19 = &a2[v16];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = &v4[v17];
    v22 = &a2[v17];
    v23 = type metadata accessor for DateInterval(0);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    v24(v21, v22, v23);
    v24(&v4[a3[10]], &a2[a3[10]], v23);
    v25 = a3[11];
    v26 = a3[12];
    v27 = *(_QWORD *)&a2[v25];
    *(_QWORD *)&v4[v25] = v27;
    v4[v26] = a2[v26];
    v28 = a3[13];
    v29 = a3[14];
    v30 = *(_QWORD *)&a2[v28];
    *(_QWORD *)&v4[v28] = v30;
    v4[v29] = a2[v29];
    v31 = a3[16];
    v4[a3[15]] = a2[a3[15]];
    v32 = *(_QWORD *)&a2[v31];
    *(_QWORD *)&v4[v31] = v32;
    v33 = a3[18];
    *(_QWORD *)&v4[a3[17]] = *(_QWORD *)&a2[a3[17]];
    v34 = *(void **)&a2[v33];
    *(_QWORD *)&v4[v33] = v34;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    v35 = v34;
  }
  return v4;
}

void sub_100004074(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v6 = a1 + a2[9];
  v7 = type metadata accessor for DateInterval(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[10], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16]));

}

_BYTE *sub_10000414C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  v15 = a3[8];
  v16 = a3[9];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = &a1[v16];
  v21 = &a2[v16];
  v22 = type metadata accessor for DateInterval(0);
  v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  v23(v20, v21, v22);
  v23(&a1[a3[10]], &a2[a3[10]], v22);
  v24 = a3[11];
  v25 = a3[12];
  v26 = *(_QWORD *)&a2[v24];
  *(_QWORD *)&a1[v24] = v26;
  a1[v25] = a2[v25];
  v27 = a3[13];
  v28 = a3[14];
  v29 = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[v27] = v29;
  a1[v28] = a2[v28];
  v30 = a3[16];
  a1[a3[15]] = a2[a3[15]];
  v31 = *(_QWORD *)&a2[v30];
  *(_QWORD *)&a1[v30] = v31;
  v32 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  v33 = *(void **)&a2[v32];
  *(_QWORD *)&a1[v32] = v33;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v31);
  v34 = v33;
  return a1;
}

_BYTE *sub_1000042B0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  v16[1] = v17[1];
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[9];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for DateInterval(0);
  v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 24);
  v27(v24, v25, v26);
  v27(&a1[a3[10]], &a2[a3[10]], v26);
  v28 = a3[11];
  v29 = *(_QWORD *)&a2[v28];
  v30 = *(_QWORD *)&a1[v28];
  *(_QWORD *)&a1[v28] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  a1[a3[12]] = a2[a3[12]];
  v31 = a3[13];
  v32 = *(_QWORD *)&a2[v31];
  v33 = *(_QWORD *)&a1[v31];
  *(_QWORD *)&a1[v31] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  a1[a3[14]] = a2[a3[14]];
  a1[a3[15]] = a2[a3[15]];
  v34 = a3[16];
  v35 = *(_QWORD *)&a2[v34];
  v36 = *(_QWORD *)&a1[v34];
  *(_QWORD *)&a1[v34] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  v37 = a3[18];
  v38 = *(void **)&a1[v37];
  v39 = *(void **)&a2[v37];
  *(_QWORD *)&a1[v37] = v39;
  v40 = v39;

  return a1;
}

_BYTE *sub_100004478(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for DateInterval(0);
  v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v15(&a1[a3[10]], &a2[a3[10]], v14);
  v16 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  a1[v16] = a2[v16];
  v17 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  a1[v17] = a2[v17];
  v18 = a3[16];
  a1[a3[15]] = a2[a3[15]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v19 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  return a1;
}

_BYTE *sub_10000459C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v17 = &a1[v16];
  v18 = (uint64_t *)&a2[v16];
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = a3[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = type metadata accessor for DateInterval(0);
  v26 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  v26(&a1[a3[10]], &a2[a3[10]], v25);
  v27 = a3[11];
  v28 = *(_QWORD *)&a1[v27];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  swift_bridgeObjectRelease(v28);
  v29 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  v30 = *(_QWORD *)&a1[v29];
  *(_QWORD *)&a1[v29] = *(_QWORD *)&a2[v29];
  swift_bridgeObjectRelease(v30);
  v31 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  a1[v31] = a2[v31];
  v32 = a3[16];
  v33 = *(_QWORD *)&a1[v32];
  *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];
  swift_bridgeObjectRelease(v33);
  v34 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  v35 = *(void **)&a1[v34];
  *(_QWORD *)&a1[v34] = *(_QWORD *)&a2[v34];

  return a1;
}

uint64_t sub_100004708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100004714);
}

uint64_t sub_100004714(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[11]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_1000047B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000047C4);
}

uint64_t sub_1000047C4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11]) = (a2 - 1);
  return result;
}

uint64_t sub_100004864(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  void *v15;

  v5[0] = &unk_100046C88;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100046CA0;
    v5[3] = &unk_100046CB8;
    v5[4] = &unk_100046CA0;
    result = type metadata accessor for DateInterval(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v9 = &unk_100046C88;
      v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v11 = &unk_100046C88;
      v12 = &unk_100046C88;
      v13 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v14 = (char *)&value witness table for Builtin.Int64 + 64;
      v15 = &unk_100046CD0;
      swift_initStructMetadata(a1, 256, 15, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void type metadata accessor for STUsageDetailItemType(uint64_t a1)
{
  sub_10000494C(a1, &qword_100059A38, (uint64_t)&unk_100055C70);
}

void sub_10000494C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100004990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v0 = sub_100003C84(&qword_100059AF0);
  sub_100006BE0(v0, qword_10005D0E0);
  sub_100006BC8(v0, (uint64_t)qword_10005D0E0);
  v1 = sub_100003C84(&qword_100059AF8);
  v2 = *(_QWORD *)(sub_100003C84(&qword_100059B00) - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + 9 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100046DC0;
  v7 = v6 + v5;
  *(_BYTE *)(v6 + v5) = 0;
  v8 = sub_100004FB8();
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000033, 0x80000001000493F0, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + v3) = 1;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000042, 0x8000000100049430, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 2 * v3) = 2;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100049480, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 3 * v3) = 3;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000048, 0x80000001000494C0, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 4 * v3) = 4;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000048, 0x8000000100049510, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 5 * v3) = 5;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000043, 0x8000000100049560, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 6 * v3) = 6;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001000495B0, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 7 * v3) = 7;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000040, 0x80000001000495F0, &type metadata for ScreenTimeDeepLinks, v8);
  *(_BYTE *)(v7 + 8 * v3) = 8;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000047, 0x8000000100049640, &type metadata for ScreenTimeDeepLinks, v8);
  v9 = sub_10001C354(v6);
  return _EnumURLRepresentation.init(_:)(v9, &type metadata for ScreenTimeDeepLinks, v8);
}

uint64_t sub_100004C74()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100003C84(&qword_100059AC8);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100006BE0(v7, qword_10005D0F8);
  sub_100006BC8(v7, (uint64_t)qword_10005D0F8);
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

uint64_t sub_100004D88(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100004DC0 + 4 * byte_100046DF0[a1]))(0xD000000000000013, 0x8000000100048870);
}

uint64_t sub_100004DC0()
{
  return 1953460082;
}

uint64_t sub_100004DD0()
{
  return 0x6C41737961776C61;
}

uint64_t sub_100004DF4()
{
  return 0x74696D694C707061;
}

void sub_100004E80(char *a1)
{
  sub_10001CAC4(*a1);
}

unint64_t sub_100004E90()
{
  unint64_t result;

  result = qword_100059A40;
  if (!qword_100059A40)
  {
    result = swift_getWitnessTable(&unk_100046E04, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A40);
  }
  return result;
}

Swift::Int sub_100004ED4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_10001CCFC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100004F18(uint64_t a1)
{
  char *v1;

  sub_10001CCFC(a1, *v1);
}

Swift::Int sub_100004F20(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_10001CCFC((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_100004F60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100006C78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100004F8C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100004D88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100004FB8()
{
  unint64_t result;

  result = qword_100059A48;
  if (!qword_100059A48)
  {
    result = swift_getWitnessTable(&unk_100046EDC, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A48);
  }
  return result;
}

unint64_t sub_100005000()
{
  unint64_t result;

  result = qword_100059A50;
  if (!qword_100059A50)
  {
    result = swift_getWitnessTable(&unk_100046F1C, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A50);
  }
  return result;
}

uint64_t sub_100005044@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000598E0 != -1)
    swift_once(&qword_1000598E0, sub_100004990);
  v2 = sub_100003C84(&qword_100059AF0);
  v3 = sub_100006BC8(v2, (uint64_t)qword_10005D0E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_1000050BC()
{
  unint64_t result;

  result = qword_100059A58;
  if (!qword_100059A58)
  {
    result = swift_getWitnessTable(&unk_100046F44, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A58);
  }
  return result;
}

unint64_t sub_100005104()
{
  unint64_t result;

  result = qword_100059A60;
  if (!qword_100059A60)
  {
    result = swift_getWitnessTable(&unk_100046F7C, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A60);
  }
  return result;
}

unint64_t sub_10000514C()
{
  unint64_t result;

  result = qword_100059A68;
  if (!qword_100059A68)
  {
    result = swift_getWitnessTable(&unk_100046E6C, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A68);
  }
  return result;
}

void *sub_100005190()
{
  return &protocol witness table for String;
}

uint64_t sub_10000519C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100006C20();
  v4 = _URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_100006C64(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_1000051E8()
{
  unint64_t result;

  result = qword_100059A78;
  if (!qword_100059A78)
  {
    result = swift_getWitnessTable(&unk_100046FAC, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A78);
  }
  return result;
}

unint64_t sub_100005230()
{
  unint64_t result;

  result = qword_100059A80;
  if (!qword_100059A80)
  {
    result = swift_getWitnessTable(&unk_100046FD4, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A80);
  }
  return result;
}

unint64_t sub_100005278()
{
  unint64_t result;

  result = qword_100059A88;
  if (!qword_100059A88)
  {
    result = swift_getWitnessTable(&unk_100046FFC, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A88);
  }
  return result;
}

unint64_t sub_1000052C0()
{
  unint64_t result;

  result = qword_100059A90;
  if (!qword_100059A90)
  {
    result = swift_getWitnessTable(&unk_100047054, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A90);
  }
  return result;
}

uint64_t sub_100005308@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000598E8 != -1)
    swift_once(&qword_1000598E8, sub_100004C74);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_100006BC8(v2, (uint64_t)qword_10005D0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100005378(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100004FB8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

uint64_t sub_1000053B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100004FB8();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000053F4()
{
  unint64_t result;

  result = qword_100059A98;
  if (!qword_100059A98)
  {
    result = swift_getWitnessTable(&unk_100047094, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059A98);
  }
  return result;
}

unint64_t sub_10000543C()
{
  unint64_t result;

  result = qword_100059AA0;
  if (!qword_100059AA0)
  {
    result = swift_getWitnessTable(&unk_1000470BC, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059AA0);
  }
  return result;
}

unint64_t sub_100005484()
{
  unint64_t result;

  result = qword_100059AA8;
  if (!qword_100059AA8)
  {
    result = swift_getWitnessTable(&unk_100046E2C, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059AA8);
  }
  return result;
}

uint64_t sub_1000054CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000052C0();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100005508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059AB0;
  if (!qword_100059AB0)
  {
    v1 = sub_100005554(&qword_100059AB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100059AB0);
  }
  return result;
}

uint64_t sub_100005554(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_100005598(_QWORD *a1@<X8>)
{
  *a1 = &off_100055A28;
}

_BYTE *initializeBufferWithCopyOfBuffer for ScreenTimeDeepLinks(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScreenTimeDeepLinks(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScreenTimeDeepLinks(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100005690 + 4 * byte_100046DFE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000056C4 + 4 * byte_100046DF9[v4]))();
}

uint64_t sub_1000056C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000056CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000056D4);
  return result;
}

uint64_t sub_1000056E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000056E8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000056EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000056F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100005700(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000570C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ScreenTimeDeepLinks()
{
  return &type metadata for ScreenTimeDeepLinks;
}

unint64_t sub_100005724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  _BYTE *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t);
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  _BYTE *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  void (*v147)(char *, _QWORD, uint64_t);
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  void (*v195)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v196;
  uint64_t v197;
  char *v198;
  char *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, _QWORD, uint64_t, uint64_t);

  v204 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v190 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v192 = (char *)&v163 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v198 = (char *)&v163 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v194 = (char *)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003C84(&qword_100059AC0);
  v6 = __chkstk_darwin(v5);
  v199 = (char *)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v163 - v8;
  v10 = sub_100003C84(&qword_100059AC8);
  v11 = __chkstk_darwin(v10);
  v173 = (char *)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v170 = (char *)&v163 - v14;
  v15 = __chkstk_darwin(v13);
  v184 = (char *)&v163 - v16;
  v17 = __chkstk_darwin(v15);
  v181 = (char *)&v163 - v18;
  v19 = __chkstk_darwin(v17);
  v168 = (char *)&v163 - v20;
  v21 = __chkstk_darwin(v19);
  v177 = (char *)&v163 - v22;
  v23 = __chkstk_darwin(v21);
  v185 = (char *)&v163 - v24;
  v25 = __chkstk_darwin(v23);
  v174 = (char *)&v163 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v163 - v27;
  v165 = (char *)&v163 - v27;
  v29 = type metadata accessor for LocalizedStringResource(0);
  v30 = *(_QWORD *)(v29 - 8);
  v197 = v29;
  v31 = __chkstk_darwin(v29);
  v171 = (char *)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v169 = (char *)&v163 - v34;
  v35 = __chkstk_darwin(v33);
  v182 = (char *)&v163 - v36;
  v37 = __chkstk_darwin(v35);
  v180 = (char *)&v163 - v38;
  v39 = __chkstk_darwin(v37);
  v179 = (char *)&v163 - v40;
  v41 = __chkstk_darwin(v39);
  v178 = (char *)&v163 - v42;
  v43 = __chkstk_darwin(v41);
  *(_QWORD *)&v188 = (char *)&v163 - v44;
  v45 = __chkstk_darwin(v43);
  v167 = (char *)&v163 - v46;
  v47 = __chkstk_darwin(v45);
  v49 = (char *)&v163 - v48;
  __chkstk_darwin(v47);
  v166 = (char *)&v163 - v50;
  v51 = sub_100003C84(&qword_100059AD0);
  v52 = sub_100003C84(&qword_100059AD8);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = v52;
  v205 = *(_QWORD *)(v53 + 72);
  v55 = *(unsigned __int8 *)(v53 + 80);
  v56 = (v55 + 32) & ~v55;
  v183 = 8 * v205;
  v57 = swift_allocObject(v51, v56 + 9 * v205, v55 | 7);
  v172 = v57;
  *(_OWORD *)(v57 + 16) = xmmword_100046DC0;
  v58 = v57 + v56;
  *(_BYTE *)(v57 + v56) = 0;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v195 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v195(v28, 1, 1, v29);
  v200 = 0x8000000100048910;
  v164 = v9;
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v202 = type metadata accessor for DisplayRepresentation.Image(0);
  v207 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v202 - 8) + 56);
  v207(v9, 0, 1, v202);
  v206 = sub_100003C84(&qword_100059AE0);
  v59 = *(_QWORD *)(v30 + 72);
  v60 = *(unsigned __int8 *)(v30 + 80);
  v186 = ((v60 + 32) & ~v60) + 2 * v59;
  v203 = (v60 + 32) & ~v60;
  v201 = v60 | 7;
  v61 = swift_allocObject(v206, v186, v60 | 7);
  v187 = xmmword_100046DD0;
  *(_OWORD *)(v61 + 16) = xmmword_100046DD0;
  v62 = v54;
  v191 = v54;
  v63 = v58;
  v189 = v58;
  LocalizedStringResource.init(stringLiteral:)(0x7520656369766544, 0xEC00000065676173);
  v176 = v59;
  v175 = 0xD000000000000014;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x8000000100048940);
  v64 = v194;
  v65 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000091, 0x8000000100048960);
  v66 = v198;
  static Locale.current.getter(v65);
  v196 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v190 = *(_QWORD *)(v190 + 104);
  v67 = v192;
  ((void (*)(char *))v190)(v192);
  v193 = v49;
  v68 = v64;
  v69 = v66;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v68, 0, 0, v66, v67, "Description text for the main Screen Time pane", 46, 2);
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v166, v165, v164, v61, v49);
  v70 = v63 + v205;
  *(_BYTE *)(v63 + v205) = 1;
  v71 = v167;
  LocalizedStringResource.init(stringLiteral:)(0x4120737961776C41, 0xEE006465776F6C6CLL);
  v166 = (char *)(v70 + *(int *)(v62 + 48));
  v72 = v174;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v73 = v197;
  v74 = v195;
  v195(v72, 0, 1, v197);
  v75 = v199;
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v75, 0, 1, v202);
  v76 = swift_allocObject(v206, v186, v201);
  *(_OWORD *)(v76 + 16) = v187;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x8000000100048A30);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100048A50);
  v77 = v194;
  v78 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000099, 0x8000000100048A70);
  static Locale.current.getter(v78);
  v79 = v192;
  ((void (*)(char *, _QWORD, uint64_t))v190)(v192, v196, v204);
  v80 = v193;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v77, 0, 0, v69, v79, "Description text for the control that opens the Always Allowed pane", 67, 2);
  v81 = v71;
  v82 = v80;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v81, v174, v75, v76, v80);
  v167 = (char *)(2 * v205);
  v83 = (_BYTE *)(v189 + 2 * v205);
  *v83 = 2;
  LocalizedStringResource.init(stringLiteral:)(0x696D694C20707041, 0xEA00000000007374);
  v166 = &v83[*(int *)(v191 + 48)];
  v84 = v185;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v74(v84, 0, 1, v73);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v75, 0, 1, v202);
  v85 = swift_allocObject(v206, v186, v201);
  *(_OWORD *)(v85 + 16) = v187;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x8000000100048B60);
  v86 = v176;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100048B80);
  v174 = (char *)0xD0000000000000A9;
  v87 = v194;
  v88 = String.LocalizationValue.init(stringLiteral:)(0xD0000000000000A9, 0x8000000100048BA0);
  v89 = v69;
  static Locale.current.getter(v88);
  v90 = v79;
  v91 = v79;
  v92 = v196;
  v93 = v204;
  v94 = (void (*)(char *, uint64_t, uint64_t))v190;
  ((void (*)(char *, _QWORD, uint64_t))v190)(v91, v196, v204);
  v95 = v82;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v87, 0, 0, v89, v90, "Description text for the control that opens the App Limits pane", 63, 2);
  v96 = v199;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v188, v185, v199, v85, v95);
  v97 = v189;
  v98 = &v167[v205 + v189];
  *v98 = 3;
  LocalizedStringResource.init(stringLiteral:)(v175, 0x8000000100048C90);
  v99 = v191;
  v167 = &v98[*(int *)(v191 + 48)];
  v100 = v177;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v195(v100, 0, 1, v197);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v96, 0, 1, v202);
  v185 = (char *)(v203 + v86);
  v101 = v201;
  v102 = swift_allocObject(v206, v185, v201);
  v188 = xmmword_100046DE0;
  *(_OWORD *)(v102 + 16) = xmmword_100046DE0;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100048CB0);
  v103 = v194;
  v104 = String.LocalizationValue.init(stringLiteral:)(0xD0000000000000B8, 0x8000000100048CD0);
  v105 = v198;
  static Locale.current.getter(v104);
  v94(v90, v92, v93);
  v106 = v193;
  v107 = v103;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v103, 0, 0, v105, v90, "Description text for the control that opens the Communication Limits pane", 73, 2);
  v108 = v199;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v178, v177, v199, v102, v106);
  v178 = (char *)(4 * v205);
  v109 = v97 + 4 * v205;
  v178[v97] = 4;
  LocalizedStringResource.init(stringLiteral:)(v175, 0x8000000100048DE0);
  v177 = (char *)(v109 + *(int *)(v99 + 48));
  v110 = v168;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v195(v110, 0, 1, v197);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v111 = v202;
  v207(v108, 0, 1, v202);
  v112 = swift_allocObject(v206, v185, v101);
  *(_OWORD *)(v112 + 16) = v188;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100048E00);
  v113 = v107;
  v114 = String.LocalizationValue.init(stringLiteral:)(0xD0000000000000C3, 0x8000000100048E20);
  v115 = v198;
  static Locale.current.getter(v114);
  v116 = v192;
  v117 = v196;
  v118 = (void (*)(char *, uint64_t, uint64_t))v190;
  ((void (*)(char *, _QWORD, uint64_t))v190)(v192, v196, v204);
  v119 = v193;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v113, 0, 0, v115, v116, "Description text for the control that opens the Communication Safety pane", 73, 2);
  v120 = v199;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v179, v110, v199, v112, v119);
  v121 = &v178[v205 + v189];
  *v121 = 5;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100048F40);
  v122 = v191;
  v179 = &v121[*(int *)(v191 + 48)];
  v123 = v181;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v124 = v197;
  v195(v123, 0, 1, v197);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v120, 0, 1, v111);
  v125 = v185;
  v126 = swift_allocObject(v206, v185, v201);
  *(_OWORD *)(v126 + 16) = v188;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x8000000100048F60);
  v127 = v113;
  v128 = String.LocalizationValue.init(stringLiteral:)(0xD0000000000000B4, 0x8000000100048F90);
  v129 = v198;
  static Locale.current.getter(v128);
  v130 = v192;
  v131 = v204;
  v118(v192, v117, v204);
  v132 = v193;
  v133 = v129;
  v134 = v130;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v127, 0, 0, v133, v130, "Description text for the control that opens the Content and Privacy Restrictions pane", 85, 2);
  v135 = v199;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v180, v181, v199, v126, v132);
  v136 = v189;
  v137 = (_BYTE *)(v189 + 6 * v205);
  *v137 = 6;
  LocalizedStringResource.init(stringLiteral:)(0x656D69746E776F44, 0xE800000000000000);
  v181 = &v137[*(int *)(v122 + 48)];
  v138 = v184;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v139 = v124;
  v140 = v195;
  v195(v138, 0, 1, v139);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v135, 0, 1, v202);
  v141 = swift_allocObject(v206, v125, v201);
  *(_OWORD *)(v141 + 16) = v188;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x80000001000490B0);
  v142 = v194;
  v143 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000009ELL, 0x80000001000490E0);
  v144 = v198;
  static Locale.current.getter(v143);
  v145 = v134;
  v146 = v134;
  v147 = (void (*)(char *, _QWORD, uint64_t))v190;
  ((void (*)(char *, _QWORD, uint64_t))v190)(v146, v196, v131);
  v148 = v193;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v142, 0, 0, v144, v145, "Description text for the control that opens the Downtime pane", 61, 2);
  v149 = v199;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v182, v184, v199, v141, v148);
  *(_BYTE *)(v136 + v183 - v205) = 7;
  v150 = v169;
  LocalizedStringResource.init(stringLiteral:)(0x44206E6565726353, 0xEF65636E61747369);
  v151 = v170;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v140(v151, 0, 1, v197);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v149, 0, 1, v202);
  v152 = swift_allocObject(v206, v186, v201);
  *(_OWORD *)(v152 + 16) = v187;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000011, 0x80000001000491C0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000025, 0x80000001000491E0);
  v153 = v194;
  v154 = String.LocalizationValue.init(stringLiteral:)(v174, 0x8000000100049210);
  v155 = v198;
  static Locale.current.getter(v154);
  v156 = v192;
  v147(v192, v196, v204);
  v157 = v193;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v153, 0, 0, v155, v156, "Description text for the control that opens the Screen Distance pane", 68, 2);
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v150, v151, v149, v152, v157);
  *(_BYTE *)(v189 + v183) = 8;
  v158 = v171;
  LocalizedStringResource.init(stringLiteral:)(0x69766544206C6C41, 0xEB00000000736563);
  v159 = v173;
  LocalizedStringResource.init(stringLiteral:)(0x54206E6565726353, 0xEB00000000656D69);
  v195(v159, 0, 1, v197);
  DisplayRepresentation.Image.init(utTypeIdentifier:)(0xD000000000000022);
  v207(v149, 0, 1, v202);
  v160 = swift_allocObject(v206, v185, v201);
  *(_OWORD *)(v160 + 16) = v188;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000016, 0x8000000100049310);
  v161 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000072, 0x8000000100049330);
  static Locale.current.getter(v161);
  ((void (*)(char *, _QWORD, uint64_t))v190)(v156, v196, v204);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v153, 0, 0, v155, v156, "Description text for the App & Website Activity toggle", 54, 2);
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v158, v159, v149, v160, v157);
  return sub_10001C4F4(v172);
}

uint64_t sub_100006BC8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_100006BE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

unint64_t sub_100006C20()
{
  unint64_t result;

  result = qword_100059AE8;
  if (!qword_100059AE8)
  {
    result = swift_getWitnessTable(&unk_100046EA4, &type metadata for ScreenTimeDeepLinks);
    atomic_store(result, (unint64_t *)&qword_100059AE8);
  }
  return result;
}

uint64_t sub_100006C64(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

unint64_t sub_100006C78(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100055930, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t sub_100006CC0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_100006CE0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_100006D30(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = a2;
  v3 = a2;
  return swift_continuation_resume(v2);
}

void sub_100006D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5, uint64_t a6, uint64_t a7)
{
  id v11;
  NSString v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  v11 = objc_msgSend((id)objc_opt_self(STIconCache), "sharedCache");
  v12 = String._bridgeToObjectiveC()();
  if (a5)
    a5 = String._bridgeToObjectiveC()();
  v13 = swift_allocObject(&unk_100055F20, 32, 7);
  *(_QWORD *)(v13 + 16) = a6;
  *(_QWORD *)(v13 + 24) = a7;
  v16[4] = sub_100007094;
  v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100006CE0;
  v16[3] = &unk_100055F38;
  v14 = _Block_copy(v16);
  v15 = v17;
  swift_retain(a7);
  swift_release(v15);
  objc_msgSend(v11, "fetchPersonImageWithDSID:fullName:appleID:forceFetch:completionHandler:", a1, v12, a5, 0, v14);
  _Block_release(v14);

}

uint64_t sub_100006EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[19] = a4;
  v5[20] = a5;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return swift_task_switch(sub_100006EC4, 0, 0);
}

uint64_t sub_100006EC4()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[20];
  v2 = objc_msgSend((id)objc_opt_self(STIconCache), "sharedCache");
  v0[21] = v2;
  v3 = String._bridgeToObjectiveC()();
  v0[22] = v3;
  if (v1)
    v4 = String._bridgeToObjectiveC()();
  else
    v4 = 0;
  v5 = v0 + 2;
  v0[23] = v4;
  v6 = v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100006FD8;
  v7 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v8 = v0 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_100006D30;
  v8[3] = &unk_100055EF8;
  v8[4] = v7;
  objc_msgSend(v2, "fetchPersonImageWithDSID:fullName:appleID:forceFetch:completionHandler:", v6, v3, v4, 0, v8);
  return swift_continuation_await(v5);
}

uint64_t sub_100006FD8()
{
  return swift_task_switch(sub_100007024, 0, 0);
}

uint64_t sub_100007024()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 176);
  v1 = *(void **)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100007070()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100007094()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000070B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000070C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for ScreenTimeIconCache()
{
  return &type metadata for ScreenTimeIconCache;
}

ValueMetadata *type metadata accessor for ScreenTimeAppInfoCache()
{
  return &type metadata for ScreenTimeAppInfoCache;
}

uint64_t destroy for GraphLabelView(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s25ScreenTimeWidgetExtension14GraphLabelViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for GraphLabelView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for GraphLabelView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for GraphLabelView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphLabelView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphLabelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphLabelView()
{
  return &type metadata for GraphLabelView;
}

uint64_t destroy for GraphLabelPlaceholderView(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s25ScreenTimeWidgetExtension25GraphLabelPlaceholderViewVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for GraphLabelPlaceholderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for GraphLabelPlaceholderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphLabelPlaceholderView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphLabelPlaceholderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphLabelPlaceholderView()
{
  return &type metadata for GraphLabelPlaceholderView;
}

uint64_t sub_100007400(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004EB2C, 1);
}

__n128 sub_100007410@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[6];
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;

  v7 = *a1;
  v8 = static VerticalAlignment.center.getter();
  sub_1000074D4(a2, a3, v7, (uint64_t)v20);
  v9 = v21;
  v10 = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  result = (__n128)v20[0];
  v15 = v20[1];
  v16 = v20[2];
  v17 = v20[3];
  v18 = v20[4];
  v19 = v20[5];
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(__n128 *)(a4 + 24) = result;
  *(_OWORD *)(a4 + 40) = v15;
  *(_OWORD *)(a4 + 56) = v16;
  *(_OWORD *)(a4 + 72) = v17;
  *(_OWORD *)(a4 + 88) = v18;
  *(_OWORD *)(a4 + 104) = v19;
  *(_BYTE *)(a4 + 120) = v9;
  *(_BYTE *)(a4 + 121) = v10;
  *(_QWORD *)(a4 + 128) = v11;
  *(_BYTE *)(a4 + 136) = v12;
  *(_BYTE *)(a4 + 137) = v13;
  return result;
}

uint64_t sub_1000074D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[26];
  _QWORD v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;

  if ((result & 1) == 0)
  {
    v5 = LocalizedStringKey.init(stringLiteral:)(539831584, 0xE400000000000000);
    v6 = Text.init(_:tableName:bundle:comment:)(v5);
    v8 = v7;
    v10 = v9;
    v12 = v11 & 1;
    v13 = static Font.footnote.getter();
    v14 = Text.font(_:)(v13, v6, v8, v12, v10);
    v16 = v15;
    v18 = v17;
    v44 = v19;
    swift_release(v13);
    sub_100007D1C(v6, v8, v12);
    v20 = swift_bridgeObjectRelease(v10);
    v21 = static Alignment.leading.getter(v20);
    _FrameLayout.init(width:height:alignment:)(&v60, 0, 1, 0, 1, v21, v22);
    v47 = v14;
    *(_QWORD *)&v48 = v16;
    *((_QWORD *)&v48 + 1) = v18 & 1;
    *(_QWORD *)&v49 = v44;
    *((_QWORD *)&v49 + 1) = v60;
    *(_QWORD *)&v50 = v61;
    *((_QWORD *)&v50 + 1) = v62;
    *(_QWORD *)&v51 = v63;
    *((_QWORD *)&v51 + 1) = v64;
    *(_QWORD *)v52 = v65;
    *(_QWORD *)&v52[8] = swift_getKeyPath(&unk_100047300);
    *(_QWORD *)&v52[16] = 1;
    *(_WORD *)&v52[24] = 0;
    goto LABEL_6;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a3)
  {
    v47 = *(_QWORD *)(a2 + 8 * a3 + 32);
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    memset(v52, 0, 25);
    v52[25] = 1;
    swift_retain(v47);
LABEL_6:
    v23 = sub_100003C84(&qword_100059B40);
    v24 = sub_1000090F4();
    v25 = sub_1000091DC();
    _ConditionalContent<>.init(storage:)(v53, &v47, v23, &type metadata for LabelPlaceholderView, v24, v25);
    v26 = v53[0];
    v27 = v53[1];
    v28 = v53[2];
    v29 = v53[3];
    v30 = v53[4];
    v31 = v53[5];
    v32 = v53[6];
    v33 = v53[7];
    v34 = v54;
    v35 = v55;
    v36 = v56;
    v37 = v57;
    v38 = v58;
    v39 = v59;
    v41 = v57;
    v42 = v56;
    v43 = v55;
    v45 = v54;
    *(_QWORD *)a4 = v53[0];
    *(_QWORD *)(a4 + 8) = v27;
    *(_QWORD *)(a4 + 16) = v28;
    *(_QWORD *)(a4 + 24) = v29;
    *(_QWORD *)(a4 + 32) = v30;
    *(_QWORD *)(a4 + 40) = v31;
    *(_QWORD *)(a4 + 48) = v32;
    *(_QWORD *)(a4 + 56) = v33;
    *(_QWORD *)(a4 + 64) = v34;
    *(_QWORD *)(a4 + 72) = v35;
    *(_QWORD *)(a4 + 80) = v36;
    *(_QWORD *)(a4 + 88) = v37;
    *(_BYTE *)(a4 + 96) = v38;
    *(_BYTE *)(a4 + 97) = v39;
    *(_QWORD *)(a4 + 104) = 0;
    *(_BYTE *)(a4 + 112) = a3 != 2;
    *(_BYTE *)(a4 + 113) = a3 == 2;
    v40 = v26;
    sub_100009220(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39);
    return sub_10000926C(v40, v27, v28, v29, v30, v31, v32, v33, v45, v43, v42, v41, v38, v39);
  }
  __break(1u);
  return result;
}

uint64_t sub_100007790@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v3 = *v1;
  v5 = *((_QWORD *)v1 + 1);
  v4 = *((_QWORD *)v1 + 2);
  result = static VerticalAlignment.center.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_100003C84(&qword_100059B10);
    v13[0] = 0;
    v13[1] = v5;
    KeyPath = swift_getKeyPath(&unk_1000472E8);
    v8 = swift_allocObject(&unk_100056108, 40, 7);
    *(_BYTE *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v5;
    *(_QWORD *)(v8 + 32) = v4;
    swift_bridgeObjectRetain(v4);
    v9 = sub_100003C84(&qword_100059B18);
    v10 = sub_100003C84(&qword_100059B20);
    v11 = sub_100007C6C();
    v12 = sub_100009F64(&qword_100059B38, &qword_100059B20, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return ForEach<>.init(_:id:content:)(v13, KeyPath, sub_100007C60, v8, v9, v10, v11, &protocol witness table for Int, v12);
  }
  return result;
}

uint64_t sub_1000078B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v7 = sub_100003C84(&qword_100059B78);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003C84(&qword_100059B80);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v11);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  sub_100003C84(&qword_100059B88);
  v14 = swift_bridgeObjectRetain(a1);
  v15 = sub_100009304(v14);
  swift_bridgeObjectRelease(a1);
  v32 = v15;
  KeyPath = swift_getKeyPath(&unk_100047330);
  v17 = (_QWORD *)swift_allocObject(&unk_100056130, 40, 7);
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  v18 = swift_allocObject(&unk_100056158, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10000953C;
  *(_QWORD *)(v18 + 24) = v17;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  v19 = sub_100003C84(&qword_100059B90);
  v20 = sub_100003C84(&qword_100059B98);
  v21 = sub_100009F64(&qword_100059BA0, &qword_100059B90, (uint64_t)&protocol conformance descriptor for [A]);
  v22 = sub_100009F64(&qword_100059BA8, &qword_100059B98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v23 = ForEach<>.init(_:id:content:)(&v32, KeyPath, sub_10000956C, v18, v19, v20, v21, &protocol witness table for String, v22);
  v24 = static Alignment.leading.getter(v23);
  sub_10003E338(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v24, v25);
  v26 = sub_100003D44((uint64_t)v9, &qword_100059B78);
  v27 = static Animation.default.getter(v26);
  v28 = v31;
  sub_100003D00((uint64_t)v13, v31, &qword_100059B80);
  v29 = (uint64_t *)(v28 + *(int *)(sub_100003C84(&qword_100059BB0) + 36));
  *v29 = v27;
  v29[1] = a1;
  swift_bridgeObjectRetain(a1);
  return sub_100003D44((uint64_t)v13, &qword_100059B80);
}

unint64_t sub_100007B54@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = *(_OWORD *)a2;
  v13 = *(_OWORD *)(a2 + 3);
  v14 = v10;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > result)
  {
    v12 = *(_QWORD *)(a3 + 8 * result + 32);
    sub_1000095DC((uint64_t)&v14);
    sub_1000095DC((uint64_t)&v13);
    result = swift_retain(v12);
    *(_QWORD *)a4 = v4;
    *(_QWORD *)(a4 + 8) = v5;
    *(_QWORD *)(a4 + 16) = v6;
    *(_QWORD *)(a4 + 24) = v7;
    *(_QWORD *)(a4 + 32) = v8;
    *(_QWORD *)(a4 + 40) = v9;
    *(_QWORD *)(a4 + 48) = v12;
    *(_QWORD *)(a4 + 56) = 0;
    *(_BYTE *)(a4 + 64) = 1;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100007C08()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100007C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000078B0(*v1, v1[1], v1[2], a1);
}

uint64_t sub_100007C2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004EB04, 1);
}

uint64_t sub_100007C3C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_100007C60@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = sub_100007410(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 32), a2).n128_u64[0];
  return result;
}

unint64_t sub_100007C6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059B28;
  if (!qword_100059B28)
  {
    v1 = sub_100005554(&qword_100059B18);
    sub_100007CD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100059B28);
  }
  return result;
}

unint64_t sub_100007CD8()
{
  unint64_t result;

  result = qword_100059B30;
  if (!qword_100059B30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100059B30);
  }
  return result;
}

uint64_t sub_100007D1C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100007D2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  _BYTE v58[209];
  _OWORD v59[11];
  _OWORD v60[2];
  _OWORD v61[13];
  char v62;
  _OWORD v63[14];
  char v64;

  v2 = v1;
  v56 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003C84(&qword_100059C58);
  v7 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  v53 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003C84(&qword_100059C60);
  v10 = __chkstk_darwin(v54);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v55 = (char *)&v50 - v14;
  v15 = static HorizontalAlignment.leading.getter(v13);
  v16 = sub_100008214(v2, (uint64_t)v59);
  *(_OWORD *)((char *)&v61[9] + 7) = v59[9];
  *(_OWORD *)((char *)&v61[10] + 7) = v59[10];
  *(_OWORD *)((char *)&v61[11] + 7) = v60[0];
  v61[12] = *(_OWORD *)((char *)v60 + 9);
  *(_OWORD *)((char *)&v61[5] + 7) = v59[5];
  *(_OWORD *)((char *)&v61[6] + 7) = v59[6];
  *(_OWORD *)((char *)&v61[7] + 7) = v59[7];
  *(_OWORD *)((char *)&v61[8] + 7) = v59[8];
  *(_OWORD *)((char *)&v61[1] + 7) = v59[1];
  *(_OWORD *)((char *)&v61[2] + 7) = v59[2];
  *(_OWORD *)((char *)&v61[3] + 7) = v59[3];
  *(_OWORD *)((char *)&v61[4] + 7) = v59[4];
  *(_OWORD *)((char *)v61 + 7) = v59[0];
  *(_OWORD *)&v58[145] = v61[9];
  *(_OWORD *)&v58[161] = v61[10];
  *(_OWORD *)&v58[177] = v61[11];
  *(_OWORD *)&v58[193] = *(_OWORD *)((char *)v60 + 9);
  *(_OWORD *)&v58[81] = v61[5];
  *(_OWORD *)&v58[97] = v61[6];
  *(_OWORD *)&v58[113] = v61[7];
  *(_OWORD *)&v58[129] = v61[8];
  *(_OWORD *)&v58[17] = v61[1];
  *(_OWORD *)&v58[33] = v61[2];
  *(_OWORD *)&v58[49] = v61[3];
  *(_OWORD *)&v58[65] = v61[4];
  v62 = 1;
  v57 = (unint64_t)v15;
  v58[0] = 1;
  *(_OWORD *)&v58[1] = v61[0];
  static AccessibilityChildBehavior.ignore.getter(v16);
  v17 = sub_100003C84(&qword_100059C68);
  v18 = sub_100009F64(&qword_100059C70, &qword_100059C68, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v5, v17, v18);
  (*(void (**)(char *, unint64_t))(v50 + 8))(v5, v51);
  v63[12] = *(_OWORD *)&v58[176];
  v63[13] = *(_OWORD *)&v58[192];
  v19 = (uint64_t)v12;
  v63[8] = *(_OWORD *)&v58[112];
  v63[9] = *(_OWORD *)&v58[128];
  v64 = v58[208];
  v63[10] = *(_OWORD *)&v58[144];
  v63[11] = *(_OWORD *)&v58[160];
  v63[4] = *(_OWORD *)&v58[48];
  v63[5] = *(_OWORD *)&v58[64];
  v63[6] = *(_OWORD *)&v58[80];
  v63[7] = *(_OWORD *)&v58[96];
  v63[0] = v57;
  v63[1] = *(_OWORD *)v58;
  v63[2] = *(_OWORD *)&v58[16];
  v63[3] = *(_OWORD *)&v58[32];
  sub_100009E20((uint64_t)v63);
  v20 = *(_QWORD *)(v2 + 8);
  v21 = *(double *)(v2 + 16);
  *(_QWORD *)&v57 = *(_QWORD *)v2;
  *((_QWORD *)&v57 + 1) = v20;
  v22 = sub_100009EB0();
  swift_bridgeObjectRetain(v20);
  v51 = v22;
  v23 = Text.init<A>(_:)(&v57, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  *(_QWORD *)&v57 = v17;
  *((_QWORD *)&v57 + 1) = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v57, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v31 = v52;
  View.accessibility(label:)(v23, v25, v29, v27, v52, OpaqueTypeConformance2);
  sub_100007D1C(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v31);
  if (v21 < 0.0)
    goto LABEL_9;
  if (qword_100059948 != -1)
    swift_once(&qword_100059948, sub_10003A90C);
  v32 = (void *)qword_10005B0E0;
  v33 = v21 < 60.0 ? 128 : 96;
  objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v33, v50);
  objc_msgSend(v32, "setUnitsStyle:", 3);
  v34 = objc_msgSend(v32, "stringFromTimeInterval:", v21);
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

  }
  else
  {
LABEL_9:
    v36 = 0;
    v38 = 0xE000000000000000;
  }
  if (String.count.getter(v36, v38))
  {
    *(_QWORD *)&v57 = v36;
    *((_QWORD *)&v57 + 1) = v38;
    v39 = Text.init<A>(_:)(&v57, &type metadata for String, v51);
  }
  else
  {
    swift_bridgeObjectRelease(v38);
    v43 = LocalizedStringKey.init(stringLiteral:)(0x65676173556F4ELL, 0xE700000000000000);
    v39 = Text.init(_:tableName:bundle:comment:)(v43);
  }
  v44 = v39;
  v45 = v40;
  v46 = v42;
  v47 = v41 & 1;
  v48 = (uint64_t)v55;
  ModifiedContent<>.accessibility(value:)();
  sub_100007D1C(v44, v45, v47);
  swift_bridgeObjectRelease(v46);
  sub_100003D44(v19, &qword_100059C60);
  return sub_100009EF4(v48, v56, &qword_100059C60);
}

uint64_t sub_100008214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[7];
  _BYTE v74[7];
  _BYTE v75[7];
  _BYTE v76[7];
  _BYTE v77[7];
  _BYTE v78[7];
  _BYTE v79[7];
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v86 = *(_QWORD *)a1;
  v87 = v4;
  v6 = sub_100009EB0();
  swift_bridgeObjectRetain(v4);
  v60 = v6;
  v7 = Text.init<A>(_:)(&v86, &type metadata for String, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.footnote.getter();
  v15 = Text.font(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v68 = v20;
  swift_release(v14);
  v21 = v19 & 1;
  sub_100007D1C(v7, v9, v13);
  swift_bridgeObjectRelease(v11);
  v22 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 48), v15, v17, v21, v68);
  v70 = v23;
  v71 = v22;
  v25 = v24;
  v72 = v26;
  sub_100007D1C(v15, v17, v21);
  v27 = swift_bridgeObjectRelease(v68);
  v28 = static Alignment.leading.getter(v27);
  _FrameLayout.init(width:height:alignment:)(&v80, 0, 1, 0, 1, v28, v29);
  v67 = v80;
  v66 = v81;
  v65 = v82;
  v64 = v83;
  v62 = v85;
  v63 = v84;
  KeyPath = swift_getKeyPath(&unk_100047300);
  if (v5 >= 0.0)
  {
    if (qword_100059948 != -1)
      swift_once(&qword_100059948, sub_10003A90C);
    v32 = (void *)qword_10005B0E0;
    if (v5 < 60.0)
      v33 = 128;
    else
      v33 = 96;
    objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v33);
    objc_msgSend(v32, "setUnitsStyle:", 1);
    v34 = objc_msgSend(v32, "stringFromTimeInterval:", v5);
    if (v34)
    {
      v35 = v34;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v30 = v36;

    }
    else
    {
      v31 = 0;
      v30 = 0xE000000000000000;
    }
  }
  else
  {
    v30 = 0xE200000000000000;
    v31 = 11565;
  }
  v86 = v31;
  v87 = v30;
  v37 = Text.init<A>(_:)(&v86, &type metadata for String, v60);
  v39 = v38;
  v41 = v40;
  v43 = v42 & 1;
  v44 = static Font.footnote.getter();
  v45 = Text.font(_:)(v44, v37, v39, v43, v41);
  v47 = v46;
  v49 = v48;
  v61 = v50;
  swift_release(v44);
  sub_100007D1C(v37, v39, v43);
  v51 = swift_bridgeObjectRelease(v41);
  v52 = static Alignment.leading.getter(v51);
  _FrameLayout.init(width:height:alignment:)(&v86, 0, 1, 0, 1, v52, v53);
  LOBYTE(v39) = v87;
  v58 = v88;
  v59 = v86;
  LOBYTE(v41) = v89;
  v56 = v91;
  v57 = v90;
  v54 = swift_getKeyPath(&unk_100047300);
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v79;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v79[3];
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v78;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v78[3];
  *(_DWORD *)(a2 + 57) = *(_DWORD *)v77;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v77[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v76;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v76[3];
  *(_DWORD *)(a2 + 121) = *(_DWORD *)v75;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v75[3];
  *(_DWORD *)(a2 + 148) = *(_DWORD *)&v74[3];
  *(_DWORD *)(a2 + 145) = *(_DWORD *)v74;
  *(_DWORD *)(a2 + 164) = *(_DWORD *)&v73[3];
  *(_DWORD *)(a2 + 161) = *(_DWORD *)v73;
  *(_QWORD *)a2 = v71;
  *(_QWORD *)(a2 + 8) = v70;
  *(_BYTE *)(a2 + 16) = v25 & 1;
  *(_QWORD *)(a2 + 24) = v72;
  *(_QWORD *)(a2 + 32) = v67;
  *(_BYTE *)(a2 + 40) = v66;
  *(_QWORD *)(a2 + 48) = v65;
  *(_BYTE *)(a2 + 56) = v64;
  *(_QWORD *)(a2 + 64) = v63;
  *(_QWORD *)(a2 + 72) = v62;
  *(_QWORD *)(a2 + 80) = KeyPath;
  *(_QWORD *)(a2 + 88) = 1;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v45;
  *(_QWORD *)(a2 + 112) = v47;
  *(_BYTE *)(a2 + 120) = v49 & 1;
  *(_QWORD *)(a2 + 128) = v61;
  *(_QWORD *)(a2 + 136) = v59;
  *(_BYTE *)(a2 + 144) = v39;
  *(_QWORD *)(a2 + 152) = v58;
  *(_BYTE *)(a2 + 160) = v41;
  *(_QWORD *)(a2 + 168) = v57;
  *(_QWORD *)(a2 + 176) = v56;
  *(_QWORD *)(a2 + 184) = v54;
  *(_QWORD *)(a2 + 192) = 1;
  *(_BYTE *)(a2 + 200) = 0;
  sub_10000925C(v71, v70, v25 & 1);
  swift_bridgeObjectRetain(v72);
  swift_retain(KeyPath);
  sub_10000925C(v45, v47, v49 & 1);
  swift_bridgeObjectRetain(v61);
  swift_retain(v54);
  sub_100007D1C(v45, v47, v49 & 1);
  swift_release(v54);
  swift_bridgeObjectRelease(v61);
  sub_100007D1C(v71, v70, v25 & 1);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v72);
}

uint64_t sub_1000086D4@<X0>(uint64_t a1@<X8>)
{
  return sub_100007D2C(a1);
}

uint64_t sub_100008714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  void (*v117)(char *, uint64_t, uint64_t);
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v122 = a1;
  v131 = a2;
  v129 = sub_100003C84(&qword_100059C10);
  __chkstk_darwin(v129);
  v127 = (uint64_t)&v108 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003C84(&qword_100059C18);
  __chkstk_darwin(v125);
  v123 = (uint64_t)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100003C84(&qword_100059C20);
  v4 = __chkstk_darwin(v126);
  v130 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v124 = (char *)&v108 - v7;
  __chkstk_darwin(v6);
  v128 = (uint64_t)&v108 - v8;
  v121 = sub_100003C84(&qword_100059C28);
  __chkstk_darwin(v121);
  v120 = (uint64_t)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v133);
  v11 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100003C84(&qword_100059C30);
  __chkstk_darwin(v134);
  v13 = (char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100003C84(&qword_100059C38);
  __chkstk_darwin(v113);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100003C84(&qword_100059C40);
  __chkstk_darwin(v114);
  v17 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100003C84(&qword_100059C48);
  v18 = __chkstk_darwin(v115);
  v132 = (uint64_t)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v135 = (uint64_t)&v108 - v20;
  v21 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001000496B0);
  v22 = Text.init(_:tableName:bundle:comment:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Font.footnote.getter();
  v111 = Text.font(_:)(v29, v22, v24, v28, v26);
  v109 = v30;
  v32 = v31;
  v110 = v33;
  swift_release(v29);
  sub_100007D1C(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  v34 = &v11[*(int *)(v133 + 20)];
  v35 = enum case for RoundedCornerStyle.continuous(_:);
  v119 = enum case for RoundedCornerStyle.continuous(_:);
  v118 = type metadata accessor for RoundedCornerStyle(0);
  v117 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 104);
  v117(v34, v35, v118);
  __asm { FMOV            V0.2D, #4.0 }
  v116 = _Q0;
  *(_OWORD *)v11 = _Q0;
  KeyPath = swift_getKeyPath(&unk_100047420);
  sub_100009DA0((uint64_t)v11, (uint64_t)v13);
  v42 = (uint64_t *)&v13[*(int *)(v134 + 36)];
  v112 = v13;
  v43 = v122;
  *v42 = KeyPath;
  v42[1] = v43;
  swift_retain(v43);
  sub_100009DE4((uint64_t)v11);
  sub_100003D00((uint64_t)v13, (uint64_t)v15, &qword_100059C30);
  *(_QWORD *)&v15[*(int *)(v113 + 36)] = 0x3FB47AE147AE147BLL;
  v44 = sub_100003D44((uint64_t)v13, &qword_100059C30);
  LOBYTE(KeyPath) = static Edge.Set.all.getter(v44);
  v45 = EdgeInsets.init(_all:)(2.0);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  sub_100003D00((uint64_t)v15, (uint64_t)v17, &qword_100059C38);
  v52 = &v17[*(int *)(v114 + 36)];
  *v52 = KeyPath;
  *((double *)v52 + 1) = v45;
  *((_QWORD *)v52 + 2) = v47;
  *((_QWORD *)v52 + 3) = v49;
  *((_QWORD *)v52 + 4) = v51;
  v52[40] = 0;
  v53 = sub_100003D44((uint64_t)v15, &qword_100059C38);
  v54 = static Alignment.center.getter(v53);
  v56 = v55;
  v57 = v120;
  sub_100003D00((uint64_t)v17, v120, &qword_100059C40);
  v58 = (uint64_t *)(v57 + *(int *)(v121 + 36));
  *v58 = v54;
  v58[1] = v56;
  v59 = v132;
  sub_100003D00(v57, v132 + *(int *)(v115 + 36), &qword_100059C28);
  v60 = v111;
  v61 = v109;
  *(_QWORD *)v59 = v111;
  *(_QWORD *)(v59 + 8) = v61;
  *(_BYTE *)(v59 + 16) = v32 & 1;
  v62 = v110;
  *(_QWORD *)(v59 + 24) = v110;
  sub_10000925C(v60, v61, v32 & 1);
  swift_bridgeObjectRetain(v62);
  sub_100003D44(v57, &qword_100059C28);
  sub_100003D44((uint64_t)v17, &qword_100059C40);
  sub_100007D1C(v60, v61, v32 & 1);
  swift_bridgeObjectRelease(v62);
  sub_100009EF4(v59, v135, &qword_100059C48);
  v63 = LocalizedStringKey.init(stringLiteral:)(0x2020202020202020, 0xE900000000000020);
  v64 = Text.init(_:tableName:bundle:comment:)(v63);
  v66 = v65;
  v68 = v67;
  v70 = v69 & 1;
  v71 = static Font.footnote.getter();
  v72 = Text.font(_:)(v71, v64, v66, v70, v68);
  v74 = v73;
  LOBYTE(v54) = v75;
  v122 = v76;
  swift_release(v71);
  LOBYTE(v71) = v54 & 1;
  sub_100007D1C(v64, v66, v70);
  swift_bridgeObjectRelease(v68);
  v117(&v11[*(int *)(v133 + 20)], v119, v118);
  *(_OWORD *)v11 = v116;
  v77 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v78 = Color.init(_:)(v77);
  v79 = swift_getKeyPath(&unk_100047420);
  v80 = (uint64_t)v112;
  sub_100009DA0((uint64_t)v11, (uint64_t)v112);
  v81 = (uint64_t *)(v80 + *(int *)(v134 + 36));
  *v81 = v79;
  v81[1] = v78;
  v82 = sub_100009DE4((uint64_t)v11);
  LOBYTE(v78) = static Edge.Set.all.getter(v82);
  v83 = EdgeInsets.init(_all:)(2.0);
  v85 = v84;
  v87 = v86;
  v89 = v88;
  v90 = v123;
  sub_100003D00(v80, v123, &qword_100059C30);
  v91 = v90 + *(int *)(v125 + 36);
  *(_BYTE *)v91 = v78;
  *(double *)(v91 + 8) = v83;
  *(_QWORD *)(v91 + 16) = v85;
  *(_QWORD *)(v91 + 24) = v87;
  *(_QWORD *)(v91 + 32) = v89;
  *(_BYTE *)(v91 + 40) = 0;
  v92 = sub_100003D44(v80, &qword_100059C30);
  v93 = static Alignment.center.getter(v92);
  v95 = v94;
  v96 = v127;
  sub_100003D00(v90, v127, &qword_100059C18);
  v97 = (uint64_t *)(v96 + *(int *)(v129 + 36));
  *v97 = v93;
  v97[1] = v95;
  v98 = v124;
  sub_100003D00(v96, (uint64_t)&v124[*(int *)(v126 + 36)], &qword_100059C10);
  *(_QWORD *)v98 = v72;
  *((_QWORD *)v98 + 1) = v74;
  v98[16] = v71;
  v99 = v122;
  *((_QWORD *)v98 + 3) = v122;
  sub_10000925C(v72, v74, v71);
  swift_bridgeObjectRetain(v99);
  sub_100003D44(v96, &qword_100059C10);
  sub_100003D44(v90, &qword_100059C18);
  sub_100007D1C(v72, v74, v71);
  swift_bridgeObjectRelease(v99);
  v100 = (uint64_t)v98;
  v101 = v128;
  sub_100009EF4(v100, v128, &qword_100059C20);
  v102 = v135;
  v103 = v132;
  sub_100003D00(v135, v132, &qword_100059C48);
  v104 = v130;
  sub_100003D00(v101, v130, &qword_100059C20);
  v105 = v131;
  sub_100003D00(v103, v131, &qword_100059C48);
  v106 = sub_100003C84(&qword_100059C50);
  sub_100003D00(v104, v105 + *(int *)(v106 + 48), &qword_100059C20);
  sub_100003D44(v101, &qword_100059C20);
  sub_100003D44(v102, &qword_100059C48);
  sub_100003D44(v104, &qword_100059C20);
  return sub_100003D44(v103, &qword_100059C48);
}

uint64_t sub_100008FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v5 = sub_100003C84(&qword_100059C08);
  return sub_100008714(v4, a2 + *(int *)(v5 + 44));
}

uint64_t sub_10000903C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10000906C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10000909C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000090C8(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_1000090F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059B48;
  if (!qword_100059B48)
  {
    v1 = sub_100005554(&qword_100059B40);
    sub_100009178();
    sub_100009F64(&qword_100059B60, &qword_100059B68, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100059B48);
  }
  return result;
}

unint64_t sub_100009178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059B50;
  if (!qword_100059B50)
  {
    v1 = sub_100005554(&qword_100059B58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100059B50);
  }
  return result;
}

unint64_t sub_1000091DC()
{
  unint64_t result;

  result = qword_100059B70;
  if (!qword_100059B70)
  {
    result = swift_getWitnessTable(&unk_1000473D0, &type metadata for LabelPlaceholderView);
    atomic_store(result, (unint64_t *)&qword_100059B70);
  }
  return result;
}

uint64_t sub_100009220(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  if ((a14 & 1) == 0)
  {
    sub_10000925C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    a1 = a11;
  }
  return swift_retain(a1);
}

uint64_t sub_10000925C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000926C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  if ((a14 & 1) != 0)
    return swift_release(a1);
  sub_100007D1C(a1, a2, a3 & 1);
  swift_release(a11);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_1000092B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000092DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100009304(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(result + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    result = swift_bridgeObjectRetain(result);
    v3 = 0;
    v4 = 0;
    v5 = (_QWORD *)((char *)&_swiftEmptyArrayStorage + 32);
    v27 = result;
    v28 = v1;
    v6 = (uint64_t *)(result + 72);
    while (1)
    {
      v7 = *(v6 - 4);
      v29 = *(v6 - 5);
      v8 = *(v6 - 3);
      v10 = *(v6 - 2);
      v9 = *(v6 - 1);
      v11 = *v6;
      if (v3)
      {
        swift_bridgeObjectRetain(v7);
        result = swift_bridgeObjectRetain(v9);
        v12 = __OFSUB__(v3--, 1);
        if (v12)
          goto LABEL_28;
      }
      else
      {
        v13 = v2[3];
        if ((uint64_t)((v13 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_29;
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
        if (v14 <= 1)
          v15 = 1;
        else
          v15 = v14;
        v16 = sub_100003C84(&qword_100059BB8);
        v17 = (_QWORD *)swift_allocObject(v16, 56 * v15 + 32, 7);
        v18 = (uint64_t)(j__malloc_size(v17) - 32) / 56;
        v17[2] = v15;
        v17[3] = 2 * v18;
        v19 = v17 + 4;
        v20 = v2[3] >> 1;
        v5 = &v17[7 * v20 + 4];
        v21 = (v18 & 0x7FFFFFFFFFFFFFFFLL) - v20;
        if (v2[2])
        {
          if (v17 != v2 || v19 >= &v2[7 * v20 + 4])
            memmove(v19, v2 + 4, 56 * v20);
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v9);
          v23 = v2;
          v2[2] = 0;
        }
        else
        {
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v9);
          v23 = v2;
        }
        result = swift_release(v23);
        v2 = v17;
        v1 = v28;
        v12 = __OFSUB__(v21, 1);
        v3 = v21 - 1;
        if (v12)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
      }
      v6 += 6;
      *v5 = v4;
      v5[1] = v29;
      v5[2] = v7;
      v5[3] = v8;
      v5[4] = v10;
      v5[5] = v9;
      v5[6] = v11;
      v5 += 7;
      if (v1 == ++v4)
      {
        result = swift_bridgeObjectRelease(v27);
        goto LABEL_24;
      }
    }
  }
  v3 = 0;
LABEL_24:
  v24 = v2[3];
  if (v24 >= 2)
  {
    v25 = v24 >> 1;
    v12 = __OFSUB__(v25, v3);
    v26 = v25 - v3;
    if (v12)
      goto LABEL_30;
    v2[2] = v26;
  }
  return (uint64_t)v2;
}

uint64_t sub_100009510()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_10000953C@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100007B54(a1, a2, *(_QWORD *)(v3 + 32), a3);
}

uint64_t sub_100009548()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

__n128 sub_10000956C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void (*v4)(_OWORD *__return_ptr, uint64_t, _OWORD *);
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  _OWORD v9[4];
  char v10;
  _OWORD v11[3];

  v4 = *(void (**)(_OWORD *__return_ptr, uint64_t, _OWORD *))(v2 + 16);
  v5 = *a1;
  v6 = *(_OWORD *)(a1 + 3);
  v11[0] = *(_OWORD *)(a1 + 1);
  v11[1] = v6;
  v11[2] = *(_OWORD *)(a1 + 5);
  v4(v9, v5, v11);
  v7 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v7;
  *(_BYTE *)(a2 + 64) = v10;
  result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000095DC(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100009608(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(result + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain(result);
    v4 = 0;
    v5 = 0;
    v6 = (_QWORD *)((char *)&_swiftEmptyArrayStorage + 32);
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        v11 = sub_100003C84(&qword_100059BC8);
        v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
        v13 = j__malloc_size(v12);
        v14 = v13 - 32;
        if (v13 < 32)
          v14 = v13 - 17;
        v15 = v14 >> 4;
        v12[2] = v10;
        v12[3] = 2 * (v14 >> 4);
        v16 = (unint64_t)(v12 + 4);
        v17 = v2[3] >> 1;
        if (v2[2])
        {
          if (v12 != v2 || v16 >= (unint64_t)&v2[2 * v17 + 4])
            memmove(v12 + 4, v2 + 4, 16 * v17);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v16 + 16 * v17);
        v4 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        result = swift_release(v2);
        v2 = v12;
      }
      v19 = __OFSUB__(v4--, 1);
      if (v19)
        break;
      *v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease(v3);
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v4 = 0;
LABEL_23:
  v20 = v2[3];
  if (v20 < 2)
    return (uint64_t)v2;
  v21 = v20 >> 1;
  v19 = __OFSUB__(v21, v4);
  v22 = v21 - v4;
  if (!v19)
  {
    v2[2] = v22;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100009780(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  id v28;
  id v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(result + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    result = swift_bridgeObjectRetain(result);
    v3 = 0;
    v4 = 0;
    v5 = &_swiftEmptyArrayStorage[4];
    v34 = result;
    v35 = v1;
    v6 = (uint64_t *)(result + 80);
    while (1)
    {
      v7 = *(v6 - 5);
      v8 = (void *)*(v6 - 4);
      v9 = (void *)*(v6 - 3);
      v10 = *(v6 - 2);
      v11 = *v6;
      v36 = *(v6 - 1);
      v37 = *(v6 - 6);
      if (v3)
      {
        swift_bridgeObjectRetain(v7);
        v12 = v8;
        v13 = v9;
        result = swift_bridgeObjectRetain(v11);
        v14 = __OFSUB__(v3--, 1);
        if (v14)
          goto LABEL_30;
      }
      else
      {
        v15 = v2[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_31;
        v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = v16;
        v18 = sub_100003C84(&qword_100059BC0);
        v19 = (_QWORD *)swift_allocObject(v18, (v17 << 6) | 0x20, 7);
        v20 = j__malloc_size(v19);
        v21 = v20 - 32;
        if (v20 < 32)
          v21 = v20 + 31;
        v22 = v21 >> 6;
        v19[2] = v17;
        v19[3] = 2 * (v21 >> 6);
        v23 = v19 + 4;
        v24 = v2[3] >> 1;
        v5 = &v19[8 * v24 + 4];
        v25 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
        if (v2[2])
        {
          if (v19 != v2 || v23 >= &v2[8 * v24 + 4])
            memmove(v23, v2 + 4, v24 << 6);
          swift_bridgeObjectRetain(v7);
          v27 = v8;
          v28 = v9;
          swift_bridgeObjectRetain(v11);
          v2[2] = 0;
        }
        else
        {
          swift_bridgeObjectRetain(v7);
          v29 = v8;
          v30 = v9;
          swift_bridgeObjectRetain(v11);
        }
        result = swift_release(v2);
        v2 = v19;
        v1 = v35;
        v14 = __OFSUB__(v25, 1);
        v3 = v25 - 1;
        if (v14)
        {
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
      }
      v6 += 7;
      *v5 = v4;
      v5[1] = v37;
      v5[2] = v7;
      v5[3] = v8;
      v5[4] = v9;
      v5[5] = v10;
      v5[6] = v36;
      v5[7] = v11;
      v5 += 8;
      if (v1 == ++v4)
      {
        result = swift_bridgeObjectRelease(v34);
        goto LABEL_26;
      }
    }
  }
  v3 = 0;
LABEL_26:
  v31 = v2[3];
  if (v31 >= 2)
  {
    v32 = v31 >> 1;
    v14 = __OFSUB__(v32, v3);
    v33 = v32 - v3;
    if (v14)
      goto LABEL_32;
    v2[2] = v33;
  }
  return (uint64_t)v2;
}

ValueMetadata *type metadata accessor for LabelPlaceholderView()
{
  return &type metadata for LabelPlaceholderView;
}

uint64_t initializeBufferWithCopyOfBuffer for MostUsedItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for LabelView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for LabelView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

_QWORD *assignWithCopy for LabelView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for MostUsedItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for LabelView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[4];
  v7 = a1[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[6];
  v9 = a1[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MostUsedItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MostUsedItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelView()
{
  return &type metadata for LabelView;
}

uint64_t sub_100009BF8()
{
  return sub_100009F64(&qword_100059BD0, &qword_100059BD8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_100009C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059BE0;
  if (!qword_100059BE0)
  {
    v1 = sub_100005554(&qword_100059BB0);
    sub_100009CAC();
    sub_100009F64(&qword_100059BF8, &qword_100059C00, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100059BE0);
  }
  return result;
}

unint64_t sub_100009CAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059BE8;
  if (!qword_100059BE8)
  {
    v1 = sub_100005554(&qword_100059B80);
    sub_100009F64(&qword_100059BF0, &qword_100059B78, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100059BE8);
  }
  return result;
}

uint64_t sub_100009D30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004EB7C, 1);
}

uint64_t sub_100009D40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004EB54, 1);
}

uint64_t sub_100009D50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100009D78(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100009DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009DE4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100009E20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_BYTE *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 208);
  sub_100007D1C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_100007D1C(v4, v5, v6);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  return a1;
}

unint64_t sub_100009EB0()
{
  unint64_t result;

  result = qword_100059C78;
  if (!qword_100059C78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100059C78);
  }
  return result;
}

uint64_t sub_100009EF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003C84(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100009F38()
{
  return sub_100009F64(&qword_100059C80, &qword_100059C88, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100009F64(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005554(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100009FA8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100059C90;
  if (!qword_100059C90)
  {
    v1 = sub_100005554(&qword_100059C60);
    v2[0] = sub_100005554(&qword_100059C68);
    v2[1] = sub_100009F64(&qword_100059C70, &qword_100059C68, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000A05C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100059C90);
  }
  return result;
}

unint64_t sub_10000A05C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059C98;
  if (!qword_100059C98)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100059C98);
  }
  return result;
}

uint64_t *sub_10000A0A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    v19 = type metadata accessor for DateInterval(0);
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain(v16);
    v20(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_10000A1BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *sub_10000A250(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v17 = type metadata accessor for DateInterval(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain(v14);
  v18(v15, v16, v17);
  return a1;
}

uint64_t *sub_10000A338(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

char *sub_10000A438(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *sub_10000A508(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_10000A5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000A608);
}

uint64_t sub_10000A608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100003C84(&qword_100059CA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for DateInterval(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10000A6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000A6C0);
}

uint64_t sub_10000A6C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100003C84(&qword_100059CA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for DateInterval(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ScreenTimeWidgetGraph(uint64_t a1)
{
  uint64_t result;

  result = qword_100059D08;
  if (!qword_100059D08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScreenTimeWidgetGraph);
  return result;
}

void sub_10000A7A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10000A834(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for DateInterval(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

void sub_10000A834(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100059D18)
  {
    v2 = type metadata accessor for WidgetRenderingMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100059D18);
  }
}

uint64_t sub_10000A888(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004EBCC, 1);
}

uint64_t sub_10000A898()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;

  v0 = sub_100003C84(&qword_100059ED8);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100047450;
  v2 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(v1 + 32) = Color.init(_:)(objc_msgSend(v2, "systemBlueColor"));
  *(_QWORD *)(v1 + 40) = Color.init(_:)(objc_msgSend(v2, "systemTealColor"));
  *(_QWORD *)(v1 + 48) = Color.init(_:)(objc_msgSend(v2, "systemOrangeColor"));
  *(_QWORD *)(v1 + 56) = Color.init(_:)(objc_msgSend(v2, "systemGray3Color"));
  result = specialized Array._endMutation()();
  qword_10005D110 = v1;
  return result;
}

double sub_10000A984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for HourlyUsage(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ScreenTimeWidgetGraph(0) + 20));
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0.0;
  v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v8 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRetain(v5);
  v9 = 0.0;
  do
  {
    sub_10000DB08(v7, (uint64_t)v4, type metadata accessor for HourlyUsage);
    v10 = *(int *)(v1 + 20);
    if (v9 <= *(double *)&v4[v10])
      v9 = *(double *)&v4[v10];
    sub_10000DB4C((uint64_t)v4);
    v7 += v8;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease(v5);
  return v9;
}

_QWORD *sub_10000AA80(double a1, double a2, double a3)
{
  uint64_t v6;
  _QWORD *result;
  char v8;
  uint64_t v9;
  double v10;
  BOOL v11;
  double v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v6 = sub_10000DA94(a1, a2, a3);
  result = (_QWORD *)sub_100021CD8(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
    goto LABEL_30;
  result = &_swiftEmptyArrayStorage;
  v8 = 0;
  v9 = 0;
  if (!v6)
  {
    v12 = a1;
    goto LABEL_16;
  }
  v10 = a1;
  do
  {
    v11 = v10 <= a2;
    if (a3 > 0.0)
      v11 = v10 >= a2;
    if (v11)
    {
      if (v8 & 1 | (v10 != a2))
        goto LABEL_28;
      v8 = 1;
      v12 = v10;
    }
    else
    {
      v13 = __OFADD__(v9++, 1);
      if (v13)
        goto LABEL_29;
      v12 = a1 + (double)v9 * a3;
    }
    v20 = result;
    v15 = result[2];
    v14 = result[3];
    if (v15 >= v14 >> 1)
    {
      sub_100021CD8(v14 > 1, v15 + 1, 1);
      result = v20;
    }
    result[2] = v15 + 1;
    *(double *)&result[v15 + 4] = v10;
    v10 = v12;
    --v6;
  }
  while (v6);
  while (1)
  {
LABEL_16:
    v16 = v12 <= a2;
    if (a3 > 0.0)
      v16 = v12 >= a2;
    if (!v16)
      break;
    if ((v12 != a2) | v8 & 1)
      return result;
    v8 = 1;
    v17 = v12;
LABEL_23:
    v21 = result;
    v19 = result[2];
    v18 = result[3];
    if (v19 >= v18 >> 1)
    {
      sub_100021CD8(v18 > 1, v19 + 1, 1);
      result = v21;
    }
    result[2] = v19 + 1;
    *(double *)&result[v19 + 4] = v12;
    v12 = v17;
  }
  v13 = __OFADD__(v9++, 1);
  if (!v13)
  {
    v17 = a1 + (double)v9 * a3;
    goto LABEL_23;
  }
  __break(1u);
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10000AC64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99[16];
  unint64_t v100;
  char v101[8];
  uint64_t v102;
  char v103[8];
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v2 = v1;
  v98 = a1;
  v97 = type metadata accessor for ContentTransition(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003C84(&qword_100059D50);
  __chkstk_darwin(v4);
  v6 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003C84(&qword_100059D58);
  v78 = *(uint64_t **)(v77 - 8);
  __chkstk_darwin(v77);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100003C84(&qword_100059D60);
  v81 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100003C84(&qword_100059D68);
  v84 = *(uint64_t **)(v83 - 8);
  __chkstk_darwin(v83);
  v79 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003C84(&qword_100059D70);
  v90 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v82 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100003C84(&qword_100059D78);
  v92 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v85 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003C84(&qword_100059D80);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v86 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003C84(&qword_100059D88);
  __chkstk_darwin(v89);
  v87 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003C84(&qword_100059D90);
  v21 = type metadata accessor for Date(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  v74 = xmmword_100046DD0;
  v75 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_100046DD0;
  v23 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v24 = v2 + *(int *)(v23 + 24);
  v25 = DateInterval.start.getter(v23);
  v26 = DateInterval.end.getter(v25);
  static Calendar.current.getter(v26);
  v76 = sub_10000B564(v24, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v104 = v2;
  v105 = 0x4018000000000000;
  v106 = 0;
  v27 = sub_100003C84(&qword_100059D98);
  v28 = sub_10000D5FC();
  Chart.init(content:)(sub_10000D5F0, v103, v27, v28);
  v29 = sub_100003C84(&qword_100059DD8);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = v74;
  *(_QWORD *)(v30 + 32) = 0;
  if (sub_10000A984() > 3600.0)
    v31 = 7200.0;
  else
    v31 = 3600.0;
  v32 = v31 * ceil(sub_10000A984() / v31);
  if (v32 <= v31)
    v32 = v31;
  *(double *)(v30 + 40) = v32;
  v108 = v30;
  v33 = type metadata accessor for ScaleType(0);
  *(_QWORD *)&v74 = *(_QWORD *)(*(_QWORD *)(v33 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v74)(v6, 1, 1, v33);
  v34 = sub_100003C84(&qword_100059DE0);
  v35 = sub_100009F64(&qword_100059DE8, &qword_100059D58, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v36 = sub_10000D798(&qword_100059DF0, &qword_100059DE0);
  v37 = v10;
  v73 = v6;
  v38 = v77;
  View.chartYScale<A>(domain:type:)(&v108, v6, v77, v34, v35, v36);
  sub_100003D44((uint64_t)v6, &qword_100059D50);
  swift_bridgeObjectRelease(v108);
  ((void (*)(char *, uint64_t))v78[1])(v8, v38);
  v78 = &v72;
  v102 = v2;
  v39 = sub_100003C84(&qword_100059DF8);
  v108 = v38;
  v109 = v34;
  v110 = v35;
  v111 = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
  v41 = sub_100009F64(&qword_100059E00, &qword_100059DF8, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
  v42 = v79;
  v43 = v80;
  View.chartYAxis<A>(content:)(sub_10000D790, v101, v80, v39, OpaqueTypeConformance2, v41);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v37, v43);
  v44 = v75;
  v107 = v75;
  v45 = (uint64_t)v73;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v74)(v73, 1, 1, v33);
  v46 = sub_100003C84(&qword_100059E08);
  v108 = v43;
  v109 = v39;
  v110 = OpaqueTypeConformance2;
  v111 = v41;
  v47 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
  v48 = sub_10000D798(&qword_100059E10, &qword_100059E08);
  v49 = v82;
  v50 = v83;
  View.chartXScale<A>(domain:type:)(&v107, v45, v83, v46, v47, v48);
  sub_100003D44(v45, &qword_100059D50);
  v51 = v50;
  ((void (*)(char *, uint64_t))v84[1])(v42, v50);
  swift_bridgeObjectRelease(v44);
  v84 = &v72;
  v52 = v76;
  v100 = v76;
  v53 = sub_100003C84(&qword_100059E18);
  v108 = v51;
  v109 = v46;
  v110 = v47;
  v111 = v48;
  v54 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
  v55 = sub_100009F64(&qword_100059E20, &qword_100059E18, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
  v56 = v85;
  v57 = v88;
  View.chartXAxis<A>(content:)(sub_10000D7EC, v99, v88, v53, v54, v55);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v49, v57);
  swift_bridgeObjectRelease(v52);
  v108 = v57;
  v109 = v53;
  v110 = v54;
  v111 = v55;
  v58 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
  v59 = v86;
  v60 = v91;
  View.chartLegend(_:)(2, v91, v58);
  v61 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v56, v60);
  v62 = v95;
  static ContentTransition.interpolate.getter(v61);
  KeyPath = swift_getKeyPath(&unk_1000474E8);
  v64 = (uint64_t)v87;
  v65 = (uint64_t *)&v87[*(int *)(v89 + 36)];
  v66 = sub_100003C84(&qword_100059E28);
  v67 = v96;
  v68 = v97;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v65 + *(int *)(v66 + 28), v62, v97);
  *v65 = KeyPath;
  v69 = v93;
  v70 = v94;
  (*(void (**)(uint64_t, char *, uint64_t))(v93 + 16))(v64, v59, v94);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v62, v68);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v59, v70);
  return sub_10000D7FC(v64, v98);
}

unint64_t sub_10000B564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t i;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t (*v81)(char *);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(unint64_t, char *, uint64_t);
  uint64_t v99;
  char *v100;

  v93 = a2;
  v78 = type metadata accessor for Calendar.SearchDirection(0);
  v89 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v77 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v87 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  __chkstk_darwin(v4);
  v86 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.MatchingPolicy(0);
  v84 = *(_QWORD *)(v6 - 8);
  v85 = v6;
  __chkstk_darwin(v6);
  v92 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003C84(&qword_100059EE0);
  __chkstk_darwin(v8);
  v72 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003C84(&qword_100059EE8);
  __chkstk_darwin(v10);
  v71 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for DateComponents(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v90 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v13);
  v91 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for Calendar.Component(0);
  v79 = *(_QWORD *)(v94 - 8);
  v15 = v79;
  __chkstk_darwin(v94);
  v83 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v100 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v70 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v70 - v25;
  v27 = __chkstk_darwin(v24);
  v73 = (char *)&v70 - v28;
  v29 = __chkstk_darwin(v27);
  v74 = (char *)&v70 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v70 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v70 - v35;
  DateInterval.start.getter(v34);
  v37 = sub_100003C84(&qword_100059D90);
  v38 = v18;
  v39 = *(_QWORD *)(v18 + 72);
  v40 = *(unsigned __int8 *)(v18 + 80);
  v41 = (v40 + 32) & ~v40;
  v96 = v39;
  v42 = swift_allocObject(v37, v41 + v39, v40 | 7);
  *(_OWORD *)(v42 + 16) = xmmword_100046DE0;
  v95 = v41;
  v98 = *(void (**)(unint64_t, char *, uint64_t))(v38 + 16);
  v98(v42 + v41, v36, v17);
  v80 = enum case for Calendar.Component.hour(_:);
  v81 = *(uint64_t (**)(char *))(v15 + 104);
  v43 = v83;
  v44 = v81(v83);
  v99 = a1;
  DateInterval.start.getter(v44);
  v45 = v43;
  v82 = Calendar.component(_:from:)(v43, v33);
  v97 = v38;
  v46 = *(void (**)(char *, uint64_t))(v38 + 8);
  v46(v33, v17);
  v79 = *(_QWORD *)(v79 + 8);
  v47 = v94;
  ((void (*)(char *, int64_t))v79)(v45, v94);
  v48 = ((uint64_t (*)(char *, _QWORD, int64_t))v81)(v45, v80, v47);
  DateInterval.end.getter(v48);
  v49 = Calendar.component(_:from:)(v45, v33);
  v50 = v82 | v49;
  v46(v33, v17);
  v51 = ((uint64_t (*)(char *, int64_t))v79)(v45, v94);
  if (!v50)
  {
    DateInterval.start.getter(v51);
    v52 = type metadata accessor for Calendar(0);
    v53 = v71;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v71, 1, 1, v52);
    v54 = type metadata accessor for TimeZone(0);
    v55 = v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v72, 1, 1, v54);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v53, v55, 0, 1, 0, 1, 0, 1, 0, 1, 6, 0, 0, 1, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1);
    (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v92, enum case for Calendar.MatchingPolicy.nextTime(_:), v85);
    v56 = v86;
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, enum case for Calendar.RepeatedTimePolicy.first(_:), v88);
    v57 = v77;
    v58 = v78;
    (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v77, enum case for Calendar.SearchDirection.forward(_:), v78);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v33, v90, v92, v56, v57);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v92, v85);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v90, v76);
    v46(v33, v17);
    v59 = v97;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v91, 1, v17) == 1)
    {
      sub_100003D44(v91, &qword_100059960);
    }
    else
    {
      v60 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
      v61 = v74;
      v60(v74, v91, v17);
      v98((unint64_t)v73, v61, v17);
      v63 = *(_QWORD *)(v42 + 16);
      v62 = *(_QWORD *)(v42 + 24);
      v94 = v63 + 1;
      if (v63 >= v62 >> 1)
        v42 = sub_100021000(v62 > 1, v94, 1, v42);
      *(_QWORD *)(v42 + 16) = v94;
      v60((char *)(v42 + v95 + v63 * v96), (uint64_t)v73, v17);
      v46(v36, v17);
      v60(v36, (uint64_t)v74, v17);
    }
  }
  v64 = (void (*)(char *, char *, uint64_t))v98;
  for (i = ((uint64_t (*)(char *, char *, uint64_t))v98)(v33, v36, v17);
        ;
        i = ((uint64_t (*)(char *, char *, uint64_t))v98)(v33, v36, v17))
  {
    DateInterval.end.getter(i);
    static Date.- infix(_:_:)(v23, 21600.0);
    v46(v23, v17);
    v66 = static Date.< infix(_:_:)(v33, v26);
    v46(v26, v17);
    v46(v33, v17);
    if ((v66 & 1) == 0)
      break;
    static Date.+= infix(_:_:)(v36, 21600.0);
    v64(v100, v36, v17);
    v68 = *(_QWORD *)(v42 + 16);
    v67 = *(_QWORD *)(v42 + 24);
    if (v68 >= v67 >> 1)
      v42 = sub_100021000(v67 > 1, v68 + 1, 1, v42);
    *(_QWORD *)(v42 + 16) = v68 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v97 + 32))(v42 + v95 + v68 * v96, v100, v17);
    v64 = (void (*)(char *, char *, uint64_t))v98;
  }
  v46(v36, v17);
  return v42;
}

uint64_t sub_10000BDAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a1 + *(int *)(__chkstk_darwin(v6) + 20));
  v21 = v9;
  sub_10000DB08(a1, (uint64_t)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ScreenTimeWidgetGraph);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 25) & ~v10;
  v12 = swift_allocObject(&unk_100056298, v11 + v8, v10 | 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_BYTE *)(v12 + 24) = a3;
  sub_10000DE24((uint64_t)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for ScreenTimeWidgetGraph);
  swift_bridgeObjectRetain(v9);
  v13 = sub_100003C84(&qword_100059E88);
  v14 = type metadata accessor for DateInterval(0);
  v15 = sub_100003C84(&qword_100059DB0);
  v16 = sub_100009F64(&qword_100059E90, &qword_100059E88, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = sub_10000D660();
  v18 = sub_10000DF58(&qword_100059E98, type metadata accessor for HourlyUsage, (uint64_t)&unk_1000483D0);
  return ForEach<>.init(_:content:)(&v21, sub_10000DC60, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_10000BF3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  v38 = a3;
  v37 = a2;
  v40 = a5;
  v7 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = type metadata accessor for HourlyUsage(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + *(int *)(__chkstk_darwin(v10) + 28));
  v15 = swift_bridgeObjectRetain(v14);
  v16 = sub_100009608(v15);
  swift_bridgeObjectRelease(v14);
  v45 = v16;
  KeyPath = swift_getKeyPath(&unk_100047518);
  sub_10000DB08(a1, (uint64_t)v13, type metadata accessor for HourlyUsage);
  sub_10000DB08(a4, (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ScreenTimeWidgetGraph);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v20 + v19 + 9) & ~v20;
  v22 = swift_allocObject(&unk_1000562C0, v21 + v9, v17 | v20 | 7);
  sub_10000DE24((uint64_t)v13, v22 + v18, type metadata accessor for HourlyUsage);
  v23 = v22 + v19;
  *(_QWORD *)v23 = v37;
  *(_BYTE *)(v23 + 8) = v38;
  sub_10000DE24((uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for ScreenTimeWidgetGraph);
  v24 = swift_allocObject(&unk_1000562E8, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10000DE68;
  *(_QWORD *)(v24 + 24) = v22;
  v25 = sub_100003C84(&qword_100059EA8);
  v26 = sub_100003C84(&qword_100059EB0);
  v27 = sub_100009F64(&qword_100059EB8, &qword_100059EA8, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = sub_100005554(&qword_100059DB8);
  v29 = sub_100005554(&qword_100059DC0);
  v41 = type metadata accessor for BarMark(255);
  v42 = &type metadata for Color;
  v43 = &protocol witness table for BarMark;
  v44 = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v31 = sub_100005554(&qword_100059DC8);
  v32 = sub_100009F64(&qword_100059DD0, &qword_100059DC8, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
  v41 = v31;
  v42 = (void *)v32;
  v33 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v41 = v28;
  v42 = (void *)v29;
  v43 = (void *)OpaqueTypeConformance2;
  v44 = (void *)v33;
  v34 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 1);
  return ForEach<>.init(_:id:content:)(&v45, KeyPath, sub_10000DF2C, v24, v25, v26, v27, &protocol witness table for Int, v34);
}

uint64_t sub_10000C22C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  unint64_t v36;
  char *v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  double v59;
  void *v60;
  void *v61;
  void *v62;

  v52 = a5;
  v57 = a4;
  v56 = a3;
  v58 = a1;
  v54 = a6;
  v9 = sub_100003C84(&qword_100059EC0);
  __chkstk_darwin(v9);
  v55 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003C84(&qword_100059EC8);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BarMark(0);
  v48 = *(_QWORD *)(v14 - 8);
  v49 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003C84(&qword_100059DB8);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = LocalizedStringKey.init(stringLiteral:)(1920298824, 0xE400000000000000);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = type metadata accessor for HourlyUsage(0);
  v26 = a2 + *(int *)(v25 + 24);
  v27 = type metadata accessor for Date(0);
  v28 = sub_10000DF58(&qword_100059ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  static PlottableValue.value<>(_:_:)(v18, v20, v22 & 1, v24, v26, v27, &protocol witness table for Date, v28);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v20);
  v29 = LocalizedStringKey.init(stringLiteral:)(0x79726F6765746143, 0xEE006F6974615220);
  v31 = v30;
  v33 = v32;
  v59 = *(double *)(a2 + *(int *)(v25 + 20)) * a7;
  v34 = v55;
  static PlottableValue.value(_:_:)(v29);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v31);
  result = BarMark.init<A, B>(x:y:width:height:stacking:)(v13, v34, v56, v57, 0, 3, 0, v27, &type metadata for Double, &protocol witness table for Date, &protocol witness table for Double);
  if (qword_1000598F0 == -1)
  {
    v36 = v58;
    if ((v58 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = swift_once(&qword_1000598F0, sub_10000A898);
  v36 = v58;
  if ((v58 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(_QWORD *)(qword_10005D110 + 16) > v36)
  {
    v59 = *(double *)(qword_10005D110 + 8 * v36 + 32);
    v38 = *(double *)&v49;
    v37 = v50;
    ChartContent.foregroundStyle<A>(_:)(&v59, v49, &type metadata for Color, &protocol witness table for BarMark, &protocol witness table for Color);
    v39 = (*(uint64_t (**)(char *, double))(v48 + 8))(v16, COERCE_DOUBLE(*(_QWORD *)&v38));
    __chkstk_darwin(v39);
    v46[2] = v52;
    v40 = sub_100003C84(&qword_100059DC0);
    v59 = v38;
    v60 = &type metadata for Color;
    v61 = &protocol witness table for BarMark;
    v62 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    *(double *)&v42 = COERCE_DOUBLE(sub_100005554(&qword_100059DC8));
    v43 = sub_100009F64(&qword_100059DD0, &qword_100059DC8, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    v59 = *(double *)&v42;
    v60 = (void *)v43;
    v44 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v45 = v53;
    ChartContent.compositingLayer<A>(style:)(sub_10000DF98, v46, v53, v40, OpaqueTypeConformance2, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v37, v45);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10000C654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for WidgetRenderingMode(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v13 - v5;
  v7 = sub_1000430C8((uint64_t)&v13 - v5);
  static WidgetRenderingMode.accented.getter(v7);
  v8 = static WidgetRenderingMode.== infix(_:_:)(v6, v4);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  v10 = sub_100003C84(&qword_100059DC8);
  v11 = sub_100009F64(&qword_100059DD0, &qword_100059DC8, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
  return View.widgetAccentable(_:)(v8 & 1, v10, v11);
}

void sub_10000C768(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = sub_100003C84(&qword_100059DF8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_10000A984() > 3600.0)
    v17 = 7200.0;
  else
    v17 = 3600.0;
  v18 = v17 * ceil(sub_10000A984() / v17);
  if (v18 > v17)
    v19 = v18;
  else
    v19 = v17;
  if (v19 * 0.5 == 0.0)
  {
    __break(1u);
  }
  else
  {
    v28 = a2;
    v29 = v13;
    v20 = sub_10000AA80(0.0, v19, v19 * 0.5);
    sub_10000DB08(a1, (uint64_t)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ScreenTimeWidgetGraph);
    v21 = *(unsigned __int8 *)(v11 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = swift_allocObject(&unk_100056270, v22 + v12, v21 | 7);
    v24 = sub_10000DE24((uint64_t)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for ScreenTimeWidgetGraph);
    v25 = static AxisMarkPreset.automatic.getter(v24);
    static AxisMarkPosition.automatic.getter(v25);
    v26 = sub_100003C84(&qword_100059E60);
    v27 = sub_10000DA00();
    AxisMarks.init<A>(preset:position:values:content:)(v9, v6, v20, sub_10000D9B4, v23, v26, &type metadata for Double, v27, &protocol witness table for Double);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v28, v16, v29);
  }
}

uint64_t sub_10000C9BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47[16];
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;

  v42 = a1;
  v46 = a3;
  v45 = sub_100003C84(&qword_100059E80);
  __chkstk_darwin(v45);
  v44 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AxisGridLine(0);
  v39 = *(_QWORD *)(v5 - 8);
  v6 = v39;
  v7 = __chkstk_darwin(v5);
  v43 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003C84(&qword_100059E78);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v39 - v23;
  v48 = v42;
  v49 = a2;
  v25 = static AxisValueLabelCollisionResolution.automatic.getter(v22);
  static AxisValueLabelOrientation.automatic.getter(v25);
  AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:)(2, 0, 0, 1, 0, 0, 1, v16, 2, v13, 0, 1, 0, 1, sub_10000DA8C, v47, &type metadata for Text, &protocol witness table for Text);
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  v40 = v10;
  AxisGridLine.init(centered:stroke:)(2, v50);
  v26 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v27 = v21;
  v41 = v21;
  v26(v21, v24, v17);
  v28 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v29 = v43;
  v28(v43, v10, v5);
  sub_100009F64(&qword_100059E70, &qword_100059E78, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
  v30 = v44;
  v26(v44, v27, v17);
  v31 = v45;
  v32 = &v30[*(int *)(v45 + 48)];
  v33 = v29;
  v28(v32, v29, v5);
  v34 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v46, v30, v17);
  v35 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v34 + *(int *)(v31 + 48), v32, v5);
  v36 = *(void (**)(char *, uint64_t))(v35 + 8);
  v36(v40, v5);
  v37 = *(void (**)(char *, uint64_t))(v18 + 8);
  v37(v24, v17);
  v36(v33, v5);
  return ((uint64_t (*)(char *, uint64_t))v37)(v41, v17);
}

_QWORD *sub_10000CCFC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *result;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  unint64_t v22;

  result = AxisValue.as<A>(_:)(&v21, &type metadata for Double, &type metadata for Double, &protocol witness table for Double);
  if ((v22 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = v21;
    v4 = sub_10000A984();
    v5 = sub_10000A984();
    if (v3 == 0.0)
    {
      v6 = 0xE100000000000000;
      v7 = 48;
    }
    else
    {
      v8 = 7200.0;
      if (v4 <= 3600.0)
        v8 = 3600.0;
      v9 = v8 * ceil(v5 / v8);
      if (v9 > v8)
        v10 = v9;
      else
        v10 = v8;
      v11 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
      v12 = v11;
      if (v10 > 3600.0)
        v13 = 32;
      else
        v13 = 64;
      objc_msgSend(v11, "setAllowedUnits:", v13);
      objc_msgSend(v12, "setUnitsStyle:", 1);
      v14 = objc_msgSend(v12, "stringFromTimeInterval:", v3);
      if (v14)
      {
        v15 = v14;
        v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v6 = v16;

      }
      else
      {

        v7 = 0;
        v6 = 0xE000000000000000;
      }
    }
    v21 = *(double *)&v7;
    v22 = v6;
    v17 = sub_100009EB0();
    result = (_QWORD *)Text.init<A>(_:)(&v21, &type metadata for String, v17);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v18;
    *(_BYTE *)(a1 + 16) = v19 & 1;
    *(_QWORD *)(a1 + 24) = v20;
  }
  return result;
}

uint64_t sub_10000CE8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v3 = sub_100003C84(&qword_100059E58);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003C84(&qword_100059E48);
  sub_100009F64(&qword_100059E40, &qword_100059E48, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 16))(v5, *a1, v6);
  v8 = type metadata accessor for AxisGridLine(0);
  v9 = &v5[*(int *)(v3 + 48)];
  v10 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 16))(v9, a1[1], v8);
  v11 = type metadata accessor for AxisTick(0);
  v12 = &v5[*(int *)(v3 + 64)];
  v13 = a1[2];
  v14 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v13, v11);
  v15 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v16 = v19;
  v15(v19, v5, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + *(int *)(v3 + 48), v9, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v16 + *(int *)(v3 + 64), v12, v11);
}

uint64_t sub_10000CFF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_bridgeObjectRetain(a1);
  v9 = static AxisMarkPreset.automatic.getter(v8);
  static AxisMarkPosition.automatic.getter(v9);
  v10 = sub_100003C84(&qword_100059E30);
  v11 = type metadata accessor for Date(0);
  v12 = sub_10000D844();
  return AxisMarks.init<A>(preset:position:values:content:)(v7, v4, a1, sub_10000D104, 0, v10, v11, v12, &protocol witness table for Date);
}

uint64_t sub_10000D104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  _QWORD v77[3];
  _OWORD v78[2];
  uint64_t v79;

  v74 = a1;
  v1 = type metadata accessor for AxisTick.Length(0);
  __chkstk_darwin(v1);
  v70 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AxisTick(0);
  v72 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  v4 = __chkstk_darwin(v3);
  v71 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v67 = (char *)&v60 - v6;
  v7 = type metadata accessor for AxisGridLine(0);
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  v8 = __chkstk_darwin(v7);
  v76 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v66 = (char *)&v60 - v10;
  v11 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v11);
  v65 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v13);
  v63 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle(0);
  v15 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date.FormatStyle.Symbol.Hour(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Date.FormatStyle(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v60 - v27;
  v64 = sub_100003C84(&qword_100059E48);
  v62 = *(_QWORD *)(v64 - 8);
  v29 = __chkstk_darwin(v64);
  v75 = (char *)&v60 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v60 - v32;
  v34 = static FormatStyle<>.dateTime.getter(v31);
  static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(v34);
  static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)(v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v61);
  Date.FormatStyle.hour(_:)(v21);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v36 = v63;
  v37 = static AxisValueLabelCollisionResolution.disabled.getter(v35);
  v38 = v65;
  static AxisValueLabelOrientation.automatic.getter(v37);
  v39 = sub_10000DF58(&qword_100059E50, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  v60 = v33;
  AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(v28, 2, 0, 0, 1, 0, 0, 1, v36, 2, v38, 0, 1, 0, 1, v22, v39, &protocol witness table for Date);
  v79 = 0;
  memset(v78, 0, sizeof(v78));
  v40 = v66;
  v41 = AxisGridLine.init(centered:stroke:)(2, v78);
  v42 = v70;
  static AxisTick.Length.automatic.getter(v41);
  v43 = v67;
  AxisTick.init(centered:length:stroke:)(2, v42, v78);
  v44 = v62;
  v45 = v75;
  v46 = v33;
  v47 = v64;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v75, v46, v64);
  v77[0] = v45;
  v49 = v68;
  v48 = v69;
  v50 = v76;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v76, v40, v69);
  v77[1] = v50;
  v52 = v71;
  v51 = v72;
  v53 = v73;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v43, v73);
  v77[2] = v52;
  sub_10000CE8C(v77, v74);
  v54 = *(void (**)(char *, uint64_t))(v51 + 8);
  v55 = v53;
  v54(v43, v53);
  v56 = *(void (**)(char *, uint64_t))(v49 + 8);
  v57 = v48;
  v56(v40, v48);
  v58 = *(void (**)(char *, uint64_t))(v44 + 8);
  v58(v60, v47);
  v54(v52, v55);
  v56(v76, v57);
  return ((uint64_t (*)(char *, uint64_t))v58)(v75, v47);
}

uint64_t sub_10000D5F0()
{
  uint64_t v0;

  return sub_10000BDAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

unint64_t sub_10000D5FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059DA0;
  if (!qword_100059DA0)
  {
    v1 = sub_100005554(&qword_100059D98);
    sub_10000D660();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100059DA0);
  }
  return result;
}

unint64_t sub_10000D660()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  result = qword_100059DA8;
  if (!qword_100059DA8)
  {
    v1 = sub_100005554(&qword_100059DB0);
    v2 = sub_100005554(&qword_100059DB8);
    v3 = sub_100005554(&qword_100059DC0);
    v8 = type metadata accessor for BarMark(255);
    v9 = &type metadata for Color;
    v10 = &protocol witness table for BarMark;
    v11 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v5 = sub_100005554(&qword_100059DC8);
    v6 = sub_100009F64(&qword_100059DD0, &qword_100059DC8, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    v8 = v5;
    v9 = (void *)v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v8 = v2;
    v9 = (void *)v3;
    v10 = (void *)OpaqueTypeConformance2;
    v11 = (void *)v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100059DA8);
  }
  return result;
}

void sub_10000D790(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10000C768(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10000D798(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005554(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000D7EC()
{
  uint64_t v0;

  return sub_10000CFF4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003C84(&qword_100059D88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000D844()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059E38;
  if (!qword_100059E38)
  {
    v1 = sub_100005554(&qword_100059E30);
    sub_100009F64(&qword_100059E40, &qword_100059E48, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100059E38);
  }
  return result;
}

uint64_t sub_10000D8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20)));
  v9 = (char *)v6 + *(int *)(v1 + 24);
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10000D9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScreenTimeWidgetGraph(0) - 8) + 80);
  return sub_10000C9BC(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10000DA00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100059E68;
  if (!qword_100059E68)
  {
    v1 = sub_100005554(&qword_100059E60);
    sub_100009F64(&qword_100059E70, &qword_100059E78, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_100059E68);
  }
  return result;
}

_QWORD *sub_10000DA8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10000CCFC(a1);
}

uint64_t sub_10000DA94(double a1, double a2, double a3)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  _BOOL4 v8;

  result = 0;
  v4 = 0;
  v5 = 0;
  v6 = a1;
  do
  {
    v8 = v6 <= a2;
    if (a3 > 0.0)
      v8 = v6 >= a2;
    if (v8)
    {
      if ((v6 != a2) | v4 & 1)
        return result;
      v4 = 1;
    }
    else
    {
      v7 = __OFADD__(v5++, 1);
      if (v7)
        goto LABEL_12;
      v6 = a1 + (double)v5 * a3;
    }
    v7 = __OFADD__(result++, 1);
  }
  while (!v7);
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10000DB08(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000DB4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HourlyUsage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000DB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 25) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20)));
  v9 = (char *)v6 + *(int *)(v1 + 24);
  v10 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10000DC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScreenTimeWidgetGraph(0) - 8) + 80);
  return sub_10000BF3C(a1, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), v2 + ((v5 + 25) & ~v5), a2);
}

uint64_t sub_10000DCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = type metadata accessor for HourlyUsage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 9) & ~v8;
  v19 = *(_QWORD *)(v7 + 64);
  v10 = v0 + v4;
  v11 = type metadata accessor for DateInterval(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v13 = v10 + *(int *)(v1 + 24);
  v14 = sub_100003C84(&qword_100059EA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v1 + 28)));
  v15 = (_QWORD *)(v0 + v9);
  v16 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v0 + v9, v16) == 1)
  {
    v17 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v0 + v9, v17);
  }
  else
  {
    swift_release(*v15);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v15 + *(int *)(v6 + 20)));
  v12((uint64_t)v15 + *(int *)(v6 + 24), v11);
  return swift_deallocObject(v0, v9 + v19, v3 | v8 | 7);
}

uint64_t sub_10000DE24(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000DE68@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(type metadata accessor for HourlyUsage(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScreenTimeWidgetGraph(0) - 8) + 80);
  return sub_10000C22C(a1, v3 + v8, *(_QWORD *)(v3 + v9), *(unsigned __int8 *)(v3 + v9 + 8), v3 + ((v9 + v10 + 9) & ~v10), a2, a3);
}

uint64_t sub_10000DF08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000DF2C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, double))(v1 + 16))(*(_QWORD *)a1, *(double *)(a1 + 8));
}

uint64_t sub_10000DF58(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000DF98()
{
  return sub_10000C654();
}

unint64_t sub_10000DFA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = qword_100059EF0;
  if (!qword_100059EF0)
  {
    v15 = sub_100005554(&qword_100059D88);
    v14 = sub_100005554(&qword_100059D78);
    v13 = sub_100005554(&qword_100059D70);
    v1 = sub_100005554(&qword_100059E18);
    v2 = sub_100005554(&qword_100059D68);
    v3 = sub_100005554(&qword_100059E08);
    v4 = sub_100005554(&qword_100059D60);
    v5 = sub_100005554(&qword_100059DF8);
    v16 = sub_100005554(&qword_100059D58);
    v17 = sub_100005554(&qword_100059DE0);
    v18 = sub_100009F64(&qword_100059DE8, &qword_100059D58, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v19 = sub_10000D798(&qword_100059DF0, &qword_100059DE0);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
    v7 = sub_100009F64(&qword_100059E00, &qword_100059DF8, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    v16 = v4;
    v17 = v5;
    v18 = OpaqueTypeConformance2;
    v19 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    v9 = sub_10000D798(&qword_100059E10, &qword_100059E08);
    v16 = v2;
    v17 = v3;
    v18 = v8;
    v19 = v9;
    v10 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.chartXScale<A>(domain:type:)>>, 1);
    v11 = sub_100009F64(&qword_100059E20, &qword_100059E18, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    v16 = v13;
    v17 = v1;
    v18 = v10;
    v19 = v11;
    v12 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.chartXAxis<A>(content:)>>, 1);
    v16 = v14;
    v17 = v12;
    swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.chartLegend(_:)>>, 1);
    sub_100009F64(&qword_100059EF8, &qword_100059E28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
    atomic_store(result, (unint64_t *)&qword_100059EF0);
  }
  return result;
}

uint64_t sub_10000E200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a1;
  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v29 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v28 = (char *)&v28 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v28 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v28 - v21;
  Calendar.startOfDay(for:)(v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Calendar.Component.day(_:), v2);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v5, 1, v22, 0);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v8, v9);
    Calendar.startOfDay(for:)(v20);
    v24 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v25 = v28;
    v24(v28, v22, v9);
    v26 = v29;
    v24(v29, v17, v9);
    DateInterval.init(start:end:)(v25, v26);
    v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    v27(v17, v9);
    v27(v20, v9);
    return ((uint64_t (*)(char *, uint64_t))v27)(v22, v9);
  }
  return result;
}

double sub_10000E45C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1000189D0(0, &qword_10005A110, STAppInfo_ptr);
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v5, &protocol witness table for String);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

uint64_t sub_10000E4D8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_100059F00);
  sub_100006BC8(v0, (uint64_t)qword_100059F00);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0xD000000000000016, 0x8000000100049A40);
}

void sub_10000E558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;

  v1 = sub_10000E6C0(a1);
  v5 = v4 >> 1;
  v6 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
    goto LABEL_16;
  v7 = v1;
  if (v6)
  {
    v8 = v2;
    v9 = v3;
    sub_100021CF4(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
LABEL_17:
      __break(1u);
      return;
    }
    if (v9 <= v5)
      v10 = v5;
    else
      v10 = v9;
    v11 = v10 - v9;
    v12 = (id *)(v8 + 8 * v9);
    while (v11)
    {
      v13 = *v12;
      v14 = objc_msgSend(v13, "identifier");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      if (v19 >= v18 >> 1)
        sub_100021CF4(v18 > 1, v19 + 1, 1);
      _swiftEmptyArrayStorage[2] = v19 + 1;
      v20 = &_swiftEmptyArrayStorage[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
      --v11;
      ++v12;
      if (!--v6)
      {
        swift_unknownObjectRelease(v7);
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_unknownObjectRelease(v1);
LABEL_14:
  sub_100018BE4((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
}

uint64_t sub_10000E6C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v3 = *v1;
  v16 = _swiftEmptyArrayStorage;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v11 = v3;
    else
      v11 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (v4)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v3);
    v10 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (!v4)
    goto LABEL_18;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    result = swift_release(v16);
    __break(1u);
    return result;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
    else
      v8 = *(id *)(v3 + 8 * i + 32);
    v9 = v8;
    if (objc_msgSend(v8, "type") == (id)1 || objc_msgSend(v9, "type") == (id)2)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v6 = v16[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v9);
      specialized ContiguousArray._endMutation()(v7);
    }
    else
    {

    }
  }
  swift_bridgeObjectRelease(v3);
  v10 = (unint64_t)v16;
LABEL_19:
  swift_bridgeObjectRetain(v10);
  if ((v10 & 0x8000000000000000) != 0 || (v12 = (_QWORD *)v10, (v10 & 0x4000000000000000) != 0))
  {
    v12 = sub_100016DF8(v10);
    swift_release(v10);
  }
  v16 = v12;
  sub_10001707C((uint64_t *)&v16);
  swift_release(v10);
  v13 = v16;
  v14 = sub_100018A3C(a1, (unint64_t)v16);
  swift_release(v13);
  return v14;
}

uint64_t sub_10000E8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  ValueMetadata *v12;
  char **v13;

  sub_100003D00(a1, (uint64_t)&v9, &qword_10005A0E8);
  if (v10)
  {
    sub_1000184F0(&v9, (uint64_t)&v11);
  }
  else
  {
    v12 = &type metadata for ScreenTimeAppInfoCache;
    v13 = (char **)&off_100055FC8;
    sub_100003D44((uint64_t)&v9, &qword_10005A0E8);
  }
  sub_1000184F0(&v11, v3 + 16);
  sub_100003D00(a2, (uint64_t)&v9, &qword_10005A0F0);
  if (v10)
  {
    sub_1000184F0(&v9, (uint64_t)&v11);
  }
  else
  {
    v12 = &type metadata for ScreenTimeIconCache;
    v13 = &off_100055FA0;
    sub_100003D44((uint64_t)&v9, &qword_10005A0F0);
  }
  sub_1000184F0(&v11, v3 + 56);
  sub_100003D00(a3, (uint64_t)&v9, &qword_10005A0F8);
  if (v10)
  {
    sub_100003D44(a3, &qword_10005A0F8);
    sub_100003D44(a2, &qword_10005A0F0);
    sub_100003D44(a1, &qword_10005A0E8);
    sub_1000184F0(&v9, (uint64_t)&v11);
  }
  else
  {
    if (qword_100059928 != -1)
      swift_once(&qword_100059928, sub_100033360);
    v7 = qword_10005D138;
    v12 = (ValueMetadata *)type metadata accessor for XPCPersistentStoreManager();
    v13 = (char **)&off_100056E58;
    *(_QWORD *)&v11 = v7;
    swift_retain(v7);
    sub_100003D44(a3, &qword_10005A0F8);
    sub_100003D44(a2, &qword_10005A0F0);
    sub_100003D44(a1, &qword_10005A0E8);
    sub_100003D44((uint64_t)&v9, &qword_10005A0F8);
  }
  sub_1000184F0(&v11, v3 + 96);
  return v3;
}

uint64_t sub_10000EA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000189D0(0, &qword_10005A078, OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_10000DF58(&qword_10005A0D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_100003C84(&qword_10005A0D8);
  v12 = sub_100009F64(&qword_10005A0E0, &qword_10005A0D8, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x80000001000499F0, v9, v6, v3, 0);
  qword_10005D118 = result;
  return result;
}

uint64_t sub_10000EC6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  _QWORD v30[5];

  v27 = a8;
  v28 = a5;
  v26 = a4;
  v17 = sub_100003C84(&qword_10005A058);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  sub_100014DF4(a2 + 96, (uint64_t)v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = swift_allocObject(&unk_100056360, v21 + v19, v20 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22 + v21, (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v23 = *sub_100014EDC(v30, v30[3]);
  v29[3] = type metadata accessor for XPCPersistentStoreManager();
  v29[4] = &off_100056E58;
  v29[0] = v23;
  swift_retain(v23);
  v24 = objc_autoreleasePoolPush();
  sub_10000EE88(v29, (void (*)(_BYTE *))sub_100014E9C, v22, v27, a3, v26, v28, a2, a9, a10, a6, a7);
  objc_autoreleasePoolPop(v24);
  sub_100018494(v29);
  swift_release(v22);
  return sub_100018494(v30);
}

uint64_t sub_10000EDFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for UsageTimelineEntry(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000DB08(a1, (uint64_t)v4, v5);
  v6 = sub_100003C84(&qword_10005A058);
  return CheckedContinuation.resume(returning:)(v4, v6);
}

uint64_t sub_10000EE88(_QWORD *a1, void (*a2)(_BYTE *), uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;
  int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  void *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  _QWORD *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  void (*v148)(uint64_t, char *, uint64_t);
  uint64_t v149;
  char *v150;
  void (*v151)(char *, uint64_t, uint64_t);
  _BYTE *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(_BYTE *);
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  void **aBlock;
  uint64_t v190;
  uint64_t (*v191)(uint64_t);
  void *v192;
  void *v193;
  uint64_t v194;

  v165 = a8;
  v179 = a7;
  v181 = a6;
  LODWORD(v182) = a5;
  v184 = a4;
  v185 = a2;
  v186 = a3;
  v168 = type metadata accessor for DispatchQoS(0);
  v167 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v166 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for DispatchTimeInterval(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v161 = (uint64_t *)((char *)&v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v164 = type metadata accessor for DispatchTime(0);
  v159 = *(_QWORD *)(v164 - 8);
  v17 = __chkstk_darwin(v164);
  v158 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v160 = (char *)&v145 - v19;
  v175 = type metadata accessor for Calendar(0);
  v174 = *(_QWORD *)(v175 - 8);
  v20 = __chkstk_darwin(v175);
  v155 = (char *)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v145 - v22;
  v173 = type metadata accessor for Date(0);
  v172 = *(_QWORD *)(v173 - 8);
  v24 = __chkstk_darwin(v173);
  v154 = (char *)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v145 - v26;
  v171 = type metadata accessor for DateInterval(0);
  v170 = *(_QWORD *)(v171 - 8);
  v28 = __chkstk_darwin(v171);
  v30 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v169 = (uint64_t)&v145 - v31;
  v32 = sub_100003C84(&qword_100059958);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v145 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v180 = (uint64_t)&v145 - v36;
  v37 = sub_100003C84(&qword_100059960);
  v38 = __chkstk_darwin(v37);
  v153 = (char *)&v145 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v41 = (char *)&v145 - v40;
  v42 = type metadata accessor for UsageTimelineEntry(0);
  v43 = __chkstk_darwin(v42);
  v152 = (char *)&v145 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v46 = (char *)&v145 - v45;
  v178 = type metadata accessor for DispatchWorkItemFlags(0);
  v157 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v177 = (char *)&v145 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for WidgetFamily(0);
  v183 = *(_QWORD *)(v187 - 8);
  v48 = *(_QWORD *)(v183 + 64);
  v49 = __chkstk_darwin(v187);
  v156 = (char *)&v145 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v49);
  v52 = (char *)&v145 - v51;
  __chkstk_darwin(v50);
  v176 = (char *)&v145 - v53;
  if (*(_BYTE *)(*sub_100014EDC(a1, a1[3]) + 24) != 1)
  {
    if (qword_1000598F8 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v110 = type metadata accessor for Logger(0);
    v111 = sub_100006BC8(v110, (uint64_t)qword_100059F00);
    v112 = Logger.logObject.getter(v111);
    v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v114 = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Failed to initialize persistent store. Returning placeholder timeline entry", v114, 2u);
      swift_slowDealloc(v114, -1, -1);
    }

    v115 = v172;
    v116 = v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v41, 1, 1, v173);
    v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56))(v180, 1, 1, v171);
    v118 = static Date.now.getter(v117);
    static Calendar.current.getter(v118);
    v119 = v183;
    v120 = v187;
    (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v52, v184, v187);
    v121 = (*(uint64_t (**)(char *, uint64_t))(v119 + 88))(v52, v120);
    v122 = v182;
    v123 = v169;
    if (v121 != enum case for WidgetFamily.systemSmall(_:))
    {
      if (v121 == enum case for WidgetFamily.systemMedium(_:))
      {
        v124 = v169;
        v125 = 15;
        goto LABEL_18;
      }
      if (v121 == enum case for WidgetFamily.systemLarge(_:) || v121 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        sub_10000E200((uint64_t)v27, v169);
        goto LABEL_19;
      }
      if (v121 != enum case for WidgetFamily.accessoryCircular(_:)
        && v121 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v121 != enum case for WidgetFamily.accessoryInline(_:))
      {
        sub_10000E200((uint64_t)v27, v169);
        (*(void (**)(char *, uint64_t))(v183 + 8))(v52, v187);
        goto LABEL_19;
      }
    }
    v124 = v169;
    v125 = 9;
LABEL_18:
    sub_100014F40(v125, (uint64_t)v27, (uint64_t)v23, v124);
LABEL_19:
    (*(void (**)(char *, uint64_t))(v174 + 8))(v23, v175);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v27, v116);
    sub_100003644(0, (uint64_t)v41, 0, 0, 0, 0, v180, v123, v46, a9, a10, 0.0, (uint64_t)_swiftEmptyArrayStorage, v122 & 1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
    v185(v46);
    return sub_100015A24((uint64_t)v46, type metadata accessor for UsageTimelineEntry);
  }
  if (qword_1000598F8 != -1)
    swift_once(&qword_1000598F8, sub_10000E4D8);
  v169 = v48;
  v150 = v35;
  v146 = v30;
  v54 = type metadata accessor for Logger(0);
  v145 = sub_100006BC8(v54, (uint64_t)qword_100059F00);
  v55 = Logger.logObject.getter(v145);
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Successfully loaded persistent store.", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  v58 = swift_allocObject(&unk_100056388, 17, 7);
  *(_BYTE *)(v58 + 16) = 0;
  v59 = v183;
  v60 = v176;
  v61 = v187;
  v151 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 16);
  v151(v176, v184, v187);
  v62 = *(unsigned __int8 *)(v59 + 80);
  v63 = (v62 + 72) & ~v62;
  v64 = v63 + v169;
  v147 = v62;
  v149 = v62 | 7;
  v65 = swift_allocObject(&unk_1000563B0, v63 + v169 + 1, v62 | 7);
  v66 = (void (*)(_QWORD))v185;
  v67 = v186;
  *(_QWORD *)(v65 + 16) = v58;
  *(_QWORD *)(v65 + 24) = v66;
  *(_QWORD *)(v65 + 32) = v67;
  *(double *)(v65 + 40) = a9;
  *(double *)(v65 + 48) = a10;
  v68 = v179;
  *(_QWORD *)(v65 + 56) = v181;
  *(_QWORD *)(v65 + 64) = v68;
  v148 = *(void (**)(uint64_t, char *, uint64_t))(v59 + 32);
  v148(v65 + v63, v60, v61);
  v69 = v182 & 1;
  *(_BYTE *)(v65 + v64) = v69;
  v193 = sub_10001561C;
  v194 = v65;
  aBlock = _NSConcreteStackBlock;
  v190 = 1107296256;
  v191 = sub_1000103DC;
  v192 = &unk_1000563C8;
  v70 = _Block_copy(&aBlock);
  v188 = _swiftEmptyArrayStorage;
  v71 = sub_10000DF58(&qword_10005A060, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v180 = v58;
  swift_retain(v58);
  swift_retain(v67);
  swift_bridgeObjectRetain(v68);
  v72 = sub_100003C84(&qword_10005A068);
  v73 = sub_100009F64(&qword_10005A070, &qword_10005A068, (uint64_t)&protocol conformance descriptor for [A]);
  v74 = v177;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v188, v72, v73, v178, v71);
  v75 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
  v76 = DispatchWorkItem.init(flags:block:)(v74, v70);
  v77 = swift_release(v194);
  if (!v68)
  {
    v179 = v76;
    v126 = Logger.logObject.getter(v77);
    v127 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Failed to provide non-null dsid. Returning placeholder.", v128, 2u);
      swift_slowDealloc(v128, -1, -1);
    }

    v129 = v172;
    v130 = (uint64_t)v153;
    v131 = v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v153, 1, 1, v173);
    v132 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v170 + 56))(v150, 1, 1, v171);
    v133 = (uint64_t)v154;
    v134 = static Date.now.getter(v132);
    v135 = (uint64_t)v155;
    static Calendar.current.getter(v134);
    v136 = v156;
    v137 = v187;
    v151(v156, v184, v187);
    v138 = v183;
    v139 = (*(uint64_t (**)(char *, uint64_t))(v183 + 88))(v136, v137);
    v140 = v182;
    v141 = (uint64_t)v146;
    if (v139 != enum case for WidgetFamily.systemSmall(_:))
    {
      if (v139 == enum case for WidgetFamily.systemMedium(_:))
      {
        v142 = (uint64_t)v146;
        v143 = 15;
        goto LABEL_32;
      }
      if (v139 == enum case for WidgetFamily.systemLarge(_:) || v139 == enum case for WidgetFamily.systemExtraLarge(_:))
      {
        sub_10000E200(v133, (uint64_t)v146);
        goto LABEL_33;
      }
      if (v139 != enum case for WidgetFamily.accessoryCircular(_:)
        && v139 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v139 != enum case for WidgetFamily.accessoryInline(_:))
      {
        sub_10000E200(v133, (uint64_t)v146);
        (*(void (**)(char *, uint64_t))(v138 + 8))(v156, v187);
        goto LABEL_33;
      }
    }
    v142 = (uint64_t)v146;
    v143 = 9;
LABEL_32:
    sub_100014F40(v143, v133, v135, v142);
LABEL_33:
    (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v135, v175);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v133, v131);
    v144 = v152;
    sub_100003644(0, v130, 0, 0, v181, 0, (uint64_t)v150, v141, v152, a9, a10, 0.0, (uint64_t)_swiftEmptyArrayStorage, v140 & 1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
    v185(v144);
    swift_release(v179);
    sub_100015A24((uint64_t)v144, type metadata accessor for UsageTimelineEntry);
    return swift_release(v180);
  }
  LODWORD(v174) = v69;
  v175 = v73;
  v182 = v72;
  v183 = v71;
  v173 = a12;
  v172 = a11;
  v78 = v147;
  v170 = ~v147;
  sub_1000189D0(0, &qword_10005A078, OS_dispatch_queue_ptr);
  v79 = swift_bridgeObjectRetain(v68);
  v80 = (void *)static OS_dispatch_queue.main.getter(v79);
  v81 = v158;
  static DispatchTime.now()();
  v82 = v161;
  *v161 = 20;
  v83 = v76;
  v84 = v162;
  v85 = v163;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v162 + 104))(v82, enum case for DispatchTimeInterval.seconds(_:), v163);
  v86 = v160;
  + infix(_:_:)(v81, v82);
  (*(void (**)(_QWORD *, uint64_t))(v84 + 8))(v82, v85);
  v87 = *(void (**)(char *, uint64_t))(v159 + 8);
  v88 = v164;
  v87(v81, v164);
  v89 = v83;
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v86, v83);

  v87(v86, v88);
  if (qword_100059900 != -1)
    swift_once(&qword_100059900, sub_10000EA98);
  v171 = qword_10005D118;
  v90 = v176;
  v91 = v187;
  v151(v176, v184, v187);
  v92 = (v78 + 80) & v170;
  v93 = (v169 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
  v94 = (v93 + 23) & 0xFFFFFFFFFFFFFFF8;
  v95 = swift_allocObject(&unk_100056400, v94 + 16, v149);
  v96 = v165;
  *(_QWORD *)(v95 + 16) = v165;
  *(_BYTE *)(v95 + 24) = v174;
  v97 = v179;
  *(_QWORD *)(v95 + 32) = v181;
  *(_QWORD *)(v95 + 40) = v97;
  v98 = v173;
  *(_QWORD *)(v95 + 48) = v172;
  *(_QWORD *)(v95 + 56) = v98;
  *(_QWORD *)(v95 + 64) = v180;
  *(_QWORD *)(v95 + 72) = v89;
  v148(v95 + v92, v90, v91);
  v99 = (double *)(v95 + v93);
  *v99 = a9;
  v99[1] = a10;
  v100 = (_QWORD *)(v95 + v94);
  v101 = v186;
  *v100 = v185;
  v100[1] = v101;
  v193 = sub_100015738;
  v194 = v95;
  aBlock = _NSConcreteStackBlock;
  v190 = 1107296256;
  v191 = sub_1000103DC;
  v192 = &unk_100056418;
  v102 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(v98);
  swift_retain(v89);
  v103 = v180;
  swift_retain(v180);
  swift_retain(v101);
  v104 = swift_retain(v96);
  v105 = v166;
  static DispatchQoS.unspecified.getter(v104);
  v188 = _swiftEmptyArrayStorage;
  v107 = v177;
  v106 = v178;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v188, v182, v175, v178, v183);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v105, v107, v102);
  _Block_release(v102);
  swift_release(v89);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v107, v106);
  (*(void (**)(char *, uint64_t))(v167 + 8))(v105, v168);
  v108 = v194;
  swift_release(v103);
  return swift_release(v108);
}

uint64_t sub_10000FEE4(uint64_t a1, void (*a2)(_BYTE *), uint64_t a3, uint64_t a4, char *a5, uint64_t a6, int a7, double a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  void (*v51)(_BYTE *);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[32];

  v59 = a7;
  v50 = a6;
  v51 = a2;
  v64 = a5;
  v60 = a4;
  v52 = a3;
  v12 = type metadata accessor for WidgetFamily(0);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v61 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for Calendar(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v16 - 8);
  v55 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DateInterval(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v57 = (uint64_t)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003C84(&qword_100059958);
  __chkstk_darwin(v22);
  v53 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v24);
  v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for UsageTimelineEntry(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v66, 1, 0);
  *(_BYTE *)(a1 + 16) = 1;
  if (qword_1000598F8 != -1)
    swift_once(&qword_1000598F8, sub_10000E4D8);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100006BC8(v30, (uint64_t)qword_100059F00);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v34 = 134349056;
    v65 = 20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to return widget data in %{public}ld seconds. Returning placeholder", v34, 0xCu);
    swift_slowDealloc(v34, -1, -1);
  }

  v36 = v54;
  v35 = v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v26, 1, 1, v55);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v38 = (uint64_t)v53;
  v37(v53, 1, 1, v19);
  v39 = swift_bridgeObjectRetain(v64);
  v40 = static Date.now.getter(v39);
  static Calendar.current.getter(v40);
  v41 = (uint64_t)v26;
  v43 = v61;
  v42 = v62;
  v44 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v50, v63);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v43, v44);
  v46 = v57;
  if (v45 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v45 == enum case for WidgetFamily.systemMedium(_:))
    {
      v47 = v57;
      v48 = 15;
      goto LABEL_9;
    }
    if (v45 == enum case for WidgetFamily.systemLarge(_:) || v45 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      sub_10000E200((uint64_t)v18, v57);
      goto LABEL_10;
    }
    if (v45 != enum case for WidgetFamily.accessoryCircular(_:)
      && v45 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v45 != enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_10000E200((uint64_t)v18, v57);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
      goto LABEL_10;
    }
  }
  v47 = v57;
  v48 = 9;
LABEL_9:
  sub_100014F40(v48, (uint64_t)v18, (uint64_t)v15, v47);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v56 + 8))(v15, v58);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v35);
  sub_100003644(0, v41, 0, 0, v60, v64, v38, v46, v29, a8, a9, 0.0, (uint64_t)_swiftEmptyArrayStorage, v59 & 1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
  v51(v29);
  return sub_100015A24((uint64_t)v29, type metadata accessor for UsageTimelineEntry);
}

void sub_1000103E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, void (*a12)(_BYTE *, __n128), uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(_BYTE *, __n128);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD aBlock[5];
  uint64_t v77;
  _QWORD v78[6];

  v74 = a8;
  v75 = a7;
  v71 = a6;
  v69 = a5;
  v67 = a4;
  v73 = a3;
  v66 = a2;
  v65 = a1;
  v68 = a13;
  v72 = a12;
  v16 = sub_100003C84(&qword_10005A080);
  __chkstk_darwin(v16);
  v62 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for WidgetFamily(0);
  v18 = *(_QWORD *)(v34 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v34);
  __chkstk_darwin(v20);
  v22 = (char *)&v62 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v23((char *)&v62 - v21, a11, v34);
  v70 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23(v70, (uint64_t)v22, v34);
  v24 = *(unsigned __int8 *)(v18 + 80);
  v25 = (v24 + 40) & ~v24;
  v26 = v25 + v19;
  v27 = ((v26 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = (char *)swift_allocObject(&unk_100056450, v28 + 16, v24 | 7);
  v30 = (double *)&v29[v26 & 0xFFFFFFFFFFFFFFF8];
  *((_QWORD *)v29 + 2) = v75;
  *((_QWORD *)v29 + 3) = a8;
  v31 = v65;
  *((_QWORD *)v29 + 4) = v65;
  v63 = v18;
  v32 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v64 = v34;
  v33 = v34;
  LOBYTE(v34) = v66;
  v32(&v29[v25], v22, v33);
  v29[v26] = v34;
  v30[1] = a9;
  v30[2] = a10;
  v35 = &v29[v27];
  v36 = v31;
  v37 = v73;
  v38 = v67;
  *(_QWORD *)v35 = v73;
  *((_QWORD *)v35 + 1) = v38;
  v39 = &v29[v28];
  v40 = v68;
  isEscapingClosureAtFileLocation = v71;
  *(_QWORD *)v39 = v72;
  *((_QWORD *)v39 + 1) = v40;
  sub_100014DF4(v36 + 96, (uint64_t)v78);
  v42 = sub_100014EDC(v78, v78[3]);
  v43 = swift_allocObject(&unk_100056478, 80, 7);
  *(_QWORD *)(v43 + 16) = sub_100015870;
  *(_QWORD *)(v43 + 24) = v29;
  *(_BYTE *)(v43 + 32) = v34;
  *(_QWORD *)(v43 + 40) = v37;
  *(_QWORD *)(v43 + 48) = v38;
  v44 = v69;
  *(_QWORD *)(v43 + 56) = v36;
  *(_QWORD *)(v43 + 64) = v44;
  *(_QWORD *)(v43 + 72) = isEscapingClosureAtFileLocation;
  v45 = *v42;
  swift_bridgeObjectRetain_n(isEscapingClosureAtFileLocation, 2);
  swift_bridgeObjectRetain_n(v38, 4);
  swift_retain_n(v36, 4);
  swift_retain_n(v29, 2);
  swift_retain_n(v75, 2);
  swift_retain_n(v74, 2);
  swift_retain_n(v40, 2);
  sub_10003358C();
  if (*(_BYTE *)(v45 + 24) == 1)
  {
    v46 = objc_msgSend(*(id *)(v45 + 16), "newBackgroundContext");
    objc_msgSend(v46, "setAutomaticallyMergesChangesFromParent:", 1);
    objc_msgSend(v46, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
    v47 = (_QWORD *)swift_allocObject(&unk_1000564A0, 40, 7);
    v47[2] = sub_10001596C;
    v47[3] = v43;
    v47[4] = v46;
    v48 = swift_allocObject(&unk_1000564C8, 32, 7);
    *(_QWORD *)(v48 + 16) = sub_100015A08;
    *(_QWORD *)(v48 + 24) = v47;
    aBlock[4] = sub_100007094;
    v77 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100014F20;
    aBlock[3] = &unk_1000564E0;
    v49 = _Block_copy(aBlock);
    v34 = v36;
    v50 = v77;
    swift_retain(v43);
    v51 = v46;
    swift_retain(v48);
    v52 = v50;
    v36 = v34;
    swift_release(v52);
    objc_msgSend(v51, "performBlockAndWait:", v49);

    _Block_release(v49);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v48, "", 109, 78, 36, 1);
    swift_bridgeObjectRelease(v71);
    swift_release(v34);
    swift_bridgeObjectRelease(v38);
    swift_release(v29);
    swift_release(v43);
    swift_release(v47);
    swift_release(v48);
    v53 = v75;
    v54 = (uint64_t)v70;
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      goto LABEL_9;
    __break(1u);
  }
  if (qword_1000598F8 != -1)
    swift_once(&qword_1000598F8, sub_10000E4D8);
  v55 = type metadata accessor for Logger(0);
  v56 = sub_100006BC8(v55, (uint64_t)qword_100059F00);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Since persistence stores can't be loaded, no usage data can be retrieved.", v59, 2u);
    swift_slowDealloc(v59, -1, -1);
  }

  v60 = type metadata accessor for UsageData(0);
  v61 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v62, 1, 1, v60);
  v53 = v75;
  v54 = (uint64_t)v70;
  sub_1000109D4(v61, 0, 0, 0, v75, a9, a10, v74, v36, (uint64_t)v70, v34 & 1, v73, v38, v72, v40);
  sub_100003D44(v61, &qword_10005A080);
  swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
  swift_release(v36);
  swift_bridgeObjectRelease(v38);
  swift_release(v29);
  swift_release(v43);
LABEL_9:
  sub_100018494(v78);
  swift_release(v36);
  swift_release(v74);
  swift_release(v53);
  swift_release(v29);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v54, v64);
  swift_release(v40);
  swift_bridgeObjectRelease(v38);
}

uint64_t sub_1000109D4(uint64_t a1, void *a2, int a3, int a4, uint64_t a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, void (*a14)(_BYTE *, __n128), uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __n128 v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __n128 v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  _BYTE v57[4];
  int v58;
  uint64_t v59;
  void (*v60)(_BYTE *, __n128);
  uint64_t v61;
  _BYTE *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  _BYTE v68[24];

  v65 = a10;
  v63 = a4;
  v64 = a3;
  v67 = a2;
  v66 = type metadata accessor for UsageTimelineEntry(0);
  v19 = __chkstk_darwin(v66);
  v62 = &v57[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v22 = &v57[-v21];
  v23 = sub_100003C84(&qword_10005A080);
  v24 = __chkstk_darwin(v23);
  v26 = &v57[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24);
  v28 = &v57[-v27];
  v29 = type metadata accessor for UsageData(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = &v57[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = swift_beginAccess(a5 + 16, v68, 0, 0);
  if ((*(_BYTE *)(a5 + 16) & 1) == 0)
  {
    v60 = a14;
    v61 = a15;
    v59 = a12;
    dispatch thunk of DispatchWorkItem.cancel()(result);
    sub_100003D00(a1, (uint64_t)v28, &qword_10005A080);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
    {
      sub_100003D44((uint64_t)v28, &qword_10005A080);
      sub_100010DF8(v63 & 0x101, v65, v64 & 1, a1, a11 & 1, v22, a6, a7);
      v34 = v66;
      v35 = &v22[*(int *)(v66 + 32)];
      v36 = v35[1];
      swift_bridgeObjectRetain(a13);
      v37 = swift_bridgeObjectRelease(v36);
      *v35 = v59;
      v35[1] = a13;
      v38 = v67;
      if (v67)
      {
        v39 = *(int *)(v34 + 72);
        v40 = *(void **)&v22[v39];
        v41 = v67;

        *(_QWORD *)&v22[v39] = v38;
      }
      v60(v22, v37);
      v42 = v22;
    }
    else
    {
      v58 = a11;
      v43 = v59;
      sub_10000DE24((uint64_t)v28, (uint64_t)v32, type metadata accessor for UsageData);
      if (qword_1000598F8 != -1)
        swift_once(&qword_1000598F8, sub_10000E4D8);
      v44 = type metadata accessor for Logger(0);
      v45 = sub_100006BC8(v44, (uint64_t)qword_100059F00);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "getCoreDataEntry returning entry", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      sub_10000DB08((uint64_t)v32, (uint64_t)v26, type metadata accessor for UsageData);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      v42 = v62;
      sub_100010DF8(v63 & 0x101, v65, v64 & 1, (uint64_t)v26, v58 & 1, v62, a6, a7);
      sub_100003D44((uint64_t)v26, &qword_10005A080);
      v49 = v66;
      v50 = &v42[*(int *)(v66 + 32)];
      v51 = v50[1];
      swift_bridgeObjectRetain(a13);
      v52 = swift_bridgeObjectRelease(v51);
      *v50 = v43;
      v50[1] = a13;
      v53 = v67;
      if (v67)
      {
        v54 = *(int *)(v49 + 72);
        v55 = *(void **)&v42[v54];
        v56 = v67;

        *(_QWORD *)&v42[v54] = v53;
      }
      v60(v42, v52);
      sub_100015A24((uint64_t)v32, type metadata accessor for UsageData);
    }
    return sub_100015A24((uint64_t)v42, type metadata accessor for UsageTimelineEntry);
  }
  return result;
}

uint64_t sub_100010DCC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100010DF8@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, _BYTE *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];

  v105 = a5;
  v98 = a4;
  v101 = a3;
  LODWORD(v102) = a1;
  v107 = a6;
  v11 = sub_100003C84(&qword_10005A080);
  __chkstk_darwin(v11);
  v99 = (uint64_t *)((char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for UsageData(0);
  v96 = *(_QWORD *)(v13 - 8);
  v97 = v13;
  __chkstk_darwin(v13);
  v95 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003C84(&qword_100059958);
  __chkstk_darwin(v15);
  v106 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v17);
  v104 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WidgetFamily(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v100 = (uint64_t *)((char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v24 = (char *)&v94 - v23;
  v25 = type metadata accessor for Calendar(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Date(0);
  v110 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v30 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DateInterval(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31);
  v103 = (char *)&v94 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v109 = (uint64_t)&v94 - v36;
  v37 = static Date.now.getter(v35);
  static Calendar.current.getter(v37);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v94 = a2;
  v38(v24, a2, v19);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v24, v19);
  if (v39 == enum case for WidgetFamily.systemSmall(_:))
    goto LABEL_2;
  if (v39 == enum case for WidgetFamily.systemMedium(_:))
  {
    v40 = v109;
    v41 = v109;
    v42 = 15;
    goto LABEL_5;
  }
  if (v39 == enum case for WidgetFamily.systemLarge(_:) || v39 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    v40 = v109;
    sub_10000E200((uint64_t)v30, v109);
  }
  else
  {
    if (v39 == enum case for WidgetFamily.accessoryCircular(_:)
      || v39 == enum case for WidgetFamily.accessoryRectangular(_:)
      || v39 == enum case for WidgetFamily.accessoryInline(_:))
    {
LABEL_2:
      v40 = v109;
      v41 = v109;
      v42 = 9;
LABEL_5:
      sub_100014F40(v42, (uint64_t)v30, (uint64_t)v28, v41);
      goto LABEL_6;
    }
    v63 = v109;
    sub_10000E200((uint64_t)v30, v109);
    v64 = v24;
    v40 = v63;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v64, v19);
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  v43 = v30;
  v44 = v108;
  (*(void (**)(char *, uint64_t))(v110 + 8))(v43, v108);
  if ((v102 & 1) != 0)
  {
    v45 = v31;
    v46 = v32;
    if (((unsigned __int16)v102 & 0x100) != 0)
    {
      v65 = (void (*)(_QWORD, _QWORD, _QWORD))v99;
      sub_100003D00(v98, (uint64_t)v99, &qword_10005A080);
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v96 + 48))(v65, 1, v97) == 1)
      {
        sub_100003D44((uint64_t)v65, &qword_10005A080);
        v66 = (uint64_t)v104;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v104, 1, 1, v44);
        v67 = (uint64_t)v106;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v106, 1, 1, v31);
        v68 = (uint64_t)v103;
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v103, v40, v31);
        sub_100003644(0, v66, 0, 0, 0, 0, v67, v68, v107, a7, a8, 0.0, (uint64_t)_swiftEmptyArrayStorage, v105 & 1, (uint64_t)_swiftEmptyArrayStorage, 0, (unsigned __int16)(v101 & 0x100) >> 8, (char *)_swiftEmptyArrayStorage, 0);
      }
      else
      {
        v70 = v95;
        sub_10000DE24((uint64_t)v65, v95, type metadata accessor for UsageData);
        v71 = (uint64_t)v100;
        v99 = *(_QWORD **)(v20 + 104);
        ((void (*)(_QWORD *, _QWORD, uint64_t))v99)(v100, enum case for WidgetFamily.systemLarge(_:), v19);
        v72 = sub_10000DF58((unint64_t *)&qword_10005A128, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
        dispatch thunk of RawRepresentable.rawValue.getter(v112, v19, v72);
        dispatch thunk of RawRepresentable.rawValue.getter(&v111, v19, v72);
        v74 = v111;
        v73 = v112[0];
        v75 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
        v75(v71, v19);
        if (v73 == v74)
        {
          v76 = *(_QWORD *)(v70 + 16);
          swift_bridgeObjectRetain(v76);
          v102 = (char *)sub_100018C78(v77);
          swift_bridgeObjectRelease(v76);
          sub_100018F9C(v70, 6);
          v79 = v78;
        }
        else
        {
          v79 = _swiftEmptyArrayStorage;
          v102 = (char *)_swiftEmptyArrayStorage;
        }
        v80 = (uint64_t)v100;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v99)(v100, enum case for WidgetFamily.systemMedium(_:), v19);
        dispatch thunk of RawRepresentable.rawValue.getter(v112, v19, v72);
        dispatch thunk of RawRepresentable.rawValue.getter(&v111, v19, v72);
        v82 = v111;
        v81 = v112[0];
        v75(v80, v19);
        if (v81 == v82)
        {
          swift_bridgeObjectRelease(v79);
          sub_100018F9C(v70, 4);
          v100 = (_QWORD *)v83;
          v84 = v108;
          v85 = v70;
        }
        else
        {
          v84 = v108;
          v85 = v70;
          v100 = v79;
        }
        v86 = v104;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v104, 1, 1, v84);
        v87 = (uint64_t)v106;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v106, 1, 1, v45);
        v88 = (uint64_t)v103;
        v89 = v109;
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v103, v109, v45);
        v90 = *(_QWORD *)(v85 + 24);
        v91 = *(_QWORD *)(v85 + 8);
        swift_bridgeObjectRetain(v90);
        swift_bridgeObjectRetain(v91);
        v92 = sub_1000194F0(v90, v91, v89);
        swift_bridgeObjectRelease(v90);
        swift_bridgeObjectRelease(v91);
        v93 = (uint64_t)v86;
        v40 = v89;
        sub_100003644(0, v93, 0, 0, 0, 0, v87, v88, v107, a7, a8, *(double *)(v85 + 32), v92, v105 & 1, (uint64_t)v100, 0, (unsigned __int16)(v101 & 0x100) >> 8, v102, 0);
        sub_100015A24(v85, type metadata accessor for UsageData);
      }
    }
    else
    {
      if (qword_1000598F8 != -1)
        swift_once(&qword_1000598F8, sub_10000E4D8);
      v55 = type metadata accessor for Logger(0);
      v56 = sub_100006BC8(v55, (uint64_t)qword_100059F00);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "getCoreDataEntry returning ask to sign into iCloud view", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      v60 = (uint64_t)v104;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v104, 1, 1, v44);
      v61 = (uint64_t)v106;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v106, 1, 1, v31);
      v62 = (uint64_t)v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v103, v40, v31);
      sub_100003644(1, v60, 0, 0, 0, 0, v61, v62, v107, a7, a8, 0.0, (uint64_t)_swiftEmptyArrayStorage, v105 & 1, (uint64_t)_swiftEmptyArrayStorage, 0, (unsigned __int16)(v101 & 0x100) >> 8, (char *)_swiftEmptyArrayStorage, 0);
    }
  }
  else
  {
    v45 = v31;
    v46 = v32;
    if (qword_1000598F8 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_100006BC8(v47, (uint64_t)qword_100059F00);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "getCoreDataEntry returning placeholder", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    v52 = (uint64_t)v104;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v104, 1, 1, v44);
    v53 = (uint64_t)v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v106, 1, 1, v31);
    v54 = (uint64_t)v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v103, v40, v31);
    sub_100003644(0, v52, 0, 0, 0, 0, v53, v54, v107, a7, a8, 0.0, (uint64_t)_swiftEmptyArrayStorage, v105 & 1, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v40, v45);
}

void sub_1000117E4(void *a1, void (*a2)(uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  void *v37;
  char **v38;
  void *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  double v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  char *v80;
  Class isa;
  id v82;
  char *v83;
  _QWORD *v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint8_t *v89;
  Class v90;
  id v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  int v112;
  unsigned int v113;
  id v114;
  id v115;
  uint64_t v116;
  char **v117;
  __int128 v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  NSObject **v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  _QWORD *v133;
  BOOL v134;
  id v135;
  id v136;
  void *v137;
  id v138;
  void *v139;
  id v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  void *v145;
  id v146;
  id v147;
  uint64_t v148;
  id v149;
  id v150;
  double v151;
  id v152;
  id v153;
  id v154;
  NSObject *v155;
  os_log_type_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  char *v161;
  Class v162;
  void (*v163)(char *, uint64_t);
  id v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  unint64_t v178;
  id v179;
  NSObject *v180;
  os_log_type_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  id v186;
  NSObject *v187;
  os_log_type_t v188;
  uint64_t v189;
  void (*v190)(char *, uint64_t);
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  NSObject *v196;
  os_log_type_t v197;
  uint8_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  uint8_t *v206;
  id v207;
  uint8_t *v208;
  char *v209;
  id v210;
  id v211;
  id v212;
  id v213;
  NSObject *v214;
  os_log_type_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  char *v220;
  Class v221;
  id v222;
  id v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  Class v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  __n128 v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  id v238;
  id v239;
  id v240;
  id v241;
  NSObject *v242;
  os_log_type_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  id v247;
  id v248;
  char *v249;
  Class v250;
  id v251;
  id v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  Class v256;
  id v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  __n128 v263;
  _QWORD *v264;
  uint64_t v265;
  os_log_type_t v266;
  uint8_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  id v271;
  char v272;
  void (*v273)(char *, uint64_t, __n128);
  id v274;
  id v275;
  void *v276;
  uint64_t v277;
  void *v278;
  void *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  id v283;
  char v284;
  void (*v285)(char *, uint64_t, __n128);
  id v286;
  id v287;
  void *v288;
  uint64_t v289;
  void *v290;
  void *v291;
  __n128 v292;
  __n128 v293;
  id v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  os_log_type_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  char *v307;
  __int128 v308;
  uint64_t v309;
  void (*v310)(char *, char *, uint64_t);
  __int128 v311;
  id v312;
  uint8_t *v313;
  void *v314;
  uint64_t v315;
  id v316;
  char **v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  _QWORD *v327;
  void (*v328)(char *, uint64_t);
  id v329;
  char *v330;
  id v331;
  id v332;
  void (*v333)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v334;
  id v335;
  char v336[8];
  NSObject *v337;
  id v338;

  v333 = a2;
  v334 = a3;
  v15 = sub_100003C84(&qword_10005A080);
  __chkstk_darwin(v15);
  v17 = (char **)((char *)&v304 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Date(0);
  v19 = __chkstk_darwin(*(_QWORD *)(v18 - 8));
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  v330 = (char *)&v304 - v28;
  if (!a1)
  {
    if (qword_1000598F8 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100006BC8(v42, (uint64_t)qword_100059F00);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Since persistence stores can't be loaded, no usage data can be retrieved.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v47 = type metadata accessor for UsageData(0);
    (*(void (**)(char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v17, 1, 1, v47);
    v333((uint64_t)v17, 0, 0, 0);
    sub_100003D44((uint64_t)v17, &qword_10005A080);
    return;
  }
  v326 = v24;
  v327 = (_QWORD *)v23;
  v328 = v27;
  v322 = v25;
  v323 = v26;
  v29 = qword_1000598F8;
  v331 = a1;
  v324 = a5;
  v325 = a6;
  if ((a4 & 1) != 0)
  {
    v321 = v18;
    if (v29 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    LODWORD(v329) = a4;
    v30 = type metadata accessor for Logger(0);
    v31 = (void *)sub_100006BC8(v30, (uint64_t)qword_100059F00);
    v32 = swift_bridgeObjectRetain_n(a6, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    v35 = os_log_type_enabled(v33, v34);
    v319 = a8;
    if (v35)
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (void *)swift_slowAlloc(32, -1);
      v332 = v31;
      v38 = v17;
      v39 = v37;
      v338 = v37;
      v40 = a6;
      *(_DWORD *)v36 = 136446210;
      swift_bridgeObjectRetain(a6);
      v335 = (id)sub_100015BD0(a5, a6, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);
      swift_bridgeObjectRelease_n(a6, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Fetching information for user with dsid: %{public}s.", v36, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      v41 = v39;
      v17 = v38;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a6, 2);
      v40 = a6;
    }
    v54 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequest");
    v59 = sub_100003C84(&qword_10005A0B0);
    v60 = swift_allocObject(v59, 112, 7);
    *(_OWORD *)(v60 + 16) = xmmword_100046DD0;
    sub_1000189D0(0, &qword_10005A0B8, NSPredicate_ptr);
    *(_QWORD *)(v60 + 56) = &type metadata for String;
    v61 = sub_100016338();
    *(_QWORD *)(v60 + 32) = 1684632420;
    *(_QWORD *)(v60 + 40) = 0xE400000000000000;
    *(_QWORD *)(v60 + 96) = &type metadata for String;
    *(_QWORD *)(v60 + 104) = v61;
    *(_QWORD *)(v60 + 64) = v61;
    *(_QWORD *)(v60 + 72) = a5;
    *(_QWORD *)(v60 + 80) = v40;
    swift_bridgeObjectRetain(v40);
    v62 = (void *)NSPredicate.init(format:_:)(0x4025203D3D204B25, 0xE800000000000000, v60);
    objc_msgSend(v54, "setPredicate:", v62);

    v338 = 0;
    v63 = objc_msgSend(v54, "execute:", &v338);
    v64 = v338;
    if (!v63)
    {
      v106 = v338;
      v107 = _convertNSErrorToError(_:)(v64);

      swift_willThrow();
      v108 = swift_errorRelease(v107);
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v109, v110))
      {
        v57 = 0;
        v112 = 0;
LABEL_144:

        v299 = 0;
        goto LABEL_145;
      }
      v111 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Fetching user information returned nil results", v111, 2u);
      v57 = 0;
      v112 = 0;
LABEL_142:
      swift_slowDealloc(v111, -1, -1);
      goto LABEL_144;
    }
    v65 = v63;
    v66 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
    v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v66);
    v67 = v64;

    v18 = v321;
    a4 = (int)v329;
  }
  else
  {
    if (v29 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_100006BC8(v48, (uint64_t)qword_100059F00);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Fetching local user information", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    v53 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequestMatchingLocalUser");
    v338 = 0;
    v54 = objc_msgSend(v53, "execute:", &v338);

    v55 = v338;
    if (!v54)
    {
      a7 = (uint64_t)v338;
      v105 = (void *)_convertNSErrorToError(_:)(v55);

      swift_willThrow();
      LODWORD(a7) = 0;
      goto LABEL_50;
    }
    v319 = a8;
    v56 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
    v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v54, v56);
    v58 = v55;
  }

  if (!((unint64_t)v57 >> 62))
  {
    v68 = *(id *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    LODWORD(v54) = v68 != 0;
    swift_bridgeObjectRetain(v57);
    if (v68)
      goto LABEL_23;
    goto LABEL_136;
  }
  if (v57 < 0)
    v297 = v57;
  else
    v297 = v57 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v57);
  v298 = _CocoaArrayWrapper.endIndex.getter(v297);
  swift_bridgeObjectRelease(v57);
  LODWORD(v54) = v298 > 0;
  swift_bridgeObjectRetain(v57);
  v68 = (id)_CocoaArrayWrapper.endIndex.getter(v297);
  if (!v68)
  {
LABEL_136:
    swift_bridgeObjectRelease(v57);
    if ((v54 & 1) != 0)
    {
      v299 = 256;
      v112 = 1;
LABEL_145:
      v303 = type metadata accessor for UsageData(0);
      (*(void (**)(char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v303 - 8) + 56))(v17, 1, 1, v303);
      v333((uint64_t)v17, 0, 0, v299 | v112);
      v104 = v331;
LABEL_146:

      sub_100003D44((uint64_t)v17, &qword_10005A080);
      goto LABEL_147;
    }
    if (qword_1000598F8 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v300 = type metadata accessor for Logger(0);
    v301 = sub_100006BC8(v300, (uint64_t)qword_100059F00);
    v109 = Logger.logObject.getter(v301);
    v302 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v109, v302))
    {
      v112 = 1;
      goto LABEL_144;
    }
    v111 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v111 = 0;
    _os_log_impl((void *)&_mh_execute_header, v109, v302, "Fetching user information returned empty results", v111, 2u);
    v112 = 1;
    goto LABEL_142;
  }
LABEL_23:
  LODWORD(v329) = a4;
  if ((v57 & 0xC000000000000001) != 0)
  {
LABEL_149:
    v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v57);
  }
  else
  {
    if (!*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_151;
    }
    v69 = *(id *)(v57 + 32);
  }
  v332 = v69;
  *(_QWORD *)&v70 = swift_bridgeObjectRelease(v57).n128_u64[0];
  if (!objc_msgSend(v332, "screenTimeEnabled", v70))
  {
    if (qword_1000598F8 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v97 = type metadata accessor for Logger(0);
    v98 = sub_100006BC8(v97, (uint64_t)qword_100059F00);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "ScreenTime is disabled.", v101, 2u);
      swift_slowDealloc(v101, -1, -1);
    }

    v102 = type metadata accessor for UsageData(0);
    (*(void (**)(char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v17, 1, 1, v102);
    if ((_DWORD)v54)
      v103 = 257;
    else
      v103 = 1;
    v333((uint64_t)v17, 0, 0, v103);

    v104 = v332;
    goto LABEL_146;
  }
  if (qword_1000598F8 != -1)
LABEL_153:
    swift_once(&qword_1000598F8, sub_10000E4D8);
  v71 = type metadata accessor for Logger(0);
  v320 = sub_100006BC8(v71, (uint64_t)qword_100059F00);
  v72 = Logger.logObject.getter(v320);
  v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v74 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "ScreenTime is enabled.", v74, 2u);
    swift_slowDealloc(v74, -1, -1);
  }

  v75 = (void *)objc_opt_self(STUsageRequest);
  v338 = 0;
  v76 = objc_msgSend(v75, "fetchOrCreateUsageRequestForUser:inContext:error:", v332, v331, &v338);
  v77 = v338;
  if (!v76)
  {
    a7 = (uint64_t)v338;
    v105 = (void *)_convertNSErrorToError(_:)(v77);

    swift_willThrow();
    swift_bridgeObjectRelease(v57);

    LODWORD(a7) = 1;
    goto LABEL_50;
  }
  v78 = v76;
  v318 = (int)v54;
  v317 = v17;
  v79 = v338;
  v80 = v330;
  Date.init()(v79);
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v78, "setRequestedDate:", isa);

  v312 = v78;
  objc_msgSend(v78, "setIsBackgroundTask:", 1);
  v82 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v83 = v326;
  v84 = v327;
  v310 = (void (*)(char *, char *, uint64_t))v327[2];
  v310(v326, v80, v18);
  v85 = v82;
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.default.getter();
  v88 = os_log_type_enabled(v86, v87);
  v315 = v57;
  v309 = a7;
  v316 = v85;
  if (v88)
  {
    v89 = (uint8_t *)swift_slowAlloc(12, -1);
    v314 = (void *)swift_slowAlloc(32, -1);
    v338 = v314;
    v321 = v18;
    *(_DWORD *)v89 = 136446210;
    v313 = v89 + 4;
    v90 = Date._bridgeToObjectiveC()().super.isa;
    v91 = objc_msgSend(v85, "stringFromDate:", v90);

    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v93 = v85;
    v95 = v94;

    v57 = v315;
    v335 = (id)sub_100015BD0(v92, v95, (uint64_t *)&v338);
    v18 = v321;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);

    v96 = swift_bridgeObjectRelease(v95);
    v54 = (id)v84[1];
    ((void (*)(char *, uint64_t, __n128))v54)(v83, v18, v96);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "Creating usage request with timestamp %{public}s", v89, 0xCu);
    a7 = (uint64_t)v314;
    swift_arrayDestroy(v314, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(a7, -1, -1);
    swift_slowDealloc(v89, -1, -1);
  }
  else
  {

    v54 = (id)v84[1];
    ((void (*)(char *, uint64_t))v54)(v83, v18);
  }

  v17 = v317;
  v338 = 0;
  v113 = objc_msgSend(v331, "save:", &v338);
  v114 = v338;
  if (!v113)
  {
    a7 = (uint64_t)v338;
    v105 = (void *)_convertNSErrorToError(_:)(v114);

    swift_willThrow();
    ((void (*)(char *, uint64_t))v54)(v330, v18);
    swift_bridgeObjectRelease(v57);
    LODWORD(a7) = 1;
    LODWORD(v54) = v318;
LABEL_50:
    v338 = v105;
    v120 = sub_100003C84(&qword_10005A088);
    v121 = sub_1000189D0(0, &qword_10005A090, NSError_ptr);
    swift_dynamicCast(&v335, &v338, v120, v121, 0);
    v68 = v335;
    if (qword_1000598F8 == -1)
    {
LABEL_51:
      v122 = type metadata accessor for Logger(0);
      sub_100006BC8(v122, (uint64_t)qword_100059F00);
      v123 = v68;
      v124 = Logger.logObject.getter(v123);
      v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v318 = (int)v54;
        v126 = swift_slowAlloc(12, -1);
        LODWORD(v332) = a7;
        a7 = v126;
        v127 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)a7 = 138543362;
        v337 = v123;
        v128 = v123;
        LODWORD(v54) = v318;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v337, &v338);
        *v127 = v123;

        _os_log_impl((void *)&_mh_execute_header, v124, v125, "Failed to fetch local user: %{public}@", (uint8_t *)a7, 0xCu);
        v129 = sub_100003C84(&qword_10005A098);
        swift_arrayDestroy(v127, 1, v129);
        swift_slowDealloc(v127, -1, -1);
        v130 = a7;
        LODWORD(a7) = (_DWORD)v332;
        swift_slowDealloc(v130, -1, -1);
      }
      else
      {

        v124 = v123;
      }

      v131 = type metadata accessor for UsageData(0);
      (*(void (**)(char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v17, 1, 1, v131);
      if ((_DWORD)v54)
        v132 = 256;
      else
        v132 = 0;
      v333((uint64_t)v17, 0, 0, v132 | a7);

      sub_100003D44((uint64_t)v17, &qword_10005A080);
      swift_errorRelease(v338);
      return;
    }
LABEL_151:
    swift_once(&qword_1000598F8, sub_10000E4D8);
    goto LABEL_51;
  }
  v305 = a9;
  v326 = v336;
  v115 = v338;
  v116 = 1;
  v117 = &selRef_initWithFormat_;
  *(_QWORD *)&v118 = 136380931;
  v308 = v118;
  v307 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v118 = 138543362;
  v306 = v118;
  *(_QWORD *)&v118 = 134349314;
  v311 = v118;
  v119 = (void (*)(char *, uint64_t))v54;
  LODWORD(v54) = v318;
  while (1)
  {
    v327 = (_QWORD *)v116;
    sleep(2u);
    v135 = objc_msgSend(v332, v117[37]);

    if (v135)
    {
      v136 = objc_msgSend(v332, v117[37]);
      if (!v136
        || (v137 = v136,
            v138 = objc_msgSend(v136, "device"),
            v137,
            !v138))
      {
        v196 = Logger.logObject.getter(v136);
        v197 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v196, v197))
        {
          v198 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v198 = 0;
          _os_log_impl((void *)&_mh_execute_header, v196, v197, "The user local device state did not contain device information.", v198, 2u);
          swift_slowDealloc(v198, -1, -1);
        }

        v199 = type metadata accessor for UsageData(0);
        (*(void (**)(char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v199 - 8) + 56))(v17, 1, 1, v199);
        if ((_DWORD)v54)
          v200 = 257;
        else
          v200 = 1;
        v333((uint64_t)v17, 0, 1, v200);

        goto LABEL_131;
      }
      v139 = (void *)objc_opt_self(STUsage);
      v140 = objc_msgSend(v139, "fetchRequestMatchingUser:device:", v332, v138);
      v338 = 0;
      v141 = objc_msgSend(v140, "execute:", &v338);

      a7 = (uint64_t)v338;
      if (v141)
      {
        v142 = sub_1000189D0(0, &qword_10005A0A8, STUsage_ptr);
        v143 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v141, v142);
        v144 = (id)a7;

        goto LABEL_68;
      }
      v173 = v338;
      v105 = (void *)_convertNSErrorToError(_:)(a7);

      a7 = (uint64_t)v105;
      swift_willThrow();

LABEL_81:
      v338 = v105;
      swift_errorRetain(v105);
      v175 = sub_100003C84(&qword_10005A088);
      v176 = sub_1000189D0(0, &qword_10005A090, NSError_ptr);
      if (!swift_dynamicCast(&v335, &v338, v175, v176, 0))
      {
        v119(v330, v18);

        swift_errorRelease(v338);
        swift_bridgeObjectRelease(v57);
        LODWORD(a7) = 1;
        goto LABEL_50;
      }
      swift_errorRelease(v105);
      v177 = v335;
      if ((v329 & 1) != 0)
      {
        v178 = v325;
        swift_bridgeObjectRetain_n(v325, 2);
        v179 = v177;
        v180 = Logger.logObject.getter(v179);
        v181 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v180, v181))
        {
          a7 = swift_slowAlloc(22, -1);
          v54 = v119;
          v182 = (_QWORD *)swift_slowAlloc(8, -1);
          v183 = swift_slowAlloc(32, -1);
          v337 = v183;
          *(_DWORD *)a7 = v308;
          swift_bridgeObjectRetain(v178);
          *(_QWORD *)(a7 + 4) = sub_100015BD0(v324, v178, (uint64_t *)&v337);
          swift_bridgeObjectRelease_n(v178, 3);
          *(_WORD *)(a7 + 12) = 2114;
          *(_QWORD *)(a7 + 14) = v179;
          *v182 = v179;

          _os_log_impl((void *)&_mh_execute_header, v180, v181, "Failed to fetch usage for user with dsid %{private}s: %{public}@", (uint8_t *)a7, 0x16u);
          v184 = sub_100003C84(&qword_10005A098);
          swift_arrayDestroy(v182, 1, v184);
          v185 = v182;
          v119 = (void (*)(char *, uint64_t))v54;
          LODWORD(v54) = v318;
          swift_slowDealloc(v185, -1, -1);
          swift_arrayDestroy(v183, 1, v307);
          swift_slowDealloc(v183, -1, -1);
          swift_slowDealloc(a7, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v178, 2);
        }
        v17 = v317;
      }
      else
      {
        v186 = v335;
        v187 = Logger.logObject.getter(v186);
        v188 = static os_log_type_t.error.getter();
        a7 = v188;
        if (os_log_type_enabled(v187, v188))
        {
          v189 = swift_slowAlloc(12, -1);
          v190 = v119;
          v191 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v189 = v306;
          *(_QWORD *)(v189 + 4) = v186;
          *v191 = v186;
          _os_log_impl((void *)&_mh_execute_header, v187, (os_log_type_t)a7, "Failed to fetch usage for local user: %{public}@", (uint8_t *)v189, 0xCu);
          v192 = sub_100003C84(&qword_10005A098);
          swift_arrayDestroy(v191, 1, v192);
          v193 = v191;
          v119 = v190;
          v17 = v317;
          swift_slowDealloc(v193, -1, -1);
          swift_slowDealloc(v189, -1, -1);

        }
        else
        {

        }
      }
      v133 = v327;
      v117 = &selRef_initWithFormat_;
      swift_errorRelease(v338);
      if (v133 == (_QWORD *)5)
      {
        v119(v330, v18);
        swift_bridgeObjectRelease(v57);

        return;
      }
      goto LABEL_60;
    }
    v145 = (void *)objc_opt_self(STUsage);
    v146 = objc_msgSend(v145, "fetchRequestMatchingUser:device:", v332, 0);
    v338 = 0;
    v138 = objc_msgSend(v146, "execute:", &v338);

    v147 = v338;
    if (!v138)
    {
      v174 = v338;
      v105 = (void *)_convertNSErrorToError(_:)(v147);

      a7 = (uint64_t)v105;
      swift_willThrow();
      goto LABEL_81;
    }
    v148 = sub_1000189D0(0, &qword_10005A0A8, STUsage_ptr);
    v143 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v138, v148);
    v149 = v147;
LABEL_68:

    if ((unint64_t)v143 >> 62)
    {
      if (v143 < 0)
        v194 = v143;
      else
        v194 = v143 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v143);
      v195 = _CocoaArrayWrapper.endIndex.getter(v194);
      swift_bridgeObjectRelease(v143);
      if (!v195)
      {
LABEL_101:
        swift_bridgeObjectRelease(v143);
        if ((v329 & 1) != 0)
        {
          v202 = v325;
          v203 = swift_bridgeObjectRetain_n(v325, 2);
          v204 = Logger.logObject.getter(v203);
          v205 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v204, v205))
          {
            v206 = (uint8_t *)swift_slowAlloc(12, -1);
            v329 = (id)swift_slowAlloc(32, -1);
            v338 = v329;
            *(_DWORD *)v206 = 136380675;
            swift_bridgeObjectRetain(v202);
            v335 = (id)sub_100015BD0(v324, v202, (uint64_t *)&v338);
            v17 = v317;
            LODWORD(v54) = v318;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);
            swift_bridgeObjectRelease_n(v202, 3);
            _os_log_impl((void *)&_mh_execute_header, v204, v205, "Fetching usage for user with dsid %{private}s returned empty results", v206, 0xCu);
            v207 = v329;
            swift_arrayDestroy(v329, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v207, -1, -1);
            v208 = v206;
            goto LABEL_112;
          }

          swift_bridgeObjectRelease_n(v202, 2);
        }
        else
        {
          v204 = Logger.logObject.getter(v201);
          v266 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v204, v266))
          {
            v267 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v267 = 0;
            _os_log_impl((void *)&_mh_execute_header, v204, v266, "Fetching usage for local user returned empty results.", v267, 2u);
            v208 = v267;
LABEL_112:
            swift_slowDealloc(v208, -1, -1);
          }

        }
        v294 = v312;
        v295 = type metadata accessor for UsageData(0);
        (*(void (**)(char **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v295 - 8) + 56))(v17, 1, 1, v295);
        if ((_DWORD)v54)
          v296 = 257;
        else
          v296 = 1;
        v333((uint64_t)v17, 0, 1, v296);

LABEL_131:
        sub_100003D44((uint64_t)v17, &qword_10005A080);
        v119(v330, v18);
        goto LABEL_147;
      }
    }
    else if (!*(_QWORD *)((v143 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_101;
    }
    if ((v143 & 0xC000000000000001) != 0)
    {
      v150 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v143);
      v17 = &selRef_initWithFormat_;
    }
    else
    {
      v17 = &selRef_initWithFormat_;
      if (!*(_QWORD *)((v143 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_153;
      }
      v150 = *(id *)(v143 + 32);
    }
    *(_QWORD *)&v151 = swift_bridgeObjectRelease(v143).n128_u64[0];
    objc_msgSend(v331, "refreshObject:mergeChanges:", v150, 1, v151);
    v152 = v316;
    v153 = v150;
    v154 = v152;
    a7 = (uint64_t)v153;
    v155 = Logger.logObject.getter(a7);
    v156 = static os_log_type_t.default.getter();
    v157 = v156;
    if (os_log_type_enabled(v155, v156))
    {
      v158 = swift_slowAlloc(22, -1);
      LODWORD(v321) = v157;
      v159 = v158;
      v314 = (void *)swift_slowAlloc(32, -1);
      v338 = v314;
      *(_DWORD *)v159 = v311;
      v335 = v327;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v326);
      *(_WORD *)(v159 + 12) = 2082;
      v313 = (uint8_t *)(v159 + 14);
      v160 = objc_msgSend((id)a7, v17[41]);
      v161 = (char *)v328;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v162 = Date._bridgeToObjectiveC()().super.isa;
      v119(v161, v18);
      v54 = (id)v18;
      v163 = v119;
      v164 = objc_msgSend(v154, "stringFromDate:", v162);

      v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
      v167 = v166;

      v119 = v163;
      v18 = (uint64_t)v54;
      LODWORD(v54) = v318;
      v335 = (id)sub_100015BD0(v165, v167, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v326);

      v168 = v167;
      v57 = v315;
      swift_bridgeObjectRelease(v168);
      _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v321, "Attempt %{public}ld: Usage retrieved as of %{public}s", (uint8_t *)v159, 0x16u);
      v169 = v314;
      swift_arrayDestroy(v314, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v169, -1, -1);
      swift_slowDealloc(v159, -1, -1);

      v170 = 0x100059000;
    }
    else
    {

      v170 = (uint64_t)v17;
      v161 = (char *)v328;
    }
    v171 = objc_msgSend((id)a7, *(SEL *)(v170 + 328));
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v172 = sub_10000DF58(&qword_100059ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    LOBYTE(v171) = dispatch thunk of static Comparable.< infix(_:_:)(v161, v330, v18, v172);
    v119(v161, v18);
    v17 = v317;
    v117 = &selRef_initWithFormat_;
    if ((v171 & 1) == 0)
      break;
    v133 = v327;
    if (v327 == (_QWORD *)5)
    {
      v237 = v322;
      v310(v322, v330, v18);
      v238 = v154;
      v239 = (id)a7;
      v240 = v238;
      v241 = v239;
      v242 = Logger.logObject.getter(v241);
      v243 = static os_log_type_t.error.getter();
      v244 = v243;
      if (os_log_type_enabled(v242, v243))
      {
        v245 = swift_slowAlloc(22, -1);
        v329 = v241;
        v246 = v245;
        v327 = (_QWORD *)swift_slowAlloc(64, -1);
        v338 = v327;
        *(_DWORD *)v246 = 136446466;
        v247 = objc_msgSend(v329, "lastUpdatedDate");
        LODWORD(v326) = v244;
        v248 = v247;
        v249 = (char *)v328;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v250 = Date._bridgeToObjectiveC()().super.isa;
        v119(v249, v18);
        v251 = objc_msgSend(v240, "stringFromDate:", v250);
        v328 = v119;
        v252 = v251;

        v253 = static String._unconditionallyBridgeFromObjectiveC(_:)(v252);
        v255 = v254;

        v335 = (id)sub_100015BD0(v253, v255, (uint64_t *)&v338);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);

        swift_bridgeObjectRelease(v255);
        *(_WORD *)(v246 + 12) = 2082;
        v256 = Date._bridgeToObjectiveC()().super.isa;
        v257 = objc_msgSend(v240, "stringFromDate:", v256);

        v258 = static String._unconditionallyBridgeFromObjectiveC(_:)(v257);
        v259 = v18;
        v261 = v260;

        v335 = (id)sub_100015BD0(v258, v261, (uint64_t *)&v338);
        v119 = v328;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);

        v262 = v261;
        v18 = v259;
        v57 = v315;
        v263 = swift_bridgeObjectRelease(v262);
        ((void (*)(char *, uint64_t, __n128))v119)(v237, v18, v263);
        _os_log_impl((void *)&_mh_execute_header, v242, (os_log_type_t)v326, "Returning the usage updated at %{public}s but requested at %{public}s", (uint8_t *)v246, 0x16u);
        v264 = v327;
        swift_arrayDestroy(v327, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v264, -1, -1);
        v265 = v246;
        v241 = v329;
        swift_slowDealloc(v265, -1, -1);
      }
      else
      {

        v119(v237, v18);
      }

      v281 = v324;
      v280 = v325;
      swift_bridgeObjectRetain(v325);
      v282 = sub_100013B78(v281, v280);
      v283 = v312;
      if ((v284 & 1) == 0)
      {
        v285 = (void (*)(char *, uint64_t, __n128))v119;
        v286 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v282);
        v287 = objc_msgSend(v332, "appleID");
        if (v287)
        {
          v288 = v287;
          v289 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
          v291 = v290;

        }
        else
        {
          v289 = 0;
          v291 = 0;
        }
        sub_100013DC4(v241, v286, v319, v305, v289, v291, v333, v334);

        v293 = swift_bridgeObjectRelease(v291);
        v285(v330, v18, v293);
        goto LABEL_147;
      }
LABEL_155:
      __break(1u);
      return;
    }

LABEL_60:
    v134 = __OFADD__(v133, 1);
    v116 = (uint64_t)v133 + 1;
    if (v134)
    {
      __break(1u);
      goto LABEL_149;
    }
  }
  v209 = v323;
  v310(v323, v330, v18);
  v210 = v154;
  v211 = (id)a7;
  v212 = v210;
  v213 = v211;
  v214 = Logger.logObject.getter(v213);
  v215 = static os_log_type_t.default.getter();
  v216 = v215;
  if (os_log_type_enabled(v214, v215))
  {
    v217 = swift_slowAlloc(22, -1);
    v329 = v213;
    v218 = v217;
    v327 = (_QWORD *)swift_slowAlloc(64, -1);
    v338 = v327;
    *(_DWORD *)v218 = 136446466;
    LODWORD(v326) = v216;
    v219 = objc_msgSend(v329, "lastUpdatedDate");
    v220 = (char *)v328;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v221 = Date._bridgeToObjectiveC()().super.isa;
    v119(v220, v18);
    v222 = objc_msgSend(v212, "stringFromDate:", v221);
    v328 = v119;
    v223 = v222;

    v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v223);
    v226 = v225;

    v335 = (id)sub_100015BD0(v224, v226, (uint64_t *)&v338);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);

    swift_bridgeObjectRelease(v226);
    *(_WORD *)(v218 + 12) = 2082;
    v227 = Date._bridgeToObjectiveC()().super.isa;
    v228 = objc_msgSend(v212, "stringFromDate:", v227);

    v229 = static String._unconditionallyBridgeFromObjectiveC(_:)(v228);
    v230 = v18;
    v232 = v231;

    v335 = (id)sub_100015BD0(v229, v232, (uint64_t *)&v338);
    v119 = v328;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v335, v336);

    v233 = v232;
    v18 = v230;
    v57 = v315;
    v234 = swift_bridgeObjectRelease(v233);
    ((void (*)(char *, uint64_t, __n128))v119)(v209, v18, v234);
    _os_log_impl((void *)&_mh_execute_header, v214, (os_log_type_t)v326, "Returning the usage updated at %{public}s requested at %{public}s", (uint8_t *)v218, 0x16u);
    v235 = v327;
    swift_arrayDestroy(v327, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v235, -1, -1);
    v236 = v218;
    v213 = v329;
    swift_slowDealloc(v236, -1, -1);
  }
  else
  {

    v119(v209, v18);
  }

  v269 = v324;
  v268 = v325;
  swift_bridgeObjectRetain(v325);
  v270 = sub_100013B78(v269, v268);
  v271 = v312;
  if ((v272 & 1) != 0)
  {
    __break(1u);
    goto LABEL_155;
  }
  v273 = (void (*)(char *, uint64_t, __n128))v119;
  v274 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v270);
  v275 = objc_msgSend(v332, "appleID");
  if (v275)
  {
    v276 = v275;
    v277 = static String._unconditionallyBridgeFromObjectiveC(_:)(v275);
    v279 = v278;

  }
  else
  {
    v277 = 0;
    v279 = 0;
  }
  sub_100013DC4(v213, v274, v319, v305, v277, v279, v333, v334);

  v292 = swift_bridgeObjectRelease(v279);
  v273(v330, v18, v292);
LABEL_147:
  swift_bridgeObjectRelease(v57);
}

uint64_t sub_100013B78(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_100017D5C(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_100017C78(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_100013DC4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  id v38;
  id v39;
  Class isa;
  id v41;
  unsigned int v42;
  void **v43;
  void **v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  NSObject *v66;
  id v67;
  Class v68;
  void *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  _QWORD *v95;
  void **v97;
  void **v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  NSObject *v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  NSObject **v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSString v117;
  char *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(char *, uint64_t);
  void (*v134)(uint64_t, _QWORD, _QWORD, uint64_t);
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  void **aBlock;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  _QWORD *v148;
  NSObject *v149;
  _QWORD *v150;

  v140 = a8;
  v134 = a7;
  v117 = a6;
  v116 = a5;
  v123 = a4;
  v115 = a3;
  v120 = a2;
  v142 = a1;
  v8 = sub_100003C84(&qword_10005A080);
  __chkstk_darwin(v8);
  v118 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for DispatchWorkItemFlags(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for DispatchQoS(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for UsageData(0);
  v132 = *(_QWORD *)(v131 - 8);
  v12 = __chkstk_darwin(v131);
  v122 = (uint64_t)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = v13;
  __chkstk_darwin(v12);
  v130 = (uint64_t *)((char *)&v114 - v14);
  v15 = type metadata accessor for DateInterval(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v114 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v114 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v114 - v30;
  v139 = type metadata accessor for Calendar(0);
  v136 = *(_QWORD *)(v139 - 8);
  v32 = __chkstk_darwin(v139);
  v34 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = static Calendar.current.getter(v32);
  Date.init()(v35);
  v135 = v34;
  Calendar.startOfDay(for:)(v29);
  v133 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
  v36 = v133(v29, v19);
  Date.init()(v36);
  v37 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v137 = v31;
  v37(v29, v31, v19);
  v138 = v26;
  v141 = v19;
  v37(v23, v26, v19);
  v38 = v142;
  DateInterval.init(start:end:)(v29, v23);
  v39 = objc_allocWithZone((Class)STUsageReporter);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v41 = objc_msgSend(v39, "initWithUsage:dateInterval:", v38, isa);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v142 = v41;
  aBlock = 0;
  v42 = objc_msgSend(v41, "generateReport:", &aBlock);
  v43 = aBlock;
  if (v42)
  {
    v44 = aBlock;
    v45 = v142;
    v46 = objc_msgSend(v142, "applicationAndWebUsage");
    v47 = sub_1000189D0(0, &qword_10005A100, STUsageDetailItem_ptr);
    v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

    v49 = objc_msgSend(v45, "categoryRatiosPerCalendarUnit:numberOfCategories:", 32, 3);
    v50 = sub_100003C84(&qword_10005A108);
    v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

    v52 = objc_msgSend(v45, "categoryUsage");
    v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v47);

    v54 = objc_msgSend(v45, "screenTimeUsagePerCalendarUnit:", 32);
    v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v54, v47);

    objc_msgSend(v45, "totalScreenTime");
    v57 = v56;
    v58 = objc_msgSend(v38, "lastUpdatedDate");
    v59 = v130;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    *v59 = v48;
    v59[1] = v51;
    v59[2] = v53;
    v59[3] = v55;
    v59[4] = v57;
    sub_10000E558(6);
    v61 = v60;
    v62 = dispatch_group_create();
    dispatch_group_enter(v62);
    v63 = (_QWORD *)swift_allocObject(&unk_100056518, 40, 7);
    v63[2] = v61;
    v63[3] = v62;
    v64 = v119;
    v63[4] = v119;
    v65 = (void *)objc_opt_self(STAppInfoCache);
    swift_bridgeObjectRetain(v61);
    v66 = v62;
    swift_retain(v64);
    v67 = objc_msgSend(v65, "sharedCache");
    v68 = Set._bridgeToObjectiveC()().super.isa;
    v147 = sub_10001853C;
    v148 = v63;
    aBlock = _NSConcreteStackBlock;
    v144 = 1107296256;
    v145 = sub_10000E45C;
    v146 = &unk_100056530;
    v69 = _Block_copy(&aBlock);
    v70 = v148;
    swift_retain(v63);
    swift_release(v70);
    objc_msgSend(v67, "fetchAppInfoForBundleIdentifiers:completionHandler:", v68, v69);
    _Block_release(v69);
    swift_release(v63);
    swift_bridgeObjectRelease(v61);

    v71 = swift_allocObject(&unk_100056568, 24, 7);
    *(_QWORD *)(v71 + 16) = 0;
    v72 = (uint64_t)v120;
    v73 = (uint64_t)objc_msgSend(v120, "integerValue");
    v74 = v123;
    if (v73 >= 1)
    {
      if (v123)
      {
        dispatch_group_enter(v66);
        v75 = swift_allocObject(&unk_1000565E0, 32, 7);
        *(_QWORD *)(v75 + 16) = v71;
        *(_QWORD *)(v75 + 24) = v66;
        v76 = v66;
        swift_retain(v71);
        sub_100006D60(v72, v115, v74, v116, v117, (uint64_t)sub_1000186B8, v75);
        swift_release(v75);
      }
    }
    sub_1000189D0(0, &qword_10005A078, OS_dispatch_queue_ptr);
    v77 = (void *)static OS_dispatch_queue.main.getter();
    v78 = v122;
    sub_10000DB08((uint64_t)v59, v122, type metadata accessor for UsageData);
    v79 = *(unsigned __int8 *)(v132 + 80);
    v80 = (v79 + 32) & ~v79;
    v81 = (v121 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
    v82 = swift_allocObject(&unk_100056590, v81 + 10, v79 | 7);
    v83 = v140;
    *(_QWORD *)(v82 + 16) = v134;
    *(_QWORD *)(v82 + 24) = v83;
    sub_10000DE24(v78, v82 + v80, type metadata accessor for UsageData);
    v84 = v82 + v81;
    *(_QWORD *)v84 = v71;
    *(_WORD *)(v84 + 8) = 257;
    v147 = sub_10001862C;
    v148 = (_QWORD *)v82;
    aBlock = _NSConcreteStackBlock;
    v144 = 1107296256;
    v145 = sub_1000103DC;
    v146 = &unk_1000565A8;
    v85 = _Block_copy(&aBlock);
    swift_retain(v71);
    v86 = swift_retain(v83);
    v87 = v124;
    static DispatchQoS.unspecified.getter(v86);
    v150 = _swiftEmptyArrayStorage;
    v88 = sub_10000DF58(&qword_10005A060, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v89 = sub_100003C84(&qword_10005A068);
    v90 = sub_100009F64(&qword_10005A070, &qword_10005A068, (uint64_t)&protocol conformance descriptor for [A]);
    v91 = v127;
    v92 = v129;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v150, v89, v90, v129, v88);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v87, v91, v77, v85);
    _Block_release(v85);

    (*(void (**)(char *, uint64_t))(v128 + 8))(v91, v92);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v87, v126);
    sub_100015A24((uint64_t)v130, type metadata accessor for UsageData);
    v93 = v141;
    v94 = (void (*)(char *, uint64_t))v133;
    v133(v138, v141);
    v94(v137, v93);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v139);
    v95 = v148;
    swift_release(v71);
    return swift_release(v95);
  }
  else
  {
    v97 = aBlock;
    v98 = (void **)_convertNSErrorToError(_:)(v43);

    swift_willThrow();
    aBlock = v98;
    v99 = sub_100003C84(&qword_10005A088);
    v100 = sub_1000189D0(0, &qword_10005A090, NSError_ptr);
    swift_dynamicCast(&v150, &aBlock, v99, v100, 0);
    v101 = v150;
    if (qword_1000598F8 != -1)
      swift_once(&qword_1000598F8, sub_10000E4D8);
    v102 = type metadata accessor for Logger(0);
    sub_100006BC8(v102, (uint64_t)qword_100059F00);
    v103 = v101;
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v106 = 138543362;
      v149 = v103;
      v108 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150);
      *v107 = v103;

      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Failed to generate usage report: %{public}@", v106, 0xCu);
      v109 = sub_100003C84(&qword_10005A098);
      swift_arrayDestroy(v107, 1, v109);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);
    }
    else
    {

      v104 = v103;
    }
    v110 = v131;

    v111 = (uint64_t)v118;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))(v118, 1, 1, v110);
    v134(v111, 0, 0, 257);

    sub_100003D44(v111, &qword_10005A080);
    v112 = v141;
    v113 = (void (*)(char *, uint64_t))v133;
    v133(v138, v141);
    v113(v137, v112);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v139);
    return swift_errorRelease(aBlock);
  }
}

void sub_1000149A4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  NSString v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v22 = a2 + 56;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 56);
  v23 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v8 = 0;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v19 >= v23)
      goto LABEL_21;
    v20 = *(_QWORD *)(v22 + 8 * v19);
    ++v8;
    if (!v20)
    {
      v8 = v19 + 1;
      if (v19 + 1 >= v23)
        goto LABEL_21;
      v20 = *(_QWORD *)(v22 + 8 * v8);
      if (!v20)
      {
        v8 = v19 + 2;
        if (v19 + 2 >= v23)
          goto LABEL_21;
        v20 = *(_QWORD *)(v22 + 8 * v8);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v7 = (v20 - 1) & v20;
    v10 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_5:
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 16 * v10 + 8);
    swift_bridgeObjectRetain(v11);
    dispatch_group_enter(a3);
    v12 = swift_allocObject(&unk_100056608, 24, 7);
    *(_QWORD *)(v12 + 16) = a3;
    v13 = (void *)objc_opt_self(STUsageDetailItem);
    v14 = a3;
    v15 = String._bridgeToObjectiveC()();
    v16 = swift_allocObject(&unk_100056630, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_100018A08;
    *(_QWORD *)(v16 + 24) = v12;
    aBlock[4] = sub_100018A34;
    v25 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006CE0;
    aBlock[3] = &unk_100056648;
    v17 = _Block_copy(aBlock);
    v18 = v25;
    swift_retain(v12);
    swift_release(v18);
    objc_msgSend(v13, "iconImageForBundleIdentifier:completionHandler:", v15, v17);
    _Block_release(v17);
    swift_release(v12);
    swift_bridgeObjectRelease(v11);

  }
  v21 = v19 + 3;
  if (v21 >= v23)
  {
LABEL_21:
    swift_release(a2);
    dispatch_group_leave(a3);
    return;
  }
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
  {
    v8 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v8 >= v23)
      goto LABEL_21;
    v20 = *(_QWORD *)(v22 + 8 * v8);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

void sub_100014C30(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  id v7;
  _BYTE v8[24];

  swift_beginAccess(a2 + 16, v8, 1, 0);
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;

  v7 = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_100014C90(void (*a1)(char *, void *, uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  _BYTE v17[24];

  v9 = sub_100003C84(&qword_10005A080);
  __chkstk_darwin(v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000DB08(a3, (uint64_t)v11, type metadata accessor for UsageData);
  v12 = type metadata accessor for UsageData(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  swift_beginAccess(a4 + 16, v17, 0, 0);
  v13 = *(void **)(a4 + 16);
  v14 = v13;
  a1(v11, v13, 1, a5 & 0x101);

  return sub_100003D44((uint64_t)v11, &qword_10005A080);
}

uint64_t sub_100014DA0()
{
  _QWORD *v0;

  sub_100018494(v0 + 2);
  sub_100018494(v0 + 7);
  sub_100018494(v0 + 12);
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for CoreDataUsageProvider()
{
  return objc_opt_self(_TtC25ScreenTimeWidgetExtension21CoreDataUsageProvider);
}

uint64_t sub_100014DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100014E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100003C84(&qword_10005A058);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100014E9C(uint64_t a1)
{
  sub_100003C84(&qword_10005A058);
  return sub_10000EDFC(a1);
}

_QWORD *sub_100014EDC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100014F00(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100014F20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100014F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, _QWORD, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t result;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t (*v49)(char *, _QWORD, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;

  v85 = a2;
  v82 = a4;
  v6 = type metadata accessor for Calendar.Component(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003C84(&qword_100059960);
  v11 = __chkstk_darwin(v10);
  v74 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v76 = (char *)&v67 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v67 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v67 - v18;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  v73 = (char *)&v67 - v25;
  v26 = __chkstk_darwin(v24);
  v75 = (char *)&v67 - v27;
  v28 = __chkstk_darwin(v26);
  v77 = (char *)&v67 - v29;
  v30 = __chkstk_darwin(v28);
  v80 = (char *)&v67 - v31;
  v32 = __chkstk_darwin(v30);
  v84 = (char *)&v67 - v33;
  v34 = __chkstk_darwin(v32);
  v81 = (char *)&v67 - v35;
  __chkstk_darwin(v34);
  v39 = (char *)&v67 - v38;
  v78 = a1;
  if (a1 > 23)
    return sub_10000E200(v85, v82);
  v70 = v17;
  v67 = v37;
  v68 = v36;
  Calendar.startOfDay(for:)(v85);
  v40 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v40(v9, enum case for Calendar.Component.day(_:), v6);
  v83 = v39;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v9, 1, v39, 0);
  v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v9, v6);
  v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  result = v79(v19, 1, v20);
  if ((_DWORD)result == 1)
    goto LABEL_20;
  v69 = v21;
  v43 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v44 = v81;
  v43(v81, v19, v20);
  Calendar.startOfDay(for:)(v44);
  v45 = enum case for Calendar.Component.hour(_:);
  v40(v9, enum case for Calendar.Component.hour(_:), v6);
  v46 = Calendar.component(_:from:)(v9, v85);
  result = ((uint64_t (*)(char *, uint64_t))v41)(v9, v6);
  v47 = __OFADD__(v46, 1);
  v48 = v46 + 1;
  if (v47)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v49 = (uint64_t (*)(char *, _QWORD, uint64_t))v40;
  LODWORD(v85) = v45;
  v40(v9, v45, v6);
  v50 = v70;
  v72 = a3;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v9, v48, v83, 0);
  v71 = v41;
  v41(v9, v6);
  result = v79(v50, 1, v20);
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v51 = v80;
  v43(v80, v50, v20);
  v52 = v84;
  v53 = static Date.> infix(_:_:)(v51, v84);
  v54 = v69;
  v55 = v77;
  if ((v53 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v20);
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v55, v52, v20);
  }
  else
  {
    v43(v77, v51, v20);
  }
  v56 = v78;
  v43(v51, v55, v20);
  result = v49(v9, v85, v6);
  if (__OFSUB__(0, v56))
    goto LABEL_19;
  v57 = v76;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v9, -v56, v51, 0);
  v58 = v57;
  v71(v9, v6);
  result = v79(v57, 1, v20);
  if ((_DWORD)result == 1)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  v59 = v75;
  v43(v75, v58, v20);
  if ((static Date.< infix(_:_:)(v59, v83) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v20);
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v59, v83, v20);
  }
  v49(v9, v85, v6);
  v60 = v74;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v9, v56, v59, 0);
  v71(v9, v6);
  result = v79(v60, 1, v20);
  if ((_DWORD)result == 1)
    goto LABEL_23;
  v61 = v73;
  v43(v73, v60, v20);
  v62 = v84;
  if ((static Date.> infix(_:_:)(v61, v84) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v61, v20);
    v63 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v63(v61, v62, v20);
  }
  else
  {
    v63 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  }
  v64 = v67;
  v63(v67, v59, v20);
  v65 = v68;
  v63(v68, v61, v20);
  DateInterval.init(start:end:)(v64, v65);
  v66 = *(void (**)(char *, uint64_t))(v54 + 8);
  v66(v61, v20);
  v66(v59, v20);
  v66(v80, v20);
  v66(v62, v20);
  v66(v81, v20);
  return ((uint64_t (*)(char *, uint64_t))v66)(v83, v20);
}

uint64_t sub_100015584()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100015594()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 8));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10001561C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10000FEE4(*(_QWORD *)(v0 + 16), *(void (**)(_BYTE *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56), *(char **)(v0 + 64), v0 + v2, *(unsigned __int8 *)(v0 + v2 + *(_QWORD *)(v1 + 64)), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_100015664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015674(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001567C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 7));
  swift_release(*((_QWORD *)v0 + 8));
  swift_release(*((_QWORD *)v0 + 9));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(_QWORD *)&v0[v6 + 8]);
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100015738()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000103E0(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(double *)(v0 + v3), *(double *)(v0 + v3 + 8), v0 + v2, *(void (**)(_BYTE *, __n128))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000157B4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (((v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v6 + 8]);
  swift_release(*(_QWORD *)&v0[v7 + 8]);
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100015870(uint64_t a1, void *a2, int a3, __int16 a4)
{
  uint64_t *v4;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v8 = a4 & 0x101;
  v9 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v10 + *(_QWORD *)(v9 + 64);
  v12 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000109D4(a1, a2, a3, v8, v4[2], *(double *)((char *)v4 + (v11 & 0xFFFFFFFFFFFFFFF8) + 8), *(double *)((char *)v4 + (v11 & 0xFFFFFFFFFFFFFFF8) + 16), v4[3], v4[4], (uint64_t)v4 + v10, *((_BYTE *)v4 + v11), *(uint64_t *)((char *)v4 + v12), *(uint64_t *)((char *)v4 + v12 + 8), *(void (**)(_BYTE *, __n128))((char *)v4 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v4 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100015930()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_10001596C(void *a1)
{
  uint64_t v1;

  sub_1000117E4(a1, *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t type metadata accessor for UsageData(uint64_t a1)
{
  uint64_t result;

  result = qword_10005A1B8;
  if (!qword_10005A1B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UsageData);
  return result;
}

uint64_t sub_1000159DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100015A08()
{
  uint64_t v0;

  return sub_100033A90(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100015A14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015A24(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100015A60(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100015A94@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void *sub_100015ABC(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

_BYTE **sub_100015B50(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_100015B60(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_100015BD0(v6, v7, a3);
  v10 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_100015BD0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100015CA0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000184B4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000184B4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100018494(v12);
  return v7;
}

uint64_t sub_100015CA0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100015E58(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_100015E58(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100015EEC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10001613C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10001613C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100015EEC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100016060(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100016060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003C84(&qword_10005A0C8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000160C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_10001613C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003C84(&qword_10005A0C8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_100016288(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

unint64_t sub_100016338()
{
  unint64_t result;

  result = qword_10005A0C0;
  if (!qword_10005A0C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10005A0C0);
  }
  return result;
}

uint64_t sub_10001637C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD v22[9];

  v7 = *v3;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v22, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain(v15);
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v22[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100016804(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v21 = *v3;
  *v3 = v22[0];
  swift_bridgeObjectRelease(v21);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_100016528(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003C84(&qword_10005A118);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_100016804(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100016528(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10001699C();
      goto LABEL_22;
    }
    sub_100016B4C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v27, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = *v17 == a1 && v17[1] == a2;
    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v16 + 16 * a3);
        v21 = *v20 == a1 && v20[1] == a2;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v22 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = (_QWORD *)(*(_QWORD *)(v22 + 48) + 16 * a3);
  *v23 = a1;
  v23[1] = a2;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

void sub_10001699C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100003C84(&qword_10005A118);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

Swift::Int sub_100016B4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003C84(&qword_10005A118);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *sub_100016DF8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100003C84((uint64_t *)&unk_10005ADB0);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1000186C0((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100016EEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_100003C84(&qword_10005A200);
    v9 = (_QWORD *)swift_allocObject(v8, 56 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 56);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 56 * a3;
  if (v12 >= (unint64_t)&v9[7 * v5 + 4] || v11 >= v12 + 56 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10001707C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1000244D4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000170F4(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1000170F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  float v19;
  float v20;
  float v21;
  float v22;
  id *v23;
  void *v24;
  id v25;
  id v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t *v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t *v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  void *v38;
  Swift::Int v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  float v44;
  float v45;
  float v46;
  float v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  Swift::Int v115;
  Swift::Int v116;
  Swift::Int v117;
  Swift::Int v118;
  void **v119;
  uint64_t v120;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_133;
    if (v4)
      sub_10001785C(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_141;
  v7 = v5;
  v111 = a1;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v120 = (uint64_t)_swiftEmptyArrayStorage;
    v119 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_99:
      v103 = v11;
      if (v14 >= 2)
      {
        v105 = *v111;
        do
        {
          v106 = v14 - 2;
          if (v14 < 2)
            goto LABEL_128;
          if (!v105)
            goto LABEL_140;
          v94 = v103;
          v107 = *(_QWORD *)&v103[16 * v106 + 32];
          v108 = *(_QWORD *)&v103[16 * v14 + 24];
          sub_100017950((void **)(v105 + 8 * v107), (id *)(v105 + 8 * *(_QWORD *)&v103[16 * v14 + 16]), v105 + 8 * v108, v119);
          if (v2)
            goto LABEL_95;
          if (v108 < v107)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
            v94 = sub_100022974((uint64_t)v94);
          if (v106 >= *((_QWORD *)v94 + 2))
            goto LABEL_130;
          v109 = &v94[16 * v106 + 32];
          *(_QWORD *)v109 = v107;
          *((_QWORD *)v109 + 1) = v108;
          v110 = *((_QWORD *)v94 + 2);
          if (v14 > v110)
            goto LABEL_131;
          memmove(&v94[16 * v14 + 16], &v94[16 * v14 + 32], 16 * (v110 - v14));
          v103 = v94;
          *((_QWORD *)v94 + 2) = v110 - 1;
          v14 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_96:
      v104 = swift_bridgeObjectRelease(v103);
      *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v104);
      swift_bridgeObjectRelease(v120);
      return;
    }
  }
  else
  {
    v8 = v6 >> 1;
    v9 = sub_1000189D0(0, &qword_10005A100, STUsageDetailItem_ptr);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v119 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v120 = v10;
  }
  v115 = v7;
  v12 = 0;
  v13 = *a1;
  v112 = *a1 - 8;
  v113 = *a1 + 16;
  v11 = (char *)_swiftEmptyArrayStorage;
  v116 = v4;
  while (1)
  {
    v15 = v12++;
    v117 = v15;
    if (v12 < v4)
    {
      v16 = *(void **)(v13 + 8 * v15);
      v17 = *(id *)(v13 + 8 * v12);
      v18 = v16;
      objc_msgSend(v17, "quantity");
      v20 = v19;
      objc_msgSend(v18, "quantity");
      v22 = v21;

      v12 = v15 + 2;
      if (v15 + 2 < v4)
      {
        v23 = (id *)(v113 + 8 * v15);
        while (1)
        {
          v24 = *(v23 - 1);
          v25 = *v23;
          v26 = v24;
          objc_msgSend(v25, "quantity");
          v28 = v27;
          objc_msgSend(v26, "quantity");
          v30 = v29;

          if (v22 < v20 == v30 >= v28)
            break;
          ++v12;
          ++v23;
          if (v4 == v12)
          {
            v12 = v4;
            break;
          }
        }
        v15 = v117;
      }
      if (v22 < v20)
      {
        if (v12 < v15)
          goto LABEL_134;
        if (v15 < v12)
        {
          v31 = (uint64_t *)(v112 + 8 * v12);
          v32 = v12;
          v33 = v15;
          v34 = (uint64_t *)(v13 + 8 * v15);
          do
          {
            if (v33 != --v32)
            {
              if (!v13)
                goto LABEL_139;
              v35 = *v34;
              *v34 = *v31;
              *v31 = v35;
            }
            ++v33;
            --v31;
            ++v34;
          }
          while (v33 < v32);
        }
      }
    }
    if (v12 >= v4)
      goto LABEL_47;
    if (__OFSUB__(v12, v15))
      goto LABEL_132;
    if (v12 - v15 >= v115)
      goto LABEL_47;
    if (__OFADD__(v15, v115))
      goto LABEL_135;
    v36 = v15 + v115 >= v4 ? v4 : v15 + v115;
    if (v36 < v15)
      break;
    if (v12 != v36)
    {
      v114 = v11;
      v37 = v112 + 8 * v12;
      do
      {
        v38 = *(void **)(v13 + 8 * v12);
        v39 = v15;
        v40 = v37;
        do
        {
          v41 = *(void **)v40;
          v42 = v38;
          v43 = v41;
          objc_msgSend(v42, "quantity");
          v45 = v44;
          objc_msgSend(v43, "quantity");
          v47 = v46;

          if (v47 >= v45)
            break;
          if (!v13)
            goto LABEL_137;
          v48 = *(void **)v40;
          v38 = *(void **)(v40 + 8);
          *(_QWORD *)v40 = v38;
          *(_QWORD *)(v40 + 8) = v48;
          v40 -= 8;
          ++v39;
        }
        while (v12 != v39);
        ++v12;
        v37 += 8;
        v15 = v117;
      }
      while (v12 != v36);
      v12 = v36;
      v11 = v114;
    }
LABEL_47:
    if (v12 < v15)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100022718(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v50 = *((_QWORD *)v11 + 2);
    v49 = *((_QWORD *)v11 + 3);
    v14 = v50 + 1;
    if (v50 >= v49 >> 1)
      v11 = sub_100022718((char *)(v49 > 1), v50 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v14;
    v51 = v11 + 32;
    v52 = &v11[16 * v50 + 32];
    *(_QWORD *)v52 = v15;
    *((_QWORD *)v52 + 1) = v12;
    if (v50)
    {
      v118 = v12;
      while (1)
      {
        v53 = v14 - 1;
        if (v14 >= 4)
        {
          v58 = &v51[16 * v14];
          v59 = *((_QWORD *)v58 - 8);
          v60 = *((_QWORD *)v58 - 7);
          v64 = __OFSUB__(v60, v59);
          v61 = v60 - v59;
          if (v64)
            goto LABEL_116;
          v63 = *((_QWORD *)v58 - 6);
          v62 = *((_QWORD *)v58 - 5);
          v64 = __OFSUB__(v62, v63);
          v56 = v62 - v63;
          v57 = v64;
          if (v64)
            goto LABEL_117;
          v65 = v14 - 2;
          v66 = &v51[16 * v14 - 32];
          v68 = *(_QWORD *)v66;
          v67 = *((_QWORD *)v66 + 1);
          v64 = __OFSUB__(v67, v68);
          v69 = v67 - v68;
          if (v64)
            goto LABEL_119;
          v64 = __OFADD__(v56, v69);
          v70 = v56 + v69;
          if (v64)
            goto LABEL_122;
          if (v70 >= v61)
          {
            v88 = &v51[16 * v53];
            v90 = *(_QWORD *)v88;
            v89 = *((_QWORD *)v88 + 1);
            v64 = __OFSUB__(v89, v90);
            v91 = v89 - v90;
            if (v64)
              goto LABEL_126;
            v81 = v56 < v91;
            goto LABEL_85;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v82 = *((_QWORD *)v11 + 4);
            v83 = *((_QWORD *)v11 + 5);
            v64 = __OFSUB__(v83, v82);
            v75 = v83 - v82;
            v76 = v64;
            goto LABEL_79;
          }
          v55 = *((_QWORD *)v11 + 4);
          v54 = *((_QWORD *)v11 + 5);
          v64 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          v57 = v64;
        }
        if ((v57 & 1) != 0)
          goto LABEL_118;
        v65 = v14 - 2;
        v71 = &v51[16 * v14 - 32];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v74 = __OFSUB__(v72, v73);
        v75 = v72 - v73;
        v76 = v74;
        if (v74)
          goto LABEL_121;
        v77 = &v51[16 * v53];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v64 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v64)
          goto LABEL_124;
        if (__OFADD__(v75, v80))
          goto LABEL_125;
        if (v75 + v80 >= v56)
        {
          v81 = v56 < v80;
LABEL_85:
          if (v81)
            v53 = v65;
          goto LABEL_87;
        }
LABEL_79:
        if ((v76 & 1) != 0)
          goto LABEL_120;
        v84 = &v51[16 * v53];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v64 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v64)
          goto LABEL_123;
        if (v87 < v75)
          goto LABEL_14;
LABEL_87:
        v92 = v53 - 1;
        if (v53 - 1 >= v14)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        v93 = v13;
        if (!v13)
          goto LABEL_138;
        v94 = v11;
        v95 = &v51[16 * v92];
        v96 = *(_QWORD *)v95;
        v97 = v51;
        v98 = v53;
        v99 = &v51[16 * v53];
        v100 = *((_QWORD *)v99 + 1);
        v101 = v93;
        sub_100017950((void **)(v93 + 8 * *(_QWORD *)v95), (id *)(v93 + 8 * *(_QWORD *)v99), v93 + 8 * v100, v119);
        if (v1)
        {
LABEL_95:
          v103 = v94;
          goto LABEL_96;
        }
        if (v100 < v96)
          goto LABEL_113;
        if (v98 > *((_QWORD *)v94 + 2))
          goto LABEL_114;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v97[16 * v92 + 8] = v100;
        v102 = *((_QWORD *)v94 + 2);
        if (v98 >= v102)
          goto LABEL_115;
        v11 = v94;
        v14 = v102 - 1;
        memmove(v99, v99 + 16, 16 * (v102 - 1 - v98));
        v51 = v97;
        *((_QWORD *)v94 + 2) = v102 - 1;
        v13 = v101;
        v12 = v118;
        if (v102 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v4 = v116;
    if (v12 >= v116)
    {
      v2 = v1;
      goto LABEL_99;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_10001785C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  float v14;
  float v15;
  float v16;
  float v17;
  void *v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(void **)(v6 + 8 * v4);
    v9 = a1;
    v10 = v7;
    while (1)
    {
      v11 = *(void **)v10;
      v12 = v8;
      v13 = v11;
      objc_msgSend(v12, "quantity");
      v15 = v14;
      objc_msgSend(v13, "quantity");
      v17 = v16;

      if (v17 >= v15)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v18 = *(void **)v10;
      v8 = *(void **)(v10 + 8);
      *(_QWORD *)v10 = v8;
      *(_QWORD *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_100017950(void **__src, id *a2, unint64_t a3, void **a4)
{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  id *v23;
  id *v24;
  void **v25;
  id *v26;
  id *v27;
  void *v28;
  id v29;
  id v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t result;
  char *v37;
  void **v38;
  id *v39;

  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v39 = __src;
  v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_46;
    if (a4 != a2 || &a2[v12] <= a4)
      memmove(a4, a2, 8 * v12);
    v23 = &a4[v12];
    v37 = (char *)v23;
    v39 = v5;
    if (v6 >= v5 || v10 < 8)
      goto LABEL_45;
    v24 = (id *)(a3 - 8);
    v25 = v5;
    while (1)
    {
      v26 = v24 + 1;
      v27 = v23 - 1;
      v28 = *--v25;
      v29 = *(v23 - 1);
      v30 = v28;
      objc_msgSend(v29, "quantity");
      v32 = v31;
      objc_msgSend(v30, "quantity");
      v34 = v33;

      if (v34 < v32)
        break;
      v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        *v24 = *v27;
        v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23)
        *v24 = *v27;
      v25 = v5;
      --v23;
      if (v5 <= v6)
        goto LABEL_45;
LABEL_44:
      --v24;
      v5 = v25;
      if (v23 <= a4)
        goto LABEL_45;
    }
    if (v26 != v5 || v24 >= v5)
      *v24 = *v25;
    v39 = v25;
LABEL_43:
    if (v25 <= v6)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4)
      memmove(a4, __src, 8 * v9);
    v13 = &a4[v9];
    v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v14 = a4;
      do
      {
        v15 = *v14;
        v16 = *v5;
        v17 = v15;
        objc_msgSend(v16, "quantity");
        v19 = v18;
        objc_msgSend(v17, "quantity");
        v21 = v20;

        if (v21 >= v19)
        {
          if (v6 != v14)
            *v6 = *v14;
          v38 = ++v14;
          v22 = v5;
        }
        else
        {
          v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5)
            *v6 = *v5;
        }
        ++v6;
        if (v14 >= v13)
          break;
        v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      v39 = v6;
    }
LABEL_45:
    sub_100022810((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unsigned __int8 *sub_100017C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_100017FD8(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_100017D5C(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_100017D5C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100017FD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_100018054(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_100018054(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_100018198(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100016060(v12, 0);
      v5 = sub_100018284((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_100018198(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1000160C4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1000160C4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_100018284(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1000160C4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1000160C4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100018494(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000184B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000184F0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100018508()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10001853C(uint64_t a1)
{
  uint64_t v1;

  sub_1000149A4(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100018548()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001856C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for UsageData(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(*v7);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[2]);
  swift_bridgeObjectRelease(v7[3]);
  v8 = (char *)v7 + *(int *)(v1 + 36);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 10, v5);
}

uint64_t sub_10001862C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;

  v1 = *(_QWORD *)(type metadata accessor for UsageData(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + v2;
  v4 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v5 = *(_QWORD *)v4;
  v6 = *(unsigned __int8 *)(v4 + 8);
  if (*(_BYTE *)(v4 + 9))
    v7 = 256;
  else
    v7 = 0;
  return sub_100014C90(*(void (**)(char *, void *, uint64_t, _QWORD))(v0 + 16), *(_QWORD *)(v0 + 24), v3, v5, v7 | v6);
}

uint64_t sub_10001868C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000186B8(void *a1)
{
  uint64_t v1;

  sub_100014C30(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1000186C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100009F64(&qword_10005A120, &qword_10005A108, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100003C84(&qword_10005A108);
          v13 = sub_1000188DC(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000189D0(0, &qword_10005A100, STUsageDetailItem_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_1000188DC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10001895C(v6, a2, a3);
  return sub_100018930;
}

void sub_100018930(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_10001895C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000189C8;
  }
  __break(1u);
  return result;
}

void sub_1000189C8(id *a1)
{

}

uint64_t sub_1000189D0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_100018A08()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_100018A10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100018A34(uint64_t a1)
{
  uint64_t v1;

  return sub_100006CC0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100018A3C(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v15 = v2;
  else
    v15 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v15);
  result = swift_bridgeObjectRelease(v2);
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(v2);
    if (v10 < 0)
      goto LABEL_37;
    swift_bridgeObjectRetain(v2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(v2);
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1000189D0(0, &qword_10005A100, STUsageDetailItem_ptr);
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      v11 = v12;
    }
    while (v7 != v12);
  }
  if (v4)
  {
    if (v2 < 0)
      v14 = v2;
    else
      v14 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v13 = _CocoaArrayWrapper.subscript.getter(0, v7, v14);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
  return v13;
}

uint64_t sub_100018BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10001637C(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

_QWORD *sub_100018C78(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v1 = a1;
  if ((a1 & 0x8000000000000000) == 0 && (a1 & 0x4000000000000000) == 0)
  {
    v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    goto LABEL_4;
  }
LABEL_42:
  v39 = swift_bridgeObjectRetain(v1);
  v2 = (unint64_t)sub_100016DF8(v39);
  swift_bridgeObjectRelease(v1);
LABEL_4:
  v41 = v2;
  sub_10001707C((uint64_t *)&v41);
  v3 = v41;
  if ((v41 & 0x8000000000000000) != 0)
    v1 = 1;
  else
    v1 = (v41 >> 62) & 1;
  if ((_DWORD)v1 != 1)
  {
    if (*(uint64_t *)(v41 + 16) >= 3)
      v4 = 3;
    else
      v4 = *(_QWORD *)(v41 + 16);
    goto LABEL_11;
  }
  while (1)
  {
    v32 = swift_bridgeObjectRetain(v3);
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_release(v3);
    v34 = swift_bridgeObjectRetain(v3);
    v35 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_release(v3);
    if (v35 < 0)
      goto LABEL_45;
    if (v33 >= 3)
      v36 = 3;
    else
      v36 = v33;
    if (v33 >= 0)
      v4 = v36;
    else
      v4 = 3;
    v37 = swift_bridgeObjectRetain(v3);
    v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_release(v3);
    if (v38 < v4)
    {
      __break(1u);
      goto LABEL_42;
    }
LABEL_11:
    if ((v3 & 0xC000000000000001) != 0 && v4)
    {
      sub_1000189D0(0, &qword_10005A100, STUsageDetailItem_ptr);
      v5 = 0;
      do
      {
        v6 = v5 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v5);
        v5 = v6;
      }
      while (v4 != v6);
    }
    if ((_DWORD)v1)
    {
      swift_bridgeObjectRetain(v3);
      v7 = _CocoaArrayWrapper.subscript.getter(0, v4, v3);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      swift_release_n(v3, 2);
      v4 = v13 >> 1;
      v3 = v7;
    }
    else
    {
      v11 = 0;
      v9 = v3 + 32;
    }
    v14 = v4 - v11;
    if (__OFSUB__(v4, v11))
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      result = (_QWORD *)swift_release(v3);
      __break(1u);
      return result;
    }
    if (!v14)
      break;
    v41 = (unint64_t)_swiftEmptyArrayStorage;
    sub_100021D10(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
      goto LABEL_44;
    v40 = v3;
    if (v4 <= v11)
      v15 = v11;
    else
      v15 = v4;
    v16 = v41;
    v17 = v15 - v11;
    v1 = v9 + 8 * v11;
    while (v17)
    {
      v18 = *(id *)v1;
      v19 = objc_msgSend(v18, "localizedDisplayName");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      objc_msgSend(v18, "quantity");
      v24 = v23;
      v25 = objc_msgSend(v18, "identifier");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v3 = v27;

      v41 = v16;
      v29 = *(_QWORD *)(v16 + 16);
      v28 = *(_QWORD *)(v16 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_100021D10(v28 > 1, v29 + 1, 1);
        v16 = v41;
      }
      *(_QWORD *)(v16 + 16) = v29 + 1;
      v30 = v16 + 48 * v29;
      *(_QWORD *)(v30 + 32) = v20;
      *(_QWORD *)(v30 + 40) = v22;
      *(double *)(v30 + 48) = v24;
      *(_QWORD *)(v30 + 56) = v26;
      *(_QWORD *)(v30 + 64) = v3;
      *(_QWORD *)(v30 + 72) = 3;
      --v17;
      v1 += 8;
      if (!--v14)
      {
        swift_unknownObjectRelease(v40);
        return (_QWORD *)v16;
      }
    }
    __break(1u);
  }
  swift_unknownObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

void sub_100018F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char **v18;
  id v19;
  id v20;
  char **v21;
  id v22;
  float v23;
  float v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = sub_10000E6C0(a2);
  v6 = v5 >> 1;
  v7 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v7)
  {
    swift_unknownObjectRelease(v2);
    return;
  }
  v8 = v3;
  v9 = v4;
  v32 = v2;
  sub_100021D2C(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    if (v9 <= v6)
      v10 = v6;
    else
      v10 = v9;
    v11 = v10 - v9;
    v12 = (id *)(v8 + 8 * v9);
    while (v11)
    {
      v13 = *v12;
      v14 = objc_msgSend(v13, "identifier");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v33 = v16;
      v34 = v15;

      v17 = objc_msgSend(v13, "type");
      v18 = &selRef_darkColorsMonogram;
      if (v17 == (id)1)
        v18 = &selRef_iconImage;
      v19 = objc_msgSend(v13, *v18, v32);
      v20 = objc_msgSend(v13, "type");
      v21 = &selRef_lightColorsMonogram;
      if (v20 == (id)1)
        v21 = &selRef_iconImage;
      v22 = objc_msgSend(v13, *v21);
      objc_msgSend(v13, "quantity");
      v24 = v23;
      v25 = objc_msgSend(v13, "localizedDisplayName");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v30 = _swiftEmptyArrayStorage[2];
      v29 = _swiftEmptyArrayStorage[3];
      if (v30 >= v29 >> 1)
        sub_100021D2C(v29 > 1, v30 + 1, 1);
      _swiftEmptyArrayStorage[2] = v30 + 1;
      v31 = (double *)&_swiftEmptyArrayStorage[7 * v30];
      *((_QWORD *)v31 + 4) = v34;
      *((_QWORD *)v31 + 5) = v33;
      *((_QWORD *)v31 + 6) = v19;
      *((_QWORD *)v31 + 7) = v22;
      v31[8] = v24;
      *((_QWORD *)v31 + 9) = v26;
      *((_QWORD *)v31 + 10) = v28;
      --v11;
      ++v12;
      if (!--v7)
      {
        swift_unknownObjectRelease(v32);
        return;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1000191C8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = result;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v6 = -v5;
      if (!__OFSUB__(0, v5))
        goto LABEL_4;
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
  if (v2 < 0)
    v17 = v2;
  else
    v17 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  result = swift_bridgeObjectRelease(v2);
  v6 = -v5;
  if (__OFSUB__(0, v5))
    goto LABEL_44;
LABEL_4:
  v7 = -v3;
  if (v6 > 0 || v6 <= v7)
  {
    v8 = v5 - v3;
    if (__OFADD__(v5, v7))
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v5 < v8)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (!v4)
    {
LABEL_8:
      v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_16;
    }
  }
  else
  {
    if (v5 < 0)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v8 = 0;
    if (!v4)
      goto LABEL_8;
  }
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v9 = _CocoaArrayWrapper.endIndex.getter(v10);
  result = swift_bridgeObjectRelease(v2);
LABEL_16:
  if (v9 < v8)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v8 < 0)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v4)
  {
    if (v2 < 0)
      v12 = v2;
    else
      v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v11 = _CocoaArrayWrapper.endIndex.getter(v12);
    result = swift_bridgeObjectRelease(v2);
  }
  else
  {
    v11 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 < v5)
    goto LABEL_47;
  if (v5 < 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if ((v2 & 0xC000000000000001) == 0 || v8 == v5)
    goto LABEL_31;
  if (v8 >= (unint64_t)v5)
  {
LABEL_52:
    __break(1u);
    return result;
  }
  sub_1000189D0(0, &qword_10005A100, STUsageDetailItem_ptr);
  v13 = v8;
  do
  {
    v14 = v13 + 1;
    _ArrayBuffer._typeCheckSlowPath(_:)(v13);
    v13 = v14;
  }
  while (v5 != v14);
LABEL_31:
  if (v4)
  {
    if (v2 < 0)
      v16 = v2;
    else
      v16 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v15 = _CocoaArrayWrapper.subscript.getter(v8, v5, v16);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v15 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
  }
  return v15;
}

uint64_t sub_1000193E0(unint64_t a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  float v17;
  float v18;

  v4 = sub_10001D320(a2, 0.0);
  swift_bridgeObjectRetain(a1);
  v5 = sub_1000191C8(a2, a1);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  result = swift_bridgeObjectRelease(a1);
  v13 = (v11 >> 1) - v9;
  if (v11 >> 1 == v9)
  {
LABEL_2:
    swift_unknownObjectRelease(v5);
    return (uint64_t)v4;
  }
  else
  {
    if ((uint64_t)(v11 >> 1) > v9)
    {
      v14 = 0;
      v15 = v7 + 8 * v9;
      while (1)
      {
        v16 = *(id *)(v15 + 8 * v14);
        objc_msgSend(v16, "quantity");
        v18 = v17;
        result = swift_isUniquelyReferenced_nonNull_native(v4);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_100022988(v4);
          v4 = (char *)result;
        }
        if (v14 >= *((_QWORD *)v4 + 2))
          break;
        *(double *)&v4[8 * v14 + 32] = v18;

        if (v13 == ++v14)
          goto LABEL_2;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000194F0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  double v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __n128 v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  id v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t i;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  double *v145;
  double v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t result;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  size_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char v186[8];
  uint64_t v187[2];
  uint64_t v188;
  _QWORD *v189;

  v156 = a2;
  v176 = a1;
  v185 = type metadata accessor for HourlyUsage(0);
  v181 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v168 = (uint64_t)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100003C84(&qword_100059EA0);
  v164 = *(_QWORD *)(v165 - 8);
  v5 = __chkstk_darwin(v165);
  v163 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v162 = (char *)&v155 - v7;
  v8 = type metadata accessor for DateInterval(0);
  v183 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v184 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v169 = (char *)&v155 - v12;
  __chkstk_darwin(v11);
  v167 = (char *)&v155 - v13;
  v178.n128_u64[0] = sub_100003C84(&qword_10005A130);
  __chkstk_darwin(v178.n128_u64[0]);
  v15 = (char *)&v155 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = (char *)sub_100003C84(&qword_10005A138);
  __chkstk_darwin(v177);
  v170 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100003C84(&qword_10005A140);
  v17 = __chkstk_darwin(v179);
  v19 = (char *)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v155 - v20;
  v22 = type metadata accessor for Date(0);
  v172 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v155 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v155 - v26;
  *(_QWORD *)&v159 = sub_100003C84(&qword_10005A148);
  v28 = __chkstk_darwin(v159);
  v173 = (char *)&v155 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v174 = (uint64_t)&v155 - v30;
  v31 = type metadata accessor for DateBins(0);
  v175 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v155 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = _swiftEmptyArrayStorage;
  v35 = DateInterval.start.getter(v32);
  v180 = a3;
  DateInterval.end.getter(v35);
  v36 = sub_10000DF58(&qword_100059ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v27, v25, v22, v36) & 1) != 0)
  {
    v182 = v8;
    v157 = v34;
    v37 = v19;
    v38 = v179;
    v39 = &v21[*(int *)(v179 + 48)];
    v171 = v31;
    v40 = v172;
    v41 = *(void (**)(char *, char *, uint64_t))(v172 + 32);
    v160 = v27;
    v41(v21, v27, v22);
    v158 = v39;
    v161 = v25;
    v41(v39, v25, v22);
    v42 = &v37[*(int *)(v38 + 48)];
    v43 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v43(v37, v21, v22);
    v43(v42, v39, v22);
    v44 = (uint64_t)v173;
    v41(v173, v37, v22);
    v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v42, v22);
    v46 = &v37[*(int *)(v38 + 48)];
    v41(v37, v21, v22);
    v41(v46, v158, v22);
    v41((char *)(v44 + *(int *)(v159 + 36)), v46, v22);
    v47 = v171;
    v45(v37, v22);
    v48 = v174;
    sub_10001A708(v44, v174);
    v49 = v157;
    DateBins.init(timeInterval:range:)(v48, 3600.0);
    v50 = sub_10000DF58(&qword_10005A150, (uint64_t (*)(uint64_t))&type metadata accessor for DateBins, (uint64_t)&protocol conformance descriptor for DateBins);
    dispatch thunk of Collection.startIndex.getter(&v188, v47, v50);
    dispatch thunk of Collection.endIndex.getter(v187, v47, v50);
    v51 = v49;
    v52 = dispatch thunk of Collection.distance(from:to:)(&v188, v187, v47, v50);
    v53 = sub_1000193E0(v176, v52);
    v176 = *(_QWORD *)(v53 + 16);
    v179 = v52;
    if (v176)
    {
      v55 = 0;
      v172 = v53 + 32;
      *(_QWORD *)&v54 = 134218498;
      v159 = v54;
      v158 = (char *)&type metadata for Any + 8;
      v56 = (uint64_t)v170;
      v174 = v50;
      v166 = v15;
      v173 = (char *)v53;
      while (v55 < *(_QWORD *)(v53 + 16))
      {
        v57 = *(double *)(v172 + 8 * v55);
        (*(void (**)(uint64_t, char *, uint64_t))(v175 + 16))(v56, v51, v47);
        v58 = v177;
        v59 = (uint64_t *)(v56 + *((int *)v177 + 9));
        dispatch thunk of Collection.startIndex.getter(v59, v47, v50);
        dispatch thunk of Collection.endIndex.getter((_QWORD *)(v56 + *((int *)v58 + 10)), v47, v50);
        sub_100003D00(v56, (uint64_t)v15, &qword_10005A138);
        v60 = *v59;
        v61 = &v15[*(int *)(v178.n128_u64[0] + 36)];
        *(_QWORD *)v61 = v60;
        v62 = *(_QWORD *)&v15[*((int *)v58 + 10)];
        if (v60 == v62)
        {
LABEL_11:
          sub_100003D44((uint64_t)v15, &qword_10005A130);
          sub_100003D44(v56, &qword_10005A138);
          if (qword_1000598F8 != -1)
            swift_once(&qword_1000598F8, sub_10000E4D8);
          v63 = type metadata accessor for Logger(0);
          sub_100006BC8(v63, (uint64_t)qword_100059F00);
          v64 = v182;
          v65 = v183;
          v66 = v169;
          v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v183 + 16))(v169, v180, v182);
          v68 = Logger.logObject.getter(v67);
          v69 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v68, v69))
          {
            v70 = v66;
            v71 = swift_slowAlloc(32, -1);
            v72 = swift_slowAlloc(32, -1);
            v188 = v72;
            *(_DWORD *)v71 = v159;
            *(_QWORD *)(v71 + 4) = v55;
            *(_WORD *)(v71 + 12) = 2048;
            *(_QWORD *)(v71 + 14) = v179;
            *(_WORD *)(v71 + 22) = 2080;
            v73 = sub_10000DF58(&qword_10005A158, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
            v74 = dispatch thunk of CustomStringConvertible.description.getter(v64, v73);
            v76 = v75;
            *(_QWORD *)(v71 + 24) = sub_100015BD0(v74, v75, &v188);
            swift_bridgeObjectRelease(v76);
            v77 = v70;
            v47 = v171;
            (*(void (**)(char *, uint64_t))(v65 + 8))(v77, v64);
            _os_log_impl((void *)&_mh_execute_header, v68, v69, "screenOnTime hourIndex %ld not in range. numberOfHours: %ld graphInterval %s", (uint8_t *)v71, 0x20u);
            swift_arrayDestroy(v72, 1, v158);
            swift_slowDealloc(v72, -1, -1);
            swift_slowDealloc(v71, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v64);
          }

          v15 = v166;
          v56 = (uint64_t)v170;
          v50 = v174;
        }
        else
        {
          while (1)
          {
            dispatch thunk of Collection.formIndex(after:)(v61, v47, v50);
            if (v60 == v55)
              break;
            v60 = *(_QWORD *)v61;
            if (*(_QWORD *)v61 == v62)
              goto LABEL_11;
          }
          sub_100003D44((uint64_t)v15, &qword_10005A130);
          sub_100003D44(v56, &qword_10005A138);
          if (v57 > 3600.0)
            v57 = 3600.0;
          v78 = v162;
          DateBins.subscript.getter(v55);
          v79 = v51;
          v80 = v160;
          v81 = v165;
          ChartBinRange.lowerBound.getter(v165);
          v82 = *(void (**)(char *, uint64_t))(v164 + 8);
          v82(v78, v81);
          v83 = v163;
          DateBins.subscript.getter(v55);
          v84 = v161;
          ChartBinRange.upperBound.getter(v81);
          v82(v83, v81);
          v85 = v167;
          v86 = v80;
          v51 = v79;
          DateInterval.init(start:end:)(v86, v84);
          v87 = v168;
          (*(void (**)(uint64_t, char *, uint64_t))(v183 + 16))(v168, v85, v182);
          v88 = v185;
          DateBins.subscript.getter(v55);
          *(double *)(v87 + *(int *)(v88 + 20)) = v57;
          *(_QWORD *)(v87 + *(int *)(v88 + 28)) = _swiftEmptyArrayStorage;
          v89 = (unint64_t)v189;
          if ((swift_isUniquelyReferenced_nonNull_native(v189) & 1) == 0)
            v89 = sub_100021120(0, *(_QWORD *)(v89 + 16) + 1, 1, v89);
          v91 = *(_QWORD *)(v89 + 16);
          v90 = *(_QWORD *)(v89 + 24);
          v47 = v171;
          v50 = v174;
          if (v91 >= v90 >> 1)
            v89 = sub_100021120(v90 > 1, v91 + 1, 1, v89);
          *(_QWORD *)(v89 + 16) = v91 + 1;
          sub_10000DE24(v168, v89+ ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80))+ *(_QWORD *)(v181 + 72) * v91, type metadata accessor for HourlyUsage);
          v189 = (_QWORD *)v89;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v167, v182);
        }
        ++v55;
        v53 = (uint64_t)v173;
        if (v55 == v176)
        {
          swift_bridgeObjectRelease(v173);
          v52 = v179;
          goto LABEL_24;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease(v53);
LABEL_24:
      v174 = *(_QWORD *)(v156 + 16);
      if (v174)
      {
        v173 = (char *)(v156 + 32);
        v172 = 8 * v52;
        v92 = swift_bridgeObjectRetain(v156);
        v93 = 0;
        v92.n128_u64[0] = 134218754;
        v178 = v92;
        v177 = (char *)&type metadata for Any + 8;
        while ((v52 & 0x8000000000000000) == 0)
        {
          v94 = *(_QWORD *)&v173[8 * v93];
          swift_bridgeObjectRetain(v94);
          v176 = v93;
          if (v52)
          {
            v95 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v52, &type metadata for Double);
            v95[2] = v52;
            bzero(v95 + 4, v172);
          }
          else
          {
            v95 = _swiftEmptyArrayStorage;
          }
          swift_bridgeObjectRetain(v94);
          v96 = sub_1000191C8(v52, v94);
          v98 = v97;
          v100 = v99;
          v102 = v101;
          swift_bridgeObjectRelease(v94);
          v103 = (v102 >> 1) - v100;
          if (v102 >> 1 != v100)
          {
            if ((uint64_t)(v102 >> 1) <= v100)
              goto LABEL_86;
            v104 = 0;
            v105 = v98 + 8 * v100;
            do
            {
              v106 = *(id *)(v105 + 8 * v104);
              objc_msgSend(v106, "quantity");
              if (v104 >= v95[2])
                goto LABEL_82;
              *(double *)&v95[v104 + 4] = v107;

            }
            while (v103 != ++v104);
          }
          swift_bridgeObjectRelease(v94);
          swift_unknownObjectRelease(v96);
          v108 = v95[2];
          v109 = v183;
          v110 = v184;
          if (v108)
          {
            swift_beginAccess(&v189, &v188, 0, 0);
            for (i = 0; v108 != i; ++i)
            {
              if ((int64_t)i >= v189[2])
              {
                if (qword_1000598F8 != -1)
                  swift_once(&qword_1000598F8, sub_10000E4D8);
                v120 = type metadata accessor for Logger(0);
                sub_100006BC8(v120, (uint64_t)qword_100059F00);
                v121 = v182;
                v122 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 16))(v110, v180, v182);
                v123 = Logger.logObject.getter(v122);
                v124 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v123, v124))
                {
                  v125 = swift_slowAlloc(42, -1);
                  v126 = swift_slowAlloc(32, -1);
                  v187[0] = v126;
                  *(_DWORD *)v125 = v178.n128_u32[0];
                  *(_QWORD *)(v125 + 4) = i;
                  *(_WORD *)(v125 + 12) = 2048;
                  *(_QWORD *)(v125 + 14) = v179;
                  *(_WORD *)(v125 + 22) = 2048;
                  *(_QWORD *)(v125 + 24) = v189[2];
                  *(_WORD *)(v125 + 32) = 2080;
                  v127 = sub_10000DF58(&qword_10005A158, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
                  v128 = dispatch thunk of CustomStringConvertible.description.getter(v121, v127);
                  v130 = v129;
                  *(_QWORD *)(v125 + 34) = sub_100015BD0(v128, v129, v187);
                  swift_bridgeObjectRelease(v130);
                  (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v121);
                  _os_log_impl((void *)&_mh_execute_header, v123, v124, "categoryRatiosPerHour hourIndex %ld not in range. numberOfHours: %ld result.count: %ld graphInterval: %s", (uint8_t *)v125, 0x2Au);
                  swift_arrayDestroy(v126, 1, v177);
                  swift_slowDealloc(v126, -1, -1);
                  v131 = v125;
                  v109 = v183;
                  v110 = v184;
                  swift_slowDealloc(v131, -1, -1);
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v121);
                }

              }
              else
              {
                v112 = v95[i + 4];
                swift_beginAccess(&v189, v187, 33, 0);
                v113 = (unint64_t)v189;
                if ((swift_isUniquelyReferenced_nonNull_native(v189) & 1) == 0)
                  v113 = sub_10002299C(v113);
                if (i >= *(_QWORD *)(v113 + 16))
                  goto LABEL_83;
                v114 = v113
                     + ((*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80))
                     + *(_QWORD *)(v181 + 72) * i;
                v115 = *(int *)(v185 + 28);
                v116 = *(_QWORD **)(v114 + v115);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v116);
                *(_QWORD *)(v114 + v115) = v116;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v116 = sub_100021014(0, v116[2] + 1, 1, v116);
                  *(_QWORD *)(v114 + v115) = v116;
                }
                v119 = v116[2];
                v118 = v116[3];
                if (v119 >= v118 >> 1)
                {
                  v116 = sub_100021014((_QWORD *)(v118 > 1), v119 + 1, 1, v116);
                  *(_QWORD *)(v114 + v115) = v116;
                }
                v116[2] = v119 + 1;
                v116[v119 + 4] = v112;
                v189 = (_QWORD *)v113;
                swift_endAccess(v187);
                v109 = v183;
                v110 = v184;
              }
            }
          }
          v93 = v176 + 1;
          swift_bridgeObjectRelease(v95);
          v52 = v179;
          if (v93 == v174)
          {
            swift_bridgeObjectRelease(v156);
            goto LABEL_55;
          }
        }
        goto LABEL_88;
      }
LABEL_55:
      swift_beginAccess(&v189, v187, 0, 0);
      v132 = (unint64_t)v189;
      v184 = (char *)v189[2];
      if (!v184)
      {
LABEL_79:
        (*(void (**)(char *, uint64_t))(v175 + 8))(v157, v171);
        return (uint64_t)v189;
      }
      v133 = 0;
      while ((unint64_t)v133 < *(_QWORD *)(v132 + 16))
      {
        v134 = v133 + 1;
        v135 = (*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80);
        v136 = *(_QWORD *)(v181 + 72) * (_QWORD)v133;
        while (1)
        {
          v137 = *(_QWORD *)(v132 + v135 + v136 + *(int *)(v185 + 28));
          v138 = *(_QWORD *)(v137 + 16);
          if (v138 > 2)
            break;
          swift_beginAccess(&v189, v186, 33, 0);
          v132 = (unint64_t)v189;
          if ((swift_isUniquelyReferenced_nonNull_native(v189) & 1) == 0)
            v132 = sub_10002299C(v132);
          if ((unint64_t)v133 >= *(_QWORD *)(v132 + 16))
            goto LABEL_81;
          v139 = v132 + v135 + v136;
          v140 = *(int *)(v185 + 28);
          v141 = *(_QWORD **)(v139 + v140);
          v142 = swift_isUniquelyReferenced_nonNull_native(v141);
          *(_QWORD *)(v139 + v140) = v141;
          if ((v142 & 1) == 0)
          {
            v141 = sub_100021014(0, v141[2] + 1, 1, v141);
            *(_QWORD *)(v139 + v140) = v141;
          }
          v144 = v141[2];
          v143 = v141[3];
          if (v144 >= v143 >> 1)
          {
            v141 = sub_100021014((_QWORD *)(v143 > 1), v144 + 1, 1, v141);
            *(_QWORD *)(v139 + v140) = v141;
          }
          v141[2] = v144 + 1;
          v141[v144 + 4] = 0;
          v189 = (_QWORD *)v132;
          swift_endAccess(v186);
          if ((unint64_t)v133 >= *(_QWORD *)(v132 + 16))
            goto LABEL_80;
        }
        v145 = (double *)(v137 + 32);
        v146 = 0.0;
        do
        {
          v147 = *v145++;
          v146 = v146 + v147;
          --v138;
        }
        while (v138);
        swift_beginAccess(&v189, v186, 33, 0);
        v132 = (unint64_t)v189;
        if ((swift_isUniquelyReferenced_nonNull_native(v189) & 1) == 0)
          v132 = sub_10002299C(v132);
        if ((unint64_t)v133 >= *(_QWORD *)(v132 + 16))
          goto LABEL_85;
        v148 = v132 + v135 + v136;
        v149 = *(int *)(v185 + 28);
        v150 = *(_QWORD **)(v148 + v149);
        v151 = swift_isUniquelyReferenced_nonNull_native(v150);
        *(_QWORD *)(v148 + v149) = v150;
        if ((v151 & 1) == 0)
        {
          v150 = sub_100021014(0, v150[2] + 1, 1, v150);
          *(_QWORD *)(v148 + v149) = v150;
        }
        v153 = v150[2];
        v152 = v150[3];
        if (v153 >= v152 >> 1)
        {
          v150 = sub_100021014((_QWORD *)(v152 > 1), v153 + 1, 1, v150);
          *(_QWORD *)(v148 + v149) = v150;
        }
        v150[2] = v153 + 1;
        *(double *)&v150[v153 + 4] = fmax(1.0 - v146, 0.0);
        v189 = (_QWORD *)v132;
        swift_endAccess(v186);
        v133 = v134;
        if (v134 == v184)
          goto LABEL_79;
      }
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
  }
  __break(1u);
LABEL_88:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001A708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003C84(&qword_10005A148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10001A750(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    v9 = a2[3];
    v8 = a2[4];
    a1[3] = v9;
    a1[4] = v8;
    v10 = *(int *)(a3 + 36);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
  }
  return v5;
}

uint64_t sub_10001A820(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_10001A880(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = *(int *)(a3 + 36);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  return a1;
}

uint64_t *sub_10001A928(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[3];
  v13 = a1[3];
  a1[3] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[4] = a2[4];
  v14 = *(int *)(a3 + 36);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_10001A9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10001AA50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = *(int *)(a3 + 36);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_10001AAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AB00);
}

uint64_t sub_10001AB00(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_10001AB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001AB88);
}

char *sub_10001AB88(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10001ABFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10001ACB8()
{
  unint64_t result;

  result = qword_10005A208;
  if (!qword_10005A208)
  {
    result = swift_getWitnessTable(&unk_1000476D0, &type metadata for OpenScreenTimeDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_10005A208);
  }
  return result;
}

uint64_t sub_10001ACFC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100006BE0(v0, qword_10005D120);
  sub_100006BC8(v0, (uint64_t)qword_10005D120);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000019, 0x8000000100049BA0);
}

_QWORD *sub_10001AD5C@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10001AD94(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void (*sub_10001ADC8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10001AE10;
}

void sub_10001AE10(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_10001AE44()
{
  unint64_t result;

  result = qword_10005A210;
  if (!qword_10005A210)
  {
    result = swift_getWitnessTable(&unk_1000476F8, &type metadata for OpenScreenTimeDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_10005A210);
  }
  return result;
}

unint64_t sub_10001AE8C()
{
  unint64_t result;

  result = qword_10005A218;
  if (!qword_10005A218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_10005A218);
  }
  return result;
}

uint64_t sub_10001AED0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10001B4E4();
  v5 = sub_100006C20();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

unint64_t sub_10001AF34()
{
  unint64_t result;

  result = qword_10005A220;
  if (!qword_10005A220)
  {
    result = swift_getWitnessTable(&unk_100047788, &type metadata for OpenScreenTimeDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_10005A220);
  }
  return result;
}

unint64_t sub_10001AF7C()
{
  unint64_t result;

  result = qword_10005A228;
  if (!qword_10005A228)
  {
    result = swift_getWitnessTable(&unk_1000477B0, &type metadata for OpenScreenTimeDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_10005A228);
  }
  return result;
}

uint64_t sub_10001AFC0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001AE44();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10001B000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100059908 != -1)
    swift_once(&qword_100059908, sub_10001ACFC);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100006BC8(v2, (uint64_t)qword_10005D120);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10001B070()
{
  return 0;
}

uint64_t static STUser.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_10001B08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001B4E4();
  v7 = sub_10001B528();
  v8 = sub_100006C20();
  *v5 = v2;
  v5[1] = sub_10001B118;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10001B118()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v5 = *v1;
  v2 = *(_QWORD *)(v5 + 16);
  v3 = *v1;
  v5 = v3;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_10001B174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10001B1D0();
  *a1 = result;
  return result;
}

uint64_t sub_10001B198(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AE44();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenScreenTimeDeepLinksIntent()
{
  return &type metadata for OpenScreenTimeDeepLinksIntent;
}

uint64_t sub_10001B1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[2];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin(v0);
  v33 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100003C84(&qword_10005A238);
  v3 = __chkstk_darwin(v2);
  v32 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - v5;
  v7 = sub_100003C84(&qword_100059AC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100003C84(&qword_10005A240);
  v24 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x8000000100049B50);
  static Locale.current.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Which target contains the deep links to open", 44, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v9, 1, 1, v20);
  v36[0] = 9;
  v25 = type metadata accessor for IntentDialog(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v6, 1, 1, v25);
  v27 = v32;
  v26(v32, 1, 1, v25);
  v28 = v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, enum case for InputConnectionBehavior.default(_:), v35);
  v29 = sub_100004FB8();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v23, v9, v36, v6, v27, v28, &off_100055A28, v29);
}

unint64_t sub_10001B4E4()
{
  unint64_t result;

  result = qword_10005A248;
  if (!qword_10005A248)
  {
    result = swift_getWitnessTable(&unk_100047600, &type metadata for OpenScreenTimeDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_10005A248);
  }
  return result;
}

unint64_t sub_10001B528()
{
  unint64_t result;

  result = qword_10005A250;
  if (!qword_10005A250)
  {
    result = swift_getWitnessTable(&unk_100047650, &type metadata for OpenScreenTimeDeepLinksIntent);
    atomic_store(result, (unint64_t *)&qword_10005A250);
  }
  return result;
}

uint64_t sub_10001B56C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005A258);
  sub_100006BC8(v0, (uint64_t)qword_10005A258);
  return Logger.init(subsystem:category:)(0xD000000000000021, 0x8000000100049C00, 0x6148746E65746E49, 0xED000072656C646ELL);
}

id sub_10001B6B0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntentHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for IntentHandler()
{
  return objc_opt_self(_TtC25ScreenTimeWidgetExtension13IntentHandler);
}

uint64_t sub_10001B700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD aBlock[5];
  uint64_t v14;
  _QWORD v15[5];

  v2 = type metadata accessor for XPCPersistentStoreManager();
  v15[3] = v2;
  v15[4] = &off_100056E58;
  v15[0] = a1;
  v3 = swift_allocObject(&unk_100056880, 24, 7);
  *(_QWORD *)(v3 + 16) = &_swiftEmptyArrayStorage;
  v4 = *sub_100014EDC(v15, v2);
  swift_retain_n(v3, 2);
  swift_retain(a1);
  sub_10003358C();
  if (*(_BYTE *)(v4 + 24) != 1)
    goto LABEL_4;
  v5 = objc_msgSend(*(id *)(v4 + 16), "newBackgroundContext");
  objc_msgSend(v5, "setAutomaticallyMergesChangesFromParent:", 1);
  objc_msgSend(v5, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
  v6 = (_QWORD *)swift_allocObject(&unk_1000568A8, 40, 7);
  v6[2] = sub_10001C2FC;
  v6[3] = v3;
  v6[4] = v5;
  v7 = swift_allocObject(&unk_1000568D0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10001C350;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_10001C344;
  v14 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100014F20;
  aBlock[3] = &unk_1000568E8;
  v8 = _Block_copy(aBlock);
  v9 = v14;
  swift_retain(v3);
  v10 = v5;
  swift_retain(v7);
  swift_release(v9);
  objc_msgSend(v10, "performBlockAndWait:", v8);

  _Block_release(v8);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v7, "", 109, 78, 36, 1);
  swift_release_n(v3, 2);
  swift_release(v6);
  swift_release(v7);
  if ((v10 & 1) != 0)
  {
    __break(1u);
LABEL_4:
    sub_10003B9D8(v3);
    swift_release_n(v3, 2);
  }
  swift_beginAccess(v3 + 16, aBlock, 0, 0);
  v11 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain(v11);
  swift_release(v3);
  sub_100018494(v15);
  return v11;
}

void *sub_10001B958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v24[5];
  uint64_t v25;
  char v26[24];
  _QWORD v27[5];

  v2 = type metadata accessor for XPCPersistentStoreManager();
  v27[3] = v2;
  v27[4] = &off_100056E58;
  v27[0] = a1;
  v3 = swift_allocObject(&unk_1000567E0, 42, 7);
  *(_QWORD *)(v3 + 16) = 0;
  v4 = v3 + 16;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 40) = 0;
  v5 = *sub_100014EDC(v27, v2);
  swift_retain_n(v3, 2);
  swift_retain(a1);
  sub_10003358C();
  if (*(_BYTE *)(v5 + 24) != 1)
    goto LABEL_4;
  v6 = objc_msgSend(*(id *)(v5 + 16), "newBackgroundContext");
  objc_msgSend(v6, "setAutomaticallyMergesChangesFromParent:", 1);
  objc_msgSend(v6, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
  v7 = (_QWORD *)swift_allocObject(&unk_100056808, 40, 7);
  v7[2] = sub_10001C244;
  v7[3] = v3;
  v7[4] = v6;
  v8 = swift_allocObject(&unk_100056830, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100015A08;
  *(_QWORD *)(v8 + 24) = v7;
  v24[4] = sub_10001C2B8;
  v25 = v8;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = sub_100014F20;
  v24[3] = &unk_100056848;
  v9 = _Block_copy(v24);
  v10 = v25;
  swift_retain(v3);
  v11 = v6;
  swift_retain(v8);
  swift_release(v10);
  objc_msgSend(v11, "performBlockAndWait:", v9);

  _Block_release(v9);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v8, "", 109, 78, 36, 1);
  swift_release_n(v3, 2);
  swift_release(v7);
  swift_release(v8);
  if ((v11 & 1) != 0)
  {
    __break(1u);
LABEL_4:
    v12 = sub_10003B310();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    swift_beginAccess(v4, v24, 1, 0);
    v19 = *(void **)(v3 + 16);
    v20 = *(_QWORD *)(v3 + 24);
    v21 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 16) = v12;
    *(_QWORD *)(v3 + 24) = v14;
    *(_QWORD *)(v3 + 32) = v16;
    *(_WORD *)(v3 + 40) = v18;
    sub_10001C24C(v19, v20, v21);
    swift_release_n(v3, 2);
  }
  swift_beginAccess(v4, v26, 0, 0);
  v22 = *(void **)(v3 + 16);
  sub_10001C278(v22, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
  swift_release(v3);
  sub_100018494(v27);
  return v22;
}

_QWORD *sub_10001BC0C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *ObjCClassFromMetadata;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = type metadata accessor for STUser();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v4);
    v5 = (unsigned __int8 *)(a1 + 57);
    do
    {
      v6 = *(void **)(v5 - 25);
      v7 = *(_QWORD *)(v5 - 9);
      v8 = *v5;
      v5 += 32;
      v9 = v6;
      swift_bridgeObjectRetain(v7);
      v10 = objc_msgSend(v9, "stringValue");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v12 = v11;

      v13 = objc_allocWithZone(ObjCClassFromMetadata);
      swift_bridgeObjectRetain(v7);
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
      v16 = objc_msgSend(v13, "initWithIdentifier:displayString:", v14, v15);

      v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v8);
      objc_msgSend(v16, "setIsRemote:", v17);
      swift_bridgeObjectRelease(v7);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
      specialized ContiguousArray._endMutation()(v19);
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_10001BDC4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  Class isa;
  id v16;

  if (qword_100059910 != -1)
    swift_once(&qword_100059910, sub_10001B56C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100006BC8(v4, (uint64_t)qword_10005A258);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "provide user options collection", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  if (qword_100059928 != -1)
    swift_once(&qword_100059928, sub_100033360);
  v9 = qword_10005D138;
  v10 = swift_retain(qword_10005D138);
  v11 = sub_10001B700(v10);
  swift_release(v9);
  v12 = a1;
  v13 = sub_10001BC0C(v11);
  swift_bridgeObjectRelease(v11);

  v14 = objc_allocWithZone((Class)INObjectCollection);
  type metadata accessor for STUser();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  v16 = objc_msgSend(v14, "initWithItems:", isa);

  (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v16, 0);
}

id sub_10001BF7C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;

  if (qword_100059910 != -1)
    swift_once(&qword_100059910, sub_10001B56C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100006BC8(v0, (uint64_t)qword_10005A258);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "get default user for widget. getting local user", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  if (qword_100059928 != -1)
    swift_once(&qword_100059928, sub_100033360);
  v5 = qword_10005D138;
  v6 = swift_retain(qword_10005D138);
  v7 = sub_10001B958(v6);
  v9 = v8;
  v11 = v10;
  v12 = swift_release(v5);
  if (v7)
  {
    v13 = type metadata accessor for STUser();
    v14 = objc_msgSend(v7, "stringValue");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = v15;

    v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v13));
    swift_bridgeObjectRetain(v9);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    v20 = objc_msgSend(v17, "initWithIdentifier:displayString:", v18, v19);

    v21 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", (v11 >> 8) & 1);
    objc_msgSend(v20, "setIsRemote:", v21);
    swift_bridgeObjectRelease(v9);

  }
  else
  {
    v22 = Logger.logObject.getter(v12);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "couldn't fetch local user to use as default user", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    return 0;
  }
  return v20;
}

uint64_t sub_10001C214()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {

    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  }
  return swift_deallocObject(v0, 42, 7);
}

void *sub_10001C244(uint64_t a1)
{
  uint64_t v1;

  return sub_10003B294(a1, v1);
}

void *sub_10001C24C(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a3);
  }
  return result;
}

void *sub_10001C278(void *result, uint64_t a2, uint64_t a3)
{
  id v4;

  if (result)
  {
    v4 = result;
    return (void *)swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_10001C2A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001C2B8()
{
  uint64_t v0;

  return sub_100014F00(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10001C2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C2D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10001C2FC(uint64_t a1)
{
  uint64_t v1;

  sub_10003B28C(a1, v1);
}

uint64_t sub_10001C308()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001C334()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10001C354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100003C84(&qword_100059B00);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100003C84(&qword_10005A5A0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100003D00(v13, (uint64_t)v5, &qword_100059B00);
    v15 = *v5;
    result = sub_100021680(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = sub_100003C84(&qword_10005A5A8);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001C4F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100003C84(&qword_100059AD8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100003C84(&qword_10005A598);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100003D00(v13, (uint64_t)v5, &qword_100059AD8);
    v15 = *v5;
    result = sub_100021680(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001C68C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100003C84(&qword_10005A520);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100003C84(&qword_10005A518);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100003D00(v13, (uint64_t)v5, &qword_10005A520);
    result = sub_10002173C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for DateInterval(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001C820(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100003C84(&qword_10005A4E0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100003C84(&qword_10005A4D0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100003D00(v13, (uint64_t)v5, &qword_10005A4E0);
    result = sub_10002173C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for DateInterval(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001C9B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003C84(&qword_10005A4A8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1000216D8(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10001CAC4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10001CB10(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10001CBEC + 4 * byte_100047849[a2]))(1953460082);
}

uint64_t sub_10001CBEC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1953460082 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = ((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))();
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_10001CCFC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10001CD40(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 1953460082, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

uint64_t sub_10001CE14(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  Swift::Int v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t result;
  uint64_t AssociatedConformanceWitness;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v50 = a8;
  v51 = a5;
  v9 = v8;
  v63 = a4;
  v64 = a1;
  v65 = a2;
  v49 = *(_QWORD *)(a5 - 8);
  v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v61 = (char *)&v46 - v13;
  v55 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v48 = (char *)&v46 - v19;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v52 = *(_QWORD *)(v20 - 8);
  v53 = v20;
  v21 = __chkstk_darwin(v20);
  v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v26 = __chkstk_darwin(v23);
  v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v46 - v29;
  v58 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v28);
  v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = swift_getAssociatedTypeWitness(0, a6);
  v54 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v56 = (char *)&v46 - v32;
  v33 = v16;
  v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  v35 = v63;
  v67 = ContiguousArray.init()(v63);
  v63 = type metadata accessor for ContiguousArray(0, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, _QWORD, _QWORD *))(v58 + 16))(v57, v60, v16);
  v36 = v56;
  v60 = v33;
  v37 = v33;
  v38 = v55;
  result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v34)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        v41 = v59;
        v42 = v66;
        goto LABEL_9;
      }
    }
  }
  v42 = v66;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, v60, v66, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }
  else
  {
    v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v47;
    v45 = v48;
    v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }
}

char *sub_10001D320(unint64_t a1, double a2)
{
  char *result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = (char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (!a1)
    return (char *)&_swiftEmptyArrayStorage;
  result = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for Double);
  *((_QWORD *)result + 2) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_10001D410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for GridItem(0);
      v5 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      *((_QWORD *)v5 + 2) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v8(&v5[v7], a1, v4);
      v9 = a2 - 1;
      if (a2 != 1)
      {
        v10 = *(_QWORD *)(v6 + 72);
        v11 = &v5[v10 + v7];
        do
        {
          v8(v11, a1, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v5 = (char *)&_swiftEmptyArrayStorage;
    }
    v12 = type metadata accessor for GridItem(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_10001D540()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005A298);
  sub_100006BC8(v0, (uint64_t)qword_10005A298);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0xD00000000000001CLL, 0x8000000100049E20);
}

BOOL sub_10001D5BC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1000244FC((uint64_t)v7, (uint64_t)v8);
}

Swift::Int sub_10001D600()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10001D640()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10001D664(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10001D6B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  ValueMetadata *v16;
  char **v17;

  sub_100003D00(a5, (uint64_t)&v13, &qword_10005A0F8);
  if (v14)
  {
    sub_1000184F0(&v13, (uint64_t)&v15);
  }
  else
  {
    if (qword_100059928 != -1)
      swift_once(&qword_100059928, sub_100033360);
    v11 = qword_10005D138;
    v16 = (ValueMetadata *)type metadata accessor for XPCPersistentStoreManager();
    v17 = (char **)&off_100056E58;
    *(_QWORD *)&v15 = v11;
    swift_retain(v11);
    sub_100003D44((uint64_t)&v13, &qword_10005A0F8);
  }
  sub_1000184F0(&v15, v5 + 112);
  sub_100003D00(a1, (uint64_t)&v13, &qword_10005A0E8);
  if (v14)
  {
    sub_1000184F0(&v13, (uint64_t)&v15);
  }
  else
  {
    v16 = &type metadata for ScreenTimeAppInfoCache;
    v17 = (char **)&off_100055FC8;
    sub_100003D44((uint64_t)&v13, &qword_10005A0E8);
  }
  sub_1000184F0(&v15, v5 + 16);
  sub_100003D00(a4, (uint64_t)&v13, &qword_10005A0F0);
  if (v14)
  {
    sub_100003D44(a5, &qword_10005A0F8);
    sub_100003D44(a4, &qword_10005A0F0);
    sub_100003D44(a1, &qword_10005A0E8);
    sub_1000184F0(&v13, (uint64_t)&v15);
  }
  else
  {
    v16 = &type metadata for ScreenTimeIconCache;
    v17 = &off_100055FA0;
    sub_100003D44(a5, &qword_10005A0F8);
    sub_100003D44(a4, &qword_10005A0F0);
    sub_100003D44(a1, &qword_10005A0E8);
    sub_100003D44((uint64_t)&v13, &qword_10005A0F0);
  }
  sub_1000184F0(&v15, v5 + 72);
  if (!a2)
  {
    a2 = type metadata accessor for STDeviceActivityDataSource(0);
    a3 = &protocol witness table for STDeviceActivityDataSource;
  }
  *(_QWORD *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 64) = a3;
  return v5;
}

uint64_t sub_10001D8CC(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *(_QWORD *)(v10 + 200) = a9;
  *(_QWORD *)(v10 + 208) = v9;
  *(_BYTE *)(v10 + 576) = a8;
  *(_QWORD *)(v10 + 184) = a6;
  *(_QWORD *)(v10 + 192) = a7;
  *(double *)(v10 + 168) = a2;
  *(double *)(v10 + 176) = a3;
  *(_QWORD *)(v10 + 160) = a1;
  v11 = type metadata accessor for DynamicTypeSize(0);
  *(_QWORD *)(v10 + 216) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 + 224) = v12;
  *(_QWORD *)(v10 + 232) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_100003C84(&qword_100059958) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v10 + 240) = swift_task_alloc(v13);
  *(_QWORD *)(v10 + 248) = swift_task_alloc(v13);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_100003C84(&qword_100059960) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v10 + 256) = swift_task_alloc(v14);
  *(_QWORD *)(v10 + 264) = swift_task_alloc(v14);
  *(_QWORD *)(v10 + 272) = swift_task_alloc(v14);
  *(_QWORD *)(v10 + 280) = swift_task_alloc(v14);
  *(_QWORD *)(v10 + 288) = swift_task_alloc(v14);
  v15 = type metadata accessor for WidgetFamily(0);
  *(_QWORD *)(v10 + 296) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v10 + 304) = v16;
  *(_QWORD *)(v10 + 312) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DateInterval(0);
  *(_QWORD *)(v10 + 320) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v10 + 328) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v10 + 336) = swift_task_alloc(v19);
  *(_QWORD *)(v10 + 344) = swift_task_alloc(v19);
  *(_QWORD *)(v10 + 352) = swift_task_alloc(v19);
  *(_QWORD *)(v10 + 360) = swift_task_alloc(v19);
  v20 = type metadata accessor for Calendar(0);
  *(_QWORD *)(v10 + 368) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v10 + 376) = v21;
  *(_QWORD *)(v10 + 384) = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Date(0);
  *(_QWORD *)(v10 + 392) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v10 + 400) = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v10 + 408) = swift_task_alloc(v24);
  *(_QWORD *)(v10 + 416) = swift_task_alloc(v24);
  *(_QWORD *)(v10 + 424) = swift_task_alloc(v24);
  *(_QWORD *)(v10 + 432) = swift_task_alloc(v24);
  return swift_task_switch(sub_10001DAB8, 0, 0);
}

uint64_t sub_10001DAB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  double v81;
  double v82;
  _BYTE *v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  double v92;
  double v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  id v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(_BOOL8, void *, uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(v1 + 304);
  v2 = *(_QWORD *)(v1 + 312);
  v4 = *(_QWORD *)(v1 + 296);
  v5 = *(_QWORD *)(v1 + 200);
  v6 = static Date.now.getter(a1);
  static Calendar.current.getter(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v7 == enum case for WidgetFamily.systemSmall(_:))
    goto LABEL_2;
  if (v7 == enum case for WidgetFamily.systemMedium(_:))
  {
    v8 = *(_QWORD *)(v1 + 432);
    v9 = *(_QWORD *)(v1 + 384);
    v10 = *(_QWORD *)(v1 + 360);
    v11 = 15;
    goto LABEL_5;
  }
  if (v7 == enum case for WidgetFamily.systemLarge(_:) || v7 == enum case for WidgetFamily.systemExtraLarge(_:))
  {
    sub_10000E200(*(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 360));
  }
  else
  {
    if (v7 == enum case for WidgetFamily.accessoryCircular(_:)
      || v7 == enum case for WidgetFamily.accessoryRectangular(_:)
      || v7 == enum case for WidgetFamily.accessoryInline(_:))
    {
LABEL_2:
      v8 = *(_QWORD *)(v1 + 432);
      v9 = *(_QWORD *)(v1 + 384);
      v10 = *(_QWORD *)(v1 + 360);
      v11 = 9;
LABEL_5:
      sub_100014F40(v11, v8, v9, v10);
      goto LABEL_6;
    }
    v72 = *(_QWORD *)(v1 + 304);
    v71 = *(_QWORD *)(v1 + 312);
    v73 = *(_QWORD *)(v1 + 296);
    sub_10000E200(*(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 360));
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
  }
LABEL_6:
  v12 = *(_QWORD *)(v1 + 208);
  if ((*(_BYTE *)(*sub_100014EDC((_QWORD *)(v12 + 112), *(_QWORD *)(v12 + 136)) + 24) & 1) == 0)
  {
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100006BC8(v36, (uint64_t)qword_10005A298);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to initialize persistent store. This prevented fetching user. Returning placeholder timeline entry", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }
    v42 = *(_QWORD *)(v1 + 392);
    v41 = *(_QWORD *)(v1 + 400);
    v134 = *(_QWORD *)(v1 + 384);
    v138 = *(_QWORD *)(v1 + 432);
    v127 = *(_QWORD *)(v1 + 376);
    v43 = *(_QWORD *)(v1 + 360);
    v131 = *(_QWORD *)(v1 + 368);
    v44 = *(_QWORD *)(v1 + 352);
    v46 = *(_QWORD *)(v1 + 320);
    v45 = *(_QWORD *)(v1 + 328);
    v47 = *(_QWORD *)(v1 + 288);
    v48 = *(_QWORD *)(v1 + 248);
    v121 = *(_BYTE *)(v1 + 576);
    v50 = *(double *)(v1 + 168);
    v49 = *(double *)(v1 + 176);
    v124 = *(_BYTE **)(v1 + 160);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v47, 1, 1, v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v48, 1, 1, v46);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v44, v43, v46);
    sub_100003644(0, v47, 0, 0, 0, 0, v48, v44, v124, v50, v49, 0.0, (uint64_t)_swiftEmptyArrayStorage, v121, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v46);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v134, v131);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v138, v42);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0);
    v28 = 0;
    v51 = 0;
    goto LABEL_46;
  }
  v133 = (_QWORD *)(v1 + 16);
  if (qword_100059918 != -1)
    swift_once(&qword_100059918, sub_10001D540);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100006BC8(v13, (uint64_t)qword_10005A298);
  *(_QWORD *)(v1 + 440) = v14;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully loaded persistent store.", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(_QWORD *)(v1 + 208);
  v130 = (unsigned __int8 *)(v1 + 576);
  v19 = *(_BYTE *)(v1 + 576);
  v21 = *(void **)(v1 + 184);
  v20 = *(_QWORD *)(v1 + 192);

  v22 = *sub_100014EDC((_QWORD *)(v12 + 112), *(_QWORD *)(v12 + 136));
  v23 = type metadata accessor for XPCPersistentStoreManager();
  *(_QWORD *)(v1 + 40) = v23;
  *(_QWORD *)(v1 + 48) = &off_100056E58;
  *(_QWORD *)(v1 + 16) = v22;
  v24 = swift_allocObject(&unk_100056A20, 89, 7);
  *(_WORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 40) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 73) = 0u;
  v25 = *sub_100014EDC(v133, v23);
  swift_retain(v18);
  swift_retain(v22);
  sub_10003912C(v25, v21, v20, v19, v24, v18);
  swift_release(v18);
  swift_beginAccess(v24 + 16, v1 + 136, 0, 0);
  v26 = *(_BYTE *)(v24 + 16);
  v27 = *(_QWORD *)(v24 + 32);
  *(_QWORD *)(v1 + 448) = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v1 + 456) = v27;
  v28 = *(_QWORD *)(v24 + 40);
  v29 = *(void **)(v24 + 48);
  *(_QWORD *)(v1 + 464) = v28;
  *(_QWORD *)(v1 + 472) = v29;
  v30 = *(_QWORD *)(v24 + 64);
  v31 = *(_QWORD *)(v24 + 80);
  v114 = *(_QWORD *)(v24 + 72);
  v116 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)(v1 + 480) = v30;
  *(_QWORD *)(v1 + 488) = v31;
  LOBYTE(v22) = *(_BYTE *)(v24 + 88);
  swift_bridgeObjectRetain(v31);
  v137 = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  v32 = v29;
  swift_bridgeObjectRetain(v30);
  swift_release(v24);
  sub_100018494(v133);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v33 = swift_bridgeObjectRelease_n(0, 3);
  if ((v22 & 1) == 0)
  {
    v53 = Logger.logObject.getter(v33);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to fetch user. Returning placeholder timeline entry.", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }
    v56 = *(_QWORD *)(v1 + 392);
    v57 = *(_QWORD *)(v1 + 400);
    v58 = *(_QWORD *)(v1 + 280);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v58, 1, 1, v56);
    v122 = v31;
    v125 = v30;
    v119 = v32;
    if (v29)
    {
      v59 = objc_msgSend(v32, "stringValue");
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v108 = v61;
      v110 = v60;

    }
    else
    {
      v108 = 0;
      v110 = 0;
    }
    v135 = *(_QWORD *)(v1 + 432);
    v128 = *(_QWORD *)(v1 + 392);
    v115 = *(_QWORD *)(v1 + 384);
    v117 = *(_QWORD *)(v1 + 400);
    v74 = *(_QWORD *)(v1 + 360);
    v112 = *(_QWORD *)(v1 + 376);
    v113 = *(_QWORD *)(v1 + 368);
    v75 = *(_QWORD *)(v1 + 352);
    v77 = *(_QWORD *)(v1 + 320);
    v76 = *(_QWORD *)(v1 + 328);
    v78 = *(_QWORD *)(v1 + 280);
    v79 = *(_QWORD *)(v1 + 248);
    v80 = *v130;
    v82 = *(double *)(v1 + 168);
    v81 = *(double *)(v1 + 176);
    v83 = *(_BYTE **)(v1 + 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v79, 1, 1, v77);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v75, v74, v77);
    sub_100003644(v80, v78, 0, 0, v110, v108, v79, v75, v83, v82, v81, 0.0, (uint64_t)_swiftEmptyArrayStorage, v80, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v77);
    goto LABEL_45;
  }
  if ((v26 & 1) == 0)
  {
    v122 = v31;
    v62 = Logger.logObject.getter(v33);
    v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "ScreenTime is disabled.", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }
    v65 = *(_QWORD *)(v1 + 392);
    v66 = *(_QWORD *)(v1 + 400);
    v67 = *(_QWORD *)(v1 + 272);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, 1, 1, v65);
    v125 = v30;
    v119 = v32;
    if (v29)
    {
      v68 = objc_msgSend(v32, "stringValue");
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      v109 = v70;
      v111 = v69;

    }
    else
    {
      v109 = 0;
      v111 = 0;
    }
    v135 = *(_QWORD *)(v1 + 432);
    v128 = *(_QWORD *)(v1 + 392);
    v115 = *(_QWORD *)(v1 + 384);
    v117 = *(_QWORD *)(v1 + 400);
    v85 = *(_QWORD *)(v1 + 360);
    v112 = *(_QWORD *)(v1 + 376);
    v113 = *(_QWORD *)(v1 + 368);
    v86 = *(_QWORD *)(v1 + 352);
    v87 = *(_QWORD *)(v1 + 320);
    v88 = *(_QWORD *)(v1 + 328);
    v89 = *(_QWORD *)(v1 + 272);
    v90 = *(_QWORD *)(v1 + 248);
    v91 = *v130;
    v93 = *(double *)(v1 + 168);
    v92 = *(double *)(v1 + 176);
    v94 = *(_BYTE **)(v1 + 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v90, 1, 1, v87);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v86, v85, v87);
    sub_100003644(0, v89, 0, 0, v111, v109, v90, v86, v94, v93, v92, 0.0, (uint64_t)_swiftEmptyArrayStorage, v91, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v85, v87);
LABEL_45:
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v115, v113);
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v135, v128);
    swift_bridgeObjectRelease(v122);
    swift_bridgeObjectRelease(v125);

    v51 = v137;
LABEL_46:
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v51);
    v95 = *(_QWORD *)(v1 + 424);
    v97 = *(_QWORD *)(v1 + 408);
    v96 = *(_QWORD *)(v1 + 416);
    v98 = *(_QWORD *)(v1 + 384);
    v99 = *(_QWORD *)(v1 + 352);
    v100 = *(_QWORD *)(v1 + 360);
    v102 = *(_QWORD *)(v1 + 336);
    v101 = *(_QWORD *)(v1 + 344);
    v103 = *(_QWORD *)(v1 + 312);
    v118 = *(_QWORD *)(v1 + 288);
    v120 = *(_QWORD *)(v1 + 280);
    v123 = *(_QWORD *)(v1 + 272);
    v126 = *(_QWORD *)(v1 + 264);
    v129 = *(_QWORD *)(v1 + 256);
    v132 = *(_QWORD *)(v1 + 248);
    v136 = *(_QWORD *)(v1 + 240);
    v139 = *(_QWORD *)(v1 + 232);
    swift_task_dealloc(*(_QWORD *)(v1 + 432));
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v136);
    swift_task_dealloc(v139);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRetain(v28);
  v34 = v32;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  if (v29)
    v35 = objc_msgSend(v34, "integerValue");
  else
    v35 = 0;
  swift_bridgeObjectRelease(v30);

  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v137);
  if (v31)
  {
    swift_bridgeObjectRelease(v31);
    v84 = (uint64_t)v35 > 0;
  }
  else
  {
    swift_bridgeObjectRelease(0);
    v84 = 0;
  }
  v105 = unk_10005A584;
  v140 = (uint64_t (*)(_BOOL8, void *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10005A580
                                                                                    + dword_10005A580);
  v106 = v32;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  v107 = (_QWORD *)swift_task_alloc(v105);
  *(_QWORD *)(v1 + 496) = v107;
  *v107 = v1;
  v107[1] = sub_10001E5C8;
  return v140(v84, v29, v116, v30, v114, v31);
}

uint64_t sub_10001E5C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v5 = *(void **)(*(_QWORD *)v1 + 472);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);

  return swift_task_switch(sub_10001E644, 0, 0);
}

uint64_t sub_10001E644(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t);
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch device activity started", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v6 = *(_QWORD *)(v1 + 424);
  v5 = *(_QWORD *)(v1 + 432);
  v20 = *(_QWORD *)(v1 + 416);
  v21 = *(_QWORD *)(v1 + 408);
  v7 = *(_QWORD *)(v1 + 392);
  v18 = *(_QWORD *)(v1 + 464);
  v19 = *(_QWORD *)(v1 + 400);
  v17 = *(_QWORD *)(v1 + 456);
  v9 = *(_QWORD *)(v1 + 224);
  v8 = *(_QWORD *)(v1 + 232);
  v11 = *(_QWORD *)(v1 + 208);
  v10 = *(_QWORD *)(v1 + 216);
  v12 = *(_QWORD *)(v1 + 200);

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v8, enum case for DynamicTypeSize.large(_:), v10);
  v22 = sub_10001EF34(v12, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  *(_BYTE *)(v1 + 577) = sub_10001F184(v12);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  Calendar.startOfDay(for:)(v5);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v13(v20, v6, v7);
  v13(v21, v5, v7);
  DateInterval.init(start:end:)(v20, v21);
  v14 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(_QWORD *)(v1 + 512) = v14;
  v14(v6, v7);
  sub_100014DF4(v11 + 16, v1 + 56);
  sub_100014DF4(v11 + 72, v1 + 96);
  v15 = (_QWORD *)swift_task_alloc(dword_10005A2E4);
  *(_QWORD *)(v1 + 520) = v15;
  *v15 = v1;
  v15[1] = sub_10001E858;
  return sub_100020388(*(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 360), *(_QWORD *)(v1 + 344), v22);
}

uint64_t sub_10001E858(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void *v14;

  v6 = *v5;
  v7 = *(_QWORD *)(*v5 + 520);
  v9 = *(_QWORD *)(*v5 + 456);
  v8 = *(_QWORD *)(*v5 + 464);
  v10 = *(_QWORD *)(*v5 + 344);
  v11 = *(_QWORD *)(*v5 + 320);
  v12 = *(_QWORD *)(*v5 + 328);
  *(_QWORD *)(v6 + 528) = a1;
  *(_QWORD *)(v6 + 536) = a2;
  *(_QWORD *)(v6 + 544) = a3;
  *(double *)(v6 + 552) = a4;
  *(_QWORD *)(v6 + 560) = v4;
  swift_task_dealloc(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  sub_100018494((_QWORD *)(v6 + 96));
  sub_100018494((_QWORD *)(v6 + 56));
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v6 + 568) = v13;
  v13(v10, v11);
  if (v4)
    v14 = sub_10001EBF4;
  else
    v14 = sub_10001E93C;
  return swift_task_switch(v14, 0, 0);
}

uint64_t sub_10001E93C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 472);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(*(_QWORD *)(v0 + 264), 1, 1, *(_QWORD *)(v0 + 392));
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 472), "stringValue");
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  v6 = *(_BYTE *)(v0 + 577);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 320);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v8 + 56))(*(_QWORD *)(v0 + 240), 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v7, v10);
  v11 = *(char **)(v0 + 528);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v11);
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v12 = v3;
  v13 = v5;
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 568);
  v36 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  v44 = *(_QWORD *)(v0 + 488);
  v42 = *(_QWORD *)(v0 + 480);
  v40 = *(void **)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 384);
  v16 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 320);
  sub_100003644(0, *(_QWORD *)(v0 + 264), 0, 0, v12, v13, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 336), *(_BYTE **)(v0 + 160), *(double *)(v0 + 168), *(double *)(v0 + 176), *(double *)(v0 + 552), *(_QWORD *)(v0 + 536), *(_BYTE *)(v0 + 576), *(_QWORD *)(v0 + 544), 0, 1u, v11, *(_QWORD *)(v0 + 504));
  v14(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  v36(v15, v16);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v38);

  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v44);
  v22 = *(_QWORD *)(v0 + 424);
  v24 = *(_QWORD *)(v0 + 408);
  v23 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 384);
  v26 = *(_QWORD *)(v0 + 352);
  v27 = *(_QWORD *)(v0 + 360);
  v29 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 344);
  v30 = *(_QWORD *)(v0 + 312);
  v32 = *(_QWORD *)(v0 + 288);
  v33 = *(_QWORD *)(v0 + 280);
  v35 = *(_QWORD *)(v0 + 272);
  v37 = *(_QWORD *)(v0 + 264);
  v39 = *(_QWORD *)(v0 + 256);
  v41 = *(_QWORD *)(v0 + 248);
  v43 = *(_QWORD *)(v0 + 240);
  v45 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001EBF4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  double v19;
  double v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get hourly usage. Returning placeholder timeline entry.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 472);
  v6 = *(_QWORD *)(v1 + 392);
  v7 = *(_QWORD *)(v1 + 400);
  v8 = *(_QWORD *)(v1 + 256);

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v8, 1, 1, v6);
  if (v5)
  {
    v9 = objc_msgSend(*(id *)(v1 + 472), "stringValue");
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v41 = v10;

  }
  else
  {
    v45 = 0;
    v41 = 0;
  }
  v38 = *(void (**)(uint64_t, uint64_t))(v1 + 568);
  v35 = *(_QWORD *)(v1 + 560);
  v11 = *(_QWORD *)(v1 + 504);
  v43 = *(void (**)(uint64_t, uint64_t))(v1 + 512);
  v51 = *(_QWORD *)(v1 + 480);
  v53 = *(_QWORD *)(v1 + 488);
  v47 = *(_QWORD *)(v1 + 464);
  v49 = *(void **)(v1 + 472);
  v39 = *(_QWORD *)(v1 + 456);
  v36 = *(_QWORD *)(v1 + 392);
  v37 = *(_QWORD *)(v1 + 432);
  v32 = *(_QWORD *)(v1 + 376);
  v12 = *(_QWORD *)(v1 + 360);
  v33 = *(_QWORD *)(v1 + 368);
  v34 = *(_QWORD *)(v1 + 384);
  v13 = *(_QWORD *)(v1 + 352);
  v15 = *(_QWORD *)(v1 + 320);
  v14 = *(_QWORD *)(v1 + 328);
  v17 = *(_QWORD *)(v1 + 248);
  v16 = *(_QWORD *)(v1 + 256);
  v18 = *(_BYTE *)(v1 + 576);
  v20 = *(double *)(v1 + 168);
  v19 = *(double *)(v1 + 176);
  v21 = *(_BYTE **)(v1 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v17, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
  sub_100003644(0, v16, 0, 0, v45, v41, v17, v13, v21, v20, v19, 0.0, (uint64_t)_swiftEmptyArrayStorage, v18, (uint64_t)_swiftEmptyArrayStorage, 0, 1u, (char *)_swiftEmptyArrayStorage, v11);
  swift_errorRelease(v35);
  v38(v12, v15);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
  v43(v37, v36);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v47);

  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v53);
  v22 = *(_QWORD *)(v1 + 424);
  v24 = *(_QWORD *)(v1 + 408);
  v23 = *(_QWORD *)(v1 + 416);
  v25 = *(_QWORD *)(v1 + 384);
  v26 = *(_QWORD *)(v1 + 352);
  v27 = *(_QWORD *)(v1 + 360);
  v29 = *(_QWORD *)(v1 + 336);
  v28 = *(_QWORD *)(v1 + 344);
  v30 = *(_QWORD *)(v1 + 312);
  v40 = *(_QWORD *)(v1 + 288);
  v42 = *(_QWORD *)(v1 + 280);
  v44 = *(_QWORD *)(v1 + 272);
  v46 = *(_QWORD *)(v1 + 264);
  v48 = *(_QWORD *)(v1 + 256);
  v50 = *(_QWORD *)(v1 + 248);
  v52 = *(_QWORD *)(v1 + 240);
  v54 = *(_QWORD *)(v1 + 232);
  swift_task_dealloc(*(_QWORD *)(v1 + 432));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10001EF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v22;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v11, v8);
  v13 = 0;
  if (v12 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v12 == enum case for WidgetFamily.systemMedium(_:))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.large(_:), v4);
      v14 = sub_10000DF58(&qword_10005A588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
      v15 = dispatch thunk of static Comparable.< infix(_:_:)(v7, a2, v4, v14);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v13 = 3;
      if ((v15 & 1) == 0)
        return 4;
    }
    else if (v12 == enum case for WidgetFamily.systemLarge(_:))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.large(_:), v4);
      v16 = sub_10000DF58(&qword_10005A588, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
      v17 = dispatch thunk of static Comparable.< infix(_:_:)(v7, a2, v4, v16);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v13 = 6;
      if ((v17 & 1) != 0)
        return 4;
    }
    else
    {
      if (v12 != enum case for WidgetFamily.systemExtraLarge(_:)
        && v12 != enum case for WidgetFamily.accessoryCircular(_:)
        && v12 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v12 != enum case for WidgetFamily.accessoryInline(_:))
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
      return 0;
    }
  }
  return v13;
}

BOOL sub_10001F184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  _BOOL8 v14;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v9((char *)&v16 - v7, enum case for WidgetFamily.systemLarge(_:), v2);
  v10 = sub_10000DF58((unint64_t *)&qword_10005A128, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v2, v10);
  v12 = v16;
  v11 = v17;
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  if (v11 == v12)
  {
    v14 = 1;
  }
  else
  {
    v9(v8, enum case for WidgetFamily.systemExtraLarge(_:), v2);
    dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(&v16, v2, v10);
    v14 = v17 == v16;
    v13(v8, v2);
  }
  v13(v6, v2);
  return v14;
}

uint64_t sub_10001F328(char a1, void *a2, int64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v43;
  _QWORD v44[5];

  v4 = v3;
  v8 = (_QWORD *)(v3 + 112);
  if (*(_BYTE *)(*sub_100014EDC((_QWORD *)(v3 + 112), *(_QWORD *)(v3 + 136)) + 24) == 1)
  {
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100006BC8(v9, (uint64_t)qword_10005A298);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Successfully loaded persistent store.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = *sub_100014EDC(v8, *(_QWORD *)(v4 + 136));
    v15 = type metadata accessor for XPCPersistentStoreManager();
    v44[3] = v15;
    v44[4] = &off_100056E58;
    v44[0] = v14;
    v16 = swift_allocObject(&unk_100056A20, 89, 7);
    *(_WORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 73) = 0u;
    v17 = *sub_100014EDC(v44, v15);
    swift_retain(v4);
    swift_retain(v14);
    sub_10003912C(v17, a2, a3, a1 & 1, v16, v4);
    swift_release(v4);
    swift_beginAccess(v16 + 16, &v43, 0, 0);
    v18 = *(_QWORD **)(v16 + 32);
    v19 = *(_QWORD **)(v16 + 40);
    v20 = *(void **)(v16 + 48);
    v21 = *(_QWORD *)(v16 + 64);
    v22 = *(_QWORD *)(v16 + 80);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    v23 = v20;
    swift_bridgeObjectRetain(v21);
    swift_release(v16);
    sub_100018494(v44);
    swift_bridgeObjectRelease_n(0, 3);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }
  else
  {
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100006BC8(v24, (uint64_t)qword_10005A298);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to initialize persistent store. This prevented fetching user.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v18 = 0;
    v23 = 0;
    v21 = 0;
    v22 = 0;
    v19 = _swiftEmptyArrayStorage;
  }
  v29 = dispatch thunk of static DeviceActivityDataSourceProtocol.deviceIdentifierByCoreDuetIdentifier.getter();
  v30 = v29;
  v31 = v19[2];
  if (v31)
  {
    swift_bridgeObjectRetain_n(v19, 2);
    v32 = v19 + 5;
    while (*(_QWORD *)(v30 + 16))
    {
      v34 = *(v32 - 1);
      v33 = *v32;
      swift_bridgeObjectRetain_n(*v32, 2);
      sub_1000216D8(v34, v33);
      LOBYTE(v34) = v35;
      swift_bridgeObjectRelease_n(v33, 2);
      if ((v34 & 1) == 0)
        break;
      v32 += 2;
      if (!--v31)
      {
        swift_bridgeObjectRelease_n(v19, 3);
        swift_bridgeObjectRelease(v30);
        v36 = v18;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease(v30);
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100006BC8(v37, (uint64_t)qword_10005A298);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "device activity doesn't contain device identifier for core duet identifier.", v41, 2u);
      swift_slowDealloc(v41, -1, -1);

      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v19);

      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v19);

      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v22);

    }
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v18);
    v36 = v19;
LABEL_23:
    swift_bridgeObjectRelease(v36);

    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v22);
    return 1;
  }
}

uint64_t sub_10001F7F0(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v8 | (v2 << 6); ; i = __clz(__rbit64(v13)) + (v2 << 6))
  {
    v10 = *(_QWORD *)(v1 + 56);
    v11 = *(_QWORD *)(v10 + 48 * i + 40);
    if (v11 == 3)
    {
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v15 = (uint64_t *)(v10 + 48 * i);
      v16 = v15[2];
      v17 = v15[4];
      v22 = v15[3];
      v23 = *v15;
      v24 = v15[1];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v17);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_100021D10(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        result = sub_100021D10(v18 > 1, v19 + 1, 1);
        v20 = v19 + 1;
      }
      _swiftEmptyArrayStorage[2] = v20;
      v21 = &_swiftEmptyArrayStorage[6 * v19];
      v21[4] = v23;
      v21[5] = v24;
      v21[6] = v16;
      v21[7] = v22;
      v21[8] = v17;
      v21[9] = v11;
      if (v6)
        goto LABEL_4;
    }
LABEL_7:
    v12 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v7)
      goto LABEL_29;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v2;
    if (!v13)
    {
      v2 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_29;
      v13 = *(_QWORD *)(v3 + 8 * v2);
      if (!v13)
      {
        v2 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_29;
        v13 = *(_QWORD *)(v3 + 8 * v2);
        if (!v13)
        {
          v2 = v12 + 3;
          if (v12 + 3 >= v7)
            goto LABEL_29;
          v13 = *(_QWORD *)(v3 + 8 * v2);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_29:
    swift_release(v1);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v2 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v2 >= v7)
      goto LABEL_29;
    v13 = *(_QWORD *)(v3 + 8 * v2);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10001FA2C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v8 | (v2 << 6); ; i = __clz(__rbit64(v12)) + (v2 << 6))
  {
    v10 = *(_QWORD *)(v1 + 56);
    if (*(_QWORD *)(v10 + 48 * i + 40) == 3)
    {
      v14 = (uint64_t *)(v10 + 48 * i);
      v15 = v14[2];
      v16 = v14[4];
      v20 = v14[3];
      v21 = *v14;
      v22 = v14[1];
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v16);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_100021D10(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      if (v18 >= v17 >> 1)
        result = sub_100021D10(v17 > 1, v18 + 1, 1);
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = &_swiftEmptyArrayStorage[6 * v18];
      v19[4] = v21;
      v19[5] = v22;
      v19[6] = v15;
      v19[7] = v20;
      v19[8] = v16;
      v19[9] = 3;
      if (v6)
        goto LABEL_4;
    }
    else if (v6)
    {
      goto LABEL_4;
    }
LABEL_7:
    v11 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v7)
      goto LABEL_29;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v2;
    if (!v12)
    {
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_29;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (!v12)
      {
        v2 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_29;
        v12 = *(_QWORD *)(v3 + 8 * v2);
        if (!v12)
        {
          v2 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_29;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_29:
    swift_release(v1);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v2 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v2 >= v7)
      goto LABEL_29;
    v12 = *(_QWORD *)(v3 + 8 * v2);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10001FC64@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  *a3 = *(double *)(a2 + 16) < *(double *)(result + 16);
  return result;
}

uint64_t sub_10001FC7C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  if (*a1 == *a2 && a1[1] == a2[1])
    result = 0;
  else
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
  *a3 = result & 1;
  return result;
}

uint64_t sub_10001FCD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v19 = *(_QWORD *)(a3 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v11 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v21 = a2[5];
  v22 = a2[4];
  swift_bridgeObjectRetain(a3);
  v18 = a3;
  v14 = (uint64_t *)(a3 + 40);
  v20 = v13;
  while (1)
  {
    v15 = *v14;
    v23 = (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))*(v14 - 1);
    v24 = v11;
    v30 = v4;
    v31 = v5;
    v32 = v6;
    v33 = v7;
    v34 = v8;
    v35 = v9;
    v25 = v10;
    v26 = v12;
    v27 = v13;
    v28 = v22;
    v29 = v21;
    swift_retain(v15);
    v23(&v36, &v30, &v24);
    if ((v36 & 1) != 0)
      break;
    v30 = v11;
    v31 = v10;
    v32 = v12;
    v33 = v20;
    v34 = v22;
    v35 = v21;
    v24 = v4;
    v25 = v5;
    v26 = v6;
    v27 = v7;
    v28 = v8;
    v29 = v9;
    v23(&v36, &v30, &v24);
    if ((v36 & 1) != 0)
      break;
    swift_release(v15);
    v14 += 2;
    v16 = v19-- == 1;
    v13 = v20;
    if (v16)
    {
      swift_bridgeObjectRelease(v18);
      return 0;
    }
  }
  swift_bridgeObjectRelease(v18);
  v30 = v4;
  v31 = v5;
  v32 = v6;
  v33 = v7;
  v34 = v8;
  v35 = v9;
  v24 = v11;
  v25 = v10;
  v26 = v12;
  v27 = v20;
  v28 = v22;
  v29 = v21;
  v23(&v36, &v30, &v24);
  swift_release(v15);
  return v36;
}

uint64_t sub_10001FEA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v52;
  void *v53;

  v4 = a1;
  v6 = a1[3];
  v7 = a1[4];
  sub_100014EDC(a1, v6);
  if ((Sequence.contains(where:)(sub_10002AFFC, 0, v6, v7) & 1) != 0)
    return sub_100014DF4((uint64_t)v4, (uint64_t)a3);
  v53 = &_swiftEmptyDictionarySingleton;
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
  {
LABEL_19:
    v39 = v4[3];
    v40 = v4[4];
    v41 = sub_100014EDC(v4, v39);
    __chkstk_darwin(v41);
    v44[2] = &v53;
    v43 = sub_10001CE14((void (*)(char *, char *))sub_10002AA94, (uint64_t)v44, v39, (uint64_t)&type metadata for UsageItem, (uint64_t)&type metadata for Never, v40, (uint64_t)&protocol witness table for Never, v42);
    a3[3] = sub_100003C84(&qword_10005A500);
    a3[4] = sub_100009F64(&qword_10005A508, &qword_10005A500, (uint64_t)&protocol conformance descriptor for [A]);
    *a3 = v43;
    return swift_bridgeObjectRelease(v53);
  }
  v46 = v4;
  v47 = 0;
  v48 = a3;
  swift_bridgeObjectRetain(a2);
  v45 = a2;
  v10 = (uint64_t *)(a2 + 80);
  v11 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    v15 = *(v10 - 6);
    v51 = *(_OWORD *)(v10 - 5);
    v16 = (void *)*(v10 - 3);
    v17 = *(v10 - 2);
    v18 = *(v10 - 1);
    v19 = *v10;
    v49 = v9;
    v50 = v18;
    v20 = v51;
    swift_bridgeObjectRetain_n(v51, 3);
    v21 = *((id *)&v51 + 1);
    v22 = v16;
    swift_bridgeObjectRetain_n(v19, 2);
    v23 = v21;
    v24 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    v52 = v11;
    v53 = (void *)0x8000000000000000;
    v27 = sub_1000216D8(v15, v51);
    v28 = v11[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v11[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v11 = v52;
        if ((v26 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_100023EE8();
        v11 = v52;
        if ((v31 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_1000230C0(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_1000216D8(v15, v51);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_22;
      v27 = v32;
      v11 = v52;
      if ((v31 & 1) != 0)
      {
LABEL_5:
        v12 = (uint64_t *)(v11[7] + 56 * v27);
        v13 = (void *)v12[2];
        *(_QWORD *)&v51 = v12[1];
        v14 = (void *)v12[3];
        swift_bridgeObjectRelease(v12[6]);

        swift_bridgeObjectRelease(v51);
        *v12 = v15;
        v12[1] = v20;
        v12[2] = (uint64_t)v23;
        v12[3] = (uint64_t)v24;
        v12[4] = v17;
        v12[5] = v50;
        v12[6] = v19;
        goto LABEL_6;
      }
    }
    v11[(v27 >> 6) + 8] |= 1 << v27;
    v34 = (uint64_t *)(v11[6] + 16 * v27);
    *v34 = v15;
    v34[1] = v20;
    v35 = v11[7] + 56 * v27;
    *(_QWORD *)v35 = v15;
    *(_OWORD *)(v35 + 8) = v51;
    *(_QWORD *)(v35 + 24) = v24;
    *(_QWORD *)(v35 + 32) = v17;
    *(_QWORD *)(v35 + 40) = v50;
    *(_QWORD *)(v35 + 48) = v19;
    v36 = v11[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_21;
    v11[2] = v38;
    swift_bridgeObjectRetain(v20);
LABEL_6:
    v10 += 7;
    v53 = v11;
    swift_bridgeObjectRelease(v19);

    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease(0x8000000000000000);
    v9 = v49 - 1;
    if (v49 == 1)
    {
      swift_bridgeObjectRelease(v45);
      a3 = v48;
      v4 = v46;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100020238@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t result;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 16);
  swift_bridgeObjectRetain(v7);
  if (!v11)
    goto LABEL_6;
  swift_bridgeObjectRetain(v7);
  v12 = sub_1000216D8(v8, v7);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    goto LABEL_6;
  }
  v14 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 56 * v12);
  v15 = v14[1];
  v17 = (void *)v14[2];
  v16 = (void *)v14[3];
  v22 = v14[4];
  v23 = *v14;
  v18 = v14[6];
  v24 = v14[5];
  swift_bridgeObjectRetain(v15);
  v21 = v17;
  v19 = v16;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v7);
  if (!v15)
  {
LABEL_6:
    result = swift_bridgeObjectRetain(v5);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v18);
  v4 = v24;
  result = sub_10002AAB0(v23, v15, v21, v19, v22, v24, v18);
  v5 = v18;
LABEL_7:
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v8;
  a3[4] = v7;
  a3[5] = v9;
  return result;
}

BOOL sub_100020368(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) == 3;
}

void sub_100020378(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_100020388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7[18] = a6;
  v7[19] = v6;
  v7[16] = a4;
  v7[17] = a5;
  v7[14] = a2;
  v7[15] = a3;
  v7[13] = a1;
  v8 = type metadata accessor for _DeviceActivityData.ActivitySegment(0);
  v7[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[21] = v9;
  v7[22] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _SegmentInterval(0);
  v7[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[24] = v11;
  v7[25] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DeviceActivityFilter.SegmentInterval(0);
  v7[26] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[27] = v13;
  v7[28] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003C84(&qword_10005A140);
  v7[29] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[30] = swift_task_alloc(v15);
  v7[31] = swift_task_alloc(v15);
  v16 = type metadata accessor for Date(0);
  v7[32] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v7[33] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[34] = swift_task_alloc(v18);
  v7[35] = swift_task_alloc(v18);
  v19 = sub_100003C84(&qword_10005A148);
  v7[36] = v19;
  v20 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[37] = swift_task_alloc(v20);
  v7[38] = swift_task_alloc(v20);
  v21 = type metadata accessor for DateBins(0);
  v7[39] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v7[40] = v22;
  v7[41] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Calendar(0);
  v7[42] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v7[43] = v24;
  v7[44] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002053C, 0, 0);
}

uint64_t sub_10002053C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v1[34];
  v2 = v1[35];
  v4 = v1[32];
  v5 = static Calendar.current.getter(a1);
  v6 = DateInterval.start.getter(v5);
  DateInterval.end.getter(v6);
  v7 = sub_10000DF58(&qword_100059ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v2, v3, v4, v7);
  if ((result & 1) != 0)
  {
    v25 = v1[38];
    v23 = v1[37];
    v24 = v1[36];
    v10 = (_QWORD *)v1[33];
    v9 = v1[34];
    v11 = v1[31];
    v12 = v1[32];
    v14 = v1[29];
    v13 = v1[30];
    v27 = v1[28];
    v28 = v1[27];
    v29 = v1[26];
    v30 = v1[24];
    v31 = v1[23];
    v32 = v1[25];
    v26 = v1[17];
    v15 = v11 + *(int *)(v14 + 48);
    v16 = (void (*)(uint64_t, uint64_t, uint64_t))v10[4];
    v16(v11, v1[35], v12);
    v16(v15, v9, v12);
    v17 = v13 + *(int *)(v14 + 48);
    v18 = (void (*)(uint64_t, uint64_t, uint64_t))v10[2];
    v18(v13, v11, v12);
    v18(v17, v15, v12);
    v16(v23, v13, v12);
    v19 = (void (*)(uint64_t, uint64_t))v10[1];
    v19(v17, v12);
    v20 = v13 + *(int *)(v14 + 48);
    v16(v13, v11, v12);
    v16(v20, v15, v12);
    v16(v23 + *(int *)(v24 + 36), v20, v12);
    v19(v13, v12);
    sub_100009EF4(v23, v25, &qword_10005A148);
    DateBins.init(timeInterval:range:)(v25, 3600.0);
    type metadata accessor for STDeviceActivityDataSource(0);
    v21 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v27, v26, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, enum case for DeviceActivityFilter.SegmentInterval.hourly(_:), v29);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v32, enum case for _SegmentInterval.hourly(_:), v31);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to static STDeviceActivityDataSource.fetchData(segment:segmentInterval:coreDuetIdentifiers:userAltDSID:)[1]);
    v1[45] = v22;
    *v22 = v1;
    v22[1] = sub_1000207C0;
    return static STDeviceActivityDataSource.fetchData(segment:segmentInterval:coreDuetIdentifiers:userAltDSID:)(v1[28], v1[25], v1[15], v1[13], v1[14]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000207C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 360);
  v6 = *(_QWORD *)(*v2 + 216);
  v5 = *(_QWORD *)(*v2 + 224);
  v8 = *(_QWORD *)(*v2 + 200);
  v7 = *(_QWORD *)(*v2 + 208);
  v9 = *(_QWORD *)(*v2 + 184);
  v10 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(v3 + 368) = a1;
  *(_QWORD *)(v3 + 376) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v11 = sub_100020E74;
  else
    v11 = sub_100020870;
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_100020870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, unint64_t, uint64_t);
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;

  v1 = *(_QWORD *)(v0 + 368);
  if (v1)
  {
    v75 = (_QWORD *)(v0 + 16);
    v2 = (uint64_t *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 144);
    v4 = sub_10002545C(v1);
    v77 = sub_100027A78(v4, v3);
    v72 = sub_100027D08(v1);
    v5 = sub_100028148(v72);
    v6 = v5;
    v7 = *(_QWORD *)(v1 + 16);
    if (v7)
    {
      v69 = v5;
      v8 = *(_QWORD *)(v0 + 168);
      v9 = v1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v10 = *(_QWORD *)(v8 + 72);
      v11 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
      swift_bridgeObjectRetain(v1);
      v12 = 0.0;
      do
      {
        v13 = *(_QWORD *)(v0 + 176);
        v14 = *(_QWORD *)(v0 + 160);
        v15 = v11(v13, v9, v14);
        v12 = v12 + _DeviceActivityData.ActivitySegment.totalActivityDuration.getter(v15);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v14);
        v9 += v10;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease(v1);
      v2 = (uint64_t *)(v0 + 56);
      v6 = v69;
    }
    else
    {
      v12 = 0.0;
    }
    v32 = *(_QWORD *)(v0 + 352);
    v33 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 40) = sub_100003C84(&qword_10005A480);
    *(_QWORD *)(v0 + 48) = sub_100009F64(&qword_10005A488, &qword_10005A480, (uint64_t)&protocol conformance descriptor for PrefixSequence<A>);
    v34 = sub_1000286B0(v4, 3);
    v36 = v35;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 16) = v34;
    *(_QWORD *)(v0 + 24) = v36;
    sub_10001FEA4(v75, v77, v2);
    sub_100018494(v75);
    sub_1000184F0((__int128 *)v2, (uint64_t)v75);
    v37 = sub_100028C14(v72, v6, v75);
    swift_bridgeObjectRelease(v72);
    v38 = *(_QWORD *)(v0 + 40);
    v39 = *(_QWORD *)(v0 + 48);
    v40 = sub_100014EDC(v75, v38);
    v41 = sub_100029F84(v37, (uint64_t)v40, 3uLL, v6, v33, v32, v38, v39);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v6);
    v74 = v41;
    if (v12 == 0.0)
    {
      if (qword_100059918 != -1)
        swift_once(&qword_100059918, sub_10001D540);
      v42 = type metadata accessor for Logger(0);
      sub_100006BC8(v42, (uint64_t)qword_10005A298);
      v43 = swift_bridgeObjectRetain(v1);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v46 = 134217984;
        v47 = *(_QWORD *)(v1 + 16);
        swift_bridgeObjectRelease(v1);
        *(_QWORD *)(v0 + 96) = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
        swift_bridgeObjectRelease(v1);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "total screen on time was 0 from %ld activity segment(s)", v46, 0xCu);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v1, 2);
      }

    }
    else
    {
      swift_bridgeObjectRelease(v1);
    }
    v48 = *(_QWORD *)(v0 + 352);
    v49 = *(_QWORD *)(v0 + 328);
    v58 = *(_QWORD *)(v0 + 344);
    v59 = *(_QWORD *)(v0 + 336);
    v50 = *(_QWORD *)(v0 + 320);
    v57 = *(_QWORD *)(v0 + 312);
    v60 = *(_QWORD *)(v0 + 304);
    v61 = *(_QWORD *)(v0 + 296);
    v62 = *(_QWORD *)(v0 + 280);
    v63 = *(_QWORD *)(v0 + 272);
    v64 = *(_QWORD *)(v0 + 248);
    v65 = *(_QWORD *)(v0 + 240);
    v66 = *(_QWORD *)(v0 + 224);
    v68 = *(_QWORD *)(v0 + 200);
    v71 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 40);
    v51 = *(_QWORD *)(v0 + 48);
    v53 = sub_100014EDC(v75, v52);
    v54 = *(_QWORD *)(v52 - 8);
    v55 = swift_task_alloc((*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v54 + 16))(v55, v53, v52);
    v56 = Array.init<A>(_:)(v55, &type metadata for UsageItem, v52, v51);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v57);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v48, v59);
    swift_task_dealloc(v55);
    sub_100018494(v75);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v0 + 8))(v56, v74, v77, v12);
  }
  else
  {
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100006BC8(v16, (uint64_t)qword_10005A298);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "did not get any activity segments", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_100020FBC();
    swift_allocError(&type metadata for UsageProviderError, v21, 0, 0);
    swift_willThrow();
    v23 = *(_QWORD *)(v0 + 344);
    v22 = *(_QWORD *)(v0 + 352);
    v25 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 336);
    v27 = *(_QWORD *)(v0 + 296);
    v26 = *(_QWORD *)(v0 + 304);
    v29 = *(_QWORD *)(v0 + 272);
    v28 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 248);
    v67 = *(_QWORD *)(v0 + 240);
    v70 = *(_QWORD *)(v0 + 224);
    v73 = *(_QWORD *)(v0 + 200);
    v76 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(v25, *(_QWORD *)(v0 + 312));
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc(v22);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v67);
    swift_task_dealloc(v70);
    swift_task_dealloc(v73);
    swift_task_dealloc(v76);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100020E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(v4, *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100020F68()
{
  _QWORD *v0;

  sub_100018494(v0 + 2);
  sub_100018494(v0 + 9);
  sub_100018494(v0 + 14);
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for DeviceActivityUsageProvider()
{
  return objc_opt_self(_TtC25ScreenTimeWidgetExtension27DeviceActivityUsageProvider);
}

unint64_t sub_100020FBC()
{
  unint64_t result;

  result = qword_10005A478;
  if (!qword_10005A478)
  {
    result = swift_getWitnessTable(&unk_1000479B0, &type metadata for UsageProviderError);
    atomic_store(result, (unint64_t *)&qword_10005A478);
  }
  return result;
}

uint64_t sub_100021000(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100021134(a1, a2, a3, a4, &qword_100059D90, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

_QWORD *sub_100021014(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003C84(&qword_100059DD8);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100024598(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100021120(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100021134(a1, a2, a3, a4, &qword_10005A4A0, type metadata accessor for HourlyUsage);
}

uint64_t sub_100021134(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003C84(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100028944(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100021340(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003C84(&qword_10005A578);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100024AC8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10002144C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003C84(&qword_10005A200);
      v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4])
          memmove(v13, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10002AF08(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100021574(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003C84(&qword_10005A590);
      v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32])
          memmove(v14, a4 + 32, 32 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100024680(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100021680(uint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  sub_10001CCFC((uint64_t)v5, a1);
  v3 = Hasher._finalize()();
  return sub_1000217A8(a1, v3);
}

unint64_t sub_1000216D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100021AB8(a1, a2, v5);
}

unint64_t sub_10002173C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for DateInterval(0);
  v6 = sub_10000DF58(&qword_10005A4B0, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100021B98(a1, v7);
}

uint64_t sub_1000217A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_100021AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100021B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_10000DF58(&qword_10005A4B8, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_100021CD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100021D48(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100021CF4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100021EA4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100021D10(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10002200C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100021D2C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100022190(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100021D48(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003C84(&qword_100059DD8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021EA4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003C84(&qword_10005A578);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002200C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003C84(&qword_10005A510);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100022190(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003C84(&qword_10005A200);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v8] || v13 >= &v14[56 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100022318(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v6 = a5;
  v8 = a4 + 1;
  if (a4 + 1 >= a3)
  {
    swift_bridgeObjectRelease(a5);
    LOBYTE(v23) = 0;
    *a1 = v8;
  }
  else
  {
    v10 = a3;
    v11 = (uint64_t *)(a2 + 48 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = v11[2];
    v15 = v11[3];
    v16 = v11[4];
    v17 = v11[5];
    v67 = v12;
    v68 = v13;
    v69 = v14;
    v70 = v15;
    v71 = v16;
    v72 = v17;
    v18 = (uint64_t *)(a2 + 48 * a4);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = v18[4];
    v24 = v18[5];
    v61 = v19;
    v62 = v20;
    v63 = v21;
    v64 = v22;
    v65 = v23;
    v66 = v24;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    v25 = sub_10001FCD0(&v67, &v61, v6);
    if (v5)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      v73 = v25;
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v20);
      v27 = a4 + 2;
      if (a4 + 2 >= v10)
      {
        swift_bridgeObjectRelease(v6);
        *a1 = v27;
        LOBYTE(v23) = v73;
      }
      else
      {
        v50 = (uint64_t *)(v6 + 40);
        v28 = a2;
        LOBYTE(v23) = v73;
        v49 = v6;
        v48 = v10;
        do
        {
          v31 = (uint64_t *)(v28 + 48 * v27);
          v32 = v31[4];
          if (*(_QWORD *)(v6 + 16))
          {
            v56 = *(_QWORD *)(v6 + 16);
            v33 = v31[1];
            v59 = *v31;
            v34 = v31[2];
            v35 = v31[3];
            v36 = v31[5];
            v37 = (uint64_t *)(v28 + 48 * v8);
            v38 = v37[1];
            v54 = *v37;
            v55 = v35;
            v39 = v37[2];
            v52 = v27;
            v53 = v37[3];
            v40 = v37[4];
            v41 = v37[5];
            swift_bridgeObjectRetain(v33);
            swift_bridgeObjectRetain(v32);
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v40);
            swift_bridgeObjectRetain(v6);
            v42 = v40;
            v43 = v50;
            v57 = v41;
            v58 = v40;
            do
            {
              v44 = (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))*(v43 - 1);
              v45 = *v43;
              v67 = v59;
              v68 = v33;
              v69 = v34;
              v70 = v55;
              v71 = v32;
              v72 = v36;
              v60 = v44;
              v61 = v54;
              v62 = v38;
              v63 = v39;
              v64 = v53;
              v65 = v42;
              v66 = v41;
              swift_retain(v45);
              v60(&v74, &v67, &v61);
              if ((v74 & 1) != 0)
                goto LABEL_8;
              v67 = v54;
              v68 = v38;
              v69 = v39;
              v70 = v53;
              v71 = v58;
              v72 = v57;
              v61 = v59;
              v62 = v33;
              v63 = v34;
              v64 = v55;
              v65 = v32;
              v66 = v36;
              v60(&v74, &v67, &v61);
              if ((v74 & 1) != 0)
              {
LABEL_8:
                v6 = v49;
                swift_bridgeObjectRelease(v49);
                v67 = v59;
                v68 = v33;
                v69 = v34;
                v70 = v55;
                v71 = v32;
                v72 = v36;
                v61 = v54;
                v62 = v38;
                v63 = v39;
                v64 = v53;
                v65 = v58;
                v66 = v57;
                v60(&v74, &v67, &v61);
                swift_bridgeObjectRelease(v33);
                swift_bridgeObjectRelease(v58);
                swift_bridgeObjectRelease(v38);
                swift_release(v45);
                v29 = v74;
                swift_bridgeObjectRelease(v32);
                LOBYTE(v23) = v73;
                v30 = (v73 & 1) == v29;
                v10 = v48;
                v28 = a2;
                v27 = v52;
                if (v30)
                  goto LABEL_10;
                goto LABEL_20;
              }
              swift_release(v45);
              v43 += 2;
              v41 = v57;
              v30 = v56-- == 1;
              v42 = v58;
            }
            while (!v30);
            swift_bridgeObjectRelease(v33);
            swift_bridgeObjectRelease(v58);
            swift_bridgeObjectRelease(v38);
            v6 = v49;
            swift_bridgeObjectRelease(v49);
            v10 = v48;
            v28 = a2;
            v27 = v52;
            LOBYTE(v23) = v73;
            swift_bridgeObjectRelease(v32);
            if ((v23 & 1) == 0)
              goto LABEL_10;
LABEL_20:
            swift_bridgeObjectRelease(v6);
            *a1 = v27;
            return v23 & 1;
          }
          v46 = swift_bridgeObjectRetain(v31[4]);
          swift_bridgeObjectRelease(v46);
          if ((v23 & 1) != 0)
            goto LABEL_20;
LABEL_10:
          v8 = v27++;
        }
        while (v27 != v10);
        swift_bridgeObjectRelease(v6);
        *a1 = v10;
      }
    }
  }
  return v23 & 1;
}

char *sub_100022718(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003C84(&qword_10005A538);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100022810(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1000228B8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
      return (char *)memmove(result, v3, 48 * v6);
  }
  return result;
}

char *sub_100022974(uint64_t a1)
{
  return sub_100022718(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_100022988(_QWORD *a1)
{
  return sub_100021014(0, a1[2], 0, a1);
}

uint64_t sub_10002299C(unint64_t a1)
{
  return sub_100021134(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_10005A4A0, type metadata accessor for HourlyUsage);
}

Swift::Int sub_1000229D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003C84(&qword_10005A540);
  v44 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v14];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v25 = v42[v14];
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 48 * v22);
    v35 = *v34;
    v36 = v34[1];
    v37 = v34[2];
    v38 = v34[4];
    v45 = v34[5];
    v46 = v34[3];
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v47, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 48 * v18);
    *v20 = v35;
    v20[1] = v36;
    v20[2] = v37;
    v20[3] = v46;
    v20[4] = v38;
    v20[5] = v45;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100022D30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100003C84(&qword_10005A518);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release(v9);
    v38 = v42;
LABEL_44:
    *v38 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  v41 = a2;
  v19 = 16;
  if ((a2 & 1) != 0)
    v19 = 32;
  v45 = v19;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_26;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v23 >= v43)
    {
      swift_release(v9);
      v38 = v42;
      v24 = v44;
      if ((v41 & 1) != 0)
      {
LABEL_39:
        v39 = 1 << *(_BYTE *)(v9 + 32);
        if (v39 >= 64)
          bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v24 = -1 << v39;
        *(_QWORD *)(v9 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v9);
      goto LABEL_44;
    }
    v24 = v44;
    v25 = v44[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v18];
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_26:
    v27 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v45))(v8, *(_QWORD *)(v9 + 48) + v27 * v22, v5);
    v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v22);
    v29 = *(_QWORD *)(v11 + 40);
    v30 = sub_10000DF58(&qword_10005A4B0, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v31 = -1 << *(_BYTE *)(v11 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v27 * v20, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v20) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  v26 = v23 + 2;
  if (v26 >= v43)
  {
LABEL_36:
    swift_release(v9);
    v38 = v42;
    if ((v41 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v25 = v44[v26];
  if (v25)
  {
    v18 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v43)
      goto LABEL_36;
    v25 = v44[v18];
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1000230C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  char v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003C84(&qword_10005A548);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v41 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v43 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v42 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v23 >= v42)
          goto LABEL_36;
        v24 = v43[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v42)
            goto LABEL_36;
          v24 = v43[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v42)
            {
LABEL_36:
              swift_release(v5);
              v3 = v41;
              if ((v45 & 1) != 0)
              {
                v40 = 1 << *(_BYTE *)(v5 + 32);
                if (v40 >= 64)
                  bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v40;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v43[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v14 >= v42)
                  goto LABEL_36;
                v24 = v43[v14];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v14 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 56 * v22;
      v34 = *(_QWORD *)v33;
      v47 = *(_OWORD *)(v33 + 8);
      v35 = *(void **)(v33 + 24);
      v36 = *(_QWORD *)(v33 + 32);
      v37 = *(_QWORD *)(v33 + 48);
      v46 = *(_QWORD *)(v33 + 40);
      if ((v45 & 1) == 0)
      {
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v47);
        v38 = *((id *)&v47 + 1);
        v39 = v35;
        swift_bridgeObjectRetain(v37);
      }
      Hasher.init(_seed:)(v48, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v48, v32, v31);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = *(_QWORD *)(v8 + 56) + 56 * v18;
      *(_QWORD *)v20 = v34;
      *(_OWORD *)(v20 + 8) = v47;
      *(_QWORD *)(v20 + 24) = v35;
      *(_QWORD *)(v20 + 32) = v36;
      *(_QWORD *)(v20 + 40) = v46;
      *(_QWORD *)(v20 + 48) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100023430(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003C84(&qword_10005A4A8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100023734(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v5 = v3;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_100003C84(a3);
  v47 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v45 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v5;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v12);
          v5 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
      swift_bridgeObjectRetain(v31);
    }
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_10000DF58(&qword_10005A4B0, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v5 = v14;
  return result;
}

void *sub_100023ACC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  sub_100003C84(&qword_10005A540);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = v21[4];
    v27 = v21[5];
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v19;
    v28[1] = v18;
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v29 = v22;
    v29[1] = v23;
    v29[2] = v24;
    v29[3] = v25;
    v29[4] = v26;
    v29[5] = v27;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    result = (void *)swift_bridgeObjectRetain(v26);
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100023CB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DateInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003C84(&qword_10005A518);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v20);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100023EE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  id v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  __int128 v34;

  v1 = v0;
  sub_100003C84(&qword_10005A548);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 56 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(void **)(v21 + 24);
    v24 = *(_QWORD *)(v21 + 32);
    v25 = *(_QWORD *)(v21 + 40);
    v26 = *(_QWORD *)(v21 + 48);
    v27 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v34 = *(_OWORD *)(v21 + 8);
    *v27 = v19;
    v27[1] = v18;
    v28 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v28 = v22;
    *(_OWORD *)(v28 + 8) = v34;
    *(_QWORD *)(v28 + 24) = v23;
    *(_QWORD *)(v28 + 32) = v24;
    *(_QWORD *)(v28 + 40) = v25;
    *(_QWORD *)(v28 + 48) = v26;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v34);
    v29 = *((id *)&v34 + 1);
    v30 = v23;
    result = (void *)swift_bridgeObjectRetain(v26);
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000240F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003C84(&qword_10005A4A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000242A4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for DateInterval(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003C84(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v7);
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000244D4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1000244E8(uint64_t a1)
{
  return sub_10002200C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

BOOL sub_1000244FC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v8;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16))
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
        return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v8 & 1) != 0)
        return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *sub_100024598(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100024680(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_100024770(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100003C84(&qword_10005A570);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v44 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v42 = v1;
    while (1)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      v11 = __OFADD__(v9++, 1);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }
      v12 = v10;
      v13 = NSObject._rawHashValue(seed:)(v4[5]);
      v14 = -1 << *((_BYTE *)v4 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        sub_10002AB3C();
        v19 = *(id *)(v4[6] + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12);
          v1 = v42;
          goto LABEL_18;
        }
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)();

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v42;
      }
      *(_QWORD *)&v8[8 * v16] = v18 | v17;
      *(_QWORD *)(v4[6] + 8 * v15) = v12;
      v24 = v4[2];
      v11 = __OFADD__(v24, 1);
      v25 = v24 + 1;
      if (v11)
        goto LABEL_44;
      v4[2] = v25;
LABEL_18:
      if (v9 == v44)
        return;
    }
  }
  v26 = 0;
  v43 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v43)
  {
    v27 = v4[5];
    v28 = *(id *)(v1 + 32 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      sub_10002AB3C();
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)();

      if ((v36 & 1) != 0)
        goto LABEL_30;
      v37 = ~v30;
      v31 = (v31 + 1) & v37;
      v32 = v31 >> 6;
      v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
      v34 = 1 << v31;
      if ((v33 & (1 << v31)) != 0)
      {
        while (1)
        {
          v38 = *(id *)(v4[6] + 8 * v31);
          v39 = static NSObject.== infix(_:_:)();

          if ((v39 & 1) != 0)
            break;
          v31 = (v31 + 1) & v37;
          v32 = v31 >> 6;
          v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
          v34 = 1 << v31;
          if ((v33 & (1 << v31)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v5 = v44;
        goto LABEL_31;
      }
LABEL_38:
      v5 = v44;
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_45;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v5)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_100024AC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_100024BB8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD v26[3];
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v1 = a1[3];
  v2 = a1[4];
  v3 = sub_100014EDC(a1, v1);
  __chkstk_darwin(v3);
  (*(void (**)(char *))(v5 + 16))((char *)&v26[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  sub_10002AB78(v26);
  dispatch thunk of Sequence.makeIterator()(v1);
  v6 = AssociatedTypeWitness;
  v7 = AssociatedConformanceWitness;
  sub_10002ABB4((uint64_t)v26, AssociatedTypeWitness);
  dispatch thunk of IteratorProtocol.next()(v6, v7);
  v8 = v25;
  if (v25)
  {
    v9 = _swiftEmptyArrayStorage;
    while (1)
    {
      result = objc_msgSend(v8, "device");
      if (!result)
        break;
      v14 = result;
      v15 = objc_msgSend(result, "platform");

      if (v15 == 2)
        goto LABEL_3;
      result = objc_msgSend(v8, "device");
      if (!result)
        goto LABEL_18;
      v16 = result;
      v17 = objc_msgSend(result, "platform");

      if (v17 == 1)
      {
LABEL_3:
        v10 = objc_msgSend(v8, "coreDuetIdentifier");
        if (v10)
        {
          v18 = v10;
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v21 = v20;

          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_100021340(0, v9[2] + 1, 1, v9);
          v23 = v9[2];
          v22 = v9[3];
          if (v23 >= v22 >> 1)
            v9 = sub_100021340((_QWORD *)(v22 > 1), v23 + 1, 1, v9);
          v9[2] = v23 + 1;
          v24 = &v9[2 * v23];
          v24[4] = v19;
          v24[5] = v21;
        }
      }

      v11 = AssociatedTypeWitness;
      v12 = AssociatedConformanceWitness;
      sub_10002ABB4((uint64_t)v26, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()(v11, v12);
      v8 = v25;
      if (!v25)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
LABEL_16:
    sub_100018494(v26);
    return v9;
  }
  return result;
}

void sub_100024E38(void *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  id v4;
  unsigned __int8 v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *oslog;
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _QWORD v41[5];
  _BYTE v42[24];
  _BYTE v43[24];

  if (a1)
  {
    v3 = (unsigned __int8 *)(a2 + 16);
    v4 = a1;
    v5 = objc_msgSend(v4, "screenTimeEnabled");
    swift_beginAccess(v3, v43, 1, 0);
    *v3 = v5;
    v6 = objc_msgSend(v4, "altDSID");
    if (v6)
    {
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;

    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    swift_beginAccess(v3, v42, 1, 0);
    v15 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v10;
    swift_bridgeObjectRelease(v15);
    v16 = objc_msgSend(v4, "userDeviceStates");
    if (v16)
    {
      v17 = v16;
      v18 = sub_10002AB3C();
      v19 = sub_10000DF58(&qword_10005A568, (uint64_t (*)(uint64_t))sub_10002AB3C, (uint64_t)&protocol conformance descriptor for NSObject);
      v20 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v17, v18, v19);

    }
    else
    {
      v20 = 0;
    }
    v41[3] = sub_100003C84(&qword_10005A550);
    v41[4] = sub_100009F64(&qword_10005A558, &qword_10005A550, (uint64_t)&protocol conformance descriptor for Set<A>);
    if (!v20)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_100024770((uint64_t)_swiftEmptyArrayStorage);
        v20 = v36;
      }
      else
      {
        v20 = &_swiftEmptySetSingleton;
      }
    }
    v41[0] = v20;
    v21 = sub_100024BB8(v41);
    sub_100018494(v41);
    swift_beginAccess(v3, v41, 1, 0);
    v22 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v21;
    swift_bridgeObjectRelease(v22);
    v23 = objc_msgSend(v4, "dsid");
    swift_beginAccess(v3, v40, 1, 0);
    v24 = *(void **)(a2 + 48);
    *(_QWORD *)(a2 + 48) = v23;

    v25 = objc_msgSend(v4, "localizedFullName");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    swift_beginAccess(v3, v39, 1, 0);
    v29 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 56) = v26;
    *(_QWORD *)(a2 + 64) = v28;
    swift_bridgeObjectRelease(v29);
    v30 = objc_msgSend(v4, "appleID");
    if (v30)
    {
      v31 = v30;
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v34 = v33;

    }
    else
    {

      v32 = 0;
      v34 = 0;
    }
    swift_beginAccess(v3, v38, 1, 0);
    v35 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 72) = v32;
    *(_QWORD *)(a2 + 80) = v34;
    *(_BYTE *)(a2 + 88) = 1;
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100006BC8(v11, (uint64_t)qword_10005A298);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "unable to fetch user properties", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
}

uint64_t sub_1000251C8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 72) = a1;
  return swift_task_switch(sub_1000251EC, 0, 0);
}

uint64_t sub_1000251EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char *v17;

  if (*(_BYTE *)(v0 + 72) == 1)
  {
    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100006BC8(v1, (uint64_t)qword_10005A298);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch profile picture started", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 16);

    if (v7 && v6)
    {
      v9 = *(_QWORD *)(v0 + 32);
      v10 = unk_100059B0C;
      v17 = (char *)&dword_100059B08 + dword_100059B08;
      v11 = *(id *)(v0 + 16);
      v12 = (_QWORD *)swift_task_alloc(v10);
      *(_QWORD *)(v0 + 56) = v12;
      *v12 = v0;
      v12[1] = sub_1000253C8;
      return ((uint64_t (*)(id, _QWORD, uint64_t, _QWORD, _QWORD))v17)(v11, *(_QWORD *)(v0 + 24), v9, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
    }
    v14 = Logger.logObject.getter(v8);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "couldn't fetch profile pic because dsid or full name was nil", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000253C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100025424, 0, 0);
}

uint64_t sub_100025424()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10002545C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD, _QWORD, _QWORD);
  char *v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v129)@<X0>(_QWORD *@<X8>);
  char *v130;
  uint64_t v131;
  uint64_t j;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(_QWORD, _QWORD, _QWORD);
  uint64_t i;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  char v188;
  unint64_t v189;
  uint64_t v190;
  _BOOL8 v191;
  uint64_t v192;
  char v193;
  unint64_t v194;
  char v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)@<X0>(_QWORD *@<X8>);
  uint64_t v208;
  double (*v209)@<D0>(_OWORD *@<X8>);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t (*v215)@<X0>(_QWORD *@<X8>);
  uint64_t v216;
  double (*v217)@<D0>(_OWORD *@<X8>);
  uint64_t v218;
  uint64_t result;
  uint64_t v220;
  uint64_t (*v221)@<X0>(_QWORD *@<X8>);
  _QWORD *v222;
  double (*v223)@<D0>(_OWORD *@<X8>);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t (*v228)(char *, uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t (*v248)(_QWORD, _QWORD, _QWORD);
  uint64_t v249;
  char *v250;
  uint64_t (*v251)@<X0>(_QWORD *@<X8>);
  uint64_t v252;
  double (*v253)@<D0>(_OWORD *@<X8>);
  uint64_t v254;
  _QWORD *v255;
  double (*v256)@<D0>(_OWORD *@<X8>);
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t (*v260)@<X0>(_QWORD *@<X8>);
  uint64_t v261;
  uint64_t v262;
  char *v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;

  v2 = type metadata accessor for _DeviceActivityData.WebDomainActivity(0);
  v258 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v220 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for _DeviceActivityData.ApplicationActivity(0);
  v259 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v220 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for _DeviceActivityData.CategoryActivity(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v220 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v238 = (char *)&v220 - v14;
  v15 = __chkstk_darwin(v13);
  v239 = (char *)&v220 - v16;
  v17 = __chkstk_darwin(v15);
  v244 = (char *)&v220 - v18;
  __chkstk_darwin(v17);
  v243 = (char *)&v220 - v19;
  v20 = type metadata accessor for _DeviceActivityData.ActivitySegment(0);
  __chkstk_darwin(v20);
  v24 = (char *)&v220 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = *(_QWORD *)(a1 + 16);
  if (!v227)
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v215 = 0;
    v216 = 0;
    v217 = 0;
    v218 = 0;
    v264 = &_swiftEmptyDictionarySingleton;
LABEL_92:
    sub_10002A948((uint64_t)v207, v208);
    sub_10002A948((uint64_t)v209, v210);
    sub_10002A948(v211, v212);
    sub_10002A948(v213, v214);
    sub_10002A948((uint64_t)v215, v216);
    sub_10002A948((uint64_t)v217, v218);
    return (uint64_t)v264;
  }
  v230 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  v229 = *(_QWORD *)(v22 + 72);
  v225 = v22;
  v228 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v237 = CTCategoryIdentifierSystemUnblockable;
  v236 = CTCategoryIdentifierSystemBlockable;
  v246 = CTCategoryIdentifierSystemHidden;
  v220 = a1;
  v25 = a1;
  v26 = v21;
  swift_bridgeObjectRetain(v25);
  v221 = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v260 = 0;
  v255 = 0;
  v256 = 0;
  v257 = 0;
  v251 = 0;
  v252 = 0;
  v253 = 0;
  v254 = 0;
  v27 = 0;
  v263 = v4;
  v264 = &_swiftEmptyDictionarySingleton;
  v28 = v2;
  v261 = v5;
  v262 = v2;
  v250 = v7;
  v245 = v9;
  v235 = v12;
  v233 = v8;
  v226 = v26;
  v232 = v24;
  while (1)
  {
    v231 = v27;
    v30 = v228(v24, v230 + v229 * v27, v26);
    v31 = _DeviceActivityData.ActivitySegment.categoryActivities.getter(v30);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v241 = v31;
      v34 = v31 + v33;
      v35 = *(_QWORD *)(v9 + 72);
      v36 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v9 + 16);
      v37 = v244;
      v38 = v243;
      v248 = v36;
      v242 = v35;
      while (1)
      {
        v249 = v32;
        v39 = v36(v38, v34, v8);
        v40 = _DeviceActivityData.CategoryActivity.totalActivityDuration.getter(v39);
        v41 = v8;
        v36(v37, v38, v8);
        if (v40 > 0.0)
          break;
        v56 = *(void (**)(char *, uint64_t))(v245 + 8);
        v57 = v41;
        v56(v37, v41);
LABEL_15:
        v38 = v243;
        v56(v243, v57);
        v34 += v35;
        v32 = v249 - 1;
        v8 = v57;
        v36 = v248;
        if (v249 == 1)
        {
          v111 = swift_bridgeObjectRelease(v241);
          v9 = v245;
          v12 = v235;
          goto LABEL_43;
        }
      }
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v237);
      v44 = v43;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v236);
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
      v247 = v49;
      v50 = ((uint64_t (*)(void))_DeviceActivityData.CategoryActivity.identifier.getter)();
      v52 = v51;
      if (v50 == v42 && v51 == v44)
      {
        swift_bridgeObjectRelease_n(v44, 2);
        v53 = v239;
        v54 = v244;
        v55 = v41;
        v36(v239, v244, v41);
      }
      else
      {
        v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease(v44);
        v53 = v239;
        v54 = v244;
        v55 = v41;
        v59 = v36(v239, v244, v41);
        if ((v58 & 1) == 0)
        {
          v62 = _DeviceActivityData.CategoryActivity.identifier.getter(v59);
          v64 = v63;
          v60 = v238;
          if (v62 == v45 && v63 == v47)
          {
            v65 = v48;
            v66 = 1;
            v64 = v47;
          }
          else
          {
            v65 = v48;
            v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          v57 = v41;
          v61 = v247;
          swift_bridgeObjectRelease(v47);
          swift_bridgeObjectRelease(v64);
          v56 = *(void (**)(char *, uint64_t))(v245 + 8);
          v56(v239, v57);
          v67 = v248(v60, v244, v57);
          v4 = v263;
          if ((v66 & 1) == 0)
          {
            v68 = _DeviceActivityData.CategoryActivity.identifier.getter(v67);
            v70 = v69;
            if (v68 != v65 || v69 != v61)
            {
              v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease(v61);
              swift_bridgeObjectRelease(v70);
              v56(v60, v57);
              v37 = v244;
              v72 = ((uint64_t (*)(char *, uint64_t))v56)(v244, v57);
              if ((v71 & 1) != 0)
              {
                v5 = v261;
                v28 = v262;
              }
              else
              {
                v73 = _DeviceActivityData.CategoryActivity.identifier.getter(v72);
                v75 = v74;
                v76 = _DeviceActivityData.CategoryActivity.localizedDisplayName.getter();
                if (v77)
                {
                  v78 = v76;
                  v79 = v77;
                }
                else
                {
                  swift_bridgeObjectRetain(v75);
                  v78 = v73;
                  v79 = v75;
                }
                v80 = (_QWORD *)swift_allocObject(&unk_1000569D0, 48, 7);
                v80[2] = v78;
                v80[3] = v79;
                v80[4] = v73;
                v80[5] = v75;
                swift_bridgeObjectRetain(v75);
                v81 = sub_10002A948((uint64_t)v221, (uint64_t)v222);
                v82 = _DeviceActivityData.CategoryActivity.totalActivityDuration.getter(v81);
                v83 = swift_allocObject(&unk_1000569F8, 32, 7);
                *(_QWORD *)(v83 + 16) = sub_10002AA44;
                *(_QWORD *)(v83 + 24) = v80;
                sub_10002A948((uint64_t)v223, v224);
                v84 = v264;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v264);
                v86 = v75;
                v87 = isUniquelyReferenced_nonNull_native;
                v265 = v84;
                v247 = v86;
                v89 = sub_1000216D8(v73, v86);
                v90 = v84[2];
                v91 = (v88 & 1) == 0;
                v92 = v90 + v91;
                if (__OFADD__(v90, v91))
                  goto LABEL_98;
                v93 = v88;
                if (v84[3] >= v92)
                {
                  if ((v87 & 1) == 0)
                    sub_100023ACC();
                }
                else
                {
                  sub_1000229D0(v92, v87);
                  v94 = sub_1000216D8(v73, v247);
                  if ((v93 & 1) != (v95 & 1))
                    goto LABEL_100;
                  v89 = v94;
                }
                v4 = v263;
                v96 = v265;
                swift_bridgeObjectRelease(0x8000000000000000);
                v97 = swift_bridgeObjectRetain(v96);
                if ((v93 & 1) == 0)
                {
                  (*(void (**)(_QWORD **__return_ptr, uint64_t))(v83 + 16))(&v265, v97);
                  v98 = v265;
                  v99 = v266;
                  v100 = v267;
                  v101 = v268;
                  v102 = v269;
                  v96[(v89 >> 6) + 8] |= 1 << v89;
                  v103 = (uint64_t *)(v96[6] + 16 * v89);
                  v104 = v247;
                  *v103 = v73;
                  v103[1] = v104;
                  v105 = v96[7] + 48 * v89;
                  *(_QWORD *)v105 = v98;
                  *(_QWORD *)(v105 + 8) = v99;
                  *(_QWORD *)(v105 + 16) = v100;
                  *(_OWORD *)(v105 + 24) = v101;
                  *(_QWORD *)(v105 + 40) = v102;
                  v106 = v96[2];
                  v107 = __OFADD__(v106, 1);
                  v108 = v106 + 1;
                  if (v107)
                    goto LABEL_99;
                  v96[2] = v108;
                  swift_bridgeObjectRetain(v104);
                }
                v109 = v96;
                v110 = v96[7];
                v264 = v109;
                swift_bridgeObjectRelease(v109);
                *(double *)(v110 + 48 * v89 + 16) = v82 + *(double *)(v110 + 48 * v89 + 16);
                swift_bridgeObjectRelease(v247);
                v221 = sub_10002AA44;
                v222 = v80;
                v223 = sub_10002B014;
                v224 = v83;
                v5 = v261;
                v28 = v262;
                v37 = v244;
              }
              v35 = v242;
              goto LABEL_15;
            }
            swift_bridgeObjectRelease_n(v61, 2);
            v56(v60, v57);
            v5 = v261;
            v28 = v262;
            v37 = v244;
            v35 = v242;
            goto LABEL_14;
          }
          v35 = v242;
LABEL_13:
          v56(v60, v57);
          swift_bridgeObjectRelease(v61);
          v5 = v261;
          v28 = v262;
          v37 = v244;
LABEL_14:
          v56(v37, v57);
          goto LABEL_15;
        }
      }
      v56 = *(void (**)(char *, uint64_t))(v245 + 8);
      v56(v53, v55);
      swift_bridgeObjectRelease(v47);
      v60 = v238;
      v36(v238, v54, v55);
      v4 = v263;
      v35 = v242;
      v57 = v55;
      v61 = v247;
      goto LABEL_13;
    }
    v111 = swift_bridgeObjectRelease(v31);
LABEL_43:
    v112 = _DeviceActivityData.ActivitySegment.categoryActivities.getter(v111);
    v242 = *(_QWORD *)(v112 + 16);
    if (v242)
      break;
LABEL_3:
    swift_bridgeObjectRelease(v112);
    v29 = v231 + 1;
    v24 = v232;
    v26 = v226;
    (*(void (**)(char *, uint64_t))(v225 + 8))(v232, v226);
    v27 = v29;
    if (v29 == v227)
    {
      swift_bridgeObjectRelease(v220);
      v217 = v253;
      v218 = v254;
      v213 = (uint64_t)v256;
      v214 = v257;
      v210 = v224;
      v209 = v223;
      v216 = v252;
      v215 = v251;
      v212 = (uint64_t)v255;
      v211 = (uint64_t)v260;
      v208 = (uint64_t)v222;
      v207 = v221;
      goto LABEL_92;
    }
  }
  v113 = 0;
  v241 = v112 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v240 = v112;
  while (1)
  {
    if (v113 >= *(_QWORD *)(v112 + 16))
      goto LABEL_97;
    v114 = *(_QWORD *)(v9 + 72);
    v247 = v113;
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, v241 + v114 * v113, v8);
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
    v117 = v116;
    v118 = _DeviceActivityData.CategoryActivity.identifier.getter(v115);
    v120 = v119;
    if (v118 != v115 || v119 != v117)
      break;
    swift_bridgeObjectRelease_n(v117, 2);
LABEL_46:
    v113 = v247 + 1;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v112 = v240;
    if (v113 == v242)
      goto LABEL_3;
  }
  v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease(v120);
  v122 = swift_bridgeObjectRelease(v117);
  if ((v121 & 1) != 0)
    goto LABEL_46;
  v123 = _DeviceActivityData.CategoryActivity.applicationActivities.getter(v122);
  v124 = *(_QWORD *)(v123 + 16);
  if (!v124)
  {
    v169 = swift_bridgeObjectRelease(v123);
    v131 = v28;
LABEL_72:
    v170 = _DeviceActivityData.CategoryActivity.webDomainActivities.getter(v169);
    v171 = *(_QWORD *)(v170 + 16);
    if (v171)
    {
      v172 = (*(unsigned __int8 *)(v258 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v258 + 80);
      v234 = v170;
      v173 = v170 + v172;
      v174 = *(_QWORD *)(v258 + 72);
      v175 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v258 + 16);
      v249 = v174;
      v248 = v175;
      for (i = v175(v4, v170 + v172, v131); ; i = v175(v4, v173, v131))
      {
        if (_DeviceActivityData.WebDomainActivity.totalActivityDuration.getter(i) > 0.0)
        {
          v179 = _DeviceActivityData.WebDomainActivity.domain.getter();
          v181 = v180;
          v182 = swift_allocObject(&unk_100056930, 32, 7);
          *(_QWORD *)(v182 + 16) = v179;
          *(_QWORD *)(v182 + 24) = v181;
          swift_bridgeObjectRetain(v181);
          v183 = sub_10002A948((uint64_t)v251, v252);
          v184 = _DeviceActivityData.WebDomainActivity.totalActivityDuration.getter(v183);
          v185 = swift_allocObject(&unk_100056958, 32, 7);
          *(_QWORD *)(v185 + 16) = sub_10002A97C;
          *(_QWORD *)(v185 + 24) = v182;
          sub_10002A948((uint64_t)v253, v254);
          v186 = v264;
          v187 = swift_isUniquelyReferenced_nonNull_native(v264);
          v265 = v186;
          v189 = sub_1000216D8(v179, v181);
          v190 = v186[2];
          v191 = (v188 & 1) == 0;
          v192 = v190 + v191;
          if (__OFADD__(v190, v191))
            goto LABEL_94;
          v193 = v188;
          if (v186[3] >= v192)
          {
            if ((v187 & 1) == 0)
              sub_100023ACC();
          }
          else
          {
            sub_1000229D0(v192, v187);
            v194 = sub_1000216D8(v179, v181);
            if ((v193 & 1) != (v195 & 1))
              goto LABEL_100;
            v189 = v194;
          }
          v196 = v265;
          swift_bridgeObjectRelease(0x8000000000000000);
          v197 = swift_bridgeObjectRetain(v196);
          if ((v193 & 1) == 0)
          {
            (*(void (**)(_QWORD **__return_ptr, uint64_t))(v185 + 16))(&v265, v197);
            v198 = v265;
            v199 = v266;
            v200 = v267;
            v201 = v268;
            v202 = v269;
            v196[(v189 >> 6) + 8] |= 1 << v189;
            v203 = (uint64_t *)(v196[6] + 16 * v189);
            *v203 = v179;
            v203[1] = v181;
            v204 = v196[7] + 48 * v189;
            *(_QWORD *)v204 = v198;
            *(_QWORD *)(v204 + 8) = v199;
            *(_QWORD *)(v204 + 16) = v200;
            *(_OWORD *)(v204 + 24) = v201;
            *(_QWORD *)(v204 + 40) = v202;
            v205 = v196[2];
            v107 = __OFADD__(v205, 1);
            v206 = v205 + 1;
            if (v107)
              goto LABEL_96;
            v196[2] = v206;
            swift_bridgeObjectRetain(v181);
          }
          v177 = v196;
          v178 = v196[7];
          v264 = v177;
          swift_bridgeObjectRelease(v177);
          *(double *)(v178 + 48 * v189 + 16) = v184 + *(double *)(v178 + 48 * v189 + 16);
          swift_bridgeObjectRelease(v181);
          v251 = sub_10002A97C;
          v252 = v182;
          v253 = sub_10002A9B8;
          v254 = v185;
          v131 = v262;
          v4 = v263;
          v5 = v261;
          v174 = v249;
          v175 = v248;
        }
        (*(void (**)(char *, uint64_t))(v258 + 8))(v4, v131);
        v173 += v174;
        if (!--v171)
          break;
      }
      v28 = v131;
      swift_bridgeObjectRelease(v234);
      v8 = v233;
      v9 = v245;
      v12 = v235;
    }
    else
    {
      v28 = v131;
      swift_bridgeObjectRelease(v170);
      v8 = v233;
    }
    goto LABEL_46;
  }
  v125 = (*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80);
  v234 = v123;
  v126 = v123 + v125;
  v127 = *(_QWORD *)(v259 + 72);
  v128 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v259 + 16);
  v129 = v260;
  v130 = v250;
  v131 = v28;
  v249 = v127;
  v248 = v128;
  for (j = v128(v250, v123 + v125, v5); ; j = v128(v130, v126, v5))
  {
    if (_DeviceActivityData.ApplicationActivity.totalActivityDuration.getter(j) <= 0.0)
      goto LABEL_54;
    v260 = v129;
    v135 = _DeviceActivityData.ApplicationActivity.bundleIdentifier.getter();
    v137 = v136;
    v138 = _DeviceActivityData.ApplicationActivity.localizedDisplayName.getter();
    if (v139)
    {
      v140 = v138;
      v141 = v139;
    }
    else
    {
      swift_bridgeObjectRetain(v137);
      v140 = v135;
      v141 = v137;
    }
    v143 = (uint64_t)v256;
    v142 = v257;
    v144 = (_QWORD *)swift_allocObject(&unk_100056980, 48, 7);
    v144[2] = v140;
    v144[3] = v141;
    v144[4] = v135;
    v144[5] = v137;
    swift_bridgeObjectRetain(v137);
    v145 = sub_10002A948((uint64_t)v260, (uint64_t)v255);
    v146 = _DeviceActivityData.ApplicationActivity.totalActivityDuration.getter(v145);
    v147 = swift_allocObject(&unk_1000569A8, 32, 7);
    *(_QWORD *)(v147 + 16) = sub_10002A9FC;
    *(_QWORD *)(v147 + 24) = v144;
    sub_10002A948(v143, v142);
    v148 = v264;
    v149 = swift_isUniquelyReferenced_nonNull_native(v264);
    v265 = v148;
    v260 = (uint64_t (*)@<X0>(_QWORD *@<X8>))v135;
    v151 = sub_1000216D8(v135, v137);
    v152 = v148[2];
    v153 = (v150 & 1) == 0;
    v154 = v152 + v153;
    if (__OFADD__(v152, v153))
      break;
    v155 = v150;
    if (v148[3] >= v154)
    {
      if ((v149 & 1) == 0)
        sub_100023ACC();
    }
    else
    {
      sub_1000229D0(v154, v149);
      v156 = sub_1000216D8((uint64_t)v260, v137);
      if ((v155 & 1) != (v157 & 1))
        goto LABEL_100;
      v151 = v156;
    }
    v158 = v265;
    swift_bridgeObjectRelease(0x8000000000000000);
    v159 = swift_bridgeObjectRetain(v158);
    if ((v155 & 1) == 0)
    {
      (*(void (**)(_QWORD **__return_ptr, uint64_t))(v147 + 16))(&v265, v159);
      v160 = v265;
      v161 = v266;
      v162 = v267;
      v163 = v268;
      v164 = v269;
      v158[(v151 >> 6) + 8] |= 1 << v151;
      v165 = (_QWORD *)(v158[6] + 16 * v151);
      *v165 = v260;
      v165[1] = v137;
      v166 = v158[7] + 48 * v151;
      *(_QWORD *)v166 = v160;
      *(_QWORD *)(v166 + 8) = v161;
      *(_QWORD *)(v166 + 16) = v162;
      *(_OWORD *)(v166 + 24) = v163;
      *(_QWORD *)(v166 + 40) = v164;
      v167 = v158[2];
      v107 = __OFADD__(v167, 1);
      v168 = v167 + 1;
      if (v107)
        goto LABEL_95;
      v158[2] = v168;
      swift_bridgeObjectRetain(v137);
    }
    v133 = v158;
    v134 = v158[7];
    v264 = v133;
    swift_bridgeObjectRelease(v133);
    *(double *)(v134 + 48 * v151 + 16) = v146 + *(double *)(v134 + 48 * v151 + 16);
    swift_bridgeObjectRelease(v137);
    v129 = sub_10002A9FC;
    v255 = v144;
    v256 = sub_10002B014;
    v257 = v147;
    v131 = v262;
    v4 = v263;
    v5 = v261;
    v130 = v250;
    v127 = v249;
    v128 = v248;
LABEL_54:
    (*(void (**)(char *, uint64_t))(v259 + 8))(v130, v5);
    v126 += v127;
    if (!--v124)
    {
      v260 = v129;
      v169 = swift_bridgeObjectRelease(v234);
      v9 = v245;
      v12 = v235;
      goto LABEL_72;
    }
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000265A0(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *__return_ptr, uint64_t *, uint64_t *);
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t result;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v65;
  char *v66;
  char *v67;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *__return_ptr, uint64_t *, uint64_t *);
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v98 = __src;
  v97 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      if (__dst != a2 || &a2[48 * v11] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v31 = &v5[48 * v11];
      v96 = v31;
      v98 = v6;
      v32 = (char *)a3;
      if (v10 >= 48 && v7 < v6)
      {
        v33 = *(_QWORD *)(a5 + 16);
        v55 = v33;
        v62 = v7;
        v63 = v5;
        while (1)
        {
          v34 = v32 - 48;
          v35 = v31 - 48;
          v36 = *((_QWORD *)v31 - 6);
          if (!v33)
            goto LABEL_45;
          v58 = v32 - 48;
          v60 = v31;
          v65 = v32;
          v67 = v6;
          v37 = *((_QWORD *)v31 - 5);
          v38 = *((_QWORD *)v31 - 4);
          v39 = *((_QWORD *)v31 - 3);
          v40 = *((_QWORD *)v31 - 2);
          v42 = *((_QWORD *)v6 - 6);
          v41 = *((_QWORD *)v6 - 5);
          v56 = v6 - 48;
          v57 = v31 - 48;
          v70 = *((_QWORD *)v31 - 1);
          v43 = *((_QWORD *)v6 - 4);
          v44 = *((_QWORD *)v6 - 2);
          v74 = *((_QWORD *)v6 - 3);
          v72 = *((_QWORD *)v6 - 1);
          swift_bridgeObjectRetain(a5);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v41);
          v81 = v44;
          swift_bridgeObjectRetain(v44);
          v45 = (uint64_t *)(a5 + 40);
          v46 = v33;
          v77 = v42;
          v79 = v37;
          while (1)
          {
            v48 = (void (*)(char *__return_ptr, uint64_t *, uint64_t *))*(v45 - 1);
            v47 = *v45;
            v90 = v36;
            v91 = v37;
            v92 = v38;
            v93 = v39;
            v94 = v40;
            v95 = v70;
            v84 = v42;
            v85 = v41;
            v86 = v43;
            v87 = v74;
            v88 = v81;
            v89 = v72;
            swift_retain(v47);
            v48(&v83, &v90, &v84);
            if ((v83 & 1) != 0)
              break;
            v90 = v77;
            v91 = v41;
            v92 = v43;
            v93 = v74;
            v94 = v81;
            v95 = v72;
            v84 = v36;
            v85 = v79;
            v86 = v38;
            v87 = v39;
            v88 = v40;
            v89 = v70;
            v48(&v83, &v90, &v84);
            if (v83 == 1)
              break;
            swift_release(v47);
            v45 += 2;
            --v46;
            v42 = v77;
            v37 = v79;
            if (!v46)
            {
              swift_bridgeObjectRelease(v40);
              swift_bridgeObjectRelease(v79);
              swift_bridgeObjectRelease(v81);
              swift_bridgeObjectRelease(v41);
              swift_bridgeObjectRelease(a5);
              v7 = v62;
              v5 = v63;
              v32 = v65;
              v6 = v67;
              v33 = v55;
              v34 = v58;
              v31 = v60;
              v35 = v57;
              goto LABEL_45;
            }
          }
          swift_bridgeObjectRelease(a5);
          v90 = v36;
          v91 = v79;
          v92 = v38;
          v93 = v39;
          v94 = v40;
          v95 = v70;
          v84 = v77;
          v85 = v41;
          v86 = v43;
          v87 = v74;
          v88 = v81;
          v89 = v72;
          v48(&v83, &v90, &v84);
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v79);
          swift_bridgeObjectRelease(v81);
          swift_bridgeObjectRelease(v41);
          swift_release(v47);
          v7 = v62;
          v5 = v63;
          v32 = v65;
          v6 = v67;
          v33 = v55;
          v34 = v58;
          v31 = v60;
          v35 = v57;
          if ((v83 & 1) != 0)
          {
            v49 = v56;
            if (v65 != v67 || v58 >= v67)
            {
              v50 = *(_OWORD *)v56;
              v51 = *((_OWORD *)v56 + 2);
              *((_OWORD *)v58 + 1) = *((_OWORD *)v56 + 1);
              *((_OWORD *)v58 + 2) = v51;
              *(_OWORD *)v58 = v50;
            }
            v98 = v56;
            if (v60 <= v63)
              goto LABEL_51;
          }
          else
          {
LABEL_45:
            v96 = v35;
            if (v32 < v31 || v34 >= v31 || v32 != v31)
            {
              v52 = *(_OWORD *)v35;
              v53 = *((_OWORD *)v35 + 2);
              *((_OWORD *)v34 + 1) = *((_OWORD *)v35 + 1);
              *((_OWORD *)v34 + 2) = v53;
              *(_OWORD *)v34 = v52;
            }
            v49 = v6;
            v31 = v35;
            if (v35 <= v5)
              goto LABEL_51;
          }
          v6 = v49;
          v32 = v34;
          if (v49 <= v7)
            goto LABEL_51;
        }
      }
      goto LABEL_51;
    }
  }
  else if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v69 = &v5[48 * v9];
    v96 = v69;
    v12 = a3;
    if (v8 >= 48 && (unint64_t)v6 < a3)
    {
      v13 = *(_QWORD *)(a5 + 16);
      v59 = v13;
      do
      {
        if (!v13)
          goto LABEL_20;
        v61 = v7;
        v14 = *(_QWORD *)v6;
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v6 + 2);
        v17 = *((_QWORD *)v6 + 3);
        v18 = *((_QWORD *)v6 + 4);
        v66 = v6;
        v19 = *((_QWORD *)v6 + 5);
        v20 = *((_QWORD *)v5 + 1);
        v78 = *(_QWORD *)v5;
        v80 = v17;
        v21 = *((_QWORD *)v5 + 2);
        v22 = *((_QWORD *)v5 + 4);
        v71 = *((_QWORD *)v5 + 3);
        v73 = v14;
        v76 = *((_QWORD *)v5 + 5);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(a5);
        v23 = (uint64_t *)(a5 + 40);
        v24 = v13;
        while (1)
        {
          v75 = v24;
          v25 = *v23;
          v82 = (void (*)(char *__return_ptr, uint64_t *, uint64_t *))*(v23 - 1);
          v90 = v73;
          v91 = v15;
          v92 = v16;
          v93 = v80;
          v94 = v18;
          v95 = v19;
          v84 = v78;
          v85 = v20;
          v86 = v21;
          v87 = v71;
          v88 = v22;
          v89 = v76;
          swift_retain(v25);
          v82(&v83, &v90, &v84);
          if ((v83 & 1) != 0)
            break;
          v90 = v78;
          v91 = v20;
          v92 = v21;
          v93 = v71;
          v94 = v22;
          v95 = v76;
          v84 = v73;
          v85 = v15;
          v86 = v16;
          v87 = v80;
          v88 = v18;
          v89 = v19;
          v82(&v83, &v90, &v84);
          if (v83 == 1)
            break;
          swift_release(v25);
          v23 += 2;
          v24 = v75 - 1;
          if (v75 == 1)
          {
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v15);
            swift_bridgeObjectRelease(v22);
            swift_bridgeObjectRelease(v20);
            swift_bridgeObjectRelease(a5);
            v7 = v61;
            v12 = a3;
            v6 = v66;
            v13 = v59;
            goto LABEL_20;
          }
        }
        swift_bridgeObjectRelease(a5);
        v90 = v73;
        v91 = v15;
        v92 = v16;
        v93 = v80;
        v94 = v18;
        v95 = v19;
        v84 = v78;
        v85 = v20;
        v86 = v21;
        v87 = v71;
        v88 = v22;
        v89 = v76;
        v82(&v83, &v90, &v84);
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v20);
        swift_release(v25);
        v7 = v61;
        v12 = a3;
        v6 = v66;
        v13 = v59;
        if ((v83 & 1) != 0)
        {
          v26 = v66 + 48;
          if (v61 < v66 || v61 >= v26 || v61 != v66)
          {
            v27 = *(_OWORD *)v66;
            v28 = *((_OWORD *)v66 + 2);
            *((_OWORD *)v61 + 1) = *((_OWORD *)v66 + 1);
            *((_OWORD *)v61 + 2) = v28;
            *(_OWORD *)v61 = v27;
          }
        }
        else
        {
LABEL_20:
          if (v7 != v5)
          {
            v29 = *(_OWORD *)v5;
            v30 = *((_OWORD *)v5 + 2);
            *((_OWORD *)v7 + 1) = *((_OWORD *)v5 + 1);
            *((_OWORD *)v7 + 2) = v30;
            *(_OWORD *)v7 = v29;
          }
          v5 += 48;
          v97 = v5;
          v26 = v6;
        }
        v7 += 48;
        if (v5 >= v69)
          break;
        v6 = v26;
      }
      while ((unint64_t)v26 < v12);
      v98 = v7;
    }
LABEL_51:
    sub_1000228B8((void **)&v98, (const void **)&v97, &v96);
    return 1;
  }
  swift_bridgeObjectRelease(a5);
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100026C74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v22;
  __int128 v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v25 = result;
  v29 = a3;
  if (a3 != a2)
  {
    v5 = a5;
    v6 = *a4;
    v30 = *(_QWORD *)(a5 + 16);
    v26 = (uint64_t *)(a5 + 40);
    v27 = *a4;
    do
    {
      if (v30)
      {
        v7 = v29;
        v8 = (uint64_t *)(v6 + 48 * v29);
        v9 = *v8;
        v39 = v8[1];
        v10 = v8[2];
        v11 = v8[3];
        v12 = v8[4];
        v13 = v8[5];
        do
        {
          v32 = (_QWORD *)(v6 + 48 * v7);
          v33 = v7 - 1;
          v14 = *(v32 - 6);
          v31 = v32 - 6;
          v15 = *(v32 - 5);
          v16 = *(v32 - 4);
          v37 = *(v32 - 3);
          v17 = *(v32 - 2);
          v34 = *(v32 - 1);
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v15);
          v38 = v17;
          swift_bridgeObjectRetain(v17);
          swift_bridgeObjectRetain(v5);
          v18 = v26;
          v19 = v30;
          v36 = v14;
          while (1)
          {
            v35 = v19;
            v21 = (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))*(v18 - 1);
            v20 = *v18;
            v46 = v9;
            v47 = v39;
            v48 = v10;
            v49 = v11;
            v50 = v12;
            v51 = v13;
            v40 = v14;
            v41 = v15;
            v42 = v16;
            v43 = v37;
            v44 = v38;
            v45 = v34;
            swift_retain(v20);
            v21(&v52, &v46, &v40);
            if ((v52 & 1) != 0)
              break;
            v46 = v36;
            v47 = v15;
            v48 = v16;
            v49 = v37;
            v50 = v38;
            v51 = v34;
            v40 = v9;
            v41 = v39;
            v42 = v10;
            v43 = v11;
            v44 = v12;
            v45 = v13;
            v21(&v52, &v46, &v40);
            if (v52 == 1)
              break;
            swift_release(v20);
            v18 += 2;
            v19 = v35 - 1;
            v14 = v36;
            if (v35 == 1)
            {
              swift_bridgeObjectRelease(v12);
              swift_bridgeObjectRelease(v39);
              swift_bridgeObjectRelease(v38);
              swift_bridgeObjectRelease(v15);
              v5 = a5;
              result = swift_bridgeObjectRelease(a5);
              v6 = v27;
              goto LABEL_4;
            }
          }
          v5 = a5;
          swift_bridgeObjectRelease(a5);
          v46 = v9;
          v47 = v39;
          v48 = v10;
          v49 = v11;
          v50 = v12;
          v51 = v13;
          v40 = v36;
          v41 = v15;
          v42 = v16;
          v43 = v37;
          v44 = v38;
          v45 = v34;
          v21(&v52, &v46, &v40);
          swift_bridgeObjectRelease(v12);
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(v15);
          result = swift_release(v20);
          v6 = v27;
          v7 = v33;
          if ((v52 & 1) == 0)
            break;
          if (!v27)
          {
            __break(1u);
            return result;
          }
          v9 = *v32;
          v22 = v32[1];
          v10 = v32[2];
          v11 = v32[3];
          v12 = v32[4];
          v13 = v32[5];
          v23 = *((_OWORD *)v32 - 2);
          *(_OWORD *)v32 = *v31;
          *((_OWORD *)v32 + 1) = v23;
          *((_OWORD *)v32 + 2) = *((_OWORD *)v32 - 1);
          *(_QWORD *)v31 = v9;
          *(v32 - 5) = v22;
          v39 = v22;
          *(v32 - 4) = v10;
          *(v32 - 3) = v11;
          *(v32 - 2) = v12;
          *(v32 - 1) = v13;
        }
        while (v33 != v25);
      }
LABEL_4:
      ++v29;
    }
    while (v29 != a2);
  }
  return result;
}

uint64_t sub_100026FC0(uint64_t *a1, char *a2)
{
  char *v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  char *v112;
  uint64_t result;
  uint64_t *v114;
  char *v115;
  Swift::Int v116;
  Swift::Int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *__dst;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v2 = a2;
  v4 = a1[1];
  swift_bridgeObjectRetain_n(a2, 4);
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_141;
    if (!v4)
    {
      v9 = v2;
LABEL_115:
      swift_bridgeObjectRelease(v9);
      v100 = v2;
      v101 = 3;
      return swift_bridgeObjectRelease_n(v100, v101);
    }
    swift_bridgeObjectRetain(v2);
    sub_100026C74(0, v4, 1, a1, (uint64_t)v2);
    v9 = v2;
    if (v130)
    {
LABEL_97:
      swift_bridgeObjectRelease(v9);
      v100 = v2;
      v101 = 4;
      return swift_bridgeObjectRelease_n(v100, v101);
    }
LABEL_114:
    swift_bridgeObjectRelease(v2);
    goto LABEL_115;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_148;
  v131 = (uint64_t)v2;
  v116 = v5;
  v117 = v4;
  v114 = a1;
  if (v4 < 2)
  {
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    v115 = (char *)_swiftEmptyArrayStorage;
    if (v4 == 1)
      goto LABEL_13;
    v2 = (char *)_swiftEmptyArrayStorage;
    v47 = _swiftEmptyArrayStorage[2];
LABEL_100:
    if (v47 >= 2)
    {
      v102 = *v114;
      v141 = *v114;
      while (1)
      {
        v103 = v47 - 2;
        if (v47 < 2)
          goto LABEL_134;
        if (!v102)
          goto LABEL_147;
        v104 = v2;
        v105 = *(_QWORD *)&v2[16 * v103 + 32];
        v106 = *(_QWORD *)&v2[16 * v47 + 24];
        v107 = (char *)(v102 + 48 * v105);
        v108 = (char *)(v102 + 48 * *(_QWORD *)&v2[16 * v47 + 16]);
        v109 = v102 + 48 * v106;
        v2 = (char *)v131;
        swift_bridgeObjectRetain(v131);
        sub_1000265A0(v107, v108, v109, __dst, v131);
        if (v130)
        {
          swift_bridgeObjectRelease(v104);
          swift_bridgeObjectRelease(v131);
          v9 = v115;
          goto LABEL_96;
        }
        swift_bridgeObjectRelease(v131);
        if (v106 < v105)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
          v104 = sub_100022974((uint64_t)v104);
        if (v103 >= *((_QWORD *)v104 + 2))
          goto LABEL_136;
        v110 = &v104[16 * v103 + 32];
        *(_QWORD *)v110 = v105;
        *((_QWORD *)v110 + 1) = v106;
        v111 = *((_QWORD *)v104 + 2);
        if (v47 > v111)
          goto LABEL_137;
        v2 = v104;
        memmove(&v104[16 * v47 + 16], &v104[16 * v47 + 32], 16 * (v111 - v47));
        *((_QWORD *)v104 + 2) = v111 - 1;
        v47 = v111 - 1;
        v112 = (char *)v131;
        v102 = v141;
        if (v111 <= 2)
          goto LABEL_113;
      }
    }
    v112 = (char *)v131;
LABEL_113:
    swift_bridgeObjectRelease(v2);
    v9 = v115;
    *((_QWORD *)v115 + 2) = 0;
    v2 = v112;
    goto LABEL_114;
  }
  v7 = v6 >> 1;
  v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for UsageItem);
  *(_QWORD *)(v8 + 16) = v7;
  v115 = (char *)v8;
  __dst = (char *)(v8 + 32);
LABEL_13:
  v10 = 0;
  v11 = *a1;
  v121 = v2 + 40;
  v2 = (char *)_swiftEmptyArrayStorage;
  v12 = v117;
  v129 = v11;
  while (1)
  {
    swift_bridgeObjectRetain(v131);
    v13 = sub_100022318(&v148, v11, v12, v10, v131);
    if (v130)
    {
      swift_bridgeObjectRelease(v2);
      v9 = v115;
      v2 = (char *)v131;
LABEL_96:
      *((_QWORD *)v9 + 2) = 0;
      goto LABEL_97;
    }
    v14 = v148;
    if ((v13 & 1) != 0)
    {
      if (v148 < v10)
        goto LABEL_139;
      if (v10 < v148)
      {
        v15 = 48 * v148;
        v16 = 48 * v10;
        v17 = v148;
        v18 = v10;
        do
        {
          if (v18 != --v17)
          {
            if (!v11)
              goto LABEL_146;
            v19 = (_OWORD *)(v11 + v16);
            v20 = v11 + v15;
            v21 = *(_QWORD *)(v11 + v16);
            v22 = *(_QWORD *)(v11 + v16 + 8);
            v23 = *(_QWORD *)(v11 + v16 + 16);
            v24 = *(_OWORD *)(v11 + v16 + 24);
            v25 = *(_QWORD *)(v11 + v16 + 40);
            v27 = *(_OWORD *)(v11 + v15 - 32);
            v26 = *(_OWORD *)(v11 + v15 - 16);
            *v19 = *(_OWORD *)(v11 + v15 - 48);
            v19[1] = v27;
            v19[2] = v26;
            *(_QWORD *)(v20 - 48) = v21;
            *(_QWORD *)(v20 - 40) = v22;
            *(_QWORD *)(v20 - 32) = v23;
            *(_OWORD *)(v20 - 24) = v24;
            *(_QWORD *)(v20 - 8) = v25;
          }
          ++v18;
          v15 -= 48;
          v16 += 48;
        }
        while (v18 < v17);
      }
    }
    if (v14 < v117)
    {
      if (__OFSUB__(v14, v10))
        goto LABEL_140;
      if (v14 - v10 < v116)
        break;
    }
LABEL_46:
    if (v14 < v10)
      goto LABEL_138;
    v128 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100022718(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v46 = *((_QWORD *)v2 + 2);
    v45 = *((_QWORD *)v2 + 3);
    v47 = v46 + 1;
    if (v46 >= v45 >> 1)
      v2 = sub_100022718((char *)(v45 > 1), v46 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v47;
    v48 = v2 + 32;
    v49 = (uint64_t *)&v2[16 * v46 + 32];
    *v49 = v10;
    v49[1] = v128;
    if (v46)
    {
      v11 = v129;
      v139 = v2 + 32;
      while (1)
      {
        v50 = v47 - 1;
        if (v47 >= 4)
        {
          v55 = &v48[16 * v47];
          v56 = *((_QWORD *)v55 - 8);
          v57 = *((_QWORD *)v55 - 7);
          v61 = __OFSUB__(v57, v56);
          v58 = v57 - v56;
          if (v61)
            goto LABEL_123;
          v60 = *((_QWORD *)v55 - 6);
          v59 = *((_QWORD *)v55 - 5);
          v61 = __OFSUB__(v59, v60);
          v53 = v59 - v60;
          v54 = v61;
          if (v61)
            goto LABEL_124;
          v62 = v47 - 2;
          v63 = &v48[16 * v47 - 32];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v61 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v61)
            goto LABEL_126;
          v61 = __OFADD__(v53, v66);
          v67 = v53 + v66;
          if (v61)
            goto LABEL_129;
          if (v67 >= v58)
          {
            v85 = &v48[16 * v50];
            v87 = *(_QWORD *)v85;
            v86 = *((_QWORD *)v85 + 1);
            v61 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            if (v61)
              goto LABEL_133;
            v78 = v53 < v88;
            goto LABEL_84;
          }
        }
        else
        {
          if (v47 != 3)
          {
            v79 = *((_QWORD *)v2 + 4);
            v80 = *((_QWORD *)v2 + 5);
            v61 = __OFSUB__(v80, v79);
            v72 = v80 - v79;
            v73 = v61;
            goto LABEL_78;
          }
          v52 = *((_QWORD *)v2 + 4);
          v51 = *((_QWORD *)v2 + 5);
          v61 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          v54 = v61;
        }
        if ((v54 & 1) != 0)
          goto LABEL_125;
        v62 = v47 - 2;
        v68 = &v48[16 * v47 - 32];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v71 = __OFSUB__(v69, v70);
        v72 = v69 - v70;
        v73 = v71;
        if (v71)
          goto LABEL_128;
        v74 = &v48[16 * v50];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v61 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v61)
          goto LABEL_131;
        if (__OFADD__(v72, v77))
          goto LABEL_132;
        if (v72 + v77 >= v53)
        {
          v78 = v53 < v77;
LABEL_84:
          if (v78)
            v50 = v62;
          goto LABEL_86;
        }
LABEL_78:
        if ((v73 & 1) != 0)
          goto LABEL_127;
        v81 = &v48[16 * v50];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v61 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v61)
          goto LABEL_130;
        if (v84 < v72)
          goto LABEL_94;
LABEL_86:
        v89 = v50 - 1;
        if (v50 - 1 >= v47)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!v11)
          goto LABEL_144;
        v90 = v2;
        v91 = v48;
        v92 = &v48[16 * v89];
        v93 = *(_QWORD *)v92;
        v94 = v50;
        v95 = &v91[16 * v50];
        v96 = *((_QWORD *)v95 + 1);
        v97 = (char *)(v11 + 48 * *(_QWORD *)v92);
        v140 = (char *)(v11 + 48 * *(_QWORD *)v95);
        v2 = (char *)v131;
        swift_bridgeObjectRetain(v131);
        sub_1000265A0(v97, v140, v11 + 48 * v96, __dst, v131);
        swift_bridgeObjectRelease(v131);
        if (v96 < v93)
          goto LABEL_120;
        v2 = v90;
        if (v94 > *((_QWORD *)v90 + 2))
          goto LABEL_121;
        v98 = v94;
        *(_QWORD *)v92 = v93;
        v48 = v139;
        *(_QWORD *)&v139[16 * v89 + 8] = v96;
        v99 = *((_QWORD *)v90 + 2);
        if (v94 >= v99)
          goto LABEL_122;
        v47 = v99 - 1;
        memmove(v95, v95 + 16, 16 * (v99 - 1 - v98));
        *((_QWORD *)v90 + 2) = v99 - 1;
        v11 = v129;
        if (v99 <= 2)
          goto LABEL_94;
      }
    }
    v47 = 1;
    v11 = v129;
LABEL_94:
    v12 = v117;
    v10 = v128;
    if (v128 >= v117)
      goto LABEL_100;
  }
  v28 = v10 + v116;
  if (__OFADD__(v10, v116))
    goto LABEL_142;
  if (v28 >= v117)
    v28 = v117;
  if (v28 >= v10)
  {
    if (v14 != v28)
    {
      v123 = *(_QWORD *)(v131 + 16);
      v119 = v10;
      v120 = v2;
      v118 = v28;
      do
      {
        if (!v123)
          goto LABEL_33;
        v29 = (uint64_t *)(v11 + 48 * v14);
        v30 = *v29;
        v31 = v29[1];
        v32 = v29[2];
        v33 = v29[3];
        v34 = v29[4];
        v35 = v29[5];
        v36 = v14;
        v127 = v14;
        do
        {
          v135 = v35;
          v136 = v33;
          v125 = (uint64_t *)(v11 + 48 * v36);
          v126 = v36 - 1;
          v134 = *(v125 - 6);
          v124 = v125 - 6;
          v37 = *(v125 - 5);
          v38 = *(v125 - 4);
          v39 = *(v125 - 2);
          v132 = *(v125 - 1);
          v133 = *(v125 - 3);
          swift_bridgeObjectRetain(v131);
          swift_bridgeObjectRetain(v31);
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v39);
          v40 = v121;
          v41 = v123;
          v138 = v30;
          while (1)
          {
            v137 = v41;
            v43 = (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))*((_QWORD *)v40 - 1);
            v42 = *(_QWORD *)v40;
            v148 = v30;
            v149 = v31;
            v150 = v32;
            v151 = v136;
            v152 = v34;
            v153 = v135;
            v142 = v134;
            v143 = v37;
            v144 = v38;
            v145 = v133;
            v146 = v39;
            v147 = v132;
            swift_retain(v42);
            v43(&v154, &v148, &v142);
            if ((v154 & 1) != 0)
              break;
            v148 = v134;
            v149 = v37;
            v150 = v38;
            v151 = v133;
            v152 = v39;
            v153 = v132;
            v142 = v138;
            v143 = v31;
            v144 = v32;
            v145 = v136;
            v146 = v34;
            v147 = v135;
            v43(&v154, &v148, &v142);
            if (v154 == 1)
              break;
            swift_release(v42);
            v40 += 16;
            v41 = v137 - 1;
            v30 = v138;
            if (v137 == 1)
            {
              swift_bridgeObjectRelease(v34);
              swift_bridgeObjectRelease(v31);
              swift_bridgeObjectRelease(v39);
              swift_bridgeObjectRelease(v37);
              swift_bridgeObjectRelease(v131);
              v10 = v119;
              v2 = v120;
              v14 = v127;
              v11 = v129;
              goto LABEL_33;
            }
          }
          swift_bridgeObjectRelease(v131);
          v148 = v138;
          v149 = v31;
          v150 = v32;
          v151 = v136;
          v152 = v34;
          v153 = v135;
          v142 = v134;
          v143 = v37;
          v144 = v38;
          v145 = v133;
          v146 = v39;
          v147 = v132;
          v43(&v154, &v148, &v142);
          swift_bridgeObjectRelease(v34);
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v37);
          swift_release(v42);
          v10 = v119;
          v2 = v120;
          v14 = v127;
          v11 = v129;
          v36 = v126;
          if ((v154 & 1) == 0)
            break;
          if (!v129)
            goto LABEL_145;
          v30 = *v125;
          v31 = v125[1];
          v32 = v125[2];
          v33 = v125[3];
          v34 = v125[4];
          v35 = v125[5];
          v44 = *((_OWORD *)v125 - 2);
          *(_OWORD *)v125 = *(_OWORD *)v124;
          *((_OWORD *)v125 + 1) = v44;
          *((_OWORD *)v125 + 2) = *((_OWORD *)v125 - 1);
          *v124 = v30;
          *(v125 - 5) = v31;
          *(v125 - 4) = v32;
          *(v125 - 3) = v33;
          *(v125 - 2) = v34;
          *(v125 - 1) = v35;
        }
        while (v126 != v119);
LABEL_33:
        ++v14;
      }
      while (v14 != v118);
      v14 = v118;
    }
    goto LABEL_46;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  swift_bridgeObjectRelease_n(v131, 4);
  __break(1u);
LABEL_145:
  swift_bridgeObjectRelease_n(v131, 4);
  __break(1u);
LABEL_146:
  swift_bridgeObjectRelease_n(v131, 4);
  __break(1u);
LABEL_147:
  swift_bridgeObjectRelease_n(v131, 4);
  __break(1u);
LABEL_148:
  swift_bridgeObjectRelease_n(v2, 5);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000279D8(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    v4 = sub_1000244E8(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain(a2);
  sub_100026FC0(v7, a2);
  swift_bridgeObjectRelease(a2);
  *a1 = v4;
  return swift_bridgeObjectRelease_n(a2, 2);
}

uint64_t sub_100027A78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  char **v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t result;
  _QWORD *v30;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v2 = _swiftEmptyArrayStorage;
  if (!a2)
    return (uint64_t)v2;
  v3 = swift_bridgeObjectRetain(a1);
  v4 = (_QWORD *)sub_10001F7F0(v3);
  v35 = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000279D8((uint64_t *)&v35, (char *)&off_100055A58);
  swift_bridgeObjectRelease(v4);
  if ((a2 & 0x8000000000000000) == 0)
  {
    v5 = v35;
    v35 = _swiftEmptyArrayStorage;
    sub_100021D2C(0, 0, 0);
    v2 = v35;
    swift_retain(v5);
    v6 = 0;
    v30 = v5;
    v7 = v5 + 9;
    while (1)
    {
      v8 = v30[2];
      if (v6 == v8)
      {
LABEL_12:
        swift_release_n(v30, 2);
        return (uint64_t)v2;
      }
      if (v6 >= v8)
        break;
      v9 = *(v7 - 4);
      v10 = *(v7 - 3);
      v12 = *(v7 - 1);
      v11 = *v7;
      v13 = objc_allocWithZone((Class)STUsageDetailItem);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v12);
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(v13, "initWithType:identifier:", v11, v14);

      v16 = objc_msgSend(v15, "localizedDisplayName");
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v33 = v18;
      v34 = v17;

      v19 = &selRef_darkColorsMonogram;
      if (v11 == 2)
      {
        v20 = &selRef_lightColorsMonogram;
      }
      else
      {
        v19 = &selRef_iconImage;
        v20 = &selRef_iconImage;
      }
      v32 = objc_msgSend(v15, *v19);
      v21 = objc_msgSend(v15, *v20);
      v22 = objc_msgSend(v15, "identifier");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v9);

      v35 = v2;
      v27 = v2[2];
      v26 = v2[3];
      if (v27 >= v26 >> 1)
      {
        sub_100021D2C(v26 > 1, v27 + 1, 1);
        v2 = v35;
      }
      ++v6;
      v2[2] = v27 + 1;
      v28 = &v2[7 * v27];
      v28[4] = v23;
      v28[5] = v25;
      v28[6] = v32;
      v28[7] = v21;
      v28[8] = v10;
      v28[9] = v34;
      v28[10] = v33;
      v7 += 6;
      if (a2 == v6)
        goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
  result = swift_release(v35);
  __break(1u);
  return result;
}

uint64_t sub_100027D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *@<X8>);
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  _QWORD *v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(_QWORD *@<X8>);
  void *v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;

  v2 = type metadata accessor for DateInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v55 - v7;
  v9 = type metadata accessor for _DeviceActivityData.ActivitySegment(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v67 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v55 - v13;
  v15 = *(char **)(a1 + 16);
  if (v15)
  {
    v58 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v16 = a1 + v58;
    v17 = *(_QWORD *)(v10 + 72);
    v56 = a1;
    v57 = v17;
    v63 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain(a1);
    v18 = v16;
    v19 = 0;
    v68 = v6;
    v69 = &_swiftEmptyDictionarySingleton;
    v20 = v67;
    v60 = v9;
    v61 = v8;
    v64 = v3;
    v65 = v2;
    v59 = v14;
    v62 = v10;
    while (1)
    {
      v66 = v18;
      v67 = v15;
      v21 = v14;
      v22 = v63;
      v23 = ((uint64_t (*)(char *))v63)(v14);
      v24 = v9;
      _DeviceActivityData.ActivitySegment.dateInterval.getter(v23);
      v25 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v25(v6, v8, v2);
      v26 = v20;
      v22(v20, v21, v24);
      sub_10002A948((uint64_t)v19, 0);
      v27 = v69;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
      v70 = v27;
      v30 = sub_10002173C((uint64_t)v6);
      v31 = v27[2];
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        break;
      v34 = v29;
      if (v27[3] >= v33)
      {
        v37 = v62;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000242A4(&qword_10005A528);
          v27 = v70;
        }
      }
      else
      {
        sub_100023734(v33, isUniquelyReferenced_nonNull_native, &qword_10005A528);
        v27 = v70;
        v35 = sub_10002173C((uint64_t)v68);
        v37 = v62;
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_23;
        v30 = v35;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      if ((v34 & 1) != 0)
      {
        v38 = v37;
        swift_bridgeObjectRetain(v27);
      }
      else
      {
        v27[(v30 >> 6) + 8] |= 1 << v30;
        v39 = v27[6] + *(_QWORD *)(v64 + 72) * v30;
        swift_bridgeObjectRetain(v27);
        v25((char *)v39, v68, v65);
        *(_QWORD *)(v27[7] + 8 * v30) = _swiftEmptyArrayStorage;
        v40 = v27[2];
        v41 = __OFADD__(v40, 1);
        v42 = v40 + 1;
        if (v41)
          goto LABEL_22;
        v38 = v37;
        v27[2] = v42;
      }
      v43 = v27[7];
      swift_bridgeObjectRelease(v27);
      v44 = *(_QWORD *)(v43 + 8 * v30);
      v45 = swift_isUniquelyReferenced_nonNull_native(v44);
      *(_QWORD *)(v43 + 8 * v30) = v44;
      if ((v45 & 1) == 0)
      {
        v44 = sub_100021134(0, *(_QWORD *)(v44 + 16) + 1, 1, v44, &qword_10005A530, (uint64_t (*)(_QWORD))&type metadata accessor for _DeviceActivityData.ActivitySegment);
        *(_QWORD *)(v43 + 8 * v30) = v44;
      }
      v47 = *(_QWORD *)(v44 + 16);
      v46 = *(_QWORD *)(v44 + 24);
      v69 = v27;
      if (v47 >= v46 >> 1)
      {
        v44 = sub_100021134(v46 > 1, v47 + 1, 1, v44, &qword_10005A530, (uint64_t (*)(_QWORD))&type metadata accessor for _DeviceActivityData.ActivitySegment);
        *(_QWORD *)(v43 + 8 * v30) = v44;
      }
      *(_QWORD *)(v44 + 16) = v47 + 1;
      v48 = v44 + v58;
      v49 = v57;
      v50 = v38;
      v20 = v26;
      v9 = v60;
      (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))(v48 + v47 * v57, v26, v60);
      v3 = v64;
      v2 = v65;
      v51 = *(void (**)(char *, uint64_t))(v64 + 8);
      v6 = v68;
      v51(v68, v65);
      v8 = v61;
      v51(v61, v2);
      v14 = v59;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v59, v9);
      v18 = v66 + v49;
      v19 = sub_100020378;
      v15 = v67 - 1;
      if (v67 == (char *)1)
      {
        swift_bridgeObjectRelease(v56);
        v52 = sub_100020378;
        v53 = v69;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v65);
    __break(1u);
  }
  else
  {
    v52 = 0;
    v53 = &_swiftEmptyDictionarySingleton;
LABEL_20:
    sub_10002A948((uint64_t)v52, 0);
    return (uint64_t)v53;
  }
  return result;
}

uint64_t sub_100028148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  double v36;
  uint64_t v37;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t result;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v2 = type metadata accessor for _DeviceActivityData.ActivitySegment(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003C84(&qword_10005A4C0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v51 - v13;
  v15 = (_QWORD *)sub_10001C68C((uint64_t)_swiftEmptyArrayStorage);
  v16 = *(_QWORD *)(a1 + 64);
  v52 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v60 = v18 & v16;
  v53 = (unint64_t)(v17 + 63) >> 6;
  v51 = v53 - 1;
  v55 = a1;
  swift_bridgeObjectRetain(a1);
  v57 = 0;
  v58 = v14;
  v19 = &qword_10005A4C8;
  v54 = v6;
  v59 = v8;
  v56 = v12;
  while (1)
  {
    if (v60)
    {
      v20 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      v21 = v20 | (v57 << 6);
LABEL_8:
      v22 = v55;
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v12, *(_QWORD *)(v55 + 48) + *(_QWORD *)(v6 + 72) * v21, v61);
      v23 = *(_QWORD *)(v22 + 56);
      v24 = sub_100003C84(&qword_10005A4C8);
      v25 = *(_QWORD *)(v23 + 8 * v21);
      *(_QWORD *)&v12[*(int *)(v24 + 48)] = v25;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v12, 0, 1, v24);
      swift_bridgeObjectRetain(v25);
      v14 = v58;
      goto LABEL_27;
    }
    v26 = v57 + 1;
    if (__OFADD__(v57, 1))
      goto LABEL_47;
    if (v26 < v53)
    {
      v27 = *(_QWORD *)(v52 + 8 * v26);
      if (v27)
        goto LABEL_12;
      v28 = v57 + 2;
      ++v57;
      if (v26 + 1 < v53)
      {
        v27 = *(_QWORD *)(v52 + 8 * v28);
        if (v27)
          goto LABEL_15;
        v57 = v26 + 1;
        if (v26 + 2 < v53)
        {
          v27 = *(_QWORD *)(v52 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_12;
          }
          v28 = v26 + 3;
          v57 = v26 + 2;
          if (v26 + 3 < v53)
            break;
        }
      }
    }
LABEL_26:
    v29 = sub_100003C84(&qword_10005A4C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 1, 1, v29);
    v60 = 0;
LABEL_27:
    sub_100009EF4((uint64_t)v12, (uint64_t)v14, &qword_10005A4C0);
    v30 = sub_100003C84(&qword_10005A4C8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v14, 1, v30) == 1)
    {
      swift_release(v55);
      return (uint64_t)v15;
    }
    v31 = *(_QWORD *)&v14[*(int *)(v30 + 48)];
    v19 = (uint64_t *)v61;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v14, v61);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = v31 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      swift_bridgeObjectRetain(v31);
      v34 = *(_QWORD *)(v3 + 72);
      v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
      v36 = 0.0;
      do
      {
        v37 = v35(v5, v33, v2);
        v36 = v36 + _DeviceActivityData.ActivitySegment.totalActivityDuration.getter(v37);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v33 += v34;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease_n(v31, 2);
      v19 = (uint64_t *)v61;
      v6 = v54;
    }
    else
    {
      swift_bridgeObjectRelease(v31);
      v36 = 0.0;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    v62 = v15;
    v40 = sub_10002173C((uint64_t)v59);
    v41 = v15[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v44 = v39;
    if (v15[3] >= v43)
    {
      v14 = v58;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v8 = v59;
        v15 = v62;
        if ((v39 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100023CB4();
        v14 = v58;
        v8 = v59;
        v15 = v62;
        if ((v44 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100022D30(v43, isUniquelyReferenced_nonNull_native);
      v8 = v59;
      v45 = sub_10002173C((uint64_t)v59);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_49;
      v40 = v45;
      v14 = v58;
      v15 = v62;
      if ((v44 & 1) != 0)
      {
LABEL_4:
        *(double *)(v15[7] + 8 * v40) = v36;
        goto LABEL_5;
      }
    }
    v15[(v40 >> 6) + 8] |= 1 << v40;
    (*(void (**)(unint64_t, char *, uint64_t *))(v6 + 16))(v15[6] + *(_QWORD *)(v6 + 72) * v40, v8, v19);
    *(double *)(v15[7] + 8 * v40) = v36;
    v47 = v15[2];
    v48 = __OFADD__(v47, 1);
    v49 = v47 + 1;
    if (v48)
      goto LABEL_46;
    v15[2] = v49;
LABEL_5:
    swift_bridgeObjectRelease(0x8000000000000000);
    (*(void (**)(char *, uint64_t *))(v6 + 8))(v8, v19);
    v12 = v56;
    v19 = &qword_10005A4C8;
  }
  v27 = *(_QWORD *)(v52 + 8 * v28);
  if (v27)
  {
LABEL_15:
    v26 = v28;
LABEL_12:
    v60 = (v27 - 1) & v27;
    v21 = __clz(__rbit64(v27)) + (v26 << 6);
    v57 = v26;
    goto LABEL_8;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v53)
    {
      v57 = v51;
      goto LABEL_26;
    }
    v27 = *(_QWORD *)(v52 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_12;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
  __break(1u);
  return result;
}

uint64_t sub_1000286B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = result;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = 0;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(result + 56) + 48 * v11 + 40) == 3)
    {
      v15 = swift_bridgeObjectRetain(result);
      v16 = sub_10001FA2C(v15);
      v17 = sub_100003C84(&qword_10005A500);
      v23 = v17;
      v24 = sub_100009F64(&qword_10005A508, &qword_10005A500, (uint64_t)&protocol conformance descriptor for [A]);
      v22[0] = v16;
      goto LABEL_27;
    }
  }
  v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v12 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v12);
  ++v9;
  if (v13)
    goto LABEL_24;
  v9 = v12 + 1;
  if (v12 + 1 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_24;
  v9 = v12 + 2;
  if (v12 + 2 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_24;
  v9 = v12 + 3;
  if (v12 + 3 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
    goto LABEL_24;
  v9 = v12 + 4;
  if (v12 + 4 >= v8)
    goto LABEL_26;
  v13 = *(_QWORD *)(v4 + 8 * v9);
  if (v13)
  {
LABEL_24:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_5;
  }
  v14 = v12 + 5;
  if (v14 >= v8)
  {
LABEL_26:
    v17 = sub_100003C84(&qword_10005A4E8);
    v23 = v17;
    v24 = sub_100009F64(&qword_10005A4F0, &qword_10005A4E8, (uint64_t)&protocol conformance descriptor for [A : B].Values);
    v22[0] = v3;
    swift_bridgeObjectRetain(v3);
LABEL_27:
    v18 = sub_100014EDC(v22, v17);
    __chkstk_darwin(v18);
    v21 = &off_100055A98;
    v19 = Sequence.sorted(by:)(sub_10002A92C);
    v20 = sub_100003C84(&qword_10005A4F8);
    result = swift_arrayDestroy(&off_100055AB8, 2, v20);
    if ((a2 & 0x8000000000000000) == 0)
    {
      sub_100018494(v22);
      return v19;
    }
    goto LABEL_30;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_26;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100028944(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100028A5C(uint64_t a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6)
{
  char v6;
  double v10;
  double v11;
  double v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;

  v10 = a6 / a4;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v10 = 0.0;
  v11 = a6 / a5;
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v11 = 0.0;
  if (a4 < a5)
    v12 = v11;
  else
    v12 = v10;
  swift_bridgeObjectRetain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  v14 = *a3;
  v29 = *a3;
  *a3 = 0x8000000000000000;
  v16 = sub_1000216D8(a1, a2);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = v15;
  if (*(_QWORD *)(v14 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_13;
LABEL_18:
    sub_1000240F8();
    v14 = v29;
    goto LABEL_13;
  }
  sub_100023430(v19, isUniquelyReferenced_nonNull_native);
  v14 = v29;
  v20 = sub_1000216D8(a1, a2);
  if ((v6 & 1) != (v21 & 1))
    goto LABEL_20;
  v16 = v20;
LABEL_13:
  v22 = *a3;
  *a3 = v14;
  swift_bridgeObjectRelease(v22);
  v23 = (_QWORD *)*a3;
  v24 = *a3;
  if ((v6 & 1) != 0)
  {
LABEL_16:
    swift_bridgeObjectRetain(v24);
    v27 = v23[7];
    swift_bridgeObjectRelease(v23);
    *(double *)(v27 + 8 * v16) = v12 + *(double *)(v27 + 8 * v16);
    return swift_bridgeObjectRelease(a2);
  }
  v23[(v16 >> 6) + 8] |= 1 << v16;
  v25 = (uint64_t *)(v23[6] + 16 * v16);
  *v25 = a1;
  v25[1] = a2;
  *(_QWORD *)(v23[7] + 8 * v16) = 0;
  v26 = v23[2];
  swift_bridgeObjectRetain(v23);
  if (!__OFADD__(v26, 1))
  {
    v23[2] = v26 + 1;
    v24 = a2;
    goto LABEL_16;
  }
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100028C14(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, unint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t (*v87)(char *, char *, uint64_t);
  double v88;
  char *v89;
  char *v90;
  uint64_t v91;
  double v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(char *, unint64_t, uint64_t);
  uint64_t j;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unint64_t v195;
  uint64_t v196;
  _BOOL8 v197;
  uint64_t v198;
  char v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  void (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char v214;
  unint64_t v215;
  uint64_t v216;
  _BOOL8 v217;
  uint64_t v218;
  char v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t result;
  _QWORD v227[2];
  int64_t v228;
  uint64_t v229;
  char *v230;
  int64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  int64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  _QWORD *v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  void (*v260)(char *, uint64_t);
  uint64_t v261;
  void (*v262)(char *, char *, uint64_t);
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;

  v234 = a2;
  v5 = type metadata accessor for _DeviceActivityData.WebDomainActivity(0);
  v266 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v265 = (char *)v227 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for _DeviceActivityData.ApplicationActivity(0);
  v268 = *(_QWORD *)(v7 - 8);
  v269 = v7;
  __chkstk_darwin(v7);
  v267 = (char *)v227 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for _DeviceActivityData.CategoryActivity(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v241 = (char *)v227 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v230 = (char *)v227 - v14;
  v15 = __chkstk_darwin(v13);
  v252 = (char *)v227 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v227 - v18;
  __chkstk_darwin(v17);
  v270 = (char *)v227 - v20;
  v21 = type metadata accessor for _DeviceActivityData.ActivitySegment(0);
  v22 = *(_QWORD *)(v21 - 8);
  v258 = v21;
  v259 = v22;
  __chkstk_darwin(v21);
  v257 = (char *)v227 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DateInterval(0);
  v246 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v243 = (uint64_t)v227 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v245 = (uint64_t)v227 - v27;
  v28 = sub_100003C84(&qword_10005A4C0);
  v29 = __chkstk_darwin(v28);
  v235 = (char *)v227 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v236 = (char *)v227 - v31;
  v244 = sub_10001C820((uint64_t)_swiftEmptyArrayStorage);
  v32 = a3[3];
  v33 = a3[4];
  sub_100014EDC(a3, v32);
  v232 = Sequence.contains(where:)(sub_100020368, 0, v32, v33);
  v227[1] = 0;
  v34 = v24;
  v35 = *(_QWORD *)(a1 + 64);
  v229 = a1 + 64;
  v36 = 1 << *(_BYTE *)(a1 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v255 = CTCategoryIdentifierSystemHidden;
  v249 = CTCategoryIdentifierSystemUnblockable;
  v248 = CTCategoryIdentifierSystemBlockable;
  v231 = (unint64_t)(v36 + 63) >> 6;
  v228 = v231 - 1;
  v233 = a1;
  swift_bridgeObjectRetain(a1);
  v39 = 0;
  v271 = v5;
  v253 = v9;
  v242 = v10;
  v250 = v19;
  v239 = v24;
  while (1)
  {
    if (v38)
    {
      v238 = (v38 - 1) & v38;
      v237 = v39;
      v43 = __clz(__rbit64(v38)) | (v39 << 6);
      v44 = (uint64_t)v235;
LABEL_8:
      v45 = v233;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v246 + 16))(v44, *(_QWORD *)(v233 + 48) + *(_QWORD *)(v246 + 72) * v43, v34);
      v46 = *(_QWORD *)(v45 + 56);
      v47 = sub_100003C84(&qword_10005A4C8);
      v48 = *(_QWORD *)(v46 + 8 * v43);
      *(_QWORD *)(v44 + *(int *)(v47 + 48)) = v48;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v44, 0, 1, v47);
      swift_bridgeObjectRetain(v48);
      v49 = (uint64_t)v236;
      goto LABEL_15;
    }
    v50 = v39 + 1;
    if (__OFADD__(v39, 1))
      goto LABEL_163;
    v44 = (uint64_t)v235;
    if (v50 < v231)
    {
      v51 = *(_QWORD *)(v229 + 8 * v50);
      v49 = (uint64_t)v236;
      if (v51)
        goto LABEL_13;
      v225 = v39 + 2;
      if (v50 + 1 >= v231)
        goto LABEL_150;
      v51 = *(_QWORD *)(v229 + 8 * v225);
      if (v51)
        goto LABEL_137;
      if (v50 + 2 < v231)
      {
        v51 = *(_QWORD *)(v229 + 8 * (v50 + 2));
        if (v51)
        {
          v50 += 2;
        }
        else
        {
          v225 = v50 + 3;
          if (v50 + 3 >= v231)
          {
            v237 = v50 + 2;
            goto LABEL_14;
          }
          v51 = *(_QWORD *)(v229 + 8 * v225);
          if (!v51)
          {
            while (1)
            {
              v50 = v225 + 1;
              if (__OFADD__(v225, 1))
                goto LABEL_164;
              if (v50 >= v231)
                break;
              v51 = *(_QWORD *)(v229 + 8 * v50);
              ++v225;
              if (v51)
                goto LABEL_13;
            }
            v50 = v228;
LABEL_150:
            v237 = v50;
            goto LABEL_14;
          }
LABEL_137:
          v50 = v225;
        }
LABEL_13:
        v238 = (v51 - 1) & v51;
        v43 = __clz(__rbit64(v51)) + (v50 << 6);
        v237 = v50;
        goto LABEL_8;
      }
      v237 = v50 + 1;
    }
    else
    {
      v237 = v39;
      v49 = (uint64_t)v236;
    }
LABEL_14:
    v52 = sub_100003C84(&qword_10005A4C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v44, 1, 1, v52);
    v238 = 0;
LABEL_15:
    sub_100009EF4(v44, v49, &qword_10005A4C0);
    v53 = sub_100003C84(&qword_10005A4C8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v49, 1, v53) == 1)
      break;
    v54 = *(_QWORD *)(v49 + *(int *)(v53 + 48));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v246 + 32))(v245, v49, v34);
    v55 = _swiftEmptyArrayStorage;
    v273 = sub_10001C9B4((uint64_t)_swiftEmptyArrayStorage);
    v56 = *(_QWORD *)(v54 + 16);
    if (!v56)
    {
      swift_bridgeObjectRelease(v54);
      goto LABEL_40;
    }
    v57 = v259;
    v58 = v54 + ((*(unsigned __int8 *)(v259 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v259 + 80));
    v264 = v54;
    swift_bridgeObjectRetain(v54);
    v59 = *(_QWORD *)(v57 + 72);
    v60 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v57 + 16);
    do
    {
      v61 = v257;
      v62 = v258;
      v63 = v60(v257, v58, v258);
      v64 = _DeviceActivityData.ActivitySegment.categoryActivities.getter(v63);
      (*(void (**)(char *, uint64_t))(v259 + 8))(v61, v62);
      v65 = *(_QWORD *)(v64 + 16);
      v66 = v55[2];
      v67 = v66 + v65;
      if (__OFADD__(v66, v65))
      {
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
LABEL_166:
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
        __break(1u);
LABEL_167:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v239);
        __break(1u);
        return result;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
      v69 = (uint64_t)v55;
      if (isUniquelyReferenced_nonNull_native && v67 <= v55[3] >> 1)
      {
        if (!*(_QWORD *)(v64 + 16))
          goto LABEL_18;
      }
      else
      {
        if (v66 <= v67)
          v70 = v66 + v65;
        else
          v70 = v66;
        v69 = sub_100021134(isUniquelyReferenced_nonNull_native, v70, 1, (unint64_t)v55, &qword_10005A4D8, (uint64_t (*)(_QWORD))&type metadata accessor for _DeviceActivityData.CategoryActivity);
        if (!*(_QWORD *)(v64 + 16))
        {
LABEL_18:
          v55 = (_QWORD *)v69;
          if (v65)
            goto LABEL_156;
          goto LABEL_19;
        }
      }
      v71 = *(_QWORD *)(v69 + 16);
      if ((*(_QWORD *)(v69 + 24) >> 1) - v71 < v65)
        goto LABEL_158;
      v72 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v73 = *(_QWORD *)(v10 + 72);
      v74 = v69 + v72 + v73 * v71;
      if (v64 + v72 < v74 + v73 * v65 && v74 < v64 + v72 + v73 * v65)
        goto LABEL_166;
      v55 = (_QWORD *)v69;
      swift_arrayInitWithCopy(v74);
      if (v65)
      {
        v76 = v55[2];
        v77 = __OFADD__(v76, v65);
        v78 = v76 + v65;
        if (v77)
          goto LABEL_160;
        v55[2] = v78;
      }
LABEL_19:
      swift_bridgeObjectRelease(v64);
      v58 += v59;
      --v56;
    }
    while (v56);
    swift_bridgeObjectRelease_n(v264, 2);
    v5 = v271;
    v9 = v253;
LABEL_40:
    v79 = v234;
    v80 = *(_QWORD *)(v234 + 16);
    v81 = 0.0;
    v251 = v55;
    if (v80)
    {
      v82 = sub_10002173C(v245);
      v55 = v251;
      if ((v83 & 1) != 0)
        v81 = *(double *)(*(_QWORD *)(v79 + 56) + 8 * v82);
    }
    v84 = v55[2];
    if (v84)
    {
      v85 = (char *)v55 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      swift_bridgeObjectRetain(v55);
      v86 = *(_QWORD *)(v10 + 72);
      v87 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 16);
      v88 = 0.0;
      v247 = v85;
      v89 = v85;
      v261 = v84;
      v90 = v270;
      do
      {
        v91 = v87(v90, v89, v9);
        v92 = _DeviceActivityData.CategoryActivity.totalActivityDuration.getter(v91);
        v90 = v270;
        v88 = v88 + v92;
        v93 = *(void (**)(char *, uint64_t))(v10 + 8);
        v93(v270, v9);
        v89 += v86;
        --v84;
      }
      while (v84);
      v260 = v93;
      v262 = (void (*)(char *, char *, uint64_t))v87;
      v256 = v86;
      swift_bridgeObjectRelease(v251);
      if ((v232 & 1) != 0)
      {
        v94 = v230;
        v95 = v247;
        v96 = v262;
        v97 = v250;
        while (1)
        {
          v98 = v95;
          v96(v97, v95, v9);
          v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v249);
          v101 = v100;
          v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
          v104 = v103;
          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
          v107 = v106;
          v108 = _DeviceActivityData.CategoryActivity.identifier.getter(v105);
          v110 = v109;
          if (v108 == v99 && v109 == v101)
            break;
          v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease(v110);
          swift_bridgeObjectRelease(v101);
          v111 = v252;
          v97 = v250;
          v113 = ((uint64_t (*)(char *, char *, uint64_t))v262)(v252, v250, v9);
          if ((v112 & 1) != 0)
            goto LABEL_52;
          v117 = _DeviceActivityData.CategoryActivity.identifier.getter(v113);
          v119 = v118;
          if (v117 == v102 && v118 == v104)
          {
            swift_bridgeObjectRelease_n(v104, 2);
            v260(v252, v9);
LABEL_53:
            v96 = v262;
            v262(v94, v97, v9);
            v114 = v98;
LABEL_54:
            v115 = v260;
            v260(v94, v9);
            v116 = v107;
            goto LABEL_55;
          }
          v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease(v104);
          swift_bridgeObjectRelease(v119);
          v260(v252, v9);
          v96 = v262;
          v121 = ((uint64_t (*)(char *, char *, uint64_t))v262)(v94, v97, v9);
          v114 = v98;
          if ((v120 & 1) != 0)
            goto LABEL_54;
          v122 = _DeviceActivityData.CategoryActivity.identifier.getter(v121);
          v124 = v123;
          if (v122 == v105 && v123 == v107)
          {
            swift_bridgeObjectRelease_n(v107, 2);
            v115 = v260;
            v260(v94, v9);
            v96 = v262;
            goto LABEL_56;
          }
          v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease(v107);
          swift_bridgeObjectRelease(v124);
          v115 = v260;
          v126 = ((uint64_t (*)(char *, uint64_t))v260)(v94, v9);
          v96 = v262;
          if ((v125 & 1) != 0)
            goto LABEL_56;
          v127 = _DeviceActivityData.CategoryActivity.identifier.getter(v126);
          v129 = v128;
          v130 = _DeviceActivityData.CategoryActivity.totalActivityDuration.getter(v127);
          v131 = v127;
          v96 = v262;
          sub_100028A5C(v131, v129, (uint64_t *)&v273, v81, v88, v130);
          v116 = v129;
LABEL_55:
          swift_bridgeObjectRelease(v116);
LABEL_56:
          v115(v97, v9);
          v95 = &v114[v256];
          if (!--v261)
          {
            swift_bridgeObjectRelease(v251);
            v10 = v242;
            goto LABEL_126;
          }
        }
        swift_bridgeObjectRelease_n(v101, 2);
        v111 = v252;
        v97 = v250;
        v262(v252, v250, v9);
LABEL_52:
        v260(v111, v9);
        swift_bridgeObjectRelease(v104);
        goto LABEL_53;
      }
      v133 = 0;
      v263 = *(_QWORD *)&v88 & 0x7FFFFFFFFFFFFFFFLL;
      v264 = *(_QWORD *)&v81 & 0x7FFFFFFFFFFFFFFFLL;
      v134 = v241;
      v135 = v256;
      v136 = v262;
      while (2)
      {
        if (v133 >= v251[2])
          goto LABEL_159;
        v254 = v133;
        v136(v134, &v247[v135 * v133], v9);
        v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
        v139 = v138;
        v140 = _DeviceActivityData.CategoryActivity.identifier.getter(v137);
        v142 = v141;
        if (v140 == v137 && v141 == v139)
        {
          swift_bridgeObjectRelease_n(v139, 2);
          goto LABEL_121;
        }
        v143 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease(v142);
        v144 = swift_bridgeObjectRelease(v139);
        if ((v143 & 1) != 0)
        {
LABEL_121:
          v136 = v262;
        }
        else
        {
          v145 = _DeviceActivityData.CategoryActivity.applicationActivities.getter(v144);
          v146 = *(_QWORD *)(v145 + 16);
          if (v146)
          {
            v147 = (*(unsigned __int8 *)(v268 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v268 + 80);
            v240 = v145;
            v148 = v145 + v147;
            v149 = *(_QWORD *)(v268 + 72);
            v150 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v268 + 16);
            for (i = v150(v267, v145 + v147, v269); ; i = v150(v153, v148, v154))
            {
              v155 = _DeviceActivityData.ApplicationActivity.bundleIdentifier.getter(i);
              v157 = v156;
              v158 = _DeviceActivityData.ApplicationActivity.totalActivityDuration.getter(v155);
              if (v81 >= v88)
              {
                if (v264)
                {
                  v159 = v158 / v81;
                  goto LABEL_84;
                }
              }
              else if (v263)
              {
                v159 = v158 / v88;
                goto LABEL_84;
              }
              v159 = 0.0;
LABEL_84:
              swift_bridgeObjectRetain(v157);
              v160 = v273;
              v161 = swift_isUniquelyReferenced_nonNull_native(v273);
              v272 = v160;
              v273 = 0x8000000000000000;
              v163 = sub_1000216D8(v155, v157);
              v164 = *(_QWORD *)(v160 + 16);
              v165 = (v162 & 1) == 0;
              v166 = v164 + v165;
              if (__OFADD__(v164, v165))
              {
                __break(1u);
LABEL_153:
                __break(1u);
                goto LABEL_154;
              }
              v167 = v162;
              if (*(_QWORD *)(v160 + 24) >= v166)
              {
                if ((v161 & 1) == 0)
                  sub_1000240F8();
              }
              else
              {
                sub_100023430(v166, v161);
                v168 = sub_1000216D8(v155, v157);
                if ((v167 & 1) != (v169 & 1))
                  goto LABEL_165;
                v163 = v168;
              }
              v171 = (_QWORD *)v272;
              v170 = v273;
              v273 = v272;
              swift_bridgeObjectRelease(v170);
              v172 = v171;
              if ((v167 & 1) == 0)
              {
                v171[(v163 >> 6) + 8] |= 1 << v163;
                v173 = (uint64_t *)(v171[6] + 16 * v163);
                *v173 = v155;
                v173[1] = v157;
                *(_QWORD *)(v171[7] + 8 * v163) = 0;
                v174 = v171[2];
                v175 = v174 + 1;
                v176 = __OFADD__(v174, 1);
                swift_bridgeObjectRetain(v171);
                if (v176)
                  goto LABEL_155;
                v171[2] = v175;
                v172 = (_QWORD *)v157;
              }
              swift_bridgeObjectRetain(v172);
              v152 = v171[7];
              swift_bridgeObjectRelease(v171);
              *(double *)(v152 + 8 * v163) = v159 + *(double *)(v152 + 8 * v163);
              swift_bridgeObjectRelease_n(v157, 2);
              v153 = v267;
              v154 = v269;
              (*(void (**)(char *, uint64_t))(v268 + 8))(v267, v269);
              v148 += v149;
              if (!--v146)
              {
                v177 = swift_bridgeObjectRelease(v240);
                v5 = v271;
                v10 = v242;
                v134 = v241;
                goto LABEL_98;
              }
            }
          }
          v177 = swift_bridgeObjectRelease(v145);
LABEL_98:
          v136 = v262;
          v178 = _DeviceActivityData.CategoryActivity.webDomainActivities.getter(v177);
          v179 = *(_QWORD *)(v178 + 16);
          if (v179)
          {
            v180 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
            v240 = v178;
            v181 = v178 + v180;
            v182 = *(_QWORD *)(v266 + 72);
            v183 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v266 + 16);
            for (j = v183(v265, v178 + v180, v5); ; j = v183(v186, v181, v5))
            {
              v187 = _DeviceActivityData.WebDomainActivity.domain.getter(j);
              v189 = v188;
              v190 = _DeviceActivityData.WebDomainActivity.totalActivityDuration.getter(v187);
              if (v81 >= v88)
              {
                if (v264)
                {
                  v191 = v190 / v81;
                  goto LABEL_108;
                }
              }
              else if (v263)
              {
                v191 = v190 / v88;
                goto LABEL_108;
              }
              v191 = 0.0;
LABEL_108:
              swift_bridgeObjectRetain(v189);
              v192 = v273;
              v193 = swift_isUniquelyReferenced_nonNull_native(v273);
              v272 = v192;
              v273 = 0x8000000000000000;
              v195 = sub_1000216D8(v187, v189);
              v196 = *(_QWORD *)(v192 + 16);
              v197 = (v194 & 1) == 0;
              v198 = v196 + v197;
              if (__OFADD__(v196, v197))
                goto LABEL_153;
              v199 = v194;
              if (*(_QWORD *)(v192 + 24) >= v198)
              {
                if ((v193 & 1) == 0)
                  sub_1000240F8();
              }
              else
              {
                sub_100023430(v198, v193);
                v200 = sub_1000216D8(v187, v189);
                if ((v199 & 1) != (v201 & 1))
                  goto LABEL_165;
                v195 = v200;
              }
              v203 = (_QWORD *)v272;
              v202 = v273;
              v273 = v272;
              swift_bridgeObjectRelease(v202);
              v204 = v203;
              if ((v199 & 1) == 0)
              {
                v203[(v195 >> 6) + 8] |= 1 << v195;
                v205 = (uint64_t *)(v203[6] + 16 * v195);
                *v205 = v187;
                v205[1] = v189;
                *(_QWORD *)(v203[7] + 8 * v195) = 0;
                v206 = v203[2];
                v207 = v206 + 1;
                v208 = __OFADD__(v206, 1);
                swift_bridgeObjectRetain(v203);
                if (v208)
                  goto LABEL_157;
                v203[2] = v207;
                v204 = (_QWORD *)v189;
              }
              swift_bridgeObjectRetain(v204);
              v185 = v203[7];
              swift_bridgeObjectRelease(v203);
              *(double *)(v185 + 8 * v195) = v191 + *(double *)(v185 + 8 * v195);
              swift_bridgeObjectRelease_n(v189, 2);
              v186 = v265;
              v5 = v271;
              (*(void (**)(char *, uint64_t))(v266 + 8))(v265, v271);
              v181 += v182;
              if (!--v179)
              {
                swift_bridgeObjectRelease(v240);
                v9 = v253;
                v10 = v242;
                v134 = v241;
                goto LABEL_121;
              }
            }
          }
          swift_bridgeObjectRelease(v178);
          v9 = v253;
        }
        v133 = v254 + 1;
        v260(v134, v9);
        v135 = v256;
        if (v133 != v261)
          continue;
        break;
      }
      v132 = v251;
    }
    else
    {
      v132 = v55;
    }
    swift_bridgeObjectRelease(v132);
LABEL_126:
    v209 = *(void (**)(uint64_t, uint64_t, uint64_t))(v246 + 16);
    v210 = v243;
    v209(v243, v245, v239);
    v211 = v273;
    v212 = v244;
    v213 = swift_isUniquelyReferenced_nonNull_native(v244);
    v272 = v212;
    v215 = sub_10002173C(v210);
    v216 = *(_QWORD *)(v212 + 16);
    v217 = (v214 & 1) == 0;
    v218 = v216 + v217;
    if (__OFADD__(v216, v217))
      goto LABEL_161;
    v219 = v214;
    if (*(_QWORD *)(v212 + 24) >= v218)
    {
      if ((v213 & 1) == 0)
        sub_1000242A4(&qword_10005A4D0);
    }
    else
    {
      sub_100023734(v218, v213, &qword_10005A4D0);
      v220 = sub_10002173C(v243);
      if ((v219 & 1) != (v221 & 1))
        goto LABEL_167;
      v215 = v220;
    }
    v244 = v272;
    if ((v219 & 1) != 0)
    {
      v40 = *(_QWORD *)(v272 + 56);
      v41 = 8 * v215;
      swift_bridgeObjectRelease(*(_QWORD *)(v40 + v41));
      *(_QWORD *)(v40 + v41) = v211;
      v34 = v239;
    }
    else
    {
      *(_QWORD *)(v272 + 8 * (v215 >> 6) + 64) |= 1 << v215;
      v34 = v239;
      v209(*(_QWORD *)(v244 + 48) + *(_QWORD *)(v246 + 72) * v215, v243, v239);
      v222 = v244;
      *(_QWORD *)(*(_QWORD *)(v244 + 56) + 8 * v215) = v211;
      v223 = *(_QWORD *)(v222 + 16);
      v77 = __OFADD__(v223, 1);
      v224 = v223 + 1;
      if (v77)
        goto LABEL_162;
      *(_QWORD *)(v222 + 16) = v224;
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    v42 = *(void (**)(uint64_t, uint64_t))(v246 + 8);
    v42(v243, v34);
    v42(v245, v34);
    v5 = v271;
    v9 = v253;
    v39 = v237;
    v38 = v238;
  }
  swift_release(v233);
  return v244;
}

uint64_t sub_100029F84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  void (*v44)(unint64_t *, _QWORD);
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t, void (*)(_QWORD));
  void (*v48)(_QWORD);
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  unint64_t v67;
  char v68;
  double v69;
  uint64_t result;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, void (*)(_QWORD));
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  void (*v116)(_QWORD);
  _QWORD *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v103 = a4;
  v108 = a3;
  v107 = a2;
  v106 = a1;
  v101 = type metadata accessor for HourlyUsage(0);
  v111 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v119 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for EnumeratedSequence(0, a7, a8);
  __chkstk_darwin(v105);
  v104 = (char *)&v90 - v12;
  v109 = a7;
  v110 = a8;
  v102 = type metadata accessor for EnumeratedSequence.Iterator(0, a7, a8);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v14 = (char *)&v90 - v13;
  v15 = type metadata accessor for Date(0);
  v16 = __chkstk_darwin(v15);
  v118 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v120 = (char *)&v90 - v18;
  v99 = type metadata accessor for DateInterval(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v113 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = (void (*)(_QWORD))sub_100003C84(&qword_100059EA0);
  v114 = *((_QWORD *)v116 - 1);
  __chkstk_darwin(v116);
  v121 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DateBins(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v112 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003C84(&qword_10005A490);
  __chkstk_darwin(v24);
  v115 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003C84(&qword_10005A498);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v90 - v30;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v32(v29, a5, v21);
  v33 = sub_10000DF58(&qword_10005A150, (uint64_t (*)(uint64_t))&type metadata accessor for DateBins, (uint64_t)&protocol conformance descriptor for DateBins);
  dispatch thunk of Collection.startIndex.getter(&v122, v21, v33);
  *(_QWORD *)&v29[*(int *)(v26 + 36)] = v122;
  sub_100009EF4((uint64_t)v29, (uint64_t)v31, &qword_10005A498);
  v34 = *(int *)(v26 + 36);
  v35 = v21;
  v36 = &v31[v34];
  v37 = *(_QWORD *)&v31[v34];
  dispatch thunk of Collection.endIndex.getter(&v122, v35, v33);
  if (v37 == v122)
  {
    v38 = _swiftEmptyArrayStorage;
    (*(void (**)(char *, uint64_t, uint64_t, void (*)(_QWORD)))(v114 + 56))(v115, 1, 1, v116);
LABEL_40:
    sub_100003D44((uint64_t)v31, &qword_10005A498);
    return (uint64_t)v38;
  }
  v94 = v14;
  v96 = (void (*)(char *, char *, uint64_t))v32;
  v97 = v22;
  v117 = _swiftEmptyArrayStorage;
  v39 = v33;
  v40 = v31;
  v41 = (uint64_t)v113;
  v42 = v114;
  v43 = v116;
  v93 = v35;
  v95 = v40;
  v92 = v39;
  v91 = v36;
  while (1)
  {
    v44 = (void (*)(unint64_t *, _QWORD))dispatch thunk of Collection.subscript.read(&v122, v36, v35, v39);
    v45 = v115;
    v116 = *(void (**)(_QWORD))(v42 + 16);
    v116(v115);
    v44(&v122, 0);
    v46 = v112;
    v96(v112, v40, v35);
    dispatch thunk of Collection.formIndex(after:)(v36, v35, v39);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v46, v35);
    v47 = *(void (**)(char *, uint64_t, uint64_t, void (*)(_QWORD)))(v42 + 56);
    v47(v45, 0, 1, v43);
    if ((*(unsigned int (**)(char *, uint64_t, void (*)(_QWORD)))(v42 + 48))(v45, 1, v43) == 1)
    {
      v31 = v95;
      v38 = v117;
      goto LABEL_40;
    }
    v48 = v43;
    (*(void (**)(char *, char *, void (*)(_QWORD)))(v42 + 32))(v121, v45, v43);
    v49 = v120;
    ChartBinRange.lowerBound.getter(v43);
    v50 = v118;
    ChartBinRange.upperBound.getter(v43);
    DateInterval.init(start:end:)(v49, v50);
    v51 = v106;
    if (*(_QWORD *)(v106 + 16) && (v52 = sub_10002173C(v41), (v53 & 1) != 0))
    {
      v54 = *(_QWORD *)(*(_QWORD *)(v51 + 56) + 8 * v52);
      swift_bridgeObjectRetain(v54);
    }
    else
    {
      v54 = sub_10001C9B4((uint64_t)_swiftEmptyArrayStorage);
    }
    v55 = v102;
    v56 = v103;
    v57 = v94;
    v58 = 0;
    if (*(_QWORD *)(v103 + 16))
    {
      v59 = sub_10002173C(v41);
      if ((v60 & 1) != 0)
        v58 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v59);
    }
    v61 = sub_10001D320(v108, 0.0);
    Sequence.enumerated()(v109, v110);
    EnumeratedSequence.makeIterator()(v105);
    EnumeratedSequence.Iterator.next()(&v122, v55);
    v62 = v123;
    if (v123)
      break;
    v66 = 1.0;
LABEL_27:
    (*(void (**)(char *, uint64_t))(v100 + 8))(v57, v55);
    swift_bridgeObjectRelease(v54);
    if (v66 <= 0.0)
      v66 = 0.0;
    if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
      v61 = sub_100021014(0, v61[2] + 1, 1, v61);
    v71 = v120;
    v72 = v121;
    v74 = v61[2];
    v73 = v61[3];
    if (v74 >= v73 >> 1)
    {
      v61 = sub_100021014((_QWORD *)(v73 > 1), v74 + 1, 1, v61);
      v71 = v120;
    }
    v61[2] = v74 + 1;
    *(double *)&v61[v74 + 4] = v66;
    v75 = v71;
    ChartBinRange.lowerBound.getter(v48);
    v76 = v118;
    ChartBinRange.upperBound.getter(v48);
    v77 = v119;
    DateInterval.init(start:end:)(v75, v76);
    v78 = v101;
    ((void (*)(char *, char *, void (*)(_QWORD)))v116)(&v77[*(int *)(v101 + 24)], v72, v48);
    *(_QWORD *)&v77[*(int *)(v78 + 20)] = v58;
    *(_QWORD *)&v77[*(int *)(v78 + 28)] = v61;
    v79 = (unint64_t)v117;
    if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
      v79 = sub_100021134(0, *(_QWORD *)(v79 + 16) + 1, 1, v79, &qword_10005A4A0, type metadata accessor for HourlyUsage);
    v80 = v99;
    v81 = v98;
    v42 = v114;
    v35 = v93;
    v83 = *(_QWORD *)(v79 + 16);
    v82 = *(_QWORD *)(v79 + 24);
    v84 = v111;
    v85 = (uint64_t)v119;
    v90 = v47;
    if (v83 >= v82 >> 1)
    {
      v89 = sub_100021134(v82 > 1, v83 + 1, 1, v79, &qword_10005A4A0, type metadata accessor for HourlyUsage);
      v84 = v111;
      v79 = v89;
      v85 = (uint64_t)v119;
    }
    *(_QWORD *)(v79 + 16) = v83 + 1;
    v86 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    v117 = (_QWORD *)v79;
    sub_10002A8E8(v85, v79 + v86 + *(_QWORD *)(v84 + 72) * v83);
    v87 = *(void (**)(char *, uint64_t))(v81 + 8);
    v41 = (uint64_t)v113;
    v87(v113, v80);
    (*(void (**)(char *, void (*)(_QWORD)))(v42 + 8))(v121, v48);
    v36 = v91;
    v88 = *(_QWORD *)v91;
    v43 = v48;
    v40 = v95;
    v39 = v92;
    dispatch thunk of Collection.endIndex.getter(&v122, v35, v92);
    if (v88 == v122)
    {
      v31 = v40;
      v38 = v117;
      v90(v115, 1, 1, v43);
      goto LABEL_40;
    }
  }
  v63 = v122;
  v64 = v124;
  v65 = v125;
  v66 = 1.0;
  while (!*(_QWORD *)(v54 + 16))
  {
LABEL_17:
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v62);
LABEL_18:
    EnumeratedSequence.Iterator.next()(&v122, v55);
    v63 = v122;
    v62 = v123;
    v64 = v124;
    v65 = v125;
    if (!v123)
      goto LABEL_27;
  }
  swift_bridgeObjectRetain(v65);
  v67 = sub_1000216D8(v64, v65);
  if ((v68 & 1) == 0)
  {
    swift_bridgeObjectRelease(v65);
    goto LABEL_17;
  }
  v69 = *(double *)(*(_QWORD *)(v54 + 56) + 8 * v67);
  swift_bridgeObjectRelease_n(v65, 2);
  swift_bridgeObjectRelease(v62);
  result = swift_isUniquelyReferenced_nonNull_native(v61);
  if ((result & 1) != 0)
  {
    if ((v63 & 0x8000000000000000) != 0)
      goto LABEL_42;
  }
  else
  {
    result = (uint64_t)sub_100022988(v61);
    v61 = (_QWORD *)result;
    if ((v63 & 0x8000000000000000) != 0)
      goto LABEL_42;
  }
  if (v63 < v61[2])
  {
    *(double *)&v61[v63 + 4] = v69;
    v66 = v66 - v69;
    goto LABEL_18;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10002A8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002A92C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10001FCD0(a1, a2, *(_QWORD *)(v2 + 16)) & 1;
}

uint64_t sub_10002A948(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10002A958()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002A97C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  *a1 = v3;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = v3;
  a1[4] = v2;
  a1[5] = 2;
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_10002A9A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_10002A9B8@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  (*(void (**)(_OWORD *__return_ptr))(v1 + 16))(v5);
  v3 = v5[1];
  *a1 = v5[0];
  a1[1] = v3;
  result = *(double *)&v6;
  a1[2] = v6;
  return result;
}

uint64_t sub_10002A9FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10002AA4C(1, a1);
}

uint64_t sub_10002AA04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002AA18()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002AA44@<X0>(_QWORD *a1@<X8>)
{
  return sub_10002AA4C(3, a1);
}

uint64_t sub_10002AA4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  *a2 = v2[2];
  a2[1] = v3;
  a2[2] = 0;
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = a1;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_10002AA84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002AA94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100020238(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_10002AAB0(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);

    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_10002AAF8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 89, 7);
}

unint64_t sub_10002AB3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A560;
  if (!qword_10005A560)
  {
    v1 = objc_opt_self(STUserDeviceState);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10005A560);
  }
  return result;
}

_QWORD *sub_10002AB78(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10002ABB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t destroy for UsageItem(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for UsageItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for UsageItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  return a1;
}

__n128 initializeWithTake for UsageItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for UsageItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[4];
  v7 = a1[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for UsageItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UsageItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UsageItem()
{
  return &type metadata for UsageItem;
}

uint64_t getEnumTagSinglePayload for UsageProviderError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for UsageProviderError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002AE64 + 4 * byte_10004786D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002AE84 + 4 * byte_100047872[v4]))();
}

_BYTE *sub_10002AE64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002AE84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002AE8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002AE94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002AE9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002AEA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UsageProviderError()
{
  return &type metadata for UsageProviderError;
}

unint64_t sub_10002AEC4()
{
  unint64_t result;

  result = qword_10005A5B0;
  if (!qword_10005A5B0)
  {
    result = swift_getWitnessTable(&unk_100047960, &type metadata for UsageProviderError);
    atomic_store(result, (unint64_t *)&qword_10005A5B0);
  }
  return result;
}

uint64_t sub_10002AF08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 56 * a1 + 32;
  v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

BOOL sub_10002AFFC(uint64_t a1)
{
  return sub_100020368(a1);
}

ValueMetadata *type metadata accessor for MostUsedItemsMedium()
{
  return &type metadata for MostUsedItemsMedium;
}

uint64_t initializeBufferWithCopyOfBuffer for MostUsedItemsPlaceholderMedium(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MostUsedItemsPlaceholderMedium(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MostUsedItemsPlaceholderMedium(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MostUsedItemsPlaceholderMedium()
{
  return &type metadata for MostUsedItemsPlaceholderMedium;
}

uint64_t *sub_10002B0E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(int *)(a3 + 24);
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
    swift_bridgeObjectRetain(v16);
  }
  return a1;
}

uint64_t sub_10002B1C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

uint64_t *sub_10002B238(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(int *)(a3 + 24);
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t *sub_10002B2F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *sub_10002B3D0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  return a1;
}

char *sub_10002B480(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_10002B554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B560);
}

uint64_t sub_10002B560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003C84(&qword_100059CA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10002B5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B5EC);
}

uint64_t sub_10002B5EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003C84(&qword_100059CA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MostUsedItemsLarge(uint64_t a1)
{
  return sub_10003257C(a1, qword_10005A610, (uint64_t)&nominal type descriptor for MostUsedItemsLarge);
}

void sub_10002B67C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100032F88(319, (unint64_t *)&qword_100059D18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

_QWORD *sub_10002B710(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_10002B7FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *sub_10002B860(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_10002B920(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

char *sub_10002B9FC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_10002BAB8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_10002BB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002BB98);
}

uint64_t sub_10002BB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100003C84(&qword_100059CA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10002BC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002BC34);
}

uint64_t sub_10002BC34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003C84(&qword_100059CA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for MostUsedItemsPlaceholderView(uint64_t a1)
{
  return sub_10003257C(a1, qword_10005A6A8, (uint64_t)&nominal type descriptor for MostUsedItemsPlaceholderView);
}

void sub_10002BCC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100032F88(319, (unint64_t *)&qword_100059D18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100047AE0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_10002BD54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F068, 1);
}

uint64_t sub_10002BD64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[16];
  _QWORD *v61;
  int v62;

  v59 = a1;
  v52 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v52);
  v51 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003C84(&qword_10005A7A8);
  v57 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  __chkstk_darwin(v3);
  v53 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100003C84(&qword_10005A7B0);
  __chkstk_darwin(v55);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003C84(&qword_10005A7B8);
  __chkstk_darwin(v56);
  v54 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Color.RGBColorSpace(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GridItem.Size(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (_OWORD *)((char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for GridItem(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v15 = xmmword_100047A00;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for GridItem.Size.flexible(_:), v12);
  GridItem.init(_:spacing:alignment:)(v15, 0, 1, 0, 0, 1);
  v19 = type metadata accessor for MostUsedItemsLarge(0);
  v20 = *(int *)(v19 + 24);
  v50 = v1;
  v21 = *(_QWORD **)(v1 + v20);
  v22 = sub_10001D410((uint64_t)v18, (uint64_t)v21);
  v23 = *(int *)(v19 + 20);
  v24 = sub_10002C1C4(v21, *(_QWORD *)(v1 + v23));
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Color.RGBColorSpace.sRGB(_:), v8);
  v25 = Color.init(_:red:green:blue:opacity:)(v11, 0.17254902, 0.17254902, 0.180392157, 1.0);
  v26 = static HorizontalAlignment.leading.getter(v25);
  v61 = v24;
  v62 = 0;
  sub_10000DF58(&qword_10005A7C0, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  v27 = v51;
  dispatch thunk of OptionSet.init(rawValue:)(&v62);
  v28 = sub_100003C84(&qword_10005A7C8);
  v29 = sub_1000330F8(&qword_10005A7D0, &qword_10005A7C8, (void (*)(void))sub_100030D44);
  v30 = v53;
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v22, v26, 0x4030000000000000, 0, v27, sub_100030D3C, v60, v28, v29);
  v31 = swift_bridgeObjectRelease(v24);
  v32 = static Animation.default.getter(v31);
  v33 = *(_QWORD *)(v50 + v23);
  v35 = v57;
  v34 = v58;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v6, v30, v58);
  v36 = (uint64_t *)&v6[*(int *)(v55 + 36)];
  *v36 = v32;
  v36[1] = v33;
  v37 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
  swift_bridgeObjectRetain(v33);
  v38 = v37(v30, v34);
  LOBYTE(v37) = static Edge.Set.all.getter(v38);
  v39 = v54;
  sub_100003D00((uint64_t)v6, v54, &qword_10005A7B0);
  v40 = v39 + *(int *)(v56 + 36);
  *(_BYTE *)v40 = (_BYTE)v37;
  *(_OWORD *)(v40 + 8) = 0u;
  *(_OWORD *)(v40 + 24) = 0u;
  *(_BYTE *)(v40 + 40) = 1;
  v41 = sub_100003D44((uint64_t)v6, &qword_10005A7B0);
  v42 = static Alignment.center.getter(v41);
  v44 = v43;
  v45 = sub_100003C84(&qword_10005A7E8);
  v46 = v59;
  v47 = v59 + *(int *)(v45 + 36);
  sub_10002EED0(v25, v47);
  v48 = (uint64_t *)(v47 + *(int *)(sub_100003C84(&qword_10005A7F0) + 36));
  *v48 = v42;
  v48[1] = v44;
  sub_100009EF4(v39, v46, &qword_10005A7B8);
  return swift_release(v25);
}

_QWORD *sub_10002C1C4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = ceil((double)v2 / (double)(uint64_t)result);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = (uint64_t)v3;
  if ((uint64_t)v3 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v4)
  {
    if (!v2)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v4 - 1 >= (unint64_t)v2)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    v34 = *(_QWORD *)(a2 + 16);
    v6 = sub_10002144C(0, 1, 1, _swiftEmptyArrayStorage);
    v7 = 0;
    v32 = a2 + 32;
    v8 = (uint64_t *)(a2 + 80);
    v35 = v4;
    while (1)
    {
      v11 = *(v8 - 6);
      v36 = *(_OWORD *)(v8 - 5);
      v12 = (void *)*(v8 - 3);
      v13 = *(v8 - 2);
      v15 = *(v8 - 1);
      v14 = *v8;
      v16 = v6[2];
      v17 = v6[3];
      v18 = v16 + 1;
      swift_bridgeObjectRetain(*(v8 - 5));
      v19 = *((id *)&v36 + 1);
      v20 = v12;
      result = (_QWORD *)swift_bridgeObjectRetain(v14);
      if (v16 >= v17 >> 1)
      {
        result = sub_10002144C((_QWORD *)(v17 > 1), v16 + 1, 1, v6);
        v6 = result;
      }
      v6[2] = v18;
      v21 = &v6[7 * v16];
      v21[4] = v11;
      *(_OWORD *)(v21 + 5) = v36;
      v21[7] = v20;
      v21[8] = v13;
      v21[9] = v15;
      v21[10] = v14;
      v9 = v35;
      v22 = v35 + v7;
      if (__OFADD__(v35, v7))
        break;
      if (v22 < v34)
      {
        if (v22 < 0)
          goto LABEL_21;
        v23 = (uint64_t *)(v32 + 56 * v22);
        v33 = *v23;
        v37 = *(_OWORD *)(v23 + 1);
        v24 = (void *)v23[3];
        v25 = v23[4];
        v27 = v23[5];
        v26 = v23[6];
        v28 = v6[3];
        v29 = v16 + 2;
        swift_bridgeObjectRetain(v23[1]);
        v30 = *((id *)&v37 + 1);
        v31 = v24;
        swift_bridgeObjectRetain(v26);
        if (v18 >= v28 >> 1)
          v6 = sub_10002144C((_QWORD *)(v28 > 1), v29, 1, v6);
        v9 = v35;
        v6[2] = v29;
        v10 = &v6[7 * v18];
        v10[4] = v33;
        *(_OWORD *)(v10 + 5) = v37;
        v10[7] = v31;
        v10[8] = v25;
        v10[9] = v27;
        v10[10] = v26;
      }
      ++v7;
      v8 += 7;
      if (v9 == v7)
        return v6;
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10002C43C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = swift_bridgeObjectRetain(a1);
  v3 = sub_100009780(v2);
  swift_bridgeObjectRelease(a1);
  v10 = v3;
  KeyPath = swift_getKeyPath(&unk_100047C38);
  v5 = sub_100003C84(&qword_10005A708);
  v6 = sub_100003C84(&qword_10005A7E0);
  v7 = sub_100009F64(&qword_10005A718, &qword_10005A708, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = sub_100030D44();
  return ForEach<>.init(_:id:content:)(&v10, KeyPath, sub_10002CBA8, 0, v5, v6, v7, &protocol witness table for String, v8);
}

uint64_t sub_10002C514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  Swift::String v34;
  void *object;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];

  v87 = a3;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003C84(&qword_10005A748);
  __chkstk_darwin(v8);
  v10 = (char **)((char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (int *)type metadata accessor for MostUsedItemCell(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100003C84(&qword_10005A728);
  __chkstk_darwin(v79);
  v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003C84(&qword_10005A750);
  v17 = *(_QWORD *)(v16 - 8);
  v81 = v16;
  v82 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100003C84(&qword_10005A710);
  v20 = __chkstk_darwin(v80);
  v78 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v78 - v23;
  __chkstk_darwin(v22);
  v86 = (char *)&v78 - v25;
  v26 = sub_100003C84(&qword_10005A7E0);
  __chkstk_darwin(v26);
  v85 = (uint64_t)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = swift_getKeyPath(&unk_100047C60);
  v28 = sub_100003C84(&qword_10005A758);
  swift_storeEnumTagMultiPayload(v10, v28, 0);
  KeyPath = swift_getKeyPath(&unk_100047C90);
  v30 = (uint64_t *)&v13[v11[5]];
  *v30 = KeyPath;
  v31 = sub_100003C84(&qword_100059CA0);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  sub_100009EF4((uint64_t)v10, (uint64_t)v13, &qword_10005A748);
  v32 = &v13[v11[6]];
  v33 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v32 = *(_OWORD *)a2;
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v32 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v13[v11[7]] = a1;
  strcpy((char *)v89, "MostUsedItem");
  BYTE5(v89[1]) = 0;
  HIWORD(v89[1]) = -5120;
  v88 = a1;
  sub_100030BFC((_QWORD *)a2);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(object);
  v36 = v89[0];
  v37 = v89[1];
  v38 = sub_10000DF58(&qword_10005A738, type metadata accessor for MostUsedItemCell, (uint64_t)&unk_100047E60);
  View.accessibilityIdentifier(_:)(v36, v37, v11, v38);
  v39 = v37;
  v40 = (uint64_t)v24;
  swift_bridgeObjectRelease(v39);
  v41 = sub_100015A24((uint64_t)v13, type metadata accessor for MostUsedItemCell);
  static AccessibilityChildBehavior.ignore.getter(v41);
  v42 = sub_100030B40();
  v43 = v79;
  View.accessibilityElement(children:)(v7, v79, v42);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v84);
  sub_100003D44((uint64_t)v15, &qword_10005A728);
  v44 = *(double *)(a2 + 32);
  v89[0] = v43;
  v89[1] = v42;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v89, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v46 = (uint64_t)v78;
  v47 = v81;
  View.accessibilitySortPriority(_:)(v81, OpaqueTypeConformance2, v44 + -100000.0);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v47);
  v48 = *(_QWORD *)(a2 + 48);
  v89[0] = *(_QWORD *)(a2 + 40);
  v89[1] = v48;
  v49 = sub_100009EB0();
  swift_bridgeObjectRetain(v48);
  v50 = Text.init<A>(_:)(v89, &type metadata for String, v49);
  v52 = v51;
  v54 = v53;
  LOBYTE(v42) = v55 & 1;
  ModifiedContent<>.accessibility(label:)();
  sub_100007D1C(v50, v52, v42);
  swift_bridgeObjectRelease(v54);
  sub_100003D44(v46, &qword_10005A710);
  if (v44 < 0.0)
    goto LABEL_9;
  if (qword_100059948 != -1)
    swift_once(&qword_100059948, sub_10003A90C);
  v56 = (void *)qword_10005B0E0;
  v57 = v44 < 60.0 ? 128 : 96;
  objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v57);
  objc_msgSend(v56, "setUnitsStyle:", 3);
  v58 = objc_msgSend(v56, "stringFromTimeInterval:", v44);
  if (v58)
  {
    v59 = v58;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v62 = v61;

  }
  else
  {
LABEL_9:
    v60 = 0;
    v62 = 0xE000000000000000;
  }
  if (String.count.getter(v60, v62))
  {
    v89[0] = v60;
    v89[1] = v62;
    v63 = Text.init<A>(_:)(v89, &type metadata for String, v49);
  }
  else
  {
    swift_bridgeObjectRelease(v62);
    v67 = LocalizedStringKey.init(stringLiteral:)(0x65676173556F4ELL, 0xE700000000000000);
    v63 = Text.init(_:tableName:bundle:comment:)(v67);
  }
  v68 = v63;
  v69 = v64;
  v70 = v66;
  v71 = v65 & 1;
  v72 = (uint64_t)v86;
  ModifiedContent<>.accessibility(value:)();
  sub_100007D1C(v68, v69, v71);
  swift_bridgeObjectRelease(v70);
  v73 = sub_100003D44(v40, &qword_10005A710);
  v74 = static Alignment.leading.getter(v73);
  v75 = v85;
  sub_10003E39C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v85, 0.0, 1, 0.0, 1, v74, v76);
  sub_100003D44(v72, &qword_10005A710);
  return sub_100009EF4(v75, v87, &qword_10005A7E0);
}

uint64_t sub_10002CBA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 24);
  v5[0] = *(_OWORD *)(a1 + 8);
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  return sub_10002C514(v2, (uint64_t)v5, a2);
}

uint64_t sub_10002CBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a2;
  v3 = sub_100003C84(&qword_10005A6E8);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003C84(&qword_10005A6F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003C84(&qword_10005A6F8);
  v9 = __chkstk_darwin(v36);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v9);
  *((_QWORD *)v5 + 1) = 0x4030000000000000;
  v5[16] = 0;
  sub_100003C84(&qword_10005A700);
  v12 = swift_bridgeObjectRetain(a1);
  v13 = sub_100009780(v12);
  swift_bridgeObjectRelease(a1);
  v38 = v13;
  KeyPath = swift_getKeyPath(&unk_100047C38);
  v15 = sub_100003C84(&qword_10005A708);
  v16 = sub_100003C84(&qword_10005A710);
  v17 = sub_100009F64(&qword_10005A718, &qword_10005A708, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = sub_100030A94();
  v19 = ForEach<>.init(_:id:content:)(&v38, KeyPath, sub_10002D4BC, 0, v15, v16, v17, &protocol witness table for String, v18);
  v20 = static Animation.default.getter(v19);
  sub_100003D00((uint64_t)v5, (uint64_t)v8, &qword_10005A6E8);
  v21 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v21 = v20;
  v21[1] = a1;
  swift_bridgeObjectRetain(a1);
  v22 = sub_100003D44((uint64_t)v5, &qword_10005A6E8);
  LOBYTE(v20) = static Edge.Set.leading.getter(v22);
  v23 = EdgeInsets.init(_all:)(12.0);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_100003D00((uint64_t)v8, (uint64_t)v11, &qword_10005A6F0);
  v30 = &v11[*(int *)(v36 + 36)];
  *v30 = v20;
  *((double *)v30 + 1) = v23;
  *((_QWORD *)v30 + 2) = v25;
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = v29;
  v30[40] = 0;
  v31 = sub_100003D44((uint64_t)v8, &qword_10005A6F0);
  LOBYTE(v20) = static Edge.Set.trailing.getter(v31);
  v32 = v37;
  sub_100003D00((uint64_t)v11, v37, &qword_10005A6F8);
  v33 = v32 + *(int *)(sub_100003C84(&qword_10005A740) + 36);
  *(_BYTE *)v33 = v20;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_BYTE *)(v33 + 40) = 1;
  return sub_100003D44((uint64_t)v11, &qword_10005A6F8);
}

uint64_t sub_10002CEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  Swift::String v31;
  void *object;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];

  v81 = a3;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v78 = *(_QWORD *)(v5 - 8);
  v79 = v5;
  __chkstk_darwin(v5);
  v75 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003C84(&qword_10005A748);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (int *)type metadata accessor for MostUsedItemCell(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003C84(&qword_10005A728);
  __chkstk_darwin(v74);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003C84(&qword_10005A750);
  v16 = *(_QWORD *)(v15 - 8);
  v76 = v15;
  v77 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003C84(&qword_10005A710);
  v19 = __chkstk_darwin(v72);
  v73 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v72 - v22;
  __chkstk_darwin(v21);
  v80 = (char *)&v72 - v24;
  *v9 = swift_getKeyPath(&unk_100047C60);
  v25 = sub_100003C84(&qword_10005A758);
  swift_storeEnumTagMultiPayload(v9, v25, 0);
  KeyPath = swift_getKeyPath(&unk_100047C90);
  v27 = (uint64_t *)&v12[v10[5]];
  *v27 = KeyPath;
  v28 = sub_100003C84(&qword_100059CA0);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  sub_100009EF4((uint64_t)v9, (uint64_t)v12, &qword_10005A748);
  v29 = &v12[v10[6]];
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v29 = *(_OWORD *)a2;
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v29 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v12[v10[7]] = a1;
  strcpy((char *)v83, "MostUsedItem");
  BYTE5(v83[1]) = 0;
  HIWORD(v83[1]) = -5120;
  v82 = a1;
  sub_100030BFC((_QWORD *)a2);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  v33 = v83[0];
  v34 = v83[1];
  v35 = sub_10000DF58(&qword_10005A738, type metadata accessor for MostUsedItemCell, (uint64_t)&unk_100047E60);
  View.accessibilityIdentifier(_:)(v33, v34, v10, v35);
  swift_bridgeObjectRelease(v34);
  v36 = (uint64_t)v12;
  v37 = (uint64_t)v23;
  v38 = sub_100015A24(v36, type metadata accessor for MostUsedItemCell);
  v39 = v75;
  static AccessibilityChildBehavior.ignore.getter(v38);
  v40 = sub_100030B40();
  v41 = v74;
  View.accessibilityElement(children:)(v39, v74, v40);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v39, v79);
  sub_100003D44((uint64_t)v14, &qword_10005A728);
  v42 = *(double *)(a2 + 32);
  v83[0] = v41;
  v83[1] = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v83, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v44 = (uint64_t)v73;
  v45 = v76;
  View.accessibilitySortPriority(_:)(v76, OpaqueTypeConformance2, v42 + -100000.0);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v18, v45);
  v46 = *(_QWORD *)(a2 + 48);
  v83[0] = *(_QWORD *)(a2 + 40);
  v83[1] = v46;
  v47 = sub_100009EB0();
  swift_bridgeObjectRetain(v46);
  v48 = Text.init<A>(_:)(v83, &type metadata for String, v47);
  v50 = v49;
  v52 = v51;
  LOBYTE(a2) = v53 & 1;
  ModifiedContent<>.accessibility(label:)();
  sub_100007D1C(v48, v50, a2);
  swift_bridgeObjectRelease(v52);
  sub_100003D44(v44, &qword_10005A710);
  if (v42 < 0.0)
    goto LABEL_9;
  if (qword_100059948 != -1)
    swift_once(&qword_100059948, sub_10003A90C);
  v54 = (void *)qword_10005B0E0;
  v55 = v42 < 60.0 ? 128 : 96;
  objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v55);
  objc_msgSend(v54, "setUnitsStyle:", 3);
  v56 = objc_msgSend(v54, "stringFromTimeInterval:", v42);
  if (v56)
  {
    v57 = v56;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v60 = v59;

  }
  else
  {
LABEL_9:
    v58 = 0;
    v60 = 0xE000000000000000;
  }
  if (String.count.getter(v58, v60))
  {
    v83[0] = v58;
    v83[1] = v60;
    v61 = Text.init<A>(_:)(v83, &type metadata for String, v47);
  }
  else
  {
    swift_bridgeObjectRelease(v60);
    v65 = LocalizedStringKey.init(stringLiteral:)(0x65676173556F4ELL, 0xE700000000000000);
    v61 = Text.init(_:tableName:bundle:comment:)(v65);
  }
  v66 = v61;
  v67 = v62;
  v68 = v64;
  v69 = v63 & 1;
  v70 = (uint64_t)v80;
  ModifiedContent<>.accessibility(value:)();
  sub_100007D1C(v66, v67, v69);
  swift_bridgeObjectRelease(v68);
  sub_100003D44(v37, &qword_10005A710);
  return sub_100009EF4(v70, v81, &qword_10005A710);
}

uint64_t sub_10002D4BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;

  v2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 24);
  v5[0] = *(_OWORD *)(a1 + 8);
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  return sub_10002CEC0(v2, (uint64_t)v5, a2);
}

uint64_t sub_10002D500@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10002CBF0(*v1, a1);
}

uint64_t sub_10002D508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a1;
  v43 = a2;
  v2 = sub_100003C84(&qword_10005AA00);
  v3 = __chkstk_darwin(v2);
  v42 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v40 - v5;
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v40 - v12;
  v14 = (int *)type metadata accessor for AppIcon(0);
  v15 = __chkstk_darwin(v14);
  v41 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v40 - v18);
  __chkstk_darwin(v17);
  v21 = (char *)&v40 - v20;
  sub_1000430F4((uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for WidgetFamily.systemMedium(_:), v7);
  v22 = sub_10000DF58((unint64_t *)&qword_10005A128, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v45, v7, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v44, v7, v22);
  v24 = v44;
  v23 = v45;
  v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v11, v7);
  v25(v13, v7);
  if (v23 == v24)
    v26 = 20.0;
  else
    v26 = 29.0;
  v27 = type metadata accessor for MostUsedItemCell(0);
  v28 = v40;
  v29 = v40 + *(int *)(v27 + 24);
  v31 = *(void **)(v29 + 16);
  v30 = *(void **)(v29 + 24);
  *v19 = swift_getKeyPath(&unk_100047EB0);
  v32 = sub_100003C84(&qword_10005AA08);
  swift_storeEnumTagMultiPayload(v19, v32, 0);
  *(double *)((char *)v19 + v14[5]) = v26;
  *(_QWORD *)((char *)v19 + v14[6]) = v30;
  *(_QWORD *)((char *)v19 + v14[7]) = v31;
  sub_10000DE24((uint64_t)v19, (uint64_t)v21, type metadata accessor for AppIcon);
  v33 = v30;
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v31);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v34 = sub_100003C84(&qword_10005AA10);
  sub_10002D854(v28, (uint64_t)&v6[*(int *)(v34 + 44)]);
  v35 = v41;
  sub_10000DB08((uint64_t)v21, v41, type metadata accessor for AppIcon);
  v36 = v42;
  sub_100003D00((uint64_t)v6, v42, &qword_10005AA00);
  v37 = v43;
  sub_10000DB08(v35, v43, type metadata accessor for AppIcon);
  v38 = sub_100003C84(&qword_10005AA18);
  sub_100003D00(v36, v37 + *(int *)(v38 + 48), &qword_10005AA00);
  sub_100003D44((uint64_t)v6, &qword_10005AA00);
  sub_100015A24((uint64_t)v21, type metadata accessor for AppIcon);
  sub_100003D44(v36, &qword_10005AA00);
  return sub_100015A24(v35, type metadata accessor for AppIcon);
}

uint64_t sub_10002D854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void *object;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;

  v102 = a2;
  v96 = sub_100003C84(&qword_10005AA20);
  v95 = *(_QWORD *)(v96 - 8);
  v3 = __chkstk_darwin(v96);
  v103 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v100 = (char *)&v94 - v6;
  __chkstk_darwin(v5);
  v101 = (uint64_t)&v94 - v7;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v104 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetFamily(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v94 - v16;
  v18 = sub_100003C84(&qword_10005AA28);
  v19 = __chkstk_darwin(v18);
  v99 = (uint64_t)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v94 - v21;
  sub_1000430F4((uint64_t)v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for WidgetFamily.systemLarge(_:), v11);
  v23 = sub_10000DF58((unint64_t *)&qword_10005A128, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v11, v23);
  dispatch thunk of RawRepresentable.rawValue.getter(&v109, v11, v23);
  v24 = v118;
  v25 = v109;
  v26 = *(void (**)(char *, uint64_t))(v12 + 8);
  v26(v15, v11);
  v26(v17, v11);
  v105 = v22;
  v98 = v8;
  v97 = v9;
  if (v24 == v25)
  {
    v27 = type metadata accessor for MostUsedItemCell(0);
    v28 = a1 + *(int *)(v27 + 24);
    v29 = *(_QWORD *)(v28 + 48);
    v118 = *(_QWORD *)(v28 + 40);
    v119 = v29;
    v30 = sub_100009EB0();
    swift_bridgeObjectRetain(v29);
    v31 = Text.init<A>(_:)(&v118, &type metadata for String, v30);
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    v38 = v104;
    sub_1000430C8(v104);
    sub_10002E0A8(1, v38, v31, v33, v37, v35, (uint64_t)&v118);
    sub_100007D1C(v31, v33, v37);
    swift_bridgeObjectRelease(v35);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v38, v8);
    v40 = v118;
    v39 = v119;
    v41 = v120;
    v42 = v122;
    v94 = v121;
    v43 = v124;
    v109 = v118;
    v110 = v119;
    v111 = v120;
    v112 = v121;
    v113 = v122;
    v114 = v123;
    v115 = v124;
    v116 = v125;
    v117 = v126;
    v107 = 0;
    v108 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v108);
    v107 = 0xD000000000000019;
    v108 = 0x8000000100049E60;
    v106 = *(_QWORD *)(a1 + *(int *)(v27 + 28));
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v44._object;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(object);
    v46 = v107;
    v47 = a1;
    v48 = v108;
    v49 = sub_100003C84(&qword_10005AA30);
    v50 = sub_1000325B8();
    View.accessibilityIdentifier(_:)(v46, v48, v49, v50);
    v51 = v48;
    a1 = v47;
    swift_bridgeObjectRelease(v51);
    sub_100007D1C(v40, v39, v41);
    v52 = v43;
    v22 = v105;
    swift_release(v52);
    swift_release(v42);
    swift_bridgeObjectRelease(v94);
    v53 = 0;
  }
  else
  {
    v53 = 1;
  }
  v54 = v104;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v22, v53, 1, v96);
  v55 = type metadata accessor for MostUsedItemCell(0);
  v56 = *(double *)(a1 + *(int *)(v55 + 24) + 32);
  if (v56 >= 0.0)
  {
    v59 = v98;
    if (qword_100059948 != -1)
      swift_once(&qword_100059948, sub_10003A90C);
    v61 = (void *)qword_10005B0E0;
    if (v56 < 60.0)
      v62 = 128;
    else
      v62 = 96;
    objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v62);
    objc_msgSend(v61, "setUnitsStyle:", 1);
    v63 = objc_msgSend(v61, "stringFromTimeInterval:", v56);
    v60 = v97;
    if (v63)
    {
      v64 = v63;
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v57 = v65;

    }
    else
    {
      v58 = 0;
      v57 = 0xE000000000000000;
    }
  }
  else
  {
    v57 = 0xE200000000000000;
    v58 = 11565;
    v59 = v98;
    v60 = v97;
  }
  v118 = v58;
  v119 = v57;
  v66 = sub_100009EB0();
  v67 = Text.init<A>(_:)(&v118, &type metadata for String, v66);
  v69 = v68;
  v71 = v70;
  v73 = v72 & 1;
  sub_1000430C8(v54);
  sub_10002E0A8(0, v54, v67, v69, v73, v71, (uint64_t)&v118);
  sub_100007D1C(v67, v69, v73);
  swift_bridgeObjectRelease(v71);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v59);
  v74 = v118;
  v75 = v119;
  v76 = v120;
  v77 = v122;
  v104 = v121;
  v78 = v124;
  v109 = v118;
  v110 = v119;
  v111 = v120;
  v112 = v121;
  v113 = v122;
  v114 = v123;
  v115 = v124;
  v116 = v125;
  v117 = v126;
  v107 = 0;
  v108 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v108);
  v107 = 0xD000000000000016;
  v108 = 0x8000000100049E40;
  v106 = *(_QWORD *)(a1 + *(int *)(v55 + 28));
  v79._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v80 = v79._object;
  String.append(_:)(v79);
  swift_bridgeObjectRelease(v80);
  v81 = v107;
  v82 = v108;
  v83 = sub_100003C84(&qword_10005AA30);
  v84 = sub_1000325B8();
  v85 = v100;
  View.accessibilityIdentifier(_:)(v81, v82, v83, v84);
  swift_bridgeObjectRelease(v82);
  sub_100007D1C(v74, v75, v76);
  swift_release(v78);
  swift_release(v77);
  swift_bridgeObjectRelease(v104);
  v86 = (uint64_t)v85;
  v87 = v101;
  sub_100009EF4(v86, v101, &qword_10005AA20);
  v88 = (uint64_t)v105;
  v89 = v99;
  sub_100003D00((uint64_t)v105, v99, &qword_10005AA28);
  v90 = v103;
  sub_100003D00(v87, v103, &qword_10005AA20);
  v91 = v102;
  sub_100003D00(v89, v102, &qword_10005AA28);
  v92 = sub_100003C84(&qword_10005AA60);
  sub_100003D00(v90, v91 + *(int *)(v92 + 48), &qword_10005AA20);
  sub_100003D44(v87, &qword_10005AA20);
  sub_100003D44(v88, &qword_10005AA28);
  sub_100003D44(v90, &qword_10005AA20);
  return sub_100003D44(v89, &qword_10005AA28);
}

uint64_t sub_10002E0A8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v66 = a4;
  v67 = a6;
  v65 = a3;
  v11 = type metadata accessor for Color.RGBColorSpace(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for WidgetRenderingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static WidgetRenderingMode.accented.getter(v17);
  LOBYTE(a2) = static WidgetRenderingMode.== infix(_:_:)(a2, v19);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Color.RGBColorSpace.sRGB(_:), v11);
    v21 = Color.init(_:red:green:blue:opacity:)(v14, 0.235294118, 0.235294118, 0.262745098, 1.0);
    v22 = Color.opacity(_:)(0.6);
    v23 = swift_release(v21);
    if ((a1 & 1) != 0)
      v24 = static Font.footnote.getter(v23);
    else
      v24 = static Font.caption.getter(v23);
    v27 = v24;
    v28 = Text.font(_:)(v24, v65, v66, a5 & 1, v67);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    swift_release(v27);
    if ((a1 & 1) != 0)
    {
      v35 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      v36 = Color.init(_:)(v35);
    }
    else
    {
      swift_retain(v22);
      v36 = v22;
    }
    v45 = v32 & 1;
    v57 = Text.foregroundColor(_:)(v36, v28, v30, v32 & 1, v34);
    v67 = v34;
    v58 = v57;
    v50 = v59;
    v52 = v60;
    v54 = v61;
    swift_release(v36);
    swift_release(v22);
    v55 = v28;
    v56 = v30;
    v48 = v58;
    v44 = v67;
  }
  else
  {
    if ((a1 & 1) != 0)
    {
      v25 = &selRef_labelColor;
      v26 = static Font.footnote.getter(v20);
    }
    else
    {
      v25 = &selRef_tertiaryLabelColor;
      v26 = static Font.caption.getter(v20);
    }
    v37 = v26;
    v38 = Text.font(_:)(v26, v65, v66, a5 & 1, v67);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_release(v37);
    v45 = v42 & 1;
    v46 = objc_msgSend((id)objc_opt_self(UIColor), *v25);
    v47 = Color.init(_:)(v46);
    v48 = Text.foregroundColor(_:)(v47, v38, v40, v42 & 1, v44);
    v50 = v49;
    v52 = v51;
    v54 = v53;
    swift_release(v47);
    v55 = v38;
    v56 = v40;
  }
  sub_100007D1C(v55, v56, v45);
  swift_bridgeObjectRelease(v44);
  KeyPath = swift_getKeyPath(&unk_100047EE0);
  result = swift_getKeyPath(&unk_100047F10);
  *(_QWORD *)a7 = v48;
  *(_QWORD *)(a7 + 8) = v50;
  *(_BYTE *)(a7 + 16) = v52 & 1;
  *(_QWORD *)(a7 + 24) = v54;
  *(_QWORD *)(a7 + 32) = KeyPath;
  *(_BYTE *)(a7 + 40) = 1;
  *(_QWORD *)(a7 + 48) = result;
  *(_QWORD *)(a7 + 56) = 1;
  *(_BYTE *)(a7 + 64) = 0;
  return result;
}

uint64_t sub_10002E3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4028000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100003C84(&qword_10005A9F8);
  return sub_10002D508(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_10002E404@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[3];

  v55 = a1;
  v2 = sub_100003C84(&qword_10005ABC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for Image.ResizingMode(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  v53 = sub_100003C84(&qword_10005ABC8);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v46 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003C84(&qword_10005ABD0);
  __chkstk_darwin(v49);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003C84(&qword_10005ABD8);
  __chkstk_darwin(v50);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003C84(&qword_10005ABE0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v48 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004335C((uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ColorScheme.light(_:), v7);
  v20 = static ColorScheme.== infix(_:_:)(v13, v11);
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, v7);
  v21(v13, v7);
  v22 = type metadata accessor for AppIcon(0);
  v23 = v22;
  v24 = 28;
  if ((v20 & 1) != 0)
    v24 = 24;
  v25 = Image.init(uiImage:)(*(id *)(v1 + *(int *)(v22 + v24)));
  v26 = v45;
  v27 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v47);
  v28 = Image.resizable(capInsets:resizingMode:)(v6, v25, 0.0, 0.0, 0.0, 0.0);
  swift_release(v25);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v6, v27);
  static WidgetAccentedRenderingMode.desaturated.getter(v29);
  v30 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v4, 0, 1, v30);
  v31 = v46;
  Image.widgetAccentedRenderingMode(_:)(v4, v28);
  swift_release(v28);
  v32 = sub_100003D44((uint64_t)v4, &qword_10005ABC0);
  v33 = *(_QWORD *)(v1 + *(int *)(v23 + 20));
  v34 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(v56, v33, 0, v33, 0, v34, v35);
  v36 = v51;
  v37 = v53;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v16, v31, v53);
  v38 = &v16[*(int *)(v49 + 36)];
  v39 = v56[1];
  *(_OWORD *)v38 = v56[0];
  *((_OWORD *)v38 + 1) = v39;
  *((_OWORD *)v38 + 2) = v56[2];
  (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
  sub_100003D00((uint64_t)v16, (uint64_t)v18, &qword_10005ABD0);
  v40 = v50;
  v18[*(int *)(v50 + 36)] = 1;
  sub_100003D44((uint64_t)v16, &qword_10005ABD0);
  v41 = sub_10003316C();
  v42 = v48;
  View.widgetAccentable(_:)(1, v40, v41);
  sub_100003D44((uint64_t)v18, &qword_10005ABD8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v55, v42, v54);
}

uint64_t sub_10002E834@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100003C84(&qword_10005A760);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003C84(&qword_10005A768);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = static HorizontalAlignment.leading.getter(v10);
  *(_QWORD *)v8 = result;
  *((_QWORD *)v8 + 1) = 0x4030000000000000;
  v8[16] = 0;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_100003C84(&qword_10005A770);
    v14 = swift_allocObject(&unk_100056C78, 25, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_BYTE *)(v14 + 24) = a2 & 1;
    v15 = sub_100003C84(&qword_10005A778);
    v16 = sub_100030C60();
    v17 = ForEach<>.init(_:content:)(0, a1, sub_100030C54, v14, v15, v16);
    v18 = static Edge.Set.leading.getter(v17);
    v19 = EdgeInsets.init(_all:)(12.0);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    sub_100003D00((uint64_t)v8, (uint64_t)v12, &qword_10005A760);
    v26 = &v12[*(int *)(v9 + 36)];
    *v26 = v18;
    *((double *)v26 + 1) = v19;
    *((_QWORD *)v26 + 2) = v21;
    *((_QWORD *)v26 + 3) = v23;
    *((_QWORD *)v26 + 4) = v25;
    v26[40] = 0;
    v27 = sub_100003D44((uint64_t)v8, &qword_10005A760);
    v28 = static Edge.Set.trailing.getter(v27);
    sub_100003D00((uint64_t)v12, a3, &qword_10005A768);
    v29 = a3 + *(int *)(sub_100003C84(&qword_10005A798) + 36);
    *(_BYTE *)v29 = v28;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_BYTE *)(v29 + 40) = 1;
    return sub_100003D44((uint64_t)v12, &qword_10005A768);
  }
  return result;
}

_QWORD *sub_10002EA34@<X0>(char a1@<W2>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for MostUsedItemNoContentView(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003C84(&qword_10005A7A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    *v9 = 1;
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v10 = sub_100030CE4();
    v11 = sub_10000DF58(&qword_10005A790, type metadata accessor for MostUsedItemNoContentView, (uint64_t)&unk_100047DC0);
    return _ConditionalContent<>.init(storage:)(a2, v9, &type metadata for MostUsedItemPlaceholderView, v4, v10, v11);
  }
  else
  {
    *v6 = swift_getKeyPath(&unk_100047C90);
    v13 = sub_100003C84(&qword_100059CA0);
    swift_storeEnumTagMultiPayload(v6, v13, 0);
    *((_BYTE *)v6 + *(int *)(v4 + 20)) = 1;
    sub_10000DB08((uint64_t)v6, (uint64_t)v9, type metadata accessor for MostUsedItemNoContentView);
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v14 = sub_100030CE4();
    v15 = sub_10000DF58(&qword_10005A790, type metadata accessor for MostUsedItemNoContentView, (uint64_t)&unk_100047DC0);
    _ConditionalContent<>.init(storage:)(a2, v9, &type metadata for MostUsedItemPlaceholderView, v4, v14, v15);
    return (_QWORD *)sub_100015A24((uint64_t)v6, type metadata accessor for MostUsedItemNoContentView);
  }
}

uint64_t sub_10002EBEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E834(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t sub_10002EBF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v4 = type metadata accessor for MostUsedItemsPlaceholderView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100003C84(&qword_10005A810);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + *(int *)(v4 + 20));
  if (v12 < 0)
  {
    __break(1u);
  }
  else
  {
    v23[0] = 0;
    v23[1] = v12;
    KeyPath = swift_getKeyPath(&unk_100047CC8);
    sub_10000DB08(a1, (uint64_t)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MostUsedItemsPlaceholderView);
    v14 = *(unsigned __int8 *)(v5 + 80);
    v15 = (v14 + 16) & ~v14;
    v16 = swift_allocObject(&unk_100056CA0, v15 + v6, v14 | 7);
    sub_10000DE24((uint64_t)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, type metadata accessor for MostUsedItemsPlaceholderView);
    v17 = sub_100003C84(&qword_100059B18);
    v18 = sub_100003C84(&qword_10005A818);
    v19 = sub_100007C6C();
    v20 = sub_100030E50();
    v21 = ForEach<>.init(_:id:content:)(v23, KeyPath, sub_100030E04, v16, v17, v18, v19, &protocol witness table for Int, v20);
    LOBYTE(v17) = static Edge.Set.all.getter(v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a2, v11, v7);
    v22 = a2 + *(int *)(sub_100003C84(&qword_10005A838) + 36);
    *(_BYTE *)v22 = v17;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_BYTE *)(v22 + 40) = 1;
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return result;
}

double sub_10002EDE0@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  _OWORD v19[10];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v4 = static HorizontalAlignment.center.getter();
  v5 = (int *)type metadata accessor for MostUsedItemsPlaceholderView(0);
  v6 = *(_QWORD *)(a1 + v5[5]);
  v7 = *(_QWORD *)(a1 + v5[6]);
  v8 = *(_BYTE *)(a1 + v5[7]);
  v9 = v6 == 1;
  if (v6 == 1)
    v10 = 0.0;
  else
    v10 = INFINITY;
  v20 = v4;
  v21 = 0x4030000000000000;
  v22 = 0;
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v11 = static Alignment.leading.getter(v5);
  sub_10003E5DC(0.0, 1, 0.0, 1, v10, v9, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v11, v12);
  v13 = v19[7];
  a2[6] = v19[6];
  a2[7] = v13;
  v14 = v19[9];
  a2[8] = v19[8];
  a2[9] = v14;
  v15 = v19[3];
  a2[2] = v19[2];
  a2[3] = v15;
  v16 = v19[5];
  a2[4] = v19[4];
  a2[5] = v16;
  result = *(double *)v19;
  v18 = v19[1];
  *a2 = v19[0];
  a2[1] = v18;
  return result;
}

uint64_t sub_10002EED0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a1;
  v32 = a2;
  v2 = type metadata accessor for _ForegroundLayerLevel(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for _ForegroundLayerLevelViewModifier(0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003C84(&qword_10005A7F8);
  v31 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v29 - v16;
  v18 = sub_1000430C8((uint64_t)&v29 - v16);
  static WidgetRenderingMode.accented.getter(v18);
  v19 = static WidgetRenderingMode.== infix(_:_:)(v17, v15);
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, v11);
  v21 = ((uint64_t (*)(char *, uint64_t))v20)(v17, v11);
  if ((v19 & 1) != 0)
  {
    static _ForegroundLayerLevel.secondary.getter(v21);
    _ForegroundLayerLevelViewModifier.init(level:)(v4);
    v22 = v29;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v10[*(int *)(v8 + 36)], v7, v29);
    v23 = v30;
    *(_QWORD *)v10 = v30;
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    swift_retain(v23);
    v24(v7, v22);
    v25 = v32;
    sub_100009EF4((uint64_t)v10, v32, &qword_10005A7F8);
    v26 = 0;
    v27 = v25;
  }
  else
  {
    v26 = 1;
    v27 = v32;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v27, v26, 1, v8);
}

uint64_t sub_10002F0E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;

  v3 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v6 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:));
  v7 = Color.init(_:red:green:blue:opacity:)(v5, 0.17254902, 0.17254902, 0.180392157, 1.0);
  *(_QWORD *)a1 = static VerticalAlignment.top.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = sub_100003C84(&qword_10005A800);
  v9 = sub_10002EBF8(v1, a1 + *(int *)(v8 + 44));
  v10 = static Alignment.center.getter(v9);
  v12 = v11;
  v13 = a1 + *(int *)(sub_100003C84(&qword_10005A808) + 36);
  sub_10002EED0(v7, v13);
  swift_release(v7);
  result = sub_100003C84(&qword_10005A7F0);
  v15 = (uint64_t *)(v13 + *(int *)(result + 36));
  *v15 = v10;
  v15[1] = v12;
  return result;
}

uint64_t sub_10002F204(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F040, 1);
}

uint64_t sub_10002F214(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F018, 1);
}

uint64_t sub_10002F224(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004EFF0, 1);
}

_QWORD *sub_10002F234@<X0>(uint64_t a1@<X1>, char a2@<W3>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for MostUsedItemNoContentView(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003C84(&qword_10005A7A0);
  __chkstk_darwin(v9);
  v11 = (BOOL *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    *v11 = a1 == 1;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v12 = sub_100030CE4();
    v13 = sub_10000DF58(&qword_10005A790, type metadata accessor for MostUsedItemNoContentView, (uint64_t)&unk_100047DC0);
    return _ConditionalContent<>.init(storage:)(a3, v11, &type metadata for MostUsedItemPlaceholderView, v6, v12, v13);
  }
  else
  {
    *v8 = swift_getKeyPath(&unk_100047C90);
    v15 = sub_100003C84(&qword_100059CA0);
    swift_storeEnumTagMultiPayload(v8, v15, 0);
    *((_BYTE *)v8 + *(int *)(v6 + 20)) = a1 == 1;
    sub_10000DB08((uint64_t)v8, (uint64_t)v11, type metadata accessor for MostUsedItemNoContentView);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v16 = sub_100030CE4();
    v17 = sub_10000DF58(&qword_10005A790, type metadata accessor for MostUsedItemNoContentView, (uint64_t)&unk_100047DC0);
    _ConditionalContent<>.init(storage:)(a3, v11, &type metadata for MostUsedItemPlaceholderView, v6, v16, v17);
    return (_QWORD *)sub_100015A24((uint64_t)v8, type metadata accessor for MostUsedItemNoContentView);
  }
}

void sub_10002F3FC()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v1 = v0[1];
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *((_BYTE *)v0 + 16);
    v3 = *v0;
    v10[0] = 0;
    v10[1] = v1;
    KeyPath = swift_getKeyPath(&unk_100047CC8);
    v5 = swift_allocObject(&unk_100056DD0, 33, 7);
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v1;
    *(_BYTE *)(v5 + 32) = v2;
    v6 = sub_100003C84(&qword_100059B18);
    v7 = sub_100003C84(&qword_10005A778);
    v8 = sub_100007C6C();
    v9 = sub_100030C60();
    ForEach<>.init(_:id:content:)(v10, KeyPath, sub_100032908, v5, v6, v7, v8, &protocol witness table for Int, v9);
  }
}

uint64_t sub_10002F4D8@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  id v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v47[12];
  int v48;
  _BYTE *v49;
  uint64_t v50;
  _OWORD v51[3];

  v48 = a1;
  v50 = a2;
  v2 = sub_100003C84(&qword_10005AA70);
  v3 = __chkstk_darwin(v2);
  v49 = &v47[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v6 = &v47[-v5];
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100003C84(&qword_10005AA78);
  __chkstk_darwin(v10);
  v12 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100003C84(&qword_10005AA80);
  v14 = __chkstk_darwin(v13);
  v16 = &v47[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v47[-v18];
  __chkstk_darwin(v17);
  v21 = &v47[-v20];
  v22 = (char *)v9 + *(int *)(v7 + 20);
  v23 = enum case for RoundedCornerStyle.continuous(_:);
  v24 = type metadata accessor for RoundedCornerStyle(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  __asm { FMOV            V0.2D, #7.25 }
  *v9 = _Q0;
  v31 = v48;
  if ((v48 & 1) != 0)
    v32 = 0x4034000000000000;
  else
    v32 = 0x403D000000000000;
  v33 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(v51, v32, 0, v32, 0, v33, v34);
  sub_10000DB08((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v35 = &v12[*(int *)(v10 + 36)];
  v36 = v51[1];
  *v35 = v51[0];
  v35[1] = v36;
  v35[2] = v51[2];
  sub_100015A24((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v37 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v38 = Color.init(_:)(v37);
  KeyPath = swift_getKeyPath(&unk_100047F40);
  sub_100003D00((uint64_t)v12, (uint64_t)v19, &qword_10005AA78);
  v40 = (uint64_t *)&v19[*(int *)(v13 + 36)];
  *v40 = KeyPath;
  v40[1] = v38;
  sub_100003D44((uint64_t)v12, &qword_10005AA78);
  v41 = sub_100009EF4((uint64_t)v19, (uint64_t)v21, &qword_10005AA80);
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v41);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v42 = sub_100003C84(&qword_10005AA88);
  sub_10002F848(v31, (uint64_t)&v6[*(int *)(v42 + 44)]);
  sub_100003D00((uint64_t)v21, (uint64_t)v16, &qword_10005AA80);
  v43 = v49;
  sub_100003D00((uint64_t)v6, (uint64_t)v49, &qword_10005AA70);
  v44 = v50;
  sub_100003D00((uint64_t)v16, v50, &qword_10005AA80);
  v45 = sub_100003C84(&qword_10005AA90);
  sub_100003D00((uint64_t)v43, v44 + *(int *)(v45 + 48), &qword_10005AA70);
  sub_100003D44((uint64_t)v6, &qword_10005AA70);
  sub_100003D44((uint64_t)v21, &qword_10005AA80);
  sub_100003D44((uint64_t)v43, &qword_10005AA70);
  return sub_100003D44((uint64_t)v16, &qword_10005AA80);
}

uint64_t sub_10002F848@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t KeyPath;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;

  v128 = a2;
  v126 = sub_100003C84(&qword_10005AA98);
  v3 = __chkstk_darwin(v126);
  v5 = (char *)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v127 = (uint64_t)&v120 - v6;
  v7 = sub_100003C84(&qword_100059C28);
  __chkstk_darwin(v7);
  v9 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v132);
  v11 = (_OWORD *)((char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v134 = sub_100003C84(&qword_100059C30);
  __chkstk_darwin(v134);
  v136 = (uint64_t)&v120 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100003C84(&qword_100059C38);
  __chkstk_darwin(v133);
  v138 = (uint64_t)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003C84(&qword_100059C40);
  __chkstk_darwin(v135);
  v139 = (uint64_t)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003C84(&qword_10005AAA0);
  v15 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v17 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003C84(&qword_10005AAA8);
  v19 = __chkstk_darwin(v18);
  v125 = (uint64_t)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v120 - v21;
  __asm { FMOV            V0.2D, #4.0 }
  v130 = _Q0;
  v137 = (char *)&v120 - v21;
  v124 = v9;
  v131 = v7;
  if ((a1 & 1) != 0)
  {
    v28 = 1;
  }
  else
  {
    v29 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100049E80);
    v30 = Text.init(_:tableName:bundle:comment:)(v29);
    v123 = v15;
    v31 = v30;
    v33 = v32;
    v35 = v34;
    v37 = v36 & 1;
    v38 = static Font.footnote.getter(v30);
    v140 = v11;
    v39 = v38;
    v121 = Text.font(_:)(v38, v31, v33, v37, v35);
    v120 = v40;
    v42 = v41;
    v122 = v43;
    swift_release(v39);
    v44 = v42 & 1;
    sub_100007D1C(v31, v33, v37);
    swift_bridgeObjectRelease(v35);
    KeyPath = swift_getKeyPath(&unk_100047F10);
    v46 = (char *)v140 + *(int *)(v132 + 20);
    v47 = enum case for RoundedCornerStyle.continuous(_:);
    v48 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v46, v47, v48);
    *v140 = v130;
    v49 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v50 = Color.init(_:)(v49);
    v51 = swift_getKeyPath(&unk_100047F40);
    v52 = v136;
    sub_10000DB08((uint64_t)v140, v136, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v53 = (uint64_t *)(v52 + *(int *)(v134 + 36));
    *v53 = v51;
    v53[1] = v50;
    sub_100015A24((uint64_t)v140, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v54 = v138;
    sub_100003D00(v52, v138, &qword_100059C30);
    *(_QWORD *)(v54 + *(int *)(v133 + 36)) = 0x3FB47AE147AE147BLL;
    v55 = sub_100003D44(v52, &qword_100059C30);
    LOBYTE(v50) = static Edge.Set.all.getter(v55);
    v56 = EdgeInsets.init(_all:)(2.0);
    v58 = v57;
    v60 = v59;
    v62 = v61;
    v63 = v139;
    sub_100003D00(v54, v139, &qword_100059C38);
    v64 = v63 + *(int *)(v135 + 36);
    *(_BYTE *)v64 = v50;
    *(double *)(v64 + 8) = v56;
    *(_QWORD *)(v64 + 16) = v58;
    *(_QWORD *)(v64 + 24) = v60;
    *(_QWORD *)(v64 + 32) = v62;
    *(_BYTE *)(v64 + 40) = 0;
    v65 = sub_100003D44(v54, &qword_100059C38);
    v66 = static Alignment.center.getter(v65);
    v68 = v67;
    sub_100003D00(v63, (uint64_t)v9, &qword_100059C40);
    v69 = (uint64_t *)&v9[*(int *)(v131 + 36)];
    *v69 = v66;
    v69[1] = v68;
    sub_100003D00((uint64_t)v9, (uint64_t)&v17[*(int *)(v129 + 36)], &qword_100059C28);
    v70 = v121;
    v71 = v120;
    *(_QWORD *)v17 = v121;
    *((_QWORD *)v17 + 1) = v71;
    LOBYTE(v66) = v44;
    v17[16] = v44;
    v72 = v122;
    *((_QWORD *)v17 + 3) = v122;
    *((_QWORD *)v17 + 4) = KeyPath;
    *((_QWORD *)v17 + 5) = 1;
    v17[48] = 0;
    v73 = v71;
    sub_10000925C(v70, v71, v66);
    swift_bridgeObjectRetain(v72);
    swift_retain(KeyPath);
    sub_100003D44((uint64_t)v9, &qword_100059C28);
    sub_100003D44(v63, &qword_100059C40);
    v74 = v73;
    v22 = v137;
    v11 = v140;
    sub_100007D1C(v70, v74, v66);
    v75 = KeyPath;
    v15 = v123;
    swift_release(v75);
    swift_bridgeObjectRelease(v72);
    sub_100009EF4((uint64_t)v17, (uint64_t)v22, &qword_10005AAA0);
    v28 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v22, v28, 1, v129);
  v76 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000100049EA0);
  v77 = Text.init(_:tableName:bundle:comment:)(v76);
  v129 = v78;
  v140 = v79;
  v81 = v80 & 1;
  v123 = swift_getKeyPath(&unk_100047F10);
  v82 = static Font.footnote.getter(v123);
  v83 = swift_getKeyPath(&unk_100047F70);
  v84 = (char *)v11 + *(int *)(v132 + 20);
  v85 = v11;
  v86 = enum case for RoundedCornerStyle.continuous(_:);
  v87 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 104))(v84, v86, v87);
  *v85 = v130;
  v88 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v89 = Color.init(_:)(v88);
  v90 = swift_getKeyPath(&unk_100047F40);
  v91 = v136;
  sub_10000DB08((uint64_t)v85, v136, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v92 = (uint64_t *)(v91 + *(int *)(v134 + 36));
  *v92 = v90;
  v92[1] = v89;
  sub_100015A24((uint64_t)v85, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v93 = v138;
  sub_100003D00(v91, v138, &qword_100059C30);
  *(_QWORD *)(v93 + *(int *)(v133 + 36)) = 0x3FB47AE147AE147BLL;
  v94 = sub_100003D44(v91, &qword_100059C30);
  LOBYTE(v89) = static Edge.Set.all.getter(v94);
  v95 = EdgeInsets.init(_all:)(2.0);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  v102 = v139;
  sub_100003D00(v93, v139, &qword_100059C38);
  v103 = v102 + *(int *)(v135 + 36);
  *(_BYTE *)v103 = v89;
  *(double *)(v103 + 8) = v95;
  *(_QWORD *)(v103 + 16) = v97;
  *(_QWORD *)(v103 + 24) = v99;
  *(_QWORD *)(v103 + 32) = v101;
  *(_BYTE *)(v103 + 40) = 0;
  v104 = sub_100003D44(v93, &qword_100059C38);
  v105 = static Alignment.center.getter(v104);
  v107 = v106;
  v108 = (uint64_t)v124;
  sub_100003D00(v102, (uint64_t)v124, &qword_100059C40);
  v109 = (uint64_t *)(v108 + *(int *)(v131 + 36));
  *v109 = v105;
  v109[1] = v107;
  sub_100003D00(v108, (uint64_t)&v5[*(int *)(v126 + 36)], &qword_100059C28);
  v110 = v77;
  v111 = v129;
  *(_QWORD *)v5 = v77;
  *((_QWORD *)v5 + 1) = v111;
  v5[16] = v81;
  v112 = v140;
  v113 = v123;
  *((_QWORD *)v5 + 3) = v140;
  *((_QWORD *)v5 + 4) = v113;
  *((_QWORD *)v5 + 5) = 1;
  v5[48] = 0;
  *((_QWORD *)v5 + 7) = v83;
  *((_QWORD *)v5 + 8) = v82;
  sub_10000925C(v110, v111, v81);
  swift_bridgeObjectRetain(v112);
  swift_retain(v113);
  swift_retain(v83);
  swift_retain(v82);
  sub_100003D44(v108, &qword_100059C28);
  sub_100003D44(v102, &qword_100059C40);
  sub_100007D1C(v110, v111, v81);
  swift_release(v82);
  swift_release(v83);
  swift_release(v113);
  swift_bridgeObjectRelease(v112);
  v114 = v127;
  sub_100009EF4((uint64_t)v5, v127, &qword_10005AA98);
  v115 = (uint64_t)v137;
  v116 = v125;
  sub_100003D00((uint64_t)v137, v125, &qword_10005AAA8);
  sub_100003D00(v114, (uint64_t)v5, &qword_10005AA98);
  v117 = v128;
  sub_100003D00(v116, v128, &qword_10005AAA8);
  v118 = sub_100003C84(&qword_10005AAB0);
  sub_100003D00((uint64_t)v5, v117 + *(int *)(v118 + 48), &qword_10005AA98);
  sub_100003D44(v114, &qword_10005AA98);
  sub_100003D44(v115, &qword_10005AAA8);
  sub_100003D44((uint64_t)v5, &qword_10005AA98);
  return sub_100003D44(v116, &qword_10005AAA8);
}

uint64_t sub_1000301E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t v5;

  v4 = *v2;
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0x4018000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = sub_100003C84(&qword_10005AA68);
  return sub_10002F4D8(v4, a2 + *(int *)(v5 + 44));
}

uint64_t sub_100030230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[7];
  _OWORD v52[2];
  _OWORD v53[9];
  char v54;
  __int128 v55;
  _BYTE v56[145];
  _QWORD v57[2];
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[3];

  v48 = a1;
  v50 = a2;
  v2 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v2);
  v4 = (_OWORD *)((char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003C84(&qword_10005AA78);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003C84(&qword_10005AA80);
  v9 = __chkstk_darwin(v8);
  v49 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v47 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v47 - v14;
  v16 = (char *)v4 + *(int *)(v2 + 20);
  v17 = enum case for RoundedCornerStyle.continuous(_:);
  v18 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  __asm { FMOV            V0.2D, #7.25 }
  *v4 = _Q0;
  v24 = type metadata accessor for MostUsedItemNoContentView(0);
  v25 = v48;
  if (*(_BYTE *)(v48 + *(int *)(v24 + 20)))
    v26 = 0x4034000000000000;
  else
    v26 = 0x403D000000000000;
  v27 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(v68, v26, 0, v26, 0, v27, v28);
  sub_10000DB08((uint64_t)v4, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v29 = &v7[*(int *)(v5 + 36)];
  v30 = v68[1];
  *(_OWORD *)v29 = v68[0];
  *((_OWORD *)v29 + 1) = v30;
  *((_OWORD *)v29 + 2) = v68[2];
  sub_100015A24((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v31 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v32 = Color.init(_:)(v31);
  KeyPath = swift_getKeyPath(&unk_100047F40);
  sub_100003D00((uint64_t)v7, (uint64_t)v13, &qword_10005AA78);
  v34 = (uint64_t *)&v13[*(int *)(v8 + 36)];
  *v34 = KeyPath;
  v34[1] = v32;
  sub_100003D44((uint64_t)v7, &qword_10005AA78);
  v35 = sub_100009EF4((uint64_t)v13, (uint64_t)v15, &qword_10005AA80);
  v36 = static HorizontalAlignment.leading.getter(v35);
  sub_100030630(v25, (uint64_t)v51);
  *(_OWORD *)((char *)&v53[5] + 7) = v51[5];
  *(_OWORD *)((char *)&v53[6] + 7) = v51[6];
  *(_OWORD *)((char *)&v53[7] + 7) = v52[0];
  v53[8] = *(_OWORD *)((char *)v52 + 9);
  *(_OWORD *)((char *)&v53[1] + 7) = v51[1];
  *(_OWORD *)((char *)&v53[2] + 7) = v51[2];
  *(_OWORD *)((char *)&v53[3] + 7) = v51[3];
  *(_OWORD *)((char *)&v53[4] + 7) = v51[4];
  v54 = 0;
  *(_OWORD *)((char *)v53 + 7) = v51[0];
  v37 = v49;
  sub_100003D00((uint64_t)v15, v49, &qword_10005AA80);
  v38 = v50;
  sub_100003D00(v37, v50, &qword_10005AA80);
  v39 = *(int *)(sub_100003C84(&qword_10005AAD0) + 48);
  *(_OWORD *)&v56[17] = v53[1];
  *(_OWORD *)&v56[81] = v53[5];
  *(_OWORD *)&v56[97] = v53[6];
  *(_OWORD *)&v56[113] = v53[7];
  *(_OWORD *)&v56[129] = v53[8];
  *(_OWORD *)&v56[33] = v53[2];
  *(_OWORD *)&v56[49] = v53[3];
  v40 = v38 + v39;
  v55 = (unint64_t)v36;
  v56[0] = 0;
  *(_OWORD *)&v56[65] = v53[4];
  *(_OWORD *)&v56[1] = v53[0];
  v41 = *(_OWORD *)&v56[128];
  *(_OWORD *)(v40 + 128) = *(_OWORD *)&v56[112];
  *(_OWORD *)(v40 + 144) = v41;
  *(_BYTE *)(v40 + 160) = v56[144];
  v42 = *(_OWORD *)&v56[64];
  *(_OWORD *)(v40 + 64) = *(_OWORD *)&v56[48];
  *(_OWORD *)(v40 + 80) = v42;
  v43 = *(_OWORD *)&v56[96];
  *(_OWORD *)(v40 + 96) = *(_OWORD *)&v56[80];
  *(_OWORD *)(v40 + 112) = v43;
  v44 = *(_OWORD *)v56;
  *(_OWORD *)v40 = v55;
  *(_OWORD *)(v40 + 16) = v44;
  v45 = *(_OWORD *)&v56[32];
  *(_OWORD *)(v40 + 32) = *(_OWORD *)&v56[16];
  *(_OWORD *)(v40 + 48) = v45;
  sub_100032728((uint64_t)&v55);
  sub_100003D44((uint64_t)v15, &qword_10005AA80);
  v64 = v53[5];
  v65 = v53[6];
  v66 = v53[7];
  v67 = v53[8];
  v60 = v53[1];
  v61 = v53[2];
  v62 = v53[3];
  v63 = v53[4];
  v57[0] = v36;
  v57[1] = 0;
  v58 = 0;
  v59 = v53[0];
  sub_100032810((uint64_t)v57);
  return sub_100003D44(v37, &qword_10005AA80);
}

uint64_t sub_100030630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  _BYTE v57[7];
  _BYTE v58[7];
  unsigned __int8 v59;
  _DWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;

  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for MostUsedItemNoContentView(0) + 20)) & 1) != 0)
  {
    v50 = 0;
    v51 = 0;
    v54 = 0;
    v55 = 0;
    v8 = 0;
    v52 = 0;
    v53 = 0;
    v49 = 0;
    v48 = 0;
  }
  else
  {
    v9 = LocalizedStringKey.init(stringLiteral:)(11565, 0xE200000000000000);
    v10 = Text.init(_:tableName:bundle:comment:)(v9);
    v12 = v11;
    v14 = v13;
    v16 = v15 & 1;
    sub_1000430C8((uint64_t)v7);
    sub_10002E0A8(1, (uint64_t)v7, v10, v12, v16, v14, (uint64_t)&v61);
    sub_100007D1C(v10, v12, v16);
    swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = v63;
    v54 = v64;
    v55 = v62;
    v52 = v66;
    v53 = v65;
    v50 = v61;
    v51 = v67;
    v49 = v68;
    v48 = v69;
  }
  v17 = v4;
  v18 = LocalizedStringKey.init(stringLiteral:)(11565, 0xE200000000000000);
  v19 = Text.init(_:tableName:bundle:comment:)(v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  sub_1000430C8((uint64_t)v7);
  sub_10002E0A8(0, (uint64_t)v7, v19, v21, v25, v23, (uint64_t)&v61);
  sub_100007D1C(v19, v21, v25);
  swift_bridgeObjectRelease(v23);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
  v26 = v61;
  v27 = v62;
  LOBYTE(v23) = v63;
  v28 = v64;
  v29 = v65;
  v47 = v64;
  v30 = v66;
  v32 = v67;
  v31 = v68;
  v33 = v69;
  v59 = v63;
  v56 = v69;
  *(_DWORD *)(a2 + 65) = v60[0];
  *(_DWORD *)(a2 + 68) = *(_DWORD *)((char *)v60 + 3);
  *(_DWORD *)(a2 + 89) = *(_DWORD *)v58;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v58[3];
  v34 = *(_DWORD *)v57;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v57[3];
  *(_DWORD *)(a2 + 113) = v34;
  v35 = v50;
  v36 = v55;
  *(_QWORD *)a2 = v50;
  *(_QWORD *)(a2 + 8) = v36;
  v37 = v36;
  v55 = v36;
  v38 = v54;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v38;
  v39 = v38;
  v54 = v38;
  v40 = v53;
  *(_QWORD *)(a2 + 32) = v53;
  v41 = v40;
  v53 = v40;
  v42 = v52;
  *(_QWORD *)(a2 + 40) = v52;
  v52 = v42;
  v43 = v51;
  v44 = v49;
  *(_QWORD *)(a2 + 48) = v51;
  *(_QWORD *)(a2 + 56) = v44;
  *(_BYTE *)(a2 + 64) = v48;
  *(_QWORD *)(a2 + 72) = v26;
  *(_QWORD *)(a2 + 80) = v27;
  *(_BYTE *)(a2 + 88) = v23;
  *(_QWORD *)(a2 + 96) = v28;
  *(_QWORD *)(a2 + 104) = v29;
  *(_BYTE *)(a2 + 112) = v30;
  *(_QWORD *)(a2 + 120) = v32;
  *(_QWORD *)(a2 + 128) = v31;
  *(_BYTE *)(a2 + 136) = v33;
  sub_1000327C0(v35, v37, v8, v39, v41, v42, v43);
  sub_10000925C(v26, v27, v23);
  v45 = v47;
  swift_bridgeObjectRetain(v47);
  swift_retain(v29);
  swift_retain(v32);
  sub_100007D1C(v26, v27, v23);
  swift_release(v32);
  swift_release(v29);
  swift_bridgeObjectRelease(v45);
  return sub_1000328A8(v35, v55, v8, v54, v53, v52, v51);
}

uint64_t sub_1000309BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = sub_100003C84(&qword_10005AAB8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v2);
  *((_QWORD *)v4 + 1) = 0x4028000000000000;
  v4[16] = 0;
  v5 = sub_100003C84(&qword_10005AAC0);
  sub_100030230(v0, (uint64_t)&v4[*(int *)(v5 + 44)]);
  v6 = sub_100009F64(&qword_10005AAC8, &qword_10005AAB8, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibility(hidden:)(1, v1, v6);
  return sub_100003D44((uint64_t)v4, &qword_10005AAB8);
}

unint64_t sub_100030A94()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10005A720;
  if (!qword_10005A720)
  {
    v1 = sub_100005554(&qword_10005A710);
    v2[0] = sub_100005554(&qword_10005A728);
    v2[1] = sub_100030B40();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000DF58((unint64_t *)&qword_100059C98, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A720);
  }
  return result;
}

unint64_t sub_100030B40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A730;
  if (!qword_10005A730)
  {
    v1 = sub_100005554(&qword_10005A728);
    sub_10000DF58(&qword_10005A738, type metadata accessor for MostUsedItemCell, (uint64_t)&unk_100047E60);
    sub_10000DF58((unint64_t *)&qword_100059C98, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A730);
  }
  return result;
}

uint64_t type metadata accessor for MostUsedItemCell(uint64_t a1)
{
  return sub_10003257C(a1, (uint64_t *)&unk_10005A928, (uint64_t)&nominal type descriptor for MostUsedItemCell);
}

_QWORD *sub_100030BFC(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  v2 = (void *)a1[2];
  v3 = (void *)a1[3];
  v4 = a1[6];
  swift_bridgeObjectRetain(a1[1]);
  v5 = v2;
  v6 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_100030C44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

_QWORD *sub_100030C54@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10002EA34(*(_BYTE *)(v1 + 24), a1);
}

unint64_t sub_100030C60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A780;
  if (!qword_10005A780)
  {
    v1 = sub_100005554(&qword_10005A778);
    sub_100030CE4();
    sub_10000DF58(&qword_10005A790, type metadata accessor for MostUsedItemNoContentView, (uint64_t)&unk_100047DC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A780);
  }
  return result;
}

unint64_t sub_100030CE4()
{
  unint64_t result;

  result = qword_10005A788;
  if (!qword_10005A788)
  {
    result = swift_getWitnessTable(&unk_100047E10, &type metadata for MostUsedItemPlaceholderView);
    atomic_store(result, (unint64_t *)&qword_10005A788);
  }
  return result;
}

uint64_t type metadata accessor for MostUsedItemNoContentView(uint64_t a1)
{
  return sub_10003257C(a1, qword_10005A898, (uint64_t)&nominal type descriptor for MostUsedItemNoContentView);
}

uint64_t sub_100030D3C()
{
  uint64_t v0;

  return sub_10002C43C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100030D44()
{
  return sub_100032164(&qword_10005A7D8, &qword_10005A7E0, (void (*)(void))sub_100030A94);
}

uint64_t sub_100030D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for MostUsedItemsPlaceholderView(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v0 + v3, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + v3));
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

double sub_100030E04@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MostUsedItemsPlaceholderView(0) - 8) + 80);
  return sub_10002EDE0(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_100030E50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A820;
  if (!qword_10005A820)
  {
    v1 = sub_100005554(&qword_10005A818);
    sub_100009F64(&qword_10005A828, &qword_10005A830, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A820);
  }
  return result;
}

_QWORD *sub_100030ED4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

_QWORD *sub_100030FAC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_100031058(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10003111C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1000311C4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_100059CA0);
    v6 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100031284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031290);
}

uint64_t sub_100031290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100003C84(&qword_100059CA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100031320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003132C);
}

uint64_t sub_10003132C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003C84(&qword_100059CA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

void sub_1000313A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100032F88(319, (unint64_t *)&qword_100059D18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100047AE0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for MostUsedItemPlaceholderView(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MostUsedItemPlaceholderView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100031514 + 4 * byte_100047A35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100031548 + 4 * byte_100047A30[v4]))();
}

uint64_t sub_100031548(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031550(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100031558);
  return result;
}

uint64_t sub_100031564(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003156CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100031570(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031578(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MostUsedItemPlaceholderView()
{
  return &type metadata for MostUsedItemPlaceholderView;
}

uint64_t *sub_100031594(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003C84(&qword_10005A758);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = (void *)*((_QWORD *)v26 + 2);
    v29 = (void *)*((_QWORD *)v26 + 3);
    *((_QWORD *)v25 + 2) = v28;
    *((_QWORD *)v25 + 3) = v29;
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    v30 = *((_QWORD *)v26 + 6);
    *((_QWORD *)v25 + 6) = v30;
    *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
    swift_bridgeObjectRetain(v27);
    v31 = v28;
    v32 = v29;
    swift_bridgeObjectRetain(v30);
  }
  return a1;
}

uint64_t sub_10003172C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v4 = sub_100003C84(&qword_10005A758);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));

  return swift_bridgeObjectRelease(*((_QWORD *)v9 + 6));
}

uint64_t *sub_100031810(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;

  v6 = sub_100003C84(&qword_10005A758);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  v26 = (void *)*((_QWORD *)v24 + 2);
  v27 = (void *)*((_QWORD *)v24 + 3);
  *((_QWORD *)v23 + 2) = v26;
  *((_QWORD *)v23 + 3) = v27;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  v28 = *((_QWORD *)v24 + 6);
  *((_QWORD *)v23 + 6) = v28;
  *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
  swift_bridgeObjectRetain(v25);
  v29 = v26;
  v30 = v27;
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t *sub_10003197C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_10005A758);
    v6 = sub_100003C84(&qword_10005A758);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_100003D44((uint64_t)a1 + v12, &qword_100059CA0);
    v15 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *(uint64_t *)((char *)a2 + v21);
  v24 = *(uint64_t *)((char *)a2 + v21 + 8);
  v25 = *(uint64_t *)((char *)a1 + v21 + 8);
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = (void *)v23[2];
  v27 = (void *)v22[2];
  v22[2] = v26;
  v28 = v26;

  v29 = (void *)v23[3];
  v30 = (void *)v22[3];
  v22[3] = v29;
  v31 = v29;

  v22[4] = v23[4];
  v22[5] = v23[5];
  v32 = v23[6];
  v33 = v22[6];
  v22[6] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

char *sub_100031B50(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v6 = sub_100003C84(&qword_10005A758);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  return a1;
}

char *sub_100031C98(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_10005A758);
    v6 = sub_100003C84(&qword_10005A758);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100003D44((uint64_t)&a1[v8], &qword_100059CA0);
    v11 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a2[v13 + 8];
  v17 = *(_QWORD *)&a1[v13 + 8];
  *(_QWORD *)v14 = *(_QWORD *)&a2[v13];
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = (void *)*((_QWORD *)v14 + 2);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);

  v19 = (void *)*((_QWORD *)v14 + 3);
  *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);

  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  v20 = *((_QWORD *)v15 + 6);
  v21 = *((_QWORD *)v14 + 6);
  *((_QWORD *)v14 + 5) = *((_QWORD *)v15 + 5);
  *((_QWORD *)v14 + 6) = v20;
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t sub_100031E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031E48);
}

uint64_t sub_100031E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100003C84(&qword_10005A748);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003C84(&qword_100059CA8);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100031EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100031F08);
}

uint64_t sub_100031F08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100003C84(&qword_10005A748);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003C84(&qword_100059CA8);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_100031FB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100032F88(319, (unint64_t *)&unk_10005A938, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100032F88(319, (unint64_t *)&qword_100059D18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "8";
      v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

__n128 initializeBufferWithCopyOfBuffer for MostUsedItemsPlaceholderRowView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MostUsedItemsPlaceholderRowView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MostUsedItemsPlaceholderRowView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MostUsedItemsPlaceholderRowView()
{
  return &type metadata for MostUsedItemsPlaceholderRowView;
}

uint64_t sub_100032130()
{
  return sub_100032164(&qword_10005A970, &qword_10005A740, (void (*)(void))sub_1000321CC);
}

uint64_t sub_100032164(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005554(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000321CC()
{
  return sub_100032164(&qword_10005A978, &qword_10005A6F8, (void (*)(void))sub_1000321F0);
}

unint64_t sub_1000321F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A980;
  if (!qword_10005A980)
  {
    v1 = sub_100005554(&qword_10005A6F0);
    sub_100009F64(&qword_10005A988, &qword_10005A6E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100009F64(&qword_10005A990, &qword_10005A998, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A980);
  }
  return result;
}

uint64_t sub_10003228C()
{
  return sub_100032164(&qword_10005A9A0, &qword_10005A798, (void (*)(void))sub_1000322C0);
}

unint64_t sub_1000322C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A9A8;
  if (!qword_10005A9A8)
  {
    v1 = sub_100005554(&qword_10005A768);
    sub_100009F64(&qword_10005A9B0, &qword_10005A760, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A9A8);
  }
  return result;
}

unint64_t sub_100032348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A9B8;
  if (!qword_10005A9B8)
  {
    v1 = sub_100005554(&qword_10005A7E8);
    sub_100032164(&qword_10005A9C0, &qword_10005A7B8, (void (*)(void))sub_1000323EC);
    sub_100009F64(&qword_10005A9D8, &qword_10005A7F0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A9B8);
  }
  return result;
}

unint64_t sub_1000323EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A9C8;
  if (!qword_10005A9C8)
  {
    v1 = sub_100005554(&qword_10005A7B0);
    sub_100009F64(&qword_10005A9D0, &qword_10005A7A8, (uint64_t)&protocol conformance descriptor for LazyVGrid<A>);
    sub_100009F64(&qword_10005A990, &qword_10005A998, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A9C8);
  }
  return result;
}

unint64_t sub_10003248C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A9E0;
  if (!qword_10005A9E0)
  {
    v1 = sub_100005554(&qword_10005A808);
    sub_100009F64(&qword_10005A9E8, &qword_10005A9F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100009F64(&qword_10005A9D8, &qword_10005A7F0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005A9E0);
  }
  return result;
}

uint64_t sub_100032528(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F130, 1);
}

uint64_t sub_100032538(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F108, 1);
}

uint64_t sub_100032548(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F0E0, 1);
}

uint64_t sub_100032558(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F0B8, 1);
}

uint64_t type metadata accessor for AppIcon(uint64_t a1)
{
  return sub_10003257C(a1, (uint64_t *)&unk_10005AB38, (uint64_t)&nominal type descriptor for AppIcon);
}

uint64_t sub_10003257C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_1000325B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005AA38;
  if (!qword_10005AA38)
  {
    v1 = sub_100005554(&qword_10005AA30);
    sub_10003263C();
    sub_100009F64(&qword_100059B60, &qword_100059B68, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005AA38);
  }
  return result;
}

unint64_t sub_10003263C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005AA40;
  if (!qword_10005AA40)
  {
    v1 = sub_100005554(&qword_10005AA48);
    sub_100009F64(&qword_10005AA50, &qword_10005AA58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005AA40);
  }
  return result;
}

uint64_t sub_1000326C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000326EC(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_100032728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_BYTE *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 144);
  sub_1000327C0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_10000925C(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_1000327C0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    sub_10000925C(result, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    return swift_retain(a7);
  }
  return result;
}

uint64_t sub_100032810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_BYTE *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 144);
  sub_1000328A8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_100007D1C(v2, v3, v4);
  swift_release(v7);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_1000328A8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    sub_100007D1C(result, a2, a3 & 1);
    swift_release(a7);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000328F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

_QWORD *sub_100032908@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10002F234(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 32), a1);
}

uint64_t *sub_100032914(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003C84(&qword_10005AA08);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
    v16 = a3[7];
    v17 = *(void **)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = (uint64_t)v17;
    v18 = v15;
    v19 = v17;
  }
  return a1;
}

void sub_100032A08(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100003C84(&qword_10005AA08);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_100032A84(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  v6 = sub_100003C84(&qword_10005AA08);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[6];
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
  v13 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
  v14 = a3[7];
  v15 = *(void **)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
  v16 = v13;
  v17 = v15;
  return a1;
}

uint64_t *sub_100032B4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_10005AA08);
    v6 = sub_100003C84(&qword_10005AA08);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
  v12 = a3[6];
  v13 = *(void **)((char *)a2 + v12);
  v14 = *(void **)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
  v15 = v13;

  v16 = a3[7];
  v17 = *(void **)((char *)a2 + v16);
  v18 = *(void **)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = (uint64_t)v17;
  v19 = v17;

  return a1;
}

char *sub_100032C40(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003C84(&qword_10005AA08);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100032CFC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if (a1 != a2)
  {
    sub_100003D44((uint64_t)a1, &qword_10005AA08);
    v6 = sub_100003C84(&qword_10005AA08);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v9 = *(void **)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];

  v10 = a3[7];
  v11 = *(void **)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];

  return a1;
}

uint64_t sub_100032DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100032DEC);
}

uint64_t sub_100032DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003C84(&qword_10005AAD8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100032E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100032E78);
}

uint64_t sub_100032E78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003C84(&qword_10005AAD8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_100032EF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100032F88(319, (unint64_t *)&unk_10005AB48, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100032F88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100032FD4()
{
  return sub_100009F64(&qword_10005AB80, &qword_10005AB88, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100033000()
{
  return sub_100009F64(&qword_10005AB90, &qword_10005AB98, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_100033030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005ABA0;
  if (!qword_10005ABA0)
  {
    v1 = sub_100005554(&qword_10005ABA8);
    sub_100009F64(&qword_10005AAC8, &qword_10005AAB8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000DF58((unint64_t *)&qword_100059C98, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005ABA0);
  }
  return result;
}

uint64_t sub_1000330CC()
{
  return sub_1000330F8(&qword_10005ABB0, &qword_10005ABB8, (void (*)(void))sub_100030C60);
}

uint64_t sub_1000330F8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005554(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003315C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F158, 1);
}

unint64_t sub_10003316C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005ABE8;
  if (!qword_10005ABE8)
  {
    v1 = sub_100005554(&qword_10005ABD8);
    sub_1000331D8();
    sub_100033250();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005ABE8);
  }
  return result;
}

unint64_t sub_1000331D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005ABF0;
  if (!qword_10005ABF0)
  {
    v1 = sub_100005554(&qword_10005ABD0);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005ABF0);
  }
  return result;
}

unint64_t sub_100033250()
{
  unint64_t result;

  result = qword_10005ABF8;
  if (!qword_10005ABF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, (unint64_t *)&qword_10005ABF8);
  }
  return result;
}

uint64_t sub_100033294()
{
  _QWORD v1[2];

  v1[0] = sub_100005554(&qword_10005ABD8);
  v1[1] = sub_10003316C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
}

uint64_t sub_1000332E0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005AC00);
  sub_100006BC8(v0, (uint64_t)qword_10005AC00);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0xD000000000000016, 0x8000000100048020);
}

uint64_t sub_100033360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for XPCPersistentStoreManager();
  v1 = swift_allocObject(v0, 40, 7);
  result = sub_100033398();
  qword_10005D138 = v1;
  return result;
}

uint64_t sub_100033398()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  Class isa;
  _QWORD v18[5];

  v1 = v0;
  v2 = (void *)objc_opt_self(STPersistenceConfiguration);
  v3 = objc_msgSend(v2, "managedObjectModel");
  v4 = objc_allocWithZone((Class)NSPersistentContainer);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithName:managedObjectModel:", v5, v3);

  *(_QWORD *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for STWidgetXPCStoreServerEndpointFactory()), "init");
  v7 = objc_msgSend(v2, "localPersistentXPCStoreDescription");
  v8 = type metadata accessor for ScreenTimeFeatureFlags(0);
  v18[3] = v8;
  v18[4] = sub_100033F20();
  v9 = sub_10002AB78(v18);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v9, enum case for ScreenTimeFeatureFlags.simplifiedAgent(_:), v8);
  LOBYTE(v8) = isFeatureEnabled(_:)(v18);
  sub_100018494(v18);
  if ((v8 & 1) != 0)
    objc_msgSend(v7, "setOption:forKey:", *(_QWORD *)(v1 + 32), NSXPCStoreServerEndpointFactoryKey);
  v10 = *(void **)(v1 + 16);
  v11 = sub_100003C84((uint64_t *)&unk_10005ADB0);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100048000;
  *(_QWORD *)(v12 + 32) = v7;
  v18[0] = v12;
  specialized Array._endMutation()();
  v13 = v18[0];
  sub_100033EC4();
  v14 = v10;
  v15 = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v14, "setPersistentStoreDescriptions:", isa);

  return v1;
}

void sub_10003358C()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *oslog;
  _QWORD aBlock[5];
  uint64_t v20;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    v1 = *(void **)(v0 + 16);
    v2 = objc_msgSend(v1, "persistentStoreDescriptions");
    v3 = sub_100033EC4();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v17 = v4;
      else
        v17 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v4);
    if (v5)
    {
      aBlock[4] = sub_100033F00;
      v20 = v0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100033A1C;
      aBlock[3] = &unk_100056E78;
      v6 = _Block_copy(aBlock);
      v7 = v20;
      swift_retain(v0);
      swift_release(v7);
      objc_msgSend(v1, "loadPersistentStoresWithCompletionHandler:", v6);
      _Block_release(v6);
      if (*(_BYTE *)(v0 + 24) == 1)
      {
        if (qword_100059920 != -1)
          swift_once(&qword_100059920, sub_1000332E0);
        v8 = type metadata accessor for Logger(0);
        v9 = sub_100006BC8(v8, (uint64_t)qword_10005AC00);
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully loaded persistent stores", v12, 2u);
          swift_slowDealloc(v12, -1, -1);
        }

      }
    }
    else
    {
      *(_BYTE *)(v0 + 24) = 0;
      if (qword_100059920 != -1)
        swift_once(&qword_100059920, sub_1000332E0);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_100006BC8(v13, (uint64_t)qword_10005AC00);
      oslog = Logger.logObject.getter(v14);
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v15, "No persistent stores available to load", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

    }
  }
}

void sub_100033830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    *(_BYTE *)(a3 + 24) = 0;
    swift_errorRetain(a2);
    if (qword_100059920 != -1)
      swift_once(&qword_100059920, sub_1000332E0);
    v4 = type metadata accessor for Logger(0);
    sub_100006BC8(v4, (uint64_t)qword_10005AC00);
    swift_errorRetain(a2);
    v5 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 138412290;
      swift_errorRetain(a2);
      v9 = _swift_stdlib_bridgeErrorToNSError(a2);
      v12 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
      *v8 = v9;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Failed to load persistent store: %@", v7, 0xCu);
      v10 = sub_100003C84(&qword_10005A098);
      swift_arrayDestroy(v8, 1, v10);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
  else
  {
    *(_BYTE *)(a3 + 24) = 1;
  }
}

void sub_100033A1C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

uint64_t sub_100033A90(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100033AB8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for XPCPersistentStoreManager()
{
  return objc_opt_self(_TtC25ScreenTimeWidgetExtension25XPCPersistentStoreManager);
}

id sub_100033B44()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for STWidgetXPCStoreServerEndpointFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for STWidgetXPCStoreServerEndpointFactory()
{
  return objc_opt_self(_TtC25ScreenTimeWidgetExtension37STWidgetXPCStoreServerEndpointFactory);
}

uint64_t sub_100033B94(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

unint64_t sub_100033EC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005ADA0;
  if (!qword_10005ADA0)
  {
    v1 = objc_opt_self(NSPersistentStoreDescription);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10005ADA0);
  }
  return result;
}

void sub_100033F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100033830(a1, a2, v2);
}

uint64_t sub_100033F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100033F18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100033F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005ADA8;
  if (!qword_10005ADA8)
  {
    v1 = type metadata accessor for ScreenTimeFeatureFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ScreenTimeFeatureFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10005ADA8);
  }
  return result;
}

uint64_t sub_100033F68()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005AE20);
  sub_100006BC8(v0, (uint64_t)qword_10005AE20);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0x746567646957, 0xE600000000000000);
}

uint64_t sub_100033FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t OpaqueTypeConformance2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _QWORD v55[2];

  v52 = a1;
  v50 = a2;
  v49 = sub_100003C84(&qword_10005AE58);
  __chkstk_darwin(v49);
  v54 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100003C84(&qword_10005AE98);
  __chkstk_darwin(v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003C84(&qword_100059CA8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003C84(&qword_10005A748);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100003C84(&qword_10005AAD8);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = type metadata accessor for UsageTimelineEntry(0);
  __chkstk_darwin(v51);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for WidgetView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003C84(&qword_10005AE50);
  v47 = *(_QWORD *)(v20 - 8);
  v48 = v20;
  __chkstk_darwin(v20);
  v53 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100059930 != -1)
    swift_once(&qword_100059930, sub_100033F68);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100006BC8(v22, (uint64_t)qword_10005AE20);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Getting widget body", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = v52;
  sub_100035008(v52, (uint64_t)v16);
  *v14 = swift_getKeyPath(&unk_100048160);
  v28 = sub_100003C84(&qword_10005AA08);
  swift_storeEnumTagMultiPayload(v14, v28, 0);
  *v11 = swift_getKeyPath(&unk_100048190);
  v29 = sub_100003C84(&qword_10005A758);
  swift_storeEnumTagMultiPayload(v11, v29, 0);
  *v8 = swift_getKeyPath(&unk_1000481C0);
  v30 = sub_100003C84(&qword_100059CA0);
  swift_storeEnumTagMultiPayload(v8, v30, 0);
  KeyPath = swift_getKeyPath(&unk_1000481F0);
  v32 = swift_getKeyPath(&unk_100048218);
  v33 = (uint64_t *)&v19[v17[9]];
  *v33 = v32;
  v34 = sub_100003C84(&qword_10005AEA0);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  sub_100035314((uint64_t)v16, (uint64_t)v19);
  sub_100009EF4((uint64_t)v14, (uint64_t)&v19[v17[5]], &qword_10005AAD8);
  sub_100009EF4((uint64_t)v11, (uint64_t)&v19[v17[6]], &qword_10005A748);
  sub_100009EF4((uint64_t)v8, (uint64_t)&v19[v17[7]], &qword_100059CA8);
  v35 = &v19[v17[8]];
  *(_QWORD *)v35 = KeyPath;
  v35[8] = 0;
  sub_100034A60(*(_BYTE *)(v27 + *(int *)(v51 + 48)), *(_QWORD *)(v27 + *(int *)(v51 + 32)), *(_QWORD *)(v27 + *(int *)(v51 + 32) + 8), (uint64_t)v5);
  v36 = type metadata accessor for URL(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v5, 0, 1, v36);
  v37 = sub_10000DF58(&qword_10005AE60, type metadata accessor for WidgetView, (uint64_t)&unk_100048640);
  v38 = v53;
  View.widgetURL(_:)(v5, v17, v37);
  sub_100003D44((uint64_t)v5, &qword_10005AE98);
  sub_100035358((uint64_t)v19);
  v39 = enum case for DynamicTypeSize.xxLarge(_:);
  v40 = type metadata accessor for DynamicTypeSize(0);
  v41 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v54, v39, v40);
  v42 = sub_10000DF58(&qword_10005AEA8, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v41, v41, v40, v42);
  if ((result & 1) != 0)
  {
    v55[0] = v17;
    v55[1] = v37;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v55, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v45 = sub_100009F64(&qword_10005AE68, &qword_10005AE58, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v46 = v48;
    View.dynamicTypeSize<A>(_:)(v41, v48, v49, OpaqueTypeConformance2, v45);
    sub_100003D44(v41, &qword_10005AE58);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v38, v46);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100034560@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);
  uint64_t OpaqueTypeConformance2;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a1;
  v1 = sub_100003C84(&qword_10005AE78);
  v41 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003C84(&qword_10005AE80);
  v5 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  v43 = v5;
  __chkstk_darwin(v4);
  v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0x634120796C696144, 0xEE00797469766974);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = sub_100003C84(&qword_10005AE40);
  v16 = sub_100009F64(&qword_10005AE88, &qword_10005AE40, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v8, v10, v14, v12, v15, v16);
  sub_100007D1C(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v17 = sub_100003C84(&qword_10005AE90);
  v18 = type metadata accessor for WidgetFamily(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v17, v22 + 3 * v20, v21 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_1000480D0;
  v24 = v23 + v22;
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104);
  v25(v24, enum case for WidgetFamily.systemSmall(_:), v18);
  v25(v24 + v20, enum case for WidgetFamily.systemMedium(_:), v18);
  v25(v24 + 2 * v20, enum case for WidgetFamily.systemLarge(_:), v18);
  v45 = v15;
  v46 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v27 = v40;
  WidgetConfiguration.supportedFamilies(_:)(v23, v1, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v23);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v3, v1);
  v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000032, 0x800000010004A050);
  v29 = Text.init(_:tableName:bundle:comment:)(v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v45 = v1;
  v46 = OpaqueTypeConformance2;
  v36 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v37 = v42;
  WidgetConfiguration.description(_:)(v29, v31, v35, v33, v42, v36);
  sub_100007D1C(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v27, v37);
}

uint64_t sub_1000348B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = sub_100003C84(&qword_10005AE40);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for STSelectUserIntent();
  sub_100003C84(&qword_10005AE48);
  v7 = sub_100005554(&qword_10005AE50);
  v8 = sub_100005554(&qword_10005AE58);
  v9 = type metadata accessor for WidgetView(255);
  v10 = sub_10000DF58(&qword_10005AE60, type metadata accessor for WidgetView, (uint64_t)&unk_100048640);
  v14 = v9;
  v15 = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v12 = sub_100009F64(&qword_10005AE68, &qword_10005AE58, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v14 = v7;
  v15 = v8;
  v16 = OpaqueTypeConformance2;
  v17 = v12;
  swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  sub_100034FC4();
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000025, 0x800000010004A020, v6);
  sub_100034560(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100034A60(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  unsigned int v9;
  NSString v10;
  NSURLComponents *v11;
  NSURLComponents *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  NSURLComponents *v17;
  NSURLComponents *v18;
  void *v19;
  id v20;

  v8 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
  if (objc_msgSend(v8, "isiOSAppOnMac"))
  {

LABEL_4:
    sub_100034C78(a2, a3, a4);
    return;
  }
  v9 = objc_msgSend(v8, "isMacCatalystApp");

  if (v9)
    goto LABEL_4;
  if (a3 && (a1 & 1) != 0)
  {
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_opt_new(NSURLComponents);
    -[NSURLComponents setScheme:](v11, "setScheme:", STPrefsURLComponentScheme);
    -[NSURLComponents setFragment:](v11, "setFragment:", STPrefsURLComponentFragmentDay);
    v12 = v11;
    v13 = objc_alloc((Class)NSString);
    v14 = objc_msgSend(v13, "initWithFormat:", CFSTR("%@&path=CHILD_%@/SCREEN_TIME_SUMMARY"), STPrefsURLComponentPathScreenTimeRoot, v10);
    -[NSURLComponents setPath:](v12, "setPath:", v14);

    v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLComponents URL](v12, "URL"));
    v20 = v15;

    v16 = v20;
  }
  else
  {
    v17 = objc_opt_new(NSURLComponents);
    -[NSURLComponents setScheme:](v17, "setScheme:", STPrefsURLComponentScheme);
    -[NSURLComponents setFragment:](v17, "setFragment:", STPrefsURLComponentFragmentDay);
    v18 = v17;
    -[NSURLComponents setPath:](v18, "setPath:", STPrefsURLComponentPathScreenTimeSummary);
    v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLComponents URL](v18, "URL"));

    v16 = v19;
    v20 = v16;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

}

uint64_t sub_100034C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSString v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  void *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v25;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003C84(&qword_10005AE98);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)NSURLComponents), "init");
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setScheme:", v14);

  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setPath:", v15);

  if (a2)
  {
    v16 = sub_100003C84(&qword_10005A0B0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100046DE0;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_100016338();
    *(_QWORD *)(v17 + 32) = a1;
    *(_QWORD *)(v17 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    String.init(format:_:)(0xD000000000000027, 0x800000010004A0E0, v17);
    v19 = v18;
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v13, "setQuery:", v20);

  }
  v21 = objc_msgSend(v13, "URL");
  if (v21)
  {
    v22 = v21;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v23(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
    if ((_DWORD)result != 1)
    {

      return ((uint64_t (*)(uint64_t, char *, uint64_t))v23)(a3, v12, v6);
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  __break(1u);
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  if (qword_100059928 != -1)
    swift_once(&qword_100059928, sub_100033360);
  sub_10003358C();
  sub_100034F60();
  static Widget.main()();
  return 0;
}

unint64_t sub_100034F60()
{
  unint64_t result;

  result = qword_10005AE38;
  if (!qword_10005AE38)
  {
    result = swift_getWitnessTable(&unk_100048120, &type metadata for ScreenTimeConfigurableWidget);
    atomic_store(result, (unint64_t *)&qword_10005AE38);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenTimeConfigurableWidget()
{
  return &type metadata for ScreenTimeConfigurableWidget;
}

uint64_t sub_100034FB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F28C, 1);
}

unint64_t sub_100034FC4()
{
  unint64_t result;

  result = qword_10005AE70;
  if (!qword_10005AE70)
  {
    result = swift_getWitnessTable(&unk_10004828C, &type metadata for UsageIntentTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_10005AE70);
  }
  return result;
}

uint64_t sub_100035008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UsageTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003504C()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_10003506C()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_10003508C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100035274(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_1000350A0()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000350C0()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000350E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100035274(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000350F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100035274(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100035118()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100035138()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100035158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100035274(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10003517C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_10000DF58(&qword_10005AEB0, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_1000351DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_10000DF58(&qword_10005AEB0, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_100035254()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_100035274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_1000352F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100035274(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(char *))&EnvironmentValues.dynamicTypeSize.setter);
}

uint64_t sub_100035314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UsageTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035358(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100035394(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000353A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100005554(&qword_10005AE80);
  v1 = sub_100005554(&qword_10005AE78);
  v5 = sub_100005554(&qword_10005AE40);
  v6 = sub_100009F64(&qword_10005AE88, &qword_10005AE40, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

ValueMetadata *type metadata accessor for UsageIntentTimelineProvider()
{
  return &type metadata for UsageIntentTimelineProvider;
}

unint64_t sub_100035474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005AED0[0];
  if (!qword_10005AED0[0])
  {
    v1 = type metadata accessor for UsageTimelineEntry(255);
    result = swift_getWitnessTable(&unk_100046CE8, v1);
    atomic_store(result, qword_10005AED0);
  }
  return result;
}

uint64_t sub_1000354BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005AEB8);
  sub_100006BC8(v0, (uint64_t)qword_10005AEB8);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0xD000000000000016, 0x800000010004A130);
}

uint64_t sub_10003553C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v8 = type metadata accessor for WidgetFamily(0);
  v7[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[11] = v9;
  v7[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UsageTimelineEntry(0);
  v7[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000355C0, 0, 0);
}

uint64_t sub_1000355C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  char v19;
  _QWORD *v20;

  v1 = *(void **)(v0 + 48);
  v2 = type metadata accessor for UsageProvider();
  inited = swift_initStackObject(v2, v0 + 16);
  *(_QWORD *)(v0 + 112) = inited;
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  v4 = objc_msgSend(v1, "displayString");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  *(_QWORD *)(v0 + 120) = v7;
  v9 = TimelineProviderContext.displaySize.getter(v8);
  v11 = v10;
  v12 = objc_msgSend(v1, "identifier");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v0 + 128) = v16;
  v17 = objc_msgSend(*(id *)(v0 + 48), "isRemote");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "BOOLValue");

  }
  else
  {
    v19 = 0;
  }
  TimelineProviderContext.family.getter(v17);
  v20 = (_QWORD *)swift_task_alloc(dword_10005AF74);
  *(_QWORD *)(v0 + 136) = v20;
  *v20 = v0;
  v20[1] = sub_100035734;
  return sub_100037D04(*(_QWORD *)(v0 + 104), v5, v7, v14, v16, v19, *(_QWORD *)(v0 + 96), v9, v11);
}

uint64_t sub_100035734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  v7 = swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v4, v6, v7);
  return swift_task_switch(sub_1000357CC, 0, 0);
}

uint64_t sub_1000357CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_100059938 != -1)
    swift_once(&qword_100059938, sub_1000354BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100006BC8(v1, (uint64_t)qword_10005AEB8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "getSnapshot calling completion", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(uint64_t (**)(uint64_t))(v0 + 64);

  v8 = v7(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "getSnapshot done", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v13 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);

  sub_100037758(v12);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100037684(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_100056F68, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_10005AF18, v17);
}

uint64_t sub_100035A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v8 = type metadata accessor for Date(0);
  v7[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[11] = v9;
  v7[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimelineReloadPolicy(0);
  v7[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003C84(&qword_10005AEE8);
  v7[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[15] = v12;
  v7[16] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v7[17] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[18] = v14;
  v7[19] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UsageTimelineEntry(0);
  v7[20] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v7[21] = v16;
  v7[22] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100035B94, 0, 0);
}

uint64_t sub_100035B94()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  char v19;
  _QWORD *v20;

  v1 = *(void **)(v0 + 48);
  v2 = type metadata accessor for UsageProvider();
  inited = swift_initStackObject(v2, v0 + 16);
  *(_QWORD *)(v0 + 184) = inited;
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  v4 = objc_msgSend(v1, "displayString");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  *(_QWORD *)(v0 + 192) = v7;
  v9 = TimelineProviderContext.displaySize.getter(v8);
  v11 = v10;
  v12 = objc_msgSend(v1, "identifier");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v0 + 200) = v16;
  v17 = objc_msgSend(*(id *)(v0 + 48), "isRemote");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "BOOLValue");

  }
  else
  {
    v19 = 0;
  }
  TimelineProviderContext.family.getter(v17);
  v20 = (_QWORD *)swift_task_alloc(dword_10005AF74);
  *(_QWORD *)(v0 + 208) = v20;
  *v20 = v0;
  v20[1] = sub_100035D0C;
  return sub_100037D04(*(_QWORD *)(v0 + 176), v5, v7, v14, v16, v19, *(_QWORD *)(v0 + 152), v9, v11);
}

uint64_t sub_100035D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v6 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_100035DA4, 0, 0);
}

uint64_t sub_100035DA4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (qword_100059938 != -1)
    swift_once(&qword_100059938, sub_1000354BC);
  v1 = type metadata accessor for Logger(0);
  v32 = sub_100006BC8(v1, (uint64_t)qword_10005AEB8);
  v2 = Logger.logObject.getter(v32);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getTimeline calling completion", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 80);
  v28 = *(void (**)(uint64_t))(v0 + 64);

  v12 = sub_100003C84(&qword_10005AEF8);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v12, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100046DE0;
  sub_100035008(v6, v16 + v15);
  Date.init(timeIntervalSinceNow:)(900.0);
  static TimelineReloadPolicy.after(_:)(v10);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  v17 = sub_100035474();
  Timeline.init(entries:policy:)(v16, v8, v29, v17);
  v28(v7);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v7, v31);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "getTimeline done", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }
  v22 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 104);

  sub_100037758(v22);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100036020(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v50 = a1;
  v51 = a2;
  v2 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetFamily(0);
  v52 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v54 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v57 = (char *)&v48 - v13;
  v14 = type metadata accessor for DateInterval(0);
  v49 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v53 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003C84(&qword_100059958);
  __chkstk_darwin(v16);
  v56 = (uint64_t)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v18);
  v55 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100059938 != -1)
    swift_once(&qword_100059938, sub_1000354BC);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100006BC8(v20, (uint64_t)qword_10005AEB8);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    v48 = v10;
    v25 = v9;
    v26 = v7;
    v27 = v6;
    v28 = v5;
    v29 = v3;
    v30 = v2;
    v31 = v14;
    v32 = v24;
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "placeholder called", v24, 2u);
    v33 = v32;
    v14 = v31;
    v2 = v30;
    v3 = v29;
    v5 = v28;
    v6 = v27;
    v7 = v26;
    v9 = v25;
    v10 = v48;
    swift_slowDealloc(v33, -1, -1);
  }

  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v55, 1, 1, v6);
  v35 = TimelineProviderContext.displaySize.getter(v34);
  v37 = v36;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v56, 1, 1, v14);
  v39 = v57;
  v40 = TimelineProviderContext.family.getter(v38);
  v41 = static Date.now.getter(v40);
  static Calendar.current.getter(v41);
  v42 = v52;
  v43 = v54;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v54, v39, v10);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v43, v10);
  v45 = v53;
  if (v44 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v44 == enum case for WidgetFamily.systemMedium(_:))
    {
      v46 = v53;
      v47 = 15;
      goto LABEL_9;
    }
    if (v44 == enum case for WidgetFamily.systemLarge(_:) || v44 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      sub_10000E200((uint64_t)v9, v53);
      goto LABEL_10;
    }
    if (v44 != enum case for WidgetFamily.accessoryCircular(_:)
      && v44 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v44 != enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_10000E200((uint64_t)v9, v53);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v54, v10);
      goto LABEL_10;
    }
  }
  v46 = v53;
  v47 = 9;
LABEL_9:
  sub_100014F40(v47, (uint64_t)v9, (uint64_t)v5, v46);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v10);
  sub_100003644(0, v55, 0, 0, 0, 0, v56, v45, v51, v35, v37, 0.0, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
}

uint64_t sub_1000364E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000378F0;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100036554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000378F0;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_1000365C0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100036624;
  return v6(a1);
}

uint64_t sub_100036624()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100036670(void *a1, uint64_t a2, void (*a3)(_BYTE *), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(_BYTE *);
  uint64_t v92;

  v91 = a3;
  v92 = a4;
  v90 = a2;
  v5 = type metadata accessor for Calendar(0);
  v74 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v87 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin(v7);
  v84 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for WidgetFamily(0);
  v81 = *(_QWORD *)(v83 - 8);
  v9 = __chkstk_darwin(v83);
  v88 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v80 = (char *)&v74 - v11;
  v12 = type metadata accessor for DateInterval(0);
  v76 = *(_QWORD *)(v12 - 8);
  v77 = v12;
  __chkstk_darwin(v12);
  v82 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003C84(&qword_100059958);
  __chkstk_darwin(v14);
  v79 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v16);
  v89 = (uint64_t)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UsageTimelineEntry(0);
  __chkstk_darwin(v18);
  v78 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TimelineProviderContext(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  __chkstk_darwin(v20);
  v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003C84(&qword_10005AEF0);
  __chkstk_darwin(v24);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100059938 != -1)
    swift_once(&qword_100059938, sub_1000354BC);
  v27 = type metadata accessor for Logger(0);
  v75 = sub_100006BC8(v27, (uint64_t)qword_10005AEB8);
  v28 = Logger.logObject.getter(v75);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = v22;
    v31 = v21;
    v32 = v26;
    v33 = v23;
    v34 = v20;
    v35 = a1;
    v36 = v5;
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "getSnapshot called", v37, 2u);
    v38 = v37;
    v5 = v36;
    a1 = v35;
    v20 = v34;
    v23 = v33;
    v26 = v32;
    v21 = v31;
    v22 = v30;
    swift_slowDealloc(v38, -1, -1);
  }

  v39 = objc_msgSend(a1, "user");
  if (v39)
  {
    v40 = v39;
    v41 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v26, 1, 1, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v90, v20);
    v42 = *(unsigned __int8 *)(v21 + 80);
    v43 = (v42 + 40) & ~v42;
    v44 = (v22 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (char *)swift_allocObject(&unk_100056F90, v44 + 16, v42 | 7);
    *((_QWORD *)v45 + 2) = 0;
    *((_QWORD *)v45 + 3) = 0;
    *((_QWORD *)v45 + 4) = v40;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v45[v43], v23, v20);
    v46 = &v45[v44];
    v47 = v92;
    *(_QWORD *)v46 = v91;
    *((_QWORD *)v46 + 1) = v47;
    swift_retain(v47);
    v48 = sub_100035950((uint64_t)v26, (uint64_t)&unk_10005AF28, (uint64_t)v45);
    return swift_release(v48);
  }
  v50 = Logger.logObject.getter(0);
  v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to provide user. Returning placeholder", v52, 2u);
    swift_slowDealloc(v52, -1, -1);
  }

  v54 = v85;
  v53 = v86;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v89, 1, 1, v86);
  v56 = TimelineProviderContext.displaySize.getter(v55);
  v58 = v57;
  v59 = (uint64_t)v79;
  v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v79, 1, 1, v77);
  v61 = v80;
  v62 = TimelineProviderContext.family.getter(v60);
  v63 = (uint64_t)v84;
  v64 = static Date.now.getter(v62);
  v65 = (uint64_t)v87;
  static Calendar.current.getter(v64);
  v66 = v81;
  v67 = v88;
  v68 = v83;
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v88, v61, v83);
  v69 = (*(uint64_t (**)(char *, uint64_t))(v66 + 88))(v67, v68);
  v70 = v82;
  if (v69 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v69 == enum case for WidgetFamily.systemMedium(_:))
    {
      v71 = v82;
      v72 = 15;
      goto LABEL_13;
    }
    if (v69 == enum case for WidgetFamily.systemLarge(_:) || v69 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      sub_10000E200(v63, v82);
      goto LABEL_14;
    }
    if (v69 != enum case for WidgetFamily.accessoryCircular(_:)
      && v69 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v69 != enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_10000E200(v63, v82);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v88, v68);
      goto LABEL_14;
    }
  }
  v71 = v82;
  v72 = 9;
LABEL_13:
  sub_100014F40(v72, v63, v65, v71);
LABEL_14:
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v65, v5);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v63, v53);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v61, v68);
  v73 = v78;
  sub_100003644(0, v89, 0, 0, 0, 0, v59, v70, v78, v56, v58, 0.0, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
  v91(v73);
  return sub_100037758((uint64_t)v73);
}

uint64_t sub_100036D4C(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *);
  uint64_t v110;

  v109 = a3;
  v110 = a4;
  v6 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v6);
  v106 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Calendar(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v103 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for Date(0);
  v102 = *(_QWORD *)(v105 - 8);
  v9 = __chkstk_darwin(v105);
  v104 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v101 = (char *)&v86 - v11;
  v100 = type metadata accessor for WidgetFamily(0);
  v98 = *(_QWORD *)(v100 - 8);
  v12 = __chkstk_darwin(v100);
  v107 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v95 = (char *)&v86 - v14;
  v92 = type metadata accessor for DateInterval(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v99 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003C84(&qword_100059958);
  __chkstk_darwin(v16);
  v94 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003C84(&qword_100059960);
  __chkstk_darwin(v18);
  v108 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003C84(&qword_10005AEE8);
  v96 = *(_QWORD *)(v20 - 8);
  v97 = v20;
  __chkstk_darwin(v20);
  v93 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TimelineProviderContext(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  __chkstk_darwin(v22);
  v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003C84(&qword_10005AEF0);
  __chkstk_darwin(v26);
  v28 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100059938 != -1)
    swift_once(&qword_100059938, sub_1000354BC);
  v29 = type metadata accessor for Logger(0);
  v90 = sub_100006BC8(v29, (uint64_t)qword_10005AEB8);
  v30 = Logger.logObject.getter(v90);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = v24;
    v33 = v23;
    v34 = v28;
    v35 = v25;
    v36 = v22;
    v37 = a1;
    v38 = a2;
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "getTimeline called", v39, 2u);
    v40 = v39;
    a2 = v38;
    a1 = v37;
    v22 = v36;
    v25 = v35;
    v28 = v34;
    v23 = v33;
    v24 = v32;
    swift_slowDealloc(v40, -1, -1);
  }

  v41 = objc_msgSend(a1, "user");
  if (v41)
  {
    v42 = v41;
    v43 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v28, 1, 1, v43);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, a2, v22);
    v44 = *(unsigned __int8 *)(v23 + 80);
    v45 = (v44 + 40) & ~v44;
    v46 = (v24 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    v47 = (char *)swift_allocObject(&unk_100056F40, v46 + 16, v44 | 7);
    *((_QWORD *)v47 + 2) = 0;
    *((_QWORD *)v47 + 3) = 0;
    *((_QWORD *)v47 + 4) = v42;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v47[v45], v25, v22);
    v48 = &v47[v46];
    v49 = v110;
    *(_QWORD *)v48 = v109;
    *((_QWORD *)v48 + 1) = v49;
    swift_retain(v49);
    v50 = sub_100035950((uint64_t)v28, (uint64_t)&unk_10005AF08, (uint64_t)v47);
    return swift_release(v50);
  }
  v52 = Logger.logObject.getter(0);
  v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to provide user. Returning placeholder", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }

  v55 = sub_100003C84(&qword_10005AEF8);
  v90 = type metadata accessor for UsageTimelineEntry(0);
  v56 = *(_QWORD *)(v90 - 8);
  v57 = *(_QWORD *)(v56 + 72);
  v58 = *(unsigned __int8 *)(v56 + 80);
  v59 = (v58 + 32) & ~v58;
  v60 = swift_allocObject(v55, v59 + v57, v58 | 7);
  *(_OWORD *)(v60 + 16) = xmmword_100046DE0;
  v87 = (_BYTE *)(v60 + v59);
  v61 = v102;
  v62 = v105;
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56))(v108, 1, 1, v105);
  v64 = TimelineProviderContext.displaySize.getter(v63);
  v66 = v65;
  v67 = (uint64_t)v94;
  v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v94, 1, 1, v92);
  v69 = v95;
  v70 = TimelineProviderContext.family.getter(v68);
  v71 = (uint64_t)v101;
  v72 = static Date.now.getter(v70);
  v73 = (uint64_t)v103;
  static Calendar.current.getter(v72);
  v74 = v98;
  v75 = v107;
  v76 = v100;
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v107, v69, v100);
  v77 = (*(uint64_t (**)(char *, uint64_t))(v74 + 88))(v75, v76);
  v78 = v99;
  if (v77 != enum case for WidgetFamily.systemSmall(_:))
  {
    if (v77 == enum case for WidgetFamily.systemMedium(_:))
    {
      v79 = v99;
      v80 = 15;
      goto LABEL_13;
    }
    if (v77 == enum case for WidgetFamily.systemLarge(_:) || v77 == enum case for WidgetFamily.systemExtraLarge(_:))
    {
      sub_10000E200(v71, v99);
      goto LABEL_14;
    }
    if (v77 != enum case for WidgetFamily.accessoryCircular(_:)
      && v77 != enum case for WidgetFamily.accessoryRectangular(_:)
      && v77 != enum case for WidgetFamily.accessoryInline(_:))
    {
      sub_10000E200(v71, v99);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v107, v76);
      goto LABEL_14;
    }
  }
  v79 = v99;
  v80 = 9;
LABEL_13:
  sub_100014F40(v80, v71, v73, v79);
LABEL_14:
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v73, v89);
  v81 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v81(v71, v62);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v69, v76);
  sub_100003644(0, v108, 0, 0, 0, 0, v67, v78, v87, v64, v66, 0.0, (uint64_t)_swiftEmptyArrayStorage, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 0, (char *)_swiftEmptyArrayStorage, 0);
  v82 = v104;
  Date.init(timeIntervalSinceNow:)(900.0);
  v83 = v106;
  static TimelineReloadPolicy.after(_:)(v82);
  v81((uint64_t)v82, v62);
  v84 = sub_100035474();
  v85 = v93;
  Timeline.init(entries:policy:)(v60, v83, v90, v84);
  v109(v85);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v85, v97);
}

uint64_t sub_100037580(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_10005AF04);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10003763C;
  return sub_100035A94(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_10003763C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100037684(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003C84(&qword_10005AEF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000376C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000376E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10005AF14);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003763C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10005AF10 + dword_10005AF10))(a1, v4);
}

uint64_t sub_100037758(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UsageTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100037834(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_10005AF24);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000378F0;
  return sub_10003553C(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000378F4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005AF30);
  sub_100006BC8(v0, (uint64_t)qword_10005AF30);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0x6F72506567617355, 0xED00007265646976);
}

uint64_t sub_100037974(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = (id)v2[2];
  NSObject.hash(into:)(a1);

  v7 = (id)v2[3];
  NSObject.hash(into:)(a1);

  if ((v2[4] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v2[4];
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  v9 = v2[5];
  v10 = v2[6];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v9, v10);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100037A28(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_1000385B0((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_100037A80@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_100037A8C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100037974((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100037ACC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100037974((uint64_t)v2);
  return Hasher._finalize()();
}

BOOL sub_100037B04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t sub_100037B78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100037BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v4 = type metadata accessor for DeviceActivityUsageProvider();
    memset(v7, 0, sizeof(v7));
    v8 = 0;
    swift_allocObject(v4, 152, 7);
    v2 = sub_10001D6B0((uint64_t)v11, 0, 0, (uint64_t)v9, (uint64_t)v7);
    v5 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_100037C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v3 = v0;
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v4 = type metadata accessor for CoreDataUsageProvider();
    memset(v7, 0, sizeof(v7));
    v8 = 0;
    swift_allocObject(v4, 136, 7);
    v2 = sub_10000E8AC((uint64_t)v11, (uint64_t)v9, (uint64_t)v7);
    v5 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_100037D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 + 112) = a7;
  *(_QWORD *)(v10 + 120) = v9;
  *(_BYTE *)(v10 + 168) = a6;
  *(_QWORD *)(v10 + 96) = a4;
  *(_QWORD *)(v10 + 104) = a5;
  *(double *)(v10 + 80) = a8;
  *(double *)(v10 + 88) = a9;
  *(_QWORD *)(v10 + 64) = a2;
  *(_QWORD *)(v10 + 72) = a3;
  *(_QWORD *)(v10 + 56) = a1;
  return swift_task_switch(sub_100037D30, 0, 0);
}

uint64_t sub_100037D30()
{
  uint64_t v0;
  char v1;
  int64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v1 = *(_BYTE *)(v0 + 168);
  v3 = *(void **)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = sub_100037BB4();
  v5 = sub_10001F328(v1, v3, v2);
  swift_release(v4);
  if ((v5 & 1) != 0
    && (v6 = type metadata accessor for ScreenTimeFeatureFlags(0),
        *(_QWORD *)(v0 + 40) = v6,
        *(_QWORD *)(v0 + 48) = sub_10000DF58((unint64_t *)&qword_10005ADA8, (uint64_t (*)(uint64_t))&type metadata accessor for ScreenTimeFeatureFlags, (uint64_t)&protocol conformance descriptor for ScreenTimeFeatureFlags), v7 = sub_10002AB78((_QWORD *)(v0 + 16)), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, enum case for ScreenTimeFeatureFlags.newUsage(_:), v6), LOBYTE(v6) = isFeatureEnabled(_:)(v0 + 16), sub_100018494((_QWORD *)(v0 + 16)), (v6 & 1) != 0))
  {
    if (qword_100059940 != -1)
      swift_once(&qword_100059940, sub_1000378F4);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100006BC8(v8, (uint64_t)qword_10005AF30);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Using Device Activity to show widget usage data", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    *(_QWORD *)(v0 + 128) = sub_100037BB4();
    v13 = (_QWORD *)swift_task_alloc(dword_10005A2DC);
    *(_QWORD *)(v0 + 136) = v13;
    *v13 = v0;
    v13[1] = sub_100038084;
    return sub_10001D8CC(*(_QWORD *)(v0 + 56), *(double *)(v0 + 80), *(double *)(v0 + 88), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 168), *(_QWORD *)(v0 + 112));
  }
  else
  {
    if (qword_100059940 != -1)
      swift_once(&qword_100059940, sub_1000378F4);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100006BC8(v15, (uint64_t)qword_10005AF30);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Using Core Data to show widget usage data", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_BYTE *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 88);
    v28 = *(_OWORD *)(v0 + 64);
    v29 = *(_OWORD *)(v0 + 96);

    v24 = sub_100037C60();
    *(_QWORD *)(v0 + 144) = v24;
    v25 = swift_task_alloc(96);
    *(_QWORD *)(v0 + 152) = v25;
    *(_QWORD *)(v25 + 16) = v24;
    *(_BYTE *)(v25 + 24) = v21;
    *(_OWORD *)(v25 + 32) = v29;
    *(_OWORD *)(v25 + 48) = v28;
    *(_QWORD *)(v25 + 64) = v20;
    *(_QWORD *)(v25 + 72) = v23;
    *(_QWORD *)(v25 + 80) = v22;
    v26 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 160) = v26;
    v27 = type metadata accessor for UsageTimelineEntry(0);
    *v26 = v0;
    v26[1] = sub_1000380D4;
    return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 56), 0, 0, 0xD00000000000003DLL, 0x800000010004A1E0, sub_10003817C, v25, v27);
  }
}

uint64_t sub_100038084()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 128);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000380D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 152);
  v2 = *(_QWORD *)(*v0 + 144);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  swift_release(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100038130()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for UsageProvider()
{
  return objc_opt_self(_TtC25ScreenTimeWidgetExtension13UsageProvider);
}

uint64_t sub_10003817C(uint64_t a1)
{
  uint64_t v1;

  return sub_10000EC6C(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80));
}

BOOL sub_100038198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v53 = type metadata accessor for Date(0);
  v51 = *(void (**)(char *, uint64_t))(v53 - 8);
  v4 = __chkstk_darwin(v53);
  v52 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v54 = (char *)&v49 - v6;
  v7 = type metadata accessor for HourlyUsage(0);
  v8 = __chkstk_darwin(v7);
  v56 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v55 = (uint64_t)&v49 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v49 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v49 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v49 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v49 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v49 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v49 - v27;
  v29 = static DateInterval.== infix(_:_:)(a1, a2);
  sub_10003A85C(a1, (uint64_t)v28);
  sub_10003A85C(a2, (uint64_t)v26);
  if ((v29 & 1) == 0)
  {
    sub_10000DB4C((uint64_t)v26);
    sub_10000DB4C((uint64_t)v28);
    sub_10003A85C(a1, (uint64_t)v23);
    sub_10003A85C(a2, (uint64_t)v20);
    goto LABEL_7;
  }
  v30 = *(double *)&v28[*(int *)(v7 + 20)];
  sub_10000DB4C((uint64_t)v28);
  v31 = *(double *)&v26[*(int *)(v7 + 20)];
  sub_10000DB4C((uint64_t)v26);
  sub_10003A85C(a1, (uint64_t)v23);
  sub_10003A85C(a2, (uint64_t)v20);
  if (v30 != v31)
  {
LABEL_7:
    sub_10000DB4C((uint64_t)v20);
    sub_10000DB4C((uint64_t)v23);
    sub_10003A85C(a1, (uint64_t)v17);
    sub_10003A85C(a2, (uint64_t)v14);
    goto LABEL_8;
  }
  v32 = sub_100003C84(&qword_100059EA0);
  v33 = v7;
  v34 = v54;
  ChartBinRange.lowerBound.getter(v32);
  v49 = v33;
  v35 = v52;
  ChartBinRange.lowerBound.getter(v32);
  v50 = static Date.== infix(_:_:)(v34, v35);
  v36 = (void (*)(char *, uint64_t))*((_QWORD *)v51 + 1);
  v37 = v53;
  v36(v35, v53);
  v51 = v36;
  v36(v34, v37);
  sub_10000DB4C((uint64_t)v20);
  sub_10000DB4C((uint64_t)v23);
  sub_10003A85C(a1, (uint64_t)v17);
  sub_10003A85C(a2, (uint64_t)v14);
  if ((v50 & 1) == 0)
  {
LABEL_8:
    sub_10000DB4C((uint64_t)v14);
    sub_10000DB4C((uint64_t)v17);
    v47 = a1;
    v44 = v55;
    sub_10003A85C(v47, v55);
    v45 = v56;
    sub_10003A85C(a2, v56);
    goto LABEL_9;
  }
  v38 = v49;
  v39 = sub_100003C84(&qword_100059EA0);
  v40 = v54;
  ChartBinRange.upperBound.getter(v39);
  ChartBinRange.upperBound.getter(v39);
  v41 = static Date.== infix(_:_:)(v40, v35);
  v42 = v51;
  v51(v35, v37);
  v42(v40, v37);
  sub_10000DB4C((uint64_t)v14);
  sub_10000DB4C((uint64_t)v17);
  v43 = a1;
  v44 = v55;
  sub_10003A85C(v43, v55);
  v45 = v56;
  sub_10003A85C(a2, v56);
  if ((v41 & 1) == 0)
  {
LABEL_9:
    v46 = 0;
    goto LABEL_10;
  }
  v46 = sub_100037B04(*(_QWORD *)(v44 + *(int *)(v38 + 28)), *(_QWORD *)(v45 + *(int *)(v38 + 28)));
LABEL_10:
  sub_10000DB4C(v44);
  sub_10000DB4C(v45);
  return v46;
}

uint64_t sub_1000385B0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  uint64_t result;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    sub_1000189D0(0, &qword_10005B0D8, NSObject_ptr);
    if ((static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
      && (static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
      && *(double *)(a1 + 32) == *(double *)(a2 + 32))
    {
      if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_100038688(char a1, id a2, int64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  BOOL v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  NSObject *oslog;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;

  if ((a1 & 1) != 0)
  {
    v5 = a3;
    if (a3)
    {
      v7 = qword_100059940;
      swift_bridgeObjectRetain(a3);
      if (v7 != -1)
        goto LABEL_59;
      while (1)
      {
        v8 = type metadata accessor for Logger(0);
        sub_100006BC8(v8, (uint64_t)qword_10005AF30);
        v9 = swift_bridgeObjectRetain_n(v5, 2);
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc(12, -1);
          v13 = (void *)swift_slowAlloc(32, -1);
          v76 = v13;
          *(_DWORD *)v12 = 136446210;
          swift_bridgeObjectRetain(v5);
          v74 = sub_100015BD0((uint64_t)a2, v5, (uint64_t *)&v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
          swift_bridgeObjectRelease_n(v5, 3);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fetching information for user with dsid: %{public}s.", v12, 0xCu);
          swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v13, -1, -1);
          swift_slowDealloc(v12, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v5, 2);
        }
        v20 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequest");
        v40 = sub_100003C84(&qword_10005A0B0);
        v41 = swift_allocObject(v40, 112, 7);
        *(_OWORD *)(v41 + 16) = xmmword_100046DD0;
        sub_1000189D0(0, &qword_10005A0B8, NSPredicate_ptr);
        *(_QWORD *)(v41 + 56) = &type metadata for String;
        v42 = sub_100016338();
        *(_QWORD *)(v41 + 32) = 1684632420;
        *(_QWORD *)(v41 + 40) = 0xE400000000000000;
        *(_QWORD *)(v41 + 96) = &type metadata for String;
        *(_QWORD *)(v41 + 104) = v42;
        *(_QWORD *)(v41 + 64) = v42;
        *(_QWORD *)(v41 + 72) = a2;
        *(_QWORD *)(v41 + 80) = v5;
        v43 = (void *)NSPredicate.init(format:_:)(0x4025203D3D204B25, 0xE800000000000000, v41);
        objc_msgSend(v20, "setPredicate:", v43);

        v76 = 0;
        v44 = objc_msgSend(v20, "execute:", &v76);
        v45 = v76;
        if (!v44)
          break;
        a2 = v44;
        v46 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
        v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v46);
        v47 = v45;

LABEL_26:
        if ((unint64_t)v5 >> 62)
        {
          if (v5 < 0)
            v63 = v5;
          else
            v63 = v5 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v5);
          v64 = _CocoaArrayWrapper.endIndex.getter(v63);
          swift_bridgeObjectRelease(v5);
          v49 = v64 > 0;
          swift_bridgeObjectRetain(v5);
          if (!_CocoaArrayWrapper.endIndex.getter(v63))
          {
LABEL_45:
            swift_bridgeObjectRelease(v5);
            if (!v49)
            {
              if (qword_100059940 != -1)
                swift_once(&qword_100059940, sub_1000378F4);
              v65 = type metadata accessor for Logger(0);
              v66 = sub_100006BC8(v65, (uint64_t)qword_10005AF30);
              v56 = Logger.logObject.getter(v66);
              v67 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v56, v67))
              {
                v58 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v58 = 0;
                _os_log_impl((void *)&_mh_execute_header, v56, v67, "Fetching user information returned empty results", v58, 2u);
LABEL_50:
                swift_slowDealloc(v58, -1, -1);
              }
              goto LABEL_51;
            }
            goto LABEL_52;
          }
        }
        else
        {
          v48 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
          v49 = v48 != 0;
          swift_bridgeObjectRetain(v5);
          if (!v48)
            goto LABEL_45;
        }
        if ((v5 & 0xC000000000000001) != 0)
        {
          v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
          goto LABEL_31;
        }
        if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v50 = *(id *)(v5 + 32);
LABEL_31:
          v51 = v50;
          swift_bridgeObjectRelease(v5);
          v52 = v51;
          sub_100024E38(v51, a4);
          swift_bridgeObjectRelease(v5);

          return;
        }
        __break(1u);
LABEL_59:
        swift_once(&qword_100059940, sub_1000378F4);
      }
      v53 = v76;
      v54 = _convertNSErrorToError(_:)(v45);

      swift_willThrow();
      v55 = swift_errorRelease(v54);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Fetching user information returned nil results", v58, 2u);
        v5 = 0;
        goto LABEL_50;
      }
      v5 = 0;
LABEL_51:

LABEL_52:
      if (qword_100059918 != -1)
        swift_once(&qword_100059918, sub_10001D540);
      v68 = type metadata accessor for Logger(0);
      v69 = sub_100006BC8(v68, (uint64_t)qword_10005A298);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "unable to fetch user properties", v72, 2u);
        swift_slowDealloc(v72, -1, -1);
      }
      swift_bridgeObjectRelease(v5);

    }
    else
    {
      if (qword_100059940 != -1)
        swift_once(&qword_100059940, sub_1000378F4);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_100006BC8(v23, (uint64_t)qword_10005AF30);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to provide DSID. Returning nil user.", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      if (qword_100059918 != -1)
        swift_once(&qword_100059918, sub_10001D540);
      v28 = sub_100006BC8(v23, (uint64_t)qword_10005A298);
      oslog = Logger.logObject.getter(v28);
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v29, "unable to fetch user properties", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

    }
  }
  else
  {
    if (qword_100059940 != -1)
      swift_once(&qword_100059940, sub_1000378F4);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100006BC8(v14, (uint64_t)qword_10005AF30);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching local user information", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequestMatchingLocalUser");
    v76 = 0;
    v20 = objc_msgSend(v19, "execute:", &v76);

    a2 = v76;
    if (v20)
    {
      v21 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
      v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);
      v22 = a2;
      goto LABEL_26;
    }
    v31 = v76;
    v32 = _convertNSErrorToError(_:)(a2);

    swift_willThrow();
    swift_errorRetain(v32);
    v33 = swift_errorRetain(v32);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138543362;
      swift_errorRetain(v32);
      v38 = (void *)_swift_stdlib_bridgeErrorToNSError(v32);
      v76 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      *v37 = v38;
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to fetch user: %{public}@", v36, 0xCu);
      v39 = sub_100003C84(&qword_10005A098);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);
    }

    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v59 = sub_100006BC8(v14, (uint64_t)qword_10005A298);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "unable to fetch user properties", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }

    swift_errorRelease(v32);
  }
}

uint64_t sub_10003912C(uint64_t a1, void *a2, int64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD aBlock[5];
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;

  v12 = swift_allocObject(&unk_100057018, 32, 7);
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  v42 = type metadata accessor for XPCPersistentStoreManager();
  v43 = &off_100056E58;
  v41[0] = a1;
  v13 = *(unsigned __int8 *)(*sub_100014EDC(v41, v42) + 24);
  v14 = qword_100059940;
  swift_retain_n(a5, 2);
  swift_retain_n(a6, 2);
  swift_retain(a1);
  if (v13 != 1)
    goto LABEL_9;
  if (v14 != -1)
    swift_once(&qword_100059940, sub_1000378F4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100006BC8(v15, (uint64_t)qword_10005AF30);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully loaded persistent store.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_100014EDC(v41, v42);
  v14 = swift_allocObject(&unk_100057040, 56, 7);
  v21 = a4 & 1;
  *(_BYTE *)(v14 + 16) = v21;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = sub_100039664;
  *(_QWORD *)(v14 + 48) = v12;
  v22 = *v20;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_retain_n(v12, 2);
  sub_10003358C();
  if (*(_BYTE *)(v22 + 24) != 1)
  {
    swift_retain(a5);
    swift_retain(a6);
    sub_100038688(v21, a2, a3, a5);
    swift_release(v12);
    swift_bridgeObjectRelease(a3);
    swift_release(v14);
    swift_release(a5);
    swift_release(a6);
    goto LABEL_19;
  }
  v23 = objc_msgSend(*(id *)(v22 + 16), "newBackgroundContext");
  objc_msgSend(v23, "setAutomaticallyMergesChangesFromParent:", 1);
  objc_msgSend(v23, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
  v24 = (_QWORD *)swift_allocObject(&unk_100057068, 40, 7);
  v24[2] = sub_100039698;
  v24[3] = v14;
  v24[4] = v23;
  v25 = swift_allocObject(&unk_100057090, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_100015A08;
  *(_QWORD *)(v25 + 24) = v24;
  aBlock[4] = sub_10001C2B8;
  v40 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100014F20;
  aBlock[3] = &unk_1000570A8;
  v26 = _Block_copy(aBlock);
  v27 = v40;
  swift_retain(v14);
  v28 = v23;
  swift_retain(v25);
  swift_release(v27);
  objc_msgSend(v28, "performBlockAndWait:", v26);

  _Block_release(v26);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation(v25, "", 109, 78, 36, 1);
  swift_release(v12);
  swift_bridgeObjectRelease(a3);
  swift_release(v14);
  swift_release(v24);
  swift_release(v25);
  if ((v28 & 1) != 0)
  {
    __break(1u);
LABEL_9:
    if (v14 != -1)
      swift_once(&qword_100059940, sub_1000378F4);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100006BC8(v29, (uint64_t)qword_10005AF30);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to load persistent store. This prevented fetching user data.", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    if (qword_100059918 != -1)
      swift_once(&qword_100059918, sub_10001D540);
    v34 = sub_100006BC8(v29, (uint64_t)qword_10005A298);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "unable to fetch user properties", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
LABEL_19:
  sub_100018494(v41);
  swift_release(a6);
  swift_release(a5);
  return swift_release(v12);
}

uint64_t sub_100039638()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039664(uint64_t a1)
{
  uint64_t v1;

  return sub_10001F324(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10003966C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100039698()
{
  uint64_t v0;

  sub_1000396FC(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void *))(v0 + 40));
}

uint64_t sub_1000396A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000396D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000396E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000396F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000396FC(char a1, void *a2, int64_t a3, void (*a4)(void *))
{
  void *v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  BOOL v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;

  if ((a1 & 1) != 0)
  {
    v6 = a3;
    if (a3)
    {
      v4 = a2;
      v7 = qword_100059940;
      swift_bridgeObjectRetain(a3);
      if (v7 != -1)
        goto LABEL_47;
      while (1)
      {
        v8 = type metadata accessor for Logger(0);
        sub_100006BC8(v8, (uint64_t)qword_10005AF30);
        v9 = swift_bridgeObjectRetain_n(v6, 2);
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc(12, -1);
          v13 = (void *)swift_slowAlloc(32, -1);
          v64 = v13;
          *(_DWORD *)v12 = 136446210;
          swift_bridgeObjectRetain(v6);
          v62 = sub_100015BD0((uint64_t)v4, v6, (uint64_t *)&v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
          swift_bridgeObjectRelease_n(v6, 3);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Fetching information for user with dsid: %{public}s.", v12, 0xCu);
          swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v13, -1, -1);
          swift_slowDealloc(v12, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v6, 2);
        }
        v20 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequest");
        v38 = sub_100003C84(&qword_10005A0B0);
        v39 = swift_allocObject(v38, 112, 7);
        *(_OWORD *)(v39 + 16) = xmmword_100046DD0;
        sub_1000189D0(0, &qword_10005A0B8, NSPredicate_ptr);
        *(_QWORD *)(v39 + 56) = &type metadata for String;
        v40 = sub_100016338();
        *(_QWORD *)(v39 + 32) = 1684632420;
        *(_QWORD *)(v39 + 40) = 0xE400000000000000;
        *(_QWORD *)(v39 + 96) = &type metadata for String;
        *(_QWORD *)(v39 + 104) = v40;
        *(_QWORD *)(v39 + 64) = v40;
        *(_QWORD *)(v39 + 72) = v4;
        *(_QWORD *)(v39 + 80) = v6;
        v41 = (void *)NSPredicate.init(format:_:)(0x4025203D3D204B25, 0xE800000000000000, v39);
        objc_msgSend(v20, "setPredicate:", v41);

        v64 = 0;
        v42 = objc_msgSend(v20, "execute:", &v64);
        v43 = v64;
        if (!v42)
          break;
        v4 = v42;
        v44 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
        v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v44);
        v45 = v43;

LABEL_22:
        if ((unint64_t)v6 >> 62)
        {
          if (v6 < 0)
            v57 = v6;
          else
            v57 = v6 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v6);
          v58 = _CocoaArrayWrapper.endIndex.getter(v57);
          swift_bridgeObjectRelease(v6);
          v47 = v58 > 0;
          swift_bridgeObjectRetain(v6);
          if (!_CocoaArrayWrapper.endIndex.getter(v57))
          {
LABEL_37:
            swift_bridgeObjectRelease(v6);
            if (!v47)
            {
              if (qword_100059940 != -1)
                swift_once(&qword_100059940, sub_1000378F4);
              v59 = type metadata accessor for Logger(0);
              v60 = sub_100006BC8(v59, (uint64_t)qword_10005AF30);
              v54 = Logger.logObject.getter(v60);
              v61 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v54, v61))
              {
                v56 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v56 = 0;
                _os_log_impl((void *)&_mh_execute_header, v54, v61, "Fetching user information returned empty results", v56, 2u);
LABEL_42:
                swift_slowDealloc(v56, -1, -1);
              }
              goto LABEL_43;
            }
            goto LABEL_44;
          }
        }
        else
        {
          v46 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          v47 = v46 != 0;
          swift_bridgeObjectRetain(v6);
          if (!v46)
            goto LABEL_37;
        }
        if ((v6 & 0xC000000000000001) != 0)
        {
          v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
          goto LABEL_27;
        }
        if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v48 = *(id *)(v6 + 32);
LABEL_27:
          v49 = v48;
          swift_bridgeObjectRelease(v6);
          v50 = v49;
          a4(v49);
          swift_bridgeObjectRelease(v6);

          return;
        }
        __break(1u);
LABEL_47:
        swift_once(&qword_100059940, sub_1000378F4);
      }
      v51 = v64;
      v52 = _convertNSErrorToError(_:)(v43);

      swift_willThrow();
      v53 = swift_errorRelease(v52);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Fetching user information returned nil results", v56, 2u);
        v6 = 0;
        goto LABEL_42;
      }
      v6 = 0;
LABEL_43:

LABEL_44:
      a4(0);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      if (qword_100059940 != -1)
        swift_once(&qword_100059940, sub_1000378F4);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_100006BC8(v24, (uint64_t)qword_10005AF30);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to provide DSID. Returning nil user.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      a4(0);
    }
  }
  else
  {
    if (qword_100059940 != -1)
      swift_once(&qword_100059940, sub_1000378F4);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100006BC8(v14, (uint64_t)qword_10005AF30);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching local user information", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequestMatchingLocalUser");
    v64 = 0;
    v20 = objc_msgSend(v19, "execute:", &v64);

    v21 = v64;
    if (v20)
    {
      v22 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
      v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v22);
      v23 = v21;
      goto LABEL_22;
    }
    v29 = v64;
    v30 = _convertNSErrorToError(_:)(v21);

    swift_willThrow();
    swift_errorRetain(v30);
    v31 = swift_errorRetain(v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138543362;
      swift_errorRetain(v30);
      v36 = (void *)_swift_stdlib_bridgeErrorToNSError(v30);
      v64 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      *v35 = v36;
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to fetch user: %{public}@", v34, 0xCu);
      v37 = sub_100003C84(&qword_10005A098);
      swift_arrayDestroy(v35, 1, v37);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_errorRelease(v30);
      swift_errorRelease(v30);
    }

    a4(0);
    swift_errorRelease(v30);
  }
}

uint64_t destroy for MostUsedItem(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for MostUsedItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  v7 = v4;
  v8 = v5;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for MostUsedItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = (void *)a2[3];
  v10 = (void *)a1[3];
  a1[3] = v9;
  v11 = v9;

  a1[4] = a2[4];
  a1[5] = a2[5];
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *assignWithTake for MostUsedItem(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  v5 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  a1[4] = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = a1[6];
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for MostUsedItem()
{
  return &type metadata for MostUsedItem;
}

uint64_t *sub_10003A150(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_100003C84(&qword_100059EA0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

double sub_10003A21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = sub_100003C84(&qword_100059EA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28))).n128_u64[0];
  return result;
}

uint64_t sub_10003A290(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100003C84(&qword_100059EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_10003A330(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100003C84(&qword_100059EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_10003A3E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100003C84(&qword_100059EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003A47C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_100003C84(&qword_100059EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10003A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003A52C);
}

uint64_t sub_10003A52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003C84(&qword_100059EA0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10003A5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003A5E4);
}

uint64_t sub_10003A5E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003C84(&qword_100059EA0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for HourlyUsage(uint64_t a1)
{
  uint64_t result;

  result = qword_10005B088;
  if (!qword_10005B088)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HourlyUsage);
  return result;
}

void sub_10003A6C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10003A764(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_10003A764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_10005B098)
  {
    v2 = type metadata accessor for Date(255);
    v3 = sub_10000DF58(&qword_100059ED0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v4 = type metadata accessor for ChartBinRange(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_10005B098);
  }
}

uint64_t sub_10003A7DC()
{
  return sub_10000DF58(&qword_10005A4B0, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
}

unint64_t sub_10003A80C()
{
  unint64_t result;

  result = qword_10005B0D0;
  if (!qword_10005B0D0)
  {
    result = swift_getWitnessTable(&unk_100048480, &type metadata for MostUsedItem);
    atomic_store(result, (unint64_t *)&qword_10005B0D0);
  }
  return result;
}

void *sub_10003A850()
{
  return &protocol witness table for String;
}

uint64_t sub_10003A85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HourlyUsage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for UsageTitleView(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UsageTitleView(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for UsageTitleView()
{
  return &type metadata for UsageTitleView;
}

uint64_t sub_10003A8FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F3E0, 1);
}

id sub_10003A90C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  qword_10005B0E0 = (uint64_t)result;
  return result;
}

uint64_t sub_10003A93C@<X0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __n128 v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  uint64_t v51;
  id v52;
  void *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v64 = a3;
  v5 = type metadata accessor for ContentTransition(0);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  __chkstk_darwin(v5);
  v61 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003C84(&qword_10005B0E8);
  __chkstk_darwin(v7);
  v55 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003C84(&qword_10005B0F0);
  __chkstk_darwin(v60);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0 || a1 < 0.0)
  {
    v11 = 0xE200000000000000;
    v12 = 11565;
  }
  else
  {
    if (qword_100059948 != -1)
      swift_once(&qword_100059948, sub_10003A90C);
    v50 = (void *)qword_10005B0E0;
    if (a1 < 60.0)
      v51 = 128;
    else
      v51 = 96;
    objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v51);
    objc_msgSend(v50, "setUnitsStyle:", 1);
    v52 = objc_msgSend(v50, "stringFromTimeInterval:", a1);
    if (v52)
    {
      v53 = v52;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v11 = v54;

    }
    else
    {
      v12 = 0;
      v11 = 0xE000000000000000;
    }
  }
  v66 = v12;
  v67 = v11;
  v13 = sub_100009EB0();
  v14 = Text.init<A>(_:)(&v66, &type metadata for String, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  KeyPath = swift_getKeyPath(&unk_100048530);
  v22 = swift_getKeyPath(&unk_100048560);
  v57 = v14;
  v66 = v14;
  v67 = v16;
  v56 = v16;
  v68 = v18 & 1;
  v59 = v20;
  v69 = v20;
  v70 = KeyPath;
  v58 = KeyPath;
  v71 = 0x3FE8000000000000;
  v72 = v22;
  v73 = 1;
  v74 = 0;
  if ((a2 & 1) != 0 || a1 < 0.0)
    goto LABEL_13;
  if (qword_100059948 != -1)
    swift_once(&qword_100059948, sub_10003A90C);
  v23 = (void *)qword_10005B0E0;
  v24 = a1 < 60.0 ? 128 : 96;
  objc_msgSend((id)qword_10005B0E0, "setAllowedUnits:", v24);
  objc_msgSend(v23, "setUnitsStyle:", 3);
  v25 = objc_msgSend(v23, "stringFromTimeInterval:", a1);
  if (!v25)
  {
LABEL_13:
    v27 = 0;
    v29 = 0xE000000000000000;
  }
  else
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

  }
  if (String.count.getter(v27, v29))
  {
    v65[0] = v27;
    v65[1] = v29;
    v30 = Text.init<A>(_:)(v65, &type metadata for String, v13);
  }
  else
  {
    swift_bridgeObjectRelease(v29);
    v34 = LocalizedStringKey.init(stringLiteral:)(0x65676173556F4ELL, 0xE700000000000000);
    v30 = Text.init(_:tableName:bundle:comment:)(v34);
  }
  v35 = v30;
  v36 = v31;
  v37 = v33;
  v38 = v32 & 1;
  v39 = sub_100003C84(&qword_10005B0F8);
  v40 = sub_10003AEF4();
  v41 = (uint64_t)v55;
  View.accessibility(label:)(v35, v36, v38, v37, v39, v40);
  sub_100007D1C(v35, v36, v38);
  swift_bridgeObjectRelease(v37);
  sub_100007D1C(v57, v56, v18 & 1);
  swift_release(v22);
  swift_release(v58);
  v42 = swift_bridgeObjectRelease(v59);
  v43 = v61;
  static ContentTransition.numericText(countsDown:)(0, v42);
  v44 = swift_getKeyPath(&unk_100048590);
  v45 = (uint64_t *)&v10[*(int *)(v60 + 36)];
  v46 = sub_100003C84(&qword_100059E28);
  v48 = v62;
  v47 = v63;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))((char *)v45 + *(int *)(v46 + 28), v43, v63);
  *v45 = v44;
  sub_10003B010(v41, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v47);
  sub_10003B058(v41);
  return sub_10003B098((uint64_t)v10, v64);
}

uint64_t sub_10003ADF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003A93C(*(double *)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t sub_10003AE04()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_10003AE24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentTransition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.contentTransition.setter(v4);
}

void sub_10003AEA0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10003AEC8(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

unint64_t sub_10003AEF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B100;
  if (!qword_10005B100)
  {
    v1 = sub_100005554(&qword_10005B0F8);
    sub_10003AF70();
    sub_10003B1CC(&qword_100059B60, &qword_100059B68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B100);
  }
  return result;
}

unint64_t sub_10003AF70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B108;
  if (!qword_10005B108)
  {
    v1 = sub_100005554(&qword_10005B110);
    sub_10003B1CC(&qword_10005B118, &qword_10005B120);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B108);
  }
  return result;
}

uint64_t sub_10003AFEC()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_10003B010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003C84(&qword_10005B0E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003B058(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003C84(&qword_10005B0E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003B098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003C84(&qword_10005B0F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003B0E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B128;
  if (!qword_10005B128)
  {
    v1 = sub_100005554(&qword_10005B0F0);
    sub_10003B160();
    sub_10003B1CC(&qword_100059EF8, &qword_100059E28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B128);
  }
  return result;
}

unint64_t sub_10003B160()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B130;
  if (!qword_10005B130)
  {
    v1 = sub_100005554(&qword_10005B0E8);
    sub_10003AEF4();
    sub_10000A05C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B130);
  }
  return result;
}

uint64_t sub_10003B1CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005554(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003B20C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006BE0(v0, qword_10005B138);
  sub_100006BC8(v0, (uint64_t)qword_10005B138);
  return Logger.init(subsystem:category:)(0xD00000000000001ALL, 0x8000000100049A20, 0xD000000000000014, 0x800000010004A240);
}

void sub_10003B28C(uint64_t a1, uint64_t a2)
{
  sub_10003B9D8(a2);
}

void *sub_10003B294(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v3 = a2 + 16;
  v4 = sub_10003B310();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_beginAccess(v3, v15, 1, 0);
  v11 = *(void **)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v8;
  *(_WORD *)(a2 + 40) = v10;
  return sub_10001C24C(v11, v12, v13);
}

id sub_10003B310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  NSObject **v40;
  NSObject *v41;
  uint64_t v42;
  id v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v52;
  NSObject *v53;
  _QWORD v54[2];
  id v55;
  Swift::String v56;

  v0 = type metadata accessor for PersonNameComponents(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequestMatchingLocalUser");
  v55 = 0;
  v5 = objc_msgSend(v4, "execute:", &v55);

  v6 = v55;
  if (!v5)
  {
    v30 = v55;
    v31 = (void *)_convertNSErrorToError(_:)(v6);

    swift_willThrow();
    v55 = v31;
    v32 = sub_100003C84(&qword_10005A088);
    v33 = sub_1000189D0(0, &qword_10005A090, NSError_ptr);
    swift_dynamicCast(v54, &v55, v32, v33, 0);
    v34 = (void *)v54[0];
    if (qword_100059950 != -1)
      swift_once(&qword_100059950, sub_10003B20C);
    v35 = type metadata accessor for Logger(0);
    sub_100006BC8(v35, (uint64_t)qword_10005B138);
    v36 = v34;
    v37 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v39 = 138412290;
      v53 = v36;
      v41 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
      *v40 = v36;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to fetch local user: %@", v39, 0xCu);
      v42 = sub_100003C84(&qword_10005A098);
      swift_arrayDestroy(v40, 1, v42);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {

      v37 = v36;
    }

    swift_errorRelease(v55);
    return 0;
  }
  v7 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v7);
  v9 = v6;

  if (!((unint64_t)v8 >> 62))
  {
    v10 = *(void **)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_4;
    goto LABEL_28;
  }
  if (v8 < 0)
    v46 = v8;
  else
    v46 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v10 = (void *)_CocoaArrayWrapper.endIndex.getter(v46);
  swift_bridgeObjectRelease(v8);
  if (!v10)
  {
LABEL_28:
    swift_bridgeObjectRelease(v8);
    if (qword_100059950 != -1)
      swift_once(&qword_100059950, sub_10003B20C);
    v47 = type metadata accessor for Logger(0);
    sub_100006BC8(v47, (uint64_t)qword_10005B138);
    v48 = ((uint64_t (*)(void))Logger.logObject.getter)();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Fetching local user returned empty results.", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    return 0;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_37;
    }
    v11 = *(id *)(v8 + 32);
  }
  v10 = v11;
  swift_bridgeObjectRelease(v8);
  if (qword_100059950 != -1)
LABEL_37:
    swift_once(&qword_100059950, sub_10003B20C);
  v12 = type metadata accessor for Logger(0);
  sub_100006BC8(v12, (uint64_t)qword_10005B138);
  v13 = ((uint64_t (*)(void))Logger.logObject.getter)();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Successfully fetched local user.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  PersonNameComponents.init()();
  v16 = objc_msgSend(v10, "givenName");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    PersonNameComponents.givenName.setter(v18, v20);
    v21 = objc_msgSend(v10, "familyName");
    if (v21)
    {
      v22 = v21;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v25 = v24;

      v21 = (id)PersonNameComponents.familyName.setter(v23, v25);
    }
    v26 = Logger.logObject.getter(v21);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully fetched given name of local user.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    PersonNameComponents.formatted()();
    v29 = objc_msgSend(v10, "dsid");
  }
  else
  {
    v29 = objc_msgSend(v10, "dsid");
    v43 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v56._object = (void *)0xE000000000000000;
    v44._object = (void *)0x800000010004A220;
    v44._countAndFlagsBits = 0xD000000000000016;
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    v56._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)v43, v45, v56);

  }
  objc_msgSend(v10, "isParent");

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v29;
}

void sub_10003B9D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  BOOL v43;
  unint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  int64_t v79;
  unint64_t isa;
  char *v81;
  id v82;
  void *v83;
  unsigned int v84;
  id v85;
  char **v86;
  char *v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_log_type_t v95;
  uint8_t *v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  _QWORD *v107;
  id v108;
  uint64_t v109;
  id v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  char *v123;
  NSObject *v124;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  char **v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t countAndFlagsBits;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *object;
  id v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  os_log_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157[3];
  id v158[5];

  v2 = type metadata accessor for PersonNameComponents(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v131 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10003B310();
  v147 = v9;
  if (!v6)
  {
    if (qword_100059950 != -1)
      goto LABEL_80;
    goto LABEL_64;
  }
  v137 = v7;
  v139 = v6;
  v10 = (char **)(a1 + 16);
  v138 = (char **)(a1 + 16);
  if ((v8 & 1) == 0)
    goto LABEL_86;
  v142 = v5;
  v143 = v3;
  v144 = v2;
  v133 = v8;
  v136 = objc_msgSend((id)objc_opt_self(STCoreUser), "fetchRequest");
  sub_1000189D0(0, &qword_10005A0B8, NSPredicate_ptr);
  v11 = sub_100003C84(&qword_10005A0B0);
  v12 = swift_allocObject(v11, 232, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000485C0;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v13 = sub_100016338();
  *(_QWORD *)(v12 + 32) = 0xD000000000000018;
  *(_QWORD *)(v12 + 40) = 0x800000010004A290;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v13;
  *(_QWORD *)(v12 + 64) = v13;
  *(_QWORD *)(v12 + 72) = 0xD000000000000010;
  *(_QWORD *)(v12 + 80) = 0x800000010004A2B0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(STFamilyMemberTypeChild);
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v17 = sub_1000189D0(0, &qword_10005B150, NSString_ptr);
  *(_QWORD *)(v12 + 136) = v17;
  v18 = sub_10003C874(&qword_10005B158, &qword_10005B150, NSString_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v12 + 112) = v16;
  *(_QWORD *)(v12 + 176) = &type metadata for String;
  *(_QWORD *)(v12 + 184) = v13;
  *(_QWORD *)(v12 + 144) = v18;
  *(_QWORD *)(v12 + 152) = 0xD000000000000010;
  *(_QWORD *)(v12 + 160) = 0x800000010004A2B0;
  static String._unconditionallyBridgeFromObjectiveC(_:)(STFamilyMemberTypeTeen);
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(v12 + 216) = v17;
  *(_QWORD *)(v12 + 224) = v18;
  *(_QWORD *)(v12 + 192) = v21;
  v22 = (void *)NSPredicate.init(format:_:)(0xD000000000000027, 0x800000010004A260, v12);
  v23 = v136;
  objc_msgSend(v136, "setPredicate:", v22);

  v158[0] = 0;
  v24 = objc_msgSend(v23, "execute:", v158);
  v25 = v158[0];
  if (!v24)
  {
    v97 = v158[0];
    v98 = (void *)_convertNSErrorToError(_:)(v25);

    swift_willThrow();
    v158[0] = v98;
    v99 = sub_100003C84(&qword_10005A088);
    v100 = sub_1000189D0(0, &qword_10005A090, NSError_ptr);
    swift_dynamicCast(v157, v158, v99, v100, 0);
    v101 = (void *)v157[0];
    if (qword_100059950 != -1)
      swift_once(&qword_100059950, sub_10003B20C);
    v102 = type metadata accessor for Logger(0);
    sub_100006BC8(v102, (uint64_t)qword_10005B138);
    v103 = v101;
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v106 = 138412290;
      v155 = (uint64_t)v103;
      v108 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      *v107 = v103;

      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Failed to fetch managed users: %@", v106, 0xCu);
      v109 = sub_100003C84(&qword_10005A098);
      swift_arrayDestroy(v107, 1, v109);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);
      swift_bridgeObjectRelease(v147);

    }
    else
    {

      swift_bridgeObjectRelease(v147);
      v104 = v139;
    }

    swift_errorRelease(v158[0]);
    return;
  }
  v26 = v24;
  v27 = sub_1000189D0(0, &qword_10005A0A0, STCoreUser_ptr);
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);
  v29 = v25;

  if (qword_100059950 != -1)
    swift_once(&qword_100059950, sub_10003B20C);
  v30 = type metadata accessor for Logger(0);
  v132 = sub_100006BC8(v30, (uint64_t)qword_10005B138);
  v31 = Logger.logObject.getter(v132);
  v32 = static os_log_type_t.default.getter();
  v33 = os_log_type_enabled(v31, v32);
  v34 = v144;
  v35 = v143;
  v36 = v142;
  if (v33)
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully fetched managed users.", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v120 = v28;
    else
      v120 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v38 = _CocoaArrayWrapper.endIndex.getter(v120);
    swift_bridgeObjectRelease(v28);
    if (v38)
      goto LABEL_10;
    goto LABEL_85;
  }
  v38 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v38)
  {
LABEL_85:

    swift_bridgeObjectRelease(v28);
    LOWORD(v8) = v133;
    v10 = v138;
LABEL_86:
    v121 = BYTE1(v8);
    v122 = v8 & 1;
    swift_beginAccess(v10, v157, 33, 0);
    v123 = *v10;
    v124 = v139;
    swift_bridgeObjectRetain(v147);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v123);
    *v10 = v123;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v123 = sub_100021574(0, *((_QWORD *)v123 + 2) + 1, 1, v123);
      *v138 = v123;
    }
    v127 = *((_QWORD *)v123 + 2);
    v126 = *((_QWORD *)v123 + 3);
    if (v127 >= v126 >> 1)
    {
      v123 = sub_100021574((char *)(v126 > 1), v127 + 1, 1, v123);
      *v138 = v123;
    }
    *((_QWORD *)v123 + 2) = v127 + 1;
    v128 = &v123[32 * v127];
    v129 = v137;
    *((_QWORD *)v128 + 4) = v124;
    *((_QWORD *)v128 + 5) = v129;
    v130 = v147;
    *((_QWORD *)v128 + 6) = v147;
    v128[56] = v122;
    v128[57] = v121 & 1;
    swift_endAccess(v157);
    swift_bridgeObjectRelease(v130);

    return;
  }
LABEL_10:
  v39 = 0;
  v146 = v28 & 0xC000000000000001;
  v135 = v28 & 0xFFFFFFFFFFFFFF8;
  v134 = v28 + 32;
  v152 = (char *)&type metadata for Swift.AnyObject + 8;
  v140 = v28;
  v145 = v38;
  while (1)
  {
    if (v146)
    {
      v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v28);
    }
    else
    {
      if (v39 >= *(_QWORD *)(v135 + 16))
        goto LABEL_79;
      v41 = *(id *)(v134 + 8 * v39);
    }
    v42 = v41;
    v43 = __OFADD__(v39, 1);
    v44 = v39 + 1;
    if (v43)
      goto LABEL_78;
    v151 = v44;
    v45 = objc_msgSend(v41, "givenName");
    if (!v45)
    {
      swift_bridgeObjectRelease(v28);
      v110 = objc_msgSend(v42, "dsid");
      v111 = objc_msgSend(v110, "stringValue");

      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
      v114 = v113;

      v115 = swift_bridgeObjectRetain(v114);
      v116 = Logger.logObject.getter(v115);
      v117 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v116, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = swift_slowAlloc(32, -1);
        v157[0] = v119;
        *(_DWORD *)v118 = 136380675;
        swift_bridgeObjectRetain(v114);
        v155 = sub_100015BD0(v112, v114, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
        swift_bridgeObjectRelease_n(v114, 3);
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "Failed to fetch given name for remote user with dsid: %{private}s", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);
        swift_bridgeObjectRelease(v147);

      }
      else
      {

        swift_bridgeObjectRelease(v147);
        swift_bridgeObjectRelease_n(v114, 2);
      }

      return;
    }
    v46 = v45;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v49 = v48;

    PersonNameComponents.init()();
    PersonNameComponents.givenName.setter(v47, v49);
    v50 = objc_msgSend(v42, "familyName");
    if (v50)
    {
      v51 = v50;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

      PersonNameComponents.familyName.setter(v52, v54);
    }
    v55 = PersonNameComponents.formatted()();
    v56 = objc_msgSend(v42, "userDeviceStates");
    if (v56)
      break;
    swift_bridgeObjectRelease(v55._object);

LABEL_12:
    v40 = v145;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    v39 = v151;
    if (v151 == v40)
      goto LABEL_85;
  }
  v57 = v56;
  countAndFlagsBits = v55._countAndFlagsBits;
  object = v55._object;
  v150 = v42;
  v58 = sub_1000189D0(0, (unint64_t *)&qword_10005A560, STUserDeviceState_ptr);
  v59 = sub_10003C874(&qword_10005A568, (unint64_t *)&qword_10005A560, STUserDeviceState_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v60 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v57, v58, v59);

  v153 = v58;
  if ((v60 & 0xC000000000000001) != 0)
  {
    if (v60 < 0)
      v62 = v60;
    else
      v62 = v60 & 0xFFFFFFFFFFFFFF8;
    v63 = __CocoaSet.makeIterator()(v62);
    v61 = Set.Iterator.init(_cocoa:)(v158, v63, v58, v59);
    v60 = (uint64_t)v158[0];
    v154 = (os_log_t)v158[1];
    v64 = (uint64_t)v158[2];
    v65 = v158[3];
    v66 = (unint64_t)v158[4];
  }
  else
  {
    v65 = 0;
    v67 = -1 << *(_BYTE *)(v60 + 32);
    v68 = *(_QWORD *)(v60 + 56);
    v154 = (os_log_t)(v60 + 56);
    v64 = ~v67;
    v69 = -v67;
    if (v69 < 64)
      v70 = ~(-1 << v69);
    else
      v70 = -1;
    v66 = v70 & v68;
  }
  v148 = v64;
  v71 = (unint64_t)(v64 + 64) >> 6;
  if (v60 < 0)
    goto LABEL_34;
LABEL_32:
  if (v66)
  {
    v72 = (v66 - 1) & v66;
    v73 = __clz(__rbit64(v66)) | ((_QWORD)v65 << 6);
    v74 = (char *)v65;
    goto LABEL_51;
  }
  v79 = (int64_t)v65 + 1;
  if (!__OFADD__(v65, 1))
  {
    if (v79 >= v71)
      goto LABEL_61;
    isa = (unint64_t)v154[v79].isa;
    v74 = (char *)v65 + 1;
    if (!isa)
    {
      v74 = (char *)v65 + 2;
      if ((uint64_t)v65 + 2 >= v71)
        goto LABEL_61;
      isa = (unint64_t)v154[(_QWORD)v74].isa;
      if (!isa)
      {
        v74 = (char *)v65 + 3;
        if ((uint64_t)v65 + 3 >= v71)
          goto LABEL_61;
        isa = (unint64_t)v154[(_QWORD)v74].isa;
        if (!isa)
        {
          v74 = (char *)v65 + 4;
          if ((uint64_t)v65 + 4 >= v71)
            goto LABEL_61;
          isa = (unint64_t)v154[(_QWORD)v74].isa;
          if (!isa)
          {
            v81 = (char *)v65 + 5;
            while ((char *)v71 != v81)
            {
              isa = (unint64_t)v154[(_QWORD)v81++].isa;
              if (isa)
              {
                v74 = v81 - 1;
                goto LABEL_50;
              }
            }
            goto LABEL_61;
          }
        }
      }
    }
LABEL_50:
    v72 = (isa - 1) & isa;
    v73 = __clz(__rbit64(isa)) + ((_QWORD)v74 << 6);
LABEL_51:
    v78 = *(id *)(*(_QWORD *)(v60 + 48) + 8 * v73);
    if (v78)
    {
      while (1)
      {
        v82 = objc_msgSend(v78, "device");
        if (!v82)
          __break(1u);
        v83 = v82;
        v84 = objc_msgSend(v82, "platform");

        if (v84 != 4)
          break;

        v65 = v74;
        v66 = v72;
        if ((v60 & 0x8000000000000000) == 0)
          goto LABEL_32;
LABEL_34:
        v75 = __CocoaSet.Iterator.next()(v61);
        if (v75)
        {
          v77 = v75;
          v155 = v75;
          swift_unknownObjectRetain(v75, v76);
          swift_dynamicCast(v157, &v155, v152, v153, 7);
          v78 = (id)v157[0];
          swift_unknownObjectRelease(v77);
          v74 = (char *)v65;
          v72 = v66;
          if (v78)
            continue;
        }
        goto LABEL_61;
      }
      v85 = objc_msgSend(v150, "dsid");
      v86 = v138;
      swift_beginAccess(v138, v157, 33, 0);
      v87 = *v86;
      v88 = swift_isUniquelyReferenced_nonNull_native(*v86);
      *v86 = v87;
      if ((v88 & 1) == 0)
      {
        v87 = sub_100021574(0, *((_QWORD *)v87 + 2) + 1, 1, v87);
        *v86 = v87;
      }
      v90 = *((_QWORD *)v87 + 2);
      v89 = *((_QWORD *)v87 + 3);
      if (v90 >= v89 >> 1)
      {
        v87 = sub_100021574((char *)(v89 > 1), v90 + 1, 1, v87);
        *v138 = v87;
      }
      *((_QWORD *)v87 + 2) = v90 + 1;
      v91 = &v87[32 * v90];
      v92 = countAndFlagsBits;
      *((_QWORD *)v91 + 4) = v85;
      *((_QWORD *)v91 + 5) = v92;
      *((_QWORD *)v91 + 6) = object;
      *((_WORD *)v91 + 28) = 256;
      swift_endAccess(v157);

LABEL_62:
      sub_10003C8B4(v60);
      v34 = v144;
      v35 = v143;
      v36 = v142;
      v28 = v140;
      goto LABEL_12;
    }
LABEL_61:
    swift_bridgeObjectRelease(object);
    goto LABEL_62;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  swift_once(&qword_100059950, sub_10003B20C);
LABEL_64:
  v93 = type metadata accessor for Logger(0);
  v94 = sub_100006BC8(v93, (uint64_t)qword_10005B138);
  v154 = (os_log_t)Logger.logObject.getter(v94);
  v95 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v154, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v96 = 0;
    _os_log_impl((void *)&_mh_execute_header, v154, v95, "couldn't fetch local user", v96, 2u);
    swift_slowDealloc(v96, -1, -1);
  }

}

uint64_t sub_10003C874(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000189D0(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003C8B4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for UserDetail(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for UserDetail(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = v3;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for UserDetail(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for UserDetail(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UserDetail(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDetail(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDetail(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDetail()
{
  return &type metadata for UserDetail;
}

_QWORD *sub_10003CA9C(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v41 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v41);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = (int *)type metadata accessor for UsageTimelineEntry(0);
    v8 = v7[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = v7[6];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *(_OWORD *)((char *)v4 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
    v16 = v7[8];
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v7[9];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for DateInterval(0);
    v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain(v15);
    v25 = swift_bridgeObjectRetain(v19);
    v24(v21, v22, v23, v25);
    ((void (*)(char *, char *, uint64_t))v24)((char *)v4 + v7[10], (char *)a2 + v7[10], v23);
    v26 = v7[11];
    v27 = *(_QWORD *)((char *)a2 + v26);
    *(_QWORD *)((char *)v4 + v26) = v27;
    *((_BYTE *)v4 + v7[12]) = *((_BYTE *)a2 + v7[12]);
    v28 = v7[13];
    v29 = *(_QWORD *)((char *)a2 + v28);
    *(_QWORD *)((char *)v4 + v28) = v29;
    *((_BYTE *)v4 + v7[14]) = *((_BYTE *)a2 + v7[14]);
    *((_BYTE *)v4 + v7[15]) = *((_BYTE *)a2 + v7[15]);
    v30 = v7[16];
    v31 = *(_QWORD *)((char *)a2 + v30);
    *(_QWORD *)((char *)v4 + v30) = v31;
    *(_QWORD *)((char *)v4 + v7[17]) = *(_QWORD *)((char *)a2 + v7[17]);
    v32 = v7[18];
    v33 = *(void **)((char *)a2 + v32);
    *(_QWORD *)((char *)v4 + v32) = v33;
    v34 = a3[5];
    v35 = (_QWORD *)((char *)v4 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v31);
    v37 = v33;
    v38 = sub_100003C84(&qword_10005AA08);
    if (swift_getEnumCaseMultiPayload(v36, v38) == 1)
    {
      v39 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v35, v36, v39);
      v40 = 1;
    }
    else
    {
      v42 = *v36;
      *v35 = *v36;
      swift_retain(v42);
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v38, v40);
    v43 = a3[6];
    v44 = (_QWORD *)((char *)v4 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = sub_100003C84(&qword_10005A758);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = 1;
    }
    else
    {
      v49 = *v45;
      *v44 = *v45;
      swift_retain(v49);
      v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v46, v48);
    v50 = a3[7];
    v51 = (_QWORD *)((char *)v4 + v50);
    v52 = (_QWORD *)((char *)a2 + v50);
    v53 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      v54 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
      v55 = 1;
    }
    else
    {
      v56 = *v52;
      *v51 = *v52;
      swift_retain(v56);
      v55 = 0;
    }
    swift_storeEnumTagMultiPayload(v51, v53, v55);
    v57 = a3[8];
    v58 = (char *)v4 + v57;
    v59 = (char *)a2 + v57;
    v60 = *(_QWORD *)v59;
    v61 = v59[8];
    sub_10003CE50(*(_QWORD *)v59, v61);
    *(_QWORD *)v58 = v60;
    v58[8] = v61;
    v62 = a3[9];
    v63 = (_QWORD *)((char *)v4 + v62);
    v64 = (_QWORD *)((char *)a2 + v62);
    v65 = sub_100003C84(&qword_10005AEA0);
    if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
    {
      v66 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v63, v64, v66);
      v67 = v63;
      v68 = v65;
      v69 = 1;
    }
    else
    {
      v70 = *v64;
      *v63 = *v64;
      swift_retain(v70);
      v67 = v63;
      v68 = v65;
      v69 = 0;
    }
    swift_storeEnumTagMultiPayload(v67, v68, v69);
  }
  return v4;
}

uint64_t sub_10003CE50(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10003CE5C(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[8] + 8));
  v7 = a1 + v4[9];
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(a1 + v4[10], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[11]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[13]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[16]));

  v10 = (_QWORD *)(a1 + a2[5]);
  v11 = sub_100003C84(&qword_10005AA08);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(a1 + a2[6]);
  v14 = sub_100003C84(&qword_10005A758);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(a1 + a2[7]);
  v17 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  sub_10003D0A0(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  v19 = (_QWORD *)(a1 + a2[9]);
  v20 = sub_100003C84(&qword_10005AEA0);
  if (swift_getEnumCaseMultiPayload(v19, v20) != 1)
    return swift_release(*v19);
  v21 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
}

uint64_t sub_10003D0A0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

_BYTE *sub_10003D0AC(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = v6[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  v15 = v6[8];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v6[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for DateInterval(0);
  v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 16);
  swift_bridgeObjectRetain(v14);
  v24 = swift_bridgeObjectRetain(v18);
  v23(v20, v21, v22, v24);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v23)(&a1[v6[10]], &a2[v6[10]], v22);
  v25 = v6[11];
  v26 = *(_QWORD *)&a2[v25];
  *(_QWORD *)&a1[v25] = v26;
  a1[v6[12]] = a2[v6[12]];
  v27 = v6[13];
  v28 = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[v27] = v28;
  a1[v6[14]] = a2[v6[14]];
  a1[v6[15]] = a2[v6[15]];
  v29 = v6[16];
  v30 = *(_QWORD *)&a2[v29];
  *(_QWORD *)&a1[v29] = v30;
  *(_QWORD *)&a1[v6[17]] = *(_QWORD *)&a2[v6[17]];
  v31 = v6[18];
  v32 = *(void **)&a2[v31];
  *(_QWORD *)&a1[v31] = v32;
  v33 = a3[5];
  v34 = (uint64_t *)&a1[v33];
  v35 = (uint64_t *)&a2[v33];
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  v36 = v32;
  v37 = sub_100003C84(&qword_10005AA08);
  if (swift_getEnumCaseMultiPayload(v35, v37) == 1)
  {
    v38 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v34, v35, v38);
    v39 = 1;
  }
  else
  {
    v40 = *v35;
    *v34 = *v35;
    swift_retain(v40);
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v34, v37, v39);
  v41 = a3[6];
  v42 = (uint64_t *)&a1[v41];
  v43 = (uint64_t *)&a2[v41];
  v44 = sub_100003C84(&qword_10005A758);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v45 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
    v46 = 1;
  }
  else
  {
    v47 = *v43;
    *v42 = *v43;
    swift_retain(v47);
    v46 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v44, v46);
  v48 = a3[7];
  v49 = (uint64_t *)&a1[v48];
  v50 = (uint64_t *)&a2[v48];
  v51 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
  {
    v52 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v49, v50, v52);
    v53 = 1;
  }
  else
  {
    v54 = *v50;
    *v49 = *v50;
    swift_retain(v54);
    v53 = 0;
  }
  swift_storeEnumTagMultiPayload(v49, v51, v53);
  v55 = a3[8];
  v56 = &a1[v55];
  v57 = &a2[v55];
  v58 = *(_QWORD *)v57;
  v59 = v57[8];
  sub_10003CE50(*(_QWORD *)v57, v59);
  *(_QWORD *)v56 = v58;
  v56[8] = v59;
  v60 = a3[9];
  v61 = (uint64_t *)&a1[v60];
  v62 = (uint64_t *)&a2[v60];
  v63 = sub_100003C84(&qword_10005AEA0);
  if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
  {
    v64 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v61, v62, v64);
    v65 = 1;
  }
  else
  {
    v66 = *v62;
    *v61 = *v62;
    swift_retain(v66);
    v65 = 0;
  }
  swift_storeEnumTagMultiPayload(v61, v63, v65);
  return a1;
}

_BYTE *sub_10003D42C(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = v6[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = v6[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  v17[1] = v18[1];
  v19 = v6[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = v6[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for DateInterval(0);
  v28 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 24);
  v28(v25, v26, v27);
  v28(&a1[v6[10]], &a2[v6[10]], v27);
  v29 = v6[11];
  v30 = *(_QWORD *)&a2[v29];
  v31 = *(_QWORD *)&a1[v29];
  *(_QWORD *)&a1[v29] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  a1[v6[12]] = a2[v6[12]];
  v32 = v6[13];
  v33 = *(_QWORD *)&a2[v32];
  v34 = *(_QWORD *)&a1[v32];
  *(_QWORD *)&a1[v32] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  a1[v6[14]] = a2[v6[14]];
  a1[v6[15]] = a2[v6[15]];
  v35 = v6[16];
  v36 = *(_QWORD *)&a2[v35];
  v37 = *(_QWORD *)&a1[v35];
  *(_QWORD *)&a1[v35] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  *(_QWORD *)&a1[v6[17]] = *(_QWORD *)&a2[v6[17]];
  v38 = v6[18];
  v39 = *(void **)&a1[v38];
  v40 = *(void **)&a2[v38];
  *(_QWORD *)&a1[v38] = v40;
  v41 = v40;

  if (a1 != a2)
  {
    v42 = a3[5];
    v43 = (uint64_t *)&a1[v42];
    v44 = (uint64_t *)&a2[v42];
    sub_100003D44((uint64_t)&a1[v42], &qword_10005AA08);
    v45 = sub_100003C84(&qword_10005AA08);
    if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
    {
      v46 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v43, v44, v46);
      v47 = 1;
    }
    else
    {
      v48 = *v44;
      *v43 = *v44;
      swift_retain(v48);
      v47 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v45, v47);
    v49 = a3[6];
    v50 = (uint64_t *)&a1[v49];
    v51 = (uint64_t *)&a2[v49];
    sub_100003D44((uint64_t)&a1[v49], &qword_10005A758);
    v52 = sub_100003C84(&qword_10005A758);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v50, v51, v53);
      v54 = 1;
    }
    else
    {
      v55 = *v51;
      *v50 = *v51;
      swift_retain(v55);
      v54 = 0;
    }
    swift_storeEnumTagMultiPayload(v50, v52, v54);
    v56 = a3[7];
    v57 = (uint64_t *)&a1[v56];
    v58 = (uint64_t *)&a2[v56];
    sub_100003D44((uint64_t)&a1[v56], &qword_100059CA0);
    v59 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(v58, v59) == 1)
    {
      v60 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v57, v58, v60);
      v61 = 1;
    }
    else
    {
      v62 = *v58;
      *v57 = *v58;
      swift_retain(v62);
      v61 = 0;
    }
    swift_storeEnumTagMultiPayload(v57, v59, v61);
  }
  v63 = a3[8];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v66 = *(_QWORD *)v65;
  v67 = v65[8];
  sub_10003CE50(*(_QWORD *)v65, v67);
  v68 = *(_QWORD *)v64;
  v69 = v64[8];
  *(_QWORD *)v64 = v66;
  v64[8] = v67;
  sub_10003D0A0(v68, v69);
  if (a1 != a2)
  {
    v70 = a3[9];
    v71 = (uint64_t *)&a1[v70];
    v72 = (uint64_t *)&a2[v70];
    sub_100003D44((uint64_t)&a1[v70], &qword_10005AEA0);
    v73 = sub_100003C84(&qword_10005AEA0);
    if (swift_getEnumCaseMultiPayload(v72, v73) == 1)
    {
      v74 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v71, v72, v74);
      v75 = 1;
    }
    else
    {
      v76 = *v72;
      *v71 = *v72;
      swift_retain(v76);
      v75 = 0;
    }
    swift_storeEnumTagMultiPayload(v71, v73, v75);
  }
  return a1;
}

_BYTE *sub_10003D854(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
  v11 = v6[9];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for DateInterval(0);
  v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v15(&a1[v6[10]], &a2[v6[10]], v14);
  *(_QWORD *)&a1[v6[11]] = *(_QWORD *)&a2[v6[11]];
  a1[v6[12]] = a2[v6[12]];
  *(_QWORD *)&a1[v6[13]] = *(_QWORD *)&a2[v6[13]];
  a1[v6[14]] = a2[v6[14]];
  a1[v6[15]] = a2[v6[15]];
  *(_QWORD *)&a1[v6[16]] = *(_QWORD *)&a2[v6[16]];
  *(_QWORD *)&a1[v6[17]] = *(_QWORD *)&a2[v6[17]];
  *(_QWORD *)&a1[v6[18]] = *(_QWORD *)&a2[v6[18]];
  v16 = a3[5];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = sub_100003C84(&qword_10005AA08);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = sub_100003C84(&qword_10005A758);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = sub_100003C84(&qword_100059CA0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload(v27, v29, 1);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  v31 = a3[8];
  v32 = a3[9];
  v33 = &a1[v31];
  v34 = &a2[v31];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v34[8];
  v35 = &a1[v32];
  v36 = &a2[v32];
  v37 = sub_100003C84(&qword_10005AEA0);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
    swift_storeEnumTagMultiPayload(v35, v37, 1);
  }
  else
  {
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_10003DB94(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = v6[6];
  v12 = &a1[v11];
  v13 = (uint64_t *)&a2[v11];
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  v17 = v6[8];
  v18 = &a1[v17];
  v19 = (uint64_t *)&a2[v17];
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = v6[9];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for DateInterval(0);
  v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 40);
  v27(v24, v25, v26);
  v27(&a1[v6[10]], &a2[v6[10]], v26);
  v28 = v6[11];
  v29 = *(_QWORD *)&a1[v28];
  *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];
  swift_bridgeObjectRelease(v29);
  a1[v6[12]] = a2[v6[12]];
  v30 = v6[13];
  v31 = *(_QWORD *)&a1[v30];
  *(_QWORD *)&a1[v30] = *(_QWORD *)&a2[v30];
  swift_bridgeObjectRelease(v31);
  a1[v6[14]] = a2[v6[14]];
  a1[v6[15]] = a2[v6[15]];
  v32 = v6[16];
  v33 = *(_QWORD *)&a1[v32];
  *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)&a1[v6[17]] = *(_QWORD *)&a2[v6[17]];
  v34 = v6[18];
  v35 = *(void **)&a1[v34];
  *(_QWORD *)&a1[v34] = *(_QWORD *)&a2[v34];

  if (a1 != a2)
  {
    v36 = a3[5];
    v37 = &a1[v36];
    v38 = &a2[v36];
    sub_100003D44((uint64_t)&a1[v36], &qword_10005AA08);
    v39 = sub_100003C84(&qword_10005AA08);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v37, v38, v40);
      swift_storeEnumTagMultiPayload(v37, v39, 1);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    v41 = a3[6];
    v42 = &a1[v41];
    v43 = &a2[v41];
    sub_100003D44((uint64_t)&a1[v41], &qword_10005A758);
    v44 = sub_100003C84(&qword_10005A758);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v42, v43, v45);
      swift_storeEnumTagMultiPayload(v42, v44, 1);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    v46 = a3[7];
    v47 = &a1[v46];
    v48 = &a2[v46];
    sub_100003D44((uint64_t)&a1[v46], &qword_100059CA0);
    v49 = sub_100003C84(&qword_100059CA0);
    if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
    {
      v50 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v47, v48, v50);
      swift_storeEnumTagMultiPayload(v47, v49, 1);
    }
    else
    {
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
  }
  v51 = a3[8];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = *(_QWORD *)v53;
  LOBYTE(v53) = v53[8];
  v55 = *(_QWORD *)v52;
  v56 = v52[8];
  *(_QWORD *)v52 = v54;
  v52[8] = (_BYTE)v53;
  sub_10003D0A0(v55, v56);
  if (a1 != a2)
  {
    v57 = a3[9];
    v58 = &a1[v57];
    v59 = &a2[v57];
    sub_100003D44((uint64_t)&a1[v57], &qword_10005AEA0);
    v60 = sub_100003C84(&qword_10005AEA0);
    if (swift_getEnumCaseMultiPayload(v59, v60) == 1)
    {
      v61 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v58, v59, v61);
      swift_storeEnumTagMultiPayload(v58, v60, 1);
    }
    else
    {
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10003DF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003DF80);
}

uint64_t sub_10003DF80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v6 = type metadata accessor for UsageTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_100003C84(&qword_10005AAD8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = sub_100003C84(&qword_10005A748);
  v10 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v13;
    v12 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v14 = sub_100003C84(&qword_100059CA8);
  v10 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v14;
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = sub_100003C84(&qword_10005B160);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v15 = *(unsigned __int8 *)(a1 + a3[8] + 8);
  if (v15 > 1)
    return (v15 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10003E0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E0AC);
}

uint64_t sub_10003E0AC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = type metadata accessor for UsageTimelineEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_100003C84(&qword_10005AAD8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_100003C84(&qword_10005A748);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        result = sub_100003C84(&qword_100059CA8);
        v14 = *(_QWORD *)(result - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = result;
          v15 = a4[7];
        }
        else
        {
          if (a3 == 254)
          {
            *(_BYTE *)(a1 + a4[8] + 8) = -(char)a2;
            return result;
          }
          v10 = sub_100003C84(&qword_10005B160);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[9];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for WidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_10005B1C0;
  if (!qword_10005B1C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetView);
  return result;
}

void sub_10003E208(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[6];

  v2 = type metadata accessor for UsageTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100032F88(319, (unint64_t *)&unk_10005AB48, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100032F88(319, (unint64_t *)&unk_10005A938, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100032F88(319, (unint64_t *)&qword_100059D18, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          v12[4] = "\t";
          sub_100032F88(319, (unint64_t *)&unk_10005B1D0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
          if (v11 <= 0x3F)
          {
            v12[5] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 6, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_10003E328(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004F44C, 1);
}

double sub_10003E338@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10003E400(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_100059B78, (void (*)(uint64_t, uint64_t, uint64_t))sub_100003D00, &qword_100059B80).n128_u64[0];
  return result;
}

double sub_10003E39C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10003E400(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_10005A710, (void (*)(uint64_t, uint64_t, uint64_t))sub_100003D00, &qword_10005A7E0).n128_u64[0];
  return result;
}

__n128 sub_10003E400@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t), uint64_t *a18)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v34;
  double v35;
  double v36;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v19 = a9;
  v20 = a17;
  v21 = a18;
  v22 = a15;
  v23 = a14;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a5;
  if ((a6 & 1) != 0)
    v32 = v29;
  if (v27 > v29 || v29 > v32)
    goto LABEL_22;
  v34 = a7;
  if ((_DWORD)v31)
    v34 = -INFINITY;
  v35 = a10;
  if ((a11 & 1) != 0)
    v35 = v34;
  v36 = a12;
  if ((a13 & 1) != 0)
    v36 = v35;
  if (v34 > v35 || v35 > v36)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v47 = v28;
    v48 = v26;
    v46 = v31;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v31 = v46;
    v28 = v47;
    v26 = v48;
    v23 = a14;
    v22 = a15;
    v24 = a12;
    v25 = a10;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
    v21 = a18;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, a11 & 1, *(_QWORD *)&v24, a13 & 1, v23, v22);
  v20(v18, v19, a16);
  v42 = v19 + *(int *)(sub_100003C84(v21) + 36);
  v43 = v53[5];
  *(_OWORD *)(v42 + 64) = v53[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v53[6];
  v44 = v53[1];
  *(_OWORD *)v42 = v53[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v53[3];
  *(_OWORD *)(v42 + 32) = v53[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

__n128 sub_10003E5DC@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 result;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a14;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v41 = a5;
    v39 = a1;
    v40 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a14;
    v20 = v38;
    v19 = a10;
    a1 = v39;
    a3 = v40;
    v18 = a12;
    a5 = v41;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, v17, a15);
  v34 = v15[1];
  *(_OWORD *)a9 = *v15;
  *(_OWORD *)(a9 + 16) = v34;
  *(_OWORD *)(a9 + 25) = *(_OWORD *)((char *)v15 + 25);
  v35 = v43[5];
  *(_OWORD *)(a9 + 112) = v43[4];
  *(_OWORD *)(a9 + 128) = v35;
  *(_OWORD *)(a9 + 144) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 48) = v43[0];
  *(_OWORD *)(a9 + 64) = v36;
  result = (__n128)v43[3];
  *(_OWORD *)(a9 + 80) = v43[2];
  *(__n128 *)(a9 + 96) = result;
  return result;
}

uint64_t sub_10003E784@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_bridgeObjectRetain(a16);
}

uint64_t sub_10003E92C@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  void *v26;
  char **v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v31 = sub_100003C84(&qword_10005B210);
  __chkstk_darwin(v31);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003C84(&qword_10005B218);
  v32 = *(_QWORD *)(v14 - 8);
  v33 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v20 + 104))(v19, enum case for Color.RGBColorSpace.sRGB(_:));
  v21 = Color.init(_:red:green:blue:opacity:)(v19, 0.17254902, 0.17254902, 0.180392157, 1.0);
  v22 = *(_QWORD *)&v1[*(int *)(type metadata accessor for UsageTimelineEntry(0) + 52)];
  *(_QWORD *)v13 = static VerticalAlignment.top.getter();
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v23 = sub_100003C84(&qword_10005B220);
  sub_10003EC84(v1, v21, v22, (uint64_t)&v13[*(int *)(v23 + 44)]);
  type metadata accessor for WidgetView(0);
  sub_100043124(&qword_10005AA08, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for ColorScheme.light(_:), v5);
  v24 = static ColorScheme.== infix(_:_:)(v11, v9);
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v9, v5);
  v25(v11, v5);
  v26 = (void *)objc_opt_self(UIColor);
  v27 = &selRef_systemBackgroundColor;
  if ((v24 & 1) == 0)
    v27 = &selRef_systemGray6Color;
  v37 = Color.init(_:)(objc_msgSend(v26, *v27));
  static ContainerBackgroundPlacement.widget.getter();
  v28 = sub_100009F64(&qword_10005B228, &qword_10005B210, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.containerBackground<A>(_:for:)(&v37, v4, v31, &type metadata for Color, v28, &protocol witness table for Color);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v35);
  swift_release(v37);
  sub_100003D44((uint64_t)v13, &qword_10005B210);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v36, v16, v33);
}

uint64_t sub_10003EC84@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  _BYTE *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v120 = a4;
  v7 = sub_100003C84(&qword_10005B230);
  __chkstk_darwin(v7);
  v106 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100003C84(&qword_10005B238);
  v9 = __chkstk_darwin(v113);
  v105 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v107 = (char *)&v100 - v11;
  v108 = sub_100003C84(&qword_10005B240);
  __chkstk_darwin(v108);
  v112 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003C84(&qword_10005B248);
  __chkstk_darwin(v13);
  v104 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003C84(&qword_10005B250);
  v15 = __chkstk_darwin(v109);
  v103 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v102 = (uint64_t)&v100 - v17;
  v119 = sub_100003C84(&qword_10005B258);
  v117 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v110 = (uint64_t *)((char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for WidgetFamily(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v100 - v24;
  v26 = sub_100003C84(&qword_10005B260);
  v27 = __chkstk_darwin(v26);
  v118 = (char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v114 = (uint64_t)&v100 - v29;
  v30 = sub_100003C84(&qword_10005B268);
  v31 = __chkstk_darwin(v30);
  v116 = (char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v100 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v100 - v37;
  *(_QWORD *)v35 = static HorizontalAlignment.center.getter(v36);
  *((_QWORD *)v35 + 1) = 0;
  v35[16] = 0;
  v39 = (uint64_t)&v35[*(int *)(sub_100003C84(&qword_10005B270) + 44)];
  v111 = a2;
  sub_10003F4D4(a1, a2, a3, v39);
  v115 = v38;
  sub_100009EF4((uint64_t)v35, (uint64_t)v38, &qword_10005B268);
  type metadata accessor for WidgetView(0);
  sub_100043124(&qword_10005A758, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for WidgetFamily.systemMedium(_:), v19);
  v40 = sub_100043544();
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v19, v40);
  dispatch thunk of RawRepresentable.rawValue.getter(&v121, v19, v40);
  v42 = v121;
  v41 = v122;
  v43 = *(void (**)(char *, uint64_t))(v20 + 8);
  v43(v23, v19);
  v43(v25, v19);
  if (v41 == v42)
  {
    v101 = a3;
    v45 = v112;
    v44 = v113;
    v46 = *(_QWORD *)(*(_QWORD *)&a1[*(int *)(type metadata accessor for UsageTimelineEntry(0) + 52)] + 16);
    v47 = static Axis.Set.horizontal.getter();
    v48 = static Axis.Set.vertical.getter();
    v49 = Axis.Set.init(rawValue:)(0);
    v50 = Axis.Set.init(rawValue:)(v49);
    v51 = (uint64_t)a1;
    v52 = Axis.Set.init(rawValue:)(v50 & v47);
    if (v46)
    {
      if (v52 != v47)
        v49 = Axis.Set.init(rawValue:)(v49 | v47);
      v53 = Axis.Set.init(rawValue:)(v49);
      v54 = v44;
      if (Axis.Set.init(rawValue:)(v53 & v48) != v48)
        LOBYTE(v49) = Axis.Set.init(rawValue:)(v49 | v48);
      v55 = (uint64_t)v45;
      v56 = v111;
      v57 = (uint64_t)v106;
      v58 = (uint64_t)v107;
      v59 = (uint64_t)v105;
      v60 = v101;
      *v106 = v49;
      v61 = sub_100003C84(&qword_10005B280);
      v62 = sub_1000424A8(v60, v51, v56, v57 + *(int *)(v61 + 44));
      v63 = static Alignment.center.getter(v62);
      v65 = v64;
      v66 = (_QWORD *)(v59 + *(int *)(v54 + 36));
      sub_100042C70(v56, v66);
      v67 = (_QWORD *)((char *)v66 + *(int *)(sub_100003C84(&qword_10005B288) + 36));
      *v67 = v63;
      v67[1] = v65;
      sub_100009EF4(v57, v59, &qword_10005B230);
      v68 = &qword_10005B238;
      sub_100009EF4(v59, v58, &qword_10005B238);
      sub_100003D00(v58, v55, &qword_10005B238);
      swift_storeEnumTagMultiPayload(v55, v108, 1);
      v69 = sub_10004358C(&qword_10005B290, &qword_10005B250, &qword_10005B298, &qword_10005B248);
      v70 = sub_10004358C(&qword_10005B2A8, &qword_10005B238, &qword_10005B2B0, &qword_10005B230);
      v71 = v110;
      _ConditionalContent<>.init(storage:)(v110, v55, v109, v54, v69, v70);
      v72 = v58;
    }
    else
    {
      if (v52 != v47)
        v49 = Axis.Set.init(rawValue:)(v49 | v47);
      v81 = Axis.Set.init(rawValue:)(v49);
      v82 = Axis.Set.init(rawValue:)(v81 & v48);
      v83 = (uint64_t)v45;
      v84 = v109;
      v71 = v110;
      v85 = v111;
      v87 = (uint64_t)v103;
      v86 = v104;
      if (v82 != v48)
        LOBYTE(v49) = Axis.Set.init(rawValue:)(v49 | v48);
      *v86 = v49;
      v88 = sub_100003C84(&qword_10005B2B8);
      v89 = sub_100041EA0(v51, v85, (uint64_t)&v86[*(int *)(v88 + 44)]);
      v90 = static Alignment.center.getter(v89);
      v92 = v91;
      v93 = (_QWORD *)(v87 + *(int *)(v84 + 36));
      sub_100042C70(v85, v93);
      v94 = (_QWORD *)((char *)v93 + *(int *)(sub_100003C84(&qword_10005B288) + 36));
      *v94 = v90;
      v94[1] = v92;
      sub_100009EF4((uint64_t)v86, v87, &qword_10005B248);
      v68 = &qword_10005B250;
      v95 = v102;
      sub_100009EF4(v87, v102, &qword_10005B250);
      sub_100003D00(v95, v83, &qword_10005B250);
      swift_storeEnumTagMultiPayload(v83, v108, 0);
      v96 = sub_10004358C(&qword_10005B290, &qword_10005B250, &qword_10005B298, &qword_10005B248);
      v97 = sub_10004358C(&qword_10005B2A8, &qword_10005B238, &qword_10005B2B0, &qword_10005B230);
      _ConditionalContent<>.init(storage:)(v71, v83, v84, v113, v96, v97);
      v72 = v95;
    }
    sub_100003D44(v72, v68);
    v74 = v119;
    v75 = v120;
    v76 = v117;
    v77 = (uint64_t)v118;
    v78 = (uint64_t)v115;
    v79 = (uint64_t)v116;
    v80 = v114;
    sub_100009EF4((uint64_t)v71, v114, &qword_10005B258);
    v73 = 0;
  }
  else
  {
    v73 = 1;
    v74 = v119;
    v75 = v120;
    v76 = v117;
    v77 = (uint64_t)v118;
    v78 = (uint64_t)v115;
    v79 = (uint64_t)v116;
    v80 = v114;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v80, v73, 1, v74);
  sub_100003D00(v78, v79, &qword_10005B268);
  sub_100003D00(v80, v77, &qword_10005B260);
  sub_100003D00(v79, v75, &qword_10005B268);
  v98 = sub_100003C84(&qword_10005B278);
  sub_100003D00(v77, v75 + *(int *)(v98 + 48), &qword_10005B260);
  sub_100003D44(v80, &qword_10005B260);
  sub_100003D44(v78, &qword_10005B268);
  sub_100003D44(v77, &qword_10005B260);
  return sub_100003D44(v79, &qword_10005B268);
}

uint64_t sub_10003F4D4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  char v42;
  char v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  char v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  double v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  unsigned __int8 v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned __int8 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  _QWORD v181[2];

  v155 = a3;
  v157 = a2;
  v168 = a4;
  v162 = sub_100003C84(&qword_10005B2F0);
  v5 = __chkstk_darwin(v162);
  v154 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v156 = (uint64_t)&v151 - v7;
  v158 = sub_100003C84(&qword_10005B2F8);
  __chkstk_darwin(v158);
  v161 = (uint64_t)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100003C84(&qword_10005B300);
  v9 = __chkstk_darwin(v160);
  v152 = (char *)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v153 = (uint64_t)&v151 - v11;
  v165 = sub_100003C84(&qword_10005B308);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v159 = (char *)&v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003C84(&qword_10005B310);
  v14 = __chkstk_darwin(v13);
  v167 = (char *)&v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v166 = (char *)&v151 - v16;
  v17 = type metadata accessor for WidgetFamily(0);
  v173 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v175 = (char *)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v177 = (uint64_t)&v151 - v20;
  v21 = sub_100003C84(&qword_10005B318);
  __chkstk_darwin(v21);
  v23 = (char *)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003C84(&qword_10005B320);
  __chkstk_darwin(v24);
  v26 = (char *)&v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100003C84(&qword_10005B328);
  __chkstk_darwin(v171);
  v28 = (char *)&v151 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100003C84(&qword_10005B330);
  __chkstk_darwin(v169);
  v174 = (uint64_t)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100003C84(&qword_10005B338);
  v30 = __chkstk_darwin(v170);
  v163 = (char *)&v151 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v172 = (uint64_t)&v151 - v33;
  v34 = __chkstk_darwin(v32);
  v178 = (uint64_t)&v151 - v35;
  *(_QWORD *)v23 = static HorizontalAlignment.leading.getter(v34);
  *((_QWORD *)v23 + 1) = 0x4020000000000000;
  v23[16] = 0;
  v36 = sub_100003C84(&qword_10005B340);
  v37 = sub_1000401E4(a1, (uint64_t)&v23[*(int *)(v36 + 44)]);
  v38 = static Edge.Set.top.getter(v37);
  v176 = type metadata accessor for WidgetView(0);
  v39 = *(int *)(v176 + 32);
  v179 = a1;
  v40 = &a1[v39];
  v41 = *(_QWORD *)&a1[v39];
  v42 = v40[8];
  sub_10003CE50(v41, v42);
  v43 = sub_10004338C(v41, v42);
  sub_10003D0A0(v41, v42);
  v44 = 0.0;
  v45 = 0.0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if ((v43 & 1) == 0)
  {
    v45 = EdgeInsets.init(_all:)(0.0);
    v46 = v49;
    v47 = v50;
    v48 = v51;
  }
  sub_100003D00((uint64_t)v23, (uint64_t)v26, &qword_10005B318);
  v52 = &v26[*(int *)(v24 + 36)];
  *v52 = v38;
  *((double *)v52 + 1) = v45;
  *((_QWORD *)v52 + 2) = v46;
  *((_QWORD *)v52 + 3) = v47;
  *((_QWORD *)v52 + 4) = v48;
  v52[40] = v43 & 1;
  v53 = sub_100003D44((uint64_t)v23, &qword_10005B318);
  v54 = static Edge.Set.leading.getter(v53);
  v55 = *(_QWORD *)v40;
  v56 = v40[8];
  sub_10003CE50(*(_QWORD *)v40, v56);
  v57 = sub_10004338C(v55, v56);
  sub_10003D0A0(v55, v56);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if ((v57 & 1) == 0)
  {
    v44 = EdgeInsets.init(_all:)(0.0);
    v58 = v61;
    v59 = v62;
    v60 = v63;
  }
  sub_100003D00((uint64_t)v26, (uint64_t)v28, &qword_10005B320);
  v64 = &v28[*(int *)(v171 + 36)];
  *v64 = v54;
  *((double *)v64 + 1) = v44;
  *((_QWORD *)v64 + 2) = v58;
  *((_QWORD *)v64 + 3) = v59;
  *((_QWORD *)v64 + 4) = v60;
  v64[40] = v57 & 1;
  v65 = sub_100003D44((uint64_t)v26, &qword_10005B320);
  v66 = static Edge.Set.trailing.getter(v65);
  v67 = *(_QWORD *)v40;
  v68 = v40[8];
  sub_10003CE50(*(_QWORD *)v40, v68);
  v69 = sub_10004338C(v67, v68);
  sub_10003D0A0(v67, v68);
  v70 = 0.0;
  v71 = v173;
  if ((v69 & 1) == 0)
    goto LABEL_7;
  v72 = v177;
  sub_100043124(&qword_10005A758, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v177);
  v73 = v28;
  v74 = v66;
  v75 = v175;
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v175, enum case for WidgetFamily.systemMedium(_:), v17);
  v76 = sub_100043544();
  dispatch thunk of RawRepresentable.rawValue.getter(v181, v17, v76);
  dispatch thunk of RawRepresentable.rawValue.getter(&v180, v17, v76);
  v78 = v180;
  v77 = v181[0];
  v79 = *(void (**)(char *, uint64_t))(v71 + 8);
  v80 = v75;
  v66 = v74;
  v28 = v73;
  v79(v80, v17);
  v79((char *)v72, v17);
  v70 = 12.0;
  if (v77 != v78)
  {
    v88 = 1;
    v81 = 0.0;
    v83 = 0;
    v85 = 0;
    v87 = 0;
  }
  else
  {
LABEL_7:
    v81 = EdgeInsets.init(_all:)(v70);
    v83 = v82;
    v85 = v84;
    v87 = v86;
    v88 = 0;
  }
  v89 = v174;
  v90 = v169;
  sub_100003D00((uint64_t)v28, v174, &qword_10005B328);
  v91 = v89 + *(int *)(v90 + 36);
  *(_BYTE *)v91 = v66;
  *(double *)(v91 + 8) = v81;
  *(_QWORD *)(v91 + 16) = v83;
  *(_QWORD *)(v91 + 24) = v85;
  *(_QWORD *)(v91 + 32) = v87;
  *(_BYTE *)(v91 + 40) = v88;
  v92 = sub_100003D44((uint64_t)v28, &qword_10005B328);
  v93 = static Edge.Set.bottom.getter(v92);
  v94 = *(_QWORD *)v40;
  LOBYTE(v90) = v40[8];
  sub_10003CE50(*(_QWORD *)v40, v90);
  v95 = sub_10004338C(v94, v90);
  sub_10003D0A0(v94, v90);
  if ((v95 & 1) == 0)
  {
    v97 = enum case for WidgetFamily.systemLarge(_:);
    v103 = 0.0;
    v98 = v175;
    goto LABEL_13;
  }
  v96 = v177;
  sub_100043124(&qword_10005A758, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v177);
  v97 = enum case for WidgetFamily.systemLarge(_:);
  v98 = v175;
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v175, enum case for WidgetFamily.systemLarge(_:), v17);
  v99 = sub_100043544();
  dispatch thunk of RawRepresentable.rawValue.getter(v181, v17, v99);
  dispatch thunk of RawRepresentable.rawValue.getter(&v180, v17, v99);
  v101 = v180;
  v100 = v181[0];
  v102 = *(void (**)(char *, uint64_t))(v71 + 8);
  v102(v98, v17);
  v102((char *)v96, v17);
  v103 = 8.0;
  if (v100 == v101)
  {
    v89 = v174;
LABEL_13:
    v104 = v170;
    v105 = EdgeInsets.init(_all:)(v103);
    v107 = v106;
    v109 = v108;
    v111 = v110;
    v112 = 0;
    goto LABEL_15;
  }
  v112 = 1;
  v105 = 0.0;
  v107 = 0;
  v109 = 0;
  v111 = 0;
  v89 = v174;
  v104 = v170;
LABEL_15:
  v113 = v172;
  sub_100003D00(v89, v172, &qword_10005B330);
  v114 = v113 + *(int *)(v104 + 36);
  *(_BYTE *)v114 = v93;
  *(double *)(v114 + 8) = v105;
  *(_QWORD *)(v114 + 16) = v107;
  *(_QWORD *)(v114 + 24) = v109;
  *(_QWORD *)(v114 + 32) = v111;
  *(_BYTE *)(v114 + 40) = v112;
  sub_100003D44(v89, &qword_10005B330);
  sub_100009EF4(v113, v178, &qword_10005B338);
  v115 = v177;
  v116 = (uint64_t)v179;
  sub_100043124(&qword_10005A758, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v177);
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 104))(v98, v97, v17);
  v117 = sub_100043544();
  dispatch thunk of RawRepresentable.rawValue.getter(v181, v17, v117);
  dispatch thunk of RawRepresentable.rawValue.getter(&v180, v17, v117);
  v119 = v180;
  v118 = v181[0];
  v120 = *(void (**)(char *, uint64_t))(v71 + 8);
  v120(v98, v17);
  v120((char *)v115, v17);
  if (v118 == v119)
  {
    v121 = *(_QWORD *)(*(_QWORD *)(v116 + *(int *)(type metadata accessor for UsageTimelineEntry(0) + 52)) + 16);
    v122 = static Axis.Set.horizontal.getter();
    v123 = static Axis.Set.vertical.getter();
    v124 = Axis.Set.init(rawValue:)(0);
    v125 = Axis.Set.init(rawValue:)(v124);
    v126 = Axis.Set.init(rawValue:)(v125 & v122);
    if (v121)
    {
      if (v126 != v122)
        v124 = Axis.Set.init(rawValue:)(v124 | v122);
      v127 = Axis.Set.init(rawValue:)(v124);
      v128 = Axis.Set.init(rawValue:)(v127 & v123);
      v129 = (uint64_t)v167;
      v130 = (uint64_t)v166;
      v131 = v159;
      if (v128 != v123)
        LOBYTE(v124) = Axis.Set.init(rawValue:)(v124 | v123);
      v132 = (uint64_t)v154;
      *v154 = v124;
      v133 = sub_100003C84(&qword_10005B350);
      sub_1000418A8(v155, v116, v157, v132 + *(int *)(v133 + 44));
      v134 = &qword_10005B2F0;
      v135 = v156;
      sub_100009EF4(v132, v156, &qword_10005B2F0);
      v136 = v161;
      sub_100003D00(v135, v161, &qword_10005B2F0);
      swift_storeEnumTagMultiPayload(v136, v158, 1);
      v137 = sub_100009F64(&qword_10005B358, &qword_10005B300, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    }
    else
    {
      if (v126 != v122)
        v124 = Axis.Set.init(rawValue:)(v124 | v122);
      v143 = Axis.Set.init(rawValue:)(v124);
      v144 = Axis.Set.init(rawValue:)(v143 & v123);
      v129 = (uint64_t)v167;
      v130 = (uint64_t)v166;
      v131 = v159;
      if (v144 != v123)
        LOBYTE(v124) = Axis.Set.init(rawValue:)(v124 | v123);
      v145 = (uint64_t)v152;
      *v152 = v124;
      v146 = sub_100003C84(&qword_10005B368);
      sub_10004148C(v116, v157, v145 + *(int *)(v146 + 44));
      v134 = &qword_10005B300;
      v135 = v153;
      sub_100009EF4(v145, v153, &qword_10005B300);
      v136 = v161;
      sub_100003D00(v135, v161, &qword_10005B300);
      swift_storeEnumTagMultiPayload(v136, v158, 0);
      v137 = sub_100009F64(&qword_10005B358, &qword_10005B300, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    }
    v147 = sub_100009F64(&qword_10005B360, &qword_10005B2F0, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v131, v136, v160, v162, v137, v147);
    sub_100003D44(v135, v134);
    v139 = v168;
    v140 = v165;
    v141 = v164;
    v142 = (uint64_t)v163;
    sub_100009EF4((uint64_t)v131, v130, &qword_10005B308);
    v138 = 0;
  }
  else
  {
    v138 = 1;
    v129 = (uint64_t)v167;
    v139 = v168;
    v130 = (uint64_t)v166;
    v140 = v165;
    v141 = v164;
    v142 = (uint64_t)v163;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v130, v138, 1, v140);
  v148 = v178;
  sub_100003D00(v178, v142, &qword_10005B338);
  sub_100003D00(v130, v129, &qword_10005B310);
  sub_100003D00(v142, v139, &qword_10005B338);
  v149 = sub_100003C84(&qword_10005B348);
  sub_100003D00(v129, v139 + *(int *)(v149 + 48), &qword_10005B310);
  sub_100003D44(v130, &qword_10005B310);
  sub_100003D44(v148, &qword_10005B338);
  sub_100003D44(v129, &qword_10005B310);
  return sub_100003D44(v142, &qword_10005B338);
}

uint64_t sub_1000401E4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t *v96;
  unint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t KeyPath;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD v165[3];
  unsigned __int8 v166;

  v159 = a2;
  v3 = type metadata accessor for WidgetFamily(0);
  v155 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v154 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v153 = (uint64_t)&v140 - v6;
  v152 = type metadata accessor for DateInterval(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for ScreenTimeWidgetGraph(0);
  v8 = __chkstk_darwin(v149);
  v158 = (uint64_t)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v157 = (uint64_t *)((char *)&v140 - v10);
  v11 = sub_100003C84(&qword_10005B3A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for WidgetView(0);
  __chkstk_darwin(v148);
  v15 = (char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003C84(&qword_10005B3A8);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_100003C84(&qword_10005B3B0);
  __chkstk_darwin(v19);
  v21 = (char *)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003C84(&qword_10005B3B8);
  __chkstk_darwin(v22);
  v143 = (uint64_t *)((char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_100003C84(&qword_10005B3C0);
  v25 = __chkstk_darwin(v24);
  v156 = (uint64_t)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v160 = (uint64_t *)((char *)&v140 - v27);
  v28 = *a1 == 1;
  v147 = v18;
  v146 = v16;
  v145 = v22;
  v144 = v11;
  if (v28)
  {
    v29 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000021, 0x800000010004A350);
    v30 = Text.init(_:tableName:bundle:comment:)(v29);
    v32 = v31;
    v34 = v33;
    v36 = v35 & 1;
    v37 = static Font.caption.getter(v30);
    v142 = a1;
    v38 = v37;
    v39 = Text.font(_:)(v37, v30, v32, v36, v34);
    v141 = v3;
    v40 = v39;
    v42 = v41;
    v44 = v43;
    v140 = v19;
    v46 = v45;
    swift_release(v38);
    v47 = v44 & 1;
    sub_100007D1C(v30, v32, v36);
    swift_bridgeObjectRelease(v34);
    v48 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v49 = Color.init(_:)(v48);
    v50 = Text.foregroundColor(_:)(v49, v40, v42, v47, v46);
    v52 = v51;
    LOBYTE(v38) = v53;
    v55 = v54;
    swift_release(v49);
    LOBYTE(v49) = v38 & 1;
    v56 = v40;
    v3 = v141;
    sub_100007D1C(v56, v42, v47);
    swift_bridgeObjectRelease(v46);
    *(_QWORD *)v21 = v50;
    *((_QWORD *)v21 + 1) = v52;
    v21[16] = v38 & 1;
    *((_QWORD *)v21 + 3) = v55;
    swift_storeEnumTagMultiPayload(v21, v140, 0);
    sub_10000925C(v50, v52, v38 & 1);
    v57 = sub_100009F64(&qword_10005B3D0, &qword_10005B3A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    swift_bridgeObjectRetain(v55);
    v58 = v143;
    _ConditionalContent<>.init(storage:)(v143, v21, &type metadata for Text, v144, &protocol witness table for Text, v57);
    v59 = v147;
    sub_100003D00((uint64_t)v58, (uint64_t)v147, &qword_10005B3B8);
    swift_storeEnumTagMultiPayload(v59, v146, 0);
    v60 = sub_100043690();
    a1 = v142;
    _ConditionalContent<>.init(storage:)(v160, v59, v145, &type metadata for Text, v60, &protocol witness table for Text);
    sub_100003D44((uint64_t)v58, &qword_10005B3B8);
    sub_100007D1C(v50, v52, v49);
    swift_bridgeObjectRelease(v55);
    goto LABEL_9;
  }
  v61 = type metadata accessor for UsageTimelineEntry(0);
  v62 = a1[*(int *)(v61 + 60)];
  sub_10000DB08((uint64_t)a1, (uint64_t)v15, type metadata accessor for WidgetView);
  if (v62 == 1)
  {
    v63 = sub_100015A24((uint64_t)v15, type metadata accessor for WidgetView);
LABEL_7:
    *(_QWORD *)v13 = static VerticalAlignment.center.getter(v63);
    *((_QWORD *)v13 + 1) = 0;
    v13[16] = 1;
    v65 = sub_100003C84(&qword_10005B3F0);
    sub_100040E78((uint64_t)a1, (uint64_t)&v13[*(int *)(v65 + 44)]);
    sub_100003D00((uint64_t)v13, (uint64_t)v21, &qword_10005B3A0);
    swift_storeEnumTagMultiPayload(v21, v19, 1);
    v66 = sub_100009F64(&qword_10005B3D0, &qword_10005B3A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v67 = v143;
    _ConditionalContent<>.init(storage:)(v143, v21, &type metadata for Text, v144, &protocol witness table for Text, v66);
    v68 = v147;
    sub_100003D00((uint64_t)v67, (uint64_t)v147, &qword_10005B3B8);
    swift_storeEnumTagMultiPayload(v68, v146, 0);
    v69 = sub_100043690();
    _ConditionalContent<>.init(storage:)(v160, v68, v145, &type metadata for Text, v69, &protocol witness table for Text);
    sub_100003D44((uint64_t)v67, &qword_10005B3B8);
    sub_100003D44((uint64_t)v13, &qword_10005B3A0);
    goto LABEL_9;
  }
  v64 = v15[*(int *)(v61 + 56)];
  v63 = sub_100015A24((uint64_t)v15, type metadata accessor for WidgetView);
  if (v64 == 1)
    goto LABEL_7;
  v70 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000022, 0x800000010004A320);
  v71 = Text.init(_:tableName:bundle:comment:)(v70);
  v142 = a1;
  v73 = v72;
  v75 = v74;
  v77 = v76 & 1;
  v78 = v3;
  v79 = static Font.caption.getter(v71);
  v80 = Text.font(_:)(v79, v71, v73, v77, v75);
  v82 = v81;
  v84 = v83;
  v86 = v85;
  swift_release(v79);
  LOBYTE(v79) = v84 & 1;
  sub_100007D1C(v71, v73, v77);
  swift_bridgeObjectRelease(v75);
  v87 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v88 = Color.init(_:)(v87);
  v89 = Text.foregroundColor(_:)(v88, v80, v82, v84 & 1, v86);
  v91 = v90;
  LOBYTE(v77) = v92;
  v94 = v93;
  swift_release(v88);
  v95 = v79;
  v3 = v78;
  sub_100007D1C(v80, v82, v95);
  swift_bridgeObjectRelease(v86);
  v96 = v147;
  *v147 = v89;
  v96[1] = v91;
  a1 = v142;
  *((_BYTE *)v96 + 16) = v77 & 1;
  v96[3] = v94;
  swift_storeEnumTagMultiPayload(v96, v146, 1);
  v97 = sub_100043690();
  _ConditionalContent<>.init(storage:)(v160, v96, v145, &type metadata for Text, v97, &protocol witness table for Text);
LABEL_9:
  v98 = (int *)type metadata accessor for UsageTimelineEntry(0);
  v99 = *(_QWORD *)&a1[v98[11]];
  v100 = v151;
  v101 = v150;
  v102 = v152;
  (*(void (**)(char *, _BYTE *, uint64_t))(v151 + 16))(v150, &a1[v98[10]], v152);
  KeyPath = swift_getKeyPath(&unk_100048690);
  v104 = (uint64_t)v157;
  *v157 = KeyPath;
  v105 = sub_100003C84(&qword_100059CA0);
  swift_storeEnumTagMultiPayload(v104, v105, 0);
  v106 = v149;
  *(_QWORD *)(v104 + *(int *)(v149 + 20)) = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v104 + *(int *)(v106 + 24), v101, v102);
  swift_bridgeObjectRetain(v99);
  v107 = v153;
  sub_100043124(&qword_10005A758, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, v153);
  v109 = v154;
  v108 = v155;
  (*(void (**)(char *, _QWORD, uint64_t))(v155 + 104))(v154, enum case for WidgetFamily.systemLarge(_:), v3);
  v110 = sub_100043544();
  dispatch thunk of RawRepresentable.rawValue.getter(v165, v3, v110);
  dispatch thunk of RawRepresentable.rawValue.getter(&v161, v3, v110);
  v111 = v165[0];
  v112 = v161;
  v113 = *(void (**)(char *, uint64_t))(v108 + 8);
  v113(v109, v3);
  v113((char *)v107, v3);
  if (v111 == v112)
  {
    v114 = *(_QWORD *)&a1[v98[16]];
    v115 = *(_QWORD *)(v114 + 16);
    if (v115)
    {
      v116 = sub_100003C84(&qword_100059ED8);
      v117 = swift_allocObject(v116, 56, 7);
      *(_OWORD *)(v117 + 16) = xmmword_1000480D0;
      v118 = (void *)objc_opt_self(UIColor);
      v119 = objc_msgSend(v118, "systemBlueColor", swift_bridgeObjectRetain(v114).n128_f64[0]);
      *(_QWORD *)(v117 + 32) = Color.init(_:)(v119);
      *(_QWORD *)(v117 + 40) = Color.init(_:)(objc_msgSend(v118, "systemTealColor"));
      v120 = Color.init(_:)(objc_msgSend(v118, "systemOrangeColor"));
      *(_QWORD *)(v117 + 48) = v120;
      v165[0] = v117;
      specialized Array._endMutation()(v120);
      v161 = v114;
      v162 = v115;
      v163 = v165[0];
      v164 = 1;
    }
    else
    {
      v124 = a1[v98[14]];
      v125 = sub_100003C84(&qword_100059ED8);
      v126 = swift_allocObject(v125, 56, 7);
      *(_OWORD *)(v126 + 16) = xmmword_1000480D0;
      v127 = (void *)objc_opt_self(UIColor);
      *(_QWORD *)(v126 + 32) = Color.init(_:)(objc_msgSend(v127, "systemBlueColor"));
      *(_QWORD *)(v126 + 40) = Color.init(_:)(objc_msgSend(v127, "systemTealColor"));
      v128 = Color.init(_:)(objc_msgSend(v127, "systemOrangeColor"));
      *(_QWORD *)(v126 + 48) = v128;
      v165[0] = v126;
      specialized Array._endMutation()(v128);
      v161 = v124;
      v162 = 3;
      v163 = v165[0];
      v164 = 0;
    }
    v129 = sub_100043794();
    v130 = sub_1000437D8();
    _ConditionalContent<>.init(storage:)(v165, &v161, &type metadata for GraphLabelPlaceholderView, &type metadata for GraphLabelView, v129, v130);
    v121 = v165[1];
    v155 = v165[0];
    v122 = v165[2];
    v123 = v166;
  }
  else
  {
    v155 = 0;
    v121 = 0;
    v122 = 0;
    v123 = -1;
  }
  v131 = v160;
  v132 = v156;
  sub_100003D00((uint64_t)v160, v156, &qword_10005B3C0);
  v133 = v158;
  sub_10000DB08(v104, v158, type metadata accessor for ScreenTimeWidgetGraph);
  v134 = v104;
  v135 = v159;
  sub_100003D00(v132, v159, &qword_10005B3C0);
  v136 = sub_100003C84(&qword_10005B3D8);
  sub_10000DB08(v133, v135 + *(int *)(v136 + 48), type metadata accessor for ScreenTimeWidgetGraph);
  v137 = v135 + *(int *)(v136 + 64);
  v138 = v155;
  *(_QWORD *)v137 = v155;
  *(_QWORD *)(v137 + 8) = v121;
  *(_QWORD *)(v137 + 16) = v122;
  *(_BYTE *)(v137 + 24) = v123;
  sub_100043714(v138, v121, v122, v123);
  sub_100015A24(v134, type metadata accessor for ScreenTimeWidgetGraph);
  sub_100003D44((uint64_t)v131, &qword_10005B3C0);
  sub_100043754(v138, v121, v122, v123);
  sub_100015A24(v133, type metadata accessor for ScreenTimeWidgetGraph);
  return sub_100003D44(v132, &qword_10005B3C0);
}

uint64_t sub_100040E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[3];

  v87 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v81 = *(_QWORD *)(v3 - 8);
  v82 = v3;
  __chkstk_darwin(v3);
  v86 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100003C84(&qword_10005B3F8);
  v5 = __chkstk_darwin(v83);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v69 - v9;
  __chkstk_darwin(v8);
  v79 = (uint64_t)&v69 - v11;
  v12 = sub_100003C84(&qword_10005ABC0);
  __chkstk_darwin(v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Image.ResizingMode(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003C84(&qword_10005ABC8);
  v78 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v77 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003C84(&qword_10005ABD0);
  __chkstk_darwin(v76);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003C84(&qword_10005ABD8);
  v84 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003C84(&qword_10005B400);
  v25 = __chkstk_darwin(v24);
  v85 = (uint64_t)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v69 - v27;
  v80 = type metadata accessor for UsageTimelineEntry(0);
  v29 = *(void **)(a1 + *(int *)(v80 + 72));
  v30 = 1;
  if (v29)
  {
    v31 = Image.init(uiImage:)(v29);
    v71 = v17;
    v32 = v28;
    v33 = a1;
    v70 = v20;
    v72 = v23;
    v34 = v10;
    v35 = v31;
    v36 = v74;
    v37 = v16;
    v38 = v16;
    v39 = v75;
    (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v38, enum case for Image.ResizingMode.stretch(_:), v75);
    v40 = Image.resizable(capInsets:resizingMode:)(v37, v35, 0.0, 0.0, 0.0, 0.0);
    v73 = v21;
    v41 = v40;
    v42 = v35;
    v10 = v34;
    a1 = v33;
    v28 = v32;
    swift_release(v42);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v37, v39);
    static WidgetAccentedRenderingMode.fullColor.getter(v43);
    v44 = type metadata accessor for WidgetAccentedRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v14, 0, 1, v44);
    v45 = v77;
    Image.widgetAccentedRenderingMode(_:)(v14, v41);
    v46 = v41;
    v21 = v73;
    swift_release(v46);
    v47 = sub_100003D44((uint64_t)v14, &qword_10005ABC0);
    v48 = static Alignment.center.getter(v47);
    _FrameLayout.init(width:height:alignment:)(v92, 0x403D000000000000, 0, 0x403D000000000000, 0, v48, v49);
    v50 = v78;
    v51 = (uint64_t)v70;
    v52 = v71;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v70, v45, v71);
    v53 = (_OWORD *)(v51 + *(int *)(v76 + 36));
    v54 = v92[1];
    *v53 = v92[0];
    v53[1] = v54;
    v53[2] = v92[2];
    (*(void (**)(char *, uint64_t))(v50 + 8))(v45, v52);
    v55 = (uint64_t)v72;
    sub_100003D00(v51, (uint64_t)v72, &qword_10005ABD0);
    *(_BYTE *)(v55 + *(int *)(v21 + 36)) = 1;
    sub_100003D44(v51, &qword_10005ABD0);
    sub_100009EF4(v55, (uint64_t)v28, &qword_10005ABD8);
    v30 = 0;
  }
  v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v28, v30, 1, v21);
  v57 = *(_QWORD *)(a1 + *(int *)(v80 + 68));
  v58 = static Font.title.getter(v56);
  KeyPath = swift_getKeyPath(&unk_1000486C0);
  v88 = v57;
  v89 = 0;
  v90 = KeyPath;
  v91 = v58;
  v60 = (uint64_t)v28;
  v61 = v86;
  static AccessibilityTraits.isHeader.getter();
  v62 = sub_100003C84(&qword_10005B408);
  v63 = sub_1000438BC();
  View.accessibility(addTraits:)(v61, v62, v63);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v61, v82);
  swift_release(v90);
  swift_release(v91);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000019, 0x800000010004A380, v83);
  sub_100003D44((uint64_t)v7, &qword_10005B3F8);
  v64 = v79;
  sub_100009EF4((uint64_t)v10, v79, &qword_10005B3F8);
  v65 = v85;
  sub_100003D00(v60, v85, &qword_10005B400);
  sub_100003D00(v64, (uint64_t)v10, &qword_10005B3F8);
  v66 = v87;
  sub_100003D00(v65, v87, &qword_10005B400);
  v67 = sub_100003C84(&qword_10005B430);
  sub_100003D00((uint64_t)v10, v66 + *(int *)(v67 + 48), &qword_10005B3F8);
  sub_100003D44(v64, &qword_10005B3F8);
  sub_100003D44(v60, &qword_10005B400);
  sub_100003D44((uint64_t)v10, &qword_10005B3F8);
  return sub_100003D44(v65, &qword_10005B400);
}

uint64_t sub_10004148C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a3;
  v53 = a2;
  v4 = (int *)type metadata accessor for MostUsedItemsPlaceholderView(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003C84(&qword_10005B370);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003C84(&qword_10005B378);
  v47 = v10;
  v11 = __chkstk_darwin(v10);
  v51 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v50 = (uint64_t)&v46 - v14;
  v15 = __chkstk_darwin(v13);
  v49 = (char *)&v46 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v46 - v17;
  v48 = *(int *)(type metadata accessor for UsageTimelineEntry(0) + 56);
  v19 = *(_BYTE *)(a1 + v48);
  *v6 = swift_getKeyPath(&unk_100048690);
  v20 = sub_100003C84(&qword_100059CA0);
  v21 = swift_storeEnumTagMultiPayload(v6, v20, 0);
  *(_QWORD *)((char *)v6 + v4[5]) = 2;
  *(_QWORD *)((char *)v6 + v4[6]) = 3;
  *((_BYTE *)v6 + v4[7]) = v19;
  v22 = static Alignment.center.getter(v21);
  sub_10003E400(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v22, v23, (uint64_t)type metadata accessor for MostUsedItemsPlaceholderView, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000DB08, &qword_10005B370);
  v24 = sub_100015A24((uint64_t)v6, type metadata accessor for MostUsedItemsPlaceholderView);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  v28 = &v18[*(int *)(v10 + 36)];
  sub_100042C70(v53, v28);
  v29 = sub_100003C84(&qword_10005B288);
  v30 = (uint64_t *)&v28[*(int *)(v29 + 36)];
  *v30 = v25;
  v30[1] = v27;
  sub_100009EF4((uint64_t)v9, (uint64_t)v18, &qword_10005B370);
  LOBYTE(v25) = *(_BYTE *)(a1 + v48);
  *v6 = swift_getKeyPath(&unk_100048690);
  v31 = swift_storeEnumTagMultiPayload(v6, v20, 0);
  *(_QWORD *)((char *)v6 + v4[5]) = 2;
  *(_QWORD *)((char *)v6 + v4[6]) = 2;
  *((_BYTE *)v6 + v4[7]) = v25;
  v32 = static Alignment.center.getter(v31);
  sub_10003E400(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v32, v33, (uint64_t)type metadata accessor for MostUsedItemsPlaceholderView, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000DB08, &qword_10005B370);
  v34 = sub_100015A24((uint64_t)v6, type metadata accessor for MostUsedItemsPlaceholderView);
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = (uint64_t)v49;
  v39 = &v49[*(int *)(v47 + 36)];
  sub_100042C70(v53, v39);
  v40 = (uint64_t *)&v39[*(int *)(v29 + 36)];
  *v40 = v35;
  v40[1] = v37;
  sub_100009EF4((uint64_t)v9, v38, &qword_10005B370);
  v41 = v50;
  sub_100003D00((uint64_t)v18, v50, &qword_10005B378);
  v42 = v51;
  sub_100003D00(v38, v51, &qword_10005B378);
  v43 = v52;
  sub_100003D00(v41, v52, &qword_10005B378);
  v44 = sub_100003C84(&qword_10005B380);
  sub_100003D00(v42, v43 + *(int *)(v44 + 48), &qword_10005B378);
  sub_100003D44(v38, &qword_10005B378);
  sub_100003D44((uint64_t)v18, &qword_10005B378);
  sub_100003D44(v42, &qword_10005B378);
  return sub_100003D44(v41, &qword_10005B378);
}

uint64_t sub_1000418A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v84 = a2;
  v85 = a3;
  v81 = a4;
  v83 = type metadata accessor for MostUsedItemsLarge(0);
  v5 = __chkstk_darwin(v83);
  v7 = (uint64_t *)((char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v72 - v8);
  v10 = sub_100003C84(&qword_10005B388);
  v11 = __chkstk_darwin(v10);
  v78 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v72 - v13;
  v82 = sub_100003C84(&qword_10005B390);
  v15 = __chkstk_darwin(v82);
  v80 = (uint64_t)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v79 = (uint64_t)&v72 - v18;
  v19 = __chkstk_darwin(v17);
  v75 = (char *)&v72 - v20;
  v21 = __chkstk_darwin(v19);
  v77 = (uint64_t)&v72 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v72 - v24;
  __chkstk_darwin(v23);
  v76 = (uint64_t)&v72 - v26;
  v27 = *(_QWORD *)(a1 + 16);
  if (v27 >= 6)
    v28 = 6;
  else
    v28 = *(_QWORD *)(a1 + 16);
  v72 = a1 + 32;
  v29 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v30 = swift_bridgeObjectRetain(a1);
  v31 = swift_unknownObjectRetain_n(v30);
  v32 = (_QWORD *)swift_dynamicCastClass(v31, v29);
  if (!v32)
  {
    swift_bridgeObjectRelease(a1);
    v32 = _swiftEmptyArrayStorage;
  }
  v33 = v32[2];
  swift_release(v32);
  if (v33 == v28)
  {
    v34 = (_QWORD *)swift_dynamicCastClass(a1, v29);
    if (!v34)
    {
      swift_bridgeObjectRelease(a1);
      v34 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v34 = sub_100016EEC(a1, v72, 0, (2 * v28) | 1);
  }
  swift_bridgeObjectRelease(a1);
  *v9 = swift_getKeyPath(&unk_100048690);
  v74 = sub_100003C84(&qword_100059CA0);
  v35 = swift_storeEnumTagMultiPayload(v9, v74, 0);
  v36 = v83;
  *(_QWORD *)((char *)v9 + *(int *)(v83 + 20)) = v34;
  *(_QWORD *)((char *)v9 + *(int *)(v36 + 24)) = 2;
  v37 = static Alignment.leading.getter(v35);
  sub_10003E400(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v37, v38, (uint64_t)type metadata accessor for MostUsedItemsLarge, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000DB08, &qword_10005B388);
  v39 = sub_100015A24((uint64_t)v9, type metadata accessor for MostUsedItemsLarge);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = &v25[*(int *)(v82 + 36)];
  sub_100042C70(v85, v43);
  v73 = sub_100003C84(&qword_10005B288);
  v44 = (uint64_t *)&v43[*(int *)(v73 + 36)];
  *v44 = v40;
  v44[1] = v42;
  sub_100009EF4((uint64_t)v14, (uint64_t)v25, &qword_10005B388);
  v45 = (uint64_t)v25;
  v46 = v76;
  sub_100009EF4(v45, v76, &qword_10005B390);
  if (v27 >= 4)
    v47 = 4;
  else
    v47 = v27;
  v48 = swift_bridgeObjectRetain(a1);
  v49 = swift_unknownObjectRetain_n(v48);
  v50 = (_QWORD *)swift_dynamicCastClass(v49, v29);
  if (!v50)
  {
    swift_bridgeObjectRelease(a1);
    v50 = _swiftEmptyArrayStorage;
  }
  v51 = v50[2];
  swift_release(v50);
  if (v51 == v47)
  {
    v52 = (_QWORD *)swift_dynamicCastClass(a1, v29);
    if (!v52)
    {
      swift_bridgeObjectRelease(a1);
      v52 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v52 = sub_100016EEC(a1, v72, 0, (2 * v47) | 1);
  }
  swift_bridgeObjectRelease(a1);
  *v7 = swift_getKeyPath(&unk_100048690);
  v53 = swift_storeEnumTagMultiPayload(v7, v74, 0);
  v54 = v83;
  *(_QWORD *)((char *)v7 + *(int *)(v83 + 20)) = v52;
  *(_QWORD *)((char *)v7 + *(int *)(v54 + 24)) = 2;
  v55 = static Alignment.leading.getter(v53);
  v56 = v78;
  sub_10003E400(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v78, 0.0, 1, 0.0, 1, v55, v57, (uint64_t)type metadata accessor for MostUsedItemsLarge, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000DB08, &qword_10005B388);
  v58 = sub_100015A24((uint64_t)v7, type metadata accessor for MostUsedItemsLarge);
  v59 = static Alignment.center.getter(v58);
  v61 = v60;
  v62 = (uint64_t)v75;
  v63 = &v75[*(int *)(v82 + 36)];
  sub_100042C70(v85, v63);
  v64 = (uint64_t *)&v63[*(int *)(v73 + 36)];
  *v64 = v59;
  v64[1] = v61;
  sub_100009EF4(v56, v62, &qword_10005B388);
  v65 = v62;
  v66 = v77;
  sub_100009EF4(v65, v77, &qword_10005B390);
  v67 = v79;
  sub_100003D00(v46, v79, &qword_10005B390);
  v68 = v80;
  sub_100003D00(v66, v80, &qword_10005B390);
  v69 = v81;
  sub_100003D00(v67, v81, &qword_10005B390);
  v70 = sub_100003C84(&qword_10005B398);
  sub_100003D00(v68, v69 + *(int *)(v70 + 48), &qword_10005B390);
  sub_100003D44(v66, &qword_10005B390);
  sub_100003D44(v46, &qword_10005B390);
  sub_100003D44(v68, &qword_10005B390);
  return sub_100003D44(v67, &qword_10005B390);
}

uint64_t sub_100041EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  int v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;

  v75 = a2;
  v71 = a3;
  v73 = sub_100003C84(&qword_10005B288);
  __chkstk_darwin(v73);
  v5 = (uint64_t *)((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_100003C84(&qword_10005B2D0);
  v6 = __chkstk_darwin(v72);
  v70 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v69 = (uint64_t)&v60 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v60 - v11;
  v13 = __chkstk_darwin(v10);
  v68 = (uint64_t)&v60 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v60 - v16;
  __chkstk_darwin(v15);
  v76 = (uint64_t)&v60 - v18;
  v19 = type metadata accessor for UsageTimelineEntry(0);
  v67 = *(int *)(v19 + 56);
  LODWORD(v65) = *(unsigned __int8 *)(a1 + v67);
  v20 = *(int *)(v19 + 28);
  v74 = a1;
  v66 = v20;
  v21 = *(double *)(a1 + v20) * 0.3;
  v22 = static Alignment.center.getter(v19);
  v58 = 0;
  v56 = 1;
  v24 = _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v89, *(_QWORD *)&v21, 0, 0, 1, 0, 1, 0, 1, 0, v56, 0x7FF0000000000000, v58, v22, v23);
  v25 = v89;
  v26 = v91;
  v27 = v93;
  v60 = v95;
  v61 = v97;
  v62 = v99;
  v63 = v102;
  v64 = v101;
  v88 = v90;
  v87 = v92;
  v86 = v94;
  v85 = v96;
  v84 = v98;
  v83 = v100;
  v28 = static Alignment.center.getter(v24);
  v30 = v29;
  v31 = v74;
  sub_100042C70(v75, v5);
  v32 = (_QWORD *)((char *)v5 + *(int *)(v73 + 36));
  *v32 = v28;
  v32[1] = v30;
  sub_100003D00((uint64_t)v5, (uint64_t)&v17[*(int *)(v72 + 36)], &qword_10005B288);
  *(_QWORD *)v17 = 4;
  v17[8] = v65;
  *((_QWORD *)v17 + 2) = v25;
  v17[24] = v88;
  *((_QWORD *)v17 + 4) = v26;
  v17[40] = v87;
  *((_QWORD *)v17 + 6) = v27;
  v17[56] = v86;
  *((_QWORD *)v17 + 8) = v60;
  v17[72] = v85;
  *((_QWORD *)v17 + 10) = v61;
  v17[88] = v84;
  *((_QWORD *)v17 + 12) = v62;
  v17[104] = v83;
  v33 = v63;
  *((_QWORD *)v17 + 14) = v64;
  *((_QWORD *)v17 + 15) = v33;
  sub_100003D44((uint64_t)v5, &qword_10005B288);
  v34 = sub_100009EF4((uint64_t)v17, v76, &qword_10005B2D0);
  LODWORD(v67) = *(unsigned __int8 *)(v31 + v67);
  v35 = *(double *)(v31 + v66) * 0.3;
  v36 = static Alignment.center.getter(v34);
  LOBYTE(v59) = 0;
  LOBYTE(v57) = 1;
  v38 = _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v103, *(_QWORD *)&v35, 0, 0, 1, 0, 1, 0, 1, 0, v57, 0x7FF0000000000000, v59, v36, v37);
  v39 = v103;
  v40 = v105;
  v41 = v107;
  v42 = v109;
  v43 = v111;
  v66 = v115;
  v64 = v113;
  v65 = v116;
  v82 = v104;
  v81 = v106;
  v80 = v108;
  v79 = v110;
  v78 = v112;
  v77 = v114;
  v44 = static Alignment.center.getter(v38);
  v46 = v45;
  sub_100042C70(v75, v5);
  v47 = (_QWORD *)((char *)v5 + *(int *)(v73 + 36));
  *v47 = v44;
  v47[1] = v46;
  sub_100003D00((uint64_t)v5, (uint64_t)&v12[*(int *)(v72 + 36)], &qword_10005B288);
  *(_QWORD *)v12 = 3;
  v12[8] = v67;
  *((_QWORD *)v12 + 2) = v39;
  v12[24] = v82;
  *((_QWORD *)v12 + 4) = v40;
  v12[40] = v81;
  *((_QWORD *)v12 + 6) = v41;
  v12[56] = v80;
  *((_QWORD *)v12 + 8) = v42;
  v12[72] = v79;
  *((_QWORD *)v12 + 10) = v43;
  v12[88] = v78;
  *((_QWORD *)v12 + 12) = v64;
  v12[104] = v77;
  v48 = v65;
  *((_QWORD *)v12 + 14) = v66;
  *((_QWORD *)v12 + 15) = v48;
  sub_100003D44((uint64_t)v5, &qword_10005B288);
  v49 = v68;
  sub_100009EF4((uint64_t)v12, v68, &qword_10005B2D0);
  v50 = v76;
  v51 = v69;
  sub_100003D00(v76, v69, &qword_10005B2D0);
  v52 = v70;
  sub_100003D00(v49, v70, &qword_10005B2D0);
  v53 = v71;
  sub_100003D00(v51, v71, &qword_10005B2D0);
  v54 = sub_100003C84(&qword_10005B2D8);
  sub_100003D00(v52, v53 + *(int *)(v54 + 48), &qword_10005B2D0);
  sub_100003D44(v49, &qword_10005B2D0);
  sub_100003D44(v50, &qword_10005B2D0);
  sub_100003D44(v52, &qword_10005B2D0);
  return sub_100003D44(v51, &qword_10005B2D0);
}

uint64_t sub_1000424A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;

  v93 = a2;
  v94 = a3;
  v90 = a4;
  v92 = sub_100003C84(&qword_10005B288);
  __chkstk_darwin(v92);
  v96 = (uint64_t *)((char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_100003C84(&qword_10005B2E0);
  v6 = __chkstk_darwin(v91);
  v89 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v88 = (uint64_t)&v71 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v71 - v11;
  v13 = __chkstk_darwin(v10);
  v87 = (uint64_t)&v71 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v71 - v16;
  __chkstk_darwin(v15);
  v95 = (uint64_t)&v71 - v18;
  v86 = *(_QWORD *)(a1 + 16);
  if (v86 >= 4)
    v19 = 4;
  else
    v19 = v86;
  v71 = a1 + 32;
  v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v21 = swift_bridgeObjectRetain(a1);
  v22 = swift_unknownObjectRetain_n(v21);
  v23 = (_QWORD *)swift_dynamicCastClass(v22, v20);
  if (!v23)
  {
    swift_bridgeObjectRelease(a1);
    v23 = _swiftEmptyArrayStorage;
  }
  v24 = v23[2];
  swift_release(v23);
  v84 = v20;
  if (v24 == v19)
  {
    v25 = (_QWORD *)swift_dynamicCastClass(a1, v20);
    if (!v25)
    {
      swift_bridgeObjectRelease(a1);
      v25 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v25 = sub_100016EEC(a1, v71, 0, (2 * v19) | 1);
  }
  swift_bridgeObjectRelease(a1);
  v26 = type metadata accessor for UsageTimelineEntry(0);
  v85 = *(int *)(v26 + 28);
  v27 = *(double *)(v93 + v85) * 0.3;
  v28 = static Alignment.center.getter(v26);
  sub_10003E784(v27, 0, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v97, 0.0, 1, INFINITY, 0, v28, v29, (uint64_t)v25);
  v30 = swift_release(v25);
  v32 = v97;
  v31 = v98;
  v33 = v99;
  v83 = v100;
  LODWORD(v82) = v101;
  v81 = v102;
  LODWORD(v80) = v103;
  v79 = v104;
  LODWORD(v78) = v105;
  v77 = v106;
  v76 = v107;
  v75 = v108;
  v74 = v109;
  v73 = v110;
  v72 = v111;
  v34 = static Alignment.center.getter(v30);
  v36 = v35;
  v37 = v96;
  sub_100042C70(v94, v96);
  v38 = (_QWORD *)((char *)v37 + *(int *)(v92 + 36));
  *v38 = v34;
  v38[1] = v36;
  sub_100003D00((uint64_t)v37, (uint64_t)&v17[*(int *)(v91 + 36)], &qword_10005B288);
  *(_QWORD *)v17 = v32;
  *((_QWORD *)v17 + 1) = v31;
  v17[16] = v33;
  *((_QWORD *)v17 + 3) = v83;
  v17[32] = v82;
  *((_QWORD *)v17 + 5) = v81;
  v17[48] = v80;
  *((_QWORD *)v17 + 7) = v79;
  v17[64] = v78;
  *((_QWORD *)v17 + 9) = v77;
  v17[80] = v76;
  *((_QWORD *)v17 + 11) = v75;
  v17[96] = v74;
  v39 = v72;
  *((_QWORD *)v17 + 13) = v73;
  *((_QWORD *)v17 + 14) = v39;
  sub_100003D44((uint64_t)v37, &qword_10005B288);
  sub_100009EF4((uint64_t)v17, v95, &qword_10005B2E0);
  if (v86 >= 3)
    v40 = 3;
  else
    v40 = v86;
  v41 = swift_bridgeObjectRetain(a1);
  v42 = swift_unknownObjectRetain_n(v41);
  v43 = v84;
  v44 = (_QWORD *)swift_dynamicCastClass(v42, v84);
  if (!v44)
  {
    swift_bridgeObjectRelease(a1);
    v44 = _swiftEmptyArrayStorage;
  }
  v45 = v44[2];
  swift_release(v44);
  if (v45 == v40)
  {
    v46 = (_QWORD *)swift_dynamicCastClass(a1, v43);
    if (!v46)
    {
      swift_bridgeObjectRelease(a1);
      v46 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v46 = sub_100016EEC(a1, v71, 0, (2 * v40) | 1);
  }
  swift_bridgeObjectRelease(a1);
  v47 = *(double *)(v93 + v85) * 0.3;
  v49 = static Alignment.center.getter(v48);
  sub_10003E784(v47, 0, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v97, 0.0, 1, INFINITY, 0, v49, v50, (uint64_t)v46);
  v51 = swift_release(v46);
  v86 = v97;
  v85 = v98;
  v52 = v99;
  v53 = v100;
  v54 = v101;
  v55 = v102;
  v56 = v103;
  v84 = v104;
  LODWORD(v83) = v105;
  v82 = v106;
  LODWORD(v81) = v107;
  v80 = v108;
  LODWORD(v79) = v109;
  v78 = v110;
  v77 = v111;
  v57 = static Alignment.center.getter(v51);
  v59 = v58;
  v60 = v96;
  sub_100042C70(v94, v96);
  v61 = (_QWORD *)((char *)v60 + *(int *)(v92 + 36));
  *v61 = v57;
  v61[1] = v59;
  sub_100003D00((uint64_t)v60, (uint64_t)&v12[*(int *)(v91 + 36)], &qword_10005B288);
  v62 = v85;
  *(_QWORD *)v12 = v86;
  *((_QWORD *)v12 + 1) = v62;
  v12[16] = v52;
  *((_QWORD *)v12 + 3) = v53;
  v12[32] = v54;
  *((_QWORD *)v12 + 5) = v55;
  v12[48] = v56;
  *((_QWORD *)v12 + 7) = v84;
  v12[64] = v83;
  *((_QWORD *)v12 + 9) = v82;
  v12[80] = v81;
  *((_QWORD *)v12 + 11) = v80;
  v12[96] = v79;
  v63 = v77;
  *((_QWORD *)v12 + 13) = v78;
  *((_QWORD *)v12 + 14) = v63;
  sub_100003D44((uint64_t)v60, &qword_10005B288);
  v64 = v87;
  sub_100009EF4((uint64_t)v12, v87, &qword_10005B2E0);
  v65 = v95;
  v66 = v88;
  sub_100003D00(v95, v88, &qword_10005B2E0);
  v67 = v89;
  sub_100003D00(v64, v89, &qword_10005B2E0);
  v68 = v90;
  sub_100003D00(v66, v90, &qword_10005B2E0);
  v69 = sub_100003C84(&qword_10005B2E8);
  sub_100003D00(v67, v68 + *(int *)(v69 + 48), &qword_10005B2E0);
  sub_100003D44(v64, &qword_10005B2E0);
  sub_100003D44(v65, &qword_10005B2E0);
  sub_100003D44(v67, &qword_10005B2E0);
  return sub_100003D44(v66, &qword_10005B2E0);
}

_QWORD *sub_100042C70@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t *v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  void *v42;
  char **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;

  v54 = a1;
  v59 = a2;
  v55 = type metadata accessor for ColorScheme(0);
  v53 = *(_QWORD *)(v55 - 8);
  v2 = __chkstk_darwin(v55);
  v52 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v51 = (uint64_t)&v48 - v4;
  v57 = sub_100003C84(&qword_10005B2C0);
  __chkstk_darwin(v57);
  v58 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for _ForegroundLayerLevel(0);
  __chkstk_darwin(v6);
  v48 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for _ForegroundLayerLevelViewModifier(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003C84(&qword_10005A7F8);
  v11 = __chkstk_darwin(v56);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v48 - v14;
  v16 = type metadata accessor for WidgetRenderingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v48 - v21;
  type metadata accessor for WidgetView(0);
  v23 = sub_100043124(&qword_100059CA0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010004A2D0, (uint64_t)v22);
  static WidgetRenderingMode.accented.getter(v23);
  v24 = static WidgetRenderingMode.== infix(_:_:)(v22, v20);
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v20, v16);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v22, v16);
  if ((v24 & 1) != 0)
  {
    v27 = v48;
    static _ForegroundLayerLevel.secondary.getter(v26);
    _ForegroundLayerLevelViewModifier.init(level:)(v27);
    v28 = v56;
    v29 = v49;
    v30 = v50;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(&v13[*(int *)(v56 + 36)], v10, v50);
    v31 = v54;
    *(_QWORD *)v13 = v54;
    v32 = *(void (**)(char *, uint64_t))(v29 + 8);
    swift_retain(v31);
    v32(v10, v30);
    sub_100009EF4((uint64_t)v13, (uint64_t)v15, &qword_10005A7F8);
    v33 = v58;
    sub_100003D00((uint64_t)v15, (uint64_t)v58, &qword_10005A7F8);
    swift_storeEnumTagMultiPayload(v33, v57, 0);
    v34 = sub_100043624();
    _ConditionalContent<>.init(storage:)(v59, v33, v28, &type metadata for Color, v34, &protocol witness table for Color);
    return (_QWORD *)sub_100003D44((uint64_t)v15, &qword_10005A7F8);
  }
  else
  {
    v36 = v51;
    sub_100043124(&qword_10005AA08, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, v51);
    v38 = v52;
    v37 = v53;
    v39 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for ColorScheme.light(_:), v55);
    v40 = static ColorScheme.== infix(_:_:)(v36, v38);
    v41 = *(void (**)(char *, uint64_t))(v37 + 8);
    v41(v38, v39);
    v41((char *)v36, v39);
    v42 = (void *)objc_opt_self(UIColor);
    v43 = &selRef_secondarySystemBackgroundColor;
    if ((v40 & 1) == 0)
      v43 = &selRef_systemGray5Color;
    v44 = Color.init(_:)(objc_msgSend(v42, *v43));
    v45 = v57;
    v46 = v58;
    *v58 = v44;
    swift_storeEnumTagMultiPayload(v46, v45, 1);
    v47 = sub_100043624();
    return _ConditionalContent<>.init(storage:)(v59, v46, v56, &type metadata for Color, v47, &protocol witness table for Color);
  }
}

uint64_t sub_1000430C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100043124(&qword_100059CA0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010004A2D0, a1);
}

uint64_t sub_1000430F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100043124(&qword_10005A758, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_100043124@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003C84(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100003D00(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_100015BD0(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10004335C@<X0>(uint64_t a1@<X8>)
{
  return sub_100043124(&qword_10005AA08, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_10004338C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_100015BD0(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10003D0A0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

unint64_t sub_100043544()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005A128;
  if (!qword_10005A128)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_10005A128);
  }
  return result;
}

uint64_t sub_10004358C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005554(a2);
    sub_100009F64(a3, a4, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    sub_100009F64(&qword_10005B2A0, &qword_10005B288, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100043624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B2C8;
  if (!qword_10005B2C8)
  {
    v1 = sub_100005554(&qword_10005A7F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B2C8);
  }
  return result;
}

unint64_t sub_100043690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B3C8;
  if (!qword_10005B3C8)
  {
    v1 = sub_100005554(&qword_10005B3B8);
    sub_100009F64(&qword_10005B3D0, &qword_10005B3A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B3C8);
  }
  return result;
}

uint64_t sub_100043714(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_10004372C(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_10004372C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRetain(a3);
}

uint64_t sub_100043754(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    return sub_10004376C(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_10004376C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a3);
}

unint64_t sub_100043794()
{
  unint64_t result;

  result = qword_10005B3E0;
  if (!qword_10005B3E0)
  {
    result = swift_getWitnessTable(&unk_10004728C, &type metadata for GraphLabelPlaceholderView);
    atomic_store(result, (unint64_t *)&qword_10005B3E0);
  }
  return result;
}

unint64_t sub_1000437D8()
{
  unint64_t result;

  result = qword_10005B3E8;
  if (!qword_10005B3E8)
  {
    result = swift_getWitnessTable(&unk_10004723C, &type metadata for GraphLabelView);
    atomic_store(result, (unint64_t *)&qword_10005B3E8);
  }
  return result;
}

uint64_t sub_10004381C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100043844@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004386C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100043894(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_1000438BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B410;
  if (!qword_10005B410)
  {
    v1 = sub_100005554(&qword_10005B408);
    sub_100043940();
    sub_100009F64(&qword_10005B420, &qword_10005B428, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10005B410);
  }
  return result;
}

unint64_t sub_100043940()
{
  unint64_t result;

  result = qword_10005B418;
  if (!qword_10005B418)
  {
    result = swift_getWitnessTable(&unk_1000484DC, &type metadata for UsageTitleView);
    atomic_store(result, (unint64_t *)&qword_10005B418);
  }
  return result;
}

uint64_t sub_100043984()
{
  _QWORD v1[4];

  v1[0] = sub_100005554(&qword_10005B210);
  v1[1] = &type metadata for Color;
  v1[2] = sub_100009F64(&qword_10005B228, &qword_10005B210, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v1[3] = &protocol witness table for Color;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(_:for:)>>, 1);
}

id STSelectUserIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id STSelectUserIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for STSelectUserIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for STSelectUserIntent()
{
  return objc_opt_self(STSelectUserIntent);
}

id STUser.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id STSelectUserIntent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for STSelectUserIntent();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id STSelectUserIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithIdentifier:backingStore:", v7, a3);

  return v8;
}

id STSelectUserIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;
  objc_super v9;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for STSelectUserIntent();
  v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id STSelectUserIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(v5), "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id STSelectUserIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for STSelectUserIntent();
  v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id STSelectUserIntent.__deallocating_deinit()
{
  return sub_1000446CC(type metadata accessor for STSelectUserIntent);
}

unint64_t STSelectUserIntentResponseCode.init(rawValue:)(unint64_t a1)
{
  return sub_1000446FC(a1);
}

Swift::Int sub_100044000()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100044044()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10004406C(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_1000440AC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1000446FC(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t STSelectUserIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___STSelectUserIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___STSelectUserIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

char *STSelectUserIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = &v5[OBJC_IVAR___STSelectUserIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___STSelectUserIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

char *STSelectUserIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___STSelectUserIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___STSelectUserIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id STSelectUserIntentResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___STSelectUserIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for STSelectUserIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id STSelectUserIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___STSelectUserIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for STSelectUserIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id STSelectUserIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithBackingStore:", a1);

  return v3;
}

id STSelectUserIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___STSelectUserIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for STSelectUserIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id sub_1000444F0(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  *(_QWORD *)&a1[OBJC_IVAR___STSelectUserIntentResponse_code] = 0;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for STSelectUserIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id STSelectUserIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  NSDictionary v3;
  id v4;

  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(v1), "initWithPropertiesByName:", v3.super.isa);

  return v4;
}

id STSelectUserIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  NSDictionary v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR___STSelectUserIntentResponse_code] = 0;
  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for STSelectUserIntentResponse();
  v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4)
  return v4;
}

id STSelectUserIntentResponse.__deallocating_deinit()
{
  return sub_1000446CC(type metadata accessor for STSelectUserIntentResponse);
}

id sub_1000446CC(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_1000446FC(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

uint64_t type metadata accessor for STSelectUserIntentResponse()
{
  return objc_opt_self(STSelectUserIntentResponse);
}

unint64_t sub_100044730()
{
  unint64_t result;

  result = qword_10005B440;
  if (!qword_10005B440)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for STSelectUserIntentResponseCode, &type metadata for STSelectUserIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_10005B440);
  }
  return result;
}

uint64_t sub_100044774@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___STSelectUserIntentResponse_code);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_1000447C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___STSelectUserIntentResponse_code);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for STSelectUserIntentResponseCode()
{
  return &type metadata for STSelectUserIntentResponseCode;
}

id STUser.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(v6), "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

id STUser.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;
  objc_super v15;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for STUser();
  v13 = objc_msgSendSuper2(&v15, "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

uint64_t type metadata accessor for STUser()
{
  return objc_opt_self(STUser);
}

id STUser.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for STUser();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id STUser.__deallocating_deinit()
{
  return sub_1000446CC(type metadata accessor for STUser);
}

id static STUserResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___STUserResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static STUserResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  void *ObjCClassFromMetadata;
  Class isa;
  double v7;
  id v8;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  objc_super v14;

  v2 = v1;
  v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    v11 = sub_100044CB0();
    v12 = swift_bridgeObjectRetain(v3);
    v13 = _bridgeCocoaArray<A>(_:)(v10, v11, v12);
    swift_bridgeObjectRelease(v3);
    v3 = v13;
  }
  else
  {
    v4 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    sub_100044CB0();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  sub_100044CB0();
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v14.receiver = ObjCClassFromMetadata;
  v14.super_class = (Class)&OBJC_METACLASS___STUserResolutionResult;
  v8 = objc_msgSendSuper2(&v14, "disambiguationWithObjectsToDisambiguate:", isa, v7);

  return v8;
}

unint64_t sub_100044CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10005B4C0;
  if (!qword_10005B4C0)
  {
    v1 = objc_opt_self(INObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10005B4C0);
  }
  return result;
}

id static STUserResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___STUserResolutionResult;
  return objc_msgSendSuper2(&v4, "confirmationRequiredWithObjectToConfirm:", a1);
}

void static STUserResolutionResult.success(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "ScreenTimeWidgetExtension/STUser.swift", 38, 2, 47, 0);
  __break(1u);
}

void static STUserResolutionResult.disambiguation(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "ScreenTimeWidgetExtension/STUser.swift", 38, 2, 52, 0);
  __break(1u);
}

void static STUserResolutionResult.confirmationRequired(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "ScreenTimeWidgetExtension/STUser.swift", 38, 2, 57, 0);
  __break(1u);
}

id STUserResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend(v5, "initWithJSONDictionary:forIntent:", isa, a2);

  return v7;
}

id STUserResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  Class isa;
  id v6;
  id v7;
  objc_super v9;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for STUserResolutionResult();
  v6 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  v7 = v6;
  if (v7)

  return v7;
}

uint64_t type metadata accessor for STUserResolutionResult()
{
  return objc_opt_self(STUserResolutionResult);
}

id STUserResolutionResult.__deallocating_deinit()
{
  return sub_1000446CC(type metadata accessor for STUserResolutionResult);
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_setFragment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFragment:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}
