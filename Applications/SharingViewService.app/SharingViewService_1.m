void sub_1000990FC()
{
  qword_1001AD728 = 0xC022000000000000;
}

void sub_10009910C()
{
  id v0;
  id v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGRect v11;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1 != (id)1)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v2, "nativeBounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;

    v11.origin.x = v4;
    v11.origin.y = v6;
    v11.size.width = v8;
    v11.size.height = v10;
    CGRectGetWidth(v11);
    if (qword_1001A30B0 != -1)
      swift_once(&qword_1001A30B0, sub_1000990EC);
  }
}

void sub_100099214()
{
  qword_1001AD730 = 0x4076A00000000000;
}

uint64_t sub_100099228()
{
  uint64_t result;
  double v1;
  int32x2_t v2;
  int64x2_t v3;

  result = sub_1001177F4();
  v1 = 56.0;
  if ((_DWORD)result == 1)
    v1 = 40.0;
  v2 = vdup_n_s32(result == 1);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  xmmword_1001A6F78 = (__int128)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v3, 0x3FuLL)), (int8x16_t)xmmword_1001346C0, (int8x16_t)xmmword_1001346B0);
  qword_1001A6F88 = *(_QWORD *)&v1;
  return result;
}

double sub_10009928C()
{
  double result;

  if (qword_1001A30C8 != -1)
    swift_once(&qword_1001A30C8, sub_100099228);
  result = *((double *)&xmmword_1001A6F78 + 1);
  qword_1001AD738 = *((_QWORD *)&xmmword_1001A6F78 + 1);
  return result;
}

void sub_1000992D4()
{
  qword_1001AD740 = 0x4018000000000000;
}

void sub_1000992E4()
{
  qword_1001AD748 = 0x4042000000000000;
}

id sub_1000992F4(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  double v19;
  id v20;
  double v21;
  id v22;
  double v23;

  v2 = objc_msgSend((id)objc_opt_self(SVSHighlightButton), "buttonWithType:", 0);
  objc_msgSend(v2, "_setContinuousCornerRadius:", 12.0);
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v2;
  v5 = objc_msgSend(v3, "tertiarySystemFillColor");
  objc_msgSend(v4, "setBackgroundColor:", v5);

  v6 = objc_msgSend(v4, "titleLabel");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 17.0, UIFontWeightMedium);
    objc_msgSend(v7, "setFont:", v8);

  }
  v9 = objc_msgSend(v3, "blackColor");
  objc_msgSend(v4, "setTitleColor:forState:", v9, 0);

  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = objc_msgSend(v4, "heightAnchor");
  v11 = objc_msgSend(v10, "constraintEqualToConstant:", 50.0);

  v12 = objc_msgSend(v4, "centerXAnchor");
  v13 = objc_msgSend(a1, "centerXAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

  v15 = objc_msgSend(v4, "widthAnchor");
  v16 = objc_msgSend(a1, "widthAnchor");
  if (qword_1001A30C8 != -1)
    swift_once(&qword_1001A30C8, sub_100099228);
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v16, *((double *)&xmmword_1001A6F78 + 1) * -2.0);

  objc_msgSend(a1, "addSubview:", v4);
  v18 = v11;
  LODWORD(v19) = 1148846080;
  objc_msgSend(v18, "setPriority:", v19);
  objc_msgSend(v18, "setActive:", 1);

  v20 = v14;
  LODWORD(v21) = 1148846080;
  objc_msgSend(v20, "setPriority:", v21);
  objc_msgSend(v20, "setActive:", 1);

  v22 = v17;
  LODWORD(v23) = 1148846080;
  objc_msgSend(v22, "setPriority:", v23);
  objc_msgSend(v22, "setActive:", 1);

  return v4;
}

unint64_t sub_100099650()
{
  return 0xD000000000000018;
}

UILabel __swiftcall setUpSubtitleLabel(in:)(SVSCardContainerView *in)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;

  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  objc_msgSend(v2, "setTextColor:", v3);

  v4 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 15.0);
  objc_msgSend(v2, "setFont:", v4);

  objc_msgSend(v2, "setNumberOfLines:", 3);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "setTextAlignment:", 1);
  -[SVSCardContainerView addSubview:](in, "addSubview:", v2);
  v5 = (void *)objc_opt_self(NSLayoutConstraint);
  v6 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1001321B0;
  v8 = objc_msgSend(v2, "leadingAnchor");
  v9 = -[SVSCardContainerView leadingAnchor](in, "leadingAnchor");
  if (qword_1001A30C8 != -1)
    swift_once(&qword_1001A30C8, sub_100099228);
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v9, *((double *)&xmmword_1001A6F78 + 1));

  *(_QWORD *)(v7 + 32) = v10;
  v11 = objc_msgSend(v2, "trailingAnchor");
  v12 = -[SVSCardContainerView trailingAnchor](in, "trailingAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:constant:", v12, -*((double *)&xmmword_1001A6F78 + 1));

  *(_QWORD *)(v7 + 40) = v13;
  specialized Array._endMutation()(v14);
  v15 = v7;
  sub_10000E868();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(v5, "activateConstraints:", isa);

  return (UILabel)v2;
}

id sub_100099910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  id result;
  uint64_t i;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  objc_super v28;
  uint64_t v29;

  v6 = objc_allocWithZone((Class)UIActivityIndicatorView);
  v7 = v3;
  v8 = objc_msgSend(v6, "initWithActivityIndicatorStyle:", a1);
  v9 = OBJC_IVAR____TtC18SharingViewService11TextSpinner_spinner;
  *(_QWORD *)&v7[OBJC_IVAR____TtC18SharingViewService11TextSpinner_spinner] = v8;
  if (a3)
  {
    v10 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v11 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    objc_msgSend(v10, "setTextColor:", v11);

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
    objc_msgSend(v10, "setText:", v12);

    v13 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
    v14 = swift_allocObject(v13, 48, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1001321B0;
    v15 = *(void **)&v7[v9];
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 40) = v10;
  }
  else
  {
    v15 = v8;
    v16 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
    v14 = swift_allocObject(v16, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100132030;
    *(_QWORD *)(v14 + 32) = v15;
  }
  v29 = v14;
  specialized Array._endMutation()(v14);
  v17 = v29;
  v18 = v15;

  v28.receiver = v7;
  v28.super_class = (Class)type metadata accessor for TextSpinner();
  v19 = objc_msgSendSuper2(&v28, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v20 = v19;
  if (!((unint64_t)v17 >> 62))
  {
    v21 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = v19;
    if (v21)
      goto LABEL_6;
LABEL_16:

    swift_bridgeObjectRelease(v17);
    return v20;
  }
  if (v17 < 0)
    v26 = v17;
  else
    v26 = v17 & 0xFFFFFFFFFFFFFF8;
  v27 = v19;
  swift_bridgeObjectRetain(v17);
  v21 = _CocoaArrayWrapper.endIndex.getter(v26);
  result = (id)swift_bridgeObjectRelease(v17);
  if (!v21)
    goto LABEL_16;
LABEL_6:
  if (v21 >= 1)
  {
    for (i = 0; i != v21; ++i)
    {
      if ((v17 & 0xC000000000000001) != 0)
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v17);
      else
        v24 = *(id *)(v17 + 8 * i + 32);
      v25 = v24;
      objc_msgSend(v20, "addArrangedSubview:", v24);

    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

id sub_100099C04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextSpinner();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TextSpinner()
{
  return objc_opt_self(_TtC18SharingViewService11TextSpinner);
}

void sub_100099C64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  void *v47;

  v2 = type metadata accessor for SFInterventionWorkflow.SprinboardSettings(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  v40 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_100013194(0, (unint64_t *)&qword_1001A7E20, BSAction_ptr);
    v7 = sub_1000641BC();
    v8 = Set.Iterator.init(_cocoa:)(v46, v5, v6, v7);
    a1 = v46[0];
    v38 = v46[1];
    v9 = v46[2];
    v10 = v46[3];
    v11 = v46[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 56);
    v38 = a1 + 56;
    v14 = ~v12;
    v15 = -v12;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v11 = v16 & v13;
    v8 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = v14;
    v10 = 0;
  }
  v34 = v9;
  v36 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v37 = (unint64_t)(v9 + 64) >> 6;
  v39 = enum case for SFInterventionWorkflow.SprinboardSettings.interventionReply(_:);
  v35 = (char *)&type metadata for Swift.AnyObject + 8;
  v17 = v41;
  v18 = v42;
  while (a1 < 0)
  {
    v22 = __CocoaSet.Iterator.next()(v8);
    if (!v22)
      goto LABEL_37;
    v23 = v22;
    v45 = v22;
    v24 = sub_100013194(0, (unint64_t *)&qword_1001A7E20, BSAction_ptr);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(&v47, &v45, v35, v24, 7);
    v25 = v47;
    swift_unknownObjectRelease(v23);
    v21 = v10;
    v19 = v11;
    if (!v25)
      goto LABEL_37;
LABEL_35:
    v43 = v11;
    v44 = v10;
    v29 = objc_msgSend(v25, "info", v34);
    if (v29)
    {
      v30 = v29;
      v31 = v40;
      v32 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104))(v40, v39, v18);
      v33 = SFInterventionWorkflow.SprinboardSettings.rawValue.getter(v32);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v31, v18);
      LOBYTE(v31) = objc_msgSend(v30, "BOOLForSetting:", v33);

      if ((v31 & 1) != 0)
        goto LABEL_37;
    }

    v10 = v21;
    v11 = v19;
  }
  if (v11)
  {
    v19 = (v11 - 1) & v11;
    v20 = __clz(__rbit64(v11)) | (v10 << 6);
    v21 = v10;
LABEL_34:
    v25 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v20);
    if (!v25)
      goto LABEL_37;
    goto LABEL_35;
  }
  v26 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v26 >= v37)
      goto LABEL_37;
    v27 = *(_QWORD *)(v38 + 8 * v26);
    v21 = v10 + 1;
    if (!v27)
    {
      v21 = v10 + 2;
      if (v10 + 2 >= v37)
        goto LABEL_37;
      v27 = *(_QWORD *)(v38 + 8 * v21);
      if (!v27)
      {
        v21 = v10 + 3;
        if (v10 + 3 >= v37)
          goto LABEL_37;
        v27 = *(_QWORD *)(v38 + 8 * v21);
        if (!v27)
        {
          v21 = v10 + 4;
          if (v10 + 4 >= v37)
            goto LABEL_37;
          v27 = *(_QWORD *)(v38 + 8 * v21);
          if (!v27)
          {
            v21 = v10 + 5;
            if (v10 + 5 >= v37)
              goto LABEL_37;
            v27 = *(_QWORD *)(v38 + 8 * v21);
            if (!v27)
            {
              v28 = v10 + 6;
              while (v37 != v28)
              {
                v27 = *(_QWORD *)(v38 + 8 * v28++);
                if (v27)
                {
                  v21 = v28 - 1;
                  goto LABEL_33;
                }
              }
LABEL_37:
              sub_10002413C(a1);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v19 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v21 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_100099FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A6FC0);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A6FC0);
  if (qword_1001A2EC8 != -1)
    swift_once(&qword_1001A2EC8, sub_100018C34);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD408);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_10009A08C(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  char *v36;
  void *v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for SFInterventionWorkflow.SprinboardSettings(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SFInterventionResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)&v2[OBJC_IVAR___SVSInterventionViewController_interventionReplyAction];
  if (v13)
  {
    v14 = v13;
    if (objc_msgSend(v14, "canSendResponse"))
    {
      v16 = objc_msgSend(objc_allocWithZone((Class)BSMutableSettings), "init");
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for SFInterventionResponse.accept(_:), v8);
      v17 = static SFInterventionResponse.== infix(_:_:)(a1, v12);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for SFInterventionWorkflow.SprinboardSettings.interventionShouldContinue(_:), v4);
      v19 = SFInterventionWorkflow.SprinboardSettings.rawValue.getter(v18);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      objc_msgSend(v16, "setFlag:forSetting:", v17 & 1, v19);
      v20 = objc_msgSend((id)objc_opt_self(BSActionResponse), "responseWithInfo:", v16);
      objc_msgSend(v14, "sendResponse:", v20);

    }
    else
    {
      if (qword_1001A30E8 != -1)
        swift_once(&qword_1001A30E8, sub_100099FFC);
      v26 = type metadata accessor for Logger(0, v15);
      v27 = sub_10000E8E8(v26, (uint64_t)qword_1001A6FC0);
      v20 = Logger.logObject.getter(v27);
      v28 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v20, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v28, "Cannot send response for action in SVSInterventionViewController", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }
    }

  }
  else
  {
    if (qword_1001A30E8 != -1)
      swift_once(&qword_1001A30E8, sub_100099FFC);
    v21 = type metadata accessor for Logger(0, v10);
    v22 = sub_10000E8E8(v21, (uint64_t)qword_1001A6FC0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing action when performing SVSInterventionViewController dismiss", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  v30 = OBJC_IVAR___SVSInterventionViewController_interventionViewController;
  v31 = *(void **)&v2[OBJC_IVAR___SVSInterventionViewController_interventionViewController];
  if (v31)
  {
    v32 = swift_allocObject(&unk_10017B720, 24, 7);
    *(_QWORD *)(v32 + 16) = v2;
    aBlock[4] = sub_100064168;
    v39 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001BB50;
    aBlock[3] = &unk_10017B738;
    v33 = _Block_copy(aBlock);
    v34 = v39;
    v35 = v31;
    v36 = v2;
    objc_msgSend(v35, "dismissViewControllerAnimated:completion:", 1, v33, swift_release(v34).n128_f64[0]);
    _Block_release(v33);

  }
  else
  {
    objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);
  }
  v37 = *(void **)&v2[v30];
  *(_QWORD *)&v2[v30] = 0;

}

void sub_10009A490(void *a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  void (*v40)(void);
  uint8_t *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[5];
  __int128 v56;
  __int128 v57;

  v4 = sub_100006A6C(&qword_1001A7068);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SFInterventionWorkflow(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = objc_msgSend(a1, "userInfo");
    if (v11)
    {
      v12 = v11;
      v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v53 = static SFInterventionWorkflow.SprinboardSettings.userInfoKey.getter();
      v54 = v14;
      AnyHashable.init<A>(_:)(v55, &v53, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v13 + 16) && (v15 = sub_100005CF4((uint64_t)v55), (v16 & 1) != 0))
      {
        sub_10000D894(*(_QWORD *)(v13 + 56) + 32 * v15, (uint64_t)&v56);
      }
      else
      {
        v56 = 0u;
        v57 = 0u;
      }
      swift_bridgeObjectRelease(v13);
      sub_100006B34((uint64_t)v55);
      if (*((_QWORD *)&v57 + 1))
      {
        if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          SFInterventionWorkflow.init(rawValue:)(v53, v54);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          {
            (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for SFInterventionWorkflow.receive(_:), v7);
            sub_10000D858((uint64_t)v6, &qword_1001A7068);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
          }
          v17 = v52 + OBJC_IVAR___SVSInterventionViewController_workflow;
          swift_beginAccess(v52 + OBJC_IVAR___SVSInterventionViewController_workflow, v55, 33, 0);
          (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v17, v10, v7);
          swift_endAccess(v55);
        }
      }
      else
      {
        sub_10000D858((uint64_t)&v56, &qword_1001A4340);
      }
    }
    v18 = objc_msgSend(a1, "actions");
    if (!v18)
      goto LABEL_22;
    v20 = v18;
    v21 = sub_100013194(0, (unint64_t *)&qword_1001A7E20, BSAction_ptr);
    v22 = sub_1000641BC();
    v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22);

    sub_100099C64(v23);
    v25 = v24;
    swift_bridgeObjectRelease(v23);
    if (v25)
    {
      v26 = qword_1001A30E8;
      v28 = v25;
      if (v26 != -1)
        swift_once(&qword_1001A30E8, sub_100099FFC);
      v29 = type metadata accessor for Logger(0, v27);
      v30 = sub_10000E8E8(v29, (uint64_t)qword_1001A6FC0);
      v31 = Logger.logObject.getter(v30);
      v33 = static os_log_type_t.default.getter(v31, v32);
      if (os_log_type_enabled(v31, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v33, "Found interventionReplyAction", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = *(void **)(v52 + OBJC_IVAR___SVSInterventionViewController_interventionReplyAction);
      *(_QWORD *)(v52 + OBJC_IVAR___SVSInterventionViewController_interventionReplyAction) = v25;

    }
    else
    {
LABEL_22:
      if (qword_1001A30E8 != -1)
        swift_once(&qword_1001A30E8, sub_100099FFC);
      v36 = type metadata accessor for Logger(0, v19);
      sub_10000E8E8(v36, (uint64_t)qword_1001A6FC0);
      v37 = a1;
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = a2;
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v55[0] = v42;
        *(_DWORD *)v41 = 136315138;
        v43 = objc_msgSend(v37, "actions");
        if (v43)
        {
          v44 = v43;
          v45 = sub_100013194(0, (unint64_t *)&qword_1001A7E20, BSAction_ptr);
          v46 = sub_1000641BC();
          v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v44, v45, v46);

        }
        else
        {
          v47 = 0;
        }
        *(_QWORD *)&v56 = v47;
        v48 = sub_100006A6C((uint64_t *)&unk_1001A7070);
        v49 = String.init<A>(reflecting:)(&v56, v48);
        v51 = v50;
        *(_QWORD *)&v56 = sub_10001EFA4(v49, v50, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 8, v41 + 4, v41 + 12);

        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to get action for SVSInterventionViewController {actions: %s}", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        v28 = 0;
        a2 = v40;
      }
      else
      {

        v28 = 0;
      }
    }
    if (a2)
    {
      a2();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10009AADC(char a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  int v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  char v20[24];
  objc_super v21;

  v3 = type metadata accessor for SFInterventionWorkflow(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v20[-v8 - 8];
  v10 = (objc_class *)type metadata accessor for SVSInterventionViewController(0);
  v21.receiver = v1;
  v21.super_class = v10;
  objc_msgSendSuper2(&v21, "viewIsAppearing:", a1 & 1);
  v11 = &v1[OBJC_IVAR___SVSInterventionViewController_workflow];
  swift_beginAccess(&v1[OBJC_IVAR___SVSInterventionViewController_workflow], v20, 0, 0);
  v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v12(v9, v11, v3);
  v13 = objc_msgSend((id)objc_opt_self(SCUIHelpResources), "getCurrentInterventionType");
  v12(v7, v9, v3);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v14 == enum case for SFInterventionWorkflow.send(_:))
  {
    v15 = (char *)objc_msgSend(objc_allocWithZone((Class)SCUIInterventionViewController), "initWithWorkflow:contextDictionary:options:type:", 1, 0, 0, v13);
LABEL_5:
    v16 = v15;
    objc_msgSend(v15, "setInterventionDelegate:", v1);
LABEL_8:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    objc_msgSend(v16, "setModalPresentationStyle:", 0);
    v17 = *(void **)&v1[OBJC_IVAR___SVSInterventionViewController_interventionViewController];
    *(_QWORD *)&v1[OBJC_IVAR___SVSInterventionViewController_interventionViewController] = v16;
    v18 = v16;

    objc_msgSend(v1, "presentViewController:animated:completion:", v18, 1, 0);
    return;
  }
  if (v14 == enum case for SFInterventionWorkflow.receive(_:))
  {
    v15 = (char *)objc_msgSend(objc_allocWithZone((Class)SCUIInterventionViewController), "initWithWorkflow:contextDictionary:options:type:", 0, 0, 0, v13);
    goto LABEL_5;
  }
  if (v14 == enum case for SFInterventionWorkflow.moreInfo(_:))
  {
    v16 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SVSMoreHelpWebViewController()), "init");
    swift_unknownObjectWeakAssign(&v16[OBJC_IVAR____TtC18SharingViewService28SVSMoreHelpWebViewController_interventionDelegate], v1);
    goto LABEL_8;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x800000010013C8F0, "SharingViewService/SVSInterventionViewController.swift", 54, 2, 150, 0);
  __break(1u);
}

uint64_t sub_10009AE00()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = objc_msgSend(v0, "_remoteViewControllerProxy");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100064600((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_100006A6C((uint64_t *)&unk_1001A55D0);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_10000D858((uint64_t)v7, &qword_1001A4340);
    return 0;
  }
}

void sub_10009AF6C(void *a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int *a5)
{
  id v9;

  swift_unknownObjectRetain(a3);
  v9 = a1;
  sub_10009B860(a4, a5);
  swift_unknownObjectRelease(a3);

}

id sub_10009B01C(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v3[OBJC_IVAR___SVSInterventionViewController_interventionViewController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___SVSInterventionViewController_interventionReplyAction] = 0;
  v6 = &v3[OBJC_IVAR___SVSInterventionViewController_workflow];
  v7 = enum case for SFInterventionWorkflow.receive(_:);
  v8 = type metadata accessor for SFInterventionWorkflow(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v9 = 0;
  }
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for SVSInterventionViewController(0);
  v10 = objc_msgSendSuper2(&v12, "initWithNibName:bundle:", v9, a3);

  return v10;
}

id sub_10009B1FC()
{
  return sub_100014100(0, (uint64_t (*)(void))type metadata accessor for SVSInterventionViewController);
}

uint64_t sub_10009B26C()
{
  return type metadata accessor for SVSInterventionViewController(0);
}

uint64_t type metadata accessor for SVSInterventionViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1001A7018;
  if (!qword_1001A7018)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SVSInterventionViewController);
  return result;
}

uint64_t sub_10009B2B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = "\b";
  result = type metadata accessor for SFInterventionWorkflow(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_10009B5A8(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v8;

  swift_unknownObjectWeakInit(&a1[OBJC_IVAR____TtC18SharingViewService28SVSMoreHelpWebViewController_interventionDelegate], 0);
  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for SVSMoreHelpWebViewController();
  return objc_msgSendSuper2(&v8, *a4, a3);
}

id sub_10009B608(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  void *v10;
  void *v11;
  objc_class *v12;
  id v13;
  id v14;
  objc_super v16;

  v2 = v1;
  v4 = sub_100006A6C(&qword_1001A3618);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR____TtC18SharingViewService28SVSMoreHelpWebViewController_interventionDelegate], 0);
  sub_10005F444(a1, (uint64_t)v6);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v12 = (objc_class *)type metadata accessor for SVSMoreHelpWebViewController();
  v16.receiver = v2;
  v16.super_class = v12;
  v13 = objc_msgSendSuper2(&v16, "initWithURL:", v10);

  v14 = v13;
  sub_10000D858(a1, &qword_1001A3618);
  if (v14)

  return v14;
}

id sub_10009B7E8(uint64_t a1)
{
  return sub_100014100(a1, type metadata accessor for SVSMoreHelpWebViewController);
}

uint64_t type metadata accessor for SVSMoreHelpWebViewController()
{
  return objc_opt_self(_TtC18SharingViewService28SVSMoreHelpWebViewController);
}

uint64_t sub_10009B824()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009B848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009B858(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009B860(const char *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;

  v4 = type metadata accessor for SFInterventionResponse(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A30E8 != -1)
    swift_once(&qword_1001A30E8, sub_100099FFC);
  v9 = type metadata accessor for Logger(0, v6);
  v10 = sub_10000E8E8(v9, (uint64_t)qword_1001A6FC0);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v13, a1, v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *a2, v4);
  sub_10009A08C((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10009B9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  v0 = type metadata accessor for SFInterventionResponse(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A30E8 != -1)
    swift_once(&qword_1001A30E8, sub_100099FFC);
  v5 = type metadata accessor for Logger(0, v2);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A6FC0);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Intervention ViewController did contact someone", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for SFInterventionResponse.reject(_:), v0);
  sub_10009A08C((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_100013194(0, &qword_1001A7060, SCUIInterventionViewController_ptr);
  return static SCUIInterventionViewController.openChatWithParents()();
}

uint64_t sub_10009BB2C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10009BB7C(uint64_t a1)
{
  return sub_100014100(a1, type metadata accessor for B389MapAnnotation);
}

uint64_t type metadata accessor for B389MapAnnotation()
{
  return objc_opt_self(_TtC18SharingViewService17B389MapAnnotation);
}

id sub_10009BD90()
{
  return sub_100014100(0, type metadata accessor for B389AnnotationView);
}

uint64_t type metadata accessor for B389AnnotationView()
{
  return objc_opt_self(_TtC18SharingViewServiceP33_A90FF226C003DA47E3B07A4439E9D09718B389AnnotationView);
}

id sub_10009BDE4(void *a1, uint64_t a2, SEL *a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v5 = (void *)objc_opt_self(UIColor);
  v6 = a1;
  v7 = objc_msgSend(v5, *a3);
  v8 = objc_msgSend(v6, "traitCollection");
  v9 = objc_msgSend(v7, "resolvedColorWithTraitCollection:", v8);

  return v9;
}

void sub_10009BFF4()
{
  char *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  NSString v5;
  id v6;
  id v7;

  v1 = *(void **)&v0[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapView];
  objc_msgSend(v1, "setAutoresizingMask:", 18);
  objc_msgSend(v1, "setDelegate:", v0);
  objc_msgSend(v1, "setUserInteractionEnabled:", 0);
  v2 = objc_msgSend((id)objc_opt_self(MKPointOfInterestFilter), "filterIncludingAllCategories");
  objc_msgSend(v1, "setPointOfInterestFilter:", v2);

  objc_msgSend(v1, "setShowsAttribution:", 0);
  objc_msgSend(v1, "setShowsBuildings:", 1);
  objc_msgSend(v1, "setRegion:", *(double *)(*(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapAnnotation]+ OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_region), *(double *)(*(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapAnnotation]+ OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_region+ 8), *(double *)(*(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapAnnotation]+ OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_region+ 16), *(double *)(*(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapAnnotation]+ OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_region+ 24));
  v3 = type metadata accessor for B389AnnotationView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forAnnotationViewWithReuseIdentifier:", ObjCClassFromMetadata, v5);

  v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v7, "setClipsToBounds:", 1);
  v6 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "viewTapped:");
  objc_msgSend(v7, "addGestureRecognizer:", v6);

  objc_msgSend(v7, "addSubview:", v1);
  objc_msgSend(v0, "setView:", v7);

}

id sub_10009C388(uint64_t a1)
{
  return sub_100014100(a1, type metadata accessor for B389MapViewController);
}

uint64_t type metadata accessor for B389MapViewController()
{
  return objc_opt_self(_TtC18SharingViewService21B389MapViewController);
}

void *sub_10009C400(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;
  void *v12;

  v5 = type metadata accessor for B389MapAnnotation();
  v6 = swift_dynamicCastClass(a2, v5);
  if (!v6)
    return 0;
  v7 = v6;
  sub_100013194(0, (unint64_t *)&qword_1001A7260, NSObject_ptr);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapAnnotation);
  swift_unknownObjectRetain(a2);
  if ((static NSObject.== infix(_:_:)(v8, v7) & 1) == 0)
  {
    swift_unknownObjectRelease(a2);
    return 0;
  }
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(a1, "dequeueReusableAnnotationViewWithIdentifier:forAnnotation:", v9, v7);

  v11 = type metadata accessor for B389AnnotationView();
  v12 = (void *)swift_dynamicCastClassUnconditional(v10, v11, 0, 0, 0);
  objc_msgSend(v12, "setCanShowCallout:", 1);
  objc_msgSend(v12, "setAllowsPulse:", 1);
  objc_msgSend(v12, "updateStateFromLocation:duration:", *(_QWORD *)(v7 + OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_pairingLocation), 0.0);
  swift_unknownObjectRelease(a2);
  return v12;
}

uint64_t sub_10009C5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7270);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7270);
  if (qword_1001A2ED8 != -1)
    swift_once(&qword_1001A2ED8, sub_100018C6C);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD438);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_10009C64C()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSString v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  int v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSString v34;
  void *v35;
  id v36;
  const void *v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  NSString v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  void **v78;
  Class isa;
  id v80;
  __int128 v81;
  id v82;
  int v83;
  void **aBlock;
  unint64_t v85;
  void (*v86)(uint64_t, void *);
  void *v87;
  void *v88;
  uint64_t v89;
  objc_super v90;

  v1 = v0;
  v90.receiver = v0;
  v90.super_class = (Class)type metadata accessor for B389ErrorViewController();
  objc_msgSendSuper2(&v90, "viewDidLoad");
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    return;
  }
  v3 = v2;
  v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryLarge);
  objc_msgSend(v3, "_setLocalOverrideTraitCollection:", v4);

  objc_msgSend(v1, "setDismissalType:", 1);
  v5 = swift_allocObject(&unk_10017B840, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v1);
  swift_retain(v5);
  v6 = String._bridgeToObjectiveC()();
  v88 = sub_10009D624;
  v89 = v5;
  aBlock = _NSConcreteStackBlock;
  v85 = 1107296256;
  v86 = sub_10001B5D0;
  v87 = &unk_10017B858;
  v7 = _Block_copy(&aBlock);
  v8 = (void *)objc_opt_self(PRXAction);
  v9 = objc_msgSend(v8, "actionWithTitle:style:handler:", v6, 0, v7);

  _Block_release(v7);
  v10 = v89;
  swift_release(v5);
  objc_msgSend(v1, "setDismissButtonAction:", v9, swift_release(v10).n128_f64[0]);

  v11 = objc_msgSend(v1, "subtitle");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

    v16 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService23B389ErrorViewController_error];
    if (v16)
    {
      v17 = swift_errorRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService23B389ErrorViewController_error]);
      if (IsAppleInternalBuild(v17))
      {
        aBlock = 0;
        v85 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease(v85);
        aBlock = (void **)v13;
        v85 = v15;
        v18._object = (void *)0x800000010013CC40;
        v18._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v18);
        v19 = (void *)_convertErrorToNSError(_:)(v16);
        v20 = NSErrorToOSStatus(v19);

        v83 = v20;
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        object = v21._object;
        String.append(_:)(v21);
        swift_bridgeObjectRelease(object);
        v23._countAndFlagsBits = 41;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v85;
        v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v24);
        objc_msgSend(v1, "setSubtitle:", v25);

        swift_errorRelease(v16);
        goto LABEL_8;
      }
      swift_errorRelease(v16);
    }
    swift_bridgeObjectRelease(v15);
  }
LABEL_8:
  v26 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService23B389ErrorViewController_buttons];
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService23B389ErrorViewController_buttons]);
    v28 = 0;
    v29 = v8;
    do
    {
      v30 = *(_QWORD *)(v26 + v28 + 32);
      v31 = *(_QWORD *)(v26 + v28 + 56);
      v81 = *(_OWORD *)(v26 + v28 + 40);
      swift_unknownObjectWeakInit(&v83, v1);
      v32 = v1;
      v33 = swift_allocObject(&unk_10017B890, 48, 7);
      *(_QWORD *)(v33 + 16) = v30;
      *(_OWORD *)(v33 + 24) = v81;
      *(_QWORD *)(v33 + 40) = v31;
      swift_bridgeObjectRetain_n(v81, 2);
      swift_retain_n(v31, 2);
      v34 = String._bridgeToObjectiveC()();
      v88 = sub_10009D670;
      v89 = v33;
      aBlock = _NSConcreteStackBlock;
      v85 = 1107296256;
      v86 = sub_10001B5D0;
      v87 = &unk_10017B8A8;
      v35 = _Block_copy(&aBlock);
      v36 = objc_msgSend(v29, "actionWithTitle:style:handler:", v34, v28 != 0, v35);

      v37 = v35;
      v1 = v32;
      _Block_release(v37);
      swift_release(v89);
      swift_unknownObjectWeakDestroy(&v83, v38);
      v39 = objc_msgSend(v32, "addAction:", v36);
      swift_release(v31);
      swift_bridgeObjectRelease(v81);

      v28 += 32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    v40 = String._bridgeToObjectiveC()();
    v41 = sub_100117314(v40);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v43 = v42;

    v44 = swift_allocObject(&unk_10017B840, 24, 7);
    swift_unknownObjectWeakInit(v44 + 16, v1);
    swift_retain(v44);
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v43);
    v88 = sub_10009D690;
    v89 = v44;
    aBlock = _NSConcreteStackBlock;
    v85 = 1107296256;
    v86 = sub_10001B5D0;
    v87 = &unk_10017B8D0;
    v46 = _Block_copy(&aBlock);
    v47 = objc_msgSend(v8, "actionWithTitle:style:handler:", v45, 0, v46);

    _Block_release(v46);
    v48 = v89;
    swift_release(v44);
    v49 = objc_msgSend(v1, "addAction:", v47, swift_release(v48).n128_f64[0]);

  }
  v50 = objc_msgSend((id)objc_opt_self(_UIImageSymbolConfiguration), "configurationWithPointSize:weight:", 4, 50.0);
  v51 = String._bridgeToObjectiveC()();
  v82 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v51, v50);

  v52 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v82);
  v53 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
  objc_msgSend(v52, "setTintColor:", v53);

  objc_msgSend(v52, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v52, "setContentMode:", 1);
  v54 = objc_msgSend(v1, "contentView");
  objc_msgSend(v54, "addSubview:", v52);

  v80 = (id)objc_opt_self(NSLayoutConstraint);
  v55 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
  v56 = swift_allocObject(v55, 64, 7);
  *(_OWORD *)(v56 + 16) = xmmword_100132270;
  v57 = objc_msgSend(v52, "centerXAnchor");
  v58 = objc_msgSend(v1, "contentView");
  v59 = objc_msgSend(v58, "mainContentGuide");

  v60 = objc_msgSend(v59, "centerXAnchor");
  v61 = objc_msgSend(v57, "constraintEqualToAnchor:", v60);

  *(_QWORD *)(v56 + 32) = v61;
  v62 = objc_msgSend(v52, "centerYAnchor");
  v63 = objc_msgSend(v1, "contentView");
  v64 = objc_msgSend(v63, "mainContentGuide");

  v65 = objc_msgSend(v64, "centerYAnchor");
  v66 = objc_msgSend(v62, "constraintEqualToAnchor:", v65);

  *(_QWORD *)(v56 + 40) = v66;
  v67 = objc_msgSend(v52, "topAnchor");
  v68 = objc_msgSend(v1, "contentView");
  v69 = objc_msgSend(v68, "mainContentGuide");

  v70 = objc_msgSend(v69, "topAnchor");
  v71 = objc_msgSend(v67, "constraintGreaterThanOrEqualToAnchor:", v70);

  *(_QWORD *)(v56 + 48) = v71;
  v72 = objc_msgSend(v52, "bottomAnchor");
  v73 = objc_msgSend(v1, "contentView");
  v74 = objc_msgSend(v73, "mainContentGuide");

  v75 = objc_msgSend(v74, "bottomAnchor");
  v76 = objc_msgSend(v72, "constraintLessThanOrEqualToAnchor:", v75);

  *(_QWORD *)(v56 + 56) = v76;
  aBlock = (void **)v56;
  specialized Array._endMutation()(v77);
  v78 = aBlock;
  sub_10000E868();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v78);
  objc_msgSend(v80, "activateConstraints:", isa);

}

void sub_10009D028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  void *v10;
  void *v11;
  _BYTE v12[24];

  v2 = a2 + 16;
  if (qword_1001A30F0 != -1)
    swift_once(&qword_1001A30F0, sub_10009C5BC);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_10000E8E8(v3, (uint64_t)qword_1001A7270);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "dismissPressed in B389ErrorViewController", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_beginAccess(v2, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v10 = (void *)Strong;
    v11 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC18SharingViewService23B389ErrorViewController_mainController);

    if (v11)
    {
      objc_msgSend(v11, "dismiss:", 5);

    }
  }
}

void sub_10009D158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_10009D1DC();

  }
}

uint64_t sub_10009D1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100006A6C(&qword_1001A3618);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A30F0 != -1)
    swift_once(&qword_1001A30F0, sub_10009C5BC);
  v6 = type metadata accessor for Logger(0, v3);
  v7 = sub_10000E8E8(v6, (uint64_t)qword_1001A7270);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    v16 = 80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "dismissPressed in %ld", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }

  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC18SharingViewService23B389ErrorViewController_mainController);
  if (result)
  {
    v13 = (void *)result;
    v14 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
    sub_1000356AC(5, (uint64_t)v5, 0, 0, 81);

    return sub_10000E92C((uint64_t)v5);
  }
  return result;
}

id sub_10009D3B0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for B389ErrorViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for B389ErrorViewController()
{
  return objc_opt_self(_TtC18SharingViewService23B389ErrorViewController);
}

uint64_t destroy for B389ErrorButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for B389ErrorButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for B389ErrorButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for B389ErrorButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for B389ErrorButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for B389ErrorButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for B389ErrorButton()
{
  return &type metadata for B389ErrorButton;
}

uint64_t sub_10009D600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_10009D624(uint64_t a1)
{
  uint64_t v1;

  sub_10009D028(a1, v1);
}

uint64_t sub_10009D62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009D63C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009D644()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009D670()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

void sub_10009D690(uint64_t a1)
{
  uint64_t v1;

  sub_10009D158(a1, v1);
}

uint64_t sub_10009D6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A72C8);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A72C8);
  if (qword_1001A2F00 != -1)
    swift_once(&qword_1001A2F00, sub_100018D74);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD4B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_10009D738(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_navigationController);
  if (v3)
  {
    v5 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController) = a1;
    v11 = v3;
    v6 = a1;

    -[NSObject pushViewController:animated:](v11, "pushViewController:animated:", v6, 1);
  }
  else
  {
    if (qword_1001A30F8 != -1)
      swift_once(&qword_1001A30F8, sub_10009D6A8);
    v7 = type metadata accessor for Logger(0, a2);
    v8 = sub_10000E8E8(v7, (uint64_t)qword_1001A72C8);
    v11 = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v9, "Cannot show a card without presenting the initial card first.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
  }

}

void sub_10009D860(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_dismissed) & 1) == 0)
  {
    v3 = v2;
    *(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_dismissed) = 1;
    if (qword_1001A30F8 != -1)
      swift_once(&qword_1001A30F8, sub_10009D6A8);
    v5 = type metadata accessor for Logger(0, a2);
    v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A72C8);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.default.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v19 = v11;
      *(_DWORD *)v10 = 136315138;
      LODWORD(v18) = a1;
      type metadata accessor for SVSUserActionType(0);
      v13 = String.init<A>(reflecting:)(&v18, v12);
      v15 = v14;
      v18 = sub_10001EFA4(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "AuthenticateAccounts -- dismiss {type: %s}", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    v16 = *(void **)(v3 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_navigationController);
    if (v16)
      objc_msgSend(v16, "dismissViewControllerAnimated:completion:", 1, 0);
    v17 = *(void **)(v3 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController) = 0;

  }
}

id sub_10009DAA8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AuthenticateAccountsRouter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AuthenticateAccountsRouter()
{
  return objc_opt_self(_TtC18SharingViewService26AuthenticateAccountsRouter);
}

uint64_t sub_10009DB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7328);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7328);
  if (qword_1001A2EE8 != -1)
    swift_once(&qword_1001A2EE8, sub_100018C94);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD468);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_10009DBD0(uint64_t a1)
{
  __asm { BR              X10 }
}

void *sub_10009DC04()
{
  void *v0;
  id v1;

  v1 = v0;
  return v0;
}

uint64_t sub_10009DC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&loc_10009DC34 + 4 * byte_100134884[v2]))(4, a2, 3);
}

void sub_10009DC78(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;

  if (a4 == 3)
  {
    if (a2 ^ 3 | v5)
    {
      if (!(a2 | v5))
      {
        v8 = *(unsigned __int8 *)(v4 + *(int *)(type metadata accessor for D2DSetupModel(0) + 88));
        if (v8 != 2 && (v8 & 1) == 0)
LABEL_12:
          JUMPOUT(0x10009DC34);
      }
    }
    else if ((*(_BYTE *)(v4 + *(int *)(type metadata accessor for D2DSetupModel(0) + 88)) & 1) != 0)
    {
      goto LABEL_12;
    }
  }
  sub_10007D610((id)a2, v5, a4);
  goto LABEL_12;
}

void sub_10009DE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  void **p_cache;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t Strong;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void (*v59)(uint64_t, _UNKNOWN **, __int128 *, uint64_t, uint64_t);
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  _DWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint8_t *v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _DWORD *v84;
  __n128 v85;
  uint64_t v86;
  __n128 v87;
  NSObject *v88;
  uint64_t v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD v96[12];
  uint64_t v97;
  _OWORD v98[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _OWORD v110[12];
  _OWORD v111[12];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;

  v1 = v0;
  v93 = type metadata accessor for D2DSetupModel(0);
  v2 = __chkstk_darwin(v93);
  v4 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v7 = (char *)&v92 - v6;
  if (qword_1001A3100 != -1)
    swift_once(&qword_1001A3100, sub_10009DB40);
  v8 = type metadata accessor for Logger(0, v5);
  v9 = sub_10000E8E8(v8, (uint64_t)qword_1001A7328);
  v10 = swift_retain_n(v1, 4);
  v94 = v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  p_cache = &OBJC_METACLASS___SVSInterventionViewController.cache;
  v14 = &OBJC_METACLASS___SVSInterventionViewController.cache;
  if (os_log_type_enabled(v11, v12))
  {
    v15 = swift_slowAlloc(22, -1);
    v92 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v111[0] = v92;
    *(_DWORD *)v15 = 136315394;
    v16 = v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_model;
    swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_model, &v95, 0, 0);
    sub_10007D3F0(v16, (uint64_t)v7);
    sub_10007D3F0((uint64_t)v7, (uint64_t)v4);
    v17 = String.init<A>(reflecting:)(v4, v93);
    v19 = v18;
    sub_10007D478((uint64_t)v7);
    *(_QWORD *)&v112 = sub_10001EFA4(v17, v19, (uint64_t *)v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 8, v15 + 4, v15 + 12);
    swift_release_n(v1, 2, v20);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2080;
    v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state + 8);
    v22 = *(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state + 16);
    *(_QWORD *)&v112 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state);
    *((_QWORD *)&v112 + 1) = v21;
    LOBYTE(v113) = v22;
    sub_10007D610((id)v112, v21, v22);
    v23 = String.init<A>(reflecting:)(&v112, &type metadata for D2DSetupState);
    v25 = v24;
    *(_QWORD *)&v112 = sub_10001EFA4(v23, v24, (uint64_t *)v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 8, v15 + 14, v15 + 22);
    swift_release_n(v1, 2, v26);
    v27 = v25;
    v14 = (void **)(&OBJC_METACLASS___SVSInterventionViewController + 16);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Model: %s, State: %s", (uint8_t *)v15, 0x16u);
    v28 = v92;
    swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v29 = v15;
    p_cache = (void **)(&OBJC_METACLASS___SVSInterventionViewController + 16);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_release_n(v1, 4, v30);
  }
  v31 = (uint64_t)p_cache[104] + v1;
  swift_beginAccess(v31, &v109, 0, 0);
  sub_10007D3F0(v31, (uint64_t)v7);
  v32 = (char *)v14[105] + v1;
  v33 = *(_QWORD *)v32;
  v34 = *((_QWORD *)v32 + 1);
  v35 = v32[16];
  sub_10007D610(*(id *)v32, v34, v35);
  sub_10009FD58((uint64_t)v7, v33, v34, v35);
  v36 = (__int128 *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel);
  v37 = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 144);
  v110[8] = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 128);
  v110[9] = v37;
  v38 = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 176);
  v110[10] = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 160);
  v110[11] = v38;
  v39 = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 80);
  v110[4] = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 64);
  v110[5] = v39;
  v40 = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 112);
  v110[6] = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 96);
  v110[7] = v40;
  v41 = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 16);
  v110[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel);
  v110[1] = v41;
  v42 = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 48);
  v110[2] = *(_OWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 32);
  v110[3] = v42;
  v43 = v111[9];
  v36[8] = v111[8];
  v36[9] = v43;
  v44 = v111[11];
  v36[10] = v111[10];
  v36[11] = v44;
  v45 = v111[5];
  v36[4] = v111[4];
  v36[5] = v45;
  v46 = v111[7];
  v36[6] = v111[6];
  v36[7] = v46;
  v47 = v111[1];
  *v36 = v111[0];
  v36[1] = v47;
  v48 = v111[3];
  v36[2] = v111[2];
  v36[3] = v48;
  sub_100014330((uint64_t)v111);
  sub_10009FC78((uint64_t)v110);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v50 = Strong;
    v51 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType(Strong);
    v53 = v36[9];
    v120 = v36[8];
    v121 = v53;
    v54 = v36[11];
    v122 = v36[10];
    v123 = v54;
    v55 = v36[5];
    v116 = v36[4];
    v117 = v55;
    v56 = v36[7];
    v118 = v36[6];
    v119 = v56;
    v57 = v36[1];
    v112 = *v36;
    v113 = v57;
    v58 = v36[3];
    v114 = v36[2];
    v115 = v58;
    v59 = *(void (**)(uint64_t, _UNKNOWN **, __int128 *, uint64_t, uint64_t))(v51 + 32);
    sub_100014330((uint64_t)&v112);
    v59(v1, &off_10017B9E0, &v112, ObjectType, v51);
    swift_unknownObjectRelease(v50);
    sub_10009FC78((uint64_t)&v112);
  }
  sub_10009FC78((uint64_t)v111);
  v60 = swift_retain_n(v1, 2);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v92 = v31;
    *(_DWORD *)v63 = 136315138;
    v65 = v63 + 12;
    v66 = v36[9];
    v67 = v36[7];
    v105 = v36[8];
    v106 = v66;
    v68 = v36[9];
    v69 = v36[11];
    v107 = v36[10];
    v108 = v69;
    v70 = v36[5];
    v71 = v36[3];
    v101 = v36[4];
    v102 = v70;
    v72 = v36[5];
    v73 = v36[7];
    v103 = v36[6];
    v104 = v73;
    v74 = v36[1];
    v98[0] = *v36;
    v98[1] = v74;
    v75 = v36[3];
    v77 = *v36;
    v76 = v36[1];
    v99 = v36[2];
    v100 = v75;
    v96[9] = v68;
    v96[10] = v107;
    v96[11] = v36[11];
    v96[4] = v101;
    v96[5] = v72;
    v96[6] = v103;
    v96[7] = v67;
    v96[8] = v105;
    v96[0] = v77;
    v96[1] = v76;
    v97 = v64;
    v78 = v64;
    v79 = v63;
    v80 = v63 + 4;
    v96[2] = v99;
    v96[3] = v71;
    sub_100014330((uint64_t)v98);
    v81 = String.init<A>(reflecting:)(v96, &type metadata for D2DSetupViewModel);
    v83 = v82;
    *(_QWORD *)&v96[0] = sub_10001EFA4(v81, v82, &v97);
    v84 = v65;
    v31 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v96, (char *)v96 + 8, v80, v84);
    swift_release_n(v1, 2, v85);
    swift_bridgeObjectRelease(v83);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "ViewModel: %s", v79, 0xCu);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v79, -1, -1);

  }
  else
  {

    v86 = swift_release_n(v1, 2, v87);
  }
  if (v32[16] >= 3u && *(_OWORD *)v32 == 0 && *(_BYTE *)(v31 + *(int *)(v93 + 80)) == 1)
  {
    v88 = Logger.logObject.getter(v86);
    v90 = static os_log_type_t.default.getter(v88, v89);
    if (os_log_type_enabled(v88, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v90, "D2D Setup request start setup process", v91, 2u);
      swift_slowDealloc(v91, -1, -1);
    }

    sub_1000734EC();
  }
}

void sub_10009E4A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD v13[77];
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for D2DSetupModel(0);
  __chkstk_darwin(v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state;
  v6 = *(void **)(v0 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_model;
  v9 = *(_BYTE *)(v5 + 16);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_model, &v14, 0, 0);
  sub_10007D3F0(v8, (uint64_t)v4);
  sub_10007D610(v6, v7, v9);
  sub_10009DBD0((uint64_t)v4);
  v13[1] = v10;
  v12 = v11;
  sub_10007D5D0(v6, v7, v9);
  sub_10007D478((uint64_t)v4);
  __asm { BR              X11 }
}

void sub_10009E5B0(int a1@<W8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (*v37)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  __n128 v43;
  uint8_t *v44;
  uint64_t v45;
  _DWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _DWORD *v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __n128 v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char v75;

  if (a1
    || (sub_100013194(0, (unint64_t *)&qword_1001A7260, NSObject_ptr),
        sub_10007D610(v9, v8, 0),
        sub_10007D610(v5, v1[1], 0),
        v10 = static NSObject.== infix(_:_:)(v5, v9),
        sub_10007D5D0(v5, v1[1], 0),
        sub_10007D5D0(v9, v8, 0),
        (v10 & 1) == 0))
  {
    v72 = *(id *)v4;
    v73 = *(_QWORD *)(v4 + 8);
    v74 = v1[1];
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 8) = v74;
    v75 = *(_BYTE *)(v4 + 16);
    *(_BYTE *)(v4 + 16) = v3;
    sub_10007D610(v5, v74, v3);
    sub_10007D5D0(v72, v73, v75);
    sub_10009EA88();
    sub_10007D5D0(v5, v74, v3);
  }
  else
  {
    sub_10007D3F0(v7, v6);
    v11 = *(_QWORD *)v4;
    v12 = *(_QWORD *)(v4 + 8);
    v13 = *(_BYTE *)(v4 + 16);
    sub_10007D610(*(id *)v4, v12, v13);
    sub_10009FD58(v6, v11, v12, v13);
    v14 = (_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel);
    v15 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 144);
    *((_OWORD *)v1 + 34) = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 128);
    *((_OWORD *)v1 + 35) = v15;
    v16 = v14[11];
    *((_OWORD *)v1 + 36) = v14[10];
    *((_OWORD *)v1 + 37) = v16;
    v17 = v14[5];
    *((_OWORD *)v1 + 30) = v14[4];
    *((_OWORD *)v1 + 31) = v17;
    v18 = v14[7];
    *((_OWORD *)v1 + 32) = v14[6];
    *((_OWORD *)v1 + 33) = v18;
    v19 = v14[1];
    *((_OWORD *)v1 + 26) = *v14;
    *((_OWORD *)v1 + 27) = v19;
    v20 = v14[3];
    *((_OWORD *)v1 + 28) = v14[2];
    *((_OWORD *)v1 + 29) = v20;
    v21 = *((_OWORD *)v1 + 49);
    v14[8] = *((_OWORD *)v1 + 48);
    v14[9] = v21;
    v22 = *((_OWORD *)v1 + 51);
    v14[10] = *((_OWORD *)v1 + 50);
    v14[11] = v22;
    v23 = *((_OWORD *)v1 + 45);
    v14[4] = *((_OWORD *)v1 + 44);
    v14[5] = v23;
    v24 = *((_OWORD *)v1 + 47);
    v14[6] = *((_OWORD *)v1 + 46);
    v14[7] = v24;
    v25 = *((_OWORD *)v1 + 41);
    *v14 = *((_OWORD *)v1 + 40);
    v14[1] = v25;
    v26 = *((_OWORD *)v1 + 43);
    v14[2] = *((_OWORD *)v1 + 42);
    v14[3] = v26;
    sub_100014330((uint64_t)(v1 + 80));
    sub_10009FC78((uint64_t)(v1 + 52));
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
    if (Strong)
    {
      v28 = Strong;
      v29 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType(Strong);
      v31 = v14[9];
      *((_OWORD *)v1 + 60) = v14[8];
      *((_OWORD *)v1 + 61) = v31;
      v32 = v14[11];
      *((_OWORD *)v1 + 62) = v14[10];
      *((_OWORD *)v1 + 63) = v32;
      v33 = v14[5];
      *((_OWORD *)v1 + 56) = v14[4];
      *((_OWORD *)v1 + 57) = v33;
      v34 = v14[7];
      *((_OWORD *)v1 + 58) = v14[6];
      *((_OWORD *)v1 + 59) = v34;
      v35 = v14[1];
      *((_OWORD *)v1 + 52) = *v14;
      *((_OWORD *)v1 + 53) = v35;
      v36 = v14[3];
      *((_OWORD *)v1 + 54) = v14[2];
      *((_OWORD *)v1 + 55) = v36;
      v37 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v29 + 32);
      sub_100014330((uint64_t)(v1 + 104));
      v37(v2, &off_10017B9E0, (uint64_t)(v1 + 104), ObjectType, v29);
      swift_unknownObjectRelease(v28);
      sub_10009FC78((uint64_t)(v1 + 104));
    }
    sub_10009FC78((uint64_t)(v1 + 80));
    if (qword_1001A3100 != -1)
      swift_once(&qword_1001A3100, sub_10009DB40);
    v39 = type metadata accessor for Logger(0, v38);
    sub_10000E8E8(v39, (uint64_t)qword_1001A7328);
    v40 = swift_retain_n(v2, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
    if (os_log_type_enabled(v41, v42))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      *v1 = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = v44 + 12;
      v48 = v14[8];
      v47 = v14[9];
      v49 = v14[7];
      *((_OWORD *)v1 + 22) = v48;
      *((_OWORD *)v1 + 23) = v47;
      v50 = v14[9];
      v52 = v14[10];
      v51 = v14[11];
      *((_OWORD *)v1 + 24) = v52;
      *((_OWORD *)v1 + 25) = v51;
      v54 = v14[4];
      v53 = v14[5];
      v55 = v14[3];
      *((_OWORD *)v1 + 18) = v54;
      *((_OWORD *)v1 + 19) = v53;
      v56 = v14[5];
      v58 = v14[6];
      v57 = v14[7];
      *((_OWORD *)v1 + 20) = v58;
      *((_OWORD *)v1 + 21) = v57;
      v59 = v14[1];
      *((_OWORD *)v1 + 14) = *v14;
      *((_OWORD *)v1 + 15) = v59;
      v60 = v14[3];
      v62 = *v14;
      v61 = v14[1];
      v63 = v14[2];
      *((_OWORD *)v1 + 16) = v63;
      *((_OWORD *)v1 + 17) = v60;
      *((_OWORD *)v1 + 9) = v48;
      *((_OWORD *)v1 + 10) = v50;
      v64 = v14[11];
      *((_OWORD *)v1 + 11) = v52;
      *((_OWORD *)v1 + 12) = v64;
      *((_OWORD *)v1 + 5) = v54;
      *((_OWORD *)v1 + 6) = v56;
      *((_OWORD *)v1 + 7) = v58;
      *((_OWORD *)v1 + 8) = v49;
      *((_OWORD *)v1 + 1) = v62;
      *((_OWORD *)v1 + 2) = v61;
      v1[27] = v45;
      v65 = v44 + 4;
      v66 = v44;
      *((_OWORD *)v1 + 3) = v63;
      *((_OWORD *)v1 + 4) = v55;
      sub_100014330((uint64_t)(v1 + 28));
      v67 = String.init<A>(reflecting:)(v1 + 2, &type metadata for D2DSetupViewModel);
      v69 = v68;
      v1[2] = sub_10001EFA4(v67, v68, v1 + 27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v65, v46);
      swift_release_n(v2, 2, v70);
      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "ViewModel: %s", v66, 0xCu);
      v71 = *v1;
      swift_arrayDestroy(*v1, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      swift_release_n(v2, 2, v43);
    }
    sub_10007D5D0(v5, v1[1], v3);

  }
}

void sub_10009EA88()
{
  __asm { BR              X10 }
}

void sub_10009EAC8()
{
  void *v0;
  uint64_t v1;

  sub_100088520(v0);
  sub_10007D5D0(v0, v1, 0);
}

uint64_t sub_10009EB44()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_10009EB5C + 4 * byte_1001348A3[v0]))();
}

void sub_10009EB5C()
{
  sub_100088324();
  JUMPOUT(0x10009EAFCLL);
}

void sub_10009EB70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  id v12;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_router);
  if (qword_1001A3048 != -1)
    swift_once(&qword_1001A3048, sub_100088280);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A6720);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "D2D Setup showing Visual Auth card", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_allocWithZone((Class)type metadata accessor for D2DSetupVisualAuthViewController(0));
  v12 = sub_100013AEC((uint64_t)v10, v11);
  sub_10009F600((uint64_t)v12, v3);

}

uint64_t sub_10009ED50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[12];

  sub_100013338(v2 + 16, a2);
  sub_10007D478(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_model);
  sub_10007D5D0(*(void **)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state), *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state + 8), *(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_state + 16));
  v3 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 144);
  v10[8] = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 128);
  v10[9] = v3;
  v4 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 176);
  v10[10] = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 160);
  v10[11] = v4;
  v5 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 80);
  v10[4] = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 112);
  v10[6] = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 96);
  v10[7] = v6;
  v7 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 16);
  v10[0] = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel);
  v10[1] = v7;
  v8 = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 48);
  v10[2] = *(_OWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_viewModel + 32);
  v10[3] = v8;
  sub_10009FC78((uint64_t)v10);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_interactor));
  swift_unknownObjectRelease(*(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_router));
  return swift_deallocClassInstance(v2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

uint64_t sub_10009EE10()
{
  return type metadata accessor for D2DSetupPresenter(0);
}

uint64_t type metadata accessor for D2DSetupPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_1001A7390;
  if (!qword_1001A7390)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for D2DSetupPresenter);
  return result;
}

uint64_t sub_10009EE54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100134928;
  result = type metadata accessor for D2DSetupModel(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100134940;
    v4[3] = &unk_100134958;
    v4[4] = &unk_100134970;
    v4[5] = &unk_100134970;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for D2DSetupState()
{
  return &type metadata for D2DSetupState;
}

void sub_10009EEFC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (qword_1001A3100 != -1)
    swift_once(&qword_1001A3100, sub_10009DB40);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_10000E8E8(v3, (uint64_t)qword_1001A7328);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "D2D Setup request handle device setup notification)", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_100072CA8(a1);
}

uint64_t sub_10009EFEC(uint64_t a1, unint64_t a2)
{
  return sub_10009F014(a1, a2, "D2D Setup request handle scanned code:  '%s'", (uint64_t (*)(uint64_t, unint64_t))sub_100075B04);
}

uint64_t sub_10009F000(uint64_t a1, unint64_t a2)
{
  return sub_10009F014(a1, a2, "D2D Setup request handle PIN entered: '%s'", (uint64_t (*)(uint64_t, unint64_t))sub_100075FCC);
}

uint64_t sub_10009F014(uint64_t a1, unint64_t a2, const char *a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (qword_1001A3100 != -1)
    swift_once(&qword_1001A3100, sub_10009DB40);
  v8 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v8, (uint64_t)qword_1001A7328);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v19 = v14;
    *(_DWORD *)v13 = 136315138;
    if (IsAppleInternalBuild())
    {
      swift_bridgeObjectRetain(a2);
      v15 = a1;
      v16 = a2;
    }
    else
    {
      v16 = 0xE100000000000000;
      v15 = 42;
    }
    v18 = sub_10001EFA4(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, a3, v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  return a4(a1, a2);
}

void sub_10009F1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, __n128);
  uint64_t v12;
  __n128 v13;

  v3 = v2;
  if (qword_1001A3100 != -1)
    swift_once(&qword_1001A3100, sub_10009DB40);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7328);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "D2D Setup request block hardware buttons", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_interactor);
  v11 = *(void (**)(uint64_t, __n128))(v10 + 48);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 56);
    v13 = swift_retain(v12);
    v11(17, v13);
    sub_100012F60((uint64_t)v11, v12);
  }
}

void sub_10009F30C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(__n128);
  uint64_t v12;
  __n128 v13;

  v3 = v2;
  if (qword_1001A3100 != -1)
    swift_once(&qword_1001A3100, sub_10009DB40);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7328);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "D2D Setup request reset hardware button functionality", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_interactor);
  v11 = *(void (**)(__n128))(v10 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 72);
    v13 = swift_retain(v12);
    v11(v13);
    sub_100012F60((uint64_t)v11, v12);
  }
}

void sub_10009F418(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;

  v3 = v2;
  if (qword_1001A3100 != -1)
    swift_once(&qword_1001A3100, sub_10009DB40);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7328);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "D2D Setup request What's Next", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  if (qword_1001A3018 != -1)
    swift_once(&qword_1001A3018, sub_10007279C);
  v10 = sub_10000E8E8(v4, (uint64_t)qword_1001A60D8);
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v13, "Start What's Next flow in Settings", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  objc_msgSend((id)objc_opt_self(DKFollowUp), "postFollowUp");
  sub_10007CF0C();
  *(_BYTE *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService17D2DSetupPresenter_router)
           + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_dismissedForExternalContent) = 0;
  sub_10008911C(5, 1);
}

void sub_10009F5E0(uint64_t a1)
{
  sub_10009FA68(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10009F600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, _UNKNOWN **, __n128);
  uint64_t v11;
  __n128 v12;
  void *v13;
  uint64_t v15;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1001A3050, sub_100088310);
    goto LABEL_7;
  }
  v10 = *(void (**)(uint64_t, _UNKNOWN **, __n128))(a2
                                                            + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_prepareForPresentation);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_prepareForPresentation + 8);
    v12 = swift_retain(v11);
    v10(a1, &off_100177CA8, v12);
    sub_100012F60((uint64_t)v10, v11);
  }
  v13 = *(void **)(a2 + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_navigationController);
  if (v13)
    objc_msgSend(v13, "pushViewController:animated:", a1, 1);
  v9 = (uint64_t)&off_100177CA8;
  if (qword_1001A3050 != -1)
    goto LABEL_9;
LABEL_7:
  qword_1001A6740 = v9;
  return swift_unknownObjectWeakAssign(&unk_1001A6738, a1);
}

uint64_t sub_10009F778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, _UNKNOWN **, __n128);
  uint64_t v11;
  __n128 v12;
  void *v13;
  uint64_t v15;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1001A3050, sub_100088310);
    goto LABEL_7;
  }
  v10 = *(void (**)(uint64_t, _UNKNOWN **, __n128))(a2
                                                            + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_prepareForPresentation);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_prepareForPresentation + 8);
    v12 = swift_retain(v11);
    v10(a1, &off_100177CD0, v12);
    sub_100012F60((uint64_t)v10, v11);
  }
  v13 = *(void **)(a2 + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_navigationController);
  if (v13)
    objc_msgSend(v13, "pushViewController:animated:", a1, 1);
  v9 = (uint64_t)&off_100177CD0;
  if (qword_1001A3050 != -1)
    goto LABEL_9;
LABEL_7:
  qword_1001A6740 = v9;
  return swift_unknownObjectWeakAssign(&unk_1001A6738, a1);
}

uint64_t sub_10009F8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, _UNKNOWN **, __n128);
  uint64_t v11;
  __n128 v12;
  void *v13;
  uint64_t v15;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1001A3050, sub_100088310);
    goto LABEL_7;
  }
  v10 = *(void (**)(uint64_t, _UNKNOWN **, __n128))(a2
                                                            + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_prepareForPresentation);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_prepareForPresentation + 8);
    v12 = swift_retain(v11);
    v10(a1, &off_100177CF8, v12);
    sub_100012F60((uint64_t)v10, v11);
  }
  v13 = *(void **)(a2 + OBJC_IVAR____TtC18SharingViewService14D2DSetupRouter_navigationController);
  if (v13)
    objc_msgSend(v13, "pushViewController:animated:", a1, 1);
  v9 = (uint64_t)&off_100177CF8;
  if (qword_1001A3050 != -1)
    goto LABEL_9;
LABEL_7:
  qword_1001A6740 = v9;
  return swift_unknownObjectWeakAssign(&unk_1001A6738, a1);
}

void sub_10009FA68(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10009FAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;

  if (a6)
    return 0;
  sub_100013194(0, (unint64_t *)&qword_1001A7260, NSObject_ptr);
  sub_10007D610(v8, v9, 0);
  sub_10007D610(v7, v6, 0);
  v10 = static NSObject.== infix(_:_:)(v8, v7);
  sub_10007D5D0(v7, v6, 0);
  sub_10007D5D0(v8, v9, 0);
  return v10 & 1;
}

uint64_t sub_10009FC78(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 176);
  v14 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 184);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  sub_100014544(v18, v17, v16, v15, v10, v14, v13, v12);
  return a1;
}

void sub_10009FD58(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;

  v5 = type metadata accessor for D2DSetupModel(0);
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  sub_100064C34(&v7);
  __asm { BR              X10 }
}

uint64_t sub_10009FE58()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10007D5D0(v1, v2, 0);
  sub_10007D478(v3);
  *(_QWORD *)(v4 - 408) = 0;
  *(_QWORD *)(v4 - 432) = 0;
  *(_QWORD *)(v4 - 440) = 0;
  *(_QWORD *)(v4 - 376) = 0;
  *(_QWORD *)(v4 - 368) = 0;
  *(_QWORD *)(v4 - 400) = 0;
  *(_QWORD *)(v4 - 384) = 0;
  *(_QWORD *)(v4 - 392) = 0;
  swift_bridgeObjectRelease_n(0, 4);
  result = sub_100014544(0, 0, 0, 0, 0, 0, 0, 0);
  *(_BYTE *)(v4 - 296) = 1;
  *(_QWORD *)v0 = *(_QWORD *)(v4 - 408);
  *(_QWORD *)(v0 + 8) = 0;
  v6 = *(_QWORD *)(v4 - 384);
  *(_QWORD *)(v0 + 16) = 0xE000000000000000;
  *(_QWORD *)(v0 + 24) = v6;
  v7 = *(_QWORD *)(v4 - 392);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v4 - 400);
  *(_QWORD *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 84) = 1;
  v8 = *(_QWORD *)(v4 - 368);
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v4 - 376);
  *(_QWORD *)(v0 + 96) = v8;
  v9 = *(_QWORD *)(v4 - 440);
  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v4 - 432);
  *(_QWORD *)(v0 + 112) = v9;
  v10 = *(_QWORD *)(v4 - 304);
  *(_QWORD *)(v0 + 120) = 3;
  *(_QWORD *)(v0 + 128) = v10;
  v11 = *(_QWORD *)(v4 - 320);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v4 - 312);
  *(_QWORD *)(v0 + 144) = v11;
  v12 = *(_QWORD *)(v4 - 336);
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v0 + 160) = v12;
  v13 = *(_QWORD *)(v4 - 352);
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v4 - 344);
  *(_QWORD *)(v0 + 176) = v13;
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v4 - 360);
  return result;
}

uint64_t sub_1000A0384()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000A038C + *((int *)qword_1000A2CD0 + v0)))();
}

void sub_1000A039C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  const char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  Swift::String v17;
  const char *v18;
  UIImage *v19;
  id v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String_optional v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  void *object;
  id v44;
  NSString v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  NSString v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  Swift::String v62;
  Swift::String_optional v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  Swift::String v70;
  Swift::String_optional v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  char **v82;
  id v83;
  Swift::String v84;
  Swift::String_optional v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;

  v5 = String._bridgeToObjectiveC()();
  v6 = v1[25];
  *(_QWORD *)(v4 - 376) = v6;
  v7 = (const char *)*(unsigned __int8 *)(v3 + v6);
  v8 = sub_1001164E8(v5, v7);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = (void *)objc_opt_self(NSBundle);
  v13 = objc_msgSend(v12, "mainBundle");
  v88._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = v9;
  v14._object = v11;
  v15.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v15.value._object = (void *)0xEB00000000656C62;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v88._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v88);
  *(_QWORD *)(v4 - 448) = v17._countAndFlagsBits;
  *(_QWORD *)(v4 - 456) = v17._object;
  swift_bridgeObjectRelease(v11);

  v18 = v7;
  v19 = sub_100117324((char)v7, *(unsigned __int8 *)(v3 + v1[26]));
  LOBYTE(v11) = *(_BYTE *)(v3 + v1[21]);
  *(_QWORD *)(v4 - 368) = v12;
  v20 = objc_msgSend(v12, "mainBundle");
  *(_QWORD *)(v4 - 384) = v19;
  if ((v11 & 1) != 0)
  {
    v21._countAndFlagsBits = 0xD00000000000001CLL;
    v89._object = (void *)0xE000000000000000;
    v21._object = (void *)0x800000010013D170;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v89._countAndFlagsBits = 0;
    v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v89);
    *(_QWORD *)(v4 - 464) = v24._countAndFlagsBits;
    *(_QWORD *)(v4 - 472) = v24._object;

LABEL_6:
    v34 = String._bridgeToObjectiveC()();
    v35 = sub_1001164E8(v34, v18);

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v39 = objc_msgSend(*(id *)(v4 - 368), "mainBundle");
    v91._object = (void *)0xE000000000000000;
    v40._countAndFlagsBits = v36;
    v40._object = v38;
    v41.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v41.value._object = (void *)0xEB00000000656C62;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v91._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v91)._object;
    swift_bridgeObjectRelease(v38);

    v44 = objc_allocWithZone((Class)NSAttributedString);
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v46 = objc_msgSend(v44, "initWithString:", v45);

LABEL_18:
    v78 = *(_QWORD *)v3;
    v79 = *(_QWORD *)(v3 + 8);
    v80 = *(unsigned __int8 *)(v3 + 16);
    sub_10007D3F0(v3, v0);
    if (v80 != 3 || v79 | v78)
    {
      sub_10007D478(v0);
      v82 = &selRef_errorWithDomain_code_userInfo_;
    }
    else
    {
      v81 = *(_BYTE *)(v0 + v1[20]);
      sub_10007D478(v0);
      v82 = &selRef_errorWithDomain_code_userInfo_;
      if ((v81 & 1) == 0)
      {
        sub_1000A2CF4((_QWORD *)(v4 - 168));
        *(_QWORD *)(v4 - 304) = 0;
        *(_QWORD *)(v4 - 312) = 0;
        *(_QWORD *)(v4 - 320) = 0;
        *(_QWORD *)(v4 - 328) = 0;
        *(_QWORD *)(v4 - 336) = 0;
        *(_QWORD *)(v4 - 344) = 0;
        *(_QWORD *)(v4 - 352) = 0;
        *(_QWORD *)(v4 - 360) = 0;
        *(_QWORD *)(v4 - 432) = 0;
        *(_QWORD *)(v4 - 440) = 0;
LABEL_24:
        *(_QWORD *)(v4 - 392) = v46;
        sub_10007D478(v3);
        *(_QWORD *)(v4 - 408) = 0;
        *(_QWORD *)(v4 - 376) = 0;
        *(_QWORD *)(v4 - 368) = 0;
        *(_QWORD *)(v4 - 400) = 0;
        JUMPOUT(0x1000A0270);
      }
    }
    v83 = objc_msgSend(*(id *)(v4 - 368), v82[151]);
    v84._countAndFlagsBits = 0xD000000000000014;
    v94._object = (void *)0xE000000000000000;
    v84._object = (void *)0x800000010013D0A0;
    v85.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v85.value._object = (void *)0xEB00000000656C62;
    v86._countAndFlagsBits = 0;
    v86._object = (void *)0xE000000000000000;
    v94._countAndFlagsBits = 0;
    v87 = NSLocalizedString(_:tableName:bundle:value:comment:)(v84, v85, (NSBundle)v83, v86, v94);
    *(_QWORD *)(v4 - 432) = v87._countAndFlagsBits;
    *(_QWORD *)(v4 - 440) = v87._object;

    goto LABEL_24;
  }
  v25._countAndFlagsBits = 0xD000000000000012;
  v90._object = (void *)0xE000000000000000;
  v25._object = (void *)0x800000010013CFA0;
  v26.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v26.value._object = (void *)0xEB00000000656C62;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v90._countAndFlagsBits = 0;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, (NSBundle)v20, v27, v90);

  v29 = (uint64_t *)(v3 + v1[7]);
  v30 = v29[1];
  *(_QWORD *)(v4 - 464) = v28._countAndFlagsBits;
  *(_QWORD *)(v4 - 472) = v28._object;
  if (!v30)
    goto LABEL_6;
  v31 = *v29;
  *(_QWORD *)(v4 - 296) = *v29;
  *(_QWORD *)(v4 - 288) = v30;
  *(_QWORD *)(v4 - 256) = 64;
  *(_QWORD *)(v4 - 248) = 0xE100000000000000;
  v32 = sub_1000A2D48();
  swift_bridgeObjectRetain(v30);
  v33 = v30;
  if ((StringProtocol.contains<A>(_:)(v4 - 256, &type metadata for String, &type metadata for String, v32, v32) & 1) != 0)
  {
    *(_QWORD *)(v4 - 400) = v30;
    *(_QWORD *)(v4 - 392) = v31;
  }
  else
  {
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v48 = (id)SFLocalizePhoneNumber(v47);

    *(_QWORD *)(v4 - 392) = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    *(_QWORD *)(v4 - 400) = v49;

  }
  v50 = *(unsigned __int8 *)(v3 + v1[8]);
  sub_10007D3F0(v3, v2);
  if (v50 > 0xB)
  {
    v51 = *(_QWORD *)(v2 + v1[7] + 8);
    swift_bridgeObjectRetain(v51);
    sub_10007D478(v2);
    if (v51)
    {
      swift_bridgeObjectRelease(v51);
      *(_QWORD *)(v4 - 272) = &type metadata for AppleAccountFeatureFlags;
      *(_QWORD *)(v4 - 264) = sub_1000A2D8C();
      v52 = isFeatureEnabled(_:)(v4 - 296);
      sub_100024118((_QWORD *)(v4 - 296));
      if ((v52 & 1) != 0)
        v53 = 0x800000010013D140;
      else
        v53 = 0x800000010013D110;
      goto LABEL_17;
    }
  }
  else
  {
    sub_10007D478(v2);
  }
  *(_QWORD *)(v4 - 272) = &type metadata for AppleAccountFeatureFlags;
  *(_QWORD *)(v4 - 264) = sub_1000A2D8C();
  v54 = isFeatureEnabled(_:)(v4 - 296);
  sub_100024118((_QWORD *)(v4 - 296));
  if ((v54 & 1) != 0)
    v53 = 0x800000010013D0E0;
  else
    v53 = 0x800000010013D0C0;
LABEL_17:
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v53);
  v56 = objc_retainAutoreleasedReturnValue(sub_1001164E8(v55, (const char *)*(unsigned __int8 *)(v3
                                                                                               + *(_QWORD *)(v4 - 376))));

  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v59 = v58;

  v60 = *(void **)(v4 - 368);
  v61 = objc_msgSend(v60, "mainBundle");
  v92._object = (void *)0xE000000000000000;
  v62._countAndFlagsBits = v57;
  v62._object = v59;
  v63.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v63.value._object = (void *)0xEB00000000656C62;
  v64._countAndFlagsBits = 0;
  v64._object = (void *)0xE000000000000000;
  v92._countAndFlagsBits = 0;
  v65 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v92);
  *(_QWORD *)(v4 - 408) = v65._countAndFlagsBits;
  *(_QWORD *)(v4 - 376) = v65._object;
  swift_bridgeObjectRelease(v59);

  v66 = sub_100006A6C((uint64_t *)&unk_1001A7D20);
  v67 = swift_allocObject(v66, 72, 7);
  *(_OWORD *)(v67 + 16) = xmmword_100131C40;
  *(_QWORD *)(v67 + 56) = &type metadata for String;
  *(_QWORD *)(v67 + 64) = sub_10000D794();
  v68 = *(_QWORD *)(v4 - 400);
  *(_QWORD *)(v67 + 32) = *(_QWORD *)(v4 - 392);
  *(_QWORD *)(v67 + 40) = v68;
  v69 = objc_msgSend(v60, "mainBundle");
  v93._object = (void *)0xE000000000000000;
  v70._countAndFlagsBits = 0x535F4445544F5551;
  v70._object = (void *)0xED0000474E495254;
  v71.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v71.value._object = (void *)0xEB00000000656C62;
  v72._countAndFlagsBits = 0;
  v72._object = (void *)0xE000000000000000;
  v93._countAndFlagsBits = 0;
  v73 = NSLocalizedString(_:tableName:bundle:value:comment:)(v70, v71, (NSBundle)v69, v72, v93);

  v74 = String.init(format:arguments:)(v73._countAndFlagsBits, v73._object, v67);
  v76 = v75;
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v73._object);
  v77 = *(_QWORD *)(v4 - 376);
  v46 = sub_1000A85F0(0x50415F444C4F423CLL, 0xEF3E44495F454C50, v74, v76, (uint64_t)UIFontTextStyleSubheadline, *(_QWORD *)(v4 - 408), v77);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v77);
  goto LABEL_18;
}

_QWORD *sub_1000A2CF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_1000A2D48()
{
  unint64_t result;

  result = qword_1001A74A0;
  if (!qword_1001A74A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001A74A0);
  }
  return result;
}

unint64_t sub_1000A2D8C()
{
  unint64_t result;

  result = qword_1001A74A8;
  if (!qword_1001A74A8)
  {
    result = swift_getWitnessTable(&unk_100131760, &type metadata for AppleAccountFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1001A74A8);
  }
  return result;
}

uint64_t destroy for AuthenticateAccountsAuthViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for AuthenticateAccountsAuthViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AuthenticateAccountsAuthViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for AuthenticateAccountsAuthViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AuthenticateAccountsAuthViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticateAccountsAuthViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticateAccountsAuthViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateAccountsAuthViewModel()
{
  return &type metadata for AuthenticateAccountsAuthViewModel;
}

uint64_t destroy for AuthenticateAccountsImageDefinition(uint64_t *a1)
{
  return sub_10007F198(*a1, a1[1]);
}

uint64_t _s18SharingViewService35AuthenticateAccountsImageDefinitionOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10007F0F8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AuthenticateAccountsImageDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10007F0F8(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10007F198(v6, v7);
  return a1;
}

uint64_t assignWithTake for AuthenticateAccountsImageDefinition(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10007F198(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticateAccountsImageDefinition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticateAccountsImageDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000A315C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateAccountsImageDefinition()
{
  return &type metadata for AuthenticateAccountsImageDefinition;
}

void destroy for AuthenticateAccountsViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  sub_10007F198(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t initializeWithCopy for AuthenticateAccountsViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  id v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10007F0F8(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  v9 = *(void **)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = v9;
  return a1;
}

uint64_t assignWithCopy for AuthenticateAccountsViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 48);
  sub_10007F0F8(v8, v9);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  sub_10007F198(v11, v12);
  v13 = *(void **)(a2 + 56);
  v14 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for AuthenticateAccountsViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AuthenticateAccountsViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v8;
  sub_10007F198(v9, v10);
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticateAccountsViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticateAccountsViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateAccountsViewModel()
{
  return &type metadata for AuthenticateAccountsViewModel;
}

uint64_t destroy for AuthenticateAccountsStartViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  sub_10007F198(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
}

uint64_t initializeWithCopy for AuthenticateAccountsStartViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10007F0F8(v6, v7);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  v9 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 128) = v13;
  v14 = v9;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t assignWithCopy for AuthenticateAccountsStartViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 48);
  sub_10007F0F8(v8, v9);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  sub_10007F198(v11, v12);
  v13 = *(void **)(a2 + 56);
  v14 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 initializeWithTake for AuthenticateAccountsStartViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for AuthenticateAccountsStartViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v8;
  sub_10007F198(v9, v10);
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v16;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthenticateAccountsStartViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticateAccountsStartViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateAccountsStartViewModel()
{
  return &type metadata for AuthenticateAccountsStartViewModel;
}

uint64_t sub_1000A3808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A74B0);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A74B0);
  if (qword_1001A2EE0 != -1)
    swift_once(&qword_1001A2EE0, sub_100018C80);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD450);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

id sub_1000A3898()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  __n128 v10;
  void *v11;
  objc_super v13;

  v1 = v0;
  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for B332SetupViewControllerProxy();
  objc_msgSendSuper2(&v13, "viewDidLoad");
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v3 = type metadata accessor for Logger(0, v2);
  v4 = sub_10000E8E8(v3, (uint64_t)qword_1001A74B0);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "viewDidLoad", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = *(void **)&v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_pairingAgentObserver];
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  objc_msgSend(v9, "setDispatchQueue:", v11);

  objc_msgSend(v9, "setDelegate:", v1);
  objc_msgSend(v9, "activate");
  return objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC], "setModalPresentationStyle:", 0);
}

void sub_1000A3BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v3 = v2;
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v5 = type metadata accessor for Logger(0, a2);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A74B0);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "ppUpdate", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC);
  v12 = OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC;
  v13 = *(void **)(v11 + OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC);
  if (v13)
  {
    objc_msgSend(v13, "setDeviceState:", a1);
  }
  else
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)PNPPairingViewController), "init");
    objc_msgSend(v14, "setDeviceState:", a1);
    v15 = *(void **)(v11 + v12);
    *(_QWORD *)(v11 + v12) = v14;
    v18 = v14;

    sub_1000A59A0(v16, v17);
    swift_unknownObjectWeakAssign(v11 + OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_proxy, v3);
    objc_msgSend(v18, "setAppearanceDelegate:", v3);
    objc_msgSend(v18, "setDelegate:", v3);

  }
}

void sub_1000A3DF4(char a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  objc_class *v28;
  objc_super v29;
  void **aBlock;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  objc_super v36;

  v4 = v3;
  v5 = OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_dismissed;
  if ((*((_BYTE *)v4 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_dismissed) & 1) == 0)
  {
    v9 = objc_msgSend(v4, "_remoteViewControllerProxy");
    if (v9)
    {
      v11 = v9;
      *((_BYTE *)v4 + v5) = 1;
      v12 = qword_1001A3108;
      swift_unknownObjectRetain(v9);
      if (v12 != -1)
        swift_once(&qword_1001A3108, sub_1000A3808);
      v14 = type metadata accessor for Logger(0, v13);
      v15 = sub_10000E8E8(v14, (uint64_t)qword_1001A74B0);
      v16 = Logger.logObject.getter(v15);
      v18 = static os_log_type_t.default.getter(v16, v17);
      if (os_log_type_enabled(v16, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v18, "Invalidating retainRemoteViewControllerProxy", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      if ((objc_msgSend(v11, "respondsToSelector:", "invalidate") & 1) != 0)
        objc_msgSend(v11, "invalidate");
      swift_unknownObjectRelease_n(v11, 2);
      if (a2)
      {
        v34 = a2;
        v35 = a3;
        aBlock = _NSConcreteStackBlock;
        v31 = 1107296256;
        v32 = sub_10001BB50;
        v33 = &unk_10017BD38;
        v20 = _Block_copy(&aBlock);
        v21 = v35;
        swift_retain(a3);
        swift_release(v21);
      }
      else
      {
        v20 = 0;
      }
      v29.super_class = (Class)type metadata accessor for B332SetupViewControllerProxy();
      objc_msgSendSuper2(&v29, "dismissViewControllerAnimated:completion:", a1 & 1, v20, v4, v29.super_class);
    }
    else
    {
      if (qword_1001A3108 != -1)
        swift_once(&qword_1001A3108, sub_1000A3808);
      v22 = type metadata accessor for Logger(0, v10);
      v23 = sub_10000E8E8(v22, (uint64_t)qword_1001A74B0);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "No proxy to dismiss", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      if (a2)
      {
        v34 = a2;
        v35 = a3;
        aBlock = _NSConcreteStackBlock;
        v31 = 1107296256;
        v32 = sub_10001BB50;
        v33 = &unk_10017BD10;
        v20 = _Block_copy(&aBlock);
        v27 = v35;
        swift_retain(a3);
        swift_release(v27);
      }
      else
      {
        v20 = 0;
      }
      v28 = (objc_class *)type metadata accessor for B332SetupViewControllerProxy();
      v36.receiver = v4;
      v36.super_class = v28;
      objc_msgSendSuper2(&v36, "dismissViewControllerAnimated:completion:", a1 & 1, v20, v29.receiver, v29.super_class);
    }
    _Block_release(v20);
  }
}

uint64_t sub_1000A419C(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  char v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _BYTE v34[32];
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;

  if (result)
  {
    v1 = result;
    v2 = result & 0xC000000000000001;
    if ((result & 0xC000000000000001) != 0)
    {
      if (result >= 0)
        v3 = result & 0xFFFFFFFFFFFFFF8;
      else
        v3 = result;
      swift_bridgeObjectRetain(result);
      v4 = __CocoaSet.count.getter(v3);
      if (v4)
        goto LABEL_7;
    }
    else
    {
      v4 = *(_QWORD *)(result + 16);
      swift_bridgeObjectRetain(result);
      if (v4)
      {
LABEL_7:
        v38 = _swiftEmptyArrayStorage;
        sub_1000C8BBC(0, v4 & ~(v4 >> 63), 0);
        if (v2)
        {
          if (v1 >= 0)
            v5 = v1 & 0xFFFFFFFFFFFFFF8;
          else
            v5 = v1;
          result = __CocoaSet.startIndex.getter(v5);
          v7 = 1;
        }
        else
        {
          result = sub_1000D2B1C(v1);
          v7 = v9 & 1;
        }
        v35 = result;
        v36 = v6;
        v37 = v7;
        if (v4 < 0)
          goto LABEL_41;
        v10 = v1 & 0xFFFFFFFFFFFFFF8;
        if (v1 < 0)
          v10 = v1;
        v33 = v10;
        do
        {
          while (1)
          {
            v17 = v35;
            v16 = v36;
            v18 = v37;
            sub_1000D2894(v35, v36, v37, v1);
            v20 = v19;
            v21 = objc_msgSend(v19, "events");

            v22 = v38;
            result = swift_isUniquelyReferenced_nonNull_native(v38);
            if ((result & 1) == 0)
            {
              result = sub_1000C8BBC(0, v22[2] + 1, 1);
              v22 = v38;
            }
            v24 = v22[2];
            v23 = v22[3];
            if (v24 >= v23 >> 1)
            {
              result = sub_1000C8BBC(v23 > 1, v24 + 1, 1);
              v22 = v38;
            }
            v22[2] = v24 + 1;
            v22[v24 + 4] = v21;
            if (v2)
              break;
            v11 = sub_1000D27B0(v17, v16, v18, v1);
            v13 = v12;
            v15 = v14;
            sub_100008990(v17, v16, v18);
            v35 = v11;
            v36 = v13;
            v37 = v15 & 1;
            if (!--v4)
              goto LABEL_31;
          }
          if ((v18 & 1) == 0)
            goto LABEL_42;
          v25 = __CocoaSet.Index.handleBitPattern.getter(v17, v16);
          if (v25)
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
          else
            isUniquelyReferenced_nonNull_native = 1;
          v27 = sub_100006A6C(&qword_1001A5618);
          v28 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v34, v27);
          __CocoaSet.formIndex(after:isUnique:)(v29, isUniquelyReferenced_nonNull_native, v33);
          v28(v34, 0);
          --v4;
        }
        while (v4);
LABEL_31:
        sub_100008990(v35, v36, v37);
        swift_bridgeObjectRelease(v1);
        result = (uint64_t)v38;
        v8 = v38[2];
        if (!v8)
          return swift_bridgeObjectRelease(result);
LABEL_32:
        if ((*(_BYTE *)(result + 32) & 0x10) != 0)
        {
LABEL_39:
          swift_bridgeObjectRelease(result);
          return (uint64_t)objc_msgSend(v32, "dismiss:", 4);
        }
        if (v8 != 1)
        {
          for (i = 5; ; ++i)
          {
            v31 = i - 3;
            if (__OFADD__(i - 4, 1))
              break;
            if ((*(_QWORD *)(result + 8 * i) & 0x10) != 0)
              goto LABEL_39;
            if (v31 == v8)
              return swift_bridgeObjectRelease(result);
          }
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        return swift_bridgeObjectRelease(result);
      }
    }
    swift_bridgeObjectRelease(v1);
    result = (uint64_t)_swiftEmptyArrayStorage;
    v8 = _swiftEmptyArrayStorage[2];
    if (!v8)
      return swift_bridgeObjectRelease(result);
    goto LABEL_32;
  }
LABEL_43:
  __break(1u);
  return result;
}

id sub_1000A4504(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  objc_class *v14;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A74B0);
  v4 = v2;
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    ObjectType = swift_getObjectType(v4);
    v11 = _typeName(_:qualified:)(ObjectType, 0);
    v13 = v12;
    v16 = sub_10001EFA4(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "%s deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_pairingAgentObserver], "invalidate");
  v14 = (objc_class *)type metadata accessor for B332SetupViewControllerProxy();
  v18.receiver = v4;
  v18.super_class = v14;
  return objc_msgSendSuper2(&v18, "dealloc");
}

id sub_1000A473C(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v3;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;
  objc_super v14;

  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_dismissed] = 0;
  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_presented] = 0;
  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_showedAlert] = 0;
  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_shouldShowWhatsNew] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_deviceType] = 0;
  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_daemonAskedForAlert] = 0;
  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_didCompleteOneRotation] = 0;
  v6 = OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_pairingAgentObserver;
  v7 = objc_allocWithZone((Class)SFB332SetupObserver);
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, "init");
  *(_QWORD *)&v8[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_retainRemoteViewControllerProxy] = 0;
  v9 = OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC;
  v10 = type metadata accessor for B332SetupViewController();
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "init");

  if (a2)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = 0;
  }
  v14.receiver = v8;
  v14.super_class = (Class)type metadata accessor for B332SetupViewControllerProxy();
  v12 = objc_msgSendSuper2(&v14, "initWithNibName:bundle:", v11, a3);

  return v12;
}

id sub_1000A48E8(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_dismissed] = 0;
  v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_presented] = 0;
  v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_showedAlert] = 0;
  v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_shouldShowWhatsNew] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_deviceType] = 0;
  v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_daemonAskedForAlert] = 0;
  v1[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_didCompleteOneRotation] = 0;
  v3 = OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_pairingAgentObserver;
  v4 = objc_allocWithZone((Class)SFB332SetupObserver);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_retainRemoteViewControllerProxy] = 0;
  v6 = OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC;
  v7 = type metadata accessor for B332SetupViewController();
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)), "init");

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for B332SetupViewControllerProxy();
  v8 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);

  return v8;
}

uint64_t type metadata accessor for B332SetupViewControllerProxy()
{
  return objc_opt_self(_TtC18SharingViewService28B332SetupViewControllerProxy);
}

id sub_1000A4C78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  v3 = v2;
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A74B0);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "didTapToPairPencil", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_pairingAgentObserver), "pairTapped");
}

void sub_1000A4E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *oslog;

  v3 = OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_showedAlert;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_showedAlert) & 1) != 0)
    return;
  v4 = v2;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_daemonAskedForAlert) != 1)
  {
    if (qword_1001A3108 != -1)
      swift_once(&qword_1001A3108, sub_1000A3808);
    v11 = type metadata accessor for Logger(0, a2);
    v12 = sub_10000E8E8(v11, (uint64_t)qword_1001A74B0);
    oslog = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(oslog, v13);
    if (!os_log_type_enabled(oslog, v14))
      goto LABEL_19;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "showAlertIfNeeded - daemonAskedForAlert is false.";
    goto LABEL_18;
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_didCompleteOneRotation) != 1)
  {
    if (qword_1001A3108 != -1)
      swift_once(&qword_1001A3108, sub_1000A3808);
    v17 = type metadata accessor for Logger(0, a2);
    v18 = sub_10000E8E8(v17, (uint64_t)qword_1001A74B0);
    oslog = Logger.logObject.getter(v18);
    v14 = static os_log_type_t.default.getter(oslog, v19);
    if (!os_log_type_enabled(oslog, v14))
      goto LABEL_19;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "showAlertIfNeeded - didCompleteOneRotation is false.";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, v16, v15, 2u);
    swift_slowDealloc(v15, -1, -1);
LABEL_19:

    return;
  }
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v5 = type metadata accessor for Logger(0, a2);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A74B0);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "showAlertIfNeeded - showing alert", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC)+ OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC), "showPairingPromptAlert");
  *(_BYTE *)(v4 + v3) = 1;
}

id sub_1000A5168(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  void **p_cache;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  id v19;
  _BYTE *v20;
  id result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A74B0);
  v4 = v2;
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  p_cache = &OBJC_METACLASS___SVSInterventionViewController.cache;
  v9 = &OBJC_METACLASS___SVSInterventionViewController.cache;
  if (os_log_type_enabled(v5, v7))
  {
    v10 = swift_slowAlloc(18, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412546;
    v12 = *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC];
    v13 = *(void **)(v12 + OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC);
    if (v13)
    {
      v23 = *(_QWORD *)(v12 + OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC);
      v14 = v13;
      v9 = (void **)(&OBJC_METACLASS___SVSInterventionViewController + 16);
      v15 = v10 + 4;
      v16 = v10 + 12;
      p_cache = (void **)(&OBJC_METACLASS___SVSInterventionViewController + 16);
    }
    else
    {
      v16 = v10 + 12;
      v23 = 0;
      v15 = v10 + 4;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v15, v16);
    *v11 = v13;

    *(_WORD *)(v10 + 12) = 1024;
    v17 = *((unsigned __int8 *)v9[154] + (_QWORD)v4);

    LODWORD(v23) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4, v10 + 14, v10 + 18);

    _os_log_impl((void *)&_mh_execute_header, v5, v7, "showPairingStarted. presentedPairingVC: %@, presented: %{BOOL}d", (uint8_t *)v10, 0x12u);
    v18 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v11, 1, v18);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v19 = objc_msgSend(v4, "pnpDeviceTypeForType:", *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_deviceType]);
  v20 = v9[154];
  if ((v20[(_QWORD)v4] & 1) == 0)
  {
    v20[(_QWORD)v4] = 1;
    v22 = *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC];
    objc_msgSend(v4, "presentViewController:animated:completion:", v22, 0, 0);
    result = *(id *)((char *)p_cache[204] + v22);
    return objc_msgSend(result, "pairingStartedWithDimming:deviceType:", 1, v19);
  }
  result = *(id *)((char *)p_cache[204]
                 + *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC]);
  if (result)
    return objc_msgSend(result, "pairingStartedWithDimming:deviceType:", 1, v19);
  return result;
}

id sub_1000A546C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  id result;

  v3 = v2;
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A74B0);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "showPairingSuccess", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = objc_msgSend(v3, "pnpDeviceTypeForType:", *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_deviceType]);
  result = *(id *)(*(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC]
                 + OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC);
  if (result)
    return objc_msgSend(result, "pairingSucceededWithShouldShowWhatsNew:deviceType:", v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_shouldShowWhatsNew], v10);
  return result;
}

id sub_1000A563C(const char *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;

  v5 = v2;
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v6 = type metadata accessor for Logger(0, a2);
  v7 = sub_10000E8E8(v6, (uint64_t)qword_1001A74B0);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v10, a1, v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  return objc_msgSend(*(id *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_setupVC)+ OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC), *a2);
}

id sub_1000A5780(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  v3 = v2;
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A74B0);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "showPairConsentPrompt", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v3[OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_daemonAskedForAlert] = 1;
  return objc_msgSend(v3, "showAlertIfNeeded");
}

void sub_1000A59A0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint8_t *v11;
  uint8_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A74B0);
  v14 = v2;
  v4 = Logger.logObject.getter(v14);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v9 = *(void **)&v14[OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC];
    if (v9)
    {
      v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC];
      v10 = v9;
      v11 = v7 + 4;
      v12 = v7 + 12;
    }
    else
    {
      v12 = v7 + 12;
      v15 = 0;
      v11 = v7 + 4;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v11, v12);
    *v8 = v9;

    _os_log_impl((void *)&_mh_execute_header, v4, v6, "set presentedPairingVC: %@", v7, 0xCu);
    v13 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v8, 1, v13);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000A5BB8(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  char *v11;
  void *Strong;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  _OWORD v23[2];
  _QWORD v24[3];
  uint64_t v25;
  objc_super v26;

  v2 = v1;
  v26.receiver = v2;
  v26.super_class = (Class)type metadata accessor for B332SetupViewController();
  objc_msgSendSuper2(&v26, "viewWillAppear:", a1 & 1);
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v5 = type metadata accessor for Logger(0, v4);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A74B0);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "B332SetupViewController viewWillAppear", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = &v2[OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_proxy];
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v11);
  v13 = Strong;
  if (Strong)
  {
    v14 = objc_msgSend(Strong, "_remoteViewControllerProxy");

    if (v14)
    {
      _bridgeAnyObjectToAny(_:)(v23);
      swift_unknownObjectRelease(v14);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_100064600((uint64_t)v23, (uint64_t)v24);
    v15 = v25;
    if (v25)
    {
      v16 = sub_100023D8C(v24, v25);
      v17 = *(_QWORD *)(v15 - 8);
      __chkstk_darwin(v16);
      v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v19);
      v13 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v19, v15);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v15);
      sub_100024118(v24);
    }
    else
    {
      v13 = 0;
    }
  }
  result = swift_unknownObjectWeakLoadStrong(v11);
  if (result)
  {
    v21 = (void *)result;
    v22 = *(_QWORD *)(result
                    + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_retainRemoteViewControllerProxy);
    *(_QWORD *)(result
              + OBJC_IVAR____TtC18SharingViewService28B332SetupViewControllerProxy_retainRemoteViewControllerProxy) = v13;
    swift_unknownObjectRetain(v13);

    result = swift_unknownObjectRelease(v22);
  }
  if (v13)
  {
    objc_msgSend(v13, "setStatusBarHidden:withDuration:", 1, 0.0);
    objc_msgSend(v13, "setDesiredHardwareButtonEvents:", 0);
    return swift_unknownObjectRelease(v13);
  }
  return result;
}

id sub_1000A5E5C(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id result;
  uint64_t v13;
  objc_super v14;

  v2 = v1;
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for B332SetupViewController();
  objc_msgSendSuper2(&v14, "viewDidAppear:", a1 & 1);
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v5 = type metadata accessor for Logger(0, v4);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A74B0);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "B332SetupViewController viewDidAppear", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC;
  result = *(id *)&v2[OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_presentedPairingVC];
  if (result)
  {
    result = objc_msgSend(result, "setModalPresentationStyle:", 0);
    v13 = *(_QWORD *)&v2[v11];
    if (v13)
      return objc_msgSend(v2, "presentViewController:animated:completion:", v13, 1, 0);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1000A5FF0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), SEL *a5)
{
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)a4();
  return objc_msgSendSuper2(&v8, *a5, a3);
}

id sub_1000A60C8(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  objc_class *v14;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A74B0);
  v4 = v2;
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    ObjectType = swift_getObjectType(v4);
    v11 = _typeName(_:qualified:)(ObjectType, 0);
    v13 = v12;
    v16 = sub_10001EFA4(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "%s deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v14 = (objc_class *)type metadata accessor for B332SetupViewController();
  v18.receiver = v4;
  v18.super_class = v14;
  return objc_msgSendSuper2(&v18, "dealloc");
}

uint64_t type metadata accessor for B332SetupViewController()
{
  return objc_opt_self(_TtC18SharingViewService23B332SetupViewController);
}

void sub_1000A649C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;

  v10 = sub_100006A6C(&qword_1001A42A0);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v14 = type metadata accessor for Logger(0, v11);
  v15 = sub_10000E8E8(v14, (uint64_t)qword_1001A74B0);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.default.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    v26 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "updateDeviceInfo. batteryLevel: %f", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = objc_msgSend(objc_allocWithZone((Class)PNPDeviceState), "init");
  objc_msgSend(v20, "setBatteryLevel:", a5);
  objc_msgSend(v20, "setBatteryLevelUnknown:", a5 < 0.0);
  objc_msgSend(v20, "setIsCharging:", a3 & 1);
  objc_msgSend(v20, "setEdge:", a1);
  sub_10000D74C(a4, (uint64_t)v13);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v21) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v21);
  }
  objc_msgSend(v20, "setIdentifier:", isa);

  if (a2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    objc_msgSend(v20, "setOrientation:", a2);
    sub_1000A3BAC((uint64_t)v20, v24);

  }
}

void sub_1000A675C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *Strong;
  id v11;

  v3 = v2;
  if (qword_1001A3108 != -1)
    swift_once(&qword_1001A3108, sub_1000A3808);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A74B0);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "B332SetupViewController dismiss", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC18SharingViewService23B332SetupViewController_proxy);
  if (Strong)
  {
    v11 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 0, 0);

  }
}

uint64_t sub_1000A6878()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A689C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006A6C(&qword_1001A42A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A68DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A68EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000A6904()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;
  _QWORD v9[24];
  _BYTE v10[64];
  uint64_t v11;
  objc_super v12;
  _QWORD v13[24];
  _BYTE v14[192];

  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for D2DSetupVisualAuthViewController(0);
  objc_msgSendSuper2(&v12, "viewDidLoad");
  sub_1000142E8((uint64_t)v0 + OBJC_IVAR____TtC18SharingViewService33D2DSetupBaseScannerViewController_viewModel, (uint64_t)v13);
  sub_1000142E8((uint64_t)v13, (uint64_t)v10);
  sub_1000142E8((uint64_t)v13, (uint64_t)v14);
  if (sub_1000145F8((uint64_t)v14) != 1)
  {
    v1 = v11;
    sub_1000142E8((uint64_t)v10, (uint64_t)v9);
    swift_bridgeObjectRetain(v1);
    sub_100014610(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001467C);
    sub_100014610(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001445C);
    if (v1)
    {
      v2 = swift_allocObject(&unk_10017BD98, 24, 7);
      swift_unknownObjectUnownedInit(v2 + 16, v0);
      swift_retain(v2);
      v3 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v1);
      v7[4] = sub_1000A6D78;
      v8 = v2;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1107296256;
      v7[2] = sub_10001B5D0;
      v7[3] = &unk_10017BDB0;
      v4 = _Block_copy(v7);
      v5 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v3, 1, v4);

      _Block_release(v4);
      v6 = v8;
      swift_release(v2);

    }
  }
}

void sub_1000A6AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  char *Strong;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a2 + 16);
  v2 = swift_unknownObjectWeakLoadStrong(&Strong[OBJC_IVAR____TtC18SharingViewService33D2DSetupBaseScannerViewController_presenter]);
  if (v2)
  {
    v4 = v2;
    if (qword_1001A3100 != -1)
      swift_once(&qword_1001A3100, sub_10009DB40);
    v5 = type metadata accessor for Logger(0, v3);
    v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A7328);
    v7 = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.default.getter(v7, v8);
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v9, "D2D Setup request choose manual pair", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_100075994();
    swift_unknownObjectRelease(v4);
  }
  else
  {

  }
}

uint64_t sub_1000A6C2C(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t result;
  uint64_t v7;

  v3 = v2;
  objc_msgSend(v3, "showConfirmationRing");
  result = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC18SharingViewService33D2DSetupBaseScannerViewController_presenter]);
  if (result)
  {
    v7 = result;
    sub_10009EFEC(a1, a2);
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

id sub_1000A6CA8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for D2DSetupVisualAuthViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000A6CDC()
{
  return type metadata accessor for D2DSetupVisualAuthViewController(0);
}

uint64_t type metadata accessor for D2DSetupVisualAuthViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1001A7768;
  if (!qword_1001A7768)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for D2DSetupVisualAuthViewController);
  return result;
}

uint64_t sub_1000A6D20(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 208);
}

uint64_t sub_1000A6D54()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A6D78(uint64_t a1)
{
  uint64_t v1;

  sub_1000A6AC8(a1, v1);
}

uint64_t sub_1000A6D80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A6D90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000A6D98()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  Class isa;
  objc_super v22;

  v22.receiver = v0;
  v22.super_class = (Class)type metadata accessor for D2DSetupFinishViewController();
  objc_msgSendSuper2(&v22, "viewDidLoad");
  v1 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 101);
  objc_msgSend(v1, "startAnimating");
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = objc_msgSend(v0, "contentView");
  objc_msgSend(v2, "addSubview:", v1);

  v3 = objc_msgSend(v0, "contentView");
  v4 = objc_msgSend(v3, "mainContentGuide");

  v5 = (void *)objc_opt_self(NSLayoutConstraint);
  v6 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100132270;
  v8 = objc_msgSend(v1, "topAnchor");
  v9 = objc_msgSend(v4, "topAnchor");
  v10 = objc_msgSend(v8, "constraintGreaterThanOrEqualToAnchor:", v9);

  *(_QWORD *)(v7 + 32) = v10;
  v11 = objc_msgSend(v1, "bottomAnchor");
  v12 = objc_msgSend(v4, "bottomAnchor");
  v13 = objc_msgSend(v11, "constraintLessThanOrEqualToAnchor:", v12);

  *(_QWORD *)(v7 + 40) = v13;
  v14 = objc_msgSend(v1, "centerXAnchor");
  v15 = objc_msgSend(v4, "centerXAnchor");
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

  *(_QWORD *)(v7 + 48) = v16;
  v17 = objc_msgSend(v1, "centerYAnchor");
  v18 = objc_msgSend(v4, "centerYAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  *(_QWORD *)(v7 + 56) = v19;
  specialized Array._endMutation()(v20);
  sub_10000E868();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v5, "activateConstraints:", isa);

}

void sub_1000A70EC(void *a1, uint64_t a2, uint64_t a3, const char **a4, void (*a5)(uint64_t, uint64_t))
{
  const char *v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  objc_super v13;

  v13.receiver = a1;
  v13.super_class = (Class)type metadata accessor for D2DSetupFinishViewController();
  v8 = *a4;
  v9 = (char *)v13.receiver;
  objc_msgSendSuper2(&v13, v8, a3);
  Strong = swift_unknownObjectWeakLoadStrong(&v9[OBJC_IVAR____TtC18SharingViewService26D2DSetupBaseViewController_presenter]);
  if (Strong)
  {
    v12 = Strong;
    a5(Strong, v11);

    swift_unknownObjectRelease(v12);
  }
  else
  {

  }
}

id sub_1000A71C0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for D2DSetupFinishViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for D2DSetupFinishViewController()
{
  return objc_opt_self(_TtC18SharingViewService28D2DSetupFinishViewController);
}

uint64_t PasswordSharingAssembler.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PasswordSharingAssembler.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PasswordSharingAssembler()
{
  return objc_opt_self(_TtC18SharingViewService24PasswordSharingAssembler);
}

id sub_1000A7248(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, "setChangeFlags:", a1);
}

unint64_t sub_1000A725C(unint64_t result)
{
  id *v1;

  if ((result & 0x8000000000000000) == 0)
    return (unint64_t)objc_msgSend(*v1, "setDiscoveryFlags:", result);
  __break(1u);
  return result;
}

id sub_1000A7278()
{
  id *v0;

  return objc_msgSend(*v0, "scanRate");
}

id sub_1000A7288(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, "setScanRate:", a1);
}

void sub_1000A729C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  sub_1000A72C4(a1, a2, a5, a3, a4, (uint64_t)&unk_10017BF40, (SEL *)&selRef_setDeviceFoundHandler_);
}

void sub_1000A72B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  sub_1000A72C4(a1, a2, a5, a3, a4, (uint64_t)&unk_10017BF18, (SEL *)&selRef_setDeviceLostHandler_);
}

void sub_1000A72C4(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  void **v7;
  void *v9;
  void *v10;
  _QWORD v11[5];
  uint64_t v12;

  v9 = *v7;
  if (a1)
  {
    v11[4] = a1;
    v12 = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10001B5D0;
    v11[3] = a6;
    v10 = _Block_copy(v11);
    *(_QWORD *)&a3 = swift_release(v12).n128_u64[0];
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v9, *a7, v10, a3);
  _Block_release(v10);
}

void sub_1000A7354(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  v5 = *v2;
  v6 = swift_allocObject(&unk_10017BED8, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_1000A7528;
  v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10001B678;
  v9[3] = &unk_10017BEF0;
  v7 = _Block_copy(v9);
  v8 = v10;
  sub_100022024(a1, a2);
  objc_msgSend(v5, "setDeviceChangedHandler:", v7, swift_release(v8).n128_f64[0]);
  sub_100012F60(a1, a2);
  _Block_release(v7);
}

void sub_1000A742C(uint64_t a1, uint64_t a2, double a3)
{
  void **v3;
  void *v4;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v4 = *v3;
  if (a1)
  {
    v8[4] = a1;
    v9 = a2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_1000AC624;
    v8[3] = &unk_10017BEA0;
    v6 = _Block_copy(v8);
    v7 = v9;
    swift_retain(a2);
    *(_QWORD *)&a3 = swift_release(v7).n128_u64[0];
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v4, "activateWithCompletion:", v6, a3);
  _Block_release(v6);
}

id sub_1000A74D4()
{
  id *v0;

  return objc_msgSend(*v0, "invalidate");
}

uint64_t sub_1000A74E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A74F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A74FC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A7528()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

_QWORD *sub_1000A7568(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[10];
    *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
    *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
    v14 = a3[11];
    v15 = a3[12];
    v16 = (_QWORD *)((char *)a1 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (_QWORD *)((char *)a1 + v15);
    v20 = (_QWORD *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[13];
    v23 = (_QWORD *)((char *)a1 + v22);
    v24 = (_QWORD *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_1000A7684(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
}

uint64_t sub_1000A76FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[11];
  v14 = a3[12];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (_QWORD *)(a1 + v14);
  v19 = (_QWORD *)(a2 + v14);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[13];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_1000A77EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v12 = a3[11];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[12];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[13];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_1000A7928(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000A79D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[11];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[12];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[13];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_1000A7AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A7AD0);
}

uint64_t sub_1000A7AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000A7B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A7B5C);
}

uint64_t sub_1000A7B5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AuthenticateAccountsModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001A78A8;
  if (!qword_1001A78A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AuthenticateAccountsModel);
  return result;
}

uint64_t sub_1000A7C14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100134C90;
    v4[2] = &unk_100134CA8;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100134C90;
    v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_100134CC0;
    v4[8] = &unk_100134CC0;
    v4[9] = &unk_100134CC0;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1000A7CBC(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  int *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;

  v4 = sub_100006A6C(&qword_1001A42A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for AuthenticateAccountsModel(0);
  v12 = &a2[v11[11]];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &a2[v11[12]];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &a2[v11[13]];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v63 = 0xD000000000000010;
  v64 = 0x8000000100136400;
  AnyHashable.init<A>(_:)(&v65, &v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v15 = sub_100005CF4((uint64_t)&v65), (v16 & 1) != 0))
  {
    sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  sub_100006B34((uint64_t)&v65);
  if (!*((_QWORD *)&v68 + 1))
  {
    v19 = &qword_1001A4340;
    v20 = (char *)&v67;
LABEL_10:
    sub_10000D858((uint64_t)v20, v19);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v63, &v67, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v18 = v64;
    UUID.init(uuidString:)(v63, v64);
    swift_bridgeObjectRelease(v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v59 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v59(v10, v6, v7);
      v59(a2, v10, v7);
      goto LABEL_17;
    }
    v19 = &qword_1001A42A0;
    v20 = v6;
    goto LABEL_10;
  }
LABEL_11:
  if (qword_1001A3110 != -1)
    swift_once(&qword_1001A3110, sub_1000A8560);
  v21 = type metadata accessor for Logger(0, v17);
  sub_10000E8E8(v21, (uint64_t)qword_1001A7838);
  v22 = swift_bridgeObjectRetain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v65 = v26;
    v61 = v11;
    v62 = a2;
    *(_DWORD *)v25 = 136315138;
    v27 = swift_bridgeObjectRetain(a1);
    v28 = Dictionary.description.getter(v27, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v30 = v29;
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v67 = sub_10001EFA4(v28, v30, &v65);
    v11 = v61;
    a2 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 8, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "No device identifier. {userInfo: %s}", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    v31 = swift_bridgeObjectRelease_n(a1, 2);
  }
  UUID.init()(v31);
LABEL_17:
  *(_QWORD *)&v67 = 0x726174536F747561;
  *((_QWORD *)&v67 + 1) = 0xE900000000000074;
  AnyHashable.init<A>(_:)(&v65, &v67, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v32 = sub_100005CF4((uint64_t)&v65), (v33 & 1) != 0))
  {
    sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v32, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  sub_100006B34((uint64_t)&v65);
  if (!*((_QWORD *)&v68 + 1))
  {
    sub_10000D858((uint64_t)&v67, &qword_1001A4340);
    goto LABEL_25;
  }
  if (!swift_dynamicCast(&v63, &v67, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
  {
LABEL_25:
    v34 = 0;
    goto LABEL_26;
  }
  v34 = v63;
LABEL_26:
  a2[v11[5]] = v34;
  v63 = 0x556E6F6973736573;
  v64 = 0xEB00000000444955;
  AnyHashable.init<A>(_:)(&v65, &v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v35 = sub_100005CF4((uint64_t)&v65), (v36 & 1) != 0))
  {
    sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v35, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  sub_100006B34((uint64_t)&v65);
  if (!*((_QWORD *)&v68 + 1))
  {
    sub_10000D858((uint64_t)&v67, &qword_1001A4340);
    goto LABEL_34;
  }
  if (!swift_dynamicCast(&v63, &v67, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_34:
    v37 = 0;
    v38 = 0xE000000000000000;
    goto LABEL_35;
  }
  v37 = v63;
  v38 = v64;
LABEL_35:
  v39 = (uint64_t *)&a2[v11[6]];
  *v39 = v37;
  v39[1] = v38;
  *(_QWORD *)&v67 = 1769173874;
  *((_QWORD *)&v67 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(&v65, &v67, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v40 = sub_100005CF4((uint64_t)&v65), (v41 & 1) != 0))
  {
    sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v40, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  sub_100006B34((uint64_t)&v65);
  if (!*((_QWORD *)&v68 + 1))
  {
    sub_10000D858((uint64_t)&v67, &qword_1001A4340);
    goto LABEL_43;
  }
  if (!swift_dynamicCast(&v63, &v67, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
  {
LABEL_43:
    v42 = 0;
    goto LABEL_44;
  }
  v42 = v63;
LABEL_44:
  *(_QWORD *)&a2[v11[7]] = v42;
  v63 = 0xD000000000000010;
  v64 = 0x800000010013D440;
  AnyHashable.init<A>(_:)(&v65, &v63, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v43 = sub_100005CF4((uint64_t)&v65), (v44 & 1) != 0))
  {
    sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v43, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  sub_100006B34((uint64_t)&v65);
  if (!*((_QWORD *)&v68 + 1))
  {
    sub_10000D858((uint64_t)&v67, &qword_1001A4340);
LABEL_54:
    if (qword_1001A3110 != -1)
      swift_once(&qword_1001A3110, sub_1000A8560);
    v46 = type metadata accessor for Logger(0, v45);
    sub_10000E8E8(v46, (uint64_t)qword_1001A7838);
    v47 = swift_bridgeObjectRetain(a1);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      v63 = v51;
      *(_DWORD *)v50 = 136446210;
      *(_QWORD *)&v67 = 0xD000000000000010;
      *((_QWORD *)&v67 + 1) = 0x800000010013D440;
      AnyHashable.init<A>(_:)(&v65, &v67, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(a1 + 16) && (v52 = sub_100005CF4((uint64_t)&v65), (v53 & 1) != 0))
      {
        sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v52, (uint64_t)&v67);
      }
      else
      {
        v67 = 0u;
        v68 = 0u;
      }
      sub_100006B34((uint64_t)&v65);
      v54 = sub_100006A6C(&qword_1001A4340);
      v55 = String.init<A>(describing:)(&v67, v54);
      v57 = v56;
      v65 = sub_10001EFA4(v55, v56, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Invalid device action type, assuming v1. {deviceActionType: %{public}s}", v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    goto LABEL_63;
  }
  if ((swift_dynamicCast(&v63, &v67, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6) & 1) == 0)
    goto LABEL_54;
  if (v63 == 43)
  {
    swift_bridgeObjectRelease(a1);
    v58 = 1;
    goto LABEL_64;
  }
  if (v63 != 32)
    goto LABEL_54;
  swift_bridgeObjectRelease(a1);
LABEL_63:
  v58 = 0;
LABEL_64:
  a2[v11[8]] = v58;
  *(_DWORD *)&a2[v11[9]] = 0;
  *(_QWORD *)&a2[v11[10]] = 0;
}

uint64_t sub_1000A8560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7838);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7838);
  if (qword_1001A2F00 != -1)
    swift_once(&qword_1001A2F00, sub_100018D74);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD4B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

id sub_1000A85F0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t inited;
  NSString *v37;
  id v38;
  unint64_t v39;
  id v40;
  NSString v41;
  Class isa;
  id v43;
  NSString v44;
  id v45;
  char v48[72];
  _QWORD v49[2];
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v14 = sub_100006A6C(&qword_1001A7900);
  __chkstk_darwin(v14);
  v16 = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v52 = a6;
  v53 = a7;
  v50 = a1;
  v51 = a2;
  v49[0] = a3;
  v49[1] = a4;
  v17 = sub_1000A2D48();
  v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v50, v49, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v17, v17, v17);
  v20 = v19;
  v52 = v18;
  v53 = v19;
  v50 = a3;
  v51 = a4;
  v21 = type metadata accessor for Locale(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v16, 1, 1, v21);
  v22 = StringProtocol.range<A>(of:options:range:locale:)(&v50, 0, 0, 0, 1, v16, &type metadata for String, &type metadata for String, v17, v17);
  v24 = v23;
  LOBYTE(a3) = v25;
  sub_1000A8978((uint64_t)v16);
  if ((a3 & 1) != 0 || (v22 ^ v24) < 0x4000)
  {
    v45 = objc_allocWithZone((Class)NSAttributedString);
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v43 = objc_msgSend(v45, "initWithString:", v44);
  }
  else
  {
    v52 = v22;
    v53 = v24;
    v50 = v18;
    v51 = v20;
    swift_bridgeObjectRetain(v20);
    v26 = sub_100006A6C(&qword_1001A7908);
    v27 = sub_1000A89B8();
    v28 = _NSRange.init<A, B>(_:in:)(&v52, &v50, v26, &type metadata for String, v27, v17);
    v30 = v29;
    v31 = (void *)objc_opt_self(UIFont);
    v32 = objc_msgSend(v31, "preferredFontForTextStyle:", a5);
    objc_msgSend(v32, "pointSize");
    v34 = v33;

    v35 = sub_100006A6C(&qword_1001A3C20);
    inited = swift_initStackObject(v35, v48);
    *(_OWORD *)(inited + 16) = xmmword_100131C40;
    *(_QWORD *)(inited + 32) = NSFontAttributeName;
    v37 = NSFontAttributeName;
    v38 = objc_msgSend(v31, "systemFontOfSize:", v34);
    *(_QWORD *)(inited + 64) = sub_1000A8A04();
    *(_QWORD *)(inited + 40) = v38;
    v39 = sub_1000045A4(inited);
    v40 = objc_allocWithZone((Class)NSMutableAttributedString);
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    type metadata accessor for Key(0);
    sub_100017240();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v39);
    v43 = objc_msgSend(v40, "initWithString:attributes:", v41, isa);

    v44 = objc_msgSend(v31, "boldSystemFontOfSize:", v34);
    objc_msgSend(v43, "addAttribute:value:range:", v37, v44, v28, v30);
  }

  return v43;
}

uint64_t sub_1000A8978(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006A6C(&qword_1001A7900);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000A89B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001A7910;
  if (!qword_1001A7910)
  {
    v1 = sub_100008048(&qword_1001A7908);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001A7910);
  }
  return result;
}

unint64_t sub_1000A8A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001A7918;
  if (!qword_1001A7918)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001A7918);
  }
  return result;
}

uint64_t sub_1000A8A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7920);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7920);
  if (qword_1001A2EF8 != -1)
    swift_once(&qword_1001A2EF8, sub_100018CDC);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD498);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

uint64_t *sub_1000A8AD0@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t sub_1000A8AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AB058();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A8B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AB058();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000A8B90(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000A8BC8 + 4 * byte_100134CE0[a1]))(0xD000000000000010, 0x800000010013D5B0);
}

uint64_t sub_1000A8BC8()
{
  return 0x6574617473;
}

uint64_t sub_1000A8BDC(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_1000A8C04(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v19[23];
  char v20;
  _BYTE v21[16];

  v3 = v1;
  v5 = sub_100006A6C(&qword_1001A7998);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_100023D8C(a1, v9);
  v11 = sub_1000AA888();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys, &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v19[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v19, v5);
  if (!v2)
  {
    v19[0] = *((_BYTE *)v3 + 16);
    v20 = 1;
    v14 = sub_1000AA8CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v5, &type metadata for HeadphoneDigitalEngravingManager.Record.State, v14);
    sub_10005B590((uint64_t)(v3 + 3), (uint64_t)v21, &qword_1001A5438);
    sub_10005B590((uint64_t)v21, (uint64_t)v19, &qword_1001A5438);
    v20 = 2;
    v15 = sub_100023EC0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v20, v5, &type metadata for Data, v15);
    v16 = v3[5];
    v19[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v19, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A8DB8()
{
  unsigned __int8 *v0;

  return sub_1000A8B90(*v0);
}

uint64_t sub_1000A8DC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000AA910(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A8DE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA888();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A8E0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA888();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000A8E34@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1000AAAAC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1000A8E74(_QWORD *a1)
{
  return sub_1000A8C04(a1);
}

uint64_t sub_1000A8EAC(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *(_QWORD *)(v3 + *a1);
  if (v5)
  {
    v6 = v5;
  }
  else
  {
    v8 = v3;
    v9 = a2();
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v6 = a3();
    v10 = *(_QWORD *)(v8 + v4);
    *(_QWORD *)(v8 + v4) = v6;
    swift_retain(v6);
    swift_release(v10);
    v5 = 0;
  }
  swift_retain(v5);
  return v6;
}

void sub_1000A8FC0(uint64_t a1, void *a2, void *aBlock)
{
  uint64_t v4;
  void (*v5)(void);
  void *v6;
  uint64_t v7;
  id v8;

  v5 = *(void (**)(void))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = _Block_copy(aBlock);
  v7 = swift_allocObject(&unk_10017C040, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  swift_retain(v4);
  v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);

}

void sub_1000A9054(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Class isa;
  Class v5;

  if (a2 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

double sub_1000A9114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void (*v8)(uint64_t, uint64_t, void *, __n128);
  __n128 v9;
  double result;
  _QWORD v11[5];
  uint64_t v12;

  v11[4] = a2;
  v12 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000A91B8;
  v11[3] = &unk_10017BFE0;
  v7 = _Block_copy(v11);
  v8 = *(void (**)(uint64_t, uint64_t, void *, __n128))(a4 + 16);
  v9 = swift_retain(a3);
  v8(a4, a1, v7, v9);
  _Block_release(v7);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

double sub_1000A91B8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  void (*v4)(void *, unint64_t);
  id v5;
  unint64_t v6;
  unint64_t v7;
  double result;

  v2 = a2;
  v4 = *(void (**)(void *, unint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    swift_retain(v3);
    v5 = v2;
    v2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v7 = v6;

  }
  else
  {
    swift_retain(v3);
    v7 = 0xF000000000000000;
  }
  v4(v2, v7);
  sub_100023F48((uint64_t)v2, v7);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

id sub_1000A9238()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  id v3;
  char *v4;
  NSString v5;
  id v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager____lazy_storage___decoder] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager____lazy_storage___encoder] = 0;
  v2 = &v0[OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_fetchEngravingDataHandler];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  v4 = v0;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v3, "initWithSuiteName:", v5);

  if (!v6)
    v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_localStorage] = v6;

  v8.receiver = v4;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "init");
}

double sub_1000A9358(void *a1)
{
  uint64_t v1;
  id v3;
  double result;
  void *v5;
  unsigned int v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, void (*)(uint64_t, unint64_t), _QWORD *, __n128);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  _BYTE v17[48];
  _BYTE v18[8];
  uint64_t v19;
  __int128 v20;
  char v21;
  __int128 v22;
  uint64_t v23;

  v3 = objc_msgSend(objc_allocWithZone((Class)SFHeadphoneProduct), "initWithProductID:", objc_msgSend(a1, "productIdentifier"));
  if (v3)
  {
    v5 = v3;
    v6 = objc_msgSend(v3, "supportsDigitalEngraving");

    if (v6)
    {
      v7 = objc_msgSend(a1, "addressString");
      if (v7)
      {
        v8 = v7;
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v11 = v10;

        sub_1000A9530(v9, v11, (uint64_t)v17);
        sub_1000AA378((uint64_t)v17);
        sub_10005B590((uint64_t)v17, (uint64_t)v18, &qword_1001A7980);
        if (v19)
          goto LABEL_5;
        *(_QWORD *)&v20 = v9;
        *((_QWORD *)&v20 + 1) = v11;
        v21 = 0;
        v22 = xmmword_100132B40;
        v23 = 0;
        swift_bridgeObjectRetain(v11);
        sub_1000A9990(&v20);
        swift_bridgeObjectRelease(v11);
        sub_100023F48(0, 0xF000000000000000);
        v12 = *(void (**)(void *, void (*)(uint64_t, unint64_t), _QWORD *, __n128))(v1 + OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_fetchEngravingDataHandler);
        if (!v12)
        {
LABEL_5:
          swift_bridgeObjectRelease(v11);
        }
        else
        {
          v13 = *(_QWORD *)(v1
                          + OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_fetchEngravingDataHandler
                          + 8);
          v14 = swift_allocObject(&unk_10017BF78, 24, 7);
          swift_unknownObjectWeakInit(v14 + 16, v1);
          v15 = (_QWORD *)swift_allocObject(&unk_10017BFA0, 40, 7);
          v15[2] = v9;
          v15[3] = v11;
          v15[4] = v14;
          sub_100022024((uint64_t)v12, v13);
          v16 = swift_retain(v14);
          v12(a1, sub_1000AA434, v15, v16);
          sub_100012F60((uint64_t)v12, v13);
          swift_release(v14);
          *(_QWORD *)&result = swift_release(v15).n128_u64[0];
        }
      }
    }
  }
  return result;
}

void sub_1000A9530(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  id v7;
  NSString v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[24];
  uint64_t v24;
  _QWORD v25[2];

  v7 = *(id *)(v3 + OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_localStorage);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "dictionaryForKey:", v8);

  v10 = 0uLL;
  if (!v9)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_13;
  }
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v11 + 16))
  {
    v22 = 0u;
    *(_OWORD *)v23 = 0u;
LABEL_10:
    swift_bridgeObjectRelease(v11);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain(a2);
  v12 = sub_100005D24(a1, a2);
  if ((v13 & 1) == 0)
  {
    v22 = 0u;
    *(_OWORD *)v23 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_10;
  }
  sub_10000D894(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v22);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v11);
  if (!*(_QWORD *)&v23[8])
  {
LABEL_11:
    sub_100064214((uint64_t)&v22);
    goto LABEL_12;
  }
  if ((swift_dynamicCast(v25, &v22, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_12:
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v10 = 0uLL;
    goto LABEL_13;
  }
  v15 = v25[0];
  v14 = v25[1];
  v16 = sub_1000A8EAC(&OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager____lazy_storage___decoder, (uint64_t (*)(void))&type metadata accessor for JSONDecoder, (uint64_t (*)(void))&JSONDecoder.init());
  v17 = sub_1000AA504();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for HeadphoneDigitalEngravingManager.Record, v15, v14, &type metadata for HeadphoneDigitalEngravingManager.Record, v17);
  sub_100007348(v15, v14);
  swift_release(v16);
  v19 = *((_QWORD *)&v22 + 1);
  v18 = v22;
  v20 = v23[0];
  v10 = *(_OWORD *)&v23[8];
  v21 = v24;
LABEL_13:
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = v20;
  *(_OWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 40) = v21;
}

void sub_1000A9990(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  id v18;
  Class isa;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = v1;
  v4 = sub_1000A8EAC(&OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager____lazy_storage___encoder, (uint64_t (*)(void))&type metadata accessor for JSONEncoder, (uint64_t (*)(void))&JSONEncoder.init());
  v5 = a1[1];
  v36 = *a1;
  v37 = v5;
  v38 = a1[2];
  v6 = sub_1000AA440();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v36, &type metadata for HeadphoneDigitalEngravingManager.Record, v6);
  v9 = v8;
  swift_release(v4);
  v10 = OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_localStorage;
  v11 = *(id *)(v2 + OBJC_IVAR____TtC18SharingViewService32HeadphoneDigitalEngravingManager_localStorage);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "dictionaryForKey:", v12);

  if (v13)
  {
    v14 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  }
  else
  {
    v14 = &_swiftEmptyDictionarySingleton;
  }
  v16 = *(_QWORD *)a1;
  v15 = *((_QWORD *)a1 + 1);
  *((_QWORD *)&v37 + 1) = &type metadata for Data;
  *(_QWORD *)&v36 = v7;
  *((_QWORD *)&v36 + 1) = v9;
  sub_100006AAC(&v36, v35);
  swift_bridgeObjectRetain(v15);
  sub_100006B94(v7, v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_1000CFBD8(v35, v16, v15, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = *(id *)(v2 + v10);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "setObject:forKey:", isa, v20);

  if (qword_1001A3118 != -1)
    swift_once(&qword_1001A3118, sub_1000A8A40);
  v22 = type metadata accessor for Logger(0, v21);
  sub_10000E8E8(v22, (uint64_t)qword_1001A7920);
  sub_100006B94(v7, v9);
  sub_1000AA484(a1);
  sub_100006B94(v7, v9);
  v23 = sub_1000AA484(a1);
  v24 = Logger.logObject.getter(v23);
  v26 = static os_log_type_t.default.getter(v24, v25);
  if (os_log_type_enabled(v24, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v35[0] = v28;
    *(_DWORD *)v27 = 136315394;
    *(_QWORD *)&v36 = v7;
    *((_QWORD *)&v36 + 1) = v9;
    sub_100006B94(v7, v9);
    v29 = String.init<A>(reflecting:)(&v36, &type metadata for Data);
    v31 = v30;
    *(_QWORD *)&v36 = sub_10001EFA4(v29, v30, (uint64_t *)v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 8, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v31);
    sub_100007348(v7, v9);
    sub_100007348(v7, v9);
    *(_WORD *)(v27 + 12) = 2080;
    *(_QWORD *)&v36 = v16;
    *((_QWORD *)&v36 + 1) = v15;
    swift_bridgeObjectRetain(v15);
    v32 = String.init<A>(reflecting:)(&v36, &type metadata for String);
    v34 = v33;
    *(_QWORD *)&v36 = sub_10001EFA4(v32, v33, (uint64_t *)v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 8, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease(v34);
    sub_1000AA4C4(a1);
    sub_1000AA4C4(a1);
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "Storing engraving data received from AACP %s for:%s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    sub_100007348(v7, v9);
  }
  else
  {
    sub_100007348(v7, v9);
    sub_100007348(v7, v9);
    sub_100007348(v7, v9);
    sub_1000AA4C4(a1);
    sub_1000AA4C4(a1);

  }
}

void sub_1000AA010(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t v26;
  uint64_t v27[3];
  __int128 v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a2 >> 60 != 15)
  {
    v33 = v5;
    v34 = v6;
    v11 = a5 + 16;
    sub_100006B94(a1, a2);
    if (qword_1001A3118 != -1)
      swift_once(&qword_1001A3118, sub_1000A8A40);
    v13 = type metadata accessor for Logger(0, v12);
    sub_10000E8E8(v13, (uint64_t)qword_1001A7920);
    sub_100006B94(a1, a2);
    v14 = sub_100006B94(a1, a2);
    v15 = Logger.logObject.getter(v14);
    v17 = static os_log_type_t.default.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v27[0] = v26;
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v28 = a1;
      *((_QWORD *)&v28 + 1) = a2;
      sub_100006B94(a1, a2);
      v19 = String.init<A>(reflecting:)(&v28, &type metadata for Data);
      v20 = a3;
      v22 = v21;
      *(_QWORD *)&v28 = sub_10001EFA4(v19, v21, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 8, v18 + 4, v18 + 12);
      v23 = v22;
      a3 = v20;
      swift_bridgeObjectRelease(v23);
      sub_100023F48(a1, a2);
      sub_100023F48(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v17, "Engraving data received from AACP %s", v18, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_100023F48(a1, a2);
      sub_100023F48(a1, a2);
    }

    *(_QWORD *)&v28 = a3;
    *((_QWORD *)&v28 + 1) = a4;
    v29 = 1;
    v30 = a1;
    v31 = a2;
    v32 = 0;
    swift_beginAccess(v11, v27, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v11);
    if (Strong)
    {
      v25 = (void *)Strong;
      sub_100024020(a1, a2);
      swift_bridgeObjectRetain(a4);
      sub_1000A9990(&v28);
      sub_100023F48(a1, a2);
      swift_bridgeObjectRelease(a4);
      sub_100023F48(a1, a2);

    }
    else
    {
      sub_100023F48(a1, a2);
    }
  }
}

uint64_t type metadata accessor for HeadphoneDigitalEngravingManager()
{
  return objc_opt_self(_TtC18SharingViewService32HeadphoneDigitalEngravingManager);
}

uint64_t sub_1000AA378(uint64_t a1)
{
  sub_1000AA3AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1000AA3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return sub_100023F48(a4, a5);
  }
  return result;
}

uint64_t sub_1000AA3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_1000AA408()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000AA434(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  sub_1000AA010(a1, a2, v2[2], v2[3], v2[4]);
}

unint64_t sub_1000AA440()
{
  unint64_t result;

  result = qword_1001A7988;
  if (!qword_1001A7988)
  {
    result = swift_getWitnessTable(&unk_100134D50, &type metadata for HeadphoneDigitalEngravingManager.Record);
    atomic_store(result, (unint64_t *)&qword_1001A7988);
  }
  return result;
}

_QWORD *sub_1000AA484(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  swift_bridgeObjectRetain(a1[1]);
  sub_100024020(v2, v3);
  return a1;
}

_QWORD *sub_1000AA4C4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  swift_bridgeObjectRelease(a1[1]);
  sub_100023F48(v2, v3);
  return a1;
}

unint64_t sub_1000AA504()
{
  unint64_t result;

  result = qword_1001A7990;
  if (!qword_1001A7990)
  {
    result = swift_getWitnessTable(&unk_100134D28, &type metadata for HeadphoneDigitalEngravingManager.Record);
    atomic_store(result, (unint64_t *)&qword_1001A7990);
  }
  return result;
}

double sub_1000AA548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000A9114(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000AA550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AA560(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000AA568()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000AA58C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_1000A9054(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t destroy for HeadphoneDigitalEngravingManager.Record(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease(a1[1]);
  v3 = a1[4];
  if (v3 >> 60 != 15)
    return sub_100007348(a1[3], v3);
  return result;
}

uint64_t initializeWithCopy for HeadphoneDigitalEngravingManager.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_100006B94(v7, v6);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for HeadphoneDigitalEngravingManager.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (uint64_t *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      v9 = *v6;
      sub_100006B94(*v6, *(_QWORD *)(a2 + 32));
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v7;
      sub_100007348(v10, v11);
      goto LABEL_8;
    }
    sub_100023380(a1 + 24);
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v8 = *v6;
  sub_100006B94(*v6, *(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v7;
LABEL_8:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for HeadphoneDigitalEngravingManager.Record(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HeadphoneDigitalEngravingManager.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v6;
      *(_QWORD *)(a1 + 32) = v8;
      sub_100007348(v9, v7);
      goto LABEL_6;
    }
    sub_100023380(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadphoneDigitalEngravingManager.Record(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadphoneDigitalEngravingManager.Record(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadphoneDigitalEngravingManager.Record()
{
  return &type metadata for HeadphoneDigitalEngravingManager.Record;
}

unint64_t sub_1000AA888()
{
  unint64_t result;

  result = qword_1001A79A0;
  if (!qword_1001A79A0)
  {
    result = swift_getWitnessTable(&unk_100134F34, &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001A79A0);
  }
  return result;
}

unint64_t sub_1000AA8CC()
{
  unint64_t result;

  result = qword_1001A79A8;
  if (!qword_1001A79A8)
  {
    result = swift_getWitnessTable(&unk_100134F0C, &type metadata for HeadphoneDigitalEngravingManager.Record.State);
    atomic_store(result, (unint64_t *)&qword_1001A79A8);
  }
  return result;
}

uint64_t sub_1000AA910(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x800000010013D5B0;
    if (a2 == 0x800000010013D5B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010013D5B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v6 = 0xE500000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010013D5D0)
  {
    v7 = 0x800000010013D5D0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010013D5D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000010013D5F0)
  {
    swift_bridgeObjectRelease(0x800000010013D5F0);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010013D5F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1000AAAAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  char v27;

  v5 = sub_100006A6C(&qword_1001A79B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100023D8C(a1, v9);
  v11 = sub_1000AA888();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys, &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100024118(a1);
  LOBYTE(v24) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  v14 = v13;
  v27 = 1;
  v15 = sub_1000AAD5C();
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for HeadphoneDigitalEngravingManager.Record.State, &v27, v5, &type metadata for HeadphoneDigitalEngravingManager.Record.State, v15);
  v26 = v24;
  v27 = 2;
  v16 = sub_100023E38();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v24, &type metadata for Data, &v27, v5, &type metadata for Data, v16);
  v17 = v24;
  LOBYTE(v24) = 3;
  v22 = v25;
  v23 = v17;
  sub_100024020(v17, v25);
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v14);
  v20 = v22;
  v19 = v23;
  sub_100024020(v23, v22);
  sub_100023F48(v19, v20);
  swift_bridgeObjectRelease(v14);
  sub_100024118(a1);
  swift_bridgeObjectRelease(v14);
  result = sub_100023F48(v19, v20);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_BYTE *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v18;
  return result;
}

unint64_t sub_1000AAD5C()
{
  unint64_t result;

  result = qword_1001A79B8;
  if (!qword_1001A79B8)
  {
    result = swift_getWitnessTable(&unk_100134EE4, &type metadata for HeadphoneDigitalEngravingManager.Record.State);
    atomic_store(result, (unint64_t *)&qword_1001A79B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HeadphoneDigitalEngravingManager.Record.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000AADEC + 4 * byte_100134CE9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AAE20 + 4 * byte_100134CE4[v4]))();
}

uint64_t sub_1000AAE20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AAE28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AAE30);
  return result;
}

uint64_t sub_1000AAE3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AAE44);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000AAE48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AAE50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeadphoneDigitalEngravingManager.Record.CodingKeys()
{
  return &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for HeadphoneDigitalEngravingManager.Record.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000AAEB8 + 4 * byte_100134CF3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000AAEEC + 4 * byte_100134CEE[v4]))();
}

uint64_t sub_1000AAEEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AAEF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AAEFCLL);
  return result;
}

uint64_t sub_1000AAF08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AAF10);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000AAF14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AAF1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeadphoneDigitalEngravingManager.Record.State()
{
  return &type metadata for HeadphoneDigitalEngravingManager.Record.State;
}

unint64_t sub_1000AAF3C()
{
  unint64_t result;

  result = qword_1001A79C0;
  if (!qword_1001A79C0)
  {
    result = swift_getWitnessTable(&unk_100134E04, &type metadata for HeadphoneDigitalEngravingManager.Record.State);
    atomic_store(result, (unint64_t *)&qword_1001A79C0);
  }
  return result;
}

unint64_t sub_1000AAF84()
{
  unint64_t result;

  result = qword_1001A79C8;
  if (!qword_1001A79C8)
  {
    result = swift_getWitnessTable(&unk_100134EBC, &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001A79C8);
  }
  return result;
}

unint64_t sub_1000AAFCC()
{
  unint64_t result;

  result = qword_1001A79D0;
  if (!qword_1001A79D0)
  {
    result = swift_getWitnessTable(&unk_100134E2C, &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001A79D0);
  }
  return result;
}

unint64_t sub_1000AB014()
{
  unint64_t result;

  result = qword_1001A79D8;
  if (!qword_1001A79D8)
  {
    result = swift_getWitnessTable(&unk_100134E54, &type metadata for HeadphoneDigitalEngravingManager.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001A79D8);
  }
  return result;
}

unint64_t sub_1000AB058()
{
  unint64_t result;

  result = qword_1001A79E0;
  if (!qword_1001A79E0)
  {
    result = swift_getWitnessTable(&unk_100134D8C, &type metadata for HeadphoneDigitalEngravingManager.Record.State);
    atomic_store(result, (unint64_t *)&qword_1001A79E0);
  }
  return result;
}

void sub_1000AB0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  NSString v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  void *v48;
  id v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  _QWORD aBlock[5];
  uint64_t v55;
  _BYTE v56[16];
  char v57[8];
  uint64_t v58;
  _QWORD v59[2];
  _OWORD v60[12];
  _BYTE v61[200];

  v4 = v3;
  v6 = *(_OWORD *)(a3 + 144);
  v60[8] = *(_OWORD *)(a3 + 128);
  v60[9] = v6;
  v7 = *(_OWORD *)(a3 + 176);
  v60[10] = *(_OWORD *)(a3 + 160);
  v60[11] = v7;
  v8 = *(_OWORD *)(a3 + 80);
  v60[4] = *(_OWORD *)(a3 + 64);
  v60[5] = v8;
  v9 = *(_OWORD *)(a3 + 112);
  v60[6] = *(_OWORD *)(a3 + 96);
  v60[7] = v9;
  v10 = *(_OWORD *)(a3 + 16);
  v60[0] = *(_OWORD *)a3;
  v60[1] = v10;
  v11 = *(_OWORD *)(a3 + 48);
  v60[2] = *(_OWORD *)(a3 + 32);
  v60[3] = v11;
  nullsub_4(v60);
  v12 = (uint64_t)&v3[OBJC_IVAR____TtC18SharingViewService26D2DSetupBaseViewController_viewModel];
  sub_10005B590(v12, (uint64_t)v61, &qword_1001A39D0);
  sub_10005B590((uint64_t)v60, v12, &qword_1001A39D0);
  sub_100014330(a3);
  sub_1000615E4((uint64_t)v61);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setTitle:", v13);

  objc_msgSend(v4, "setAttributedSubtitle:", *(_QWORD *)(a3 + 40));
  v14 = *(void **)(a3 + 24);
  if (v14)
  {
    v15 = OBJC_IVAR____TtC18SharingViewService26D2DSetupWiFiViewController_imageView;
    v16 = *(void **)&v4[OBJC_IVAR____TtC18SharingViewService26D2DSetupWiFiViewController_imageView];
    if (v16)
    {
      v17 = v14;
      v18 = v16;
      objc_msgSend(v18, "setImage:", v17);
      v19 = *(void **)(a3 + 32);
      if (v19)
      {
        v20 = v19;
        objc_msgSend(v18, "setTintColor:", v20);

      }
    }
    else
    {
      v21 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v14);
      v22 = *(void **)&v4[v15];
      *(_QWORD *)&v4[v15] = v21;

      sub_10005B590(a3 + 32, (uint64_t)v57, &qword_1001A7A20);
      sub_10005B590((uint64_t)v57, (uint64_t)&v58, &qword_1001A7A20);
      if (v58)
      {
        v23 = *(void **)&v4[v15];
        if (!v23)
        {
LABEL_11:

          goto LABEL_12;
        }
        objc_msgSend(v23, "setTintColor:");
      }
    }
    v24 = *(void **)&v4[v15];
    if (v24)
    {
      v25 = v24;
      objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v26 = objc_msgSend(v4, "contentView");
      objc_msgSend(v26, "addSubview:", v25);

      v27 = objc_msgSend(v4, "contentView");
      v28 = objc_msgSend(v27, "mainContentGuide");

      v53 = (id)objc_opt_self(NSLayoutConstraint);
      v29 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
      v30 = swift_allocObject(v29, 64, 7);
      *(_OWORD *)(v30 + 16) = xmmword_100132270;
      v31 = objc_msgSend(v25, "topAnchor");
      v32 = objc_msgSend(v28, "topAnchor");
      v33 = objc_msgSend(v31, "constraintGreaterThanOrEqualToAnchor:", v32);

      *(_QWORD *)(v30 + 32) = v33;
      v34 = objc_msgSend(v25, "bottomAnchor");
      v35 = objc_msgSend(v28, "bottomAnchor");
      v36 = objc_msgSend(v34, "constraintLessThanOrEqualToAnchor:", v35);

      *(_QWORD *)(v30 + 40) = v36;
      v37 = objc_msgSend(v25, "centerXAnchor");
      v38 = objc_msgSend(v28, "centerXAnchor");
      v39 = objc_msgSend(v37, "constraintEqualToAnchor:", v38);

      *(_QWORD *)(v30 + 48) = v39;
      v40 = objc_msgSend(v25, "centerYAnchor");
      v41 = objc_msgSend(v28, "centerYAnchor");
      v42 = objc_msgSend(v40, "constraintEqualToAnchor:", v41);

      *(_QWORD *)(v30 + 56) = v42;
      aBlock[0] = v30;
      specialized Array._endMutation()(v43);
      sub_10000E868();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v30);
      objc_msgSend(v53, "activateConstraints:", isa);

    }
    goto LABEL_11;
  }
LABEL_12:
  v45 = OBJC_IVAR____TtC18SharingViewService26D2DSetupWiFiViewController_action;
  if (!*(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService26D2DSetupWiFiViewController_action])
  {
    sub_10005B590(a3 + 48, (uint64_t)v56, &qword_1001A5430);
    sub_10005B590((uint64_t)v56, (uint64_t)v59, &qword_1001A5430);
    if (v59[1])
    {
      v46 = swift_allocObject(&unk_10017C2E0, 24, 7);
      swift_unknownObjectUnownedInit(v46 + 16, v4);
      sub_100087C6C((uint64_t)v56);
      swift_retain(v46);
      v47 = String._bridgeToObjectiveC()();
      sub_1000AB8FC((uint64_t)v56);
      aBlock[4] = sub_1000AB8F4;
      v55 = v46;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001B5D0;
      aBlock[3] = &unk_10017C2F8;
      v48 = _Block_copy(aBlock);
      v49 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v47, 0, v48);

      _Block_release(v48);
      v50 = v55;
      swift_release(v46);
      v51 = objc_msgSend(v4, "addAction:", v49, swift_release(v50).n128_f64[0]);

      v52 = *(void **)&v4[v45];
      *(_QWORD *)&v4[v45] = v51;

    }
  }
}

void sub_1000AB668(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;

  Strong = swift_unknownObjectUnownedLoadStrong(a2 + 16);
  v3 = *(void **)(Strong + OBJC_IVAR____TtC18SharingViewService26D2DSetupWiFiViewController_action);
  v13 = (id)Strong;
  if (v3)
  {
    objc_msgSend(v3, "setEnabled:", 0);
    Strong = (uint64_t)v13;
  }
  v4 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC18SharingViewService26D2DSetupBaseViewController_presenter);
  if (v4)
  {
    v6 = v4;
    if (qword_1001A3100 != -1)
      swift_once(&qword_1001A3100, sub_10009DB40);
    v7 = type metadata accessor for Logger(0, v5);
    v8 = sub_10000E8E8(v7, (uint64_t)qword_1001A7328);
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "D2D Setup request turn on WiFi", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    sub_100076738();
    swift_unknownObjectRelease(v6);
  }
  else
  {

  }
}

void sub_1000AB81C()
{
  uint64_t v0;

}

id sub_1000AB848()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for D2DSetupWiFiViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for D2DSetupWiFiViewController()
{
  return objc_opt_self(_TtC18SharingViewService26D2DSetupWiFiViewController);
}

uint64_t sub_1000AB8D0()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000AB8F4(uint64_t a1)
{
  uint64_t v1;

  sub_1000AB668(a1, v1);
}

uint64_t sub_1000AB8FC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000AB924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AB934(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000AB93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1000ABAF8();

  }
}

uint64_t sub_1000AB9EC(void *a1)
{
  char *v1;
  NSString v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "showActivityIndicatorWithStatus:", v3);

  result = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC18SharingViewService38AuthenticateAccountsAuthViewController_presenter]);
  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(a1, "text");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v8 = v7;

    sub_1000DC75C();
    swift_bridgeObjectRelease(v8);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

void sub_1000ABAF8()
{
  char *v0;
  char *v1;
  NSString v2;
  NSString v3;
  id v4;
  id v5;

  v1 = &v0[OBJC_IVAR____TtC18SharingViewService38AuthenticateAccountsAuthViewController_viewModel];
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setTitle:", v2);

  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setSubtitle:", v3);

  objc_msgSend(v0, "setNumberOfDigits:", *((_QWORD *)v1 + 5));
  objc_msgSend(v0, "setDismissalType:", *((_QWORD *)v1 + 6));
  if (v1[32] == 1)
  {
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "showActivityIndicatorWithStatus:");
  }
  else
  {
    objc_msgSend(v0, "hideActivityIndicator");
    v4 = objc_msgSend(v0, "passcodeEntryView");
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setText:");

  }
}

id sub_1000ABC58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AuthenticateAccountsAuthViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AuthenticateAccountsAuthViewController()
{
  return objc_opt_self(_TtC18SharingViewService38AuthenticateAccountsAuthViewController);
}

void sub_1000ABCF0(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000ABD54
     + *((int *)qword_1000ABF88 + (sub_100023D8C(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1000ABD64()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_100006B94(v1, v0);
  sub_1000C9510(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100007348(v1, v0);
  v4 = v12;
  sub_100024118(&v13);
  return v4;
}

unint64_t sub_1000ABF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006A6C(&qword_1001A3618);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006BD8(v1, (uint64_t)v8, &qword_1001A3618);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    v12 = 0;
    v13 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v13);
    return 0xD000000000000012;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = sub_100005B80((unint64_t *)&unk_1001A7CD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v2, v10);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v9;
}

unint64_t sub_1000AC100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100006A6C(&qword_1001A42A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006BD8(v1, (uint64_t)v8, &qword_1001A42A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    v12 = 0;
    v13 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v13);
    return 0xD000000000000013;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v10 = sub_100005B80(&qword_1001A5450, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v2, v10);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v9;
}

_QWORD *sub_1000AC268@<X0>(int a1@<W0>, unint64_t a2@<X1>, _QWORD *a3@<X3>, unint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_17;
  v4 = a2;
  if (!a2)
    return _swiftEmptyArrayStorage;
  LODWORD(v5) = a1;
  a3 = sub_1000C8560(0, 1, 1, _swiftEmptyArrayStorage);
  v7 = a3[2];
  a4 = a3[3];
  v6 = v7 + 1;
  if (v7 >= a4 >> 1)
    goto LABEL_18;
  while (1)
  {
    a3[2] = v6;
    *((_BYTE *)a3 + v7 + 32) = v5;
    if (v4 == 1)
      break;
    v8 = a3[3];
    if (v6 >= v8 >> 1)
      a3 = sub_1000C8560((_QWORD *)(v8 > 1), v7 + 2, 1, a3);
    a4 = v5 >> 8;
    a3[2] = v7 + 2;
    *((_BYTE *)a3 + v6 + 32) = BYTE1(v5);
    v5 = v4 - 2;
    if (v4 == 2)
      break;
    v6 = v7 + 34;
    for (i = 0xFFFFFFFFFFFFFFELL; i; --i)
    {
      a4 = a3[3];
      v4 = v6 - 31;
      if (v6 - 32 >= a4 >> 1)
        a3 = sub_1000C8560((_QWORD *)(a4 > 1), v6 - 31, 1, a3);
      a3[2] = v4;
      *((_BYTE *)a3 + v6++) = 0;
      if (!--v5)
        return a3;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    a3 = sub_1000C8560((_QWORD *)(a4 > 1), v6, 1, a3);
  }
  return a3;
}

_QWORD *sub_1000AC3AC@<X0>(int a1@<W0>, unint64_t a2@<X1>, _QWORD *a3@<X3>, unint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  int64_t i;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_23;
  v4 = a2;
  if (!a2)
    return _swiftEmptyArrayStorage;
  LODWORD(v5) = a1;
  a3 = sub_1000C8560(0, 1, 1, _swiftEmptyArrayStorage);
  v7 = a3[2];
  a4 = a3[3];
  i = v7 + 1;
  if (v7 >= a4 >> 1)
    goto LABEL_24;
  while (1)
  {
    a3[2] = i;
    *((_BYTE *)a3 + v7 + 32) = v5;
    if (v4 == 1)
      break;
    v9 = a3[2];
    v8 = a3[3];
    if (v9 >= v8 >> 1)
      a3 = sub_1000C8560((_QWORD *)(v8 > 1), v9 + 1, 1, a3);
    a3[2] = v9 + 1;
    *((_BYTE *)a3 + v9 + 32) = BYTE1(v5);
    if (v4 == 2)
      break;
    v11 = a3[2];
    v10 = a3[3];
    if (v11 >= v10 >> 1)
      a3 = sub_1000C8560((_QWORD *)(v10 > 1), v11 + 1, 1, a3);
    a3[2] = v11 + 1;
    *((_BYTE *)a3 + v11 + 32) = BYTE2(v5);
    if (v4 == 3)
      break;
    v7 = a3[2];
    v12 = a3[3];
    if (v7 >= v12 >> 1)
      a3 = sub_1000C8560((_QWORD *)(v12 > 1), v7 + 1, 1, a3);
    a4 = BYTE3(v5);
    a3[2] = v7 + 1;
    *((_BYTE *)a3 + v7 + 32) = BYTE3(v5);
    v5 = v4 - 4;
    if (v4 == 4)
      break;
    for (i = 0xFFFFFFFFFFFFFFCLL; i; --i)
    {
      v7 = a3[2];
      v13 = a3[3];
      v4 = v7 + 1;
      if (v7 >= v13 >> 1)
        a3 = sub_1000C8560((_QWORD *)(v13 > 1), v7 + 1, 1, a3);
      a3[2] = v4;
      a4 = (unint64_t)a3 + v7;
      *((_BYTE *)a3 + v7 + 32) = 0;
      if (!--v5)
        return a3;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    a3 = sub_1000C8560((_QWORD *)(a4 > 1), i, 1, a3);
  }
  return a3;
}

void sub_1000AC568(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12[3];

  v5 = v4;
  if (a3 == 1)
  {
    sub_1000CD1A4((uint64_t)a4, (uint64_t)v12);

    sub_100055998(v12[0], v12[1], (void *)v12[2]);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_1000CF3F8(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
    v11 = *v4;
    *v5 = v12[0];

    swift_bridgeObjectRelease(v11);
  }
}

void sub_1000AC624(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000AC678(uint64_t a1)
{
  return sub_1000AC68C(a1);
}

uint64_t sub_1000AC68C(uint64_t a1)
{
  char v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v25[24];
  _QWORD *v26;

  if (qword_1001A2F08 != -1)
    swift_once(&qword_1001A2F08, sub_10001DDD4);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_beginAccess(&off_1001A3CD0, v25, 33, 0);
  swift_bridgeObjectRetain(v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_1001A3CD0);
  v6 = off_1001A3CD0;
  v26 = off_1001A3CD0;
  off_1001A3CD0 = (_UNKNOWN *)0x8000000000000000;
  v8 = sub_100005D24(v4, v3);
  v9 = v6[2];
  v10 = (v7 & 1) == 0;
  v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_14;
  }
  v1 = v7;
  if (v6[3] < v11)
  {
    sub_1000CDAC4(v11, isUniquelyReferenced_nonNull_native);
    v6 = v26;
    v12 = sub_100005D24(v4, v3);
    if ((v1 & 1) == (v13 & 1))
    {
      v8 = v12;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_15;
  while (1)
  {
LABEL_8:
    v14 = off_1001A3CD0;
    off_1001A3CD0 = v6;
    swift_bridgeObjectRelease(v14);
    v15 = off_1001A3CD0;
    if ((v1 & 1) != 0)
      goto LABEL_11;
    *((_QWORD *)off_1001A3CD0 + (v8 >> 6) + 8) |= 1 << v8;
    v16 = (uint64_t *)(v15[6] + 16 * v8);
    *v16 = v4;
    v16[1] = v3;
    *(_QWORD *)(v15[7] + 8 * v8) = 0;
    v17 = v15[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      break;
    v15[2] = v19;
    swift_bridgeObjectRetain(v3);
LABEL_11:
    v20 = v15[7];
    v21 = *(_QWORD *)(v20 + 8 * v8);
    v22 = __CFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      *(_QWORD *)(v20 + 8 * v8) = v23;
      swift_endAccess(v25);
      return swift_bridgeObjectRelease(v3);
    }
LABEL_14:
    __break(1u);
LABEL_15:
    sub_1000D0200();
    v6 = v26;
  }
  __break(1u);
LABEL_17:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000AC858(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_1000AC894(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  _BYTE *v25;
  char *v26;
  void *v27;
  void *v28;
  id v29;
  NSString v30;
  NSString v31;
  NSString v32;
  NSString v33;
  id v34;
  Swift::String v35;

  v3 = v2;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "startTapped", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didTapStart] = 1;
  v10 = *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionError];
  if (v10)
  {
    swift_errorRetain(*(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionError]);
    sub_1000BCC24(v10);
    swift_errorRelease(v10);
    return;
  }
  v11 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC;
  v12 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC];
  if (!v12)
  {
    v24 = objc_allocWithZone((Class)type metadata accessor for AirTagRolePickerViewController());
    v25 = v3;
    v26 = (char *)objc_msgSend(v24, "init");
    swift_unknownObjectWeakAssign(&v26[OBJC_IVAR____TtC18SharingViewService30AirTagRolePickerViewController_mainController], v25);

    v27 = *(void **)&v3[v11];
    *(_QWORD *)&v3[v11] = v26;

    v28 = *(void **)&v3[v11];
    if (!v28)
      goto LABEL_15;
    v29 = v28;
    sub_1000649C4(&v35);
    v30 = String._bridgeToObjectiveC()();
    v31 = String._bridgeToObjectiveC()();
    v32 = String._bridgeToObjectiveC()();
    v33 = String._bridgeToObjectiveC()();
    sub_1000A2CF4(&v35);
    v34 = objc_msgSend(v29, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v30, v31, v32, v33);

    objc_msgSend(v29, "setDismissButtonAction:", v34);
    v12 = *(void **)&v3[v11];
    if (!v12)
      goto LABEL_15;
  }
  v13 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav;
  v14 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
  if (!v14)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = v12;
  v16 = v14;
  v17 = objc_msgSend(v16, "viewControllers");
  v18 = sub_100013194(0, (unint64_t *)&qword_1001A3A10, UIViewController_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  v20 = v15;
  LOBYTE(v17) = sub_1000D3AB0(v19, (uint64_t)v20);

  swift_bridgeObjectRelease(v19);
  v21 = *(void **)&v3[v13];
  if ((v17 & 1) != 0)
  {
    if (v21)
    {
      v22 = v21;

LABEL_14:
LABEL_15:
      sub_1000AF594(v23);
      return;
    }
    goto LABEL_20;
  }
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v22, "pushViewController:animated:", v20, 1);
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_1000ACBEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

unint64_t sub_1000ACBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  char *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100006A6C(&qword_1001A3240);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v36 = (unint64_t)(63 - v4) >> 6;
  v7 = &v43;
  v8 = &v45;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = (char *)&type metadata for Any + 8;
  v12 = &type metadata for Bool;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v36)
    goto LABEL_32;
  v22 = *(_QWORD *)(v37 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v36)
      goto LABEL_32;
    v22 = *(_QWORD *)(v37 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v36)
        goto LABEL_32;
      v22 = *(_QWORD *)(v37 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v36)
          goto LABEL_32;
        v22 = *(_QWORD *)(v37 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v36)
          {
            v22 = *(_QWORD *)(v37 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v36)
                break;
              v22 = *(_QWORD *)(v37 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10002413C(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v39 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    LOBYTE(v25) = *(_BYTE *)(*(_QWORD *)(v1 + 56) + v20);
    v41 = v27;
    v42 = v26;
    v40 = (char)v25;
    swift_bridgeObjectRetain(v26);
    swift_dynamicCast(v7, &v40, v12, v11, 7);
    v28 = v41;
    v29 = v42;
    sub_100006AAC(v7, v8);
    sub_100006AAC(v8, v46);
    sub_100006AAC(v46, &v44);
    result = sub_100005D24(v28, v29);
    v30 = result;
    if ((v31 & 1) != 0)
    {
      v38 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v28;
      v18[1] = v29;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v38;
      v19 = (_QWORD *)(v3[7] + 32 * v30);
      sub_100024118(v19);
      result = (unint64_t)sub_100006AAC(&v44, v19);
      v6 = v39;
      if (!v39)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v32 = (uint64_t *)(v3[6] + 16 * result);
    *v32 = v28;
    v32[1] = v29;
    result = (unint64_t)sub_100006AAC(&v44, (_OWORD *)(v3[7] + 32 * result));
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_34;
    v3[2] = v35;
    v6 = v39;
    if (!v39)
      goto LABEL_11;
LABEL_10:
    v39 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1000ACF4C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  int v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100006A6C((uint64_t *)&unk_1001A7E30);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v12);
    sub_10000D894(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    LODWORD(v39[0]) = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    v38 = v40;
    LODWORD(v36[0]) = v17;
    swift_dynamicCast(&v28, v36, &type metadata for Int32, &type metadata for AnyHashable, 7);
    sub_100006AAC((_OWORD *)((char *)v37 + 8), v31);
    v32 = v28;
    v33 = v29;
    v34 = v30;
    sub_100006AAC(v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    sub_100006AAC(v35, v36);
    sub_100006AAC(v36, &v32);
    v18 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v19 = -1 << *((_BYTE *)v3 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)&v7[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)&v7[8 * v21];
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    sub_100006AAC(&v32, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release(v3);
    sub_10002413C(a1);
    return;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_1000AD300(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000AD394(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000AD3B8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1000AD42C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_100013194(0, &qword_1001A7CF0, SPBeaconRoleCategory_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  v7 = swift_retain(v3);
  v4(v6, v7);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000AD498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000AD5CC(uint64_t a1, double a2, double a3, double a4)
{
  void (*v7)(double, double, double);
  uint64_t v8;

  v7 = *(void (**)(double, double, double))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_retain(v8);
  v7(a2, a3, a4);
  return swift_release(v8);
}

void sub_1000AD620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];

  v1 = v0;
  v2 = type metadata accessor for B389PresentationConfig.Mode(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v37[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v3);
  v7 = &v37[-v6 - 8];
  v8 = sub_100006A6C(&qword_1001A5428);
  v9 = __chkstk_darwin(v8);
  v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9);
  v13 = &v37[-v12 - 8];
  v14 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
  swift_beginAccess(v14, v39, 0, 0);
  sub_100006BD8(v14, (uint64_t)v13, &qword_1001A5428);
  v15 = type metadata accessor for B389PresentationConfig(0);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
  if (v16(v13, 1, v15) == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  sub_100023F5C((uint64_t)v13, (uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
  sub_100023F5C((uint64_t)v7, (uint64_t)v5, type metadata accessor for B389PresentationConfig.Mode);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_100023FA0((uint64_t)v5, type metadata accessor for B389PresentationConfig.Mode);
      sub_100023FA0((uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
      sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
LABEL_9:
      sub_100006BD8(v14, (uint64_t)v11, &qword_1001A5428);
      if (v16(v11, 1, v15) != 1)
      {
        v23 = *(_QWORD *)&v11[*(int *)(v15 + 36)];
        v24 = type metadata accessor for SDB389BubbleMonitor();
        swift_allocObject(v24, 88, 7);
        v25 = sub_10001ADC0(v23);
        sub_100023FA0((uint64_t)v11, type metadata accessor for B389PresentationConfig);
        v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor);
        *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor) = v25;
        goto LABEL_11;
      }
LABEL_17:
      __break(1u);
      return;
    }
    v18 = v5[*(int *)(sub_100006A6C(&qword_1001A7DF0) + 48)];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v5, v19);
  }
  else
  {
    v18 = *v5;
  }
  sub_100023FA0((uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
  sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
  if (!v18)
    goto LABEL_9;
  v20 = type metadata accessor for SDB389BubbleMonitor();
  swift_allocObject(v20, 88, 7);
  v21 = sub_10001ADC0(-50);
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor) = v21;
LABEL_11:
  swift_release(v22);
  v26 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor;
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor);
  if (v27)
  {
    sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
    v28 = swift_retain(v27);
    v29 = static OS_dispatch_queue.main.getter(v28);
    swift_beginAccess(v27 + 24, v38, 1, 0);
    v30 = *(void **)(v27 + 24);
    *(_QWORD *)(v27 + 24) = v29;
    swift_release(v27);

    v31 = *(_QWORD *)(v1 + v26);
    if (v31)
    {
      v32 = swift_allocObject(&unk_10017C460, 24, 7);
      swift_unknownObjectWeakInit(v32 + 16, v1);
      swift_beginAccess(v31 + 48, v37, 1, 0);
      v33 = *(_QWORD *)(v31 + 48);
      v34 = *(_QWORD *)(v31 + 56);
      *(_QWORD *)(v31 + 48) = sub_1000D8EC0;
      *(_QWORD *)(v31 + 56) = v32;
      sub_100012F60(v33, v34);
      v35 = *(_QWORD *)(v1 + v26);
      if (v35)
      {
        swift_retain(*(_QWORD *)(v1 + v26));
        sub_10001AE3C((uint64_t)nullsub_4, 0);
        swift_release(v35);
      }
    }
  }
}

void sub_1000AD9D0(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  char *v36;
  char *v37;
  NSString v38;
  NSString v39;
  NSString v40;
  NSString v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int EnumCaseMultiPayload;
  int v48;
  uint64_t v49;
  char v51[24];
  Swift::String v52;

  v2 = v1;
  v4 = type metadata accessor for B389PresentationConfig.Mode(0);
  v5 = __chkstk_darwin(v4);
  v7 = (unsigned __int8 *)&v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v51[-v8 - 8];
  v10 = sub_100006A6C(&qword_1001A5428);
  v11 = __chkstk_darwin(v10);
  v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11);
  v15 = &v51[-v14 - 8];
  if (qword_1001A2E58 != -1)
    swift_once(&qword_1001A2E58, sub_100007814);
  v16 = qword_1001AD3B0;
  v17 = String._bridgeToObjectiveC()();
  LOBYTE(v16) = objc_msgSend((id)v16, "BOOLForKey:", v17);

  if ((v16 & 1) == 0)
  {
    v19 = (uint64_t)&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig];
    swift_beginAccess(&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig], v51, 0, 0);
    sub_100006BD8(v19, (uint64_t)v15, &qword_1001A5428);
    v20 = type metadata accessor for B389PresentationConfig(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v15, 1, v20) == 1)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v21 = v15[*(int *)(v20 + 32)];
    sub_100023FA0((uint64_t)v15, type metadata accessor for B389PresentationConfig);
    if (v21 == 1)
    {
      sub_1000C6B08(a1);
      return;
    }
  }
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v22 = type metadata accessor for Logger(0, v18);
  v23 = sub_10000E8E8(v22, (uint64_t)qword_1001A7A60);
  v24 = Logger.logObject.getter(v23);
  v26 = static os_log_type_t.default.getter(v24, v25);
  if (os_log_type_enabled(v24, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "continuePressed", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  sub_1000B4B54(1);
  v28 = objc_allocWithZone((Class)LSApplicationRecord);
  v29 = sub_1000C83B8(0xD000000000000010, 0x8000000100135F00, 0);
  v44 = v29;
  if (!v29)
  {
    v31 = Logger.logObject.getter(0);
    v33 = static os_log_type_t.default.getter(v31, v32);
    if (os_log_type_enabled(v31, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v33, "FindMy not installed when continueFromStartView, showing AirTagInstallFindMyViewController", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    v35 = objc_allocWithZone((Class)type metadata accessor for AirTagInstallFindMyViewController());
    v36 = v2;
    v37 = (char *)objc_msgSend(v35, "init");
    swift_unknownObjectWeakAssign(&v37[OBJC_IVAR____TtC18SharingViewService33AirTagInstallFindMyViewController_mainController], v36);

    sub_1000649C4(&v52);
    v38 = String._bridgeToObjectiveC()();
    v39 = String._bridgeToObjectiveC()();
    v40 = String._bridgeToObjectiveC()();
    v41 = String._bridgeToObjectiveC()();
    sub_1000A2CF4(&v52);
    v42 = objc_msgSend(v37, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v38, v39, v40, v41);

    objc_msgSend(v37, "setDismissButtonAction:", v42);
    v43 = *(void **)&v36[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
    if (v43)
    {
      sub_1000AF594((uint64_t)objc_msgSend(v43, "pushViewController:animated:", v37, 1));

      return;
    }
    __break(1u);
    goto LABEL_27;
  }
  sub_1000AC894((uint64_t)v29, v30);
  v45 = (uint64_t)&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig];
  swift_beginAccess(&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig], &v52, 0, 0);
  sub_100006BD8(v45, (uint64_t)v13, &qword_1001A5428);
  v46 = type metadata accessor for B389PresentationConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v13, 1, v46) != 1)
  {
    sub_100023F5C((uint64_t)v13, (uint64_t)v9, type metadata accessor for B389PresentationConfig.Mode);
    sub_100023F5C((uint64_t)v9, (uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v4);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_100023FA0((uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
        sub_100023FA0((uint64_t)v9, type metadata accessor for B389PresentationConfig.Mode);
        sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
LABEL_25:

        return;
      }
      v48 = v7[*(int *)(sub_100006A6C(&qword_1001A7DF0) + 48)];
      v49 = type metadata accessor for UUID(0);
      (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v7, v49);
    }
    else
    {
      v48 = *v7;
    }
    sub_100023FA0((uint64_t)v9, type metadata accessor for B389PresentationConfig.Mode);
    sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
    if (v48)
      sub_1000C6CE8();
    goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000ADF90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSString v6;
  NSString v7;
  NSString v8;
  NSString v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  os_log_t oslog;
  NSObject *osloga;
  _BYTE v32[24];
  Swift::String v33;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC);
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    sub_1000649C4(&v33);
    v6 = String._bridgeToObjectiveC()();
    v7 = String._bridgeToObjectiveC()();
    v8 = String._bridgeToObjectiveC()();
    v9 = String._bridgeToObjectiveC()();
    sub_1000A2CF4(&v33);
    v10 = -[NSObject dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:](v5, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v6, v7, v8, v9);

    oslog = v5;
    -[NSObject setDismissButtonAction:](v5, "setDismissButtonAction:", v10);

    v11 = (uint64_t *)(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo);
    swift_beginAccess(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo, v32, 0, 0);
    v12 = *v11;
    v13 = v11[1];
    v14 = (void *)v11[2];
    v15 = v11[3];
    v16 = v11[4];
    v17 = (uint64_t *)((char *)v5 + OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_appleIDInfo);
    v18 = *(uint64_t *)((char *)&v5->isa + OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_appleIDInfo);
    v19 = *(uint64_t *)((char *)&v5[1].isa + OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_appleIDInfo);
    v21 = *(Class *)((char *)&v5[2].isa + OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_appleIDInfo);
    v20 = *(uint64_t *)((char *)&v5[3].isa + OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_appleIDInfo);
    v29 = v17[4];
    *v17 = v12;
    v17[1] = v13;
    v17[2] = (uint64_t)v14;
    v17[3] = v15;
    v17[4] = v16;
    sub_100055E3C(v12, v13, v14, v15, v16);
    sub_100055E3C(v12, v13, v14, v15, v16);
    v22 = sub_1000174C4(v18, v19, v21, v20, v29);
    sub_10007120C(v22, v23);
    sub_1000174C4(v12, v13, v14, v15, v16);
    v24 = *(void **)(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav);
    if (v24)
    {
      objc_msgSend(v24, "pushViewController:animated:", oslog, 1);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v25 = type metadata accessor for Logger(0, a2);
    v26 = sub_10000E8E8(v25, (uint64_t)qword_1001A7A60);
    osloga = Logger.logObject.getter(v26);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(osloga, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v27, "linkingVC is nill when showLoadingView is called", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
}

void sub_1000AE238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  Swift::String v16;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC);
  if (v3)
  {
    v4 = v3;
    sub_1000649C4(&v16);
    v5 = String._bridgeToObjectiveC()();
    v6 = String._bridgeToObjectiveC()();
    v7 = String._bridgeToObjectiveC()();
    v8 = String._bridgeToObjectiveC()();
    sub_1000A2CF4(&v16);
    v9 = objc_msgSend(v4, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v5, v6, v7, v8);

    objc_msgSend(v4, "setDismissButtonAction:", v9);
    v10 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav);
    if (v10)
    {
      sub_1000AF594((uint64_t)objc_msgSend(v10, "pushViewController:animated:", v4, 1));

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v11 = type metadata accessor for Logger(0, a2);
    v12 = sub_10000E8E8(v11, (uint64_t)qword_1001A7A60);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "namingVC is nill when showNamingVC is called", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
}

void sub_1000AE414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  NSString v16;
  NSString v17;
  NSString v18;
  NSString v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  __n128 v38;
  void *v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  NSObject *v59;
  Swift::String v60;

  v1 = sub_100006A6C(&qword_1001A3CE0);
  __chkstk_darwin(v1);
  v3 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char **)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchTime(0);
  v57 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v14 = *(Class *)((char *)&v0->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC);
  if (v14)
  {
    v54 = v13;
    v55 = v3;
    v58 = (char *)&v54 - v12;
    v56 = v10;
    v15 = v14;
    sub_1000649C4(&v60);
    v16 = String._bridgeToObjectiveC()();
    v17 = String._bridgeToObjectiveC()();
    v18 = String._bridgeToObjectiveC()();
    v19 = String._bridgeToObjectiveC()();
    v59 = v0;
    v20 = v19;
    sub_1000A2CF4(&v60);
    v21 = objc_msgSend(v15, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v16, v17, v18, v20);

    objc_msgSend(v15, "setDismissButtonAction:", v21);
    v22 = *(Class *)((char *)&v59->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav);
    if (v22)
    {
      v23 = v15;
      v24 = objc_msgSend(v22, "pushViewController:animated:", v23, 1);
      v25 = v54;
      static DispatchTime.now()(v24);
      *v7 = 90;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v4);
      v26 = v58;
      + infix(_:_:)(v25, v7);
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
      v28 = v56;
      v27 = v57;
      v29 = *(void (**)(char *, uint64_t))(v57 + 8);
      v29(v25, v56);
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v31 = type metadata accessor for Logger(0, v30);
      v32 = sub_10000E8E8(v31, (uint64_t)qword_1001A7A60);
      v33 = Logger.logObject.getter(v32);
      v35 = static os_log_type_t.default.getter(v33, v34);
      if (os_log_type_enabled(v33, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v35, "Starting timeout.", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v25, v26, v28);
      v37 = (uint64_t)v55;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v55, 1, 1, v28);
      sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
      v39 = (void *)static OS_dispatch_queue.main.getter(v38);
      v40 = v25;
      v41 = swift_allocObject(&unk_10017CD48, 24, 7);
      v42 = v59;
      *(_QWORD *)(v41 + 16) = v59;
      v43 = type metadata accessor for PushableTimer(0);
      swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
      v44 = v42;
      v45 = sub_100021388(v40, v37, v39, (uint64_t)sub_1000D8E9C, v41);

      swift_release(v41);
      v46 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout;
      v47 = *(uint64_t *)((char *)&v44->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout);
      *(Class *)((char *)&v44->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout) = (Class)v45;
      swift_release(v47);
      v49 = *(uint64_t *)((char *)&v44->isa + v46);
      if (v49)
      {
        swift_getObjectType(*(_QWORD *)(v49 + OBJC_IVAR____TtC18SharingViewService13PushableTimer_timer));
        swift_retain(v49);
        OS_dispatch_source.resume()();
        swift_release(v49);
      }
      sub_1000AF594(v48);

      v29(v58, v28);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v50 = type metadata accessor for Logger(0, v11);
    v51 = sub_10000E8E8(v50, (uint64_t)qword_1001A7A60);
    v59 = Logger.logObject.getter(v51);
    v52 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v59, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v52, "loadingVC is nill when showLoadingView is called", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

  }
}

uint64_t sub_1000AE918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000D858(a1, (uint64_t *)&unk_1001A7D70);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10017CD20, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1001A7E00, v16);
}

uint64_t sub_1000AEA64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7A60);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7A60);
  if (qword_1001A2ED8 != -1)
    swift_once(&qword_1001A2ED8, sub_100018C6C);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD438);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void *sub_1000AEAF4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1000AEB38(uint64_t a1, uint64_t a2)
{
  return sub_1000D2BA8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_1000AEB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  id v8;
  id v9;
  id v10;
  NSString v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleName + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleName);
LABEL_3:
    swift_bridgeObjectRetain(v1);
    return v2;
  }
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories);
  if (!v4)
  {
    v2 = 0;
    goto LABEL_3;
  }
  v5 = swift_bridgeObjectRetain(*(_QWORD *)(v0
                                          + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories));
  v6 = sub_100030800(v5);
  result = swift_bridgeObjectRelease(v4);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex + 8) == 1)
  {
    swift_bridgeObjectRelease(v6);
    v2 = 0;
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < v6[2])
  {
    v8 = (id)v6[2 * v7 + 5];
    swift_bridgeObjectRelease(v6);
    v9 = objc_msgSend(v8, "roleId");
    if (v9 == (id)SPBeaconRoleIdOther)
    {
      v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v11 = String._bridgeToObjectiveC()();
      v12 = String._bridgeToObjectiveC()();
      v13 = sub_100117218(v10, v11, v12);

    }
    else
    {
      v13 = objc_msgSend(v8, "role");
    }
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

    v16 = (uint64_t *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fnameDisplay);
    v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fnameDisplay + 8);
    if (v17)
    {
      v18 = *v16;
      v19 = (void *)objc_opt_self(NSBundle);
      swift_bridgeObjectRetain(v17);
      v20 = objc_msgSend(v19, "mainBundle");
      v21 = String._bridgeToObjectiveC()();
      v22 = String._bridgeToObjectiveC()();
      v23 = sub_100117218(v20, v21, v22);

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v27 = sub_100006A6C((uint64_t *)&unk_1001A7D20);
      v28 = swift_allocObject(v27, 112, 7);
      *(_OWORD *)(v28 + 16) = xmmword_100131C30;
      *(_QWORD *)(v28 + 56) = &type metadata for String;
      v29 = sub_10000D794();
      *(_QWORD *)(v28 + 32) = v18;
      *(_QWORD *)(v28 + 40) = v17;
      *(_QWORD *)(v28 + 96) = &type metadata for String;
      *(_QWORD *)(v28 + 104) = v29;
      *(_QWORD *)(v28 + 64) = v29;
      *(_QWORD *)(v28 + 72) = v2;
      *(_QWORD *)(v28 + 80) = v15;
      v2 = static String.localizedStringWithFormat(_:_:)(v24, v26, v28);

      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v28);
    }
    else
    {

    }
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AEE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  id v8;
  id v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleEmoji + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleEmoji);
LABEL_10:
    swift_bridgeObjectRetain(v1);
    return v2;
  }
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories);
  if (!v3)
  {
LABEL_6:
    v2 = 0;
    goto LABEL_10;
  }
  v4 = swift_bridgeObjectRetain(*(_QWORD *)(v0
                                          + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories));
  v5 = sub_100030800(v4);
  result = swift_bridgeObjectRelease(v3);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex + 8) == 1)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < v5[2])
  {
    v8 = (id)v5[2 * v7 + 5];
    swift_bridgeObjectRelease(v5);
    v9 = objc_msgSend(v8, "roleEmoji");

    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_1000AEFA8(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char *v20;
  Class isa;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  Class v27;
  unint64_t v28;
  Class v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  double (**v37)();
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  objc_class *v42;
  char *v43;
  uint64_t v44;
  id v45;
  char *v46;
  id v47;
  void *v48;
  id v49;
  char *v50;
  char *v51;
  void *v52;
  id v53;
  char *v54;
  char *v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  objc_super v60;
  char v61[80];
  objc_super v62;

  v2 = v1;
  v62.receiver = v1;
  v62.super_class = (Class)type metadata accessor for AirTagSetupMainViewController(0);
  objc_msgSendSuper2(&v62, "viewDidAppear:", a1 & 1);
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v5 = type metadata accessor for Logger(0, v4);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A7A60);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "AirTagSetupMainViewController viewWillAppear", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_msgSend(v2, "_remoteViewControllerProxy");
  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_retain];
  *(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_retain] = v11;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v12);
  if (v11)
  {
    objc_msgSend(v11, "setStatusBarHidden:withDuration:", 1, 0.0);
    swift_unknownObjectRetain(v11);
    objc_msgSend(v11, "setDesiredHardwareButtonEvents:", objc_msgSend(v2, "desiredHomeButtonEvents"));
    swift_unknownObjectRelease(v11);
  }
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = sub_100006A6C(&qword_1001A56A8);
  inited = swift_initStackObject(v15, v61);
  *(_OWORD *)(inited + 16) = xmmword_100131C40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBManagerNeedsRestrictedStateOperation);
  *(_QWORD *)(inited + 40) = v17;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v18 = sub_1000046D0(inited);
  v19 = objc_allocWithZone((Class)CBCentralManager);
  v20 = v2;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v22 = objc_msgSend(v19, "initWithDelegate:queue:options:", v20, v14, isa);

  v23 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central;
  v24 = *(void **)&v20[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central];
  *(_QWORD *)&v20[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central] = v22;

  v25 = *(void **)&v20[v23];
  if (!v25)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_100013194(0, (unint64_t *)&unk_1001A54A0, CBUUID_ptr);
  v26 = v25;
  v27 = Array._bridgeToObjectiveC()().super.isa;
  v28 = sub_1000046D0((uint64_t)_swiftEmptyArrayStorage);
  v29 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v26, "scanForPeripheralsWithServices:options:", v27, v29);

  v30 = *(void **)&v20[v23];
  if (!v30)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v31 = objc_msgSend(v30, "sharedPairingAgent");
  if (!v31)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v32 = v31;
  objc_msgSend(v31, "setDelegate:", v20);

  if (sub_100056284())
  {
    v33 = objc_allocWithZone((Class)type metadata accessor for AirTagStartViewController());
    v34 = v20;
    v35 = (char *)objc_msgSend(v33, "init");
    swift_unknownObjectWeakAssign(&v35[OBJC_IVAR____TtC18SharingViewService25AirTagMovieViewController_mainController], v34);

    v36 = swift_allocObject(&unk_10017C460, 24, 7);
    swift_unknownObjectWeakInit(v36 + 16, v34);
    v37 = (double (**)())&v35[OBJC_IVAR____TtC18SharingViewService25AirTagStartViewController_invalidateBubbleMonitor];
    v38 = *(_QWORD *)&v35[OBJC_IVAR____TtC18SharingViewService25AirTagStartViewController_invalidateBubbleMonitor];
    v39 = *(_QWORD *)&v35[OBJC_IVAR____TtC18SharingViewService25AirTagStartViewController_invalidateBubbleMonitor + 8];
    *v37 = sub_1000D8E94;
    v37[1] = (double (*)())v36;
    sub_100012F60(v38, v39);
    v40 = *(void **)&v34[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startVC];
    *(_QWORD *)&v34[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startVC] = v35;
    v41 = v35;

  }
  else
  {
    v42 = (objc_class *)type metadata accessor for AirTagRestrictedViewController();
    v43 = (char *)objc_allocWithZone(v42);
    v44 = swift_unknownObjectWeakInit(&v43[OBJC_IVAR____TtC18SharingViewService30AirTagRestrictedViewController_mainController], 0);
    swift_unknownObjectWeakAssign(v44, v20);
    v60.receiver = v43;
    v60.super_class = v42;
    v41 = (char *)objc_msgSendSuper2(&v60, "initWithContentView:", 0);
  }
  v45 = objc_allocWithZone((Class)type metadata accessor for AirTagCustomNameViewController());
  v46 = v20;
  v47 = sub_1000678D8(v46);
  v48 = *(void **)&v46[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC];
  *(_QWORD *)&v46[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC] = v47;

  v49 = objc_allocWithZone((Class)type metadata accessor for AirTagLinkingViewController());
  v50 = v46;
  v51 = sub_100071944((uint64_t)v50);
  v52 = *(void **)&v50[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC];
  *(_QWORD *)&v50[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC] = v51;

  v53 = objc_allocWithZone((Class)type metadata accessor for AirTagLoadingViewController());
  v54 = v50;
  v55 = (char *)objc_msgSend(v53, "init");
  swift_unknownObjectWeakAssign(&v55[OBJC_IVAR____TtC18SharingViewService25AirTagMovieViewController_mainController], v54);

  v56 = *(void **)&v54[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC];
  *(_QWORD *)&v54[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC] = v55;

  v57 = objc_msgSend(v54, "presentProxCardFlowWithDelegate:initialViewController:", v54, v41);
  v58 = *(void **)&v54[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
  *(_QWORD *)&v54[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav] = v57;

  sub_1000AF594(v59);
  swift_unknownObjectRelease(v11);

}

double sub_1000AF524(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  void *v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor);
    swift_retain(v5);

    if (v5)
    {
      sub_10001B934();
      *(_QWORD *)&result = swift_release(v5).n128_u64[0];
    }
  }
  return result;
}

void sub_1000AF594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  if (qword_1001A2F10 != -1)
    a1 = swift_once(&qword_1001A2F10, sub_10001DDF8);
  v3 = (os_unfair_lock_s *)qword_1001A3CD8;
  __chkstk_darwin(a1);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 4);
  sub_100055804(&v13);
  v4 = v13;
  os_unfair_lock_unlock(v3 + 4);
  swift_release(v3);
  if (v4 != 1)
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v6 = type metadata accessor for Logger(0, v5);
    v7 = sub_10000E8E8(v6, (uint64_t)qword_1001A7A60);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134217984;
      v13 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unexpected quantity of AirTagSetupMainViewController instances: %lu. fault is likely due to a retain cycle.", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsNFCUI) & 1) == 0)
  {
    sub_1000B602C();
    sub_1000B96F4();
    sub_1000C51F0();
    sub_1000B9B6C();
    sub_1000B854C();
    sub_1000B91B4(v11, v12);
    sub_1000BA918();
    sub_1000BD8B8();
    sub_1000BDBB0();
    sub_1000B602C();
    sub_1000BDD74();
    sub_1000BE48C();
    sub_1000BEA98();
    sub_1000BB58C();
    sub_1000B9930();
    sub_1000BF670();
    sub_1000C1958();
    sub_1000C2064();
    sub_1000C3030();
    sub_1000C3800();
    sub_1000C40E8();
    sub_1000C4460();
    sub_1000BB720();
    sub_1000C4664(1);
    sub_1000BCF04();
    sub_1000AFEC0(1);
  }
}

void sub_1000AFA20(char a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(_QWORD, uint64_t, double);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  Swift::UInt64 v37;
  Swift::UInt64 v38;
  BOOL v39;
  Swift::UInt64 v40;
  double v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  void *v48;
  id v49;
  objc_super v50;

  v3 = v2;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v5 = type metadata accessor for Logger(0, a2);
  v6 = sub_10000E8E8(v5, (uint64_t)qword_1001A7A60);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Main viewDidDisappear", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v50.receiver = v3;
  v50.super_class = (Class)type metadata accessor for AirTagSetupMainViewController(0);
  objc_msgSendSuper2(&v50, "viewDidDisappear:", a1 & 1);
  sub_1000AFEC0(0);
  v11 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startVC;
  v12 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startVC];
  if (v12)
  {
    swift_unknownObjectWeakAssign(&v12[OBJC_IVAR____TtC18SharingViewService25AirTagMovieViewController_mainController], 0);
    v12 = *(char **)&v3[v11];
  }
  *(_QWORD *)&v3[v11] = 0;

  v13 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC;
  v14 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC];
  if (v14)
  {
    swift_unknownObjectWeakAssign(&v14[OBJC_IVAR____TtC18SharingViewService30AirTagRolePickerViewController_mainController], 0);
    v14 = *(char **)&v3[v13];
  }
  *(_QWORD *)&v3[v13] = 0;

  v15 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC;
  v16 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC];
  if (v16)
  {
    swift_unknownObjectWeakAssign(&v16[OBJC_IVAR____TtC18SharingViewService30AirTagCustomNameViewController_mainController], 0);
    v16 = *(char **)&v3[v15];
  }
  *(_QWORD *)&v3[v15] = 0;

  v17 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC;
  v18 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC];
  if (v18)
  {
    v19 = *(void **)&v18[OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_mainController];
    *(_QWORD *)&v18[OBJC_IVAR____TtC18SharingViewService27AirTagLinkingViewController_mainController] = 0;

    v18 = *(char **)&v3[v17];
  }
  *(_QWORD *)&v3[v17] = 0;

  v20 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC;
  v21 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC];
  if (v21)
  {
    swift_unknownObjectWeakAssign(&v21[OBJC_IVAR____TtC18SharingViewService25AirTagMovieViewController_mainController], 0);
    v21 = *(char **)&v3[v20];
  }
  *(_QWORD *)&v3[v20] = 0;

  v22 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_doneVC];
  *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_doneVC] = 0;

  v23 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_errorVC;
  v24 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_errorVC];
  if (v24)
  {
    swift_unknownObjectWeakAssign(&v24[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_mainController], 0);
    v24 = *(char **)&v3[v23];
  }
  *(_QWORD *)&v3[v23] = 0;

  v25 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDVC;
  v26 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDVC];
  if (v26)
  {
    swift_unknownObjectWeakAssign(&v26[OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_mainController], 0);
    v26 = *(char **)&v3[v25];
  }
  *(_QWORD *)&v3[v25] = 0;

  v27 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_hsa2VC;
  v28 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_hsa2VC];
  if (v28)
  {
    swift_unknownObjectWeakAssign(&v28[OBJC_IVAR____TtC18SharingViewService24AirTagHSA2ViewController_mainController], 0);
    v28 = *(char **)&v3[v27];
  }
  *(_QWORD *)&v3[v27] = 0;

  v29 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairLockedVC;
  v30 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairLockedVC];
  if (v30)
  {
    swift_unknownObjectWeakAssign(&v30[OBJC_IVAR____TtC18SharingViewService30AirTagPairLockedViewController_mainController], 0);
    v30 = *(char **)&v3[v29];
  }
  *(_QWORD *)&v3[v29] = 0;

  v31 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcVC;
  v32 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcVC];
  if (!v32)
    goto LABEL_32;
  v33 = *(void (**)(_QWORD, uint64_t, double))&v32[OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_responseHandler];
  if (!v33)
    goto LABEL_31;
  v34 = *(_QWORD *)&v32[OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_responseHandler + 8];
  v35 = OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_uiStartTicks;
  if (*(_QWORD *)&v32[OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_uiStartTicks])
  {
    sub_100022024(*(_QWORD *)&v32[OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_responseHandler], *(_QWORD *)&v32[OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_responseHandler + 8]);
    v36 = v32;
    v37 = UpTicks()();
    v38 = *(_QWORD *)&v32[v35];
    v39 = v37 >= v38;
    v40 = v37 - v38;
    if (!v39)
    {
      __break(1u);
      return;
    }
    v41 = UpTicksToSecondsF(_:)(v40);

  }
  else
  {
    swift_retain(*(_QWORD *)&v32[OBJC_IVAR____TtC18SharingViewService27B389NFCStatusViewController_responseHandler + 8]);
    v41 = 0.0;
  }
  v33(0, 1, v41);
  sub_100012F60((uint64_t)v33, v34);
  v32 = *(char **)&v3[v31];
  if (v32)
  {
LABEL_31:
    objc_msgSend(v32, "setMainController:", 0);
    v42 = *(void **)&v3[v31];
  }
  else
  {
LABEL_32:
    v42 = 0;
  }
  *(_QWORD *)&v3[v31] = 0;

  v43 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout;
  v44 = *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout];
  if (v44)
  {
    swift_getObjectType(*(_QWORD *)(v44 + OBJC_IVAR____TtC18SharingViewService13PushableTimer_timer));
    swift_retain(v44);
    OS_dispatch_source.cancel()();
    swift_release(v44);
    v45 = *(_QWORD *)&v3[v43];
  }
  else
  {
    v45 = 0;
  }
  *(_QWORD *)&v3[v43] = 0;
  *(_QWORD *)&v46 = swift_release(v45).n128_u64[0];
  v47 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent;
  objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent], "invalidate", v46);
  v48 = *(void **)&v3[v47];
  *(_QWORD *)&v3[v47] = 0;

  v49 = objc_msgSend(v3, "_remoteViewControllerProxy");
  sub_1000B4B54(0);
  if (v49)
  {
    if ((objc_msgSend(v49, "respondsToSelector:", "invalidate") & 1) != 0)
      objc_msgSend(v49, "invalidate");
    swift_unknownObjectRelease(v49);
  }
}

void sub_1000AFEC0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t type;
  os_log_type_t typea;
  NSObject *v58;
  unsigned int v59;
  uint64_t v60;
  id aBlock;
  unint64_t v63;
  void (*v64)(uint64_t, void *);
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v2 = v1;
  aBlock = (id)0x3A73736563637573;
  v63 = 0xE900000000000020;
  v3 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if (v3)
    v5 = 0xE500000000000000;
  else
    v5 = 0xE400000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v8 = aBlock;
  v7 = v63;
  v9 = v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, &aBlock, 33, 0);
  sub_1000C967C(&v68, 0xD000000000000019, 0x8000000100138D40);
  v10 = v69;
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  swift_bridgeObjectRetain(v7);
  sub_100021338(1448, 0xD000000000000070, 0x800000010013D7C0, v11, 0xD000000000000019, 0x8000000100138D40, (uint64_t)v8, v7);
  swift_bridgeObjectRelease_n(v7, 2);
  sub_1000B4B54(0);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentDisconnect) & 1) != 0)
    goto LABEL_35;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentDisconnect) = 1;
  v14 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
  if (v14)
  {
    v15 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central);
    if (!v15)
    {
LABEL_44:
      __break(1u);
      return;
    }
    v60 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
    v16 = v14;
    v17 = objc_msgSend(v15, "sharedPairingAgent");
    v68 = (uint64_t)v17;
    v18 = sub_100006A6C((uint64_t *)&unk_1001A54C0);
    Optional.unwrap(_:file:line:)(&aBlock, sub_10003BBFC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1457, v18);

    v19 = aBlock;
    v59 = objc_msgSend(aBlock, "isPeerPaired:", v16);
    if (v59)
    {
      v21 = 0x64656C696166;
      if ((a1 & 1) != 0)
        v21 = 0x6564656563637573;
      type = v21;
      if ((a1 & 1) != 0)
        v22 = 0xE900000000000064;
      else
        v22 = 0xE600000000000000;
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v23 = type metadata accessor for Logger(0, v20);
      sub_10000E8E8(v23, (uint64_t)qword_1001A7A60);
      v24 = swift_bridgeObjectRetain(v22);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v58 = v19;
        v28 = (void *)swift_slowAlloc(32, -1);
        aBlock = v28;
        *(_DWORD *)v27 = 136315138;
        swift_bridgeObjectRetain(v22);
        v68 = sub_10001EFA4(type, v22, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease_n(v22, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Intentionally unpairing after setup %s <rdar://49613642>", v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        v29 = v28;
        v19 = v58;
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v22, 2);
      }
      -[NSObject unpairPeer:](v19, "unpairPeer:", v16);
    }
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v30 = type metadata accessor for Logger(0, v20);
    sub_10000E8E8(v30, (uint64_t)qword_1001A7A60);
    v31 = v16;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(18, -1);
      v55 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138412546;
      typea = v33;
      aBlock = v31;
      v31 = v31;
      v35 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v63, v34 + 4, v34 + 12);
      *v55 = v60;

      *(_WORD *)(v34 + 12) = 1024;
      LODWORD(aBlock) = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v34 + 14, v34 + 18);
      _os_log_impl((void *)&_mh_execute_header, v32, typea, "%@. BT-paired already? %{BOOL}d", (uint8_t *)v34, 0x12u);
      v36 = sub_100006A6C(&qword_1001A5420);
      swift_arrayDestroy(v55, 1, v36);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {

      v32 = v31;
      v35 = v31;
    }

  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState) != 2)
  {
    v37 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
    if (v37)
    {
      v38 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_spManager);
      v66 = sub_1000C4E64;
      v67 = 0;
      aBlock = _NSConcreteStackBlock;
      v63 = 1107296256;
      v64 = sub_1000AC624;
      v65 = &unk_10017C680;
      v39 = _Block_copy(&aBlock);
      v40 = v37;
      objc_msgSend(v38, "invalidatePairingSession:completion:", v40, v39);
      _Block_release(v39);

    }
  }
  if ((a1 & 1) != 0)
    sub_1000C5054(v12, v13);
  v41 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central);
  if (!v41)
  {
    __break(1u);
    goto LABEL_44;
  }
  objc_msgSend(v41, "stopScan");
LABEL_35:
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didTapStart) == 1)
  {
    v42 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_reenabledProxCard;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_reenabledProxCard) & 1) == 0)
    {
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v43 = type metadata accessor for Logger(0, v13);
      v44 = sub_10000E8E8(v43, (uint64_t)qword_1001A7A60);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Re-enabling another setup", v47, 2u);
        swift_slowDealloc(v47, -1, -1);
      }

      v48 = objc_msgSend(objc_allocWithZone((Class)SFClient), "init");
      v49 = swift_allocObject(&unk_10017C640, 24, 7);
      *(_QWORD *)(v49 + 16) = v48;
      v66 = sub_100055D98;
      v67 = v49;
      aBlock = _NSConcreteStackBlock;
      v63 = 1107296256;
      v64 = sub_1000AC624;
      v65 = &unk_10017C658;
      v50 = _Block_copy(&aBlock);
      v51 = v67;
      v52 = v48;
      swift_release(v51);
      objc_msgSend(v52, "reenableProxCardType:completion:", 102, v50);

      _Block_release(v50);
      *(_BYTE *)(v2 + v42) = 1;
    }
  }
  swift_beginAccess(v9, &aBlock, 33, 0);
  sub_1000D0A84(0xD000000000000019, 0x8000000100138D40);
  v54 = v53;
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease(v54);
  sub_100021360(1492, 0xD000000000000070, 0x800000010013D7C0, v11, 0xD000000000000019, 0x8000000100138D40, 0, 0xE000000000000000);
}

uint64_t sub_1000B0784()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v1[7] = v0;
  v2 = type metadata accessor for AirTagPairing2.AssetRequest(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006A6C(&qword_1001A7D48);
  v1[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AirTagHardwareModel(0);
  v1[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[13] = v6;
  v1[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AirTagPairing2.Configuration(0);
  v1[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v9);
  v1[18] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_100006A6C(&qword_1001A5428) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v10);
  v1[20] = swift_task_alloc(v10);
  v11 = type metadata accessor for AirTagPairing2.Configuration.Color(0);
  v1[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[22] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v13);
  v1[24] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v1[25] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v1[26] = v16;
  v1[27] = v17;
  return swift_task_switch(sub_1000B0908, v16, v17);
}

uint64_t sub_1000B0908()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;

  v1 = v0[20];
  v2 = v0[7] + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
  swift_beginAccess(v2, v0 + 2, 0, 0);
  v25 = v2;
  sub_100006BD8(v2, v1, &qword_1001A5428);
  v3 = type metadata accessor for B389PresentationConfig(0);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48);
  result = v24(v1, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v6 = v0[23];
  v5 = v0[24];
  v7 = v0[21];
  v8 = v0[22];
  v9 = v0[20];
  v23 = v0[19];
  v10 = v0[13];
  v11 = v0[14];
  v12 = v0[12];
  v13 = *(unsigned __int8 *)(v9 + *(int *)(v3 + 24));
  sub_100023FA0(v9, type metadata accessor for B389PresentationConfig);
  v14 = (unsigned int *)&enum case for AirTagPairing2.Configuration.Color.hermes(_:);
  if (!v13)
    v14 = (unsigned int *)&enum case for AirTagPairing2.Configuration.Color.white(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v5, *v14, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v11, enum case for AirTagHardwareModel.original(_:), v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
  AirTagPairing2.Configuration.init(hardwareModel:color:timeout:)(v11, v6, 3.0);
  sub_100006BD8(v25, v23, &qword_1001A5428);
  result = v24(v23, 1, v3);
  if ((_DWORD)result == 1)
    goto LABEL_9;
  v15 = v0[19];
  v16 = (uint64_t *)(v15 + *(int *)(v3 + 48));
  v17 = *v16;
  v18 = v16[1];
  sub_100024020(*v16, v18);
  sub_100023FA0(v15, type metadata accessor for B389PresentationConfig);
  if (v18 >> 60 != 15)
  {
    v19 = v0[11];
    sub_100006B94(v17, v18);
    PersonalizationAssetManager.PrePairingAssetInfo.init(scannedBluetoothData:)(v17, v18);
    v20 = type metadata accessor for PersonalizationAssetManager.PrePairingAssetInfo(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
    AirTagPairing2.Configuration.engravingInformation.setter(v19);
    sub_100023F48(v17, v18);
  }
  v21 = v0[17];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[16] + 16))(v21, v0[18], v0[15]);
  AirTagPairing2.AssetRequest.init(configuration:)(v21);
  v22 = (_QWORD *)swift_task_alloc(async function pointer to AirTagPairing2.AssetRequest.assets()[1]);
  v0[28] = v22;
  *v22 = v0;
  v22[1] = sub_1000B0B78;
  return AirTagPairing2.AssetRequest.assets()();
}

uint64_t sub_1000B0B78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000B0EB4;
  else
    v5 = sub_1000B0BE0;
  return swift_task_switch(v5, v3[26], v3[27]);
}

uint64_t sub_1000B0BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  swift_release(*(_QWORD *)(v0 + 200));
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = type metadata accessor for Logger(0, v1);
  sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
  v4 = swift_retain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  v8 = os_log_type_enabled(v5, v7);
  v9 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  v37 = *(_QWORD *)(v0 + 72);
  v38 = *(_QWORD *)(v0 + 64);
  v39 = *(_QWORD *)(v0 + 80);
  if (v8)
  {
    v36 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 144);
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = v11;
    v17 = swift_slowAlloc(32, -1);
    v40 = v17;
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)(v0 + 40) = v9;
    v33 = v15;
    v18 = type metadata accessor for AirTagPairing2.Assets(0);
    swift_retain(v9);
    v19 = String.init<A>(describing:)(v0 + 40, v18);
    v21 = v20;
    *(_QWORD *)(v0 + 48) = sub_10001EFA4(v19, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v21);
    swift_release_n(v9, 2, v22);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Got assets %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v14);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v10, v34);
  }
  else
  {

    swift_release_n(v9, 2, v23);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  v24 = *(_QWORD *)(v0 + 184);
  v26 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 160);
  v28 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 144);
  v29 = *(_QWORD *)(v0 + 112);
  v31 = *(_QWORD *)(v0 + 80);
  v30 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 232));
}

uint64_t sub_1000B0EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v4);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  int EnumCaseMultiPayload;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint8_t *v54;
  void **v55;
  void **v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  void **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  __n128 v83;
  void *v84;
  void *v85;
  id v86;
  NSString v87;
  id v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD v105[2];
  void **v106;
  unint64_t v107;
  uint64_t v108;
  void **v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[2];
  void **aBlock;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;

  v4 = v3;
  v111 = a3;
  v112 = a2;
  v6 = sub_100006A6C((uint64_t *)&unk_1001A7D70);
  __chkstk_darwin(v6);
  v110 = (char *)v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for B389PresentationConfig.Mode(0);
  v8 = __chkstk_darwin(v114);
  v108 = (uint64_t)v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v105 - v10;
  v12 = sub_100006A6C(&qword_1001A5428);
  __chkstk_darwin(v12);
  v14 = (char *)v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for B389PresentationConfig(0);
  v15 = *(_QWORD *)(v113 - 8);
  v16 = __chkstk_darwin(v113);
  v18 = (char *)v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (void **)((char *)v105 - v19);
  *(_QWORD *)&v122 = a1;
  v21 = sub_100006A6C(&qword_1001A5628);
  Optional.unwrap(_:file:line:)(&aBlock, sub_1000340C8, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 332, v21);
  v22 = aBlock;
  v23 = objc_msgSend(aBlock, "userInfo");
  if (v23)
  {
    v24 = v23;
    v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)&v122 = v25;
  v26 = sub_100006A6C(&qword_1001A5630);
  Optional.unwrap(_:file:line:)(&aBlock, sub_1000340E8, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 333, v26);
  swift_bridgeObjectRelease(v25);
  v27 = aBlock;
  *(_QWORD *)&v122 = 0xD000000000000011;
  *((_QWORD *)&v122 + 1) = 0x8000000100139510;
  AnyHashable.init<A>(_:)(&aBlock, &v122, &type metadata for String, &protocol witness table for String);
  if (v27[2] && (v28 = sub_100005CF4((uint64_t)&aBlock), (v29 & 1) != 0))
  {
    sub_10000D894((uint64_t)v27[7] + 32 * v28, (uint64_t)&v122);
  }
  else
  {
    v122 = 0u;
    v123 = 0u;
  }
  swift_bridgeObjectRelease(v27);
  sub_100006B34((uint64_t)&aBlock);
  if (*((_QWORD *)&v123 + 1))
  {
    v30 = swift_dynamicCast(v115, &v122, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
    if (v30)
      v31 = v115[0];
    else
      v31 = 0;
    if (v30)
      v32 = v115[1];
    else
      v32 = 0xF000000000000000;
  }
  else
  {
    sub_10000D858((uint64_t)&v122, &qword_1001A4340);
    v31 = 0;
    v32 = 0xF000000000000000;
  }
  *(_QWORD *)&v122 = v31;
  *((_QWORD *)&v122 + 1) = v32;
  v33 = sub_100006A6C(&qword_1001A5438);
  Optional.unwrap(_:file:line:)(&aBlock, sub_10003410C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 334, v33);
  sub_100023F48(v31, v32);
  v34 = aBlock;
  v35 = v117;
  v36 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = PropertyListDecoder.init()();
  v38 = sub_100005B80(&qword_1001A5638, type metadata accessor for B389PresentationConfig, (uint64_t)&unk_100132680);
  v109 = v34;
  v39 = v34;
  v40 = v113;
  v107 = v35;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v113, v39, v35, v113, v38);
  swift_release(v37);
  sub_100023F5C((uint64_t)v20, (uint64_t)v14, type metadata accessor for B389PresentationConfig);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v40);
  v41 = (uint64_t)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig];
  swift_beginAccess(&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig], &aBlock, 33, 0);
  sub_1000D8D18((uint64_t)v14, v41);
  swift_endAccess(&aBlock);
  sub_100023F5C((uint64_t)v20, (uint64_t)v11, type metadata accessor for B389PresentationConfig.Mode);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v114);
  if (EnumCaseMultiPayload)
  {
    v44 = (uint64_t)v18;
    if (EnumCaseMultiPayload == 1)
    {
      v45 = v11[*(int *)(sub_100006A6C(&qword_1001A7DF0) + 48)];
      v46 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v11, v46);
    }
    else
    {
      sub_100023FA0((uint64_t)v11, type metadata accessor for B389PresentationConfig.Mode);
      v45 = 0;
    }
  }
  else
  {
    v45 = *v11;
    v44 = (uint64_t)v18;
  }
  v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsMulti] = v45;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v47 = type metadata accessor for Logger(0, v43);
  v48 = sub_10000E8E8(v47, (uint64_t)qword_1001A7A60);
  v49 = sub_100023F5C((uint64_t)v20, v44, type metadata accessor for B389PresentationConfig);
  v50 = Logger.logObject.getter(v49);
  v52 = static os_log_type_t.default.getter(v50, v51);
  if (os_log_type_enabled(v50, v52))
  {
    v53 = swift_slowAlloc(12, -1);
    v106 = v20;
    v54 = (uint8_t *)v53;
    v55 = (void **)swift_slowAlloc(32, -1);
    v105[1] = v48;
    v56 = v55;
    aBlock = v55;
    *(_DWORD *)v54 = 136315138;
    v57 = sub_10001C220();
    v59 = v58;
    *(_QWORD *)&v122 = sub_10001EFA4(v57, v58, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease(v59);
    sub_100023FA0(v44, type metadata accessor for B389PresentationConfig);
    _os_log_impl((void *)&_mh_execute_header, v50, v52, "presentConfig: %s", v54, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    v60 = v54;
    v20 = v106;
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    sub_100023FA0(v44, type metadata accessor for B389PresentationConfig);
  }

  v61 = (uint64_t *)((char *)v20 + *(int *)(v113 + 44));
  v62 = v61[1];
  if (v62)
  {
    v63 = *v61;
    v64 = HIBYTE(v62) & 0xF;
    if ((v62 & 0x2000000000000000) == 0)
      v64 = v63 & 0xFFFFFFFFFFFFLL;
    if (v64)
    {
      v65 = swift_bridgeObjectRetain_n(v62, 3);
      v66 = Logger.logObject.getter(v65);
      v68 = static os_log_type_t.default.getter(v66, v67);
      if (os_log_type_enabled(v66, v68))
      {
        v113 = (uint64_t)v4;
        v69 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = (void **)swift_slowAlloc(32, -1);
        aBlock = v70;
        v106 = v22;
        *(_DWORD *)v69 = 136315138;
        swift_bridgeObjectRetain(v62);
        *(_QWORD *)&v122 = sub_10001EFA4(v63, v62, (uint64_t *)&aBlock);
        v4 = (_BYTE *)v113;
        v22 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v69 + 4, v69 + 12);
        swift_bridgeObjectRelease_n(v62, 3);
        _os_log_impl((void *)&_mh_execute_header, v66, v68, "Using given name: '%s'", v69, 0xCu);
        swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v69, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v62, 2);
      }
      v71 = (uint64_t *)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fnameDisplay];
      v72 = *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fnameDisplay + 8];
      *v71 = v63;
      v71[1] = v62;
      swift_bridgeObjectRelease(v72);
    }
  }
  v73 = v108;
  sub_100023F5C((uint64_t)v20, v108, type metadata accessor for B389PresentationConfig.Mode);
  if (swift_getEnumCaseMultiPayload(v73, v114))
  {
    sub_100023FA0(v73, type metadata accessor for B389PresentationConfig.Mode);
  }
  else
  {
    v74 = &v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState];
    *(_QWORD *)v74 = 5;
    v74[8] = 1;
    v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState] = 1;
  }
  v75 = objc_msgSend(v22, "xpcEndpoint");
  if (v75)
  {
    v76 = v75;
    v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsNFCUI] = 1;
    v77 = objc_msgSend(objc_allocWithZone((Class)NSXPCListenerEndpoint), "init");
    v78 = *(void **)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_endpoint];
    *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_endpoint] = v77;
    v79 = v77;

    objc_msgSend(v79, "_setEndpoint:", v76);
    v80 = objc_msgSend(objc_allocWithZone((Class)CUXPCAgent), "init");
    v81 = *(void **)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent];
    *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent] = v80;
    v82 = v80;

    sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
    v84 = (void *)static OS_dispatch_queue.main.getter(v83);
    objc_msgSend(v82, "setDispatchQueue:", v84);

    v85 = (void *)objc_opt_self(NSXPCInterface);
    v86 = objc_msgSend(v85, "interfaceWithProtocol:", &OBJC_PROTOCOL___SFXPCB389NFCPromptConfigurationReceiving);
    objc_msgSend(v82, "setExportedInterface:", v86);

    objc_msgSend(v82, "setExportedObject:", v4);
    v87 = String._bridgeToObjectiveC()();
    objc_msgSend(v82, "setLabel:", v87);

    objc_msgSend(v82, "setListenerEndpoint:", v79);
    v88 = objc_msgSend(v85, "interfaceWithProtocol:", &OBJC_PROTOCOL___SDXPCClientInterface);
    objc_msgSend(v82, "setRemoteObjectInterface:", v88);

    v120 = sub_1000B1BE0;
    v121 = 0;
    aBlock = _NSConcreteStackBlock;
    v117 = 1107296256;
    v118 = sub_10001BB50;
    v119 = &unk_10017CC48;
    v89 = _Block_copy(&aBlock);
    objc_msgSend(v82, "setInterruptionHandler:", v89);
    _Block_release(v89);
    v120 = sub_1000B1BEC;
    v121 = 0;
    aBlock = _NSConcreteStackBlock;
    v117 = 1107296256;
    v118 = sub_10001BB50;
    v119 = &unk_10017CC70;
    v90 = _Block_copy(&aBlock);
    objc_msgSend(v82, "setInvalidationHandler:", v90);
    _Block_release(v90);
    v91 = swift_allocObject(&unk_10017CCA8, 24, 7);
    *(_QWORD *)(v91 + 16) = v82;
    v120 = sub_1000D8E1C;
    v121 = v91;
    aBlock = _NSConcreteStackBlock;
    v117 = 1107296256;
    v118 = sub_1000AC624;
    v119 = &unk_10017CCC0;
    v92 = _Block_copy(&aBlock);
    v93 = v121;
    v94 = v82;
    objc_msgSend(v94, "activateWithCompletion:", v92, swift_release(v93).n128_f64[0]);
    _Block_release(v92);
    swift_unknownObjectRelease(v76);

  }
  v95 = type metadata accessor for TaskPriority(0);
  v96 = (uint64_t)v110;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v110, 1, 1, v95);
  type metadata accessor for MainActor(0);
  v97 = v4;
  v99 = v111;
  v98 = v112;
  sub_100022024(v112, v111);
  v101 = static MainActor.shared.getter(v100);
  v102 = (_QWORD *)swift_allocObject(&unk_10017CC30, 56, 7);
  v102[2] = v101;
  v102[3] = &protocol witness table for MainActor;
  v102[4] = v97;
  v102[5] = v98;
  v102[6] = v99;
  v103 = sub_1000AE918(v96, (uint64_t)&unk_1001A7D88, (uint64_t)v102);
  swift_release(v103);
  sub_100007348((uint64_t)v109, v107);

  return sub_100023FA0((uint64_t)v20, type metadata accessor for B389PresentationConfig);
}

void sub_1000B1BE0(uint64_t a1, uint64_t a2)
{
  sub_1000B1BF8("XPC interrupted\n", a2);
}

void sub_1000B1BEC(uint64_t a1, uint64_t a2)
{
  sub_1000B1BF8("XPC invalidated\n", a2);
}

void sub_1000B1BF8(const char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
  oslog = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(oslog, v5);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, a1, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

void sub_1000B1CCC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t aBlock;
  _QWORD v20[5];

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v9 = 136315138;
    if (a1)
    {
      swift_getErrorValue(a1, v17, v16);
      v11 = Error.localizedDescription.getter(v16[1], v16[2]);
      v13 = v12;
    }
    else
    {
      aBlock = 0;
      v20[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v13 = 0x8000000100136820;
      v11 = 0xD000000000000015;
    }
    aBlock = sub_10001EFA4(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v20, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "Agent activated, error? %s.", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v20[3] = sub_1000B1F48;
  v20[4] = 0;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_1000AC624;
  v20[2] = &unk_10017CCE8;
  v14 = _Block_copy(&aBlock);
  v15 = objc_msgSend(a2, "remoteObjectProxyWithErrorHandler:", v14);
  _Block_release(v14);
  if (v15)
  {
    objc_msgSend(v15, "preheatXPCConnection");
    swift_unknownObjectRelease(v15);
  }
}

void sub_1000B1F48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  _QWORD v12[3];
  _BYTE v13[8];
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
  swift_errorRetain(a1);
  v4 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315138;
    if (a1)
    {
      swift_getErrorValue(a1, v13, v12);
      v8 = Error.localizedDescription.getter(v12[1], v12[2]);
      v10 = v9;
    }
    else
    {
      v14 = 0;
      v15 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v10 = 0x8000000100136820;
      v8 = 0xD000000000000015;
    }
    v14 = sub_10001EFA4(v8, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "remoteObjectProxyWithErrorHandler failed in updateStateRemotely. Error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_1000B214C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  __n128 v7;
  _QWORD *v8;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v6[5] = type metadata accessor for MainActor(0);
  v6[6] = static MainActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1001A7AEC);
  v6[7] = v8;
  *v8 = v6;
  v8[1] = sub_1000B21B8;
  return sub_1000B0784();
}

uint64_t sub_1000B21B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 40);
  if (v1)
  {
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v8;
    v10 = sub_1000B22BC;
  }
  else
  {
    *(_QWORD *)(v4 + 72) = a1;
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    v9 = v11;
    v10 = sub_1000B225C;
  }
  return swift_task_switch(v10, v7, v9);
}

uint64_t sub_1000B225C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 48));
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_assets);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_assets) = v1;
  v5 = swift_release(v4);
  if (v2)
    (*(void (**)(uint64_t))(v0 + 24))(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B22BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 48));
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v2 = type metadata accessor for Logger(0, v1);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7A60);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to loadAssetBundle in AirTagSetupMainViewController", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 24);

  v8 = *(_QWORD *)(v0 + 64);
  if (v7)
    (*(void (**)(void))(v0 + 24))();
  swift_errorRelease(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B246C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  void *v39;
  void *v40;
  id v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  void (*v48)(uint64_t *, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55[3];
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;

  if (qword_1001A3120 != -1)
    goto LABEL_48;
  while (1)
  {
    v3 = type metadata accessor for Logger(0, a2);
    sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
    v4 = swift_bridgeObjectRetain_n(a1, 2);
    v5 = Logger.logObject.getter(v4);
    v7 = static os_log_type_t.default.getter(v5, v6);
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v56 = v9;
      *(_DWORD *)v8 = 136315138;
      if (a1)
      {
        v10 = sub_100013194(0, (unint64_t *)&qword_1001A5BC0, SBUIRemoteAlertButtonAction_ptr);
        v11 = sub_10009370C((unint64_t *)&qword_1001A5610, (unint64_t *)&qword_1001A5BC0, SBUIRemoteAlertButtonAction_ptr);
        v12 = swift_bridgeObjectRetain(a1);
        v13 = Set.description.getter(v12, v10, v11);
        v15 = v14;
        swift_bridgeObjectRelease(a1);
      }
      else
      {
        v54 = 0;
        v55[0] = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v55[0]);
        v54 = 0x6C616E6F6974704FLL;
        v55[0] = 0xE90000000000003CLL;
        v16 = sub_100006A6C(&qword_1001A5620);
        v17._countAndFlagsBits = _typeName(_:qualified:)(v16, 0);
        object = v17._object;
        String.append(_:)(v17);
        swift_bridgeObjectRelease(object);
        v19._countAndFlagsBits = 0x656E6F6E2E3ELL;
        v19._object = (void *)0xE600000000000000;
        String.append(_:)(v19);
        v13 = v54;
        v15 = v55[0];
      }
      v54 = sub_10001EFA4(v13, v15, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "handleButtonActions: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    if (!a1)
      break;
    v20 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 >= 0)
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v21 = a1;
      swift_bridgeObjectRetain(a1);
      v22 = __CocoaSet.count.getter(v21);
      if (!v22)
      {
LABEL_20:
        swift_bridgeObjectRelease(a1);
        v27 = _swiftEmptyArrayStorage;
        v28 = _swiftEmptyArrayStorage[2];
        if (!v28)
          goto LABEL_45;
        goto LABEL_39;
      }
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 16);
      swift_bridgeObjectRetain(a1);
      if (!v22)
        goto LABEL_20;
    }
    v59 = _swiftEmptyArrayStorage;
    sub_1000C8BBC(0, v22 & ~(v22 >> 63), 0);
    if (v20)
    {
      if (a1 >= 0)
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v23 = a1;
      v24 = __CocoaSet.startIndex.getter(v23);
      v26 = 1;
    }
    else
    {
      v24 = sub_1000D2B20(a1);
      v26 = v29 & 1;
    }
    v56 = v24;
    v57 = v25;
    v58 = v26;
    if (v22 < 0)
    {
      __break(1u);
LABEL_50:
      __break(1u);
      break;
    }
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v30 = a1;
    v53 = v30;
    do
    {
      while (1)
      {
        v37 = v56;
        v36 = v57;
        v38 = v58;
        sub_1000D28BC(v56, v57, v58, a1, (unint64_t *)&qword_1001A5BC0, SBUIRemoteAlertButtonAction_ptr);
        v40 = v39;
        v41 = objc_msgSend(v39, "events");

        v42 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
        {
          sub_1000C8BBC(0, v42[2] + 1, 1);
          v42 = v59;
        }
        v44 = v42[2];
        v43 = v42[3];
        if (v44 >= v43 >> 1)
        {
          sub_1000C8BBC(v43 > 1, v44 + 1, 1);
          v42 = v59;
        }
        v42[2] = v44 + 1;
        v42[v44 + 4] = v41;
        if (v20)
          break;
        v31 = sub_1000D27B0(v37, v36, v38, a1);
        v33 = v32;
        v35 = v34;
        sub_100008990(v37, v36, v38);
        v56 = v31;
        v57 = v33;
        v58 = v35 & 1;
        if (!--v22)
          goto LABEL_38;
      }
      if ((v38 & 1) == 0)
        goto LABEL_50;
      v45 = __CocoaSet.Index.handleBitPattern.getter(v37, v36);
      if (v45)
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
      else
        isUniquelyReferenced_nonNull_native = 1;
      v47 = sub_100006A6C(&qword_1001A5618);
      v48 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v54, v47);
      __CocoaSet.formIndex(after:isUnique:)(v49, isUniquelyReferenced_nonNull_native, v53);
      v48(&v54, 0);
      --v22;
    }
    while (v22);
LABEL_38:
    sub_100008990(v56, v57, v58);
    swift_bridgeObjectRelease(a1);
    v27 = v59;
    v28 = v59[2];
    if (!v28)
    {
LABEL_45:
      swift_bridgeObjectRelease(v27);
      return;
    }
LABEL_39:
    if ((v27[4] & 0x10) != 0)
    {
LABEL_46:
      swift_bridgeObjectRelease(v27);
      objc_msgSend(v52, "dismiss:", 4);
      return;
    }
    if (v28 == 1)
      goto LABEL_45;
    v50 = 5;
    while (1)
    {
      v51 = v50 - 3;
      if (__OFADD__(v50 - 4, 1))
        break;
      if ((v27[v50] & 0x10) != 0)
        goto LABEL_46;
      ++v50;
      if (v51 == v28)
        goto LABEL_45;
    }
    __break(1u);
LABEL_48:
    swift_once(&qword_1001A3120, sub_1000AEA64);
  }
  __break(1u);
}

void sub_1000B2B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  unint64_t v7;
  Class isa;
  id v9;
  uint64_t v10;
  void *v11;
  NSURL *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD aBlock[5];
  uint64_t v20;
  id v21;

  v6 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
  objc_msgSend(v6, "setSensitive:", 1);
  v7 = sub_1000ACBF4(*(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fbOtions));
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v6, "setFrontBoardOptions:", isa);

  v9 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  v21 = v9;
  v10 = sub_100006A6C(&qword_1001A55F0);
  Optional.unwrap(_:file:line:)(aBlock, sub_10003524C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 438, v10);

  v11 = (void *)aBlock[0];
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = swift_allocObject(&unk_10017CB68, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  aBlock[4] = sub_1000D8C9C;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AD300;
  aBlock[3] = &unk_10017CB80;
  v16 = _Block_copy(aBlock);
  v17 = v20;
  v18 = v6;
  sub_100022024(a2, a3);
  swift_release(v17);
  objc_msgSend(v11, "openURL:configuration:completionHandler:", v14, v18, v16);
  _Block_release(v16);

}

void sub_1000B2D14(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v6 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v6, (uint64_t)qword_1001A7A60);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  v7 = swift_errorRetain(a2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v23 = v11;
    *(_DWORD *)v10 = 136315394;
    if (a1)
    {
      v12 = swift_bridgeObjectRetain(a1);
      v13 = Dictionary.description.getter(v12, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v15 = v14;
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v21 = 0;
      v22 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v13 = 0xD000000000000026;
      v15 = 0x8000000100138E60;
    }
    v21 = sub_10001EFA4(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v20, v19);
      v16 = Error.localizedDescription.getter(v19[1], v19[2]);
      v18 = v17;
    }
    else
    {
      v16 = 0xD000000000000015;
      v21 = 0;
      v22 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v22);
      v18 = 0x8000000100136820;
    }
    v21 = sub_10001EFA4(v16, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Open URL callback success: %s, error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    if (a3)
      goto LABEL_13;
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    if (a3)
LABEL_13:
      a3();
  }
}

void sub_1000B301C(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;
  int v8;
  uint64_t v9;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    v8 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "assertion acquired: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1000B313C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = v5;
  v54 = a2;
  v11 = sub_100006A6C(&qword_1001A3618);
  v55 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v55 + 64);
  v13 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v47 - v16;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v18 = type metadata accessor for Logger(0, v15);
  sub_10000E8E8(v18, (uint64_t)qword_1001A7A60);
  sub_100022024(a3, a4);
  v19 = sub_100022024(a3, a4);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    v49 = v21;
    v50 = v17;
    v22 = a1;
    v23 = swift_slowAlloc(28, -1);
    v48 = swift_slowAlloc(32, -1);
    v58 = v48;
    *(_DWORD *)v23 = 134218498;
    v56 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 1024;
    v52 = v22;
    LODWORD(v56) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 4, v23 + 14, v23 + 18);
    *(_WORD *)(v23 + 18) = 2080;
    v53 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v51 = v6;
    if (a3)
    {
      v24 = swift_allocObject(&unk_10017CA50, 32, 7);
      *(_QWORD *)(v24 + 16) = a3;
      *(_QWORD *)(v24 + 24) = a4;
      v25 = sub_1000240E4;
    }
    else
    {
      v25 = 0;
      v24 = 0;
    }
    v56 = (uint64_t)v25;
    v57 = v24;
    sub_100022024(a3, a4);
    v26 = sub_100006A6C((uint64_t *)&unk_1001A55E0);
    v27 = Optional.debugDescription.getter(v26);
    v29 = v28;
    sub_100012F60((uint64_t)v25, v24);
    v56 = sub_10001EFA4(v27, v29, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v23 + 20, v23 + 28);
    swift_bridgeObjectRelease(v29);
    sub_100012F60(a3, a4);
    sub_100012F60(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v49, "dismissCompletion from %ld. inActionType: %d, completion: %s", (uint8_t *)v23, 0x1Cu);
    v30 = v48;
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v14 = v53;
    a1 = v52;
    v17 = v50;
    v6 = v51;
  }
  else
  {
    sub_100012F60(a3, a4);
    sub_100012F60(a3, a4);

  }
  v31 = swift_allocObject(&unk_10017C460, 24, 7);
  swift_unknownObjectWeakInit(v31 + 16, v6);
  sub_100006BD8(v54, (uint64_t)v17, &qword_1001A3618);
  sub_100006BD8((uint64_t)v17, (uint64_t)v14, &qword_1001A3618);
  v32 = *(unsigned __int8 *)(v55 + 80);
  v33 = (v32 + 48) & ~v32;
  v34 = swift_allocObject(&unk_10017CA28, v33 + v12, v32 | 7);
  *(_QWORD *)(v34 + 16) = v31;
  *(_DWORD *)(v34 + 24) = a1;
  *(_QWORD *)(v34 + 32) = a3;
  *(_QWORD *)(v34 + 40) = a4;
  sub_10005B590((uint64_t)v17, v34 + v33, &qword_1001A3618);
  v35 = *(void **)(v6 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav);
  if (v35)
  {
    sub_100022024(a3, a4);
    v36 = objc_msgSend(v35, "topViewController", swift_retain(v31).n128_f64[0]);
    v58 = (uint64_t)v36;
    v37 = sub_100006A6C((uint64_t *)&unk_1001A7D30);
    Optional.unwrap(_:file:line:)(&v56, sub_100036264, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 506, v37);

    v38 = (void *)v56;
    v39 = objc_opt_self(SVSBaseViewController);
    v40 = swift_dynamicCastObjCClass(v38, v39);
    if (v40)
    {
      v43 = (void *)v40;
      v41 = v38;
      v42 = objc_msgSend(v43, "containerView");
      LODWORD(v43) = objc_msgSend(v42, "swipeDismissible");

      if (!a1)
        goto LABEL_18;
    }
    else
    {
      v44 = objc_opt_self(PRXCardContentViewController);
      v45 = (void *)swift_dynamicCastObjCClass(v38, v44);
      if (!v45)
      {
        if (a1)
          goto LABEL_16;
        goto LABEL_18;
      }
      v43 = (void *)(((unint64_t)objc_msgSend(v45, "dismissalType") >> 1) & 1);
      if (!a1)
        goto LABEL_18;
    }
    if (!(_DWORD)v43)
    {
LABEL_16:
      sub_10000D858((uint64_t)v14, &qword_1001A3618);
      swift_release(v31);
      sub_1000D31F4(v38, (uint64_t)sub_1000D8B04, v34);

      return swift_release(v34);
    }
LABEL_18:
    sub_1000B368C(v31, a1, a3, a4, (uint64_t)v14);
    swift_release(v31);

    swift_release(v34);
    return sub_10000D858((uint64_t)v14, &qword_1001A3618);
  }
  sub_100022024(a3, a4);
  result = sub_10000D858((uint64_t)v14, &qword_1001A3618);
  __break(1u);
  return result;
}

void sub_1000B368C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;
  char v37[24];

  v10 = sub_100006A6C(&qword_1001A3618);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v16 = (void *)Strong;
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v17 = type metadata accessor for Logger(0, v15);
    v18 = sub_10000E8E8(v17, (uint64_t)qword_1001A7A60);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      v34 = a3;
      v22 = a2;
      v23 = a4;
      v24 = a5;
      v25 = v21;
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "dismissClosure called", v21, 2u);
      v26 = v25;
      a5 = v24;
      a4 = v23;
      a2 = v22;
      a3 = v34;
      swift_slowDealloc(v26, -1, -1);
    }

    sub_1000AFEC0(0);
    sub_100006BD8(a5, (uint64_t)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1001A3618);
    v27 = *(unsigned __int8 *)(v11 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = (v12 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = swift_allocObject(&unk_10017CAC8, v29 + 8, v27 | 7);
    *(_QWORD *)(v30 + 16) = a3;
    *(_QWORD *)(v30 + 24) = a4;
    sub_10005B590((uint64_t)v13, v30 + v28, &qword_1001A3618);
    *(_QWORD *)(v30 + v29) = v16;
    aBlock[4] = sub_1000D8C04;
    v36 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001BB50;
    aBlock[3] = &unk_10017CAE0;
    v31 = _Block_copy(aBlock);
    v32 = v36;
    sub_100022024(a3, a4);
    v33 = v16;
    swift_release(v32);
    objc_msgSend(v33, "dismissViewControllerAnimated:completion:", a2 != 19, v31);
    _Block_release(v31);

  }
}

uint64_t sub_1000B3908(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  id v29;
  _QWORD *v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  uint8_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  id v48;
  uint64_t v49;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006A6C(&qword_1001A3618);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v41 - v16;
  if (a1)
    a1(v15);
  sub_100006BD8(a3, (uint64_t)v17, &qword_1001A3618);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v18 = v47(v17, 1, v7);
  v19 = sub_10000D858((uint64_t)v17, &qword_1001A3618);
  if (v18 == 1)
  {
    v21 = 0;
  }
  else
  {
    v46 = a3;
    v23 = (void *)sub_1000D3DBC(v19, v20);
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v24 = type metadata accessor for Logger(0, v22);
    sub_10000E8E8(v24, (uint64_t)qword_1001A7A60);
    v21 = v23;
    v25 = Logger.logObject.getter(v21);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v45 = v7;
      v28 = (uint8_t *)v27;
      v42 = (_QWORD *)swift_slowAlloc(8, -1);
      v43 = v28;
      v44 = v10;
      *(_DWORD *)v28 = 138412290;
      v48 = v21;
      v29 = v21;
      v10 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 4, v28 + 12);
      v30 = v42;
      *v42 = v21;

      v31 = v43;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Took assertion: %@", v43, 0xCu);
      v32 = sub_100006A6C(&qword_1001A5420);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      v33 = v31;
      v7 = v45;
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    a3 = v46;
  }
  v34 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent;
  objc_msgSend(*(id *)&a4[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent], "invalidate");
  v35 = *(void **)&a4[v34];
  *(_QWORD *)&a4[v34] = 0;

  v36 = objc_msgSend(a4, "_remoteViewControllerProxy");
  sub_1000B4B54(0);
  if (v36)
  {
    if ((objc_msgSend(v36, "respondsToSelector:", "invalidate") & 1) != 0)
      objc_msgSend(v36, "invalidate");
    swift_unknownObjectRelease(v36);
  }
  sub_100006BD8(a3, (uint64_t)v14, &qword_1001A3618);
  if (v47(v14, 1, v7) == 1)
  {

    return sub_10000D858((uint64_t)v14, &qword_1001A3618);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    v38 = swift_allocObject(&unk_10017CB18, 24, 7);
    *(_QWORD *)(v38 + 16) = v21;
    v39 = (uint64_t)v10;
    v40 = v21;
    sub_1000B2B24(v39, (uint64_t)sub_10005B908, v38);

    swift_release(v38);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v39, v7);
  }
}

void sub_1000B3CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v5 = objc_msgSend((id)objc_opt_self(FMFSession), "sharedInstance");
  if (v5)
  {
    v6 = v5;
    v7 = swift_allocObject(&unk_10017C988, 32, 7);
    *(_QWORD *)(v7 + 16) = a2;
    *(_QWORD *)(v7 + 24) = a3;
    v10[4] = sub_1000D8A28;
    v11 = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_1000AC624;
    v10[3] = &unk_10017C9A0;
    v8 = _Block_copy(v10);
    v9 = v11;
    swift_retain(a3);
    objc_msgSend(v6, "setActiveDevice:completion:", 0, v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000B3DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  __n128 v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  char v47[8];
  uint64_t aBlock[5];
  uint64_t v49;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v43 = v10;
    swift_errorRetain(a1);
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v14 = type metadata accessor for Logger(0, v13);
    sub_10000E8E8(v14, (uint64_t)qword_1001A7A60);
    swift_errorRetain(a1);
    v15 = swift_errorRetain(a1);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.default.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      v19 = swift_slowAlloc(12, -1);
      v41 = a3;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc(32, -1);
      v40 = a2;
      v22 = v21;
      aBlock[0] = v21;
      v42 = v7;
      *(_DWORD *)v20 = 136315138;
      v39 = v20 + 4;
      swift_getErrorValue(a1, v47, v46);
      v23 = Error.localizedDescription.getter(v46[1], v46[2]);
      v25 = v24;
      v45 = sub_10001EFA4(v23, v24, aBlock);
      v7 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v39, v20 + 12);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Me device switch failed: %s", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v26 = v22;
      a2 = v40;
      swift_slowDealloc(v26, -1, -1);
      v27 = v20;
      a3 = v41;
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    v10 = v43;
  }
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  v29 = (void *)static OS_dispatch_queue.main.getter(v28);
  v30 = swift_allocObject(&unk_10017C9D8, 32, 7);
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = a3;
  aBlock[4] = (uint64_t)sub_10005BAD8;
  v49 = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10001BB50;
  aBlock[3] = (uint64_t)&unk_10017C9F0;
  v31 = _Block_copy(aBlock);
  v32 = v49;
  swift_retain(a3);
  v33 = swift_release(v32);
  static DispatchQoS.unspecified.getter(v33);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v34 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_100006A6C((uint64_t *)&unk_1001A4330);
  v36 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v6, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v12, v10);
}

void sub_1000B41C0(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  id v12;
  id v13;
  _QWORD v14[5];
  _QWORD *v15;

  v7 = objc_msgSend((id)objc_opt_self(FMFSession), "sharedInstance");
  if (v7)
  {
    v8 = v7;
    v9 = (_QWORD *)swift_allocObject(&unk_10017C7A8, 48, 7);
    v9[2] = v3;
    v9[3] = a1;
    v9[4] = a2;
    v9[5] = a3;
    v14[4] = sub_1000D89B0;
    v15 = v9;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_1000AD3B4;
    v14[3] = &unk_10017C7C0;
    v10 = _Block_copy(v14);
    v11 = v15;
    v12 = v3;
    v13 = a1;
    swift_retain(a3);
    objc_msgSend(v8, "getActiveLocationSharingDevice:", v10, swift_release(v11).n128_f64[0]);
    _Block_release(v10);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000B42C4(void *a1, uint64_t a2, void (**a3)(char *, uint64_t), void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  void (**v12)(char *, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  __n128 v27;
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t);
  uint8_t *v50;
  uint8_t *v51;
  __n128 v52;
  _QWORD *v53;
  void *v54;
  _QWORD *v55;
  void (**v56)(char *, uint64_t);
  id v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  void (**v66)(char *, uint64_t);
  id v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  void (**v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void **aBlock;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  void *v80;
  void *v81;
  _QWORD *v82;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(void (***)(char *, uint64_t))(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v15 - 8);
  v76 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v74 = v12;
    v19 = a1;
    if ((objc_msgSend(v19, "isThisDevice") & 1) != 0)
    {
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v21 = type metadata accessor for Logger(0, v20);
      v22 = sub_10000E8E8(v21, (uint64_t)qword_1001A7A60);
      v23 = Logger.logObject.getter(v22);
      v25 = static os_log_type_t.default.getter(v23, v24);
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "Me device is this device.", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
      v28 = (void *)static OS_dispatch_queue.main.getter(v27);
      v29 = swift_allocObject(&unk_10017C898, 32, 7);
      *(_QWORD *)(v29 + 16) = a5;
      *(_QWORD *)(v29 + 24) = a6;
      v81 = sub_1000240E4;
      v82 = (_QWORD *)v29;
      aBlock = _NSConcreteStackBlock;
      v78 = 1107296256;
      v79 = sub_10001BB50;
      v80 = &unk_10017C8B0;
      v30 = _Block_copy(&aBlock);
      v31 = v82;
      swift_retain(a6);
      v32 = swift_release(v31);
      static DispatchQoS.unspecified.getter(v32);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v33 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v34 = sub_100006A6C((uint64_t *)&unk_1001A4330);
      v35 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v34, v35, v11, v33);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v30);
      v36 = v30;
    }
    else
    {
      sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
      v28 = (void *)static OS_dispatch_queue.main.getter(v62);
      v63 = (_QWORD *)swift_allocObject(&unk_10017C848, 56, 7);
      v63[2] = a3;
      v63[3] = a4;
      v63[4] = v19;
      v63[5] = a5;
      v63[6] = a6;
      v81 = sub_1000D8A10;
      v82 = v63;
      aBlock = _NSConcreteStackBlock;
      v78 = 1107296256;
      v79 = sub_10001BB50;
      v80 = &unk_10017C860;
      v64 = _Block_copy(&aBlock);
      v65 = v82;
      v19 = v19;
      v66 = a3;
      v67 = a4;
      swift_retain(a6);
      v68 = swift_release(v65);
      static DispatchQoS.unspecified.getter(v68);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v69 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v70 = sub_100006A6C((uint64_t *)&unk_1001A4330);
      v71 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v70, v71, v11, v69);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v64);
      v36 = v64;
    }
    _Block_release(v36);

    v12 = v74;
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v37 = type metadata accessor for Logger(0, v16);
    v38 = sub_10000E8E8(v37, (uint64_t)qword_1001A7A60);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.default.getter(v39, v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      v74 = a3;
      v43 = v18;
      v44 = a4;
      v45 = v14;
      v46 = v11;
      v47 = a6;
      v48 = a5;
      v49 = v12;
      v50 = v42;
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "No active me device.", v42, 2u);
      v51 = v50;
      v12 = v49;
      a5 = v48;
      a6 = v47;
      v11 = v46;
      v14 = v45;
      a4 = v44;
      v18 = v43;
      a3 = v74;
      swift_slowDealloc(v51, -1, -1);
    }

    sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
    v28 = (void *)static OS_dispatch_queue.main.getter(v52);
    v53 = (_QWORD *)swift_allocObject(&unk_10017C7F8, 48, 7);
    v53[2] = a3;
    v53[3] = a4;
    v53[4] = a5;
    v53[5] = a6;
    v81 = sub_1000D89C0;
    v82 = v53;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_10001BB50;
    v80 = &unk_10017C810;
    v54 = _Block_copy(&aBlock);
    v55 = v82;
    v56 = a3;
    v57 = a4;
    swift_retain(a6);
    v58 = swift_release(v55);
    static DispatchQoS.unspecified.getter(v58);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v59 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v60 = sub_100006A6C((uint64_t *)&unk_1001A4330);
    v61 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v60, v61, v11, v59);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v54);
    _Block_release(v54);
  }

  v12[1](v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v18, v76);
}

uint64_t sub_1000B4930(int a1, void *a2, id a3, uint64_t a4, uint64_t a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v8 = objc_msgSend(a3, "deviceName");
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  sub_1000D3FC0(a2, v10, v12, a4, a5);
  return swift_bridgeObjectRelease(v12);
}

void sub_1000B49BC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v9;
  uint64_t v10;
  id v11;
  double v12;
  id v13;
  _QWORD v14[5];
  uint64_t v15;

  v4 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_dismissed;
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_dismissed) & 1) == 0)
  {
    v5 = *(void **)(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav);
    if (v5)
    {
      if (a2)
      {
        v14[4] = a2;
        v15 = a3;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 1107296256;
        v14[2] = sub_10001BB50;
        v14[3] = &unk_10017CBD0;
        v9 = _Block_copy(v14);
        v10 = v15;
        v11 = v5;
        sub_100022024(a2, a3);
        *(_QWORD *)&v12 = swift_release(v10).n128_u64[0];
      }
      else
      {
        v13 = v5;
        v9 = 0;
      }
      objc_msgSend(v5, "dismissViewControllerAnimated:completion:", a1 & 1, v9, v12);
      _Block_release(v9);

      *(_BYTE *)(v3 + v4) = 1;
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000B4B54(char a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  _OWORD v19[2];
  int v20;
  _BYTE v21[28];

  v3 = objc_msgSend(v1, "_remoteViewControllerProxy");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v19);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  sub_10005B590((uint64_t)v19, (uint64_t)&v20, &qword_1001A4340);
  if (*(_QWORD *)&v21[20])
  {
    v5 = sub_100006A6C((uint64_t *)&unk_1001A55D0);
    if ((swift_dynamicCast(&v18, &v20, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v7 = v18;
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v8 = type metadata accessor for Logger(0, v6);
      v9 = sub_10000E8E8(v8, (uint64_t)qword_1001A7A60);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v12 = 67109120;
        v20 = a1 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 4, v12 + 8);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Setting idle timer disabled: %{BOOL}d", v12, 8u);
        swift_slowDealloc(v12, -1, -1);
      }

      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setIdleTimerDisabled:forReason:", a1 & 1, v13);
      swift_unknownObjectRelease(v7);
      goto LABEL_16;
    }
  }
  else
  {
    sub_10000D858((uint64_t)&v20, &qword_1001A4340);
  }
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v14 = type metadata accessor for Logger(0, v6);
  v15 = sub_10000E8E8(v14, (uint64_t)qword_1001A7A60);
  v13 = Logger.logObject.getter(v15);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v16, "Could not grab remote view controller proxy", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
LABEL_16:

}

id sub_1000B4DFC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  NSString v40;
  id v41;
  objc_super v43;

  v6 = sub_100006A6C(&qword_1001A7D50);
  v7 = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(v7 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v7 + 24) = 0x8000000100135040;
  v8 = qword_1001A2F10;
  v9 = v3;
  if (v8 != -1)
    swift_once(&qword_1001A2F10, sub_10001DDF8);
  v10 = qword_1001A3CD8;
  v11 = (os_unfair_lock_s *)(qword_1001A3CD8 + 16);
  swift_retain(qword_1001A3CD8);
  os_unfair_lock_lock(v11);
  sub_1000AC68C(v7);
  v12 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController___doNotReference;
  os_unfair_lock_unlock(v11);
  swift_release(v10);
  *(_QWORD *)&v9[v12] = v7;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations] = &_swiftEmptySetSingleton;
  v13 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo];
  *(_OWORD *)v13 = xmmword_1001320D0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_multiThreshold] = -50;
  v14 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig];
  v15 = type metadata accessor for B389PresentationConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om;
  v17 = type metadata accessor for OnceManager();
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)&v9[v16] = v18;
  v19 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_beaconManager;
  *(_QWORD *)&v9[v19] = objc_msgSend(objc_allocWithZone((Class)SPBeaconManager), "init");
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_dismissed] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_retain] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC] = 0;
  v20 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_spManager;
  *(_QWORD *)&v9[v20] = objc_msgSend(objc_allocWithZone((Class)SPPairingManager), "init");
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_requestedPairingData] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_reenabledProxCard] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didTapStart] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didAgreeToLinking] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsMulti] = 0;
  v21 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_followupController;
  *(_QWORD *)&v9[v21] = objc_msgSend(objc_allocWithZone((Class)FLFollowUpController), "init");
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapSnapshotter] = 0;
  v22 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_doneVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_errorVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_hsa2VC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairLockedVC] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionError] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_assets] = 0;
  v23 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_location];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_shownError] = 0;
  v24 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_remainingCharacteristicsToDiscover;
  *(_QWORD *)&v9[v24] = sub_1000D3A40((uint64_t)&off_100176430);
  v25 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars;
  *(_QWORD *)&v9[v25] = sub_100004CFC((uint64_t)_swiftEmptyArrayStorage);
  v26 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues;
  *(_QWORD *)&v9[v26] = sub_100004DFC((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredMainService] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startedCharacteristicDiscovery] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentDisconnect] = 0;
  v27 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager];
  v28 = sub_100004924((uint64_t)_swiftEmptyArrayStorage);
  *v27 = 178;
  v27[1] = v28;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentReadRequest] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentSecondReadRequest] = 0;
  *(_OWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1] = xmmword_100132B40;
  v29 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_targetS1Length];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  v30 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fnameDisplay];
  *v30 = 0;
  v30[1] = 0;
  v31 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vbVersionStr];
  *v31 = 0;
  v31[1] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_handledS1S2PayloadRead] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionVerified] = 0;
  v32 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcUUID];
  v33 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsNFCUI] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcConfig] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_endpoint] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent] = 0;
  v34 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_locationShifter;
  *(_QWORD *)&v9[v34] = objc_msgSend(objc_allocWithZone((Class)GEOLocationShifter), "init");
  v35 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleName];
  *v35 = 0;
  v35[1] = 0;
  v36 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleEmoji];
  *v36 = 0;
  v36[1] = 0;
  v37 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue];
  *v37 = xmmword_100132B40;
  v37[1] = 0u;
  v37[2] = 0u;
  v37[3] = 0u;
  v37[4] = 0u;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories] = 0;
  v38 = &v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState];
  *(_QWORD *)v38 = 0;
  v38[8] = 1;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState] = 0;
  v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapConfigurationState] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController] = 0;
  v39 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fbOtions;
  *(_QWORD *)&v9[v39] = sub_100004F0C((uint64_t)&off_100176B08);

  if (a2)
  {
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v40 = 0;
  }
  v43.receiver = v9;
  v43.super_class = (Class)type metadata accessor for AirTagSetupMainViewController(0);
  v41 = objc_msgSendSuper2(&v43, "initWithNibName:bundle:", v40, a3);

  return v41;
}

id sub_1000B5468(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  id v37;
  objc_super v39;

  v3 = sub_100006A6C(&qword_1001A7D50);
  v4 = swift_allocObject(v3, 32, 7);
  *(_QWORD *)(v4 + 16) = 0xD00000000000001DLL;
  *(_QWORD *)(v4 + 24) = 0x8000000100135040;
  v5 = qword_1001A2F10;
  v6 = v1;
  if (v5 != -1)
    swift_once(&qword_1001A2F10, sub_10001DDF8);
  v7 = qword_1001A3CD8;
  v8 = (os_unfair_lock_s *)(qword_1001A3CD8 + 16);
  swift_retain(qword_1001A3CD8);
  os_unfair_lock_lock(v8);
  sub_1000AC68C(v4);
  v9 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController___doNotReference;
  os_unfair_lock_unlock(v8);
  swift_release(v7);
  *(_QWORD *)&v6[v9] = v4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations] = &_swiftEmptySetSingleton;
  v10 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo];
  *(_OWORD *)v10 = xmmword_1001320D0;
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_multiThreshold] = -50;
  v11 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig];
  v12 = type metadata accessor for B389PresentationConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om;
  v14 = type metadata accessor for OnceManager();
  v15 = swift_allocObject(v14, 24, 7);
  *(_QWORD *)(v15 + 16) = &_swiftEmptySetSingleton;
  *(_QWORD *)&v6[v13] = v15;
  v16 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_beaconManager;
  *(_QWORD *)&v6[v16] = objc_msgSend(objc_allocWithZone((Class)SPBeaconManager), "init");
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_dismissed] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_retain] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_namingVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_linkingVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_loadingVC] = 0;
  v17 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_spManager;
  *(_QWORD *)&v6[v17] = objc_msgSend(objc_allocWithZone((Class)SPPairingManager), "init");
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_requestedPairingData] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_reenabledProxCard] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didTapStart] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didAgreeToLinking] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsMulti] = 0;
  v18 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_followupController;
  *(_QWORD *)&v6[v18] = objc_msgSend(objc_allocWithZone((Class)FLFollowUpController), "init");
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapSnapshotter] = 0;
  v19 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_doneVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_errorVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_hsa2VC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairLockedVC] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionError] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_assets] = 0;
  v20 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_location];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_shownError] = 0;
  v21 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_remainingCharacteristicsToDiscover;
  *(_QWORD *)&v6[v21] = sub_1000D3A40((uint64_t)&off_100176430);
  v22 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars;
  *(_QWORD *)&v6[v22] = sub_100004CFC((uint64_t)_swiftEmptyArrayStorage);
  v23 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues;
  *(_QWORD *)&v6[v23] = sub_100004DFC((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredMainService] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startedCharacteristicDiscovery] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentDisconnect] = 0;
  v24 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager];
  v25 = sub_100004924((uint64_t)_swiftEmptyArrayStorage);
  *v24 = 178;
  v24[1] = v25;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentReadRequest] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentSecondReadRequest] = 0;
  *(_OWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1] = xmmword_100132B40;
  v26 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_targetS1Length];
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  v27 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fnameDisplay];
  *v27 = 0;
  v27[1] = 0;
  v28 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vbVersionStr];
  *v28 = 0;
  v28[1] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_handledS1S2PayloadRead] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionVerified] = 0;
  v29 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcUUID];
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsNFCUI] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_nfcConfig] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_endpoint] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_xpcAgent] = 0;
  v31 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_locationShifter;
  *(_QWORD *)&v6[v31] = objc_msgSend(objc_allocWithZone((Class)GEOLocationShifter), "init");
  v32 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleName];
  *v32 = 0;
  v32[1] = 0;
  v33 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_customRoleEmoji];
  *v33 = 0;
  v33[1] = 0;
  v34 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue];
  *v34 = xmmword_100132B40;
  v34[1] = 0u;
  v34[2] = 0u;
  v34[3] = 0u;
  v34[4] = 0u;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories] = 0;
  v35 = &v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState];
  *(_QWORD *)v35 = 0;
  v35[8] = 1;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState] = 0;
  v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapConfigurationState] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController] = 0;
  v36 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_fbOtions;
  *(_QWORD *)&v6[v36] = sub_100004F0C((uint64_t)&off_100176B58);

  v39.receiver = v6;
  v39.super_class = (Class)type metadata accessor for AirTagSetupMainViewController(0);
  v37 = objc_msgSendSuper2(&v39, "initWithCoder:", a1);

  return v37;
}

id sub_1000B5A60()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirTagSetupMainViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000B5E0C()
{
  return type metadata accessor for AirTagSetupMainViewController(0);
}

uint64_t type metadata accessor for AirTagSetupMainViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1001A7AD8;
  if (!qword_1001A7AD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirTagSetupMainViewController);
  return result;
}

void sub_1000B5E50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[70];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = "(";
  v6[3] = &unk_100135098;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10000A630(319, (unint64_t *)&unk_1001A7AF0, type metadata accessor for B389PresentationConfig);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[8] = &unk_1001350B0;
    v6[9] = &unk_100135098;
    v6[10] = &unk_100135098;
    v6[11] = &unk_100135098;
    v6[12] = &unk_100135098;
    v6[13] = &unk_100135098;
    v6[14] = &unk_100135098;
    v6[15] = &unk_100135098;
    v6[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[17] = &unk_1001350B0;
    v6[18] = &unk_1001350B0;
    v6[19] = &unk_1001350B0;
    v6[20] = &unk_1001350B0;
    v6[21] = &unk_1001350B0;
    v6[22] = &unk_100135098;
    v6[23] = &unk_100135098;
    v6[24] = &unk_100135098;
    v6[25] = &unk_1001350C8;
    v6[26] = &unk_100135098;
    v6[27] = &unk_1001350E0;
    v6[28] = &unk_100135098;
    v6[29] = &unk_100135098;
    v6[30] = &unk_100135098;
    v6[31] = &unk_100135098;
    v6[32] = &unk_100135098;
    v6[33] = &unk_100135098;
    v6[34] = &unk_100135098;
    v6[35] = &unk_100135098;
    v6[36] = &unk_100135098;
    v6[37] = &unk_1001350F8;
    v6[38] = &unk_1001350B0;
    v6[39] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[40] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[41] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[42] = &unk_100135098;
    v6[43] = &unk_1001350B0;
    v6[44] = &unk_1001350B0;
    v6[45] = &unk_100135110;
    v6[46] = &unk_1001350B0;
    v6[47] = &unk_1001350B0;
    v6[48] = &unk_100135128;
    v6[49] = &unk_1001350E0;
    v6[50] = &unk_100135140;
    v6[51] = &unk_100135140;
    v6[52] = &unk_1001350B0;
    v6[53] = &unk_1001350B0;
    sub_10000A630(319, (unint64_t *)&qword_1001A4C70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[54] = *(_QWORD *)(v4 - 8) + 64;
      v6[55] = &unk_1001350B0;
      v6[56] = &unk_100135098;
      v6[57] = &unk_100135098;
      v6[58] = &unk_100135098;
      v6[59] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[60] = &unk_100135140;
      v6[61] = &unk_100135140;
      v6[62] = &unk_100135158;
      v6[63] = &unk_100135098;
      v6[64] = &unk_100135098;
      v6[65] = &unk_1001350E0;
      v6[66] = &unk_100135170;
      v6[67] = &unk_100135170;
      v6[68] = &unk_100135098;
      v6[69] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 70, v6, a1 + 80);
    }
  }
}

void sub_1000B602C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  void (**v34)(_QWORD, _QWORD, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  NSString v51;
  id v52;
  id v53;
  unint64_t v54;
  NSString v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t *v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  char v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  id v101;
  NSObject *v102;
  uint64_t v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint8_t *v106;
  id v107;
  unsigned int v108;
  uint64_t v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  id v119;
  uint8_t *v120;
  unint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  unint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  os_log_type_t v139;
  _BOOL4 v140;
  id v141;
  uint8_t *v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint8_t *v146;
  _QWORD *v147;
  void (*v148)(__int128 *, _QWORD);
  unint64_t v149;
  uint64_t v150;
  uint8_t *v151;
  uint64_t v152;
  id v153;
  NSObject *v154;
  id v155;
  NSObject *v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  id v162;
  uint64_t v163;
  void (**v164)(_QWORD, _QWORD, _QWORD);
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  unint64_t v169;
  __int128 v170;
  __int128 v171;
  char v172[24];
  __int128 aBlock;
  __int128 v174;
  void *v175;
  uint64_t v176;

  v2 = v0;
  v3 = sub_100006A6C(&qword_1001A3618);
  __chkstk_darwin(v3);
  v5 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v164 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v9, &aBlock, 33, 0);
  v166 = (unint64_t)"ensureUserConsented()";
  v167 = v9;
  sub_1000C967C((uint64_t *)&v170, 0xD00000000000001CLL, 0x8000000100138DF0);
  v10 = *((_QWORD *)&v170 + 1);
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  v165 = (unint64_t)"inViewController.swift";
  sub_100021338(680, 0xD000000000000070, 0x800000010013D7C0, v11, 0xD00000000000001CLL, 0x8000000100138DF0, 0, 0xE000000000000000);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_requestedPairingData) & 1) != 0)
  {
LABEL_2:
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session)
      && *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories))
    {
      v12 = v11;
      swift_beginAccess(v167, &aBlock, 33, 0);
      v13 = v166 | 0x8000000000000000;
      sub_1000D0A84(0xD00000000000001CLL, v166 | 0x8000000000000000);
      v15 = v14;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease(v15);
      sub_100021360(777, 0xD000000000000070, v165 | 0x8000000000000000, v12, 0xD00000000000001CLL, v13, 0, 0xE000000000000000);
    }
    else
    {
      v32 = sub_100055824();
      swift_allocError(&type metadata for SDRunState, v32, 0, 0);
      *v33 = 1;
      swift_willThrow();
    }
    return;
  }
  v159 = v11;
  v160 = v1;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_requestedPairingData) = 1;
  v16 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_spManager);
  v17 = swift_allocObject(&unk_10017C460, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v2);
  v175 = sub_1000D8948;
  v176 = v17;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v174 = sub_1000AD3B4;
  *((_QWORD *)&v174 + 1) = &unk_10017C6A8;
  v18 = v2;
  v19 = _Block_copy(&aBlock);
  objc_msgSend(v16, "initiatePairingSessionWithCompletion:", v19, swift_release(v176).n128_f64[0]);
  _Block_release(v19);
  v20 = *(void **)(v18 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_beaconManager);
  v21 = swift_allocObject(&unk_10017C460, 24, 7);
  swift_unknownObjectWeakInit(v21 + 16, v18);
  v175 = sub_1000D8950;
  v176 = v21;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v174 = sub_1000AD42C;
  *((_QWORD *)&v174 + 1) = &unk_10017C6D0;
  v22 = _Block_copy(&aBlock);
  objc_msgSend(v20, "roleCategoriesWithCompletion:", v22, swift_release(v176).n128_f64[0]);
  _Block_release(v22);
  v23 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v24 = objc_msgSend(v23, "aa_primaryAppleAccount");
  if (!v24)
  {
    URL.init(string:)(0xD00000000000002CLL, 0x8000000100138E30);
    Optional.unwrap(_:file:line:)(v8, sub_10003AACC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 715, v3);
    sub_10000D858((uint64_t)v5, &qword_1001A3618);
    v34 = v164;
    ((void (**)(char *, _QWORD *, uint64_t))v164)[2](v5, v8, v6);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v34[7])(v5, 0, 1, v6);
    sub_1000B7FA0(0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)v5);
    sub_10000D858((uint64_t)v5, &qword_1001A3618);
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v36 = type metadata accessor for Logger(0, v35);
    v37 = sub_10000E8E8(v36, (uint64_t)qword_1001A7A60);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No iCloud account.", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v41, 0, 0);
    *v42 = 3;
    swift_willThrow();

    ((void (*)(_QWORD *, uint64_t))v34[1])(v8, v6);
    return;
  }
  v25 = v24;
  v163 = v18;
  v161 = objc_msgSend(objc_allocWithZone((Class)AAUIProfilePictureStore), "initWithAppleAccount:grandSlamAccount:accountStore:", v24, 0, v23);
  v26 = objc_msgSend(v161, "profilePictureForAccountOwner");
  v27 = objc_msgSend(v25, "username");
  v164 = (void (**)(_QWORD, _QWORD, _QWORD))v25;
  v162 = v23;
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  v43 = (uint64_t *)(v163 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo);
  swift_beginAccess(v163 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDInfo, v172, 1, 0);
  v44 = *v43;
  v45 = v43[1];
  v47 = (void *)v43[2];
  v46 = v43[3];
  v48 = v43[4];
  *v43 = v29;
  v43[1] = v31;
  v43[3] = 0;
  v43[4] = 0;
  v43[2] = (uint64_t)v26;
  v49 = v26;
  sub_1000174C4(v44, v45, v47, v46, v48);
  v50 = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v164, "accountPropertyForKey:", v51);

  if (v52)
  {
    _bridgeAnyObjectToAny(_:)(&v170);
    swift_unknownObjectRelease(v52);
  }
  else
  {
    v170 = 0u;
    v171 = 0u;
  }
  sub_10005B590((uint64_t)&v170, (uint64_t)&aBlock, &qword_1001A4340);
  v53 = v162;
  if (!*((_QWORD *)&v174 + 1))
  {
    sub_10000D858((uint64_t)&aBlock, &qword_1001A4340);
    goto LABEL_24;
  }
  if ((swift_dynamicCast(&v168, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_24:
    v62 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v62, 0, 0);
    *v63 = 3;
    swift_willThrow();

    return;
  }
  v54 = v169;
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v54);
  v56 = objc_msgSend(v50, "authKitAccountWithAltDSID:", v55);

  v58 = &qword_1001A3000;
  v157 = v49;
  if (v56)
  {
    v59 = objc_msgSend(v50, "additionalInfoForAccount:", v56);
    if (v59)
    {
      v60 = v59;
      v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    }
    else
    {
      v61 = 0;
    }
    v70 = objc_msgSend(v50, "phoneAsAppleIDForAccount:", v56);
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v71 = type metadata accessor for Logger(0, v69);
    v72 = sub_10000E8E8(v71, (uint64_t)qword_1001A7A60);
    v73 = swift_bridgeObjectRetain_n(v61, 2);
    v158 = v72;
    v74 = Logger.logObject.getter(v73);
    v76 = static os_log_type_t.default.getter(v74, v75);
    v77 = os_log_type_enabled(v74, v76);
    v156 = v56;
    v155 = v50;
    if (v77)
    {
      v78 = v61;
      v79 = swift_slowAlloc(18, -1);
      v153 = (id)swift_slowAlloc(32, -1);
      *(_QWORD *)&v170 = v153;
      *(_DWORD *)v79 = 136315394;
      LODWORD(v154) = v70;
      if (v78)
      {
        v80 = swift_bridgeObjectRetain(v78);
        v81 = Dictionary.description.getter(v80, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
        v83 = v82;
        swift_bridgeObjectRelease(v78);
      }
      else
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
        v81 = 0xD000000000000026;
        v83 = 0x8000000100138E60;
      }
      *(_QWORD *)&aBlock = sub_10001EFA4(v81, v83, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease_n(v78, 2);
      swift_bridgeObjectRelease(v83);
      *(_WORD *)(v79 + 12) = 1024;
      LOBYTE(v70) = (_BYTE)v154;
      LODWORD(aBlock) = (_DWORD)v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v79 + 14, v79 + 18);
      _os_log_impl((void *)&_mh_execute_header, v74, v76, "Additional account info: %s, MAKO: %{BOOL}d", (uint8_t *)v79, 0x12u);
      v84 = v153;
      swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v79, -1, -1);

      v50 = v155;
      v61 = v78;
      v56 = v156;
      if (!v61)
        goto LABEL_43;
    }
    else
    {

      swift_bridgeObjectRelease_n(v61, 2);
      if (!v61)
        goto LABEL_43;
    }
    if (*(_QWORD *)(v61 + 16))
    {
      v85 = v70;
      swift_bridgeObjectRetain(v61);
      v86 = sub_100005D24(0x6D754E656E6F6870, 0xEC00000073726562);
      if ((v87 & 1) != 0)
      {
        sub_10000D894(*(_QWORD *)(v61 + 56) + 32 * v86, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v174 = 0u;
      }
      swift_bridgeObjectRelease(v61);
      if (*((_QWORD *)&v174 + 1))
      {
        v97 = sub_100013194(0, (unint64_t *)&unk_1001A7CE0, NSArray_ptr);
        if ((swift_dynamicCast(&v170, &aBlock, (char *)&type metadata for Any + 8, v97, 6) & 1) == 0)
          goto LABEL_45;
        v98 = (void *)v170;
        v99 = objc_msgSend((id)v170, "firstObject");
        if (v99)
        {
          v100 = v99;
          _bridgeAnyObjectToAny(_:)(&v170);
          swift_unknownObjectRelease(v100);
        }
        else
        {
          v170 = 0u;
          v171 = 0u;
        }
        sub_10005B590((uint64_t)&v170, (uint64_t)&aBlock, &qword_1001A4340);
        if (*((_QWORD *)&v174 + 1))
        {
          v129 = sub_100013194(0, (unint64_t *)&unk_1001A54E0, NSDictionary_ptr);
          if ((swift_dynamicCast(&v168, &aBlock, (char *)&type metadata for Any + 8, v129, 6) & 1) != 0)
          {
            v153 = v98;
            v130 = v168;
            *(_QWORD *)&v170 = 0x6D754E656E6F6870;
            *((_QWORD *)&v170 + 1) = 0xEB00000000726562;
            v131 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v170, &type metadata for String);
            v132 = objc_msgSend(v130, "__swift_objectForKeyedSubscript:", v131);
            swift_unknownObjectRelease(v131);
            if (v132)
            {
              _bridgeAnyObjectToAny(_:)(&v170);
              swift_unknownObjectRelease(v132);
            }
            else
            {
              v170 = 0u;
              v171 = 0u;
            }
            sub_10005B590((uint64_t)&v170, (uint64_t)&aBlock, &qword_1001A4340);
            v2 = v163;
            if (*((_QWORD *)&v174 + 1))
            {
              if ((swift_dynamicCast(&v168, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
              {
                v133 = v61;
                v134 = v169;
                if ((v85 & 1) == 0)
                {
                  v135 = (uint64_t)v168;
                  swift_bridgeObjectRelease(v133);
                  v136 = swift_bridgeObjectRetain_n(v134, 2);
                  v137 = Logger.logObject.getter(v136);
                  v139 = static os_log_type_t.default.getter(v137, v138);
                  v154 = v137;
                  v140 = os_log_type_enabled(v137, v139);
                  v152 = v135;
                  if (v140)
                  {
                    v141 = v50;
                    v142 = (uint8_t *)swift_slowAlloc(12, -1);
                    v143 = swift_slowAlloc(32, -1);
                    *(_QWORD *)&aBlock = v143;
                    *(_DWORD *)v142 = 136315138;
                    v151 = v142 + 4;
                    swift_bridgeObjectRetain(v134);
                    *(_QWORD *)&v170 = sub_10001EFA4(v135, v134, (uint64_t *)&aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, (char *)&v170 + 8, v151, v142 + 12);
                    swift_bridgeObjectRelease_n(v134, 3);
                    v144 = v154;
                    _os_log_impl((void *)&_mh_execute_header, v154, v139, "Phone number: %s", v142, 0xCu);
                    swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
                    v145 = v143;
                    v2 = v163;
                    swift_slowDealloc(v145, -1, -1);
                    v146 = v142;
                    v50 = v141;
                    swift_slowDealloc(v146, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n(v134, 2);
                  }
                  v58 = &qword_1001A3000;
                  v148 = (void (*)(__int128 *, _QWORD))sub_1000AEAF4((uint64_t)&aBlock);
                  if (v147[1] == 1)
                  {
                    v149 = v134;
                  }
                  else
                  {
                    v149 = v147[4];
                    v147[3] = v152;
                    v147[4] = v134;
                  }
                  swift_bridgeObjectRelease(v149);
                  v148(&aBlock, 0);

                  goto LABEL_58;
                }

                swift_bridgeObjectRelease(v134);
                v61 = v133;
              }
              else
              {

              }
            }
            else
            {

              sub_10000D858((uint64_t)&aBlock, &qword_1001A4340);
            }
LABEL_46:
            v88 = swift_bridgeObjectRetain(v61);
            v89 = Logger.logObject.getter(v88);
            v90 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v89, v90))
            {
              v91 = (uint8_t *)swift_slowAlloc(12, -1);
              v92 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v170 = v92;
              *(_DWORD *)v91 = 136315138;
              if (v61)
              {
                v93 = swift_bridgeObjectRetain(v61);
                v94 = Dictionary.description.getter(v93, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
                v96 = v95;
                swift_bridgeObjectRelease(v61);
              }
              else
              {
                *(_QWORD *)&aBlock = 0;
                *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(17);
                swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
                v94 = 0xD000000000000026;
                v96 = 0x8000000100138E60;
              }
              *(_QWORD *)&aBlock = sub_10001EFA4(v94, v96, (uint64_t *)&v170);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v91 + 4, v91 + 12);
              swift_bridgeObjectRelease_n(v61, 2);
              swift_bridgeObjectRelease(v96);
              _os_log_impl((void *)&_mh_execute_header, v89, v90, "Failed to decode phone number from: %s", v91, 0xCu);
              swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v92, -1, -1);
              swift_slowDealloc(v91, -1, -1);

              v2 = v163;
              v50 = v155;
              v56 = v156;
            }
            else
            {

              swift_bridgeObjectRelease_n(v61, 2);
            }
            v58 = &qword_1001A3000;
LABEL_58:
            v101 = objc_msgSend(v50, "securityLevelForAccount:", v56);
            v102 = Logger.logObject.getter(v101);
            v104 = static os_log_type_t.default.getter(v102, v103);
            if (os_log_type_enabled(v102, v104))
            {
              v105 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v105 = 134217984;
              *(_QWORD *)&aBlock = v101;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v105 + 4, v105 + 12);
              _os_log_impl((void *)&_mh_execute_header, v102, v104, "securityLevel: %lu", v105, 0xCu);
              v106 = v105;
              v2 = v163;
              swift_slowDealloc(v106, -1, -1);
            }

            if (v101 != (id)4)
            {
              sub_1000B83C8();
              v124 = Logger.logObject.getter(v123);
              v125 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v124, v125))
              {
                v126 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v126 = 0;
                _os_log_impl((void *)&_mh_execute_header, v124, v125, "No HSA2.", v126, 2u);
                swift_slowDealloc(v126, -1, -1);
              }

              v127 = sub_100055824();
              swift_allocError(&type metadata for SDRunState, v127, 0, 0);
              *v128 = 3;
              swift_willThrow();

              return;
            }
            goto LABEL_61;
          }

LABEL_45:
          v2 = v163;
          goto LABEL_46;
        }

      }
LABEL_44:
      sub_10000D858((uint64_t)&aBlock, &qword_1001A4340);
      goto LABEL_45;
    }
LABEL_43:
    aBlock = 0u;
    v174 = 0u;
    goto LABEL_44;
  }
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v64 = type metadata accessor for Logger(0, v57);
  v65 = sub_10000E8E8(v64, (uint64_t)qword_1001A7A60);
  v56 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter(v56, v66);
  if (os_log_type_enabled(v56, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v67, "No AppleID account", v68, 2u);
    swift_slowDealloc(v68, -1, -1);
  }
  v2 = v163;
LABEL_61:

  v107 = objc_msgSend(objc_allocWithZone((Class)CDPStateController), "init");
  *(_QWORD *)&aBlock = 0;
  v108 = objc_msgSend(v107, "isManateeAvailable:", &aBlock);
  v109 = aBlock;
  v11 = v159;
  if (v108)
  {
    v110 = (id)aBlock;

    goto LABEL_2;
  }
  v111 = (id)aBlock;
  v112 = _convertNSErrorToError(_:)(v109);

  swift_willThrow();
  sub_1000B83C8();
  if (v58[36] != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v114 = type metadata accessor for Logger(0, v113);
  v115 = sub_10000E8E8(v114, (uint64_t)qword_1001A7A60);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.error.getter();
  v118 = os_log_type_enabled(v116, v117);
  v119 = v162;
  if (v118)
  {
    v120 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v120 = 0;
    _os_log_impl((void *)&_mh_execute_header, v116, v117, "No manatee.", v120, 2u);
    swift_slowDealloc(v120, -1, -1);
  }

  v121 = sub_100055824();
  swift_allocError(&type metadata for SDRunState, v121, 0, 0);
  *v122 = 3;
  swift_willThrow();
  swift_errorRelease(v112);

}

uint64_t sub_1000B7548(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  const void *v20;
  _QWORD *v21;
  id v22;
  id v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  _QWORD *v32;
  char v33[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v33, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    v15 = (void *)result;
    sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
    v16 = static OS_dispatch_queue.main.getter();
    v30 = v7;
    v17 = (void *)v16;
    v18 = (_QWORD *)swift_allocObject(&unk_10017C758, 40, 7);
    v18[2] = a1;
    v18[3] = a2;
    v18[4] = v15;
    aBlock[4] = sub_1000D89A0;
    v32 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001BB50;
    aBlock[3] = &unk_10017C770;
    v19 = _Block_copy(aBlock);
    v29 = v10;
    v20 = v19;
    v21 = v32;
    v22 = a1;
    swift_errorRetain(a2);
    v23 = v15;
    v24 = swift_release(v21);
    static DispatchQoS.unspecified.getter(v24);
    aBlock[0] = _swiftEmptyArrayStorage;
    v25 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_100006A6C((uint64_t *)&unk_1001A4330);
    v27 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v6, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v29);
  }
  return result;
}

uint64_t sub_1000B77A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v24;
  _QWORD v25[3];
  _BYTE v26[8];
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v6 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v6, (uint64_t)qword_1001A7A60);
  v7 = a1;
  swift_errorRetain(a2);
  v8 = v7;
  v9 = swift_errorRetain(a2);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v29 = v24;
    *(_DWORD *)v13 = 138412546;
    if (a1)
    {
      v27 = (uint64_t)v8;
      v15 = v8;
    }
    else
    {
      v27 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v13 + 4, v13 + 12);
    *v14 = a1;

    *(_WORD *)(v13 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v26, v25);
      v16 = Error.localizedDescription.getter(v25[1], v25[2]);
      v18 = v17;
    }
    else
    {
      v27 = 0;
      v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v28);
      v18 = 0x8000000100136820;
      v16 = 0xD000000000000015;
    }
    v27 = sub_10001EFA4(v16, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Got pairing session: %@, error: %s", (uint8_t *)v13, 0x16u);
    v19 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v14, 1, v19);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  v20 = *(_QWORD *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionError);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionError) = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v20);
  v21 = *(void **)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session) = a1;
  v22 = v8;

  return sub_1000AF594();
}

uint64_t sub_1000B7AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;
  char v30[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v30, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v13 = (void *)result;
    sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
    v14 = static OS_dispatch_queue.main.getter();
    v27 = v5;
    v15 = (void *)v14;
    v16 = swift_allocObject(&unk_10017C708, 32, 7);
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = v13;
    aBlock[4] = sub_1000D8964;
    v29 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001BB50;
    aBlock[3] = &unk_10017C720;
    v17 = _Block_copy(aBlock);
    v26 = v8;
    v18 = v17;
    v19 = v29;
    swift_bridgeObjectRetain(a1);
    v20 = v13;
    v21 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v21);
    aBlock[0] = _swiftEmptyArrayStorage;
    v22 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_100006A6C((uint64_t *)&unk_1001A4330);
    v24 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v4, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v26);
  }
  return result;
}

uint64_t sub_1000B7D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v5 = swift_bridgeObjectRetain_n(a1, 2);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v24 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_100013194(0, &qword_1001A7CF0, SPBeaconRoleCategory_ptr);
    v12 = swift_bridgeObjectRetain(a1);
    v13 = Array.description.getter(v12, v11);
    v15 = v14;
    swift_bridgeObjectRelease(a1);
    v23 = sub_10001EFA4(v13, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "roleCategories: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories) = a1;
  swift_bridgeObjectRetain(a1);
  v17 = swift_bridgeObjectRelease(v16);
  v18 = *(void **)(a2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC);
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v19, "contentView");
    v21 = objc_msgSend(v20, "pickerView");

    objc_msgSend(v21, "reloadAllComponents");
  }
  return sub_1000AF594(v17);
}

void sub_1000B7FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v10;
  void *v11;
  id v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  NSString v20;
  NSString v21;
  NSString v22;
  NSString v23;
  id v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  _BYTE v62[32];
  Swift::String v63;

  v10 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDVC;
  v11 = *(void **)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_appleIDVC];
  if (!v11)
  {
    v14 = objc_allocWithZone((Class)type metadata accessor for AirTagAppleIDViewController(0));
    v15 = v9;
    v16 = (char *)objc_msgSend(v14, "init");
    swift_unknownObjectWeakAssign(&v16[OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_mainController], v15);

    v17 = *(void **)&v9[v10];
    *(_QWORD *)&v9[v10] = v16;

    v18 = *(void **)&v9[v10];
    if (!v18)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v19 = v18;
    sub_1000649C4(&v63);
    v20 = String._bridgeToObjectiveC()();
    v21 = String._bridgeToObjectiveC()();
    v22 = String._bridgeToObjectiveC()();
    v23 = String._bridgeToObjectiveC()();
    sub_1000A2CF4(&v63);
    v24 = objc_msgSend(v19, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v20, v21, v22, v23);

    objc_msgSend(v19, "setDismissButtonAction:", v24);
    v25 = *(void **)&v9[v10];
    if (!v25)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v26 = v10;
    v27 = v25;
    v28 = a6;
    v29 = a5;
    if (!a6)
      v29 = sub_1000897BC(0x63u);
    v30 = (uint64_t *)&v27[OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_buttonText];
    v31 = *(_QWORD *)&v27[OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_buttonText + 8];
    *v30 = v29;
    v30[1] = v28;
    swift_bridgeObjectRetain(a6);

    swift_bridgeObjectRelease(v31);
    v32 = *(void **)&v9[v10];
    if (!v32)
      goto LABEL_30;
    v33 = v32;
    if (a2)
    {
      v34 = a2;
    }
    else
    {
      sub_1000897BC(0x61u);
      v34 = v35;
    }
    swift_bridgeObjectRetain(a2);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v32, "setTitle:", v36);

    v37 = *(void **)&v9[v26];
    if (!v37)
      goto LABEL_31;
    v38 = v37;
    if (a4)
    {
      v39 = a4;
    }
    else
    {
      sub_1000897BC(0x62u);
      v39 = v40;
    }
    swift_bridgeObjectRetain(a4);
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    objc_msgSend(v37, "setSubtitle:", v41);

    v42 = *(_QWORD *)&v9[v26];
    if (!v42)
      goto LABEL_32;
    v43 = (_QWORD *)(v42 + OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_imageName);
    v44 = v43[1];
    *v43 = a7;
    v43[1] = a8;
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRelease(v44);
    v45 = *(char **)&v9[v26];
    if (!v45)
    {
LABEL_33:
      __break(1u);
      return;
    }
    v46 = (uint64_t)&v45[OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_onDoneURL];
    swift_beginAccess(&v45[OBJC_IVAR____TtC18SharingViewService27AirTagAppleIDViewController_onDoneURL], v62, 33, 0);
    v47 = v45;
    sub_1000D88C0(a9, v46);
    swift_endAccess(v62);

    v11 = *(void **)&v9[v26];
    if (!v11)
      return;
  }
  v48 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav;
  v49 = *(void **)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
  if (!v49)
  {
    __break(1u);
    goto LABEL_26;
  }
  v50 = v11;
  v51 = v49;
  v52 = objc_msgSend(v51, "viewControllers");
  v53 = sub_100013194(0, (unint64_t *)&qword_1001A3A10, UIViewController_ptr);
  v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);

  v55 = v50;
  LOBYTE(v52) = sub_1000D3AB0(v54, (uint64_t)v55);

  swift_bridgeObjectRelease(v54);
  v56 = *(void **)&v9[v48];
  if ((v52 & 1) == 0)
  {
    if (v56)
    {
      v57 = v56;
      objc_msgSend(v57, "pushViewController:animated:", v55, 1);
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if (!v56)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v57 = v56;

LABEL_23:
}

void sub_1000B83C8()
{
  char *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  char *v4;
  id v5;
  char *v6;
  char *v7;
  void *v8;
  id v9;
  NSString v10;
  NSString v11;
  NSString v12;
  NSString v13;
  id v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;

  v1 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_hsa2VC;
  v2 = *(char **)&v0[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_hsa2VC];
  v3 = v2;
  v4 = v2;
  if (!v2)
  {
    v5 = objc_allocWithZone((Class)type metadata accessor for AirTagHSA2ViewController());
    v6 = v0;
    v4 = (char *)objc_msgSend(v5, "init");
    swift_unknownObjectWeakAssign(&v4[OBJC_IVAR____TtC18SharingViewService24AirTagHSA2ViewController_mainController], v6);

    v3 = *(void **)&v0[v1];
  }
  *(_QWORD *)&v0[v1] = v4;
  v7 = v2;

  v8 = *(void **)&v0[v1];
  if (!v8)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = v8;
  sub_1000649C4(&v17);
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = String._bridgeToObjectiveC()();
  sub_1000A2CF4(&v17);
  v14 = objc_msgSend(v9, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v10, v11, v12, v13);

  objc_msgSend(v9, "setDismissButtonAction:", v14);
  v15 = *(void **)&v0[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
  if (!v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = *(_QWORD *)&v0[v1];
  if (v16)
  {
    objc_msgSend(v15, "pushViewController:animated:", v16, 1);
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_1000B854C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int (*v26)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v27;
  char *v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  Class isa;
  id v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  _BYTE *v68;
  _BYTE *v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  NSObject *v79;
  uint64_t v80;
  os_log_type_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  os_log_t v88;
  uint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _BYTE v99[12];
  int v100;
  os_log_t v101;
  id v102;
  _BYTE *v103;
  _BYTE *v104;
  char *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  _QWORD v113[2];
  uint64_t v114;
  uint64_t v115;
  char v116[32];

  v1 = type metadata accessor for B389PresentationConfig(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v103 = &v99[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100006A6C(&qword_1001A42A0);
  __chkstk_darwin(v4);
  v107 = &v99[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v108 = type metadata accessor for UUID(0);
  v110 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v109 = &v99[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for B389PresentationConfig.Mode(0);
  v8 = __chkstk_darwin(v7);
  v105 = &v99[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v106 = &v99[-v11];
  v12 = __chkstk_darwin(v10);
  v14 = &v99[-v13];
  __chkstk_darwin(v12);
  v16 = &v99[-v15];
  v17 = sub_100006A6C(&qword_1001A5428);
  v18 = __chkstk_darwin(v17);
  v104 = &v99[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v18);
  v22 = &v99[-v21];
  __chkstk_darwin(v20);
  v24 = &v99[-v23];
  v111 = v0;
  v25 = (uint64_t)&v0[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig];
  swift_beginAccess(v25, v116, 0, 0);
  sub_100006BD8(v25, (uint64_t)v24, &qword_1001A5428);
  v26 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48);
  if (v26(v24, 1, v1) == 1)
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  sub_100023F5C((uint64_t)v24, (uint64_t)v16, type metadata accessor for B389PresentationConfig.Mode);
  sub_100023F5C((uint64_t)v16, (uint64_t)v14, type metadata accessor for B389PresentationConfig.Mode);
  if (!swift_getEnumCaseMultiPayload(v14, v7))
  {
    sub_100023FA0((uint64_t)v16, type metadata accessor for B389PresentationConfig.Mode);
    sub_100023FA0((uint64_t)v24, type metadata accessor for B389PresentationConfig);
    return;
  }
  sub_100023FA0((uint64_t)v14, type metadata accessor for B389PresentationConfig.Mode);
  sub_100023FA0((uint64_t)v16, type metadata accessor for B389PresentationConfig.Mode);
  sub_100023FA0((uint64_t)v24, type metadata accessor for B389PresentationConfig);
  sub_100006BD8(v25, (uint64_t)v22, &qword_1001A5428);
  if (v26(v22, 1, v1) == 1)
    goto LABEL_49;
  v102 = v26;
  v27 = v106;
  sub_100023F5C((uint64_t)v22, (uint64_t)v106, type metadata accessor for B389PresentationConfig.Mode);
  v28 = v105;
  sub_100023F5C((uint64_t)v27, (uint64_t)v105, type metadata accessor for B389PresentationConfig.Mode);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v7);
  v30 = v108;
  v31 = v110;
  v32 = v107;
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(_BYTE *, char *, uint64_t))(v110 + 32))(v107, v28, v108);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v30);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v107, 1, 1, v108);
    sub_100023FA0((uint64_t)v28, type metadata accessor for B389PresentationConfig.Mode);
  }
  sub_100023FA0((uint64_t)v27, type metadata accessor for B389PresentationConfig.Mode);
  v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30);
  v34 = v111;
  if (v33 != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 32))(v109, v32, v30);
    sub_100023FA0((uint64_t)v22, type metadata accessor for B389PresentationConfig);
    v48 = (char *)v34 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
    swift_beginAccess((char *)v34 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, &v112, 33, 0);
    sub_1000C967C(&v114, 0xD000000000000012, 0x8000000100138CB0);
    v49 = v115;
    swift_endAccess(&v112);
    swift_bridgeObjectRelease(v49);
    v50 = *(_BYTE **)((char *)v34 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
    v51 = "inViewController.swift";
    sub_100021338(788, 0xD000000000000070, 0x800000010013D7C0, (uint64_t)v50, 0xD000000000000012, 0x8000000100138CB0, 0, 0xE000000000000000);
    v52 = (char *)OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central;
    v53 = *(void **)((char *)v34 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central);
    if (v53)
    {
      if (objc_msgSend(v53, "state") == (id)5)
        goto LABEL_18;
      v54 = *(void **)&v52[(_QWORD)v34];
      if (v54)
      {
        if (objc_msgSend(v54, "state") != (id)10)
          goto LABEL_44;
LABEL_18:
        v107 = v50;
        if (*(_QWORD *)((char *)v34 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph))
        {
LABEL_42:
          swift_beginAccess(v48, &v112, 33, 0);
          sub_1000D0A84(0xD000000000000012, 0x8000000100138CB0);
          v95 = v94;
          swift_endAccess(&v112);
          swift_bridgeObjectRelease(v95);
          sub_100021360(809, 0xD000000000000070, (unint64_t)v51 | 0x8000000000000000, (uint64_t)v107, 0xD000000000000012, 0x8000000100138CB0, 0, 0xE000000000000000);
          (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v109, v30);
          return;
        }
        v106 = (_BYTE *)OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph;
        v55 = *(void **)&v52[(_QWORD)v34];
        if (v55)
        {
          v56 = sub_100006A6C((uint64_t *)&unk_1001A54B0);
          v57 = *(_QWORD *)(v31 + 72);
          v58 = *(unsigned __int8 *)(v31 + 80);
          v59 = v31;
          v60 = (v58 + 32) & ~v58;
          v61 = swift_allocObject(v56, v60 + v57, v58 | 7);
          *(_OWORD *)(v61 + 16) = xmmword_100131C40;
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(v59 + 16))(v61 + v60, v109, v30);
          v62 = v55;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v61);
          v64 = objc_msgSend(v62, "retrievePeripheralsWithIdentifiers:", isa);

          v65 = sub_100013194(0, (unint64_t *)&unk_1001A7CB0, CBPeripheral_ptr);
          v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v64, v65);

          if ((unint64_t)v66 >> 62)
          {
            if (v66 < 0)
              v92 = v66;
            else
              v92 = v66 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v66);
            v93 = _CocoaArrayWrapper.endIndex.getter(v92);
            swift_bridgeObjectRelease(v66);
            v31 = v110;
            v67 = v111;
            if (v93)
              goto LABEL_22;
          }
          else
          {
            v31 = v110;
            v67 = v111;
            if (*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_22:
              v105 = "inViewController.swift";
              if ((v66 & 0xC000000000000001) != 0)
              {
                v68 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v66);
              }
              else
              {
                if (!*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_47:
                  swift_once(&qword_1001A3120, sub_1000AEA64);
LABEL_29:
                  v77 = type metadata accessor for Logger(0, v76);
                  sub_10000E8E8(v77, (uint64_t)qword_1001A7A60);
                  v78 = (char *)v67;
                  v79 = Logger.logObject.getter(v78);
                  v81 = static os_log_type_t.default.getter(v79, v80);
                  v82 = v81;
                  if (os_log_type_enabled(v79, v81))
                  {
                    v83 = swift_slowAlloc(18, -1);
                    v101 = v79;
                    v84 = v83;
                    v85 = swift_slowAlloc(8, -1);
                    v100 = v82;
                    v86 = (_QWORD *)v85;
                    *(_DWORD *)v84 = 138412546;
                    v102 = v52;
                    v112 = v78;
                    v87 = v78;
                    v30 = v108;
                    v31 = v110;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v84 + 4, v84 + 12);
                    *v86 = v104;

                    *(_WORD *)(v84 + 12) = 1024;
                    LODWORD(v112) = (_DWORD)v103;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4, v84 + 14, v84 + 18);
                    v88 = v101;
                    _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v100, "%@. BT-paired already? %{BOOL}d", (uint8_t *)v84, 0x12u);
                    v89 = sub_100006A6C(&qword_1001A5420);
                    swift_arrayDestroy(v86, 1, v89);
                    swift_slowDealloc(v86, -1, -1);
                    swift_slowDealloc(v84, -1, -1);

                  }
                  else
                  {

                  }
                  v67 = v111;
                  goto LABEL_41;
                }
                v68 = *(id *)(v66 + 32);
              }
              v69 = v68;
              swift_bridgeObjectRelease(v66);
              v70 = *(void **)&v106[(_QWORD)v67];
              *(_QWORD *)&v106[(_QWORD)v67] = v69;
              v104 = v69;
              v71 = v67;
              v67 = v69;

              v72 = *(void **)&v52[(_QWORD)v71];
              if (v72)
              {
                v73 = objc_msgSend(v72, "sharedPairingAgent");
                v114 = (uint64_t)v73;
                v74 = sub_100006A6C((uint64_t *)&unk_1001A54C0);
                Optional.unwrap(_:file:line:)(&v112, sub_10003BBFC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 796, v74);

                v52 = v112;
                v75 = objc_msgSend(v112, "isPeerPaired:", v67);
                v51 = v105;
                LODWORD(v103) = v75;
                if (v75)
                  objc_msgSend(v52, "unpairPeer:", v67);
                if (qword_1001A3120 == -1)
                  goto LABEL_29;
                goto LABEL_47;
              }
LABEL_53:
              __break(1u);
              return;
            }
          }
          swift_bridgeObjectRelease(v66);
LABEL_41:
          if (*(_QWORD *)&v106[(_QWORD)v67])
            goto LABEL_42;
          swift_beginAccess(v48, &v112, 33, 0);
          sub_1000C967C(&v114, 0xD000000000000012, 0x8000000100138CB0);
          v96 = v115;
          swift_endAccess(&v112);
          swift_bridgeObjectRelease(v96);
          sub_100021338(805, 0xD000000000000070, (unint64_t)v51 | 0x8000000000000000, (uint64_t)v107, 0xD000000000000012, 0x8000000100138CB0, 0, 0xE000000000000000);
LABEL_44:
          v97 = sub_100055824();
          swift_allocError(&type metadata for SDRunState, v97, 0, 0);
          *v98 = 1;
          swift_willThrow();
          (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v109, v30);
          return;
        }
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v35 = v25;
  v36 = (uint64_t)v32;
  v37 = v1;
  sub_10000D858(v36, &qword_1001A42A0);
  sub_100023FA0((uint64_t)v22, type metadata accessor for B389PresentationConfig);
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v39 = type metadata accessor for Logger(0, v38);
  sub_10000E8E8(v39, (uint64_t)qword_1001A7A60);
  v40 = v34;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v114 = v44;
    *(_DWORD *)v43 = 136315138;
    v45 = v104;
    sub_100006BD8(v35, (uint64_t)v104, &qword_1001A5428);
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v102)(v45, 1, v37))
    {
      sub_10000D858((uint64_t)v45, &qword_1001A5428);
      v112 = 0;
      v113[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v113[0]);
      v46 = 0xD000000000000015;
      v47 = 0x8000000100136820;
    }
    else
    {
      v90 = v103;
      sub_100023F5C((uint64_t)v45, (uint64_t)v103, type metadata accessor for B389PresentationConfig);
      sub_10000D858((uint64_t)v45, &qword_1001A5428);
      v46 = sub_10001C220();
      v47 = v91;
      sub_100023FA0((uint64_t)v90, type metadata accessor for B389PresentationConfig);
    }
    v112 = (char *)sub_10001EFA4(v46, v47, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, v113, v43 + 4, v43 + 12);

    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "No btUUID on %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

  }
}

void sub_1000B91B4(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  unint64_t v11;
  Class isa;
  char v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t *v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42[2];
  unint64_t v43;
  unint64_t v44;
  id v45;

  v3 = v2;
  v4 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState;
  v5 = v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState];
  if (v5 != 4)
  {
    if (v5 == 2)
    {
      swift_beginAccess(&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations], &v43, 33, 0);
      sub_1000D0A84(0xD000000000000011, 0x8000000100138C90);
      v26 = v25;
      swift_endAccess(&v43);
      swift_bridgeObjectRelease(v26);
      sub_100021360(823, 0xD000000000000070, 0x800000010013D7C0, *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om], 0xD000000000000011, 0x8000000100138C90, 0, 0xE000000000000000);
      return;
    }
    if (!v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState])
    {
      swift_beginAccess(&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations], &v43, 33, 0);
      sub_1000C967C(v42, 0xD000000000000011, 0x8000000100138C90);
      v6 = v42[1];
      swift_endAccess(&v43);
      swift_bridgeObjectRelease(v6);
      sub_100021338(817, 0xD000000000000070, 0x800000010013D7C0, *(_QWORD *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om], 0xD000000000000011, 0x8000000100138C90, 0, 0xE000000000000000);
      v7 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central];
      if (v7)
      {
        v8 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph];
        if (v8)
        {
          v9 = v7;
          v10 = v8;
          v11 = sub_1000046D0((uint64_t)_swiftEmptyArrayStorage);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v11);
          objc_msgSend(v9, "connectPeripheral:options:", v10, isa);

          v13 = 1;
          v3[v4] = 1;
LABEL_20:
          v40 = sub_100055824();
          swift_allocError(&type metadata for SDRunState, v40, 0, 0);
          *v41 = v13;
          swift_willThrow();
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return;
    }
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v27 = type metadata accessor for Logger(0, a2);
    sub_10000E8E8(v27, (uint64_t)qword_1001A7A60);
    v28 = v2;
    v29 = Logger.logObject.getter(v28);
    v31 = static os_log_type_t.default.getter(v29, v30);
    if (os_log_type_enabled(v29, v31))
    {
      v45 = v28;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v32 = 138412290;
      v34 = v3[v4];
      v35 = sub_100055824();
      v36 = swift_allocError(&type metadata for SDRunState, v35, 0, 0);
      *v37 = v34;
      v38 = _swift_stdlib_bridgeErrorToNSError(v36);
      v43 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v32 + 4, v32 + 12);
      *v33 = v38;

      _os_log_impl((void *)&_mh_execute_header, v29, v31, "Default connectionState throw %@...", v32, 0xCu);
      v39 = sub_100006A6C(&qword_1001A5420);
      swift_arrayDestroy(v33, 1, v39);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

    }
    v13 = v3[v4];
    goto LABEL_20;
  }
  v14 = *(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om];
  v43 = 0xD000000000000070;
  v44 = 0x800000010013D7C0;
  v42[0] = 827;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = String.hashValue.getter(0xD000000000000070, 0x800000010013D7C0);
  swift_bridgeObjectRelease(0x800000010013D7C0);
  swift_beginAccess(v14 + 16, &v43, 33, 0);
  LOBYTE(object) = sub_1000C9584(v42, v17);
  swift_endAccess(&v43);
  if ((object & 1) != 0)
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v19 = type metadata accessor for Logger(0, v18);
    v20 = sub_10000E8E8(v19, (uint64_t)qword_1001A7A60);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.default.getter(v21, v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "ensureConnected - skip", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

uint64_t sub_1000B96F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE v17[24];
  uint64_t v18[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v2, v17, 33, 0);
  sub_1000C967C(v18, 0xD000000000000015, 0x8000000100138DD0);
  v3 = v18[1];
  swift_endAccess(v17);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(838, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000015, 0x8000000100138DD0, 0, 0xE000000000000000);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didTapStart) & 1) != 0)
  {
    swift_beginAccess(v2, v17, 33, 0);
    sub_1000D0A84(0xD000000000000015, 0x8000000100138DD0);
    v7 = v6;
    swift_endAccess(v17);
    swift_bridgeObjectRelease(v7);
    return sub_100021360(844, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000015, 0x8000000100138DD0, 0, 0xE000000000000000);
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v9 = type metadata accessor for Logger(0, v5);
    v10 = sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Waiting for user to tap start...", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v15, 0, 0);
    *v16 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_1000B9930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE v17[24];
  uint64_t v18[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v2, v17, 33, 0);
  sub_1000C967C(v18, 0xD000000000000012, 0x8000000100138AC0);
  v3 = v18[1];
  swift_endAccess(v17);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(849, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000012, 0x8000000100138AC0, 0, 0xE000000000000000);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didAgreeToLinking) & 1) != 0)
  {
    swift_beginAccess(v2, v17, 33, 0);
    sub_1000D0A84(0xD000000000000012, 0x8000000100138AC0);
    v7 = v6;
    swift_endAccess(v17);
    swift_bridgeObjectRelease(v7);
    return sub_100021360(855, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000012, 0x8000000100138AC0, 0, 0xE000000000000000);
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v9 = type metadata accessor for Logger(0, v5);
    v10 = sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Waiting for user to agree to linking...", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v15, 0, 0);
    *v16 = 1;
    return swift_willThrow();
  }
}

void sub_1000B9B6C()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  NSObject *v62;
  uint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  os_log_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  id v79;
  uint8_t *v80;
  void *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(uint8_t *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  void (*v87)(uint8_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  os_log_type_t v91;
  uint8_t *v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  NSString v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  _QWORD *v113;
  NSObject *v114;
  _QWORD *v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  os_log_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v126;
  id v127;
  Swift::Int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint8_t *v133;
  id v134;
  id v135;
  _QWORD v136[2];
  uint64_t v137;
  uint64_t v138;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v132 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v131 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006A6C(&qword_1001A3618);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v133 = (uint8_t *)&v118 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v118 - v10;
  v12 = (char *)v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v12, &v135, 33, 0);
  sub_1000C967C(&v137, 0xD000000000000020, 0x8000000100138CF0);
  v13 = v138;
  swift_endAccess(&v135);
  swift_bridgeObjectRelease(v13);
  v14 = *(uint64_t *)((char *)&v1->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(863, 0xD000000000000070, 0x800000010013D7C0, v14, 0xD000000000000020, 0x8000000100138CF0, 0, 0xE000000000000000);
  v15 = *(Class *)((char *)&v1->isa
                 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_followupController);
  if (!v15)
  {
    swift_beginAccess(v12, &v135, 33, 0);
    sub_1000D0A84(0xD000000000000020, 0x8000000100138CF0);
    v39 = v38;
    swift_endAccess(&v135);
    swift_bridgeObjectRelease(v39);
    sub_100021360(868, 0xD000000000000070, 0x800000010013D7C0, v14, 0xD000000000000020, 0x8000000100138CF0, 0, 0xE000000000000000);
    return;
  }
  v130 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_followupController;
  v135 = 0;
  v16 = v15;
  v17 = objc_msgSend(v16, "pendingFollowUpItems:", &v135);
  v18 = v135;
  if (!v17)
  {
    v40 = v135;
    _convertNSErrorToError(_:)(v18);

    swift_willThrow();
    return;
  }
  v19 = v17;
  v122 = v2;
  v20 = sub_100013194(0, (unint64_t *)&unk_1001A7CC0, FLFollowUpItem_ptr);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);
  v22 = v18;

  v128 = sub_100021A34((uint64_t)&off_100176888);
  swift_arrayDestroy(&unk_1001768A8, 2, &type metadata for String);
  v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(FLGroupIdentifierAccount);
  v127 = v23;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v125 = v16;
  v24 = type metadata accessor for Logger(0, v23);
  v25 = sub_10000E8E8(v24, (uint64_t)qword_1001A7A60);
  v26 = swift_bridgeObjectRetain_n(v21, 2);
  v129 = v25;
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.default.getter(v27, v28);
  if (os_log_type_enabled(v27, v29))
  {
    v124 = v11;
    v30 = swift_slowAlloc(12, -1);
    v123 = v7;
    v31 = (uint8_t *)v30;
    v32 = (void *)swift_slowAlloc(32, -1);
    v135 = v32;
    v121 = v1;
    *(_DWORD *)v31 = 136315138;
    v33 = swift_bridgeObjectRetain(v21);
    v34 = Array.description.getter(v33, v20);
    v36 = v35;
    swift_bridgeObjectRelease(v21);
    v137 = sub_10001EFA4(v34, v36, (uint64_t *)&v135);
    v11 = v124;
    v1 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "Followup Items: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v37 = v31;
    v7 = v123;
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  v41 = (uint64_t)v127;
  swift_bridgeObjectRetain(v127);
  v42 = v128;
  swift_bridgeObjectRetain(v128);
  v43 = v134;
  v44 = sub_100055BB4(v21, v126, v41, v42);
  v45 = v43;
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease_n(v41, 2);
  swift_bridgeObjectRelease_n(v42, 2);
  if (!v44)
  {
    v57 = *(Class *)((char *)&v1->isa + v130);
    *(Class *)((char *)&v1->isa + v130) = 0;

LABEL_46:
    return;
  }
  v46 = v44;
  v47 = objc_msgSend(v46, "actions");
  if (!v47)
  {
    __break(1u);
    return;
  }
  v48 = v47;
  v49 = sub_100013194(0, (unint64_t *)&unk_1001A54D0, FLFollowUpAction_ptr);
  v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, v49);

  if (!((unint64_t)v50 >> 62))
  {
    if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_14;
    goto LABEL_42;
  }
  if (v50 < 0)
    v107 = v50;
  else
    v107 = v50 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v50);
  v108 = _CocoaArrayWrapper.endIndex.getter(v107);
  swift_bridgeObjectRelease(v50);
  if (!v108)
  {
LABEL_42:
    swift_bridgeObjectRelease(v50);
    v109 = v46;
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v110, v111))
    {
      v134 = v45;
      v112 = (uint8_t *)swift_slowAlloc(12, -1);
      v113 = (_QWORD *)swift_slowAlloc(8, -1);
      v121 = v1;
      v133 = v112;
      *(_DWORD *)v112 = 138412290;
      v135 = v109;
      v114 = v109;
      v1 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v112 + 4, v112 + 12);
      *v113 = v44;
      v115 = v113;

      v116 = v133;
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "account followup %@ has no actions", v133, 0xCu);
      v117 = sub_100006A6C(&qword_1001A5420);
      swift_arrayDestroy(v115, 1, v117);
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v116, -1, -1);
    }
    else
    {

      v110 = v109;
    }

    v57 = *(Class *)((char *)&v1->isa + v130);
    *(Class *)((char *)&v1->isa + v130) = 0;

    goto LABEL_46;
  }
LABEL_14:
  if ((v50 & 0xC000000000000001) != 0)
  {
    v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v50);
  }
  else
  {
    if (!*(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v51 = *(id *)(v50 + 32);
  }
  v52 = v51;
  swift_bridgeObjectRelease(v50);
  v53 = objc_msgSend(v46, "title");
  if (v53)
  {
    v54 = v53;
    v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v56 = v55;

  }
  else
  {
    v130 = 0;
    v56 = 0;
  }
  swift_bridgeObjectRetain_n(v56, 2);
  v58 = v52;
  v59 = v46;
  v60 = v58;
  v61 = v59;
  v62 = Logger.logObject.getter(v61);
  LODWORD(v126) = static os_log_type_t.default.getter(v62, v63);
  v64 = os_log_type_enabled(v62, (os_log_type_t)v126);
  v127 = v61;
  v128 = v56;
  v124 = v11;
  v134 = v60;
  if (v64)
  {
    v121 = v62;
    v123 = v7;
    v65 = swift_slowAlloc(32, -1);
    v66 = (_QWORD *)swift_slowAlloc(8, -1);
    v120 = swift_slowAlloc(64, -1);
    v137 = v120;
    *(_DWORD *)v65 = 138412802;
    v135 = v61;
    v67 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v65 + 4, v65 + 12);
    v119 = v66;
    *v66 = v44;

    *(_WORD *)(v65 + 12) = 2080;
    v68 = v130;
    v69 = v56;
    if (!v56)
    {
      v135 = 0;
      v136[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v136[0]);
      v68 = 0xD000000000000015;
      v69 = 0x8000000100136820;
    }
    swift_bridgeObjectRetain(v56);
    v135 = (id)sub_10001EFA4(v68, v69, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease_n(v56, 2);
    swift_bridgeObjectRelease(v69);
    *(_WORD *)(v65 + 22) = 2080;
    v60 = v134;
    v70 = objc_msgSend(v134, "label");
    if (v70)
    {
      v71 = v70;
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v74 = v73;

    }
    else
    {
      v135 = 0;
      v136[0] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v136[0]);
      v72 = 0xD000000000000015;
      v74 = 0x8000000100136820;
    }
    v11 = v124;
    v135 = (id)sub_10001EFA4(v72, v74, &v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v65 + 24, v65 + 32);

    swift_bridgeObjectRelease(v74);
    v75 = v121;
    _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v126, "accountFollowup: %@, title: %s, label: %s", (uint8_t *)v65, 0x20u);
    v76 = sub_100006A6C(&qword_1001A5420);
    v77 = v119;
    swift_arrayDestroy(v119, 1, v76);
    swift_slowDealloc(v77, -1, -1);
    v78 = v120;
    swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v65, -1, -1);

    v7 = v123;
  }
  else
  {

    swift_bridgeObjectRelease_n(v56, 2);
  }
  v79 = objc_msgSend(v60, "launchActionURL");
  v80 = v133;
  if (!v79)
  {
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(v132 + 56))(v133, 1, 1, v122);
    goto LABEL_33;
  }
  v81 = v79;
  v82 = v131;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v79);

  v83 = v132;
  v84 = *(void (**)(uint8_t *, char *, uint64_t))(v132 + 32);
  v85 = v82;
  v86 = v122;
  v84(v80, v85, v122);
  v87 = *(void (**)(uint8_t *, _QWORD, uint64_t, uint64_t))(v83 + 56);
  v87(v80, 0, 1, v86);
  if ((*(unsigned int (**)(uint8_t *, uint64_t, uint64_t))(v83 + 48))(v80, 1, v86) == 1)
  {
LABEL_33:
    URL.init(string:)(0x3A7366657270, 0xE600000000000000);
    sub_10000D858((uint64_t)v80, &qword_1001A3618);
    goto LABEL_34;
  }
  v84((uint8_t *)v11, (char *)v80, v86);
  v87((uint8_t *)v11, 0, 1, v86);
LABEL_34:
  v88 = sub_100006BD8((uint64_t)v11, (uint64_t)v7, &qword_1001A3618);
  v89 = Logger.logObject.getter(v88);
  v91 = static os_log_type_t.default.getter(v89, v90);
  if (os_log_type_enabled(v89, v91))
  {
    v92 = (uint8_t *)swift_slowAlloc(12, -1);
    v93 = (void *)swift_slowAlloc(32, -1);
    v135 = v93;
    *(_DWORD *)v92 = 136315138;
    v94 = sub_1000ABF98();
    v96 = v95;
    v137 = sub_10001EFA4(v94, v95, (uint64_t *)&v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease(v96);
    sub_10000D858((uint64_t)v7, &qword_1001A3618);
    _os_log_impl((void *)&_mh_execute_header, v89, v91, "launchActionURL: %s", v92, 0xCu);
    swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
    v97 = v93;
    v11 = v124;
    swift_slowDealloc(v97, -1, -1);
    swift_slowDealloc(v92, -1, -1);
  }
  else
  {
    sub_10000D858((uint64_t)v7, &qword_1001A3618);
  }

  v98 = v128;
  v99 = String._bridgeToObjectiveC()();
  v100 = sub_100117314(v99);

  v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
  v103 = v102;

  sub_1000B7FA0(v130, v98, 0, 0xE000000000000000, v101, v103, 0, 0, (uint64_t)v11);
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v98);
  v104 = sub_100055824();
  swift_allocError(&type metadata for SDRunState, v104, 0, 0);
  *v105 = 1;
  swift_willThrow();
  v106 = v127;

  sub_10000D858((uint64_t)v11, &qword_1001A3618);
}

uint64_t sub_1000BA918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  unint64_t v20;
  Class isa;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  _QWORD v26[3];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState + 8) == 1)
    __asm { BR              X9 }
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  v26[0] = 0xD000000000000070;
  v26[1] = 0x800000010013D7C0;
  v25 = 919;
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7 = String.hashValue.getter(0xD000000000000070, 0x800000010013D7C0);
  swift_bridgeObjectRelease(0x800000010013D7C0);
  swift_beginAccess(v4 + 16, v26, 33, 0);
  LOBYTE(object) = sub_1000C9584(&v25, v7);
  swift_endAccess(v26);
  if ((object & 1) != 0)
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v9 = type metadata accessor for Logger(0, v8);
    v10 = sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "ensurePaired - Respond to request", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  v15 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_central);
  if (!v15)
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = objc_msgSend(v15, "sharedPairingAgent");
  if (!v16)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
  if (!v17)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x1000BB55CLL);
  }
  v18 = v16;
  v19 = v17;
  v20 = sub_10000434C((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v18, "respondToPairingRequest:type:accept:data:", v19, v3, 1, isa);

  *(_QWORD *)v2 = 2;
  *(_BYTE *)(v2 + 8) = 1;
  v22 = sub_100055824();
  swift_allocError(&type metadata for SDRunState, v22, 0, 0);
  *v23 = 1;
  return swift_willThrow();
}

uint64_t sub_1000BB58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v2, v10, 33, 0);
  sub_1000C967C(v11, 0xD000000000000014, 0x8000000100138AE0);
  v3 = v11[1];
  swift_endAccess(v10);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(946, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000014, 0x8000000100138AE0, 0, 0xE000000000000000);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex + 8) & 1) != 0)
  {
    v5 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v5, 0, 0);
    *v6 = 1;
    return swift_willThrow();
  }
  else
  {
    swift_beginAccess(v2, v10, 33, 0);
    sub_1000D0A84(0xD000000000000014, 0x8000000100138AE0);
    v9 = v8;
    swift_endAccess(v10);
    swift_bridgeObjectRelease(v9);
    return sub_100021360(949, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000014, 0x8000000100138AE0, 0, 0xE000000000000000);
  }
}

void sub_1000BB720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  BOOL v45;
  uint8_t *v46;
  uint64_t v47;
  uint8_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  unint64_t v79;
  uint8_t *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  id v86;
  NSString v87;
  id v88;
  unint64_t v89;
  Class isa;
  uint64_t v91;
  unint64_t v92;
  Class v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  NSObject *v99;
  NSObject *v100;
  uint64_t v101;
  os_log_type_t v102;
  uint8_t *v103;
  NSObject **v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  id v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  NSString v118;
  id v119;
  int v120;
  uint8_t *v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *aBlock;
  unint64_t v143[4];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v1 = v0;
  v2 = sub_100006A6C(&qword_1001A5428);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v117 - v6;
  v8 = type metadata accessor for DefaultStringInterpolation.PrintUtilsHexFormat(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, &aBlock, 33, 0);
  v139 = (unint64_t)"v32@?0{?=dd}8d24";
  sub_1000C967C(&v147, 0xD000000000000017, 0x8000000100138530);
  v13 = v148;
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  v138 = (unint64_t)"inViewController.swift";
  v140 = v14;
  sub_100021338(954, 0xD000000000000070, 0x800000010013D7C0, v14, 0xD000000000000017, 0x8000000100138530, 0, 0xE000000000000000);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState) == 2)
    {
LABEL_3:
      swift_beginAccess(v12, &aBlock, 33, 0);
      v15 = v139 | 0x8000000000000000;
      sub_1000D0A84(0xD000000000000017, v139 | 0x8000000000000000);
      v17 = v16;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease(v17);
      sub_100021360(1033, 0xD000000000000070, v138 | 0x8000000000000000, v140, 0xD000000000000017, v15, 0, 0xE000000000000000);
      return;
    }
    goto LABEL_46;
  }
  v129 = v7;
  v132 = v11;
  v134 = v9;
  v131 = v5;
  v18 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState;
  v19 = sub_1000AEB54();
  v21 = v20;
  v147 = v19;
  v148 = v20;
  v22 = sub_100006A6C(&qword_1001A5430);
  Optional.unwrap(_:file:line:)(&aBlock, sub_10003EEDC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 957, v22);
  swift_bridgeObjectRelease(v21);
  v126 = (uint64_t)aBlock;
  v127 = (id)v143[0];
  v124 = v18;
  *(_BYTE *)(v1 + v18) = 1;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v24 = type metadata accessor for Logger(0, v23);
  v25 = sub_10000E8E8(v24, (uint64_t)qword_1001A7A60);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter(v26, v27);
  v29 = os_log_type_enabled(v26, v28);
  v125 = v12;
  v30 = v141;
  if (v29)
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Calling finalizePairing...", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues, &v147, 0, 0);
  v135 = v32;
  v33 = *v32;
  if (*(_QWORD *)(v33 + 16))
  {
    swift_bridgeObjectRetain(v33);
    v34 = sub_100005E38(13);
    if ((v35 & 1) != 0)
    {
      v36 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 16 * v34);
      v37 = *v36;
      v38 = v36[1];
      sub_100006B94(*v36, v38);
    }
    else
    {
      v37 = 0;
      v38 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease(v33);
  }
  else
  {
    v37 = 0;
    v38 = 0xF000000000000000;
  }
  v145 = v37;
  v146 = v38;
  v133 = sub_100006A6C(&qword_1001A5438);
  Optional.unwrap(_:file:line:)(&aBlock, sub_10003EEF8, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 960, v133);
  sub_100023F48(v37, v38);
  v39 = (uint64_t)aBlock;
  v40 = v143[0];
  sub_100006B94((uint64_t)aBlock, v143[0]);
  v41 = sub_100006B94(v39, v40);
  v128 = v25;
  v42 = Logger.logObject.getter(v41);
  v44 = static os_log_type_t.default.getter(v42, v43);
  v45 = os_log_type_enabled(v42, v44);
  v136 = v40;
  v137 = v39;
  v130 = v1;
  if (v45)
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v123 = v47;
    v122 = v46;
    *(_DWORD *)v46 = 136315138;
    v48 = v46 + 12;
    v149 = v47;
    v121 = v46 + 4;
    aBlock = 0;
    v143[0] = 0xE000000000000000;
    v145 = v39;
    v146 = v40;
    v49 = v134;
    v50 = (unint64_t)v132;
    (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v132, enum case for DefaultStringInterpolation.PrintUtilsHexFormat.hex(_:), v8);
    v51 = sub_100055934();
    DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(&v145, v50, 58, 0xE100000000000000, &type metadata for Data, v51);
    (*(void (**)(unint64_t, uint64_t))(v49 + 8))(v50, v8);
    v52 = v143[0];
    aBlock = (_QWORD *)sub_10001EFA4((uint64_t)aBlock, v143[0], &v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v143, v121, v48);
    swift_bridgeObjectRelease(v52);
    sub_100007348(v39, v40);
    sub_100007348(v39, v40);
    v53 = v122;
    _os_log_impl((void *)&_mh_execute_header, v42, v44, "c3t4s4Notif: %s", v122, 0xCu);
    v54 = v123;
    swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    v1 = v130;
    v30 = v141;
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    sub_100007348(v39, v40);
    sub_100007348(v39, v40);
  }

  v55 = v135;
  v56 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories);
  v57 = v129;
  if (!v56)
    goto LABEL_49;
  v58 = swift_bridgeObjectRetain(*(_QWORD *)(v1
                                           + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories));
  v59 = v30;
  v60 = sub_100030800(v58);
  swift_bridgeObjectRelease(v56);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex + 8) & 1) != 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v61 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex);
  v62 = v133;
  if ((v61 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v61 >= v60[2])
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v63 = (char *)(id)v60[2 * v61 + 5];
  swift_bridgeObjectRelease(v60);
  v64 = *v55;
  if (*(_QWORD *)(*v55 + 16))
  {
    swift_bridgeObjectRetain(*v55);
    v65 = sub_100005E38(11);
    if ((v66 & 1) != 0)
    {
      v67 = (uint64_t *)(*(_QWORD *)(v64 + 56) + 16 * v65);
      v68 = *v67;
      v69 = v67[1];
      sub_100006B94(*v67, v69);
    }
    else
    {
      v68 = 0;
      v69 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease(v64);
  }
  else
  {
    v68 = 0;
    v69 = 0xF000000000000000;
  }
  v145 = v68;
  v146 = v69;
  Optional.unwrap(_:file:line:)(&aBlock, sub_10003EF14, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 964, v62);
  sub_100023F48(v68, v69);
  v134 = v143[0];
  v135 = aBlock;
  v70 = *v55;
  if (*(_QWORD *)(*v55 + 16))
  {
    swift_bridgeObjectRetain(*v55);
    v71 = sub_100005E38(12);
    if ((v72 & 1) != 0)
    {
      v73 = (uint64_t *)(*(_QWORD *)(v70 + 56) + 16 * v71);
      v74 = *v73;
      v75 = v73[1];
      sub_100006B94(*v73, v75);
    }
    else
    {
      v74 = 0;
      v75 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease(v70);
  }
  else
  {
    v74 = 0;
    v75 = 0xF000000000000000;
  }
  v145 = v74;
  v146 = v75;
  Optional.unwrap(_:file:line:)(&aBlock, sub_10003EF38, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 965, v62);
  sub_100023F48(v74, v75);
  v133 = (uint64_t)aBlock;
  v132 = (char *)v143[0];
  v123 = swift_allocObject(&unk_10017C460, 24, 7);
  swift_unknownObjectWeakInit(v123 + 16, v1);
  v76 = v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig, &v145, 0, 0);
  sub_100006BD8(v76, (uint64_t)v57, &qword_1001A5428);
  v77 = type metadata accessor for B389PresentationConfig(0);
  v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48);
  if (v78(v57, 1, v77) == 1)
    goto LABEL_51;
  v79 = v57[*(int *)(v77 + 28)];
  sub_100023FA0((uint64_t)v57, type metadata accessor for B389PresentationConfig);
  v141 = v59;
  if (v79 > 3)
    v80 = 0;
  else
    v80 = (uint8_t *)qword_100135248[v79];
  v129 = v63;
  v81 = (uint8_t *)objc_msgSend(v63, "roleId");
  v119 = (id)sub_1000AEE78();
  v83 = v82;
  v84 = (uint64_t)v131;
  sub_100006BD8(v76, (uint64_t)v131, &qword_1001A5428);
  if (v78((char *)v84, 1, v77) == 1)
    goto LABEL_52;
  v85 = *(unsigned __int8 *)(v84 + *(int *)(v77 + 24));
  sub_100006B94(v137, v136);
  sub_100006B94(v133, (unint64_t)v132);
  sub_100006B94((uint64_t)v135, v134);
  v86 = v127;
  v87 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v86);
  v122 = v80;
  v121 = v81;
  v126 = (uint64_t)v87;
  v120 = v85;
  if (v83)
  {
    v118 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v83);
  }
  else
  {
    v118 = 0;
  }
  v88 = objc_allocWithZone((Class)SPPairingConfiguration);
  v89 = v136;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v92 = v134;
  v91 = (uint64_t)v135;
  v93 = Data._bridgeToObjectiveC()().super.isa;
  v94 = v133;
  v95 = (unint64_t)v132;
  v119 = Data._bridgeToObjectiveC()().super.isa;
  LOBYTE(v116) = v120;
  v96 = v88;
  v97 = (void *)v126;
  v98 = v118;
  v127 = objc_msgSend(v96, "initWithName:roleId:roleEmoji:keyStatus:collaborativeKeyC3:signatureS4:isZeus:batteryLevel:", v126, v121, v118, isa, v93, v119, v116, v122);
  sub_100007348(v94, v95);
  sub_100007348(v91, v92);
  sub_100007348(v137, v89);

  sub_100023FA0((uint64_t)v131, type metadata accessor for B389PresentationConfig);
  v99 = v127;
  v100 = Logger.logObject.getter(v99);
  v102 = static os_log_type_t.default.getter(v100, v101);
  if (os_log_type_enabled(v100, v102))
  {
    v103 = (uint8_t *)swift_slowAlloc(12, -1);
    v104 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v103 = 138412290;
    aBlock = &v99->isa;
    v105 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v143, v103 + 4, v103 + 12);
    *v104 = v99;

    _os_log_impl((void *)&_mh_execute_header, v100, v102, "Calling finalizePairing with config: %@", v103, 0xCu);
    v106 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v104, 1, v106);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v103, -1, -1);
  }
  else
  {

    v100 = v99;
  }
  v107 = v130;

  v108 = *(void **)(v107 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
  if (v108)
  {
    v109 = *(void **)(v107 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_spManager);
    v110 = v123;
    v143[3] = (unint64_t)sub_1000D8880;
    v144 = v123;
    aBlock = _NSConcreteStackBlock;
    v143[0] = 1107296256;
    v143[1] = (unint64_t)sub_1000AD3B4;
    v143[2] = (unint64_t)&unk_10017C540;
    v111 = _Block_copy(&aBlock);
    v112 = v144;
    v113 = v108;
    swift_retain(v110);
    objc_msgSend(v109, "finalizePairingWithSession:configuration:completion:", v113, v99, v111, swift_release(v112).n128_f64[0]);
    sub_100007348(v137, v136);
    sub_100007348((uint64_t)v135, v134);
    sub_100007348(v133, (unint64_t)v132);

    swift_release(v110);
    _Block_release(v111);

    v12 = v125;
    if (*(_BYTE *)(v107 + v124) == 2)
      goto LABEL_3;
LABEL_46:
    v114 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v114, 0, 0);
    *v115 = 1;
    swift_willThrow();
    return;
  }
LABEL_53:
  __break(1u);
}

uint64_t sub_1000BC478(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  NSObject **v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(_BYTE *, uint64_t);
  uint8_t *v66;
  uint64_t v67;
  _BYTE v68[4];
  int v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  _QWORD v79[3];
  char v80[8];
  id v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v73 = sub_100006A6C(&qword_1001A42A0);
  __chkstk_darwin(v73);
  v7 = &v68[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v78 - 8);
  v9 = __chkstk_darwin(v78);
  v11 = &v68[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v9);
  v15 = &v68[-v14];
  if (a1)
    v16 = static os_log_type_t.error.getter(v12);
  else
    v16 = static os_log_type_t.default.getter(v12, v13);
  v18 = v16;
  v72 = v7;
  v74 = v11;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v19 = type metadata accessor for Logger(0, v17);
  v20 = sub_10000E8E8(v19, (uint64_t)qword_1001A7A60);
  v21 = a2;
  swift_errorRetain(a1);
  v22 = v21;
  v23 = swift_errorRetain(a1);
  v76 = v20;
  v24 = Logger.logObject.getter(v23);
  v25 = os_log_type_enabled(v24, (os_log_type_t)v18);
  v77 = a2;
  if (v25)
  {
    v69 = v18;
    v75 = v8;
    v70 = v15;
    v71 = a3;
    v26 = swift_slowAlloc(22, -1);
    v27 = (NSObject **)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(32, -1);
    v83 = v28;
    *(_DWORD *)v26 = 138412546;
    if (a2)
    {
      v81 = v22;
      v29 = v22;
    }
    else
    {
      v81 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v26 + 4, v26 + 12);
    *v27 = v77;

    *(_WORD *)(v26 + 12) = 2080;
    if (a1)
    {
      swift_getErrorValue(a1, v80, v79);
      v30 = Error.localizedDescription.getter(v79[1], v79[2]);
      v32 = v31;
    }
    else
    {
      v81 = 0;
      v82 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v82);
      v32 = 0x8000000100136820;
      v30 = 0xD000000000000015;
    }
    v8 = v75;
    v81 = (id)sub_10001EFA4(v30, v32, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v69, "finalizePairing: session: %@, error: %s", (uint8_t *)v26, 0x16u);
    v33 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v27, 1, v33);
    swift_slowDealloc(v27, -1, -1);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v15 = v70;
    a3 = v71;
  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  v34 = *(_QWORD *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_timeout);
  if (v34)
  {
    swift_getObjectType(*(_QWORD *)(v34 + OBJC_IVAR____TtC18SharingViewService13PushableTimer_timer));
    swift_retain(v34);
    OS_dispatch_source.cancel()();
    swift_release(v34);
  }
  if (a1)
  {
    swift_errorRetain(a1);
    sub_1000BCC24(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v36 = *(void **)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
    v37 = v77;
    *(_QWORD *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session) = v77;
    v38 = v22;

    v83 = (uint64_t)v37;
    v39 = sub_100006A6C(&qword_1001A4A38);
    Optional.unwrap(_:file:line:)(&v81, sub_10003F9EC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 984, v39);
    v40 = v81;
    v41 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.default.getter(v41, v42);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v44 = 138412290;
      v46 = -[NSObject pairingLocation](v40, "pairingLocation");
      v47 = v46;
      if (v46)
        v81 = v46;
      else
        v81 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v44 + 4, v44 + 12);
      *v45 = v47;

      _os_log_impl((void *)&_mh_execute_header, v41, v43, "session pairingLocation: %@", v44, 0xCu);
      v48 = sub_100006A6C(&qword_1001A5420);
      swift_arrayDestroy(v45, 1, v48);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {

      v41 = v40;
    }
    v49 = v78;

    v50 = -[NSObject beaconId](v40, "beaconId");
    v51 = (uint64_t)v72;
    v77 = v40;
    if (v50)
    {
      v52 = v50;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v53 = 0;
    }
    else
    {
      v53 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v51, v53, 1, v49);
    Optional.unwrap(_:file:line:)(v15, sub_10003FA08, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 986, v73);
    sub_10000D858(v51, &qword_1001A42A0);
    v54 = v74;
    v55 = (*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t))(v8 + 16))(v74, v15, v49);
    v56 = Logger.logObject.getter(v55);
    v58 = static os_log_type_t.default.getter(v56, v57);
    if (os_log_type_enabled(v56, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = (void *)swift_slowAlloc(32, -1);
      v81 = v60;
      *(_DWORD *)v59 = 136315138;
      v75 = v8;
      v61 = sub_100005B80(&qword_1001A5450, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v78, v61);
      v64 = v63;
      v83 = sub_10001EFA4(v62, v63, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease(v64);
      v65 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
      v65(v54, v78);
      _os_log_impl((void *)&_mh_execute_header, v56, v58, "beaconID: %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      v66 = v59;
      v49 = v78;
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      v65 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v65(v54, v49);
    }

    *(_BYTE *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState) = 2;
    sub_1000AF594(v67);

    return ((uint64_t (*)(_QWORD *, uint64_t))v65)(v15, v49);
  }
}

void sub_1000BCC24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  _BYTE v23[8];
  void *v24;
  uint64_t v25;

  v25 = a1;
  swift_errorRetain(a1);
  v2 = sub_100006A6C(&qword_1001A7C30);
  type metadata accessor for SPPairingSessionError(0);
  if (swift_dynamicCast(&v24, &v25, v2, v3, 6))
  {
    v5 = v24;
    sub_1000C0CA8((uint64_t)v24);

  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v6 = type metadata accessor for Logger(0, v4);
    sub_10000E8E8(v6, (uint64_t)qword_1001A7A60);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v25 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue(a1, v23, v22);
      v12 = Error.localizedDescription.getter(v22[1], v22[2]);
      v14 = v13;
      v24 = (void *)sub_10001EFA4(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "handleError: error: %s failed decode as NSError", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v16 = String._bridgeToObjectiveC()();
    v17 = String._bridgeToObjectiveC()();
    v18 = sub_100117218(v15, v16, v17);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    sub_1000C06B8(v19, v21, a1, 0, 0);
    swift_bridgeObjectRelease(v21);
  }
}

void sub_1000BCF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  int v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  NSObject *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  double *v52;
  NSObject *v53;
  double *v54;
  void *v55;
  double *v56;
  void *v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  void **aBlock;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t (*v69)();
  double *v70;
  uint64_t v71[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, &aBlock, 33, 0);
  sub_1000C967C(v71, 0xD000000000000015, 0x80000001001384F0);
  v3 = v71[1];
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1038, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000015, 0x80000001001384F0, 0, 0xE000000000000000);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
  if (v6)
  {
    v64 = v4;
    v7 = v6;
    v8 = SFIsFMFAllowed();
    v9 = objc_msgSend(v7, "pairingLocation");

    v11 = (_QWORD *)&unk_1001AD000;
    if (!v9 || (v8 & 1) == 0)
    {
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v12 = type metadata accessor for Logger(0, v10);
      sub_10000E8E8(v12, (uint64_t)qword_1001A7A60);
      v13 = v7;
      v14 = Logger.logObject.getter(v13);
      v16 = static os_log_type_t.default.getter(v14, v15);
      if (os_log_type_enabled(v14, v16))
      {
        v62 = v7;
        v17 = swift_slowAlloc(14, -1);
        *(_DWORD *)v17 = 67109376;
        LODWORD(aBlock) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v17 + 4, v17 + 8);
        *(_WORD *)(v17 + 8) = 1024;
        v18 = v2;
        v19 = -[NSObject pairingLocation](v13, "pairingLocation");

        v20 = v19 == 0;
        v2 = v18;
        v21 = v20;
        LODWORD(aBlock) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v17 + 10, v17 + 14);

        _os_log_impl((void *)&_mh_execute_header, v14, v16, "Not rendering map (isFMFAllowed: %{BOOL}d, pairingLocationIsNil: %{BOOL}d)", (uint8_t *)v17, 0xEu);
        v22 = v17;
        v7 = v62;
        swift_slowDealloc(v22, -1, -1);
      }
      else
      {

        v14 = v13;
      }

      v28 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController) = 0;

      v11 = &unk_1001AD000;
      *(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapConfigurationState) = 2;
    }
    v29 = v11[295];
    if (*(_BYTE *)(v1 + v29))
    {
      if (*(_BYTE *)(v1 + v29) == 2)
      {
LABEL_20:
        swift_beginAccess(v2, &aBlock, 33, 0);
        sub_1000D0A84(0xD000000000000015, 0x80000001001384F0);
        v31 = v30;
        swift_endAccess(&aBlock);
        swift_bridgeObjectRelease(v31);
        sub_100021360(1093, 0xD000000000000070, 0x800000010013D7C0, v64, 0xD000000000000015, 0x80000001001384F0, 0, 0xE000000000000000);
LABEL_29:

        return;
      }
LABEL_28:
      v58 = sub_100055824();
      swift_allocError(&type metadata for SDRunState, v58, 0, 0);
      *v59 = 1;
      swift_willThrow();
      goto LABEL_29;
    }
    v32 = objc_msgSend(v7, "pairingLocation");
    if (v32)
    {
      v34 = v32;
      v63 = v7;
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v35 = type metadata accessor for Logger(0, v33);
      sub_10000E8E8(v35, (uint64_t)qword_1001A7A60);
      v36 = v34;
      v37 = Logger.logObject.getter(v36);
      v39 = static os_log_type_t.default.getter(v37, v38);
      v61 = v29;
      if (os_log_type_enabled(v37, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v60 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v40 = 138412290;
        aBlock = (void **)&v36->isa;
        v41 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v66, v40 + 4, v40 + 12);
        *v60 = v34;

        v29 = v61;
        _os_log_impl((void *)&_mh_execute_header, v37, v39, "session pairingLocation: %@", v40, 0xCu);
        v42 = sub_100006A6C(&qword_1001A5420);
        swift_arrayDestroy(v60, 1, v42);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {

        v37 = v36;
      }

      *(_BYTE *)(v1 + v29) = 1;
      -[NSObject coordinate](v36, "coordinate");
      v44 = v43;
      v46 = v45;
      v47 = swift_allocObject(&unk_10017C460, 24, 7);
      swift_unknownObjectWeakInit(v47 + 16, v1);
      v48 = swift_allocObject(&unk_10017C488, 32, 7);
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = v36;
      v49 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_locationShifter);
      v50 = swift_allocObject(&unk_10017C4B0, 32, 7);
      *(_QWORD *)(v50 + 16) = sub_1000D883C;
      *(_QWORD *)(v50 + 24) = v48;
      v69 = sub_1000240E4;
      v70 = (double *)v50;
      aBlock = _NSConcreteStackBlock;
      v66 = 1107296256;
      v67 = sub_1000AD5CC;
      v68 = &unk_10017C4C8;
      v51 = _Block_copy(&aBlock);
      v52 = v70;
      v53 = v36;
      swift_retain(v48);
      swift_release(v52);
      v54 = (double *)swift_allocObject(&unk_10017C500, 48, 7);
      *((_QWORD *)v54 + 2) = sub_1000D883C;
      *((_QWORD *)v54 + 3) = v48;
      v54[4] = v44;
      v54[5] = v46;
      v69 = sub_1000558DC;
      v70 = v54;
      aBlock = _NSConcreteStackBlock;
      v66 = 1107296256;
      v67 = sub_1000AC624;
      v68 = &unk_10017C518;
      v55 = _Block_copy(&aBlock);
      v56 = v70;
      swift_retain(v48);
      swift_release(v56);
      sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
      v57 = (void *)static OS_dispatch_queue.main.getter();
      objc_msgSend(v49, "shiftCoordinate:accuracy:withCompletionHandler:mustGoToNetworkCallback:errorHandler:callbackQueue:", v51, 0, v55, v57, v44, v46, 0.0);

      _Block_release(v55);
      _Block_release(v51);

      swift_release(v48);
      v7 = v63;
      if (*(_BYTE *)(v1 + v61) == 2)
        goto LABEL_20;
      goto LABEL_28;
    }
    __break(1u);
  }
  else
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v23 = type metadata accessor for Logger(0, v5);
    v24 = sub_10000E8E8(v23, (uint64_t)qword_1001A7A60);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Should always have session in ensureMapViewConfigured", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

  }
}

void sub_1000BD6BC(uint64_t a1, void *a2, CLLocationDegrees a3, CLLocationDegrees a4)
{
  uint64_t v7;
  uint64_t Strong;
  _BYTE *v9;
  CLLocationDegrees latitude;
  CLLocationDegrees longitude;
  CLLocationDegrees latitudeDelta;
  CLLocationDegrees longitudeDelta;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  char *v20;
  CLLocationDegrees *v21;
  id v22;
  id v23;
  objc_class *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  id v29;
  char *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  objc_super v35;
  objc_super v36;
  char v37[24];
  CLLocationCoordinate2D v38;
  MKCoordinateRegion v39;

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v37, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (_BYTE *)Strong;
    v38.latitude = a3;
    v38.longitude = a4;
    v39 = MKCoordinateRegionMakeWithDistance(v38, 600.0, 400.0);
    latitude = v39.center.latitude;
    longitude = v39.center.longitude;
    latitudeDelta = v39.span.latitudeDelta;
    longitudeDelta = v39.span.longitudeDelta;
    v14 = sub_1000AEE78();
    if (v15)
    {
      v16 = v14;
      v17 = v15;
      v18 = (objc_class *)type metadata accessor for B389MapAnnotation();
      v19 = (char *)objc_allocWithZone(v18);
      v20 = &v19[OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_roleEmoji];
      *(_QWORD *)v20 = v16;
      *((_QWORD *)v20 + 1) = v17;
      v21 = (CLLocationDegrees *)&v19[OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_region];
      *v21 = latitude;
      v21[1] = longitude;
      v21[2] = latitudeDelta;
      v21[3] = longitudeDelta;
      *(_QWORD *)&v19[OBJC_IVAR____TtC18SharingViewService17B389MapAnnotation_pairingLocation] = a2;
      v36.receiver = v19;
      v36.super_class = v18;
      v22 = a2;
      v23 = objc_msgSendSuper2(&v36, "init");
      v24 = (objc_class *)type metadata accessor for B389MapViewController();
      v25 = (char *)objc_allocWithZone(v24);
      v26 = &v25[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_tapHandler];
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      v27 = OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapView;
      v28 = objc_allocWithZone((Class)MKMapView);
      v29 = v23;
      v30 = v25;
      *(_QWORD *)&v25[v27] = objc_msgSend(v28, "init");
      *(_QWORD *)&v30[OBJC_IVAR____TtC18SharingViewService21B389MapViewController_mapAnnotation] = v29;
      v31 = v29;

      v35.receiver = v30;
      v35.super_class = v24;
      v32 = objc_msgSendSuper2(&v35, "initWithNibName:bundle:", 0, 0);

      v33 = *(void **)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController];
      *(_QWORD *)&v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController] = v32;

      v9[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapConfigurationState] = 2;
      sub_1000AF594(v34);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000BD8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  unint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26[4];

  v2 = v0;
  v3 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v25, 33, 0);
  sub_1000C967C(v26, 0xD00000000000001DLL, 0x8000000100138C70);
  v4 = v26[1];
  swift_endAccess(v25);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1098, 0xD000000000000070, 0x800000010013D7C0, v5, 0xD00000000000001DLL, 0x8000000100138C70, 0, 0xE000000000000000);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredMainService);
  if (!v6)
  {
    v8 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v8, 0, 0);
    *v9 = 1;
    swift_willThrow();
    return;
  }
  if ((*(_BYTE *)(v2
                 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startedCharacteristicDiscovery) & 1) != 0)
  {
    v7 = v6;
LABEL_11:
    swift_beginAccess(v3, v25, 33, 0);
    sub_1000D0A84(0xD00000000000001DLL, 0x8000000100138C70);
    v24 = v23;
    swift_endAccess(v25);
    swift_bridgeObjectRelease(v24);
    sub_100021360(1106, 0xD000000000000070, 0x800000010013D7C0, v5, 0xD00000000000001DLL, 0x8000000100138C70, 0, 0xE000000000000000);

    return;
  }
  v26[3] = v1;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_startedCharacteristicDiscovery) = 1;
  v10 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
  if (v10)
  {
    v11 = v6;
    v12 = v10;
    sub_1000080D4();
    v14 = v13;
    sub_100013194(0, (unint64_t *)&unk_1001A54A0, CBUUID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v12, "discoverCharacteristics:forService:", isa, v11);

    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v17 = type metadata accessor for Logger(0, v16);
    v18 = sub_10000E8E8(v17, (uint64_t)qword_1001A7A60);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.default.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "ensureMainServiceDiscovered", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_1000BDBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v11, 33, 0);
  sub_1000C967C(v12, 0xD000000000000024, 0x8000000100138C40);
  v3 = v12[1];
  swift_endAccess(v11);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1111, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000024, 0x8000000100138C40, 0, 0xE000000000000000);
  v5 = v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_remainingCharacteristicsToDiscover;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_remainingCharacteristicsToDiscover, v11, 33, 0);
  sub_1000D0C10(5u);
  swift_endAccess(v11);
  if (*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    v6 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v6, 0, 0);
    *v7 = 1;
    return swift_willThrow();
  }
  else
  {
    swift_beginAccess(v2, v11, 33, 0);
    sub_1000D0A84(0xD000000000000024, 0x8000000100138C40);
    v10 = v9;
    swift_endAccess(v11);
    swift_bridgeObjectRelease(v10);
    return sub_100021360(1117, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000024, 0x8000000100138C40, 0, 0xE000000000000000);
  }
}

void sub_1000BDD74()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9[3];
  id v10[3];

  v1 = v0;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v10, 33, 0);
  sub_1000C967C((uint64_t *)v9, 0xD000000000000014, 0x8000000100138BD0);
  v2 = v9[1];
  swift_endAccess(v10);
  swift_bridgeObjectRelease(v2);
  sub_100021338(1122, 0xD000000000000070, 0x800000010013D7C0, *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om), 0xD000000000000014, 0x8000000100138BD0, 0, 0xE000000000000000);
  v9[0] = *(id *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
  v3 = v9[0];
  v4 = sub_100006A6C(&qword_1001A4A38);
  Optional.unwrap(_:file:line:)(v10, sub_10002F048, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1124, v4);

  v5 = v10[0];
  v6 = objc_msgSend(v10[0], "nonce");

  static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  __asm { BR              X10 }
}

uint64_t sub_1000BDEF4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char v27;
  char v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  char v35;
  id v36;
  id v37;
  id v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63[2];
  void *v64;
  _QWORD v65[18];

  if (BYTE6(v0) != 32)
  {
LABEL_44:
    __break(1u);
    JUMPOUT(0x1000BE47CLL);
  }
  v6 = (_QWORD *)(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v5 - 104, 0, 0);
  v7 = *v6;
  if (*(_QWORD *)(*v6 + 16))
  {
    swift_bridgeObjectRetain(v7);
    v8 = sub_100005E38(4);
    if ((v9 & 1) != 0)
    {
      v10 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v8);
      v11 = v10;
    }
    else
    {
      v10 = 0;
    }
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v10 = 0;
  }
  v63[0] = (uint64_t)v10;
  v12 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
  Optional.unwrap(_:file:line:)(v65, sub_100040FAC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1127, v12);

  *(_QWORD *)(v5 - 72) = v65[0];
  v13 = *v6;
  if (*(_QWORD *)(*v6 + 16))
  {
    swift_bridgeObjectRetain(*v6);
    v14 = sub_100005E38(1);
    if ((v15 & 1) != 0)
    {
      v16 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v14);
      v17 = v16;
    }
    else
    {
      v16 = 0;
    }
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v16 = 0;
  }
  v63[0] = (uint64_t)v16;
  Optional.unwrap(_:file:line:)(v65, sub_100040FC8, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1128, v12);

  v61 = (void *)v65[0];
  v18 = *v6;
  v57 = v3;
  v58 = v2;
  if (*(_QWORD *)(*v6 + 16))
  {
    swift_bridgeObjectRetain(v18);
    v19 = sub_100005E38(0);
    if ((v20 & 1) != 0)
    {
      v21 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v19);
      v22 = v21;
    }
    else
    {
      v21 = 0;
    }
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v21 = 0;
  }
  v63[0] = (uint64_t)v21;
  Optional.unwrap(_:file:line:)(v65, sub_100040FE4, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1129, v12);

  v23 = (void *)v65[0];
  v24 = v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager;
  swift_beginAccess(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager, v65, 0, 0);
  v25 = *(_QWORD *)(v24 + 8);
  if (!*(_QWORD *)(v25 + 16)
    || (swift_bridgeObjectRetain(*(_QWORD *)(v24 + 8)),
        v26 = v23,
        sub_100005E08((uint64_t)v26),
        v28 = v27,
        swift_bridgeObjectRelease(v25),
        v26,
        (v28 & 1) == 0))
  {
    v29 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph;
    v30 = *(void **)(v4 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
    if (v30)
    {
      objc_msgSend(v30, "setNotifyValue:forCharacteristic:", 1, *(_QWORD *)(v5 - 72), v57);
      v31 = *(void **)(v4 + v29);
      if (v31)
      {
        objc_msgSend(v31, "setNotifyValue:forCharacteristic:", 1, v61);
        v32 = *(void **)(v4 + v29);
        if (v32)
        {
          swift_beginAccess(v24, v63, 33, 0);
          if (*(_QWORD *)(*(_QWORD *)(v24 + 8) + 16))
          {
            v33 = v23;
            v34 = v32;
            sub_100005E08((uint64_t)v33);
            if ((v35 & 1) != 0)
            {
LABEL_30:

              swift_endAccess(v63);
              goto LABEL_31;
            }

          }
          else
          {
            v36 = v32;
          }
          v37 = v23;
          v38 = v32;
          sub_100006B94(v1, v0);
          sub_100006B94(v1, v0);
          v34 = v38;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v24 + 8));
          v62 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0x8000000000000000;
          sub_1000CF3F8(v1, v0, (uint64_t)v32, v37, isUniquelyReferenced_nonNull_native);
          v40 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v24 + 8) = v62;

          swift_bridgeObjectRelease(v40);
          sub_10001A55C(v37);
          sub_100007348(v1, v0);
          v33 = v34;
          goto LABEL_30;
        }
        goto LABEL_43;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_31:
  v41 = *(_QWORD *)(v24 + 8);
  if (*(_QWORD *)(v41 + 16))
  {
    v42 = v23;
    swift_bridgeObjectRetain(v41);
    v43 = sub_100005E08((uint64_t)v42);
    if ((v44 & 1) != 0)
    {
      v45 = *(_QWORD *)(v41 + 56) + 24 * v43;
      v46 = *(id *)v45;
      v47 = *(_QWORD *)(v45 + 8);
      v48 = *(_QWORD *)(v45 + 16);
      sub_100006B68(*(id *)v45, v47, (void *)v48);

      goto LABEL_37;
    }

  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v24 + 8));
  }
  v46 = 0;
  v47 = 0;
  v48 = 1;
LABEL_37:
  v49 = sub_100006A6C((uint64_t *)&unk_1001A7C60);
  Optional.unwrap(_:file:line:)(v63, sub_10001A7B4, 0, "SharingViewService/SDCommonSwifty.swift", 39, 2, 298, v49);
  sub_100055998((uint64_t)v46, v47, (void *)v48);
  v50 = v64;
  sub_100024034(v63[0], v63[1], v64);
  swift_bridgeObjectRelease(v41);
  if (v50)
  {
    v51 = sub_100055824();
    v52 = swift_allocError(&type metadata for SDRunState, v51, 0, 0);
    *v53 = 1;
    swift_willThrow(v52);
  }
  else
  {
    swift_beginAccess(v58, v63, 33, 0);
    sub_1000D0A84(0xD000000000000014, v60 | 0x8000000000000000);
    v56 = v55;
    swift_endAccess(v63);
    swift_bridgeObjectRelease(v56);
    sub_100021360(1140, 0xD000000000000070, v59 | 0x8000000000000000, v57, 0xD000000000000014, v60 | 0x8000000000000000, 0, 0xE000000000000000);
  }

  return sub_100007348(v1, v0);
}

void *sub_1000BE48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  unint64_t v23;
  _BYTE *v24;
  void *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD v55[3];
  uint64_t v56[3];
  _BYTE v57[24];
  void *v58;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v57, 33, 0);
  sub_1000C967C(v56, 0xD00000000000001FLL, 0x8000000100138B50);
  v3 = v56[1];
  swift_endAccess(v57);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1145, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD00000000000001FLL, 0x8000000100138B50, 0, 0xE000000000000000);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues, v57, 0, 0);
  v6 = *v5;
  if (!*(_QWORD *)(v6 + 16)
    || (swift_bridgeObjectRetain(v6), sub_100005E38(4), v8 = v7, swift_bridgeObjectRelease(v6), (v8 & 1) == 0))
  {
    v23 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v23, 0, 0);
    *v24 = 1;
    return (void *)swift_willThrow();
  }
  v10 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentReadRequest;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentReadRequest) & 1) != 0)
    goto LABEL_45;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v11 = type metadata accessor for Logger(0, v9);
  v12 = sub_10000E8E8(v11, (uint64_t)qword_1001A7A60);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "reading all values", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  *(_BYTE *)(v1 + v10) = 1;
  v17 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v56, 0, 0);
  v18 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v19 = sub_100005E38(2);
    if ((v20 & 1) != 0)
    {
      v21 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v19);
      v22 = v21;
    }
    else
    {
      v21 = 0;
    }
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v21 = 0;
  }
  v58 = v21;
  v26 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
  Optional.unwrap(_:file:line:)(v55, sub_100040FE4, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1151, v26);

  v27 = *v17;
  v54 = (void *)v55[0];
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(v27);
    v28 = sub_100005E38(3);
    if ((v29 & 1) != 0)
    {
      v30 = *(void **)(*(_QWORD *)(v27 + 56) + 8 * v28);
      v31 = v30;
    }
    else
    {
      v30 = 0;
    }
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v30 = 0;
  }
  v58 = v30;
  Optional.unwrap(_:file:line:)(v55, sub_10004160C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1152, v26);

  v53 = (void *)v55[0];
  v32 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v33 = sub_100005E38(16);
    if ((v34 & 1) != 0)
    {
      v35 = *(void **)(*(_QWORD *)(v32 + 56) + 8 * v33);
      v36 = v35;
    }
    else
    {
      v35 = 0;
    }
    swift_bridgeObjectRelease(v32);
  }
  else
  {
    v35 = 0;
  }
  v58 = v35;
  Optional.unwrap(_:file:line:)(v55, sub_100041628, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1153, v26);

  v52 = (void *)v55[0];
  v37 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v38 = sub_100005E38(17);
    if ((v39 & 1) != 0)
    {
      v40 = *(void **)(*(_QWORD *)(v37 + 56) + 8 * v38);
      v41 = v40;
    }
    else
    {
      v40 = 0;
    }
    swift_bridgeObjectRelease(v37);
  }
  else
  {
    v40 = 0;
  }
  v58 = v40;
  Optional.unwrap(_:file:line:)(v55, sub_100041628, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1154, v26);

  v42 = (void *)v55[0];
  v43 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v44 = sub_100005E38(18);
    if ((v45 & 1) != 0)
    {
      v46 = *(void **)(*(_QWORD *)(v43 + 56) + 8 * v44);
      v47 = v46;
    }
    else
    {
      v46 = 0;
    }
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v46 = 0;
  }
  v58 = v46;
  Optional.unwrap(_:file:line:)(v55, sub_100041628, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1155, v26);

  v48 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph;
  result = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
  if (!result)
  {
    __break(1u);
    goto LABEL_47;
  }
  v49 = (void *)v55[0];
  objc_msgSend(result, "readValueForCharacteristic:", v54);
  result = *(void **)(v1 + v48);
  if (!result)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  objc_msgSend(result, "readValueForCharacteristic:", v53);
  result = *(void **)(v1 + v48);
  if (!result)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  objc_msgSend(result, "readValueForCharacteristic:", v52);
  result = *(void **)(v1 + v48);
  if (!result)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  objc_msgSend(result, "readValueForCharacteristic:", v42);
  result = *(void **)(v1 + v48);
  if (result)
  {
    objc_msgSend(result, "readValueForCharacteristic:", v49);

LABEL_45:
    swift_beginAccess(v2, v55, 33, 0);
    sub_1000D0A84(0xD00000000000001FLL, 0x8000000100138B50);
    v51 = v50;
    swift_endAccess(v55);
    swift_bridgeObjectRelease(v51);
    return (void *)sub_100021360(1164, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD00000000000001FLL, 0x8000000100138B50, 0, 0xE000000000000000);
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1000BEA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  _BYTE v38[32];

  v1 = v0;
  v2 = type metadata accessor for DefaultStringInterpolation.PrintUtilsHexFormat(0);
  __chkstk_darwin(v2);
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v38, 33, 0);
  sub_1000C967C(v37, 0xD000000000000017, 0x8000000100138B00);
  v3 = v37[1];
  swift_endAccess(v38);
  swift_bridgeObjectRelease(v3);
  sub_100021338(1169, 0xD000000000000070, 0x800000010013D7C0, *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om), 0xD000000000000017, 0x8000000100138B00, 0, 0xE000000000000000);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 8) >> 60 != 15)
  {
    v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues);
    swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues, v38, 0, 0);
    v5 = *v4;
    if (*(_QWORD *)(*v4 + 16))
    {
      swift_bridgeObjectRetain(*v4);
      sub_100005E38(2);
      v7 = v6;
      swift_bridgeObjectRelease(v5);
      if ((v7 & 1) != 0)
      {
        v8 = *v4;
        if (*(_QWORD *)(*v4 + 16))
        {
          swift_bridgeObjectRetain(*v4);
          v9 = sub_100005E38(16);
          if ((v10 & 1) != 0)
          {
            v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
            v12 = v11[1];
            v36 = *v11;
            sub_100006B94(*v11, v12);
            swift_bridgeObjectRelease(v8);
            v13 = *v4;
            if (!*(_QWORD *)(*v4 + 16))
            {
              v26 = v36;
              v27 = v12;
LABEL_19:
              sub_100007348(v26, v27);
              goto LABEL_20;
            }
            v35 = v12;
            swift_bridgeObjectRetain(v13);
            v14 = sub_100005E38(17);
            if ((v15 & 1) != 0)
            {
              v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
              v17 = v16[1];
              v34 = *v16;
              sub_100006B94(*v16, v17);
              swift_bridgeObjectRelease(v13);
              v18 = *v4;
              if (*(_QWORD *)(*v4 + 16))
              {
                v33 = v17;
                swift_bridgeObjectRetain(v18);
                v19 = sub_100005E38(18);
                if ((v20 & 1) != 0)
                {
                  v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v19);
                  v23 = *v21;
                  v22 = v21[1];
                  sub_100006B94(*v21, v22);
                  swift_bridgeObjectRelease(v18);
                  v24 = v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1;
                  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1, v37, 0, 0);
                  v25 = *(_QWORD *)(v24 + 8);
                  if (v25 >> 60 != 15)
                    __asm { BR              X10 }
                  sub_100007348(v23, v22);
                  sub_100007348(v34, v33);
                  goto LABEL_15;
                }
                swift_bridgeObjectRelease(v18);
                v29 = v17;
                v28 = v34;
              }
              else
              {
                v28 = v34;
                v29 = v17;
              }
              sub_100007348(v28, v29);
              v26 = v36;
              v27 = v35;
              goto LABEL_19;
            }
            swift_bridgeObjectRelease(v13);
LABEL_15:
            v27 = v35;
            v26 = v36;
            goto LABEL_19;
          }
          swift_bridgeObjectRelease(v8);
        }
      }
    }
  }
LABEL_20:
  v30 = sub_100055824();
  swift_allocError(&type metadata for SDRunState, v30, 0, 0);
  *v31 = 1;
  return swift_willThrow();
}

void sub_1000BEDF8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v9 = (_QWORD *)(v6 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_targetS1Length);
  if ((*(_BYTE *)(v6 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_targetS1Length + 8) & 1) != 0)
  {
    v10 = v1;
    sub_100007348(a1, *(_QWORD *)(v8 - 232));
    sub_100007348(*(_QWORD *)(v8 - 248), *(_QWORD *)(v8 - 240));
    v11 = v3;
    v12 = v10;
  }
  else
  {
    *(_QWORD *)(v8 - 256) = v1;
    if (BYTE6(v1) == *v9)
    {
      *(_QWORD *)(v8 - 264) = v3;
      v13 = (_QWORD *)(v6 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vbVersionStr);
      v15 = *(_QWORD *)(v8 - 240);
      v14 = *(_QWORD *)(v8 - 232);
      v16 = *(_QWORD *)(v8 - 248);
      if (!v13[1])
      {
        v17 = *(_QWORD *)(v8 - 216);
        v18 = b389VersionString(from:)(*(_QWORD *)(v8 - 208), v17);
        v20 = v19;
        *(_QWORD *)(v8 - 176) = v18;
        *(_QWORD *)(v8 - 168) = v19;
        v21 = sub_100006A6C(&qword_1001A5430);
        Optional.unwrap(_:file:line:)((_QWORD *)(v8 - 160), sub_100041EB4, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1183, v21);
        swift_bridgeObjectRelease(v20);
        v22 = *(_QWORD *)(v8 - 160);
        v23 = *(_QWORD *)(v8 - 152);
        v24 = v13[1];
        *(_QWORD *)(v8 - 272) = v22;
        *v13 = v22;
        v13[1] = v23;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRelease(v24);
        if (qword_1001A3120 != -1)
          swift_once(&qword_1001A3120, sub_1000AEA64);
        v26 = type metadata accessor for Logger(0, v25);
        sub_10000E8E8(v26, (uint64_t)qword_1001A7A60);
        v27 = *(_QWORD *)(v8 - 208);
        sub_100006B94(v27, v17);
        sub_100006B94(v27, v17);
        v28 = swift_bridgeObjectRetain(v23);
        v29 = Logger.logObject.getter(v28);
        v31 = static os_log_type_t.default.getter(v29, v30);
        *(_DWORD *)(v8 - 276) = v31;
        v32 = v23;
        v33 = v17;
        if (os_log_type_enabled(v29, v31))
        {
          v34 = swift_slowAlloc(22, -1);
          *(_QWORD *)(v8 - 296) = v32;
          v35 = v34;
          v36 = swift_slowAlloc(64, -1);
          *(_QWORD *)(v8 - 288) = v36;
          *(_QWORD *)(v8 - 72) = v36;
          *(_DWORD *)v35 = 136315394;
          *(_QWORD *)(v8 - 160) = 0;
          *(_QWORD *)(v8 - 152) = 0xE000000000000000;
          *(_QWORD *)(v8 - 176) = *(_QWORD *)(v8 - 208);
          *(_QWORD *)(v8 - 168) = v17;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v5, enum case for DefaultStringInterpolation.PrintUtilsHexFormat.hex(_:), v7);
          v37 = sub_100055934();
          *(_QWORD *)(v8 - 304) = v29;
          DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(v8 - 176, v5, 58, 0xE100000000000000, &type metadata for Data, v37);
          (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
          v38 = *(_QWORD *)(v8 - 152);
          *(_QWORD *)(v8 - 160) = sub_10001EFA4(*(_QWORD *)(v8 - 160), v38, (uint64_t *)(v8 - 72));
          v39 = *(_QWORD *)(v8 - 224);
          v40 = *(_QWORD *)(v8 - 208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 160, v8 - 152, v35 + 4, v35 + 12);
          swift_bridgeObjectRelease(v38);
          sub_100007348(v40, v33);
          sub_100007348(v40, v33);
          *(_WORD *)(v35 + 12) = 2080;
          v41 = *(_QWORD *)(v8 - 296);
          swift_bridgeObjectRetain(v41);
          *(_QWORD *)(v8 - 160) = sub_10001EFA4(*(_QWORD *)(v8 - 272), v41, (uint64_t *)(v8 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 160, v8 - 152, v35 + 14, v35 + 22);
          swift_bridgeObjectRelease_n(v41, 3);
          v42 = *(NSObject **)(v8 - 304);
          v43 = *(_QWORD *)(v8 - 288);
          swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v43, -1, -1);
          swift_slowDealloc(v35, -1, -1);

          a1 = v39;
          v15 = *(_QWORD *)(v8 - 240);
          v14 = *(_QWORD *)(v8 - 232);
          v16 = *(_QWORD *)(v8 - 248);
        }
        else
        {
          v44 = *(_QWORD *)(v8 - 208);
          sub_100007348(v44, v33);
          sub_100007348(v44, v33);

          swift_bridgeObjectRelease_n(v32, 2);
          v15 = *(_QWORD *)(v8 - 240);
          v14 = *(_QWORD *)(v8 - 232);
          v16 = *(_QWORD *)(v8 - 248);
          a1 = *(_QWORD *)(v8 - 224);
        }
      }
      v45 = a1;
      v46 = v14;
      sub_100006B94(a1, v14);
      sub_100006B94(v16, v15);
      v47 = v15;
      *(_QWORD *)(v8 - 240) = 0xD000000000000070;
      v48 = *(_QWORD *)(v8 - 200) | 0x8000000000000000;
      v49 = *(_QWORD *)(v8 - 184);
      sub_100022034(1188, 0xD000000000000070, v48, v49, v45, v46, v16, v15);
      sub_100007348(v16, v15);
      sub_100007348(v45, v46);
      swift_beginAccess(v2, v8 - 160, 33, 0);
      v50 = *(_QWORD *)(v8 - 192) | 0x8000000000000000;
      sub_1000D0A84(0xD000000000000017, v50);
      v52 = v51;
      swift_endAccess(v8 - 160);
      swift_bridgeObjectRelease(v52);
      sub_100021360(1190, *(_QWORD *)(v8 - 240), v48, v49, 0xD000000000000017, v50, 0, 0xE000000000000000);
      sub_100023F48(*(_QWORD *)(v8 - 264), *(_QWORD *)(v8 - 256));
      sub_100007348(v16, v47);
      sub_100007348(v45, *(_QWORD *)(v8 - 232));
      sub_100007348(*(_QWORD *)(v8 - 208), *(_QWORD *)(v8 - 216));
      JUMPOUT(0x1000BEDACLL);
    }
    sub_100007348(a1, *(_QWORD *)(v8 - 232));
    sub_100007348(*(_QWORD *)(v8 - 248), *(_QWORD *)(v8 - 240));
    v11 = v3;
    v12 = *(_QWORD *)(v8 - 256);
  }
  sub_100023F48(v11, v12);
  JUMPOUT(0x1000BED4CLL);
}

void sub_1000BF308(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for DefaultStringInterpolation.PrintUtilsHexFormat(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v13 = type metadata accessor for Logger(0, v10);
  sub_10000E8E8(v13, (uint64_t)qword_1001A7A60);
  sub_100006B94(a1, a2);
  sub_100006B94(a3, a4);
  sub_100006B94(a1, a2);
  v14 = sub_100006B94(a3, a4);
  v30 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v30, v15);
  v17 = v16;
  if (os_log_type_enabled(v30, v16))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v29 = v19;
    *(_DWORD *)v18 = 136315394;
    v25 = v18 + 4;
    v32 = a2;
    v33 = 0;
    v34 = 0xE000000000000000;
    v35 = v19;
    v31 = a1;
    v27 = enum case for DefaultStringInterpolation.PrintUtilsHexFormat.hex(_:);
    v20 = *(void (**)(char *))(v9 + 104);
    v20(v12);
    v26 = sub_100055934();
    v28 = v17;
    DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(&v31, v12, 58, 0xE100000000000000, &type metadata for Data, v26);
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v22 = v34;
    v33 = sub_10001EFA4(v33, v34, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v25, v18 + 12);
    swift_bridgeObjectRelease(v22);
    sub_100007348(a1, a2);
    sub_100007348(a1, a2);
    *(_WORD *)(v18 + 12) = 2080;
    v33 = 0;
    v34 = 0xE000000000000000;
    v31 = a3;
    v32 = a4;
    ((void (*)(char *, _QWORD, uint64_t))v20)(v12, v27, v8);
    DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(&v31, v12, 58, 0xE100000000000000, &type metadata for Data, v26);
    v21(v12, v8);
    v23 = v34;
    v33 = sub_10001EFA4(v33, v34, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v23);
    sub_100007348(a3, a4);
    sub_100007348(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v28, "rpkv: %s, spkv: %s", (uint8_t *)v18, 0x16u);
    v24 = v29;
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_100007348(a1, a2);
    sub_100007348(a1, a2);
    sub_100007348(a3, a4);
    sub_100007348(a3, a4);
  }

}

uint64_t *sub_1000BF670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  NSData v48;
  NSData v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *result;
  uint64_t v61;
  Class v62;
  Class v63;
  NSString v64;
  Class v65;
  uint64_t v66;
  void *v67;
  double v68;
  Class v69;
  Class v70;
  void *v71;
  Class v72;
  Class v73;
  void *v74;
  Class v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  Class v81;
  Class v82;
  NSString v83;
  Class v84;
  _OWORD *v85;
  Class v86;
  id v87;
  NSString v88;
  Class v89;
  uint64_t v90;
  uint64_t v91;
  Class v92;
  Class isa;
  Class v94;
  id v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD v122[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  uint64_t v127;

  v1 = v0;
  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v100 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v4, &v117, 33, 0);
  v97 = (unint64_t)"Expect userMessage encodes";
  v99 = v4;
  sub_1000C967C(&v107, 0xD000000000000017, 0x80000001001389F0);
  v5 = v108;
  swift_endAccess(&v117);
  swift_bridgeObjectRelease(v5);
  v127 = v1;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  v96 = (unint64_t)"inViewController.swift";
  v98 = v6;
  sub_100021338(1195, 0xD000000000000070, 0x800000010013D7C0, v6, 0xD000000000000017, 0x80000001001389F0, 0, 0xE000000000000000);
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue);
  v9 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v13 = v7[4];
  v12 = (void *)v7[5];
  v14 = v7[6];
  v15 = v7[7];
  v16 = v7[8];
  v17 = v7[9];
  v107 = v8;
  v108 = v9;
  v109 = v10;
  v110 = v11;
  v111 = v13;
  v112 = v12;
  v101 = v12;
  v102 = v15;
  v103 = v14;
  v113 = v14;
  v114 = v15;
  v115 = v16;
  v116 = v17;
  sub_1000559A8(v8, v9, v10, v11, v13, (uint64_t)v12, v14, v15, v16, v17, (void (*)(void))sub_100006B94);
  v18 = sub_100006A6C(&qword_1001A5498);
  Optional.unwrap(_:file:line:)(&v117, sub_100042A60, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1197, v18);
  v19 = v11;
  v20 = v127;
  sub_1000559A8(v8, v9, v10, v19, v13, (uint64_t)v101, v103, v102, v16, v17, (void (*)(void))sub_100007348);
  v123 = v119;
  v124 = v120;
  v125 = v121;
  v122[0] = v117;
  v122[1] = v118;
  v21 = (uint64_t **)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues);
  swift_beginAccess(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues, &v107, 0, 0);
  v22 = *v21;
  if ((*v21)[2])
  {
    swift_bridgeObjectRetain(*v21);
    v23 = sub_100005E38(2);
    if ((v24 & 1) != 0)
    {
      v25 = (uint64_t *)(v22[7] + 16 * v23);
      v27 = *v25;
      v26 = v25[1];
      sub_100006B94(*v25, v26);
    }
    else
    {
      v27 = 0;
      v26 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    v27 = 0;
    v26 = 0xF000000000000000;
  }
  v106[0] = v27;
  v106[1] = v26;
  v28 = sub_100006A6C(&qword_1001A5438);
  Optional.unwrap(_:file:line:)(&v117, sub_100042A7C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1198, v28);
  sub_100023F48(v27, v26);
  v103 = *((_QWORD *)&v117 + 1);
  v29 = v117;
  v30 = (uint64_t *)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1);
  swift_beginAccess(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1, v106, 0, 0);
  v32 = v30[1];
  v104 = *v30;
  v31 = v104;
  v105 = v32;
  sub_100024020(v104, v32);
  Optional.unwrap(_:file:line:)(&v117, sub_100042A98, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1199, v28);
  sub_100023F48(v31, v32);
  v33 = *((_QWORD *)&v117 + 1);
  v34 = v117;
  if ((*(_BYTE *)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_handledS1S2PayloadRead) & 1) != 0)
    goto LABEL_15;
  v102 = *((_QWORD *)&v117 + 1);
  *(_BYTE *)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_handledS1S2PayloadRead) = 1;
  v126[0] = v123;
  v117 = v123;
  v35 = sub_100055A54((uint64_t)v126);
  v36 = v100;
  static String.Encoding.utf8.getter(v35);
  v37 = sub_100055934();
  v38 = String.init<A>(bytes:encoding:)(&v117, v36, &type metadata for Data, v37);
  v40 = v39;
  v41 = sub_100055A80((uint64_t)v126);
  v104 = v38;
  v105 = v40;
  __chkstk_darwin(v41);
  v85 = v122;
  v42 = sub_100006A6C(&qword_1001A5430);
  v43 = &v104;
  Optional.unwrap(_:file:line:)(&v117, sub_100055AAC, &v83, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1206, v42);
  swift_bridgeObjectRelease(v105);
  v44 = *(void **)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
  if (!v44)
    goto LABEL_21;
  v45 = *((_QWORD *)&v117 + 1);
  v46 = *(void **)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_spManager);
  v100 = (char *)v117;
  v101 = v46;
  v47 = v44;
  v48.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v49.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v43 = *v21;
  if (!(*v21)[2])
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isa = v49.super.isa;
  v94 = v48.super.isa;
  v95 = v47;
  swift_bridgeObjectRetain(v43);
  v50 = sub_100005E38(18);
  if ((v51 & 1) == 0)
  {
LABEL_22:
    swift_bridgeObjectRelease(v43);
    __break(1u);
    goto LABEL_23;
  }
  v52 = (uint64_t *)(v43[7] + 16 * v50);
  v53 = *v52;
  v54 = v52[1];
  sub_100006B94(*v52, v54);
  swift_bridgeObjectRelease(v43);
  v92 = Data._bridgeToObjectiveC()().super.isa;
  sub_100007348(v53, v54);
  v43 = *v21;
  if (!(*v21)[2])
    goto LABEL_20;
  v91 = v29;
  swift_bridgeObjectRetain(v43);
  v55 = sub_100005E38(17);
  if ((v56 & 1) == 0)
  {
LABEL_23:
    result = (uint64_t *)swift_bridgeObjectRelease(v43);
    __break(1u);
    goto LABEL_24;
  }
  v90 = v34;
  v57 = (uint64_t *)(v43[7] + 16 * v55);
  v58 = *v57;
  v59 = v57[1];
  sub_100006B94(*v57, v59);
  swift_bridgeObjectRelease(v43);
  v89 = Data._bridgeToObjectiveC()().super.isa;
  result = (uint64_t *)sub_100007348(v58, v59);
  v61 = *(_QWORD *)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vbVersionStr + 8);
  if (!v61)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v20
                                     + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vbVersionStr
                                     + 8));
  v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  v62 = Data._bridgeToObjectiveC()().super.isa;
  v63 = Data._bridgeToObjectiveC()().super.isa;
  v86 = v63;
  v64 = String._bridgeToObjectiveC()();
  v87 = v64;
  swift_bridgeObjectRelease(v45);
  v65 = Data._bridgeToObjectiveC()().super.isa;
  v100 = (char *)v65;
  v66 = swift_allocObject(&unk_10017C460, 24, 7);
  swift_unknownObjectWeakInit(v66 + 16, v20);
  *(_QWORD *)&v119 = sub_1000D8908;
  *((_QWORD *)&v119 + 1) = v66;
  *(_QWORD *)&v117 = _NSConcreteStackBlock;
  *((_QWORD *)&v117 + 1) = 1107296256;
  *(_QWORD *)&v118 = sub_1000AD3B4;
  *((_QWORD *)&v118 + 1) = &unk_10017C5B8;
  v67 = _Block_copy(&v117);
  *(_QWORD *)&v68 = swift_release(*((_QWORD *)&v119 + 1)).n128_u64[0];
  v84 = v65;
  v82 = v63;
  v83 = v64;
  v81 = v62;
  v69 = v62;
  v70 = v94;
  v71 = v95;
  v73 = v92;
  v72 = isa;
  v74 = v88;
  v75 = v89;
  objc_msgSend(v101, "verifyPairingWithPairingSession:signature:attestation:systemPublicKey:refKeyPublicKey:systemVersion:vendorId:productId:ecid:chipId:serialNumber:collaborativeKey:completion:", v95, v94, isa, v92, v89, v88, v68, 76, 21760, v81, v82, v83, v84, v67);
  _Block_release(v67);

  v20 = v127;
  v34 = v90;
  v29 = v91;
  v33 = v102;
LABEL_15:
  if ((*(_BYTE *)(v20 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionVerified) & 1) != 0)
  {
    swift_beginAccess(v99, &v117, 33, 0);
    v76 = v97 | 0x8000000000000000;
    sub_1000D0A84(0xD000000000000017, v97 | 0x8000000000000000);
    v78 = v77;
    swift_endAccess(&v117);
    swift_bridgeObjectRelease(v78);
    sub_100021360(1253, 0xD000000000000070, v96 | 0x8000000000000000, v98, 0xD000000000000017, v76, 0, 0xE000000000000000);
    sub_100007348(v34, v33);
    sub_100007348(v29, v103);
    return sub_100055AE4((uint64_t *)v122);
  }
  else
  {
    v79 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v79, 0, 0);
    *v80 = 1;
    swift_willThrow();
    sub_100007348(v34, v33);
    sub_100007348(v29, v103);
    return sub_100055AE4((uint64_t *)v122);
  }
}

uint64_t sub_1000BFE98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  id v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[5];
  _QWORD *v37;
  char v38[24];

  v33 = a6;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v15 - 8);
  v35 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v38, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    v19 = (void *)result;
    sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
    v20 = static OS_dispatch_queue.main.getter();
    v32 = v12;
    v21 = (void *)v20;
    v22 = (_QWORD *)swift_allocObject(a4, 40, 7);
    v22[2] = a2;
    v22[3] = a1;
    v22[4] = v19;
    aBlock[4] = a5;
    v37 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001BB50;
    aBlock[3] = v33;
    v23 = _Block_copy(aBlock);
    v24 = v37;
    swift_errorRetain(a2);
    v25 = a1;
    v26 = v19;
    v27 = swift_release(v24);
    static DispatchQoS.unspecified.getter(v27);
    aBlock[0] = _swiftEmptyArrayStorage;
    v28 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_100006A6C((uint64_t *)&unk_1001A4330);
    v30 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v11, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v17, v35);
  }
  return result;
}

uint64_t sub_1000C00EC(uint64_t a1, void *a2, uint64_t a3)
{
  os_log_type_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v37;
  NSString v38;
  NSString v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  char v46[8];
  _QWORD v47[3];
  char v48[8];
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;

  if (a1)
    v6 = static os_log_type_t.error.getter(a1);
  else
    v6 = static os_log_type_t.default.getter(0, a2);
  v8 = v6;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v9 = type metadata accessor for Logger(0, v7);
  sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
  v10 = a2;
  swift_errorRetain(a1);
  v11 = v10;
  v12 = swift_errorRetain(a1);
  v13 = Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v8))
  {
    v44 = a3;
    v14 = swift_slowAlloc(22, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    v16 = swift_slowAlloc(32, -1);
    v51 = (void *)v16;
    *(_DWORD *)v14 = 138412546;
    if (a2)
    {
      v49 = (uint64_t)v11;
      v17 = v11;
    }
    else
    {
      v49 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v14 + 4, v14 + 12);
    *v15 = a2;

    *(_WORD *)(v14 + 12) = 2080;
    if (a1)
    {
      swift_getErrorValue(a1, v46, v45);
      v29 = Error.localizedDescription.getter(v45[1], v45[2]);
      v31 = v30;
    }
    else
    {
      v49 = 0;
      v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v50);
      v29 = 0xD000000000000015;
      v31 = 0x8000000100136820;
    }
    v49 = sub_10001EFA4(v29, v31, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v31);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v8, "verifyPairing %@ completion, error: %s", (uint8_t *)v14, 0x16u);
    v32 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v15, 1, v32);
    swift_slowDealloc(v15, -1, -1);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    a3 = v44;
    if (!a1)
      goto LABEL_19;
  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    if (!a1)
    {
LABEL_19:
      v33 = *(void **)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
      *(_QWORD *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session) = a2;
      v34 = v11;

      *(_BYTE *)(a3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sessionVerified) = 1;
      return sub_1000AF594(v35);
    }
  }
  v49 = a1;
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  v18 = sub_100006A6C(&qword_1001A7C30);
  type metadata accessor for SPPairingSessionError(0);
  if ((swift_dynamicCast(&v51, &v49, v18, v19, 6) & 1) != 0)
  {
    v20 = v51;
    sub_1000C0CA8((uint64_t)v51);

  }
  else
  {
    swift_errorRetain(a1);
    v21 = swift_errorRetain(a1);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v49 = v25;
      *(_DWORD *)v24 = 136315138;
      swift_getErrorValue(a1, v48, v47);
      v26 = Error.localizedDescription.getter(v47[1], v47[2]);
      v28 = v27;
      v51 = (void *)sub_10001EFA4(v26, v27, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "verifyPairing error %s failed decode as NSError", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v37 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v38 = String._bridgeToObjectiveC()();
    v39 = String._bridgeToObjectiveC()();
    v40 = sub_100117218(v37, v38, v39);

    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    swift_errorRetain(a1);
    sub_1000C06B8(v41, v43, a1, 0, 0);
    swift_errorRelease(a1);
    swift_bridgeObjectRelease(v43);
  }
  return swift_errorRelease(a1);
}

void sub_1000C06B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  id v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v52[3];
  char v53[8];
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  if ((v5[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_shownError] & 1) == 0)
  {
    v5[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_shownError] = 1;
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v15 = type metadata accessor for Logger(0, a2);
    sub_10000E8E8(v15, (uint64_t)qword_1001A7A60);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a3);
    v16 = v5;
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a3);
    v17 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = a1;
      v21 = swift_slowAlloc(32, -1);
      v48 = swift_slowAlloc(96, -1);
      v57 = v48;
      *(_DWORD *)v21 = 136315650;
      swift_bridgeObjectRetain(a2);
      v49 = v20;
      v55 = sub_10001EFA4(v20, a2, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v21 + 12) = 2080;
      if (a3)
      {
        swift_getErrorValue(a3, v53, v52);
        v22 = Error.localizedDescription.getter(v52[1], v52[2]);
        v24 = v23;
      }
      else
      {
        v55 = 0;
        v56[0] = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v56[0]);
        v24 = 0x8000000100136820;
        v22 = 0xD000000000000015;
      }
      v55 = sub_10001EFA4(v22, v24, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      *(_WORD *)(v21 + 22) = 2080;
      v25 = &v17[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations];
      swift_beginAccess(&v17[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations], &v55, 0, 0);
      v26 = *(_QWORD *)v25;
      v27 = swift_bridgeObjectRetain(v26);
      v28 = Set.description.getter(v27, &type metadata for String, &protocol witness table for String);
      v30 = v29;
      swift_bridgeObjectRelease(v26);
      v54 = sub_10001EFA4(v28, v30, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 24, v21 + 32);

      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "showError reason: %s, error: %s\nThe following operations were in-flight at the time of error, and have not finished:\n%s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy(v48, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      a1 = v49;
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    sub_1000AFEC0(0);
    v31 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_errorVC;
    v32 = *(char **)&v17[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_errorVC];
    v33 = v32;
    v34 = v32;
    if (!v32)
    {
      v35 = objc_allocWithZone((Class)type metadata accessor for AirTagErrorViewController());
      v36 = v17;
      v34 = (char *)objc_msgSend(v35, "init");
      swift_unknownObjectWeakAssign(&v34[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_mainController], v36);

      v33 = *(void **)&v17[v31];
    }
    *(_QWORD *)&v17[v31] = v34;
    v37 = v32;

    v38 = *(_QWORD *)&v17[v31];
    if (v38)
    {
      v39 = (uint64_t *)(v38 + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_message);
      v40 = v39[1];
      *v39 = a1;
      v39[1] = a2;
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRelease(v40);
      v41 = *(_QWORD *)&v17[v31];
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_error);
        *(_QWORD *)(v41 + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_error) = a3;
        swift_errorRetain(a3);
        swift_errorRelease(v42);
        v43 = *(_QWORD *)&v17[v31];
        if (v43)
        {
          v44 = (_QWORD *)(v43 + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_errorTitle);
          v45 = v44[1];
          *v44 = a4;
          v44[1] = a5;
          swift_bridgeObjectRetain(a5);
          swift_bridgeObjectRelease(v45);
          v46 = *(void **)&v17[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
          if (v46)
          {
            v47 = *(_QWORD *)&v17[v31];
            if (v47)
            {
              objc_msgSend(v46, "pushViewController:animated:", v47, 1);
              return;
            }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v8 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v8, (uint64_t)qword_1001A7A60);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v55 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(a2);
    v57 = sub_10001EFA4(a1, a2, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Already showing error, dropping message: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
}

void sub_1000C0CA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  void *v30;
  id v31;
  NSString v32;
  NSString v33;
  id v34;
  unint64_t v35;
  id v36;
  NSString v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  NSString v48;
  NSString v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  _UNKNOWN **v60;
  uint8_t *v61;
  id v62;
  NSString v63;
  NSString v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  void *v71;
  id v72;
  NSString v73;
  NSString v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  NSString v80;
  NSString v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v2 = v1;
  v4 = sub_100006A6C(&qword_1001A3618);
  __chkstk_darwin(v4);
  v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = a1;
  type metadata accessor for SPPairingSessionError(0);
  v8 = v7;
  v9 = sub_100005B80(&qword_1001A33D0, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1001317D4);
  _BridgedStoredNSError.code.getter(&v96, v8, v9);
  switch(v96)
  {
    case 17:
      v30 = (void *)objc_opt_self(NSBundle);
      v31 = objc_msgSend(v30, "mainBundle");
      v32 = String._bridgeToObjectiveC()();
      v33 = String._bridgeToObjectiveC()();
      v34 = sub_100117218(v31, v32, v33);

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v17 = v35;

      v36 = objc_msgSend(v30, "mainBundle");
      v37 = String._bridgeToObjectiveC()();
      v38 = String._bridgeToObjectiveC()();
      v39 = sub_100117218(v36, v37, v38);

      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v20 = v40;

      goto LABEL_3;
    case 18:
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v41 = type metadata accessor for Logger(0, v10);
      v42 = sub_10000E8E8(v41, (uint64_t)qword_1001A7A60);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        v95 = v46;
        *(_DWORD *)v45 = 136315138;
        v93 = (uint64_t)(v45 + 4);
        v47 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v48 = String._bridgeToObjectiveC()();
        v49 = String._bridgeToObjectiveC()();
        v50 = sub_100117218(v47, v48, v49);

        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
        v53 = v52;

        v94 = sub_10001EFA4(v51, v53, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v93, v45 + 12);
        swift_bridgeObjectRelease(v53);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);
      }

      sub_1000C5380(v54, v55);
      break;
    case 20:
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v56 = type metadata accessor for Logger(0, v10);
      v57 = sub_10000E8E8(v56, (uint64_t)qword_1001A7A60);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter();
      v60 = &_ss5ErrorP10FoundationAC13CustomNSErrorRzrlE7_domainSSvg_ptr;
      if (os_log_type_enabled(v58, v59))
      {
        v61 = (uint8_t *)swift_slowAlloc(12, -1);
        v93 = swift_slowAlloc(32, -1);
        v95 = v93;
        *(_DWORD *)v61 = 136315138;
        v92 = v61 + 4;
        v62 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v63 = String._bridgeToObjectiveC()();
        v64 = String._bridgeToObjectiveC()();
        v65 = sub_100117218(v62, v63, v64);

        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
        v68 = v67;

        v94 = sub_10001EFA4(v66, v68, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v92, v61 + 12);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "%s", v61, 0xCu);
        v69 = v93;
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        v70 = v61;
        v60 = &_ss5ErrorP10FoundationAC13CustomNSErrorRzrlE7_domainSSvg_ptr;
        swift_slowDealloc(v70, -1, -1);
      }

      v71 = (void *)objc_opt_self(v60[190]);
      v72 = objc_msgSend(v71, "mainBundle");
      v73 = String._bridgeToObjectiveC()();
      v74 = String._bridgeToObjectiveC()();
      v75 = sub_100117218(v72, v73, v74);

      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      v78 = v77;

      v79 = objc_msgSend(v71, "mainBundle");
      v80 = String._bridgeToObjectiveC()();
      v81 = String._bridgeToObjectiveC()();
      v82 = sub_100117218(v79, v80, v81);

      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v85 = v84;

      v86 = String._bridgeToObjectiveC()();
      v87 = sub_100117314(v86);

      v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      v90 = v89;

      URL.init(string:)(0x3A7366657270, 0xE600000000000000);
      sub_1000B7FA0(v76, v78, v83, v85, v88, v90, 0xD000000000000010, 0x8000000100138640, (uint64_t)v6);
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v85);
      swift_bridgeObjectRelease(v90);
      sub_10000D858((uint64_t)v6, &qword_1001A3618);
      break;
    default:
      v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v12 = String._bridgeToObjectiveC()();
      v13 = String._bridgeToObjectiveC()();
      v14 = sub_100117218(v11, v12, v13);

      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v19 = 0;
      v20 = 0;
LABEL_3:
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v21 = type metadata accessor for Logger(0, v18);
      sub_10000E8E8(v21, (uint64_t)qword_1001A7A60);
      v22 = swift_bridgeObjectRetain_n(v17, 2);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc(12, -1);
        v92 = (uint8_t *)v19;
        v26 = (uint8_t *)v25;
        v27 = swift_slowAlloc(32, -1);
        v93 = v2;
        v28 = v27;
        v96 = v27;
        *(_DWORD *)v26 = 136315138;
        swift_bridgeObjectRetain(v17);
        v95 = sub_10001EFA4(v15, v17, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v26 + 4, v26 + 12);
        swift_bridgeObjectRelease_n(v17, 3);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s", v26, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        v29 = v26;
        v19 = (uint64_t)v92;
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v17, 2);
      }
      sub_1000C06B8(v15, v17, a1, v19, v20);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v20);
      break;
  }
}

void sub_1000C1958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  char v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  void *object;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  char v46;
  id v47;
  id v48;
  id v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  unint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE v80[24];
  uint64_t v81;

  v2 = v0;
  v3 = type metadata accessor for String.Encoding(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v7, v80, 33, 0);
  v71 = (unint64_t)"Expect discovered c3_t4_s4 char";
  v81 = v7;
  sub_1000C967C(&v78, 0xD00000000000001ALL, 0x80000001001389B0);
  v8 = v79;
  swift_endAccess(v80);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  v68 = (unint64_t)"inViewController.swift";
  v70 = v9;
  sub_100021338(1258, 0xD000000000000070, 0x800000010013D7C0, v9, 0xD00000000000001ALL, 0x80000001001389B0, 0, 0xE000000000000000);
  v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v80, 0, 0);
  v11 = *v10;
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain(v11);
    v12 = sub_100005E38(5);
    if ((v13 & 1) != 0)
    {
      v69 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v12);
      swift_bridgeObjectRelease(v11);
      v14 = v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager;
      swift_beginAccess(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager, &v78, 0, 0);
      v15 = *(_QWORD *)(v14 + 8);
      if (*(_QWORD *)(v15 + 16))
      {
        v16 = v69;
        swift_bridgeObjectRetain(v15);
        sub_100005E08((uint64_t)v16);
        v18 = v17;
        swift_bridgeObjectRelease(v15);

        if ((v18 & 1) != 0)
        {
LABEL_24:
          v52 = *(_QWORD *)(v14 + 8);
          if (*(_QWORD *)(v52 + 16))
          {
            v53 = v69;
            swift_bridgeObjectRetain(v52);
            v54 = sub_100005E08((uint64_t)v53);
            if ((v55 & 1) != 0)
            {
              v56 = *(_QWORD *)(v52 + 56) + 24 * v54;
              v57 = *(id *)v56;
              v58 = *(_QWORD *)(v56 + 8);
              v59 = *(_QWORD *)(v56 + 16);
              sub_100006B68(*(id *)v56, v58, (void *)v59);

LABEL_30:
              v72 = (uint64_t)v57;
              v73 = v58;
              v74 = v59;
              v60 = sub_100006A6C((uint64_t *)&unk_1001A7C60);
              Optional.unwrap(_:file:line:)(&v75, sub_10001A7B4, 0, "SharingViewService/SDCommonSwifty.swift", 39, 2, 298, v60);
              sub_100055998((uint64_t)v57, v58, (void *)v59);
              v61 = v77;
              sub_100024034(v75, v76, v77);
              swift_bridgeObjectRelease(v52);
              if (v61)
              {
                v62 = sub_100055824();
                swift_allocError(&type metadata for SDRunState, v62, 0, 0);
                *v63 = 1;
                swift_willThrow();
              }
              else
              {
                swift_beginAccess(v81, &v75, 33, 0);
                v64 = v71 | 0x8000000000000000;
                sub_1000D0A84(0xD00000000000001ALL, v71 | 0x8000000000000000);
                v66 = v65;
                swift_endAccess(&v75);
                swift_bridgeObjectRelease(v66);
                sub_100021360(1278, 0xD000000000000070, v68 | 0x8000000000000000, v70, 0xD00000000000001ALL, v64, 0, 0xE000000000000000);
              }

              return;
            }

          }
          else
          {
            swift_bridgeObjectRetain(v52);
          }
          v57 = 0;
          v58 = 0;
          v59 = 1;
          goto LABEL_30;
        }
      }
      v19 = *(id *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
      v67[1] = v1;
      if (v19 && (v19 = objc_msgSend(v19, "userMessage")) != 0)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

      }
      else
      {
        v21 = 0;
        v23 = 0xE000000000000000;
      }
      static String.Encoding.utf8.getter(v19);
      v37 = String.data(using:allowLossyConversion:)(v6, 0, v21, v23);
      v39 = v38;
      swift_bridgeObjectRelease(v23);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v72 = v37;
      v73 = v39;
      v40 = sub_100006A6C(&qword_1001A5438);
      Optional.unwrap(_:file:line:)(&v75, sub_10004512C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1272, v40);
      sub_100023F48(v37, v39);
      v41 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
      if (!v41)
      {
        __break(1u);
        return;
      }
      v42 = v75;
      v43 = v76;
      swift_beginAccess(v14, &v75, 33, 0);
      if (*(_QWORD *)(*(_QWORD *)(v14 + 8) + 16))
      {
        v44 = v69;
        v45 = v41;
        sub_100005E08((uint64_t)v44);
        if ((v46 & 1) != 0)
        {
LABEL_23:

          swift_endAccess(&v75);
          sub_100007348(v42, v43);
          goto LABEL_24;
        }

      }
      else
      {
        v47 = v41;
      }
      v48 = v69;
      v49 = v41;
      sub_100006B94(v42, v43);
      sub_100006B94(v42, v43);
      v45 = v49;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v14 + 8));
      v72 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0x8000000000000000;
      sub_1000CF3F8(v42, v43, (uint64_t)v41, v48, isUniquelyReferenced_nonNull_native);
      v51 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v72;

      swift_bridgeObjectRelease(v51);
      sub_10001A55C(v48);
      sub_100007348(v42, v43);
      v44 = v45;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease(v11);
  }
  v78 = 0xD000000000000070;
  v79 = 0x800000010013D7C0;
  v75 = 1262;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  v26 = v79;
  v27 = String.hashValue.getter(v78, v79);
  swift_bridgeObjectRelease(v26);
  swift_beginAccess(v70 + 16, &v78, 33, 0);
  LOBYTE(v26) = sub_1000C9584(&v75, v27);
  swift_endAccess(&v78);
  if ((v26 & 1) != 0)
  {
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v29 = type metadata accessor for Logger(0, v28);
    v30 = sub_10000E8E8(v29, (uint64_t)qword_1001A7A60);
    v31 = Logger.logObject.getter(v30);
    v33 = static os_log_type_t.default.getter(v31, v32);
    if (os_log_type_enabled(v31, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v33, "ensureUserMessageWritten - skipped", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

  }
  swift_beginAccess(v81, &v78, 33, 0);
  sub_1000D0A84(0xD00000000000001ALL, v71 | 0x8000000000000000);
  v36 = v35;
  swift_endAccess(&v78);
  swift_bridgeObjectRelease(v36);
}

void sub_1000C2064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  os_log_type_t v86;
  uint8_t *v87;
  unint64_t v88;
  Class isa;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  id v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115[2];
  id v116;
  unint64_t v117;
  _QWORD v118[4];

  v1 = v0;
  v2 = type metadata accessor for String.Encoding(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v118, 33, 0);
  v99 = "Expect discovered baaCert char";
  sub_1000C967C((uint64_t *)&v116, 0xD00000000000001BLL, 0x80000001001388A0);
  v7 = v117;
  swift_endAccess(v118);
  swift_bridgeObjectRelease(v7);
  v100 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1283, 0xD000000000000070, 0x800000010013D7C0, v100, 0xD00000000000001BLL, 0x80000001001388A0, 0, 0xE000000000000000);
  v116 = *(id *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
  v8 = v116;
  v9 = sub_100006A6C(&qword_1001A4A38);
  Optional.unwrap(_:file:line:)(v118, sub_10002F048, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1285, v9);

  v10 = (void *)v118[0];
  v112 = v1;
  v11 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v118, 0, 0);
  v12 = *v11;
  v13 = *(_QWORD *)(*v11 + 16);
  v98 = (unint64_t)"inViewController.swift";
  v97 = v3;
  if (v13)
  {
    swift_bridgeObjectRetain(v12);
    v14 = sub_100005E38(13);
    if ((v15 & 1) != 0)
    {
      v16 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v14);
      v17 = v16;
    }
    else
    {
      v16 = 0;
    }
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v16 = 0;
  }
  v113 = (uint64_t)v16;
  v18 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
  Optional.unwrap(_:file:line:)(&v116, sub_100046114, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1287, v18);

  v19 = v116;
  v20 = *v11;
  if (*(_QWORD *)(*v11 + 16))
  {
    swift_bridgeObjectRetain(*v11);
    v21 = sub_100005E38(6);
    if ((v22 & 1) != 0)
    {
      v23 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v21);
      v24 = v23;
    }
    else
    {
      v23 = 0;
    }
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v23 = 0;
  }
  v113 = (uint64_t)v23;
  Optional.unwrap(_:file:line:)(&v116, sub_100046130, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1288, v18);

  v111 = v116;
  v25 = *v11;
  if (*(_QWORD *)(*v11 + 16))
  {
    swift_bridgeObjectRetain(*v11);
    v26 = sub_100005E38(7);
    if ((v27 & 1) != 0)
    {
      v28 = *(void **)(*(_QWORD *)(v25 + 56) + 8 * v26);
      v29 = v28;
    }
    else
    {
      v28 = 0;
    }
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v28 = 0;
  }
  v113 = (uint64_t)v28;
  Optional.unwrap(_:file:line:)(&v116, sub_10004614C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1289, v18);

  v110 = v116;
  v30 = *v11;
  if (*(_QWORD *)(*v11 + 16))
  {
    swift_bridgeObjectRetain(*v11);
    v31 = sub_100005E38(8);
    if ((v32 & 1) != 0)
    {
      v33 = *(void **)(*(_QWORD *)(v30 + 56) + 8 * v31);
      v34 = v33;
    }
    else
    {
      v33 = 0;
    }
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v33 = 0;
  }
  v113 = (uint64_t)v33;
  Optional.unwrap(_:file:line:)(&v116, sub_100046168, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1290, v18);

  v109 = v116;
  v35 = *v11;
  if (*(_QWORD *)(*v11 + 16))
  {
    swift_bridgeObjectRetain(*v11);
    v36 = sub_100005E38(9);
    if ((v37 & 1) != 0)
    {
      v38 = *(void **)(*(_QWORD *)(v35 + 56) + 8 * v36);
      v39 = v38;
    }
    else
    {
      v38 = 0;
    }
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    v38 = 0;
  }
  v113 = (uint64_t)v38;
  Optional.unwrap(_:file:line:)(&v116, sub_100046184, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1291, v18);

  v108 = v116;
  v40 = objc_msgSend(v10, "collaborativeKeyC2");
  v103 = (id)v2;
  if (v40)
  {
    v41 = v40;
    v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

  }
  else
  {
    v42 = 0;
    v44 = 0xF000000000000000;
  }
  v113 = v42;
  v114 = v44;
  v45 = sub_100006A6C(&qword_1001A5438);
  Optional.unwrap(_:file:line:)(&v116, sub_1000461A0, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1293, v45);
  sub_100023F48(v42, v44);
  v104 = v117;
  v105 = (uint64_t)v116;
  v46 = objc_msgSend(v10, "serverSeed");
  if (v46)
  {
    v47 = v46;
    v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v50 = v49;

  }
  else
  {
    v48 = 0;
    v50 = 0xF000000000000000;
  }
  v113 = v48;
  v114 = v50;
  Optional.unwrap(_:file:line:)(&v116, sub_1000461BC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1294, v45);
  sub_100023F48(v48, v50);
  v106 = v117;
  v107 = (uint64_t)v116;
  v51 = objc_msgSend(v10, "serverSignature");
  if (v51)
  {
    v52 = v51;
    v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v55 = v54;

  }
  else
  {
    v53 = 0;
    v55 = 0xF000000000000000;
  }
  v113 = v53;
  v114 = v55;
  Optional.unwrap(_:file:line:)(&v116, sub_1000461D8, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1295, v45);
  sub_100023F48(v53, v55);
  v102 = (uint64_t)v116;
  v101 = v117;
  v56 = objc_msgSend(v10, "maskedAppleID");
  if (v56)
  {
    v57 = v56;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v60 = v59;

  }
  else
  {
    v58 = 0;
    v60 = 0;
  }
  v113 = v58;
  v114 = v60;
  v61 = sub_100006A6C(&qword_1001A5430);
  Optional.unwrap(_:file:line:)(&v116, sub_1000461FC, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1296, v61);
  swift_bridgeObjectRelease(v60);
  v63 = v116;
  v62 = v117;
  v64 = v112 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager;
  v65 = swift_beginAccess(v112 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager, &v116, 0, 0);
  v66 = *(_QWORD *)(v64 + 8);
  if (!*(_QWORD *)(v66 + 16))
  {
LABEL_47:
    v96[0] = v10;
    v96[1] = v6;
    static String.Encoding.utf8.getter(v65);
    v75 = String.data(using:allowLossyConversion:)(v5, 0, v63, v62);
    v77 = v76;
    swift_bridgeObjectRelease(v62);
    (*(void (**)(char *, id))(v97 + 8))(v5, v103);
    v115[0] = v75;
    v115[1] = v77;
    Optional.unwrap(_:file:line:)(&v113, sub_100046214, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1300, v45);
    sub_100023F48(v75, v77);
    v80 = v113;
    v79 = v114;
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v81 = type metadata accessor for Logger(0, v78);
    sub_10000E8E8(v81, (uint64_t)qword_1001A7A60);
    v82 = v79 >> 62;
    sub_100006B94(v80, v79);
    v83 = sub_100006B94(v80, v79);
    v84 = Logger.logObject.getter(v83);
    v86 = static os_log_type_t.default.getter(v84, v85);
    if (os_log_type_enabled(v84, v86))
    {
      v97 = v79 >> 62;
      v103 = v19;
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v82 = swift_slowAlloc(32, -1);
      v115[0] = v82;
      *(_DWORD *)v87 = 136315138;
      v88 = v79;
      isa = Data._bridgeToObjectiveC()().super.isa;
      v90 = (id)SFHexStringForData();

      if (v90)
      {
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v93 = v92;

      }
      else
      {
        v113 = 0;
        v114 = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease(v114);
        v91 = 0xD000000000000015;
        v93 = 0x8000000100136820;
      }
      v113 = sub_10001EFA4(v91, v93, v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease(v93);
      sub_100007348(v80, v88);
      sub_100007348(v80, v88);
      _os_log_impl((void *)&_mh_execute_header, v84, v86, "writingAppleID: %s", v87, 0xCu);
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v87, -1, -1);

      LODWORD(v82) = v97;
    }
    else
    {
      sub_100007348(v80, v79);
      sub_100007348(v80, v79);

    }
    __asm { BR              X10 }
  }
  v67 = v19;
  v68 = v10;
  swift_bridgeObjectRetain(*(_QWORD *)(v64 + 8));
  v69 = v111;
  sub_100005E08((uint64_t)v69);
  if ((v70 & 1) == 0)
  {
    swift_bridgeObjectRelease(v66);

    v10 = v68;
    v19 = v67;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v66);

  v71 = v100;
  v72 = (uint64_t)v99;
  v73 = v102;
  v74 = v101;
  swift_beginAccess(v6, &v113, 33, 0);
  v72 |= 0x8000000000000000;
  sub_1000D0A84(0xD00000000000001BLL, v72);
  v95 = v94;
  swift_endAccess(&v113);
  swift_bridgeObjectRelease(v95);
  sub_100021360(1317, 0xD000000000000070, v98 | 0x8000000000000000, v71, 0xD00000000000001BLL, v72, 0, 0xE000000000000000);
  sub_100007348(v73, v74);
  sub_100007348(v107, v106);
  sub_100007348(v105, v104);

}

void sub_1000C3030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  char v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  void *v43;
  uint64_t v44[3];
  _BYTE v45[24];
  id v46;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v2, v45, 33, 0);
  v40 = v2;
  sub_1000C967C(v44, 0xD000000000000014, 0x8000000100138840);
  v3 = v44[1];
  swift_endAccess(v45);
  swift_bridgeObjectRelease(v3);
  v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1322, 0xD000000000000070, 0x800000010013D7C0, v39, 0xD000000000000014, 0x8000000100138840, 0, 0xE000000000000000);
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v45, 0, 0);
  v5 = *v4;
  if (*(_QWORD *)(*v4 + 16))
  {
    swift_bridgeObjectRetain(*v4);
    v6 = sub_100005E38(10);
    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v6);
      v9 = v8;
    }
    else
    {
      v8 = 0;
    }
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = 0;
  }
  v41 = v8;
  v10 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
  Optional.unwrap(_:file:line:)(v44, sub_100046A00, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1324, v10);

  v11 = (void *)v44[0];
  v12 = v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager, v44, 0, 0);
  v13 = *(_QWORD *)(v12 + 8);
  if (!*(_QWORD *)(v13 + 16)
    || (swift_bridgeObjectRetain(*(_QWORD *)(v12 + 8)),
        v14 = v11,
        sub_100005E08((uint64_t)v14),
        v16 = v15,
        swift_bridgeObjectRelease(v13),
        v14,
        (v16 & 1) == 0))
  {
    v41 = *(id *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_session);
    v17 = v41;
    v18 = sub_100006A6C(&qword_1001A4A38);
    Optional.unwrap(_:file:line:)(&v46, sub_10002F048, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1328, v18);

    v19 = v46;
    v20 = objc_msgSend(v46, "baaLeaftCert");

    if (v20)
    {
      v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

    }
    else
    {
      v21 = 0;
      v23 = 0xF000000000000000;
    }
    v24 = sub_100006A6C(&qword_1001A5438);
    Optional.unwrap(_:file:line:)(&v41, sub_100046A1C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1328, v24);
    sub_100023F48(v21, v23);
    __asm { BR              X11 }
  }
  v25 = *(_QWORD *)(v12 + 8);
  if (*(_QWORD *)(v25 + 16))
  {
    v26 = v11;
    swift_bridgeObjectRetain(v25);
    v27 = sub_100005E08((uint64_t)v26);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(v25 + 56) + 24 * v27;
      v30 = *(id *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      sub_100006B68(*(id *)v29, v31, (void *)v32);

      goto LABEL_19;
    }

  }
  else
  {
    swift_bridgeObjectRetain(v25);
  }
  v30 = 0;
  v31 = 0;
  v32 = 1;
LABEL_19:
  v33 = sub_100006A6C((uint64_t *)&unk_1001A7C60);
  Optional.unwrap(_:file:line:)(&v41, sub_10001A7B4, 0, "SharingViewService/SDCommonSwifty.swift", 39, 2, 298, v33);
  sub_100055998((uint64_t)v30, v31, (void *)v32);
  v34 = v43;
  sub_100024034((uint64_t)v41, v42, v43);
  swift_bridgeObjectRelease(v25);
  if (v34)
  {
    v35 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v35, 0, 0);
    *v36 = 1;
    swift_willThrow();
  }
  else
  {
    swift_beginAccess(v40, &v41, 33, 0);
    sub_1000D0A84(0xD000000000000014, 0x8000000100138840);
    v38 = v37;
    swift_endAccess(&v41);
    swift_bridgeObjectRelease(v38);
    sub_100021360(1341, 0xD000000000000070, 0x800000010013D7C0, v39, 0xD000000000000014, 0x8000000100138840, 0, 0xE000000000000000);
  }

}

void sub_1000C3800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  id v61;
  id v62;
  char v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  id v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  id v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  id v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  double v104;
  unint64_t v105;
  void *v106;
  uint64_t v107[3];
  _BYTE v108[32];
  id v109;

  v1 = v0;
  v2 = type metadata accessor for Calendar(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v96 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v99 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v98 = (char *)&v91 - v9;
  v10 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v108, 33, 0);
  v93 = (unint64_t)"Expect discovered c3 char";
  sub_1000C967C(v107, 0xD000000000000014, 0x80000001001387E0);
  v11 = v107[1];
  swift_endAccess(v108);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  v92 = (unint64_t)"inViewController.swift";
  v94 = v12;
  sub_100021338(1359, 0xD000000000000070, 0x800000010013D7C0, v12, 0xD000000000000014, 0x80000001001387E0, 0, 0xE000000000000000);
  v101 = v1;
  v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v108, 0, 0);
  v14 = *v13;
  v15 = *(_QWORD *)(v14 + 16);
  v95 = v10;
  v97 = v6;
  if (v15)
  {
    swift_bridgeObjectRetain(v14);
    v16 = sub_100005E38(14);
    if ((v17 & 1) != 0)
    {
      v18 = *(void **)(*(_QWORD *)(v14 + 56) + 8 * v16);
      v19 = v18;
    }
    else
    {
      v18 = 0;
    }
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v18 = 0;
  }
  v104 = *(double *)&v18;
  v20 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
  Optional.unwrap(_:file:line:)(v107, sub_100047340, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1361, v20);

  v109 = (id)v107[0];
  v21 = v101 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager;
  v22 = swift_beginAccess(v101 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager, v107, 0, 0);
  v23 = *(_QWORD *)(v21 + 8);
  if (!*(_QWORD *)(v23 + 16)
    || (swift_bridgeObjectRetain(*(_QWORD *)(v21 + 8)),
        v24 = v109,
        sub_100005E08((uint64_t)v24),
        v26 = v25,
        swift_bridgeObjectRelease(v23),
        v24,
        (v26 & 1) == 0))
  {
    v27 = v98;
    v28 = Date.init()(v22);
    static Calendar.current.getter(v28);
    Calendar.startOfDay(for:)(v27);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v30 = Date.timeIntervalSinceReferenceDate.getter(v29);
    v33 = Date.timeIntervalSinceReferenceDate.getter(v31);
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v34 = v30 - v33;
    v35 = type metadata accessor for Logger(0, v32);
    v36 = sub_10000E8E8(v35, (uint64_t)qword_1001A7A60);
    v37 = Logger.logObject.getter(v36);
    v39 = static os_log_type_t.default.getter(v37, v38);
    if (os_log_type_enabled(v37, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v40 = 134217984;
      v104 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v40 + 4, v40 + 12);
      _os_log_impl((void *)&_mh_execute_header, v37, v39, "timeSinceMidnight: %f", v40, 0xCu);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = v34 * (double)MillisecondsPerSecond.getter();
    if ((~*(_QWORD *)&v41 & 0x7FF0000000000000) != 0)
    {
      if (v41 > -9.22337204e18)
      {
        if (v41 < 9.22337204e18)
        {
          v42 = (uint64_t)v41;
          v43 = (unint64_t)(uint64_t)v41 >> 32;
          v44 = v43 == 0;
          v45 = v43 != 0;
          if (!v44)
            LODWORD(v42) = 0;
          LODWORD(v104) = v42;
          BYTE4(v104) = v45;
          v46 = sub_100006A6C((uint64_t *)&unk_1001A5480);
          Optional.unwrap(_:file:line:)(&v102, sub_10004735C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1370, v46);
          v49 = sub_1000AC3AC(v102, 4uLL, v47, v48);
          v50 = swift_bridgeObjectRetain_n(v49, 2);
          v51 = Logger.logObject.getter(v50);
          v53 = static os_log_type_t.default.getter(v51, v52);
          if (os_log_type_enabled(v51, v53))
          {
            v54 = (uint8_t *)swift_slowAlloc(12, -1);
            v55 = swift_slowAlloc(32, -1);
            v104 = *(double *)&v55;
            *(_DWORD *)v54 = 136315138;
            v91 = v54 + 4;
            v56 = swift_bridgeObjectRetain(v49);
            v57 = Array.description.getter(v56, &type metadata for UInt8);
            v59 = v58;
            swift_bridgeObjectRelease(v49);
            v102 = sub_10001EFA4(v57, v59, (uint64_t *)&v104);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v91, v54 + 12);
            swift_bridgeObjectRelease_n(v49, 2);
            swift_bridgeObjectRelease(v59);
            _os_log_impl((void *)&_mh_execute_header, v51, v53, "reftime payload: %s", v54, 0xCu);
            swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v55, -1, -1);
            swift_slowDealloc(v54, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v49, 2);
          }
          if (v49[2] == 4)
          {
            v60 = *(void **)(v101 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
            if (v60)
            {
              swift_beginAccess(v21, &v104, 33, 0);
              if (*(_QWORD *)(*(_QWORD *)(v21 + 8) + 16))
              {
                v61 = v109;
                v62 = v60;
                sub_100005E08((uint64_t)v61);
                if ((v63 & 1) != 0)
                {
LABEL_28:
                  swift_bridgeObjectRelease(v49);

                  swift_endAccess(&v104);
                  v73 = v97;
                  v74 = *(void (**)(char *, uint64_t))(v96 + 8);
                  v74(v99, v97);
                  v74(v98, v73);
                  goto LABEL_29;
                }

              }
              else
              {
                v64 = v60;
              }
              v65 = swift_bridgeObjectRetain(v49);
              v66 = sub_1000D2E08(v65);
              v68 = v67;
              swift_bridgeObjectRelease(v49);
              v69 = v109;
              v70 = v60;
              sub_100006B94(v66, v68);
              v62 = v70;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v21 + 8));
              v102 = *(_QWORD *)(v21 + 8);
              *(_QWORD *)(v21 + 8) = 0x8000000000000000;
              sub_1000CF3F8(v66, v68, (uint64_t)v60, v69, isUniquelyReferenced_nonNull_native);
              v72 = *(_QWORD *)(v21 + 8);
              *(_QWORD *)(v21 + 8) = v102;

              swift_bridgeObjectRelease(v72);
              sub_10001A55C(v69);
              sub_100007348(v66, v68);
              v61 = v62;
              goto LABEL_28;
            }
LABEL_43:
            __break(1u);
            return;
          }
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_29:
  v75 = *(_QWORD *)(v21 + 8);
  if (!*(_QWORD *)(v75 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v21 + 8));
LABEL_34:
    v80 = 0;
    v81 = 0;
    v82 = 1;
    goto LABEL_35;
  }
  v76 = v109;
  swift_bridgeObjectRetain(v75);
  v77 = sub_100005E08((uint64_t)v76);
  if ((v78 & 1) == 0)
  {

    goto LABEL_34;
  }
  v79 = *(_QWORD *)(v75 + 56) + 24 * v77;
  v80 = *(id *)v79;
  v81 = *(_QWORD *)(v79 + 8);
  v82 = *(_QWORD *)(v79 + 16);
  sub_100006B68(*(id *)v79, v81, (void *)v82);

LABEL_35:
  v102 = (uint64_t)v80;
  v103[0] = v81;
  v103[1] = v82;
  v83 = sub_100006A6C((uint64_t *)&unk_1001A7C60);
  Optional.unwrap(_:file:line:)(&v104, sub_10001A7B4, 0, "SharingViewService/SDCommonSwifty.swift", 39, 2, 298, v83);
  sub_100055998((uint64_t)v80, v81, (void *)v82);
  v84 = v106;
  sub_100024034(*(uint64_t *)&v104, v105, v106);
  swift_bridgeObjectRelease(v75);
  if (v84)
  {
    v85 = sub_100055824();
    v86 = swift_allocError(&type metadata for SDRunState, v85, 0, 0);
    *v87 = 1;
    v100 = v86;
    swift_willThrow();
  }
  else
  {
    swift_beginAccess(v95, &v104, 33, 0);
    v88 = v93 | 0x8000000000000000;
    sub_1000D0A84(0xD000000000000014, v93 | 0x8000000000000000);
    v90 = v89;
    swift_endAccess(&v104);
    swift_bridgeObjectRelease(v90);
    sub_100021360(1379, 0xD000000000000070, v92 | 0x8000000000000000, v94, 0xD000000000000014, v88, 0, 0xE000000000000000);
  }

}

void *sub_1000C40E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  id v14;
  unint64_t v15;
  _BYTE *v16;
  void *result;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30[3];
  _BYTE v31[24];
  void *v32;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v31, 33, 0);
  sub_1000C967C(v30, 0xD00000000000001DLL, 0x8000000100138780);
  v3 = v30[1];
  swift_endAccess(v31);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1384, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD00000000000001DLL, 0x8000000100138780, 0, 0xE000000000000000);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues, v31, 0, 0);
  v6 = *v5;
  if (!*(_QWORD *)(v6 + 16)
    || (swift_bridgeObjectRetain(v6), sub_100005E38(13), v8 = v7, swift_bridgeObjectRelease(v6), (v8 & 1) == 0))
  {
    v15 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v15, 0, 0);
    *v16 = 1;
    return (void *)swift_willThrow();
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentSecondReadRequest) & 1) != 0)
    goto LABEL_20;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_sentSecondReadRequest) = 1;
  v9 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, v30, 0, 0);
  v10 = *v9;
  if (*(_QWORD *)(*v9 + 16))
  {
    swift_bridgeObjectRetain(*v9);
    v11 = sub_100005E38(11);
    if ((v12 & 1) != 0)
    {
      v13 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v11);
      v14 = v13;
    }
    else
    {
      v13 = 0;
    }
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v13 = 0;
  }
  v32 = v13;
  v28 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
  Optional.unwrap(_:file:line:)(v29, sub_1000476F0, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1389, v28);

  v18 = *v9;
  if (*(_QWORD *)(*v9 + 16))
  {
    v19 = (void *)v29[0];
    swift_bridgeObjectRetain(v18);
    v20 = sub_100005E38(12);
    if ((v21 & 1) != 0)
    {
      v22 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v20);
      v23 = v22;
    }
    else
    {
      v22 = 0;
    }
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v19 = (void *)v29[0];
    v22 = 0;
  }
  v32 = v22;
  Optional.unwrap(_:file:line:)(v29, sub_10004770C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1390, v28);

  v24 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph;
  result = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
  if (result)
  {
    v25 = (void *)v29[0];
    objc_msgSend(result, "readValueForCharacteristic:", v19);
    result = *(void **)(v1 + v24);
    if (result)
    {
      objc_msgSend(result, "readValueForCharacteristic:", v25);

LABEL_20:
      swift_beginAccess(v2, v29, 33, 0);
      sub_1000D0A84(0xD00000000000001DLL, 0x8000000100138780);
      v27 = v26;
      swift_endAccess(v29);
      swift_bridgeObjectRelease(v27);
      return (void *)sub_100021360(1395, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD00000000000001DLL, 0x8000000100138780, 0, 0xE000000000000000);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C4460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17[3];
  _BYTE v18[24];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, v18, 33, 0);
  sub_1000C967C(v17, 0xD000000000000016, 0x8000000100138760);
  v3 = v17[1];
  swift_endAccess(v18);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1400, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000016, 0x8000000100138760, 0, 0xE000000000000000);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues);
  swift_beginAccess(v5, v18, 0, 0);
  v6 = *v5;
  if (!*(_QWORD *)(*v5 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain(*v5);
  sub_100005E38(11);
  v8 = v7;
  swift_bridgeObjectRelease(v6);
  if ((v8 & 1) == 0)
    goto LABEL_6;
  v9 = *v5;
  if (*(_QWORD *)(*v5 + 16)
    && (swift_bridgeObjectRetain(*v5), sub_100005E38(12), v11 = v10, swift_bridgeObjectRelease(v9), (v11 & 1) != 0))
  {
    swift_beginAccess(v2, v17, 33, 0);
    sub_1000D0A84(0xD000000000000016, 0x8000000100138760);
    v13 = v12;
    swift_endAccess(v17);
    swift_bridgeObjectRelease(v13);
    return sub_100021360(1405, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000016, 0x8000000100138760, 0, 0xE000000000000000);
  }
  else
  {
LABEL_6:
    v15 = sub_100055824();
    swift_allocError(&type metadata for SDRunState, v15, 0, 0);
    *v16 = 1;
    return swift_willThrow();
  }
}

void sub_1000C4664(char a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  id v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v2 = v1;
  v66 = 0x3A73736563637573;
  v67 = 0xE900000000000020;
  v4 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (v4)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v9 = v66;
  v8 = v67;
  v10 = v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations, &v66, 33, 0);
  v68 = (unint64_t)"ensureCleanedUp(success:)";
  sub_1000C967C((uint64_t *)&v63, 0xD00000000000001ELL, 0x8000000100138D60);
  v11 = v64;
  swift_endAccess(&v66);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  swift_bridgeObjectRetain(v8);
  sub_100021338(1410, 0xD000000000000070, 0x800000010013D7C0, v12, 0xD00000000000001ELL, 0x8000000100138D60, v9, v8);
  swift_bridgeObjectRelease_n(v8, 2);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState + 8) == 1
    && *(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState) == 4)
  {
    v60 = v12;
    v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
    swift_beginAccess(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars, &v66, 0, 0);
    v15 = *v14;
    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain(v15);
      v16 = sub_100005E38(15);
      if ((v17 & 1) != 0)
      {
        v18 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v16);
        v19 = v18;
      }
      else
      {
        v18 = 0;
      }
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v18 = 0;
    }
    v26 = sub_100006A6C((uint64_t *)&unk_1001A7C50);
    Optional.unwrap(_:file:line:)(&v63, sub_100047F0C, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 1419, v26);

    v27 = *(void **)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_periph);
    if (!v27)
    {
      __break(1u);
      return;
    }
    v28 = v63;
    v29 = v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager;
    swift_beginAccess(v29, &v63, 33, 0);
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 16);
    v31 = v27;
    v61 = v28;
    if (v30)
    {
      v32 = v28;
      sub_100005E08((uint64_t)v32);
      if ((v33 & 1) != 0)
        goto LABEL_25;

      v28 = v61;
    }
    v34 = sub_100006A6C(&qword_1001A4350);
    v35 = swift_allocObject(v34, 33, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100131C40;
    *(_BYTE *)(v35 + 32) = a1 & 1;
    v36 = sub_1000D2E08(v35);
    v37 = v28;
    v39 = v38;
    swift_bridgeObjectRelease(v35);
    v40 = v31;
    v41 = v37;
    sub_100006B94(v36, v39);
    v31 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v29 + 8));
    v62 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0x8000000000000000;
    sub_1000CF3F8(v36, v39, (uint64_t)v27, v41, isUniquelyReferenced_nonNull_native);
    v43 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v29 + 8) = v62;

    swift_bridgeObjectRelease(v43);
    sub_10001A55C(v41);
    sub_100007348(v36, v39);
    v32 = v31;
LABEL_25:

    swift_endAccess(&v63);
    v44 = *(_QWORD *)(v29 + 8);
    if (*(_QWORD *)(v44 + 16))
    {
      v45 = v61;
      swift_bridgeObjectRetain(v44);
      v46 = sub_100005E08((uint64_t)v45);
      if ((v47 & 1) != 0)
      {
        v48 = *(_QWORD *)(v44 + 56) + 24 * v46;
        v49 = *(id *)v48;
        v50 = *(_QWORD *)(v48 + 8);
        v51 = *(_QWORD *)(v48 + 16);
        sub_100006B68(*(id *)v48, v50, (void *)v51);

LABEL_31:
        v52 = sub_100006A6C((uint64_t *)&unk_1001A7C60);
        Optional.unwrap(_:file:line:)(&v63, sub_10001A7B4, 0, "SharingViewService/SDCommonSwifty.swift", 39, 2, 298, v52);
        sub_100055998((uint64_t)v49, v50, (void *)v51);
        v53 = v65;
        sub_100024034((uint64_t)v63, v64, v65);
        swift_bridgeObjectRelease(v44);
        if (v53)
        {
          v54 = sub_100055824();
          v55 = swift_allocError(&type metadata for SDRunState, v54, 0, 0);
          *v56 = 1;
          swift_willThrow(v55);
        }
        else
        {
          swift_beginAccess(v10, &v63, 33, 0);
          v57 = v68 | 0x8000000000000000;
          sub_1000D0A84(0xD00000000000001ELL, v68 | 0x8000000000000000);
          v59 = v58;
          swift_endAccess(&v63);
          swift_bridgeObjectRelease(v59);
          sub_100021360(1425, 0xD000000000000070, 0x800000010013D7C0, v60, 0xD00000000000001ELL, v57, 0, 0xE000000000000000);
        }

        return;
      }

    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v29 + 8));
    }
    v49 = 0;
    v50 = 0;
    v51 = 1;
    goto LABEL_31;
  }
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v20 = type metadata accessor for Logger(0, v13);
  v21 = sub_10000E8E8(v20, (uint64_t)qword_1001A7A60);
  v22 = Logger.logObject.getter(v21);
  v24 = static os_log_type_t.default.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "Never paired. Skip receipt write.", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

void sub_1000C4C44(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1000C4C5C(a1, a2, a3, a4, "%s - started... %s");
}

void sub_1000C4C50(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1000C4C5C(a1, a2, a3, a4, "%s - done. %s");
}

void sub_1000C4C5C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v10 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v10, (uint64_t)qword_1001A7A60);
  swift_bridgeObjectRetain_n(a2, 2);
  v11 = swift_bridgeObjectRetain_n(a4, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v17 = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(a2);
    v16 = sub_10001EFA4(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v16 = sub_10001EFA4(a3, a4, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, a5, (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
}

void sub_1000C4E64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  _QWORD v13[3];
  _BYTE v14[8];
  uint64_t v15;

  if (a1)
  {
    ((void (*)(void))swift_errorRetain)();
    if (qword_1001A3120 != -1)
      swift_once(&qword_1001A3120, sub_1000AEA64);
    v3 = type metadata accessor for Logger(0, v2);
    sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
    swift_errorRetain(a1);
    v4 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v15 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_getErrorValue(a1, v14, v13);
      v8 = Error.localizedDescription.getter(v13[1], v13[2]);
      v10 = v9;
      v12 = sub_10001EFA4(v8, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Error in invalidatePairing: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

id sub_1000C5054(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  id v14;
  id v15;
  char *v16;
  void *v17;
  char *v18;
  id result;
  uint64_t v20;

  v3 = v2;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "showDone", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_doneVC;
  v10 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_doneVC];
  v11 = v10;
  v12 = v10;
  if (!v10)
  {
    v13 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_mapViewController];
    v14 = objc_allocWithZone((Class)type metadata accessor for AirTagDoneViewController());
    v15 = v13;
    v16 = v3;
    v12 = (char *)objc_msgSend(v14, "init");
    swift_unknownObjectWeakAssign(&v12[OBJC_IVAR____TtC18SharingViewService24AirTagDoneViewController_mainController], v16);

    v17 = *(void **)&v12[OBJC_IVAR____TtC18SharingViewService24AirTagDoneViewController_mapViewController];
    *(_QWORD *)&v12[OBJC_IVAR____TtC18SharingViewService24AirTagDoneViewController_mapViewController] = v13;

    v11 = *(void **)&v3[v9];
  }
  *(_QWORD *)&v3[v9] = v12;
  v18 = v10;

  result = *(id *)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
  if (result)
  {
    v20 = *(_QWORD *)&v3[v9];
    if (v20)
      return objc_msgSend(result, "pushViewController:animated:", v20, 1);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C51F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_inFlightOperations;
  swift_beginAccess(v2, v11, 33, 0);
  sub_1000C967C(v12, 0xD000000000000016, 0x8000000100138D20);
  v3 = v12[1];
  swift_endAccess(v11);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_om);
  sub_100021338(1505, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000016, 0x8000000100138D20, 0, 0xE000000000000000);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsMulti) & 1) != 0)
  {
    v5 = sub_100055824();
    v6 = swift_allocError(&type metadata for SDRunState, v5, 0, 0);
    *v7 = 1;
    return swift_willThrow(v6);
  }
  else
  {
    swift_beginAccess(v2, v11, 33, 0);
    sub_1000D0A84(0xD000000000000016, 0x8000000100138D20);
    v10 = v9;
    swift_endAccess(v11);
    swift_bridgeObjectRelease(v10);
    return sub_100021360(1507, 0xD000000000000070, 0x800000010013D7C0, v4, 0xD000000000000016, 0x8000000100138D20, 0, 0xE000000000000000);
  }
}

void sub_1000C5380(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  id v14;
  char *v15;
  char *v16;
  void *v17;
  id v18;
  NSString v19;
  NSString v20;
  NSString v21;
  NSString v22;
  id v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;

  v3 = v2;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "pairLocked", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairLockedVC;
  v11 = *(char **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairLockedVC];
  v12 = v11;
  v13 = v11;
  if (!v11)
  {
    v14 = objc_allocWithZone((Class)type metadata accessor for AirTagPairLockedViewController());
    v15 = v3;
    v13 = (char *)objc_msgSend(v14, "init");
    swift_unknownObjectWeakAssign(&v13[OBJC_IVAR____TtC18SharingViewService30AirTagPairLockedViewController_mainController], v15);

    v12 = *(void **)&v3[v10];
  }
  *(_QWORD *)&v3[v10] = v13;
  v16 = v11;

  v17 = *(void **)&v3[v10];
  if (!v17)
  {
    __break(1u);
    goto LABEL_12;
  }
  v18 = v17;
  sub_1000649C4(&v26);
  v19 = String._bridgeToObjectiveC()();
  v20 = String._bridgeToObjectiveC()();
  v21 = String._bridgeToObjectiveC()();
  v22 = String._bridgeToObjectiveC()();
  sub_1000A2CF4(&v26);
  v23 = objc_msgSend(v18, "dismissalConfirmationActionWithTitle:message:confirmButtonTitle:cancelButtonTitle:", v19, v20, v21, v22);

  objc_msgSend(v18, "setDismissButtonAction:", v23);
  v24 = *(void **)&v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_vcNav];
  if (!v24)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v25 = *(_QWORD *)&v3[v10];
  if (v25)
  {
    objc_msgSend(v24, "pushViewController:animated:", v25, 1);
    v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_shownError] = 1;
    sub_1000AFEC0(0);
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1000C55D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v2 = type metadata accessor for Logger(0, a2);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7A60);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Connection Timed Out", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = sub_100117218(v8, v9, v10);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  sub_1000C06B8(v12, v14, 0, 0, 0);
  return swift_bridgeObjectRelease(v14);
}

void sub_1000C576C(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
  v4 = a1;
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v10 = objc_msgSend(v4, "state");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);

    _os_log_impl((void *)&_mh_execute_header, v5, v7, "centralManagerDidUpdateState: %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  sub_1000AF594(v9);
}

void sub_1000C5B70(void *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *object;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54[8];
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v3 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredMainService;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredMainService))
    return;
  v5 = a1;
  v6 = objc_msgSend(a1, "services");
  if (!v6)
    return;
  v7 = v6;
  v8 = sub_100013194(0, &qword_1001A5558, CBService_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v10)
      goto LABEL_5;
LABEL_32:
    swift_bridgeObjectRelease_n(v9, 2);
    return;
  }
LABEL_28:
  if (v9 < 0)
    v45 = v9;
  else
    v45 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v45);
  if (!v10)
    goto LABEL_32;
LABEL_5:
  v50 = v5;
  v52 = a2;
  v47 = v8;
  v48 = v3;
  v49 = v2;
  v2 = sub_100013194(0, (unint64_t *)&qword_1001A7260, NSObject_ptr);
  v3 = v9 & 0xC000000000000001;
  v8 = 4;
  while (1)
  {
    v5 = (void *)(v8 - 4);
    if (v3)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v9);
    else
      v11 = *(id *)(v9 + 8 * v8);
    v12 = v11;
    a2 = v8 - 3;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v13 = objc_msgSend(v11, "UUID");
    if (qword_1001A2E50 != -1)
      swift_once(&qword_1001A2E50, sub_1000077A8);
    v14 = static NSObject.== infix(_:_:)(v13, qword_1001AD3A8);

    if ((v14 & 1) != 0)
      break;

    ++v8;
    if (a2 == v10)
      goto LABEL_32;
  }
  swift_bridgeObjectRelease_n(v9, 2);
  v15 = qword_1001A3120;
  v17 = v12;
  if (v15 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v18 = type metadata accessor for Logger(0, v16);
  sub_10000E8E8(v18, (uint64_t)qword_1001A7A60);
  v19 = v50;
  swift_errorRetain(v52);
  v20 = v19;
  v21 = swift_errorRetain(v52);
  v22 = Logger.logObject.getter(v21);
  v24 = static os_log_type_t.default.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    v51 = v17;
    v25 = swift_slowAlloc(22, -1);
    v46 = swift_slowAlloc(64, -1);
    v57 = v46;
    *(_DWORD *)v25 = 136315394;
    v26 = objc_msgSend(v20, "services");
    if (v26)
    {
      v27 = v26;
      v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v47);

      v29 = swift_bridgeObjectRetain(v28);
      v30 = Array.description.getter(v29, v47);
      v32 = v31;
      swift_bridgeObjectRelease_n(v28, 2);
    }
    else
    {
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(0xE000000000000000);
      v56 = 0xE90000000000003CLL;
      v35 = sub_100006A6C(&qword_1001A5560);
      v36._countAndFlagsBits = _typeName(_:qualified:)(v35, 0);
      object = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(object);
      v38._countAndFlagsBits = 0x656E6F6E2E3ELL;
      v38._object = (void *)0xE600000000000000;
      String.append(_:)(v38);
      v30 = 0x6C616E6F6974704FLL;
      v32 = 0xE90000000000003CLL;
    }
    v55 = sub_10001EFA4(v30, v32, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v25 + 4, v25 + 12);

    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v25 + 12) = 2080;
    if (v52)
    {
      swift_getErrorValue(v52, v54, v53);
      v39 = Error.localizedDescription.getter(v53[1], v53[2]);
      v41 = v40;
    }
    else
    {
      v55 = 0;
      v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v56);
      v41 = 0x8000000100136820;
      v39 = 0xD000000000000015;
    }
    v34 = v48;
    v33 = v49;
    v17 = v51;
    v55 = sub_10001EFA4(v39, v41, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease(v41);
    swift_errorRelease(v52);
    swift_errorRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "didDiscoverServices: %s, error? %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_errorRelease(v52);
    swift_errorRelease(v52);

    v34 = v48;
    v33 = v49;
  }
  v42 = *(void **)(v33 + v34);
  *(_QWORD *)(v33 + v34) = v17;
  v43 = v17;

  sub_1000AF594(v44);
}

void sub_1000C61D0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  v3 = v2;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v6 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.default.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "B389 Setup was dismissed", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  if ((*((_BYTE *)v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_dismissed) & 1) == 0)
    objc_msgSend(v3, "dismiss:", 0);
}

uint64_t storeEnumTagSinglePayload for AirTagSetupMainViewController.FindMyFinalizationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000C6350 + 4 * byte_100134FE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C6384 + 4 * asc_100134FE0[v4]))();
}

uint64_t sub_1000C6384(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C638C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6394);
  return result;
}

uint64_t sub_1000C63A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C63A8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000C63AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C63B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagSetupMainViewController.FindMyFinalizationState()
{
  return &type metadata for AirTagSetupMainViewController.FindMyFinalizationState;
}

ValueMetadata *type metadata accessor for AirTagSetupMainViewController.PairingState()
{
  return &type metadata for AirTagSetupMainViewController.PairingState;
}

unint64_t sub_1000C63E4()
{
  unint64_t result;

  result = qword_1001A7C20;
  if (!qword_1001A7C20)
  {
    result = swift_getWitnessTable(&unk_100135220, &type metadata for AirTagSetupMainViewController.FindMyFinalizationState);
    atomic_store(result, (unint64_t *)&qword_1001A7C20);
  }
  return result;
}

void sub_1000C6428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t Strong;
  void *v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72[24];
  char v73[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v63 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v62 = (char *)&v60 - v8;
  v68 = sub_100006A6C(&qword_1001A5550);
  __chkstk_darwin(v68);
  v69 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for B389PresentationConfig.Mode(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v60 - v14;
  v16 = sub_100006A6C(&qword_1001A5428);
  __chkstk_darwin(v16);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100006A6C(&qword_1001A42A0);
  v20 = __chkstk_darwin(v19);
  v65 = (uint64_t)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v60 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v60 - v25;
  a2 += 16;
  swift_beginAccess(a2, v73, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v28 = (void *)Strong;
    v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v66 = a1;
    v61 = v29;
    v29(v26, a1, v4);
    v64 = v5;
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v30(v26, 0, 1, v4);
    v67 = v28;
    v31 = (uint64_t)v28 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
    swift_beginAccess(v31, v72, 0, 0);
    sub_100006BD8(v31, (uint64_t)v18, &qword_1001A5428);
    v32 = type metadata accessor for B389PresentationConfig(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v18, 1, v32) == 1)
    {
      __break(1u);
      return;
    }
    sub_100023F5C((uint64_t)v18, (uint64_t)v15, type metadata accessor for B389PresentationConfig.Mode);
    sub_100023F5C((uint64_t)v15, (uint64_t)v13, type metadata accessor for B389PresentationConfig.Mode);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v10);
    v34 = (uint64_t)v69;
    if (EnumCaseMultiPayload == 1)
    {
      v35 = v64;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v24, v13, v4);
      v30(v24, 0, 1, v4);
    }
    else
    {
      v30(v24, 1, 1, v4);
      sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig.Mode);
      v35 = v64;
    }
    v36 = v66;
    v37 = v68;
    sub_100023FA0((uint64_t)v15, type metadata accessor for B389PresentationConfig.Mode);
    v38 = v34 + *(int *)(v37 + 48);
    sub_100006BD8((uint64_t)v26, v34, &qword_1001A42A0);
    sub_100006BD8((uint64_t)v24, v38, &qword_1001A42A0);
    v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    if (v39(v34, 1, v4) == 1)
    {
      sub_10000D858((uint64_t)v24, &qword_1001A42A0);
      sub_10000D858((uint64_t)v26, &qword_1001A42A0);
      if (v39(v38, 1, v4) == 1)
      {
        sub_10000D858(v34, &qword_1001A42A0);
        sub_100023FA0((uint64_t)v18, type metadata accessor for B389PresentationConfig);
LABEL_13:
        if (qword_1001A3120 != -1)
          swift_once(&qword_1001A3120, sub_1000AEA64);
        v48 = type metadata accessor for Logger(0, v40);
        sub_10000E8E8(v48, (uint64_t)qword_1001A7A60);
        v49 = v63;
        v50 = v61(v63, v36, v4);
        v51 = Logger.logObject.getter(v50);
        v53 = static os_log_type_t.default.getter(v51, v52);
        if (os_log_type_enabled(v51, v53))
        {
          v54 = (uint8_t *)swift_slowAlloc(12, -1);
          v55 = swift_slowAlloc(32, -1);
          v71 = v55;
          *(_DWORD *)v54 = 136315138;
          v56 = sub_100005B80(&qword_1001A5450, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v57 = dispatch thunk of CustomStringConvertible.description.getter(v4, v56);
          v59 = v58;
          v70 = sub_10001EFA4(v57, v58, &v71);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v54 + 4, v54 + 12);
          swift_bridgeObjectRelease(v59);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v49, v4);
          _os_log_impl((void *)&_mh_execute_header, v51, v53, "Lost %s", v54, 0xCu);
          swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v55, -1, -1);
          swift_slowDealloc(v54, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v35 + 8))(v49, v4);
        }

        objc_msgSend(v67, "dismiss:", 7);
        goto LABEL_19;
      }
    }
    else
    {
      v41 = v65;
      sub_100006BD8(v34, v65, &qword_1001A42A0);
      if (v39(v38, 1, v4) != 1)
      {
        v42 = v41;
        v43 = v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v62, v38, v4);
        v44 = sub_100005B80((unint64_t *)&qword_1001A5530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v45 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v4, v44);
        v46 = *(void (**)(char *, uint64_t))(v35 + 8);
        v46(v43, v4);
        sub_10000D858((uint64_t)v24, &qword_1001A42A0);
        sub_10000D858((uint64_t)v26, &qword_1001A42A0);
        v47 = v42;
        v36 = v66;
        v46((char *)v47, v4);
        sub_10000D858(v34, &qword_1001A42A0);
        sub_100023FA0((uint64_t)v18, type metadata accessor for B389PresentationConfig);
        if ((v45 & 1) != 0)
          goto LABEL_13;
LABEL_19:

        return;
      }
      sub_10000D858((uint64_t)v24, &qword_1001A42A0);
      sub_10000D858((uint64_t)v26, &qword_1001A42A0);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v41, v4);
    }
    sub_10000D858(v34, &qword_1001A5550);
    sub_100023FA0((uint64_t)v18, type metadata accessor for B389PresentationConfig);
    goto LABEL_19;
  }
}

void sub_1000C6B08(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  void *v15;
  id v16;
  _QWORD v17[5];
  uint64_t v18;

  sub_1000897BC(0x6Cu);
  v4 = v3;
  sub_1000897BC(0x6Du);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v9 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v7, v8, 1);

  sub_1000897BC(0x6Eu);
  v11 = v10;
  v12 = swift_allocObject(&unk_10017CD70, 24, 7);
  *(_QWORD *)(v12 + 16) = v1;
  v13 = v1;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v17[4] = sub_1000D8EA4;
  v18 = v12;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10001B5D0;
  v17[3] = &unk_10017CD88;
  v15 = _Block_copy(v17);
  swift_release(v18);
  v16 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v14, 0, v15);
  _Block_release(v15);

  objc_msgSend(v9, "addAction:", v16);
  objc_msgSend(v9, "setPreferredAction:", v16);
  objc_msgSend(a1, "presentViewController:animated:completion:", v9, 1, 0);

}

uint64_t sub_1000C6CE8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  static DispatchTime.now()();
  + infix(_:_:)(v12, 1.0);
  v26 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26(v12, v8);
  v17 = swift_allocObject(&unk_10017CDC0, 24, 7);
  *(_QWORD *)(v17 + 16) = v0;
  aBlock[4] = sub_1000D8EB8;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001BB50;
  aBlock[3] = &unk_10017CDD8;
  v18 = _Block_copy(aBlock);
  v19 = v31;
  v20 = v1;
  v21 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_100005B80((unint64_t *)&qword_1001A38F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100006A6C((uint64_t *)&unk_1001A4330);
  v24 = sub_100024144((unint64_t *)&qword_1001A38F8, (uint64_t *)&unk_1001A4330, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  return ((uint64_t (*)(char *, uint64_t))v26)(v14, v8);
}

void sub_1000C6F88(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  NSObject *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void (*v59)(char *, char *, uint64_t);
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  id v76;
  id v77;
  NSObject *v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  _QWORD *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  uint64_t v96;
  os_log_type_t v97;
  uint8_t *v98;
  NSObject **v99;
  NSObject *v100;
  uint64_t v101;
  uint8_t *v102;
  NSObject *v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t, uint64_t);
  char *v122;
  id v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  _QWORD *p_isa;
  _BYTE v137[16];
  char v138[24];

  v131 = a1;
  v126 = type metadata accessor for B389PresentationConfig.Mode(0);
  v1 = __chkstk_darwin(v126);
  v124 = (char *)&v117 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v117 - v4;
  __chkstk_darwin(v3);
  v7 = (char *)&v117 - v6;
  v8 = sub_100006A6C(&qword_1001A5428);
  __chkstk_darwin(v8);
  v10 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006A6C(&qword_1001A42A0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v117 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v117 - v18;
  v20 = type metadata accessor for UUID(0);
  v128 = *(_QWORD *)(v20 - 8);
  v129 = v20;
  v21 = __chkstk_darwin(v20);
  v125 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v117 - v24;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v26 = type metadata accessor for Logger(0, v23);
  v130 = sub_10000E8E8(v26, (uint64_t)qword_1001A7A60);
  v27 = Logger.logObject.getter(v130);
  v29 = static os_log_type_t.default.getter(v27, v28);
  if (os_log_type_enabled(v27, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "Done waiting for multi scan", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  v32 = OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor;
  v33 = *(uint64_t *)((char *)&v131->isa
                   + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_bubbleMonitor);
  if (v33)
  {
    swift_beginAccess(v33 + 80, v138, 0, 0);
    v34 = *(_QWORD *)(v33 + 80);
    v127 = v33;
    swift_retain(v33);
    v35 = swift_bridgeObjectRetain(v34);
    p_isa = sub_10001F750(v35);
    sub_10001F5E4((uint64_t *)&p_isa);
    v36 = sub_10001ABA8((unint64_t)p_isa);
    swift_bridgeObjectRelease(v34);
    v37 = *(uint64_t *)((char *)&v131->isa + v32);
    if (v37)
    {
      swift_retain(*(Class *)((char *)&v131->isa + v32));
      sub_10001B934();
      swift_release(v37);
    }
    if ((unint64_t)v36 >> 62)
    {
      if (v36 < 0)
        v112 = v36;
      else
        v112 = v36 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v36);
      if (_CocoaArrayWrapper.endIndex.getter(v112))
      {
LABEL_10:
        if ((v36 & 0xC000000000000001) != 0)
        {
          v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v36);
        }
        else
        {
          if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
            __break(1u);
          v39 = *(id *)(v36 + 32);
        }
        v40 = v39;
        swift_bridgeObjectRelease(v36);
        v123 = v40;
        v41 = objc_msgSend(v40, "bleDevice");
        if (!v41)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v128 + 56))(v19, 1, 1, v129);
          goto LABEL_22;
        }
        v42 = v41;
        v122 = v25;
        v43 = objc_msgSend(v41, "identifier");

        if (v43)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

          v44 = v128;
          v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v128 + 56);
          v46 = v17;
          v47 = 0;
        }
        else
        {
          v44 = v128;
          v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v128 + 56);
          v46 = v17;
          v47 = 1;
        }
        v50 = v129;
        v121 = v45;
        v45(v46, v47, 1, v129);
        sub_10005B590((uint64_t)v17, (uint64_t)v19, &qword_1001A42A0);
        v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
        if (v51(v19, 1, v50) == 1)
        {
LABEL_22:
          swift_bridgeObjectRelease(v36);
          sub_10000D858((uint64_t)v19, &qword_1001A42A0);
          v52 = v123;
          v53 = Logger.logObject.getter(v52);
          v54 = static os_log_type_t.error.getter(v53);
          if (os_log_type_enabled(v53, v54))
          {
            v55 = swift_slowAlloc(22, -1);
            v56 = (_QWORD *)swift_slowAlloc(16, -1);
            *(_DWORD *)v55 = 138412546;
            v57 = -[NSObject bleDevice](v52, "bleDevice");
            v58 = v57;
            if (v57)
              p_isa = v57;
            else
              p_isa = 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v137, v55 + 4, v55 + 12);
            *v56 = v58;

            *(_WORD *)(v55 + 12) = 2112;
            p_isa = &v52->isa;
            v103 = v52;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v137, v55 + 14, v55 + 22);
            v56[1] = v52;

            _os_log_impl((void *)&_mh_execute_header, v53, v54, "No identifier for ble device %@ on %@", (uint8_t *)v55, 0x16u);
            v104 = sub_100006A6C(&qword_1001A5420);
            swift_arrayDestroy(v56, 2, v104);
            swift_slowDealloc(v56, -1, -1);
            swift_slowDealloc(v55, -1, -1);
          }
          else
          {

            v53 = v52;
          }

LABEL_54:
          *((_BYTE *)&v131->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsMulti) = 0;
          sub_1000AF594(v72);
          v111 = v127;
          goto LABEL_55;
        }
        v59 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
        v59(v122, v19, v50);
        v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)v131
                                                                     + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig);
        swift_beginAccess((char *)v131 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig, &p_isa, 0, 0);
        sub_100006BD8((uint64_t)v60, (uint64_t)v10, &qword_1001A5428);
        v61 = type metadata accessor for B389PresentationConfig(0);
        v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48);
        v120 = v61;
        v119 = v62;
        v63 = ((uint64_t (*)(char *, uint64_t))v62)(v10, 1);
        if ((_DWORD)v63 == 1)
        {
          __break(1u);
LABEL_59:
          __break(1u);
          swift_release(v63);
          __break(1u);
          return;
        }
        sub_100023F5C((uint64_t)v10, (uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
        sub_100023F5C((uint64_t)v7, (uint64_t)v5, type metadata accessor for B389PresentationConfig.Mode);
        if (swift_getEnumCaseMultiPayload(v5, v126) == 1)
        {
          v64 = v5;
          v65 = v129;
          v59(v14, v64, v129);
          v121(v14, 0, 1, v65);
        }
        else
        {
          v66 = v129;
          v121(v14, 1, 1, v129);
          v67 = (uint64_t)v5;
          v65 = v66;
          sub_100023FA0(v67, type metadata accessor for B389PresentationConfig.Mode);
        }
        sub_100023FA0((uint64_t)v7, type metadata accessor for B389PresentationConfig.Mode);
        if (v51(v14, 1, v65) == 1)
        {
          swift_bridgeObjectRelease(v36);
          sub_10000D858((uint64_t)v14, &qword_1001A42A0);
          v68 = sub_100023FA0((uint64_t)v10, type metadata accessor for B389PresentationConfig);
          v69 = Logger.logObject.getter(v68);
          v70 = static os_log_type_t.error.getter(v69);
          if (os_log_type_enabled(v69, v70))
          {
            v71 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v71 = 0;
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "No btUUID", v71, 2u);
            swift_slowDealloc(v71, -1, -1);
          }

          v72 = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v122, v65);
          goto LABEL_54;
        }
        v121 = v60;
        v73 = v125;
        v59(v125, v14, v65);
        sub_100023FA0((uint64_t)v10, type metadata accessor for B389PresentationConfig);
        v74 = sub_100005B80((unint64_t *)&qword_1001A5530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v75 = dispatch thunk of static Equatable.== infix(_:_:)(v122, v73, v65, v74);
        v76 = v123;
        swift_bridgeObjectRetain(v36);
        v77 = v76;
        v78 = Logger.logObject.getter(v77);
        v80 = static os_log_type_t.default.getter(v78, v79);
        if (os_log_type_enabled(v78, v80))
        {
          v81 = swift_slowAlloc(28, -1);
          v82 = (_QWORD *)swift_slowAlloc(8, -1);
          v118 = swift_slowAlloc(32, -1);
          v134 = v118;
          *(_DWORD *)v81 = 138412802;
          LODWORD(v123) = v75;
          v132 = (uint64_t)v77;
          v83 = v77;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v81 + 4, v81 + 12);
          *v82 = v77;

          *(_WORD *)(v81 + 12) = 1024;
          LODWORD(v132) = (v123 & 1) == 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, (char *)&v132 + 4, v81 + 14, v81 + 18);
          *(_WORD *)(v81 + 18) = 2080;
          v84 = sub_100013194(0, &qword_1001A4380, SFDevice_ptr);
          v85 = swift_bridgeObjectRetain(v36);
          v86 = Array.description.getter(v85, v84);
          v88 = v87;
          swift_bridgeObjectRelease(v36);
          v132 = sub_10001EFA4(v86, v88, (uint64_t *)&v134);
          v89 = (char)v123;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v81 + 20, v81 + 28);
          swift_bridgeObjectRelease_n(v36, 2);
          v90 = v88;
          v65 = v129;
          swift_bridgeObjectRelease(v90);
          _os_log_impl((void *)&_mh_execute_header, v78, v80, "Closest B389 is %@. isDifferent: %{BOOL}d.\nall: %s", (uint8_t *)v81, 0x1Cu);
          v91 = sub_100006A6C(&qword_1001A5420);
          swift_arrayDestroy(v82, 1, v91);
          swift_slowDealloc(v82, -1, -1);
          v92 = v118;
          swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v92, -1, -1);
          swift_slowDealloc(v81, -1, -1);

          v93 = v127;
          if ((v89 & 1) == 0)
            goto LABEL_36;
        }
        else
        {

          swift_bridgeObjectRelease_n(v36, 2);
          v93 = v127;
          if ((v75 & 1) == 0)
          {
LABEL_36:
            v94 = v77;
            v95 = Logger.logObject.getter(v94);
            v97 = static os_log_type_t.default.getter(v95, v96);
            if (os_log_type_enabled(v95, v97))
            {
              v98 = (uint8_t *)swift_slowAlloc(12, -1);
              v99 = (NSObject **)swift_slowAlloc(8, -1);
              *(_DWORD *)v98 = 138412290;
              v134 = v94;
              v100 = v94;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v98 + 4, v98 + 12);
              *v99 = v94;

              v65 = v129;
              _os_log_impl((void *)&_mh_execute_header, v95, v97, "Setting different tag for multi: %@", v98, 0xCu);
              v101 = sub_100006A6C(&qword_1001A5420);
              swift_arrayDestroy(v99, 1, v101);
              swift_slowDealloc(v99, -1, -1);
              v102 = v98;
              v93 = v127;
              swift_slowDealloc(v102, -1, -1);
            }
            else
            {

              v95 = v94;
            }

            v106 = *(int *)(sub_100006A6C(&qword_1001A7DF0) + 48);
            v107 = v128;
            v108 = (uint64_t)v124;
            (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v124, v122, v65);
            *(_BYTE *)(v108 + v106) = 1;
            swift_storeEnumTagMultiPayload(v108, v126, 1);
            v109 = (uint64_t)v121;
            swift_beginAccess(v121, &v134, 33, 0);
            v63 = v119(v109, 1, v120);
            if ((_DWORD)v63 != 1)
            {
              sub_10005B500(v108, v109);
              swift_endAccess(&v134);

              v105 = *(void (**)(char *, uint64_t))(v107 + 8);
              v105(v125, v65);
              goto LABEL_46;
            }
            goto LABEL_59;
          }
        }

        v105 = *(void (**)(char *, uint64_t))(v128 + 8);
        v105(v125, v65);
LABEL_46:
        v110 = ((uint64_t (*)(char *, uint64_t))v105)(v122, v65);
        *((_BYTE *)&v131->isa + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_needsMulti) = 0;
        sub_1000AF594(v110);
        v111 = v93;
LABEL_55:
        swift_release(v111);
        return;
      }
    }
    else
    {
      v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v36);
      if (v38)
        goto LABEL_10;
    }
    v113 = swift_bridgeObjectRelease_n(v36, 2);
    v114 = Logger.logObject.getter(v113);
    v115 = static os_log_type_t.error.getter(v114);
    if (os_log_type_enabled(v114, v115))
    {
      v116 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v116 = 0;
      _os_log_impl((void *)&_mh_execute_header, v114, v115, "No more B389s in range...", v116, 2u);
      swift_slowDealloc(v116, -1, -1);
    }

    goto LABEL_54;
  }
  v131 = Logger.logObject.getter(v31);
  v48 = static os_log_type_t.error.getter(v131);
  if (os_log_type_enabled(v131, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v131, v48, "No bubble monitor found during multi setup", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

}

void sub_1000C7DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __n128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100013194(0, (unint64_t *)&qword_1001A6810, OS_dispatch_queue_ptr);
  *v5 = static OS_dispatch_queue.main.getter(v6);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleCategories);
  if (v2)
  {
    v54 = _swiftEmptyArrayStorage;
    v9 = v2 & 0xFFFFFFFFFFFFFF8;
    if (!((unint64_t)v2 >> 62))
    {
      v10 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v2, 2);
      v53 = v1;
      if (v10)
      {
LABEL_5:
        if (v10 < 1)
        {
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v11 = 0;
        do
        {
          if ((v2 & 0xC000000000000001) != 0)
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v2);
          else
            v12 = *(id *)(v2 + 8 * v11 + 32);
          v13 = v12;
          ++v11;
          v14 = objc_msgSend(v12, "roles");
          v15 = sub_100013194(0, (unint64_t *)&qword_1001A5468, SPBeaconRole_ptr);
          v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

          sub_1000CCFE8(v16, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000D1E40);
        }
        while (v10 != v11);
        swift_bridgeObjectRelease_n(v2, 2);
        v1 = v53;
        v17 = (unint64_t)v54;
LABEL_22:
        v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC);
        if (v24)
        {
          v25 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_roleVC), "contentView");
          v26 = objc_msgSend(v25, "pickerView");

          v27 = objc_msgSend(v26, "selectedRowInComponent:", 0);
        }
        else
        {
          v27 = 0;
        }
        v28 = (uint64_t *)(v1 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_selectedRoleIndex);
        *v28 = (uint64_t)v27;
        *((_BYTE *)v28 + 8) = v24 == 0;
        v30 = sub_1000AEB54();
        v31 = v29;
        if (qword_1001A3120 != -1)
          swift_once(&qword_1001A3120, sub_1000AEA64);
        v32 = type metadata accessor for Logger(0, v29);
        v33 = sub_10000E8E8(v32, (uint64_t)qword_1001A7A60);
        v34 = swift_bridgeObjectRetain(v31);
        v35 = Logger.logObject.getter(v34);
        v37 = static os_log_type_t.default.getter(v35, v36);
        if (os_log_type_enabled(v35, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v39 = swift_slowAlloc(32, -1);
          v56 = v39;
          *(_DWORD *)v38 = 136315138;
          v52[1] = v33;
          if (v31)
          {
            v40 = v31;
          }
          else
          {
            v54 = 0;
            v55 = 0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease(v55);
            v40 = 0x8000000100136820;
            v30 = 0xD000000000000015;
          }
          swift_bridgeObjectRetain(v31);
          v54 = (_QWORD *)sub_10001EFA4(v30, v40, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 4, v38 + 12);
          swift_bridgeObjectRelease_n(v31, 2);
          swift_bridgeObjectRelease(v40);
          _os_log_impl((void *)&_mh_execute_header, v35, v37, "continuePressed, name = %s", v38, 0xCu);
          swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v31, 2);
        }
        if ((v28[1] & 1) != 0)
        {
          __break(1u);
          return;
        }
        v41 = *v28;
        if (*v28 < 0)
        {
          __break(1u);
        }
        else if (v41 < *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v42 = *(id *)(v17 + 8 * v41 + 32);
          swift_bridgeObjectRelease(v17);
          v43 = objc_msgSend(v42, "roleId");

          if (v43 == (id)SPBeaconRoleIdOther)
          {
            v46 = Logger.logObject.getter(v44);
            v48 = static os_log_type_t.default.getter(v46, v47);
            if (os_log_type_enabled(v46, v48))
            {
              v49 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v49 = 0;
              _os_log_impl((void *)&_mh_execute_header, v46, v48, "Showing name and emoji view", v49, 2u);
              swift_slowDealloc(v49, -1, -1);
            }

            sub_1000AE238(v50, v51);
          }
          else
          {
            sub_1000ADF90(v44, v45);
          }
          return;
        }
        __break(1u);
        goto LABEL_43;
      }
LABEL_21:
      swift_bridgeObjectRelease_n(v2, 2);
      v17 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_22;
    }
LABEL_17:
    if (v2 >= 0)
      v23 = v9;
    else
      v23 = v2;
    swift_bridgeObjectRetain_n(v2, 2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v23);
    v53 = v1;
    if (v10)
      goto LABEL_5;
    goto LABEL_21;
  }
  if (qword_1001A3120 != -1)
LABEL_44:
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v18 = type metadata accessor for Logger(0, v8);
  v19 = sub_10000E8E8(v18, (uint64_t)qword_1001A7A60);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Could not determine role categories", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

}

void sub_1000C8398()
{
  sub_1000C7DA0();
}

id sub_1000C83B8(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1000C8490(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000C84B0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000C8514;
  return v6(a1);
}

uint64_t sub_1000C8514()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *sub_1000C8560(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006A6C(&qword_1001A4350);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000D35C4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000C8658(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006A6C(&qword_1001A7C48);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000D36A8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C8764(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100006A6C(&qword_1001A7E28);
  v11 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for URLQueryItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000D3928(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_1000C896C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006A6C(&qword_1001A3CF8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000D3BC4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000C8A78(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100006A6C(&qword_1001A7D00);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000D3CB4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C8B84(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000C8C2C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000C8BA0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000C8D88(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000C8BBC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000C8F10(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000C8BD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000C906C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000C8BF4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000C91C4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000C8C10(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000C9330(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000C8C2C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006A6C(&qword_1001A7E70);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C8D88(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006A6C(&qword_1001A7C48);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100006A6C((uint64_t *)&unk_1001A5470);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C8F10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006A6C(&qword_1001A7D68);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C906C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006A6C(&qword_1001A7CF8);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C91C4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100006A6C(&qword_1001A7E40);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000C9330(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100006A6C(&qword_1001A7E48);
  v11 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE *sub_1000C9510@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1000D2C50(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1000D2D10((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1000D2D88((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000C9584(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000CAE2C(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000C967C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000CAF4C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000C9828(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1000C9EDC(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_1000CAB10(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_1000CADAC((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_1000CB0E4((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_1000C9AC4(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD v14[10];

  v4 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  v5 = sub_1000079BC(a2);
  v7 = v6;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v14, v5, v7);
  swift_bridgeObjectRelease(v7);
  v8 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  v14[0] = *v12;
  *v12 = 0x8000000000000000;
  sub_1000CB268(a2, v8, isUniquelyReferenced_nonNull_native);
  v10 = *v12;
  *v12 = v14[0];
  swift_bridgeObjectRelease(v10);
  result = 1;
  *a1 = a2;
  return result;
}

Swift::Int sub_1000C9EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_100006A6C(&qword_1001A7E58);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_1000CAB10(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

uint64_t sub_1000CA0D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C((uint64_t *)&unk_1001A7C38);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_1000CA350(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C(&qword_1001A4300);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1000CA62C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C((uint64_t *)&unk_1001A7C90);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v16 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v17 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x1000CAAC4);
              }
              if (v12 >= v9)
                break;
              v11 = v17[v12];
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v16;
  v15 = 1 << *(_BYTE *)(v3 + 32);
  if (v15 > 63)
    bzero(v17, ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v17 = -1 << v15;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  swift_release(v3);
  *v2 = v5;
}

void sub_1000CAB10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C(&qword_1001A7E58);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_36;
        v18 = v8[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_36;
          v18 = v8[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_36;
            v18 = v8[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v18 = v8[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      v21 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

unint64_t sub_1000CADAC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1000CAE2C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CA0D0(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000CB71C();
      goto LABEL_14;
    }
    sub_1000CBD98(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1000CAF4C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000CA350(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1000CB8B0();
      goto LABEL_22;
    }
    sub_1000CBFF8(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void sub_1000CB0E4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CAB10(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000CBBF0();
      goto LABEL_14;
    }
    sub_1000CC750(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

void sub_1000CB268(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  _QWORD v19[10];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000CA62C(v8);
    }
    else
    {
      if (v7 > v6)
      {
        sub_1000CBA60();
        goto LABEL_10;
      }
      sub_1000CC2A4(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v19, *(_QWORD *)(*v3 + 40));
    v10 = sub_1000079BC(a1);
    v12 = v11;
    String.hash(into:)(v19, v10, v11);
    swift_bridgeObjectRelease(v12);
    a2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v13 = *v17;
  *(_QWORD *)(*v17 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = v18;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1000CB668);
  }
  *(_QWORD *)(v13 + 16) = v16;
}

void *sub_1000CB71C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100006A6C((uint64_t *)&unk_1001A7C38);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000CB8B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100006A6C(&qword_1001A4300);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000CBA60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100006A6C((uint64_t *)&unk_1001A7C90);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

id sub_1000CBBF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100006A6C(&qword_1001A7E58);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000CBD98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C((uint64_t *)&unk_1001A7C38);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1000CBFF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C(&qword_1001A4300);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v32 = v2;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  v12 = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v34, v22, v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2, v12);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000CC2A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int64_t v16;
  uint64_t v17[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C((uint64_t *)&unk_1001A7C90);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
    goto LABEL_26;
  }
  v15 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v16 = (unint64_t)(v6 + 63) >> 6;
  v9 = swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v16 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v16 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v16 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v16 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x1000CC704);
              }
              if (v12 >= v16)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release_n(v3, 2, v9);
  v2 = v15;
LABEL_26:
  *v2 = v5;
}

void sub_1000CC750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  __n128 v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100006A6C(&qword_1001A7E58);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  v13 = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    v23 = NSObject._rawHashValue(seed:)(v21);
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2, v13);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1000CC9C8(uint64_t a1)
{
  return sub_1000CCFE8(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000D17EC);
}

uint64_t sub_1000CC9D4(uint64_t result)
{
  int64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;

  v4 = v2;
  v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = __CocoaSet.count.getter(result);
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(result + 16);
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v7 < 0)
    v23 = *v4;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  result = swift_bridgeObjectRelease(v7);
  v9 = v24 + v6;
  if (__OFADD__(v24, v6))
    goto LABEL_30;
LABEL_8:
  v10 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v10;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v10 & 0x8000000000000000) == 0
    && (v10 & 0x4000000000000000) == 0)
  {
    v13 = v10 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v29 = v10;
    else
      v29 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v14 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 <= v9)
    v14 = v9;
  swift_bridgeObjectRetain(v10);
  v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v14, 1, v10);
  swift_bridgeObjectRelease(*v4);
  *v4 = v15;
  v13 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (*(_QWORD *)(v13 + 24) >> 1) - v16;
  result = (uint64_t)sub_1000D2098(&v56, (uint64_t **)(v13 + 8 * v16 + 32), v17, v5);
  if (result < v6)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (result >= 1)
  {
    v18 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = __OFADD__(v18, result);
    v20 = v18 + result;
    if (v19)
    {
      __break(1u);
LABEL_42:
      v30 = __CocoaSet.Iterator.next()(result);
      if (!v30)
        goto LABEL_86;
      v31 = v30;
      v54 = v30;
      v32 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
      swift_unknownObjectRetain(v31);
      swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v32, 7);
      v28 = v55;
      result = swift_unknownObjectRelease(v31);
      while (2)
      {
        if (!v28)
        {
          v6 = v56;
LABEL_86:
          v21 = v6;
          goto LABEL_24;
        }
        while (1)
        {
          v33 = *v4 & 0xFFFFFFFFFFFFFF8;
          v34 = *(_QWORD *)(v33 + 0x18);
          if (v3 + 1 > (uint64_t)(v34 >> 1))
          {
            result = specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1);
            v33 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          v35 = *(_QWORD *)(v33 + 24) >> 1;
          if (v3 < v35)
            break;
LABEL_46:
          *(_QWORD *)(v33 + 16) = v3;
        }
        v36 = v33 + 32;
        while (1)
        {
          *(_QWORD *)(v36 + 8 * v3++) = v28;
          v37 = v56;
          v38 = v59;
          if ((v56 & 0x8000000000000000) == 0)
            break;
          v41 = __CocoaSet.Iterator.next()(result);
          if (!v41)
            goto LABEL_84;
          v42 = v41;
          v54 = v41;
          v43 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
          swift_unknownObjectRetain(v42);
          swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v43, 7);
          v28 = v55;
          result = swift_unknownObjectRelease(v42);
LABEL_58:
          if (!v28)
          {
            v37 = v56;
LABEL_84:
            *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v3;
            v21 = v37;
            goto LABEL_24;
          }
          if (v3 >= v35)
          {
            v33 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_46;
          }
        }
        if (v60)
        {
          v39 = (v60 - 1) & v60;
          v40 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_54:
          v28 = *(void **)(*(_QWORD *)(v56 + 48) + 8 * v40);
          result = v28;
LABEL_55:
          v59 = v38;
          v60 = v39;
          goto LABEL_58;
        }
        v44 = v59 + 1;
        if (__OFADD__(v59, 1))
        {
          __break(1u);
LABEL_109:
          v28 = 0;
          v26 = 0;
          v25 = v1;
LABEL_36:
          v59 = v25;
          v60 = v26;
          continue;
        }
        break;
      }
      v45 = (unint64_t)(v58 + 64) >> 6;
      if (v44 >= v45)
      {
        v28 = 0;
        v39 = 0;
        goto LABEL_55;
      }
      v46 = *(_QWORD *)(v57 + 8 * v44);
      if (v46)
      {
LABEL_64:
        v39 = (v46 - 1) & v46;
        v40 = __clz(__rbit64(v46)) + (v44 << 6);
        v38 = v44;
        goto LABEL_54;
      }
      v47 = v59 + 2;
      if (v59 + 2 < v45)
      {
        v46 = *(_QWORD *)(v57 + 8 * v47);
        if (v46)
        {
LABEL_68:
          v44 = v47;
          goto LABEL_64;
        }
        v1 = v59 + 3;
        if (v59 + 3 >= v45)
          goto LABEL_81;
        v46 = *(_QWORD *)(v57 + 8 * v1);
        if (v46)
        {
          v44 = v59 + 3;
          goto LABEL_64;
        }
        v47 = v59 + 4;
        if (v59 + 4 >= v45)
        {
          v28 = 0;
          v39 = 0;
          v38 = v59 + 3;
          goto LABEL_55;
        }
        v46 = *(_QWORD *)(v57 + 8 * v47);
        if (v46)
          goto LABEL_68;
        v44 = v59 + 5;
        if (v59 + 5 >= v45)
        {
LABEL_81:
          v28 = 0;
          v39 = 0;
          v38 = v47;
          goto LABEL_55;
        }
        v46 = *(_QWORD *)(v57 + 8 * v44);
        if (v46)
          goto LABEL_64;
        v44 = v45 - 1;
        v48 = v59 + 6;
        while (v45 != v48)
        {
          v46 = *(_QWORD *)(v57 + 8 * v48++);
          if (v46)
          {
            v44 = v48 - 1;
            goto LABEL_64;
          }
        }
      }
      v28 = 0;
      v39 = 0;
      v38 = v44;
      goto LABEL_55;
    }
    *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
  }
  if (result != v17)
  {
    v21 = v56;
LABEL_24:
    v22 = sub_10002413C(v21);
    return specialized Array._endMutation()(v22);
  }
LABEL_32:
  v3 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v56;
  v25 = v59;
  if (v56 < 0)
    goto LABEL_42;
  if (v60)
  {
    v26 = (v60 - 1) & v60;
    v27 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_35:
    v28 = *(void **)(*(_QWORD *)(v56 + 48) + 8 * v27);
    result = v28;
    goto LABEL_36;
  }
  v49 = v59 + 1;
  if (!__OFADD__(v59, 1))
  {
    v50 = (unint64_t)(v58 + 64) >> 6;
    if (v49 >= v50)
    {
      v28 = 0;
      v26 = 0;
      goto LABEL_36;
    }
    v51 = *(_QWORD *)(v57 + 8 * v49);
    if (v51)
      goto LABEL_90;
    v52 = v59 + 2;
    if (v59 + 2 >= v50)
    {
LABEL_106:
      v28 = 0;
      v26 = 0;
      v25 = v49;
      goto LABEL_36;
    }
    v51 = *(_QWORD *)(v57 + 8 * v52);
    if (v51)
      goto LABEL_94;
    v1 = v59 + 3;
    if (v59 + 3 < v50)
    {
      v51 = *(_QWORD *)(v57 + 8 * v1);
      if (v51)
      {
        v49 = v59 + 3;
        goto LABEL_90;
      }
      v52 = v59 + 4;
      if (v59 + 4 >= v50)
        goto LABEL_109;
      v51 = *(_QWORD *)(v57 + 8 * v52);
      if (v51)
      {
LABEL_94:
        v49 = v52;
LABEL_90:
        v26 = (v51 - 1) & v51;
        v27 = __clz(__rbit64(v51)) + (v49 << 6);
        v25 = v49;
        goto LABEL_35;
      }
      v49 = v59 + 5;
      if (v59 + 5 < v50)
      {
        v51 = *(_QWORD *)(v57 + 8 * v49);
        if (!v51)
        {
          v49 = v50 - 1;
          v53 = v59 + 6;
          do
          {
            if (v50 == v53)
              goto LABEL_106;
            v51 = *(_QWORD *)(v57 + 8 * v53++);
          }
          while (!v51);
          v49 = v53 - 1;
        }
        goto LABEL_90;
      }
    }
    v28 = 0;
    v26 = 0;
    v25 = v52;
    goto LABEL_36;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CCFD0(uint64_t a1)
{
  return sub_1000CCFE8(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000D1C24);
}

uint64_t sub_1000CCFDC(uint64_t a1)
{
  return sub_1000CCFE8(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000D1E40);
}

uint64_t sub_1000CCFE8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CD1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100005E08(a1);
  LOBYTE(a1) = v8;
  result = swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v11 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000CFE08();
      v11 = v15;
    }

    v12 = *(_QWORD *)(v11 + 56) + 24 * v7;
    v13 = *(_QWORD *)(v12 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v13;
    sub_1000CEDC0(v7, v11);
    v14 = *v3;
    *v3 = v11;
    return swift_bridgeObjectRelease(v14);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t sub_1000CD288(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_100005EAC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000CFFD8();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_1000CEF84(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1000CD360(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100005D24(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000D0200();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1000CF224(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

void sub_1000CD43C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C(&qword_1001A7C70);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v22 >= v37)
          goto LABEL_36;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_36;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v13 >= v37)
                  goto LABEL_36;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v13 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v31 = *(void **)v30;
      v32 = *(_QWORD *)(v30 + 8);
      v33 = *(void **)(v30 + 16);
      if ((v39 & 1) == 0)
      {
        v34 = v29;
        sub_100006B68(v31, v32, v33);
      }
      v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v18);
      *v19 = v31;
      v19[1] = v32;
      v19[2] = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1000CD730(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C(&qword_1001A32D8);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = v2;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v29 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v29 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100005B80((unint64_t *)&unk_1001A32C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v10 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_1000CDAC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C(&qword_1001A7D60);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000CDDCC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt32 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C((uint64_t *)&unk_1001A7E90);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((v37 & 1) == 0)
              {
                swift_release(v5);
                v3 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v36[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v31 = *v30;
      v32 = v30[1];
      if ((v37 & 1) == 0)
        swift_bridgeObjectRetain(v32);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v29);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_1000CE0B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C(&qword_1001A3288);
  v20 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((v20 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((v20 & 1) == 0)
      v17 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v11);
    Hasher.init(_seed:)(v21, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x1000CE56CLL);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((v20 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v12, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  swift_release(v5);
  *v3 = v7;
}

void sub_1000CE5B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  __int128 v19;
  uint64_t v20[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C(&qword_1001A3280);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v18 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v18 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
    {
      v19 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v11);
      sub_100006B94(v19, *((unint64_t *)&v19 + 1));
    }
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v18 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x1000CEA78);
      }
      if (v14 >= v18)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  swift_release(v5);
  *v3 = v7;
}

void sub_1000CEAC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100006A6C(&qword_1001A3240);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_100006AAC(v24, v38);
      }
      else
      {
        sub_10000D894((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_100006AAC(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1000CEDC0(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  Swift::Int v11;
  id v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 40);
        v12 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v13 = NSObject._rawHashValue(seed:)(v11);

        v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            v17 = *(_QWORD *)(a2 + 48);
            v18 = (_QWORD *)(v17 + 8 * v3);
            v19 = (_QWORD *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1)
              *v18 = *v19;
            v20 = *(_QWORD *)(a2 + 56);
            v21 = v20 + 24 * v3;
            v22 = (__int128 *)(v20 + 24 * v6);
            if (v3 != v6 || (v3 = v6, v21 >= (unint64_t)v22 + 24))
            {
              v10 = *v22;
              *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v21 = v10;
              v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1000CEF84(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100005B80((unint64_t *)&unk_1001A32C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000CF224(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000CF3F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v6 = v5;
  v11 = *v5;
  v13 = sub_100005E08((uint64_t)a4);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_1000CFE08();
LABEL_7:
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 24 * v13;
      sub_100024034(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(void **)(v20 + 16));
      *(_QWORD *)v20 = a1;
      *(_QWORD *)(v20 + 8) = a2;
      *(_QWORD *)(v20 + 16) = a3;
      return;
    }
LABEL_11:
    v19[(v13 >> 6) + 8] |= 1 << v13;
    *(_QWORD *)(v19[6] + 8 * v13) = a4;
    v23 = (_QWORD *)(v19[7] + 24 * v13);
    *v23 = a1;
    v23[1] = a2;
    v23[2] = a3;
    v24 = v19[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v19[2] = v26;
      v27 = a4;
      return;
    }
    goto LABEL_14;
  }
  sub_1000CD43C(v16, a5 & 1);
  v21 = sub_100005E08((uint64_t)a4);
  if ((v17 & 1) == (v22 & 1))
  {
    v13 = v21;
    v19 = (_QWORD *)*v6;
    if ((v17 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v28 = sub_100013194(0, (unint64_t *)&qword_1001A3250, CBCharacteristic_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
}

void sub_1000CF580(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100005EAC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000CFFD8();
    goto LABEL_7;
  }
  sub_1000CD730(v17, a3 & 1);
  v22 = sub_100005EAC(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1000CFD08(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1000CF6DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100005D24(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1000D0200();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_1000CDAC4(result, a4 & 1);
  result = sub_100005D24(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000CF82C(uint64_t a1, uint64_t a2, Swift::UInt32 a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100005F18(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000D03AC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_bridgeObjectRelease(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_1000CDDCC(v15, a4 & 1);
  v20 = sub_100005F18(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SFPairingFlags);
  __break(1u);
}

void sub_1000CF968(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100005E38(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000D0558();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1000CE0B0(v13, a3 & 1);
  v18 = sub_100005E38(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for B389Characteristic);
  __break(1u);
}

void sub_1000CFA9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100005E38(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000D06F8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;
      sub_100007348(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_1000CE5B8(v15, a4 & 1);
  v20 = sub_100005E38(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for B389Characteristic);
  __break(1u);
}

_OWORD *sub_1000CFBD8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100005D24(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100024118(v19);
        return sub_100006AAC(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000D08A0();
      goto LABEL_7;
    }
    sub_1000CEAC4(v15, a4 & 1);
    v21 = sub_100005D24(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000CFDA0(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000CFD08(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_1000CFDA0(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100006AAC(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void sub_1000CFE08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  _QWORD *v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100006A6C(&qword_1001A7C70);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(void **)(v19 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v23 = v20;
    v23[1] = v21;
    v23[2] = v22;
    v24 = v17;
    sub_100006B68(v20, v21, v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000CFFD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006A6C(&qword_1001A32D8);
  v25 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v25 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = v5 + 64;
  v27 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    v20 = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1000D0200()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100006A6C(&qword_1001A7D60);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000D03AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100006A6C((uint64_t *)&unk_1001A7E90);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000D0558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100006A6C(&qword_1001A3288);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    v17 = v16;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000D06F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100006A6C(&qword_1001A3280);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15) = v16;
    sub_100006B94(v16, *((unint64_t *)&v16 + 1));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000D08A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100006A6C(&qword_1001A3240);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10000D894(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100006AAC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_1000D0A84(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000CB8B0();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1000D1020(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_1000D0C10(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[10];

  v3 = *v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(*v1 + 40));
  v4 = sub_1000079BC(a1);
  v6 = v5;
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v4, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v3 + 32));
  if (((*(_QWORD *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v3);
  return 19;
}

unint64_t sub_1000D1020(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000D11E4(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[10];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
      Hasher.init(_seed:)(v12, *(_QWORD *)(v3 + 40));
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = __OFSUB__(v9, 1);
  v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1000D1558);
  }
  *(_QWORD *)(v3 + 16) = v11;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

void (*sub_1000D15A4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000D167C(v6, a2, a3);
  return sub_1000D15F8;
}

void (*sub_1000D15FC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000D16E8(v6, a2, a3);
  return sub_1000D15F8;
}

void sub_1000D1650(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1000D167C(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000D9000;
  }
  __break(1u);
  return result;
}

void (*sub_1000D16E8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1000D1754;
  }
  __break(1u);
  return result;
}

void sub_1000D1754(id *a1)
{

}

uint64_t sub_1000D175C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_1000D17EC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100024144(&qword_1001A7E68, &qword_1001A7E60, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006A6C(&qword_1001A7E60);
          v13 = sub_1000D15A4(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D1A08(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100024144((unint64_t *)&unk_1001A7E80, &qword_1001A7E78, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006A6C(&qword_1001A7E78);
          v13 = sub_1000D15A4(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100013194(0, &qword_1001A4380, SFDevice_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D1C24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100024144((unint64_t *)&unk_1001A7D10, &qword_1001A7D08, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006A6C(&qword_1001A7D08);
          v13 = sub_1000D15A4(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100013194(0, (unint64_t *)&qword_1001A3250, CBCharacteristic_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D1E40(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100024144(&qword_1001A7E18, &qword_1001A7E10, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100006A6C(&qword_1001A7E10);
          v13 = sub_1000D15FC(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100013194(0, (unint64_t *)&qword_1001A5468, SPBeaconRole_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1000D205C@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t *sub_1000D2098(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD v35[5];

  v4 = a4;
  v6 = a2;
  v31 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
    v10 = sub_10009370C(&qword_1001A7E50, &qword_1001A45A0, CALayer_ptr);
    result = Set.Iterator.init(_cocoa:)(v35, v8, v9, v10);
    v4 = v35[0];
    v11 = v35[1];
    v12 = v35[2];
    v13 = v35[3];
    v14 = v35[4];
    if (v6)
      goto LABEL_6;
LABEL_39:
    v15 = 0;
    goto LABEL_41;
  }
  v13 = 0;
  v26 = -1 << *(_BYTE *)(a4 + 32);
  v11 = a4 + 56;
  v12 = ~v26;
  v27 = -v26;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v14 = v28 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v15 = 0;
LABEL_41:
    v29 = v31;
LABEL_44:
    *v29 = v4;
    v29[1] = v11;
    v29[2] = v12;
    v29[3] = v13;
    v29[4] = v14;
    return (uint64_t *)v15;
  }
  if (a3 < 0)
    goto LABEL_51;
  v15 = 0;
  v32 = (unint64_t)(v12 + 64) >> 6;
  v30 = v12;
  while (1)
  {
    if (v4 < 0)
    {
      v22 = __CocoaSet.Iterator.next()(result);
      if (!v22)
        goto LABEL_43;
      v23 = v22;
      v33 = v22;
      v24 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
      swift_unknownObjectRetain(v23);
      swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
      v18 = v34;
      result = (uint64_t *)swift_unknownObjectRelease(v23);
      if (!v18)
        goto LABEL_43;
      goto LABEL_11;
    }
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_10;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v19 >= v32)
    {
      v14 = 0;
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v11 + 8 * v19);
    if (v20)
      goto LABEL_26;
    v21 = v13 + 2;
    if (v13 + 2 >= v32)
    {
      v14 = 0;
      ++v13;
      goto LABEL_43;
    }
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      if (v13 + 3 >= v32)
        goto LABEL_47;
      v20 = *(_QWORD *)(v11 + 8 * (v13 + 3));
      if (v20)
      {
        v19 = v13 + 3;
        goto LABEL_26;
      }
      v21 = v13 + 4;
      if (v13 + 4 >= v32)
      {
        v14 = 0;
        v13 += 3;
        goto LABEL_43;
      }
      v20 = *(_QWORD *)(v11 + 8 * v21);
      if (!v20)
      {
        v19 = v13 + 5;
        if (v13 + 5 >= v32)
        {
LABEL_47:
          v14 = 0;
          v13 = v21;
          goto LABEL_43;
        }
        v20 = *(_QWORD *)(v11 + 8 * v19);
        if (!v20)
        {
          v25 = v13 + 6;
          while (v32 != v25)
          {
            v20 = *(_QWORD *)(v11 + 8 * v25++);
            if (v20)
            {
              v19 = v25 - 1;
              goto LABEL_26;
            }
          }
          v14 = 0;
          v13 = v32 - 1;
          goto LABEL_43;
        }
        goto LABEL_26;
      }
    }
    v19 = v21;
LABEL_26:
    v14 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v19 << 6);
    v13 = v19;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    v18 = result;
    if (!result)
      goto LABEL_43;
LABEL_11:
    ++v15;
    *v6++ = v18;
    if (v15 == a3)
    {
      v15 = a3;
LABEL_43:
      v12 = v30;
      v29 = v31;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

_QWORD *sub_1000D23A0(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1000D2598(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000D25FC
     + *((int *)qword_1000D27A0 + (sub_100023D8C(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_1000D260C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_100006B94(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_100024118(&v11);
}

int64_t sub_1000D27B0(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1000D2894(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000D28BC(a1, a2, a3, a4, (unint64_t *)&qword_1001A5BC0, SBUIRemoteAlertButtonAction_ptr);
}

void sub_1000D28A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000D28BC(a1, a2, a3, a4, (unint64_t *)&qword_1001A7E20, BSAction_ptr);
}

void sub_1000D28BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  unint64_t *v25;

  v10 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v14 = __CocoaSet.Index.element.getter(v10, a2);
        v24 = v14;
        v15 = sub_100013194(0, a5, a6);
        swift_unknownObjectRetain(v14);
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        a5 = v25;
        swift_unknownObjectRelease(v14);
        v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v17 = -1 << *(_BYTE *)(a4 + 32);
        v10 = v16 & ~v17;
        if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        {
          v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          v19 = static NSObject.== infix(_:_:)(v18, a5);

          if ((v19 & 1) == 0)
          {
            v20 = ~v17;
            do
            {
              v10 = (v10 + 1) & v20;
              if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
                goto LABEL_24;
              v21 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
              v22 = static NSObject.== infix(_:_:)(v21, a5);

            }
            while ((v22 & 1) == 0);
          }

LABEL_20:
          v23 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v11 = a4;
  else
    v11 = a4 & 0xFFFFFFFFFFFFFF8;
  v12 = __CocoaSet.element(at:)(a1, a2, v11);
  v24 = v12;
  v13 = sub_100013194(0, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v12);
}

uint64_t sub_1000D2B20(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000D2BA8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    return ((uint64_t (*)(void))((char *)&loc_1000D2BD4 + 4 * byte_100135036[a1]))();
  if ((a4 & 1) != 0)
    return 0;
  return a1 == a3;
}

uint64_t sub_1000D2C50(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1000D2D10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_1000D2D88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000D2E08(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_100006A6C(&qword_1001A7C78);
  v10 = sub_100024144((unint64_t *)&unk_1001A7C80, &qword_1001A7C78, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_100023D8C(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_1000C9510(v3, v4, &v7);
  v5 = v7;
  sub_100024118(v8);
  return v5;
}

void sub_1000D2EB8(void *a1, uint64_t a2, uint64_t a3)
{
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  void *v29;
  id v30;
  _QWORD v31[5];
  uint64_t v32;

  v6 = String._bridgeToObjectiveC()();
  v7 = sub_100116484(v6);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = sub_100117218(v10, v11, v12);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;
  swift_bridgeObjectRelease(v9);

  v16 = String._bridgeToObjectiveC()();
  v17 = sub_100117314(v16);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v22 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v20, v21, 1);

  v23 = String._bridgeToObjectiveC()();
  v24 = sub_100117314(v23);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v26 = v25;

  v27 = swift_allocObject(&unk_10017CE10, 32, 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  swift_retain(a3);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v31[4] = sub_1000240E4;
  v32 = v27;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 1107296256;
  v31[2] = sub_10001B5D0;
  v31[3] = &unk_10017CE28;
  v29 = _Block_copy(v31);
  swift_release(v32);
  v30 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v28, 0, v29);
  _Block_release(v29);

  objc_msgSend(v22, "addAction:", v30);
  objc_msgSend(v22, "setPreferredAction:", v30);
  objc_msgSend(a1, "presentViewController:animated:completion:", v22, 1, 0);

}

void sub_1000D31F4(void *a1, uint64_t a2, uint64_t a3)
{
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  void *v29;
  void *v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  id v37;
  _QWORD v38[5];
  uint64_t v39;

  v6 = String._bridgeToObjectiveC()();
  v7 = sub_100116484(v6);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = sub_100117218(v10, v11, v12);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;
  swift_bridgeObjectRelease(v9);

  v16 = String._bridgeToObjectiveC()();
  v17 = sub_100117314(v16);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v22 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v20, v21, 1);

  v23 = String._bridgeToObjectiveC()();
  v24 = sub_100117314(v23);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v26 = v25;

  v27 = swift_allocObject(&unk_10017CA78, 32, 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  swift_retain(a3);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v38[4] = sub_10005BAD8;
  v39 = v27;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 1107296256;
  v38[2] = sub_10001B5D0;
  v38[3] = &unk_10017CA90;
  v29 = _Block_copy(v38);
  swift_release(v39);
  v30 = (void *)objc_opt_self(UIAlertAction);
  v31 = objc_msgSend(v30, "actionWithTitle:style:handler:", v28, 0, v29);
  _Block_release(v29);

  objc_msgSend(v22, "addAction:", v31);
  v32 = String._bridgeToObjectiveC()();
  v33 = sub_100117314(v32);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v35 = v34;

  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  v37 = objc_msgSend(v30, "actionWithTitle:style:handler:", v36, 1, 0);

  objc_msgSend(v22, "addAction:", v37);
  objc_msgSend(v22, "setPreferredAction:", v31);
  objc_msgSend(a1, "presentViewController:animated:completion:", v22, 1, 0);

}

char *sub_1000D35C4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000D36A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100006A6C((uint64_t *)&unk_1001A5470);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000D37B0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_100013194(0, &qword_1001A45A0, CALayer_ptr);
  v5 = sub_10009370C(&qword_1001A7E50, &qword_1001A45A0, CALayer_ptr);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_1000C9828((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_1000C9828((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D3928(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000D3A40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000D8CA4();
  result = Set.init(minimumCapacity:)(v2, &type metadata for B389Characteristic, v3);
  v8 = result;
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_1000C9AC4(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000D3AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    sub_100013194(0, (unint64_t *)&qword_1001A7260, NSObject_ptr);
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = static NSObject.== infix(_:_:)(v6, a2);

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v9 = 0;
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

uint64_t sub_1000D3BC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000D3CB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100006A6C(&qword_1001A7D08);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000D3DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  id v8;
  id v9;
  NSString v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD aBlock[5];
  uint64_t v16;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v2 = type metadata accessor for Logger(0, a2);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7A60);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "takeBKSAssertion()", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v8 = objc_msgSend(v7, "processIdentifier");

  v9 = objc_allocWithZone((Class)BKSProcessAssertion);
  v10 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000B301C;
  v16 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AC858;
  aBlock[3] = &unk_10017CB30;
  v11 = _Block_copy(aBlock);
  swift_release(v16);
  v12 = objc_msgSend(v9, "initWithPID:flags:reason:name:withHandler:", v8, 15, 9, v10, v11);
  _Block_release(v11);

  v13 = sub_100006A6C(&qword_1001A7D40);
  Optional.unwrap(_:file:line:)(aBlock, sub_100035690, 0, "SharingViewService/AirTagSetupMainViewController.swift", 54, 2, 465, v13);

  return aBlock[0];
}

void sub_1000D3FC0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSString v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  NSString v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  void *v49;
  void *v50;
  id v51;
  NSString v52;
  NSString v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  void *v61;
  id v62;
  void **aBlock;
  uint64_t v68;
  void (*v69)(uint64_t, void *);
  void *v70;
  void *v71;
  uint64_t v72;

  v6 = String._bridgeToObjectiveC()();
  v7 = MGGetBoolAnswer(v6);

  v8 = 0x8000000100139300;
  if (!a3)
    v8 = 0x80000001001392B0;
  v9 = 0x8000000100139380;
  if (!a3)
    v9 = 0x8000000100139350;
  if (v7)
    v10 = v9;
  else
    v10 = v8;
  if (v7)
    v11 = 0x8000000100139330;
  else
    v11 = 0x8000000100139290;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v13 = sub_100116484(v12);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v17 = sub_100116484(v16);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  v20 = (void *)objc_opt_self(NSBundle);
  v21 = objc_msgSend(v20, "mainBundle");
  v22 = String._bridgeToObjectiveC()();
  v23 = String._bridgeToObjectiveC()();
  v24 = sub_100117218(v21, v22, v23);

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;
  swift_bridgeObjectRelease(v15);

  v28 = sub_100006A6C((uint64_t *)&unk_1001A7D20);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100131C40;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_10000D794();
  v30 = a2;
  if (!a3)
    v30 = 0;
  v31 = 0xE000000000000000;
  if (a3)
    v31 = a3;
  *(_QWORD *)(v29 + 32) = v30;
  *(_QWORD *)(v29 + 40) = v31;
  swift_bridgeObjectRetain(a3);
  static String.localizedStringWithFormat(_:_:)(v25, v27, v29);
  v33 = v32;
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v29);
  v34 = objc_msgSend(v20, "mainBundle");
  v35 = String._bridgeToObjectiveC()();
  v36 = String._bridgeToObjectiveC()();
  v37 = sub_100117218(v34, v35, v36);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v39 = v38;
  swift_bridgeObjectRelease(v19);

  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  v42 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v40, v41, 1);

  v43 = String._bridgeToObjectiveC()();
  v44 = sub_100117314(v43);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v46 = v45;

  v47 = swift_allocObject(&unk_10017C8E8, 32, 7);
  *(_QWORD *)(v47 + 16) = a4;
  *(_QWORD *)(v47 + 24) = a5;
  swift_retain(a5);
  v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  v71 = sub_10005BAD8;
  v72 = v47;
  aBlock = _NSConcreteStackBlock;
  v68 = 1107296256;
  v69 = sub_10001B5D0;
  v70 = &unk_10017C900;
  v49 = _Block_copy(&aBlock);
  swift_release(v72);
  v50 = (void *)objc_opt_self(UIAlertAction);
  v51 = objc_msgSend(v50, "actionWithTitle:style:handler:", v48, 1, v49);
  _Block_release(v49);

  objc_msgSend(v42, "addAction:", v51);
  v52 = String._bridgeToObjectiveC()();
  v53 = sub_100116484(v52);

  if (!v53)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v55 = v54;
    v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v55);
  }
  v56 = sub_100117314(v53);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v58 = v57;

  v59 = swift_allocObject(&unk_10017C938, 32, 7);
  *(_QWORD *)(v59 + 16) = a4;
  *(_QWORD *)(v59 + 24) = a5;
  swift_retain(a5);
  v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v58);
  v71 = sub_1000D8A20;
  v72 = v59;
  aBlock = _NSConcreteStackBlock;
  v68 = 1107296256;
  v69 = sub_10001B5D0;
  v70 = &unk_10017C950;
  v61 = _Block_copy(&aBlock);
  v62 = objc_msgSend(v50, "actionWithTitle:style:handler:", v60, 0, v61, swift_release(v72).n128_f64[0]);
  _Block_release(v61);

  objc_msgSend(v42, "addAction:", v62);
  objc_msgSend(v42, "setPreferredAction:", v62);
  objc_msgSend(a1, "presentViewController:animated:completion:", v42, 1, 0);

}

void sub_1000D4630(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint8_t *v30;
  id v31;
  id v32;
  _QWORD *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  uint8_t *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;

  v65 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100006A6C(&qword_1001A5550);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for B389PresentationConfig.Mode(0);
  v8 = __chkstk_darwin(v61);
  v62 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v53 - v10;
  v12 = sub_100006A6C(&qword_1001A5428);
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100006A6C(&qword_1001A42A0);
  v16 = __chkstk_darwin(v15);
  v60 = (uint64_t)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  v63 = (uint64_t)&v53 - v22;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v23 = type metadata accessor for Logger(0, v21);
  sub_10000E8E8(v23, (uint64_t)qword_1001A7A60);
  v24 = a1;
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.default.getter(v25, v26);
  v28 = os_log_type_enabled(v25, v27);
  v59 = v4;
  if (v28)
  {
    v29 = swift_slowAlloc(12, -1);
    v57 = v2;
    v30 = (uint8_t *)v29;
    v54 = (_QWORD *)swift_slowAlloc(8, -1);
    v58 = v7;
    v55 = v30;
    *(_DWORD *)v30 = 138412290;
    v66 = v24;
    v31 = v24;
    v56 = v20;
    v32 = v31;
    v7 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v30 + 4, v30 + 12);
    v33 = v54;
    *v54 = v24;

    v34 = v27;
    v35 = v55;
    v20 = v56;
    _os_log_impl((void *)&_mh_execute_header, v25, v34, "didConnect: %@", v55, 0xCu);
    v36 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v33, 1, v36);
    swift_slowDealloc(v33, -1, -1);
    v2 = v57;
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

  }
  v37 = objc_msgSend(v24, "identifier");
  v38 = v63;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v39(v38, 0, 1, v65);
  v40 = v64 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
  swift_beginAccess(v64 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig, &v66, 0, 0);
  sub_100006BD8(v40, (uint64_t)v14, &qword_1001A5428);
  v41 = type metadata accessor for B389PresentationConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v14, 1, v41) == 1)
  {
    __break(1u);
    return;
  }
  sub_100023F5C((uint64_t)v14, (uint64_t)v11, type metadata accessor for B389PresentationConfig.Mode);
  v42 = v62;
  sub_100023F5C((uint64_t)v11, v62, type metadata accessor for B389PresentationConfig.Mode);
  if (swift_getEnumCaseMultiPayload(v42, v61) == 1)
  {
    v43 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v20, v42, v65);
    v39((uint64_t)v20, 0, 1, v43);
  }
  else
  {
    v39((uint64_t)v20, 1, 1, v65);
    sub_100023FA0(v42, type metadata accessor for B389PresentationConfig.Mode);
  }
  sub_100023FA0((uint64_t)v11, type metadata accessor for B389PresentationConfig.Mode);
  v44 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_100006BD8(v38, (uint64_t)v7, &qword_1001A42A0);
  sub_100006BD8((uint64_t)v20, v44, &qword_1001A42A0);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v45((uint64_t)v7, 1, v65) != 1)
  {
    v47 = v60;
    sub_100006BD8((uint64_t)v7, v60, &qword_1001A42A0);
    if (v45(v44, 1, v65) != 1)
    {
      v48 = v59;
      v49 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v59, v44, v65);
      v50 = sub_100005B80((unint64_t *)&qword_1001A5530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v49, v50);
      v52 = *(void (**)(char *, uint64_t))(v2 + 8);
      v52(v48, v49);
      sub_10000D858((uint64_t)v20, &qword_1001A42A0);
      sub_10000D858(v63, &qword_1001A42A0);
      v52((char *)v47, v49);
      sub_10000D858((uint64_t)v7, &qword_1001A42A0);
      v46 = sub_100023FA0((uint64_t)v14, type metadata accessor for B389PresentationConfig);
      if ((v51 & 1) == 0)
        return;
      goto LABEL_17;
    }
    sub_10000D858((uint64_t)v20, &qword_1001A42A0);
    sub_10000D858(v38, &qword_1001A42A0);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v47, v65);
LABEL_15:
    sub_10000D858((uint64_t)v7, &qword_1001A5550);
    sub_100023FA0((uint64_t)v14, type metadata accessor for B389PresentationConfig);
    return;
  }
  sub_10000D858((uint64_t)v20, &qword_1001A42A0);
  sub_10000D858(v38, &qword_1001A42A0);
  if (v45(v44, 1, v65) != 1)
    goto LABEL_15;
  sub_10000D858((uint64_t)v7, &qword_1001A42A0);
  v46 = sub_100023FA0((uint64_t)v14, type metadata accessor for B389PresentationConfig);
LABEL_17:
  *(_BYTE *)(v64 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_connectionState) = 2;
  sub_1000AF594(v46);
}

void sub_1000D4CB8(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  NSString v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = (_QWORD *)swift_slowAlloc(8, -1);
    v28 = v5;
    *(_DWORD *)v8 = 138412290;
    v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v8 + 4, v8 + 12);
    *v27 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "didFailToConnect: %@", v8, 0xCu);
    v10 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v27, 1, v10);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v11 = (void *)objc_opt_self(NSBundle);
  v12 = objc_msgSend(v11, "mainBundle");
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  v15 = sub_100117218(v12, v13, v14);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = objc_msgSend(v11, "mainBundle");
  v20 = String._bridgeToObjectiveC()();
  v21 = String._bridgeToObjectiveC()();
  v22 = sub_100117218(v19, v20, v21);

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  sub_1000C06B8(v16, v18, a2, v23, v25);
  swift_bridgeObjectRelease(v18);
  v26 = swift_bridgeObjectRelease(v25);
  sub_1000AF594(v26);
}

void sub_1000D4FCC(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSString v25;
  NSString v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  NSString v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  _BYTE v39[8];
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v3 = v2;
  if (a2)
    v6 = static os_log_type_t.error.getter(a1);
  else
    v6 = static os_log_type_t.default.getter(a1, 0);
  v8 = v6;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v9 = type metadata accessor for Logger(0, v7);
  sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
  v10 = a1;
  swift_errorRetain(a2);
  v11 = v10;
  v12 = swift_errorRetain(a2);
  v13 = Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v8))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    v16 = swift_slowAlloc(32, -1);
    v42 = v16;
    *(_DWORD *)v14 = 138412546;
    v40 = (uint64_t)v11;
    v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v14 + 4, v14 + 12);
    *v15 = v11;

    *(_WORD *)(v14 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v39, v38);
      v18 = Error.localizedDescription.getter(v38[1], v38[2]);
      v20 = v19;
    }
    else
    {
      v40 = 0;
      v41 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v41);
      v18 = 0xD000000000000015;
      v20 = 0x8000000100136820;
    }
    v40 = sub_10001EFA4(v18, v20, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v13, v8, "didDisconnectPeripheral: %@, error: %s", (uint8_t *)v14, 0x16u);
    v21 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v15, 1, v21);
    swift_slowDealloc(v15, -1, -1);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState) != 2)
  {
    v23 = (void *)objc_opt_self(NSBundle);
    v24 = objc_msgSend(v23, "mainBundle");
    v25 = String._bridgeToObjectiveC()();
    v26 = String._bridgeToObjectiveC()();
    v27 = sub_100117218(v24, v25, v26);

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v31 = objc_msgSend(v23, "mainBundle");
    v32 = String._bridgeToObjectiveC()();
    v33 = String._bridgeToObjectiveC()();
    v34 = sub_100117218(v31, v32, v33);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    sub_1000C06B8(v28, v30, a2, v35, v37);
    swift_bridgeObjectRelease(v30);
    v22 = swift_bridgeObjectRelease(v37);
  }
  sub_1000AF594(v22);
}

void sub_1000D5404(void *a1, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t type;
  id v35;
  uint64_t v36;

  v3 = v2;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v6 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v6, (uint64_t)qword_1001A7A60);
  v7 = a1;
  v8 = a2;
  v9 = v7;
  v10 = v8;
  v11 = Logger.logObject.getter(v10);
  v13 = static os_log_type_t.default.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v14 = 138412546;
    v35 = v9;
    type = v13;
    v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 4, v14 + 12);
    *v15 = v9;

    *(_WORD *)(v14 + 12) = 2112;
    v35 = v10;
    v17 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 14, v14 + 22);
    v15[1] = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, type, "didLosePeripheral: %@, forType: %@", (uint8_t *)v14, 0x16u);
    v18 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v15, 2, v18);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  if (v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_didTapStart] == 1)
  {
    if (v3[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_findMyFinalizeState] != 2)
    {
      v19 = (void *)objc_opt_self(NSBundle);
      v20 = objc_msgSend(v19, "mainBundle");
      v21 = String._bridgeToObjectiveC()();
      v22 = String._bridgeToObjectiveC()();
      v23 = sub_100117218(v20, v21, v22);

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      v27 = objc_msgSend(v19, "mainBundle");
      v28 = String._bridgeToObjectiveC()();
      v29 = String._bridgeToObjectiveC()();
      v30 = sub_100117218(v27, v28, v29);

      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      sub_1000C06B8(v24, v26, 0, v31, v33);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v33);
    }
  }
  else
  {
    objc_msgSend(v3, "dismiss:", 7);
  }
  sub_1000AFEC0(0);
}

void sub_1000D57AC(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSString v19;
  NSString v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  NSString v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[8];
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v4 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v4, (uint64_t)qword_1001A7A60);
  v5 = a1;
  swift_errorRetain(a2);
  v6 = v5;
  v7 = swift_errorRetain(a2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v38 = v33;
    *(_DWORD *)v10 = 138412546;
    if (a1)
    {
      v36 = (uint64_t)v6;
      v12 = v6;
    }
    else
    {
      v36 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v10 + 4, v10 + 12);
    *v11 = a1;

    *(_WORD *)(v10 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v35, v34);
      v13 = Error.localizedDescription.getter(v34[1], v34[2]);
      v15 = v14;
    }
    else
    {
      v36 = 0;
      v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease(v37);
      v13 = 0xD000000000000015;
      v15 = 0x8000000100136820;
    }
    v36 = sub_10001EFA4(v13, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "peerDidFailToCompletePairing: %@, error: %s", (uint8_t *)v10, 0x16u);
    v16 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v11, 1, v16);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  v17 = (void *)objc_opt_self(NSBundle);
  v18 = objc_msgSend(v17, "mainBundle");
  v19 = String._bridgeToObjectiveC()();
  v20 = String._bridgeToObjectiveC()();
  v21 = sub_100117218(v18, v19, v20);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v25 = objc_msgSend(v17, "mainBundle");
  v26 = String._bridgeToObjectiveC()();
  v27 = String._bridgeToObjectiveC()();
  v28 = sub_100117218(v25, v26, v27);

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  sub_1000C06B8(v22, v24, a2, v29, v31);
  swift_bridgeObjectRelease(v24);
  v32 = swift_bridgeObjectRelease(v31);
  sub_1000AF594(v32);
}

void sub_1000D5BF4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;

  v2 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v53 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100006A6C(&qword_1001A5550);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for B389PresentationConfig.Mode(0);
  v7 = __chkstk_darwin(v55);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v60 = (uint64_t)&v49 - v10;
  v11 = sub_100006A6C(&qword_1001A5428);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100006A6C(&qword_1001A42A0);
  v15 = __chkstk_darwin(v14);
  v54 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v58 = (uint64_t)&v49 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v49 - v20;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v22 = type metadata accessor for Logger(0, v19);
  sub_10000E8E8(v22, (uint64_t)qword_1001A7A60);
  v23 = a1;
  v24 = Logger.logObject.getter(v23);
  v26 = static os_log_type_t.default.getter(v24, v25);
  v27 = os_log_type_enabled(v24, v26);
  v56 = v9;
  if (v27)
  {
    v49 = v21;
    v50 = v4;
    v51 = v13;
    v52 = v6;
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138412290;
    if (a1)
    {
      v61 = v23;
      v30 = v23;
    }
    else
    {
      v61 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v28 + 4, v28 + 12);
    *v29 = a1;

    _os_log_impl((void *)&_mh_execute_header, v24, v26, "peerDidCompletePairing: %@", v28, 0xCu);
    v31 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v29, 1, v31);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    v13 = v51;
    v6 = v52;
    v21 = v49;
    v4 = v50;
  }
  else
  {

  }
  v32 = v58;
  if (!a1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
  }
  v33 = objc_msgSend(v23, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v34 = v57;
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
  v35(v21, 0, 1, v2);
  v36 = v59 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
  swift_beginAccess(v59 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig, &v61, 0, 0);
  sub_100006BD8(v36, (uint64_t)v13, &qword_1001A5428);
  v37 = type metadata accessor for B389PresentationConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v13, 1, v37) == 1)
    goto LABEL_24;
  v38 = v60;
  sub_100023F5C((uint64_t)v13, v60, type metadata accessor for B389PresentationConfig.Mode);
  v39 = (uint64_t)v56;
  sub_100023F5C(v38, (uint64_t)v56, type metadata accessor for B389PresentationConfig.Mode);
  if (swift_getEnumCaseMultiPayload(v39, v55) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v32, v39, v2);
    v35((char *)v32, 0, 1, v2);
  }
  else
  {
    v35((char *)v32, 1, 1, v2);
    sub_100023FA0(v39, type metadata accessor for B389PresentationConfig.Mode);
  }
  sub_100023FA0(v60, type metadata accessor for B389PresentationConfig.Mode);
  v40 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_100006BD8((uint64_t)v21, (uint64_t)v6, &qword_1001A42A0);
  sub_100006BD8(v32, v40, &qword_1001A42A0);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v41((uint64_t)v6, 1, v2) != 1)
  {
    v43 = v54;
    sub_100006BD8((uint64_t)v6, v54, &qword_1001A42A0);
    if (v41(v40, 1, v2) != 1)
    {
      v44 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v53, v40, v2);
      v45 = sub_100005B80((unint64_t *)&qword_1001A5530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v44, v2, v45);
      v47 = *(void (**)(char *, uint64_t))(v34 + 8);
      v47(v44, v2);
      sub_10000D858(v58, &qword_1001A42A0);
      sub_10000D858((uint64_t)v21, &qword_1001A42A0);
      v47((char *)v43, v2);
      sub_10000D858((uint64_t)v6, &qword_1001A42A0);
      v42 = sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
      if ((v46 & 1) == 0)
        return;
      goto LABEL_21;
    }
    sub_10000D858(v32, &qword_1001A42A0);
    sub_10000D858((uint64_t)v21, &qword_1001A42A0);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v43, v2);
LABEL_19:
    sub_10000D858((uint64_t)v6, &qword_1001A5550);
    sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
    return;
  }
  sub_10000D858(v32, &qword_1001A42A0);
  sub_10000D858((uint64_t)v21, &qword_1001A42A0);
  if (v41(v40, 1, v2) != 1)
    goto LABEL_19;
  sub_10000D858((uint64_t)v6, &qword_1001A42A0);
  v42 = sub_100023FA0((uint64_t)v13, type metadata accessor for B389PresentationConfig);
LABEL_21:
  v48 = v59 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState;
  *(_QWORD *)v48 = 3;
  *(_BYTE *)(v48 + 8) = 1;
  sub_1000AF594(v42);
}

uint64_t sub_1000D62B8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  char *v56;
  uint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  char v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t (*v77)(char *, uint64_t);
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;

  v88 = a2;
  v95 = sub_100006A6C(&qword_1001A5550);
  __chkstk_darwin(v95);
  v101 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for B389PresentationConfig.Mode(0);
  v4 = __chkstk_darwin(v92);
  v93 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v94 = (uint64_t)&v83 - v6;
  v7 = sub_100006A6C(&qword_1001A5428);
  __chkstk_darwin(v7);
  v97 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100006A6C(&qword_1001A42A0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v83 - v14;
  v16 = __chkstk_darwin(v13);
  v99 = (uint64_t)&v83 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v83 - v18;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v96 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v87 = (char *)&v83 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v83 - v27;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v29 = type metadata accessor for Logger(0, v26);
  v30 = sub_10000E8E8(v29, (uint64_t)qword_1001A7A60);
  v31 = a1;
  v89 = v30;
  v32 = Logger.logObject.getter(v31);
  v34 = static os_log_type_t.default.getter(v32, v33);
  v35 = os_log_type_enabled(v32, v34);
  v100 = v21;
  v90 = v12;
  if (v35)
  {
    v84 = v20;
    v85 = v15;
    v91 = v28;
    v86 = v19;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v36 = 138412290;
    if (a1)
    {
      v104 = v31;
      v38 = v31;
    }
    else
    {
      v104 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v36 + 4, v36 + 12);
    *v37 = a1;

    _os_log_impl((void *)&_mh_execute_header, v32, v34, "peerDidRequestPairing: %@", v36, 0xCu);
    v39 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v37, 1, v39);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v19 = v86;
    v28 = v91;
    v21 = v100;
    v15 = v85;
    v20 = v84;
  }
  else
  {

  }
  v40 = v98;
  if (!a1)
  {
    __break(1u);
LABEL_26:
    __break(1u);
  }
  v41 = objc_msgSend(v31, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

  v42 = v40 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig;
  swift_beginAccess(v40 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_presentationConfig, &v104, 0, 0);
  v43 = v97;
  sub_100006BD8(v42, v97, &qword_1001A5428);
  v44 = type metadata accessor for B389PresentationConfig(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 1, v44) == 1)
    goto LABEL_26;
  v45 = v94;
  sub_100023F5C(v43, v94, type metadata accessor for B389PresentationConfig.Mode);
  v46 = v93;
  sub_100023F5C(v45, v93, type metadata accessor for B389PresentationConfig.Mode);
  v47 = (uint64_t)v15;
  if (swift_getEnumCaseMultiPayload(v46, v92) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v19, v46, v20);
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    v48(v19, 0, 1, v20);
  }
  else
  {
    v49 = v46;
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    v48(v19, 1, 1, v20);
    sub_100023FA0(v49, type metadata accessor for B389PresentationConfig.Mode);
  }
  sub_100023FA0(v45, type metadata accessor for B389PresentationConfig.Mode);
  sub_100023FA0(v43, type metadata accessor for B389PresentationConfig);
  v50 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 16);
  v51 = v99;
  v50(v99, v28, v20);
  v48((char *)v51, 0, 1, v20);
  v52 = v101;
  v53 = v101 + *(int *)(v95 + 48);
  sub_100006BD8(v51, v101, &qword_1001A42A0);
  sub_100006BD8((uint64_t)v19, v53, &qword_1001A42A0);
  v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v54(v52, 1, v20) == 1)
  {
    sub_10000D858(v51, &qword_1001A42A0);
    v55 = v54(v53, 1, v20);
    v56 = v96;
    if (v55 == 1)
    {
      v57 = sub_10000D858(v101, &qword_1001A42A0);
LABEL_21:
      v63 = v98 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_pairState;
      *(_QWORD *)v63 = v88;
      *(_BYTE *)(v63 + 8) = 0;
      sub_1000AF594(v57);
      sub_10000D858((uint64_t)v19, &qword_1001A42A0);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v28, v20);
    }
    goto LABEL_19;
  }
  sub_100006BD8(v52, v47, &qword_1001A42A0);
  v58 = v54(v53, 1, v20);
  v56 = v96;
  if (v58 == 1)
  {
    sub_10000D858(v99, &qword_1001A42A0);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v47, v20);
LABEL_19:
    sub_10000D858(v101, &qword_1001A5550);
    goto LABEL_22;
  }
  v59 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v87, v53, v20);
  v60 = sub_100005B80((unint64_t *)&qword_1001A5530, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v61 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v59, v20, v60);
  v62 = *(void (**)(char *, uint64_t))(v100 + 8);
  v62(v59, v20);
  sub_10000D858(v99, &qword_1001A42A0);
  v62((char *)v47, v20);
  v21 = v100;
  v57 = sub_10000D858(v52, &qword_1001A42A0);
  if ((v61 & 1) != 0)
    goto LABEL_21;
LABEL_22:
  v50((uint64_t)v56, v28, v20);
  v65 = (uint64_t)v90;
  v66 = sub_100006BD8((uint64_t)v19, (uint64_t)v90, &qword_1001A42A0);
  v67 = Logger.logObject.getter(v66);
  v69 = static os_log_type_t.default.getter(v67, v68);
  if (os_log_type_enabled(v67, v69))
  {
    v70 = swift_slowAlloc(22, -1);
    v71 = swift_slowAlloc(64, -1);
    v91 = v28;
    v101 = v71;
    v103 = v71;
    *(_DWORD *)v70 = 136315394;
    v72 = sub_100005B80(&qword_1001A5450, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v73 = dispatch thunk of CustomStringConvertible.description.getter(v20, v72);
    v75 = v74;
    v102 = sub_10001EFA4(v73, v74, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v70 + 4, v70 + 12);
    swift_bridgeObjectRelease(v75);
    v76 = *(void (**)(char *, uint64_t))(v100 + 8);
    v76(v56, v20);
    v77 = (uint64_t (*)(char *, uint64_t))v76;
    *(_WORD *)(v70 + 12) = 2080;
    v78 = sub_1000AC100();
    v80 = v79;
    v102 = sub_10001EFA4(v78, v79, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v70 + 14, v70 + 22);
    swift_bridgeObjectRelease(v80);
    sub_10000D858(v65, &qword_1001A42A0);
    _os_log_impl((void *)&_mh_execute_header, v67, v69, "Identifier mismatch, skip pairing request: %s != %s", (uint8_t *)v70, 0x16u);
    v81 = v101;
    swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v70, -1, -1);

    sub_10000D858((uint64_t)v19, &qword_1001A42A0);
    return v77(v91, v20);
  }
  else
  {

    sub_10000D858(v65, &qword_1001A42A0);
    v82 = *(void (**)(char *, uint64_t))(v100 + 8);
    v82(v56, v20);
    sub_10000D858((uint64_t)v19, &qword_1001A42A0);
    return ((uint64_t (*)(char *, uint64_t))v82)(v28, v20);
  }
}

void sub_1000D6C30(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t i;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char **v36;
  id v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v3 = type metadata accessor for Logger(0, a2);
  sub_10000E8E8(v3, (uint64_t)qword_1001A7A60);
  v4 = a1;
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v74 = (unint64_t)v4;
    v10 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v8 + 4, v8 + 12);
    *v9 = v4;

    _os_log_impl((void *)&_mh_execute_header, v5, v7, "didDiscoverCharacteristicsFor: %@\n\n", v8, 0xCu);
    v11 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = objc_msgSend(v4, "services");
  if (!v12)
  {
    v31 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_28;
LABEL_38:
    if (v31 < 0)
      v62 = v31;
    else
      v62 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease(v31);
    if (v32)
      goto LABEL_29;
    goto LABEL_42;
  }
  v13 = v12;
  v14 = sub_100013194(0, &qword_1001A5558, CBService_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v69 = v15;
    else
      v69 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v16 = _CocoaArrayWrapper.endIndex.getter(v69);
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
  }
  v17 = _swiftEmptyArrayStorage;
  if (v16)
  {
    if (v16 < 1)
      goto LABEL_50;
    for (i = 0; i != v16; ++i)
    {
      if ((v15 & 0xC000000000000001) != 0)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v15);
      else
        v19 = *(id *)(v15 + 8 * i + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "characteristics");
      if (v21)
      {
        v22 = v21;
        v23 = sub_100013194(0, (unint64_t *)&qword_1001A3250, CBCharacteristic_ptr);
        v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          v17 = sub_1000C8A78(0, v17[2] + 1, 1, v17);
        v26 = v17[2];
        v25 = v17[3];
        if (v26 >= v25 >> 1)
          v17 = sub_1000C8A78((_QWORD *)(v25 > 1), v26 + 1, 1, v17);
        v17[2] = v26 + 1;
        v17[v26 + 4] = v24;
      }
      else
      {

      }
    }
  }
  swift_bridgeObjectRelease_n(v15, 2);
  v74 = (unint64_t)_swiftEmptyArrayStorage;
  v27 = v17[2];
  if (v27)
  {
    swift_bridgeObjectRetain(v17);
    for (j = 0; j != v27; ++j)
    {
      v29 = v17[j + 4];
      v30 = swift_bridgeObjectRetain(v29);
      sub_1000CCFE8(v30, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000D1C24);
    }
    swift_bridgeObjectRelease(v17);
  }
  swift_bridgeObjectRelease(v17);
  v31 = v74;
  if (v74 >> 62)
    goto LABEL_38;
LABEL_28:
  v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v32)
  {
LABEL_29:
    if (v32 >= 1)
    {
      v33 = 0;
      v34 = v70 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_remainingCharacteristicsToDiscover;
      v35 = (_QWORD *)(v70 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
      v36 = &selRef_systemWhiteColor;
      v71 = (_QWORD *)(v70 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_discoveredChars);
      v72 = v70 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_remainingCharacteristicsToDiscover;
      do
      {
        v40 = *(id *)(v31 + 8 * v33 + 32);
        v41 = objc_msgSend(v40, v36[138]);
        v42 = objc_msgSend(v41, "UUIDString");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        v46 = sub_10000840C(v43, v45);
        if (v46 != 19)
        {
          v47 = v46;
          swift_beginAccess(v34, &v74, 33, 0);
          v48 = sub_1000D0C10(v47);
          v49 = swift_endAccess(&v74);
          if (v48 != 19)
          {
            v50 = Logger.logObject.getter(v49);
            v52 = static os_log_type_t.default.getter(v50, v51);
            if (os_log_type_enabled(v50, v52))
            {
              v53 = swift_slowAlloc(12, -1);
              v54 = swift_slowAlloc(32, -1);
              v74 = v54;
              *(_DWORD *)v53 = 136315138;
              v55 = sub_100007AD0(v47);
              v56 = v32;
              v57 = v31;
              v59 = v58;
              *(_QWORD *)(v53 + 4) = sub_10001EFA4(v55, v58, (uint64_t *)&v74);
              v60 = v59;
              v31 = v57;
              v32 = v56;
              v34 = v72;
              swift_bridgeObjectRelease(v60);
              _os_log_impl((void *)&_mh_execute_header, v50, v52, "Discovered %s", (uint8_t *)v53, 0xCu);
              swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
              v61 = v54;
              v35 = v71;
              swift_slowDealloc(v61, -1, -1);
              swift_slowDealloc(v53, -1, -1);
            }

            swift_beginAccess(v35, &v74, 33, 0);
            v37 = v40;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
            v73 = *v35;
            *v35 = 0x8000000000000000;
            sub_1000CF968((uint64_t)v37, v47, isUniquelyReferenced_nonNull_native);
            v39 = *v35;
            *v35 = v73;
            swift_bridgeObjectRelease(v39);
            swift_endAccess(&v74);
            v36 = &selRef_systemWhiteColor;
          }
        }
        ++v33;

      }
      while (v32 != v33);
      goto LABEL_42;
    }
    __break(1u);
LABEL_50:
    __break(1u);
    return;
  }
LABEL_42:
  v63 = swift_bridgeObjectRelease(v31);
  sub_1000AF594(v63);
  v65 = Logger.logObject.getter(v64);
  v67 = static os_log_type_t.default.getter(v65, v66);
  if (os_log_type_enabled(v65, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v67, "done iterating chars", v68, 2u);
    swift_slowDealloc(v68, -1, -1);
  }

}

void sub_1000D72F0(uint64_t a1, void *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(uint8_t *, uint64_t, uint64_t);
  uint64_t v11;
  uint8_t *v12;
  id v13;
  void *v14;
  void *v15;
  void (**v16)(uint8_t *, uint64_t, uint64_t);
  NSString v17;
  void *v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  void (**v42)(uint8_t *, uint64_t, uint64_t);
  NSString v43;
  id v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  os_log_type_t v89;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint8_t *v96;
  void (**v97)(uint8_t *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  id v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;
  unint64_t v106[10];

  v4 = (char *)type metadata accessor for DefaultStringInterpolation.PrintUtilsHexFormat(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v7 = (char *)v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0, v8);
  v10 = *(void (***)(uint8_t *, uint64_t, uint64_t))(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint8_t *)v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a2, "value");
  if (v13)
  {
    v14 = v13;
    v96 = v12;
    v97 = v10;
    v98 = v9;
    v99 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v101 = v15;

    v16 = (void (**)(uint8_t *, uint64_t, uint64_t))objc_msgSend(a2, "UUID");
    v17 = String._bridgeToObjectiveC()();
    v18 = (void *)objc_opt_self(CBUUID);
    v19 = objc_msgSend(v18, "UUIDWithString:", v17);

    sub_100013194(0, (unint64_t *)&unk_1001A54A0, CBUUID_ptr);
    v20 = static NSObject.== infix(_:_:)(v19, v16);

    if ((v20 & 1) != 0)
    {
      if (qword_1001A3120 != -1)
        swift_once(&qword_1001A3120, sub_1000AEA64);
      v21 = v98;
      v22 = sub_10000E8E8(v98, (uint64_t)qword_1001A7A60);
      v23 = v99;
      v24 = (uint64_t)v101;
      sub_100006B94(v99, (unint64_t)v101);
      sub_100006B94(v23, v24);
      sub_100006B94(v23, v24);
      v25 = sub_100006B94(v23, v24);
      v95 = v22;
      v26 = Logger.logObject.getter(v25);
      v28 = static os_log_type_t.default.getter(v26, v27);
      v29 = os_log_type_enabled(v26, v28);
      v94[1] = a1;
      if (v29)
      {
        v4 = (char *)swift_slowAlloc(22, -1);
        v30 = swift_slowAlloc(32, -1);
        v105 = v30;
        *(_DWORD *)v4 = 136315394;
        sub_100006B94(v23, v24);
        v31 = Data.description.getter(v23, v24);
        v33 = v32;
        sub_100007348(v23, (unint64_t)v101);
        v102 = sub_10001EFA4(v31, v33, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v4 + 4, v4 + 12);
        swift_bridgeObjectRelease(v33);
        sub_100007348(v23, (unint64_t)v101);
        sub_100007348(v23, (unint64_t)v101);
        *((_WORD *)v4 + 6) = 2048;
        v34 = Data.hashValue.getter(v23, v101);
        sub_100007348(v23, (unint64_t)v101);
        v102 = v34;
        v24 = (uint64_t)v101;
        v21 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v4 + 14, v4 + 22);
        sub_100007348(v23, v24);
        _os_log_impl((void *)&_mh_execute_header, v26, v28, "didUpdateValueFor s1UUID: %s, hash: %ld", (uint8_t *)v4, 0x16u);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v4, -1, -1);
      }
      else
      {
        sub_100007348(v23, v24);
        sub_100007348(v23, v24);
        sub_100007348(v23, v24);
        sub_100007348(v23, v24);
      }

      v57 = &v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1];
      swift_beginAccess(&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_storeS1], &v105, 1, 0);
      if (*((_QWORD *)v57 + 1) >> 60 != 15)
      {
        swift_beginAccess(v57, &v102, 33, 0);
        if (*((_QWORD *)v57 + 1) >> 60 == 15)
        {
          __break(1u);
        }
        else
        {
          Data.append(_:)(v23, v24);
          swift_endAccess(&v102);
          v97[2](v96, v95, v21);
          v4 = v100;
          v87 = Logger.logObject.getter(v4);
          v89 = static os_log_type_t.default.getter(v87, v88);
          if (!os_log_type_enabled(v87, v89))
          {

            ((void (*)(uint8_t *, uint64_t))v97[1])(v96, v21);
            v92 = *((_QWORD *)v57 + 1);
            if (v92 >> 60 != 15)
              __asm { BR              X13 }
            __break(1u);
            JUMPOUT(0x1000D8490);
          }
          *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
          v91 = *((_QWORD *)v57 + 1);
          if (v91 >> 60 != 15)
            __asm { BR              X13 }
        }

        __break(1u);
        JUMPOUT(0x1000D84B0);
      }
      if (v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_targetS1Length + 8] == 1)
        __asm { BR              X10 }
      __break(1u);
    }
    else
    {
      v42 = v16;
      v43 = String._bridgeToObjectiveC()();
      v44 = objc_msgSend(v18, "UUIDWithString:", v43);

      v45 = static NSObject.== infix(_:_:)(v44, v42);
      if ((v45 & 1) != 0)
      {
        v97 = v16;
        v46 = v99;
        v47 = (uint64_t)v101;
        if (qword_1001A3120 != -1)
          swift_once(&qword_1001A3120, sub_1000AEA64);
        sub_10000E8E8(v98, (uint64_t)qword_1001A7A60);
        sub_100006B94(v46, v47);
        v48 = sub_100006B94(v46, v47);
        v49 = Logger.logObject.getter(v48);
        v51 = static os_log_type_t.default.getter(v49, v50);
        if (os_log_type_enabled(v49, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(12, -1);
          v53 = swift_slowAlloc(32, -1);
          v98 = v53;
          *(_DWORD *)v52 = 136315138;
          v104 = v53;
          v105 = 0;
          v96 = v52 + 4;
          v106[0] = 0xE000000000000000;
          v102 = v46;
          v103[0] = v47;
          (*(void (**)(char *, _QWORD, char *))(v5 + 104))(v7, enum case for DefaultStringInterpolation.PrintUtilsHexFormat.hex(_:), v4);
          v54 = sub_100055934();
          DefaultStringInterpolation.appendInterpolation<A>(_:_:separator:)(&v102, v7, 58, 0xE100000000000000, &type metadata for Data, v54);
          (*(void (**)(char *, char *))(v5 + 8))(v7, v4);
          v55 = v106[0];
          v105 = sub_10001EFA4(v105, v106[0], &v104);
          v46 = v99;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v96, v52 + 12);
          swift_bridgeObjectRelease(v55);
          sub_100007348(v46, v47);
          sub_100007348(v46, v47);
          _os_log_impl((void *)&_mh_execute_header, v49, v51, "didUpdateValueFor payload: %s", v52, 0xCu);
          v56 = v98;
          swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v52, -1, -1);
        }
        else
        {
          sub_100007348(v46, v47);
          sub_100007348(v46, v47);
        }

        sub_100006B94(v46, v47);
        sub_10000849C(v46, v47);
        v76 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue];
        v77 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 8];
        v78 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 16];
        v79 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 24];
        v80 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 32];
        v81 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 40];
        v82 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 48];
        v83 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 56];
        v85 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 64];
        v84 = *(_QWORD *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue + 72];
        sub_10005B590((uint64_t)&v105, (uint64_t)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_payloadValue], &qword_1001A5498);
        v93 = v85;
        v23 = v99;
        v86 = v83;
        v24 = (uint64_t)v101;
        v62 = sub_1000559A8(v76, v77, v78, v79, v80, v81, v82, v86, v93, v84, (void (*)(void))sub_100007348);
        v16 = v97;
        goto LABEL_35;
      }
      v58 = objc_msgSend(v42, "UUIDString");
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v61 = v60;

      v62 = sub_10000840C(v59, v61);
      v23 = v99;
      v24 = (uint64_t)v101;
      if (v62 == 19)
      {
LABEL_35:
        sub_1000AF594(v62);

        sub_100007348(v23, v24);
        return;
      }
      v4 = (char *)v62;
      if (qword_1001A3120 == -1)
      {
LABEL_23:
        v63 = sub_10000E8E8(v98, (uint64_t)qword_1001A7A60);
        v64 = Logger.logObject.getter(v63);
        v66 = static os_log_type_t.default.getter(v64, v65);
        if (os_log_type_enabled(v64, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc(12, -1);
          v68 = swift_slowAlloc(32, -1);
          v105 = v68;
          *(_DWORD *)v67 = 136315138;
          v23 = v99;
          v69 = sub_100007AD0((char)v4);
          v71 = v70;
          v102 = sub_10001EFA4(v69, v70, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v67 + 4, v67 + 12);
          v72 = v71;
          v24 = (uint64_t)v101;
          swift_bridgeObjectRelease(v72);
          _os_log_impl((void *)&_mh_execute_header, v64, v66, "didUpdateValueFor %s", v67, 0xCu);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v67, -1, -1);
        }

        v73 = (uint64_t *)&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues];
        swift_beginAccess(&v100[OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_readValues], &v105, 33, 0);
        sub_100006B94(v23, v24);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v73);
        v102 = *v73;
        *v73 = 0x8000000000000000;
        sub_1000CFA9C(v23, v24, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
        v75 = *v73;
        *v73 = v102;
        swift_bridgeObjectRelease(v75);
        v62 = swift_endAccess(&v105);
        goto LABEL_35;
      }
    }
    swift_once(&qword_1001A3120, sub_1000AEA64);
    goto LABEL_23;
  }
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
  v101 = a2;
  v35 = Logger.logObject.getter(v101);
  v37 = static os_log_type_t.default.getter(v35, v36);
  if (os_log_type_enabled(v35, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v38 = 138412290;
    v105 = (uint64_t)v101;
    v40 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v38 + 4, v38 + 12);
    *v39 = v101;

    _os_log_impl((void *)&_mh_execute_header, v35, v37, "didUpdateValueFor %@ value = nil", v38, 0xCu);
    v41 = sub_100006A6C(&qword_1001A5420);
    swift_arrayDestroy(v39, 1, v41);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
}

void sub_1000D8518(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v3 = v2;
  if (a2)
    v6 = static os_log_type_t.error.getter(a1);
  else
    v6 = static os_log_type_t.default.getter(a1, 0);
  v8 = v6;
  if (qword_1001A3120 != -1)
    swift_once(&qword_1001A3120, sub_1000AEA64);
  v9 = type metadata accessor for Logger(0, v7);
  sub_10000E8E8(v9, (uint64_t)qword_1001A7A60);
  v10 = a1;
  swift_errorRetain(a2);
  v11 = v10;
  v12 = swift_errorRetain(a2);
  v13 = Logger.logObject.getter(v12);
  if (!os_log_type_enabled(v13, v8))
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);

    if (a2)
      return;
    goto LABEL_13;
  }
  v23 = v3;
  v14 = swift_slowAlloc(22, -1);
  v15 = (_QWORD *)swift_slowAlloc(8, -1);
  v16 = swift_slowAlloc(32, -1);
  v26 = v16;
  v27 = (uint64_t)v11;
  *(_DWORD *)v14 = 138412546;
  v17 = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v14 + 4, v14 + 12);
  *v15 = v11;

  *(_WORD *)(v14 + 12) = 2080;
  if (a2)
  {
    swift_getErrorValue(a2, v25, v24);
    v18 = Error.localizedDescription.getter(v24[1], v24[2]);
    v20 = v19;
  }
  else
  {
    v27 = 0;
    v28[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v28[0]);
    v20 = 0x8000000100136820;
    v18 = 0xD000000000000015;
  }
  v3 = v23;
  v27 = sub_10001EFA4(v18, v20, &v26);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v14 + 14, v14 + 22);
  swift_bridgeObjectRelease(v20);
  swift_errorRelease(a2);
  swift_errorRelease(a2);
  _os_log_impl((void *)&_mh_execute_header, v13, v8, "didWriteValueFor characteristic: %@, error? %s", (uint8_t *)v14, 0x16u);
  v21 = sub_100006A6C(&qword_1001A5420);
  swift_arrayDestroy(v15, 1, v21);
  swift_slowDealloc(v15, -1, -1);
  swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v16, -1, -1);
  swift_slowDealloc(v14, -1, -1);

  if (!a2)
  {
LABEL_13:
    swift_beginAccess(v3 + OBJC_IVAR____TtC18SharingViewService29AirTagSetupMainViewController_writeManager, &v27, 33, 0);
    sub_10001A55C(v11);
    v22 = swift_endAccess(&v27);
    sub_1000AF594(v22);
  }
}

uint64_t sub_1000D880C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_1000D8830()
{
  return sub_100055DC4((void (*)(_QWORD))&_swift_release);
}

void sub_1000D883C(CLLocationDegrees a1, CLLocationDegrees a2)
{
  uint64_t v2;

  sub_1000BD6BC(*(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a1, a2);
}

double sub_1000D8844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000D8854(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000D885C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D8880(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000BFE98(a1, a2, v2, (uint64_t)&unk_10017C578, (uint64_t)sub_1000D88B4, (uint64_t)&unk_10017C590);
}

uint64_t sub_1000D88B4()
{
  uint64_t v0;

  return sub_1000BC478(*(_QWORD *)(v0 + 16), *(NSObject **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000D88C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006A6C(&qword_1001A3618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D8908(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000BFE98(a1, a2, v2, (uint64_t)&unk_10017C5F0, (uint64_t)sub_1000D893C, (uint64_t)&unk_10017C608);
}

uint64_t sub_1000D893C()
{
  uint64_t v0;

  return sub_1000C00EC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000D8948(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000B7548(a1, a2, v2);
}

uint64_t sub_1000D8950(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B7AE4(a1, v1);
}

uint64_t sub_1000D8958()
{
  return sub_100055DC4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000D8964()
{
  uint64_t v0;

  return sub_1000B7D34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000D896C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D89A0()
{
  uint64_t v0;

  return sub_1000B77A4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000D89B0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000B42C4(a1, a2, *(void (***)(char *, uint64_t))(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void sub_1000D89C0()
{
  uint64_t v0;

  sub_1000D3FC0(*(void **)(v0 + 24), 0, 0, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000D89D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D8A10()
{
  uint64_t v0;

  return sub_1000B4930(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

void sub_1000D8A20(uint64_t a1)
{
  uint64_t v1;

  sub_1000B3CF4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D8A28(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B3DE4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D8A30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8A54()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_100006A6C(&qword_1001A3618) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  if (*((_QWORD *)v0 + 4))
    swift_release(*((_QWORD *)v0 + 5));
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(&v0[v3], 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v3], v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1000D8B04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_100006A6C(&qword_1001A3618) - 8) + 80);
  sub_1000B368C(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_1000D8B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(sub_100006A6C(&qword_1001A3618) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;

  return swift_deallocObject(v0, v8, v2 | 7);
}

uint64_t sub_1000D8C04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_100006A6C(&qword_1001A3618) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000B3908(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(char **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D8C4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D8C70()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D8C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B2D14(a1, a2, *(void (**)(void))(v2 + 16));
}

unint64_t sub_1000D8CA4()
{
  unint64_t result;

  result = qword_1001A7D58;
  if (!qword_1001A7D58)
  {
    result = swift_getWitnessTable(&unk_100131A1C, &type metadata for B389Characteristic);
    atomic_store(result, (unint64_t *)&qword_1001A7D58);
  }
  return result;
}

uint64_t sub_1000D8CE8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D8D0C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000D8D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006A6C(&qword_1001A5428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D8D60()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D8D9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1001A7D84);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10007D6F4;
  return sub_1000B214C(a1, v4, v5, v6, v7, v8);
}

void sub_1000D8E1C(uint64_t a1)
{
  uint64_t v1;

  sub_1000B1CCC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000D8E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001A7DFC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10007D6F4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001A7DF8 + dword_1001A7DF8))(a1, v4);
}

double sub_1000D8E94()
{
  uint64_t v0;

  return sub_1000AF524(v0);
}

uint64_t sub_1000D8E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000C55D0(*(_QWORD *)(v2 + 16), a2);
}

id sub_1000D8EA4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "dismiss:", 0);
}

void sub_1000D8EB8()
{
  uint64_t v0;

  sub_1000C6F88(*(NSObject **)(v0 + 16));
}

void sub_1000D8EC0(uint64_t a1)
{
  uint64_t v1;

  sub_1000C6428(a1, v1);
}

void sub_1000D9004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id i;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100069228();
    v5 = sub_10005B9EC();
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v13)
    {
      v22 = *(_QWORD *)(v25 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
      {
LABEL_31:
        v14 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        for (i = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15); i; v14 = v9)
        {
          if (objc_msgSend(i, "events", v24) == (id)16)
            break;

          v8 = v16;
          v9 = v14;
          if ((v1 & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v17 = __CocoaSet.Iterator.next()(v6);
          if (!v17)
            break;
          v18 = v17;
          v26 = v17;
          v19 = sub_100069228();
          swift_unknownObjectRetain(v18);
          swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
          i = v28;
          swift_unknownObjectRelease(v18);
          v16 = v8;
        }
        goto LABEL_36;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
        {
          v23 = v8 + 6;
          while (v13 != v23)
          {
            v22 = *(_QWORD *)(v25 + 8 * v23++);
            if (v22)
            {
              v16 = v23 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_31;
      }
    }
LABEL_36:
    sub_10002413C(v1);
    return;
  }
  __break(1u);
}

uint64_t sub_1000D92A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7EA0);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7EA0);
  if (qword_1001A2F00 != -1)
    swift_once(&qword_1001A2F00, sub_100018D74);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD4B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

id sub_1000D9334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  id v13;
  objc_super v15;

  v9 = &v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate];
  *v9 = nullsub_4;
  v9[1] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_remoteViewControllerProxy] = 0;
  v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState] = 9;
  v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_homeButtonPressedWhileLocked] = 0;
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_inProgressCard], 0);
  v10 = &v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor];
  *v10 = a1;
  v10[1] = a2;
  v11 = &v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_router];
  *v11 = a3;
  v11[1] = a4;
  v12 = &v4[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0xE000000000000000;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0xE000000000000000;
  v12[32] = 0;
  *(_OWORD *)(v12 + 40) = xmmword_1001320D0;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for AuthenticateAccountsPresenter();
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a3);
  v13 = objc_msgSendSuper2(&v15, "init");
  *(_QWORD *)(a1 + 24) = &off_10017CF18;
  swift_unknownObjectWeakAssign(a1 + 16, v13);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  return v13;
}

id sub_1000D946C()
{
  void *v0;
  id v1;
  NSString v2;
  objc_super v4;

  v1 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "removeObserver:name:object:", v0, v2, 0);

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for AuthenticateAccountsPresenter();
  return objc_msgSendSuper2(&v4, "dealloc");
}

__n128 sub_1000D965C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  id v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  id v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  _BYTE v29[48];
  int v30;
  id v31;
  Swift::String v32;
  Swift::String_optional v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t countAndFlagsBits;
  id v37;
  Swift::String v38;
  Swift::String_optional v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  void *object;
  void *v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __n128 result;
  id v51;
  char v52;
  id v53;
  __int128 v54;
  __n128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;

  v3 = 0xD000000000000012;
  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000021;
  v63._object = (void *)0xE000000000000000;
  v6._object = (void *)0x800000010013DF80;
  v7.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v7.value._object = (void *)0xEB00000000656C62;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v63._countAndFlagsBits = 0;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v63);

  v10 = objc_msgSend(v4, "mainBundle");
  v11._countAndFlagsBits = 0xD000000000000027;
  v64._object = (void *)0xE000000000000000;
  v11._object = (void *)0x800000010013DFB0;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v64);

  v53 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor)
      + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_model;
  v16 = type metadata accessor for AuthenticateAccountsModel(0);
  v52 = *(_BYTE *)(v15 + *(int *)(v16 + 20));
  v17 = objc_msgSend(v4, "mainBundle");
  v65._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0x5443454E4E4F43;
  v18._object = (void *)0xE700000000000000;
  v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v19.value._object = (void *)0xEB00000000656C62;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0;
  *(Swift::String *)v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v65);

  v21 = objc_msgSend(v4, "mainBundle");
  v66._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0x495443454E4E4F43;
  v22._object = (void *)0xEA0000000000474ELL;
  v23.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v23.value._object = (void *)0xEB00000000656C62;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v66._countAndFlagsBits = 0;
  *(Swift::String *)&v29[16] = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v66);

  v25 = objc_msgSend(v4, "mainBundle");
  v26._countAndFlagsBits = 0xD000000000000031;
  v67._object = (void *)0xE000000000000000;
  v26._object = (void *)0x800000010013DFE0;
  v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v27.value._object = (void *)0xEB00000000656C62;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0;
  *(Swift::String *)&v29[32] = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v67);

  v30 = *(unsigned __int8 *)(v15 + *(int *)(v16 + 32));
  v51 = v53;
  swift_bridgeObjectRetain(*(_QWORD *)&v29[8]);
  swift_bridgeObjectRetain(*(_QWORD *)&v29[24]);
  swift_bridgeObjectRetain(*(_QWORD *)&v29[40]);
  if (v30 == 1)
  {
    v31 = objc_msgSend(v4, "mainBundle");
    v32._countAndFlagsBits = 0xD000000000000024;
    v68._object = (void *)0xE000000000000000;
    v32._object = (void *)0x800000010013E020;
    v33.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v33.value._object = (void *)0xEB00000000656C62;
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v68._countAndFlagsBits = 0;
    v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v68);
    countAndFlagsBits = v35._countAndFlagsBits;
    swift_bridgeObjectRelease(v9._object);

    v37 = objc_msgSend(v4, "mainBundle");
    v38._countAndFlagsBits = 0xD00000000000002ALL;
    v69._object = (void *)0xE000000000000000;
    v38._object = (void *)0x800000010013E050;
    v39.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v39.value._object = (void *)0xEB00000000656C62;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    v69._countAndFlagsBits = 0;
    v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v38, v39, (NSBundle)v37, v40, v69);
    v42 = v41._countAndFlagsBits;
    swift_bridgeObjectRelease(v14._object);

    v43 = 0x800000010013E080;
    object = v41._object;
    v45 = v35._object;
  }
  else
  {
    v43 = 0xED0000726573755FLL;
    v3 = 0x6464615F786F7270;
    object = v14._object;
    v42 = v14._countAndFlagsBits;
    countAndFlagsBits = v9._countAndFlagsBits;
    v45 = v9._object;
  }
  *(_QWORD *)&v54 = countAndFlagsBits;
  *((_QWORD *)&v54 + 1) = v45;
  v55.n128_u64[0] = v42;
  v55.n128_u64[1] = (unint64_t)object;
  *(_QWORD *)&v56 = v3;
  *((_QWORD *)&v56 + 1) = v43;
  LOBYTE(v57) = v30 ^ 1;
  *((_QWORD *)&v57 + 1) = v51;
  v58 = xmmword_100135270;
  LOBYTE(v59) = v52;
  *((_QWORD *)&v59 + 1) = *(_QWORD *)v29;
  v60 = *(_OWORD *)&v29[8];
  v61 = *(_OWORD *)&v29[24];
  v62 = *(_QWORD *)&v29[40];
  v46 = object;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v46);
  sub_10007F0F8(v3, v43);
  sub_10007F060(&v54);

  swift_bridgeObjectRelease(*(_QWORD *)&v29[8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v29[24]);
  swift_bridgeObjectRelease(*(_QWORD *)&v29[40]);
  sub_10007F198(v3, v43);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v46);
  sub_10007F100(&v54);
  v47 = v61;
  *(_OWORD *)(a1 + 96) = v60;
  *(_OWORD *)(a1 + 112) = v47;
  *(_QWORD *)(a1 + 128) = v62;
  v48 = v57;
  *(_OWORD *)(a1 + 32) = v56;
  *(_OWORD *)(a1 + 48) = v48;
  v49 = v59;
  *(_OWORD *)(a1 + 64) = v58;
  *(_OWORD *)(a1 + 80) = v49;
  result = v55;
  *(_OWORD *)a1 = v54;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

id sub_1000D9B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  NSString v24;
  void *v25;
  id v26;
  Swift::String v27;
  Swift::String_optional v28;
  Swift::String v29;
  void *object;
  NSString v31;
  id v32;
  id v33;
  id v34;
  NSString v35;
  NSString v36;
  id v37;
  void *v38;
  id v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  void *v43;
  NSString v44;
  id v45;
  id v46;
  id v47;
  NSString v48;
  NSString v49;
  id v50;
  void *v51;
  id v52;
  Swift::String v53;
  Swift::String_optional v54;
  Swift::String v55;
  void *v56;
  NSString v57;
  id v58;
  id v59;
  id v60;
  NSString v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  NSString v71;
  void *v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD aBlock[5];
  uint64_t v86;
  _QWORD v87[8];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;

  sub_1000D965C((uint64_t)v87);
  v1 = v87[0];
  v2 = v87[2];
  v77 = v87[1];
  v78 = v87[3];
  v3 = v88;
  v79 = v88;
  v83 = v0;
  v84 = v89;
  v5 = v90;
  v4 = v91;
  v6 = v93;
  v81 = v92;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor)
     + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_model;
  v8 = (int *)type metadata accessor for AuthenticateAccountsModel(0);
  v9 = (uint64_t *)(v7 + v8[11]);
  v10 = *v9;
  v11 = v9[1];
  v12 = (uint64_t *)(v7 + v8[12]);
  v13 = *v12;
  v14 = v12[1];
  v15 = (uint64_t *)(v7 + v8[13]);
  v16 = *v15;
  v17 = v15[1];
  *(_QWORD *)&v102 = v1;
  *((_QWORD *)&v102 + 1) = v77;
  *(_QWORD *)&v103 = v2;
  *((_QWORD *)&v103 + 1) = v78;
  *(_QWORD *)&v104 = v3;
  *((_QWORD *)&v104 + 1) = v84;
  *(_QWORD *)&v105 = v5;
  *((_QWORD *)&v105 + 1) = v4;
  *(_QWORD *)&v106 = v81;
  *((_QWORD *)&v106 + 1) = v6;
  *(_QWORD *)&v107 = v10;
  *((_QWORD *)&v107 + 1) = v11;
  *(_QWORD *)&v108 = v13;
  v18 = v11;
  *((_QWORD *)&v108 + 1) = v14;
  *(_QWORD *)&v109 = v16;
  *((_QWORD *)&v109 + 1) = v17;
  v96 = v104;
  v97 = v105;
  v94 = v102;
  v95 = v103;
  v100 = v108;
  v101 = v109;
  v98 = v106;
  v99 = v107;
  v19 = objc_allocWithZone((Class)PRXFeatureListViewController);
  v20 = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v78);
  v80 = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  v82 = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v14);
  v21 = objc_msgSend(v19, "init");
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setTitle:", v22);

  v23 = v21;
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setSubtitle:", v24);

  objc_msgSend(v23, "setDismissalType:", v79);
  if (v20)
  {
    v25 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v20);
    v26 = objc_msgSend(v25, "mainBundle");
    v110._object = (void *)0xE000000000000000;
    v27._object = (void *)0x800000010013DF40;
    v27._countAndFlagsBits = 0xD000000000000031;
    v28.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v28.value._object = (void *)0xEB00000000656C62;
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v110._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v110)._object;

    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v31);

    v33 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
    v34 = objc_allocWithZone((Class)PRXFeature);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v37 = objc_msgSend(v34, "initWithTitle:detailText:icon:tintColor:valueChangedBlock:", v35, v36, v32, v33, 0);

  }
  if (v14)
  {
    v38 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v14);
    v39 = objc_msgSend(v38, "mainBundle");
    v111._object = (void *)0xE000000000000000;
    v40._object = (void *)0x800000010013DEE0;
    v40._countAndFlagsBits = 0xD000000000000031;
    v41.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v41.value._object = (void *)0xEB00000000656C62;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v111._countAndFlagsBits = 0;
    v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v111)._object;

    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v44);

    v46 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
    v47 = objc_allocWithZone((Class)PRXFeature);
    v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v43);
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    v50 = objc_msgSend(v47, "initWithTitle:detailText:icon:tintColor:valueChangedBlock:", v48, v49, v45, v46, 0);

  }
  if (v82)
  {
    v51 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v82);
    v52 = objc_msgSend(v51, "mainBundle");
    v53._countAndFlagsBits = 0xD000000000000036;
    v112._object = (void *)0xE000000000000000;
    v53._object = (void *)0x800000010013DEA0;
    v54.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v54.value._object = (void *)0xEB00000000656C62;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    v112._countAndFlagsBits = 0;
    v56 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, (NSBundle)v52, v55, v112)._object;

    v57 = String._bridgeToObjectiveC()();
    v58 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v57);

    v59 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
    v60 = objc_allocWithZone((Class)PRXFeature);
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v56);
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v82);
    v63 = objc_msgSend(v60, "initWithTitle:detailText:icon:tintColor:valueChangedBlock:", v61, v62, v58, v59, 0);

  }
  v64 = swift_allocObject(&unk_10017D128, 24, 7);
  swift_unknownObjectWeakInit(v64 + 16, v83);
  v65 = swift_allocObject(&unk_10017D150, 24, 7);
  swift_unknownObjectWeakInit(v65 + 16, v23);
  v66 = swift_allocObject(&unk_10017D178, 160, 7);
  *(_QWORD *)(v66 + 16) = v64;
  *(_QWORD *)(v66 + 24) = v65;
  v67 = v99;
  *(_OWORD *)(v66 + 96) = v98;
  *(_OWORD *)(v66 + 112) = v67;
  v68 = v101;
  *(_OWORD *)(v66 + 128) = v100;
  *(_OWORD *)(v66 + 144) = v68;
  v69 = v95;
  *(_OWORD *)(v66 + 32) = v94;
  *(_OWORD *)(v66 + 48) = v69;
  v70 = v97;
  *(_OWORD *)(v66 + 64) = v96;
  *(_OWORD *)(v66 + 80) = v70;
  swift_bridgeObjectRetain(v80);
  swift_retain(v64);
  swift_retain(v65);
  sub_1000DCEE0(&v102);
  v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v80);
  aBlock[4] = sub_1000DCED4;
  v86 = v66;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B5D0;
  aBlock[3] = &unk_10017D190;
  v72 = _Block_copy(aBlock);
  v73 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v71, 0, v72);

  _Block_release(v72);
  v74 = v86;
  swift_release(v64);
  swift_release(v65);
  swift_release(v74);
  sub_1000DCF68(&v102);
  v75 = objc_msgSend(v23, "addAction:", v73);
  sub_10007F100(v87);

  return v23;
}

void sub_1000DA43C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = a3 + 16;
    swift_beginAccess(v10, &v16, 0, 0);
    v11 = swift_unknownObjectWeakLoadStrong(v10);
    if (v11)
    {
      v12 = (void *)v11;
      objc_msgSend(a1, "setEnabled:", 0);
      objc_msgSend(v12, "setDismissalType:", *(_QWORD *)(a4 + 40));
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "showActivityIndicatorWithStatus:", v13);

      sub_1000DA51C(v14, v15);
      v9 = v12;
    }

  }
}

void sub_1000DA51C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  id v29;
  uint64_t v30;

  v3 = v2;
  v4 = OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState;
  if (v2[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState] <= 1u
    && (v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_router],
        (v6 = *(void **)(v5 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController)) != 0)
    && (v7 = *(void **)(v5 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_remoteViewControllerProxy)) != 0)
  {
    v8 = v6;
    swift_unknownObjectRetain(v7);
    sub_10006EB54((uint64_t)v8, v7);

    swift_unknownObjectRelease(v7);
  }
  else
  {
    if (qword_1001A3128 != -1)
      swift_once(&qword_1001A3128, sub_1000D92A4);
    v9 = type metadata accessor for Logger(0, a2);
    sub_10000E8E8(v9, (uint64_t)qword_1001A7EA0);
    v28 = v2;
    v10 = Logger.logObject.getter(v28);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(32, -1);
      v13 = swift_slowAlloc(96, -1);
      v30 = v13;
      *(_DWORD *)v12 = 136315650;
      LOBYTE(v29) = v3[v4];
      v14 = sub_100006A6C(&qword_1001A7F28);
      v15 = String.init<A>(reflecting:)(&v29, v14);
      v17 = v16;
      v29 = (id)sub_10001EFA4(v15, v16, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 4, v12 + 12);

      swift_bridgeObjectRelease(v17);
      *(_WORD *)(v12 + 12) = 2080;
      v18 = *(_QWORD *)&v28[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_router];
      v29 = *(id *)(v18 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController);
      v19 = v29;
      v20 = sub_100006A6C(&qword_1001A7F30);
      v21 = String.init<A>(reflecting:)(&v29, v20);
      v23 = v22;
      v29 = (id)sub_10001EFA4(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 14, v12 + 22);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v12 + 22) = 2080;
      v29 = *(id *)(v18 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_remoteViewControllerProxy);
      swift_unknownObjectRetain(v29);
      v24 = sub_100006A6C(&qword_1001A7F38);
      v25 = String.init<A>(reflecting:)(&v29, v24);
      v27 = v26;
      v29 = (id)sub_10001EFA4(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v12 + 24, v12 + 32);

      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to start authentication -- invalid state. {currentState: %s, cardViewController: %s, remoteViewControllerProxy: %s}", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy(v13, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
  }
}

id sub_1000DA8BC()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_OWORD *);
  __int128 v18;
  _OWORD v20[3];
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v22._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0x49544E4548545541;
  v4._object = (void *)0xEE004E4F49544143;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v22);

  v8 = objc_msgSend(v2, "mainBundle");
  v23._object = (void *)0xE000000000000000;
  v9._object = (void *)0x800000010013DE80;
  v9._countAndFlagsBits = 0xD000000000000019;
  v10.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v10.value._object = (void *)0xEB00000000656C62;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v23);

  v13 = &v1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel];
  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 8];
  v15 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 24];
  *(Swift::String *)v13 = v7;
  *((Swift::String *)v13 + 1) = v12;
  v13[32] = 0;
  *(_OWORD *)(v13 + 40) = xmmword_100135280;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v14);
  v17 = *(void (**)(_OWORD *))&v1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate];
  v16 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate + 8];
  v18 = *((_OWORD *)v13 + 1);
  v20[0] = *(_OWORD *)v13;
  v20[1] = v18;
  v20[2] = *((_OWORD *)v13 + 2);
  v21 = *((_QWORD *)v13 + 6);
  swift_retain(v16);
  sub_1000DCCB0((uint64_t)v20);
  v17(v20);
  sub_1000DCCE4((uint64_t)v20);
  swift_release(v16);
  return sub_1000DCD18(v1);
}

id sub_1000DAA84()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char **v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *object;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  Swift::String v25;
  id v26;
  Swift::String v27;
  Swift::String_optional v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  void *v38;
  NSString v39;
  _QWORD v41[6];
  char v42;
  id v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;

  v1 = 0xD000000000000022;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = &selRef_errorWithDomain_code_userInfo_;
  v4 = objc_msgSend(v2, "mainBundle");
  v5._countAndFlagsBits = 0xD000000000000027;
  v45._object = (void *)0xE000000000000000;
  v5._object = (void *)0x800000010013DD80;
  v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v6.value._object = (void *)0xEB00000000656C62;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v45._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v45);
  countAndFlagsBits = v8._countAndFlagsBits;
  object = v8._object;

  v11 = objc_msgSend(v2, "mainBundle");
  v12._countAndFlagsBits = 0xD00000000000002DLL;
  v46._object = (void *)0xE000000000000000;
  v12._object = (void *)0x800000010013DDB0;
  v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v46._countAndFlagsBits = 0;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v46);
  v16 = v15._countAndFlagsBits;
  v17 = v15._object;

  v18 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor)
      + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_model;
  LODWORD(v19) = *(unsigned __int8 *)(v19 + *(int *)(type metadata accessor for AuthenticateAccountsModel(0) + 32));
  v20 = v18;
  if ((_DWORD)v19 == 1)
  {
    v21 = objc_msgSend(v2, "mainBundle");
    v22._countAndFlagsBits = 0xD00000000000002ALL;
    v47._object = (void *)0xE000000000000000;
    v22._object = (void *)0x800000010013DE10;
    v23.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v23.value._object = (void *)0xEB00000000656C62;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v47._countAndFlagsBits = 0;
    v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v47);
    countAndFlagsBits = v25._countAndFlagsBits;
    swift_bridgeObjectRelease(v8._object);

    v26 = objc_msgSend(v2, "mainBundle");
    v27._countAndFlagsBits = 0xD000000000000030;
    v48._object = (void *)0xE000000000000000;
    v27._object = (void *)0x800000010013DE40;
    v28.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v28.value._object = (void *)0xEB00000000656C62;
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v48._countAndFlagsBits = 0;
    v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v48);
    v16 = v30._countAndFlagsBits;
    swift_bridgeObjectRelease(v15._object);

    v31 = 0xE400000000000000;
    v1 = 1918985575;
    v17 = v30._object;
    v3 = &selRef_errorWithDomain_code_userInfo_;
    object = v25._object;
  }
  else
  {
    v31 = 0x800000010013DDE0;
  }
  v41[0] = countAndFlagsBits;
  v41[1] = object;
  v41[2] = v16;
  v41[3] = v17;
  v41[4] = v1;
  v41[5] = v31;
  v42 = 0;
  v43 = v20;
  v44 = 1;
  swift_bridgeObjectRetain(object);
  swift_bridgeObjectRetain(v17);
  sub_10007F0F8(v1, v31);
  v32 = objc_allocWithZone((Class)type metadata accessor for AuthenticateAccountsImageCardViewController());
  v33 = sub_100090468((uint64_t)v41);
  v34 = objc_msgSend(v2, v3[151]);
  v49._object = (void *)0xE000000000000000;
  v35._countAndFlagsBits = 0x5F474E4954544553;
  v35._object = (void *)0xEA00000000005055;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v49._countAndFlagsBits = 0;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, (NSBundle)v34, v37, v49)._object;

  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  objc_msgSend(v33, "showActivityIndicatorWithStatus:", v39);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(object);

  sub_10007F198(v1, v31);
  return v33;
}

id sub_1000DAE54()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  id v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t countAndFlagsBits;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;
  id v42;
  NSString v43;
  void *v44;
  id v45;
  id v46;
  void *v48;
  _QWORD aBlock[5];
  uint64_t v50;
  _QWORD v51[6];
  char v52;
  id v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;

  v1 = v0;
  v2 = 0xD000000000000014;
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v5._countAndFlagsBits = 0xD000000000000026;
  v55._object = (void *)0xE000000000000000;
  v5._object = (void *)0x800000010013DC70;
  v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v6.value._object = (void *)0xEB00000000656C62;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v55);
  object = v8._object;

  v10 = objc_msgSend(v3, "mainBundle");
  v11._countAndFlagsBits = 0xD00000000000002CLL;
  v56._object = (void *)0xE000000000000000;
  v11._object = (void *)0x800000010013DCA0;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v56);
  countAndFlagsBits = v14._countAndFlagsBits;

  v16 = objc_msgSend((id)objc_opt_self(UIColor), "systemBlueColor");
  v17 = *(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor]
      + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_model;
  LODWORD(v17) = *(unsigned __int8 *)(v17 + *(int *)(type metadata accessor for AuthenticateAccountsModel(0) + 32));
  v18 = v16;
  v48 = v18;
  if ((_DWORD)v17 == 1)
  {
    v19 = objc_msgSend(v3, "mainBundle");
    v20._countAndFlagsBits = 0xD000000000000023;
    v57._object = (void *)0xE000000000000000;
    v20._object = (void *)0x800000010013DD00;
    v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v21.value._object = (void *)0xEB00000000656C62;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v57._countAndFlagsBits = 0;
    v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v57);
    v24 = v23._countAndFlagsBits;
    swift_bridgeObjectRelease(v8._object);

    v25 = objc_msgSend(v3, "mainBundle");
    v26._countAndFlagsBits = 0xD000000000000029;
    v58._object = (void *)0xE000000000000000;
    v26._object = (void *)0x800000010013DD30;
    v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v27.value._object = (void *)0xEB00000000656C62;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, (NSBundle)v25, v28, v58);
    countAndFlagsBits = v29._countAndFlagsBits;
    v30 = v29._object;
    swift_bridgeObjectRelease(v14._object);

    v31 = 0x800000010013DD60;
    object = v23._object;
    v1 = v0;
    v32 = v48;
  }
  else
  {
    v32 = v18;
    v2 = 0xD000000000000027;
    v31 = 0x800000010013DCD0;
    v24 = v8._countAndFlagsBits;
    v30 = v14._object;
  }
  v51[0] = v24;
  v51[1] = object;
  v51[2] = countAndFlagsBits;
  v51[3] = v30;
  v51[4] = v2;
  v51[5] = v31;
  v52 = 0;
  v53 = v32;
  v54 = 3;
  v33 = v30;
  swift_bridgeObjectRetain(object);
  swift_bridgeObjectRetain(v30);
  sub_10007F0F8(v2, v31);
  v34 = objc_allocWithZone((Class)type metadata accessor for AuthenticateAccountsImageCardViewController());
  v35 = sub_100090468((uint64_t)v51);
  v36 = objc_msgSend(v3, "mainBundle");
  v59._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 1162760004;
  v37._object = (void *)0xE400000000000000;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v59._countAndFlagsBits = 0;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, (NSBundle)v36, v39, v59)._object;

  v41 = swift_allocObject(&unk_10017D0B0, 24, 7);
  *(_QWORD *)(v41 + 16) = v1;
  v42 = v1;
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  aBlock[4] = sub_1000DD1FC;
  v50 = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B5D0;
  aBlock[3] = &unk_10017D0C8;
  v44 = _Block_copy(aBlock);
  v45 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v43, 0, v44);

  _Block_release(v44);
  v46 = objc_msgSend(v35, "addAction:", v45, swift_release(v50).n128_f64[0]);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(object);

  sub_10007F198(v2, v31);
  return v35;
}

id sub_1000DB2F4()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t countAndFlagsBits;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  Swift::String_optional v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  void *v40;
  uint64_t v41;
  id v42;
  NSString v43;
  void *v44;
  id v45;
  id v46;
  void *v48;
  _QWORD aBlock[5];
  uint64_t v50;
  _QWORD v51[6];
  char v52;
  id v53;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v55._object = (void *)0xE000000000000000;
  v4._object = (void *)0x800000010013DB80;
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v55);
  object = v7._object;

  v9 = objc_msgSend(v2, "mainBundle");
  v10._countAndFlagsBits = 0xD000000000000031;
  v56._object = (void *)0xE000000000000000;
  v10._object = (void *)0x800000010013DBB0;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v56);
  countAndFlagsBits = v13._countAndFlagsBits;

  v15 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
  v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor]
      + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_model;
  LODWORD(v16) = *(unsigned __int8 *)(v16 + *(int *)(type metadata accessor for AuthenticateAccountsModel(0) + 32));
  v17 = v15;
  v48 = v17;
  if ((_DWORD)v16 == 1)
  {
    v18 = objc_msgSend(v2, "mainBundle");
    v19._countAndFlagsBits = 0xD000000000000025;
    v57._object = (void *)0xE000000000000000;
    v19._object = (void *)0x800000010013DBF0;
    v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v20.value._object = (void *)0xEB00000000656C62;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    v57._countAndFlagsBits = 0;
    v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v57);
    v23 = v22._countAndFlagsBits;
    swift_bridgeObjectRelease(v7._object);

    v24 = objc_msgSend(v2, "mainBundle");
    v58._object = (void *)0xE000000000000000;
    v25._object = (void *)0x800000010013DC20;
    v25._countAndFlagsBits = 0xD00000000000002BLL;
    v26.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v26.value._object = (void *)0xEB00000000656C62;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, (NSBundle)v24, v27, v58);
    countAndFlagsBits = v28._countAndFlagsBits;
    v29 = v28._object;
    swift_bridgeObjectRelease(v13._object);

    v30 = 0xD000000000000010;
    v31 = 0x800000010013DC50;
    object = v22._object;
    v1 = v0;
    v32 = v48;
  }
  else
  {
    v32 = v17;
    v30 = 0xD00000000000002DLL;
    v31 = 0x800000010013DB00;
    v23 = v7._countAndFlagsBits;
    v29 = v13._object;
  }
  v51[0] = v23;
  v51[1] = object;
  v51[2] = countAndFlagsBits;
  v51[3] = v29;
  v51[4] = v30;
  v51[5] = v31;
  v52 = 0;
  v53 = v32;
  v54 = 3;
  v33 = v29;
  swift_bridgeObjectRetain(object);
  swift_bridgeObjectRetain(v29);
  sub_10007F0F8(v30, v31);
  v34 = objc_allocWithZone((Class)type metadata accessor for AuthenticateAccountsImageCardViewController());
  v35 = sub_100090468((uint64_t)v51);
  v36 = objc_msgSend(v2, "mainBundle");
  v59._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0x4F545455425F4B4FLL;
  v37._object = (void *)0xEF454C5449545F4ELL;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v59._countAndFlagsBits = 0;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, (NSBundle)v36, v39, v59)._object;

  v41 = swift_allocObject(&unk_10017D060, 24, 7);
  *(_QWORD *)(v41 + 16) = v1;
  v42 = v1;
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  aBlock[4] = sub_1000DD1FC;
  v50 = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B5D0;
  aBlock[3] = &unk_10017D078;
  v44 = _Block_copy(aBlock);
  v45 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v43, 0, v44);

  _Block_release(v44);
  v46 = objc_msgSend(v35, "addAction:", v45, swift_release(v50).n128_f64[0]);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(object);

  sub_10007F198(v30, v31);
  return v35;
}

id sub_1000DB7B4()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  id v14;
  id v15;
  id v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  void *object;
  uint64_t v21;
  id v22;
  NSString v23;
  void *v24;
  id v25;
  id v26;
  _QWORD aBlock[5];
  uint64_t v29;
  Swift::String v30[2];
  unint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4._countAndFlagsBits = 0xD000000000000037;
  v36._object = (void *)0xE000000000000000;
  v4._object = (void *)0x800000010013DA80;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v36);

  v8 = objc_msgSend(v2, "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000003DLL;
  v37._object = (void *)0xE000000000000000;
  v9._object = (void *)0x800000010013DAC0;
  v10.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v10.value._object = (void *)0xEB00000000656C62;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v37);

  v30[0] = v7;
  v30[1] = v12;
  v31 = 0xD00000000000002DLL;
  v32 = 0x800000010013DB00;
  v33 = 0;
  v34 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
  v35 = 3;
  v13 = objc_allocWithZone((Class)type metadata accessor for AuthenticateAccountsImageCardViewController());
  swift_bridgeObjectRetain(v7._object);
  swift_bridgeObjectRetain(v12._object);
  sub_10007F0F8(0xD00000000000002DLL, 0x800000010013DB00);
  v14 = v34;
  v15 = sub_100090468((uint64_t)v30);
  v16 = objc_msgSend(v2, "mainBundle");
  v17._countAndFlagsBits = 0xD000000000000040;
  v38._object = (void *)0xE000000000000000;
  v17._object = (void *)0x800000010013DB30;
  v18.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v18.value._object = (void *)0xEB00000000656C62;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v38)._object;

  v21 = swift_allocObject(&unk_10017D010, 24, 7);
  *(_QWORD *)(v21 + 16) = v1;
  v22 = v1;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_1000DCCA8;
  v29 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B5D0;
  aBlock[3] = &unk_10017D028;
  v24 = _Block_copy(aBlock);
  v25 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v23, 0, v24);

  _Block_release(v24);
  v26 = objc_msgSend(v15, "addAction:", v25, swift_release(v29).n128_f64[0]);
  swift_bridgeObjectRelease(v12._object);
  swift_bridgeObjectRelease(v7._object);
  sub_10007F198(0xD00000000000002DLL, 0x800000010013DB00);

  return v15;
}

void sub_1000DBB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSURL *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  Class isa;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  _BYTE v30[16];
  id v31;
  uint64_t v32;

  v0 = sub_100006A6C(&qword_1001A3618);
  v1 = __chkstk_darwin(v0);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v1);
  v5 = &v30[-v4];
  sub_10009D860(5, v6);
  URL.init(string:)(0xD00000000000002CLL, 0x8000000100138E30);
  v7 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v7)
    goto LABEL_5;
  v8 = v7;
  sub_10005F444((uint64_t)v5, (uint64_t)v3);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v3, 1, v9) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    v12 = v13;
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v3, v9);
  }
  v14 = sub_1000046D0((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v31 = 0;
  LODWORD(v14) = objc_msgSend(v8, "openSensitiveURL:withOptions:error:", v12, isa, &v31);

  v16 = v31;
  if (!(_DWORD)v14)
  {
    v17 = v16;
    v18 = _convertNSErrorToError(_:)(v16);

    swift_willThrow(v19);
    sub_10000E92C((uint64_t)v5);
    v21 = (void *)_convertErrorToNSError(_:)(v18);
    if (qword_1001A3128 != -1)
      swift_once(&qword_1001A3128, sub_1000D92A4);
    v22 = type metadata accessor for Logger(0, v20);
    sub_10000E8E8(v22, (uint64_t)qword_1001A7EA0);
    v23 = v21;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138412290;
      v31 = v23;
      v28 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v26 + 4, v26 + 12);
      *v27 = v23;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Open Settings failed {error: %@}", v26, 0xCu);
      v29 = sub_100006A6C(&qword_1001A5420);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
      swift_errorRelease(v18);

    }
    else
    {

      swift_errorRelease(v18);
    }
  }
  else
  {
LABEL_5:
    sub_10000E92C((uint64_t)v5);
  }
}

id sub_1000DBE94()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  id v14;
  id v15;
  id v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  void *object;
  uint64_t v21;
  id v22;
  NSString v23;
  void *v24;
  id v25;
  id v26;
  _QWORD aBlock[5];
  uint64_t v29;
  Swift::String v30[2];
  unint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  v36._object = (void *)0xE000000000000000;
  v4._object = (void *)0x800000010013D9F0;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v36);

  v8 = objc_msgSend(v2, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000031;
  v37._object = (void *)0xE000000000000000;
  v9._object = (void *)0x800000010013DA20;
  v10.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v10.value._object = (void *)0xEB00000000656C62;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v37);

  v30[0] = v7;
  v30[1] = v12;
  v31 = 0xD000000000000011;
  v32 = 0x800000010013DA60;
  v33 = 0;
  v34 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
  v35 = 3;
  v13 = objc_allocWithZone((Class)type metadata accessor for AuthenticateAccountsImageCardViewController());
  swift_bridgeObjectRetain(v7._object);
  swift_bridgeObjectRetain(v12._object);
  sub_10007F0F8(0xD000000000000011, 0x800000010013DA60);
  v14 = v34;
  v15 = sub_100090468((uint64_t)v30);
  v16 = objc_msgSend(v2, "mainBundle");
  v38._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0x4F545455425F4B4FLL;
  v17._object = (void *)0xEF454C5449545F4ELL;
  v18.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v18.value._object = (void *)0xEB00000000656C62;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v38)._object;

  v21 = swift_allocObject(&unk_10017CFC0, 24, 7);
  *(_QWORD *)(v21 + 16) = v1;
  v22 = v1;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  aBlock[4] = sub_1000DCC60;
  v29 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001B5D0;
  aBlock[3] = &unk_10017CFD8;
  v24 = _Block_copy(aBlock);
  v25 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v23, 0, v24);

  _Block_release(v24);
  v26 = objc_msgSend(v15, "addAction:", v25, swift_release(v29).n128_f64[0]);
  swift_bridgeObjectRelease(v12._object);
  swift_bridgeObjectRelease(v7._object);
  sub_10007F198(0xD000000000000011, 0x800000010013DA60);

  return v15;
}

uint64_t type metadata accessor for AuthenticateAccountsPresenter()
{
  return objc_opt_self(_TtC18SharingViewService29AuthenticateAccountsPresenter);
}

uint64_t sub_1000DC240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v3 = v2;
  if ((*(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_router)
                 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_dismissed) & 1) == 0)
  {
    if (qword_1001A3128 != -1)
      swift_once(&qword_1001A3128, sub_1000D92A4);
    v4 = type metadata accessor for Logger(0, a2);
    v5 = sub_10000E8E8(v4, (uint64_t)qword_1001A7EA0);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Main disappeared without dismiss (device locked?)...dismissing UI", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    sub_10009D860(21, v10);
  }
  sub_10006F048();
  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_remoteViewControllerProxy);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_remoteViewControllerProxy) = 0;
  result = swift_unknownObjectRelease(v11);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState) = 9;
  return result;
}

void sub_1000DC378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v2 = v1;
  sub_1000D9004(a1);
  v4 = v3;

  if (v4)
  {
    if (qword_1001A3128 != -1)
      swift_once(&qword_1001A3128, sub_1000D92A4);
    v6 = type metadata accessor for Logger(0, v5);
    v7 = sub_10000E8E8(v6, (uint64_t)qword_1001A7EA0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Home button", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v12 = OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_homeButtonPressedWhileLocked;
    if ((*(_BYTE *)(v2
                   + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_homeButtonPressedWhileLocked) & 1) != 0
      || !(v11 = sub_1000612BC()))
    {
      v14 = Logger.logObject.getter(v11);
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ignoring first home button press to unlock", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

      *(_BYTE *)(v2 + v12) = 1;
    }
    else
    {
      sub_10009D860(4, v13);
    }
  }
}

void sub_1000DC510(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v4 = OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState;
  if (v2[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState])
  {
    if (qword_1001A3128 != -1)
      swift_once(&qword_1001A3128, sub_1000D92A4);
    v5 = type metadata accessor for Logger(0, a2);
    sub_10000E8E8(v5, (uint64_t)qword_1001A7EA0);
    v14 = v2;
    v6 = Logger.logObject.getter(v14);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      *(_DWORD *)v8 = 136315138;
      v16 = v9;
      LOBYTE(v15) = v3[v4];
      v10 = sub_100006A6C(&qword_1001A7F28);
      v11 = String.init<A>(reflecting:)(&v15, v10);
      v13 = v12;
      v15 = sub_10001EFA4(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);

      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalid state to show details. {currentState: %s}", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    sub_10006E930();
  }
}

void sub_1000DC75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  char v12;
  __int128 v13;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel;
  *(_BYTE *)(v2 + 32) = 1;
  v4 = *(void (**)(_QWORD *))(v0
                                       + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate + 8);
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v11[0] = *(_QWORD *)v2;
  v11[1] = v5;
  v11[2] = v6;
  v11[3] = v7;
  v12 = 1;
  v13 = *(_OWORD *)(v2 + 40);
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v4(v11);
  swift_release(v3);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  v8 = *(void **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor)
                + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_setupSession);
  if (v8)
  {
    v9 = v8;
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "pairSetupTryPIN:", v10);

  }
}

void sub_1000DC884(char a1)
{
  __asm { BR              X10 }
}

void sub_1000DC8B8()
{
  char v0;
  void *v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _BYTE v6[184];

  sub_1000D965C((uint64_t)v6);
  v2 = objc_allocWithZone((Class)type metadata accessor for AuthenticateAccountsStartViewController());
  v3 = sub_10007ED2C((uint64_t)v6, v1, v2);
  *((_BYTE *)v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState) = v0;
  v5 = v3;
  sub_10009D738(v3, v4);

}

void sub_1000DCA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_router);
  v2 = OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_remoteViewControllerProxy;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_remoteViewControllerProxy);
  if (v3)
  {
    objc_msgSend(v3, "dismiss");
    v3 = *(void **)(v1 + v2);
  }
  *(_QWORD *)(v1 + v2) = 0;
  swift_unknownObjectRelease(v3);
  v4 = *(void **)(v1 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService26AuthenticateAccountsRouter_currentCardViewController) = 0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState) = 9;
}

uint64_t storeEnumTagSinglePayload for AuthenticateAccountsState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000DCB74 + 4 * byte_100135295[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000DCBA8 + 4 * byte_100135290[v4]))();
}

uint64_t sub_1000DCBA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DCBB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DCBB8);
  return result;
}

uint64_t sub_1000DCBC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DCBCCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000DCBD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DCBD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticateAccountsState()
{
  return &type metadata for AuthenticateAccountsState;
}

unint64_t sub_1000DCBF8()
{
  unint64_t result;

  result = qword_1001A7F20;
  if (!qword_1001A7F20)
  {
    result = swift_getWitnessTable(&unk_1001353CC, &type metadata for AuthenticateAccountsState);
    atomic_store(result, (unint64_t *)&qword_1001A7F20);
  }
  return result;
}

uint64_t sub_1000DCC3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000DCC60(uint64_t a1, uint64_t a2)
{
  sub_10009D860(5, a2);
}

double sub_1000DCC90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000DCCA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000DCCA8()
{
  sub_1000DBB08();
}

uint64_t sub_1000DCCB0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000DCCE4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  return a1;
}

id sub_1000DCD18(_BYTE *a1)
{
  objc_class *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char *v10;
  __int128 v11;
  id v12;
  uint64_t v13;
  void (**v14)(uint64_t);
  uint64_t v15;
  id v16;
  objc_super v18;

  v2 = (objc_class *)type metadata accessor for AuthenticateAccountsAuthViewController();
  v3 = (char *)objc_allocWithZone(v2);
  v4 = &v3[OBJC_IVAR____TtC18SharingViewService38AuthenticateAccountsAuthViewController_presenter];
  *((_QWORD *)v4 + 1) = 0;
  v5 = swift_unknownObjectWeakInit(v4, 0);
  *(_QWORD *)(v5 + 8) = &off_10017CF38;
  swift_unknownObjectWeakAssign(v5, a1);
  v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 8];
  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 16];
  v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 24];
  v9 = a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 32];
  v10 = &v3[OBJC_IVAR____TtC18SharingViewService38AuthenticateAccountsAuthViewController_viewModel];
  v11 = *(_OWORD *)&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel + 40];
  *(_QWORD *)v10 = *(_QWORD *)&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel];
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = v7;
  *((_QWORD *)v10 + 3) = v8;
  v10[32] = v9;
  *(_OWORD *)(v10 + 40) = v11;
  v18.receiver = v3;
  v18.super_class = v2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v12 = objc_msgSendSuper2(&v18, "initWithContentView:", 0);
  v13 = swift_allocObject(&unk_10017D100, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, v12);
  v14 = (void (**)(uint64_t))&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate];
  v15 = *(_QWORD *)&a1[OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate + 8];
  *v14 = sub_1000DCE68;
  v14[1] = (void (*)(uint64_t))v13;
  v16 = v12;

  swift_release(v15);
  return v16;
}

uint64_t sub_1000DCE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000DCE68(uint64_t a1)
{
  uint64_t v1;

  sub_1000AB93C(a1, v1);
}

uint64_t sub_1000DCE70()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[19]);
  return swift_deallocObject(v0, 160, 7);
}

void sub_1000DCED4(void *a1)
{
  uint64_t v1;

  sub_1000DA43C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

_QWORD *sub_1000DCEE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  swift_bridgeObjectRetain(a1[15]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_1000DCF68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[7];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[15];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void sub_1000DCFF0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  void (*v21)(_OWORD *);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  id v25;
  _OWORD v26[3];
  uint64_t v27;
  _QWORD v28[4];
  char v29;
  __int128 v30;
  Swift::String v31;

  v2 = OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_currentState) == 2)
  {
    if ((a1 & 0x10000) != 0)
    {
      v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_interactor)
         + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccounsInteractor_model;
      v4 = *(int *)(type metadata accessor for AuthenticateAccountsModel(0) + 36);
      v5 = *(_DWORD *)(v3 + v4);
      v6 = __CFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
      {
        __break(1u);
      }
      else
      {
        *(_DWORD *)(v3 + v4) = v7;
        v8 = v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModel;
        *(_BYTE *)(v8 + 32) = 0;
        v9 = v1 + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate;
        v11 = *(void (**)(_QWORD *))(v1
                                              + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate);
        v10 = *(_QWORD *)(v1
                        + OBJC_IVAR____TtC18SharingViewService29AuthenticateAccountsPresenter_authViewModelDidUpdate
                        + 8);
        v12 = *(_QWORD *)(v8 + 8);
        v13 = *(_QWORD *)(v8 + 16);
        v14 = *(_QWORD *)(v8 + 24);
        v28[0] = *(_QWORD *)v8;
        v28[1] = v12;
        v28[2] = v13;
        v28[3] = v14;
        v29 = 0;
        v30 = *(_OWORD *)(v8 + 40);
        swift_retain(v10);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        v11(v28);
        swift_release(v10);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v12);
        v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v31._object = (void *)0xE000000000000000;
        v16._countAndFlagsBits = 0x434E495F48545541;
        v16._object = (void *)0xEE0054434552524FLL;
        v17.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v17.value._object = (void *)0xEB00000000656C62;
        v18._countAndFlagsBits = 0;
        v18._object = (void *)0xE000000000000000;
        v31._countAndFlagsBits = 0;
        v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v31);

        v20 = *(_QWORD *)(v8 + 24);
        *(Swift::String *)(v8 + 16) = v19;
        swift_bridgeObjectRelease(v20);
        v21 = *(void (**)(_OWORD *))v9;
        v22 = *(_QWORD *)(v9 + 8);
        v23 = *(_OWORD *)(v8 + 16);
        v26[0] = *(_OWORD *)v8;
        v26[1] = v23;
        v26[2] = *(_OWORD *)(v8 + 32);
        v27 = *(_QWORD *)(v8 + 48);
        swift_retain(v22);
        sub_1000DCCB0((uint64_t)v26);
        v21(v26);
        sub_1000DCCE4((uint64_t)v26);
        swift_release(v22);
      }
    }
  }
  else
  {
    v25 = sub_1000DA8BC();
    *(_BYTE *)(v1 + v2) = 2;
    sub_10009D738(v25, v24);

  }
}

void sub_1000DD234(double a1, double a2, double a3, double a4)
{
  NSString v8;
  Class isa;

  v8 = String._bridgeToObjectiveC()();
  type metadata accessor for Key(0);
  sub_100017240();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v8, "drawInRect:withAttributes:", isa, a1, a2, a3, a4);

}

void sub_1000DD2EC(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

int64_t sub_1000DD320()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  CGImage *v4;
  CGImage *v5;
  int64_t Height;
  size_t Width;
  int64_t result;
  int64_t v9;
  size_t v10;
  CGColorSpace *DeviceRGB;
  void *v12;
  size_t BitsPerComponent;
  CGContextRef v14;
  int64_t v15;
  int64_t v16;
  double v17;
  CGDataProvider *v18;
  CGDataProvider *v19;
  const __CFData *v20;
  const __CFData *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  CGImageRef v40;
  CGImageRef v41;
  double v42;
  CGRect v43;

  v1 = v0;
  v2 = objc_msgSend(v0, "CGImage");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = (CGImage *)objc_msgSend(v0, "CGImage");
  if (!v4)
    goto LABEL_37;
  v5 = v4;
  Height = CGImageGetHeight(v4);
  Width = CGImageGetWidth(v5);
  result = CGImageGetBytesPerRow(v5);
  v9 = result * Height;
  if ((unsigned __int128)(result * (__int128)Height) >> 64 != (result * Height) >> 63)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v10 = result;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v12 = (void *)swift_slowAlloc(v9, -1);
  BitsPerComponent = CGImageGetBitsPerComponent(v5);
  v14 = CGBitmapContextCreate(v12, Width, Height, BitsPerComponent, v10, DeviceRGB, 2u);

  if (!v14)
  {
LABEL_37:

    return 0;
  }
  v15 = CGImageGetHeight((CGImageRef)v3);
  v16 = CGImageGetWidth((CGImageRef)v3);
  v17 = (double)v16;
  CGContextRef.draw(_:in:byTiling:)(v3, 0, 0.0, 0.0, (double)v16, (double)v15);
  v18 = CGImageGetDataProvider((CGImageRef)v3);
  if (!v18)
  {
LABEL_36:

    goto LABEL_37;
  }
  v19 = v18;
  v20 = CGDataProviderCopyData(v18);
  if (!v20)
  {

    goto LABEL_36;
  }
  v21 = v20;
  result = (int64_t)CFDataGetBytePtr(v20);
  if (result)
  {
    if (v15 < 0)
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v15)
    {
      if (v16 < 0)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = v15;
      v26 = v16;
      while (v24 != v15)
      {
        if (v16)
        {
          v27 = v16 * v24;
          if ((unsigned __int128)(v16 * (__int128)v24) >> 64 != (v16 * v24) >> 63)
            goto LABEL_50;
          v28 = 0;
          while (1)
          {
            v29 = v27 + v28;
            if (__OFADD__(v27, v28))
              break;
            if ((unint64_t)(v29 - 0x2000000000000000) >> 62 != 3)
              goto LABEL_48;
            v30 = *(unsigned __int8 *)(result + 4 * v29);
            if (v28 >= v26)
              v31 = v26;
            else
              v31 = v28;
            if (v23 <= v28)
              v32 = v28;
            else
              v32 = v23;
            v33 = v28 + 1;
            if (v24 >= v25)
              v34 = v25;
            else
              v34 = v24;
            if (v22 <= v24)
              v35 = v24;
            else
              v35 = v22;
            if (v30)
            {
              v22 = v35;
              v23 = v32;
              v25 = v34;
              v26 = v31;
            }
            v28 = v33;
            if (v16 == v33)
              goto LABEL_12;
          }
          __break(1u);
LABEL_48:
          __break(1u);
          break;
        }
LABEL_12:
        if (++v24 == v15)
        {
          v17 = (double)v26;
          v16 = v26;
          goto LABEL_42;
        }
      }
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v22 = 0;
    v23 = 0;
    v25 = 0;
LABEL_42:
    v37 = __OFSUB__(v23, v16);
    v38 = v23 - v16;
    if (v37)
      goto LABEL_53;
    v37 = __OFSUB__(v22, v25);
    v39 = v22 - v25;
    if (v37)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v43.origin.y = (double)v25;
    v43.size.width = (double)v38;
    v43.size.height = (double)v39;
    v43.origin.x = v17;
    v40 = CGImageCreateWithImageInRect((CGImageRef)v3, v43);
    if (v40)
    {
      v41 = v40;
      objc_msgSend(v1, "scale");
      v36 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v41, objc_msgSend(v1, "imageOrientation"), v42);

      return (int64_t)v36;
    }

    goto LABEL_37;
  }
LABEL_56:
  __break(1u);
  return result;
}

void sub_1000DD634(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  id v7;
  double v8;
  double v9;
  id v10;
  id v11;
  double v12;
  uint64_t v13;
  uint64_t inited;
  NSString *v15;
  id v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void **aBlock;
  uint64_t v33;
  void (*v34)(uint64_t, void *);
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;
  char v38[80];

  v6 = a3 * 0.6;
  v7 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", a3 * 0.6);
  v8 = a3 - v6;
  v9 = (a3 - v6) * 0.5;
  v10 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v11 = objc_msgSend(v10, "userInterfaceLayoutDirection");

  if (v11 == (id)1)
    v12 = -(v8 * 0.5);
  else
    v12 = v9;
  v13 = sub_100006A6C(&qword_1001A3C20);
  inited = swift_initStackObject(v13, v38);
  *(_OWORD *)(inited + 16) = xmmword_100131C40;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  *(_QWORD *)(inited + 64) = sub_1000A8A04();
  *(_QWORD *)(inited + 40) = v7;
  v15 = NSFontAttributeName;
  v16 = v7;
  v17 = sub_1000045A4(inited);
  v18 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", a3, a3);
  v19 = swift_allocObject(&unk_10017D208, 72, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(double *)(v19 + 32) = v12;
  *(double *)(v19 + 40) = v9;
  *(double *)(v19 + 48) = a3;
  *(double *)(v19 + 56) = a3;
  *(_QWORD *)(v19 + 64) = v17;
  v20 = swift_allocObject(&unk_10017D230, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_1000DDA28;
  *(_QWORD *)(v20 + 24) = v19;
  v36 = sub_1000240E4;
  v37 = v20;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000DD2EC;
  v35 = &unk_10017D248;
  v21 = _Block_copy(&aBlock);
  v22 = v37;
  swift_bridgeObjectRetain(a2);
  swift_retain(v20);
  v23 = objc_msgSend(v18, "imageWithActions:", v21, swift_release(v22).n128_f64[0]);
  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v20, "", 96, 32, 3, 1);
  swift_release(v20);
  if ((v21 & 1) != 0)
  {
    __break(1u);
    return;
  }
  v31 = v16;
  v24 = (void *)sub_1000DD320();
  if (v24)
  {
    v25 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", a3, a3);
    v26 = swift_allocObject(&unk_10017D280, 40, 7);
    *(_QWORD *)(v26 + 16) = v24;
    *(double *)(v26 + 24) = a3;
    *(double *)(v26 + 32) = a3;
    v27 = swift_allocObject(&unk_10017D2A8, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_1000DDA88;
    *(_QWORD *)(v27 + 24) = v26;
    v36 = sub_10005BAD8;
    v37 = v27;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_1000DD2EC;
    v35 = &unk_10017D2C0;
    v28 = _Block_copy(&aBlock);
    v29 = v37;
    v30 = v24;
    swift_retain(v27);
    objc_msgSend(v25, "imageWithActions:", v28, swift_release(v29).n128_f64[0]);

    _Block_release(v28);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v27, "", 96, 45, 3, 1);
    swift_release(v26);
    swift_release(v19);
    swift_release(v27);
    if ((v30 & 1) == 0)
      return;
    __break(1u);
  }
  swift_release(v19);

}

uint64_t sub_1000DD9FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_1000DDA28()
{
  double *v0;

  sub_1000DD234(v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_1000DDA3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1000DDA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000DDA5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DDA64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_1000DDA88()
{
  uint64_t v0;
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v1 = *(void **)(v0 + 16);
  v2 = *(double *)(v0 + 24);
  v3 = *(double *)(v0 + 32);
  objc_msgSend(v1, "size");
  return objc_msgSend(v1, "drawInRect:", (v2 - v4) * 0.5, (v3 - v5) * 0.5, v4);
}

uint64_t sub_1000DDAE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000DDB00()
{
  void *v0;

  return objc_msgSend(v0, "showConfirmationRing");
}

id sub_1000DDC58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScannerViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1000DDCDC()
{
  void *v0;

  return objc_msgSend(v0, "start");
}

id sub_1000DDCEC()
{
  void *v0;

  return objc_msgSend(v0, "stop");
}

uint64_t sub_1000DDCFC()
{
  return type metadata accessor for ScannerViewController(0);
}

uint64_t type metadata accessor for ScannerViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1001A7F70;
  if (!qword_1001A7F70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScannerViewController);
  return result;
}

uint64_t sub_1000DDD40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for Logger(319, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1001354A8;
    result = swift_updateClassMetadata2(a1, 256, 2, v5, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000DDDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7F80);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7F80);
  if (qword_1001A2ED8 != -1)
    swift_once(&qword_1001A2ED8, sub_100018C6C);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD438);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_1000DDE44()
{
  char *v0;
  void *v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  objc_super v15;

  v1 = v0;
  v15.receiver = v0;
  v15.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v15, "viewDidLoad");
  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC18SharingViewService25AirTagMovieViewController_mainController]);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1000AEB54();
    if (v5)
    {
      v6 = v5;
      v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      v7 = 0;
    }
    objc_msgSend(v1, "setTitle:", v7);

    objc_msgSend(v1, "setDismissalType:", 1);
    *((_BYTE *)v1 + OBJC_IVAR____TtC18SharingViewService25AirTagMovieViewController_shouldSkipEngageMovie) = 1;
    sub_1000897BC(0x27u);
    v14 = v13;
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    objc_msgSend(v1, "showActivityIndicatorWithStatus:", v10);

  }
  else
  {
    if (qword_1001A3130 != -1)
      swift_once(&qword_1001A3130, sub_1000DDDB4);
    v8 = type metadata accessor for Logger(0, v3);
    v9 = sub_10000E8E8(v8, (uint64_t)qword_1001A7F80);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "mainController is nil during viewDidLoad", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t type metadata accessor for AirTagLoadingViewController()
{
  return objc_opt_self(_TtC18SharingViewService27AirTagLoadingViewController);
}

uint64_t sub_1000DE088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A7FC0);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A7FC0);
  if (qword_1001A2ED8 != -1)
    swift_once(&qword_1001A2ED8, sub_100018C6C);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD438);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_1000DE118(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  Swift::String v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  id v27;
  id v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void **v56;
  Class isa;
  void **aBlock;
  uint64_t v59;
  void (*v60)(uint64_t, void *);
  void *v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  objc_super v64;

  v2 = v1;
  v64.receiver = v1;
  v64.super_class = (Class)type metadata accessor for AirTagErrorViewController();
  objc_msgSendSuper2(&v64, "viewWillAppear:", a1 & 1);
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_errorTitle + 8];
  if (v4)
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_errorTitle + 8];
  }
  else
  {
    sub_1000897BC(0x79u);
    v5 = v6;
    v4 = 0;
  }
  swift_bridgeObjectRetain(v4);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v2, "setTitle:", v7);

  v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_message + 8];
  if (v8)
  {
    aBlock = *(void ***)&v2[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_message];
    v59 = v8;
    v9 = swift_bridgeObjectRetain(v8);
    if (IsAppleInternalBuild(v9))
    {
      v10 = OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_error;
      if (*(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_error])
      {
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease(0xE000000000000000);
        v11 = *(_QWORD *)&v2[v10];
        if (v11)
        {
          swift_errorRetain(*(_QWORD *)&v2[v10]);
          v12 = (void *)_convertErrorToNSError(_:)(v11);
          swift_errorRelease(v11);
        }
        else
        {
          v12 = 0;
        }
        NSErrorToOSStatus(v12);

        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        object = v13._object;
        String.append(_:)(v13);
        swift_bridgeObjectRelease(object);
        v15._countAndFlagsBits = 41;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
        v16._countAndFlagsBits = 0xD000000000000017;
        v16._object = (void *)0x800000010013E290;
        String.append(_:)(v16);
        swift_bridgeObjectRelease(0x800000010013E290);
        v8 = v59;
      }
    }
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    objc_msgSend(v2, "setSubtitle:", v17);

  }
  objc_msgSend(v2, "setDismissalType:", 1);
  v18 = *(_QWORD *)&v2[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_defaultBtnTitle + 8];
  v19 = swift_allocObject(&unk_10017D310, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v2);
  swift_bridgeObjectRetain(v18);
  swift_retain(v19);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v62 = sub_1000DED78;
  v63 = v19;
  aBlock = _NSConcreteStackBlock;
  v59 = 1107296256;
  v60 = sub_10001B5D0;
  v61 = &unk_10017D328;
  v21 = _Block_copy(&aBlock);
  v22 = objc_msgSend((id)objc_opt_self(PRXAction), "actionWithTitle:style:handler:", v20, 0, v21);

  _Block_release(v21);
  v23 = v63;
  swift_release(v19);

  v24 = objc_msgSend((id)objc_opt_self(_UIImageSymbolConfiguration), "configurationWithPointSize:weight:", 4, 50.0);
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v25, v24);

  v27 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v26);
  v28 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
  objc_msgSend(v27, "setTintColor:", v28);

  objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v27, "setContentMode:", 1);
  v29 = objc_msgSend(v2, "contentView");
  objc_msgSend(v29, "addSubview:", v27);

  if (v26)
  {
    objc_msgSend(v26, "size");
    v31 = v30;
    v33 = v32;
  }
  else
  {
    v33 = 0.0;
    v31 = 0.0;
  }
  v34 = objc_msgSend(v2, "contentView");
  v35 = objc_msgSend(v34, "mainContentGuide");

  v36 = (void *)objc_opt_self(NSLayoutConstraint);
  v37 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
  v38 = swift_allocObject(v37, 80, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100131CB0;
  v39 = objc_msgSend(v27, "centerXAnchor");
  v40 = objc_msgSend(v35, "centerXAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  *(_QWORD *)(v38 + 32) = v41;
  v42 = objc_msgSend(v27, "centerYAnchor");
  v43 = objc_msgSend(v35, "centerYAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

  *(_QWORD *)(v38 + 40) = v44;
  v45 = objc_msgSend(v27, "heightAnchor");
  v46 = objc_msgSend(v45, "constraintEqualToConstant:", v33);

  *(_QWORD *)(v38 + 48) = v46;
  v47 = objc_msgSend(v27, "widthAnchor");
  v48 = objc_msgSend(v47, "constraintEqualToConstant:", v31);

  *(_QWORD *)(v38 + 56) = v48;
  v49 = objc_msgSend(v27, "topAnchor");
  v50 = objc_msgSend(v35, "topAnchor");
  v51 = objc_msgSend(v49, "constraintGreaterThanOrEqualToAnchor:", v50);

  *(_QWORD *)(v38 + 64) = v51;
  v52 = objc_msgSend(v27, "bottomAnchor");
  v53 = objc_msgSend(v35, "bottomAnchor");
  v54 = objc_msgSend(v52, "constraintLessThanOrEqualToAnchor:", v53);

  *(_QWORD *)(v38 + 72) = v54;
  aBlock = (void **)v38;
  specialized Array._endMutation()(v55);
  v56 = aBlock;
  sub_10000E868();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56);
  objc_msgSend(v36, "activateConstraints:", isa);

}

void sub_1000DE86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t Strong;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = sub_100006A6C(&qword_1001A3618);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 16;
  if (qword_1001A3138 != -1)
    swift_once(&qword_1001A3138, sub_1000DE088);
  v8 = type metadata accessor for Logger(0, v4);
  v9 = sub_10000E8E8(v8, (uint64_t)qword_1001A7FC0);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    v25 = 46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "errorVC \"Ok\" pressed in %ld", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  swift_beginAccess(v7, &v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v15 = (void *)Strong;
    v16 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_mainController);
    if (v16)
    {
      v17 = (void *)v16;
      v18 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
      v19 = swift_allocObject(&unk_10017D360, 24, 7);
      *(_QWORD *)(v19 + 16) = v15;
      v20 = v15;
      sub_1000B313C(5, (uint64_t)v6, (uint64_t)sub_1000DEDBC, v19, 53);

      swift_release(v19);
      sub_10000E92C((uint64_t)v6);
      return;
    }

  }
  v21 = Logger.logObject.getter(Strong);
  v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "mainController nil while initializing primaryAction", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

uint64_t sub_1000DEAEC(uint64_t result)
{
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(result
                                     + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_onDoneAction);
  if (v1)
  {
    v2 = *(_QWORD *)(result + OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_onDoneAction + 8);
    v3 = swift_retain(v2);
    v1(v3);
    return sub_100012F60((uint64_t)v1, v2);
  }
  return result;
}

id sub_1000DEBC0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AirTagErrorViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AirTagErrorViewController()
{
  return objc_opt_self(_TtC18SharingViewService25AirTagErrorViewController);
}

id sub_1000DEC98(uint64_t a1)
{
  char *v1;
  char *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  objc_super v10;

  v3 = &v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_onDoneAction];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_message];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_error] = 0;
  v5 = &v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_errorTitle];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = (uint64_t *)&v1[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_defaultBtnTitle];
  v7 = v1;
  *v6 = sub_1000897BC(0x78u);
  v6[1] = v8;
  swift_unknownObjectWeakInit(&v7[OBJC_IVAR____TtC18SharingViewService25AirTagErrorViewController_mainController], 0);

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for AirTagErrorViewController();
  return objc_msgSendSuper2(&v10, "initWithContentView:", a1);
}

uint64_t sub_1000DED54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000DED78(uint64_t a1)
{
  uint64_t v1;

  sub_1000DE86C(a1, v1);
}

double sub_1000DED80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000DED90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DED98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DEDBC()
{
  uint64_t v0;

  return sub_1000DEAEC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000DEDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Logger(0, a2);
  sub_10000E96C(v2, qword_1001A8030);
  v3 = sub_10000E8E8(v2, (uint64_t)qword_1001A8030);
  if (qword_1001A2ED8 != -1)
    swift_once(&qword_1001A2ED8, sub_100018C6C);
  v4 = sub_10000E8E8(v2, (uint64_t)qword_1001AD438);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v3, v4, v2);
}

void sub_1000DEE54()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  NSString v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  void *v33;
  uint64_t v34;
  id v35;
  NSString v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  void **v63;
  Class isa;
  id v65;
  id v66;
  id v67;
  void **aBlock;
  uint64_t v69;
  void (*v70)(uint64_t, void *);
  void *v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  objc_super v74;

  v74.receiver = v0;
  v74.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v74, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryLarge);
    objc_msgSend(v2, "_setLocalOverrideTraitCollection:", v3);

    v4 = (void *)objc_opt_self(NSBundle);
    v5 = objc_msgSend(v4, "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = String._bridgeToObjectiveC()();
    v8 = sub_100117218(v5, v6, v7);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v10 = v9;

    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    objc_msgSend(v0, "setTitle:", v11);

    v12 = String._bridgeToObjectiveC()();
    v13 = sub_100116484(v12);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

    v16 = objc_msgSend(v4, "mainBundle");
    v17 = String._bridgeToObjectiveC()();
    v18 = String._bridgeToObjectiveC()();
    v19 = sub_100117218(v16, v17, v18);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v21 = v20;
    swift_bridgeObjectRelease(v15);

    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v0, "setSubtitle:", v22);

    objc_msgSend(v0, "setDismissalType:", 1);
    v23 = swift_allocObject(&unk_10017D388, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16, v0);
    swift_retain(v23);
    v24 = String._bridgeToObjectiveC()();
    v72 = sub_1000DFC38;
    v73 = v23;
    aBlock = _NSConcreteStackBlock;
    v69 = 1107296256;
    v70 = sub_10001B5D0;
    v71 = &unk_10017D3A0;
    v25 = _Block_copy(&aBlock);
    v26 = (void *)objc_opt_self(PRXAction);
    v27 = objc_msgSend(v26, "actionWithTitle:style:handler:", v24, 0, v25);

    _Block_release(v25);
    v28 = v73;
    swift_release(v23);
    objc_msgSend(v0, "setDismissButtonAction:", v27, swift_release(v28).n128_f64[0]);

    sub_1000897BC(0x78u);
    v30 = v29;
    v31 = swift_allocObject(&unk_10017D388, 24, 7);
    swift_unknownObjectWeakInit(v31 + 16, v0);
    swift_retain(v31);
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v72 = sub_1000DFC58;
    v73 = v31;
    aBlock = _NSConcreteStackBlock;
    v69 = 1107296256;
    v70 = sub_10001B5D0;
    v71 = &unk_10017D3C8;
    v33 = _Block_copy(&aBlock);
    v67 = objc_msgSend(v26, "actionWithTitle:style:handler:", v32, 0, v33);

    _Block_release(v33);
    v34 = v73;
    swift_release(v31);

    v35 = objc_msgSend((id)objc_opt_self(_UIImageSymbolConfiguration), "configurationWithPointSize:weight:", 4, 50.0);
    v36 = String._bridgeToObjectiveC()();
    v66 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v36, v35);

    v37 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v66);
    v38 = objc_msgSend((id)objc_opt_self(UIColor), "systemRedColor");
    objc_msgSend(v37, "setTintColor:", v38);

    objc_msgSend(v37, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v39 = objc_msgSend(v0, "contentView");
    objc_msgSend(v39, "addSubview:", v37);

    v65 = (id)objc_opt_self(NSLayoutConstraint);
    v40 = sub_100006A6C((uint64_t *)&unk_1001A7CA0);
    v41 = swift_allocObject(v40, 64, 7);
    *(_OWORD *)(v41 + 16) = xmmword_100132270;
    v42 = objc_msgSend(v37, "topAnchor");
    v43 = objc_msgSend(v0, "contentView");
    v44 = objc_msgSend(v43, "mainContentGuide");

    v45 = objc_msgSend(v44, "topAnchor");
    v46 = objc_msgSend(v42, "constraintGreaterThanOrEqualToAnchor:", v45);

    *(_QWORD *)(v41 + 32) = v46;
    v47 = objc_msgSend(v37, "centerXAnchor");
    v48 = objc_msgSend(v0, "contentView");
    v49 = objc_msgSend(v48, "mainContentGuide");

    v50 = objc_msgSend(v49, "centerXAnchor");
    v51 = objc_msgSend(v47, "constraintEqualToAnchor:", v50);

    *(_QWORD *)(v41 + 40) = v51;
    v52 = objc_msgSend(v37, "centerYAnchor");
    v53 = objc_msgSend(v0, "contentView");
    v54 = objc_msgSend(v53, "mainContentGuide");

    v55 = objc_msgSend(v54, "centerYAnchor");
    v56 = objc_msgSend(v52, "constraintEqualToAnchor:", v55);

    *(_QWORD *)(v41 + 48) = v56;
    v57 = objc_msgSend(v37, "bottomAnchor");
    v58 = objc_msgSend(v0, "contentView");
    v59 = objc_msgSend(v58, "mainContentGuide");

    v60 = objc_msgSend(v59, "bottomAnchor");
    v61 = objc_msgSend(v57, "constraintLessThanOrEqualToAnchor:", v60);

    *(_QWORD *)(v41 + 56) = v61;
    aBlock = (void **)v41;
    specialized Array._endMutation()(v62);
    v63 = aBlock;
    sub_10000E868();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v63);
    objc_msgSend(v65, "activateConstraints:", isa);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000DF700(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t Strong;
  void *v15;
  uint64_t ObjectType;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31[3];

  v3 = type metadata accessor for Logger(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + 16;
  if (qword_1001A3140 != -1)
    swift_once(&qword_1001A3140, sub_1000DEDC4);
  v8 = sub_10000E8E8(v3, (uint64_t)qword_1001A8030);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  v9 = swift_retain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v31[0] = v27;
    *(_DWORD *)v13 = 136315138;
    swift_beginAccess(a2 + 16, v30, 0, 0);
    v28 = a2 + 16;
    Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (!Strong)
    {
      swift_release(a2);
      __break(1u);
      return;
    }
    v15 = (void *)Strong;
    ObjectType = swift_getObjectType(Strong);

    v17 = _typeName(_:qualified:)(ObjectType, 0);
    v19 = v18;
    v29 = sub_10001EFA4(v17, v18, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v13 + 4, v13 + 12);
    swift_release_n(a2, 2, v20);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "dismissPressed in %s", v13, 0xCu);
    v21 = v27;
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = v28;
  }
  else
  {

    swift_release_n(a2, 2, v22);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  swift_beginAccess(v7, v31, 0, 0);
  v23 = swift_unknownObjectWeakLoadStrong(v7);
  if (v23)
  {
    v24 = (void *)v23;
    v25 = (void *)swift_unknownObjectWeakLoadStrong(v23 + OBJC_IVAR____TtC18SharingViewService30AirTagRestrictedViewController_mainController);

    if (v25)
    {
      objc_msgSend(v25, "dismiss:", 0);

    }
  }
}

void sub_1000DF9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a2 + 16;
  if (qword_1001A3140 != -1)
    swift_once(&qword_1001A3140, sub_1000DEDC4);
  v3 = type metadata accessor for Logger(0, a2);
  v4 = sub_10000E8E8(v3, (uint64_t)qword_1001A8030);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v15 = 40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Ok button (RestrictedView) pressed in %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_beginAccess(v2, &v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v10 = (void *)Strong;
    v11 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC18SharingViewService30AirTagRestrictedViewController_mainController);
    if (v11)
    {
      v12 = v11;
      -[NSObject dismiss:](v11, "dismiss:", 0);

      goto LABEL_11;
    }

  }
  v12 = Logger.logObject.getter(Strong);
  v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "mainController nil while initializing primaryAction", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }
LABEL_11:

}

uint64_t type metadata accessor for AirTagRestrictedViewController()
{
  return objc_opt_self(_TtC18SharingViewService30AirTagRestrictedViewController);
}

uint64_t sub_1000DFC14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000DFC38(uint64_t a1)
{
  uint64_t v1;

  sub_1000DF700(a1, v1);
}

double sub_1000DFC40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000DFC50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000DFC58(uint64_t a1)
{
  uint64_t v1;

  sub_1000DF9A8(a1, v1);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC18SharingViewServiceP33_FA476C54350427FE32DA4D97B488865519ResourceBundleClass);
}

uint64_t start(int a1, char **a2)
{
  void *v4;
  uint64_t v5;

  v4 = objc_autoreleasePoolPush();
  LogControl("?.*:level=chatty,.*:flags=public");
  v5 = UIApplicationMain(a1, a2, 0, CFSTR("AppDelegate"));
  objc_autoreleasePoolPop(v4);
  return v5;
}

id sub_1000E04AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_1000E0E70()
{
  return (id)qword_1001AD310;
}

Class sub_1000E0E7C()
{
  Class result;

  if (qword_1001AD318 != -1)
    dispatch_once(&qword_1001AD318, &stru_10017D3F0);
  result = objc_getClass("ASDSystemAppRequest");
  qword_1001AD310 = (uint64_t)result;
  off_1001A8250 = (uint64_t (*)())sub_1000E0E70;
  return result;
}

void sub_1000E0ED8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[5];

  v3 = a2;
  if (v3)
  {
    if (dword_1001A81E0 <= 90
      && (dword_1001A81E0 != -1 || _LogCategory_Initialize(&dword_1001A81E0, 90)))
    {
      LogPrintF(&dword_1001A81E0, "-[HomeKitDeviceDetectedStartViewController _restoreHomeApp]_block_invoke", 90, "### Restore Home app failed: %{error}\n", v3);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000E0FF0;
    block[3] = &unk_10017E1F0;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else if (dword_1001A81E0 <= 30
         && (dword_1001A81E0 != -1 || _LogCategory_Initialize(&dword_1001A81E0, 30)))
  {
    LogPrintF(&dword_1001A81E0, "-[HomeKitDeviceDetectedStartViewController _restoreHomeApp]_block_invoke", 30, "Restored Home app\n");
  }

}

id sub_1000E0FF0(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 49) = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 41), "setEnabled:", 1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 57), "setHidden:", 1);
}

void sub_1000E1048(id a1)
{
  qword_1001AD320 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon", 2);
}

id sub_1000E1070(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_launchHomeApp");
}

void sub_1000E2200(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1000E2B28(id a1, BOOL a2, NSError *a3)
{
  _BOOL4 v3;
  NSError *v4;
  int v5;
  id v6;
  void *v7;
  void *v8;
  NSError *v9;

  v3 = a2;
  v4 = a3;
  v9 = v4;
  if (dword_1001A8258 <= 30)
  {
    if (dword_1001A8258 != -1 || (v5 = _LogCategory_Initialize(&dword_1001A8258, 30), v4 = v9, v5))
    {
      LogPrintF(&dword_1001A8258, "-[SiriNotificationsSetupViewController logDismissEventForAnnounceMessagesToDuet]_block_invoke", 30, "SiriNotifications Duet completion: %d, %{error}\n", v3, v4);
      v4 = v9;
    }
  }
  if (v3)
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", CFSTR("com.apple.siri.spoken-messages.opt-in.dismissed"), CFSTR("signalIdentifier"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", CFSTR("com.apple.Sharing"), CFSTR("sourceBundleIdentifier"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath keyPathWithKey:](_CDContextualKeyPath, "keyPathWithKey:", CFSTR("/discoverability/signals/dataDictionary")));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[_CDClientContext userContext](_CDClientContext, "userContext"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, v7);

    v4 = v9;
  }

}

void sub_1000E2C4C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleContinueButton");

}

void sub_1000E2C78(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleDoNotAnnounceButton");

}

void sub_1000E2CA4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "handleDismissButton");

}

id sub_1000E59E4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleVisualAuthEvent:", a2);
}

id sub_1000E59F0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleVisualAuthScannedCode:", a2);
}

void sub_1000E59FC(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "view"));
  objc_msgSend(v1, "setHidden:", 1);

}

const char *sub_1000E5A3C(int a1)
{
  const char *result;

  if (a1 > 299)
  {
    if (a1 <= 799)
    {
      if (a1 <= 519)
      {
        if (a1 <= 410)
        {
          if (a1 <= 399)
          {
            if (a1 == 300)
              return "BackupProgress";
            if (a1 == 310)
              return "SyncProgress";
          }
          else
          {
            switch(a1)
            {
              case 400:
                return "StopSetup";
              case 401:
                return "PINPair";
              case 410:
                return "MigrateStart";
            }
          }
        }
        else if (a1 > 430)
        {
          switch(a1)
          {
            case 431:
              return "eSimExternal2FAStop";
            case 500:
              return "SiriWelcome";
            case 510:
              return "SiriDialogA";
          }
        }
        else
        {
          switch(a1)
          {
            case 411:
              return "MigrateStop";
            case 420:
              return "FileTransferReady";
            case 430:
              return "eSimExternal2FAStart";
          }
        }
      }
      else if (a1 > 559)
      {
        if (a1 > 599)
        {
          switch(a1)
          {
            case 600:
              return "SiriSkipDemo";
            case 700:
              return "StopSetupLEDs";
            case 710:
              return "AudioPasscodeEnded";
          }
        }
        else
        {
          switch(a1)
          {
            case 560:
              return "SiriDialogCMusic";
            case 570:
              return "SiriDialogCNews";
            case 580:
              return "SiriDialogCWeather";
          }
        }
      }
      else if (a1 > 549)
      {
        switch(a1)
        {
          case 550:
            return "SiriDialogBWeather";
          case 555:
            return "SiriDialogBClock";
          case 558:
            return "SiriDialogBMusic";
        }
      }
      else
      {
        switch(a1)
        {
          case 520:
            return "SiriDialogBStart";
          case 530:
            return "SiriDialogBHome";
          case 540:
            return "SiriDialogBNews";
        }
      }
      return "?";
    }
    if (a1 > 999)
    {
      if (a1 <= 1099)
      {
        if (a1 == 1000)
          return "SecureIntentStart";
        if (a1 == 1001)
          return "SecureIntentFinish";
      }
      else
      {
        switch(a1)
        {
          case 1100:
            return "OneTimeCodeDetected";
          case 2000:
            return "DependentStart";
          case 2001:
            return "DependentEnd";
        }
      }
      return "?";
    }
    switch(a1)
    {
      case 900:
        result = "SU-No-SetupScanAttempt";
        break;
      case 901:
        result = "SU-No-SetupStatusUpdate";
        break;
      case 902:
        result = "SU-No-SetupWipeWifi";
        break;
      case 903:
        result = "SU-No-SetupCancelled";
        break;
      case 904:
        result = "SU-No-SetupObliterate";
        break;
      case 905:
        result = "SU-No-SetupCannotCancel";
        break;
      case 906:
        result = "SysDrop AirDrop Event";
        break;
      case 907:
        result = "SysDrop Sysdiagnose Event";
        break;
      case 908:
        result = "SysDrop Cancel Event";
        break;
      case 909:
        result = "File Transfer Progress Event";
        break;
      case 910:
        result = "File Transfer Completed Event";
        break;
      case 911:
        result = "iOSWiFiSetup";
        break;
      case 912:
        result = "HKPrimaryResidentSSIDFetchStart";
        break;
      default:
        switch(a1)
        {
          case 800:
            result = "AuthAccountsStart";
            break;
          case 803:
            result = "AuthAccountsiCloudProgress";
            break;
          case 804:
            result = "AuthAccountsStoreProgress";
            break;
          case 805:
            result = "AuthAccountsGameCenterProgress";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  else if (a1 > 129)
  {
    if (a1 > 249)
    {
      switch(a1)
      {
        case 260:
          result = "TVLSStart";
          break;
        case 261:
        case 262:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 271:
        case 273:
        case 275:
          return "?";
        case 264:
          result = "TVLSFinish";
          break;
        case 270:
          result = "TVLSEstimateStart";
          break;
        case 272:
          result = "TVLSEstimateFinal";
          break;
        case 274:
          result = "TVLSEstimateFailed";
          break;
        case 276:
          result = "TVLSTryAgain";
          break;
        case 277:
          result = "TVLSToneBegan";
          break;
        case 278:
          result = "TVLCalStart";
          break;
        case 279:
          result = "TVLCalStep";
          break;
        case 280:
          result = "TVLCalFailed";
          break;
        case 281:
          result = "TVLCalTryAgain";
          break;
        case 282:
          result = "TVLCalFinal";
          break;
        default:
          if (a1 != 250)
            return "?";
          result = "ReportSuccess";
          break;
      }
    }
    else
    {
      if (a1 <= 219)
      {
        if (a1 <= 149)
        {
          if (a1 == 130)
            return "WiFiPoweredOff";
          if (a1 == 140)
            return "RecognizeVoice";
        }
        else
        {
          switch(a1)
          {
            case 150:
              return "SiriForEveryone";
            case 200:
              return "WiFiStart";
            case 210:
              return "ActivationStart";
          }
        }
        return "?";
      }
      switch(a1)
      {
        case 230:
          return "HomeKitStart";
        case 231:
        case 232:
        case 233:
        case 235:
        case 237:
        case 238:
        case 239:
          return "?";
        case 234:
          return "HomeKitSetupStart";
        case 236:
          return "CDPSetupStart";
        case 240:
          return "BuddyStarting";
        case 241:
          return "BuddyProgress";
        case 242:
          return "BuddyFinished";
        default:
          if (a1 == 220)
          {
            result = "iCloudStart";
          }
          else
          {
            if (a1 != 224)
              return "?";
            result = "AppleIDSetupStart";
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 79)
    {
      if (a1 > 49)
      {
        if (a1 > 64)
        {
          if (a1 == 65)
            return "SecurityAPCLoopStart";
          if (a1 == 70)
            return "SecurityFinish";
        }
        else
        {
          if (a1 == 50)
            return "PreAuthFinish";
          if (a1 == 60)
            return "SecurityStart";
        }
      }
      else
      {
        if (a1 > 29)
        {
          switch(a1)
          {
            case 30:
              result = "Error";
              break;
            case 31:
              result = "SessionStarted";
              break;
            case 32:
              result = "SessionEnded";
              break;
            case 33:
              result = "SessionSecured";
              break;
            case 35:
              result = "ConnectStart";
              break;
            case 40:
              result = "PreAuthStart";
              break;
            default:
              return "?";
          }
          return result;
        }
        switch(a1)
        {
          case 0:
            return "Invalid";
          case 10:
            return "Start";
          case 20:
            return "Final";
        }
      }
      return "?";
    }
    if (a1 > 119)
    {
      switch(a1)
      {
        case 'x':
          return "CheckingiCloud";
        case 'z':
          return "CheckingAppleMusic";
        case '|':
          return "CheckingAccount";
      }
      return "?";
    }
    switch(a1)
    {
      case 'P':
        result = "BasicConfigStart";
        break;
      case 'Z':
        result = "BasicConfigFinish";
        break;
      case '\\':
        result = "StepStart";
        break;
      case '^':
        result = "StepFinish";
        break;
      case '_':
        result = "PreFinish";
        break;
        result = "SetupFinished";
        break;
      case 'a':
        result = "SetupResumed";
        break;
      case 'b':
        result = "SetupSuspend";
        break;
      case 'c':
        result = "SetupPeerSWUpdate";
        break;
      case 'd':
        result = "Finished";
        break;
      default:
        return "?";
    }
  }
  return result;
}

void sub_1000E61B8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "containerView"));
  objc_msgSend(v1, "reactivate");

}

id sub_1000E61F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sessionHandleProgress:info:", a2, a3);
}

id sub_1000E6204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1001A82C8 <= 30 && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 30)))
    LogPrintF(&dword_1001A82C8, "-[iOSSetupMainController _sessionStart:]_block_invoke_2", 30, "Prompt for PIN: 0x%X, %d throttle seconds\n", a2, a3);
  return _objc_msgSend(*(id *)(a1 + 32), "showAuthUIWithFlags:throttleSeconds:animated:", a2, a3, 1);
}

void sub_1000E629C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A82C8 <= 50 && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 50)))
    LogPrintF(&dword_1001A82C8, "-[iOSSetupMainController _handleMigrateStartDemo]_block_invoke", 50, "FileTransfer completed: %{error}\n", v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "sendAppEvent:", &off_1001835F8);

}

void sub_1000E6340(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (objc_msgSend(v6, "type") == 1)
  {
    if (dword_1001A82C8 <= 50
      && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 50)))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "targetID"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerPublicKey"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selfPublicKey"));
      LogPrintF(&dword_1001A82C8, "-[iOSSetupMainController _handleMigrateStartDemo]_block_invoke_2", 50, "FileTransfer session start: TargetID %@, PPK <%.8@>, SPK <%.8@>\n", v3, v4, v5);

    }
  }
  else if (dword_1001A82C8 <= 50
         && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 50)))
  {
    LogPrintF(&dword_1001A82C8, "-[iOSSetupMainController _handleMigrateStartDemo]_block_invoke_2", 50, "FileTransfer progress: %@\n", v6);
  }

}

void sub_1000E646C(id a1, RPFileTransferItem *a2, id a3)
{
  void (**v4)(id, _QWORD);
  RPFileTransferItem *v5;

  v5 = a2;
  v4 = (void (**)(id, _QWORD))a3;
  if (dword_1001A82C8 <= 50 && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 50)))
    LogPrintF(&dword_1001A82C8, "-[iOSSetupMainController _handleMigrateStartDemo]_block_invoke_3", 50, "FileTransfer received item: %@\n", v5);
  v4[2](v4, 0);

}

id sub_1000E6510(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

void sub_1000E66FC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A82C8 <= 30 && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 30)))
    LogPrintF(&dword_1001A82C8, "-[iOSSetupBaseViewController dismissWithType:]_block_invoke_2", 30, "Exit Setup alert exit button\n");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "dismiss:", *(unsigned int *)(a1 + 40));

}

void sub_1000E6794(id a1, UIAlertAction *a2)
{
  UIAlertAction *v2;
  UIAlertAction *v3;
  int v4;
  UIAlertAction *v5;

  v2 = a2;
  v3 = v2;
  if (dword_1001A82C8 <= 30
    && ((v5 = v2, dword_1001A82C8 != -1) || (v4 = _LogCategory_Initialize(&dword_1001A82C8, 30), v3 = v5, v4)))
  {
    LogPrintF(&dword_1001A82C8, "-[iOSSetupBaseViewController dismissWithType:]_block_invoke", 30, "Exit Setup alert cancel button\n");

  }
  else
  {

  }
}

void sub_1000E7784(uint64_t a1, int a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  if (a2 || MKBGetDeviceLockState(0) - 1 >= 2)
  {
    if (dword_1001A82C8 <= 30
      && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 30)))
    {
      LogPrintF(&dword_1001A82C8, "-[iOSSetupStartViewController handleStartButton:]_block_invoke_2", 30, "Start button asking daemon to restart us after unlock\n");
    }
    v3 = objc_alloc_init((Class)SFClient);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000E7934;
    v6[3] = &unk_10017D570;
    v4 = *(_QWORD *)(a1 + 40);
    v7 = v3;
    v8 = v4;
    v5 = v3;
    objc_msgSend(v5, "retriggerProximitySetup:", v6);

  }
  else
  {
    if (dword_1001A82C8 <= 30
      && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 30)))
    {
      LogPrintF(&dword_1001A82C8, "-[iOSSetupStartViewController handleStartButton:]_block_invoke_2", 30, "Start button unlock canceled\n");
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "dismiss:", 10);
    objc_msgSend(UIApp, "endBackgroundTask:", *(_QWORD *)(a1 + 40));
  }
}

id sub_1000E78F4(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showAuthUIWithFlags:throttleSeconds:animated:", 0, 0xFFFFFFFFLL, 1);
}

void sub_1000E7934(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A82C8 <= 30 && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 30)))
    LogPrintF(&dword_1001A82C8, "-[iOSSetupStartViewController handleStartButton:]_block_invoke_3", 30, "Retrigger completed: %{error}\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  objc_msgSend(UIApp, "endBackgroundTask:", *(_QWORD *)(a1 + 40));

}

void sub_1000E79D8(id a1)
{
  if (dword_1001A82C8 <= 30 && (dword_1001A82C8 != -1 || _LogCategory_Initialize(&dword_1001A82C8, 30)))
    LogPrintF(&dword_1001A82C8, "-[iOSSetupStartViewController handleStartButton:]_block_invoke", 30, "Unlock background task expired\n");
}

id sub_1000E8434(uint64_t a1)
{
  unsigned int v2;
  id *v3;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("123456"));
  v3 = *(id **)(a1 + 48);
  if (v2)
    return objc_msgSend(v3[3], "showFinishUI");
  else
    return objc_msgSend(v3, "showWithFlags:throttleSeconds:", 0x10000, 0xFFFFFFFFLL);
}

void sub_1000E8494(uint64_t a1)
{
  double MidX;
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  CGRect v8;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v7, "bounds");
  MidX = CGRectGetMidX(v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v3, "center");
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v6, "setCenter:", MidX, v5);

}

void sub_1000E851C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_1000E854C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "length");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 49), "digits"));
  v5 = objc_msgSend(v4, "count");

  if (v3 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_handlePINEntered:", v6);

}

id sub_1000E8B38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id sub_1000E9068(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showBackupSyncUI:info:", 300, 0);
}

id sub_1000E9AAC(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 40), "_handleTestTimerFired");
}

void sub_1000EB7B0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (*(_BYTE *)(a1 + 48))
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i), "animationDidStart");
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v4);
    }

  }
  if (dword_1001A8338 <= 10)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(v7 + 104);
    if (dword_1001A8338 != -1)
    {
LABEL_12:
      LogPrintF(&dword_1001A8338, "-[BroadwayCardView notifyObserversWithCommandBuffer:]_block_invoke", 10, "%s _videoCurrentFrame:%d, videoLastFrame:%d", "-[BroadwayCardView notifyObserversWithCommandBuffer:]_block_invoke", *(_QWORD *)(v7 + 112), v8 - 1);
      return;
    }
    if (_LogCategory_Initialize(&dword_1001A8338, 10))
    {
      v7 = *(_QWORD *)(a1 + 40);
      goto LABEL_12;
    }
  }
}

void sub_1000EB924(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000EB98C;
  block[3] = &unk_10017E1F0;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000EB98C(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), "animationDidComplete", (_QWORD)v6);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_1000EBA74(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void sub_1000EBA84(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v3 = a2;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "animationKeys"));
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "animationPlayerForKey:", v8));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "animation"));
        objc_msgSend(v10, "duration");
        v12 = v11;
        v13 = *(double *)(*(_QWORD *)(a1 + 32) + 96);
        if (v13 != v12 && dword_1001A8338 <= 50)
        {
          if (dword_1001A8338 != -1)
            goto LABEL_9;
          if (_LogCategory_Initialize(&dword_1001A8338, 50))
          {
            v13 = *(double *)(*(_QWORD *)(a1 + 32) + 96);
LABEL_9:
            LogPrintF(&dword_1001A8338, "-[BroadwayCardView setVideoURL:sceneURL:]_block_invoke", 50, "Model animation is %.3fs long (compared to %.3fs for the video)", v12, v13);
          }
        }
        objc_msgSend(v10, "setUsesSceneTimeBase:", 1);
        objc_msgSend(v10, "setRepeatCount:", 0.0);
        objc_msgSend(v3, "removeAnimationForKey:", v8);
        objc_msgSend(v3, "addAnimation:forKey:", v10, v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v5 = v14;
    }
    while (v14);
  }

  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "geometry"));
  v16 = (void *)v15;
  if (v15)
  {
    v17 = *(_QWORD *)(a1 + 32);
    if (v15 != *(_QWORD *)(v17 + 64))
    {
      objc_storeStrong((id *)(v17 + 40), a2);
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), v16);
    }
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "camera"));
  if (v18)
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), a2);

}

id sub_1000ECB00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

void sub_1000ECB08(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A8408 <= 60 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 60)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController viewDidDisappear:]_block_invoke", 60, "### XPC agent UI invalidate XPC error: %{error}\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_1000ECB98(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController viewDidDisappear:]_block_invoke_2", 30, "XPC agent UI invalidated: %{error}\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_1000EDB68(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderScanViewController updateButtonText:]_block_invoke", 30, "Main button\n");
  objc_msgSend(*(id *)(a1 + 32), "dismiss:", 8);

}

void sub_1000EDBF4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 32);
  if (v2)
  {
    v4 = v2;
    dispatch_source_cancel(v4);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = 0;

    v1 = *(_QWORD *)(a1 + 32);
  }
  WeakRetained = objc_loadWeakRetained((id *)(v1 + 40));
  objc_msgSend(WeakRetained, "dismiss:", 8);

}

void sub_1000EDC78(uint64_t a1)
{
  _QWORD block[4];
  id v3;

  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderScanViewController nfcTagScanned]_block_invoke", 30, "Finished playing nfc sound\n");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000EDEC8;
  block[3] = &unk_10017E1F0;
  v3 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000EDD3C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  dispatch_source_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD handler[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 24) != 20)
  {
    v3 = *(void **)(v1 + 32);
    if (v3)
    {
      v4 = v3;
      dispatch_source_cancel(v4);
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;

    }
    v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = v7;

    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(NSObject **)(v10 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000EDE40;
    handler[3] = &unk_10017E1F0;
    handler[4] = v10;
    dispatch_source_set_event_handler(v11, handler);
    SFDispatchTimerSet(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), 2.5, -1.0, -4.0);
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 32));
  }
}

id sub_1000EDE40(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  if (v3)
  {
    v4 = v3;
    dispatch_source_cancel(v4);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = 0;

    v2 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v2 + 8), "setColorMode:animated:", 0, 1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setState:animated:completionHandler:", 9, 1, 0);
}

id sub_1000EDEC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "uiOperationEnd");
}

void sub_1000EDED0(id a1)
{
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderScanViewController showFailureUI]_block_invoke", 30, "Finished playing nfc sound\n");
}

void sub_1000EDF30(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderScanViewController viewWillAppear:]_block_invoke", 30, "Main button\n");
  objc_msgSend(*(id *)(a1 + 32), "dismiss:", 8);

}

id sub_1000EDFBC(uint64_t a1)
{
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController configureWithContext:completion:]_block_invoke", 30, "XPC interrupted\n");
  return _objc_msgSend(*(id *)(a1 + 32), "dismissIfIdle");
}

id sub_1000EE02C(uint64_t a1)
{
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController configureWithContext:completion:]_block_invoke_2", 30, "XPC invalidated\n");
  return _objc_msgSend(*(id *)(a1 + 32), "dismissIfIdle");
}

void sub_1000EE09C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (dword_1001A8408 <= 30 && (dword_1001A8408 != -1 || _LogCategory_Initialize(&dword_1001A8408, 30)))
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController configureWithContext:completion:]_block_invoke_3", 30, "XPC agent started: %{error}\n", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "remoteObjectProxyWithErrorHandler:", &stru_10017D628));
  objc_msgSend(v3, "uiActivatedWithCompletion:", &stru_10017D648);

}

void sub_1000EE158(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1001A8408 <= 60)
    {
      v6 = v2;
      if (dword_1001A8408 != -1 || (v4 = _LogCategory_Initialize(&dword_1001A8408, 60), v3 = v6, v4))
      {
        LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController configureWithContext:completion:]_block_invoke_5", 60, "### UI activate failed: %{error}\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1001A8408 <= 30)
  {
    v6 = 0;
    if (dword_1001A8408 != -1 || (v5 = _LogCategory_Initialize(&dword_1001A8408, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController configureWithContext:completion:]_block_invoke_5", 30, "UI activated\n");
      goto LABEL_8;
    }
  }

}

void sub_1000EE22C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (dword_1001A8408 <= 60
    && ((v5 = v2, dword_1001A8408 != -1) || (v4 = _LogCategory_Initialize(&dword_1001A8408, 60), v3 = v5, v4)))
  {
    LogPrintF(&dword_1001A8408, "-[NFCTagReaderMainController configureWithContext:completion:]_block_invoke_4", 60, "### UI activate failed: %{error}\n", v3);

  }
  else
  {

  }
}

void sub_1000EEC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

id sub_1000F0AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sessionHandleProgress:info:", a2, a3);
}

id sub_1000F0AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1001A8538 <= 30 && (dword_1001A8538 != -1 || _LogCategory_Initialize(&dword_1001A8538, 30)))
    LogPrintF(&dword_1001A8538, "-[PasswordSharingViewControllerProxy _sessionStart]_block_invoke_2", 30, "Prompt for PIN: 0x%X, %d throttle seconds\n", a2, a3);
  return _objc_msgSend(*(id *)(a1 + 32), "showAuthUIWithFlags:throttleSeconds:animated:", a2, a3, 1);
}

id sub_1000F0B94(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

id sub_1000F0BA0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceLost:", a2);
}

id sub_1000F0BAC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

void sub_1000F0BB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v3 = a2;
  if (v3)
  {
    if (dword_1001A8538 <= 30
      && (dword_1001A8538 != -1 || _LogCategory_Initialize(&dword_1001A8538, 30)))
    {
      LogPrintF(&dword_1001A8538, "-[PasswordSharingViewControllerProxy _deviceDiscoveryEnsureStarted]_block_invoke_4", 30, "### Discovery start failed: %@\n", v3);
    }
    goto LABEL_31;
  }
  if (dword_1001A8538 <= 30 && (dword_1001A8538 != -1 || _LogCategory_Initialize(&dword_1001A8538, 30)))
    LogPrintF(&dword_1001A8538, "-[PasswordSharingViewControllerProxy _deviceDiscoveryEnsureStarted]_block_invoke_4", 30, "Discovery started\n");
  v10[0] = CFSTR("scanRate");
  v4 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "scanRate");
  if (v4 <= 19)
  {
    v5 = "Invalid";
    switch(v4)
    {
      case 0:
        goto LABEL_28;
      case 1:
        v5 = "BackgroundOld";
        break;
      case 2:
        v5 = "NormalOld";
        break;
      case 3:
        v5 = "HighOld";
        break;
      case 4:
        v5 = "AggressiveOld";
        break;
      case 10:
        v5 = "Background";
        break;
      default:
        goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (v4 > 39)
  {
    if (v4 == 40)
    {
      v5 = "High";
      goto LABEL_28;
    }
    if (v4 == 50)
    {
      v5 = "Aggressive";
      goto LABEL_28;
    }
LABEL_27:
    v5 = "?";
    goto LABEL_28;
  }
  if (v4 == 20)
  {
    v5 = "Normal";
    goto LABEL_28;
  }
  if (v4 != 30)
    goto LABEL_27;
  v5 = "HighNormal";
LABEL_28:
  v6 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  v7 = (void *)v6;
  v8 = CFSTR("?");
  if (v6)
    v8 = (const __CFString *)v6;
  v10[1] = CFSTR("state");
  v11[0] = v8;
  v11[1] = CFSTR("Start");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  SFPowerLogEvent(CFSTR("WiFiPasswordSharing"), v9);

LABEL_31:
}

id sub_1000F0E20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_1000F0E28(uint64_t a1)
{
  if (dword_1001A8538 <= 30 && (dword_1001A8538 != -1 || _LogCategory_Initialize(&dword_1001A8538, 30)))
    LogPrintF(&dword_1001A8538, "-[PasswordSharingViewControllerProxy activateTouchDelayTimer]_block_invoke", 30, "Disabling touch delay timer\n");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 131) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "invalidateTouchDelayTimer");
}

uint64_t sub_1000F0EA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000F0EB8(uint64_t a1)
{

}

void sub_1000F0EC0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v8;
  id v9;

  v9 = a2;
  v8 = a4;
  if (v8)
  {
    if (dword_1001A8538 <= 60
      && (dword_1001A8538 != -1 || _LogCategory_Initialize(&dword_1001A8538, 60)))
    {
      LogPrintF(&dword_1001A8538, "-[PasswordSharingViewControllerProxy viewWillAppear:]_block_invoke", 60, "### Error getting display string: %@\n", v8, v9);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  }
  if (a3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

id sub_1000F1D30(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showDoneUI:", 0);
}

void sub_1000F56B8(void *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  id v7;

  v7 = a1;
  v3 = a2;
  if ((objc_msgSend(v3, "isBeingPresented") & 1) == 0
    && (objc_msgSend(v3, "isBeingDismissed") & 1) == 0
    && (objc_msgSend(v3, "isMovingToParentViewController") & 1) == 0
    && (objc_msgSend(v3, "isMovingFromParentViewController") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "viewControllers"));
    v5 = objc_msgSend(v4, "containsObject:", v3);

    if ((v5 & 1) != 0)
      v6 = objc_msgSend(v7, "popToViewController:animated:", v3, 1);
    else
      objc_msgSend(v7, "pushViewController:animated:", v3, 1);
  }

}

void sub_1000F5DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v11 - 208));
  _Unwind_Resume(a1);
}

void sub_1000F613C(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "colorCalibratorSetupSession"));
  objc_msgSend(v1, "tryAgain");

}

void sub_1000F6184(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleTryAgainButton");

}

void sub_1000F61B0(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupTryAgainViewController viewDidLoad]_block_invoke_2", 30, "User selected to cancel color balance\n");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleDismissButton");

}

void sub_1000F6738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

void sub_1000F6B9C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainController"));
  v3 = objc_msgSend(v2, "testFlags");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainController"));
  v5 = v4;
  if ((v3 & 2) != 0)
    objc_msgSend(v4, "showTryAgainUI");
  else
    objc_msgSend(v4, "showDoneUI:completed:", 0, 1);

}

void sub_1000F6C14(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupProgressViewController viewDidLoad]_block_invoke", 30, "User selected to cancel color balance\n");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleDismissButton");

}

void sub_1000F71C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a31);
  _Unwind_Resume(a1);
}

void sub_1000F7334(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupPreparingViewController viewDidLoad]_block_invoke", 30, "User selected to cancel color balance\n");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleDismissButton");

}

void sub_1000F78FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 192));
  _Unwind_Resume(a1);
}

void sub_1000F7D34(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleDismissButton");

}

id sub_1000F7D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sessionHandleProgress:info:", a2, a3);
}

id sub_1000F7D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupMainController _sessionStart:]_block_invoke_2", 30, "Prompt for PIN: 0x%X, %d throttle seconds\n", a2, a3);
  return _objc_msgSend(*(id *)(a1 + 32), "showAuthUIWithFlags:throttleSeconds:", a2, a3);
}

void sub_1000F7E04(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupMainController dismissAnimated:reenableProxCard:completion:]_block_invoke", 30, "Re-enable prox card: TVColorCalibration, %{error}\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

id sub_1000F7E94(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

void sub_1000F8498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 192));
  _Unwind_Resume(a1);
}

void sub_1000F86EC(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupUnsupportedViewController viewDidLoad]_block_invoke", 30, "User selected to cancel color balance\n");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleDismissButton");

}

void sub_1000F8C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(&a31);
  _Unwind_Resume(a1);
}

void sub_1000F926C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleContinueButton");

}

void sub_1000F9298(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;

  v4 = a2;
  if (dword_1001A8668 <= 30 && (dword_1001A8668 != -1 || _LogCategory_Initialize(&dword_1001A8668, 30)))
    LogPrintF(&dword_1001A8668, "-[TVLatencyColorimeterSetupStartViewController viewDidLoad]_block_invoke_2", 30, "User selected not now for color balance\n");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleDismissButton");

}

void sub_1000F9A48(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  id v4;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("1234"));
  v3 = *(void **)(a1 + 48);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mainController"));
    objc_msgSend(v4, "showProgressUI");

  }
  else
  {
    objc_msgSend(v3, "showWithFlags:throttleSeconds:", 0x10000, 0xFFFFFFFFLL);
  }
}

void sub_1000F9ABC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "length");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 49), "digits"));
  v5 = objc_msgSend(v4, "count");

  if (v3 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_handlePINEntered:", v6);

}

void sub_1000FA584(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  if (dword_1001A86D8 <= 30 && (dword_1001A86D8 != -1 || _LogCategory_Initialize(&dword_1001A86D8, 30)))
    LogPrintF(&dword_1001A86D8, "-[PINPairMainController _startPairing:]_block_invoke", 30, "Pairing completed: %{error}\n", v5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "invalidate");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0;

  objc_msgSend(*(id *)(a1 + 32), "showDoneUI:", NSErrorToOSStatus(v5));
}

id sub_1000FA648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1001A86D8 <= 30 && (dword_1001A86D8 != -1 || _LogCategory_Initialize(&dword_1001A86D8, 30)))
    LogPrintF(&dword_1001A86D8, "-[PINPairMainController _startPairing:]_block_invoke_2", 30, "Prompt for PIN: 0x%X, %d throttle seconds\n", a2, a3);
  return _objc_msgSend(*(id *)(a1 + 32), "showAuthUIWithFlags:throttleSeconds:", a2, a3);
}

id sub_1000FA6DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_1000FAD68(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showAuthUIWithFlags:throttleSeconds:", 0, 0xFFFFFFFFLL);
}

id sub_1000FB724(uint64_t a1)
{
  uint64_t v2;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  if (!objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("1234")))
    return objc_msgSend(*(id *)(a1 + 48), "showWithFlags:throttleSeconds:", 0x10000, 0xFFFFFFFFLL);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "testFlags") & 2) != 0)
    v2 = 4294960574;
  else
    v2 = 0;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 24), "showDoneUI:", v2);
}

void sub_1000FB7AC(uint64_t a1)
{
  double MidX;
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  CGRect v8;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v7, "bounds");
  MidX = CGRectGetMidX(v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v3, "center");
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v6, "setCenter:", MidX, v5);

}

void sub_1000FB834(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_1000FB864(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "length");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 41), "digits"));
  v5 = objc_msgSend(v4, "count");

  if (v3 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_handlePINEntered:", v6);

}

id sub_1000FC000(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 0.0);
}

id sub_1000FC018(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "setAlpha:", 1.0);
}

id sub_1000FDD7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handlePasswordPicked:", *(_QWORD *)(a1 + 40));
}

id sub_1000FDD88()
{
  return (id)qword_1001AD328;
}

Class sub_1000FDD94()
{
  Class result;

  if (qword_1001AD330 != -1)
    dispatch_once(&qword_1001AD330, &stru_10017D758);
  result = objc_getClass("_SFAppAutoFillPasswordViewController");
  qword_1001AD328 = (uint64_t)result;
  off_1001A87B8 = (uint64_t (*)())sub_1000FDD88;
  return result;
}

id *sub_1000FDDF0(id *result, int a2)
{
  id *v3;
  const char *v4;

  v3 = result;
  if (dword_1001A8748 <= 30)
  {
    if (dword_1001A8748 != -1 || (result = (id *)_LogCategory_Initialize(&dword_1001A8748, 30), (_DWORD)result))
    {
      v4 = "no";
      if (a2)
        v4 = "yes";
      result = (id *)LogPrintF(&dword_1001A8748, "-[PasswordPickerMainController viewDidAppear:]_block_invoke", 30, "Password picker authenticate to present: %s", v4);
    }
  }
  if (a2)
    return (id *)objc_msgSend(v3[4], "presentViewController:animated:completion:", *((_QWORD *)v3[4] + 11), 1, &stru_10017D738);
  return result;
}

void sub_1000FDEB4(id a1)
{
  if (dword_1001A8748 <= 30 && (dword_1001A8748 != -1 || _LogCategory_Initialize(&dword_1001A8748, 30)))
    LogPrintF(&dword_1001A8748, "-[PasswordPickerMainController viewDidAppear:]_block_invoke_2", 30, "Password picker completed presentation\n");
}

void sub_1000FDF14(id a1)
{
  qword_1001AD338 = (uint64_t)dlopen("/System/Library/Frameworks/SafariServices.framework/SafariServices", 2);
}

void sub_1000FDF3C(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1001A8748 <= 60)
    {
      v6 = v2;
      if (dword_1001A8748 != -1 || (v4 = _LogCategory_Initialize(&dword_1001A8748, 60), v3 = v6, v4))
      {
        LogPrintF(&dword_1001A8748, "-[PasswordPickerMainController configureWithContext:completion:]_block_invoke", 60, "### Helper activate: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1001A8748 <= 30)
  {
    v6 = 0;
    if (dword_1001A8748 != -1 || (v5 = _LogCategory_Initialize(&dword_1001A8748, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1001A8748, "-[PasswordPickerMainController configureWithContext:completion:]_block_invoke", 30, "Helper activated\n");
      goto LABEL_8;
    }
  }

}

id sub_1000FF6C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss:", 8);
}

id sub_1000FF6D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss:", 8);
}

id sub_1000FF6DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss:", 8);
}

void sub_1000FF6E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 56);
  if (v7)
  {
    v8 = v7;
    dispatch_source_cancel(v8);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(v9 + 56);
    *(_QWORD *)(v9 + 56) = 0;

    v6 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v6 + 72), "invalidate");
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 72);
  *(_QWORD *)(v11 + 72) = 0;

  v13 = *(void **)(a1 + 32);
  if (v5)
    objc_msgSend(v13, "_pickerAlertShowError:", v5);
  else
    objc_msgSend(v13, "_pickerAlertShowSuccess");

}

void sub_1000FF7A0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;

}

void sub_1000FF7DC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "insertObject:atIndex:", v5, objc_msgSend(v4, "indexOfObject:inSortedRange:options:usingComparator:", v5, 0, objc_msgSend(v4, "count"), 1024, &stru_10017D7B8));

}

id sub_1000FF848(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;

  return _objc_msgSend(*(id *)(a1 + 32), "_pickerAlertHandlePickedDevice:", *(_QWORD *)(a1 + 40));
}

id sub_1000FF880(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_pickerAlertCanceled");
}

int64_t sub_1000FF888(id a1, SFDevice *a2, SFDevice *a3)
{
  SFDevice *v4;
  uint64_t v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  id v12;

  v4 = a3;
  v5 = objc_claimAutoreleasedReturnValue(-[SFDevice name](a2, "name"));
  v6 = (void *)v5;
  if (v5)
    v7 = (__CFString *)v5;
  else
    v7 = CFSTR("?");
  v8 = v7;

  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(-[SFDevice name](v4, "name"));
  if (v9)
    v10 = v9;
  else
    v10 = CFSTR("?");
  v11 = v10;

  v12 = -[__CFString localizedStandardCompare:](v8, "localizedStandardCompare:", v11);
  return (int64_t)v12;
}

id sub_1000FF924(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_discoveryFoundDevice:", a2);
}

id sub_1000FF930(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_discoveryTimeout");
}

void sub_1000FF938(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1001A87C0 <= 60)
    {
      v6 = v2;
      if (dword_1001A87C0 != -1 || (v4 = _LogCategory_Initialize(&dword_1001A87C0, 60), v3 = v6, v4))
      {
        LogPrintF(&dword_1001A87C0, "-[ProfileDevicePickerMainController _discoveryStart]_block_invoke_3", 60, "### Discovery start failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1001A87C0 <= 30)
  {
    v6 = 0;
    if (dword_1001A87C0 != -1 || (v5 = _LogCategory_Initialize(&dword_1001A87C0, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1001A87C0, "-[ProfileDevicePickerMainController _discoveryStart]_block_invoke_3", 30, "Discovery started\n");
      goto LABEL_8;
    }
  }

}

id sub_1000FFA0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_100102614(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showPairingUIWithFlags:throttleSeconds:", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void sub_100102624(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];

  v2 = objc_alloc_init((Class)UINotificationFeedbackGenerator);
  objc_msgSend(v2, "notificationOccurred:", 0);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 184);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100102700;
  v10[3] = &unk_10017E1F0;
  v10[4] = v3;
  objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, v10);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 184);
  *(_QWORD *)(v5 + 184) = 0;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "view"));
  objc_msgSend(v7, "setHidden:", 0);

  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 192);
  *(_QWORD *)(v8 + 192) = 0;

}

void sub_100102700(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 176), "containerView"));
  objc_msgSend(v1, "reactivate");

}

id sub_10010273C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handlePairingFinished");
}

void sub_100102744(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD block[5];
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;

  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a9;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100102898;
  block[3] = &unk_10017D958;
  block[4] = *(_QWORD *)(a1 + 32);
  v27 = v14;
  v28 = v15;
  v29 = v16;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  v20 = v19;
  v21 = v18;
  v22 = v17;
  v23 = v16;
  v24 = v15;
  v25 = v14;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_100102888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handlePromptForPINWithFlags:throttleSeconds:", a2, a3);
}

id sub_100102898(id *a1)
{
  id v2;
  _QWORD *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  void *v13;

  objc_storeStrong((id *)a1[4] + 29, a1[5]);
  objc_storeStrong((id *)a1[4] + 6, a1[6]);
  v2 = objc_msgSend(a1[7], "copy");
  v3 = a1[4];
  v4 = (void *)v3[12];
  v3[12] = v2;

  v5 = objc_msgSend(a1[8], "copy");
  v6 = a1[4];
  v7 = (void *)v6[27];
  v6[27] = v5;

  v8 = objc_msgSend(a1[9], "copy");
  v9 = a1[4];
  v10 = (void *)v9[28];
  v9[28] = v8;

  v11 = objc_retainBlock(a1[10]);
  v12 = a1[4];
  v13 = (void *)v12[7];
  v12[7] = v11;

  return objc_msgSend(a1[4], "showPasswordPickerUI");
}

id sub_100102964(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handlePasswordPicked:", *(_QWORD *)(a1 + 40));
}

id sub_100102970(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceFound:", a2);
}

id sub_10010297C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceLost:", a2);
}

id sub_100102988(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_deviceChanged:", a2);
}

void sub_100102994(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  int v5;
  NSError *v6;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_1001A8830 <= 60)
    {
      v6 = v2;
      if (dword_1001A8830 != -1 || (v4 = _LogCategory_Initialize(&dword_1001A8830, 60), v3 = v6, v4))
      {
        LogPrintF(&dword_1001A8830, "-[ProximityAutoFillMainController deviceDiscoveryStart]_block_invoke_4", 60, "### Discovery activate failed: %@\n", v3);
LABEL_8:

        return;
      }
    }
  }
  else if (dword_1001A8830 <= 30)
  {
    v6 = 0;
    if (dword_1001A8830 != -1 || (v5 = _LogCategory_Initialize(&dword_1001A8830, 30), v3 = 0, v5))
    {
      LogPrintF(&dword_1001A8830, "-[ProximityAutoFillMainController deviceDiscoveryStart]_block_invoke_4", 30, "Discovery activated\n");
      goto LABEL_8;
    }
  }

}

id sub_100102A68()
{
  return (id)qword_1001AD340;
}

Class sub_100102A74()
{
  Class result;

  if (qword_1001AD348 != -1)
    dispatch_once(&qword_1001AD348, &stru_10017D9A0);
  result = objc_getClass("_SFAppAutoFillPasswordViewController");
  qword_1001AD340 = (uint64_t)result;
  off_1001A88A0 = (uint64_t (*)())sub_100102A68;
  return result;
}

_QWORD *sub_100102AD0(_QWORD *result, int a2)
{
  _QWORD *v3;
  const char *v4;

  v3 = result;
  if (dword_1001A8830 <= 30)
  {
    if (dword_1001A8830 != -1 || (result = (_QWORD *)_LogCategory_Initialize(&dword_1001A8830, 30), (_DWORD)result))
    {
      v4 = "no";
      if (a2)
        v4 = "yes";
      result = (_QWORD *)LogPrintF(&dword_1001A8830, "-[ProximityAutoFillMainController showPasswordPickerUI]_block_invoke", 30, "Password picker authenticate to present: %s", v4);
    }
  }
  if (a2)
    return objc_msgSend(*(id *)(v3[4] + 160), "presentViewController:animated:completion:", *(_QWORD *)(v3[4] + 168), 1, &stru_10017D8C0);
  return result;
}

void sub_100102BA0(id a1)
{
  if (dword_1001A8830 <= 30 && (dword_1001A8830 != -1 || _LogCategory_Initialize(&dword_1001A8830, 30)))
    LogPrintF(&dword_1001A8830, "-[ProximityAutoFillMainController showPasswordPickerUI]_block_invoke_2", 30, "Password picker completed presentation\n");
}

void sub_100102C00(id a1)
{
  qword_1001AD350 = (uint64_t)dlopen("/System/Library/Frameworks/SafariServices.framework/SafariServices", 2);
}

id sub_100102C28(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleVisualAuthEvent:", a2);
}

id sub_100102C34(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleVisualAuthScannedCode:", a2);
}

void sub_100102C40(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 192), "view"));
  objc_msgSend(v1, "setHidden:", 1);

}

void sub_100102C80(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD block[6];

  v5 = a3;
  if (v5
    && dword_1001A8830 <= 60
    && (dword_1001A8830 != -1 || _LogCategory_Initialize(&dword_1001A8830, 60)))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedDescription"));
    LogPrintF(&dword_1001A8830, "-[ProximityAutoFillMainController showAuthenticateUI]_block_invoke_2", 60, "### Auth error: %@\n", v6);

  }
  if (a2)
  {
    v7 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40) = 4;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100102DB0;
    block[3] = &unk_10017DD40;
    block[4] = *(_QWORD *)(a1 + 32);
    block[5] = v7;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else
  {
    objc_msgSend(UIApp, "endBackgroundTask:", *(_QWORD *)(a1 + 40));
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40) = 3;
  }

}

id sub_100102DB0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showPasswordPickerUI");
  return objc_msgSend(UIApp, "endBackgroundTask:", *(_QWORD *)(a1 + 40));
}

void sub_100102DE4(id a1)
{
  if (dword_1001A8830 <= 30 && (dword_1001A8830 != -1 || _LogCategory_Initialize(&dword_1001A8830, 30)))
    LogPrintF(&dword_1001A8830, "-[ProximityAutoFillMainController showAuthenticateUI]_block_invoke", 30, "Auth background task expired\n");
}

id sub_100102E44(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_100103800(uint64_t a1)
{
  unsigned int v2;
  id *v3;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("1234"));
  v3 = *(id **)(a1 + 48);
  if (v2)
    return objc_msgSend(v3[3], "showPasswordPickerUI");
  else
    return objc_msgSend(v3, "showWithFlags:throttleSeconds:", 0x10000, 0xFFFFFFFFLL);
}

void sub_100103860(uint64_t a1)
{
  double MidX;
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  CGRect v8;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v7, "bounds");
  MidX = CGRectGetMidX(v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v3, "center");
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v6, "setCenter:", MidX, v5);

}

void sub_1001038E8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_100103918(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "length");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 49), "digits"));
  v5 = objc_msgSend(v4, "count");

  if (v3 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_handlePINEntered:", v6);

}

id sub_100103FE8(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showPairingUIWithFlags:throttleSeconds:", 0, 0xFFFFFFFFLL);
}

_DWORD *sub_100106AB0(uint64_t a1)
{
  _DWORD *result;
  int v2;
  uint64_t v3;

  result = *(_DWORD **)(a1 + 32);
  v2 = result[25];
  if (v2 == 1)
  {
    v3 = 0;
  }
  else
  {
    if (v2 != 2)
      return result;
    v3 = 4294960596;
  }
  return objc_msgSend(result, "showDoneUI:", v3);
}

id sub_100106AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sessionHandleProgress:info:", a2, a3);
}

id sub_100106AF4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

void sub_100107F04(uint64_t a1)
{
  void *v1;
  void *v2;
  unsigned __int8 v3;
  id v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 32)));
  if (dword_1001A8968 <= 30 && (dword_1001A8968 != -1 || _LogCategory_Initialize(&dword_1001A8968, 30)))
    LogPrintF(&dword_1001A8968, "-[RepairDoneViewController handleActionButton:]_block_invoke", 30, "Open settings: '%@'\n", v1);
  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
    v5 = 0;
    v3 = objc_msgSend(v2, "openSensitiveURL:withOptions:error:", v1, 0, &v5);
    v4 = v5;

    if ((v3 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
  }
  if (dword_1001A8968 <= 90 && (dword_1001A8968 != -1 || _LogCategory_Initialize(&dword_1001A8968, 90)))
    LogPrintF(&dword_1001A8968, "-[RepairDoneViewController handleActionButton:]_block_invoke", 90, "### Open settings failed (%@), %{error}\n", v1, v4);
LABEL_13:

}

void sub_1001082C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100108A6C(uint64_t a1, void *a2)
{
  __int128 v3;
  id v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = v3;
  v7 = *(_OWORD *)(a1 + 64);
  v4 = a2;
  objc_msgSend(v4, "setTransform:", &v5);
  objc_msgSend(v4, "setAlpha:", *(double *)(a1 + 80), v5, v6, v7);

}

void sub_100108AC0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  _QWORD v11[5];
  id v12;
  id v13;
  _QWORD v14[5];
  id v15;

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100108C94;
  v14[3] = &unk_10017E100;
  v2 = *(id *)(a1 + 40);
  v14[4] = *(_QWORD *)(a1 + 32);
  v15 = v2;
  +[UIView addKeyframeWithRelativeStartTime:relativeDuration:animations:](UIView, "addKeyframeWithRelativeStartTime:relativeDuration:animations:", v14, 0.0, 0.25);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100108CB0;
  v11[3] = &unk_10017DA90;
  v3 = *(id *)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v3;
  v13 = *(id *)(a1 + 48);
  +[UIView addKeyframeWithRelativeStartTime:relativeDuration:animations:](UIView, "addKeyframeWithRelativeStartTime:relativeDuration:animations:", v11, 0.25, 0.25);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100108D00;
  v8[3] = &unk_10017DA90;
  v4 = *(id *)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v10 = *(id *)(a1 + 48);
  +[UIView addKeyframeWithRelativeStartTime:relativeDuration:animations:](UIView, "addKeyframeWithRelativeStartTime:relativeDuration:animations:", v8, 0.5, 0.25);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100108D50;
  v6[3] = &unk_10017E100;
  v5 = *(id *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  +[UIView addKeyframeWithRelativeStartTime:relativeDuration:animations:](UIView, "addKeyframeWithRelativeStartTime:relativeDuration:animations:", v6, 0.75, 0.25);

}

void sub_100108C60(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infoButton"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

uint64_t sub_100108C94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t sub_100108CB0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_100108D00(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_100108D50(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_100108D6C(id a1, UIView *a2)
{
  __int128 v2;
  UIView *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4 = *(_OWORD *)&CGAffineTransformIdentity.a;
  v5 = v2;
  v6 = *(_OWORD *)&CGAffineTransformIdentity.tx;
  v3 = a2;
  -[UIView setTransform:](v3, "setTransform:", &v4);
  -[UIView setAlpha:](v3, "setAlpha:", 1.0, v4, v5, v6);

}

void sub_100108DC4(uint64_t a1)
{
  const __CFString *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "infoButton"));
  if (objc_msgSend(v3, "isActive"))
    v2 = CFSTR("Surprise!");
  else
    v2 = CFSTR("ProxCardKit Test");
  objc_msgSend(*(id *)(a1 + 32), "setTitle:", v2);

}

void sub_100108E20(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id WeakRetained;
  void *v23;
  dispatch_time_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD block[4];
  id v40;
  _QWORD v41[6];

  v1 = objc_alloc_init((Class)PRXFeatureTourContentViewController);
  objc_msgSend(v1, "setTitle:", CFSTR("Card Title"));
  objc_msgSend(v1, "setBodyText:", CFSTR("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur varius neque sed nibh porttitor."));
  v2 = v1;
  objc_msgSend(v1, "setDismissalType:", 1);
  v3 = objc_alloc_init((Class)UIView);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemRedColor](UIColor, "systemRedColor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "colorWithAlphaComponent:", 0.33));
  objc_msgSend(v3, "setBackgroundColor:", v5);

  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v6 = v2;
  v37 = v2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contentView"));
  objc_msgSend(v7, "addSubview:", v3);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[PRXLabel labelWithStyle:](PRXLabel, "labelWithStyle:", 0));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  objc_msgSend(v8, "setTextColor:", v9);

  objc_msgSend(v8, "setText:", CFSTR("Main Content"));
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentView"));
  objc_msgSend(v10, "addSubview:", v8);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentView"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mainContentGuide"));

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "leadingAnchor"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "leadingAnchor"));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "constraintEqualToAnchor:", v34));
  v41[0] = v32;
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trailingAnchor"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "trailingAnchor"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "constraintEqualToAnchor:", v30));
  v41[1] = v29;
  v36 = v3;
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "topAnchor"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "topAnchor"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "constraintEqualToAnchor:", v27));
  v41[2] = v26;
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bottomAnchor"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bottomAnchor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "constraintEqualToAnchor:", v13));
  v41[3] = v14;
  v33 = v8;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "centerXAnchor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "centerXAnchor"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "constraintEqualToAnchor:", v16));
  v41[4] = v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "centerYAnchor"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "centerYAnchor"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "constraintEqualToAnchor:", v19));
  v41[5] = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, 6));
  +[NSLayoutConstraint activateConstraints:](NSLayoutConstraint, "activateConstraints:", v21);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v23, "pushViewController:animated:", v37, 1);

  v24 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001092A8;
  block[3] = &unk_10017DB88;
  objc_copyWeak(&v40, (id *)(a1 + 32));
  dispatch_after(v24, (dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v40);

}

void sub_1001092A8(uint64_t a1)
{
  void *v1;
  ProxCardKitTestTermsAndConditionsViewController *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  v2 = objc_alloc_init(ProxCardKitTestTermsAndConditionsViewController);
  objc_msgSend(v1, "pushViewController:animated:", v2, 1);

}

void sub_1001094E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100109518(uint64_t a1)
{
  void *v1;
  ProxCardKitTestPasscodeEntryViewController *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  v2 = objc_alloc_init(ProxCardKitTestPasscodeEntryViewController);
  objc_msgSend(v1, "pushViewController:animated:", v2, 1);

}

void sub_10010957C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void sub_1001096C4(uint64_t a1)
{
  ProxCardKitTestAppIconsViewController *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v1 = objc_alloc_init(ProxCardKitTestAppIconsViewController);
  objc_msgSend(v2, "pushViewController:animated:", v1, 1);

}

void sub_1001099FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100109A20(uint64_t a1)
{
  void *v1;
  ProxCardKitTestOptionsViewController *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  v2 = objc_alloc_init(ProxCardKitTestOptionsViewController);
  objc_msgSend(v1, "pushViewController:animated:", v2, 1);

}

void sub_100109BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100109BE8(uint64_t a1)
{
  void *v1;
  ProxCardKitTestPickerViewController *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  v2 = objc_alloc_init(ProxCardKitTestPickerViewController);
  objc_msgSend(v1, "pushViewController:animated:", v2, 1);

}

void sub_100109E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100109F0C(uint64_t a1)
{
  void *v1;
  ProxCardKitTestFeaturesViewController *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  v2 = objc_alloc_init(ProxCardKitTestFeaturesViewController);
  objc_msgSend(v1, "pushViewController:animated:", v2, 1);

}

void sub_10010A328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010A364(uint64_t a1, void *a2)
{
  const __CFString *v3;
  id WeakRetained;
  __CFString *v5;

  if (objc_msgSend(a2, "isOn"))
    v3 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ProxCardKit Test "), "stringByAppendingString:", CFSTR(" - Surprise!")));
  else
    v3 = CFSTR("ProxCardKit Test ");
  v5 = (__CFString *)v3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setTitle:", v5);

}

void sub_10010A3D8(uint64_t a1)
{
  ProxCardKitTestScannerViewController *v2;
  id WeakRetained;
  void *v4;
  id v5;

  v5 = objc_alloc_init((Class)VPScannerProxCardViewController);
  v2 = -[ProxCardKitTestScannerViewController initWithScannerEngine:]([ProxCardKitTestScannerViewController alloc], "initWithScannerEngine:", v5);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "navigationController"));
  objc_msgSend(v4, "pushViewController:animated:", v2, 1);

}

void sub_10010A5F0(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "showConfirmationRing");
  v2 = dispatch_time(0, 500000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010A670;
  block[3] = &unk_10017E1F0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10010A670(uint64_t a1)
{
  ProxCardKitTestEndViewController *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v1 = objc_alloc_init(ProxCardKitTestEndViewController);
  objc_msgSend(v2, "pushViewController:animated:", v1, 1);

}

void sub_10010AA8C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void sub_10010AAC8(id a1, PRXAction *a2)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("https://apple.com")));
  objc_msgSend(v3, "openURL:withCompletionHandler:", v2, 0);

}

void sub_10010AE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010B5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD block[5];

  if (a4)
    NSLog(CFSTR("Failed to mark terms as agreed in iCloud: %@"), a4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010B648;
  block[3] = &unk_10017E1F0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_10010B648(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dismissTerms:", 1);
}

void sub_10010B654(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleAgreeFromObjectModel:", v3);

}

void sub_10010B69C(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010B754;
  block[3] = &unk_10017DB88;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_10010B714(id a1, BOOL a2, NSError *a3)
{
  const __CFString *v3;

  v3 = CFSTR("Fail");
  if (a2)
    v3 = CFSTR("Success");
  NSLog(CFSTR("results = %@, with error = %@"), v3, a3);
}

void sub_10010B754(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_termsDisagree");

}

void sub_10010BE08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  if (dword_1001A8A38 <= 30 && (dword_1001A8A38 != -1 || _LogCategory_Initialize(&dword_1001A8A38, 30)))
  {
    v4 = *(unsigned int *)(a1 + 40);
    if (v4 > 3)
      v5 = "?";
    else
      v5 = off_10017DC60[v4];
    LogPrintF(&dword_1001A8A38, "-[ShareAudioAcceptMainController dismissWithAction:]_block_invoke", 30, "PerformAction complete: %s\n", v5);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_remoteViewControllerProxy"));
  v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10010BF24;
  v9[3] = &unk_10017E1F0;
  v10 = v6;
  v8 = v6;
  objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, v9);

}

id sub_10010BF1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_10010BF24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_10010BF2C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

void sub_10010BF5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v6 = v3;
    v5 = objc_msgSend(v3, "supportsAACPService");
    v4 = v6;
    if (v5)
    {
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 32) + 56))
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = objc_msgSend(v6, "productIdentifier");
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "updateProductID:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 56));
        v4 = v6;
      }
    }
  }

}

void sub_10010D188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id *a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  id a68;

  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(&a68);
  _Unwind_Resume(a1);
}

void sub_10010D848(uint64_t a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  const char *v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainController"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "appContent"));

  if (dword_1001A8AA8 <= 50 && (dword_1001A8AA8 != -1 || _LogCategory_Initialize(&dword_1001A8AA8, 50)))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "adamIDs"));
    v3 = objc_msgSend(v5, "installed");
    v4 = "no";
    if (v3)
      v4 = "yes";
    LogPrintF(&dword_1001A8AA8, "-[SVSSubCredentialActivationStartViewController _handleOpenApp]_block_invoke", 50, "Opening app (ADAM IDs %@, installed %s)", v2, v4);

  }
  objc_msgSend(v5, "launchWithCompletion:", &stru_10017DCC8);

}

void sub_10010D924(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  v3 = v2;
  if (v2
    && dword_1001A8AA8 <= 90
    && ((v5 = v2, dword_1001A8AA8 != -1) || (v4 = _LogCategory_Initialize(&dword_1001A8AA8, 90), v3 = v5, v4)))
  {
    LogPrintF(&dword_1001A8AA8, "-[SVSSubCredentialActivationStartViewController _handleOpenApp]_block_invoke_2", 90, "### Error opening App Store: %@", v3);

  }
  else
  {

  }
}

void sub_10010D9A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "launchURL"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "issuerID"));

    if (v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "launchURL"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "issuerID"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@brand=%@&supportedRadioTechnologies=NFC"), v4, v5));

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v6));
      v10 = 0;
      objc_msgSend(v7, "openURL:withOptions:error:", v8, &off_100183738, &v10);
      v9 = v10;

      if (dword_1001A8AA8 <= 30
        && (dword_1001A8AA8 != -1 || _LogCategory_Initialize(&dword_1001A8AA8, 30)))
      {
        LogPrintF(&dword_1001A8AA8, "-[SVSSubCredentialActivationStartViewController _handleEnterCode]_block_invoke", 30, "Launched Wallet app with URL %@, error: %{error}", v6, v9);
      }

    }
    else if (dword_1001A8AA8 <= 90
           && (dword_1001A8AA8 != -1 || _LogCategory_Initialize(&dword_1001A8AA8, 90)))
    {
      LogPrintF(&dword_1001A8AA8, "-[SVSSubCredentialActivationStartViewController _handleEnterCode]_block_invoke", 90, "### No Issuer ID to launch Wallet.");
    }
  }
  else if (dword_1001A8AA8 <= 90
         && (dword_1001A8AA8 != -1 || _LogCategory_Initialize(&dword_1001A8AA8, 90)))
  {
    LogPrintF(&dword_1001A8AA8, "-[SVSSubCredentialActivationStartViewController _handleEnterCode]_block_invoke", 90, "### No URL to launch Wallet.");
  }
}

void sub_10010DBB4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleEnterCode");

}

void sub_10010DBE0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleOpenApp");

}

uint64_t sub_10010EFAC(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "dismiss");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10010EFE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v7 = a2;
  v17 = a3;
  v8 = a4;
  if (v8)
  {
    if (dword_1001A8AA8 <= 90
      && (dword_1001A8AA8 != -1 || _LogCategory_Initialize(&dword_1001A8AA8, 90)))
    {
      LogPrintF(&dword_1001A8AA8, "-[SubCredentialActivationMainController viewFetchContent]_block_invoke", 90, "### Error fetching icon %@", v8);
    }
  }
  else if (dword_1001A8AA8 <= 50
         && (dword_1001A8AA8 != -1 || _LogCategory_Initialize(&dword_1001A8AA8, 50)))
  {
    LogPrintF(&dword_1001A8AA8, "-[SubCredentialActivationMainController viewFetchContent]_block_invoke", 50, "Received icon %@", v17);
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v7;
  v11 = v7;

  if (v17)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = v17;
    v14 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v13;
  }
  else
  {
    v15 = objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:](UIImage, "systemImageNamed:", CFSTR("lock.circle")));
    v16 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;
  }

  objc_msgSend(*(id *)(a1 + 32), "viewUpdateAppInfo");
}

void sub_10010F7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010FB68(uint64_t a1)
{
  id v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "panGestureRecognizer"));
  objc_msgSend(v2, "setEnabled:", 1);

}

id sub_10010FBC0(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  id *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "superview"));
    objc_msgSend(v3, "locationInView:", v6);
    v8 = v7;
    v10 = v9;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "superview"));
    objc_msgSend(v11, "convertPoint:toView:", v5[6], v8, v10);
    v13 = v12;
    v15 = v14;

    v16 = objc_msgSend(v5[6], "pointInside:withEvent:", 0, v13, v15);
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

uint64_t sub_100110C28(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "dismiss");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100110C64()
{
  return (id)qword_1001AD358;
}

Class sub_100110C70()
{
  Class result;

  if (qword_1001AD360 != -1)
    dispatch_once(&qword_1001AD360, &stru_10017DDE8);
  result = objc_getClass("PKAccountService");
  qword_1001AD358 = (uint64_t)result;
  off_1001A8C58 = (uint64_t (*)())sub_100110C64;
  return result;
}

void sub_100110CCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = SFMainQueue();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100110D64;
  v8[3] = &unk_10017E1A0;
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v3;
  v10 = v6;
  v7 = v3;
  dispatch_async(v5, v8);

}

id sub_100110D64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  Class v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (v2 || !*(_BYTE *)(v3 + 80))
  {
    v4 = v2;
    v5 = *(void **)(v3 + 88);
    *(_QWORD *)(v3 + 88) = v4;
  }
  else
  {
    v6 = off_1001A8C60();
    v7 = objc_opt_new(v6);
    v8 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v8 + 88);
    *(_QWORD *)(v8 + 88) = v7;
  }

  v9 = *(_QWORD **)(a1 + 40);
  if (v9[11])
    return objc_msgSend(v9, "presentAppropriateViewControllerIfReady");
  else
    return objc_msgSend(v9, "dismiss:", 0);
}

id sub_100110E00()
{
  return (id)qword_1001AD370;
}

Class sub_100110E0C()
{
  Class result;

  if (qword_1001AD360 != -1)
    dispatch_once(&qword_1001AD360, &stru_10017DDE8);
  result = objc_getClass("PKPhysicalCard");
  qword_1001AD370 = (uint64_t)result;
  off_1001A8C60 = (uint64_t (*)())sub_100110E00;
  return result;
}

void sub_100110E68(id a1)
{
  qword_1001AD368 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore", 2);
}

id sub_100111D04(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 121) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "forcedActivationResult");
  return _objc_msgSend(*(id *)(a1 + 40), "handleCompletedIfReady");
}

void sub_100111D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];

  v4 = SFMainQueue();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100111DCC;
  v6[3] = &unk_10017DD40;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = a2;
  dispatch_async(v5, v6);

}

id sub_100111DCC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  BOOL v4;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 121) = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if (dword_1001A8BE8 <= 90)
    {
      if (dword_1001A8BE8 == -1)
      {
        if (!_LogCategory_Initialize(&dword_1001A8BE8, 90))
          return _objc_msgSend(*(id *)(a1 + 32), "handleCompletedIfReady");
        v2 = *(_QWORD *)(a1 + 40);
      }
      switch(v2)
      {
        case 0:
          v3 = "Success";
          break;
        case 1:
          v3 = "UnknownError";
          break;
        case 2:
          v3 = "NoPhysicalCardError";
          break;
        case 3:
          v3 = "ServicesUnavailableError";
          break;
        case 4:
          v3 = "NoInternetConnectionError";
          break;
        case 5:
          v3 = "NotYetShippedError";
          break;
        case 6:
          v3 = "AlreadyActivatedError";
          break;
        case 7:
          v3 = "IncorrectActivationCodeError";
          break;
        default:
          v4 = v2 == 999;
          v3 = "?";
          if (v4)
            v3 = "Uninitialized";
          break;
      }
      LogPrintF(&dword_1001A8BE8, "-[BroadwayActivationStartViewController handleActivateButton:]_block_invoke_3", 90, "Failed activation with activation code %@ with result %s", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 105), v3);
    }
  }
  else if (dword_1001A8BE8 <= 30
         && (dword_1001A8BE8 != -1 || _LogCategory_Initialize(&dword_1001A8BE8, 30)))
  {
    LogPrintF(&dword_1001A8BE8, "-[BroadwayActivationStartViewController handleActivateButton:]_block_invoke_3", 30, "Completed activation with activation code %@", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 105));
  }
  return _objc_msgSend(*(id *)(a1 + 32), "handleCompletedIfReady");
}

id sub_100111F68(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  UIImage *ImageFromCurrentImageContext;
  void *v13;
  CGSize v15;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  v4 = v3;

  v5 = 504.0 / v4;
  v6 = 317.0 / v4;
  v7 = objc_msgSend(objc_alloc((Class)UIView), "initWithFrame:", 0.0, 0.0, v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v7, "setBackgroundColor:", v8);

  v9 = objc_msgSend(objc_alloc((Class)UILabel), "initWithFrame:", 5.6 / (85.598 / v5), 32.3 / (53.98 / v6), 504.0, 317.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:design:](UIFont, "systemFontOfSize:weight:design:", kCTFontUIFontDesignRounded, 7.0, UIFontWeightMedium));
  objc_msgSend(v9, "setFont:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.54, 1.0));
  objc_msgSend(v9, "setTextColor:", v11);

  objc_msgSend(v9, "setText:", v1);
  objc_msgSend(v9, "sizeToFit");
  objc_msgSend(v7, "addSubview:", v9);
  v15.width = v5;
  v15.height = v6;
  UIGraphicsBeginImageContextWithOptions(v15, 0, 3.0);
  objc_msgSend(v7, "bounds");
  objc_msgSend(v7, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v13 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  UIGraphicsEndImageContext();

  return v13;
}

id sub_10011215C(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 57), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 73), "setAlpha:", 1.0);
}

id sub_1001121A4(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 57), "setAlpha:", 1.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 73), "setAlpha:", 1.0);
}

void sub_1001126D8(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("wallet://credit/locationRequest")));
  v3 = sub_100117A34();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v6 = 0;
  objc_msgSend(v1, "openURL:withOptions:error:", v2, v4, &v6);
  v5 = v6;

  if (dword_1001A8BE8 <= 30 && (dword_1001A8BE8 != -1 || _LogCategory_Initialize(&dword_1001A8BE8, 30)))
    LogPrintF(&dword_1001A8BE8, "-[BroadwayActivationDoneViewController handleDoneButton:]_block_invoke", 30, "Launched Wallet app, error: %{error}", v5);

}

void sub_100113498(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("wallet://credit/details")));
  v3 = sub_100117A34();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v6 = 0;
  objc_msgSend(v1, "openURL:withOptions:error:", v2, v4, &v6);
  v5 = v6;

  if (dword_1001A8BE8 <= 30 && (dword_1001A8BE8 != -1 || _LogCategory_Initialize(&dword_1001A8BE8, 30)))
    LogPrintF(&dword_1001A8BE8, "-[BroadwayActivationNoCardViewController handleOrderPhysicalCardButton:]_block_invoke", 30, "Launched Wallet app for \"order physical card\", error: %{error}", v5);

}

void sub_1001139D0(id a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("wallet://credit/details")));
  v3 = sub_100117A34();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v6 = 0;
  objc_msgSend(v1, "openURL:withOptions:error:", v2, v4, &v6);
  v5 = v6;

  if (dword_1001A8BE8 <= 30 && (dword_1001A8BE8 != -1 || _LogCategory_Initialize(&dword_1001A8BE8, 30)))
    LogPrintF(&dword_1001A8BE8, "-[BroadwayActivationAlreadyActivatedViewController handleContactSupportButton:]_block_invoke", 30, "Launched Wallet app for \"contact support\", error: %{error}", v5);

}

void sub_100114AEC(uint64_t a1)
{
  void *v1;
  __int128 v2;
  _OWORD v3[3];

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v3[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v3[1] = v2;
  v3[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  objc_msgSend(v1, "setTransform:", v3);

}

id sub_100114B40(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "completeTransition:", a2);
}

void sub_100114C60(uint64_t a1)
{
  void *v2;
  double v3;
  void *v4;
  CGAffineTransform v5;
  CGAffineTransform v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "bounds");
  CGAffineTransformMakeTranslation(&v6, 0.0, -v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v5 = v6;
  objc_msgSend(v4, "setTransform:", &v5);

}

id sub_100114CD8(uint64_t a1, uint64_t a2)
{
  void *v4;

  if ((_DWORD)a2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    objc_msgSend(v4, "removeFromSuperview");

  }
  return _objc_msgSend(*(id *)(a1 + 40), "completeTransition:", a2);
}

_QWORD *sub_100115150(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[1])
    return _objc_msgSend(result, "xpcStarted:", a2);
  return result;
}

void sub_1001153C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001154D8(uint64_t a1, uint64_t a2)
{
  id *WeakRetained;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained[3], "dismiss:", a2);
    WeakRetained = v4;
  }

}

id sub_100115880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 48);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)SVSCommonNavController;
  return objc_msgSendSuper2(&v4, "pushViewController:transition:", v1, v2);
}

id sub_1001158BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 48);
  v4.receiver = *(id *)(a1 + 40);
  v4.super_class = (Class)SVSCommonNavController;
  return objc_msgSendSuper2(&v4, "pushViewController:animated:", v1, v2);
}

id sub_1001158F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 48);
  v5.receiver = *(id *)(a1 + 40);
  v5.super_class = (Class)SVSCommonNavController;
  return objc_msgSendSuper2(&v5, "presentViewController:animated:completion:", v1, v2, v3);
}

id sub_100115FC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_100115FD4(id *a1)
{
  id result;

  objc_msgSend(a1[4], "setAlpha:", 1.0);
  objc_msgSend(a1[5], "setAlpha:", 0.0);
  *((_BYTE *)a1[6] + 24) = 0;
  result = objc_msgSend(*((id *)a1[6] + 4), "count");
  if (result)
    return _objc_msgSend(a1[6], "_update");
  return result;
}

id sub_100116484(void *a1)
{
  id v1;
  unsigned int v2;
  const __CFString *v3;
  void *v4;

  v1 = a1;
  v2 = SFDeviceClassCodeGet() - 1;
  if (v2 > 6)
    v3 = CFSTR("_IPHONE");
  else
    v3 = off_10017DF70[v2];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringByAppendingString:", v3));

  return v4;
}

id sub_1001164E8(void *a1, const char *a2)
{
  const __CFString *v2;

  if (((_DWORD)a2 - 1) > 6)
    v2 = CFSTR("_IPHONE");
  else
    v2 = off_10017DF70[((_BYTE)a2 - 1)];
  return objc_msgSend(a1, "stringByAppendingString:", v2);
}

void sub_100116514(unsigned int a1, unsigned int a2, uint64_t a3, id *a4, id *a5, id *a6, id *a7)
{
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id *v14;
  void *v15;
  __CFString *v16;
  uint64_t v18;
  id *v19;
  dispatch_semaphore_t v20;
  id v21;
  dispatch_queue_t v22;
  id v23;
  NSObject *v24;
  id v25;
  dispatch_time_t v26;
  intptr_t v27;
  intptr_t v28;
  void *v29;
  void *v30;
  unsigned int v31;
  void *v32;
  unsigned int v33;
  __CFString *v34;
  id v35;
  void *v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  id v40;
  id v41;
  unsigned int v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  unsigned int v51;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  unsigned int v62;
  id v63;
  uint64_t v64;
  id v65;
  const __CFString *v66;
  const __CFString *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v74;
  _QWORD v75[4];
  NSObject *v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  void (*v85)(uint64_t);
  id v86;

  v81 = 0;
  v82 = &v81;
  v83 = 0x3032000000;
  v84 = sub_100116FFC;
  v85 = sub_10011700C;
  v86 = 0;
  if (a1 == 8207)
    v10 = 8194;
  else
    v10 = a1;
  if ((a3 & 4) != 0)
  {
    if (dword_1001A8D28 <= 30
      && (dword_1001A8D28 != -1 || _LogCategory_Initialize(&dword_1001A8D28, 30)))
    {
      LogPrintF(&dword_1001A8D28, "void SVSBluetoothDeviceInfoToUIInfoEx(uint32_t, SFBluetoothColorCode, SVSBluetoothDeviceInfoFlags, NSString * _Nonnull __strong * _Nullable, UIColor * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSBundle * _Nonnull __strong * _Nullable)", 30, "Looking up assets for product ID %u, color code %u, %#{flags}\n", v10, a2, a3, &unk_10013587D);
    }
    v18 = mach_absolute_time();
    if ((a3 & 8) != 0)
      v71 = objc_msgSend(objc_alloc((Class)SFDeviceAssetQuery), "initWithHomePodColor:version:", a2, v10);
    else
      v71 = objc_msgSend(objc_alloc((Class)SFDeviceAssetQuery), "initWithBluetoothProductIdentifier:color:", v10, a2);
    v19 = a7;
    v20 = dispatch_semaphore_create(0);
    v21 = objc_alloc_init((Class)SFDeviceAssetManager);
    v22 = dispatch_queue_create("SVSMobileAssetLookup", 0);
    objc_msgSend(v21, "setDispatchQueue:", v22);

    objc_msgSend(v21, "activate");
    v23 = objc_alloc((Class)SFDeviceAssetRequestConfiguration);
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472;
    v75[2] = sub_100117014;
    v75[3] = &unk_10017DE10;
    v79 = v10;
    v80 = a2;
    v77 = &v81;
    v78 = v18;
    v24 = v20;
    v76 = v24;
    v25 = objc_msgSend(v23, "initWithQueryResultHandler:", v75);
    objc_msgSend(v25, "setTimeout:", 3.0);
    objc_msgSend(v21, "getAssetBundleForDeviceQuery:withRequestConfiguration:", v71, v25);
    v26 = dispatch_time(0, 5000000000);
    v27 = dispatch_semaphore_wait(v24, v26);
    a7 = v19;
    if (v27)
    {
      if (dword_1001A8D28 <= 60)
      {
        v28 = v27;
        if (dword_1001A8D28 != -1 || _LogCategory_Initialize(&dword_1001A8D28, 60))
          LogPrintF(&dword_1001A8D28, "void SVSBluetoothDeviceInfoToUIInfoEx(uint32_t, SFBluetoothColorCode, SVSBluetoothDeviceInfoFlags, NSString * _Nonnull __strong * _Nullable, UIColor * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSBundle * _Nonnull __strong * _Nullable)", 60, "### Get MobileAsset timeout (%ld)\n", v28);
      }
    }
    v29 = (void *)v82[5];
    if (v29)
    {
      if ((a3 & 8) == 0)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "pathForResource:ofType:", SFDeviceAssetNameMovieConnectIntro, 0));
        if ((_DWORD)v10 == 8203)
          goto LABEL_40;
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[SFHeadphoneProduct b507](SFHeadphoneProduct, "b507"));
        v31 = objc_msgSend(v30, "productID");

        if ((_DWORD)v10 == v31
          || (v32 = (void *)objc_claimAutoreleasedReturnValue(+[SFHeadphoneProduct b494](SFHeadphoneProduct, "b494")),
              v33 = objc_msgSend(v32, "productID"),
              v32,
              (_DWORD)v10 == v33)
          || (v37 = (void *)objc_claimAutoreleasedReturnValue(+[SFHeadphoneProduct b607](SFHeadphoneProduct, "b607")),
              v38 = objc_msgSend(v37, "productID"),
              v37,
              (_DWORD)v10 == 0x10000)
          || (_DWORD)v10 == v38)
        {
LABEL_40:
          v39 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)v82[5], "pathForResource:ofType:", SFDeviceAssetNameMovieStatusLoopCharged, 0));
        }
        else
        {
          v39 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)v82[5], "pathForResource:ofType:", SFDeviceAssetNameMovieLoop, 0));
        }
        v74 = (void *)v39;
        v40 = SFDeviceAssetNameMovieConnectLoop;
        v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v82[5], "pathForResource:ofType:", v40, 0));

        if (!v11)
        {
          v11 = v74;
          v74 = v11;
        }
        a7 = v19;
LABEL_46:

        if ((a3 & 8) != 0)
          goto LABEL_6;
        goto LABEL_47;
      }
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "pathForResource:ofType:", CFSTR("ProxCard_connect-engage.mov"), 0));
      if (v12)
      {
        v74 = 0;
        v11 = 0;
        goto LABEL_46;
      }
      if (dword_1001A8D28 <= 90
        && (dword_1001A8D28 != -1 || _LogCategory_Initialize(&dword_1001A8D28, 90)))
      {
        LogPrintF(&dword_1001A8D28, "void SVSBluetoothDeviceInfoToUIInfoEx(uint32_t, SFBluetoothColorCode, SVSBluetoothDeviceInfoFlags, NSString * _Nonnull __strong * _Nullable, UIColor * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSBundle * _Nonnull __strong * _Nullable)", 90, "### HomePod intro movie asset missing\n");
      }
    }
    v74 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_46;
  }
  v74 = 0;
  v11 = 0;
  v12 = 0;
  if ((a3 & 8) != 0)
  {
LABEL_6:
    v13 = (void *)GestaltCopyAnswer(CFSTR("main-screen-scale"), 0, 0);
    v14 = a6;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ProxCard_Setup@%dx.png"), objc_msgSend(v13, "intValue")));
    v16 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v82[5], "pathForResource:ofType:", v15, 0));
    if (!v16)
    {
      if (dword_1001A8D28 <= 90
        && (dword_1001A8D28 != -1 || _LogCategory_Initialize(&dword_1001A8D28, 90)))
      {
        LogPrintF(&dword_1001A8D28, "void SVSBluetoothDeviceInfoToUIInfoEx(uint32_t, SFBluetoothColorCode, SVSBluetoothDeviceInfoFlags, NSString * _Nonnull __strong * _Nullable, UIColor * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSBundle * _Nonnull __strong * _Nullable)", 90, "### HomePod setup asset missing\n");
      }
      v16 = CFSTR("UnsupportedAccessory.png");
    }
    if ((_DWORD)v10 == 5)
      v34 = CFSTR("HOMEPOD_MINI");
    else
      v34 = CFSTR("HOMEPOD");
    v35 = sub_1001171A8(CFSTR("Localizable"), v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    goto LABEL_64;
  }
LABEL_47:
  v14 = a6;
  if ((_DWORD)v10 == 8194
    || (_DWORD)v10 == 8206
    || (_DWORD)v10 == 0x10000
    || (v41 = objc_msgSend(objc_alloc((Class)SFHeadphoneProduct), "initWithProductID:", v10),
        v42 = objc_msgSend(v41, "isAirPods"),
        v41,
        v42))
  {
    if ((a3 & 1) != 0)
    {
      v15 = 0;
      v16 = CFSTR("AirPod-Case-Open-B188.png");
    }
    else
    {
      v43 = (void *)GestaltCopyAnswer(CFSTR("main-screen-scale"), 0, 0);
      v44 = objc_msgSend(v43, "intValue");
      if ((_DWORD)v10 == 0x10000)
        v45 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ProxCard_case-closed-charged@%dx.png"), v44));
      else
        v45 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ProxCard_case-closed@%dx.png"), v44));
      v15 = (void *)v45;
      v46 = objc_claimAutoreleasedReturnValue(objc_msgSend((id)v82[5], "pathForResource:ofType:", v45, 0));
      if (v46)
        v16 = (__CFString *)v46;
      else
        v16 = CFSTR("AirPod-Case-Closed-B188.png");

    }
    if ((_DWORD)v10 == 8206)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.Sharing")));
      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Localizable-PID_%d"), 8206));
      v48 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("PRODUCT_NAME_PID_%d"), 8206);
      v49 = sub_100117218(v13, v47, v48);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v49);

    }
    else
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(+[SFHeadphoneProduct b688](SFHeadphoneProduct, "b688"));
      v51 = objc_msgSend(v50, "productID");

      if ((_DWORD)v10 != v51)
      {
        v56 = sub_1001171A8(CFSTR("Localizable"), CFSTR("AIRPODS"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(v56);
        goto LABEL_65;
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.Sharing")));
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Localizable-PID_%d"), v10));
      v53 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("PRODUCT_NAME_PID_%d"), v10);
      v54 = sub_100117218(v13, v52, v53);
      v36 = (void *)objc_claimAutoreleasedReturnValue(v54);

    }
LABEL_64:

LABEL_65:
    v55 = 0;
    goto LABEL_66;
  }
  switch((int)v10)
  {
    case 8194:
    case 8202:
    case 8203:
    case 8204:
    case 8205:
    case 8208:
      goto LABEL_77;
    case 8195:
      v65 = sub_1001171A8(CFSTR("Localizable"), CFSTR("POWERBEATS3_WIRELESS"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(v65);
      v55 = 0;
      v15 = 0;
      v66 = CFSTR("PowerBeats3Wireless-Black-Small-B188.png");
      v67 = CFSTR("PowerBeats3Wireless-Black-B188.png");
      goto LABEL_88;
    case 8197:
      v68 = sub_1001171A8(CFSTR("Localizable"), CFSTR("BEATSX"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(v68);
      v55 = 0;
      v15 = 0;
      v66 = CFSTR("BeatsX-Black-Small-B188.png");
      v67 = CFSTR("BeatsX-Black-B188.png");
      goto LABEL_88;
    case 8198:
      v70 = sub_1001171A8(CFSTR("Localizable"), CFSTR("BEATS_SOLO3_WIRELESS"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(v70);
      v55 = 0;
      v15 = 0;
      v66 = CFSTR("BeatsSolo3Wireless-Black-Small-B188.png");
      v67 = CFSTR("BeatsSolo3Wireless-Black-B188.png");
LABEL_88:
      if ((a3 & 2) != 0)
        v16 = (__CFString *)v66;
      else
        v16 = (__CFString *)v67;
      break;
    case 8201:
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor grayColor](UIColor, "grayColor"));
      v69 = sub_1001171A8(CFSTR("Localizable"), CFSTR("BEATS_STUDIO3_WIRELESS"));
      v64 = objc_claimAutoreleasedReturnValue(v69);
      goto LABEL_86;
    default:
      v61 = objc_msgSend(objc_alloc((Class)SFHeadphoneProduct), "initWithProductID:", v10);
      v62 = objc_msgSend(v61, "supportsMobileAsset");

      if (v62)
      {
LABEL_77:
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor grayColor](UIColor, "grayColor"));
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.Sharing")));
        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Localizable-PID_%d"), v10));
        v59 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("PRODUCT_NAME_PID_%d"), v10);
        v60 = sub_100117218(v57, v58, v59);
        v36 = (void *)objc_claimAutoreleasedReturnValue(v60);

      }
      else
      {
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor grayColor](UIColor, "grayColor"));
        v63 = sub_1001171A8(CFSTR("Localizable"), CFSTR("AUDIO_ACCESSORY"));
        v64 = objc_claimAutoreleasedReturnValue(v63);
LABEL_86:
        v36 = (void *)v64;
      }
      v15 = 0;
      v16 = CFSTR("UnsupportedAccessory.png");
      break;
  }
LABEL_66:
  if (a4)
    objc_storeStrong(a4, v16);
  if (a5)
    objc_storeStrong(a5, v36);
  if (v14)
    objc_storeStrong(v14, v12);
  if (a7)
    objc_storeStrong(a7, (id)v82[5]);
  _Block_object_dispose(&v81, 8);

}

void sub_100116F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100116FFC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10011700C(uint64_t a1)
{

}

void sub_100117014(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  v9 = a2;
  v17 = a3;
  v10 = a5;
  v11 = mach_absolute_time();
  v12 = UpTicksToSecondsF(v11 - *(_QWORD *)(a1 + 48)) * 1000.0;
  if (v10)
  {
    if (dword_1001A8D28 <= 60
      && (dword_1001A8D28 != -1 || _LogCategory_Initialize(&dword_1001A8D28, 60)))
    {
      LogPrintF(&dword_1001A8D28, "void SVSBluetoothDeviceInfoToUIInfoEx(uint32_t, SFBluetoothColorCode, SVSBluetoothDeviceInfoFlags, NSString * _Nonnull __strong * _Nullable, UIColor * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSBundle * _Nonnull __strong * _Nullable)_block_invoke", 60, "### Look up assets for product ID %u (aka %@), color code %u failed after %f ms: %{error}\n", *(unsigned int *)(a1 + 56), v17, *(unsigned __int8 *)(a1 + 60), *(_QWORD *)&v12, v10);
    }
  }
  else if (dword_1001A8D28 <= 30
         && (dword_1001A8D28 != -1 || _LogCategory_Initialize(&dword_1001A8D28, 30)))
  {
    v13 = "no";
    if (a4)
      v13 = "yes";
    LogPrintF(&dword_1001A8D28, "void SVSBluetoothDeviceInfoToUIInfoEx(uint32_t, SFBluetoothColorCode, SVSBluetoothDeviceInfoFlags, NSString * _Nonnull __strong * _Nullable, UIColor * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSString * _Nonnull __strong * _Nullable, NSBundle * _Nonnull __strong * _Nullable)_block_invoke", 30, "Found assets for product ID %u (aka %@), color code %u, fallback %s, %f ms\n", *(unsigned int *)(a1 + 56), v17, *(unsigned __int8 *)(a1 + 60), v13, *(_QWORD *)&v12);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v9;
  v16 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1001171A8(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = sub_100117218(v5, v4, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  return v7;
}

id sub_100117218(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (SFIsGreenTeaDevice())
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAppendingString:", CFSTR("_GT")));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", v8, CFSTR("_GT"), v6));

    if (!objc_msgSend(v9, "isEqual:", CFSTR("_GT")))
      goto LABEL_5;

  }
  v9 = 0;
LABEL_5:
  if (!objc_msgSend(v9, "length"))
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", v7, &stru_10017E3D8, v6));

    v9 = (void *)v10;
  }
  if (v9)
    v11 = v9;
  else
    v11 = v7;
  v12 = v11;

  return v12;
}

id sub_100117314(void *a1)
{
  return sub_1001171A8(CFSTR("Localizable"), a1);
}

UIImage *sub_100117324(char a1, int a2)
{
  unsigned __int8 v2;
  __CFString **v3;
  const __CFString *v4;

  v2 = a2 - 1;
  if ((a2 - 1) >= 3)
  {
    v2 = a1 - 2;
    if ((a1 - 2) >= 4u)
    {
      v4 = CFSTR("ProxiPhoneGeneric.png");
      return +[UIImage imageNamed:](UIImage, "imageNamed:", v4);
    }
    v3 = off_10017DFC0;
  }
  else
  {
    v3 = off_10017DFA8;
  }
  v4 = v3[v2];
  return +[UIImage imageNamed:](UIImage, "imageNamed:", v4);
}

uint64_t sub_100117374(char a1)
{
  if ((a1 - 2) > 3u)
    return SFLocalizedStringForKey(CFSTR("iPhone"));
  else
    return SFLocalizedStringForKey(off_10017DFE0[(a1 - 2)]);
}

id sub_1001173A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v9 = a1;
  v10 = objc_alloc((Class)NSString);
  v11 = sub_1001171A8(CFSTR("Localizable"), v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = objc_msgSend(v10, "initWithFormat:arguments:", v12, &a9);

  if (v13)
    v14 = v13;
  else
    v14 = v9;
  v15 = v14;

  return v15;
}

id sub_10011743C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;

  v10 = a2;
  v11 = a1;
  v12 = objc_alloc((Class)NSString);
  v13 = sub_1001171A8(v11, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  v15 = objc_msgSend(v12, "initWithFormat:arguments:", v14, &a9);
  if (v15)
    v16 = v15;
  else
    v16 = v10;
  v17 = v16;

  return v17;
}

uint64_t sub_1001174E0()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "languageCode"));

  if ((objc_msgSend(v1, "isEqual:", CFSTR("ar")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("hi")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("th")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = (uint64_t)objc_msgSend(v1, "isEqual:", CFSTR("vi"));
  }

  return v2;
}

void sub_10011757C(void *a1, void *a2)
{
  sub_100117584(a1, a2, 0);
}

void sub_100117584(void *a1, void *a2, int a3)
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  int v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100117624;
  v6[3] = &unk_10017DE38;
  v9 = a3;
  v7 = a1;
  v8 = a2;
  v4 = v8;
  v5 = v7;
  objc_msgSend(v5, "cancelProxCardDraggingWithCompletion:", v6);

}

void sub_100117624(uint64_t a1)
{
  uint64_t v2;
  int v3;
  SVSTopAnimator *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transitioningDelegate"));
  v3 = *(_DWORD *)(a1 + 48);
  v15 = (id)v2;
  if ((v3 & 2) != 0)
  {
    v4 = objc_alloc_init(SVSTopAnimator);
    objc_msgSend(*(id *)(a1 + 32), "setTransitioningDelegate:", v4);
  }
  else
  {
    if ((v3 & 1) != 0)
      goto LABEL_6;
    v4 = (SVSTopAnimator *)objc_claimAutoreleasedReturnValue(+[CATransition animation](CATransition, "animation"));
    -[SVSTopAnimator setDuration:](v4, "setDuration:", 0.5);
    -[SVSTopAnimator setType:](v4, "setType:", kCATransitionFade);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[CAMediaTimingFunction functionWithName:](CAMediaTimingFunction, "functionWithName:", kCAMediaTimingFunctionEaseInEaseOut));
    -[SVSTopAnimator setTimingFunction:](v4, "setTimingFunction:", v5);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "layer"));
    objc_msgSend(v7, "addAnimation:forKey:", v4, 0);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "layer"));
    objc_msgSend(v9, "addAnimation:forKey:", v4, 0);

  }
LABEL_6:
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllers"));
  v11 = objc_msgSend(v10, "containsObject:", *(_QWORD *)(a1 + 40));

  v12 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  if ((v11 & 1) != 0)
    v14 = objc_msgSend(v12, "popToViewController:animated:", v13, 0);
  else
    objc_msgSend(v12, "pushViewController:animated:", v13, 0);
  objc_msgSend(*(id *)(a1 + 32), "setTransitioningDelegate:", v15);

}

uint64_t sub_1001177F4()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  unint64_t v8;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  BOOL v18;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v0, "scale");
  v2 = v1;
  objc_msgSend(v0, "_referenceBounds");
  v4 = v3;
  v6 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v8 = (unint64_t)objc_msgSend(v7, "userInterfaceIdiom");

  if ((v8 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    if (v2 == 2.0 && v4 == 768.0 && v6 == 1024.0)
    {
      v12 = 7;
    }
    else
    {
      v11 = v2 == 2.0;
      if (v4 != 834.0)
        v11 = 0;
      if (v11 && v6 == 1112.0)
      {
        v12 = 8;
      }
      else
      {
        if (v6 != 1194.0)
          LOBYTE(v11) = 0;
        if (v11)
        {
          v12 = 9;
        }
        else if (v6 == 1366.0 && v4 == 1024.0 && v2 == 2.0)
        {
          v12 = 10;
        }
        else
        {
          v12 = 0;
        }
      }
    }
  }
  else
  {
    v13 = v2 == 2.0 && v4 == 320.0;
    if (v13 && v6 == 568.0)
    {
      v12 = 1;
    }
    else if (v2 == 2.0 && v4 == 375.0 && v6 == 667.0)
    {
      v12 = 2;
    }
    else
    {
      v14 = v2 == 3.0;
      if (v4 != 414.0)
        v14 = 0;
      if (v14 && v6 == 736.0)
      {
        v12 = 3;
      }
      else if (v2 == 3.0 && v4 == 375.0 && v6 == 812.0)
      {
        v12 = 4;
      }
      else if (v2 == 2.0 && (v4 == 414.0 ? (v18 = v6 == 896.0) : (v18 = 0), v18))
      {
        v12 = 5;
      }
      else if (v14 && v6 == 896.0)
      {
        v12 = 6;
      }
      else
      {
        v12 = 0;
      }
    }
  }

  return v12;
}

id sub_100117A34()
{
  _QWORD v1[2];
  _QWORD v2[2];

  v1[0] = FBSOpenApplicationOptionKeyUnlockDevice;
  v1[1] = FBSOpenApplicationOptionKeyPromptUnlockDevice;
  v2[0] = &__kCFBooleanTrue;
  v2[1] = &__kCFBooleanTrue;
  return (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 2));
}

id sub_100117ABC()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];

  v7[0] = kCTFontTraitsAttribute;
  v6[0] = kCTFontUIFontDesignDefault;
  v5[0] = kCTFontUIFontDesignTrait;
  v5[1] = kCTFontWeightTrait;
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", kCTFontWeightRegular));
  v6[1] = v0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2));
  v7[1] = kCTFontLanguageAwareLineHeightRatioAttribute;
  v8[0] = v1;
  v8[1] = &off_100183850;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFontDescriptor fontDescriptorWithFontAttributes:](UIFontDescriptor, "fontDescriptorWithFontAttributes:", v2));

  return v3;
}

id sub_100117BF4()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];

  v7[0] = kCTFontTraitsAttribute;
  v6[0] = kCTFontUIFontDesignDefault;
  v5[0] = kCTFontUIFontDesignTrait;
  v5[1] = kCTFontWeightTrait;
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", kCTFontWeightSemibold));
  v6[1] = v0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2));
  v7[1] = kCTFontLanguageAwareLineHeightRatioAttribute;
  v8[0] = v1;
  v8[1] = &off_100183850;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIFontDescriptor fontDescriptorWithFontAttributes:](UIFontDescriptor, "fontDescriptorWithFontAttributes:", v2));

  return v3;
}

id sub_100118E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sessionHandleProgress:info:", a2, a3);
}

id sub_100118E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1001A8EB8 <= 30 && (dword_1001A8EB8 != -1 || _LogCategory_Initialize(&dword_1001A8EB8, 30)))
    LogPrintF(&dword_1001A8EB8, "-[TVLatencySetupMainController _sessionStart:]_block_invoke_2", 30, "Prompt for PIN: 0x%X, %d throttle seconds\n", a2, a3);
  return _objc_msgSend(*(id *)(a1 + 32), "showAuthUIWithFlags:throttleSeconds:", a2, a3);
}

void sub_100118F18(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_1001A8EB8 <= 30 && (dword_1001A8EB8 != -1 || _LogCategory_Initialize(&dword_1001A8EB8, 30)))
    LogPrintF(&dword_1001A8EB8, "-[TVLatencySetupMainController dismiss:completion:]_block_invoke", 30, "Re-enable prox card: TVLatency, %{error}\n", v3);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

id sub_100118FA8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_10011A154(uint64_t a1)
{
  unsigned int v2;
  id *v3;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("1234"));
  v3 = *(id **)(a1 + 48);
  if (v2)
    return objc_msgSend(v3[3], "showProgressUI");
  else
    return objc_msgSend(v3, "showWithFlags:throttleSeconds:", 0x10000, 0xFFFFFFFFLL);
}

void sub_10011A1B4(uint64_t a1)
{
  double MidX;
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  CGRect v8;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v7, "bounds");
  MidX = CGRectGetMidX(v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v3, "center");
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v6, "setCenter:", MidX, v5);

}

void sub_10011A23C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_10011A26C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "length");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 65), "digits"));
  v5 = objc_msgSend(v4, "count");

  if (v3 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_handlePINEntered:", v6);

}

id sub_10011A79C(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "testFlags");
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if ((v2 & 2) != 0)
    return objc_msgSend(v3, "showTryAgainUI");
  else
    return objc_msgSend(v3, "showDoneUI:", 0);
}

void sub_10011B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10011B810(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_10011B840()
{
  return (id)qword_1001AD378;
}

Class sub_10011B84C()
{
  Class result;

  if (qword_1001AD380 != -1)
    dispatch_once(&qword_1001AD380, &stru_10017E090);
  result = objc_getClass("NRPairingCompatibilityVersionInfo");
  qword_1001AD378 = (uint64_t)result;
  off_1001A8F98 = (uint64_t (*)())sub_10011B840;
  return result;
}

void sub_10011B8A8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, 0);

}

void sub_10011BE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 160));
  _Unwind_Resume(a1);
}

id sub_10011C738(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_launchWatchAppForPairing");
}

id sub_10011C740()
{
  return (id)qword_1001AD390;
}

Class sub_10011C74C()
{
  Class result;

  if (qword_1001AD398 != -1)
    dispatch_once(&qword_1001AD398, &stru_10017E0B0);
  result = objc_getClass("ASDSystemAppRequest");
  qword_1001AD390 = (uint64_t)result;
  off_1001A8FA0 = (uint64_t (*)())sub_10011C740;
  return result;
}

void sub_10011C7A8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[5];

  v3 = a2;
  if (v3)
  {
    if (dword_1001A8F28 <= 90
      && (dword_1001A8F28 != -1 || _LogCategory_Initialize(&dword_1001A8F28, 90)))
    {
      LogPrintF(&dword_1001A8F28, "-[SVSWatchSetupInitialViewController _restoreWatchApp]_block_invoke", 90, "### Restore Watch app failed: %{error}\n", v3);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10011C8C0;
    block[3] = &unk_10017E1F0;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else if (dword_1001A8F28 <= 30
         && (dword_1001A8F28 != -1 || _LogCategory_Initialize(&dword_1001A8F28, 30)))
  {
    LogPrintF(&dword_1001A8F28, "-[SVSWatchSetupInitialViewController _restoreWatchApp]_block_invoke", 30, "Restored Watch app\n");
  }

}

id sub_10011C8C0(uint64_t a1)
{
  id v2;
  void *v3;

  v2 = sub_1001171A8(CFSTR("Localizable"), CFSTR("WATCH_PAIR_FAILED"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(*(id *)(a1 + 32), "setSubtitle:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setPairing:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "hideActivityIndicator");
}

void sub_10011C918(id a1)
{
  qword_1001AD3A0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon", 2);
}

void sub_10011C940(id a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD v4[4];
  id v5;

  if (dword_1001A8F28 <= 60 && (dword_1001A8F28 != -1 || _LogCategory_Initialize(&dword_1001A8F28, 60)))
    LogPrintF(&dword_1001A8F28, "-[SVSWatchSetupInitialViewController _launchWatchAppForPairing]_block_invoke", 60, "Launching Watch app\n");
  v1 = objc_alloc_init((Class)SFClient);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("bridge://?action=StartPairing")));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10011CA30;
  v4[3] = &unk_10017E070;
  v5 = v1;
  v3 = v1;
  objc_msgSend(v3, "openSetupURL:completion:", v2, v4);

}

void sub_10011CA30(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (v3)
  {
    if (dword_1001A8F28 <= 60
      && (dword_1001A8F28 != -1 || _LogCategory_Initialize(&dword_1001A8F28, 60)))
    {
      LogPrintF(&dword_1001A8F28, "-[SVSWatchSetupInitialViewController _launchWatchAppForPairing]_block_invoke_2", 60, "### Open setup URL failed: %{error}\n", v3);
    }
  }
  else if (dword_1001A8F28 <= 60
         && (dword_1001A8F28 != -1 || _LogCategory_Initialize(&dword_1001A8F28, 60)))
  {
    LogPrintF(&dword_1001A8F28, "-[SVSWatchSetupInitialViewController _launchWatchAppForPairing]_block_invoke_2", 60, "Launched Watch app\n");
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void sub_10011CB04(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleContinueButton");

}

void sub_10011CB30(id a1)
{
  qword_1001AD388 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_10011EDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sessionHandleProgress:info:", a2, a3);
}

void sub_10011EDF0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;

  v5 = a2;
  v7 = v5;
  if (dword_1001A9008 <= 30)
  {
    if (dword_1001A9008 != -1 || (v6 = _LogCategory_Initialize(&dword_1001A9008, 30), v5 = v7, v6))
    {
      LogPrintF(&dword_1001A9008, "-[WHASetupMainController _sessionStart]_block_invoke_2", 30, "Prompt for home (%ld homes)\n", objc_msgSend(v5, "count"));
      v5 = v7;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "showHomePickerUI:defaultIndex:", v5, a3);

}

id sub_10011EE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1001A9008 <= 30 && (dword_1001A9008 != -1 || _LogCategory_Initialize(&dword_1001A9008, 30)))
    LogPrintF(&dword_1001A9008, "-[WHASetupMainController _sessionStart]_block_invoke_3", 30, "Prompt for PIN: 0x%X, %d throttle seconds\n", a2, a3);
  return _objc_msgSend(*(id *)(a1 + 32), "showAuthUIWithFlags:throttleSeconds:", a2, a3);
}

void sub_10011EF2C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  int v6;
  id v7;

  v5 = a2;
  v7 = v5;
  if (dword_1001A9008 <= 30)
  {
    if (dword_1001A9008 != -1 || (v6 = _LogCategory_Initialize(&dword_1001A9008, 30), v5 = v7, v6))
    {
      LogPrintF(&dword_1001A9008, "-[WHASetupMainController _sessionStart]_block_invoke_4", 30, "Prompt for room (%ld rooms)\n", objc_msgSend(v5, "count"));
      v5 = v7;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "showRoomPickerUI:firstSuggestedIndex:", v5, a3);

}

id sub_10011EFD4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "dismiss");
}

id sub_10011F004(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismiss:", 11);
}

id sub_10011F764(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showAuthUIWithFlags:throttleSeconds:", 0, 0xFFFFFFFFLL);
}

id sub_100120128(uint64_t a1)
{
  unsigned int v2;
  id *v3;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(a1 + 40), "isEqual:", CFSTR("1234"));
  v3 = *(id **)(a1 + 48);
  if (v2)
    return objc_msgSend(v3[3], "showProgressUI");
  else
    return objc_msgSend(v3, "showWithFlags:throttleSeconds:", 0x10000, 0xFFFFFFFFLL);
}

void sub_100120188(uint64_t a1)
{
  double MidX;
  void *v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  CGRect v8;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v7, "bounds");
  MidX = CGRectGetMidX(v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v3, "center");
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerView"));
  objc_msgSend(v6, "setCenter:", MidX, v5);

}

void sub_100120210(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "layoutIfNeeded");

}

void sub_100120240(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "length");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 49), "digits"));
  v5 = objc_msgSend(v4, "count");

  if (v3 == v5)
    objc_msgSend(*(id *)(a1 + 32), "_handlePINEntered:", v6);

}

id sub_100120680(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "testMode");
  v3 = *(void **)(*(_QWORD *)(a1 + 40) + 24);
  if (v2 == 1)
    return objc_msgSend(v3, "showHomePickerUI:defaultIndex:", &__NSArray0__struct, -1);
  else
    return objc_msgSend(v3, "showDoneUI:", 4294960574);
}

void sub_100120C8C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  v2 = objc_alloc_init((Class)NSMutableArray);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(&off_100183808, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(&off_100183808);
        v7 = SFLocalizedStringForKey(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6));
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        objc_msgSend(v2, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(&off_100183808, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showRoomPickerUI:firstSuggestedIndex:", v2, 1);

}

id sub_1001213D4(uint64_t a1)
{
  uint64_t v2;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "testMode") == 1)
    v2 = 0;
  else
    v2 = 4294960574;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "showDoneUI:", v2);
}

void sub_100121E1C(uint64_t a1)
{
  void *v1;
  void *v2;
  unsigned __int8 v3;
  id v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 32)));
  if (dword_1001A9008 <= 30 && (dword_1001A9008 != -1 || _LogCategory_Initialize(&dword_1001A9008, 30)))
    LogPrintF(&dword_1001A9008, "-[WHASetupDoneViewController handleActionButton:]_block_invoke", 30, "Open settings: '%@'\n", v1);
  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
    v5 = 0;
    v3 = objc_msgSend(v2, "openSensitiveURL:withOptions:error:", v1, 0, &v5);
    v4 = v5;

    if ((v3 & 1) != 0)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
  }
  if (dword_1001A9008 <= 90 && (dword_1001A9008 != -1 || _LogCategory_Initialize(&dword_1001A9008, 90)))
    LogPrintF(&dword_1001A9008, "-[WHASetupDoneViewController handleActionButton:]_block_invoke", 90, "### Open settings failed (%@), %{error}\n", v1, v4);
LABEL_13:

}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGRectValue");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLAssetWithURL_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLAssetWithURL:options:");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend__applicationIconImageForBundleIdentifier_format_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationIconImageForBundleIdentifier:format:scale:");
}

id objc_msgSend__applicationIconImageForFormat_precomposed_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationIconImageForFormat:precomposed:scale:");
}

id objc_msgSend__deviceDiscoveryEnsureStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceDiscoveryEnsureStarted");
}

id objc_msgSend__deviceSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceSupported");
}

id objc_msgSend__discoveryStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoveryStart");
}

id objc_msgSend__discoveryStop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discoveryStop");
}

id objc_msgSend__flatImageWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flatImageWithColor:");
}

id objc_msgSend__handleAgreeFromObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAgreeFromObjectModel:");
}

id objc_msgSend__handleContinueButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleContinueButton");
}

id objc_msgSend__handleDeviceNoLongerNeedsPassword(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDeviceNoLongerNeedsPassword");
}

id objc_msgSend__handleDismissButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDismissButton");
}

id objc_msgSend__handleEnterCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEnterCode");
}

id objc_msgSend__handleHomeButtonPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHomeButtonPressed");
}

id objc_msgSend__handleMigrateStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMigrateStart");
}

id objc_msgSend__handleOpenApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOpenApp");
}

id objc_msgSend__handlePINEntered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePINEntered:");
}

id objc_msgSend__handleTestTimerFired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTestTimerFired");
}

id objc_msgSend__handleTryAgainButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTryAgainButton");
}

id objc_msgSend__handleVisualAuthEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVisualAuthEvent:");
}

id objc_msgSend__pairSetupTryPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pairSetupTryPIN:");
}

id objc_msgSend__pickerAlertShowError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickerAlertShowError:");
}

id objc_msgSend__pickerAlertShowSuccess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pickerAlertShowSuccess");
}

id objc_msgSend__preferredFontForTextStyle_variant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preferredFontForTextStyle:variant:");
}

id objc_msgSend__prepareTrainingAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareTrainingAnimation");
}

id objc_msgSend__referenceBounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_referenceBounds");
}

id objc_msgSend__remoteViewControllerProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_remoteViewControllerProxy");
}

id objc_msgSend__sessionStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sessionStart");
}

id objc_msgSend__sessionStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sessionStart:");
}

id objc_msgSend__setContinuousCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContinuousCornerRadius:");
}

id objc_msgSend__setDisallowsAutoPauseOnRouteRemovalIfNoAudio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDisallowsAutoPauseOnRouteRemovalIfNoAudio:");
}

id objc_msgSend__setEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEndpoint:");
}

id objc_msgSend__setUsesDynamicRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUsesDynamicRowHeight:");
}

id objc_msgSend__startPairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPairing:");
}

id objc_msgSend__termsDisagree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_termsDisagree");
}

id objc_msgSend__tryPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryPIN:");
}

id objc_msgSend__updateCornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCornerRadius");
}

id objc_msgSend__updateLabels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLabels");
}

id objc_msgSend__updateWidthConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWidthConstraints");
}

id objc_msgSend_aa_needsToVerifyTerms(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_needsToVerifyTerms");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_actionButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButtons");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activate");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activatePhysicalCard_withActivationCode_forFeatureIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activatePhysicalCard:withActivationCode:forFeatureIdentifier:completion:");
}

id objc_msgSend_activateTouchDelayTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateTouchDelayTimer");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activateWithDimmingView_bottomMarginConstraint_dismissHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithDimmingView:bottomMarginConstraint:dismissHandler:");
}

id objc_msgSend_activeInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeInterfaceOrientation");
}

id objc_msgSend_activityIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityIndicator");
}

id objc_msgSend_adamIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adamIDs");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addAnimationObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimationObserver:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addChildNode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildNode:");
}

id objc_msgSend_addCompletedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletedHandler:");
}

id objc_msgSend_addFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFeature:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItem:");
}

id objc_msgSend_addKeyframeWithRelativeStartTime_relativeDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeyframeWithRelativeStartTime:relativeDuration:animations:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserver_selector_name_object_suspensionBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:suspensionBehavior:");
}

id objc_msgSend_addOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutput:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_advertisementFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertisementFields");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_alignmentRectInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alignmentRectInsets");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateKeyframesWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateKeyframesWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animateToStateName_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToStateName:completionHandler:");
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animation");
}

id objc_msgSend_animationDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationDidComplete");
}

id objc_msgSend_animationDidStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationDidStart");
}

id objc_msgSend_animationKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationKeys");
}

id objc_msgSend_animationPlayerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationPlayerForKey:");
}

id objc_msgSend_announceCallsState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceCallsState");
}

id objc_msgSend_announceMessagesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceMessagesEvent");
}

id objc_msgSend_appContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appContent");
}

id objc_msgSend_appIconImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appIconImage");
}

id objc_msgSend_appIconImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appIconImageView");
}

id objc_msgSend_appName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appName");
}

id objc_msgSend_appState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appState");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleIDHeadersForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDHeadersForRequest:");
}

id objc_msgSend_applicationProxyForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationProxyForIdentifier:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asset");
}

id objc_msgSend_authenticateToPresentInPopover_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateToPresentInPopover:completion:");
}

id objc_msgSend_autoGrant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoGrant");
}

id objc_msgSend_b494(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "b494");
}

id objc_msgSend_b507(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "b507");
}

id objc_msgSend_b607(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "b607");
}

id objc_msgSend_b688(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "b688");
}

id objc_msgSend_background(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "background");
}

id objc_msgSend_badPINCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "badPINCount");
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeFirstResponder");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginBackgroundTaskWithExpirationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginBackgroundTaskWithExpirationHandler:");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_bleDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bleDevice");
}

id objc_msgSend_borderColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "borderColor");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomMarginConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomMarginConstraint");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_btProductID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btProductID");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_camera(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "camera");
}

id objc_msgSend_canEvaluatePolicy_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canEvaluatePolicy:error:");
}

id objc_msgSend_cancelProxCardDraggingWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelProxCardDraggingWithCompletion:");
}

id objc_msgSend_cardSubtitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardSubtitle");
}

id objc_msgSend_cardTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardTitle");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerXAnchor");
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerYAnchor");
}

id objc_msgSend_chooseHome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chooseHome:");
}

id objc_msgSend_chooseRoom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chooseRoom:");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clientInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInfo");
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInfoHeader");
}

id objc_msgSend_clientTryPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientTryPIN:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_colorCalibratorSetupSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorCalibratorSetupSession");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionHandler");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_configurationWithPointSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPointSize:");
}

id objc_msgSend_configureUIElementsDefault(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureUIElementsDefault");
}

id objc_msgSend_configureUIElementsForHotspot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureUIElementsForHotspot");
}

id objc_msgSend_configureVideo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureVideo");
}

id objc_msgSend_configureVideoGeometry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureVideoGeometry");
}

id objc_msgSend_constant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constant");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToConstant:");
}

id objc_msgSend_constraintEqualToSystemSpacingAfterAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToSystemSpacingAfterAnchor:multiplier:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:");
}

id objc_msgSend_constraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraints");
}

id objc_msgSend_containerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerView");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsTraitsInCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsTraitsInCollection:");
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentOffset");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_convertPoint_toView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toView:");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyPixelBufferForItemTime_itemTimeForDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPixelBufferForItemTime:itemTimeForDisplay:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentCommandBuffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCommandBuffer");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentItem");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTime");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateConstraints:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultPrimaryActionStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultPrimaryActionStyle");
}

id objc_msgSend_defaultSecondaryActionStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSecondaryActionStyle");
}

id objc_msgSend_defaultSubtitleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSubtitleFont");
}

id objc_msgSend_defaultTitleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTitleColor");
}

id objc_msgSend_defaultTitleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTitleFont");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharactersInRange:");
}

id objc_msgSend_desiredHomeButtonEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredHomeButtonEvents");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device");
}

id objc_msgSend_deviceActionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceActionType");
}

id objc_msgSend_deviceColorCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceColorCode");
}

id objc_msgSend_deviceDiscoveryStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceDiscoveryStart");
}

id objc_msgSend_deviceDiscoveryStop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceDiscoveryStop");
}

id objc_msgSend_deviceForSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForSession");
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentifier");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceName");
}

id objc_msgSend_deviceProductID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceProductID");
}

id objc_msgSend_deviceSupportsInEarDetection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceSupportsInEarDetection");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_diffuse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diffuse");
}

id objc_msgSend_digits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "digits");
}

id objc_msgSend_dimmingView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dimmingView");
}

id objc_msgSend_discoverabilitySignal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverabilitySignal");
}

id objc_msgSend_discoverabilitySignalsStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverabilitySignalsStream");
}

id objc_msgSend_dismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismiss");
}

id objc_msgSend_dismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismiss:");
}

id objc_msgSend_dismiss_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismiss:animated:");
}

id objc_msgSend_dismiss_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismiss:completion:");
}

id objc_msgSend_dismissActionStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissActionStyle");
}

id objc_msgSend_dismissActionTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissActionTitle");
}

id objc_msgSend_dismissAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissAnimated:completion:");
}

id objc_msgSend_dismissEventually(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissEventually");
}

id objc_msgSend_dismissObjectModelsAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissObjectModelsAnimated:completion:");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_dismissWithAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissWithAction:");
}

id objc_msgSend_dismissWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissWithType:");
}

id objc_msgSend_dismissing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissing");
}

id objc_msgSend_displayCornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayCornerRadius");
}

id objc_msgSend_displayStringForContactIdentifier_deviceIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayStringForContactIdentifier:deviceIdentifier:completion:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_drawViewHierarchyInRect_afterScreenUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawViewHierarchyInRect:afterScreenUpdates:");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_effectWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithStyle:");
}

id objc_msgSend_endBackgroundTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endBackgroundTask:");
}

id objc_msgSend_ensureStoppedWithDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureStoppedWithDismiss:");
}

id objc_msgSend_ensureStoppedWithDismiss_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureStoppedWithDismiss:reason:");
}

id objc_msgSend_enumerateChildNodesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateChildNodesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluatePolicy_localizedReason_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluatePolicy:localizedReason:reply:");
}

id objc_msgSend_eventWithStream_source_startDate_endDate_identifierStringValue_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventWithStream:source:startDate:endDate:identifierStringValue:metadata:");
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "events");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_extendedUserInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendedUserInfo");
}

id objc_msgSend_failureResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failureResult");
}

id objc_msgSend_featureWithTitle_detailText_icon_tintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureWithTitle:detailText:icon:tintColor:");
}

id objc_msgSend_fetchNameAndIconWithSize_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNameAndIconWithSize:completion:");
}

id objc_msgSend_fileRadar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileRadar:");
}

id objc_msgSend_fileTransferSessionTemplate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileTransferSessionTemplate");
}

id objc_msgSend_fileURLWithPath_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:relativeToURL:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finish");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "font");
}

id objc_msgSend_fontDescriptorWithFontAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorWithFontAttributes:");
}

id objc_msgSend_fontDescriptorWithSymbolicTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorWithSymbolicTraits:");
}

id objc_msgSend_fontWithDescriptor_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithDescriptor:size:");
}

id objc_msgSend_forcedActivationResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcedActivationResult");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_functionWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithName:");
}

id objc_msgSend_geometry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geometry");
}

id objc_msgSend_getAssetBundleForDeviceQuery_withRequestConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAssetBundleForDeviceQuery:withRequestConfiguration:");
}

id objc_msgSend_grayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grayColor");
}

id objc_msgSend_handleActivateButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleActivateButton:");
}

id objc_msgSend_handleAllowButtonPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAllowButtonPressed:");
}

id objc_msgSend_handleContinueButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleContinueButton");
}

id objc_msgSend_handleContinueForCalls(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleContinueForCalls");
}

id objc_msgSend_handleContinueForMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleContinueForMessages");
}

id objc_msgSend_handleDismissButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDismissButton");
}

id objc_msgSend_handleDismissForCalls(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDismissForCalls");
}

id objc_msgSend_handleDismissForMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDismissForMessages");
}

id objc_msgSend_handleDoNotAnnounceButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDoNotAnnounceButton");
}

id objc_msgSend_handleDoNotForMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDoNotForMessages");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleProgressEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleProgressEvent:");
}

id objc_msgSend_handleProgressEvent_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleProgressEvent:info:");
}

id objc_msgSend_handleStartButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleStartButton:");
}

id objc_msgSend_hasNewPixelBufferForItemTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNewPixelBufferForItemTime:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightAnchor");
}

id objc_msgSend_hotspot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hotspot");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_imageByApplyingSymbolConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageByApplyingSymbolConfiguration:");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imageNamed_inBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:inBundle:");
}

id objc_msgSend_inEarDetection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inEarDetection");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_infoButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoButton");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initWithAccount_parameters_preferPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:parameters:preferPassword:");
}

id objc_msgSend_initWithActivityIndicatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityIndicatorStyle:");
}

id objc_msgSend_initWithAdamIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAdamIDs:");
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:target:action:");
}

id objc_msgSend_initWithBluetoothProductIdentifier_color_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBluetoothProductIdentifier:color:");
}

id objc_msgSend_initWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:");
}

id objc_msgSend_initWithContentView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentView:");
}

id objc_msgSend_initWithEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffect:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:options:");
}

id objc_msgSend_initWithGestureRecognizerEvaluator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGestureRecognizerEvaluator:");
}

id objc_msgSend_initWithHomePodColor_version_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHomePodColor:version:");
}

id objc_msgSend_initWithIdentifier_bundleID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:bundleID:context:");
}

id objc_msgSend_initWithIdentifier_bundleIdentifier_itemIdentifier_groupIdentifier_deviceIdentifier_userIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:bundleIdentifier:itemIdentifier:groupIdentifier:deviceIdentifier:userIdentifier:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithPixelBufferAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPixelBufferAttributes:");
}

id objc_msgSend_initWithPresentedViewController_presentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPresentedViewController:presentingViewController:");
}

id objc_msgSend_initWithProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProductID:");
}

id objc_msgSend_initWithQueryResultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueryResultHandler:");
}

id objc_msgSend_initWithScannerEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScannerEngine:");
}

id objc_msgSend_initWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithTitle_detailText_icon_tintColor_valueChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:detailText:icon:tintColor:valueChangedBlock:");
}

id objc_msgSend_initWithTitle_style_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:style:target:action:");
}

id objc_msgSend_initWithURLString_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURLString:account:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserInfo:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertSubview_below_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:below:");
}

id objc_msgSend_installProfileWithData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installProfileWithData:completion:");
}

id objc_msgSend_installed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installed");
}

id objc_msgSend_instantiateInitialViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instantiateInitialViewController");
}

id objc_msgSend_instantiateViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instantiateViewController");
}

id objc_msgSend_instantiateViewControllerWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instantiateViewControllerWithIdentifier:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateTouchDelayTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateTouchDelayTimer");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAirPods(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAirPods");
}

id objc_msgSend_isBeingDismissed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeingDismissed");
}

id objc_msgSend_isBeingPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeingPresented");
}

id objc_msgSend_isDragging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDragging");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInstalled");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMovingFromParentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMovingFromParentViewController");
}

id objc_msgSend_isMovingToParentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMovingToParentViewController");
}

id objc_msgSend_isOn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOn");
}

id objc_msgSend_isPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPairing");
}

id objc_msgSend_isSiriAllowedWhileLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSiriAllowedWhileLocked");
}

id objc_msgSend_isUpsellFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUpsellFlow");
}

id objc_msgSend_issuerID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "issuerID");
}

id objc_msgSend_justBeAContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "justBeAContainer");
}

id objc_msgSend_keyPathWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyPathWithKey:");
}

id objc_msgSend_knowledgeStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "knowledgeStore");
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelColor");
}

id objc_msgSend_labelWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelWithStyle:");
}

id objc_msgSend_languageCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageCode");
}

id objc_msgSend_latencySetupSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latencySetupSession");
}

id objc_msgSend_launchSetupForMigration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchSetupForMigration:");
}

id objc_msgSend_launchURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchURL");
}

id objc_msgSend_launchWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchWithCompletion:");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutIfNeeded");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_loadData_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadData:baseURL:");
}

id objc_msgSend_loadOfflineTerms(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadOfflineTerms");
}

id objc_msgSend_loadRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRequest:completion:");
}

id objc_msgSend_loadedHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadedHandler");
}

id objc_msgSend_loader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loader");
}

id objc_msgSend_locIntermediateStringForViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locIntermediateStringForViewType:");
}

id objc_msgSend_locTableForViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locTableForViewType:");
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizations");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedDeviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDeviceName");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStandardCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStandardCompare:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_locationInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationInView:");
}

id objc_msgSend_logDismissEventForAnnounceMessagesToDuet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logDismissEventForAnnounceMessagesToDuet");
}

id objc_msgSend_logUsageDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logUsageDone:");
}

id objc_msgSend_logUsageStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logUsageStart:");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainContentGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainContentGuide");
}

id objc_msgSend_mainController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainController");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_material(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "material");
}

id objc_msgSend_materialPropertyWithContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "materialPropertyWithContents:");
}

id objc_msgSend_maxPairingCompatibilityVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxPairingCompatibilityVersion");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelForUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelForUserInfo:");
}

id objc_msgSend_modelForUserInfo_siriControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelForUserInfo:siriControllerClass:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_myAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "myAppleID");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameOnCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameOnCard");
}

id objc_msgSend_naturalSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "naturalSize");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_needsSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsSetup");
}

id objc_msgSend_newDefaultLibraryWithBundle_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newDefaultLibraryWithBundle:error:");
}

id objc_msgSend_newTextureWithDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTextureWithDescriptor:");
}

id objc_msgSend_nfcTagScanned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nfcTagScanned");
}

id objc_msgSend_nodeWithGeometry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nodeWithGeometry:");
}

id objc_msgSend_nominalFrameRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nominalFrameRate");
}

id objc_msgSend_notificationOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationOccurred:");
}

id objc_msgSend_notifyObserversWithCommandBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyObserversWithCommandBuffer:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_openApplicationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleID:");
}

id objc_msgSend_openButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openButton");
}

id objc_msgSend_openSensitiveURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:error:");
}

id objc_msgSend_openSetupURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSetupURL:completion:");
}

id objc_msgSend_openURL_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:withCompletionHandler:");
}

id objc_msgSend_openURL_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:withOptions:error:");
}

id objc_msgSend_optionalFeatureWithTitle_detailText_icon_tintColor_valueChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionalFeatureWithTitle:detailText:icon:tintColor:valueChangedBlock:");
}

id objc_msgSend_osBuild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "osBuild");
}

id objc_msgSend_otherDeviceClassCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherDeviceClassCode");
}

id objc_msgSend_otherDeviceModelCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "otherDeviceModelCode");
}

id objc_msgSend_packageWithContentsOfURL_type_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packageWithContentsOfURL:type:options:error:");
}

id objc_msgSend_pairSetupTryPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairSetupTryPIN:");
}

id objc_msgSend_pairingSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingSession");
}

id objc_msgSend_panGestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panGestureRecognizer");
}

id objc_msgSend_password(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "password");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathForResource_ofType_inDirectory_forLocalization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:inDirectory:forLocalization:");
}

id objc_msgSend_peerPublicKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peerPublicKey");
}

id objc_msgSend_performAction_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:completion:");
}

id objc_msgSend_performRequestWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequestWithHandler:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_physicalCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "physicalCard");
}

id objc_msgSend_physicalCardForFeatureIdentifier_activationCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "physicalCardForFeatureIdentifier:activationCode:completion:");
}

id objc_msgSend_planeWithWidth_height_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "planeWithWidth:height:");
}

id objc_msgSend_playerForMovieAtURL_pointsSize_nominalFrameRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerForMovieAtURL:pointsSize:nominalFrameRate:");
}

id objc_msgSend_playerItemWithAsset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerItemWithAsset:");
}

id objc_msgSend_playerWithPlayerItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playerWithPlayerItem:");
}

id objc_msgSend_pointInside_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointInside:withEvent:");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_popToViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popToViewController:animated:");
}

id objc_msgSend_postNotificationName_object_userInfo_deliverImmediately_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:deliverImmediately:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_prefHideTTR(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefHideTTR");
}

id objc_msgSend_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLanguages");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_prepareForRetry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForRetry");
}

id objc_msgSend_presentAppropriateViewControllerIfReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentAppropriateViewControllerIfReady");
}

id objc_msgSend_presentProxCardFlowWithDelegate_initialViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentProxCardFlowWithDelegate:initialViewController:");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_presentingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentingViewController");
}

id objc_msgSend_primaryActionStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryActionStyle");
}

id objc_msgSend_primaryActionTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryActionTitle");
}

id objc_msgSend_primaryActionUsesLegacyStyling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryActionUsesLegacyStyling");
}

id objc_msgSend_primaryColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryColor");
}

id objc_msgSend_productID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productID");
}

id objc_msgSend_productIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productIdentifier");
}

id objc_msgSend_productImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productImage");
}

id objc_msgSend_program(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "program");
}

id objc_msgSend_proxCardNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxCardNavigationController");
}

id objc_msgSend_proximityButtonType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityButtonType");
}

id objc_msgSend_purpose(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purpose");
}

id objc_msgSend_pushViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushViewController:animated:");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise");
}

id objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_reactivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactivate");
}

id objc_msgSend_recognizerEvaluator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recognizerEvaluator");
}

id objc_msgSend_reenableProxCardType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reenableProxCardType:completion:");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAction:");
}

id objc_msgSend_removeAnimationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAnimationForKey:");
}

id objc_msgSend_removeAnimationObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAnimationObserver:");
}

id objc_msgSend_removeAttribute_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAttribute:range:");
}

id objc_msgSend_removeFromSuperview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromSuperview");
}

id objc_msgSend_removeGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGestureRecognizer:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_renderer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderer");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceRegion_mipmapLevel_withBytes_bytesPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:");
}

id objc_msgSend_resourceURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceURL");
}

id objc_msgSend_retriggerProximitySetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retriggerProximitySetup:");
}

id objc_msgSend_retryActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryActivation");
}

id objc_msgSend_rootNode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootNode");
}

id objc_msgSend_saveObjects_responseQueue_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveObjects:responseQueue:withCompletion:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scanRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanRate");
}

id objc_msgSend_scannerEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerEngine");
}

id objc_msgSend_sceneWithURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sceneWithURL:options:error:");
}

id objc_msgSend_secondaryActionAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryActionAvailable");
}

id objc_msgSend_secondaryActionStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryActionStyle");
}

id objc_msgSend_secondaryActionTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryActionTitle");
}

id objc_msgSend_secondaryActionUsesLegacyStyling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryActionUsesLegacyStyling");
}

id objc_msgSend_secondarySystemFillColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondarySystemFillColor");
}

id objc_msgSend_selectedRowInComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectedRowInComponent:");
}

id objc_msgSend_selfPublicKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selfPublicKey");
}

id objc_msgSend_semanticContentAttribute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "semanticContentAttribute");
}

id objc_msgSend_sendAppEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAppEvent:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendResponseWithUnHandledEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResponseWithUnHandledEvents:");
}

id objc_msgSend_serverDidPickUsername_password_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverDidPickUsername:password:error:");
}

id objc_msgSend_sessionStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStart");
}

id objc_msgSend_sessionStop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStop");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActivityIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityIndicator:");
}

id objc_msgSend_setAdjustsFontForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustsFontForContentSizeCategory:");
}

id objc_msgSend_setAdjustsFontSizeToFitWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustsFontSizeToFitWidth:");
}

id objc_msgSend_setAdvertisingName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertisingName:");
}

id objc_msgSend_setAllowNonSecureHTTP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowNonSecureHTTP:");
}

id objc_msgSend_setAllowedUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedUnits:");
}

id objc_msgSend_setAllowsAlertItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsAlertItems:");
}

id objc_msgSend_setAllowsAlertStacking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsAlertStacking:");
}

id objc_msgSend_setAllowsBanners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsBanners:");
}

id objc_msgSend_setAllowsExternalPlayback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExternalPlayback:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAlwaysBounceVertical_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysBounceVertical:");
}

id objc_msgSend_setAmsURLOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAmsURLOverride:");
}

id objc_msgSend_setAnimationDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimationDuration:");
}

id objc_msgSend_setAnnounceCallsState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnounceCallsState:");
}

id objc_msgSend_setAnnounceMessagesEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnounceMessagesEnabled:");
}

id objc_msgSend_setAntialiasingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAntialiasingMode:");
}

id objc_msgSend_setAppIconImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppIconImage:");
}

id objc_msgSend_setAppIconImageView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppIconImageView:");
}

id objc_msgSend_setAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppName:");
}

id objc_msgSend_setAppeared_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppeared:");
}

id objc_msgSend_setAttribute_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAttributes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:range:");
}

id objc_msgSend_setAuthenticationGracePeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthenticationGracePeriod:");
}

id objc_msgSend_setAutoStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoStart:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBadPINCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBadPINCount:");
}

id objc_msgSend_setBlendMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlendMode:");
}

id objc_msgSend_setBlockHardwareButtons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlockHardwareButtons:");
}

id objc_msgSend_setBlurBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlurBackground:");
}

id objc_msgSend_setBodyText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBodyText:");
}

id objc_msgSend_setBorderColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderColor:");
}

id objc_msgSend_setBorderWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderWidth:");
}

id objc_msgSend_setCancelsTouchesInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelsTouchesInView:");
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenter:");
}

id objc_msgSend_setChangeFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeFlags:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setColorMode_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColorMode:animated:");
}

id objc_msgSend_setCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompleted:");
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionHandler:");
}

id objc_msgSend_setConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConstant:");
}

id objc_msgSend_setContactIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContactIdentifier:");
}

id objc_msgSend_setContentInsetAdjustmentBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentInsetAdjustmentBehavior:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:");
}

id objc_msgSend_setContentOffset_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:animated:");
}

id objc_msgSend_setContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentSize:");
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContents:");
}

id objc_msgSend_setCustomImage_withAlignmentEdgeInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomImage:withAlignmentEdgeInsets:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDefaultHomeIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultHomeIndex:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDesiredHardwareButtonEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredHardwareButtonEvents:");
}

id objc_msgSend_setDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceChangedHandler:");
}

id objc_msgSend_setDeviceConnectedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceConnectedHandler:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceName:");
}

id objc_msgSend_setDeviceProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceProductID:");
}

id objc_msgSend_setDeviceSupportsInEarDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceSupportsInEarDetection:");
}

id objc_msgSend_setDigits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDigits:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDisclaimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisclaimer:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDismissActionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissActionStyle:");
}

id objc_msgSend_setDismissActionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissActionTitle:");
}

id objc_msgSend_setDismissButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissButtonAction:");
}

id objc_msgSend_setDismissalType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissalType:");
}

id objc_msgSend_setDismissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDismissing:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDisplayNameIsDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayNameIsDevice:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExternallyVerifiedAndApprovedSharedWebCredentialsDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExternallyVerifiedAndApprovedSharedWebCredentialsDomains:");
}

id objc_msgSend_setFailureResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailureResult:");
}

id objc_msgSend_setFeatureImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeatureImage:");
}

id objc_msgSend_setFileTransferSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileTransferSession:");
}

id objc_msgSend_setFirstSuggestedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstSuggestedIndex:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setForcedActivationResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForcedActivationResult:");
}

id objc_msgSend_setFragmentFunctionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFragmentFunctionName:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setHandlerForElementName_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerForElementName:handler:");
}

id objc_msgSend_setHasUserSeenAnnounceCallsOptOutScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUserSeenAnnounceCallsOptOutScreen:");
}

id objc_msgSend_setHasUserSeenAnnounceMessagesOptOutScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasUserSeenAnnounceMessagesOptOutScreen:");
}

id objc_msgSend_setHashedEmail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHashedEmail:");
}

id objc_msgSend_setHashedPhone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHashedPhone:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHomes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomes:");
}

id objc_msgSend_setHostViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostViewController:");
}

id objc_msgSend_setHotspotPSK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHotspotPSK:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdleTimerDisabled_forReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdleTimerDisabled:forReason:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImageStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageStyle:");
}

id objc_msgSend_setImages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImages:");
}

id objc_msgSend_setIncludesApproximationPhrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludesApproximationPhrase:");
}

id objc_msgSend_setInfoButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInfoButtonAction:");
}

id objc_msgSend_setInitialState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialState");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsSiriAllowedWhileLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiriAllowedWhileLocked:");
}

id objc_msgSend_setIsUpsellFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUpsellFlow:");
}

id objc_msgSend_setItemURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemURL:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLibrary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLibrary:");
}

id objc_msgSend_setLightingModelName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLightingModelName:");
}

id objc_msgSend_setListenerEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListenerEndpoint:");
}

id objc_msgSend_setLocalizedDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedDeviceName:");
}

id objc_msgSend_setLocalizedName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedName:");
}

id objc_msgSend_setLoops_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoops:");
}

id objc_msgSend_setMagnificationFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMagnificationFilter:");
}

id objc_msgSend_setMainController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainController:");
}

id objc_msgSend_setMasksToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasksToBounds:");
}

id objc_msgSend_setMaterials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaterials:");
}

id objc_msgSend_setMaximumUnitCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumUnitCount:");
}

id objc_msgSend_setMinificationFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinificationFilter:");
}

id objc_msgSend_setMipFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMipFilter:");
}

id objc_msgSend_setModalPresentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalPresentationStyle:");
}

id objc_msgSend_setModalTransitionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModalTransitionStyle:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setModelContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModelContents:");
}

id objc_msgSend_setMoreInfoAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMoreInfoAction:");
}

id objc_msgSend_setMyAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMyAppleID:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsLayout");
}

id objc_msgSend_setNumberOfTapsRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfTapsRequired:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOn:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setOpenAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpenAction:");
}

id objc_msgSend_setOpenButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpenButton:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOsVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOsVersion:");
}

id objc_msgSend_setOverrideUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideUserInterfaceStyle:");
}

id objc_msgSend_setPagingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPagingEnabled:");
}

id objc_msgSend_setPairFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairFlags:");
}

id objc_msgSend_setPairing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairing:");
}

id objc_msgSend_setPairingExitView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairingExitView:");
}

id objc_msgSend_setPairingFinishedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairingFinishedHandler:");
}

id objc_msgSend_setPaused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaused:");
}

id objc_msgSend_setPeerDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerDevice:");
}

id objc_msgSend_setPeerDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeerDisplayName:");
}

id objc_msgSend_setPlaceholder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholder:");
}

id objc_msgSend_setPreferredAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredAction:");
}

id objc_msgSend_setPreferredFramesPerSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredFramesPerSecond:");
}

id objc_msgSend_setPreferredSymbolConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredSymbolConfiguration:");
}

id objc_msgSend_setPresentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentingViewController:");
}

id objc_msgSend_setPrimaryActionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryActionStyle:");
}

id objc_msgSend_setPrimaryActionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryActionTitle:");
}

id objc_msgSend_setPrimaryActionUsesLegacyStyling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrimaryActionUsesLegacyStyling:");
}

id objc_msgSend_setProgram_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgram:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressHandler:");
}

id objc_msgSend_setPromptForHomeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptForHomeHandler:");
}

id objc_msgSend_setPromptForPINHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptForPINHandler:");
}

id objc_msgSend_setPromptForPickerHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptForPickerHandler:");
}

id objc_msgSend_setPromptForRoomHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPromptForRoomHandler:");
}

id objc_msgSend_setProxCardNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxCardNavigationController:");
}

id objc_msgSend_setPurpose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurpose:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setReadsFromDepthBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadsFromDepthBuffer:");
}

id objc_msgSend_setReceivedItemHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedItemHandler:");
}

id objc_msgSend_setRemoteAppID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteAppID:");
}

id objc_msgSend_setRemoteLocalizedAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteLocalizedAppName:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemoteUnlocalizedAppName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteUnlocalizedAppName:");
}

id objc_msgSend_setRenderingOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRenderingOrder:");
}

id objc_msgSend_setRendersContinuously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRendersContinuously:");
}

id objc_msgSend_setRepairFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepairFlags:");
}

id objc_msgSend_setRepeatCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeatCount:");
}

id objc_msgSend_setRequestSSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestSSID:");
}

id objc_msgSend_setRooms_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRooms:");
}

id objc_msgSend_setRssiThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRssiThreshold:");
}

id objc_msgSend_setScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanRate:");
}

id objc_msgSend_setScannedCodeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScannedCodeHandler:");
}

id objc_msgSend_setScene_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScene:");
}

id objc_msgSend_setSceneTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSceneTime:");
}

id objc_msgSend_setSecondaryActionAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryActionAvailable:");
}

id objc_msgSend_setSecondaryActionStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryActionStyle:");
}

id objc_msgSend_setSecondaryActionTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryActionTitle:");
}

id objc_msgSend_setSecondaryActionUsesLegacyStyling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryActionUsesLegacyStyling:");
}

id objc_msgSend_setSessionUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionUUID:");
}

id objc_msgSend_setShadowColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowColor:");
}

id objc_msgSend_setShowsHorizontalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsHorizontalScrollIndicator:");
}

id objc_msgSend_setShowsVerticalScrollIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsVerticalScrollIndicator:");
}

id objc_msgSend_setSpokenNotificationsProxCardSeen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpokenNotificationsProxCardSeen");
}

id objc_msgSend_setState_animated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:animated:completionHandler:");
}

id objc_msgSend_setStateName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateName:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStatusBarHidden_withDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusBarHidden:withDuration:");
}

id objc_msgSend_setStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyle:");
}

id objc_msgSend_setSubtitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitle:");
}

id objc_msgSend_setSubtitleFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleFont:");
}

id objc_msgSend_setSubtitleLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleLabel:");
}

id objc_msgSend_setSubtitleText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleText:");
}

id objc_msgSend_setSwipeDismissible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwipeDismissible:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextChangedHandler:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTextField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextField:");
}

id objc_msgSend_setTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeout:");
}

id objc_msgSend_setTimeoutHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutHandler:");
}

id objc_msgSend_setTimingFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimingFunction:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitle_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:forState:");
}

id objc_msgSend_setTitleColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleColor:");
}

id objc_msgSend_setTitleFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleFont:");
}

id objc_msgSend_setTitleMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleMessage:");
}

id objc_msgSend_setTitleText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleText:");
}

id objc_msgSend_setTitleView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleView:");
}

id objc_msgSend_setToolbarHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToolbarHidden:");
}

id objc_msgSend_setToolbarItems_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToolbarItems:animated:");
}

id objc_msgSend_setTouchIDAuthenticationAllowableReuseDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchIDAuthenticationAllowableReuseDuration:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransitioningDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitioningDelegate:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setTransparency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransparency:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUnitsStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitsStyle:");
}

id objc_msgSend_setUpActions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpActions");
}

id objc_msgSend_setUpSubtitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpSubtitle");
}

id objc_msgSend_setUpTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpTitle");
}

id objc_msgSend_setUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsage:");
}

id objc_msgSend_setUserExplicitlyOptedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserExplicitlyOptedIn:");
}

id objc_msgSend_setUserExplicitlyOptedOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserExplicitlyOptedOut:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInteractionEnabled:");
}

id objc_msgSend_setUsesLegacyStyling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesLegacyStyling:");
}

id objc_msgSend_setUsesSceneTimeBase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesSceneTimeBase:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVertexFunctionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVertexFunctionName:");
}

id objc_msgSend_setVideoURL_sceneURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoURL:sceneURL:");
}

id objc_msgSend_setViewControllers_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewControllers:animated:");
}

id objc_msgSend_setViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewModel:");
}

id objc_msgSend_setViewType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewType:");
}

id objc_msgSend_setWebViewURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebViewURL:");
}

id objc_msgSend_setWells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWells:");
}

id objc_msgSend_setWritesToDepthBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWritesToDepthBuffer:");
}

id objc_msgSend_setXpcEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcEndpoint:");
}

id objc_msgSend_setupAssistantStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAssistantStyle");
}

id objc_msgSend_shadowColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shadowColor");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedPreferences");
}

id objc_msgSend_shouldPromptForAnnounceCallsForProductID_supportsInEarDetection_isUpsellFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPromptForAnnounceCallsForProductID:supportsInEarDetection:isUpsellFlow:");
}

id objc_msgSend_shouldPromptForAnnounceMessagesForProductID_isUpsellFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPromptForAnnounceMessagesForProductID:isUpsellFlow:");
}

id objc_msgSend_shouldShowSpatialAudioSetUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowSpatialAudioSetUp");
}

id objc_msgSend_showActivityIndicatorWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showActivityIndicatorWithStatus:");
}

id objc_msgSend_showBackupSyncUI_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBackupSyncUI:info:");
}

id objc_msgSend_showConfirmationRing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showConfirmationRing");
}

id objc_msgSend_showDoneUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDoneUI:");
}

id objc_msgSend_showDoneUI_completed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDoneUI:completed:");
}

id objc_msgSend_showDoneUI_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDoneUI:error:");
}

id objc_msgSend_showDoneUI_error_final_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showDoneUI:error:final:");
}

id objc_msgSend_showFinishUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showFinishUI");
}

id objc_msgSend_showHomePickerUI_defaultIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showHomePickerUI:defaultIndex:");
}

id objc_msgSend_showPairingUIWithFlags_throttleSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPairingUIWithFlags:throttleSeconds:");
}

id objc_msgSend_showPasswordPickerUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPasswordPickerUI");
}

id objc_msgSend_showPreparingUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPreparingUI");
}

id objc_msgSend_showProgressUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showProgressUI");
}

id objc_msgSend_showRoomPickerUI_firstSuggestedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showRoomPickerUI:firstSuggestedIndex:");
}

id objc_msgSend_showSpatialAudioTutorial(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSpatialAudioTutorial");
}

id objc_msgSend_showStartUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showStartUI");
}

id objc_msgSend_showStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showStatus:");
}

id objc_msgSend_showTryAgainUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showTryAgainUI");
}

id objc_msgSend_showWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showWiFi");
}

id objc_msgSend_showWithFlags_throttleSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showWithFlags:throttleSeconds:");
}

id objc_msgSend_siriControllerClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "siriControllerClass");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeToFit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeToFit");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "source");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAnimating");
}

id objc_msgSend_startWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithErrorHandler:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_stopAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAnimating");
}

id objc_msgSend_storyboardWithName_bundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storyboardWithName:bundle:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringFromTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromTimeInterval:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtitleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitleFont");
}

id objc_msgSend_subtitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitleText");
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superview");
}

id objc_msgSend_supportsAACPService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAACPService");
}

id objc_msgSend_supportsMobileAsset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsMobileAsset");
}

id objc_msgSend_swipeDismissible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "swipeDismissible");
}

id objc_msgSend_symbolCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "symbolCharacterSet");
}

id objc_msgSend_systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBackgroundColor");
}

id objc_msgSend_systemBlueColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBlueColor");
}

id objc_msgSend_systemExtraLightGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemExtraLightGrayColor");
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:weight:");
}

id objc_msgSend_systemFontOfSize_weight_design_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:weight:design:");
}

id objc_msgSend_systemGreenColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGreenColor");
}

id objc_msgSend_systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:");
}

id objc_msgSend_systemImageNamed_withConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:withConfiguration:");
}

id objc_msgSend_systemOrangeColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemOrangeColor");
}

id objc_msgSend_systemPurpleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPurpleColor");
}

id objc_msgSend_systemRedColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRedColor");
}

id objc_msgSend_systemVersions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemVersions");
}

id objc_msgSend_tagCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagCount");
}

id objc_msgSend_targetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetID");
}

id objc_msgSend_test(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "test");
}

id objc_msgSend_testFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testFlags");
}

id objc_msgSend_testMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testMode");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textField(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textField");
}

id objc_msgSend_textViewWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textViewWithStyle:");
}

id objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_titleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleColor");
}

id objc_msgSend_titleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleFont");
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleLabel");
}

id objc_msgSend_titleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleText");
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topAnchor");
}

id objc_msgSend_topViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topViewController");
}

id objc_msgSend_touchDelayActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDelayActive");
}

id objc_msgSend_tracksWithMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tracksWithMediaType:");
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trailingAnchor");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_traitCollectionWithHorizontalSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionWithHorizontalSizeClass:");
}

id objc_msgSend_traitCollectionWithPreferredContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionWithPreferredContentSizeCategory:");
}

id objc_msgSend_transitionCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionCoordinator");
}

id objc_msgSend_transitionDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionDuration:");
}

id objc_msgSend_transitioningDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitioningDelegate");
}

id objc_msgSend_transparency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transparency");
}

id objc_msgSend_tryAgain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryAgain");
}

id objc_msgSend_tryPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tryPIN:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_uiActivatedWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiActivatedWithCompletion:");
}

id objc_msgSend_uiInvalidatedWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiInvalidatedWithCompletion:");
}

id objc_msgSend_uiOperationBegin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiOperationBegin");
}

id objc_msgSend_uiOperationEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiOperationEnd");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_updateAnnounceCallsStateForUserOptedIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAnnounceCallsStateForUserOptedIn");
}

id objc_msgSend_updateAppName_image_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAppName:image:");
}

id objc_msgSend_updateButtonText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateButtonText:");
}

id objc_msgSend_updateProductID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProductID:");
}

id objc_msgSend_updateRasterizationScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRasterizationScale:");
}

id objc_msgSend_updateScrollViewTopInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateScrollViewTopInset");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_urlRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlRequest");
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "user");
}

id objc_msgSend_userAgentHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userAgentHeader");
}

id objc_msgSend_userContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userContext");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_userInterfaceLayoutDirectionForSemanticContentAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceLayoutDirectionForSemanticContentAttribute:");
}

id objc_msgSend_username(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "username");
}

id objc_msgSend_videoSizePoints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "videoSizePoints");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewControllerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllerForKey:");
}

id objc_msgSend_viewControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewControllers");
}

id objc_msgSend_viewFetchContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewFetchContent");
}

id objc_msgSend_viewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewModel");
}

id objc_msgSend_viewModelForModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewModelForModel:");
}

id objc_msgSend_viewPresentStartViewControllerIfReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewPresentStartViewControllerIfReady");
}

id objc_msgSend_viewType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewType");
}

id objc_msgSend_viewUpdateAppInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewUpdateAppInfo");
}

id objc_msgSend_visibleViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleViewController");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widthAnchor");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_xpcEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "xpcEndpoint");
}
